import{S as CWt,i as wWt,s as AWt,e as a,k as l,w as F,t as o,M as LWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as yWt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Gtt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function xWt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,aL,Nf,Oe,We,ki,Pn,nL,Bn,Nn,sL,Si,In,lL,Ri,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),aL=o(")."),Nf=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),nL=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),sL=o(`, make sure its
`),Si=a("code"),In=o("config_class"),lL=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var DS=s(p);m=r(DS,"NewModelConfig"),DS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var GS=s(yi);Bf=r(GS,"model_type"),GS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var OS=s(xi);$i=r(OS,'"new-model"'),OS.forEach(t),aL=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),nL=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var VS=s(Bn);Nn=r(VS,"PreTrainedModel"),VS.forEach(t),sL=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var qf=s(Si);In=r(qf,"config_class"),qf.forEach(t),lL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var XS=s(Ri);If=r(XS,"NewModelConfig"),XS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Bf),e(g,lt),e(g,xi),e(xi,$i),e(g,aL),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,nL),e(Oe,Bn),e(Bn,Nn),e(Oe,sL),e(Oe,Si),e(Si,In),e(Oe,lL),e(Oe,Ri),e(Ri,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,aL,Nf,Oe,We,ki,Pn,nL,Bn,Nn,sL,Si,In,lL,Ri,If,Sa,He,Ae,DS,Pi,GS,OS,wo,Ra,VS,qf,XS,xHe,hXe,Bi,jf,Pae,iL,$He,Bae,kHe,pXe,qn,SHe,Nae,RHe,PHe,Iae,BHe,NHe,_Xe,dL,uXe,zS,IHe,bXe,Df,vXe,Ni,Gf,qae,cL,qHe,jae,jHe,FXe,Ao,fL,DHe,mL,GHe,QS,OHe,VHe,XHe,gL,zHe,Dae,QHe,WHe,HHe,Lr,hL,UHe,Gae,JHe,YHe,Ii,KHe,Oae,ZHe,eUe,Vae,oUe,rUe,tUe,A,Of,Xae,aUe,nUe,WS,sUe,lUe,iUe,Vf,zae,dUe,cUe,HS,fUe,mUe,gUe,Xf,Qae,hUe,pUe,US,_Ue,uUe,bUe,zf,Wae,vUe,FUe,JS,TUe,MUe,EUe,Qf,Hae,CUe,wUe,YS,AUe,LUe,yUe,Wf,Uae,xUe,$Ue,KS,kUe,SUe,RUe,Hf,Jae,PUe,BUe,ZS,NUe,IUe,qUe,Uf,Yae,jUe,DUe,eR,GUe,OUe,VUe,Jf,Kae,XUe,zUe,oR,QUe,WUe,HUe,Yf,Zae,UUe,JUe,rR,YUe,KUe,ZUe,Kf,ene,eJe,oJe,tR,rJe,tJe,aJe,Zf,one,nJe,sJe,aR,lJe,iJe,dJe,em,rne,cJe,fJe,nR,mJe,gJe,hJe,om,tne,pJe,_Je,sR,uJe,bJe,vJe,rm,ane,FJe,TJe,lR,MJe,EJe,CJe,tm,nne,wJe,AJe,iR,LJe,yJe,xJe,am,sne,$Je,kJe,dR,SJe,RJe,PJe,nm,lne,BJe,NJe,cR,IJe,qJe,jJe,sm,ine,DJe,GJe,fR,OJe,VJe,XJe,lm,dne,zJe,QJe,mR,WJe,HJe,UJe,im,cne,JJe,YJe,gR,KJe,ZJe,eYe,dm,fne,oYe,rYe,hR,tYe,aYe,nYe,cm,mne,sYe,lYe,pR,iYe,dYe,cYe,fm,gne,fYe,mYe,_R,gYe,hYe,pYe,mm,hne,_Ye,uYe,uR,bYe,vYe,FYe,gm,pne,TYe,MYe,bR,EYe,CYe,wYe,hm,_ne,AYe,LYe,vR,yYe,xYe,$Ye,pm,une,kYe,SYe,FR,RYe,PYe,BYe,_m,bne,NYe,IYe,TR,qYe,jYe,DYe,um,vne,GYe,OYe,MR,VYe,XYe,zYe,bm,Fne,QYe,WYe,ER,HYe,UYe,JYe,vm,Tne,YYe,KYe,CR,ZYe,eKe,oKe,Fm,Mne,rKe,tKe,wR,aKe,nKe,sKe,Tm,Ene,lKe,iKe,AR,dKe,cKe,fKe,Mm,Cne,mKe,gKe,LR,hKe,pKe,_Ke,Em,wne,uKe,bKe,yR,vKe,FKe,TKe,Cm,Ane,MKe,EKe,xR,CKe,wKe,AKe,wm,Lne,LKe,yKe,$R,xKe,$Ke,kKe,Am,yne,SKe,RKe,kR,PKe,BKe,NKe,Lm,xne,IKe,qKe,SR,jKe,DKe,GKe,ym,$ne,OKe,VKe,RR,XKe,zKe,QKe,xm,kne,WKe,HKe,PR,UKe,JKe,YKe,$m,Sne,KKe,ZKe,BR,eZe,oZe,rZe,km,Rne,tZe,aZe,NR,nZe,sZe,lZe,Sm,Pne,iZe,dZe,IR,cZe,fZe,mZe,Rm,Bne,gZe,hZe,qR,pZe,_Ze,uZe,Pm,Nne,bZe,vZe,jR,FZe,TZe,MZe,Bm,Ine,EZe,CZe,DR,wZe,AZe,LZe,Nm,qne,yZe,xZe,GR,$Ze,kZe,SZe,Im,jne,RZe,PZe,OR,BZe,NZe,IZe,qm,Dne,qZe,jZe,VR,DZe,GZe,OZe,jm,Gne,VZe,XZe,XR,zZe,QZe,WZe,Dm,One,HZe,UZe,zR,JZe,YZe,KZe,Gm,Vne,ZZe,eeo,QR,oeo,reo,teo,Om,Xne,aeo,neo,WR,seo,leo,ieo,Vm,zne,deo,ceo,HR,feo,meo,geo,Xm,Qne,heo,peo,UR,_eo,ueo,beo,zm,Wne,veo,Feo,JR,Teo,Meo,Eeo,Qm,Hne,Ceo,weo,YR,Aeo,Leo,yeo,Wm,Une,xeo,$eo,KR,keo,Seo,Reo,Hm,Jne,Peo,Beo,ZR,Neo,Ieo,qeo,Um,Yne,jeo,Deo,eP,Geo,Oeo,Veo,Jm,Kne,Xeo,zeo,oP,Qeo,Weo,Heo,Ym,Zne,Ueo,Jeo,rP,Yeo,Keo,Zeo,Km,ese,eoo,ooo,tP,roo,too,aoo,Zm,ose,noo,soo,aP,loo,ioo,doo,eg,rse,coo,foo,nP,moo,goo,hoo,og,tse,poo,_oo,sP,uoo,boo,voo,rg,ase,Foo,Too,lP,Moo,Eoo,Coo,tg,nse,woo,Aoo,iP,Loo,yoo,xoo,ag,sse,$oo,koo,dP,Soo,Roo,Poo,ng,lse,Boo,Noo,cP,Ioo,qoo,joo,sg,ise,Doo,Goo,fP,Ooo,Voo,Xoo,lg,dse,zoo,Qoo,mP,Woo,Hoo,Uoo,ig,cse,Joo,Yoo,gP,Koo,Zoo,ero,dg,fse,oro,rro,hP,tro,aro,nro,cg,mse,sro,lro,pP,iro,dro,cro,fg,gse,fro,mro,_P,gro,hro,pro,mg,hse,_ro,uro,uP,bro,vro,Fro,gg,pse,Tro,Mro,bP,Ero,Cro,wro,hg,_se,Aro,Lro,vP,yro,xro,$ro,pg,use,kro,Sro,FP,Rro,Pro,Bro,_g,bse,Nro,Iro,TP,qro,jro,Dro,ug,vse,Gro,Oro,MP,Vro,Xro,zro,bg,Fse,Qro,Wro,EP,Hro,Uro,Jro,vg,Tse,Yro,Kro,CP,Zro,eto,oto,Fg,Mse,rto,tto,wP,ato,nto,sto,Tg,Ese,lto,ito,AP,dto,cto,fto,Mg,Cse,mto,gto,LP,hto,pto,_to,Eg,wse,uto,bto,yP,vto,Fto,Tto,Cg,Ase,Mto,Eto,xP,Cto,wto,Ato,wg,Lse,Lto,yto,$P,xto,$to,kto,Ag,yse,Sto,Rto,kP,Pto,Bto,Nto,Lg,xse,Ito,qto,SP,jto,Dto,Gto,yg,$se,Oto,Vto,RP,Xto,zto,Qto,xg,kse,Wto,Hto,PP,Uto,Jto,Yto,$g,Sse,Kto,Zto,BP,eao,oao,rao,kg,Rse,tao,aao,NP,nao,sao,lao,Sg,Pse,iao,dao,IP,cao,fao,mao,Rg,Bse,gao,hao,qP,pao,_ao,uao,Pg,Nse,bao,vao,jP,Fao,Tao,Mao,Bg,Ise,Eao,Cao,DP,wao,Aao,Lao,Ng,qse,yao,xao,GP,$ao,kao,Sao,Ig,jse,Rao,Pao,OP,Bao,Nao,Iao,qg,Dse,qao,jao,VP,Dao,Gao,Oao,jg,Gse,Vao,Xao,XP,zao,Qao,Wao,Dg,Ose,Hao,Uao,zP,Jao,Yao,Kao,Gg,Vse,Zao,eno,QP,ono,rno,tno,Og,Xse,ano,nno,WP,sno,lno,ino,Vg,zse,dno,cno,HP,fno,mno,gno,Xg,Qse,hno,pno,UP,_no,uno,bno,zg,Wse,vno,Fno,JP,Tno,Mno,Eno,Qg,Hse,Cno,wno,YP,Ano,Lno,yno,Wg,Use,xno,$no,KP,kno,Sno,Rno,Hg,Jse,Pno,Bno,ZP,Nno,Ino,qno,Ug,Yse,jno,Dno,eB,Gno,Ono,Vno,Jg,Kse,Xno,zno,oB,Qno,Wno,Hno,Yg,Zse,Uno,Jno,rB,Yno,Kno,Zno,Kg,eso,Zg,pL,oso,ele,rso,TXe,qi,eh,ole,_L,tso,rle,aso,MXe,Lo,uL,nso,bL,sso,tB,lso,iso,dso,vL,cso,tle,fso,mso,gso,yr,FL,hso,ale,pso,_so,Pa,uso,nle,bso,vso,sle,Fso,Tso,lle,Mso,Eso,Cso,k,jn,ile,wso,Aso,aB,Lso,yso,nB,xso,$so,kso,Dn,dle,Sso,Rso,sB,Pso,Bso,lB,Nso,Iso,qso,Gn,cle,jso,Dso,iB,Gso,Oso,dB,Vso,Xso,zso,oh,fle,Qso,Wso,cB,Hso,Uso,Jso,On,mle,Yso,Kso,fB,Zso,elo,mB,olo,rlo,tlo,rh,gle,alo,nlo,gB,slo,llo,ilo,th,hle,dlo,clo,hB,flo,mlo,glo,ah,ple,hlo,plo,pB,_lo,ulo,blo,Vn,_le,vlo,Flo,_B,Tlo,Mlo,uB,Elo,Clo,wlo,Xn,ule,Alo,Llo,bB,ylo,xlo,vB,$lo,klo,Slo,zn,ble,Rlo,Plo,FB,Blo,Nlo,TB,Ilo,qlo,jlo,nh,vle,Dlo,Glo,MB,Olo,Vlo,Xlo,sh,Fle,zlo,Qlo,EB,Wlo,Hlo,Ulo,lh,Tle,Jlo,Ylo,CB,Klo,Zlo,eio,Qn,Mle,oio,rio,wB,tio,aio,AB,nio,sio,lio,ih,Ele,iio,dio,LB,cio,fio,mio,Wn,Cle,gio,hio,yB,pio,_io,xB,uio,bio,vio,Hn,wle,Fio,Tio,$B,Mio,Eio,kB,Cio,wio,Aio,Un,Ale,Lio,yio,SB,xio,$io,RB,kio,Sio,Rio,Jn,Lle,Pio,Bio,PB,Nio,Iio,BB,qio,jio,Dio,dh,yle,Gio,Oio,NB,Vio,Xio,zio,Yn,xle,Qio,Wio,IB,Hio,Uio,qB,Jio,Yio,Kio,Kn,$le,Zio,edo,jB,odo,rdo,DB,tdo,ado,ndo,Zn,kle,sdo,ldo,GB,ido,ddo,OB,cdo,fdo,mdo,es,Sle,gdo,hdo,VB,pdo,_do,XB,udo,bdo,vdo,os,Rle,Fdo,Tdo,zB,Mdo,Edo,QB,Cdo,wdo,Ado,rs,Ple,Ldo,ydo,WB,xdo,$do,HB,kdo,Sdo,Rdo,ch,Ble,Pdo,Bdo,UB,Ndo,Ido,qdo,ts,Nle,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,fh,Ile,Qdo,Wdo,KB,Hdo,Udo,Jdo,as,qle,Ydo,Kdo,ZB,Zdo,eco,eN,oco,rco,tco,ns,jle,aco,nco,oN,sco,lco,rN,ico,dco,cco,ss,Dle,fco,mco,tN,gco,hco,aN,pco,_co,uco,mh,Gle,bco,vco,nN,Fco,Tco,Mco,ls,Ole,Eco,Cco,sN,wco,Aco,lN,Lco,yco,xco,is,Vle,$co,kco,iN,Sco,Rco,dN,Pco,Bco,Nco,ds,Xle,Ico,qco,cN,jco,Dco,fN,Gco,Oco,Vco,gh,zle,Xco,zco,mN,Qco,Wco,Hco,cs,Qle,Uco,Jco,gN,Yco,Kco,hN,Zco,efo,ofo,fs,Wle,rfo,tfo,pN,afo,nfo,_N,sfo,lfo,ifo,ms,Hle,dfo,cfo,uN,ffo,mfo,bN,gfo,hfo,pfo,gs,Ule,_fo,ufo,vN,bfo,vfo,FN,Ffo,Tfo,Mfo,hs,Jle,Efo,Cfo,TN,wfo,Afo,MN,Lfo,yfo,xfo,ps,Yle,$fo,kfo,EN,Sfo,Rfo,CN,Pfo,Bfo,Nfo,_s,Kle,Ifo,qfo,wN,jfo,Dfo,AN,Gfo,Ofo,Vfo,us,Zle,Xfo,zfo,LN,Qfo,Wfo,yN,Hfo,Ufo,Jfo,hh,eie,Yfo,Kfo,xN,Zfo,emo,omo,bs,oie,rmo,tmo,$N,amo,nmo,kN,smo,lmo,imo,ph,rie,dmo,cmo,SN,fmo,mmo,gmo,_h,tie,hmo,pmo,RN,_mo,umo,bmo,vs,aie,vmo,Fmo,PN,Tmo,Mmo,BN,Emo,Cmo,wmo,Fs,nie,Amo,Lmo,NN,ymo,xmo,IN,$mo,kmo,Smo,Ts,sie,Rmo,Pmo,qN,Bmo,Nmo,jN,Imo,qmo,jmo,uh,lie,Dmo,Gmo,DN,Omo,Vmo,Xmo,Ms,iie,zmo,Qmo,GN,Wmo,Hmo,ON,Umo,Jmo,Ymo,Es,die,Kmo,Zmo,VN,ego,ogo,XN,rgo,tgo,ago,Cs,cie,ngo,sgo,zN,lgo,igo,QN,dgo,cgo,fgo,ws,fie,mgo,ggo,WN,hgo,pgo,HN,_go,ugo,bgo,As,mie,vgo,Fgo,UN,Tgo,Mgo,JN,Ego,Cgo,wgo,Ls,gie,Ago,Lgo,YN,ygo,xgo,KN,$go,kgo,Sgo,ys,hie,Rgo,Pgo,ZN,Bgo,Ngo,eI,Igo,qgo,jgo,xs,pie,Dgo,Ggo,oI,Ogo,Vgo,rI,Xgo,zgo,Qgo,bh,_ie,Wgo,Hgo,tI,Ugo,Jgo,Ygo,$s,uie,Kgo,Zgo,aI,eho,oho,nI,rho,tho,aho,vh,bie,nho,sho,sI,lho,iho,dho,Fh,vie,cho,fho,lI,mho,gho,hho,Th,Fie,pho,_ho,iI,uho,bho,vho,Mh,Tie,Fho,Tho,dI,Mho,Eho,Cho,ks,Mie,who,Aho,cI,Lho,yho,fI,xho,$ho,kho,Eh,Eie,Sho,Rho,mI,Pho,Bho,Nho,Ss,Cie,Iho,qho,gI,jho,Dho,hI,Gho,Oho,Vho,Rs,wie,Xho,zho,pI,Qho,Who,_I,Hho,Uho,Jho,Ps,Aie,Yho,Kho,uI,Zho,epo,bI,opo,rpo,tpo,Bs,Lie,apo,npo,vI,spo,lpo,FI,ipo,dpo,cpo,Ns,yie,fpo,mpo,TI,gpo,hpo,MI,ppo,_po,upo,Is,xie,bpo,vpo,EI,Fpo,Tpo,CI,Mpo,Epo,Cpo,Ch,$ie,wpo,Apo,wI,Lpo,ypo,xpo,wh,kie,$po,kpo,AI,Spo,Rpo,Ppo,qs,Sie,Bpo,Npo,LI,Ipo,qpo,yI,jpo,Dpo,Gpo,js,Rie,Opo,Vpo,xI,Xpo,zpo,$I,Qpo,Wpo,Hpo,Ds,Pie,Upo,Jpo,kI,Ypo,Kpo,SI,Zpo,e_o,o_o,Ah,Bie,r_o,t_o,RI,a_o,n_o,s_o,Lh,Nie,l_o,i_o,PI,d_o,c_o,f_o,yh,Iie,m_o,g_o,BI,h_o,p_o,__o,Gs,qie,u_o,b_o,NI,v_o,F_o,II,T_o,M_o,E_o,Os,jie,C_o,w_o,qI,A_o,L_o,jI,y_o,x_o,$_o,xh,Die,k_o,S_o,DI,R_o,P_o,B_o,$h,Gie,N_o,I_o,GI,q_o,j_o,D_o,kh,Oie,G_o,O_o,OI,V_o,X_o,z_o,Vs,Vie,Q_o,W_o,VI,H_o,U_o,XI,J_o,Y_o,K_o,Sh,Xie,Z_o,euo,zI,ouo,ruo,tuo,Rh,zie,auo,nuo,QI,suo,luo,iuo,Xs,Qie,duo,cuo,WI,fuo,muo,HI,guo,huo,puo,zs,Wie,_uo,uuo,UI,buo,vuo,JI,Fuo,Tuo,Muo,Qs,Hie,Euo,Cuo,YI,wuo,Auo,KI,Luo,yuo,xuo,Ws,Uie,$uo,kuo,ZI,Suo,Ruo,eq,Puo,Buo,Nuo,Ph,Iuo,Bh,TL,quo,Jie,juo,EXe,ji,Nh,Yie,ML,Duo,Kie,Guo,CXe,yo,EL,Ouo,CL,Vuo,oq,Xuo,zuo,Quo,wL,Wuo,Zie,Huo,Uuo,Juo,Ue,AL,Yuo,ede,Kuo,Zuo,Ba,e1o,ode,o1o,r1o,rde,t1o,a1o,tde,n1o,s1o,l1o,Y,Ih,ade,i1o,d1o,rq,c1o,f1o,m1o,qh,nde,g1o,h1o,tq,p1o,_1o,u1o,jh,sde,b1o,v1o,aq,F1o,T1o,M1o,Dh,lde,E1o,C1o,nq,w1o,A1o,L1o,Gh,ide,y1o,x1o,sq,$1o,k1o,S1o,Oh,dde,R1o,P1o,lq,B1o,N1o,I1o,Vh,cde,q1o,j1o,iq,D1o,G1o,O1o,Xh,fde,V1o,X1o,dq,z1o,Q1o,W1o,zh,mde,H1o,U1o,cq,J1o,Y1o,K1o,Qh,gde,Z1o,e2o,fq,o2o,r2o,t2o,Wh,hde,a2o,n2o,mq,s2o,l2o,i2o,Hh,pde,d2o,c2o,gq,f2o,m2o,g2o,Uh,_de,h2o,p2o,hq,_2o,u2o,b2o,Jh,ude,v2o,F2o,pq,T2o,M2o,E2o,Yh,bde,C2o,w2o,_q,A2o,L2o,y2o,Kh,vde,x2o,$2o,uq,k2o,S2o,R2o,Zh,Fde,P2o,B2o,bq,N2o,I2o,q2o,ep,Tde,j2o,D2o,vq,G2o,O2o,V2o,op,Mde,X2o,z2o,Fq,Q2o,W2o,H2o,rp,Ede,U2o,J2o,Tq,Y2o,K2o,Z2o,tp,Cde,ebo,obo,Mq,rbo,tbo,abo,ap,wde,nbo,sbo,Eq,lbo,ibo,dbo,np,Ade,cbo,fbo,Cq,mbo,gbo,hbo,sp,Lde,pbo,_bo,wq,ubo,bbo,vbo,lp,yde,Fbo,Tbo,Aq,Mbo,Ebo,Cbo,ip,xde,wbo,Abo,Lq,Lbo,ybo,xbo,dp,$de,$bo,kbo,yq,Sbo,Rbo,Pbo,cp,kde,Bbo,Nbo,xq,Ibo,qbo,jbo,fp,Sde,Dbo,Gbo,$q,Obo,Vbo,Xbo,mp,Rde,zbo,Qbo,kq,Wbo,Hbo,Ubo,gp,Pde,Jbo,Ybo,Sq,Kbo,Zbo,e3o,hp,Bde,o3o,r3o,Rq,t3o,a3o,n3o,pp,Nde,s3o,l3o,Pq,i3o,d3o,c3o,_p,Ide,f3o,m3o,Bq,g3o,h3o,p3o,up,_3o,bp,u3o,vp,LL,b3o,qde,v3o,wXe,Di,Fp,jde,yL,F3o,Dde,T3o,AXe,xo,xL,M3o,$L,E3o,Nq,C3o,w3o,A3o,kL,L3o,Gde,y3o,x3o,$3o,Je,SL,k3o,Ode,S3o,R3o,Gi,P3o,Vde,B3o,N3o,Xde,I3o,q3o,j3o,pe,Tp,zde,D3o,G3o,Iq,O3o,V3o,X3o,Mp,Qde,z3o,Q3o,Wde,W3o,H3o,U3o,Ep,Hde,J3o,Y3o,qq,K3o,Z3o,evo,Cp,Ude,ovo,rvo,jq,tvo,avo,nvo,wp,Jde,svo,lvo,Dq,ivo,dvo,cvo,Ap,Yde,fvo,mvo,Gq,gvo,hvo,pvo,Lp,Kde,_vo,uvo,Oq,bvo,vvo,Fvo,yp,Zde,Tvo,Mvo,Vq,Evo,Cvo,wvo,xp,ece,Avo,Lvo,Xq,yvo,xvo,$vo,$p,oce,kvo,Svo,zq,Rvo,Pvo,Bvo,kp,rce,Nvo,Ivo,Qq,qvo,jvo,Dvo,Sp,tce,Gvo,Ovo,Wq,Vvo,Xvo,zvo,Rp,ace,Qvo,Wvo,Hq,Hvo,Uvo,Jvo,Pp,nce,Yvo,Kvo,Uq,Zvo,eFo,oFo,Bp,sce,rFo,tFo,Jq,aFo,nFo,sFo,Np,lce,lFo,iFo,Yq,dFo,cFo,fFo,Ip,ice,mFo,gFo,Kq,hFo,pFo,_Fo,qp,dce,uFo,bFo,Zq,vFo,FFo,TFo,jp,MFo,Dp,EFo,Gp,RL,CFo,cce,wFo,LXe,Oi,Op,fce,PL,AFo,mce,LFo,yXe,$o,BL,yFo,Vi,xFo,ej,$Fo,kFo,oj,SFo,RFo,PFo,NL,BFo,gce,NFo,IFo,qFo,it,IL,jFo,hce,DFo,GFo,Xi,OFo,pce,VFo,XFo,rj,zFo,QFo,WFo,Vp,HFo,Ye,qL,UFo,_ce,JFo,YFo,Na,KFo,uce,ZFo,eTo,bce,oTo,rTo,vce,tTo,aTo,nTo,y,Xp,Fce,sTo,lTo,tj,iTo,dTo,cTo,zp,Tce,fTo,mTo,aj,gTo,hTo,pTo,Qp,Mce,_To,uTo,nj,bTo,vTo,FTo,Wp,Ece,TTo,MTo,sj,ETo,CTo,wTo,Hp,Cce,ATo,LTo,lj,yTo,xTo,$To,Up,wce,kTo,STo,ij,RTo,PTo,BTo,Jp,Ace,NTo,ITo,dj,qTo,jTo,DTo,Yp,Lce,GTo,OTo,cj,VTo,XTo,zTo,Kp,yce,QTo,WTo,fj,HTo,UTo,JTo,Zp,xce,YTo,KTo,mj,ZTo,e8o,o8o,e_,$ce,r8o,t8o,gj,a8o,n8o,s8o,o_,kce,l8o,i8o,hj,d8o,c8o,f8o,r_,Sce,m8o,g8o,pj,h8o,p8o,_8o,t_,Rce,u8o,b8o,_j,v8o,F8o,T8o,a_,Pce,M8o,E8o,uj,C8o,w8o,A8o,n_,Bce,L8o,y8o,bj,x8o,$8o,k8o,s_,Nce,S8o,R8o,vj,P8o,B8o,N8o,l_,Ice,I8o,q8o,Fj,j8o,D8o,G8o,i_,qce,O8o,V8o,Tj,X8o,z8o,Q8o,d_,jce,W8o,H8o,Mj,U8o,J8o,Y8o,c_,Dce,K8o,Z8o,Ej,eMo,oMo,rMo,f_,Gce,tMo,aMo,Cj,nMo,sMo,lMo,m_,Oce,iMo,dMo,wj,cMo,fMo,mMo,g_,Vce,gMo,hMo,Aj,pMo,_Mo,uMo,h_,Xce,bMo,vMo,Lj,FMo,TMo,MMo,p_,zce,EMo,CMo,yj,wMo,AMo,LMo,__,Qce,yMo,xMo,xj,$Mo,kMo,SMo,u_,Wce,RMo,PMo,$j,BMo,NMo,IMo,b_,Hce,qMo,jMo,kj,DMo,GMo,OMo,v_,Uce,VMo,XMo,Sj,zMo,QMo,WMo,F_,Jce,HMo,UMo,Rj,JMo,YMo,KMo,T_,Yce,ZMo,e4o,Pj,o4o,r4o,t4o,M_,Kce,a4o,n4o,Bj,s4o,l4o,i4o,E_,Zce,d4o,c4o,Nj,f4o,m4o,g4o,Hs,efe,h4o,p4o,Ij,_4o,u4o,qj,b4o,v4o,F4o,C_,ofe,T4o,M4o,jj,E4o,C4o,w4o,w_,rfe,A4o,L4o,Dj,y4o,x4o,$4o,A_,tfe,k4o,S4o,Gj,R4o,P4o,B4o,L_,afe,N4o,I4o,Oj,q4o,j4o,D4o,y_,nfe,G4o,O4o,Vj,V4o,X4o,z4o,x_,sfe,Q4o,W4o,Xj,H4o,U4o,J4o,$_,lfe,Y4o,K4o,zj,Z4o,eEo,oEo,k_,ife,rEo,tEo,Qj,aEo,nEo,sEo,S_,dfe,lEo,iEo,Wj,dEo,cEo,fEo,R_,cfe,mEo,gEo,Hj,hEo,pEo,_Eo,P_,ffe,uEo,bEo,Uj,vEo,FEo,TEo,B_,mfe,MEo,EEo,Jj,CEo,wEo,AEo,N_,gfe,LEo,yEo,Yj,xEo,$Eo,kEo,I_,hfe,SEo,REo,Kj,PEo,BEo,NEo,q_,pfe,IEo,qEo,Zj,jEo,DEo,GEo,j_,_fe,OEo,VEo,eD,XEo,zEo,QEo,D_,ufe,WEo,HEo,oD,UEo,JEo,YEo,G_,bfe,KEo,ZEo,rD,eCo,oCo,rCo,O_,vfe,tCo,aCo,tD,nCo,sCo,lCo,V_,Ffe,iCo,dCo,aD,cCo,fCo,mCo,X_,Tfe,gCo,hCo,nD,pCo,_Co,uCo,z_,Mfe,bCo,vCo,sD,FCo,TCo,MCo,Q_,Efe,ECo,CCo,lD,wCo,ACo,LCo,W_,Cfe,yCo,xCo,iD,$Co,kCo,SCo,H_,wfe,RCo,PCo,dD,BCo,NCo,ICo,U_,Afe,qCo,jCo,cD,DCo,GCo,OCo,J_,Lfe,VCo,XCo,fD,zCo,QCo,WCo,Y_,yfe,HCo,UCo,mD,JCo,YCo,KCo,K_,xfe,ZCo,e5o,gD,o5o,r5o,t5o,Z_,$fe,a5o,n5o,hD,s5o,l5o,i5o,eu,kfe,d5o,c5o,pD,f5o,m5o,g5o,ou,Sfe,h5o,p5o,_D,_5o,u5o,b5o,ru,Rfe,v5o,F5o,uD,T5o,M5o,E5o,tu,Pfe,C5o,w5o,bD,A5o,L5o,y5o,au,Bfe,x5o,$5o,vD,k5o,S5o,R5o,nu,Nfe,P5o,B5o,FD,N5o,I5o,q5o,su,Ife,j5o,D5o,TD,G5o,O5o,V5o,lu,qfe,X5o,z5o,MD,Q5o,W5o,H5o,iu,jfe,U5o,J5o,ED,Y5o,K5o,Z5o,du,Dfe,e0o,o0o,CD,r0o,t0o,a0o,cu,Gfe,n0o,s0o,wD,l0o,i0o,d0o,fu,Ofe,c0o,f0o,AD,m0o,g0o,h0o,mu,Vfe,p0o,_0o,LD,u0o,b0o,v0o,gu,Xfe,F0o,T0o,yD,M0o,E0o,C0o,hu,zfe,w0o,A0o,xD,L0o,y0o,x0o,pu,Qfe,$0o,k0o,$D,S0o,R0o,P0o,_u,Wfe,B0o,N0o,kD,I0o,q0o,j0o,uu,Hfe,D0o,G0o,SD,O0o,V0o,X0o,bu,Ufe,z0o,Q0o,RD,W0o,H0o,U0o,vu,Jfe,J0o,Y0o,PD,K0o,Z0o,ewo,Fu,Yfe,owo,rwo,BD,two,awo,nwo,Tu,Kfe,swo,lwo,ND,iwo,dwo,cwo,Mu,Zfe,fwo,mwo,ID,gwo,hwo,pwo,Eu,eme,_wo,uwo,qD,bwo,vwo,Fwo,Cu,ome,Two,Mwo,jD,Ewo,Cwo,wwo,wu,rme,Awo,Lwo,DD,ywo,xwo,$wo,Au,tme,kwo,Swo,GD,Rwo,Pwo,Bwo,Lu,ame,Nwo,Iwo,OD,qwo,jwo,Dwo,yu,nme,Gwo,Owo,VD,Vwo,Xwo,zwo,xu,sme,Qwo,Wwo,XD,Hwo,Uwo,Jwo,$u,lme,Ywo,Kwo,zD,Zwo,eAo,oAo,ku,ime,rAo,tAo,QD,aAo,nAo,sAo,Su,dme,lAo,iAo,WD,dAo,cAo,fAo,Ru,cme,mAo,gAo,HD,hAo,pAo,_Ao,Pu,fme,uAo,bAo,UD,vAo,FAo,TAo,Bu,mme,MAo,EAo,JD,CAo,wAo,AAo,Nu,gme,LAo,yAo,YD,xAo,$Ao,kAo,Iu,hme,SAo,RAo,KD,PAo,BAo,NAo,qu,pme,IAo,qAo,ZD,jAo,DAo,GAo,ju,_me,OAo,VAo,eG,XAo,zAo,QAo,Du,ume,WAo,HAo,oG,UAo,JAo,YAo,Gu,bme,KAo,ZAo,rG,e6o,o6o,r6o,Ou,vme,t6o,a6o,tG,n6o,s6o,l6o,Vu,Fme,i6o,d6o,aG,c6o,f6o,m6o,Xu,Tme,g6o,h6o,nG,p6o,_6o,u6o,zu,Mme,b6o,v6o,sG,F6o,T6o,M6o,Qu,Eme,E6o,C6o,lG,w6o,A6o,L6o,Wu,y6o,Cme,x6o,$6o,wme,k6o,S6o,Hu,xXe,zi,Uu,Ame,jL,R6o,Lme,P6o,$Xe,ko,DL,B6o,Qi,N6o,iG,I6o,q6o,dG,j6o,D6o,G6o,GL,O6o,yme,V6o,X6o,z6o,dt,OL,Q6o,xme,W6o,H6o,Wi,U6o,$me,J6o,Y6o,cG,K6o,Z6o,e7o,Ju,o7o,Ke,VL,r7o,kme,t7o,a7o,Ia,n7o,Sme,s7o,l7o,Rme,i7o,d7o,Pme,c7o,f7o,m7o,G,Yu,Bme,g7o,h7o,fG,p7o,_7o,u7o,Ku,Nme,b7o,v7o,mG,F7o,T7o,M7o,Zu,Ime,E7o,C7o,gG,w7o,A7o,L7o,e1,qme,y7o,x7o,hG,$7o,k7o,S7o,o1,jme,R7o,P7o,pG,B7o,N7o,I7o,r1,Dme,q7o,j7o,_G,D7o,G7o,O7o,t1,Gme,V7o,X7o,uG,z7o,Q7o,W7o,a1,Ome,H7o,U7o,bG,J7o,Y7o,K7o,n1,Vme,Z7o,eLo,vG,oLo,rLo,tLo,s1,Xme,aLo,nLo,FG,sLo,lLo,iLo,l1,zme,dLo,cLo,TG,fLo,mLo,gLo,i1,Qme,hLo,pLo,MG,_Lo,uLo,bLo,d1,Wme,vLo,FLo,EG,TLo,MLo,ELo,c1,Hme,CLo,wLo,CG,ALo,LLo,yLo,f1,Ume,xLo,$Lo,wG,kLo,SLo,RLo,m1,Jme,PLo,BLo,AG,NLo,ILo,qLo,g1,Yme,jLo,DLo,LG,GLo,OLo,VLo,h1,Kme,XLo,zLo,yG,QLo,WLo,HLo,p1,Zme,ULo,JLo,xG,YLo,KLo,ZLo,_1,ege,eyo,oyo,$G,ryo,tyo,ayo,u1,oge,nyo,syo,kG,lyo,iyo,dyo,b1,rge,cyo,fyo,SG,myo,gyo,hyo,v1,tge,pyo,_yo,RG,uyo,byo,vyo,F1,age,Fyo,Tyo,PG,Myo,Eyo,Cyo,T1,nge,wyo,Ayo,BG,Lyo,yyo,xyo,M1,sge,$yo,kyo,NG,Syo,Ryo,Pyo,E1,lge,Byo,Nyo,IG,Iyo,qyo,jyo,C1,ige,Dyo,Gyo,qG,Oyo,Vyo,Xyo,w1,dge,zyo,Qyo,jG,Wyo,Hyo,Uyo,A1,cge,Jyo,Yyo,DG,Kyo,Zyo,e9o,L1,fge,o9o,r9o,GG,t9o,a9o,n9o,y1,mge,s9o,l9o,OG,i9o,d9o,c9o,x1,gge,f9o,m9o,VG,g9o,h9o,p9o,$1,hge,_9o,u9o,XG,b9o,v9o,F9o,k1,pge,T9o,M9o,zG,E9o,C9o,w9o,S1,_ge,A9o,L9o,QG,y9o,x9o,$9o,R1,uge,k9o,S9o,WG,R9o,P9o,B9o,P1,bge,N9o,I9o,HG,q9o,j9o,D9o,B1,vge,G9o,O9o,UG,V9o,X9o,z9o,N1,Fge,Q9o,W9o,JG,H9o,U9o,J9o,I1,Tge,Y9o,K9o,YG,Z9o,exo,oxo,q1,Mge,rxo,txo,KG,axo,nxo,sxo,j1,Ege,lxo,ixo,ZG,dxo,cxo,fxo,D1,Cge,mxo,gxo,eO,hxo,pxo,_xo,G1,wge,uxo,bxo,oO,vxo,Fxo,Txo,O1,Mxo,Age,Exo,Cxo,Lge,wxo,Axo,V1,kXe,Hi,X1,yge,XL,Lxo,xge,yxo,SXe,So,zL,xxo,Ui,$xo,rO,kxo,Sxo,tO,Rxo,Pxo,Bxo,QL,Nxo,$ge,Ixo,qxo,jxo,ct,WL,Dxo,kge,Gxo,Oxo,Ji,Vxo,Sge,Xxo,zxo,aO,Qxo,Wxo,Hxo,z1,Uxo,Ze,HL,Jxo,Rge,Yxo,Kxo,qa,Zxo,Pge,e$o,o$o,Bge,r$o,t$o,Nge,a$o,n$o,s$o,z,Q1,Ige,l$o,i$o,nO,d$o,c$o,f$o,W1,qge,m$o,g$o,sO,h$o,p$o,_$o,H1,jge,u$o,b$o,lO,v$o,F$o,T$o,U1,Dge,M$o,E$o,iO,C$o,w$o,A$o,J1,Gge,L$o,y$o,dO,x$o,$$o,k$o,Y1,Oge,S$o,R$o,cO,P$o,B$o,N$o,K1,Vge,I$o,q$o,fO,j$o,D$o,G$o,Z1,Xge,O$o,V$o,mO,X$o,z$o,Q$o,e2,zge,W$o,H$o,gO,U$o,J$o,Y$o,o2,Qge,K$o,Z$o,hO,eko,oko,rko,r2,Wge,tko,ako,pO,nko,sko,lko,t2,Hge,iko,dko,_O,cko,fko,mko,a2,Uge,gko,hko,uO,pko,_ko,uko,n2,Jge,bko,vko,bO,Fko,Tko,Mko,s2,Yge,Eko,Cko,vO,wko,Ako,Lko,l2,Kge,yko,xko,FO,$ko,kko,Sko,i2,Zge,Rko,Pko,TO,Bko,Nko,Iko,d2,ehe,qko,jko,MO,Dko,Gko,Oko,c2,ohe,Vko,Xko,EO,zko,Qko,Wko,f2,rhe,Hko,Uko,CO,Jko,Yko,Kko,m2,the,Zko,eSo,wO,oSo,rSo,tSo,g2,ahe,aSo,nSo,AO,sSo,lSo,iSo,h2,nhe,dSo,cSo,LO,fSo,mSo,gSo,p2,she,hSo,pSo,yO,_So,uSo,bSo,_2,lhe,vSo,FSo,xO,TSo,MSo,ESo,u2,ihe,CSo,wSo,$O,ASo,LSo,ySo,b2,dhe,xSo,$So,kO,kSo,SSo,RSo,v2,che,PSo,BSo,SO,NSo,ISo,qSo,F2,fhe,jSo,DSo,RO,GSo,OSo,VSo,T2,mhe,XSo,zSo,PO,QSo,WSo,HSo,M2,ghe,USo,JSo,BO,YSo,KSo,ZSo,E2,hhe,eRo,oRo,NO,rRo,tRo,aRo,C2,phe,nRo,sRo,IO,lRo,iRo,dRo,w2,_he,cRo,fRo,qO,mRo,gRo,hRo,A2,uhe,pRo,_Ro,jO,uRo,bRo,vRo,L2,bhe,FRo,TRo,DO,MRo,ERo,CRo,y2,vhe,wRo,ARo,GO,LRo,yRo,xRo,x2,Fhe,$Ro,kRo,OO,SRo,RRo,PRo,$2,The,BRo,NRo,VO,IRo,qRo,jRo,k2,Mhe,DRo,GRo,XO,ORo,VRo,XRo,S2,zRo,Ehe,QRo,WRo,Che,HRo,URo,R2,RXe,Yi,P2,whe,UL,JRo,Ahe,YRo,PXe,Ro,JL,KRo,Ki,ZRo,zO,ePo,oPo,QO,rPo,tPo,aPo,YL,nPo,Lhe,sPo,lPo,iPo,ft,KL,dPo,yhe,cPo,fPo,Zi,mPo,xhe,gPo,hPo,WO,pPo,_Po,uPo,B2,bPo,eo,ZL,vPo,$he,FPo,TPo,ja,MPo,khe,EPo,CPo,She,wPo,APo,Rhe,LPo,yPo,xPo,W,N2,Phe,$Po,kPo,HO,SPo,RPo,PPo,I2,Bhe,BPo,NPo,UO,IPo,qPo,jPo,q2,Nhe,DPo,GPo,JO,OPo,VPo,XPo,j2,Ihe,zPo,QPo,YO,WPo,HPo,UPo,D2,qhe,JPo,YPo,KO,KPo,ZPo,eBo,G2,jhe,oBo,rBo,ZO,tBo,aBo,nBo,O2,Dhe,sBo,lBo,eV,iBo,dBo,cBo,V2,Ghe,fBo,mBo,oV,gBo,hBo,pBo,X2,Ohe,_Bo,uBo,rV,bBo,vBo,FBo,z2,Vhe,TBo,MBo,tV,EBo,CBo,wBo,Q2,Xhe,ABo,LBo,aV,yBo,xBo,$Bo,W2,zhe,kBo,SBo,nV,RBo,PBo,BBo,H2,Qhe,NBo,IBo,sV,qBo,jBo,DBo,U2,Whe,GBo,OBo,lV,VBo,XBo,zBo,J2,Hhe,QBo,WBo,iV,HBo,UBo,JBo,Y2,Uhe,YBo,KBo,dV,ZBo,eNo,oNo,K2,Jhe,rNo,tNo,cV,aNo,nNo,sNo,Z2,Yhe,lNo,iNo,fV,dNo,cNo,fNo,eb,Khe,mNo,gNo,mV,hNo,pNo,_No,ob,Zhe,uNo,bNo,gV,vNo,FNo,TNo,rb,epe,MNo,ENo,hV,CNo,wNo,ANo,tb,ope,LNo,yNo,pV,xNo,$No,kNo,ab,rpe,SNo,RNo,_V,PNo,BNo,NNo,nb,tpe,INo,qNo,uV,jNo,DNo,GNo,sb,ape,ONo,VNo,bV,XNo,zNo,QNo,lb,npe,WNo,HNo,vV,UNo,JNo,YNo,ib,spe,KNo,ZNo,FV,eIo,oIo,rIo,db,lpe,tIo,aIo,TV,nIo,sIo,lIo,cb,ipe,iIo,dIo,MV,cIo,fIo,mIo,fb,dpe,gIo,hIo,EV,pIo,_Io,uIo,mb,cpe,bIo,vIo,CV,FIo,TIo,MIo,gb,fpe,EIo,CIo,wV,wIo,AIo,LIo,hb,mpe,yIo,xIo,AV,$Io,kIo,SIo,pb,gpe,RIo,PIo,hpe,BIo,NIo,IIo,_b,ppe,qIo,jIo,LV,DIo,GIo,OIo,ub,_pe,VIo,XIo,yV,zIo,QIo,WIo,bb,upe,HIo,UIo,xV,JIo,YIo,KIo,vb,bpe,ZIo,eqo,$V,oqo,rqo,tqo,Fb,aqo,vpe,nqo,sqo,Fpe,lqo,iqo,Tb,BXe,ed,Mb,Tpe,ey,dqo,Mpe,cqo,NXe,Po,oy,fqo,od,mqo,kV,gqo,hqo,SV,pqo,_qo,uqo,ry,bqo,Epe,vqo,Fqo,Tqo,mt,ty,Mqo,Cpe,Eqo,Cqo,rd,wqo,wpe,Aqo,Lqo,RV,yqo,xqo,$qo,Eb,kqo,oo,ay,Sqo,Ape,Rqo,Pqo,Da,Bqo,Lpe,Nqo,Iqo,ype,qqo,jqo,xpe,Dqo,Gqo,Oqo,fe,Cb,$pe,Vqo,Xqo,PV,zqo,Qqo,Wqo,wb,kpe,Hqo,Uqo,BV,Jqo,Yqo,Kqo,Ab,Spe,Zqo,ejo,NV,ojo,rjo,tjo,Lb,Rpe,ajo,njo,IV,sjo,ljo,ijo,yb,Ppe,djo,cjo,qV,fjo,mjo,gjo,xb,Bpe,hjo,pjo,jV,_jo,ujo,bjo,$b,Npe,vjo,Fjo,DV,Tjo,Mjo,Ejo,kb,Ipe,Cjo,wjo,GV,Ajo,Ljo,yjo,Sb,qpe,xjo,$jo,OV,kjo,Sjo,Rjo,Rb,jpe,Pjo,Bjo,VV,Njo,Ijo,qjo,Pb,Dpe,jjo,Djo,XV,Gjo,Ojo,Vjo,Bb,Gpe,Xjo,zjo,zV,Qjo,Wjo,Hjo,Nb,Ope,Ujo,Jjo,QV,Yjo,Kjo,Zjo,Ib,Vpe,eDo,oDo,WV,rDo,tDo,aDo,qb,Xpe,nDo,sDo,HV,lDo,iDo,dDo,jb,zpe,cDo,fDo,UV,mDo,gDo,hDo,Db,Qpe,pDo,_Do,JV,uDo,bDo,vDo,Gb,Wpe,FDo,TDo,YV,MDo,EDo,CDo,Ob,Hpe,wDo,ADo,KV,LDo,yDo,xDo,Vb,$Do,Upe,kDo,SDo,Jpe,RDo,PDo,Xb,IXe,td,zb,Ype,ny,BDo,Kpe,NDo,qXe,Bo,sy,IDo,ad,qDo,ZV,jDo,DDo,eX,GDo,ODo,VDo,ly,XDo,Zpe,zDo,QDo,WDo,gt,iy,HDo,e_e,UDo,JDo,nd,YDo,o_e,KDo,ZDo,oX,eGo,oGo,rGo,Qb,tGo,ro,dy,aGo,r_e,nGo,sGo,Ga,lGo,t_e,iGo,dGo,a_e,cGo,fGo,n_e,mGo,gGo,hGo,B,Wb,s_e,pGo,_Go,rX,uGo,bGo,vGo,Hb,l_e,FGo,TGo,tX,MGo,EGo,CGo,Ub,i_e,wGo,AGo,aX,LGo,yGo,xGo,Jb,d_e,$Go,kGo,nX,SGo,RGo,PGo,Yb,c_e,BGo,NGo,sX,IGo,qGo,jGo,Kb,f_e,DGo,GGo,lX,OGo,VGo,XGo,Zb,m_e,zGo,QGo,iX,WGo,HGo,UGo,e3,g_e,JGo,YGo,dX,KGo,ZGo,eOo,o3,h_e,oOo,rOo,cX,tOo,aOo,nOo,r3,p_e,sOo,lOo,fX,iOo,dOo,cOo,t3,__e,fOo,mOo,mX,gOo,hOo,pOo,a3,u_e,_Oo,uOo,gX,bOo,vOo,FOo,n3,b_e,TOo,MOo,hX,EOo,COo,wOo,s3,v_e,AOo,LOo,pX,yOo,xOo,$Oo,l3,F_e,kOo,SOo,_X,ROo,POo,BOo,i3,T_e,NOo,IOo,uX,qOo,jOo,DOo,d3,M_e,GOo,OOo,bX,VOo,XOo,zOo,c3,E_e,QOo,WOo,vX,HOo,UOo,JOo,f3,C_e,YOo,KOo,FX,ZOo,eVo,oVo,m3,w_e,rVo,tVo,TX,aVo,nVo,sVo,g3,A_e,lVo,iVo,MX,dVo,cVo,fVo,h3,L_e,mVo,gVo,EX,hVo,pVo,_Vo,p3,y_e,uVo,bVo,CX,vVo,FVo,TVo,_3,x_e,MVo,EVo,wX,CVo,wVo,AVo,u3,$_e,LVo,yVo,AX,xVo,$Vo,kVo,b3,k_e,SVo,RVo,LX,PVo,BVo,NVo,v3,S_e,IVo,qVo,yX,jVo,DVo,GVo,F3,R_e,OVo,VVo,xX,XVo,zVo,QVo,T3,P_e,WVo,HVo,$X,UVo,JVo,YVo,M3,B_e,KVo,ZVo,kX,eXo,oXo,rXo,E3,N_e,tXo,aXo,SX,nXo,sXo,lXo,C3,I_e,iXo,dXo,RX,cXo,fXo,mXo,w3,q_e,gXo,hXo,PX,pXo,_Xo,uXo,A3,j_e,bXo,vXo,BX,FXo,TXo,MXo,L3,D_e,EXo,CXo,NX,wXo,AXo,LXo,y3,G_e,yXo,xXo,IX,$Xo,kXo,SXo,x3,O_e,RXo,PXo,qX,BXo,NXo,IXo,$3,V_e,qXo,jXo,jX,DXo,GXo,OXo,k3,X_e,VXo,XXo,DX,zXo,QXo,WXo,S3,z_e,HXo,UXo,GX,JXo,YXo,KXo,R3,Q_e,ZXo,ezo,OX,ozo,rzo,tzo,P3,W_e,azo,nzo,VX,szo,lzo,izo,B3,H_e,dzo,czo,XX,fzo,mzo,gzo,N3,U_e,hzo,pzo,zX,_zo,uzo,bzo,I3,J_e,vzo,Fzo,QX,Tzo,Mzo,Ezo,q3,Y_e,Czo,wzo,WX,Azo,Lzo,yzo,j3,K_e,xzo,$zo,HX,kzo,Szo,Rzo,D3,Z_e,Pzo,Bzo,UX,Nzo,Izo,qzo,G3,eue,jzo,Dzo,JX,Gzo,Ozo,Vzo,O3,oue,Xzo,zzo,YX,Qzo,Wzo,Hzo,V3,rue,Uzo,Jzo,KX,Yzo,Kzo,Zzo,X3,eQo,tue,oQo,rQo,aue,tQo,aQo,z3,jXe,sd,Q3,nue,cy,nQo,sue,sQo,DXe,No,fy,lQo,ld,iQo,ZX,dQo,cQo,ez,fQo,mQo,gQo,my,hQo,lue,pQo,_Qo,uQo,ht,gy,bQo,iue,vQo,FQo,id,TQo,due,MQo,EQo,oz,CQo,wQo,AQo,W3,LQo,to,hy,yQo,cue,xQo,$Qo,Oa,kQo,fue,SQo,RQo,mue,PQo,BQo,gue,NQo,IQo,qQo,Z,H3,hue,jQo,DQo,rz,GQo,OQo,VQo,U3,pue,XQo,zQo,tz,QQo,WQo,HQo,J3,_ue,UQo,JQo,az,YQo,KQo,ZQo,Y3,uue,eWo,oWo,nz,rWo,tWo,aWo,K3,bue,nWo,sWo,sz,lWo,iWo,dWo,Z3,vue,cWo,fWo,lz,mWo,gWo,hWo,ev,Fue,pWo,_Wo,iz,uWo,bWo,vWo,ov,Tue,FWo,TWo,dz,MWo,EWo,CWo,rv,Mue,wWo,AWo,cz,LWo,yWo,xWo,tv,Eue,$Wo,kWo,fz,SWo,RWo,PWo,av,Cue,BWo,NWo,mz,IWo,qWo,jWo,nv,wue,DWo,GWo,gz,OWo,VWo,XWo,sv,Aue,zWo,QWo,hz,WWo,HWo,UWo,lv,Lue,JWo,YWo,pz,KWo,ZWo,eHo,iv,yue,oHo,rHo,_z,tHo,aHo,nHo,dv,xue,sHo,lHo,uz,iHo,dHo,cHo,cv,$ue,fHo,mHo,bz,gHo,hHo,pHo,fv,kue,_Ho,uHo,vz,bHo,vHo,FHo,mv,Sue,THo,MHo,Fz,EHo,CHo,wHo,gv,Rue,AHo,LHo,Tz,yHo,xHo,$Ho,hv,Pue,kHo,SHo,Mz,RHo,PHo,BHo,pv,Bue,NHo,IHo,Ez,qHo,jHo,DHo,_v,Nue,GHo,OHo,Cz,VHo,XHo,zHo,uv,Iue,QHo,WHo,wz,HHo,UHo,JHo,bv,que,YHo,KHo,Az,ZHo,eUo,oUo,vv,jue,rUo,tUo,Lz,aUo,nUo,sUo,Fv,Due,lUo,iUo,yz,dUo,cUo,fUo,Tv,Gue,mUo,gUo,xz,hUo,pUo,_Uo,Mv,Oue,uUo,bUo,$z,vUo,FUo,TUo,Ev,Vue,MUo,EUo,kz,CUo,wUo,AUo,Cv,LUo,Xue,yUo,xUo,zue,$Uo,kUo,wv,GXe,dd,Av,Que,py,SUo,Wue,RUo,OXe,Io,_y,PUo,cd,BUo,Sz,NUo,IUo,Rz,qUo,jUo,DUo,uy,GUo,Hue,OUo,VUo,XUo,pt,by,zUo,Uue,QUo,WUo,fd,HUo,Jue,UUo,JUo,Pz,YUo,KUo,ZUo,Lv,eJo,ao,vy,oJo,Yue,rJo,tJo,Va,aJo,Kue,nJo,sJo,Zue,lJo,iJo,e1e,dJo,cJo,fJo,qo,yv,o1e,mJo,gJo,Bz,hJo,pJo,_Jo,xv,r1e,uJo,bJo,Nz,vJo,FJo,TJo,$v,t1e,MJo,EJo,Iz,CJo,wJo,AJo,kv,a1e,LJo,yJo,qz,xJo,$Jo,kJo,Sv,n1e,SJo,RJo,jz,PJo,BJo,NJo,Rv,s1e,IJo,qJo,Dz,jJo,DJo,GJo,Pv,OJo,l1e,VJo,XJo,i1e,zJo,QJo,Bv,VXe,md,Nv,d1e,Fy,WJo,c1e,HJo,XXe,jo,Ty,UJo,gd,JJo,Gz,YJo,KJo,Oz,ZJo,eYo,oYo,My,rYo,f1e,tYo,aYo,nYo,_t,Ey,sYo,m1e,lYo,iYo,hd,dYo,g1e,cYo,fYo,Vz,mYo,gYo,hYo,Iv,pYo,no,Cy,_Yo,h1e,uYo,bYo,Xa,vYo,p1e,FYo,TYo,_1e,MYo,EYo,u1e,CYo,wYo,AYo,U,qv,b1e,LYo,yYo,Xz,xYo,$Yo,kYo,jv,v1e,SYo,RYo,zz,PYo,BYo,NYo,Dv,F1e,IYo,qYo,Qz,jYo,DYo,GYo,Gv,T1e,OYo,VYo,Wz,XYo,zYo,QYo,Ov,M1e,WYo,HYo,Hz,UYo,JYo,YYo,Vv,E1e,KYo,ZYo,Uz,eKo,oKo,rKo,Xv,C1e,tKo,aKo,Jz,nKo,sKo,lKo,zv,w1e,iKo,dKo,Yz,cKo,fKo,mKo,Qv,A1e,gKo,hKo,Kz,pKo,_Ko,uKo,Wv,L1e,bKo,vKo,Zz,FKo,TKo,MKo,Hv,y1e,EKo,CKo,eQ,wKo,AKo,LKo,Uv,x1e,yKo,xKo,oQ,$Ko,kKo,SKo,Jv,$1e,RKo,PKo,rQ,BKo,NKo,IKo,Yv,k1e,qKo,jKo,tQ,DKo,GKo,OKo,Kv,S1e,VKo,XKo,aQ,zKo,QKo,WKo,Zv,R1e,HKo,UKo,nQ,JKo,YKo,KKo,eF,P1e,ZKo,eZo,sQ,oZo,rZo,tZo,oF,B1e,aZo,nZo,lQ,sZo,lZo,iZo,rF,N1e,dZo,cZo,iQ,fZo,mZo,gZo,tF,I1e,hZo,pZo,dQ,_Zo,uZo,bZo,aF,q1e,vZo,FZo,cQ,TZo,MZo,EZo,nF,j1e,CZo,wZo,fQ,AZo,LZo,yZo,sF,D1e,xZo,$Zo,mQ,kZo,SZo,RZo,lF,G1e,PZo,BZo,gQ,NZo,IZo,qZo,iF,O1e,jZo,DZo,hQ,GZo,OZo,VZo,dF,V1e,XZo,zZo,pQ,QZo,WZo,HZo,cF,X1e,UZo,JZo,_Q,YZo,KZo,ZZo,fF,z1e,eer,oer,uQ,rer,ter,aer,mF,Q1e,ner,ser,bQ,ler,ier,der,gF,W1e,cer,fer,vQ,mer,ger,her,hF,H1e,per,_er,FQ,uer,ber,ver,pF,U1e,Fer,Ter,TQ,Mer,Eer,Cer,_F,J1e,wer,Aer,MQ,Ler,yer,xer,uF,Y1e,$er,ker,EQ,Ser,Rer,Per,bF,K1e,Ber,Ner,CQ,Ier,qer,jer,vF,Z1e,Der,Ger,wQ,Oer,Ver,Xer,FF,zer,e2e,Qer,Wer,o2e,Her,Uer,TF,zXe,pd,MF,r2e,wy,Jer,t2e,Yer,QXe,Do,Ay,Ker,_d,Zer,AQ,eor,oor,LQ,ror,tor,aor,Ly,nor,a2e,sor,lor,ior,ut,yy,dor,n2e,cor,mor,ud,gor,s2e,hor,por,yQ,_or,uor,bor,EF,vor,so,xy,For,l2e,Tor,Mor,za,Eor,i2e,Cor,wor,d2e,Aor,Lor,c2e,yor,xor,$or,V,CF,f2e,kor,Sor,xQ,Ror,Por,Bor,wF,m2e,Nor,Ior,$Q,qor,jor,Dor,AF,g2e,Gor,Oor,kQ,Vor,Xor,zor,LF,h2e,Qor,Wor,SQ,Hor,Uor,Jor,yF,p2e,Yor,Kor,RQ,Zor,err,orr,xF,_2e,rrr,trr,PQ,arr,nrr,srr,$F,u2e,lrr,irr,BQ,drr,crr,frr,kF,b2e,mrr,grr,NQ,hrr,prr,_rr,SF,v2e,urr,brr,IQ,vrr,Frr,Trr,RF,F2e,Mrr,Err,qQ,Crr,wrr,Arr,PF,T2e,Lrr,yrr,jQ,xrr,$rr,krr,BF,M2e,Srr,Rrr,DQ,Prr,Brr,Nrr,NF,E2e,Irr,qrr,GQ,jrr,Drr,Grr,IF,C2e,Orr,Vrr,OQ,Xrr,zrr,Qrr,qF,w2e,Wrr,Hrr,VQ,Urr,Jrr,Yrr,jF,A2e,Krr,Zrr,XQ,etr,otr,rtr,DF,L2e,ttr,atr,zQ,ntr,str,ltr,GF,y2e,itr,dtr,QQ,ctr,ftr,mtr,OF,x2e,gtr,htr,WQ,ptr,_tr,utr,VF,$2e,btr,vtr,HQ,Ftr,Ttr,Mtr,XF,k2e,Etr,Ctr,UQ,wtr,Atr,Ltr,zF,S2e,ytr,xtr,JQ,$tr,ktr,Str,QF,R2e,Rtr,Ptr,YQ,Btr,Ntr,Itr,WF,P2e,qtr,jtr,KQ,Dtr,Gtr,Otr,HF,B2e,Vtr,Xtr,ZQ,ztr,Qtr,Wtr,UF,N2e,Htr,Utr,eW,Jtr,Ytr,Ktr,JF,I2e,Ztr,ear,oW,oar,rar,tar,YF,q2e,aar,nar,rW,sar,lar,iar,KF,j2e,dar,car,tW,far,mar,gar,ZF,D2e,har,par,aW,_ar,uar,bar,eT,G2e,Far,Tar,nW,Mar,Ear,Car,oT,O2e,war,Aar,sW,Lar,yar,xar,rT,V2e,$ar,kar,lW,Sar,Rar,Par,tT,X2e,Bar,Nar,iW,Iar,qar,jar,aT,z2e,Dar,Gar,dW,Oar,Var,Xar,nT,Q2e,zar,Qar,cW,War,Har,Uar,sT,W2e,Jar,Yar,fW,Kar,Zar,enr,lT,H2e,onr,rnr,mW,tnr,anr,nnr,iT,U2e,snr,lnr,gW,inr,dnr,cnr,dT,J2e,fnr,mnr,hW,gnr,hnr,pnr,cT,Y2e,_nr,unr,pW,bnr,vnr,Fnr,fT,K2e,Tnr,Mnr,_W,Enr,Cnr,wnr,mT,Anr,Z2e,Lnr,ynr,ebe,xnr,$nr,gT,WXe,bd,hT,obe,$y,knr,rbe,Snr,HXe,Go,ky,Rnr,vd,Pnr,uW,Bnr,Nnr,bW,Inr,qnr,jnr,Sy,Dnr,tbe,Gnr,Onr,Vnr,bt,Ry,Xnr,abe,znr,Qnr,Fd,Wnr,nbe,Hnr,Unr,vW,Jnr,Ynr,Knr,pT,Znr,lo,Py,esr,sbe,osr,rsr,Qa,tsr,lbe,asr,nsr,ibe,ssr,lsr,dbe,isr,dsr,csr,cbe,_T,fbe,fsr,msr,FW,gsr,hsr,psr,uT,_sr,mbe,usr,bsr,gbe,vsr,Fsr,bT,UXe,Td,vT,hbe,By,Tsr,pbe,Msr,JXe,Oo,Ny,Esr,Md,Csr,TW,wsr,Asr,MW,Lsr,ysr,xsr,Iy,$sr,_be,ksr,Ssr,Rsr,vt,qy,Psr,ube,Bsr,Nsr,Ed,Isr,bbe,qsr,jsr,EW,Dsr,Gsr,Osr,FT,Vsr,io,jy,Xsr,vbe,zsr,Qsr,Wa,Wsr,Fbe,Hsr,Usr,Tbe,Jsr,Ysr,Mbe,Ksr,Zsr,elr,ve,TT,Ebe,olr,rlr,CW,tlr,alr,nlr,MT,Cbe,slr,llr,wW,ilr,dlr,clr,ET,wbe,flr,mlr,AW,glr,hlr,plr,CT,Abe,_lr,ulr,LW,blr,vlr,Flr,Us,Lbe,Tlr,Mlr,yW,Elr,Clr,xW,wlr,Alr,Llr,wT,ybe,ylr,xlr,$W,$lr,klr,Slr,Js,xbe,Rlr,Plr,kW,Blr,Nlr,SW,Ilr,qlr,jlr,AT,$be,Dlr,Glr,RW,Olr,Vlr,Xlr,Ft,kbe,zlr,Qlr,PW,Wlr,Hlr,BW,Ulr,Jlr,NW,Ylr,Klr,Zlr,LT,Sbe,eir,oir,IW,rir,tir,air,yT,Rbe,nir,sir,qW,lir,iir,dir,xT,Pbe,cir,fir,jW,mir,gir,hir,$T,Bbe,pir,_ir,DW,uir,bir,vir,kT,Nbe,Fir,Tir,GW,Mir,Eir,Cir,ST,Ibe,wir,Air,OW,Lir,yir,xir,RT,qbe,$ir,kir,VW,Sir,Rir,Pir,PT,Bir,jbe,Nir,Iir,Dbe,qir,jir,BT,YXe,Cd,NT,Gbe,Dy,Dir,Obe,Gir,KXe,Vo,Gy,Oir,wd,Vir,XW,Xir,zir,zW,Qir,Wir,Hir,Oy,Uir,Vbe,Jir,Yir,Kir,Tt,Vy,Zir,Xbe,edr,odr,Ad,rdr,zbe,tdr,adr,QW,ndr,sdr,ldr,IT,idr,co,Xy,ddr,Qbe,cdr,fdr,Ha,mdr,Wbe,gdr,hdr,Hbe,pdr,_dr,Ube,udr,bdr,vdr,Jbe,qT,Ybe,Fdr,Tdr,WW,Mdr,Edr,Cdr,jT,wdr,Kbe,Adr,Ldr,Zbe,ydr,xdr,DT,ZXe,Ld,GT,e3e,zy,$dr,o3e,kdr,eze,Xo,Qy,Sdr,yd,Rdr,HW,Pdr,Bdr,UW,Ndr,Idr,qdr,Wy,jdr,r3e,Ddr,Gdr,Odr,Mt,Hy,Vdr,t3e,Xdr,zdr,xd,Qdr,a3e,Wdr,Hdr,JW,Udr,Jdr,Ydr,OT,Kdr,fo,Uy,Zdr,n3e,ecr,ocr,Ua,rcr,s3e,tcr,acr,l3e,ncr,scr,i3e,lcr,icr,dcr,d3e,VT,c3e,ccr,fcr,YW,mcr,gcr,hcr,XT,pcr,f3e,_cr,ucr,m3e,bcr,vcr,zT,oze,$d,QT,g3e,Jy,Fcr,h3e,Tcr,rze,zo,Yy,Mcr,kd,Ecr,KW,Ccr,wcr,ZW,Acr,Lcr,ycr,Ky,xcr,p3e,$cr,kcr,Scr,Et,Zy,Rcr,_3e,Pcr,Bcr,Sd,Ncr,u3e,Icr,qcr,eH,jcr,Dcr,Gcr,WT,Ocr,mo,e9,Vcr,b3e,Xcr,zcr,Ja,Qcr,v3e,Wcr,Hcr,F3e,Ucr,Jcr,T3e,Ycr,Kcr,Zcr,Pe,HT,M3e,efr,ofr,oH,rfr,tfr,afr,UT,E3e,nfr,sfr,rH,lfr,ifr,dfr,JT,C3e,cfr,ffr,tH,mfr,gfr,hfr,YT,w3e,pfr,_fr,aH,ufr,bfr,vfr,KT,A3e,Ffr,Tfr,nH,Mfr,Efr,Cfr,ZT,L3e,wfr,Afr,sH,Lfr,yfr,xfr,e8,y3e,$fr,kfr,lH,Sfr,Rfr,Pfr,o8,x3e,Bfr,Nfr,iH,Ifr,qfr,jfr,r8,$3e,Dfr,Gfr,dH,Ofr,Vfr,Xfr,t8,zfr,k3e,Qfr,Wfr,S3e,Hfr,Ufr,a8,tze,Rd,n8,R3e,o9,Jfr,P3e,Yfr,aze,Qo,r9,Kfr,Pd,Zfr,cH,emr,omr,fH,rmr,tmr,amr,t9,nmr,B3e,smr,lmr,imr,Ct,a9,dmr,N3e,cmr,fmr,Bd,mmr,I3e,gmr,hmr,mH,pmr,_mr,umr,s8,bmr,go,n9,vmr,q3e,Fmr,Tmr,Ya,Mmr,j3e,Emr,Cmr,D3e,wmr,Amr,G3e,Lmr,ymr,xmr,rt,l8,O3e,$mr,kmr,gH,Smr,Rmr,Pmr,i8,V3e,Bmr,Nmr,hH,Imr,qmr,jmr,d8,X3e,Dmr,Gmr,pH,Omr,Vmr,Xmr,c8,z3e,zmr,Qmr,_H,Wmr,Hmr,Umr,f8,Q3e,Jmr,Ymr,uH,Kmr,Zmr,egr,m8,ogr,W3e,rgr,tgr,H3e,agr,ngr,g8,nze,Nd,h8,U3e,s9,sgr,J3e,lgr,sze,Wo,l9,igr,Id,dgr,bH,cgr,fgr,vH,mgr,ggr,hgr,i9,pgr,Y3e,_gr,ugr,bgr,wt,d9,vgr,K3e,Fgr,Tgr,qd,Mgr,Z3e,Egr,Cgr,FH,wgr,Agr,Lgr,p8,ygr,ho,c9,xgr,eve,$gr,kgr,Ka,Sgr,ove,Rgr,Pgr,rve,Bgr,Ngr,tve,Igr,qgr,jgr,Le,_8,ave,Dgr,Ggr,TH,Ogr,Vgr,Xgr,u8,nve,zgr,Qgr,MH,Wgr,Hgr,Ugr,b8,sve,Jgr,Ygr,EH,Kgr,Zgr,ehr,v8,lve,ohr,rhr,CH,thr,ahr,nhr,F8,ive,shr,lhr,wH,ihr,dhr,chr,T8,dve,fhr,mhr,AH,ghr,hhr,phr,M8,cve,_hr,uhr,LH,bhr,vhr,Fhr,E8,fve,Thr,Mhr,yH,Ehr,Chr,whr,C8,mve,Ahr,Lhr,xH,yhr,xhr,$hr,w8,gve,khr,Shr,$H,Rhr,Phr,Bhr,A8,Nhr,hve,Ihr,qhr,pve,jhr,Dhr,L8,lze,jd,y8,_ve,f9,Ghr,uve,Ohr,ize,Ho,m9,Vhr,Dd,Xhr,kH,zhr,Qhr,SH,Whr,Hhr,Uhr,g9,Jhr,bve,Yhr,Khr,Zhr,At,h9,epr,vve,opr,rpr,Gd,tpr,Fve,apr,npr,RH,spr,lpr,ipr,x8,dpr,po,p9,cpr,Tve,fpr,mpr,Za,gpr,Mve,hpr,ppr,Eve,_pr,upr,Cve,bpr,vpr,Fpr,_9,$8,wve,Tpr,Mpr,PH,Epr,Cpr,wpr,k8,Ave,Apr,Lpr,BH,ypr,xpr,$pr,S8,kpr,Lve,Spr,Rpr,yve,Ppr,Bpr,R8,dze,Od,P8,xve,u9,Npr,$ve,Ipr,cze,Uo,b9,qpr,Vd,jpr,NH,Dpr,Gpr,IH,Opr,Vpr,Xpr,v9,zpr,kve,Qpr,Wpr,Hpr,Lt,F9,Upr,Sve,Jpr,Ypr,Xd,Kpr,Rve,Zpr,e_r,qH,o_r,r_r,t_r,B8,a_r,_o,T9,n_r,Pve,s_r,l_r,en,i_r,Bve,d_r,c_r,Nve,f_r,m_r,Ive,g_r,h_r,p_r,tt,N8,qve,__r,u_r,jH,b_r,v_r,F_r,I8,jve,T_r,M_r,DH,E_r,C_r,w_r,q8,Dve,A_r,L_r,GH,y_r,x_r,$_r,j8,Gve,k_r,S_r,OH,R_r,P_r,B_r,D8,Ove,N_r,I_r,VH,q_r,j_r,D_r,G8,G_r,Vve,O_r,V_r,Xve,X_r,z_r,O8,fze,zd,V8,zve,M9,Q_r,Qve,W_r,mze,Jo,E9,H_r,Qd,U_r,XH,J_r,Y_r,zH,K_r,Z_r,eur,C9,our,Wve,rur,tur,aur,yt,w9,nur,Hve,sur,lur,Wd,iur,Uve,dur,cur,QH,fur,mur,gur,X8,hur,uo,A9,pur,Jve,_ur,uur,on,bur,Yve,vur,Fur,Kve,Tur,Mur,Zve,Eur,Cur,wur,Hd,z8,eFe,Aur,Lur,WH,yur,xur,$ur,Q8,oFe,kur,Sur,HH,Rur,Pur,Bur,W8,rFe,Nur,Iur,UH,qur,jur,Dur,H8,Gur,tFe,Our,Vur,aFe,Xur,zur,U8,gze,Ud,J8,nFe,L9,Qur,sFe,Wur,hze,Yo,y9,Hur,Jd,Uur,JH,Jur,Yur,YH,Kur,Zur,e1r,x9,o1r,lFe,r1r,t1r,a1r,xt,$9,n1r,iFe,s1r,l1r,Yd,i1r,dFe,d1r,c1r,KH,f1r,m1r,g1r,Y8,h1r,bo,k9,p1r,cFe,_1r,u1r,rn,b1r,fFe,v1r,F1r,mFe,T1r,M1r,gFe,E1r,C1r,w1r,S9,K8,hFe,A1r,L1r,ZH,y1r,x1r,$1r,Z8,pFe,k1r,S1r,eU,R1r,P1r,B1r,eM,N1r,_Fe,I1r,q1r,uFe,j1r,D1r,oM,pze,Kd,rM,bFe,R9,G1r,vFe,O1r,_ze,Ko,P9,V1r,Zd,X1r,oU,z1r,Q1r,rU,W1r,H1r,U1r,B9,J1r,FFe,Y1r,K1r,Z1r,$t,N9,e2r,TFe,o2r,r2r,ec,t2r,MFe,a2r,n2r,tU,s2r,l2r,i2r,tM,d2r,vo,I9,c2r,EFe,f2r,m2r,tn,g2r,CFe,h2r,p2r,wFe,_2r,u2r,AFe,b2r,v2r,F2r,LFe,aM,yFe,T2r,M2r,aU,E2r,C2r,w2r,nM,A2r,xFe,L2r,y2r,$Fe,x2r,$2r,sM,uze,oc,lM,kFe,q9,k2r,SFe,S2r,bze,Zo,j9,R2r,rc,P2r,nU,B2r,N2r,sU,I2r,q2r,j2r,D9,D2r,RFe,G2r,O2r,V2r,kt,G9,X2r,PFe,z2r,Q2r,tc,W2r,BFe,H2r,U2r,lU,J2r,Y2r,K2r,iM,Z2r,Fo,O9,ebr,NFe,obr,rbr,an,tbr,IFe,abr,nbr,qFe,sbr,lbr,jFe,ibr,dbr,cbr,at,dM,DFe,fbr,mbr,iU,gbr,hbr,pbr,cM,GFe,_br,ubr,dU,bbr,vbr,Fbr,fM,OFe,Tbr,Mbr,cU,Ebr,Cbr,wbr,mM,VFe,Abr,Lbr,fU,ybr,xbr,$br,gM,XFe,kbr,Sbr,mU,Rbr,Pbr,Bbr,hM,Nbr,zFe,Ibr,qbr,QFe,jbr,Dbr,pM,vze,ac,_M,WFe,V9,Gbr,HFe,Obr,Fze,er,X9,Vbr,nc,Xbr,gU,zbr,Qbr,hU,Wbr,Hbr,Ubr,z9,Jbr,UFe,Ybr,Kbr,Zbr,St,Q9,e3r,JFe,o3r,r3r,sc,t3r,YFe,a3r,n3r,pU,s3r,l3r,i3r,uM,d3r,To,W9,c3r,KFe,f3r,m3r,nn,g3r,ZFe,h3r,p3r,eTe,_3r,u3r,oTe,b3r,v3r,F3r,rTe,bM,tTe,T3r,M3r,_U,E3r,C3r,w3r,vM,A3r,aTe,L3r,y3r,nTe,x3r,$3r,FM,Tze,lc,TM,sTe,H9,k3r,lTe,S3r,Mze,or,U9,R3r,ic,P3r,uU,B3r,N3r,bU,I3r,q3r,j3r,J9,D3r,iTe,G3r,O3r,V3r,Rt,Y9,X3r,dTe,z3r,Q3r,dc,W3r,cTe,H3r,U3r,vU,J3r,Y3r,K3r,MM,Z3r,xr,K9,evr,fTe,ovr,rvr,sn,tvr,mTe,avr,nvr,gTe,svr,lvr,hTe,ivr,dvr,cvr,q,EM,pTe,fvr,mvr,FU,gvr,hvr,pvr,CM,_Te,_vr,uvr,TU,bvr,vvr,Fvr,wM,uTe,Tvr,Mvr,MU,Evr,Cvr,wvr,AM,bTe,Avr,Lvr,EU,yvr,xvr,$vr,LM,vTe,kvr,Svr,CU,Rvr,Pvr,Bvr,yM,FTe,Nvr,Ivr,wU,qvr,jvr,Dvr,xM,TTe,Gvr,Ovr,AU,Vvr,Xvr,zvr,$M,MTe,Qvr,Wvr,LU,Hvr,Uvr,Jvr,kM,ETe,Yvr,Kvr,yU,Zvr,eFr,oFr,SM,CTe,rFr,tFr,xU,aFr,nFr,sFr,RM,wTe,lFr,iFr,$U,dFr,cFr,fFr,PM,ATe,mFr,gFr,kU,hFr,pFr,_Fr,BM,LTe,uFr,bFr,SU,vFr,FFr,TFr,NM,yTe,MFr,EFr,RU,CFr,wFr,AFr,IM,xTe,LFr,yFr,PU,xFr,$Fr,kFr,qM,$Te,SFr,RFr,BU,PFr,BFr,NFr,jM,kTe,IFr,qFr,NU,jFr,DFr,GFr,DM,STe,OFr,VFr,IU,XFr,zFr,QFr,Ys,RTe,WFr,HFr,qU,UFr,JFr,jU,YFr,KFr,ZFr,GM,PTe,eTr,oTr,DU,rTr,tTr,aTr,OM,BTe,nTr,sTr,GU,lTr,iTr,dTr,VM,NTe,cTr,fTr,OU,mTr,gTr,hTr,XM,ITe,pTr,_Tr,VU,uTr,bTr,vTr,zM,qTe,FTr,TTr,XU,MTr,ETr,CTr,QM,jTe,wTr,ATr,zU,LTr,yTr,xTr,WM,DTe,$Tr,kTr,QU,STr,RTr,PTr,HM,GTe,BTr,NTr,WU,ITr,qTr,jTr,UM,OTe,DTr,GTr,HU,OTr,VTr,XTr,JM,VTe,zTr,QTr,UU,WTr,HTr,UTr,YM,XTe,JTr,YTr,JU,KTr,ZTr,e8r,KM,zTe,o8r,r8r,YU,t8r,a8r,n8r,ZM,QTe,s8r,l8r,KU,i8r,d8r,c8r,e4,WTe,f8r,m8r,ZU,g8r,h8r,p8r,o4,HTe,_8r,u8r,eJ,b8r,v8r,F8r,r4,UTe,T8r,M8r,oJ,E8r,C8r,w8r,t4,JTe,A8r,L8r,rJ,y8r,x8r,$8r,a4,YTe,k8r,S8r,tJ,R8r,P8r,B8r,n4,KTe,N8r,I8r,aJ,q8r,j8r,D8r,s4,ZTe,G8r,O8r,nJ,V8r,X8r,z8r,l4,e8e,Q8r,W8r,sJ,H8r,U8r,J8r,i4,o8e,Y8r,K8r,lJ,Z8r,eMr,oMr,d4,r8e,rMr,tMr,iJ,aMr,nMr,sMr,c4,t8e,lMr,iMr,dJ,dMr,cMr,fMr,f4,a8e,mMr,gMr,cJ,hMr,pMr,_Mr,m4,n8e,uMr,bMr,fJ,vMr,FMr,TMr,g4,s8e,MMr,EMr,mJ,CMr,wMr,AMr,h4,l8e,LMr,yMr,gJ,xMr,$Mr,kMr,p4,i8e,SMr,RMr,hJ,PMr,BMr,NMr,_4,d8e,IMr,qMr,pJ,jMr,DMr,GMr,u4,c8e,OMr,VMr,_J,XMr,zMr,QMr,b4,Eze,cc,v4,f8e,Z9,WMr,m8e,HMr,Cze,rr,ex,UMr,fc,JMr,uJ,YMr,KMr,bJ,ZMr,e4r,o4r,ox,r4r,g8e,t4r,a4r,n4r,Pt,rx,s4r,h8e,l4r,i4r,mc,d4r,p8e,c4r,f4r,vJ,m4r,g4r,h4r,F4,p4r,$r,tx,_4r,_8e,u4r,b4r,ln,v4r,u8e,F4r,T4r,b8e,M4r,E4r,v8e,C4r,w4r,A4r,se,T4,F8e,L4r,y4r,FJ,x4r,$4r,k4r,M4,T8e,S4r,R4r,TJ,P4r,B4r,N4r,E4,M8e,I4r,q4r,MJ,j4r,D4r,G4r,C4,E8e,O4r,V4r,EJ,X4r,z4r,Q4r,w4,C8e,W4r,H4r,CJ,U4r,J4r,Y4r,A4,w8e,K4r,Z4r,wJ,eEr,oEr,rEr,L4,A8e,tEr,aEr,AJ,nEr,sEr,lEr,y4,L8e,iEr,dEr,LJ,cEr,fEr,mEr,x4,y8e,gEr,hEr,yJ,pEr,_Er,uEr,$4,x8e,bEr,vEr,xJ,FEr,TEr,MEr,k4,$8e,EEr,CEr,$J,wEr,AEr,LEr,S4,k8e,yEr,xEr,kJ,$Er,kEr,SEr,R4,S8e,REr,PEr,SJ,BEr,NEr,IEr,P4,R8e,qEr,jEr,RJ,DEr,GEr,OEr,B4,P8e,VEr,XEr,PJ,zEr,QEr,WEr,N4,B8e,HEr,UEr,BJ,JEr,YEr,KEr,I4,N8e,ZEr,eCr,NJ,oCr,rCr,tCr,q4,I8e,aCr,nCr,IJ,sCr,lCr,iCr,j4,q8e,dCr,cCr,qJ,fCr,mCr,gCr,D4,j8e,hCr,pCr,jJ,_Cr,uCr,bCr,G4,D8e,vCr,FCr,DJ,TCr,MCr,ECr,O4,G8e,CCr,wCr,GJ,ACr,LCr,yCr,V4,O8e,xCr,$Cr,OJ,kCr,SCr,RCr,X4,wze,gc,z4,V8e,ax,PCr,X8e,BCr,Aze,tr,nx,NCr,hc,ICr,VJ,qCr,jCr,XJ,DCr,GCr,OCr,sx,VCr,z8e,XCr,zCr,QCr,Bt,lx,WCr,Q8e,HCr,UCr,pc,JCr,W8e,YCr,KCr,zJ,ZCr,e5r,o5r,Q4,r5r,kr,ix,t5r,H8e,a5r,n5r,dn,s5r,U8e,l5r,i5r,J8e,d5r,c5r,Y8e,f5r,m5r,g5r,Me,W4,K8e,h5r,p5r,QJ,_5r,u5r,b5r,H4,Z8e,v5r,F5r,WJ,T5r,M5r,E5r,U4,eMe,C5r,w5r,HJ,A5r,L5r,y5r,J4,oMe,x5r,$5r,UJ,k5r,S5r,R5r,Y4,rMe,P5r,B5r,JJ,N5r,I5r,q5r,K4,tMe,j5r,D5r,YJ,G5r,O5r,V5r,Z4,aMe,X5r,z5r,KJ,Q5r,W5r,H5r,eE,nMe,U5r,J5r,ZJ,Y5r,K5r,Z5r,oE,sMe,e0r,o0r,eY,r0r,t0r,a0r,rE,lMe,n0r,s0r,oY,l0r,i0r,d0r,tE,iMe,c0r,f0r,rY,m0r,g0r,h0r,aE,dMe,p0r,_0r,tY,u0r,b0r,v0r,nE,cMe,F0r,T0r,aY,M0r,E0r,C0r,sE,Lze,_c,lE,fMe,dx,w0r,mMe,A0r,yze,ar,cx,L0r,uc,y0r,nY,x0r,$0r,sY,k0r,S0r,R0r,fx,P0r,gMe,B0r,N0r,I0r,Nt,mx,q0r,hMe,j0r,D0r,bc,G0r,pMe,O0r,V0r,lY,X0r,z0r,Q0r,iE,W0r,Sr,gx,H0r,_Me,U0r,J0r,cn,Y0r,uMe,K0r,Z0r,bMe,ewr,owr,vMe,rwr,twr,awr,Qe,dE,FMe,nwr,swr,iY,lwr,iwr,dwr,cE,TMe,cwr,fwr,dY,mwr,gwr,hwr,Ks,MMe,pwr,_wr,cY,uwr,bwr,fY,vwr,Fwr,Twr,fE,EMe,Mwr,Ewr,mY,Cwr,wwr,Awr,mE,CMe,Lwr,ywr,gY,xwr,$wr,kwr,gE,wMe,Swr,Rwr,hY,Pwr,Bwr,Nwr,hE,AMe,Iwr,qwr,pY,jwr,Dwr,Gwr,pE,xze,vc,_E,LMe,hx,Owr,yMe,Vwr,$ze,nr,px,Xwr,Fc,zwr,_Y,Qwr,Wwr,uY,Hwr,Uwr,Jwr,_x,Ywr,xMe,Kwr,Zwr,eAr,It,ux,oAr,$Me,rAr,tAr,Tc,aAr,kMe,nAr,sAr,bY,lAr,iAr,dAr,uE,cAr,Rr,bx,fAr,SMe,mAr,gAr,fn,hAr,RMe,pAr,_Ar,PMe,uAr,bAr,BMe,vAr,FAr,TAr,ie,bE,NMe,MAr,EAr,vY,CAr,wAr,AAr,vE,IMe,LAr,yAr,FY,xAr,$Ar,kAr,FE,qMe,SAr,RAr,TY,PAr,BAr,NAr,TE,jMe,IAr,qAr,MY,jAr,DAr,GAr,ME,DMe,OAr,VAr,EY,XAr,zAr,QAr,EE,GMe,WAr,HAr,CY,UAr,JAr,YAr,CE,OMe,KAr,ZAr,wY,e6r,o6r,r6r,wE,VMe,t6r,a6r,AY,n6r,s6r,l6r,AE,XMe,i6r,d6r,LY,c6r,f6r,m6r,LE,zMe,g6r,h6r,yY,p6r,_6r,u6r,yE,QMe,b6r,v6r,xY,F6r,T6r,M6r,xE,WMe,E6r,C6r,$Y,w6r,A6r,L6r,$E,HMe,y6r,x6r,kY,$6r,k6r,S6r,kE,UMe,R6r,P6r,SY,B6r,N6r,I6r,SE,JMe,q6r,j6r,RY,D6r,G6r,O6r,RE,YMe,V6r,X6r,PY,z6r,Q6r,W6r,PE,KMe,H6r,U6r,BY,J6r,Y6r,K6r,BE,ZMe,Z6r,e7r,NY,o7r,r7r,t7r,NE,e4e,a7r,n7r,IY,s7r,l7r,i7r,IE,o4e,d7r,c7r,qY,f7r,m7r,g7r,qE,kze,Mc,jE,r4e,vx,h7r,t4e,p7r,Sze,sr,Fx,_7r,Ec,u7r,jY,b7r,v7r,DY,F7r,T7r,M7r,Tx,E7r,a4e,C7r,w7r,A7r,qt,Mx,L7r,n4e,y7r,x7r,Cc,$7r,s4e,k7r,S7r,GY,R7r,P7r,B7r,DE,N7r,Pr,Ex,I7r,l4e,q7r,j7r,mn,D7r,i4e,G7r,O7r,d4e,V7r,X7r,c4e,z7r,Q7r,W7r,ye,GE,f4e,H7r,U7r,OY,J7r,Y7r,K7r,OE,m4e,Z7r,eLr,VY,oLr,rLr,tLr,VE,g4e,aLr,nLr,XY,sLr,lLr,iLr,XE,h4e,dLr,cLr,zY,fLr,mLr,gLr,zE,p4e,hLr,pLr,QY,_Lr,uLr,bLr,QE,_4e,vLr,FLr,WY,TLr,MLr,ELr,WE,u4e,CLr,wLr,HY,ALr,LLr,yLr,HE,b4e,xLr,$Lr,UY,kLr,SLr,RLr,UE,v4e,PLr,BLr,JY,NLr,ILr,qLr,JE,F4e,jLr,DLr,YY,GLr,OLr,VLr,YE,Rze,wc,KE,T4e,Cx,XLr,M4e,zLr,Pze,lr,wx,QLr,Ac,WLr,KY,HLr,ULr,ZY,JLr,YLr,KLr,Ax,ZLr,E4e,eyr,oyr,ryr,jt,Lx,tyr,C4e,ayr,nyr,Lc,syr,w4e,lyr,iyr,eK,dyr,cyr,fyr,ZE,myr,Br,yx,gyr,A4e,hyr,pyr,gn,_yr,L4e,uyr,byr,y4e,vyr,Fyr,x4e,Tyr,Myr,Eyr,te,eC,$4e,Cyr,wyr,oK,Ayr,Lyr,yyr,oC,k4e,xyr,$yr,rK,kyr,Syr,Ryr,rC,S4e,Pyr,Byr,tK,Nyr,Iyr,qyr,tC,R4e,jyr,Dyr,aK,Gyr,Oyr,Vyr,aC,P4e,Xyr,zyr,nK,Qyr,Wyr,Hyr,nC,B4e,Uyr,Jyr,sK,Yyr,Kyr,Zyr,sC,N4e,e9r,o9r,lK,r9r,t9r,a9r,lC,I4e,n9r,s9r,iK,l9r,i9r,d9r,iC,q4e,c9r,f9r,dK,m9r,g9r,h9r,dC,j4e,p9r,_9r,cK,u9r,b9r,v9r,cC,D4e,F9r,T9r,fK,M9r,E9r,C9r,fC,G4e,w9r,A9r,mK,L9r,y9r,x9r,mC,O4e,$9r,k9r,gK,S9r,R9r,P9r,gC,V4e,B9r,N9r,hK,I9r,q9r,j9r,hC,X4e,D9r,G9r,pK,O9r,V9r,X9r,pC,z4e,z9r,Q9r,_K,W9r,H9r,U9r,_C,Q4e,J9r,Y9r,uK,K9r,Z9r,exr,uC,W4e,oxr,rxr,bK,txr,axr,nxr,bC,H4e,sxr,lxr,vK,ixr,dxr,cxr,vC,U4e,fxr,mxr,FK,gxr,hxr,pxr,FC,J4e,_xr,uxr,TK,bxr,vxr,Fxr,TC,Y4e,Txr,Mxr,MK,Exr,Cxr,wxr,MC,K4e,Axr,Lxr,EK,yxr,xxr,$xr,EC,Z4e,kxr,Sxr,CK,Rxr,Pxr,Bxr,CC,eEe,Nxr,Ixr,wK,qxr,jxr,Dxr,wC,oEe,Gxr,Oxr,AK,Vxr,Xxr,zxr,AC,Bze,yc,LC,rEe,xx,Qxr,tEe,Wxr,Nze,ir,$x,Hxr,xc,Uxr,LK,Jxr,Yxr,yK,Kxr,Zxr,e$r,kx,o$r,aEe,r$r,t$r,a$r,Dt,Sx,n$r,nEe,s$r,l$r,$c,i$r,sEe,d$r,c$r,xK,f$r,m$r,g$r,yC,h$r,Nr,Rx,p$r,lEe,_$r,u$r,hn,b$r,iEe,v$r,F$r,dEe,T$r,M$r,cEe,E$r,C$r,w$r,ue,xC,fEe,A$r,L$r,$K,y$r,x$r,$$r,$C,mEe,k$r,S$r,kK,R$r,P$r,B$r,kC,gEe,N$r,I$r,SK,q$r,j$r,D$r,SC,hEe,G$r,O$r,RK,V$r,X$r,z$r,RC,pEe,Q$r,W$r,PK,H$r,U$r,J$r,PC,_Ee,Y$r,K$r,BK,Z$r,ekr,okr,BC,uEe,rkr,tkr,NK,akr,nkr,skr,NC,bEe,lkr,ikr,IK,dkr,ckr,fkr,IC,vEe,mkr,gkr,qK,hkr,pkr,_kr,qC,FEe,ukr,bkr,jK,vkr,Fkr,Tkr,jC,TEe,Mkr,Ekr,DK,Ckr,wkr,Akr,DC,MEe,Lkr,ykr,GK,xkr,$kr,kkr,GC,EEe,Skr,Rkr,OK,Pkr,Bkr,Nkr,OC,CEe,Ikr,qkr,VK,jkr,Dkr,Gkr,VC,wEe,Okr,Vkr,XK,Xkr,zkr,Qkr,XC,AEe,Wkr,Hkr,zK,Ukr,Jkr,Ykr,zC,LEe,Kkr,Zkr,QK,eSr,oSr,rSr,QC,Ize,kc,WC,yEe,Px,tSr,xEe,aSr,qze,dr,Bx,nSr,Sc,sSr,WK,lSr,iSr,HK,dSr,cSr,fSr,Nx,mSr,$Ee,gSr,hSr,pSr,Gt,Ix,_Sr,kEe,uSr,bSr,Rc,vSr,SEe,FSr,TSr,UK,MSr,ESr,CSr,HC,wSr,Ir,qx,ASr,REe,LSr,ySr,pn,xSr,PEe,$Sr,kSr,BEe,SSr,RSr,NEe,PSr,BSr,NSr,jx,UC,IEe,ISr,qSr,JK,jSr,DSr,GSr,JC,qEe,OSr,VSr,YK,XSr,zSr,QSr,YC,jze,Pc,KC,jEe,Dx,WSr,DEe,HSr,Dze,cr,Gx,USr,Bc,JSr,KK,YSr,KSr,ZK,ZSr,eRr,oRr,Ox,rRr,GEe,tRr,aRr,nRr,Ot,Vx,sRr,OEe,lRr,iRr,Nc,dRr,VEe,cRr,fRr,eZ,mRr,gRr,hRr,ZC,pRr,qr,Xx,_Rr,XEe,uRr,bRr,_n,vRr,zEe,FRr,TRr,QEe,MRr,ERr,WEe,CRr,wRr,ARr,HEe,e5,UEe,LRr,yRr,oZ,xRr,$Rr,kRr,o5,Gze,Ic,r5,JEe,zx,SRr,YEe,RRr,Oze,fr,Qx,PRr,qc,BRr,rZ,NRr,IRr,tZ,qRr,jRr,DRr,Wx,GRr,KEe,ORr,VRr,XRr,Vt,Hx,zRr,ZEe,QRr,WRr,jc,HRr,eCe,URr,JRr,aZ,YRr,KRr,ZRr,t5,ePr,jr,Ux,oPr,oCe,rPr,tPr,un,aPr,rCe,nPr,sPr,tCe,lPr,iPr,aCe,dPr,cPr,fPr,de,a5,nCe,mPr,gPr,nZ,hPr,pPr,_Pr,n5,sCe,uPr,bPr,sZ,vPr,FPr,TPr,s5,lCe,MPr,EPr,lZ,CPr,wPr,APr,l5,iCe,LPr,yPr,iZ,xPr,$Pr,kPr,i5,dCe,SPr,RPr,dZ,PPr,BPr,NPr,d5,cCe,IPr,qPr,cZ,jPr,DPr,GPr,c5,fCe,OPr,VPr,fZ,XPr,zPr,QPr,f5,mCe,WPr,HPr,mZ,UPr,JPr,YPr,m5,gCe,KPr,ZPr,gZ,eBr,oBr,rBr,g5,hCe,tBr,aBr,hZ,nBr,sBr,lBr,h5,pCe,iBr,dBr,pZ,cBr,fBr,mBr,p5,_Ce,gBr,hBr,_Z,pBr,_Br,uBr,_5,uCe,bBr,vBr,uZ,FBr,TBr,MBr,u5,bCe,EBr,CBr,bZ,wBr,ABr,LBr,b5,vCe,yBr,xBr,vZ,$Br,kBr,SBr,v5,FCe,RBr,PBr,FZ,BBr,NBr,IBr,F5,TCe,qBr,jBr,TZ,DBr,GBr,OBr,T5,MCe,VBr,XBr,MZ,zBr,QBr,WBr,M5,ECe,HBr,UBr,EZ,JBr,YBr,KBr,E5,CCe,ZBr,eNr,CZ,oNr,rNr,tNr,C5,Vze,Dc,w5,wCe,Jx,aNr,ACe,nNr,Xze,mr,Yx,sNr,Gc,lNr,wZ,iNr,dNr,AZ,cNr,fNr,mNr,Kx,gNr,LCe,hNr,pNr,_Nr,Xt,Zx,uNr,yCe,bNr,vNr,Oc,FNr,xCe,TNr,MNr,LZ,ENr,CNr,wNr,A5,ANr,Dr,e$,LNr,$Ce,yNr,xNr,bn,$Nr,kCe,kNr,SNr,SCe,RNr,PNr,RCe,BNr,NNr,INr,ce,L5,PCe,qNr,jNr,yZ,DNr,GNr,ONr,y5,BCe,VNr,XNr,xZ,zNr,QNr,WNr,x5,NCe,HNr,UNr,$Z,JNr,YNr,KNr,$5,ICe,ZNr,eIr,kZ,oIr,rIr,tIr,k5,qCe,aIr,nIr,SZ,sIr,lIr,iIr,S5,jCe,dIr,cIr,RZ,fIr,mIr,gIr,R5,DCe,hIr,pIr,PZ,_Ir,uIr,bIr,P5,GCe,vIr,FIr,BZ,TIr,MIr,EIr,B5,OCe,CIr,wIr,NZ,AIr,LIr,yIr,N5,VCe,xIr,$Ir,IZ,kIr,SIr,RIr,I5,XCe,PIr,BIr,qZ,NIr,IIr,qIr,q5,zCe,jIr,DIr,jZ,GIr,OIr,VIr,j5,QCe,XIr,zIr,DZ,QIr,WIr,HIr,D5,WCe,UIr,JIr,GZ,YIr,KIr,ZIr,G5,HCe,eqr,oqr,OZ,rqr,tqr,aqr,O5,UCe,nqr,sqr,VZ,lqr,iqr,dqr,V5,JCe,cqr,fqr,XZ,mqr,gqr,hqr,X5,YCe,pqr,_qr,zZ,uqr,bqr,vqr,z5,KCe,Fqr,Tqr,QZ,Mqr,Eqr,Cqr,Q5,ZCe,wqr,Aqr,WZ,Lqr,yqr,xqr,W5,zze,Vc,H5,e5e,o$,$qr,o5e,kqr,Qze,gr,r$,Sqr,Xc,Rqr,HZ,Pqr,Bqr,UZ,Nqr,Iqr,qqr,t$,jqr,r5e,Dqr,Gqr,Oqr,zt,a$,Vqr,t5e,Xqr,zqr,zc,Qqr,a5e,Wqr,Hqr,JZ,Uqr,Jqr,Yqr,U5,Kqr,Gr,n$,Zqr,n5e,ejr,ojr,vn,rjr,s5e,tjr,ajr,l5e,njr,sjr,i5e,ljr,ijr,djr,d5e,J5,c5e,cjr,fjr,YZ,mjr,gjr,hjr,Y5,Wze,Qc,K5,f5e,s$,pjr,m5e,_jr,Hze,hr,l$,ujr,Wc,bjr,KZ,vjr,Fjr,ZZ,Tjr,Mjr,Ejr,i$,Cjr,g5e,wjr,Ajr,Ljr,Qt,d$,yjr,h5e,xjr,$jr,Hc,kjr,p5e,Sjr,Rjr,eee,Pjr,Bjr,Njr,Z5,Ijr,Or,c$,qjr,_5e,jjr,Djr,Fn,Gjr,u5e,Ojr,Vjr,b5e,Xjr,zjr,v5e,Qjr,Wjr,Hjr,F5e,e0,T5e,Ujr,Jjr,oee,Yjr,Kjr,Zjr,o0,Uze,Uc,r0,M5e,f$,eDr,E5e,oDr,Jze,pr,m$,rDr,Jc,tDr,ree,aDr,nDr,tee,sDr,lDr,iDr,g$,dDr,C5e,cDr,fDr,mDr,Wt,h$,gDr,w5e,hDr,pDr,Yc,_Dr,A5e,uDr,bDr,aee,vDr,FDr,TDr,t0,MDr,Vr,p$,EDr,L5e,CDr,wDr,Tn,ADr,y5e,LDr,yDr,x5e,xDr,$Dr,$5e,kDr,SDr,RDr,oe,a0,k5e,PDr,BDr,nee,NDr,IDr,qDr,n0,S5e,jDr,DDr,see,GDr,ODr,VDr,s0,R5e,XDr,zDr,lee,QDr,WDr,HDr,l0,P5e,UDr,JDr,iee,YDr,KDr,ZDr,i0,B5e,eGr,oGr,dee,rGr,tGr,aGr,d0,N5e,nGr,sGr,cee,lGr,iGr,dGr,c0,I5e,cGr,fGr,fee,mGr,gGr,hGr,f0,q5e,pGr,_Gr,mee,uGr,bGr,vGr,m0,j5e,FGr,TGr,gee,MGr,EGr,CGr,g0,D5e,wGr,AGr,hee,LGr,yGr,xGr,h0,G5e,$Gr,kGr,pee,SGr,RGr,PGr,p0,O5e,BGr,NGr,_ee,IGr,qGr,jGr,_0,V5e,DGr,GGr,uee,OGr,VGr,XGr,u0,X5e,zGr,QGr,bee,WGr,HGr,UGr,b0,z5e,JGr,YGr,vee,KGr,ZGr,eOr,v0,Q5e,oOr,rOr,Fee,tOr,aOr,nOr,F0,W5e,sOr,lOr,Tee,iOr,dOr,cOr,T0,H5e,fOr,mOr,Mee,gOr,hOr,pOr,M0,U5e,_Or,uOr,Eee,bOr,vOr,FOr,E0,J5e,TOr,MOr,Cee,EOr,COr,wOr,C0,Y5e,AOr,LOr,wee,yOr,xOr,$Or,w0,K5e,kOr,SOr,Aee,ROr,POr,BOr,A0,Z5e,NOr,IOr,Lee,qOr,jOr,DOr,L0,e0e,GOr,OOr,yee,VOr,XOr,zOr,y0,o0e,QOr,WOr,xee,HOr,UOr,JOr,x0,r0e,YOr,KOr,$ee,ZOr,eVr,oVr,$0,t0e,rVr,tVr,kee,aVr,nVr,sVr,k0,Yze,Kc,S0,a0e,_$,lVr,n0e,iVr,Kze,_r,u$,dVr,Zc,cVr,See,fVr,mVr,Ree,gVr,hVr,pVr,b$,_Vr,s0e,uVr,bVr,vVr,Ht,v$,FVr,l0e,TVr,MVr,ef,EVr,i0e,CVr,wVr,Pee,AVr,LVr,yVr,R0,xVr,Xr,F$,$Vr,d0e,kVr,SVr,Mn,RVr,c0e,PVr,BVr,f0e,NVr,IVr,m0e,qVr,jVr,DVr,xe,P0,g0e,GVr,OVr,Bee,VVr,XVr,zVr,B0,h0e,QVr,WVr,Nee,HVr,UVr,JVr,N0,p0e,YVr,KVr,Iee,ZVr,eXr,oXr,I0,_0e,rXr,tXr,qee,aXr,nXr,sXr,q0,u0e,lXr,iXr,jee,dXr,cXr,fXr,j0,b0e,mXr,gXr,Dee,hXr,pXr,_Xr,D0,v0e,uXr,bXr,Gee,vXr,FXr,TXr,G0,F0e,MXr,EXr,Oee,CXr,wXr,AXr,O0,T0e,LXr,yXr,Vee,xXr,$Xr,kXr,V0,M0e,SXr,RXr,Xee,PXr,BXr,NXr,X0,Zze,of,z0,E0e,T$,IXr,C0e,qXr,eQe,ur,M$,jXr,rf,DXr,zee,GXr,OXr,Qee,VXr,XXr,zXr,E$,QXr,w0e,WXr,HXr,UXr,Ut,C$,JXr,A0e,YXr,KXr,tf,ZXr,L0e,ezr,ozr,Wee,rzr,tzr,azr,Q0,nzr,zr,w$,szr,y0e,lzr,izr,En,dzr,x0e,czr,fzr,$0e,mzr,gzr,k0e,hzr,pzr,_zr,Ee,W0,S0e,uzr,bzr,Hee,vzr,Fzr,Tzr,H0,R0e,Mzr,Ezr,Uee,Czr,wzr,Azr,U0,P0e,Lzr,yzr,Jee,xzr,$zr,kzr,J0,B0e,Szr,Rzr,Yee,Pzr,Bzr,Nzr,Y0,N0e,Izr,qzr,Kee,jzr,Dzr,Gzr,K0,I0e,Ozr,Vzr,Zee,Xzr,zzr,Qzr,Z0,q0e,Wzr,Hzr,eoe,Uzr,Jzr,Yzr,ew,j0e,Kzr,Zzr,ooe,eQr,oQr,rQr,ow,D0e,tQr,aQr,roe,nQr,sQr,lQr,rw,G0e,iQr,dQr,toe,cQr,fQr,mQr,tw,O0e,gQr,hQr,aoe,pQr,_Qr,uQr,aw,V0e,bQr,vQr,noe,FQr,TQr,MQr,nw,X0e,EQr,CQr,soe,wQr,AQr,LQr,sw,oQe,af,lw,z0e,A$,yQr,Q0e,xQr,rQe,br,L$,$Qr,nf,kQr,loe,SQr,RQr,ioe,PQr,BQr,NQr,y$,IQr,W0e,qQr,jQr,DQr,Jt,x$,GQr,H0e,OQr,VQr,sf,XQr,U0e,zQr,QQr,doe,WQr,HQr,UQr,iw,JQr,Qr,$$,YQr,J0e,KQr,ZQr,Cn,eWr,Y0e,oWr,rWr,K0e,tWr,aWr,Z0e,nWr,sWr,lWr,$e,dw,ewe,iWr,dWr,coe,cWr,fWr,mWr,cw,owe,gWr,hWr,foe,pWr,_Wr,uWr,fw,rwe,bWr,vWr,moe,FWr,TWr,MWr,mw,twe,EWr,CWr,goe,wWr,AWr,LWr,gw,awe,yWr,xWr,hoe,$Wr,kWr,SWr,hw,nwe,RWr,PWr,poe,BWr,NWr,IWr,pw,swe,qWr,jWr,_oe,DWr,GWr,OWr,_w,lwe,VWr,XWr,uoe,zWr,QWr,WWr,uw,iwe,HWr,UWr,boe,JWr,YWr,KWr,bw,dwe,ZWr,eHr,voe,oHr,rHr,tHr,vw,tQe,lf,Fw,cwe,k$,aHr,fwe,nHr,aQe,vr,S$,sHr,df,lHr,Foe,iHr,dHr,Toe,cHr,fHr,mHr,R$,gHr,mwe,hHr,pHr,_Hr,Yt,P$,uHr,gwe,bHr,vHr,cf,FHr,hwe,THr,MHr,Moe,EHr,CHr,wHr,Tw,AHr,Wr,B$,LHr,pwe,yHr,xHr,wn,$Hr,_we,kHr,SHr,uwe,RHr,PHr,bwe,BHr,NHr,IHr,ke,Mw,vwe,qHr,jHr,Eoe,DHr,GHr,OHr,Ew,Fwe,VHr,XHr,Coe,zHr,QHr,WHr,Cw,Twe,HHr,UHr,woe,JHr,YHr,KHr,ww,Mwe,ZHr,eUr,Aoe,oUr,rUr,tUr,Aw,Ewe,aUr,nUr,Loe,sUr,lUr,iUr,Lw,Cwe,dUr,cUr,yoe,fUr,mUr,gUr,yw,wwe,hUr,pUr,xoe,_Ur,uUr,bUr,xw,Awe,vUr,FUr,$oe,TUr,MUr,EUr,$w,Lwe,CUr,wUr,koe,AUr,LUr,yUr,kw,ywe,xUr,$Ur,Soe,kUr,SUr,RUr,Sw,nQe,ff,Rw,xwe,N$,PUr,$we,BUr,sQe,Fr,I$,NUr,mf,IUr,Roe,qUr,jUr,Poe,DUr,GUr,OUr,q$,VUr,kwe,XUr,zUr,QUr,Kt,j$,WUr,Swe,HUr,UUr,gf,JUr,Rwe,YUr,KUr,Boe,ZUr,eJr,oJr,Pw,rJr,Hr,D$,tJr,Pwe,aJr,nJr,An,sJr,Bwe,lJr,iJr,Nwe,dJr,cJr,Iwe,fJr,mJr,gJr,Se,Bw,qwe,hJr,pJr,Noe,_Jr,uJr,bJr,Nw,jwe,vJr,FJr,Ioe,TJr,MJr,EJr,Iw,Dwe,CJr,wJr,qoe,AJr,LJr,yJr,qw,Gwe,xJr,$Jr,joe,kJr,SJr,RJr,jw,Owe,PJr,BJr,Doe,NJr,IJr,qJr,Dw,Vwe,jJr,DJr,Goe,GJr,OJr,VJr,Gw,Xwe,XJr,zJr,Ooe,QJr,WJr,HJr,Ow,zwe,UJr,JJr,Voe,YJr,KJr,ZJr,Vw,Qwe,eYr,oYr,Xoe,rYr,tYr,aYr,Xw,Wwe,nYr,sYr,zoe,lYr,iYr,dYr,zw,lQe,hf,Qw,Hwe,G$,cYr,Uwe,fYr,iQe,Tr,O$,mYr,pf,gYr,Qoe,hYr,pYr,Woe,_Yr,uYr,bYr,V$,vYr,Jwe,FYr,TYr,MYr,Zt,X$,EYr,Ywe,CYr,wYr,_f,AYr,Kwe,LYr,yYr,Hoe,xYr,$Yr,kYr,Ww,SYr,Ur,z$,RYr,Zwe,PYr,BYr,Ln,NYr,eAe,IYr,qYr,oAe,jYr,DYr,rAe,GYr,OYr,VYr,Re,Hw,tAe,XYr,zYr,Uoe,QYr,WYr,HYr,Uw,aAe,UYr,JYr,Joe,YYr,KYr,ZYr,Jw,nAe,eKr,oKr,Yoe,rKr,tKr,aKr,Yw,sAe,nKr,sKr,Koe,lKr,iKr,dKr,Kw,lAe,cKr,fKr,Zoe,mKr,gKr,hKr,Zw,iAe,pKr,_Kr,ere,uKr,bKr,vKr,eA,dAe,FKr,TKr,ore,MKr,EKr,CKr,oA,cAe,wKr,AKr,rre,LKr,yKr,xKr,rA,fAe,$Kr,kKr,tre,SKr,RKr,PKr,tA,mAe,BKr,NKr,are,IKr,qKr,jKr,aA,dQe,uf,nA,gAe,Q$,DKr,hAe,GKr,cQe,Mr,W$,OKr,bf,VKr,nre,XKr,zKr,sre,QKr,WKr,HKr,H$,UKr,pAe,JKr,YKr,KKr,ea,U$,ZKr,_Ae,eZr,oZr,vf,rZr,uAe,tZr,aZr,lre,nZr,sZr,lZr,sA,iZr,Jr,J$,dZr,bAe,cZr,fZr,yn,mZr,vAe,gZr,hZr,FAe,pZr,_Zr,TAe,uZr,bZr,vZr,Ve,lA,MAe,FZr,TZr,ire,MZr,EZr,CZr,iA,EAe,wZr,AZr,dre,LZr,yZr,xZr,dA,CAe,$Zr,kZr,cre,SZr,RZr,PZr,cA,wAe,BZr,NZr,fre,IZr,qZr,jZr,fA,AAe,DZr,GZr,mre,OZr,VZr,XZr,mA,LAe,zZr,QZr,gre,WZr,HZr,UZr,gA,yAe,JZr,YZr,hre,KZr,ZZr,eet,hA,xAe,oet,ret,pre,tet,aet,net,pA,fQe,Ff,_A,$Ae,Y$,set,kAe,iet,mQe,Er,K$,det,Tf,cet,_re,fet,met,ure,get,het,pet,Z$,_et,SAe,uet,bet,vet,oa,ek,Fet,RAe,Tet,Met,Mf,Eet,PAe,Cet,wet,bre,Aet,Let,yet,uA,xet,Yr,ok,$et,BAe,ket,Set,xn,Ret,NAe,Pet,Bet,IAe,Net,Iet,qAe,qet,jet,Det,Xe,bA,jAe,Get,Oet,vre,Vet,Xet,zet,vA,DAe,Qet,Wet,Fre,Het,Uet,Jet,FA,GAe,Yet,Ket,Tre,Zet,eot,oot,TA,OAe,rot,tot,Mre,aot,not,sot,MA,VAe,lot,iot,Ere,dot,cot,fot,EA,XAe,mot,got,Cre,hot,pot,_ot,CA,zAe,uot,bot,wre,vot,Fot,Tot,wA,QAe,Mot,Eot,Are,Cot,wot,Aot,AA,gQe,Ef,LA,WAe,rk,Lot,HAe,yot,hQe,Cr,tk,xot,Cf,$ot,Lre,kot,Sot,yre,Rot,Pot,Bot,ak,Not,UAe,Iot,qot,jot,ra,nk,Dot,JAe,Got,Oot,wf,Vot,YAe,Xot,zot,xre,Qot,Wot,Hot,yA,Uot,Kr,sk,Jot,KAe,Yot,Kot,$n,Zot,ZAe,ert,ort,e6e,rrt,trt,o6e,art,nrt,srt,r6e,xA,t6e,lrt,irt,$re,drt,crt,frt,$A,pQe,Af,kA,a6e,lk,mrt,n6e,grt,_Qe,wr,ik,hrt,Lf,prt,kre,_rt,urt,Sre,brt,vrt,Frt,dk,Trt,s6e,Mrt,Ert,Crt,ta,ck,wrt,l6e,Art,Lrt,yf,yrt,i6e,xrt,$rt,Rre,krt,Srt,Rrt,SA,Prt,Zr,fk,Brt,d6e,Nrt,Irt,kn,qrt,c6e,jrt,Drt,f6e,Grt,Ort,m6e,Vrt,Xrt,zrt,mk,RA,g6e,Qrt,Wrt,Pre,Hrt,Urt,Jrt,PA,h6e,Yrt,Krt,Bre,Zrt,ett,ott,BA,uQe,xf,NA,p6e,gk,rtt,_6e,ttt,bQe,Ar,hk,att,$f,ntt,Nre,stt,ltt,Ire,itt,dtt,ctt,pk,ftt,u6e,mtt,gtt,htt,aa,_k,ptt,b6e,_tt,utt,kf,btt,v6e,vtt,Ftt,qre,Ttt,Mtt,Ett,IA,Ctt,et,uk,wtt,F6e,Att,Ltt,Sn,ytt,T6e,xtt,$tt,M6e,ktt,Stt,E6e,Rtt,Ptt,Btt,C6e,qA,w6e,Ntt,Itt,jre,qtt,jtt,Dtt,jA,vQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),iL=new re({}),dL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new Gtt({props:{warning:!0,$$slots:{default:[xWt]},$$scope:{ctx:$}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L611"}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L634"}}),Kg=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),pL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L757"}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L410"}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18123/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L424"}}),Ph=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),TL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L623"}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18123/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),up=new Gtt({props:{$$slots:{default:[SWt]},$$scope:{ctx:$}}}),bp=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),LL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L89"}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new Gtt({props:{$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Dp=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L256"}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L786"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L793"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),V1=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L808"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),z1=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),R2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L815"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),B2=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L822"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L831"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L876"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L883"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L869"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L840"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L847"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),By=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L892"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L931"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L858"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L938"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),o9=new re({}),r9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L961"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),s9=new re({}),l9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L945"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),L8=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),f9=new re({}),m9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L952"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),R8=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),u9=new re({}),b9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L970"}}),F9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),B8=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),O8=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),M9=new re({}),E9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L977"}}),w9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),X8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),L9=new re({}),y9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L924"}}),$9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),R9=new re({}),P9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L899"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),q9=new re({}),j9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L906"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),V9=new re({}),X9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L915"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),H9=new re({}),U9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),zx=new re({}),Qx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),a$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),d$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),_$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),N$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),Q$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),U$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),Y$=new re({}),K$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),uA=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),rk=new re({}),tk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),lk=new re({}),ik=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),BA=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),gk=new re({}),hk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),_k=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Bf=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),aL=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),nL=o("AutoConfig"),Bn=o(", "),Nn=a("a"),sL=o("AutoModel"),Si=o(`, and
`),In=a("a"),lL=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),DS=o("will create a model that is an instance of "),Pi=a("a"),GS=o("BertModel"),OS=o("."),wo=l(),Ra=a("p"),VS=o("There is one class of "),qf=a("code"),XS=o("AutoModel"),xHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hXe=l(),Bi=a("h2"),jf=a("a"),Pae=a("span"),F(iL.$$.fragment),$He=l(),Bae=a("span"),kHe=o("Extending the Auto Classes"),pXe=l(),qn=a("p"),SHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Nae=a("code"),RHe=o("NewModel"),PHe=o(", make sure you have a "),Iae=a("code"),BHe=o("NewModelConfig"),NHe=o(` then you can add those to the auto
classes like this:`),_Xe=l(),F(dL.$$.fragment),uXe=l(),zS=a("p"),IHe=o("You will then be able to use the auto classes like you would usually do!"),bXe=l(),F(Df.$$.fragment),vXe=l(),Ni=a("h2"),Gf=a("a"),qae=a("span"),F(cL.$$.fragment),qHe=l(),jae=a("span"),jHe=o("AutoConfig"),FXe=l(),Ao=a("div"),F(fL.$$.fragment),DHe=l(),mL=a("p"),GHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),QS=a("a"),OHe=o("from_pretrained()"),VHe=o(" class method."),XHe=l(),gL=a("p"),zHe=o("This class cannot be instantiated directly using "),Dae=a("code"),QHe=o("__init__()"),WHe=o(" (throws an error)."),HHe=l(),Lr=a("div"),F(hL.$$.fragment),UHe=l(),Gae=a("p"),JHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YHe=l(),Ii=a("p"),KHe=o("The configuration class to instantiate is selected based on the "),Oae=a("code"),ZHe=o("model_type"),eUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vae=a("code"),oUe=o("pretrained_model_name_or_path"),rUe=o(":"),tUe=l(),A=a("ul"),Of=a("li"),Xae=a("strong"),aUe=o("albert"),nUe=o(" \u2014 "),WS=a("a"),sUe=o("AlbertConfig"),lUe=o(" (ALBERT model)"),iUe=l(),Vf=a("li"),zae=a("strong"),dUe=o("bart"),cUe=o(" \u2014 "),HS=a("a"),fUe=o("BartConfig"),mUe=o(" (BART model)"),gUe=l(),Xf=a("li"),Qae=a("strong"),hUe=o("beit"),pUe=o(" \u2014 "),US=a("a"),_Ue=o("BeitConfig"),uUe=o(" (BEiT model)"),bUe=l(),zf=a("li"),Wae=a("strong"),vUe=o("bert"),FUe=o(" \u2014 "),JS=a("a"),TUe=o("BertConfig"),MUe=o(" (BERT model)"),EUe=l(),Qf=a("li"),Hae=a("strong"),CUe=o("bert-generation"),wUe=o(" \u2014 "),YS=a("a"),AUe=o("BertGenerationConfig"),LUe=o(" (Bert Generation model)"),yUe=l(),Wf=a("li"),Uae=a("strong"),xUe=o("big_bird"),$Ue=o(" \u2014 "),KS=a("a"),kUe=o("BigBirdConfig"),SUe=o(" (BigBird model)"),RUe=l(),Hf=a("li"),Jae=a("strong"),PUe=o("bigbird_pegasus"),BUe=o(" \u2014 "),ZS=a("a"),NUe=o("BigBirdPegasusConfig"),IUe=o(" (BigBird-Pegasus model)"),qUe=l(),Uf=a("li"),Yae=a("strong"),jUe=o("blenderbot"),DUe=o(" \u2014 "),eR=a("a"),GUe=o("BlenderbotConfig"),OUe=o(" (Blenderbot model)"),VUe=l(),Jf=a("li"),Kae=a("strong"),XUe=o("blenderbot-small"),zUe=o(" \u2014 "),oR=a("a"),QUe=o("BlenderbotSmallConfig"),WUe=o(" (BlenderbotSmall model)"),HUe=l(),Yf=a("li"),Zae=a("strong"),UUe=o("bloom"),JUe=o(" \u2014 "),rR=a("a"),YUe=o("BloomConfig"),KUe=o(" (BLOOM model)"),ZUe=l(),Kf=a("li"),ene=a("strong"),eJe=o("camembert"),oJe=o(" \u2014 "),tR=a("a"),rJe=o("CamembertConfig"),tJe=o(" (CamemBERT model)"),aJe=l(),Zf=a("li"),one=a("strong"),nJe=o("canine"),sJe=o(" \u2014 "),aR=a("a"),lJe=o("CanineConfig"),iJe=o(" (CANINE model)"),dJe=l(),em=a("li"),rne=a("strong"),cJe=o("clip"),fJe=o(" \u2014 "),nR=a("a"),mJe=o("CLIPConfig"),gJe=o(" (CLIP model)"),hJe=l(),om=a("li"),tne=a("strong"),pJe=o("codegen"),_Je=o(" \u2014 "),sR=a("a"),uJe=o("CodeGenConfig"),bJe=o(" (CodeGen model)"),vJe=l(),rm=a("li"),ane=a("strong"),FJe=o("convbert"),TJe=o(" \u2014 "),lR=a("a"),MJe=o("ConvBertConfig"),EJe=o(" (ConvBERT model)"),CJe=l(),tm=a("li"),nne=a("strong"),wJe=o("convnext"),AJe=o(" \u2014 "),iR=a("a"),LJe=o("ConvNextConfig"),yJe=o(" (ConvNeXT model)"),xJe=l(),am=a("li"),sne=a("strong"),$Je=o("ctrl"),kJe=o(" \u2014 "),dR=a("a"),SJe=o("CTRLConfig"),RJe=o(" (CTRL model)"),PJe=l(),nm=a("li"),lne=a("strong"),BJe=o("cvt"),NJe=o(" \u2014 "),cR=a("a"),IJe=o("CvtConfig"),qJe=o(" (CvT model)"),jJe=l(),sm=a("li"),ine=a("strong"),DJe=o("data2vec-audio"),GJe=o(" \u2014 "),fR=a("a"),OJe=o("Data2VecAudioConfig"),VJe=o(" (Data2VecAudio model)"),XJe=l(),lm=a("li"),dne=a("strong"),zJe=o("data2vec-text"),QJe=o(" \u2014 "),mR=a("a"),WJe=o("Data2VecTextConfig"),HJe=o(" (Data2VecText model)"),UJe=l(),im=a("li"),cne=a("strong"),JJe=o("data2vec-vision"),YJe=o(" \u2014 "),gR=a("a"),KJe=o("Data2VecVisionConfig"),ZJe=o(" (Data2VecVision model)"),eYe=l(),dm=a("li"),fne=a("strong"),oYe=o("deberta"),rYe=o(" \u2014 "),hR=a("a"),tYe=o("DebertaConfig"),aYe=o(" (DeBERTa model)"),nYe=l(),cm=a("li"),mne=a("strong"),sYe=o("deberta-v2"),lYe=o(" \u2014 "),pR=a("a"),iYe=o("DebertaV2Config"),dYe=o(" (DeBERTa-v2 model)"),cYe=l(),fm=a("li"),gne=a("strong"),fYe=o("decision_transformer"),mYe=o(" \u2014 "),_R=a("a"),gYe=o("DecisionTransformerConfig"),hYe=o(" (Decision Transformer model)"),pYe=l(),mm=a("li"),hne=a("strong"),_Ye=o("deit"),uYe=o(" \u2014 "),uR=a("a"),bYe=o("DeiTConfig"),vYe=o(" (DeiT model)"),FYe=l(),gm=a("li"),pne=a("strong"),TYe=o("detr"),MYe=o(" \u2014 "),bR=a("a"),EYe=o("DetrConfig"),CYe=o(" (DETR model)"),wYe=l(),hm=a("li"),_ne=a("strong"),AYe=o("distilbert"),LYe=o(" \u2014 "),vR=a("a"),yYe=o("DistilBertConfig"),xYe=o(" (DistilBERT model)"),$Ye=l(),pm=a("li"),une=a("strong"),kYe=o("dpr"),SYe=o(" \u2014 "),FR=a("a"),RYe=o("DPRConfig"),PYe=o(" (DPR model)"),BYe=l(),_m=a("li"),bne=a("strong"),NYe=o("dpt"),IYe=o(" \u2014 "),TR=a("a"),qYe=o("DPTConfig"),jYe=o(" (DPT model)"),DYe=l(),um=a("li"),vne=a("strong"),GYe=o("electra"),OYe=o(" \u2014 "),MR=a("a"),VYe=o("ElectraConfig"),XYe=o(" (ELECTRA model)"),zYe=l(),bm=a("li"),Fne=a("strong"),QYe=o("encoder-decoder"),WYe=o(" \u2014 "),ER=a("a"),HYe=o("EncoderDecoderConfig"),UYe=o(" (Encoder decoder model)"),JYe=l(),vm=a("li"),Tne=a("strong"),YYe=o("flaubert"),KYe=o(" \u2014 "),CR=a("a"),ZYe=o("FlaubertConfig"),eKe=o(" (FlauBERT model)"),oKe=l(),Fm=a("li"),Mne=a("strong"),rKe=o("flava"),tKe=o(" \u2014 "),wR=a("a"),aKe=o("FlavaConfig"),nKe=o(" (FLAVA model)"),sKe=l(),Tm=a("li"),Ene=a("strong"),lKe=o("fnet"),iKe=o(" \u2014 "),AR=a("a"),dKe=o("FNetConfig"),cKe=o(" (FNet model)"),fKe=l(),Mm=a("li"),Cne=a("strong"),mKe=o("fsmt"),gKe=o(" \u2014 "),LR=a("a"),hKe=o("FSMTConfig"),pKe=o(" (FairSeq Machine-Translation model)"),_Ke=l(),Em=a("li"),wne=a("strong"),uKe=o("funnel"),bKe=o(" \u2014 "),yR=a("a"),vKe=o("FunnelConfig"),FKe=o(" (Funnel Transformer model)"),TKe=l(),Cm=a("li"),Ane=a("strong"),MKe=o("glpn"),EKe=o(" \u2014 "),xR=a("a"),CKe=o("GLPNConfig"),wKe=o(" (GLPN model)"),AKe=l(),wm=a("li"),Lne=a("strong"),LKe=o("gpt2"),yKe=o(" \u2014 "),$R=a("a"),xKe=o("GPT2Config"),$Ke=o(" (OpenAI GPT-2 model)"),kKe=l(),Am=a("li"),yne=a("strong"),SKe=o("gpt_neo"),RKe=o(" \u2014 "),kR=a("a"),PKe=o("GPTNeoConfig"),BKe=o(" (GPT Neo model)"),NKe=l(),Lm=a("li"),xne=a("strong"),IKe=o("gpt_neox"),qKe=o(" \u2014 "),SR=a("a"),jKe=o("GPTNeoXConfig"),DKe=o(" (GPT NeoX model)"),GKe=l(),ym=a("li"),$ne=a("strong"),OKe=o("gptj"),VKe=o(" \u2014 "),RR=a("a"),XKe=o("GPTJConfig"),zKe=o(" (GPT-J model)"),QKe=l(),xm=a("li"),kne=a("strong"),WKe=o("groupvit"),HKe=o(" \u2014 "),PR=a("a"),UKe=o("GroupViTConfig"),JKe=o(" (GroupViT model)"),YKe=l(),$m=a("li"),Sne=a("strong"),KKe=o("hubert"),ZKe=o(" \u2014 "),BR=a("a"),eZe=o("HubertConfig"),oZe=o(" (Hubert model)"),rZe=l(),km=a("li"),Rne=a("strong"),tZe=o("ibert"),aZe=o(" \u2014 "),NR=a("a"),nZe=o("IBertConfig"),sZe=o(" (I-BERT model)"),lZe=l(),Sm=a("li"),Pne=a("strong"),iZe=o("imagegpt"),dZe=o(" \u2014 "),IR=a("a"),cZe=o("ImageGPTConfig"),fZe=o(" (ImageGPT model)"),mZe=l(),Rm=a("li"),Bne=a("strong"),gZe=o("layoutlm"),hZe=o(" \u2014 "),qR=a("a"),pZe=o("LayoutLMConfig"),_Ze=o(" (LayoutLM model)"),uZe=l(),Pm=a("li"),Nne=a("strong"),bZe=o("layoutlmv2"),vZe=o(" \u2014 "),jR=a("a"),FZe=o("LayoutLMv2Config"),TZe=o(" (LayoutLMv2 model)"),MZe=l(),Bm=a("li"),Ine=a("strong"),EZe=o("layoutlmv3"),CZe=o(" \u2014 "),DR=a("a"),wZe=o("LayoutLMv3Config"),AZe=o(" (LayoutLMv3 model)"),LZe=l(),Nm=a("li"),qne=a("strong"),yZe=o("led"),xZe=o(" \u2014 "),GR=a("a"),$Ze=o("LEDConfig"),kZe=o(" (LED model)"),SZe=l(),Im=a("li"),jne=a("strong"),RZe=o("levit"),PZe=o(" \u2014 "),OR=a("a"),BZe=o("LevitConfig"),NZe=o(" (LeViT model)"),IZe=l(),qm=a("li"),Dne=a("strong"),qZe=o("longformer"),jZe=o(" \u2014 "),VR=a("a"),DZe=o("LongformerConfig"),GZe=o(" (Longformer model)"),OZe=l(),jm=a("li"),Gne=a("strong"),VZe=o("longt5"),XZe=o(" \u2014 "),XR=a("a"),zZe=o("LongT5Config"),QZe=o(" (LongT5 model)"),WZe=l(),Dm=a("li"),One=a("strong"),HZe=o("luke"),UZe=o(" \u2014 "),zR=a("a"),JZe=o("LukeConfig"),YZe=o(" (LUKE model)"),KZe=l(),Gm=a("li"),Vne=a("strong"),ZZe=o("lxmert"),eeo=o(" \u2014 "),QR=a("a"),oeo=o("LxmertConfig"),reo=o(" (LXMERT model)"),teo=l(),Om=a("li"),Xne=a("strong"),aeo=o("m2m_100"),neo=o(" \u2014 "),WR=a("a"),seo=o("M2M100Config"),leo=o(" (M2M100 model)"),ieo=l(),Vm=a("li"),zne=a("strong"),deo=o("marian"),ceo=o(" \u2014 "),HR=a("a"),feo=o("MarianConfig"),meo=o(" (Marian model)"),geo=l(),Xm=a("li"),Qne=a("strong"),heo=o("maskformer"),peo=o(" \u2014 "),UR=a("a"),_eo=o("MaskFormerConfig"),ueo=o(" (MaskFormer model)"),beo=l(),zm=a("li"),Wne=a("strong"),veo=o("mbart"),Feo=o(" \u2014 "),JR=a("a"),Teo=o("MBartConfig"),Meo=o(" (mBART model)"),Eeo=l(),Qm=a("li"),Hne=a("strong"),Ceo=o("mctct"),weo=o(" \u2014 "),YR=a("a"),Aeo=o("MCTCTConfig"),Leo=o(" (M-CTC-T model)"),yeo=l(),Wm=a("li"),Une=a("strong"),xeo=o("megatron-bert"),$eo=o(" \u2014 "),KR=a("a"),keo=o("MegatronBertConfig"),Seo=o(" (Megatron-BERT model)"),Reo=l(),Hm=a("li"),Jne=a("strong"),Peo=o("mobilebert"),Beo=o(" \u2014 "),ZR=a("a"),Neo=o("MobileBertConfig"),Ieo=o(" (MobileBERT model)"),qeo=l(),Um=a("li"),Yne=a("strong"),jeo=o("mobilevit"),Deo=o(" \u2014 "),eP=a("a"),Geo=o("MobileViTConfig"),Oeo=o(" (MobileViT model)"),Veo=l(),Jm=a("li"),Kne=a("strong"),Xeo=o("mpnet"),zeo=o(" \u2014 "),oP=a("a"),Qeo=o("MPNetConfig"),Weo=o(" (MPNet model)"),Heo=l(),Ym=a("li"),Zne=a("strong"),Ueo=o("mt5"),Jeo=o(" \u2014 "),rP=a("a"),Yeo=o("MT5Config"),Keo=o(" (MT5 model)"),Zeo=l(),Km=a("li"),ese=a("strong"),eoo=o("mvp"),ooo=o(" \u2014 "),tP=a("a"),roo=o("MvpConfig"),too=o(" (MVP model)"),aoo=l(),Zm=a("li"),ose=a("strong"),noo=o("nezha"),soo=o(" \u2014 "),aP=a("a"),loo=o("NezhaConfig"),ioo=o(" (Nezha model)"),doo=l(),eg=a("li"),rse=a("strong"),coo=o("nystromformer"),foo=o(" \u2014 "),nP=a("a"),moo=o("NystromformerConfig"),goo=o(" (Nystr\xF6mformer model)"),hoo=l(),og=a("li"),tse=a("strong"),poo=o("openai-gpt"),_oo=o(" \u2014 "),sP=a("a"),uoo=o("OpenAIGPTConfig"),boo=o(" (OpenAI GPT model)"),voo=l(),rg=a("li"),ase=a("strong"),Foo=o("opt"),Too=o(" \u2014 "),lP=a("a"),Moo=o("OPTConfig"),Eoo=o(" (OPT model)"),Coo=l(),tg=a("li"),nse=a("strong"),woo=o("pegasus"),Aoo=o(" \u2014 "),iP=a("a"),Loo=o("PegasusConfig"),yoo=o(" (Pegasus model)"),xoo=l(),ag=a("li"),sse=a("strong"),$oo=o("perceiver"),koo=o(" \u2014 "),dP=a("a"),Soo=o("PerceiverConfig"),Roo=o(" (Perceiver model)"),Poo=l(),ng=a("li"),lse=a("strong"),Boo=o("plbart"),Noo=o(" \u2014 "),cP=a("a"),Ioo=o("PLBartConfig"),qoo=o(" (PLBart model)"),joo=l(),sg=a("li"),ise=a("strong"),Doo=o("poolformer"),Goo=o(" \u2014 "),fP=a("a"),Ooo=o("PoolFormerConfig"),Voo=o(" (PoolFormer model)"),Xoo=l(),lg=a("li"),dse=a("strong"),zoo=o("prophetnet"),Qoo=o(" \u2014 "),mP=a("a"),Woo=o("ProphetNetConfig"),Hoo=o(" (ProphetNet model)"),Uoo=l(),ig=a("li"),cse=a("strong"),Joo=o("qdqbert"),Yoo=o(" \u2014 "),gP=a("a"),Koo=o("QDQBertConfig"),Zoo=o(" (QDQBert model)"),ero=l(),dg=a("li"),fse=a("strong"),oro=o("rag"),rro=o(" \u2014 "),hP=a("a"),tro=o("RagConfig"),aro=o(" (RAG model)"),nro=l(),cg=a("li"),mse=a("strong"),sro=o("realm"),lro=o(" \u2014 "),pP=a("a"),iro=o("RealmConfig"),dro=o(" (REALM model)"),cro=l(),fg=a("li"),gse=a("strong"),fro=o("reformer"),mro=o(" \u2014 "),_P=a("a"),gro=o("ReformerConfig"),hro=o(" (Reformer model)"),pro=l(),mg=a("li"),hse=a("strong"),_ro=o("regnet"),uro=o(" \u2014 "),uP=a("a"),bro=o("RegNetConfig"),vro=o(" (RegNet model)"),Fro=l(),gg=a("li"),pse=a("strong"),Tro=o("rembert"),Mro=o(" \u2014 "),bP=a("a"),Ero=o("RemBertConfig"),Cro=o(" (RemBERT model)"),wro=l(),hg=a("li"),_se=a("strong"),Aro=o("resnet"),Lro=o(" \u2014 "),vP=a("a"),yro=o("ResNetConfig"),xro=o(" (ResNet model)"),$ro=l(),pg=a("li"),use=a("strong"),kro=o("retribert"),Sro=o(" \u2014 "),FP=a("a"),Rro=o("RetriBertConfig"),Pro=o(" (RetriBERT model)"),Bro=l(),_g=a("li"),bse=a("strong"),Nro=o("roberta"),Iro=o(" \u2014 "),TP=a("a"),qro=o("RobertaConfig"),jro=o(" (RoBERTa model)"),Dro=l(),ug=a("li"),vse=a("strong"),Gro=o("roformer"),Oro=o(" \u2014 "),MP=a("a"),Vro=o("RoFormerConfig"),Xro=o(" (RoFormer model)"),zro=l(),bg=a("li"),Fse=a("strong"),Qro=o("segformer"),Wro=o(" \u2014 "),EP=a("a"),Hro=o("SegformerConfig"),Uro=o(" (SegFormer model)"),Jro=l(),vg=a("li"),Tse=a("strong"),Yro=o("sew"),Kro=o(" \u2014 "),CP=a("a"),Zro=o("SEWConfig"),eto=o(" (SEW model)"),oto=l(),Fg=a("li"),Mse=a("strong"),rto=o("sew-d"),tto=o(" \u2014 "),wP=a("a"),ato=o("SEWDConfig"),nto=o(" (SEW-D model)"),sto=l(),Tg=a("li"),Ese=a("strong"),lto=o("speech-encoder-decoder"),ito=o(" \u2014 "),AP=a("a"),dto=o("SpeechEncoderDecoderConfig"),cto=o(" (Speech Encoder decoder model)"),fto=l(),Mg=a("li"),Cse=a("strong"),mto=o("speech_to_text"),gto=o(" \u2014 "),LP=a("a"),hto=o("Speech2TextConfig"),pto=o(" (Speech2Text model)"),_to=l(),Eg=a("li"),wse=a("strong"),uto=o("speech_to_text_2"),bto=o(" \u2014 "),yP=a("a"),vto=o("Speech2Text2Config"),Fto=o(" (Speech2Text2 model)"),Tto=l(),Cg=a("li"),Ase=a("strong"),Mto=o("splinter"),Eto=o(" \u2014 "),xP=a("a"),Cto=o("SplinterConfig"),wto=o(" (Splinter model)"),Ato=l(),wg=a("li"),Lse=a("strong"),Lto=o("squeezebert"),yto=o(" \u2014 "),$P=a("a"),xto=o("SqueezeBertConfig"),$to=o(" (SqueezeBERT model)"),kto=l(),Ag=a("li"),yse=a("strong"),Sto=o("swin"),Rto=o(" \u2014 "),kP=a("a"),Pto=o("SwinConfig"),Bto=o(" (Swin Transformer model)"),Nto=l(),Lg=a("li"),xse=a("strong"),Ito=o("t5"),qto=o(" \u2014 "),SP=a("a"),jto=o("T5Config"),Dto=o(" (T5 model)"),Gto=l(),yg=a("li"),$se=a("strong"),Oto=o("tapas"),Vto=o(" \u2014 "),RP=a("a"),Xto=o("TapasConfig"),zto=o(" (TAPAS model)"),Qto=l(),xg=a("li"),kse=a("strong"),Wto=o("trajectory_transformer"),Hto=o(" \u2014 "),PP=a("a"),Uto=o("TrajectoryTransformerConfig"),Jto=o(" (Trajectory Transformer model)"),Yto=l(),$g=a("li"),Sse=a("strong"),Kto=o("transfo-xl"),Zto=o(" \u2014 "),BP=a("a"),eao=o("TransfoXLConfig"),oao=o(" (Transformer-XL model)"),rao=l(),kg=a("li"),Rse=a("strong"),tao=o("trocr"),aao=o(" \u2014 "),NP=a("a"),nao=o("TrOCRConfig"),sao=o(" (TrOCR model)"),lao=l(),Sg=a("li"),Pse=a("strong"),iao=o("unispeech"),dao=o(" \u2014 "),IP=a("a"),cao=o("UniSpeechConfig"),fao=o(" (UniSpeech model)"),mao=l(),Rg=a("li"),Bse=a("strong"),gao=o("unispeech-sat"),hao=o(" \u2014 "),qP=a("a"),pao=o("UniSpeechSatConfig"),_ao=o(" (UniSpeechSat model)"),uao=l(),Pg=a("li"),Nse=a("strong"),bao=o("van"),vao=o(" \u2014 "),jP=a("a"),Fao=o("VanConfig"),Tao=o(" (VAN model)"),Mao=l(),Bg=a("li"),Ise=a("strong"),Eao=o("vilt"),Cao=o(" \u2014 "),DP=a("a"),wao=o("ViltConfig"),Aao=o(" (ViLT model)"),Lao=l(),Ng=a("li"),qse=a("strong"),yao=o("vision-encoder-decoder"),xao=o(" \u2014 "),GP=a("a"),$ao=o("VisionEncoderDecoderConfig"),kao=o(" (Vision Encoder decoder model)"),Sao=l(),Ig=a("li"),jse=a("strong"),Rao=o("vision-text-dual-encoder"),Pao=o(" \u2014 "),OP=a("a"),Bao=o("VisionTextDualEncoderConfig"),Nao=o(" (VisionTextDualEncoder model)"),Iao=l(),qg=a("li"),Dse=a("strong"),qao=o("visual_bert"),jao=o(" \u2014 "),VP=a("a"),Dao=o("VisualBertConfig"),Gao=o(" (VisualBERT model)"),Oao=l(),jg=a("li"),Gse=a("strong"),Vao=o("vit"),Xao=o(" \u2014 "),XP=a("a"),zao=o("ViTConfig"),Qao=o(" (ViT model)"),Wao=l(),Dg=a("li"),Ose=a("strong"),Hao=o("vit_mae"),Uao=o(" \u2014 "),zP=a("a"),Jao=o("ViTMAEConfig"),Yao=o(" (ViTMAE model)"),Kao=l(),Gg=a("li"),Vse=a("strong"),Zao=o("wav2vec2"),eno=o(" \u2014 "),QP=a("a"),ono=o("Wav2Vec2Config"),rno=o(" (Wav2Vec2 model)"),tno=l(),Og=a("li"),Xse=a("strong"),ano=o("wav2vec2-conformer"),nno=o(" \u2014 "),WP=a("a"),sno=o("Wav2Vec2ConformerConfig"),lno=o(" (Wav2Vec2-Conformer model)"),ino=l(),Vg=a("li"),zse=a("strong"),dno=o("wavlm"),cno=o(" \u2014 "),HP=a("a"),fno=o("WavLMConfig"),mno=o(" (WavLM model)"),gno=l(),Xg=a("li"),Qse=a("strong"),hno=o("xglm"),pno=o(" \u2014 "),UP=a("a"),_no=o("XGLMConfig"),uno=o(" (XGLM model)"),bno=l(),zg=a("li"),Wse=a("strong"),vno=o("xlm"),Fno=o(" \u2014 "),JP=a("a"),Tno=o("XLMConfig"),Mno=o(" (XLM model)"),Eno=l(),Qg=a("li"),Hse=a("strong"),Cno=o("xlm-prophetnet"),wno=o(" \u2014 "),YP=a("a"),Ano=o("XLMProphetNetConfig"),Lno=o(" (XLM-ProphetNet model)"),yno=l(),Wg=a("li"),Use=a("strong"),xno=o("xlm-roberta"),$no=o(" \u2014 "),KP=a("a"),kno=o("XLMRobertaConfig"),Sno=o(" (XLM-RoBERTa model)"),Rno=l(),Hg=a("li"),Jse=a("strong"),Pno=o("xlm-roberta-xl"),Bno=o(" \u2014 "),ZP=a("a"),Nno=o("XLMRobertaXLConfig"),Ino=o(" (XLM-RoBERTa-XL model)"),qno=l(),Ug=a("li"),Yse=a("strong"),jno=o("xlnet"),Dno=o(" \u2014 "),eB=a("a"),Gno=o("XLNetConfig"),Ono=o(" (XLNet model)"),Vno=l(),Jg=a("li"),Kse=a("strong"),Xno=o("yolos"),zno=o(" \u2014 "),oB=a("a"),Qno=o("YolosConfig"),Wno=o(" (YOLOS model)"),Hno=l(),Yg=a("li"),Zse=a("strong"),Uno=o("yoso"),Jno=o(" \u2014 "),rB=a("a"),Yno=o("YosoConfig"),Kno=o(" (YOSO model)"),Zno=l(),F(Kg.$$.fragment),eso=l(),Zg=a("div"),F(pL.$$.fragment),oso=l(),ele=a("p"),rso=o("Register a new configuration for this class."),TXe=l(),qi=a("h2"),eh=a("a"),ole=a("span"),F(_L.$$.fragment),tso=l(),rle=a("span"),aso=o("AutoTokenizer"),MXe=l(),Lo=a("div"),F(uL.$$.fragment),nso=l(),bL=a("p"),sso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tB=a("a"),lso=o("AutoTokenizer.from_pretrained()"),iso=o(" class method."),dso=l(),vL=a("p"),cso=o("This class cannot be instantiated directly using "),tle=a("code"),fso=o("__init__()"),mso=o(" (throws an error)."),gso=l(),yr=a("div"),F(FL.$$.fragment),hso=l(),ale=a("p"),pso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_so=l(),Pa=a("p"),uso=o("The tokenizer class to instantiate is selected based on the "),nle=a("code"),bso=o("model_type"),vso=o(` property of the config object (either
passed as an argument or loaded from `),sle=a("code"),Fso=o("pretrained_model_name_or_path"),Tso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=a("code"),Mso=o("pretrained_model_name_or_path"),Eso=o(":"),Cso=l(),k=a("ul"),jn=a("li"),ile=a("strong"),wso=o("albert"),Aso=o(" \u2014 "),aB=a("a"),Lso=o("AlbertTokenizer"),yso=o(" or "),nB=a("a"),xso=o("AlbertTokenizerFast"),$so=o(" (ALBERT model)"),kso=l(),Dn=a("li"),dle=a("strong"),Sso=o("bart"),Rso=o(" \u2014 "),sB=a("a"),Pso=o("BartTokenizer"),Bso=o(" or "),lB=a("a"),Nso=o("BartTokenizerFast"),Iso=o(" (BART model)"),qso=l(),Gn=a("li"),cle=a("strong"),jso=o("barthez"),Dso=o(" \u2014 "),iB=a("a"),Gso=o("BarthezTokenizer"),Oso=o(" or "),dB=a("a"),Vso=o("BarthezTokenizerFast"),Xso=o(" (BARThez model)"),zso=l(),oh=a("li"),fle=a("strong"),Qso=o("bartpho"),Wso=o(" \u2014 "),cB=a("a"),Hso=o("BartphoTokenizer"),Uso=o(" (BARTpho model)"),Jso=l(),On=a("li"),mle=a("strong"),Yso=o("bert"),Kso=o(" \u2014 "),fB=a("a"),Zso=o("BertTokenizer"),elo=o(" or "),mB=a("a"),olo=o("BertTokenizerFast"),rlo=o(" (BERT model)"),tlo=l(),rh=a("li"),gle=a("strong"),alo=o("bert-generation"),nlo=o(" \u2014 "),gB=a("a"),slo=o("BertGenerationTokenizer"),llo=o(" (Bert Generation model)"),ilo=l(),th=a("li"),hle=a("strong"),dlo=o("bert-japanese"),clo=o(" \u2014 "),hB=a("a"),flo=o("BertJapaneseTokenizer"),mlo=o(" (BertJapanese model)"),glo=l(),ah=a("li"),ple=a("strong"),hlo=o("bertweet"),plo=o(" \u2014 "),pB=a("a"),_lo=o("BertweetTokenizer"),ulo=o(" (BERTweet model)"),blo=l(),Vn=a("li"),_le=a("strong"),vlo=o("big_bird"),Flo=o(" \u2014 "),_B=a("a"),Tlo=o("BigBirdTokenizer"),Mlo=o(" or "),uB=a("a"),Elo=o("BigBirdTokenizerFast"),Clo=o(" (BigBird model)"),wlo=l(),Xn=a("li"),ule=a("strong"),Alo=o("bigbird_pegasus"),Llo=o(" \u2014 "),bB=a("a"),ylo=o("PegasusTokenizer"),xlo=o(" or "),vB=a("a"),$lo=o("PegasusTokenizerFast"),klo=o(" (BigBird-Pegasus model)"),Slo=l(),zn=a("li"),ble=a("strong"),Rlo=o("blenderbot"),Plo=o(" \u2014 "),FB=a("a"),Blo=o("BlenderbotTokenizer"),Nlo=o(" or "),TB=a("a"),Ilo=o("BlenderbotTokenizerFast"),qlo=o(" (Blenderbot model)"),jlo=l(),nh=a("li"),vle=a("strong"),Dlo=o("blenderbot-small"),Glo=o(" \u2014 "),MB=a("a"),Olo=o("BlenderbotSmallTokenizer"),Vlo=o(" (BlenderbotSmall model)"),Xlo=l(),sh=a("li"),Fle=a("strong"),zlo=o("bloom"),Qlo=o(" \u2014 "),EB=a("a"),Wlo=o("BloomTokenizerFast"),Hlo=o(" (BLOOM model)"),Ulo=l(),lh=a("li"),Tle=a("strong"),Jlo=o("byt5"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("ByT5Tokenizer"),Zlo=o(" (ByT5 model)"),eio=l(),Qn=a("li"),Mle=a("strong"),oio=o("camembert"),rio=o(" \u2014 "),wB=a("a"),tio=o("CamembertTokenizer"),aio=o(" or "),AB=a("a"),nio=o("CamembertTokenizerFast"),sio=o(" (CamemBERT model)"),lio=l(),ih=a("li"),Ele=a("strong"),iio=o("canine"),dio=o(" \u2014 "),LB=a("a"),cio=o("CanineTokenizer"),fio=o(" (CANINE model)"),mio=l(),Wn=a("li"),Cle=a("strong"),gio=o("clip"),hio=o(" \u2014 "),yB=a("a"),pio=o("CLIPTokenizer"),_io=o(" or "),xB=a("a"),uio=o("CLIPTokenizerFast"),bio=o(" (CLIP model)"),vio=l(),Hn=a("li"),wle=a("strong"),Fio=o("codegen"),Tio=o(" \u2014 "),$B=a("a"),Mio=o("CodeGenTokenizer"),Eio=o(" or "),kB=a("a"),Cio=o("CodeGenTokenizerFast"),wio=o(" (CodeGen model)"),Aio=l(),Un=a("li"),Ale=a("strong"),Lio=o("convbert"),yio=o(" \u2014 "),SB=a("a"),xio=o("ConvBertTokenizer"),$io=o(" or "),RB=a("a"),kio=o("ConvBertTokenizerFast"),Sio=o(" (ConvBERT model)"),Rio=l(),Jn=a("li"),Lle=a("strong"),Pio=o("cpm"),Bio=o(" \u2014 "),PB=a("a"),Nio=o("CpmTokenizer"),Iio=o(" or "),BB=a("a"),qio=o("CpmTokenizerFast"),jio=o(" (CPM model)"),Dio=l(),dh=a("li"),yle=a("strong"),Gio=o("ctrl"),Oio=o(" \u2014 "),NB=a("a"),Vio=o("CTRLTokenizer"),Xio=o(" (CTRL model)"),zio=l(),Yn=a("li"),xle=a("strong"),Qio=o("data2vec-text"),Wio=o(" \u2014 "),IB=a("a"),Hio=o("RobertaTokenizer"),Uio=o(" or "),qB=a("a"),Jio=o("RobertaTokenizerFast"),Yio=o(" (Data2VecText model)"),Kio=l(),Kn=a("li"),$le=a("strong"),Zio=o("deberta"),edo=o(" \u2014 "),jB=a("a"),odo=o("DebertaTokenizer"),rdo=o(" or "),DB=a("a"),tdo=o("DebertaTokenizerFast"),ado=o(" (DeBERTa model)"),ndo=l(),Zn=a("li"),kle=a("strong"),sdo=o("deberta-v2"),ldo=o(" \u2014 "),GB=a("a"),ido=o("DebertaV2Tokenizer"),ddo=o(" or "),OB=a("a"),cdo=o("DebertaV2TokenizerFast"),fdo=o(" (DeBERTa-v2 model)"),mdo=l(),es=a("li"),Sle=a("strong"),gdo=o("distilbert"),hdo=o(" \u2014 "),VB=a("a"),pdo=o("DistilBertTokenizer"),_do=o(" or "),XB=a("a"),udo=o("DistilBertTokenizerFast"),bdo=o(" (DistilBERT model)"),vdo=l(),os=a("li"),Rle=a("strong"),Fdo=o("dpr"),Tdo=o(" \u2014 "),zB=a("a"),Mdo=o("DPRQuestionEncoderTokenizer"),Edo=o(" or "),QB=a("a"),Cdo=o("DPRQuestionEncoderTokenizerFast"),wdo=o(" (DPR model)"),Ado=l(),rs=a("li"),Ple=a("strong"),Ldo=o("electra"),ydo=o(" \u2014 "),WB=a("a"),xdo=o("ElectraTokenizer"),$do=o(" or "),HB=a("a"),kdo=o("ElectraTokenizerFast"),Sdo=o(" (ELECTRA model)"),Rdo=l(),ch=a("li"),Ble=a("strong"),Pdo=o("flaubert"),Bdo=o(" \u2014 "),UB=a("a"),Ndo=o("FlaubertTokenizer"),Ido=o(" (FlauBERT model)"),qdo=l(),ts=a("li"),Nle=a("strong"),jdo=o("fnet"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("FNetTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("FNetTokenizerFast"),Xdo=o(" (FNet model)"),zdo=l(),fh=a("li"),Ile=a("strong"),Qdo=o("fsmt"),Wdo=o(" \u2014 "),KB=a("a"),Hdo=o("FSMTTokenizer"),Udo=o(" (FairSeq Machine-Translation model)"),Jdo=l(),as=a("li"),qle=a("strong"),Ydo=o("funnel"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("FunnelTokenizer"),eco=o(" or "),eN=a("a"),oco=o("FunnelTokenizerFast"),rco=o(" (Funnel Transformer model)"),tco=l(),ns=a("li"),jle=a("strong"),aco=o("gpt2"),nco=o(" \u2014 "),oN=a("a"),sco=o("GPT2Tokenizer"),lco=o(" or "),rN=a("a"),ico=o("GPT2TokenizerFast"),dco=o(" (OpenAI GPT-2 model)"),cco=l(),ss=a("li"),Dle=a("strong"),fco=o("gpt_neo"),mco=o(" \u2014 "),tN=a("a"),gco=o("GPT2Tokenizer"),hco=o(" or "),aN=a("a"),pco=o("GPT2TokenizerFast"),_co=o(" (GPT Neo model)"),uco=l(),mh=a("li"),Gle=a("strong"),bco=o("gpt_neox"),vco=o(" \u2014 "),nN=a("a"),Fco=o("GPTNeoXTokenizerFast"),Tco=o(" (GPT NeoX model)"),Mco=l(),ls=a("li"),Ole=a("strong"),Eco=o("gptj"),Cco=o(" \u2014 "),sN=a("a"),wco=o("GPT2Tokenizer"),Aco=o(" or "),lN=a("a"),Lco=o("GPT2TokenizerFast"),yco=o(" (GPT-J model)"),xco=l(),is=a("li"),Vle=a("strong"),$co=o("groupvit"),kco=o(" \u2014 "),iN=a("a"),Sco=o("CLIPTokenizer"),Rco=o(" or "),dN=a("a"),Pco=o("CLIPTokenizerFast"),Bco=o(" (GroupViT model)"),Nco=l(),ds=a("li"),Xle=a("strong"),Ico=o("herbert"),qco=o(" \u2014 "),cN=a("a"),jco=o("HerbertTokenizer"),Dco=o(" or "),fN=a("a"),Gco=o("HerbertTokenizerFast"),Oco=o(" (HerBERT model)"),Vco=l(),gh=a("li"),zle=a("strong"),Xco=o("hubert"),zco=o(" \u2014 "),mN=a("a"),Qco=o("Wav2Vec2CTCTokenizer"),Wco=o(" (Hubert model)"),Hco=l(),cs=a("li"),Qle=a("strong"),Uco=o("ibert"),Jco=o(" \u2014 "),gN=a("a"),Yco=o("RobertaTokenizer"),Kco=o(" or "),hN=a("a"),Zco=o("RobertaTokenizerFast"),efo=o(" (I-BERT model)"),ofo=l(),fs=a("li"),Wle=a("strong"),rfo=o("layoutlm"),tfo=o(" \u2014 "),pN=a("a"),afo=o("LayoutLMTokenizer"),nfo=o(" or "),_N=a("a"),sfo=o("LayoutLMTokenizerFast"),lfo=o(" (LayoutLM model)"),ifo=l(),ms=a("li"),Hle=a("strong"),dfo=o("layoutlmv2"),cfo=o(" \u2014 "),uN=a("a"),ffo=o("LayoutLMv2Tokenizer"),mfo=o(" or "),bN=a("a"),gfo=o("LayoutLMv2TokenizerFast"),hfo=o(" (LayoutLMv2 model)"),pfo=l(),gs=a("li"),Ule=a("strong"),_fo=o("layoutlmv3"),ufo=o(" \u2014 "),vN=a("a"),bfo=o("LayoutLMv3Tokenizer"),vfo=o(" or "),FN=a("a"),Ffo=o("LayoutLMv3TokenizerFast"),Tfo=o(" (LayoutLMv3 model)"),Mfo=l(),hs=a("li"),Jle=a("strong"),Efo=o("layoutxlm"),Cfo=o(" \u2014 "),TN=a("a"),wfo=o("LayoutXLMTokenizer"),Afo=o(" or "),MN=a("a"),Lfo=o("LayoutXLMTokenizerFast"),yfo=o(" (LayoutXLM model)"),xfo=l(),ps=a("li"),Yle=a("strong"),$fo=o("led"),kfo=o(" \u2014 "),EN=a("a"),Sfo=o("LEDTokenizer"),Rfo=o(" or "),CN=a("a"),Pfo=o("LEDTokenizerFast"),Bfo=o(" (LED model)"),Nfo=l(),_s=a("li"),Kle=a("strong"),Ifo=o("longformer"),qfo=o(" \u2014 "),wN=a("a"),jfo=o("LongformerTokenizer"),Dfo=o(" or "),AN=a("a"),Gfo=o("LongformerTokenizerFast"),Ofo=o(" (Longformer model)"),Vfo=l(),us=a("li"),Zle=a("strong"),Xfo=o("longt5"),zfo=o(" \u2014 "),LN=a("a"),Qfo=o("T5Tokenizer"),Wfo=o(" or "),yN=a("a"),Hfo=o("T5TokenizerFast"),Ufo=o(" (LongT5 model)"),Jfo=l(),hh=a("li"),eie=a("strong"),Yfo=o("luke"),Kfo=o(" \u2014 "),xN=a("a"),Zfo=o("LukeTokenizer"),emo=o(" (LUKE model)"),omo=l(),bs=a("li"),oie=a("strong"),rmo=o("lxmert"),tmo=o(" \u2014 "),$N=a("a"),amo=o("LxmertTokenizer"),nmo=o(" or "),kN=a("a"),smo=o("LxmertTokenizerFast"),lmo=o(" (LXMERT model)"),imo=l(),ph=a("li"),rie=a("strong"),dmo=o("m2m_100"),cmo=o(" \u2014 "),SN=a("a"),fmo=o("M2M100Tokenizer"),mmo=o(" (M2M100 model)"),gmo=l(),_h=a("li"),tie=a("strong"),hmo=o("marian"),pmo=o(" \u2014 "),RN=a("a"),_mo=o("MarianTokenizer"),umo=o(" (Marian model)"),bmo=l(),vs=a("li"),aie=a("strong"),vmo=o("mbart"),Fmo=o(" \u2014 "),PN=a("a"),Tmo=o("MBartTokenizer"),Mmo=o(" or "),BN=a("a"),Emo=o("MBartTokenizerFast"),Cmo=o(" (mBART model)"),wmo=l(),Fs=a("li"),nie=a("strong"),Amo=o("mbart50"),Lmo=o(" \u2014 "),NN=a("a"),ymo=o("MBart50Tokenizer"),xmo=o(" or "),IN=a("a"),$mo=o("MBart50TokenizerFast"),kmo=o(" (mBART-50 model)"),Smo=l(),Ts=a("li"),sie=a("strong"),Rmo=o("megatron-bert"),Pmo=o(" \u2014 "),qN=a("a"),Bmo=o("BertTokenizer"),Nmo=o(" or "),jN=a("a"),Imo=o("BertTokenizerFast"),qmo=o(" (Megatron-BERT model)"),jmo=l(),uh=a("li"),lie=a("strong"),Dmo=o("mluke"),Gmo=o(" \u2014 "),DN=a("a"),Omo=o("MLukeTokenizer"),Vmo=o(" (mLUKE model)"),Xmo=l(),Ms=a("li"),iie=a("strong"),zmo=o("mobilebert"),Qmo=o(" \u2014 "),GN=a("a"),Wmo=o("MobileBertTokenizer"),Hmo=o(" or "),ON=a("a"),Umo=o("MobileBertTokenizerFast"),Jmo=o(" (MobileBERT model)"),Ymo=l(),Es=a("li"),die=a("strong"),Kmo=o("mpnet"),Zmo=o(" \u2014 "),VN=a("a"),ego=o("MPNetTokenizer"),ogo=o(" or "),XN=a("a"),rgo=o("MPNetTokenizerFast"),tgo=o(" (MPNet model)"),ago=l(),Cs=a("li"),cie=a("strong"),ngo=o("mt5"),sgo=o(" \u2014 "),zN=a("a"),lgo=o("MT5Tokenizer"),igo=o(" or "),QN=a("a"),dgo=o("MT5TokenizerFast"),cgo=o(" (MT5 model)"),fgo=l(),ws=a("li"),fie=a("strong"),mgo=o("mvp"),ggo=o(" \u2014 "),WN=a("a"),hgo=o("MvpTokenizer"),pgo=o(" or "),HN=a("a"),_go=o("MvpTokenizerFast"),ugo=o(" (MVP model)"),bgo=l(),As=a("li"),mie=a("strong"),vgo=o("nezha"),Fgo=o(" \u2014 "),UN=a("a"),Tgo=o("BertTokenizer"),Mgo=o(" or "),JN=a("a"),Ego=o("BertTokenizerFast"),Cgo=o(" (Nezha model)"),wgo=l(),Ls=a("li"),gie=a("strong"),Ago=o("nllb"),Lgo=o(" \u2014 "),YN=a("a"),ygo=o("NllbTokenizer"),xgo=o(" or "),KN=a("a"),$go=o("NllbTokenizerFast"),kgo=o(" (NLLB model)"),Sgo=l(),ys=a("li"),hie=a("strong"),Rgo=o("nystromformer"),Pgo=o(" \u2014 "),ZN=a("a"),Bgo=o("AlbertTokenizer"),Ngo=o(" or "),eI=a("a"),Igo=o("AlbertTokenizerFast"),qgo=o(" (Nystr\xF6mformer model)"),jgo=l(),xs=a("li"),pie=a("strong"),Dgo=o("openai-gpt"),Ggo=o(" \u2014 "),oI=a("a"),Ogo=o("OpenAIGPTTokenizer"),Vgo=o(" or "),rI=a("a"),Xgo=o("OpenAIGPTTokenizerFast"),zgo=o(" (OpenAI GPT model)"),Qgo=l(),bh=a("li"),_ie=a("strong"),Wgo=o("opt"),Hgo=o(" \u2014 "),tI=a("a"),Ugo=o("GPT2Tokenizer"),Jgo=o(" (OPT model)"),Ygo=l(),$s=a("li"),uie=a("strong"),Kgo=o("pegasus"),Zgo=o(" \u2014 "),aI=a("a"),eho=o("PegasusTokenizer"),oho=o(" or "),nI=a("a"),rho=o("PegasusTokenizerFast"),tho=o(" (Pegasus model)"),aho=l(),vh=a("li"),bie=a("strong"),nho=o("perceiver"),sho=o(" \u2014 "),sI=a("a"),lho=o("PerceiverTokenizer"),iho=o(" (Perceiver model)"),dho=l(),Fh=a("li"),vie=a("strong"),cho=o("phobert"),fho=o(" \u2014 "),lI=a("a"),mho=o("PhobertTokenizer"),gho=o(" (PhoBERT model)"),hho=l(),Th=a("li"),Fie=a("strong"),pho=o("plbart"),_ho=o(" \u2014 "),iI=a("a"),uho=o("PLBartTokenizer"),bho=o(" (PLBart model)"),vho=l(),Mh=a("li"),Tie=a("strong"),Fho=o("prophetnet"),Tho=o(" \u2014 "),dI=a("a"),Mho=o("ProphetNetTokenizer"),Eho=o(" (ProphetNet model)"),Cho=l(),ks=a("li"),Mie=a("strong"),who=o("qdqbert"),Aho=o(" \u2014 "),cI=a("a"),Lho=o("BertTokenizer"),yho=o(" or "),fI=a("a"),xho=o("BertTokenizerFast"),$ho=o(" (QDQBert model)"),kho=l(),Eh=a("li"),Eie=a("strong"),Sho=o("rag"),Rho=o(" \u2014 "),mI=a("a"),Pho=o("RagTokenizer"),Bho=o(" (RAG model)"),Nho=l(),Ss=a("li"),Cie=a("strong"),Iho=o("realm"),qho=o(" \u2014 "),gI=a("a"),jho=o("RealmTokenizer"),Dho=o(" or "),hI=a("a"),Gho=o("RealmTokenizerFast"),Oho=o(" (REALM model)"),Vho=l(),Rs=a("li"),wie=a("strong"),Xho=o("reformer"),zho=o(" \u2014 "),pI=a("a"),Qho=o("ReformerTokenizer"),Who=o(" or "),_I=a("a"),Hho=o("ReformerTokenizerFast"),Uho=o(" (Reformer model)"),Jho=l(),Ps=a("li"),Aie=a("strong"),Yho=o("rembert"),Kho=o(" \u2014 "),uI=a("a"),Zho=o("RemBertTokenizer"),epo=o(" or "),bI=a("a"),opo=o("RemBertTokenizerFast"),rpo=o(" (RemBERT model)"),tpo=l(),Bs=a("li"),Lie=a("strong"),apo=o("retribert"),npo=o(" \u2014 "),vI=a("a"),spo=o("RetriBertTokenizer"),lpo=o(" or "),FI=a("a"),ipo=o("RetriBertTokenizerFast"),dpo=o(" (RetriBERT model)"),cpo=l(),Ns=a("li"),yie=a("strong"),fpo=o("roberta"),mpo=o(" \u2014 "),TI=a("a"),gpo=o("RobertaTokenizer"),hpo=o(" or "),MI=a("a"),ppo=o("RobertaTokenizerFast"),_po=o(" (RoBERTa model)"),upo=l(),Is=a("li"),xie=a("strong"),bpo=o("roformer"),vpo=o(" \u2014 "),EI=a("a"),Fpo=o("RoFormerTokenizer"),Tpo=o(" or "),CI=a("a"),Mpo=o("RoFormerTokenizerFast"),Epo=o(" (RoFormer model)"),Cpo=l(),Ch=a("li"),$ie=a("strong"),wpo=o("speech_to_text"),Apo=o(" \u2014 "),wI=a("a"),Lpo=o("Speech2TextTokenizer"),ypo=o(" (Speech2Text model)"),xpo=l(),wh=a("li"),kie=a("strong"),$po=o("speech_to_text_2"),kpo=o(" \u2014 "),AI=a("a"),Spo=o("Speech2Text2Tokenizer"),Rpo=o(" (Speech2Text2 model)"),Ppo=l(),qs=a("li"),Sie=a("strong"),Bpo=o("splinter"),Npo=o(" \u2014 "),LI=a("a"),Ipo=o("SplinterTokenizer"),qpo=o(" or "),yI=a("a"),jpo=o("SplinterTokenizerFast"),Dpo=o(" (Splinter model)"),Gpo=l(),js=a("li"),Rie=a("strong"),Opo=o("squeezebert"),Vpo=o(" \u2014 "),xI=a("a"),Xpo=o("SqueezeBertTokenizer"),zpo=o(" or "),$I=a("a"),Qpo=o("SqueezeBertTokenizerFast"),Wpo=o(" (SqueezeBERT model)"),Hpo=l(),Ds=a("li"),Pie=a("strong"),Upo=o("t5"),Jpo=o(" \u2014 "),kI=a("a"),Ypo=o("T5Tokenizer"),Kpo=o(" or "),SI=a("a"),Zpo=o("T5TokenizerFast"),e_o=o(" (T5 model)"),o_o=l(),Ah=a("li"),Bie=a("strong"),r_o=o("tapas"),t_o=o(" \u2014 "),RI=a("a"),a_o=o("TapasTokenizer"),n_o=o(" (TAPAS model)"),s_o=l(),Lh=a("li"),Nie=a("strong"),l_o=o("tapex"),i_o=o(" \u2014 "),PI=a("a"),d_o=o("TapexTokenizer"),c_o=o(" (TAPEX model)"),f_o=l(),yh=a("li"),Iie=a("strong"),m_o=o("transfo-xl"),g_o=o(" \u2014 "),BI=a("a"),h_o=o("TransfoXLTokenizer"),p_o=o(" (Transformer-XL model)"),__o=l(),Gs=a("li"),qie=a("strong"),u_o=o("vilt"),b_o=o(" \u2014 "),NI=a("a"),v_o=o("BertTokenizer"),F_o=o(" or "),II=a("a"),T_o=o("BertTokenizerFast"),M_o=o(" (ViLT model)"),E_o=l(),Os=a("li"),jie=a("strong"),C_o=o("visual_bert"),w_o=o(" \u2014 "),qI=a("a"),A_o=o("BertTokenizer"),L_o=o(" or "),jI=a("a"),y_o=o("BertTokenizerFast"),x_o=o(" (VisualBERT model)"),$_o=l(),xh=a("li"),Die=a("strong"),k_o=o("wav2vec2"),S_o=o(" \u2014 "),DI=a("a"),R_o=o("Wav2Vec2CTCTokenizer"),P_o=o(" (Wav2Vec2 model)"),B_o=l(),$h=a("li"),Gie=a("strong"),N_o=o("wav2vec2-conformer"),I_o=o(" \u2014 "),GI=a("a"),q_o=o("Wav2Vec2CTCTokenizer"),j_o=o(" (Wav2Vec2-Conformer model)"),D_o=l(),kh=a("li"),Oie=a("strong"),G_o=o("wav2vec2_phoneme"),O_o=o(" \u2014 "),OI=a("a"),V_o=o("Wav2Vec2PhonemeCTCTokenizer"),X_o=o(" (Wav2Vec2Phoneme model)"),z_o=l(),Vs=a("li"),Vie=a("strong"),Q_o=o("xglm"),W_o=o(" \u2014 "),VI=a("a"),H_o=o("XGLMTokenizer"),U_o=o(" or "),XI=a("a"),J_o=o("XGLMTokenizerFast"),Y_o=o(" (XGLM model)"),K_o=l(),Sh=a("li"),Xie=a("strong"),Z_o=o("xlm"),euo=o(" \u2014 "),zI=a("a"),ouo=o("XLMTokenizer"),ruo=o(" (XLM model)"),tuo=l(),Rh=a("li"),zie=a("strong"),auo=o("xlm-prophetnet"),nuo=o(" \u2014 "),QI=a("a"),suo=o("XLMProphetNetTokenizer"),luo=o(" (XLM-ProphetNet model)"),iuo=l(),Xs=a("li"),Qie=a("strong"),duo=o("xlm-roberta"),cuo=o(" \u2014 "),WI=a("a"),fuo=o("XLMRobertaTokenizer"),muo=o(" or "),HI=a("a"),guo=o("XLMRobertaTokenizerFast"),huo=o(" (XLM-RoBERTa model)"),puo=l(),zs=a("li"),Wie=a("strong"),_uo=o("xlm-roberta-xl"),uuo=o(" \u2014 "),UI=a("a"),buo=o("RobertaTokenizer"),vuo=o(" or "),JI=a("a"),Fuo=o("RobertaTokenizerFast"),Tuo=o(" (XLM-RoBERTa-XL model)"),Muo=l(),Qs=a("li"),Hie=a("strong"),Euo=o("xlnet"),Cuo=o(" \u2014 "),YI=a("a"),wuo=o("XLNetTokenizer"),Auo=o(" or "),KI=a("a"),Luo=o("XLNetTokenizerFast"),yuo=o(" (XLNet model)"),xuo=l(),Ws=a("li"),Uie=a("strong"),$uo=o("yoso"),kuo=o(" \u2014 "),ZI=a("a"),Suo=o("AlbertTokenizer"),Ruo=o(" or "),eq=a("a"),Puo=o("AlbertTokenizerFast"),Buo=o(" (YOSO model)"),Nuo=l(),F(Ph.$$.fragment),Iuo=l(),Bh=a("div"),F(TL.$$.fragment),quo=l(),Jie=a("p"),juo=o("Register a new tokenizer in this mapping."),EXe=l(),ji=a("h2"),Nh=a("a"),Yie=a("span"),F(ML.$$.fragment),Duo=l(),Kie=a("span"),Guo=o("AutoFeatureExtractor"),CXe=l(),yo=a("div"),F(EL.$$.fragment),Ouo=l(),CL=a("p"),Vuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oq=a("a"),Xuo=o("AutoFeatureExtractor.from_pretrained()"),zuo=o(" class method."),Quo=l(),wL=a("p"),Wuo=o("This class cannot be instantiated directly using "),Zie=a("code"),Huo=o("__init__()"),Uuo=o(" (throws an error)."),Juo=l(),Ue=a("div"),F(AL.$$.fragment),Yuo=l(),ede=a("p"),Kuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zuo=l(),Ba=a("p"),e1o=o("The feature extractor class to instantiate is selected based on the "),ode=a("code"),o1o=o("model_type"),r1o=o(` property of the config object
(either passed as an argument or loaded from `),rde=a("code"),t1o=o("pretrained_model_name_or_path"),a1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tde=a("code"),n1o=o("pretrained_model_name_or_path"),s1o=o(":"),l1o=l(),Y=a("ul"),Ih=a("li"),ade=a("strong"),i1o=o("beit"),d1o=o(" \u2014 "),rq=a("a"),c1o=o("BeitFeatureExtractor"),f1o=o(" (BEiT model)"),m1o=l(),qh=a("li"),nde=a("strong"),g1o=o("clip"),h1o=o(" \u2014 "),tq=a("a"),p1o=o("CLIPFeatureExtractor"),_1o=o(" (CLIP model)"),u1o=l(),jh=a("li"),sde=a("strong"),b1o=o("convnext"),v1o=o(" \u2014 "),aq=a("a"),F1o=o("ConvNextFeatureExtractor"),T1o=o(" (ConvNeXT model)"),M1o=l(),Dh=a("li"),lde=a("strong"),E1o=o("cvt"),C1o=o(" \u2014 "),nq=a("a"),w1o=o("ConvNextFeatureExtractor"),A1o=o(" (CvT model)"),L1o=l(),Gh=a("li"),ide=a("strong"),y1o=o("data2vec-audio"),x1o=o(" \u2014 "),sq=a("a"),$1o=o("Wav2Vec2FeatureExtractor"),k1o=o(" (Data2VecAudio model)"),S1o=l(),Oh=a("li"),dde=a("strong"),R1o=o("data2vec-vision"),P1o=o(" \u2014 "),lq=a("a"),B1o=o("BeitFeatureExtractor"),N1o=o(" (Data2VecVision model)"),I1o=l(),Vh=a("li"),cde=a("strong"),q1o=o("deit"),j1o=o(" \u2014 "),iq=a("a"),D1o=o("DeiTFeatureExtractor"),G1o=o(" (DeiT model)"),O1o=l(),Xh=a("li"),fde=a("strong"),V1o=o("detr"),X1o=o(" \u2014 "),dq=a("a"),z1o=o("DetrFeatureExtractor"),Q1o=o(" (DETR model)"),W1o=l(),zh=a("li"),mde=a("strong"),H1o=o("dpt"),U1o=o(" \u2014 "),cq=a("a"),J1o=o("DPTFeatureExtractor"),Y1o=o(" (DPT model)"),K1o=l(),Qh=a("li"),gde=a("strong"),Z1o=o("flava"),e2o=o(" \u2014 "),fq=a("a"),o2o=o("FlavaFeatureExtractor"),r2o=o(" (FLAVA model)"),t2o=l(),Wh=a("li"),hde=a("strong"),a2o=o("glpn"),n2o=o(" \u2014 "),mq=a("a"),s2o=o("GLPNFeatureExtractor"),l2o=o(" (GLPN model)"),i2o=l(),Hh=a("li"),pde=a("strong"),d2o=o("groupvit"),c2o=o(" \u2014 "),gq=a("a"),f2o=o("CLIPFeatureExtractor"),m2o=o(" (GroupViT model)"),g2o=l(),Uh=a("li"),_de=a("strong"),h2o=o("hubert"),p2o=o(" \u2014 "),hq=a("a"),_2o=o("Wav2Vec2FeatureExtractor"),u2o=o(" (Hubert model)"),b2o=l(),Jh=a("li"),ude=a("strong"),v2o=o("imagegpt"),F2o=o(" \u2014 "),pq=a("a"),T2o=o("ImageGPTFeatureExtractor"),M2o=o(" (ImageGPT model)"),E2o=l(),Yh=a("li"),bde=a("strong"),C2o=o("layoutlmv2"),w2o=o(" \u2014 "),_q=a("a"),A2o=o("LayoutLMv2FeatureExtractor"),L2o=o(" (LayoutLMv2 model)"),y2o=l(),Kh=a("li"),vde=a("strong"),x2o=o("layoutlmv3"),$2o=o(" \u2014 "),uq=a("a"),k2o=o("LayoutLMv3FeatureExtractor"),S2o=o(" (LayoutLMv3 model)"),R2o=l(),Zh=a("li"),Fde=a("strong"),P2o=o("levit"),B2o=o(" \u2014 "),bq=a("a"),N2o=o("LevitFeatureExtractor"),I2o=o(" (LeViT model)"),q2o=l(),ep=a("li"),Tde=a("strong"),j2o=o("maskformer"),D2o=o(" \u2014 "),vq=a("a"),G2o=o("MaskFormerFeatureExtractor"),O2o=o(" (MaskFormer model)"),V2o=l(),op=a("li"),Mde=a("strong"),X2o=o("mctct"),z2o=o(" \u2014 "),Fq=a("a"),Q2o=o("MCTCTFeatureExtractor"),W2o=o(" (M-CTC-T model)"),H2o=l(),rp=a("li"),Ede=a("strong"),U2o=o("mobilevit"),J2o=o(" \u2014 "),Tq=a("a"),Y2o=o("MobileViTFeatureExtractor"),K2o=o(" (MobileViT model)"),Z2o=l(),tp=a("li"),Cde=a("strong"),ebo=o("perceiver"),obo=o(" \u2014 "),Mq=a("a"),rbo=o("PerceiverFeatureExtractor"),tbo=o(" (Perceiver model)"),abo=l(),ap=a("li"),wde=a("strong"),nbo=o("poolformer"),sbo=o(" \u2014 "),Eq=a("a"),lbo=o("PoolFormerFeatureExtractor"),ibo=o(" (PoolFormer model)"),dbo=l(),np=a("li"),Ade=a("strong"),cbo=o("regnet"),fbo=o(" \u2014 "),Cq=a("a"),mbo=o("ConvNextFeatureExtractor"),gbo=o(" (RegNet model)"),hbo=l(),sp=a("li"),Lde=a("strong"),pbo=o("resnet"),_bo=o(" \u2014 "),wq=a("a"),ubo=o("ConvNextFeatureExtractor"),bbo=o(" (ResNet model)"),vbo=l(),lp=a("li"),yde=a("strong"),Fbo=o("segformer"),Tbo=o(" \u2014 "),Aq=a("a"),Mbo=o("SegformerFeatureExtractor"),Ebo=o(" (SegFormer model)"),Cbo=l(),ip=a("li"),xde=a("strong"),wbo=o("speech_to_text"),Abo=o(" \u2014 "),Lq=a("a"),Lbo=o("Speech2TextFeatureExtractor"),ybo=o(" (Speech2Text model)"),xbo=l(),dp=a("li"),$de=a("strong"),$bo=o("swin"),kbo=o(" \u2014 "),yq=a("a"),Sbo=o("ViTFeatureExtractor"),Rbo=o(" (Swin Transformer model)"),Pbo=l(),cp=a("li"),kde=a("strong"),Bbo=o("van"),Nbo=o(" \u2014 "),xq=a("a"),Ibo=o("ConvNextFeatureExtractor"),qbo=o(" (VAN model)"),jbo=l(),fp=a("li"),Sde=a("strong"),Dbo=o("vilt"),Gbo=o(" \u2014 "),$q=a("a"),Obo=o("ViltFeatureExtractor"),Vbo=o(" (ViLT model)"),Xbo=l(),mp=a("li"),Rde=a("strong"),zbo=o("vit"),Qbo=o(" \u2014 "),kq=a("a"),Wbo=o("ViTFeatureExtractor"),Hbo=o(" (ViT model)"),Ubo=l(),gp=a("li"),Pde=a("strong"),Jbo=o("vit_mae"),Ybo=o(" \u2014 "),Sq=a("a"),Kbo=o("ViTFeatureExtractor"),Zbo=o(" (ViTMAE model)"),e3o=l(),hp=a("li"),Bde=a("strong"),o3o=o("wav2vec2"),r3o=o(" \u2014 "),Rq=a("a"),t3o=o("Wav2Vec2FeatureExtractor"),a3o=o(" (Wav2Vec2 model)"),n3o=l(),pp=a("li"),Nde=a("strong"),s3o=o("wav2vec2-conformer"),l3o=o(" \u2014 "),Pq=a("a"),i3o=o("Wav2Vec2FeatureExtractor"),d3o=o(" (Wav2Vec2-Conformer model)"),c3o=l(),_p=a("li"),Ide=a("strong"),f3o=o("yolos"),m3o=o(" \u2014 "),Bq=a("a"),g3o=o("YolosFeatureExtractor"),h3o=o(" (YOLOS model)"),p3o=l(),F(up.$$.fragment),_3o=l(),F(bp.$$.fragment),u3o=l(),vp=a("div"),F(LL.$$.fragment),b3o=l(),qde=a("p"),v3o=o("Register a new feature extractor for this class."),wXe=l(),Di=a("h2"),Fp=a("a"),jde=a("span"),F(yL.$$.fragment),F3o=l(),Dde=a("span"),T3o=o("AutoProcessor"),AXe=l(),xo=a("div"),F(xL.$$.fragment),M3o=l(),$L=a("p"),E3o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Nq=a("a"),C3o=o("AutoProcessor.from_pretrained()"),w3o=o(" class method."),A3o=l(),kL=a("p"),L3o=o("This class cannot be instantiated directly using "),Gde=a("code"),y3o=o("__init__()"),x3o=o(" (throws an error)."),$3o=l(),Je=a("div"),F(SL.$$.fragment),k3o=l(),Ode=a("p"),S3o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),R3o=l(),Gi=a("p"),P3o=o("The processor class to instantiate is selected based on the "),Vde=a("code"),B3o=o("model_type"),N3o=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),I3o=o("pretrained_model_name_or_path"),q3o=o(" if possible):"),j3o=l(),pe=a("ul"),Tp=a("li"),zde=a("strong"),D3o=o("clip"),G3o=o(" \u2014 "),Iq=a("a"),O3o=o("CLIPProcessor"),V3o=o(" (CLIP model)"),X3o=l(),Mp=a("li"),Qde=a("strong"),z3o=o("flava"),Q3o=o(" \u2014 "),Wde=a("code"),W3o=o("FLAVAProcessor"),H3o=o(" (FLAVA model)"),U3o=l(),Ep=a("li"),Hde=a("strong"),J3o=o("groupvit"),Y3o=o(" \u2014 "),qq=a("a"),K3o=o("CLIPProcessor"),Z3o=o(" (GroupViT model)"),evo=l(),Cp=a("li"),Ude=a("strong"),ovo=o("layoutlmv2"),rvo=o(" \u2014 "),jq=a("a"),tvo=o("LayoutLMv2Processor"),avo=o(" (LayoutLMv2 model)"),nvo=l(),wp=a("li"),Jde=a("strong"),svo=o("layoutlmv3"),lvo=o(" \u2014 "),Dq=a("a"),ivo=o("LayoutLMv3Processor"),dvo=o(" (LayoutLMv3 model)"),cvo=l(),Ap=a("li"),Yde=a("strong"),fvo=o("layoutxlm"),mvo=o(" \u2014 "),Gq=a("a"),gvo=o("LayoutXLMProcessor"),hvo=o(" (LayoutXLM model)"),pvo=l(),Lp=a("li"),Kde=a("strong"),_vo=o("sew"),uvo=o(" \u2014 "),Oq=a("a"),bvo=o("Wav2Vec2Processor"),vvo=o(" (SEW model)"),Fvo=l(),yp=a("li"),Zde=a("strong"),Tvo=o("sew-d"),Mvo=o(" \u2014 "),Vq=a("a"),Evo=o("Wav2Vec2Processor"),Cvo=o(" (SEW-D model)"),wvo=l(),xp=a("li"),ece=a("strong"),Avo=o("speech_to_text"),Lvo=o(" \u2014 "),Xq=a("a"),yvo=o("Speech2TextProcessor"),xvo=o(" (Speech2Text model)"),$vo=l(),$p=a("li"),oce=a("strong"),kvo=o("speech_to_text_2"),Svo=o(" \u2014 "),zq=a("a"),Rvo=o("Speech2Text2Processor"),Pvo=o(" (Speech2Text2 model)"),Bvo=l(),kp=a("li"),rce=a("strong"),Nvo=o("trocr"),Ivo=o(" \u2014 "),Qq=a("a"),qvo=o("TrOCRProcessor"),jvo=o(" (TrOCR model)"),Dvo=l(),Sp=a("li"),tce=a("strong"),Gvo=o("unispeech"),Ovo=o(" \u2014 "),Wq=a("a"),Vvo=o("Wav2Vec2Processor"),Xvo=o(" (UniSpeech model)"),zvo=l(),Rp=a("li"),ace=a("strong"),Qvo=o("unispeech-sat"),Wvo=o(" \u2014 "),Hq=a("a"),Hvo=o("Wav2Vec2Processor"),Uvo=o(" (UniSpeechSat model)"),Jvo=l(),Pp=a("li"),nce=a("strong"),Yvo=o("vilt"),Kvo=o(" \u2014 "),Uq=a("a"),Zvo=o("ViltProcessor"),eFo=o(" (ViLT model)"),oFo=l(),Bp=a("li"),sce=a("strong"),rFo=o("vision-text-dual-encoder"),tFo=o(" \u2014 "),Jq=a("a"),aFo=o("VisionTextDualEncoderProcessor"),nFo=o(" (VisionTextDualEncoder model)"),sFo=l(),Np=a("li"),lce=a("strong"),lFo=o("wav2vec2"),iFo=o(" \u2014 "),Yq=a("a"),dFo=o("Wav2Vec2Processor"),cFo=o(" (Wav2Vec2 model)"),fFo=l(),Ip=a("li"),ice=a("strong"),mFo=o("wav2vec2-conformer"),gFo=o(" \u2014 "),Kq=a("a"),hFo=o("Wav2Vec2Processor"),pFo=o(" (Wav2Vec2-Conformer model)"),_Fo=l(),qp=a("li"),dce=a("strong"),uFo=o("wavlm"),bFo=o(" \u2014 "),Zq=a("a"),vFo=o("Wav2Vec2Processor"),FFo=o(" (WavLM model)"),TFo=l(),F(jp.$$.fragment),MFo=l(),F(Dp.$$.fragment),EFo=l(),Gp=a("div"),F(RL.$$.fragment),CFo=l(),cce=a("p"),wFo=o("Register a new processor for this class."),LXe=l(),Oi=a("h2"),Op=a("a"),fce=a("span"),F(PL.$$.fragment),AFo=l(),mce=a("span"),LFo=o("AutoModel"),yXe=l(),$o=a("div"),F(BL.$$.fragment),yFo=l(),Vi=a("p"),xFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ej=a("a"),$Fo=o("from_pretrained()"),kFo=o(" class method or the "),oj=a("a"),SFo=o("from_config()"),RFo=o(` class
method.`),PFo=l(),NL=a("p"),BFo=o("This class cannot be instantiated directly using "),gce=a("code"),NFo=o("__init__()"),IFo=o(" (throws an error)."),qFo=l(),it=a("div"),F(IL.$$.fragment),jFo=l(),hce=a("p"),DFo=o("Instantiates one of the base model classes of the library from a configuration."),GFo=l(),Xi=a("p"),OFo=o(`Note:
Loading a model from its configuration file does `),pce=a("strong"),VFo=o("not"),XFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=a("a"),zFo=o("from_pretrained()"),QFo=o(" to load the model weights."),WFo=l(),F(Vp.$$.fragment),HFo=l(),Ye=a("div"),F(qL.$$.fragment),UFo=l(),_ce=a("p"),JFo=o("Instantiate one of the base model classes of the library from a pretrained model."),YFo=l(),Na=a("p"),KFo=o("The model class to instantiate is selected based on the "),uce=a("code"),ZFo=o("model_type"),eTo=o(` property of the config object (either
passed as an argument or loaded from `),bce=a("code"),oTo=o("pretrained_model_name_or_path"),rTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=a("code"),tTo=o("pretrained_model_name_or_path"),aTo=o(":"),nTo=l(),y=a("ul"),Xp=a("li"),Fce=a("strong"),sTo=o("albert"),lTo=o(" \u2014 "),tj=a("a"),iTo=o("AlbertModel"),dTo=o(" (ALBERT model)"),cTo=l(),zp=a("li"),Tce=a("strong"),fTo=o("bart"),mTo=o(" \u2014 "),aj=a("a"),gTo=o("BartModel"),hTo=o(" (BART model)"),pTo=l(),Qp=a("li"),Mce=a("strong"),_To=o("beit"),uTo=o(" \u2014 "),nj=a("a"),bTo=o("BeitModel"),vTo=o(" (BEiT model)"),FTo=l(),Wp=a("li"),Ece=a("strong"),TTo=o("bert"),MTo=o(" \u2014 "),sj=a("a"),ETo=o("BertModel"),CTo=o(" (BERT model)"),wTo=l(),Hp=a("li"),Cce=a("strong"),ATo=o("bert-generation"),LTo=o(" \u2014 "),lj=a("a"),yTo=o("BertGenerationEncoder"),xTo=o(" (Bert Generation model)"),$To=l(),Up=a("li"),wce=a("strong"),kTo=o("big_bird"),STo=o(" \u2014 "),ij=a("a"),RTo=o("BigBirdModel"),PTo=o(" (BigBird model)"),BTo=l(),Jp=a("li"),Ace=a("strong"),NTo=o("bigbird_pegasus"),ITo=o(" \u2014 "),dj=a("a"),qTo=o("BigBirdPegasusModel"),jTo=o(" (BigBird-Pegasus model)"),DTo=l(),Yp=a("li"),Lce=a("strong"),GTo=o("blenderbot"),OTo=o(" \u2014 "),cj=a("a"),VTo=o("BlenderbotModel"),XTo=o(" (Blenderbot model)"),zTo=l(),Kp=a("li"),yce=a("strong"),QTo=o("blenderbot-small"),WTo=o(" \u2014 "),fj=a("a"),HTo=o("BlenderbotSmallModel"),UTo=o(" (BlenderbotSmall model)"),JTo=l(),Zp=a("li"),xce=a("strong"),YTo=o("bloom"),KTo=o(" \u2014 "),mj=a("a"),ZTo=o("BloomModel"),e8o=o(" (BLOOM model)"),o8o=l(),e_=a("li"),$ce=a("strong"),r8o=o("camembert"),t8o=o(" \u2014 "),gj=a("a"),a8o=o("CamembertModel"),n8o=o(" (CamemBERT model)"),s8o=l(),o_=a("li"),kce=a("strong"),l8o=o("canine"),i8o=o(" \u2014 "),hj=a("a"),d8o=o("CanineModel"),c8o=o(" (CANINE model)"),f8o=l(),r_=a("li"),Sce=a("strong"),m8o=o("clip"),g8o=o(" \u2014 "),pj=a("a"),h8o=o("CLIPModel"),p8o=o(" (CLIP model)"),_8o=l(),t_=a("li"),Rce=a("strong"),u8o=o("codegen"),b8o=o(" \u2014 "),_j=a("a"),v8o=o("CodeGenModel"),F8o=o(" (CodeGen model)"),T8o=l(),a_=a("li"),Pce=a("strong"),M8o=o("convbert"),E8o=o(" \u2014 "),uj=a("a"),C8o=o("ConvBertModel"),w8o=o(" (ConvBERT model)"),A8o=l(),n_=a("li"),Bce=a("strong"),L8o=o("convnext"),y8o=o(" \u2014 "),bj=a("a"),x8o=o("ConvNextModel"),$8o=o(" (ConvNeXT model)"),k8o=l(),s_=a("li"),Nce=a("strong"),S8o=o("ctrl"),R8o=o(" \u2014 "),vj=a("a"),P8o=o("CTRLModel"),B8o=o(" (CTRL model)"),N8o=l(),l_=a("li"),Ice=a("strong"),I8o=o("cvt"),q8o=o(" \u2014 "),Fj=a("a"),j8o=o("CvtModel"),D8o=o(" (CvT model)"),G8o=l(),i_=a("li"),qce=a("strong"),O8o=o("data2vec-audio"),V8o=o(" \u2014 "),Tj=a("a"),X8o=o("Data2VecAudioModel"),z8o=o(" (Data2VecAudio model)"),Q8o=l(),d_=a("li"),jce=a("strong"),W8o=o("data2vec-text"),H8o=o(" \u2014 "),Mj=a("a"),U8o=o("Data2VecTextModel"),J8o=o(" (Data2VecText model)"),Y8o=l(),c_=a("li"),Dce=a("strong"),K8o=o("data2vec-vision"),Z8o=o(" \u2014 "),Ej=a("a"),eMo=o("Data2VecVisionModel"),oMo=o(" (Data2VecVision model)"),rMo=l(),f_=a("li"),Gce=a("strong"),tMo=o("deberta"),aMo=o(" \u2014 "),Cj=a("a"),nMo=o("DebertaModel"),sMo=o(" (DeBERTa model)"),lMo=l(),m_=a("li"),Oce=a("strong"),iMo=o("deberta-v2"),dMo=o(" \u2014 "),wj=a("a"),cMo=o("DebertaV2Model"),fMo=o(" (DeBERTa-v2 model)"),mMo=l(),g_=a("li"),Vce=a("strong"),gMo=o("decision_transformer"),hMo=o(" \u2014 "),Aj=a("a"),pMo=o("DecisionTransformerModel"),_Mo=o(" (Decision Transformer model)"),uMo=l(),h_=a("li"),Xce=a("strong"),bMo=o("deit"),vMo=o(" \u2014 "),Lj=a("a"),FMo=o("DeiTModel"),TMo=o(" (DeiT model)"),MMo=l(),p_=a("li"),zce=a("strong"),EMo=o("detr"),CMo=o(" \u2014 "),yj=a("a"),wMo=o("DetrModel"),AMo=o(" (DETR model)"),LMo=l(),__=a("li"),Qce=a("strong"),yMo=o("distilbert"),xMo=o(" \u2014 "),xj=a("a"),$Mo=o("DistilBertModel"),kMo=o(" (DistilBERT model)"),SMo=l(),u_=a("li"),Wce=a("strong"),RMo=o("dpr"),PMo=o(" \u2014 "),$j=a("a"),BMo=o("DPRQuestionEncoder"),NMo=o(" (DPR model)"),IMo=l(),b_=a("li"),Hce=a("strong"),qMo=o("dpt"),jMo=o(" \u2014 "),kj=a("a"),DMo=o("DPTModel"),GMo=o(" (DPT model)"),OMo=l(),v_=a("li"),Uce=a("strong"),VMo=o("electra"),XMo=o(" \u2014 "),Sj=a("a"),zMo=o("ElectraModel"),QMo=o(" (ELECTRA model)"),WMo=l(),F_=a("li"),Jce=a("strong"),HMo=o("flaubert"),UMo=o(" \u2014 "),Rj=a("a"),JMo=o("FlaubertModel"),YMo=o(" (FlauBERT model)"),KMo=l(),T_=a("li"),Yce=a("strong"),ZMo=o("flava"),e4o=o(" \u2014 "),Pj=a("a"),o4o=o("FlavaModel"),r4o=o(" (FLAVA model)"),t4o=l(),M_=a("li"),Kce=a("strong"),a4o=o("fnet"),n4o=o(" \u2014 "),Bj=a("a"),s4o=o("FNetModel"),l4o=o(" (FNet model)"),i4o=l(),E_=a("li"),Zce=a("strong"),d4o=o("fsmt"),c4o=o(" \u2014 "),Nj=a("a"),f4o=o("FSMTModel"),m4o=o(" (FairSeq Machine-Translation model)"),g4o=l(),Hs=a("li"),efe=a("strong"),h4o=o("funnel"),p4o=o(" \u2014 "),Ij=a("a"),_4o=o("FunnelModel"),u4o=o(" or "),qj=a("a"),b4o=o("FunnelBaseModel"),v4o=o(" (Funnel Transformer model)"),F4o=l(),C_=a("li"),ofe=a("strong"),T4o=o("glpn"),M4o=o(" \u2014 "),jj=a("a"),E4o=o("GLPNModel"),C4o=o(" (GLPN model)"),w4o=l(),w_=a("li"),rfe=a("strong"),A4o=o("gpt2"),L4o=o(" \u2014 "),Dj=a("a"),y4o=o("GPT2Model"),x4o=o(" (OpenAI GPT-2 model)"),$4o=l(),A_=a("li"),tfe=a("strong"),k4o=o("gpt_neo"),S4o=o(" \u2014 "),Gj=a("a"),R4o=o("GPTNeoModel"),P4o=o(" (GPT Neo model)"),B4o=l(),L_=a("li"),afe=a("strong"),N4o=o("gpt_neox"),I4o=o(" \u2014 "),Oj=a("a"),q4o=o("GPTNeoXModel"),j4o=o(" (GPT NeoX model)"),D4o=l(),y_=a("li"),nfe=a("strong"),G4o=o("gptj"),O4o=o(" \u2014 "),Vj=a("a"),V4o=o("GPTJModel"),X4o=o(" (GPT-J model)"),z4o=l(),x_=a("li"),sfe=a("strong"),Q4o=o("groupvit"),W4o=o(" \u2014 "),Xj=a("a"),H4o=o("GroupViTModel"),U4o=o(" (GroupViT model)"),J4o=l(),$_=a("li"),lfe=a("strong"),Y4o=o("hubert"),K4o=o(" \u2014 "),zj=a("a"),Z4o=o("HubertModel"),eEo=o(" (Hubert model)"),oEo=l(),k_=a("li"),ife=a("strong"),rEo=o("ibert"),tEo=o(" \u2014 "),Qj=a("a"),aEo=o("IBertModel"),nEo=o(" (I-BERT model)"),sEo=l(),S_=a("li"),dfe=a("strong"),lEo=o("imagegpt"),iEo=o(" \u2014 "),Wj=a("a"),dEo=o("ImageGPTModel"),cEo=o(" (ImageGPT model)"),fEo=l(),R_=a("li"),cfe=a("strong"),mEo=o("layoutlm"),gEo=o(" \u2014 "),Hj=a("a"),hEo=o("LayoutLMModel"),pEo=o(" (LayoutLM model)"),_Eo=l(),P_=a("li"),ffe=a("strong"),uEo=o("layoutlmv2"),bEo=o(" \u2014 "),Uj=a("a"),vEo=o("LayoutLMv2Model"),FEo=o(" (LayoutLMv2 model)"),TEo=l(),B_=a("li"),mfe=a("strong"),MEo=o("layoutlmv3"),EEo=o(" \u2014 "),Jj=a("a"),CEo=o("LayoutLMv3Model"),wEo=o(" (LayoutLMv3 model)"),AEo=l(),N_=a("li"),gfe=a("strong"),LEo=o("led"),yEo=o(" \u2014 "),Yj=a("a"),xEo=o("LEDModel"),$Eo=o(" (LED model)"),kEo=l(),I_=a("li"),hfe=a("strong"),SEo=o("levit"),REo=o(" \u2014 "),Kj=a("a"),PEo=o("LevitModel"),BEo=o(" (LeViT model)"),NEo=l(),q_=a("li"),pfe=a("strong"),IEo=o("longformer"),qEo=o(" \u2014 "),Zj=a("a"),jEo=o("LongformerModel"),DEo=o(" (Longformer model)"),GEo=l(),j_=a("li"),_fe=a("strong"),OEo=o("longt5"),VEo=o(" \u2014 "),eD=a("a"),XEo=o("LongT5Model"),zEo=o(" (LongT5 model)"),QEo=l(),D_=a("li"),ufe=a("strong"),WEo=o("luke"),HEo=o(" \u2014 "),oD=a("a"),UEo=o("LukeModel"),JEo=o(" (LUKE model)"),YEo=l(),G_=a("li"),bfe=a("strong"),KEo=o("lxmert"),ZEo=o(" \u2014 "),rD=a("a"),eCo=o("LxmertModel"),oCo=o(" (LXMERT model)"),rCo=l(),O_=a("li"),vfe=a("strong"),tCo=o("m2m_100"),aCo=o(" \u2014 "),tD=a("a"),nCo=o("M2M100Model"),sCo=o(" (M2M100 model)"),lCo=l(),V_=a("li"),Ffe=a("strong"),iCo=o("marian"),dCo=o(" \u2014 "),aD=a("a"),cCo=o("MarianModel"),fCo=o(" (Marian model)"),mCo=l(),X_=a("li"),Tfe=a("strong"),gCo=o("maskformer"),hCo=o(" \u2014 "),nD=a("a"),pCo=o("MaskFormerModel"),_Co=o(" (MaskFormer model)"),uCo=l(),z_=a("li"),Mfe=a("strong"),bCo=o("mbart"),vCo=o(" \u2014 "),sD=a("a"),FCo=o("MBartModel"),TCo=o(" (mBART model)"),MCo=l(),Q_=a("li"),Efe=a("strong"),ECo=o("mctct"),CCo=o(" \u2014 "),lD=a("a"),wCo=o("MCTCTModel"),ACo=o(" (M-CTC-T model)"),LCo=l(),W_=a("li"),Cfe=a("strong"),yCo=o("megatron-bert"),xCo=o(" \u2014 "),iD=a("a"),$Co=o("MegatronBertModel"),kCo=o(" (Megatron-BERT model)"),SCo=l(),H_=a("li"),wfe=a("strong"),RCo=o("mobilebert"),PCo=o(" \u2014 "),dD=a("a"),BCo=o("MobileBertModel"),NCo=o(" (MobileBERT model)"),ICo=l(),U_=a("li"),Afe=a("strong"),qCo=o("mobilevit"),jCo=o(" \u2014 "),cD=a("a"),DCo=o("MobileViTModel"),GCo=o(" (MobileViT model)"),OCo=l(),J_=a("li"),Lfe=a("strong"),VCo=o("mpnet"),XCo=o(" \u2014 "),fD=a("a"),zCo=o("MPNetModel"),QCo=o(" (MPNet model)"),WCo=l(),Y_=a("li"),yfe=a("strong"),HCo=o("mt5"),UCo=o(" \u2014 "),mD=a("a"),JCo=o("MT5Model"),YCo=o(" (MT5 model)"),KCo=l(),K_=a("li"),xfe=a("strong"),ZCo=o("mvp"),e5o=o(" \u2014 "),gD=a("a"),o5o=o("MvpModel"),r5o=o(" (MVP model)"),t5o=l(),Z_=a("li"),$fe=a("strong"),a5o=o("nezha"),n5o=o(" \u2014 "),hD=a("a"),s5o=o("NezhaModel"),l5o=o(" (Nezha model)"),i5o=l(),eu=a("li"),kfe=a("strong"),d5o=o("nllb"),c5o=o(" \u2014 "),pD=a("a"),f5o=o("M2M100Model"),m5o=o(" (NLLB model)"),g5o=l(),ou=a("li"),Sfe=a("strong"),h5o=o("nystromformer"),p5o=o(" \u2014 "),_D=a("a"),_5o=o("NystromformerModel"),u5o=o(" (Nystr\xF6mformer model)"),b5o=l(),ru=a("li"),Rfe=a("strong"),v5o=o("openai-gpt"),F5o=o(" \u2014 "),uD=a("a"),T5o=o("OpenAIGPTModel"),M5o=o(" (OpenAI GPT model)"),E5o=l(),tu=a("li"),Pfe=a("strong"),C5o=o("opt"),w5o=o(" \u2014 "),bD=a("a"),A5o=o("OPTModel"),L5o=o(" (OPT model)"),y5o=l(),au=a("li"),Bfe=a("strong"),x5o=o("pegasus"),$5o=o(" \u2014 "),vD=a("a"),k5o=o("PegasusModel"),S5o=o(" (Pegasus model)"),R5o=l(),nu=a("li"),Nfe=a("strong"),P5o=o("perceiver"),B5o=o(" \u2014 "),FD=a("a"),N5o=o("PerceiverModel"),I5o=o(" (Perceiver model)"),q5o=l(),su=a("li"),Ife=a("strong"),j5o=o("plbart"),D5o=o(" \u2014 "),TD=a("a"),G5o=o("PLBartModel"),O5o=o(" (PLBart model)"),V5o=l(),lu=a("li"),qfe=a("strong"),X5o=o("poolformer"),z5o=o(" \u2014 "),MD=a("a"),Q5o=o("PoolFormerModel"),W5o=o(" (PoolFormer model)"),H5o=l(),iu=a("li"),jfe=a("strong"),U5o=o("prophetnet"),J5o=o(" \u2014 "),ED=a("a"),Y5o=o("ProphetNetModel"),K5o=o(" (ProphetNet model)"),Z5o=l(),du=a("li"),Dfe=a("strong"),e0o=o("qdqbert"),o0o=o(" \u2014 "),CD=a("a"),r0o=o("QDQBertModel"),t0o=o(" (QDQBert model)"),a0o=l(),cu=a("li"),Gfe=a("strong"),n0o=o("reformer"),s0o=o(" \u2014 "),wD=a("a"),l0o=o("ReformerModel"),i0o=o(" (Reformer model)"),d0o=l(),fu=a("li"),Ofe=a("strong"),c0o=o("regnet"),f0o=o(" \u2014 "),AD=a("a"),m0o=o("RegNetModel"),g0o=o(" (RegNet model)"),h0o=l(),mu=a("li"),Vfe=a("strong"),p0o=o("rembert"),_0o=o(" \u2014 "),LD=a("a"),u0o=o("RemBertModel"),b0o=o(" (RemBERT model)"),v0o=l(),gu=a("li"),Xfe=a("strong"),F0o=o("resnet"),T0o=o(" \u2014 "),yD=a("a"),M0o=o("ResNetModel"),E0o=o(" (ResNet model)"),C0o=l(),hu=a("li"),zfe=a("strong"),w0o=o("retribert"),A0o=o(" \u2014 "),xD=a("a"),L0o=o("RetriBertModel"),y0o=o(" (RetriBERT model)"),x0o=l(),pu=a("li"),Qfe=a("strong"),$0o=o("roberta"),k0o=o(" \u2014 "),$D=a("a"),S0o=o("RobertaModel"),R0o=o(" (RoBERTa model)"),P0o=l(),_u=a("li"),Wfe=a("strong"),B0o=o("roformer"),N0o=o(" \u2014 "),kD=a("a"),I0o=o("RoFormerModel"),q0o=o(" (RoFormer model)"),j0o=l(),uu=a("li"),Hfe=a("strong"),D0o=o("segformer"),G0o=o(" \u2014 "),SD=a("a"),O0o=o("SegformerModel"),V0o=o(" (SegFormer model)"),X0o=l(),bu=a("li"),Ufe=a("strong"),z0o=o("sew"),Q0o=o(" \u2014 "),RD=a("a"),W0o=o("SEWModel"),H0o=o(" (SEW model)"),U0o=l(),vu=a("li"),Jfe=a("strong"),J0o=o("sew-d"),Y0o=o(" \u2014 "),PD=a("a"),K0o=o("SEWDModel"),Z0o=o(" (SEW-D model)"),ewo=l(),Fu=a("li"),Yfe=a("strong"),owo=o("speech_to_text"),rwo=o(" \u2014 "),BD=a("a"),two=o("Speech2TextModel"),awo=o(" (Speech2Text model)"),nwo=l(),Tu=a("li"),Kfe=a("strong"),swo=o("splinter"),lwo=o(" \u2014 "),ND=a("a"),iwo=o("SplinterModel"),dwo=o(" (Splinter model)"),cwo=l(),Mu=a("li"),Zfe=a("strong"),fwo=o("squeezebert"),mwo=o(" \u2014 "),ID=a("a"),gwo=o("SqueezeBertModel"),hwo=o(" (SqueezeBERT model)"),pwo=l(),Eu=a("li"),eme=a("strong"),_wo=o("swin"),uwo=o(" \u2014 "),qD=a("a"),bwo=o("SwinModel"),vwo=o(" (Swin Transformer model)"),Fwo=l(),Cu=a("li"),ome=a("strong"),Two=o("t5"),Mwo=o(" \u2014 "),jD=a("a"),Ewo=o("T5Model"),Cwo=o(" (T5 model)"),wwo=l(),wu=a("li"),rme=a("strong"),Awo=o("tapas"),Lwo=o(" \u2014 "),DD=a("a"),ywo=o("TapasModel"),xwo=o(" (TAPAS model)"),$wo=l(),Au=a("li"),tme=a("strong"),kwo=o("trajectory_transformer"),Swo=o(" \u2014 "),GD=a("a"),Rwo=o("TrajectoryTransformerModel"),Pwo=o(" (Trajectory Transformer model)"),Bwo=l(),Lu=a("li"),ame=a("strong"),Nwo=o("transfo-xl"),Iwo=o(" \u2014 "),OD=a("a"),qwo=o("TransfoXLModel"),jwo=o(" (Transformer-XL model)"),Dwo=l(),yu=a("li"),nme=a("strong"),Gwo=o("unispeech"),Owo=o(" \u2014 "),VD=a("a"),Vwo=o("UniSpeechModel"),Xwo=o(" (UniSpeech model)"),zwo=l(),xu=a("li"),sme=a("strong"),Qwo=o("unispeech-sat"),Wwo=o(" \u2014 "),XD=a("a"),Hwo=o("UniSpeechSatModel"),Uwo=o(" (UniSpeechSat model)"),Jwo=l(),$u=a("li"),lme=a("strong"),Ywo=o("van"),Kwo=o(" \u2014 "),zD=a("a"),Zwo=o("VanModel"),eAo=o(" (VAN model)"),oAo=l(),ku=a("li"),ime=a("strong"),rAo=o("vilt"),tAo=o(" \u2014 "),QD=a("a"),aAo=o("ViltModel"),nAo=o(" (ViLT model)"),sAo=l(),Su=a("li"),dme=a("strong"),lAo=o("vision-text-dual-encoder"),iAo=o(" \u2014 "),WD=a("a"),dAo=o("VisionTextDualEncoderModel"),cAo=o(" (VisionTextDualEncoder model)"),fAo=l(),Ru=a("li"),cme=a("strong"),mAo=o("visual_bert"),gAo=o(" \u2014 "),HD=a("a"),hAo=o("VisualBertModel"),pAo=o(" (VisualBERT model)"),_Ao=l(),Pu=a("li"),fme=a("strong"),uAo=o("vit"),bAo=o(" \u2014 "),UD=a("a"),vAo=o("ViTModel"),FAo=o(" (ViT model)"),TAo=l(),Bu=a("li"),mme=a("strong"),MAo=o("vit_mae"),EAo=o(" \u2014 "),JD=a("a"),CAo=o("ViTMAEModel"),wAo=o(" (ViTMAE model)"),AAo=l(),Nu=a("li"),gme=a("strong"),LAo=o("wav2vec2"),yAo=o(" \u2014 "),YD=a("a"),xAo=o("Wav2Vec2Model"),$Ao=o(" (Wav2Vec2 model)"),kAo=l(),Iu=a("li"),hme=a("strong"),SAo=o("wav2vec2-conformer"),RAo=o(" \u2014 "),KD=a("a"),PAo=o("Wav2Vec2ConformerModel"),BAo=o(" (Wav2Vec2-Conformer model)"),NAo=l(),qu=a("li"),pme=a("strong"),IAo=o("wavlm"),qAo=o(" \u2014 "),ZD=a("a"),jAo=o("WavLMModel"),DAo=o(" (WavLM model)"),GAo=l(),ju=a("li"),_me=a("strong"),OAo=o("xglm"),VAo=o(" \u2014 "),eG=a("a"),XAo=o("XGLMModel"),zAo=o(" (XGLM model)"),QAo=l(),Du=a("li"),ume=a("strong"),WAo=o("xlm"),HAo=o(" \u2014 "),oG=a("a"),UAo=o("XLMModel"),JAo=o(" (XLM model)"),YAo=l(),Gu=a("li"),bme=a("strong"),KAo=o("xlm-prophetnet"),ZAo=o(" \u2014 "),rG=a("a"),e6o=o("XLMProphetNetModel"),o6o=o(" (XLM-ProphetNet model)"),r6o=l(),Ou=a("li"),vme=a("strong"),t6o=o("xlm-roberta"),a6o=o(" \u2014 "),tG=a("a"),n6o=o("XLMRobertaModel"),s6o=o(" (XLM-RoBERTa model)"),l6o=l(),Vu=a("li"),Fme=a("strong"),i6o=o("xlm-roberta-xl"),d6o=o(" \u2014 "),aG=a("a"),c6o=o("XLMRobertaXLModel"),f6o=o(" (XLM-RoBERTa-XL model)"),m6o=l(),Xu=a("li"),Tme=a("strong"),g6o=o("xlnet"),h6o=o(" \u2014 "),nG=a("a"),p6o=o("XLNetModel"),_6o=o(" (XLNet model)"),u6o=l(),zu=a("li"),Mme=a("strong"),b6o=o("yolos"),v6o=o(" \u2014 "),sG=a("a"),F6o=o("YolosModel"),T6o=o(" (YOLOS model)"),M6o=l(),Qu=a("li"),Eme=a("strong"),E6o=o("yoso"),C6o=o(" \u2014 "),lG=a("a"),w6o=o("YosoModel"),A6o=o(" (YOSO model)"),L6o=l(),Wu=a("p"),y6o=o("The model is set in evaluation mode by default using "),Cme=a("code"),x6o=o("model.eval()"),$6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=a("code"),k6o=o("model.train()"),S6o=l(),F(Hu.$$.fragment),xXe=l(),zi=a("h2"),Uu=a("a"),Ame=a("span"),F(jL.$$.fragment),R6o=l(),Lme=a("span"),P6o=o("AutoModelForPreTraining"),$Xe=l(),ko=a("div"),F(DL.$$.fragment),B6o=l(),Qi=a("p"),N6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iG=a("a"),I6o=o("from_pretrained()"),q6o=o(" class method or the "),dG=a("a"),j6o=o("from_config()"),D6o=o(` class
method.`),G6o=l(),GL=a("p"),O6o=o("This class cannot be instantiated directly using "),yme=a("code"),V6o=o("__init__()"),X6o=o(" (throws an error)."),z6o=l(),dt=a("div"),F(OL.$$.fragment),Q6o=l(),xme=a("p"),W6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H6o=l(),Wi=a("p"),U6o=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),J6o=o("not"),Y6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),K6o=o("from_pretrained()"),Z6o=o(" to load the model weights."),e7o=l(),F(Ju.$$.fragment),o7o=l(),Ke=a("div"),F(VL.$$.fragment),r7o=l(),kme=a("p"),t7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),a7o=l(),Ia=a("p"),n7o=o("The model class to instantiate is selected based on the "),Sme=a("code"),s7o=o("model_type"),l7o=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),i7o=o("pretrained_model_name_or_path"),d7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=a("code"),c7o=o("pretrained_model_name_or_path"),f7o=o(":"),m7o=l(),G=a("ul"),Yu=a("li"),Bme=a("strong"),g7o=o("albert"),h7o=o(" \u2014 "),fG=a("a"),p7o=o("AlbertForPreTraining"),_7o=o(" (ALBERT model)"),u7o=l(),Ku=a("li"),Nme=a("strong"),b7o=o("bart"),v7o=o(" \u2014 "),mG=a("a"),F7o=o("BartForConditionalGeneration"),T7o=o(" (BART model)"),M7o=l(),Zu=a("li"),Ime=a("strong"),E7o=o("bert"),C7o=o(" \u2014 "),gG=a("a"),w7o=o("BertForPreTraining"),A7o=o(" (BERT model)"),L7o=l(),e1=a("li"),qme=a("strong"),y7o=o("big_bird"),x7o=o(" \u2014 "),hG=a("a"),$7o=o("BigBirdForPreTraining"),k7o=o(" (BigBird model)"),S7o=l(),o1=a("li"),jme=a("strong"),R7o=o("bloom"),P7o=o(" \u2014 "),pG=a("a"),B7o=o("BloomForCausalLM"),N7o=o(" (BLOOM model)"),I7o=l(),r1=a("li"),Dme=a("strong"),q7o=o("camembert"),j7o=o(" \u2014 "),_G=a("a"),D7o=o("CamembertForMaskedLM"),G7o=o(" (CamemBERT model)"),O7o=l(),t1=a("li"),Gme=a("strong"),V7o=o("ctrl"),X7o=o(" \u2014 "),uG=a("a"),z7o=o("CTRLLMHeadModel"),Q7o=o(" (CTRL model)"),W7o=l(),a1=a("li"),Ome=a("strong"),H7o=o("data2vec-text"),U7o=o(" \u2014 "),bG=a("a"),J7o=o("Data2VecTextForMaskedLM"),Y7o=o(" (Data2VecText model)"),K7o=l(),n1=a("li"),Vme=a("strong"),Z7o=o("deberta"),eLo=o(" \u2014 "),vG=a("a"),oLo=o("DebertaForMaskedLM"),rLo=o(" (DeBERTa model)"),tLo=l(),s1=a("li"),Xme=a("strong"),aLo=o("deberta-v2"),nLo=o(" \u2014 "),FG=a("a"),sLo=o("DebertaV2ForMaskedLM"),lLo=o(" (DeBERTa-v2 model)"),iLo=l(),l1=a("li"),zme=a("strong"),dLo=o("distilbert"),cLo=o(" \u2014 "),TG=a("a"),fLo=o("DistilBertForMaskedLM"),mLo=o(" (DistilBERT model)"),gLo=l(),i1=a("li"),Qme=a("strong"),hLo=o("electra"),pLo=o(" \u2014 "),MG=a("a"),_Lo=o("ElectraForPreTraining"),uLo=o(" (ELECTRA model)"),bLo=l(),d1=a("li"),Wme=a("strong"),vLo=o("flaubert"),FLo=o(" \u2014 "),EG=a("a"),TLo=o("FlaubertWithLMHeadModel"),MLo=o(" (FlauBERT model)"),ELo=l(),c1=a("li"),Hme=a("strong"),CLo=o("flava"),wLo=o(" \u2014 "),CG=a("a"),ALo=o("FlavaForPreTraining"),LLo=o(" (FLAVA model)"),yLo=l(),f1=a("li"),Ume=a("strong"),xLo=o("fnet"),$Lo=o(" \u2014 "),wG=a("a"),kLo=o("FNetForPreTraining"),SLo=o(" (FNet model)"),RLo=l(),m1=a("li"),Jme=a("strong"),PLo=o("fsmt"),BLo=o(" \u2014 "),AG=a("a"),NLo=o("FSMTForConditionalGeneration"),ILo=o(" (FairSeq Machine-Translation model)"),qLo=l(),g1=a("li"),Yme=a("strong"),jLo=o("funnel"),DLo=o(" \u2014 "),LG=a("a"),GLo=o("FunnelForPreTraining"),OLo=o(" (Funnel Transformer model)"),VLo=l(),h1=a("li"),Kme=a("strong"),XLo=o("gpt2"),zLo=o(" \u2014 "),yG=a("a"),QLo=o("GPT2LMHeadModel"),WLo=o(" (OpenAI GPT-2 model)"),HLo=l(),p1=a("li"),Zme=a("strong"),ULo=o("ibert"),JLo=o(" \u2014 "),xG=a("a"),YLo=o("IBertForMaskedLM"),KLo=o(" (I-BERT model)"),ZLo=l(),_1=a("li"),ege=a("strong"),eyo=o("layoutlm"),oyo=o(" \u2014 "),$G=a("a"),ryo=o("LayoutLMForMaskedLM"),tyo=o(" (LayoutLM model)"),ayo=l(),u1=a("li"),oge=a("strong"),nyo=o("longformer"),syo=o(" \u2014 "),kG=a("a"),lyo=o("LongformerForMaskedLM"),iyo=o(" (Longformer model)"),dyo=l(),b1=a("li"),rge=a("strong"),cyo=o("lxmert"),fyo=o(" \u2014 "),SG=a("a"),myo=o("LxmertForPreTraining"),gyo=o(" (LXMERT model)"),hyo=l(),v1=a("li"),tge=a("strong"),pyo=o("megatron-bert"),_yo=o(" \u2014 "),RG=a("a"),uyo=o("MegatronBertForPreTraining"),byo=o(" (Megatron-BERT model)"),vyo=l(),F1=a("li"),age=a("strong"),Fyo=o("mobilebert"),Tyo=o(" \u2014 "),PG=a("a"),Myo=o("MobileBertForPreTraining"),Eyo=o(" (MobileBERT model)"),Cyo=l(),T1=a("li"),nge=a("strong"),wyo=o("mpnet"),Ayo=o(" \u2014 "),BG=a("a"),Lyo=o("MPNetForMaskedLM"),yyo=o(" (MPNet model)"),xyo=l(),M1=a("li"),sge=a("strong"),$yo=o("mvp"),kyo=o(" \u2014 "),NG=a("a"),Syo=o("MvpForConditionalGeneration"),Ryo=o(" (MVP model)"),Pyo=l(),E1=a("li"),lge=a("strong"),Byo=o("nezha"),Nyo=o(" \u2014 "),IG=a("a"),Iyo=o("NezhaForPreTraining"),qyo=o(" (Nezha model)"),jyo=l(),C1=a("li"),ige=a("strong"),Dyo=o("openai-gpt"),Gyo=o(" \u2014 "),qG=a("a"),Oyo=o("OpenAIGPTLMHeadModel"),Vyo=o(" (OpenAI GPT model)"),Xyo=l(),w1=a("li"),dge=a("strong"),zyo=o("retribert"),Qyo=o(" \u2014 "),jG=a("a"),Wyo=o("RetriBertModel"),Hyo=o(" (RetriBERT model)"),Uyo=l(),A1=a("li"),cge=a("strong"),Jyo=o("roberta"),Yyo=o(" \u2014 "),DG=a("a"),Kyo=o("RobertaForMaskedLM"),Zyo=o(" (RoBERTa model)"),e9o=l(),L1=a("li"),fge=a("strong"),o9o=o("splinter"),r9o=o(" \u2014 "),GG=a("a"),t9o=o("SplinterForPreTraining"),a9o=o(" (Splinter model)"),n9o=l(),y1=a("li"),mge=a("strong"),s9o=o("squeezebert"),l9o=o(" \u2014 "),OG=a("a"),i9o=o("SqueezeBertForMaskedLM"),d9o=o(" (SqueezeBERT model)"),c9o=l(),x1=a("li"),gge=a("strong"),f9o=o("t5"),m9o=o(" \u2014 "),VG=a("a"),g9o=o("T5ForConditionalGeneration"),h9o=o(" (T5 model)"),p9o=l(),$1=a("li"),hge=a("strong"),_9o=o("tapas"),u9o=o(" \u2014 "),XG=a("a"),b9o=o("TapasForMaskedLM"),v9o=o(" (TAPAS model)"),F9o=l(),k1=a("li"),pge=a("strong"),T9o=o("transfo-xl"),M9o=o(" \u2014 "),zG=a("a"),E9o=o("TransfoXLLMHeadModel"),C9o=o(" (Transformer-XL model)"),w9o=l(),S1=a("li"),_ge=a("strong"),A9o=o("unispeech"),L9o=o(" \u2014 "),QG=a("a"),y9o=o("UniSpeechForPreTraining"),x9o=o(" (UniSpeech model)"),$9o=l(),R1=a("li"),uge=a("strong"),k9o=o("unispeech-sat"),S9o=o(" \u2014 "),WG=a("a"),R9o=o("UniSpeechSatForPreTraining"),P9o=o(" (UniSpeechSat model)"),B9o=l(),P1=a("li"),bge=a("strong"),N9o=o("visual_bert"),I9o=o(" \u2014 "),HG=a("a"),q9o=o("VisualBertForPreTraining"),j9o=o(" (VisualBERT model)"),D9o=l(),B1=a("li"),vge=a("strong"),G9o=o("vit_mae"),O9o=o(" \u2014 "),UG=a("a"),V9o=o("ViTMAEForPreTraining"),X9o=o(" (ViTMAE model)"),z9o=l(),N1=a("li"),Fge=a("strong"),Q9o=o("wav2vec2"),W9o=o(" \u2014 "),JG=a("a"),H9o=o("Wav2Vec2ForPreTraining"),U9o=o(" (Wav2Vec2 model)"),J9o=l(),I1=a("li"),Tge=a("strong"),Y9o=o("wav2vec2-conformer"),K9o=o(" \u2014 "),YG=a("a"),Z9o=o("Wav2Vec2ConformerForPreTraining"),exo=o(" (Wav2Vec2-Conformer model)"),oxo=l(),q1=a("li"),Mge=a("strong"),rxo=o("xlm"),txo=o(" \u2014 "),KG=a("a"),axo=o("XLMWithLMHeadModel"),nxo=o(" (XLM model)"),sxo=l(),j1=a("li"),Ege=a("strong"),lxo=o("xlm-roberta"),ixo=o(" \u2014 "),ZG=a("a"),dxo=o("XLMRobertaForMaskedLM"),cxo=o(" (XLM-RoBERTa model)"),fxo=l(),D1=a("li"),Cge=a("strong"),mxo=o("xlm-roberta-xl"),gxo=o(" \u2014 "),eO=a("a"),hxo=o("XLMRobertaXLForMaskedLM"),pxo=o(" (XLM-RoBERTa-XL model)"),_xo=l(),G1=a("li"),wge=a("strong"),uxo=o("xlnet"),bxo=o(" \u2014 "),oO=a("a"),vxo=o("XLNetLMHeadModel"),Fxo=o(" (XLNet model)"),Txo=l(),O1=a("p"),Mxo=o("The model is set in evaluation mode by default using "),Age=a("code"),Exo=o("model.eval()"),Cxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),wxo=o("model.train()"),Axo=l(),F(V1.$$.fragment),kXe=l(),Hi=a("h2"),X1=a("a"),yge=a("span"),F(XL.$$.fragment),Lxo=l(),xge=a("span"),yxo=o("AutoModelForCausalLM"),SXe=l(),So=a("div"),F(zL.$$.fragment),xxo=l(),Ui=a("p"),$xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rO=a("a"),kxo=o("from_pretrained()"),Sxo=o(" class method or the "),tO=a("a"),Rxo=o("from_config()"),Pxo=o(` class
method.`),Bxo=l(),QL=a("p"),Nxo=o("This class cannot be instantiated directly using "),$ge=a("code"),Ixo=o("__init__()"),qxo=o(" (throws an error)."),jxo=l(),ct=a("div"),F(WL.$$.fragment),Dxo=l(),kge=a("p"),Gxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oxo=l(),Ji=a("p"),Vxo=o(`Note:
Loading a model from its configuration file does `),Sge=a("strong"),Xxo=o("not"),zxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),Qxo=o("from_pretrained()"),Wxo=o(" to load the model weights."),Hxo=l(),F(z1.$$.fragment),Uxo=l(),Ze=a("div"),F(HL.$$.fragment),Jxo=l(),Rge=a("p"),Yxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kxo=l(),qa=a("p"),Zxo=o("The model class to instantiate is selected based on the "),Pge=a("code"),e$o=o("model_type"),o$o=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),r$o=o("pretrained_model_name_or_path"),t$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=a("code"),a$o=o("pretrained_model_name_or_path"),n$o=o(":"),s$o=l(),z=a("ul"),Q1=a("li"),Ige=a("strong"),l$o=o("bart"),i$o=o(" \u2014 "),nO=a("a"),d$o=o("BartForCausalLM"),c$o=o(" (BART model)"),f$o=l(),W1=a("li"),qge=a("strong"),m$o=o("bert"),g$o=o(" \u2014 "),sO=a("a"),h$o=o("BertLMHeadModel"),p$o=o(" (BERT model)"),_$o=l(),H1=a("li"),jge=a("strong"),u$o=o("bert-generation"),b$o=o(" \u2014 "),lO=a("a"),v$o=o("BertGenerationDecoder"),F$o=o(" (Bert Generation model)"),T$o=l(),U1=a("li"),Dge=a("strong"),M$o=o("big_bird"),E$o=o(" \u2014 "),iO=a("a"),C$o=o("BigBirdForCausalLM"),w$o=o(" (BigBird model)"),A$o=l(),J1=a("li"),Gge=a("strong"),L$o=o("bigbird_pegasus"),y$o=o(" \u2014 "),dO=a("a"),x$o=o("BigBirdPegasusForCausalLM"),$$o=o(" (BigBird-Pegasus model)"),k$o=l(),Y1=a("li"),Oge=a("strong"),S$o=o("blenderbot"),R$o=o(" \u2014 "),cO=a("a"),P$o=o("BlenderbotForCausalLM"),B$o=o(" (Blenderbot model)"),N$o=l(),K1=a("li"),Vge=a("strong"),I$o=o("blenderbot-small"),q$o=o(" \u2014 "),fO=a("a"),j$o=o("BlenderbotSmallForCausalLM"),D$o=o(" (BlenderbotSmall model)"),G$o=l(),Z1=a("li"),Xge=a("strong"),O$o=o("bloom"),V$o=o(" \u2014 "),mO=a("a"),X$o=o("BloomForCausalLM"),z$o=o(" (BLOOM model)"),Q$o=l(),e2=a("li"),zge=a("strong"),W$o=o("camembert"),H$o=o(" \u2014 "),gO=a("a"),U$o=o("CamembertForCausalLM"),J$o=o(" (CamemBERT model)"),Y$o=l(),o2=a("li"),Qge=a("strong"),K$o=o("codegen"),Z$o=o(" \u2014 "),hO=a("a"),eko=o("CodeGenForCausalLM"),oko=o(" (CodeGen model)"),rko=l(),r2=a("li"),Wge=a("strong"),tko=o("ctrl"),ako=o(" \u2014 "),pO=a("a"),nko=o("CTRLLMHeadModel"),sko=o(" (CTRL model)"),lko=l(),t2=a("li"),Hge=a("strong"),iko=o("data2vec-text"),dko=o(" \u2014 "),_O=a("a"),cko=o("Data2VecTextForCausalLM"),fko=o(" (Data2VecText model)"),mko=l(),a2=a("li"),Uge=a("strong"),gko=o("electra"),hko=o(" \u2014 "),uO=a("a"),pko=o("ElectraForCausalLM"),_ko=o(" (ELECTRA model)"),uko=l(),n2=a("li"),Jge=a("strong"),bko=o("gpt2"),vko=o(" \u2014 "),bO=a("a"),Fko=o("GPT2LMHeadModel"),Tko=o(" (OpenAI GPT-2 model)"),Mko=l(),s2=a("li"),Yge=a("strong"),Eko=o("gpt_neo"),Cko=o(" \u2014 "),vO=a("a"),wko=o("GPTNeoForCausalLM"),Ako=o(" (GPT Neo model)"),Lko=l(),l2=a("li"),Kge=a("strong"),yko=o("gpt_neox"),xko=o(" \u2014 "),FO=a("a"),$ko=o("GPTNeoXForCausalLM"),kko=o(" (GPT NeoX model)"),Sko=l(),i2=a("li"),Zge=a("strong"),Rko=o("gptj"),Pko=o(" \u2014 "),TO=a("a"),Bko=o("GPTJForCausalLM"),Nko=o(" (GPT-J model)"),Iko=l(),d2=a("li"),ehe=a("strong"),qko=o("marian"),jko=o(" \u2014 "),MO=a("a"),Dko=o("MarianForCausalLM"),Gko=o(" (Marian model)"),Oko=l(),c2=a("li"),ohe=a("strong"),Vko=o("mbart"),Xko=o(" \u2014 "),EO=a("a"),zko=o("MBartForCausalLM"),Qko=o(" (mBART model)"),Wko=l(),f2=a("li"),rhe=a("strong"),Hko=o("megatron-bert"),Uko=o(" \u2014 "),CO=a("a"),Jko=o("MegatronBertForCausalLM"),Yko=o(" (Megatron-BERT model)"),Kko=l(),m2=a("li"),the=a("strong"),Zko=o("mvp"),eSo=o(" \u2014 "),wO=a("a"),oSo=o("MvpForCausalLM"),rSo=o(" (MVP model)"),tSo=l(),g2=a("li"),ahe=a("strong"),aSo=o("openai-gpt"),nSo=o(" \u2014 "),AO=a("a"),sSo=o("OpenAIGPTLMHeadModel"),lSo=o(" (OpenAI GPT model)"),iSo=l(),h2=a("li"),nhe=a("strong"),dSo=o("opt"),cSo=o(" \u2014 "),LO=a("a"),fSo=o("OPTForCausalLM"),mSo=o(" (OPT model)"),gSo=l(),p2=a("li"),she=a("strong"),hSo=o("pegasus"),pSo=o(" \u2014 "),yO=a("a"),_So=o("PegasusForCausalLM"),uSo=o(" (Pegasus model)"),bSo=l(),_2=a("li"),lhe=a("strong"),vSo=o("plbart"),FSo=o(" \u2014 "),xO=a("a"),TSo=o("PLBartForCausalLM"),MSo=o(" (PLBart model)"),ESo=l(),u2=a("li"),ihe=a("strong"),CSo=o("prophetnet"),wSo=o(" \u2014 "),$O=a("a"),ASo=o("ProphetNetForCausalLM"),LSo=o(" (ProphetNet model)"),ySo=l(),b2=a("li"),dhe=a("strong"),xSo=o("qdqbert"),$So=o(" \u2014 "),kO=a("a"),kSo=o("QDQBertLMHeadModel"),SSo=o(" (QDQBert model)"),RSo=l(),v2=a("li"),che=a("strong"),PSo=o("reformer"),BSo=o(" \u2014 "),SO=a("a"),NSo=o("ReformerModelWithLMHead"),ISo=o(" (Reformer model)"),qSo=l(),F2=a("li"),fhe=a("strong"),jSo=o("rembert"),DSo=o(" \u2014 "),RO=a("a"),GSo=o("RemBertForCausalLM"),OSo=o(" (RemBERT model)"),VSo=l(),T2=a("li"),mhe=a("strong"),XSo=o("roberta"),zSo=o(" \u2014 "),PO=a("a"),QSo=o("RobertaForCausalLM"),WSo=o(" (RoBERTa model)"),HSo=l(),M2=a("li"),ghe=a("strong"),USo=o("roformer"),JSo=o(" \u2014 "),BO=a("a"),YSo=o("RoFormerForCausalLM"),KSo=o(" (RoFormer model)"),ZSo=l(),E2=a("li"),hhe=a("strong"),eRo=o("speech_to_text_2"),oRo=o(" \u2014 "),NO=a("a"),rRo=o("Speech2Text2ForCausalLM"),tRo=o(" (Speech2Text2 model)"),aRo=l(),C2=a("li"),phe=a("strong"),nRo=o("transfo-xl"),sRo=o(" \u2014 "),IO=a("a"),lRo=o("TransfoXLLMHeadModel"),iRo=o(" (Transformer-XL model)"),dRo=l(),w2=a("li"),_he=a("strong"),cRo=o("trocr"),fRo=o(" \u2014 "),qO=a("a"),mRo=o("TrOCRForCausalLM"),gRo=o(" (TrOCR model)"),hRo=l(),A2=a("li"),uhe=a("strong"),pRo=o("xglm"),_Ro=o(" \u2014 "),jO=a("a"),uRo=o("XGLMForCausalLM"),bRo=o(" (XGLM model)"),vRo=l(),L2=a("li"),bhe=a("strong"),FRo=o("xlm"),TRo=o(" \u2014 "),DO=a("a"),MRo=o("XLMWithLMHeadModel"),ERo=o(" (XLM model)"),CRo=l(),y2=a("li"),vhe=a("strong"),wRo=o("xlm-prophetnet"),ARo=o(" \u2014 "),GO=a("a"),LRo=o("XLMProphetNetForCausalLM"),yRo=o(" (XLM-ProphetNet model)"),xRo=l(),x2=a("li"),Fhe=a("strong"),$Ro=o("xlm-roberta"),kRo=o(" \u2014 "),OO=a("a"),SRo=o("XLMRobertaForCausalLM"),RRo=o(" (XLM-RoBERTa model)"),PRo=l(),$2=a("li"),The=a("strong"),BRo=o("xlm-roberta-xl"),NRo=o(" \u2014 "),VO=a("a"),IRo=o("XLMRobertaXLForCausalLM"),qRo=o(" (XLM-RoBERTa-XL model)"),jRo=l(),k2=a("li"),Mhe=a("strong"),DRo=o("xlnet"),GRo=o(" \u2014 "),XO=a("a"),ORo=o("XLNetLMHeadModel"),VRo=o(" (XLNet model)"),XRo=l(),S2=a("p"),zRo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),QRo=o("model.eval()"),WRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),HRo=o("model.train()"),URo=l(),F(R2.$$.fragment),RXe=l(),Yi=a("h2"),P2=a("a"),whe=a("span"),F(UL.$$.fragment),JRo=l(),Ahe=a("span"),YRo=o("AutoModelForMaskedLM"),PXe=l(),Ro=a("div"),F(JL.$$.fragment),KRo=l(),Ki=a("p"),ZRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zO=a("a"),ePo=o("from_pretrained()"),oPo=o(" class method or the "),QO=a("a"),rPo=o("from_config()"),tPo=o(` class
method.`),aPo=l(),YL=a("p"),nPo=o("This class cannot be instantiated directly using "),Lhe=a("code"),sPo=o("__init__()"),lPo=o(" (throws an error)."),iPo=l(),ft=a("div"),F(KL.$$.fragment),dPo=l(),yhe=a("p"),cPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fPo=l(),Zi=a("p"),mPo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),gPo=o("not"),hPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),pPo=o("from_pretrained()"),_Po=o(" to load the model weights."),uPo=l(),F(B2.$$.fragment),bPo=l(),eo=a("div"),F(ZL.$$.fragment),vPo=l(),$he=a("p"),FPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TPo=l(),ja=a("p"),MPo=o("The model class to instantiate is selected based on the "),khe=a("code"),EPo=o("model_type"),CPo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),wPo=o("pretrained_model_name_or_path"),APo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),LPo=o("pretrained_model_name_or_path"),yPo=o(":"),xPo=l(),W=a("ul"),N2=a("li"),Phe=a("strong"),$Po=o("albert"),kPo=o(" \u2014 "),HO=a("a"),SPo=o("AlbertForMaskedLM"),RPo=o(" (ALBERT model)"),PPo=l(),I2=a("li"),Bhe=a("strong"),BPo=o("bart"),NPo=o(" \u2014 "),UO=a("a"),IPo=o("BartForConditionalGeneration"),qPo=o(" (BART model)"),jPo=l(),q2=a("li"),Nhe=a("strong"),DPo=o("bert"),GPo=o(" \u2014 "),JO=a("a"),OPo=o("BertForMaskedLM"),VPo=o(" (BERT model)"),XPo=l(),j2=a("li"),Ihe=a("strong"),zPo=o("big_bird"),QPo=o(" \u2014 "),YO=a("a"),WPo=o("BigBirdForMaskedLM"),HPo=o(" (BigBird model)"),UPo=l(),D2=a("li"),qhe=a("strong"),JPo=o("camembert"),YPo=o(" \u2014 "),KO=a("a"),KPo=o("CamembertForMaskedLM"),ZPo=o(" (CamemBERT model)"),eBo=l(),G2=a("li"),jhe=a("strong"),oBo=o("convbert"),rBo=o(" \u2014 "),ZO=a("a"),tBo=o("ConvBertForMaskedLM"),aBo=o(" (ConvBERT model)"),nBo=l(),O2=a("li"),Dhe=a("strong"),sBo=o("data2vec-text"),lBo=o(" \u2014 "),eV=a("a"),iBo=o("Data2VecTextForMaskedLM"),dBo=o(" (Data2VecText model)"),cBo=l(),V2=a("li"),Ghe=a("strong"),fBo=o("deberta"),mBo=o(" \u2014 "),oV=a("a"),gBo=o("DebertaForMaskedLM"),hBo=o(" (DeBERTa model)"),pBo=l(),X2=a("li"),Ohe=a("strong"),_Bo=o("deberta-v2"),uBo=o(" \u2014 "),rV=a("a"),bBo=o("DebertaV2ForMaskedLM"),vBo=o(" (DeBERTa-v2 model)"),FBo=l(),z2=a("li"),Vhe=a("strong"),TBo=o("distilbert"),MBo=o(" \u2014 "),tV=a("a"),EBo=o("DistilBertForMaskedLM"),CBo=o(" (DistilBERT model)"),wBo=l(),Q2=a("li"),Xhe=a("strong"),ABo=o("electra"),LBo=o(" \u2014 "),aV=a("a"),yBo=o("ElectraForMaskedLM"),xBo=o(" (ELECTRA model)"),$Bo=l(),W2=a("li"),zhe=a("strong"),kBo=o("flaubert"),SBo=o(" \u2014 "),nV=a("a"),RBo=o("FlaubertWithLMHeadModel"),PBo=o(" (FlauBERT model)"),BBo=l(),H2=a("li"),Qhe=a("strong"),NBo=o("fnet"),IBo=o(" \u2014 "),sV=a("a"),qBo=o("FNetForMaskedLM"),jBo=o(" (FNet model)"),DBo=l(),U2=a("li"),Whe=a("strong"),GBo=o("funnel"),OBo=o(" \u2014 "),lV=a("a"),VBo=o("FunnelForMaskedLM"),XBo=o(" (Funnel Transformer model)"),zBo=l(),J2=a("li"),Hhe=a("strong"),QBo=o("ibert"),WBo=o(" \u2014 "),iV=a("a"),HBo=o("IBertForMaskedLM"),UBo=o(" (I-BERT model)"),JBo=l(),Y2=a("li"),Uhe=a("strong"),YBo=o("layoutlm"),KBo=o(" \u2014 "),dV=a("a"),ZBo=o("LayoutLMForMaskedLM"),eNo=o(" (LayoutLM model)"),oNo=l(),K2=a("li"),Jhe=a("strong"),rNo=o("longformer"),tNo=o(" \u2014 "),cV=a("a"),aNo=o("LongformerForMaskedLM"),nNo=o(" (Longformer model)"),sNo=l(),Z2=a("li"),Yhe=a("strong"),lNo=o("luke"),iNo=o(" \u2014 "),fV=a("a"),dNo=o("LukeForMaskedLM"),cNo=o(" (LUKE model)"),fNo=l(),eb=a("li"),Khe=a("strong"),mNo=o("mbart"),gNo=o(" \u2014 "),mV=a("a"),hNo=o("MBartForConditionalGeneration"),pNo=o(" (mBART model)"),_No=l(),ob=a("li"),Zhe=a("strong"),uNo=o("megatron-bert"),bNo=o(" \u2014 "),gV=a("a"),vNo=o("MegatronBertForMaskedLM"),FNo=o(" (Megatron-BERT model)"),TNo=l(),rb=a("li"),epe=a("strong"),MNo=o("mobilebert"),ENo=o(" \u2014 "),hV=a("a"),CNo=o("MobileBertForMaskedLM"),wNo=o(" (MobileBERT model)"),ANo=l(),tb=a("li"),ope=a("strong"),LNo=o("mpnet"),yNo=o(" \u2014 "),pV=a("a"),xNo=o("MPNetForMaskedLM"),$No=o(" (MPNet model)"),kNo=l(),ab=a("li"),rpe=a("strong"),SNo=o("mvp"),RNo=o(" \u2014 "),_V=a("a"),PNo=o("MvpForConditionalGeneration"),BNo=o(" (MVP model)"),NNo=l(),nb=a("li"),tpe=a("strong"),INo=o("nezha"),qNo=o(" \u2014 "),uV=a("a"),jNo=o("NezhaForMaskedLM"),DNo=o(" (Nezha model)"),GNo=l(),sb=a("li"),ape=a("strong"),ONo=o("nystromformer"),VNo=o(" \u2014 "),bV=a("a"),XNo=o("NystromformerForMaskedLM"),zNo=o(" (Nystr\xF6mformer model)"),QNo=l(),lb=a("li"),npe=a("strong"),WNo=o("perceiver"),HNo=o(" \u2014 "),vV=a("a"),UNo=o("PerceiverForMaskedLM"),JNo=o(" (Perceiver model)"),YNo=l(),ib=a("li"),spe=a("strong"),KNo=o("qdqbert"),ZNo=o(" \u2014 "),FV=a("a"),eIo=o("QDQBertForMaskedLM"),oIo=o(" (QDQBert model)"),rIo=l(),db=a("li"),lpe=a("strong"),tIo=o("reformer"),aIo=o(" \u2014 "),TV=a("a"),nIo=o("ReformerForMaskedLM"),sIo=o(" (Reformer model)"),lIo=l(),cb=a("li"),ipe=a("strong"),iIo=o("rembert"),dIo=o(" \u2014 "),MV=a("a"),cIo=o("RemBertForMaskedLM"),fIo=o(" (RemBERT model)"),mIo=l(),fb=a("li"),dpe=a("strong"),gIo=o("roberta"),hIo=o(" \u2014 "),EV=a("a"),pIo=o("RobertaForMaskedLM"),_Io=o(" (RoBERTa model)"),uIo=l(),mb=a("li"),cpe=a("strong"),bIo=o("roformer"),vIo=o(" \u2014 "),CV=a("a"),FIo=o("RoFormerForMaskedLM"),TIo=o(" (RoFormer model)"),MIo=l(),gb=a("li"),fpe=a("strong"),EIo=o("squeezebert"),CIo=o(" \u2014 "),wV=a("a"),wIo=o("SqueezeBertForMaskedLM"),AIo=o(" (SqueezeBERT model)"),LIo=l(),hb=a("li"),mpe=a("strong"),yIo=o("tapas"),xIo=o(" \u2014 "),AV=a("a"),$Io=o("TapasForMaskedLM"),kIo=o(" (TAPAS model)"),SIo=l(),pb=a("li"),gpe=a("strong"),RIo=o("wav2vec2"),PIo=o(" \u2014 "),hpe=a("code"),BIo=o("Wav2Vec2ForMaskedLM"),NIo=o(" (Wav2Vec2 model)"),IIo=l(),_b=a("li"),ppe=a("strong"),qIo=o("xlm"),jIo=o(" \u2014 "),LV=a("a"),DIo=o("XLMWithLMHeadModel"),GIo=o(" (XLM model)"),OIo=l(),ub=a("li"),_pe=a("strong"),VIo=o("xlm-roberta"),XIo=o(" \u2014 "),yV=a("a"),zIo=o("XLMRobertaForMaskedLM"),QIo=o(" (XLM-RoBERTa model)"),WIo=l(),bb=a("li"),upe=a("strong"),HIo=o("xlm-roberta-xl"),UIo=o(" \u2014 "),xV=a("a"),JIo=o("XLMRobertaXLForMaskedLM"),YIo=o(" (XLM-RoBERTa-XL model)"),KIo=l(),vb=a("li"),bpe=a("strong"),ZIo=o("yoso"),eqo=o(" \u2014 "),$V=a("a"),oqo=o("YosoForMaskedLM"),rqo=o(" (YOSO model)"),tqo=l(),Fb=a("p"),aqo=o("The model is set in evaluation mode by default using "),vpe=a("code"),nqo=o("model.eval()"),sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),lqo=o("model.train()"),iqo=l(),F(Tb.$$.fragment),BXe=l(),ed=a("h2"),Mb=a("a"),Tpe=a("span"),F(ey.$$.fragment),dqo=l(),Mpe=a("span"),cqo=o("AutoModelForSeq2SeqLM"),NXe=l(),Po=a("div"),F(oy.$$.fragment),fqo=l(),od=a("p"),mqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kV=a("a"),gqo=o("from_pretrained()"),hqo=o(" class method or the "),SV=a("a"),pqo=o("from_config()"),_qo=o(` class
method.`),uqo=l(),ry=a("p"),bqo=o("This class cannot be instantiated directly using "),Epe=a("code"),vqo=o("__init__()"),Fqo=o(" (throws an error)."),Tqo=l(),mt=a("div"),F(ty.$$.fragment),Mqo=l(),Cpe=a("p"),Eqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cqo=l(),rd=a("p"),wqo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),Aqo=o("not"),Lqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),yqo=o("from_pretrained()"),xqo=o(" to load the model weights."),$qo=l(),F(Eb.$$.fragment),kqo=l(),oo=a("div"),F(ay.$$.fragment),Sqo=l(),Ape=a("p"),Rqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Pqo=l(),Da=a("p"),Bqo=o("The model class to instantiate is selected based on the "),Lpe=a("code"),Nqo=o("model_type"),Iqo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),qqo=o("pretrained_model_name_or_path"),jqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),Dqo=o("pretrained_model_name_or_path"),Gqo=o(":"),Oqo=l(),fe=a("ul"),Cb=a("li"),$pe=a("strong"),Vqo=o("bart"),Xqo=o(" \u2014 "),PV=a("a"),zqo=o("BartForConditionalGeneration"),Qqo=o(" (BART model)"),Wqo=l(),wb=a("li"),kpe=a("strong"),Hqo=o("bigbird_pegasus"),Uqo=o(" \u2014 "),BV=a("a"),Jqo=o("BigBirdPegasusForConditionalGeneration"),Yqo=o(" (BigBird-Pegasus model)"),Kqo=l(),Ab=a("li"),Spe=a("strong"),Zqo=o("blenderbot"),ejo=o(" \u2014 "),NV=a("a"),ojo=o("BlenderbotForConditionalGeneration"),rjo=o(" (Blenderbot model)"),tjo=l(),Lb=a("li"),Rpe=a("strong"),ajo=o("blenderbot-small"),njo=o(" \u2014 "),IV=a("a"),sjo=o("BlenderbotSmallForConditionalGeneration"),ljo=o(" (BlenderbotSmall model)"),ijo=l(),yb=a("li"),Ppe=a("strong"),djo=o("encoder-decoder"),cjo=o(" \u2014 "),qV=a("a"),fjo=o("EncoderDecoderModel"),mjo=o(" (Encoder decoder model)"),gjo=l(),xb=a("li"),Bpe=a("strong"),hjo=o("fsmt"),pjo=o(" \u2014 "),jV=a("a"),_jo=o("FSMTForConditionalGeneration"),ujo=o(" (FairSeq Machine-Translation model)"),bjo=l(),$b=a("li"),Npe=a("strong"),vjo=o("led"),Fjo=o(" \u2014 "),DV=a("a"),Tjo=o("LEDForConditionalGeneration"),Mjo=o(" (LED model)"),Ejo=l(),kb=a("li"),Ipe=a("strong"),Cjo=o("longt5"),wjo=o(" \u2014 "),GV=a("a"),Ajo=o("LongT5ForConditionalGeneration"),Ljo=o(" (LongT5 model)"),yjo=l(),Sb=a("li"),qpe=a("strong"),xjo=o("m2m_100"),$jo=o(" \u2014 "),OV=a("a"),kjo=o("M2M100ForConditionalGeneration"),Sjo=o(" (M2M100 model)"),Rjo=l(),Rb=a("li"),jpe=a("strong"),Pjo=o("marian"),Bjo=o(" \u2014 "),VV=a("a"),Njo=o("MarianMTModel"),Ijo=o(" (Marian model)"),qjo=l(),Pb=a("li"),Dpe=a("strong"),jjo=o("mbart"),Djo=o(" \u2014 "),XV=a("a"),Gjo=o("MBartForConditionalGeneration"),Ojo=o(" (mBART model)"),Vjo=l(),Bb=a("li"),Gpe=a("strong"),Xjo=o("mt5"),zjo=o(" \u2014 "),zV=a("a"),Qjo=o("MT5ForConditionalGeneration"),Wjo=o(" (MT5 model)"),Hjo=l(),Nb=a("li"),Ope=a("strong"),Ujo=o("mvp"),Jjo=o(" \u2014 "),QV=a("a"),Yjo=o("MvpForConditionalGeneration"),Kjo=o(" (MVP model)"),Zjo=l(),Ib=a("li"),Vpe=a("strong"),eDo=o("nllb"),oDo=o(" \u2014 "),WV=a("a"),rDo=o("M2M100ForConditionalGeneration"),tDo=o(" (NLLB model)"),aDo=l(),qb=a("li"),Xpe=a("strong"),nDo=o("pegasus"),sDo=o(" \u2014 "),HV=a("a"),lDo=o("PegasusForConditionalGeneration"),iDo=o(" (Pegasus model)"),dDo=l(),jb=a("li"),zpe=a("strong"),cDo=o("plbart"),fDo=o(" \u2014 "),UV=a("a"),mDo=o("PLBartForConditionalGeneration"),gDo=o(" (PLBart model)"),hDo=l(),Db=a("li"),Qpe=a("strong"),pDo=o("prophetnet"),_Do=o(" \u2014 "),JV=a("a"),uDo=o("ProphetNetForConditionalGeneration"),bDo=o(" (ProphetNet model)"),vDo=l(),Gb=a("li"),Wpe=a("strong"),FDo=o("t5"),TDo=o(" \u2014 "),YV=a("a"),MDo=o("T5ForConditionalGeneration"),EDo=o(" (T5 model)"),CDo=l(),Ob=a("li"),Hpe=a("strong"),wDo=o("xlm-prophetnet"),ADo=o(" \u2014 "),KV=a("a"),LDo=o("XLMProphetNetForConditionalGeneration"),yDo=o(" (XLM-ProphetNet model)"),xDo=l(),Vb=a("p"),$Do=o("The model is set in evaluation mode by default using "),Upe=a("code"),kDo=o("model.eval()"),SDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),RDo=o("model.train()"),PDo=l(),F(Xb.$$.fragment),IXe=l(),td=a("h2"),zb=a("a"),Ype=a("span"),F(ny.$$.fragment),BDo=l(),Kpe=a("span"),NDo=o("AutoModelForSequenceClassification"),qXe=l(),Bo=a("div"),F(sy.$$.fragment),IDo=l(),ad=a("p"),qDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZV=a("a"),jDo=o("from_pretrained()"),DDo=o(" class method or the "),eX=a("a"),GDo=o("from_config()"),ODo=o(` class
method.`),VDo=l(),ly=a("p"),XDo=o("This class cannot be instantiated directly using "),Zpe=a("code"),zDo=o("__init__()"),QDo=o(" (throws an error)."),WDo=l(),gt=a("div"),F(iy.$$.fragment),HDo=l(),e_e=a("p"),UDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JDo=l(),nd=a("p"),YDo=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),KDo=o("not"),ZDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),eGo=o("from_pretrained()"),oGo=o(" to load the model weights."),rGo=l(),F(Qb.$$.fragment),tGo=l(),ro=a("div"),F(dy.$$.fragment),aGo=l(),r_e=a("p"),nGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sGo=l(),Ga=a("p"),lGo=o("The model class to instantiate is selected based on the "),t_e=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),cGo=o("pretrained_model_name_or_path"),fGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),mGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),B=a("ul"),Wb=a("li"),s_e=a("strong"),pGo=o("albert"),_Go=o(" \u2014 "),rX=a("a"),uGo=o("AlbertForSequenceClassification"),bGo=o(" (ALBERT model)"),vGo=l(),Hb=a("li"),l_e=a("strong"),FGo=o("bart"),TGo=o(" \u2014 "),tX=a("a"),MGo=o("BartForSequenceClassification"),EGo=o(" (BART model)"),CGo=l(),Ub=a("li"),i_e=a("strong"),wGo=o("bert"),AGo=o(" \u2014 "),aX=a("a"),LGo=o("BertForSequenceClassification"),yGo=o(" (BERT model)"),xGo=l(),Jb=a("li"),d_e=a("strong"),$Go=o("big_bird"),kGo=o(" \u2014 "),nX=a("a"),SGo=o("BigBirdForSequenceClassification"),RGo=o(" (BigBird model)"),PGo=l(),Yb=a("li"),c_e=a("strong"),BGo=o("bigbird_pegasus"),NGo=o(" \u2014 "),sX=a("a"),IGo=o("BigBirdPegasusForSequenceClassification"),qGo=o(" (BigBird-Pegasus model)"),jGo=l(),Kb=a("li"),f_e=a("strong"),DGo=o("bloom"),GGo=o(" \u2014 "),lX=a("a"),OGo=o("BloomForSequenceClassification"),VGo=o(" (BLOOM model)"),XGo=l(),Zb=a("li"),m_e=a("strong"),zGo=o("camembert"),QGo=o(" \u2014 "),iX=a("a"),WGo=o("CamembertForSequenceClassification"),HGo=o(" (CamemBERT model)"),UGo=l(),e3=a("li"),g_e=a("strong"),JGo=o("canine"),YGo=o(" \u2014 "),dX=a("a"),KGo=o("CanineForSequenceClassification"),ZGo=o(" (CANINE model)"),eOo=l(),o3=a("li"),h_e=a("strong"),oOo=o("convbert"),rOo=o(" \u2014 "),cX=a("a"),tOo=o("ConvBertForSequenceClassification"),aOo=o(" (ConvBERT model)"),nOo=l(),r3=a("li"),p_e=a("strong"),sOo=o("ctrl"),lOo=o(" \u2014 "),fX=a("a"),iOo=o("CTRLForSequenceClassification"),dOo=o(" (CTRL model)"),cOo=l(),t3=a("li"),__e=a("strong"),fOo=o("data2vec-text"),mOo=o(" \u2014 "),mX=a("a"),gOo=o("Data2VecTextForSequenceClassification"),hOo=o(" (Data2VecText model)"),pOo=l(),a3=a("li"),u_e=a("strong"),_Oo=o("deberta"),uOo=o(" \u2014 "),gX=a("a"),bOo=o("DebertaForSequenceClassification"),vOo=o(" (DeBERTa model)"),FOo=l(),n3=a("li"),b_e=a("strong"),TOo=o("deberta-v2"),MOo=o(" \u2014 "),hX=a("a"),EOo=o("DebertaV2ForSequenceClassification"),COo=o(" (DeBERTa-v2 model)"),wOo=l(),s3=a("li"),v_e=a("strong"),AOo=o("distilbert"),LOo=o(" \u2014 "),pX=a("a"),yOo=o("DistilBertForSequenceClassification"),xOo=o(" (DistilBERT model)"),$Oo=l(),l3=a("li"),F_e=a("strong"),kOo=o("electra"),SOo=o(" \u2014 "),_X=a("a"),ROo=o("ElectraForSequenceClassification"),POo=o(" (ELECTRA model)"),BOo=l(),i3=a("li"),T_e=a("strong"),NOo=o("flaubert"),IOo=o(" \u2014 "),uX=a("a"),qOo=o("FlaubertForSequenceClassification"),jOo=o(" (FlauBERT model)"),DOo=l(),d3=a("li"),M_e=a("strong"),GOo=o("fnet"),OOo=o(" \u2014 "),bX=a("a"),VOo=o("FNetForSequenceClassification"),XOo=o(" (FNet model)"),zOo=l(),c3=a("li"),E_e=a("strong"),QOo=o("funnel"),WOo=o(" \u2014 "),vX=a("a"),HOo=o("FunnelForSequenceClassification"),UOo=o(" (Funnel Transformer model)"),JOo=l(),f3=a("li"),C_e=a("strong"),YOo=o("gpt2"),KOo=o(" \u2014 "),FX=a("a"),ZOo=o("GPT2ForSequenceClassification"),eVo=o(" (OpenAI GPT-2 model)"),oVo=l(),m3=a("li"),w_e=a("strong"),rVo=o("gpt_neo"),tVo=o(" \u2014 "),TX=a("a"),aVo=o("GPTNeoForSequenceClassification"),nVo=o(" (GPT Neo model)"),sVo=l(),g3=a("li"),A_e=a("strong"),lVo=o("gptj"),iVo=o(" \u2014 "),MX=a("a"),dVo=o("GPTJForSequenceClassification"),cVo=o(" (GPT-J model)"),fVo=l(),h3=a("li"),L_e=a("strong"),mVo=o("ibert"),gVo=o(" \u2014 "),EX=a("a"),hVo=o("IBertForSequenceClassification"),pVo=o(" (I-BERT model)"),_Vo=l(),p3=a("li"),y_e=a("strong"),uVo=o("layoutlm"),bVo=o(" \u2014 "),CX=a("a"),vVo=o("LayoutLMForSequenceClassification"),FVo=o(" (LayoutLM model)"),TVo=l(),_3=a("li"),x_e=a("strong"),MVo=o("layoutlmv2"),EVo=o(" \u2014 "),wX=a("a"),CVo=o("LayoutLMv2ForSequenceClassification"),wVo=o(" (LayoutLMv2 model)"),AVo=l(),u3=a("li"),$_e=a("strong"),LVo=o("layoutlmv3"),yVo=o(" \u2014 "),AX=a("a"),xVo=o("LayoutLMv3ForSequenceClassification"),$Vo=o(" (LayoutLMv3 model)"),kVo=l(),b3=a("li"),k_e=a("strong"),SVo=o("led"),RVo=o(" \u2014 "),LX=a("a"),PVo=o("LEDForSequenceClassification"),BVo=o(" (LED model)"),NVo=l(),v3=a("li"),S_e=a("strong"),IVo=o("longformer"),qVo=o(" \u2014 "),yX=a("a"),jVo=o("LongformerForSequenceClassification"),DVo=o(" (Longformer model)"),GVo=l(),F3=a("li"),R_e=a("strong"),OVo=o("mbart"),VVo=o(" \u2014 "),xX=a("a"),XVo=o("MBartForSequenceClassification"),zVo=o(" (mBART model)"),QVo=l(),T3=a("li"),P_e=a("strong"),WVo=o("megatron-bert"),HVo=o(" \u2014 "),$X=a("a"),UVo=o("MegatronBertForSequenceClassification"),JVo=o(" (Megatron-BERT model)"),YVo=l(),M3=a("li"),B_e=a("strong"),KVo=o("mobilebert"),ZVo=o(" \u2014 "),kX=a("a"),eXo=o("MobileBertForSequenceClassification"),oXo=o(" (MobileBERT model)"),rXo=l(),E3=a("li"),N_e=a("strong"),tXo=o("mpnet"),aXo=o(" \u2014 "),SX=a("a"),nXo=o("MPNetForSequenceClassification"),sXo=o(" (MPNet model)"),lXo=l(),C3=a("li"),I_e=a("strong"),iXo=o("mvp"),dXo=o(" \u2014 "),RX=a("a"),cXo=o("MvpForSequenceClassification"),fXo=o(" (MVP model)"),mXo=l(),w3=a("li"),q_e=a("strong"),gXo=o("nezha"),hXo=o(" \u2014 "),PX=a("a"),pXo=o("NezhaForSequenceClassification"),_Xo=o(" (Nezha model)"),uXo=l(),A3=a("li"),j_e=a("strong"),bXo=o("nystromformer"),vXo=o(" \u2014 "),BX=a("a"),FXo=o("NystromformerForSequenceClassification"),TXo=o(" (Nystr\xF6mformer model)"),MXo=l(),L3=a("li"),D_e=a("strong"),EXo=o("openai-gpt"),CXo=o(" \u2014 "),NX=a("a"),wXo=o("OpenAIGPTForSequenceClassification"),AXo=o(" (OpenAI GPT model)"),LXo=l(),y3=a("li"),G_e=a("strong"),yXo=o("opt"),xXo=o(" \u2014 "),IX=a("a"),$Xo=o("OPTForSequenceClassification"),kXo=o(" (OPT model)"),SXo=l(),x3=a("li"),O_e=a("strong"),RXo=o("perceiver"),PXo=o(" \u2014 "),qX=a("a"),BXo=o("PerceiverForSequenceClassification"),NXo=o(" (Perceiver model)"),IXo=l(),$3=a("li"),V_e=a("strong"),qXo=o("plbart"),jXo=o(" \u2014 "),jX=a("a"),DXo=o("PLBartForSequenceClassification"),GXo=o(" (PLBart model)"),OXo=l(),k3=a("li"),X_e=a("strong"),VXo=o("qdqbert"),XXo=o(" \u2014 "),DX=a("a"),zXo=o("QDQBertForSequenceClassification"),QXo=o(" (QDQBert model)"),WXo=l(),S3=a("li"),z_e=a("strong"),HXo=o("reformer"),UXo=o(" \u2014 "),GX=a("a"),JXo=o("ReformerForSequenceClassification"),YXo=o(" (Reformer model)"),KXo=l(),R3=a("li"),Q_e=a("strong"),ZXo=o("rembert"),ezo=o(" \u2014 "),OX=a("a"),ozo=o("RemBertForSequenceClassification"),rzo=o(" (RemBERT model)"),tzo=l(),P3=a("li"),W_e=a("strong"),azo=o("roberta"),nzo=o(" \u2014 "),VX=a("a"),szo=o("RobertaForSequenceClassification"),lzo=o(" (RoBERTa model)"),izo=l(),B3=a("li"),H_e=a("strong"),dzo=o("roformer"),czo=o(" \u2014 "),XX=a("a"),fzo=o("RoFormerForSequenceClassification"),mzo=o(" (RoFormer model)"),gzo=l(),N3=a("li"),U_e=a("strong"),hzo=o("squeezebert"),pzo=o(" \u2014 "),zX=a("a"),_zo=o("SqueezeBertForSequenceClassification"),uzo=o(" (SqueezeBERT model)"),bzo=l(),I3=a("li"),J_e=a("strong"),vzo=o("tapas"),Fzo=o(" \u2014 "),QX=a("a"),Tzo=o("TapasForSequenceClassification"),Mzo=o(" (TAPAS model)"),Ezo=l(),q3=a("li"),Y_e=a("strong"),Czo=o("transfo-xl"),wzo=o(" \u2014 "),WX=a("a"),Azo=o("TransfoXLForSequenceClassification"),Lzo=o(" (Transformer-XL model)"),yzo=l(),j3=a("li"),K_e=a("strong"),xzo=o("xlm"),$zo=o(" \u2014 "),HX=a("a"),kzo=o("XLMForSequenceClassification"),Szo=o(" (XLM model)"),Rzo=l(),D3=a("li"),Z_e=a("strong"),Pzo=o("xlm-roberta"),Bzo=o(" \u2014 "),UX=a("a"),Nzo=o("XLMRobertaForSequenceClassification"),Izo=o(" (XLM-RoBERTa model)"),qzo=l(),G3=a("li"),eue=a("strong"),jzo=o("xlm-roberta-xl"),Dzo=o(" \u2014 "),JX=a("a"),Gzo=o("XLMRobertaXLForSequenceClassification"),Ozo=o(" (XLM-RoBERTa-XL model)"),Vzo=l(),O3=a("li"),oue=a("strong"),Xzo=o("xlnet"),zzo=o(" \u2014 "),YX=a("a"),Qzo=o("XLNetForSequenceClassification"),Wzo=o(" (XLNet model)"),Hzo=l(),V3=a("li"),rue=a("strong"),Uzo=o("yoso"),Jzo=o(" \u2014 "),KX=a("a"),Yzo=o("YosoForSequenceClassification"),Kzo=o(" (YOSO model)"),Zzo=l(),X3=a("p"),eQo=o("The model is set in evaluation mode by default using "),tue=a("code"),oQo=o("model.eval()"),rQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),tQo=o("model.train()"),aQo=l(),F(z3.$$.fragment),jXe=l(),sd=a("h2"),Q3=a("a"),nue=a("span"),F(cy.$$.fragment),nQo=l(),sue=a("span"),sQo=o("AutoModelForMultipleChoice"),DXe=l(),No=a("div"),F(fy.$$.fragment),lQo=l(),ld=a("p"),iQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZX=a("a"),dQo=o("from_pretrained()"),cQo=o(" class method or the "),ez=a("a"),fQo=o("from_config()"),mQo=o(` class
method.`),gQo=l(),my=a("p"),hQo=o("This class cannot be instantiated directly using "),lue=a("code"),pQo=o("__init__()"),_Qo=o(" (throws an error)."),uQo=l(),ht=a("div"),F(gy.$$.fragment),bQo=l(),iue=a("p"),vQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FQo=l(),id=a("p"),TQo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),MQo=o("not"),EQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),CQo=o("from_pretrained()"),wQo=o(" to load the model weights."),AQo=l(),F(W3.$$.fragment),LQo=l(),to=a("div"),F(hy.$$.fragment),yQo=l(),cue=a("p"),xQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$Qo=l(),Oa=a("p"),kQo=o("The model class to instantiate is selected based on the "),fue=a("code"),SQo=o("model_type"),RQo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),PQo=o("pretrained_model_name_or_path"),BQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),NQo=o("pretrained_model_name_or_path"),IQo=o(":"),qQo=l(),Z=a("ul"),H3=a("li"),hue=a("strong"),jQo=o("albert"),DQo=o(" \u2014 "),rz=a("a"),GQo=o("AlbertForMultipleChoice"),OQo=o(" (ALBERT model)"),VQo=l(),U3=a("li"),pue=a("strong"),XQo=o("bert"),zQo=o(" \u2014 "),tz=a("a"),QQo=o("BertForMultipleChoice"),WQo=o(" (BERT model)"),HQo=l(),J3=a("li"),_ue=a("strong"),UQo=o("big_bird"),JQo=o(" \u2014 "),az=a("a"),YQo=o("BigBirdForMultipleChoice"),KQo=o(" (BigBird model)"),ZQo=l(),Y3=a("li"),uue=a("strong"),eWo=o("camembert"),oWo=o(" \u2014 "),nz=a("a"),rWo=o("CamembertForMultipleChoice"),tWo=o(" (CamemBERT model)"),aWo=l(),K3=a("li"),bue=a("strong"),nWo=o("canine"),sWo=o(" \u2014 "),sz=a("a"),lWo=o("CanineForMultipleChoice"),iWo=o(" (CANINE model)"),dWo=l(),Z3=a("li"),vue=a("strong"),cWo=o("convbert"),fWo=o(" \u2014 "),lz=a("a"),mWo=o("ConvBertForMultipleChoice"),gWo=o(" (ConvBERT model)"),hWo=l(),ev=a("li"),Fue=a("strong"),pWo=o("data2vec-text"),_Wo=o(" \u2014 "),iz=a("a"),uWo=o("Data2VecTextForMultipleChoice"),bWo=o(" (Data2VecText model)"),vWo=l(),ov=a("li"),Tue=a("strong"),FWo=o("deberta-v2"),TWo=o(" \u2014 "),dz=a("a"),MWo=o("DebertaV2ForMultipleChoice"),EWo=o(" (DeBERTa-v2 model)"),CWo=l(),rv=a("li"),Mue=a("strong"),wWo=o("distilbert"),AWo=o(" \u2014 "),cz=a("a"),LWo=o("DistilBertForMultipleChoice"),yWo=o(" (DistilBERT model)"),xWo=l(),tv=a("li"),Eue=a("strong"),$Wo=o("electra"),kWo=o(" \u2014 "),fz=a("a"),SWo=o("ElectraForMultipleChoice"),RWo=o(" (ELECTRA model)"),PWo=l(),av=a("li"),Cue=a("strong"),BWo=o("flaubert"),NWo=o(" \u2014 "),mz=a("a"),IWo=o("FlaubertForMultipleChoice"),qWo=o(" (FlauBERT model)"),jWo=l(),nv=a("li"),wue=a("strong"),DWo=o("fnet"),GWo=o(" \u2014 "),gz=a("a"),OWo=o("FNetForMultipleChoice"),VWo=o(" (FNet model)"),XWo=l(),sv=a("li"),Aue=a("strong"),zWo=o("funnel"),QWo=o(" \u2014 "),hz=a("a"),WWo=o("FunnelForMultipleChoice"),HWo=o(" (Funnel Transformer model)"),UWo=l(),lv=a("li"),Lue=a("strong"),JWo=o("ibert"),YWo=o(" \u2014 "),pz=a("a"),KWo=o("IBertForMultipleChoice"),ZWo=o(" (I-BERT model)"),eHo=l(),iv=a("li"),yue=a("strong"),oHo=o("longformer"),rHo=o(" \u2014 "),_z=a("a"),tHo=o("LongformerForMultipleChoice"),aHo=o(" (Longformer model)"),nHo=l(),dv=a("li"),xue=a("strong"),sHo=o("megatron-bert"),lHo=o(" \u2014 "),uz=a("a"),iHo=o("MegatronBertForMultipleChoice"),dHo=o(" (Megatron-BERT model)"),cHo=l(),cv=a("li"),$ue=a("strong"),fHo=o("mobilebert"),mHo=o(" \u2014 "),bz=a("a"),gHo=o("MobileBertForMultipleChoice"),hHo=o(" (MobileBERT model)"),pHo=l(),fv=a("li"),kue=a("strong"),_Ho=o("mpnet"),uHo=o(" \u2014 "),vz=a("a"),bHo=o("MPNetForMultipleChoice"),vHo=o(" (MPNet model)"),FHo=l(),mv=a("li"),Sue=a("strong"),THo=o("nezha"),MHo=o(" \u2014 "),Fz=a("a"),EHo=o("NezhaForMultipleChoice"),CHo=o(" (Nezha model)"),wHo=l(),gv=a("li"),Rue=a("strong"),AHo=o("nystromformer"),LHo=o(" \u2014 "),Tz=a("a"),yHo=o("NystromformerForMultipleChoice"),xHo=o(" (Nystr\xF6mformer model)"),$Ho=l(),hv=a("li"),Pue=a("strong"),kHo=o("qdqbert"),SHo=o(" \u2014 "),Mz=a("a"),RHo=o("QDQBertForMultipleChoice"),PHo=o(" (QDQBert model)"),BHo=l(),pv=a("li"),Bue=a("strong"),NHo=o("rembert"),IHo=o(" \u2014 "),Ez=a("a"),qHo=o("RemBertForMultipleChoice"),jHo=o(" (RemBERT model)"),DHo=l(),_v=a("li"),Nue=a("strong"),GHo=o("roberta"),OHo=o(" \u2014 "),Cz=a("a"),VHo=o("RobertaForMultipleChoice"),XHo=o(" (RoBERTa model)"),zHo=l(),uv=a("li"),Iue=a("strong"),QHo=o("roformer"),WHo=o(" \u2014 "),wz=a("a"),HHo=o("RoFormerForMultipleChoice"),UHo=o(" (RoFormer model)"),JHo=l(),bv=a("li"),que=a("strong"),YHo=o("squeezebert"),KHo=o(" \u2014 "),Az=a("a"),ZHo=o("SqueezeBertForMultipleChoice"),eUo=o(" (SqueezeBERT model)"),oUo=l(),vv=a("li"),jue=a("strong"),rUo=o("xlm"),tUo=o(" \u2014 "),Lz=a("a"),aUo=o("XLMForMultipleChoice"),nUo=o(" (XLM model)"),sUo=l(),Fv=a("li"),Due=a("strong"),lUo=o("xlm-roberta"),iUo=o(" \u2014 "),yz=a("a"),dUo=o("XLMRobertaForMultipleChoice"),cUo=o(" (XLM-RoBERTa model)"),fUo=l(),Tv=a("li"),Gue=a("strong"),mUo=o("xlm-roberta-xl"),gUo=o(" \u2014 "),xz=a("a"),hUo=o("XLMRobertaXLForMultipleChoice"),pUo=o(" (XLM-RoBERTa-XL model)"),_Uo=l(),Mv=a("li"),Oue=a("strong"),uUo=o("xlnet"),bUo=o(" \u2014 "),$z=a("a"),vUo=o("XLNetForMultipleChoice"),FUo=o(" (XLNet model)"),TUo=l(),Ev=a("li"),Vue=a("strong"),MUo=o("yoso"),EUo=o(" \u2014 "),kz=a("a"),CUo=o("YosoForMultipleChoice"),wUo=o(" (YOSO model)"),AUo=l(),Cv=a("p"),LUo=o("The model is set in evaluation mode by default using "),Xue=a("code"),yUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),$Uo=o("model.train()"),kUo=l(),F(wv.$$.fragment),GXe=l(),dd=a("h2"),Av=a("a"),Que=a("span"),F(py.$$.fragment),SUo=l(),Wue=a("span"),RUo=o("AutoModelForNextSentencePrediction"),OXe=l(),Io=a("div"),F(_y.$$.fragment),PUo=l(),cd=a("p"),BUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sz=a("a"),NUo=o("from_pretrained()"),IUo=o(" class method or the "),Rz=a("a"),qUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),uy=a("p"),GUo=o("This class cannot be instantiated directly using "),Hue=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),pt=a("div"),F(by.$$.fragment),zUo=l(),Uue=a("p"),QUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WUo=l(),fd=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),F(Lv.$$.fragment),eJo=l(),ao=a("div"),F(vy.$$.fragment),oJo=l(),Yue=a("p"),rJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tJo=l(),Va=a("p"),aJo=o("The model class to instantiate is selected based on the "),Kue=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),qo=a("ul"),yv=a("li"),o1e=a("strong"),mJo=o("bert"),gJo=o(" \u2014 "),Bz=a("a"),hJo=o("BertForNextSentencePrediction"),pJo=o(" (BERT model)"),_Jo=l(),xv=a("li"),r1e=a("strong"),uJo=o("fnet"),bJo=o(" \u2014 "),Nz=a("a"),vJo=o("FNetForNextSentencePrediction"),FJo=o(" (FNet model)"),TJo=l(),$v=a("li"),t1e=a("strong"),MJo=o("megatron-bert"),EJo=o(" \u2014 "),Iz=a("a"),CJo=o("MegatronBertForNextSentencePrediction"),wJo=o(" (Megatron-BERT model)"),AJo=l(),kv=a("li"),a1e=a("strong"),LJo=o("mobilebert"),yJo=o(" \u2014 "),qz=a("a"),xJo=o("MobileBertForNextSentencePrediction"),$Jo=o(" (MobileBERT model)"),kJo=l(),Sv=a("li"),n1e=a("strong"),SJo=o("nezha"),RJo=o(" \u2014 "),jz=a("a"),PJo=o("NezhaForNextSentencePrediction"),BJo=o(" (Nezha model)"),NJo=l(),Rv=a("li"),s1e=a("strong"),IJo=o("qdqbert"),qJo=o(" \u2014 "),Dz=a("a"),jJo=o("QDQBertForNextSentencePrediction"),DJo=o(" (QDQBert model)"),GJo=l(),Pv=a("p"),OJo=o("The model is set in evaluation mode by default using "),l1e=a("code"),VJo=o("model.eval()"),XJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),zJo=o("model.train()"),QJo=l(),F(Bv.$$.fragment),VXe=l(),md=a("h2"),Nv=a("a"),d1e=a("span"),F(Fy.$$.fragment),WJo=l(),c1e=a("span"),HJo=o("AutoModelForTokenClassification"),XXe=l(),jo=a("div"),F(Ty.$$.fragment),UJo=l(),gd=a("p"),JJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gz=a("a"),YJo=o("from_pretrained()"),KJo=o(" class method or the "),Oz=a("a"),ZJo=o("from_config()"),eYo=o(` class
method.`),oYo=l(),My=a("p"),rYo=o("This class cannot be instantiated directly using "),f1e=a("code"),tYo=o("__init__()"),aYo=o(" (throws an error)."),nYo=l(),_t=a("div"),F(Ey.$$.fragment),sYo=l(),m1e=a("p"),lYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iYo=l(),hd=a("p"),dYo=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),cYo=o("not"),fYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),mYo=o("from_pretrained()"),gYo=o(" to load the model weights."),hYo=l(),F(Iv.$$.fragment),pYo=l(),no=a("div"),F(Cy.$$.fragment),_Yo=l(),h1e=a("p"),uYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bYo=l(),Xa=a("p"),vYo=o("The model class to instantiate is selected based on the "),p1e=a("code"),FYo=o("model_type"),TYo=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),MYo=o("pretrained_model_name_or_path"),EYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(":"),AYo=l(),U=a("ul"),qv=a("li"),b1e=a("strong"),LYo=o("albert"),yYo=o(" \u2014 "),Xz=a("a"),xYo=o("AlbertForTokenClassification"),$Yo=o(" (ALBERT model)"),kYo=l(),jv=a("li"),v1e=a("strong"),SYo=o("bert"),RYo=o(" \u2014 "),zz=a("a"),PYo=o("BertForTokenClassification"),BYo=o(" (BERT model)"),NYo=l(),Dv=a("li"),F1e=a("strong"),IYo=o("big_bird"),qYo=o(" \u2014 "),Qz=a("a"),jYo=o("BigBirdForTokenClassification"),DYo=o(" (BigBird model)"),GYo=l(),Gv=a("li"),T1e=a("strong"),OYo=o("bloom"),VYo=o(" \u2014 "),Wz=a("a"),XYo=o("BloomForTokenClassification"),zYo=o(" (BLOOM model)"),QYo=l(),Ov=a("li"),M1e=a("strong"),WYo=o("camembert"),HYo=o(" \u2014 "),Hz=a("a"),UYo=o("CamembertForTokenClassification"),JYo=o(" (CamemBERT model)"),YYo=l(),Vv=a("li"),E1e=a("strong"),KYo=o("canine"),ZYo=o(" \u2014 "),Uz=a("a"),eKo=o("CanineForTokenClassification"),oKo=o(" (CANINE model)"),rKo=l(),Xv=a("li"),C1e=a("strong"),tKo=o("convbert"),aKo=o(" \u2014 "),Jz=a("a"),nKo=o("ConvBertForTokenClassification"),sKo=o(" (ConvBERT model)"),lKo=l(),zv=a("li"),w1e=a("strong"),iKo=o("data2vec-text"),dKo=o(" \u2014 "),Yz=a("a"),cKo=o("Data2VecTextForTokenClassification"),fKo=o(" (Data2VecText model)"),mKo=l(),Qv=a("li"),A1e=a("strong"),gKo=o("deberta"),hKo=o(" \u2014 "),Kz=a("a"),pKo=o("DebertaForTokenClassification"),_Ko=o(" (DeBERTa model)"),uKo=l(),Wv=a("li"),L1e=a("strong"),bKo=o("deberta-v2"),vKo=o(" \u2014 "),Zz=a("a"),FKo=o("DebertaV2ForTokenClassification"),TKo=o(" (DeBERTa-v2 model)"),MKo=l(),Hv=a("li"),y1e=a("strong"),EKo=o("distilbert"),CKo=o(" \u2014 "),eQ=a("a"),wKo=o("DistilBertForTokenClassification"),AKo=o(" (DistilBERT model)"),LKo=l(),Uv=a("li"),x1e=a("strong"),yKo=o("electra"),xKo=o(" \u2014 "),oQ=a("a"),$Ko=o("ElectraForTokenClassification"),kKo=o(" (ELECTRA model)"),SKo=l(),Jv=a("li"),$1e=a("strong"),RKo=o("flaubert"),PKo=o(" \u2014 "),rQ=a("a"),BKo=o("FlaubertForTokenClassification"),NKo=o(" (FlauBERT model)"),IKo=l(),Yv=a("li"),k1e=a("strong"),qKo=o("fnet"),jKo=o(" \u2014 "),tQ=a("a"),DKo=o("FNetForTokenClassification"),GKo=o(" (FNet model)"),OKo=l(),Kv=a("li"),S1e=a("strong"),VKo=o("funnel"),XKo=o(" \u2014 "),aQ=a("a"),zKo=o("FunnelForTokenClassification"),QKo=o(" (Funnel Transformer model)"),WKo=l(),Zv=a("li"),R1e=a("strong"),HKo=o("gpt2"),UKo=o(" \u2014 "),nQ=a("a"),JKo=o("GPT2ForTokenClassification"),YKo=o(" (OpenAI GPT-2 model)"),KKo=l(),eF=a("li"),P1e=a("strong"),ZKo=o("ibert"),eZo=o(" \u2014 "),sQ=a("a"),oZo=o("IBertForTokenClassification"),rZo=o(" (I-BERT model)"),tZo=l(),oF=a("li"),B1e=a("strong"),aZo=o("layoutlm"),nZo=o(" \u2014 "),lQ=a("a"),sZo=o("LayoutLMForTokenClassification"),lZo=o(" (LayoutLM model)"),iZo=l(),rF=a("li"),N1e=a("strong"),dZo=o("layoutlmv2"),cZo=o(" \u2014 "),iQ=a("a"),fZo=o("LayoutLMv2ForTokenClassification"),mZo=o(" (LayoutLMv2 model)"),gZo=l(),tF=a("li"),I1e=a("strong"),hZo=o("layoutlmv3"),pZo=o(" \u2014 "),dQ=a("a"),_Zo=o("LayoutLMv3ForTokenClassification"),uZo=o(" (LayoutLMv3 model)"),bZo=l(),aF=a("li"),q1e=a("strong"),vZo=o("longformer"),FZo=o(" \u2014 "),cQ=a("a"),TZo=o("LongformerForTokenClassification"),MZo=o(" (Longformer model)"),EZo=l(),nF=a("li"),j1e=a("strong"),CZo=o("megatron-bert"),wZo=o(" \u2014 "),fQ=a("a"),AZo=o("MegatronBertForTokenClassification"),LZo=o(" (Megatron-BERT model)"),yZo=l(),sF=a("li"),D1e=a("strong"),xZo=o("mobilebert"),$Zo=o(" \u2014 "),mQ=a("a"),kZo=o("MobileBertForTokenClassification"),SZo=o(" (MobileBERT model)"),RZo=l(),lF=a("li"),G1e=a("strong"),PZo=o("mpnet"),BZo=o(" \u2014 "),gQ=a("a"),NZo=o("MPNetForTokenClassification"),IZo=o(" (MPNet model)"),qZo=l(),iF=a("li"),O1e=a("strong"),jZo=o("nezha"),DZo=o(" \u2014 "),hQ=a("a"),GZo=o("NezhaForTokenClassification"),OZo=o(" (Nezha model)"),VZo=l(),dF=a("li"),V1e=a("strong"),XZo=o("nystromformer"),zZo=o(" \u2014 "),pQ=a("a"),QZo=o("NystromformerForTokenClassification"),WZo=o(" (Nystr\xF6mformer model)"),HZo=l(),cF=a("li"),X1e=a("strong"),UZo=o("qdqbert"),JZo=o(" \u2014 "),_Q=a("a"),YZo=o("QDQBertForTokenClassification"),KZo=o(" (QDQBert model)"),ZZo=l(),fF=a("li"),z1e=a("strong"),eer=o("rembert"),oer=o(" \u2014 "),uQ=a("a"),rer=o("RemBertForTokenClassification"),ter=o(" (RemBERT model)"),aer=l(),mF=a("li"),Q1e=a("strong"),ner=o("roberta"),ser=o(" \u2014 "),bQ=a("a"),ler=o("RobertaForTokenClassification"),ier=o(" (RoBERTa model)"),der=l(),gF=a("li"),W1e=a("strong"),cer=o("roformer"),fer=o(" \u2014 "),vQ=a("a"),mer=o("RoFormerForTokenClassification"),ger=o(" (RoFormer model)"),her=l(),hF=a("li"),H1e=a("strong"),per=o("squeezebert"),_er=o(" \u2014 "),FQ=a("a"),uer=o("SqueezeBertForTokenClassification"),ber=o(" (SqueezeBERT model)"),ver=l(),pF=a("li"),U1e=a("strong"),Fer=o("xlm"),Ter=o(" \u2014 "),TQ=a("a"),Mer=o("XLMForTokenClassification"),Eer=o(" (XLM model)"),Cer=l(),_F=a("li"),J1e=a("strong"),wer=o("xlm-roberta"),Aer=o(" \u2014 "),MQ=a("a"),Ler=o("XLMRobertaForTokenClassification"),yer=o(" (XLM-RoBERTa model)"),xer=l(),uF=a("li"),Y1e=a("strong"),$er=o("xlm-roberta-xl"),ker=o(" \u2014 "),EQ=a("a"),Ser=o("XLMRobertaXLForTokenClassification"),Rer=o(" (XLM-RoBERTa-XL model)"),Per=l(),bF=a("li"),K1e=a("strong"),Ber=o("xlnet"),Ner=o(" \u2014 "),CQ=a("a"),Ier=o("XLNetForTokenClassification"),qer=o(" (XLNet model)"),jer=l(),vF=a("li"),Z1e=a("strong"),Der=o("yoso"),Ger=o(" \u2014 "),wQ=a("a"),Oer=o("YosoForTokenClassification"),Ver=o(" (YOSO model)"),Xer=l(),FF=a("p"),zer=o("The model is set in evaluation mode by default using "),e2e=a("code"),Qer=o("model.eval()"),Wer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=a("code"),Her=o("model.train()"),Uer=l(),F(TF.$$.fragment),zXe=l(),pd=a("h2"),MF=a("a"),r2e=a("span"),F(wy.$$.fragment),Jer=l(),t2e=a("span"),Yer=o("AutoModelForQuestionAnswering"),QXe=l(),Do=a("div"),F(Ay.$$.fragment),Ker=l(),_d=a("p"),Zer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AQ=a("a"),eor=o("from_pretrained()"),oor=o(" class method or the "),LQ=a("a"),ror=o("from_config()"),tor=o(` class
method.`),aor=l(),Ly=a("p"),nor=o("This class cannot be instantiated directly using "),a2e=a("code"),sor=o("__init__()"),lor=o(" (throws an error)."),ior=l(),ut=a("div"),F(yy.$$.fragment),dor=l(),n2e=a("p"),cor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mor=l(),ud=a("p"),gor=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),hor=o("not"),por=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),_or=o("from_pretrained()"),uor=o(" to load the model weights."),bor=l(),F(EF.$$.fragment),vor=l(),so=a("div"),F(xy.$$.fragment),For=l(),l2e=a("p"),Tor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mor=l(),za=a("p"),Eor=o("The model class to instantiate is selected based on the "),i2e=a("code"),Cor=o("model_type"),wor=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),Aor=o("pretrained_model_name_or_path"),Lor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),yor=o("pretrained_model_name_or_path"),xor=o(":"),$or=l(),V=a("ul"),CF=a("li"),f2e=a("strong"),kor=o("albert"),Sor=o(" \u2014 "),xQ=a("a"),Ror=o("AlbertForQuestionAnswering"),Por=o(" (ALBERT model)"),Bor=l(),wF=a("li"),m2e=a("strong"),Nor=o("bart"),Ior=o(" \u2014 "),$Q=a("a"),qor=o("BartForQuestionAnswering"),jor=o(" (BART model)"),Dor=l(),AF=a("li"),g2e=a("strong"),Gor=o("bert"),Oor=o(" \u2014 "),kQ=a("a"),Vor=o("BertForQuestionAnswering"),Xor=o(" (BERT model)"),zor=l(),LF=a("li"),h2e=a("strong"),Qor=o("big_bird"),Wor=o(" \u2014 "),SQ=a("a"),Hor=o("BigBirdForQuestionAnswering"),Uor=o(" (BigBird model)"),Jor=l(),yF=a("li"),p2e=a("strong"),Yor=o("bigbird_pegasus"),Kor=o(" \u2014 "),RQ=a("a"),Zor=o("BigBirdPegasusForQuestionAnswering"),err=o(" (BigBird-Pegasus model)"),orr=l(),xF=a("li"),_2e=a("strong"),rrr=o("camembert"),trr=o(" \u2014 "),PQ=a("a"),arr=o("CamembertForQuestionAnswering"),nrr=o(" (CamemBERT model)"),srr=l(),$F=a("li"),u2e=a("strong"),lrr=o("canine"),irr=o(" \u2014 "),BQ=a("a"),drr=o("CanineForQuestionAnswering"),crr=o(" (CANINE model)"),frr=l(),kF=a("li"),b2e=a("strong"),mrr=o("convbert"),grr=o(" \u2014 "),NQ=a("a"),hrr=o("ConvBertForQuestionAnswering"),prr=o(" (ConvBERT model)"),_rr=l(),SF=a("li"),v2e=a("strong"),urr=o("data2vec-text"),brr=o(" \u2014 "),IQ=a("a"),vrr=o("Data2VecTextForQuestionAnswering"),Frr=o(" (Data2VecText model)"),Trr=l(),RF=a("li"),F2e=a("strong"),Mrr=o("deberta"),Err=o(" \u2014 "),qQ=a("a"),Crr=o("DebertaForQuestionAnswering"),wrr=o(" (DeBERTa model)"),Arr=l(),PF=a("li"),T2e=a("strong"),Lrr=o("deberta-v2"),yrr=o(" \u2014 "),jQ=a("a"),xrr=o("DebertaV2ForQuestionAnswering"),$rr=o(" (DeBERTa-v2 model)"),krr=l(),BF=a("li"),M2e=a("strong"),Srr=o("distilbert"),Rrr=o(" \u2014 "),DQ=a("a"),Prr=o("DistilBertForQuestionAnswering"),Brr=o(" (DistilBERT model)"),Nrr=l(),NF=a("li"),E2e=a("strong"),Irr=o("electra"),qrr=o(" \u2014 "),GQ=a("a"),jrr=o("ElectraForQuestionAnswering"),Drr=o(" (ELECTRA model)"),Grr=l(),IF=a("li"),C2e=a("strong"),Orr=o("flaubert"),Vrr=o(" \u2014 "),OQ=a("a"),Xrr=o("FlaubertForQuestionAnsweringSimple"),zrr=o(" (FlauBERT model)"),Qrr=l(),qF=a("li"),w2e=a("strong"),Wrr=o("fnet"),Hrr=o(" \u2014 "),VQ=a("a"),Urr=o("FNetForQuestionAnswering"),Jrr=o(" (FNet model)"),Yrr=l(),jF=a("li"),A2e=a("strong"),Krr=o("funnel"),Zrr=o(" \u2014 "),XQ=a("a"),etr=o("FunnelForQuestionAnswering"),otr=o(" (Funnel Transformer model)"),rtr=l(),DF=a("li"),L2e=a("strong"),ttr=o("gptj"),atr=o(" \u2014 "),zQ=a("a"),ntr=o("GPTJForQuestionAnswering"),str=o(" (GPT-J model)"),ltr=l(),GF=a("li"),y2e=a("strong"),itr=o("ibert"),dtr=o(" \u2014 "),QQ=a("a"),ctr=o("IBertForQuestionAnswering"),ftr=o(" (I-BERT model)"),mtr=l(),OF=a("li"),x2e=a("strong"),gtr=o("layoutlmv2"),htr=o(" \u2014 "),WQ=a("a"),ptr=o("LayoutLMv2ForQuestionAnswering"),_tr=o(" (LayoutLMv2 model)"),utr=l(),VF=a("li"),$2e=a("strong"),btr=o("layoutlmv3"),vtr=o(" \u2014 "),HQ=a("a"),Ftr=o("LayoutLMv3ForQuestionAnswering"),Ttr=o(" (LayoutLMv3 model)"),Mtr=l(),XF=a("li"),k2e=a("strong"),Etr=o("led"),Ctr=o(" \u2014 "),UQ=a("a"),wtr=o("LEDForQuestionAnswering"),Atr=o(" (LED model)"),Ltr=l(),zF=a("li"),S2e=a("strong"),ytr=o("longformer"),xtr=o(" \u2014 "),JQ=a("a"),$tr=o("LongformerForQuestionAnswering"),ktr=o(" (Longformer model)"),Str=l(),QF=a("li"),R2e=a("strong"),Rtr=o("lxmert"),Ptr=o(" \u2014 "),YQ=a("a"),Btr=o("LxmertForQuestionAnswering"),Ntr=o(" (LXMERT model)"),Itr=l(),WF=a("li"),P2e=a("strong"),qtr=o("mbart"),jtr=o(" \u2014 "),KQ=a("a"),Dtr=o("MBartForQuestionAnswering"),Gtr=o(" (mBART model)"),Otr=l(),HF=a("li"),B2e=a("strong"),Vtr=o("megatron-bert"),Xtr=o(" \u2014 "),ZQ=a("a"),ztr=o("MegatronBertForQuestionAnswering"),Qtr=o(" (Megatron-BERT model)"),Wtr=l(),UF=a("li"),N2e=a("strong"),Htr=o("mobilebert"),Utr=o(" \u2014 "),eW=a("a"),Jtr=o("MobileBertForQuestionAnswering"),Ytr=o(" (MobileBERT model)"),Ktr=l(),JF=a("li"),I2e=a("strong"),Ztr=o("mpnet"),ear=o(" \u2014 "),oW=a("a"),oar=o("MPNetForQuestionAnswering"),rar=o(" (MPNet model)"),tar=l(),YF=a("li"),q2e=a("strong"),aar=o("mvp"),nar=o(" \u2014 "),rW=a("a"),sar=o("MvpForQuestionAnswering"),lar=o(" (MVP model)"),iar=l(),KF=a("li"),j2e=a("strong"),dar=o("nezha"),car=o(" \u2014 "),tW=a("a"),far=o("NezhaForQuestionAnswering"),mar=o(" (Nezha model)"),gar=l(),ZF=a("li"),D2e=a("strong"),har=o("nystromformer"),par=o(" \u2014 "),aW=a("a"),_ar=o("NystromformerForQuestionAnswering"),uar=o(" (Nystr\xF6mformer model)"),bar=l(),eT=a("li"),G2e=a("strong"),Far=o("qdqbert"),Tar=o(" \u2014 "),nW=a("a"),Mar=o("QDQBertForQuestionAnswering"),Ear=o(" (QDQBert model)"),Car=l(),oT=a("li"),O2e=a("strong"),war=o("reformer"),Aar=o(" \u2014 "),sW=a("a"),Lar=o("ReformerForQuestionAnswering"),yar=o(" (Reformer model)"),xar=l(),rT=a("li"),V2e=a("strong"),$ar=o("rembert"),kar=o(" \u2014 "),lW=a("a"),Sar=o("RemBertForQuestionAnswering"),Rar=o(" (RemBERT model)"),Par=l(),tT=a("li"),X2e=a("strong"),Bar=o("roberta"),Nar=o(" \u2014 "),iW=a("a"),Iar=o("RobertaForQuestionAnswering"),qar=o(" (RoBERTa model)"),jar=l(),aT=a("li"),z2e=a("strong"),Dar=o("roformer"),Gar=o(" \u2014 "),dW=a("a"),Oar=o("RoFormerForQuestionAnswering"),Var=o(" (RoFormer model)"),Xar=l(),nT=a("li"),Q2e=a("strong"),zar=o("splinter"),Qar=o(" \u2014 "),cW=a("a"),War=o("SplinterForQuestionAnswering"),Har=o(" (Splinter model)"),Uar=l(),sT=a("li"),W2e=a("strong"),Jar=o("squeezebert"),Yar=o(" \u2014 "),fW=a("a"),Kar=o("SqueezeBertForQuestionAnswering"),Zar=o(" (SqueezeBERT model)"),enr=l(),lT=a("li"),H2e=a("strong"),onr=o("xlm"),rnr=o(" \u2014 "),mW=a("a"),tnr=o("XLMForQuestionAnsweringSimple"),anr=o(" (XLM model)"),nnr=l(),iT=a("li"),U2e=a("strong"),snr=o("xlm-roberta"),lnr=o(" \u2014 "),gW=a("a"),inr=o("XLMRobertaForQuestionAnswering"),dnr=o(" (XLM-RoBERTa model)"),cnr=l(),dT=a("li"),J2e=a("strong"),fnr=o("xlm-roberta-xl"),mnr=o(" \u2014 "),hW=a("a"),gnr=o("XLMRobertaXLForQuestionAnswering"),hnr=o(" (XLM-RoBERTa-XL model)"),pnr=l(),cT=a("li"),Y2e=a("strong"),_nr=o("xlnet"),unr=o(" \u2014 "),pW=a("a"),bnr=o("XLNetForQuestionAnsweringSimple"),vnr=o(" (XLNet model)"),Fnr=l(),fT=a("li"),K2e=a("strong"),Tnr=o("yoso"),Mnr=o(" \u2014 "),_W=a("a"),Enr=o("YosoForQuestionAnswering"),Cnr=o(" (YOSO model)"),wnr=l(),mT=a("p"),Anr=o("The model is set in evaluation mode by default using "),Z2e=a("code"),Lnr=o("model.eval()"),ynr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=a("code"),xnr=o("model.train()"),$nr=l(),F(gT.$$.fragment),WXe=l(),bd=a("h2"),hT=a("a"),obe=a("span"),F($y.$$.fragment),knr=l(),rbe=a("span"),Snr=o("AutoModelForTableQuestionAnswering"),HXe=l(),Go=a("div"),F(ky.$$.fragment),Rnr=l(),vd=a("p"),Pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=a("a"),Bnr=o("from_pretrained()"),Nnr=o(" class method or the "),bW=a("a"),Inr=o("from_config()"),qnr=o(` class
method.`),jnr=l(),Sy=a("p"),Dnr=o("This class cannot be instantiated directly using "),tbe=a("code"),Gnr=o("__init__()"),Onr=o(" (throws an error)."),Vnr=l(),bt=a("div"),F(Ry.$$.fragment),Xnr=l(),abe=a("p"),znr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qnr=l(),Fd=a("p"),Wnr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Hnr=o("not"),Unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" to load the model weights."),Knr=l(),F(pT.$$.fragment),Znr=l(),lo=a("div"),F(Py.$$.fragment),esr=l(),sbe=a("p"),osr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rsr=l(),Qa=a("p"),tsr=o("The model class to instantiate is selected based on the "),lbe=a("code"),asr=o("model_type"),nsr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),ssr=o("pretrained_model_name_or_path"),lsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(":"),csr=l(),cbe=a("ul"),_T=a("li"),fbe=a("strong"),fsr=o("tapas"),msr=o(" \u2014 "),FW=a("a"),gsr=o("TapasForQuestionAnswering"),hsr=o(" (TAPAS model)"),psr=l(),uT=a("p"),_sr=o("The model is set in evaluation mode by default using "),mbe=a("code"),usr=o("model.eval()"),bsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=a("code"),vsr=o("model.train()"),Fsr=l(),F(bT.$$.fragment),UXe=l(),Td=a("h2"),vT=a("a"),hbe=a("span"),F(By.$$.fragment),Tsr=l(),pbe=a("span"),Msr=o("AutoModelForImageClassification"),JXe=l(),Oo=a("div"),F(Ny.$$.fragment),Esr=l(),Md=a("p"),Csr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TW=a("a"),wsr=o("from_pretrained()"),Asr=o(" class method or the "),MW=a("a"),Lsr=o("from_config()"),ysr=o(` class
method.`),xsr=l(),Iy=a("p"),$sr=o("This class cannot be instantiated directly using "),_be=a("code"),ksr=o("__init__()"),Ssr=o(" (throws an error)."),Rsr=l(),vt=a("div"),F(qy.$$.fragment),Psr=l(),ube=a("p"),Bsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nsr=l(),Ed=a("p"),Isr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),qsr=o("not"),jsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Dsr=o("from_pretrained()"),Gsr=o(" to load the model weights."),Osr=l(),F(FT.$$.fragment),Vsr=l(),io=a("div"),F(jy.$$.fragment),Xsr=l(),vbe=a("p"),zsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qsr=l(),Wa=a("p"),Wsr=o("The model class to instantiate is selected based on the "),Fbe=a("code"),Hsr=o("model_type"),Usr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),Jsr=o("pretrained_model_name_or_path"),Ysr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),Ksr=o("pretrained_model_name_or_path"),Zsr=o(":"),elr=l(),ve=a("ul"),TT=a("li"),Ebe=a("strong"),olr=o("beit"),rlr=o(" \u2014 "),CW=a("a"),tlr=o("BeitForImageClassification"),alr=o(" (BEiT model)"),nlr=l(),MT=a("li"),Cbe=a("strong"),slr=o("convnext"),llr=o(" \u2014 "),wW=a("a"),ilr=o("ConvNextForImageClassification"),dlr=o(" (ConvNeXT model)"),clr=l(),ET=a("li"),wbe=a("strong"),flr=o("cvt"),mlr=o(" \u2014 "),AW=a("a"),glr=o("CvtForImageClassification"),hlr=o(" (CvT model)"),plr=l(),CT=a("li"),Abe=a("strong"),_lr=o("data2vec-vision"),ulr=o(" \u2014 "),LW=a("a"),blr=o("Data2VecVisionForImageClassification"),vlr=o(" (Data2VecVision model)"),Flr=l(),Us=a("li"),Lbe=a("strong"),Tlr=o("deit"),Mlr=o(" \u2014 "),yW=a("a"),Elr=o("DeiTForImageClassification"),Clr=o(" or "),xW=a("a"),wlr=o("DeiTForImageClassificationWithTeacher"),Alr=o(" (DeiT model)"),Llr=l(),wT=a("li"),ybe=a("strong"),ylr=o("imagegpt"),xlr=o(" \u2014 "),$W=a("a"),$lr=o("ImageGPTForImageClassification"),klr=o(" (ImageGPT model)"),Slr=l(),Js=a("li"),xbe=a("strong"),Rlr=o("levit"),Plr=o(" \u2014 "),kW=a("a"),Blr=o("LevitForImageClassification"),Nlr=o(" or "),SW=a("a"),Ilr=o("LevitForImageClassificationWithTeacher"),qlr=o(" (LeViT model)"),jlr=l(),AT=a("li"),$be=a("strong"),Dlr=o("mobilevit"),Glr=o(" \u2014 "),RW=a("a"),Olr=o("MobileViTForImageClassification"),Vlr=o(" (MobileViT model)"),Xlr=l(),Ft=a("li"),kbe=a("strong"),zlr=o("perceiver"),Qlr=o(" \u2014 "),PW=a("a"),Wlr=o("PerceiverForImageClassificationLearned"),Hlr=o(" or "),BW=a("a"),Ulr=o("PerceiverForImageClassificationFourier"),Jlr=o(" or "),NW=a("a"),Ylr=o("PerceiverForImageClassificationConvProcessing"),Klr=o(" (Perceiver model)"),Zlr=l(),LT=a("li"),Sbe=a("strong"),eir=o("poolformer"),oir=o(" \u2014 "),IW=a("a"),rir=o("PoolFormerForImageClassification"),tir=o(" (PoolFormer model)"),air=l(),yT=a("li"),Rbe=a("strong"),nir=o("regnet"),sir=o(" \u2014 "),qW=a("a"),lir=o("RegNetForImageClassification"),iir=o(" (RegNet model)"),dir=l(),xT=a("li"),Pbe=a("strong"),cir=o("resnet"),fir=o(" \u2014 "),jW=a("a"),mir=o("ResNetForImageClassification"),gir=o(" (ResNet model)"),hir=l(),$T=a("li"),Bbe=a("strong"),pir=o("segformer"),_ir=o(" \u2014 "),DW=a("a"),uir=o("SegformerForImageClassification"),bir=o(" (SegFormer model)"),vir=l(),kT=a("li"),Nbe=a("strong"),Fir=o("swin"),Tir=o(" \u2014 "),GW=a("a"),Mir=o("SwinForImageClassification"),Eir=o(" (Swin Transformer model)"),Cir=l(),ST=a("li"),Ibe=a("strong"),wir=o("van"),Air=o(" \u2014 "),OW=a("a"),Lir=o("VanForImageClassification"),yir=o(" (VAN model)"),xir=l(),RT=a("li"),qbe=a("strong"),$ir=o("vit"),kir=o(" \u2014 "),VW=a("a"),Sir=o("ViTForImageClassification"),Rir=o(" (ViT model)"),Pir=l(),PT=a("p"),Bir=o("The model is set in evaluation mode by default using "),jbe=a("code"),Nir=o("model.eval()"),Iir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),qir=o("model.train()"),jir=l(),F(BT.$$.fragment),YXe=l(),Cd=a("h2"),NT=a("a"),Gbe=a("span"),F(Dy.$$.fragment),Dir=l(),Obe=a("span"),Gir=o("AutoModelForVision2Seq"),KXe=l(),Vo=a("div"),F(Gy.$$.fragment),Oir=l(),wd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XW=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),zW=a("a"),Qir=o("from_config()"),Wir=o(` class
method.`),Hir=l(),Oy=a("p"),Uir=o("This class cannot be instantiated directly using "),Vbe=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),Tt=a("div"),F(Vy.$$.fragment),Zir=l(),Xbe=a("p"),edr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),odr=l(),Ad=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(IT.$$.fragment),idr=l(),co=a("div"),F(Xy.$$.fragment),ddr=l(),Qbe=a("p"),cdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fdr=l(),Ha=a("p"),mdr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),Jbe=a("ul"),qT=a("li"),Ybe=a("strong"),Fdr=o("vision-encoder-decoder"),Tdr=o(" \u2014 "),WW=a("a"),Mdr=o("VisionEncoderDecoderModel"),Edr=o(" (Vision Encoder decoder model)"),Cdr=l(),jT=a("p"),wdr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),Adr=o("model.eval()"),Ldr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),ydr=o("model.train()"),xdr=l(),F(DT.$$.fragment),ZXe=l(),Ld=a("h2"),GT=a("a"),e3e=a("span"),F(zy.$$.fragment),$dr=l(),o3e=a("span"),kdr=o("AutoModelForVisualQuestionAnswering"),eze=l(),Xo=a("div"),F(Qy.$$.fragment),Sdr=l(),yd=a("p"),Rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),HW=a("a"),Pdr=o("from_pretrained()"),Bdr=o(" class method or the "),UW=a("a"),Ndr=o("from_config()"),Idr=o(` class
method.`),qdr=l(),Wy=a("p"),jdr=o("This class cannot be instantiated directly using "),r3e=a("code"),Ddr=o("__init__()"),Gdr=o(" (throws an error)."),Odr=l(),Mt=a("div"),F(Hy.$$.fragment),Vdr=l(),t3e=a("p"),Xdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),zdr=l(),xd=a("p"),Qdr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),Wdr=o("not"),Hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Udr=o("from_pretrained()"),Jdr=o(" to load the model weights."),Ydr=l(),F(OT.$$.fragment),Kdr=l(),fo=a("div"),F(Uy.$$.fragment),Zdr=l(),n3e=a("p"),ecr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ocr=l(),Ua=a("p"),rcr=o("The model class to instantiate is selected based on the "),s3e=a("code"),tcr=o("model_type"),acr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(":"),dcr=l(),d3e=a("ul"),VT=a("li"),c3e=a("strong"),ccr=o("vilt"),fcr=o(" \u2014 "),YW=a("a"),mcr=o("ViltForQuestionAnswering"),gcr=o(" (ViLT model)"),hcr=l(),XT=a("p"),pcr=o("The model is set in evaluation mode by default using "),f3e=a("code"),_cr=o("model.eval()"),ucr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m3e=a("code"),bcr=o("model.train()"),vcr=l(),F(zT.$$.fragment),oze=l(),$d=a("h2"),QT=a("a"),g3e=a("span"),F(Jy.$$.fragment),Fcr=l(),h3e=a("span"),Tcr=o("AutoModelForAudioClassification"),rze=l(),zo=a("div"),F(Yy.$$.fragment),Mcr=l(),kd=a("p"),Ecr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KW=a("a"),Ccr=o("from_pretrained()"),wcr=o(" class method or the "),ZW=a("a"),Acr=o("from_config()"),Lcr=o(` class
method.`),ycr=l(),Ky=a("p"),xcr=o("This class cannot be instantiated directly using "),p3e=a("code"),$cr=o("__init__()"),kcr=o(" (throws an error)."),Scr=l(),Et=a("div"),F(Zy.$$.fragment),Rcr=l(),_3e=a("p"),Pcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bcr=l(),Sd=a("p"),Ncr=o(`Note:
Loading a model from its configuration file does `),u3e=a("strong"),Icr=o("not"),qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),jcr=o("from_pretrained()"),Dcr=o(" to load the model weights."),Gcr=l(),F(WT.$$.fragment),Ocr=l(),mo=a("div"),F(e9.$$.fragment),Vcr=l(),b3e=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zcr=l(),Ja=a("p"),Qcr=o("The model class to instantiate is selected based on the "),v3e=a("code"),Wcr=o("model_type"),Hcr=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(":"),Zcr=l(),Pe=a("ul"),HT=a("li"),M3e=a("strong"),efr=o("data2vec-audio"),ofr=o(" \u2014 "),oH=a("a"),rfr=o("Data2VecAudioForSequenceClassification"),tfr=o(" (Data2VecAudio model)"),afr=l(),UT=a("li"),E3e=a("strong"),nfr=o("hubert"),sfr=o(" \u2014 "),rH=a("a"),lfr=o("HubertForSequenceClassification"),ifr=o(" (Hubert model)"),dfr=l(),JT=a("li"),C3e=a("strong"),cfr=o("sew"),ffr=o(" \u2014 "),tH=a("a"),mfr=o("SEWForSequenceClassification"),gfr=o(" (SEW model)"),hfr=l(),YT=a("li"),w3e=a("strong"),pfr=o("sew-d"),_fr=o(" \u2014 "),aH=a("a"),ufr=o("SEWDForSequenceClassification"),bfr=o(" (SEW-D model)"),vfr=l(),KT=a("li"),A3e=a("strong"),Ffr=o("unispeech"),Tfr=o(" \u2014 "),nH=a("a"),Mfr=o("UniSpeechForSequenceClassification"),Efr=o(" (UniSpeech model)"),Cfr=l(),ZT=a("li"),L3e=a("strong"),wfr=o("unispeech-sat"),Afr=o(" \u2014 "),sH=a("a"),Lfr=o("UniSpeechSatForSequenceClassification"),yfr=o(" (UniSpeechSat model)"),xfr=l(),e8=a("li"),y3e=a("strong"),$fr=o("wav2vec2"),kfr=o(" \u2014 "),lH=a("a"),Sfr=o("Wav2Vec2ForSequenceClassification"),Rfr=o(" (Wav2Vec2 model)"),Pfr=l(),o8=a("li"),x3e=a("strong"),Bfr=o("wav2vec2-conformer"),Nfr=o(" \u2014 "),iH=a("a"),Ifr=o("Wav2Vec2ConformerForSequenceClassification"),qfr=o(" (Wav2Vec2-Conformer model)"),jfr=l(),r8=a("li"),$3e=a("strong"),Dfr=o("wavlm"),Gfr=o(" \u2014 "),dH=a("a"),Ofr=o("WavLMForSequenceClassification"),Vfr=o(" (WavLM model)"),Xfr=l(),t8=a("p"),zfr=o("The model is set in evaluation mode by default using "),k3e=a("code"),Qfr=o("model.eval()"),Wfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S3e=a("code"),Hfr=o("model.train()"),Ufr=l(),F(a8.$$.fragment),tze=l(),Rd=a("h2"),n8=a("a"),R3e=a("span"),F(o9.$$.fragment),Jfr=l(),P3e=a("span"),Yfr=o("AutoModelForAudioFrameClassification"),aze=l(),Qo=a("div"),F(r9.$$.fragment),Kfr=l(),Pd=a("p"),Zfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cH=a("a"),emr=o("from_pretrained()"),omr=o(" class method or the "),fH=a("a"),rmr=o("from_config()"),tmr=o(` class
method.`),amr=l(),t9=a("p"),nmr=o("This class cannot be instantiated directly using "),B3e=a("code"),smr=o("__init__()"),lmr=o(" (throws an error)."),imr=l(),Ct=a("div"),F(a9.$$.fragment),dmr=l(),N3e=a("p"),cmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fmr=l(),Bd=a("p"),mmr=o(`Note:
Loading a model from its configuration file does `),I3e=a("strong"),gmr=o("not"),hmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),pmr=o("from_pretrained()"),_mr=o(" to load the model weights."),umr=l(),F(s8.$$.fragment),bmr=l(),go=a("div"),F(n9.$$.fragment),vmr=l(),q3e=a("p"),Fmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Tmr=l(),Ya=a("p"),Mmr=o("The model class to instantiate is selected based on the "),j3e=a("code"),Emr=o("model_type"),Cmr=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),wmr=o("pretrained_model_name_or_path"),Amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),Lmr=o("pretrained_model_name_or_path"),ymr=o(":"),xmr=l(),rt=a("ul"),l8=a("li"),O3e=a("strong"),$mr=o("data2vec-audio"),kmr=o(" \u2014 "),gH=a("a"),Smr=o("Data2VecAudioForAudioFrameClassification"),Rmr=o(" (Data2VecAudio model)"),Pmr=l(),i8=a("li"),V3e=a("strong"),Bmr=o("unispeech-sat"),Nmr=o(" \u2014 "),hH=a("a"),Imr=o("UniSpeechSatForAudioFrameClassification"),qmr=o(" (UniSpeechSat model)"),jmr=l(),d8=a("li"),X3e=a("strong"),Dmr=o("wav2vec2"),Gmr=o(" \u2014 "),pH=a("a"),Omr=o("Wav2Vec2ForAudioFrameClassification"),Vmr=o(" (Wav2Vec2 model)"),Xmr=l(),c8=a("li"),z3e=a("strong"),zmr=o("wav2vec2-conformer"),Qmr=o(" \u2014 "),_H=a("a"),Wmr=o("Wav2Vec2ConformerForAudioFrameClassification"),Hmr=o(" (Wav2Vec2-Conformer model)"),Umr=l(),f8=a("li"),Q3e=a("strong"),Jmr=o("wavlm"),Ymr=o(" \u2014 "),uH=a("a"),Kmr=o("WavLMForAudioFrameClassification"),Zmr=o(" (WavLM model)"),egr=l(),m8=a("p"),ogr=o("The model is set in evaluation mode by default using "),W3e=a("code"),rgr=o("model.eval()"),tgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H3e=a("code"),agr=o("model.train()"),ngr=l(),F(g8.$$.fragment),nze=l(),Nd=a("h2"),h8=a("a"),U3e=a("span"),F(s9.$$.fragment),sgr=l(),J3e=a("span"),lgr=o("AutoModelForCTC"),sze=l(),Wo=a("div"),F(l9.$$.fragment),igr=l(),Id=a("p"),dgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bH=a("a"),cgr=o("from_pretrained()"),fgr=o(" class method or the "),vH=a("a"),mgr=o("from_config()"),ggr=o(` class
method.`),hgr=l(),i9=a("p"),pgr=o("This class cannot be instantiated directly using "),Y3e=a("code"),_gr=o("__init__()"),ugr=o(" (throws an error)."),bgr=l(),wt=a("div"),F(d9.$$.fragment),vgr=l(),K3e=a("p"),Fgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tgr=l(),qd=a("p"),Mgr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),Egr=o("not"),Cgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),wgr=o("from_pretrained()"),Agr=o(" to load the model weights."),Lgr=l(),F(p8.$$.fragment),ygr=l(),ho=a("div"),F(c9.$$.fragment),xgr=l(),eve=a("p"),$gr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kgr=l(),Ka=a("p"),Sgr=o("The model class to instantiate is selected based on the "),ove=a("code"),Rgr=o("model_type"),Pgr=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),Bgr=o("pretrained_model_name_or_path"),Ngr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),Igr=o("pretrained_model_name_or_path"),qgr=o(":"),jgr=l(),Le=a("ul"),_8=a("li"),ave=a("strong"),Dgr=o("data2vec-audio"),Ggr=o(" \u2014 "),TH=a("a"),Ogr=o("Data2VecAudioForCTC"),Vgr=o(" (Data2VecAudio model)"),Xgr=l(),u8=a("li"),nve=a("strong"),zgr=o("hubert"),Qgr=o(" \u2014 "),MH=a("a"),Wgr=o("HubertForCTC"),Hgr=o(" (Hubert model)"),Ugr=l(),b8=a("li"),sve=a("strong"),Jgr=o("mctct"),Ygr=o(" \u2014 "),EH=a("a"),Kgr=o("MCTCTForCTC"),Zgr=o(" (M-CTC-T model)"),ehr=l(),v8=a("li"),lve=a("strong"),ohr=o("sew"),rhr=o(" \u2014 "),CH=a("a"),thr=o("SEWForCTC"),ahr=o(" (SEW model)"),nhr=l(),F8=a("li"),ive=a("strong"),shr=o("sew-d"),lhr=o(" \u2014 "),wH=a("a"),ihr=o("SEWDForCTC"),dhr=o(" (SEW-D model)"),chr=l(),T8=a("li"),dve=a("strong"),fhr=o("unispeech"),mhr=o(" \u2014 "),AH=a("a"),ghr=o("UniSpeechForCTC"),hhr=o(" (UniSpeech model)"),phr=l(),M8=a("li"),cve=a("strong"),_hr=o("unispeech-sat"),uhr=o(" \u2014 "),LH=a("a"),bhr=o("UniSpeechSatForCTC"),vhr=o(" (UniSpeechSat model)"),Fhr=l(),E8=a("li"),fve=a("strong"),Thr=o("wav2vec2"),Mhr=o(" \u2014 "),yH=a("a"),Ehr=o("Wav2Vec2ForCTC"),Chr=o(" (Wav2Vec2 model)"),whr=l(),C8=a("li"),mve=a("strong"),Ahr=o("wav2vec2-conformer"),Lhr=o(" \u2014 "),xH=a("a"),yhr=o("Wav2Vec2ConformerForCTC"),xhr=o(" (Wav2Vec2-Conformer model)"),$hr=l(),w8=a("li"),gve=a("strong"),khr=o("wavlm"),Shr=o(" \u2014 "),$H=a("a"),Rhr=o("WavLMForCTC"),Phr=o(" (WavLM model)"),Bhr=l(),A8=a("p"),Nhr=o("The model is set in evaluation mode by default using "),hve=a("code"),Ihr=o("model.eval()"),qhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=a("code"),jhr=o("model.train()"),Dhr=l(),F(L8.$$.fragment),lze=l(),jd=a("h2"),y8=a("a"),_ve=a("span"),F(f9.$$.fragment),Ghr=l(),uve=a("span"),Ohr=o("AutoModelForSpeechSeq2Seq"),ize=l(),Ho=a("div"),F(m9.$$.fragment),Vhr=l(),Dd=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kH=a("a"),zhr=o("from_pretrained()"),Qhr=o(" class method or the "),SH=a("a"),Whr=o("from_config()"),Hhr=o(` class
method.`),Uhr=l(),g9=a("p"),Jhr=o("This class cannot be instantiated directly using "),bve=a("code"),Yhr=o("__init__()"),Khr=o(" (throws an error)."),Zhr=l(),At=a("div"),F(h9.$$.fragment),epr=l(),vve=a("p"),opr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rpr=l(),Gd=a("p"),tpr=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),apr=o("not"),npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),spr=o("from_pretrained()"),lpr=o(" to load the model weights."),ipr=l(),F(x8.$$.fragment),dpr=l(),po=a("div"),F(p9.$$.fragment),cpr=l(),Tve=a("p"),fpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mpr=l(),Za=a("p"),gpr=o("The model class to instantiate is selected based on the "),Mve=a("code"),hpr=o("model_type"),ppr=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),_pr=o("pretrained_model_name_or_path"),upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),bpr=o("pretrained_model_name_or_path"),vpr=o(":"),Fpr=l(),_9=a("ul"),$8=a("li"),wve=a("strong"),Tpr=o("speech-encoder-decoder"),Mpr=o(" \u2014 "),PH=a("a"),Epr=o("SpeechEncoderDecoderModel"),Cpr=o(" (Speech Encoder decoder model)"),wpr=l(),k8=a("li"),Ave=a("strong"),Apr=o("speech_to_text"),Lpr=o(" \u2014 "),BH=a("a"),ypr=o("Speech2TextForConditionalGeneration"),xpr=o(" (Speech2Text model)"),$pr=l(),S8=a("p"),kpr=o("The model is set in evaluation mode by default using "),Lve=a("code"),Spr=o("model.eval()"),Rpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=a("code"),Ppr=o("model.train()"),Bpr=l(),F(R8.$$.fragment),dze=l(),Od=a("h2"),P8=a("a"),xve=a("span"),F(u9.$$.fragment),Npr=l(),$ve=a("span"),Ipr=o("AutoModelForAudioXVector"),cze=l(),Uo=a("div"),F(b9.$$.fragment),qpr=l(),Vd=a("p"),jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NH=a("a"),Dpr=o("from_pretrained()"),Gpr=o(" class method or the "),IH=a("a"),Opr=o("from_config()"),Vpr=o(` class
method.`),Xpr=l(),v9=a("p"),zpr=o("This class cannot be instantiated directly using "),kve=a("code"),Qpr=o("__init__()"),Wpr=o(" (throws an error)."),Hpr=l(),Lt=a("div"),F(F9.$$.fragment),Upr=l(),Sve=a("p"),Jpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ypr=l(),Xd=a("p"),Kpr=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),Zpr=o("not"),e_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),o_r=o("from_pretrained()"),r_r=o(" to load the model weights."),t_r=l(),F(B8.$$.fragment),a_r=l(),_o=a("div"),F(T9.$$.fragment),n_r=l(),Pve=a("p"),s_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),l_r=l(),en=a("p"),i_r=o("The model class to instantiate is selected based on the "),Bve=a("code"),d_r=o("model_type"),c_r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),f_r=o("pretrained_model_name_or_path"),m_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(":"),p_r=l(),tt=a("ul"),N8=a("li"),qve=a("strong"),__r=o("data2vec-audio"),u_r=o(" \u2014 "),jH=a("a"),b_r=o("Data2VecAudioForXVector"),v_r=o(" (Data2VecAudio model)"),F_r=l(),I8=a("li"),jve=a("strong"),T_r=o("unispeech-sat"),M_r=o(" \u2014 "),DH=a("a"),E_r=o("UniSpeechSatForXVector"),C_r=o(" (UniSpeechSat model)"),w_r=l(),q8=a("li"),Dve=a("strong"),A_r=o("wav2vec2"),L_r=o(" \u2014 "),GH=a("a"),y_r=o("Wav2Vec2ForXVector"),x_r=o(" (Wav2Vec2 model)"),$_r=l(),j8=a("li"),Gve=a("strong"),k_r=o("wav2vec2-conformer"),S_r=o(" \u2014 "),OH=a("a"),R_r=o("Wav2Vec2ConformerForXVector"),P_r=o(" (Wav2Vec2-Conformer model)"),B_r=l(),D8=a("li"),Ove=a("strong"),N_r=o("wavlm"),I_r=o(" \u2014 "),VH=a("a"),q_r=o("WavLMForXVector"),j_r=o(" (WavLM model)"),D_r=l(),G8=a("p"),G_r=o("The model is set in evaluation mode by default using "),Vve=a("code"),O_r=o("model.eval()"),V_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xve=a("code"),X_r=o("model.train()"),z_r=l(),F(O8.$$.fragment),fze=l(),zd=a("h2"),V8=a("a"),zve=a("span"),F(M9.$$.fragment),Q_r=l(),Qve=a("span"),W_r=o("AutoModelForMaskedImageModeling"),mze=l(),Jo=a("div"),F(E9.$$.fragment),H_r=l(),Qd=a("p"),U_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XH=a("a"),J_r=o("from_pretrained()"),Y_r=o(" class method or the "),zH=a("a"),K_r=o("from_config()"),Z_r=o(` class
method.`),eur=l(),C9=a("p"),our=o("This class cannot be instantiated directly using "),Wve=a("code"),rur=o("__init__()"),tur=o(" (throws an error)."),aur=l(),yt=a("div"),F(w9.$$.fragment),nur=l(),Hve=a("p"),sur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lur=l(),Wd=a("p"),iur=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),dur=o("not"),cur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),fur=o("from_pretrained()"),mur=o(" to load the model weights."),gur=l(),F(X8.$$.fragment),hur=l(),uo=a("div"),F(A9.$$.fragment),pur=l(),Jve=a("p"),_ur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uur=l(),on=a("p"),bur=o("The model class to instantiate is selected based on the "),Yve=a("code"),vur=o("model_type"),Fur=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),Tur=o("pretrained_model_name_or_path"),Mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),Eur=o("pretrained_model_name_or_path"),Cur=o(":"),wur=l(),Hd=a("ul"),z8=a("li"),eFe=a("strong"),Aur=o("deit"),Lur=o(" \u2014 "),WH=a("a"),yur=o("DeiTForMaskedImageModeling"),xur=o(" (DeiT model)"),$ur=l(),Q8=a("li"),oFe=a("strong"),kur=o("swin"),Sur=o(" \u2014 "),HH=a("a"),Rur=o("SwinForMaskedImageModeling"),Pur=o(" (Swin Transformer model)"),Bur=l(),W8=a("li"),rFe=a("strong"),Nur=o("vit"),Iur=o(" \u2014 "),UH=a("a"),qur=o("ViTForMaskedImageModeling"),jur=o(" (ViT model)"),Dur=l(),H8=a("p"),Gur=o("The model is set in evaluation mode by default using "),tFe=a("code"),Our=o("model.eval()"),Vur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=a("code"),Xur=o("model.train()"),zur=l(),F(U8.$$.fragment),gze=l(),Ud=a("h2"),J8=a("a"),nFe=a("span"),F(L9.$$.fragment),Qur=l(),sFe=a("span"),Wur=o("AutoModelForObjectDetection"),hze=l(),Yo=a("div"),F(y9.$$.fragment),Hur=l(),Jd=a("p"),Uur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JH=a("a"),Jur=o("from_pretrained()"),Yur=o(" class method or the "),YH=a("a"),Kur=o("from_config()"),Zur=o(` class
method.`),e1r=l(),x9=a("p"),o1r=o("This class cannot be instantiated directly using "),lFe=a("code"),r1r=o("__init__()"),t1r=o(" (throws an error)."),a1r=l(),xt=a("div"),F($9.$$.fragment),n1r=l(),iFe=a("p"),s1r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),l1r=l(),Yd=a("p"),i1r=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),d1r=o("not"),c1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),f1r=o("from_pretrained()"),m1r=o(" to load the model weights."),g1r=l(),F(Y8.$$.fragment),h1r=l(),bo=a("div"),F(k9.$$.fragment),p1r=l(),cFe=a("p"),_1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),u1r=l(),rn=a("p"),b1r=o("The model class to instantiate is selected based on the "),fFe=a("code"),v1r=o("model_type"),F1r=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(":"),w1r=l(),S9=a("ul"),K8=a("li"),hFe=a("strong"),A1r=o("detr"),L1r=o(" \u2014 "),ZH=a("a"),y1r=o("DetrForObjectDetection"),x1r=o(" (DETR model)"),$1r=l(),Z8=a("li"),pFe=a("strong"),k1r=o("yolos"),S1r=o(" \u2014 "),eU=a("a"),R1r=o("YolosForObjectDetection"),P1r=o(" (YOLOS model)"),B1r=l(),eM=a("p"),N1r=o("The model is set in evaluation mode by default using "),_Fe=a("code"),I1r=o("model.eval()"),q1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=a("code"),j1r=o("model.train()"),D1r=l(),F(oM.$$.fragment),pze=l(),Kd=a("h2"),rM=a("a"),bFe=a("span"),F(R9.$$.fragment),G1r=l(),vFe=a("span"),O1r=o("AutoModelForImageSegmentation"),_ze=l(),Ko=a("div"),F(P9.$$.fragment),V1r=l(),Zd=a("p"),X1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oU=a("a"),z1r=o("from_pretrained()"),Q1r=o(" class method or the "),rU=a("a"),W1r=o("from_config()"),H1r=o(` class
method.`),U1r=l(),B9=a("p"),J1r=o("This class cannot be instantiated directly using "),FFe=a("code"),Y1r=o("__init__()"),K1r=o(" (throws an error)."),Z1r=l(),$t=a("div"),F(N9.$$.fragment),e2r=l(),TFe=a("p"),o2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),r2r=l(),ec=a("p"),t2r=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),a2r=o("not"),n2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),s2r=o("from_pretrained()"),l2r=o(" to load the model weights."),i2r=l(),F(tM.$$.fragment),d2r=l(),vo=a("div"),F(I9.$$.fragment),c2r=l(),EFe=a("p"),f2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),m2r=l(),tn=a("p"),g2r=o("The model class to instantiate is selected based on the "),CFe=a("code"),h2r=o("model_type"),p2r=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),_2r=o("pretrained_model_name_or_path"),u2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),b2r=o("pretrained_model_name_or_path"),v2r=o(":"),F2r=l(),LFe=a("ul"),aM=a("li"),yFe=a("strong"),T2r=o("detr"),M2r=o(" \u2014 "),aU=a("a"),E2r=o("DetrForSegmentation"),C2r=o(" (DETR model)"),w2r=l(),nM=a("p"),A2r=o("The model is set in evaluation mode by default using "),xFe=a("code"),L2r=o("model.eval()"),y2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=a("code"),x2r=o("model.train()"),$2r=l(),F(sM.$$.fragment),uze=l(),oc=a("h2"),lM=a("a"),kFe=a("span"),F(q9.$$.fragment),k2r=l(),SFe=a("span"),S2r=o("AutoModelForSemanticSegmentation"),bze=l(),Zo=a("div"),F(j9.$$.fragment),R2r=l(),rc=a("p"),P2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nU=a("a"),B2r=o("from_pretrained()"),N2r=o(" class method or the "),sU=a("a"),I2r=o("from_config()"),q2r=o(` class
method.`),j2r=l(),D9=a("p"),D2r=o("This class cannot be instantiated directly using "),RFe=a("code"),G2r=o("__init__()"),O2r=o(" (throws an error)."),V2r=l(),kt=a("div"),F(G9.$$.fragment),X2r=l(),PFe=a("p"),z2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Q2r=l(),tc=a("p"),W2r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),H2r=o("not"),U2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),J2r=o("from_pretrained()"),Y2r=o(" to load the model weights."),K2r=l(),F(iM.$$.fragment),Z2r=l(),Fo=a("div"),F(O9.$$.fragment),ebr=l(),NFe=a("p"),obr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rbr=l(),an=a("p"),tbr=o("The model class to instantiate is selected based on the "),IFe=a("code"),abr=o("model_type"),nbr=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),sbr=o("pretrained_model_name_or_path"),lbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),ibr=o("pretrained_model_name_or_path"),dbr=o(":"),cbr=l(),at=a("ul"),dM=a("li"),DFe=a("strong"),fbr=o("beit"),mbr=o(" \u2014 "),iU=a("a"),gbr=o("BeitForSemanticSegmentation"),hbr=o(" (BEiT model)"),pbr=l(),cM=a("li"),GFe=a("strong"),_br=o("data2vec-vision"),ubr=o(" \u2014 "),dU=a("a"),bbr=o("Data2VecVisionForSemanticSegmentation"),vbr=o(" (Data2VecVision model)"),Fbr=l(),fM=a("li"),OFe=a("strong"),Tbr=o("dpt"),Mbr=o(" \u2014 "),cU=a("a"),Ebr=o("DPTForSemanticSegmentation"),Cbr=o(" (DPT model)"),wbr=l(),mM=a("li"),VFe=a("strong"),Abr=o("mobilevit"),Lbr=o(" \u2014 "),fU=a("a"),ybr=o("MobileViTForSemanticSegmentation"),xbr=o(" (MobileViT model)"),$br=l(),gM=a("li"),XFe=a("strong"),kbr=o("segformer"),Sbr=o(" \u2014 "),mU=a("a"),Rbr=o("SegformerForSemanticSegmentation"),Pbr=o(" (SegFormer model)"),Bbr=l(),hM=a("p"),Nbr=o("The model is set in evaluation mode by default using "),zFe=a("code"),Ibr=o("model.eval()"),qbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=a("code"),jbr=o("model.train()"),Dbr=l(),F(pM.$$.fragment),vze=l(),ac=a("h2"),_M=a("a"),WFe=a("span"),F(V9.$$.fragment),Gbr=l(),HFe=a("span"),Obr=o("AutoModelForInstanceSegmentation"),Fze=l(),er=a("div"),F(X9.$$.fragment),Vbr=l(),nc=a("p"),Xbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gU=a("a"),zbr=o("from_pretrained()"),Qbr=o(" class method or the "),hU=a("a"),Wbr=o("from_config()"),Hbr=o(` class
method.`),Ubr=l(),z9=a("p"),Jbr=o("This class cannot be instantiated directly using "),UFe=a("code"),Ybr=o("__init__()"),Kbr=o(" (throws an error)."),Zbr=l(),St=a("div"),F(Q9.$$.fragment),e3r=l(),JFe=a("p"),o3r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),r3r=l(),sc=a("p"),t3r=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),a3r=o("not"),n3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),s3r=o("from_pretrained()"),l3r=o(" to load the model weights."),i3r=l(),F(uM.$$.fragment),d3r=l(),To=a("div"),F(W9.$$.fragment),c3r=l(),KFe=a("p"),f3r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),m3r=l(),nn=a("p"),g3r=o("The model class to instantiate is selected based on the "),ZFe=a("code"),h3r=o("model_type"),p3r=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),_3r=o("pretrained_model_name_or_path"),u3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),b3r=o("pretrained_model_name_or_path"),v3r=o(":"),F3r=l(),rTe=a("ul"),bM=a("li"),tTe=a("strong"),T3r=o("maskformer"),M3r=o(" \u2014 "),_U=a("a"),E3r=o("MaskFormerForInstanceSegmentation"),C3r=o(" (MaskFormer model)"),w3r=l(),vM=a("p"),A3r=o("The model is set in evaluation mode by default using "),aTe=a("code"),L3r=o("model.eval()"),y3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nTe=a("code"),x3r=o("model.train()"),$3r=l(),F(FM.$$.fragment),Tze=l(),lc=a("h2"),TM=a("a"),sTe=a("span"),F(H9.$$.fragment),k3r=l(),lTe=a("span"),S3r=o("TFAutoModel"),Mze=l(),or=a("div"),F(U9.$$.fragment),R3r=l(),ic=a("p"),P3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uU=a("a"),B3r=o("from_pretrained()"),N3r=o(" class method or the "),bU=a("a"),I3r=o("from_config()"),q3r=o(` class
method.`),j3r=l(),J9=a("p"),D3r=o("This class cannot be instantiated directly using "),iTe=a("code"),G3r=o("__init__()"),O3r=o(" (throws an error)."),V3r=l(),Rt=a("div"),F(Y9.$$.fragment),X3r=l(),dTe=a("p"),z3r=o("Instantiates one of the base model classes of the library from a configuration."),Q3r=l(),dc=a("p"),W3r=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),H3r=o("not"),U3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),J3r=o("from_pretrained()"),Y3r=o(" to load the model weights."),K3r=l(),F(MM.$$.fragment),Z3r=l(),xr=a("div"),F(K9.$$.fragment),evr=l(),fTe=a("p"),ovr=o("Instantiate one of the base model classes of the library from a pretrained model."),rvr=l(),sn=a("p"),tvr=o("The model class to instantiate is selected based on the "),mTe=a("code"),avr=o("model_type"),nvr=o(` property of the config object (either
passed as an argument or loaded from `),gTe=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=a("code"),ivr=o("pretrained_model_name_or_path"),dvr=o(":"),cvr=l(),q=a("ul"),EM=a("li"),pTe=a("strong"),fvr=o("albert"),mvr=o(" \u2014 "),FU=a("a"),gvr=o("TFAlbertModel"),hvr=o(" (ALBERT model)"),pvr=l(),CM=a("li"),_Te=a("strong"),_vr=o("bart"),uvr=o(" \u2014 "),TU=a("a"),bvr=o("TFBartModel"),vvr=o(" (BART model)"),Fvr=l(),wM=a("li"),uTe=a("strong"),Tvr=o("bert"),Mvr=o(" \u2014 "),MU=a("a"),Evr=o("TFBertModel"),Cvr=o(" (BERT model)"),wvr=l(),AM=a("li"),bTe=a("strong"),Avr=o("blenderbot"),Lvr=o(" \u2014 "),EU=a("a"),yvr=o("TFBlenderbotModel"),xvr=o(" (Blenderbot model)"),$vr=l(),LM=a("li"),vTe=a("strong"),kvr=o("blenderbot-small"),Svr=o(" \u2014 "),CU=a("a"),Rvr=o("TFBlenderbotSmallModel"),Pvr=o(" (BlenderbotSmall model)"),Bvr=l(),yM=a("li"),FTe=a("strong"),Nvr=o("camembert"),Ivr=o(" \u2014 "),wU=a("a"),qvr=o("TFCamembertModel"),jvr=o(" (CamemBERT model)"),Dvr=l(),xM=a("li"),TTe=a("strong"),Gvr=o("clip"),Ovr=o(" \u2014 "),AU=a("a"),Vvr=o("TFCLIPModel"),Xvr=o(" (CLIP model)"),zvr=l(),$M=a("li"),MTe=a("strong"),Qvr=o("convbert"),Wvr=o(" \u2014 "),LU=a("a"),Hvr=o("TFConvBertModel"),Uvr=o(" (ConvBERT model)"),Jvr=l(),kM=a("li"),ETe=a("strong"),Yvr=o("convnext"),Kvr=o(" \u2014 "),yU=a("a"),Zvr=o("TFConvNextModel"),eFr=o(" (ConvNeXT model)"),oFr=l(),SM=a("li"),CTe=a("strong"),rFr=o("ctrl"),tFr=o(" \u2014 "),xU=a("a"),aFr=o("TFCTRLModel"),nFr=o(" (CTRL model)"),sFr=l(),RM=a("li"),wTe=a("strong"),lFr=o("data2vec-vision"),iFr=o(" \u2014 "),$U=a("a"),dFr=o("TFData2VecVisionModel"),cFr=o(" (Data2VecVision model)"),fFr=l(),PM=a("li"),ATe=a("strong"),mFr=o("deberta"),gFr=o(" \u2014 "),kU=a("a"),hFr=o("TFDebertaModel"),pFr=o(" (DeBERTa model)"),_Fr=l(),BM=a("li"),LTe=a("strong"),uFr=o("deberta-v2"),bFr=o(" \u2014 "),SU=a("a"),vFr=o("TFDebertaV2Model"),FFr=o(" (DeBERTa-v2 model)"),TFr=l(),NM=a("li"),yTe=a("strong"),MFr=o("deit"),EFr=o(" \u2014 "),RU=a("a"),CFr=o("TFDeiTModel"),wFr=o(" (DeiT model)"),AFr=l(),IM=a("li"),xTe=a("strong"),LFr=o("distilbert"),yFr=o(" \u2014 "),PU=a("a"),xFr=o("TFDistilBertModel"),$Fr=o(" (DistilBERT model)"),kFr=l(),qM=a("li"),$Te=a("strong"),SFr=o("dpr"),RFr=o(" \u2014 "),BU=a("a"),PFr=o("TFDPRQuestionEncoder"),BFr=o(" (DPR model)"),NFr=l(),jM=a("li"),kTe=a("strong"),IFr=o("electra"),qFr=o(" \u2014 "),NU=a("a"),jFr=o("TFElectraModel"),DFr=o(" (ELECTRA model)"),GFr=l(),DM=a("li"),STe=a("strong"),OFr=o("flaubert"),VFr=o(" \u2014 "),IU=a("a"),XFr=o("TFFlaubertModel"),zFr=o(" (FlauBERT model)"),QFr=l(),Ys=a("li"),RTe=a("strong"),WFr=o("funnel"),HFr=o(" \u2014 "),qU=a("a"),UFr=o("TFFunnelModel"),JFr=o(" or "),jU=a("a"),YFr=o("TFFunnelBaseModel"),KFr=o(" (Funnel Transformer model)"),ZFr=l(),GM=a("li"),PTe=a("strong"),eTr=o("gpt2"),oTr=o(" \u2014 "),DU=a("a"),rTr=o("TFGPT2Model"),tTr=o(" (OpenAI GPT-2 model)"),aTr=l(),OM=a("li"),BTe=a("strong"),nTr=o("gptj"),sTr=o(" \u2014 "),GU=a("a"),lTr=o("TFGPTJModel"),iTr=o(" (GPT-J model)"),dTr=l(),VM=a("li"),NTe=a("strong"),cTr=o("hubert"),fTr=o(" \u2014 "),OU=a("a"),mTr=o("TFHubertModel"),gTr=o(" (Hubert model)"),hTr=l(),XM=a("li"),ITe=a("strong"),pTr=o("layoutlm"),_Tr=o(" \u2014 "),VU=a("a"),uTr=o("TFLayoutLMModel"),bTr=o(" (LayoutLM model)"),vTr=l(),zM=a("li"),qTe=a("strong"),FTr=o("led"),TTr=o(" \u2014 "),XU=a("a"),MTr=o("TFLEDModel"),ETr=o(" (LED model)"),CTr=l(),QM=a("li"),jTe=a("strong"),wTr=o("longformer"),ATr=o(" \u2014 "),zU=a("a"),LTr=o("TFLongformerModel"),yTr=o(" (Longformer model)"),xTr=l(),WM=a("li"),DTe=a("strong"),$Tr=o("lxmert"),kTr=o(" \u2014 "),QU=a("a"),STr=o("TFLxmertModel"),RTr=o(" (LXMERT model)"),PTr=l(),HM=a("li"),GTe=a("strong"),BTr=o("marian"),NTr=o(" \u2014 "),WU=a("a"),ITr=o("TFMarianModel"),qTr=o(" (Marian model)"),jTr=l(),UM=a("li"),OTe=a("strong"),DTr=o("mbart"),GTr=o(" \u2014 "),HU=a("a"),OTr=o("TFMBartModel"),VTr=o(" (mBART model)"),XTr=l(),JM=a("li"),VTe=a("strong"),zTr=o("mobilebert"),QTr=o(" \u2014 "),UU=a("a"),WTr=o("TFMobileBertModel"),HTr=o(" (MobileBERT model)"),UTr=l(),YM=a("li"),XTe=a("strong"),JTr=o("mpnet"),YTr=o(" \u2014 "),JU=a("a"),KTr=o("TFMPNetModel"),ZTr=o(" (MPNet model)"),e8r=l(),KM=a("li"),zTe=a("strong"),o8r=o("mt5"),r8r=o(" \u2014 "),YU=a("a"),t8r=o("TFMT5Model"),a8r=o(" (MT5 model)"),n8r=l(),ZM=a("li"),QTe=a("strong"),s8r=o("openai-gpt"),l8r=o(" \u2014 "),KU=a("a"),i8r=o("TFOpenAIGPTModel"),d8r=o(" (OpenAI GPT model)"),c8r=l(),e4=a("li"),WTe=a("strong"),f8r=o("opt"),m8r=o(" \u2014 "),ZU=a("a"),g8r=o("TFOPTModel"),h8r=o(" (OPT model)"),p8r=l(),o4=a("li"),HTe=a("strong"),_8r=o("pegasus"),u8r=o(" \u2014 "),eJ=a("a"),b8r=o("TFPegasusModel"),v8r=o(" (Pegasus model)"),F8r=l(),r4=a("li"),UTe=a("strong"),T8r=o("regnet"),M8r=o(" \u2014 "),oJ=a("a"),E8r=o("TFRegNetModel"),C8r=o(" (RegNet model)"),w8r=l(),t4=a("li"),JTe=a("strong"),A8r=o("rembert"),L8r=o(" \u2014 "),rJ=a("a"),y8r=o("TFRemBertModel"),x8r=o(" (RemBERT model)"),$8r=l(),a4=a("li"),YTe=a("strong"),k8r=o("resnet"),S8r=o(" \u2014 "),tJ=a("a"),R8r=o("TFResNetModel"),P8r=o(" (ResNet model)"),B8r=l(),n4=a("li"),KTe=a("strong"),N8r=o("roberta"),I8r=o(" \u2014 "),aJ=a("a"),q8r=o("TFRobertaModel"),j8r=o(" (RoBERTa model)"),D8r=l(),s4=a("li"),ZTe=a("strong"),G8r=o("roformer"),O8r=o(" \u2014 "),nJ=a("a"),V8r=o("TFRoFormerModel"),X8r=o(" (RoFormer model)"),z8r=l(),l4=a("li"),e8e=a("strong"),Q8r=o("speech_to_text"),W8r=o(" \u2014 "),sJ=a("a"),H8r=o("TFSpeech2TextModel"),U8r=o(" (Speech2Text model)"),J8r=l(),i4=a("li"),o8e=a("strong"),Y8r=o("swin"),K8r=o(" \u2014 "),lJ=a("a"),Z8r=o("TFSwinModel"),eMr=o(" (Swin Transformer model)"),oMr=l(),d4=a("li"),r8e=a("strong"),rMr=o("t5"),tMr=o(" \u2014 "),iJ=a("a"),aMr=o("TFT5Model"),nMr=o(" (T5 model)"),sMr=l(),c4=a("li"),t8e=a("strong"),lMr=o("tapas"),iMr=o(" \u2014 "),dJ=a("a"),dMr=o("TFTapasModel"),cMr=o(" (TAPAS model)"),fMr=l(),f4=a("li"),a8e=a("strong"),mMr=o("transfo-xl"),gMr=o(" \u2014 "),cJ=a("a"),hMr=o("TFTransfoXLModel"),pMr=o(" (Transformer-XL model)"),_Mr=l(),m4=a("li"),n8e=a("strong"),uMr=o("vit"),bMr=o(" \u2014 "),fJ=a("a"),vMr=o("TFViTModel"),FMr=o(" (ViT model)"),TMr=l(),g4=a("li"),s8e=a("strong"),MMr=o("vit_mae"),EMr=o(" \u2014 "),mJ=a("a"),CMr=o("TFViTMAEModel"),wMr=o(" (ViTMAE model)"),AMr=l(),h4=a("li"),l8e=a("strong"),LMr=o("wav2vec2"),yMr=o(" \u2014 "),gJ=a("a"),xMr=o("TFWav2Vec2Model"),$Mr=o(" (Wav2Vec2 model)"),kMr=l(),p4=a("li"),i8e=a("strong"),SMr=o("xlm"),RMr=o(" \u2014 "),hJ=a("a"),PMr=o("TFXLMModel"),BMr=o(" (XLM model)"),NMr=l(),_4=a("li"),d8e=a("strong"),IMr=o("xlm-roberta"),qMr=o(" \u2014 "),pJ=a("a"),jMr=o("TFXLMRobertaModel"),DMr=o(" (XLM-RoBERTa model)"),GMr=l(),u4=a("li"),c8e=a("strong"),OMr=o("xlnet"),VMr=o(" \u2014 "),_J=a("a"),XMr=o("TFXLNetModel"),zMr=o(" (XLNet model)"),QMr=l(),F(b4.$$.fragment),Eze=l(),cc=a("h2"),v4=a("a"),f8e=a("span"),F(Z9.$$.fragment),WMr=l(),m8e=a("span"),HMr=o("TFAutoModelForPreTraining"),Cze=l(),rr=a("div"),F(ex.$$.fragment),UMr=l(),fc=a("p"),JMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=a("a"),YMr=o("from_pretrained()"),KMr=o(" class method or the "),bJ=a("a"),ZMr=o("from_config()"),e4r=o(` class
method.`),o4r=l(),ox=a("p"),r4r=o("This class cannot be instantiated directly using "),g8e=a("code"),t4r=o("__init__()"),a4r=o(" (throws an error)."),n4r=l(),Pt=a("div"),F(rx.$$.fragment),s4r=l(),h8e=a("p"),l4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),i4r=l(),mc=a("p"),d4r=o(`Note:
Loading a model from its configuration file does `),p8e=a("strong"),c4r=o("not"),f4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),m4r=o("from_pretrained()"),g4r=o(" to load the model weights."),h4r=l(),F(F4.$$.fragment),p4r=l(),$r=a("div"),F(tx.$$.fragment),_4r=l(),_8e=a("p"),u4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),b4r=l(),ln=a("p"),v4r=o("The model class to instantiate is selected based on the "),u8e=a("code"),F4r=o("model_type"),T4r=o(` property of the config object (either
passed as an argument or loaded from `),b8e=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v8e=a("code"),C4r=o("pretrained_model_name_or_path"),w4r=o(":"),A4r=l(),se=a("ul"),T4=a("li"),F8e=a("strong"),L4r=o("albert"),y4r=o(" \u2014 "),FJ=a("a"),x4r=o("TFAlbertForPreTraining"),$4r=o(" (ALBERT model)"),k4r=l(),M4=a("li"),T8e=a("strong"),S4r=o("bart"),R4r=o(" \u2014 "),TJ=a("a"),P4r=o("TFBartForConditionalGeneration"),B4r=o(" (BART model)"),N4r=l(),E4=a("li"),M8e=a("strong"),I4r=o("bert"),q4r=o(" \u2014 "),MJ=a("a"),j4r=o("TFBertForPreTraining"),D4r=o(" (BERT model)"),G4r=l(),C4=a("li"),E8e=a("strong"),O4r=o("camembert"),V4r=o(" \u2014 "),EJ=a("a"),X4r=o("TFCamembertForMaskedLM"),z4r=o(" (CamemBERT model)"),Q4r=l(),w4=a("li"),C8e=a("strong"),W4r=o("ctrl"),H4r=o(" \u2014 "),CJ=a("a"),U4r=o("TFCTRLLMHeadModel"),J4r=o(" (CTRL model)"),Y4r=l(),A4=a("li"),w8e=a("strong"),K4r=o("distilbert"),Z4r=o(" \u2014 "),wJ=a("a"),eEr=o("TFDistilBertForMaskedLM"),oEr=o(" (DistilBERT model)"),rEr=l(),L4=a("li"),A8e=a("strong"),tEr=o("electra"),aEr=o(" \u2014 "),AJ=a("a"),nEr=o("TFElectraForPreTraining"),sEr=o(" (ELECTRA model)"),lEr=l(),y4=a("li"),L8e=a("strong"),iEr=o("flaubert"),dEr=o(" \u2014 "),LJ=a("a"),cEr=o("TFFlaubertWithLMHeadModel"),fEr=o(" (FlauBERT model)"),mEr=l(),x4=a("li"),y8e=a("strong"),gEr=o("funnel"),hEr=o(" \u2014 "),yJ=a("a"),pEr=o("TFFunnelForPreTraining"),_Er=o(" (Funnel Transformer model)"),uEr=l(),$4=a("li"),x8e=a("strong"),bEr=o("gpt2"),vEr=o(" \u2014 "),xJ=a("a"),FEr=o("TFGPT2LMHeadModel"),TEr=o(" (OpenAI GPT-2 model)"),MEr=l(),k4=a("li"),$8e=a("strong"),EEr=o("layoutlm"),CEr=o(" \u2014 "),$J=a("a"),wEr=o("TFLayoutLMForMaskedLM"),AEr=o(" (LayoutLM model)"),LEr=l(),S4=a("li"),k8e=a("strong"),yEr=o("lxmert"),xEr=o(" \u2014 "),kJ=a("a"),$Er=o("TFLxmertForPreTraining"),kEr=o(" (LXMERT model)"),SEr=l(),R4=a("li"),S8e=a("strong"),REr=o("mobilebert"),PEr=o(" \u2014 "),SJ=a("a"),BEr=o("TFMobileBertForPreTraining"),NEr=o(" (MobileBERT model)"),IEr=l(),P4=a("li"),R8e=a("strong"),qEr=o("mpnet"),jEr=o(" \u2014 "),RJ=a("a"),DEr=o("TFMPNetForMaskedLM"),GEr=o(" (MPNet model)"),OEr=l(),B4=a("li"),P8e=a("strong"),VEr=o("openai-gpt"),XEr=o(" \u2014 "),PJ=a("a"),zEr=o("TFOpenAIGPTLMHeadModel"),QEr=o(" (OpenAI GPT model)"),WEr=l(),N4=a("li"),B8e=a("strong"),HEr=o("roberta"),UEr=o(" \u2014 "),BJ=a("a"),JEr=o("TFRobertaForMaskedLM"),YEr=o(" (RoBERTa model)"),KEr=l(),I4=a("li"),N8e=a("strong"),ZEr=o("t5"),eCr=o(" \u2014 "),NJ=a("a"),oCr=o("TFT5ForConditionalGeneration"),rCr=o(" (T5 model)"),tCr=l(),q4=a("li"),I8e=a("strong"),aCr=o("tapas"),nCr=o(" \u2014 "),IJ=a("a"),sCr=o("TFTapasForMaskedLM"),lCr=o(" (TAPAS model)"),iCr=l(),j4=a("li"),q8e=a("strong"),dCr=o("transfo-xl"),cCr=o(" \u2014 "),qJ=a("a"),fCr=o("TFTransfoXLLMHeadModel"),mCr=o(" (Transformer-XL model)"),gCr=l(),D4=a("li"),j8e=a("strong"),hCr=o("vit_mae"),pCr=o(" \u2014 "),jJ=a("a"),_Cr=o("TFViTMAEForPreTraining"),uCr=o(" (ViTMAE model)"),bCr=l(),G4=a("li"),D8e=a("strong"),vCr=o("xlm"),FCr=o(" \u2014 "),DJ=a("a"),TCr=o("TFXLMWithLMHeadModel"),MCr=o(" (XLM model)"),ECr=l(),O4=a("li"),G8e=a("strong"),CCr=o("xlm-roberta"),wCr=o(" \u2014 "),GJ=a("a"),ACr=o("TFXLMRobertaForMaskedLM"),LCr=o(" (XLM-RoBERTa model)"),yCr=l(),V4=a("li"),O8e=a("strong"),xCr=o("xlnet"),$Cr=o(" \u2014 "),OJ=a("a"),kCr=o("TFXLNetLMHeadModel"),SCr=o(" (XLNet model)"),RCr=l(),F(X4.$$.fragment),wze=l(),gc=a("h2"),z4=a("a"),V8e=a("span"),F(ax.$$.fragment),PCr=l(),X8e=a("span"),BCr=o("TFAutoModelForCausalLM"),Aze=l(),tr=a("div"),F(nx.$$.fragment),NCr=l(),hc=a("p"),ICr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VJ=a("a"),qCr=o("from_pretrained()"),jCr=o(" class method or the "),XJ=a("a"),DCr=o("from_config()"),GCr=o(` class
method.`),OCr=l(),sx=a("p"),VCr=o("This class cannot be instantiated directly using "),z8e=a("code"),XCr=o("__init__()"),zCr=o(" (throws an error)."),QCr=l(),Bt=a("div"),F(lx.$$.fragment),WCr=l(),Q8e=a("p"),HCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UCr=l(),pc=a("p"),JCr=o(`Note:
Loading a model from its configuration file does `),W8e=a("strong"),YCr=o("not"),KCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),ZCr=o("from_pretrained()"),e5r=o(" to load the model weights."),o5r=l(),F(Q4.$$.fragment),r5r=l(),kr=a("div"),F(ix.$$.fragment),t5r=l(),H8e=a("p"),a5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),n5r=l(),dn=a("p"),s5r=o("The model class to instantiate is selected based on the "),U8e=a("code"),l5r=o("model_type"),i5r=o(` property of the config object (either
passed as an argument or loaded from `),J8e=a("code"),d5r=o("pretrained_model_name_or_path"),c5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=a("code"),f5r=o("pretrained_model_name_or_path"),m5r=o(":"),g5r=l(),Me=a("ul"),W4=a("li"),K8e=a("strong"),h5r=o("bert"),p5r=o(" \u2014 "),QJ=a("a"),_5r=o("TFBertLMHeadModel"),u5r=o(" (BERT model)"),b5r=l(),H4=a("li"),Z8e=a("strong"),v5r=o("camembert"),F5r=o(" \u2014 "),WJ=a("a"),T5r=o("TFCamembertForCausalLM"),M5r=o(" (CamemBERT model)"),E5r=l(),U4=a("li"),eMe=a("strong"),C5r=o("ctrl"),w5r=o(" \u2014 "),HJ=a("a"),A5r=o("TFCTRLLMHeadModel"),L5r=o(" (CTRL model)"),y5r=l(),J4=a("li"),oMe=a("strong"),x5r=o("gpt2"),$5r=o(" \u2014 "),UJ=a("a"),k5r=o("TFGPT2LMHeadModel"),S5r=o(" (OpenAI GPT-2 model)"),R5r=l(),Y4=a("li"),rMe=a("strong"),P5r=o("gptj"),B5r=o(" \u2014 "),JJ=a("a"),N5r=o("TFGPTJForCausalLM"),I5r=o(" (GPT-J model)"),q5r=l(),K4=a("li"),tMe=a("strong"),j5r=o("openai-gpt"),D5r=o(" \u2014 "),YJ=a("a"),G5r=o("TFOpenAIGPTLMHeadModel"),O5r=o(" (OpenAI GPT model)"),V5r=l(),Z4=a("li"),aMe=a("strong"),X5r=o("opt"),z5r=o(" \u2014 "),KJ=a("a"),Q5r=o("TFOPTForCausalLM"),W5r=o(" (OPT model)"),H5r=l(),eE=a("li"),nMe=a("strong"),U5r=o("rembert"),J5r=o(" \u2014 "),ZJ=a("a"),Y5r=o("TFRemBertForCausalLM"),K5r=o(" (RemBERT model)"),Z5r=l(),oE=a("li"),sMe=a("strong"),e0r=o("roberta"),o0r=o(" \u2014 "),eY=a("a"),r0r=o("TFRobertaForCausalLM"),t0r=o(" (RoBERTa model)"),a0r=l(),rE=a("li"),lMe=a("strong"),n0r=o("roformer"),s0r=o(" \u2014 "),oY=a("a"),l0r=o("TFRoFormerForCausalLM"),i0r=o(" (RoFormer model)"),d0r=l(),tE=a("li"),iMe=a("strong"),c0r=o("transfo-xl"),f0r=o(" \u2014 "),rY=a("a"),m0r=o("TFTransfoXLLMHeadModel"),g0r=o(" (Transformer-XL model)"),h0r=l(),aE=a("li"),dMe=a("strong"),p0r=o("xlm"),_0r=o(" \u2014 "),tY=a("a"),u0r=o("TFXLMWithLMHeadModel"),b0r=o(" (XLM model)"),v0r=l(),nE=a("li"),cMe=a("strong"),F0r=o("xlnet"),T0r=o(" \u2014 "),aY=a("a"),M0r=o("TFXLNetLMHeadModel"),E0r=o(" (XLNet model)"),C0r=l(),F(sE.$$.fragment),Lze=l(),_c=a("h2"),lE=a("a"),fMe=a("span"),F(dx.$$.fragment),w0r=l(),mMe=a("span"),A0r=o("TFAutoModelForImageClassification"),yze=l(),ar=a("div"),F(cx.$$.fragment),L0r=l(),uc=a("p"),y0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=a("a"),x0r=o("from_pretrained()"),$0r=o(" class method or the "),sY=a("a"),k0r=o("from_config()"),S0r=o(` class
method.`),R0r=l(),fx=a("p"),P0r=o("This class cannot be instantiated directly using "),gMe=a("code"),B0r=o("__init__()"),N0r=o(" (throws an error)."),I0r=l(),Nt=a("div"),F(mx.$$.fragment),q0r=l(),hMe=a("p"),j0r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),D0r=l(),bc=a("p"),G0r=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),O0r=o("not"),V0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),X0r=o("from_pretrained()"),z0r=o(" to load the model weights."),Q0r=l(),F(iE.$$.fragment),W0r=l(),Sr=a("div"),F(gx.$$.fragment),H0r=l(),_Me=a("p"),U0r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),J0r=l(),cn=a("p"),Y0r=o("The model class to instantiate is selected based on the "),uMe=a("code"),K0r=o("model_type"),Z0r=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),ewr=o("pretrained_model_name_or_path"),owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),rwr=o("pretrained_model_name_or_path"),twr=o(":"),awr=l(),Qe=a("ul"),dE=a("li"),FMe=a("strong"),nwr=o("convnext"),swr=o(" \u2014 "),iY=a("a"),lwr=o("TFConvNextForImageClassification"),iwr=o(" (ConvNeXT model)"),dwr=l(),cE=a("li"),TMe=a("strong"),cwr=o("data2vec-vision"),fwr=o(" \u2014 "),dY=a("a"),mwr=o("TFData2VecVisionForImageClassification"),gwr=o(" (Data2VecVision model)"),hwr=l(),Ks=a("li"),MMe=a("strong"),pwr=o("deit"),_wr=o(" \u2014 "),cY=a("a"),uwr=o("TFDeiTForImageClassification"),bwr=o(" or "),fY=a("a"),vwr=o("TFDeiTForImageClassificationWithTeacher"),Fwr=o(" (DeiT model)"),Twr=l(),fE=a("li"),EMe=a("strong"),Mwr=o("regnet"),Ewr=o(" \u2014 "),mY=a("a"),Cwr=o("TFRegNetForImageClassification"),wwr=o(" (RegNet model)"),Awr=l(),mE=a("li"),CMe=a("strong"),Lwr=o("resnet"),ywr=o(" \u2014 "),gY=a("a"),xwr=o("TFResNetForImageClassification"),$wr=o(" (ResNet model)"),kwr=l(),gE=a("li"),wMe=a("strong"),Swr=o("swin"),Rwr=o(" \u2014 "),hY=a("a"),Pwr=o("TFSwinForImageClassification"),Bwr=o(" (Swin Transformer model)"),Nwr=l(),hE=a("li"),AMe=a("strong"),Iwr=o("vit"),qwr=o(" \u2014 "),pY=a("a"),jwr=o("TFViTForImageClassification"),Dwr=o(" (ViT model)"),Gwr=l(),F(pE.$$.fragment),xze=l(),vc=a("h2"),_E=a("a"),LMe=a("span"),F(hx.$$.fragment),Owr=l(),yMe=a("span"),Vwr=o("TFAutoModelForMaskedLM"),$ze=l(),nr=a("div"),F(px.$$.fragment),Xwr=l(),Fc=a("p"),zwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Y=a("a"),Qwr=o("from_pretrained()"),Wwr=o(" class method or the "),uY=a("a"),Hwr=o("from_config()"),Uwr=o(` class
method.`),Jwr=l(),_x=a("p"),Ywr=o("This class cannot be instantiated directly using "),xMe=a("code"),Kwr=o("__init__()"),Zwr=o(" (throws an error)."),eAr=l(),It=a("div"),F(ux.$$.fragment),oAr=l(),$Me=a("p"),rAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tAr=l(),Tc=a("p"),aAr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),nAr=o("not"),sAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),lAr=o("from_pretrained()"),iAr=o(" to load the model weights."),dAr=l(),F(uE.$$.fragment),cAr=l(),Rr=a("div"),F(bx.$$.fragment),fAr=l(),SMe=a("p"),mAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gAr=l(),fn=a("p"),hAr=o("The model class to instantiate is selected based on the "),RMe=a("code"),pAr=o("model_type"),_Ar=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),uAr=o("pretrained_model_name_or_path"),bAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),vAr=o("pretrained_model_name_or_path"),FAr=o(":"),TAr=l(),ie=a("ul"),bE=a("li"),NMe=a("strong"),MAr=o("albert"),EAr=o(" \u2014 "),vY=a("a"),CAr=o("TFAlbertForMaskedLM"),wAr=o(" (ALBERT model)"),AAr=l(),vE=a("li"),IMe=a("strong"),LAr=o("bert"),yAr=o(" \u2014 "),FY=a("a"),xAr=o("TFBertForMaskedLM"),$Ar=o(" (BERT model)"),kAr=l(),FE=a("li"),qMe=a("strong"),SAr=o("camembert"),RAr=o(" \u2014 "),TY=a("a"),PAr=o("TFCamembertForMaskedLM"),BAr=o(" (CamemBERT model)"),NAr=l(),TE=a("li"),jMe=a("strong"),IAr=o("convbert"),qAr=o(" \u2014 "),MY=a("a"),jAr=o("TFConvBertForMaskedLM"),DAr=o(" (ConvBERT model)"),GAr=l(),ME=a("li"),DMe=a("strong"),OAr=o("deberta"),VAr=o(" \u2014 "),EY=a("a"),XAr=o("TFDebertaForMaskedLM"),zAr=o(" (DeBERTa model)"),QAr=l(),EE=a("li"),GMe=a("strong"),WAr=o("deberta-v2"),HAr=o(" \u2014 "),CY=a("a"),UAr=o("TFDebertaV2ForMaskedLM"),JAr=o(" (DeBERTa-v2 model)"),YAr=l(),CE=a("li"),OMe=a("strong"),KAr=o("distilbert"),ZAr=o(" \u2014 "),wY=a("a"),e6r=o("TFDistilBertForMaskedLM"),o6r=o(" (DistilBERT model)"),r6r=l(),wE=a("li"),VMe=a("strong"),t6r=o("electra"),a6r=o(" \u2014 "),AY=a("a"),n6r=o("TFElectraForMaskedLM"),s6r=o(" (ELECTRA model)"),l6r=l(),AE=a("li"),XMe=a("strong"),i6r=o("flaubert"),d6r=o(" \u2014 "),LY=a("a"),c6r=o("TFFlaubertWithLMHeadModel"),f6r=o(" (FlauBERT model)"),m6r=l(),LE=a("li"),zMe=a("strong"),g6r=o("funnel"),h6r=o(" \u2014 "),yY=a("a"),p6r=o("TFFunnelForMaskedLM"),_6r=o(" (Funnel Transformer model)"),u6r=l(),yE=a("li"),QMe=a("strong"),b6r=o("layoutlm"),v6r=o(" \u2014 "),xY=a("a"),F6r=o("TFLayoutLMForMaskedLM"),T6r=o(" (LayoutLM model)"),M6r=l(),xE=a("li"),WMe=a("strong"),E6r=o("longformer"),C6r=o(" \u2014 "),$Y=a("a"),w6r=o("TFLongformerForMaskedLM"),A6r=o(" (Longformer model)"),L6r=l(),$E=a("li"),HMe=a("strong"),y6r=o("mobilebert"),x6r=o(" \u2014 "),kY=a("a"),$6r=o("TFMobileBertForMaskedLM"),k6r=o(" (MobileBERT model)"),S6r=l(),kE=a("li"),UMe=a("strong"),R6r=o("mpnet"),P6r=o(" \u2014 "),SY=a("a"),B6r=o("TFMPNetForMaskedLM"),N6r=o(" (MPNet model)"),I6r=l(),SE=a("li"),JMe=a("strong"),q6r=o("rembert"),j6r=o(" \u2014 "),RY=a("a"),D6r=o("TFRemBertForMaskedLM"),G6r=o(" (RemBERT model)"),O6r=l(),RE=a("li"),YMe=a("strong"),V6r=o("roberta"),X6r=o(" \u2014 "),PY=a("a"),z6r=o("TFRobertaForMaskedLM"),Q6r=o(" (RoBERTa model)"),W6r=l(),PE=a("li"),KMe=a("strong"),H6r=o("roformer"),U6r=o(" \u2014 "),BY=a("a"),J6r=o("TFRoFormerForMaskedLM"),Y6r=o(" (RoFormer model)"),K6r=l(),BE=a("li"),ZMe=a("strong"),Z6r=o("tapas"),e7r=o(" \u2014 "),NY=a("a"),o7r=o("TFTapasForMaskedLM"),r7r=o(" (TAPAS model)"),t7r=l(),NE=a("li"),e4e=a("strong"),a7r=o("xlm"),n7r=o(" \u2014 "),IY=a("a"),s7r=o("TFXLMWithLMHeadModel"),l7r=o(" (XLM model)"),i7r=l(),IE=a("li"),o4e=a("strong"),d7r=o("xlm-roberta"),c7r=o(" \u2014 "),qY=a("a"),f7r=o("TFXLMRobertaForMaskedLM"),m7r=o(" (XLM-RoBERTa model)"),g7r=l(),F(qE.$$.fragment),kze=l(),Mc=a("h2"),jE=a("a"),r4e=a("span"),F(vx.$$.fragment),h7r=l(),t4e=a("span"),p7r=o("TFAutoModelForSeq2SeqLM"),Sze=l(),sr=a("div"),F(Fx.$$.fragment),_7r=l(),Ec=a("p"),u7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=a("a"),b7r=o("from_pretrained()"),v7r=o(" class method or the "),DY=a("a"),F7r=o("from_config()"),T7r=o(` class
method.`),M7r=l(),Tx=a("p"),E7r=o("This class cannot be instantiated directly using "),a4e=a("code"),C7r=o("__init__()"),w7r=o(" (throws an error)."),A7r=l(),qt=a("div"),F(Mx.$$.fragment),L7r=l(),n4e=a("p"),y7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x7r=l(),Cc=a("p"),$7r=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),k7r=o("not"),S7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),R7r=o("from_pretrained()"),P7r=o(" to load the model weights."),B7r=l(),F(DE.$$.fragment),N7r=l(),Pr=a("div"),F(Ex.$$.fragment),I7r=l(),l4e=a("p"),q7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j7r=l(),mn=a("p"),D7r=o("The model class to instantiate is selected based on the "),i4e=a("code"),G7r=o("model_type"),O7r=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),z7r=o("pretrained_model_name_or_path"),Q7r=o(":"),W7r=l(),ye=a("ul"),GE=a("li"),f4e=a("strong"),H7r=o("bart"),U7r=o(" \u2014 "),OY=a("a"),J7r=o("TFBartForConditionalGeneration"),Y7r=o(" (BART model)"),K7r=l(),OE=a("li"),m4e=a("strong"),Z7r=o("blenderbot"),eLr=o(" \u2014 "),VY=a("a"),oLr=o("TFBlenderbotForConditionalGeneration"),rLr=o(" (Blenderbot model)"),tLr=l(),VE=a("li"),g4e=a("strong"),aLr=o("blenderbot-small"),nLr=o(" \u2014 "),XY=a("a"),sLr=o("TFBlenderbotSmallForConditionalGeneration"),lLr=o(" (BlenderbotSmall model)"),iLr=l(),XE=a("li"),h4e=a("strong"),dLr=o("encoder-decoder"),cLr=o(" \u2014 "),zY=a("a"),fLr=o("TFEncoderDecoderModel"),mLr=o(" (Encoder decoder model)"),gLr=l(),zE=a("li"),p4e=a("strong"),hLr=o("led"),pLr=o(" \u2014 "),QY=a("a"),_Lr=o("TFLEDForConditionalGeneration"),uLr=o(" (LED model)"),bLr=l(),QE=a("li"),_4e=a("strong"),vLr=o("marian"),FLr=o(" \u2014 "),WY=a("a"),TLr=o("TFMarianMTModel"),MLr=o(" (Marian model)"),ELr=l(),WE=a("li"),u4e=a("strong"),CLr=o("mbart"),wLr=o(" \u2014 "),HY=a("a"),ALr=o("TFMBartForConditionalGeneration"),LLr=o(" (mBART model)"),yLr=l(),HE=a("li"),b4e=a("strong"),xLr=o("mt5"),$Lr=o(" \u2014 "),UY=a("a"),kLr=o("TFMT5ForConditionalGeneration"),SLr=o(" (MT5 model)"),RLr=l(),UE=a("li"),v4e=a("strong"),PLr=o("pegasus"),BLr=o(" \u2014 "),JY=a("a"),NLr=o("TFPegasusForConditionalGeneration"),ILr=o(" (Pegasus model)"),qLr=l(),JE=a("li"),F4e=a("strong"),jLr=o("t5"),DLr=o(" \u2014 "),YY=a("a"),GLr=o("TFT5ForConditionalGeneration"),OLr=o(" (T5 model)"),VLr=l(),F(YE.$$.fragment),Rze=l(),wc=a("h2"),KE=a("a"),T4e=a("span"),F(Cx.$$.fragment),XLr=l(),M4e=a("span"),zLr=o("TFAutoModelForSequenceClassification"),Pze=l(),lr=a("div"),F(wx.$$.fragment),QLr=l(),Ac=a("p"),WLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KY=a("a"),HLr=o("from_pretrained()"),ULr=o(" class method or the "),ZY=a("a"),JLr=o("from_config()"),YLr=o(` class
method.`),KLr=l(),Ax=a("p"),ZLr=o("This class cannot be instantiated directly using "),E4e=a("code"),eyr=o("__init__()"),oyr=o(" (throws an error)."),ryr=l(),jt=a("div"),F(Lx.$$.fragment),tyr=l(),C4e=a("p"),ayr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nyr=l(),Lc=a("p"),syr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),lyr=o("not"),iyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),dyr=o("from_pretrained()"),cyr=o(" to load the model weights."),fyr=l(),F(ZE.$$.fragment),myr=l(),Br=a("div"),F(yx.$$.fragment),gyr=l(),A4e=a("p"),hyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pyr=l(),gn=a("p"),_yr=o("The model class to instantiate is selected based on the "),L4e=a("code"),uyr=o("model_type"),byr=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),vyr=o("pretrained_model_name_or_path"),Fyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),Tyr=o("pretrained_model_name_or_path"),Myr=o(":"),Eyr=l(),te=a("ul"),eC=a("li"),$4e=a("strong"),Cyr=o("albert"),wyr=o(" \u2014 "),oK=a("a"),Ayr=o("TFAlbertForSequenceClassification"),Lyr=o(" (ALBERT model)"),yyr=l(),oC=a("li"),k4e=a("strong"),xyr=o("bert"),$yr=o(" \u2014 "),rK=a("a"),kyr=o("TFBertForSequenceClassification"),Syr=o(" (BERT model)"),Ryr=l(),rC=a("li"),S4e=a("strong"),Pyr=o("camembert"),Byr=o(" \u2014 "),tK=a("a"),Nyr=o("TFCamembertForSequenceClassification"),Iyr=o(" (CamemBERT model)"),qyr=l(),tC=a("li"),R4e=a("strong"),jyr=o("convbert"),Dyr=o(" \u2014 "),aK=a("a"),Gyr=o("TFConvBertForSequenceClassification"),Oyr=o(" (ConvBERT model)"),Vyr=l(),aC=a("li"),P4e=a("strong"),Xyr=o("ctrl"),zyr=o(" \u2014 "),nK=a("a"),Qyr=o("TFCTRLForSequenceClassification"),Wyr=o(" (CTRL model)"),Hyr=l(),nC=a("li"),B4e=a("strong"),Uyr=o("deberta"),Jyr=o(" \u2014 "),sK=a("a"),Yyr=o("TFDebertaForSequenceClassification"),Kyr=o(" (DeBERTa model)"),Zyr=l(),sC=a("li"),N4e=a("strong"),e9r=o("deberta-v2"),o9r=o(" \u2014 "),lK=a("a"),r9r=o("TFDebertaV2ForSequenceClassification"),t9r=o(" (DeBERTa-v2 model)"),a9r=l(),lC=a("li"),I4e=a("strong"),n9r=o("distilbert"),s9r=o(" \u2014 "),iK=a("a"),l9r=o("TFDistilBertForSequenceClassification"),i9r=o(" (DistilBERT model)"),d9r=l(),iC=a("li"),q4e=a("strong"),c9r=o("electra"),f9r=o(" \u2014 "),dK=a("a"),m9r=o("TFElectraForSequenceClassification"),g9r=o(" (ELECTRA model)"),h9r=l(),dC=a("li"),j4e=a("strong"),p9r=o("flaubert"),_9r=o(" \u2014 "),cK=a("a"),u9r=o("TFFlaubertForSequenceClassification"),b9r=o(" (FlauBERT model)"),v9r=l(),cC=a("li"),D4e=a("strong"),F9r=o("funnel"),T9r=o(" \u2014 "),fK=a("a"),M9r=o("TFFunnelForSequenceClassification"),E9r=o(" (Funnel Transformer model)"),C9r=l(),fC=a("li"),G4e=a("strong"),w9r=o("gpt2"),A9r=o(" \u2014 "),mK=a("a"),L9r=o("TFGPT2ForSequenceClassification"),y9r=o(" (OpenAI GPT-2 model)"),x9r=l(),mC=a("li"),O4e=a("strong"),$9r=o("gptj"),k9r=o(" \u2014 "),gK=a("a"),S9r=o("TFGPTJForSequenceClassification"),R9r=o(" (GPT-J model)"),P9r=l(),gC=a("li"),V4e=a("strong"),B9r=o("layoutlm"),N9r=o(" \u2014 "),hK=a("a"),I9r=o("TFLayoutLMForSequenceClassification"),q9r=o(" (LayoutLM model)"),j9r=l(),hC=a("li"),X4e=a("strong"),D9r=o("longformer"),G9r=o(" \u2014 "),pK=a("a"),O9r=o("TFLongformerForSequenceClassification"),V9r=o(" (Longformer model)"),X9r=l(),pC=a("li"),z4e=a("strong"),z9r=o("mobilebert"),Q9r=o(" \u2014 "),_K=a("a"),W9r=o("TFMobileBertForSequenceClassification"),H9r=o(" (MobileBERT model)"),U9r=l(),_C=a("li"),Q4e=a("strong"),J9r=o("mpnet"),Y9r=o(" \u2014 "),uK=a("a"),K9r=o("TFMPNetForSequenceClassification"),Z9r=o(" (MPNet model)"),exr=l(),uC=a("li"),W4e=a("strong"),oxr=o("openai-gpt"),rxr=o(" \u2014 "),bK=a("a"),txr=o("TFOpenAIGPTForSequenceClassification"),axr=o(" (OpenAI GPT model)"),nxr=l(),bC=a("li"),H4e=a("strong"),sxr=o("rembert"),lxr=o(" \u2014 "),vK=a("a"),ixr=o("TFRemBertForSequenceClassification"),dxr=o(" (RemBERT model)"),cxr=l(),vC=a("li"),U4e=a("strong"),fxr=o("roberta"),mxr=o(" \u2014 "),FK=a("a"),gxr=o("TFRobertaForSequenceClassification"),hxr=o(" (RoBERTa model)"),pxr=l(),FC=a("li"),J4e=a("strong"),_xr=o("roformer"),uxr=o(" \u2014 "),TK=a("a"),bxr=o("TFRoFormerForSequenceClassification"),vxr=o(" (RoFormer model)"),Fxr=l(),TC=a("li"),Y4e=a("strong"),Txr=o("tapas"),Mxr=o(" \u2014 "),MK=a("a"),Exr=o("TFTapasForSequenceClassification"),Cxr=o(" (TAPAS model)"),wxr=l(),MC=a("li"),K4e=a("strong"),Axr=o("transfo-xl"),Lxr=o(" \u2014 "),EK=a("a"),yxr=o("TFTransfoXLForSequenceClassification"),xxr=o(" (Transformer-XL model)"),$xr=l(),EC=a("li"),Z4e=a("strong"),kxr=o("xlm"),Sxr=o(" \u2014 "),CK=a("a"),Rxr=o("TFXLMForSequenceClassification"),Pxr=o(" (XLM model)"),Bxr=l(),CC=a("li"),eEe=a("strong"),Nxr=o("xlm-roberta"),Ixr=o(" \u2014 "),wK=a("a"),qxr=o("TFXLMRobertaForSequenceClassification"),jxr=o(" (XLM-RoBERTa model)"),Dxr=l(),wC=a("li"),oEe=a("strong"),Gxr=o("xlnet"),Oxr=o(" \u2014 "),AK=a("a"),Vxr=o("TFXLNetForSequenceClassification"),Xxr=o(" (XLNet model)"),zxr=l(),F(AC.$$.fragment),Bze=l(),yc=a("h2"),LC=a("a"),rEe=a("span"),F(xx.$$.fragment),Qxr=l(),tEe=a("span"),Wxr=o("TFAutoModelForMultipleChoice"),Nze=l(),ir=a("div"),F($x.$$.fragment),Hxr=l(),xc=a("p"),Uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LK=a("a"),Jxr=o("from_pretrained()"),Yxr=o(" class method or the "),yK=a("a"),Kxr=o("from_config()"),Zxr=o(` class
method.`),e$r=l(),kx=a("p"),o$r=o("This class cannot be instantiated directly using "),aEe=a("code"),r$r=o("__init__()"),t$r=o(" (throws an error)."),a$r=l(),Dt=a("div"),F(Sx.$$.fragment),n$r=l(),nEe=a("p"),s$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l$r=l(),$c=a("p"),i$r=o(`Note:
Loading a model from its configuration file does `),sEe=a("strong"),d$r=o("not"),c$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),f$r=o("from_pretrained()"),m$r=o(" to load the model weights."),g$r=l(),F(yC.$$.fragment),h$r=l(),Nr=a("div"),F(Rx.$$.fragment),p$r=l(),lEe=a("p"),_$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),u$r=l(),hn=a("p"),b$r=o("The model class to instantiate is selected based on the "),iEe=a("code"),v$r=o("model_type"),F$r=o(` property of the config object (either
passed as an argument or loaded from `),dEe=a("code"),T$r=o("pretrained_model_name_or_path"),M$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=a("code"),E$r=o("pretrained_model_name_or_path"),C$r=o(":"),w$r=l(),ue=a("ul"),xC=a("li"),fEe=a("strong"),A$r=o("albert"),L$r=o(" \u2014 "),$K=a("a"),y$r=o("TFAlbertForMultipleChoice"),x$r=o(" (ALBERT model)"),$$r=l(),$C=a("li"),mEe=a("strong"),k$r=o("bert"),S$r=o(" \u2014 "),kK=a("a"),R$r=o("TFBertForMultipleChoice"),P$r=o(" (BERT model)"),B$r=l(),kC=a("li"),gEe=a("strong"),N$r=o("camembert"),I$r=o(" \u2014 "),SK=a("a"),q$r=o("TFCamembertForMultipleChoice"),j$r=o(" (CamemBERT model)"),D$r=l(),SC=a("li"),hEe=a("strong"),G$r=o("convbert"),O$r=o(" \u2014 "),RK=a("a"),V$r=o("TFConvBertForMultipleChoice"),X$r=o(" (ConvBERT model)"),z$r=l(),RC=a("li"),pEe=a("strong"),Q$r=o("distilbert"),W$r=o(" \u2014 "),PK=a("a"),H$r=o("TFDistilBertForMultipleChoice"),U$r=o(" (DistilBERT model)"),J$r=l(),PC=a("li"),_Ee=a("strong"),Y$r=o("electra"),K$r=o(" \u2014 "),BK=a("a"),Z$r=o("TFElectraForMultipleChoice"),ekr=o(" (ELECTRA model)"),okr=l(),BC=a("li"),uEe=a("strong"),rkr=o("flaubert"),tkr=o(" \u2014 "),NK=a("a"),akr=o("TFFlaubertForMultipleChoice"),nkr=o(" (FlauBERT model)"),skr=l(),NC=a("li"),bEe=a("strong"),lkr=o("funnel"),ikr=o(" \u2014 "),IK=a("a"),dkr=o("TFFunnelForMultipleChoice"),ckr=o(" (Funnel Transformer model)"),fkr=l(),IC=a("li"),vEe=a("strong"),mkr=o("longformer"),gkr=o(" \u2014 "),qK=a("a"),hkr=o("TFLongformerForMultipleChoice"),pkr=o(" (Longformer model)"),_kr=l(),qC=a("li"),FEe=a("strong"),ukr=o("mobilebert"),bkr=o(" \u2014 "),jK=a("a"),vkr=o("TFMobileBertForMultipleChoice"),Fkr=o(" (MobileBERT model)"),Tkr=l(),jC=a("li"),TEe=a("strong"),Mkr=o("mpnet"),Ekr=o(" \u2014 "),DK=a("a"),Ckr=o("TFMPNetForMultipleChoice"),wkr=o(" (MPNet model)"),Akr=l(),DC=a("li"),MEe=a("strong"),Lkr=o("rembert"),ykr=o(" \u2014 "),GK=a("a"),xkr=o("TFRemBertForMultipleChoice"),$kr=o(" (RemBERT model)"),kkr=l(),GC=a("li"),EEe=a("strong"),Skr=o("roberta"),Rkr=o(" \u2014 "),OK=a("a"),Pkr=o("TFRobertaForMultipleChoice"),Bkr=o(" (RoBERTa model)"),Nkr=l(),OC=a("li"),CEe=a("strong"),Ikr=o("roformer"),qkr=o(" \u2014 "),VK=a("a"),jkr=o("TFRoFormerForMultipleChoice"),Dkr=o(" (RoFormer model)"),Gkr=l(),VC=a("li"),wEe=a("strong"),Okr=o("xlm"),Vkr=o(" \u2014 "),XK=a("a"),Xkr=o("TFXLMForMultipleChoice"),zkr=o(" (XLM model)"),Qkr=l(),XC=a("li"),AEe=a("strong"),Wkr=o("xlm-roberta"),Hkr=o(" \u2014 "),zK=a("a"),Ukr=o("TFXLMRobertaForMultipleChoice"),Jkr=o(" (XLM-RoBERTa model)"),Ykr=l(),zC=a("li"),LEe=a("strong"),Kkr=o("xlnet"),Zkr=o(" \u2014 "),QK=a("a"),eSr=o("TFXLNetForMultipleChoice"),oSr=o(" (XLNet model)"),rSr=l(),F(QC.$$.fragment),Ize=l(),kc=a("h2"),WC=a("a"),yEe=a("span"),F(Px.$$.fragment),tSr=l(),xEe=a("span"),aSr=o("TFAutoModelForNextSentencePrediction"),qze=l(),dr=a("div"),F(Bx.$$.fragment),nSr=l(),Sc=a("p"),sSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WK=a("a"),lSr=o("from_pretrained()"),iSr=o(" class method or the "),HK=a("a"),dSr=o("from_config()"),cSr=o(` class
method.`),fSr=l(),Nx=a("p"),mSr=o("This class cannot be instantiated directly using "),$Ee=a("code"),gSr=o("__init__()"),hSr=o(" (throws an error)."),pSr=l(),Gt=a("div"),F(Ix.$$.fragment),_Sr=l(),kEe=a("p"),uSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bSr=l(),Rc=a("p"),vSr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),FSr=o("not"),TSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),MSr=o("from_pretrained()"),ESr=o(" to load the model weights."),CSr=l(),F(HC.$$.fragment),wSr=l(),Ir=a("div"),F(qx.$$.fragment),ASr=l(),REe=a("p"),LSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ySr=l(),pn=a("p"),xSr=o("The model class to instantiate is selected based on the "),PEe=a("code"),$Sr=o("model_type"),kSr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=a("code"),PSr=o("pretrained_model_name_or_path"),BSr=o(":"),NSr=l(),jx=a("ul"),UC=a("li"),IEe=a("strong"),ISr=o("bert"),qSr=o(" \u2014 "),JK=a("a"),jSr=o("TFBertForNextSentencePrediction"),DSr=o(" (BERT model)"),GSr=l(),JC=a("li"),qEe=a("strong"),OSr=o("mobilebert"),VSr=o(" \u2014 "),YK=a("a"),XSr=o("TFMobileBertForNextSentencePrediction"),zSr=o(" (MobileBERT model)"),QSr=l(),F(YC.$$.fragment),jze=l(),Pc=a("h2"),KC=a("a"),jEe=a("span"),F(Dx.$$.fragment),WSr=l(),DEe=a("span"),HSr=o("TFAutoModelForTableQuestionAnswering"),Dze=l(),cr=a("div"),F(Gx.$$.fragment),USr=l(),Bc=a("p"),JSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KK=a("a"),YSr=o("from_pretrained()"),KSr=o(" class method or the "),ZK=a("a"),ZSr=o("from_config()"),eRr=o(` class
method.`),oRr=l(),Ox=a("p"),rRr=o("This class cannot be instantiated directly using "),GEe=a("code"),tRr=o("__init__()"),aRr=o(" (throws an error)."),nRr=l(),Ot=a("div"),F(Vx.$$.fragment),sRr=l(),OEe=a("p"),lRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iRr=l(),Nc=a("p"),dRr=o(`Note:
Loading a model from its configuration file does `),VEe=a("strong"),cRr=o("not"),fRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),mRr=o("from_pretrained()"),gRr=o(" to load the model weights."),hRr=l(),F(ZC.$$.fragment),pRr=l(),qr=a("div"),F(Xx.$$.fragment),_Rr=l(),XEe=a("p"),uRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bRr=l(),_n=a("p"),vRr=o("The model class to instantiate is selected based on the "),zEe=a("code"),FRr=o("model_type"),TRr=o(` property of the config object (either
passed as an argument or loaded from `),QEe=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=a("code"),CRr=o("pretrained_model_name_or_path"),wRr=o(":"),ARr=l(),HEe=a("ul"),e5=a("li"),UEe=a("strong"),LRr=o("tapas"),yRr=o(" \u2014 "),oZ=a("a"),xRr=o("TFTapasForQuestionAnswering"),$Rr=o(" (TAPAS model)"),kRr=l(),F(o5.$$.fragment),Gze=l(),Ic=a("h2"),r5=a("a"),JEe=a("span"),F(zx.$$.fragment),SRr=l(),YEe=a("span"),RRr=o("TFAutoModelForTokenClassification"),Oze=l(),fr=a("div"),F(Qx.$$.fragment),PRr=l(),qc=a("p"),BRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rZ=a("a"),NRr=o("from_pretrained()"),IRr=o(" class method or the "),tZ=a("a"),qRr=o("from_config()"),jRr=o(` class
method.`),DRr=l(),Wx=a("p"),GRr=o("This class cannot be instantiated directly using "),KEe=a("code"),ORr=o("__init__()"),VRr=o(" (throws an error)."),XRr=l(),Vt=a("div"),F(Hx.$$.fragment),zRr=l(),ZEe=a("p"),QRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WRr=l(),jc=a("p"),HRr=o(`Note:
Loading a model from its configuration file does `),eCe=a("strong"),URr=o("not"),JRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),YRr=o("from_pretrained()"),KRr=o(" to load the model weights."),ZRr=l(),F(t5.$$.fragment),ePr=l(),jr=a("div"),F(Ux.$$.fragment),oPr=l(),oCe=a("p"),rPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tPr=l(),un=a("p"),aPr=o("The model class to instantiate is selected based on the "),rCe=a("code"),nPr=o("model_type"),sPr=o(` property of the config object (either
passed as an argument or loaded from `),tCe=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=a("code"),dPr=o("pretrained_model_name_or_path"),cPr=o(":"),fPr=l(),de=a("ul"),a5=a("li"),nCe=a("strong"),mPr=o("albert"),gPr=o(" \u2014 "),nZ=a("a"),hPr=o("TFAlbertForTokenClassification"),pPr=o(" (ALBERT model)"),_Pr=l(),n5=a("li"),sCe=a("strong"),uPr=o("bert"),bPr=o(" \u2014 "),sZ=a("a"),vPr=o("TFBertForTokenClassification"),FPr=o(" (BERT model)"),TPr=l(),s5=a("li"),lCe=a("strong"),MPr=o("camembert"),EPr=o(" \u2014 "),lZ=a("a"),CPr=o("TFCamembertForTokenClassification"),wPr=o(" (CamemBERT model)"),APr=l(),l5=a("li"),iCe=a("strong"),LPr=o("convbert"),yPr=o(" \u2014 "),iZ=a("a"),xPr=o("TFConvBertForTokenClassification"),$Pr=o(" (ConvBERT model)"),kPr=l(),i5=a("li"),dCe=a("strong"),SPr=o("deberta"),RPr=o(" \u2014 "),dZ=a("a"),PPr=o("TFDebertaForTokenClassification"),BPr=o(" (DeBERTa model)"),NPr=l(),d5=a("li"),cCe=a("strong"),IPr=o("deberta-v2"),qPr=o(" \u2014 "),cZ=a("a"),jPr=o("TFDebertaV2ForTokenClassification"),DPr=o(" (DeBERTa-v2 model)"),GPr=l(),c5=a("li"),fCe=a("strong"),OPr=o("distilbert"),VPr=o(" \u2014 "),fZ=a("a"),XPr=o("TFDistilBertForTokenClassification"),zPr=o(" (DistilBERT model)"),QPr=l(),f5=a("li"),mCe=a("strong"),WPr=o("electra"),HPr=o(" \u2014 "),mZ=a("a"),UPr=o("TFElectraForTokenClassification"),JPr=o(" (ELECTRA model)"),YPr=l(),m5=a("li"),gCe=a("strong"),KPr=o("flaubert"),ZPr=o(" \u2014 "),gZ=a("a"),eBr=o("TFFlaubertForTokenClassification"),oBr=o(" (FlauBERT model)"),rBr=l(),g5=a("li"),hCe=a("strong"),tBr=o("funnel"),aBr=o(" \u2014 "),hZ=a("a"),nBr=o("TFFunnelForTokenClassification"),sBr=o(" (Funnel Transformer model)"),lBr=l(),h5=a("li"),pCe=a("strong"),iBr=o("layoutlm"),dBr=o(" \u2014 "),pZ=a("a"),cBr=o("TFLayoutLMForTokenClassification"),fBr=o(" (LayoutLM model)"),mBr=l(),p5=a("li"),_Ce=a("strong"),gBr=o("longformer"),hBr=o(" \u2014 "),_Z=a("a"),pBr=o("TFLongformerForTokenClassification"),_Br=o(" (Longformer model)"),uBr=l(),_5=a("li"),uCe=a("strong"),bBr=o("mobilebert"),vBr=o(" \u2014 "),uZ=a("a"),FBr=o("TFMobileBertForTokenClassification"),TBr=o(" (MobileBERT model)"),MBr=l(),u5=a("li"),bCe=a("strong"),EBr=o("mpnet"),CBr=o(" \u2014 "),bZ=a("a"),wBr=o("TFMPNetForTokenClassification"),ABr=o(" (MPNet model)"),LBr=l(),b5=a("li"),vCe=a("strong"),yBr=o("rembert"),xBr=o(" \u2014 "),vZ=a("a"),$Br=o("TFRemBertForTokenClassification"),kBr=o(" (RemBERT model)"),SBr=l(),v5=a("li"),FCe=a("strong"),RBr=o("roberta"),PBr=o(" \u2014 "),FZ=a("a"),BBr=o("TFRobertaForTokenClassification"),NBr=o(" (RoBERTa model)"),IBr=l(),F5=a("li"),TCe=a("strong"),qBr=o("roformer"),jBr=o(" \u2014 "),TZ=a("a"),DBr=o("TFRoFormerForTokenClassification"),GBr=o(" (RoFormer model)"),OBr=l(),T5=a("li"),MCe=a("strong"),VBr=o("xlm"),XBr=o(" \u2014 "),MZ=a("a"),zBr=o("TFXLMForTokenClassification"),QBr=o(" (XLM model)"),WBr=l(),M5=a("li"),ECe=a("strong"),HBr=o("xlm-roberta"),UBr=o(" \u2014 "),EZ=a("a"),JBr=o("TFXLMRobertaForTokenClassification"),YBr=o(" (XLM-RoBERTa model)"),KBr=l(),E5=a("li"),CCe=a("strong"),ZBr=o("xlnet"),eNr=o(" \u2014 "),CZ=a("a"),oNr=o("TFXLNetForTokenClassification"),rNr=o(" (XLNet model)"),tNr=l(),F(C5.$$.fragment),Vze=l(),Dc=a("h2"),w5=a("a"),wCe=a("span"),F(Jx.$$.fragment),aNr=l(),ACe=a("span"),nNr=o("TFAutoModelForQuestionAnswering"),Xze=l(),mr=a("div"),F(Yx.$$.fragment),sNr=l(),Gc=a("p"),lNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wZ=a("a"),iNr=o("from_pretrained()"),dNr=o(" class method or the "),AZ=a("a"),cNr=o("from_config()"),fNr=o(` class
method.`),mNr=l(),Kx=a("p"),gNr=o("This class cannot be instantiated directly using "),LCe=a("code"),hNr=o("__init__()"),pNr=o(" (throws an error)."),_Nr=l(),Xt=a("div"),F(Zx.$$.fragment),uNr=l(),yCe=a("p"),bNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vNr=l(),Oc=a("p"),FNr=o(`Note:
Loading a model from its configuration file does `),xCe=a("strong"),TNr=o("not"),MNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),ENr=o("from_pretrained()"),CNr=o(" to load the model weights."),wNr=l(),F(A5.$$.fragment),ANr=l(),Dr=a("div"),F(e$.$$.fragment),LNr=l(),$Ce=a("p"),yNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xNr=l(),bn=a("p"),$Nr=o("The model class to instantiate is selected based on the "),kCe=a("code"),kNr=o("model_type"),SNr=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),RNr=o("pretrained_model_name_or_path"),PNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=a("code"),BNr=o("pretrained_model_name_or_path"),NNr=o(":"),INr=l(),ce=a("ul"),L5=a("li"),PCe=a("strong"),qNr=o("albert"),jNr=o(" \u2014 "),yZ=a("a"),DNr=o("TFAlbertForQuestionAnswering"),GNr=o(" (ALBERT model)"),ONr=l(),y5=a("li"),BCe=a("strong"),VNr=o("bert"),XNr=o(" \u2014 "),xZ=a("a"),zNr=o("TFBertForQuestionAnswering"),QNr=o(" (BERT model)"),WNr=l(),x5=a("li"),NCe=a("strong"),HNr=o("camembert"),UNr=o(" \u2014 "),$Z=a("a"),JNr=o("TFCamembertForQuestionAnswering"),YNr=o(" (CamemBERT model)"),KNr=l(),$5=a("li"),ICe=a("strong"),ZNr=o("convbert"),eIr=o(" \u2014 "),kZ=a("a"),oIr=o("TFConvBertForQuestionAnswering"),rIr=o(" (ConvBERT model)"),tIr=l(),k5=a("li"),qCe=a("strong"),aIr=o("deberta"),nIr=o(" \u2014 "),SZ=a("a"),sIr=o("TFDebertaForQuestionAnswering"),lIr=o(" (DeBERTa model)"),iIr=l(),S5=a("li"),jCe=a("strong"),dIr=o("deberta-v2"),cIr=o(" \u2014 "),RZ=a("a"),fIr=o("TFDebertaV2ForQuestionAnswering"),mIr=o(" (DeBERTa-v2 model)"),gIr=l(),R5=a("li"),DCe=a("strong"),hIr=o("distilbert"),pIr=o(" \u2014 "),PZ=a("a"),_Ir=o("TFDistilBertForQuestionAnswering"),uIr=o(" (DistilBERT model)"),bIr=l(),P5=a("li"),GCe=a("strong"),vIr=o("electra"),FIr=o(" \u2014 "),BZ=a("a"),TIr=o("TFElectraForQuestionAnswering"),MIr=o(" (ELECTRA model)"),EIr=l(),B5=a("li"),OCe=a("strong"),CIr=o("flaubert"),wIr=o(" \u2014 "),NZ=a("a"),AIr=o("TFFlaubertForQuestionAnsweringSimple"),LIr=o(" (FlauBERT model)"),yIr=l(),N5=a("li"),VCe=a("strong"),xIr=o("funnel"),$Ir=o(" \u2014 "),IZ=a("a"),kIr=o("TFFunnelForQuestionAnswering"),SIr=o(" (Funnel Transformer model)"),RIr=l(),I5=a("li"),XCe=a("strong"),PIr=o("gptj"),BIr=o(" \u2014 "),qZ=a("a"),NIr=o("TFGPTJForQuestionAnswering"),IIr=o(" (GPT-J model)"),qIr=l(),q5=a("li"),zCe=a("strong"),jIr=o("longformer"),DIr=o(" \u2014 "),jZ=a("a"),GIr=o("TFLongformerForQuestionAnswering"),OIr=o(" (Longformer model)"),VIr=l(),j5=a("li"),QCe=a("strong"),XIr=o("mobilebert"),zIr=o(" \u2014 "),DZ=a("a"),QIr=o("TFMobileBertForQuestionAnswering"),WIr=o(" (MobileBERT model)"),HIr=l(),D5=a("li"),WCe=a("strong"),UIr=o("mpnet"),JIr=o(" \u2014 "),GZ=a("a"),YIr=o("TFMPNetForQuestionAnswering"),KIr=o(" (MPNet model)"),ZIr=l(),G5=a("li"),HCe=a("strong"),eqr=o("rembert"),oqr=o(" \u2014 "),OZ=a("a"),rqr=o("TFRemBertForQuestionAnswering"),tqr=o(" (RemBERT model)"),aqr=l(),O5=a("li"),UCe=a("strong"),nqr=o("roberta"),sqr=o(" \u2014 "),VZ=a("a"),lqr=o("TFRobertaForQuestionAnswering"),iqr=o(" (RoBERTa model)"),dqr=l(),V5=a("li"),JCe=a("strong"),cqr=o("roformer"),fqr=o(" \u2014 "),XZ=a("a"),mqr=o("TFRoFormerForQuestionAnswering"),gqr=o(" (RoFormer model)"),hqr=l(),X5=a("li"),YCe=a("strong"),pqr=o("xlm"),_qr=o(" \u2014 "),zZ=a("a"),uqr=o("TFXLMForQuestionAnsweringSimple"),bqr=o(" (XLM model)"),vqr=l(),z5=a("li"),KCe=a("strong"),Fqr=o("xlm-roberta"),Tqr=o(" \u2014 "),QZ=a("a"),Mqr=o("TFXLMRobertaForQuestionAnswering"),Eqr=o(" (XLM-RoBERTa model)"),Cqr=l(),Q5=a("li"),ZCe=a("strong"),wqr=o("xlnet"),Aqr=o(" \u2014 "),WZ=a("a"),Lqr=o("TFXLNetForQuestionAnsweringSimple"),yqr=o(" (XLNet model)"),xqr=l(),F(W5.$$.fragment),zze=l(),Vc=a("h2"),H5=a("a"),e5e=a("span"),F(o$.$$.fragment),$qr=l(),o5e=a("span"),kqr=o("TFAutoModelForVision2Seq"),Qze=l(),gr=a("div"),F(r$.$$.fragment),Sqr=l(),Xc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),UZ=a("a"),Nqr=o("from_config()"),Iqr=o(` class
method.`),qqr=l(),t$=a("p"),jqr=o("This class cannot be instantiated directly using "),r5e=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),zt=a("div"),F(a$.$$.fragment),Vqr=l(),t5e=a("p"),Xqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zqr=l(),zc=a("p"),Qqr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),Wqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(U5.$$.fragment),Kqr=l(),Gr=a("div"),F(n$.$$.fragment),Zqr=l(),n5e=a("p"),ejr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ojr=l(),vn=a("p"),rjr=o("The model class to instantiate is selected based on the "),s5e=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),d5e=a("ul"),J5=a("li"),c5e=a("strong"),cjr=o("vision-encoder-decoder"),fjr=o(" \u2014 "),YZ=a("a"),mjr=o("TFVisionEncoderDecoderModel"),gjr=o(" (Vision Encoder decoder model)"),hjr=l(),F(Y5.$$.fragment),Wze=l(),Qc=a("h2"),K5=a("a"),f5e=a("span"),F(s$.$$.fragment),pjr=l(),m5e=a("span"),_jr=o("TFAutoModelForSpeechSeq2Seq"),Hze=l(),hr=a("div"),F(l$.$$.fragment),ujr=l(),Wc=a("p"),bjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KZ=a("a"),vjr=o("from_pretrained()"),Fjr=o(" class method or the "),ZZ=a("a"),Tjr=o("from_config()"),Mjr=o(` class
method.`),Ejr=l(),i$=a("p"),Cjr=o("This class cannot be instantiated directly using "),g5e=a("code"),wjr=o("__init__()"),Ajr=o(" (throws an error)."),Ljr=l(),Qt=a("div"),F(d$.$$.fragment),yjr=l(),h5e=a("p"),xjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$jr=l(),Hc=a("p"),kjr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),Sjr=o("not"),Rjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),Pjr=o("from_pretrained()"),Bjr=o(" to load the model weights."),Njr=l(),F(Z5.$$.fragment),Ijr=l(),Or=a("div"),F(c$.$$.fragment),qjr=l(),_5e=a("p"),jjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Djr=l(),Fn=a("p"),Gjr=o("The model class to instantiate is selected based on the "),u5e=a("code"),Ojr=o("model_type"),Vjr=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),Qjr=o("pretrained_model_name_or_path"),Wjr=o(":"),Hjr=l(),F5e=a("ul"),e0=a("li"),T5e=a("strong"),Ujr=o("speech_to_text"),Jjr=o(" \u2014 "),oee=a("a"),Yjr=o("TFSpeech2TextForConditionalGeneration"),Kjr=o(" (Speech2Text model)"),Zjr=l(),F(o0.$$.fragment),Uze=l(),Uc=a("h2"),r0=a("a"),M5e=a("span"),F(f$.$$.fragment),eDr=l(),E5e=a("span"),oDr=o("FlaxAutoModel"),Jze=l(),pr=a("div"),F(m$.$$.fragment),rDr=l(),Jc=a("p"),tDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ree=a("a"),aDr=o("from_pretrained()"),nDr=o(" class method or the "),tee=a("a"),sDr=o("from_config()"),lDr=o(` class
method.`),iDr=l(),g$=a("p"),dDr=o("This class cannot be instantiated directly using "),C5e=a("code"),cDr=o("__init__()"),fDr=o(" (throws an error)."),mDr=l(),Wt=a("div"),F(h$.$$.fragment),gDr=l(),w5e=a("p"),hDr=o("Instantiates one of the base model classes of the library from a configuration."),pDr=l(),Yc=a("p"),_Dr=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),uDr=o("not"),bDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),vDr=o("from_pretrained()"),FDr=o(" to load the model weights."),TDr=l(),F(t0.$$.fragment),MDr=l(),Vr=a("div"),F(p$.$$.fragment),EDr=l(),L5e=a("p"),CDr=o("Instantiate one of the base model classes of the library from a pretrained model."),wDr=l(),Tn=a("p"),ADr=o("The model class to instantiate is selected based on the "),y5e=a("code"),LDr=o("model_type"),yDr=o(` property of the config object (either
passed as an argument or loaded from `),x5e=a("code"),xDr=o("pretrained_model_name_or_path"),$Dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),kDr=o("pretrained_model_name_or_path"),SDr=o(":"),RDr=l(),oe=a("ul"),a0=a("li"),k5e=a("strong"),PDr=o("albert"),BDr=o(" \u2014 "),nee=a("a"),NDr=o("FlaxAlbertModel"),IDr=o(" (ALBERT model)"),qDr=l(),n0=a("li"),S5e=a("strong"),jDr=o("bart"),DDr=o(" \u2014 "),see=a("a"),GDr=o("FlaxBartModel"),ODr=o(" (BART model)"),VDr=l(),s0=a("li"),R5e=a("strong"),XDr=o("beit"),zDr=o(" \u2014 "),lee=a("a"),QDr=o("FlaxBeitModel"),WDr=o(" (BEiT model)"),HDr=l(),l0=a("li"),P5e=a("strong"),UDr=o("bert"),JDr=o(" \u2014 "),iee=a("a"),YDr=o("FlaxBertModel"),KDr=o(" (BERT model)"),ZDr=l(),i0=a("li"),B5e=a("strong"),eGr=o("big_bird"),oGr=o(" \u2014 "),dee=a("a"),rGr=o("FlaxBigBirdModel"),tGr=o(" (BigBird model)"),aGr=l(),d0=a("li"),N5e=a("strong"),nGr=o("blenderbot"),sGr=o(" \u2014 "),cee=a("a"),lGr=o("FlaxBlenderbotModel"),iGr=o(" (Blenderbot model)"),dGr=l(),c0=a("li"),I5e=a("strong"),cGr=o("blenderbot-small"),fGr=o(" \u2014 "),fee=a("a"),mGr=o("FlaxBlenderbotSmallModel"),gGr=o(" (BlenderbotSmall model)"),hGr=l(),f0=a("li"),q5e=a("strong"),pGr=o("clip"),_Gr=o(" \u2014 "),mee=a("a"),uGr=o("FlaxCLIPModel"),bGr=o(" (CLIP model)"),vGr=l(),m0=a("li"),j5e=a("strong"),FGr=o("distilbert"),TGr=o(" \u2014 "),gee=a("a"),MGr=o("FlaxDistilBertModel"),EGr=o(" (DistilBERT model)"),CGr=l(),g0=a("li"),D5e=a("strong"),wGr=o("electra"),AGr=o(" \u2014 "),hee=a("a"),LGr=o("FlaxElectraModel"),yGr=o(" (ELECTRA model)"),xGr=l(),h0=a("li"),G5e=a("strong"),$Gr=o("gpt2"),kGr=o(" \u2014 "),pee=a("a"),SGr=o("FlaxGPT2Model"),RGr=o(" (OpenAI GPT-2 model)"),PGr=l(),p0=a("li"),O5e=a("strong"),BGr=o("gpt_neo"),NGr=o(" \u2014 "),_ee=a("a"),IGr=o("FlaxGPTNeoModel"),qGr=o(" (GPT Neo model)"),jGr=l(),_0=a("li"),V5e=a("strong"),DGr=o("gptj"),GGr=o(" \u2014 "),uee=a("a"),OGr=o("FlaxGPTJModel"),VGr=o(" (GPT-J model)"),XGr=l(),u0=a("li"),X5e=a("strong"),zGr=o("longt5"),QGr=o(" \u2014 "),bee=a("a"),WGr=o("FlaxLongT5Model"),HGr=o(" (LongT5 model)"),UGr=l(),b0=a("li"),z5e=a("strong"),JGr=o("marian"),YGr=o(" \u2014 "),vee=a("a"),KGr=o("FlaxMarianModel"),ZGr=o(" (Marian model)"),eOr=l(),v0=a("li"),Q5e=a("strong"),oOr=o("mbart"),rOr=o(" \u2014 "),Fee=a("a"),tOr=o("FlaxMBartModel"),aOr=o(" (mBART model)"),nOr=l(),F0=a("li"),W5e=a("strong"),sOr=o("mt5"),lOr=o(" \u2014 "),Tee=a("a"),iOr=o("FlaxMT5Model"),dOr=o(" (MT5 model)"),cOr=l(),T0=a("li"),H5e=a("strong"),fOr=o("opt"),mOr=o(" \u2014 "),Mee=a("a"),gOr=o("FlaxOPTModel"),hOr=o(" (OPT model)"),pOr=l(),M0=a("li"),U5e=a("strong"),_Or=o("pegasus"),uOr=o(" \u2014 "),Eee=a("a"),bOr=o("FlaxPegasusModel"),vOr=o(" (Pegasus model)"),FOr=l(),E0=a("li"),J5e=a("strong"),TOr=o("roberta"),MOr=o(" \u2014 "),Cee=a("a"),EOr=o("FlaxRobertaModel"),COr=o(" (RoBERTa model)"),wOr=l(),C0=a("li"),Y5e=a("strong"),AOr=o("roformer"),LOr=o(" \u2014 "),wee=a("a"),yOr=o("FlaxRoFormerModel"),xOr=o(" (RoFormer model)"),$Or=l(),w0=a("li"),K5e=a("strong"),kOr=o("t5"),SOr=o(" \u2014 "),Aee=a("a"),ROr=o("FlaxT5Model"),POr=o(" (T5 model)"),BOr=l(),A0=a("li"),Z5e=a("strong"),NOr=o("vision-text-dual-encoder"),IOr=o(" \u2014 "),Lee=a("a"),qOr=o("FlaxVisionTextDualEncoderModel"),jOr=o(" (VisionTextDualEncoder model)"),DOr=l(),L0=a("li"),e0e=a("strong"),GOr=o("vit"),OOr=o(" \u2014 "),yee=a("a"),VOr=o("FlaxViTModel"),XOr=o(" (ViT model)"),zOr=l(),y0=a("li"),o0e=a("strong"),QOr=o("wav2vec2"),WOr=o(" \u2014 "),xee=a("a"),HOr=o("FlaxWav2Vec2Model"),UOr=o(" (Wav2Vec2 model)"),JOr=l(),x0=a("li"),r0e=a("strong"),YOr=o("xglm"),KOr=o(" \u2014 "),$ee=a("a"),ZOr=o("FlaxXGLMModel"),eVr=o(" (XGLM model)"),oVr=l(),$0=a("li"),t0e=a("strong"),rVr=o("xlm-roberta"),tVr=o(" \u2014 "),kee=a("a"),aVr=o("FlaxXLMRobertaModel"),nVr=o(" (XLM-RoBERTa model)"),sVr=l(),F(k0.$$.fragment),Yze=l(),Kc=a("h2"),S0=a("a"),a0e=a("span"),F(_$.$$.fragment),lVr=l(),n0e=a("span"),iVr=o("FlaxAutoModelForCausalLM"),Kze=l(),_r=a("div"),F(u$.$$.fragment),dVr=l(),Zc=a("p"),cVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),See=a("a"),fVr=o("from_pretrained()"),mVr=o(" class method or the "),Ree=a("a"),gVr=o("from_config()"),hVr=o(` class
method.`),pVr=l(),b$=a("p"),_Vr=o("This class cannot be instantiated directly using "),s0e=a("code"),uVr=o("__init__()"),bVr=o(" (throws an error)."),vVr=l(),Ht=a("div"),F(v$.$$.fragment),FVr=l(),l0e=a("p"),TVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MVr=l(),ef=a("p"),EVr=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),CVr=o("not"),wVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),AVr=o("from_pretrained()"),LVr=o(" to load the model weights."),yVr=l(),F(R0.$$.fragment),xVr=l(),Xr=a("div"),F(F$.$$.fragment),$Vr=l(),d0e=a("p"),kVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SVr=l(),Mn=a("p"),RVr=o("The model class to instantiate is selected based on the "),c0e=a("code"),PVr=o("model_type"),BVr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),NVr=o("pretrained_model_name_or_path"),IVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),qVr=o("pretrained_model_name_or_path"),jVr=o(":"),DVr=l(),xe=a("ul"),P0=a("li"),g0e=a("strong"),GVr=o("bart"),OVr=o(" \u2014 "),Bee=a("a"),VVr=o("FlaxBartForCausalLM"),XVr=o(" (BART model)"),zVr=l(),B0=a("li"),h0e=a("strong"),QVr=o("bert"),WVr=o(" \u2014 "),Nee=a("a"),HVr=o("FlaxBertForCausalLM"),UVr=o(" (BERT model)"),JVr=l(),N0=a("li"),p0e=a("strong"),YVr=o("big_bird"),KVr=o(" \u2014 "),Iee=a("a"),ZVr=o("FlaxBigBirdForCausalLM"),eXr=o(" (BigBird model)"),oXr=l(),I0=a("li"),_0e=a("strong"),rXr=o("electra"),tXr=o(" \u2014 "),qee=a("a"),aXr=o("FlaxElectraForCausalLM"),nXr=o(" (ELECTRA model)"),sXr=l(),q0=a("li"),u0e=a("strong"),lXr=o("gpt2"),iXr=o(" \u2014 "),jee=a("a"),dXr=o("FlaxGPT2LMHeadModel"),cXr=o(" (OpenAI GPT-2 model)"),fXr=l(),j0=a("li"),b0e=a("strong"),mXr=o("gpt_neo"),gXr=o(" \u2014 "),Dee=a("a"),hXr=o("FlaxGPTNeoForCausalLM"),pXr=o(" (GPT Neo model)"),_Xr=l(),D0=a("li"),v0e=a("strong"),uXr=o("gptj"),bXr=o(" \u2014 "),Gee=a("a"),vXr=o("FlaxGPTJForCausalLM"),FXr=o(" (GPT-J model)"),TXr=l(),G0=a("li"),F0e=a("strong"),MXr=o("opt"),EXr=o(" \u2014 "),Oee=a("a"),CXr=o("FlaxOPTForCausalLM"),wXr=o(" (OPT model)"),AXr=l(),O0=a("li"),T0e=a("strong"),LXr=o("roberta"),yXr=o(" \u2014 "),Vee=a("a"),xXr=o("FlaxRobertaForCausalLM"),$Xr=o(" (RoBERTa model)"),kXr=l(),V0=a("li"),M0e=a("strong"),SXr=o("xglm"),RXr=o(" \u2014 "),Xee=a("a"),PXr=o("FlaxXGLMForCausalLM"),BXr=o(" (XGLM model)"),NXr=l(),F(X0.$$.fragment),Zze=l(),of=a("h2"),z0=a("a"),E0e=a("span"),F(T$.$$.fragment),IXr=l(),C0e=a("span"),qXr=o("FlaxAutoModelForPreTraining"),eQe=l(),ur=a("div"),F(M$.$$.fragment),jXr=l(),rf=a("p"),DXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zee=a("a"),GXr=o("from_pretrained()"),OXr=o(" class method or the "),Qee=a("a"),VXr=o("from_config()"),XXr=o(` class
method.`),zXr=l(),E$=a("p"),QXr=o("This class cannot be instantiated directly using "),w0e=a("code"),WXr=o("__init__()"),HXr=o(" (throws an error)."),UXr=l(),Ut=a("div"),F(C$.$$.fragment),JXr=l(),A0e=a("p"),YXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KXr=l(),tf=a("p"),ZXr=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),ezr=o("not"),ozr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("a"),rzr=o("from_pretrained()"),tzr=o(" to load the model weights."),azr=l(),F(Q0.$$.fragment),nzr=l(),zr=a("div"),F(w$.$$.fragment),szr=l(),y0e=a("p"),lzr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),izr=l(),En=a("p"),dzr=o("The model class to instantiate is selected based on the "),x0e=a("code"),czr=o("model_type"),fzr=o(` property of the config object (either
passed as an argument or loaded from `),$0e=a("code"),mzr=o("pretrained_model_name_or_path"),gzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=a("code"),hzr=o("pretrained_model_name_or_path"),pzr=o(":"),_zr=l(),Ee=a("ul"),W0=a("li"),S0e=a("strong"),uzr=o("albert"),bzr=o(" \u2014 "),Hee=a("a"),vzr=o("FlaxAlbertForPreTraining"),Fzr=o(" (ALBERT model)"),Tzr=l(),H0=a("li"),R0e=a("strong"),Mzr=o("bart"),Ezr=o(" \u2014 "),Uee=a("a"),Czr=o("FlaxBartForConditionalGeneration"),wzr=o(" (BART model)"),Azr=l(),U0=a("li"),P0e=a("strong"),Lzr=o("bert"),yzr=o(" \u2014 "),Jee=a("a"),xzr=o("FlaxBertForPreTraining"),$zr=o(" (BERT model)"),kzr=l(),J0=a("li"),B0e=a("strong"),Szr=o("big_bird"),Rzr=o(" \u2014 "),Yee=a("a"),Pzr=o("FlaxBigBirdForPreTraining"),Bzr=o(" (BigBird model)"),Nzr=l(),Y0=a("li"),N0e=a("strong"),Izr=o("electra"),qzr=o(" \u2014 "),Kee=a("a"),jzr=o("FlaxElectraForPreTraining"),Dzr=o(" (ELECTRA model)"),Gzr=l(),K0=a("li"),I0e=a("strong"),Ozr=o("longt5"),Vzr=o(" \u2014 "),Zee=a("a"),Xzr=o("FlaxLongT5ForConditionalGeneration"),zzr=o(" (LongT5 model)"),Qzr=l(),Z0=a("li"),q0e=a("strong"),Wzr=o("mbart"),Hzr=o(" \u2014 "),eoe=a("a"),Uzr=o("FlaxMBartForConditionalGeneration"),Jzr=o(" (mBART model)"),Yzr=l(),ew=a("li"),j0e=a("strong"),Kzr=o("mt5"),Zzr=o(" \u2014 "),ooe=a("a"),eQr=o("FlaxMT5ForConditionalGeneration"),oQr=o(" (MT5 model)"),rQr=l(),ow=a("li"),D0e=a("strong"),tQr=o("roberta"),aQr=o(" \u2014 "),roe=a("a"),nQr=o("FlaxRobertaForMaskedLM"),sQr=o(" (RoBERTa model)"),lQr=l(),rw=a("li"),G0e=a("strong"),iQr=o("roformer"),dQr=o(" \u2014 "),toe=a("a"),cQr=o("FlaxRoFormerForMaskedLM"),fQr=o(" (RoFormer model)"),mQr=l(),tw=a("li"),O0e=a("strong"),gQr=o("t5"),hQr=o(" \u2014 "),aoe=a("a"),pQr=o("FlaxT5ForConditionalGeneration"),_Qr=o(" (T5 model)"),uQr=l(),aw=a("li"),V0e=a("strong"),bQr=o("wav2vec2"),vQr=o(" \u2014 "),noe=a("a"),FQr=o("FlaxWav2Vec2ForPreTraining"),TQr=o(" (Wav2Vec2 model)"),MQr=l(),nw=a("li"),X0e=a("strong"),EQr=o("xlm-roberta"),CQr=o(" \u2014 "),soe=a("a"),wQr=o("FlaxXLMRobertaForMaskedLM"),AQr=o(" (XLM-RoBERTa model)"),LQr=l(),F(sw.$$.fragment),oQe=l(),af=a("h2"),lw=a("a"),z0e=a("span"),F(A$.$$.fragment),yQr=l(),Q0e=a("span"),xQr=o("FlaxAutoModelForMaskedLM"),rQe=l(),br=a("div"),F(L$.$$.fragment),$Qr=l(),nf=a("p"),kQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),loe=a("a"),SQr=o("from_pretrained()"),RQr=o(" class method or the "),ioe=a("a"),PQr=o("from_config()"),BQr=o(` class
method.`),NQr=l(),y$=a("p"),IQr=o("This class cannot be instantiated directly using "),W0e=a("code"),qQr=o("__init__()"),jQr=o(" (throws an error)."),DQr=l(),Jt=a("div"),F(x$.$$.fragment),GQr=l(),H0e=a("p"),OQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VQr=l(),sf=a("p"),XQr=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),zQr=o("not"),QQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),WQr=o("from_pretrained()"),HQr=o(" to load the model weights."),UQr=l(),F(iw.$$.fragment),JQr=l(),Qr=a("div"),F($$.$$.fragment),YQr=l(),J0e=a("p"),KQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZQr=l(),Cn=a("p"),eWr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),oWr=o("model_type"),rWr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),tWr=o("pretrained_model_name_or_path"),aWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),nWr=o("pretrained_model_name_or_path"),sWr=o(":"),lWr=l(),$e=a("ul"),dw=a("li"),ewe=a("strong"),iWr=o("albert"),dWr=o(" \u2014 "),coe=a("a"),cWr=o("FlaxAlbertForMaskedLM"),fWr=o(" (ALBERT model)"),mWr=l(),cw=a("li"),owe=a("strong"),gWr=o("bart"),hWr=o(" \u2014 "),foe=a("a"),pWr=o("FlaxBartForConditionalGeneration"),_Wr=o(" (BART model)"),uWr=l(),fw=a("li"),rwe=a("strong"),bWr=o("bert"),vWr=o(" \u2014 "),moe=a("a"),FWr=o("FlaxBertForMaskedLM"),TWr=o(" (BERT model)"),MWr=l(),mw=a("li"),twe=a("strong"),EWr=o("big_bird"),CWr=o(" \u2014 "),goe=a("a"),wWr=o("FlaxBigBirdForMaskedLM"),AWr=o(" (BigBird model)"),LWr=l(),gw=a("li"),awe=a("strong"),yWr=o("distilbert"),xWr=o(" \u2014 "),hoe=a("a"),$Wr=o("FlaxDistilBertForMaskedLM"),kWr=o(" (DistilBERT model)"),SWr=l(),hw=a("li"),nwe=a("strong"),RWr=o("electra"),PWr=o(" \u2014 "),poe=a("a"),BWr=o("FlaxElectraForMaskedLM"),NWr=o(" (ELECTRA model)"),IWr=l(),pw=a("li"),swe=a("strong"),qWr=o("mbart"),jWr=o(" \u2014 "),_oe=a("a"),DWr=o("FlaxMBartForConditionalGeneration"),GWr=o(" (mBART model)"),OWr=l(),_w=a("li"),lwe=a("strong"),VWr=o("roberta"),XWr=o(" \u2014 "),uoe=a("a"),zWr=o("FlaxRobertaForMaskedLM"),QWr=o(" (RoBERTa model)"),WWr=l(),uw=a("li"),iwe=a("strong"),HWr=o("roformer"),UWr=o(" \u2014 "),boe=a("a"),JWr=o("FlaxRoFormerForMaskedLM"),YWr=o(" (RoFormer model)"),KWr=l(),bw=a("li"),dwe=a("strong"),ZWr=o("xlm-roberta"),eHr=o(" \u2014 "),voe=a("a"),oHr=o("FlaxXLMRobertaForMaskedLM"),rHr=o(" (XLM-RoBERTa model)"),tHr=l(),F(vw.$$.fragment),tQe=l(),lf=a("h2"),Fw=a("a"),cwe=a("span"),F(k$.$$.fragment),aHr=l(),fwe=a("span"),nHr=o("FlaxAutoModelForSeq2SeqLM"),aQe=l(),vr=a("div"),F(S$.$$.fragment),sHr=l(),df=a("p"),lHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Foe=a("a"),iHr=o("from_pretrained()"),dHr=o(" class method or the "),Toe=a("a"),cHr=o("from_config()"),fHr=o(` class
method.`),mHr=l(),R$=a("p"),gHr=o("This class cannot be instantiated directly using "),mwe=a("code"),hHr=o("__init__()"),pHr=o(" (throws an error)."),_Hr=l(),Yt=a("div"),F(P$.$$.fragment),uHr=l(),gwe=a("p"),bHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vHr=l(),cf=a("p"),FHr=o(`Note:
Loading a model from its configuration file does `),hwe=a("strong"),THr=o("not"),MHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=a("a"),EHr=o("from_pretrained()"),CHr=o(" to load the model weights."),wHr=l(),F(Tw.$$.fragment),AHr=l(),Wr=a("div"),F(B$.$$.fragment),LHr=l(),pwe=a("p"),yHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xHr=l(),wn=a("p"),$Hr=o("The model class to instantiate is selected based on the "),_we=a("code"),kHr=o("model_type"),SHr=o(` property of the config object (either
passed as an argument or loaded from `),uwe=a("code"),RHr=o("pretrained_model_name_or_path"),PHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=a("code"),BHr=o("pretrained_model_name_or_path"),NHr=o(":"),IHr=l(),ke=a("ul"),Mw=a("li"),vwe=a("strong"),qHr=o("bart"),jHr=o(" \u2014 "),Eoe=a("a"),DHr=o("FlaxBartForConditionalGeneration"),GHr=o(" (BART model)"),OHr=l(),Ew=a("li"),Fwe=a("strong"),VHr=o("blenderbot"),XHr=o(" \u2014 "),Coe=a("a"),zHr=o("FlaxBlenderbotForConditionalGeneration"),QHr=o(" (Blenderbot model)"),WHr=l(),Cw=a("li"),Twe=a("strong"),HHr=o("blenderbot-small"),UHr=o(" \u2014 "),woe=a("a"),JHr=o("FlaxBlenderbotSmallForConditionalGeneration"),YHr=o(" (BlenderbotSmall model)"),KHr=l(),ww=a("li"),Mwe=a("strong"),ZHr=o("encoder-decoder"),eUr=o(" \u2014 "),Aoe=a("a"),oUr=o("FlaxEncoderDecoderModel"),rUr=o(" (Encoder decoder model)"),tUr=l(),Aw=a("li"),Ewe=a("strong"),aUr=o("longt5"),nUr=o(" \u2014 "),Loe=a("a"),sUr=o("FlaxLongT5ForConditionalGeneration"),lUr=o(" (LongT5 model)"),iUr=l(),Lw=a("li"),Cwe=a("strong"),dUr=o("marian"),cUr=o(" \u2014 "),yoe=a("a"),fUr=o("FlaxMarianMTModel"),mUr=o(" (Marian model)"),gUr=l(),yw=a("li"),wwe=a("strong"),hUr=o("mbart"),pUr=o(" \u2014 "),xoe=a("a"),_Ur=o("FlaxMBartForConditionalGeneration"),uUr=o(" (mBART model)"),bUr=l(),xw=a("li"),Awe=a("strong"),vUr=o("mt5"),FUr=o(" \u2014 "),$oe=a("a"),TUr=o("FlaxMT5ForConditionalGeneration"),MUr=o(" (MT5 model)"),EUr=l(),$w=a("li"),Lwe=a("strong"),CUr=o("pegasus"),wUr=o(" \u2014 "),koe=a("a"),AUr=o("FlaxPegasusForConditionalGeneration"),LUr=o(" (Pegasus model)"),yUr=l(),kw=a("li"),ywe=a("strong"),xUr=o("t5"),$Ur=o(" \u2014 "),Soe=a("a"),kUr=o("FlaxT5ForConditionalGeneration"),SUr=o(" (T5 model)"),RUr=l(),F(Sw.$$.fragment),nQe=l(),ff=a("h2"),Rw=a("a"),xwe=a("span"),F(N$.$$.fragment),PUr=l(),$we=a("span"),BUr=o("FlaxAutoModelForSequenceClassification"),sQe=l(),Fr=a("div"),F(I$.$$.fragment),NUr=l(),mf=a("p"),IUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Roe=a("a"),qUr=o("from_pretrained()"),jUr=o(" class method or the "),Poe=a("a"),DUr=o("from_config()"),GUr=o(` class
method.`),OUr=l(),q$=a("p"),VUr=o("This class cannot be instantiated directly using "),kwe=a("code"),XUr=o("__init__()"),zUr=o(" (throws an error)."),QUr=l(),Kt=a("div"),F(j$.$$.fragment),WUr=l(),Swe=a("p"),HUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UUr=l(),gf=a("p"),JUr=o(`Note:
Loading a model from its configuration file does `),Rwe=a("strong"),YUr=o("not"),KUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=a("a"),ZUr=o("from_pretrained()"),eJr=o(" to load the model weights."),oJr=l(),F(Pw.$$.fragment),rJr=l(),Hr=a("div"),F(D$.$$.fragment),tJr=l(),Pwe=a("p"),aJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nJr=l(),An=a("p"),sJr=o("The model class to instantiate is selected based on the "),Bwe=a("code"),lJr=o("model_type"),iJr=o(` property of the config object (either
passed as an argument or loaded from `),Nwe=a("code"),dJr=o("pretrained_model_name_or_path"),cJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iwe=a("code"),fJr=o("pretrained_model_name_or_path"),mJr=o(":"),gJr=l(),Se=a("ul"),Bw=a("li"),qwe=a("strong"),hJr=o("albert"),pJr=o(" \u2014 "),Noe=a("a"),_Jr=o("FlaxAlbertForSequenceClassification"),uJr=o(" (ALBERT model)"),bJr=l(),Nw=a("li"),jwe=a("strong"),vJr=o("bart"),FJr=o(" \u2014 "),Ioe=a("a"),TJr=o("FlaxBartForSequenceClassification"),MJr=o(" (BART model)"),EJr=l(),Iw=a("li"),Dwe=a("strong"),CJr=o("bert"),wJr=o(" \u2014 "),qoe=a("a"),AJr=o("FlaxBertForSequenceClassification"),LJr=o(" (BERT model)"),yJr=l(),qw=a("li"),Gwe=a("strong"),xJr=o("big_bird"),$Jr=o(" \u2014 "),joe=a("a"),kJr=o("FlaxBigBirdForSequenceClassification"),SJr=o(" (BigBird model)"),RJr=l(),jw=a("li"),Owe=a("strong"),PJr=o("distilbert"),BJr=o(" \u2014 "),Doe=a("a"),NJr=o("FlaxDistilBertForSequenceClassification"),IJr=o(" (DistilBERT model)"),qJr=l(),Dw=a("li"),Vwe=a("strong"),jJr=o("electra"),DJr=o(" \u2014 "),Goe=a("a"),GJr=o("FlaxElectraForSequenceClassification"),OJr=o(" (ELECTRA model)"),VJr=l(),Gw=a("li"),Xwe=a("strong"),XJr=o("mbart"),zJr=o(" \u2014 "),Ooe=a("a"),QJr=o("FlaxMBartForSequenceClassification"),WJr=o(" (mBART model)"),HJr=l(),Ow=a("li"),zwe=a("strong"),UJr=o("roberta"),JJr=o(" \u2014 "),Voe=a("a"),YJr=o("FlaxRobertaForSequenceClassification"),KJr=o(" (RoBERTa model)"),ZJr=l(),Vw=a("li"),Qwe=a("strong"),eYr=o("roformer"),oYr=o(" \u2014 "),Xoe=a("a"),rYr=o("FlaxRoFormerForSequenceClassification"),tYr=o(" (RoFormer model)"),aYr=l(),Xw=a("li"),Wwe=a("strong"),nYr=o("xlm-roberta"),sYr=o(" \u2014 "),zoe=a("a"),lYr=o("FlaxXLMRobertaForSequenceClassification"),iYr=o(" (XLM-RoBERTa model)"),dYr=l(),F(zw.$$.fragment),lQe=l(),hf=a("h2"),Qw=a("a"),Hwe=a("span"),F(G$.$$.fragment),cYr=l(),Uwe=a("span"),fYr=o("FlaxAutoModelForQuestionAnswering"),iQe=l(),Tr=a("div"),F(O$.$$.fragment),mYr=l(),pf=a("p"),gYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qoe=a("a"),hYr=o("from_pretrained()"),pYr=o(" class method or the "),Woe=a("a"),_Yr=o("from_config()"),uYr=o(` class
method.`),bYr=l(),V$=a("p"),vYr=o("This class cannot be instantiated directly using "),Jwe=a("code"),FYr=o("__init__()"),TYr=o(" (throws an error)."),MYr=l(),Zt=a("div"),F(X$.$$.fragment),EYr=l(),Ywe=a("p"),CYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wYr=l(),_f=a("p"),AYr=o(`Note:
Loading a model from its configuration file does `),Kwe=a("strong"),LYr=o("not"),yYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=a("a"),xYr=o("from_pretrained()"),$Yr=o(" to load the model weights."),kYr=l(),F(Ww.$$.fragment),SYr=l(),Ur=a("div"),F(z$.$$.fragment),RYr=l(),Zwe=a("p"),PYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BYr=l(),Ln=a("p"),NYr=o("The model class to instantiate is selected based on the "),eAe=a("code"),IYr=o("model_type"),qYr=o(` property of the config object (either
passed as an argument or loaded from `),oAe=a("code"),jYr=o("pretrained_model_name_or_path"),DYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rAe=a("code"),GYr=o("pretrained_model_name_or_path"),OYr=o(":"),VYr=l(),Re=a("ul"),Hw=a("li"),tAe=a("strong"),XYr=o("albert"),zYr=o(" \u2014 "),Uoe=a("a"),QYr=o("FlaxAlbertForQuestionAnswering"),WYr=o(" (ALBERT model)"),HYr=l(),Uw=a("li"),aAe=a("strong"),UYr=o("bart"),JYr=o(" \u2014 "),Joe=a("a"),YYr=o("FlaxBartForQuestionAnswering"),KYr=o(" (BART model)"),ZYr=l(),Jw=a("li"),nAe=a("strong"),eKr=o("bert"),oKr=o(" \u2014 "),Yoe=a("a"),rKr=o("FlaxBertForQuestionAnswering"),tKr=o(" (BERT model)"),aKr=l(),Yw=a("li"),sAe=a("strong"),nKr=o("big_bird"),sKr=o(" \u2014 "),Koe=a("a"),lKr=o("FlaxBigBirdForQuestionAnswering"),iKr=o(" (BigBird model)"),dKr=l(),Kw=a("li"),lAe=a("strong"),cKr=o("distilbert"),fKr=o(" \u2014 "),Zoe=a("a"),mKr=o("FlaxDistilBertForQuestionAnswering"),gKr=o(" (DistilBERT model)"),hKr=l(),Zw=a("li"),iAe=a("strong"),pKr=o("electra"),_Kr=o(" \u2014 "),ere=a("a"),uKr=o("FlaxElectraForQuestionAnswering"),bKr=o(" (ELECTRA model)"),vKr=l(),eA=a("li"),dAe=a("strong"),FKr=o("mbart"),TKr=o(" \u2014 "),ore=a("a"),MKr=o("FlaxMBartForQuestionAnswering"),EKr=o(" (mBART model)"),CKr=l(),oA=a("li"),cAe=a("strong"),wKr=o("roberta"),AKr=o(" \u2014 "),rre=a("a"),LKr=o("FlaxRobertaForQuestionAnswering"),yKr=o(" (RoBERTa model)"),xKr=l(),rA=a("li"),fAe=a("strong"),$Kr=o("roformer"),kKr=o(" \u2014 "),tre=a("a"),SKr=o("FlaxRoFormerForQuestionAnswering"),RKr=o(" (RoFormer model)"),PKr=l(),tA=a("li"),mAe=a("strong"),BKr=o("xlm-roberta"),NKr=o(" \u2014 "),are=a("a"),IKr=o("FlaxXLMRobertaForQuestionAnswering"),qKr=o(" (XLM-RoBERTa model)"),jKr=l(),F(aA.$$.fragment),dQe=l(),uf=a("h2"),nA=a("a"),gAe=a("span"),F(Q$.$$.fragment),DKr=l(),hAe=a("span"),GKr=o("FlaxAutoModelForTokenClassification"),cQe=l(),Mr=a("div"),F(W$.$$.fragment),OKr=l(),bf=a("p"),VKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nre=a("a"),XKr=o("from_pretrained()"),zKr=o(" class method or the "),sre=a("a"),QKr=o("from_config()"),WKr=o(` class
method.`),HKr=l(),H$=a("p"),UKr=o("This class cannot be instantiated directly using "),pAe=a("code"),JKr=o("__init__()"),YKr=o(" (throws an error)."),KKr=l(),ea=a("div"),F(U$.$$.fragment),ZKr=l(),_Ae=a("p"),eZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oZr=l(),vf=a("p"),rZr=o(`Note:
Loading a model from its configuration file does `),uAe=a("strong"),tZr=o("not"),aZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=a("a"),nZr=o("from_pretrained()"),sZr=o(" to load the model weights."),lZr=l(),F(sA.$$.fragment),iZr=l(),Jr=a("div"),F(J$.$$.fragment),dZr=l(),bAe=a("p"),cZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fZr=l(),yn=a("p"),mZr=o("The model class to instantiate is selected based on the "),vAe=a("code"),gZr=o("model_type"),hZr=o(` property of the config object (either
passed as an argument or loaded from `),FAe=a("code"),pZr=o("pretrained_model_name_or_path"),_Zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TAe=a("code"),uZr=o("pretrained_model_name_or_path"),bZr=o(":"),vZr=l(),Ve=a("ul"),lA=a("li"),MAe=a("strong"),FZr=o("albert"),TZr=o(" \u2014 "),ire=a("a"),MZr=o("FlaxAlbertForTokenClassification"),EZr=o(" (ALBERT model)"),CZr=l(),iA=a("li"),EAe=a("strong"),wZr=o("bert"),AZr=o(" \u2014 "),dre=a("a"),LZr=o("FlaxBertForTokenClassification"),yZr=o(" (BERT model)"),xZr=l(),dA=a("li"),CAe=a("strong"),$Zr=o("big_bird"),kZr=o(" \u2014 "),cre=a("a"),SZr=o("FlaxBigBirdForTokenClassification"),RZr=o(" (BigBird model)"),PZr=l(),cA=a("li"),wAe=a("strong"),BZr=o("distilbert"),NZr=o(" \u2014 "),fre=a("a"),IZr=o("FlaxDistilBertForTokenClassification"),qZr=o(" (DistilBERT model)"),jZr=l(),fA=a("li"),AAe=a("strong"),DZr=o("electra"),GZr=o(" \u2014 "),mre=a("a"),OZr=o("FlaxElectraForTokenClassification"),VZr=o(" (ELECTRA model)"),XZr=l(),mA=a("li"),LAe=a("strong"),zZr=o("roberta"),QZr=o(" \u2014 "),gre=a("a"),WZr=o("FlaxRobertaForTokenClassification"),HZr=o(" (RoBERTa model)"),UZr=l(),gA=a("li"),yAe=a("strong"),JZr=o("roformer"),YZr=o(" \u2014 "),hre=a("a"),KZr=o("FlaxRoFormerForTokenClassification"),ZZr=o(" (RoFormer model)"),eet=l(),hA=a("li"),xAe=a("strong"),oet=o("xlm-roberta"),ret=o(" \u2014 "),pre=a("a"),tet=o("FlaxXLMRobertaForTokenClassification"),aet=o(" (XLM-RoBERTa model)"),net=l(),F(pA.$$.fragment),fQe=l(),Ff=a("h2"),_A=a("a"),$Ae=a("span"),F(Y$.$$.fragment),set=l(),kAe=a("span"),iet=o("FlaxAutoModelForMultipleChoice"),mQe=l(),Er=a("div"),F(K$.$$.fragment),det=l(),Tf=a("p"),cet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_re=a("a"),fet=o("from_pretrained()"),met=o(" class method or the "),ure=a("a"),get=o("from_config()"),het=o(` class
method.`),pet=l(),Z$=a("p"),_et=o("This class cannot be instantiated directly using "),SAe=a("code"),uet=o("__init__()"),bet=o(" (throws an error)."),vet=l(),oa=a("div"),F(ek.$$.fragment),Fet=l(),RAe=a("p"),Tet=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Met=l(),Mf=a("p"),Eet=o(`Note:
Loading a model from its configuration file does `),PAe=a("strong"),Cet=o("not"),wet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=a("a"),Aet=o("from_pretrained()"),Let=o(" to load the model weights."),yet=l(),F(uA.$$.fragment),xet=l(),Yr=a("div"),F(ok.$$.fragment),$et=l(),BAe=a("p"),ket=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Set=l(),xn=a("p"),Ret=o("The model class to instantiate is selected based on the "),NAe=a("code"),Pet=o("model_type"),Bet=o(` property of the config object (either
passed as an argument or loaded from `),IAe=a("code"),Net=o("pretrained_model_name_or_path"),Iet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qAe=a("code"),qet=o("pretrained_model_name_or_path"),jet=o(":"),Det=l(),Xe=a("ul"),bA=a("li"),jAe=a("strong"),Get=o("albert"),Oet=o(" \u2014 "),vre=a("a"),Vet=o("FlaxAlbertForMultipleChoice"),Xet=o(" (ALBERT model)"),zet=l(),vA=a("li"),DAe=a("strong"),Qet=o("bert"),Wet=o(" \u2014 "),Fre=a("a"),Het=o("FlaxBertForMultipleChoice"),Uet=o(" (BERT model)"),Jet=l(),FA=a("li"),GAe=a("strong"),Yet=o("big_bird"),Ket=o(" \u2014 "),Tre=a("a"),Zet=o("FlaxBigBirdForMultipleChoice"),eot=o(" (BigBird model)"),oot=l(),TA=a("li"),OAe=a("strong"),rot=o("distilbert"),tot=o(" \u2014 "),Mre=a("a"),aot=o("FlaxDistilBertForMultipleChoice"),not=o(" (DistilBERT model)"),sot=l(),MA=a("li"),VAe=a("strong"),lot=o("electra"),iot=o(" \u2014 "),Ere=a("a"),dot=o("FlaxElectraForMultipleChoice"),cot=o(" (ELECTRA model)"),fot=l(),EA=a("li"),XAe=a("strong"),mot=o("roberta"),got=o(" \u2014 "),Cre=a("a"),hot=o("FlaxRobertaForMultipleChoice"),pot=o(" (RoBERTa model)"),_ot=l(),CA=a("li"),zAe=a("strong"),uot=o("roformer"),bot=o(" \u2014 "),wre=a("a"),vot=o("FlaxRoFormerForMultipleChoice"),Fot=o(" (RoFormer model)"),Tot=l(),wA=a("li"),QAe=a("strong"),Mot=o("xlm-roberta"),Eot=o(" \u2014 "),Are=a("a"),Cot=o("FlaxXLMRobertaForMultipleChoice"),wot=o(" (XLM-RoBERTa model)"),Aot=l(),F(AA.$$.fragment),gQe=l(),Ef=a("h2"),LA=a("a"),WAe=a("span"),F(rk.$$.fragment),Lot=l(),HAe=a("span"),yot=o("FlaxAutoModelForNextSentencePrediction"),hQe=l(),Cr=a("div"),F(tk.$$.fragment),xot=l(),Cf=a("p"),$ot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Lre=a("a"),kot=o("from_pretrained()"),Sot=o(" class method or the "),yre=a("a"),Rot=o("from_config()"),Pot=o(` class
method.`),Bot=l(),ak=a("p"),Not=o("This class cannot be instantiated directly using "),UAe=a("code"),Iot=o("__init__()"),qot=o(" (throws an error)."),jot=l(),ra=a("div"),F(nk.$$.fragment),Dot=l(),JAe=a("p"),Got=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oot=l(),wf=a("p"),Vot=o(`Note:
Loading a model from its configuration file does `),YAe=a("strong"),Xot=o("not"),zot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xre=a("a"),Qot=o("from_pretrained()"),Wot=o(" to load the model weights."),Hot=l(),F(yA.$$.fragment),Uot=l(),Kr=a("div"),F(sk.$$.fragment),Jot=l(),KAe=a("p"),Yot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kot=l(),$n=a("p"),Zot=o("The model class to instantiate is selected based on the "),ZAe=a("code"),ert=o("model_type"),ort=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),rrt=o("pretrained_model_name_or_path"),trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),art=o("pretrained_model_name_or_path"),nrt=o(":"),srt=l(),r6e=a("ul"),xA=a("li"),t6e=a("strong"),lrt=o("bert"),irt=o(" \u2014 "),$re=a("a"),drt=o("FlaxBertForNextSentencePrediction"),crt=o(" (BERT model)"),frt=l(),F($A.$$.fragment),pQe=l(),Af=a("h2"),kA=a("a"),a6e=a("span"),F(lk.$$.fragment),mrt=l(),n6e=a("span"),grt=o("FlaxAutoModelForImageClassification"),_Qe=l(),wr=a("div"),F(ik.$$.fragment),hrt=l(),Lf=a("p"),prt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kre=a("a"),_rt=o("from_pretrained()"),urt=o(" class method or the "),Sre=a("a"),brt=o("from_config()"),vrt=o(` class
method.`),Frt=l(),dk=a("p"),Trt=o("This class cannot be instantiated directly using "),s6e=a("code"),Mrt=o("__init__()"),Ert=o(" (throws an error)."),Crt=l(),ta=a("div"),F(ck.$$.fragment),wrt=l(),l6e=a("p"),Art=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lrt=l(),yf=a("p"),yrt=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),xrt=o("not"),$rt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=a("a"),krt=o("from_pretrained()"),Srt=o(" to load the model weights."),Rrt=l(),F(SA.$$.fragment),Prt=l(),Zr=a("div"),F(fk.$$.fragment),Brt=l(),d6e=a("p"),Nrt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Irt=l(),kn=a("p"),qrt=o("The model class to instantiate is selected based on the "),c6e=a("code"),jrt=o("model_type"),Drt=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),Grt=o("pretrained_model_name_or_path"),Ort=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=a("code"),Vrt=o("pretrained_model_name_or_path"),Xrt=o(":"),zrt=l(),mk=a("ul"),RA=a("li"),g6e=a("strong"),Qrt=o("beit"),Wrt=o(" \u2014 "),Pre=a("a"),Hrt=o("FlaxBeitForImageClassification"),Urt=o(" (BEiT model)"),Jrt=l(),PA=a("li"),h6e=a("strong"),Yrt=o("vit"),Krt=o(" \u2014 "),Bre=a("a"),Zrt=o("FlaxViTForImageClassification"),ett=o(" (ViT model)"),ott=l(),F(BA.$$.fragment),uQe=l(),xf=a("h2"),NA=a("a"),p6e=a("span"),F(gk.$$.fragment),rtt=l(),_6e=a("span"),ttt=o("FlaxAutoModelForVision2Seq"),bQe=l(),Ar=a("div"),F(hk.$$.fragment),att=l(),$f=a("p"),ntt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Nre=a("a"),stt=o("from_pretrained()"),ltt=o(" class method or the "),Ire=a("a"),itt=o("from_config()"),dtt=o(` class
method.`),ctt=l(),pk=a("p"),ftt=o("This class cannot be instantiated directly using "),u6e=a("code"),mtt=o("__init__()"),gtt=o(" (throws an error)."),htt=l(),aa=a("div"),F(_k.$$.fragment),ptt=l(),b6e=a("p"),_tt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),utt=l(),kf=a("p"),btt=o(`Note:
Loading a model from its configuration file does `),v6e=a("strong"),vtt=o("not"),Ftt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("a"),Ttt=o("from_pretrained()"),Mtt=o(" to load the model weights."),Ett=l(),F(IA.$$.fragment),Ctt=l(),et=a("div"),F(uk.$$.fragment),wtt=l(),F6e=a("p"),Att=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ltt=l(),Sn=a("p"),ytt=o("The model class to instantiate is selected based on the "),T6e=a("code"),xtt=o("model_type"),$tt=o(` property of the config object (either
passed as an argument or loaded from `),M6e=a("code"),ktt=o("pretrained_model_name_or_path"),Stt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=a("code"),Rtt=o("pretrained_model_name_or_path"),Ptt=o(":"),Btt=l(),C6e=a("ul"),qA=a("li"),w6e=a("strong"),Ntt=o("vision-encoder-decoder"),Itt=o(" \u2014 "),jre=a("a"),qtt=o("FlaxVisionEncoderDecoderModel"),jtt=o(" (Vision Encoder decoder model)"),Dtt=l(),F(jA.$$.fragment),this.h()},l(f){const u=LWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var bk=s(p);m=n(bk,"A",{id:!0,class:!0,href:!0});var A6e=s(m);_=n(A6e,"SPAN",{});var L6e=s(_);T(d.$$.fragment,L6e),L6e.forEach(t),A6e.forEach(t),h=i(bk),Co=n(bk,"SPAN",{});var y6e=s(Co);yi=r(y6e,"Auto Classes"),y6e.forEach(t),bk.forEach(t),Bf=i(f),lt=n(f,"P",{});var vk=s(lt);xi=r(vk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(vk,"CODE",{});var x6e=s($i);aL=r(x6e,"from_pretrained()"),x6e.forEach(t),Nf=r(vk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),vk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var $6e=s(Pn);nL=r($6e,"AutoConfig"),$6e.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var k6e=s(Nn);sL=r(k6e,"AutoModel"),k6e.forEach(t),Si=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var S6e=s(In);lL=r(S6e,"AutoTokenizer"),S6e.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Fk=s(Ae);DS=r(Fk,"will create a model that is an instance of "),Pi=n(Fk,"A",{href:!0});var R6e=s(Pi);GS=r(R6e,"BertModel"),R6e.forEach(t),OS=r(Fk,"."),Fk.forEach(t),wo=i(f),Ra=n(f,"P",{});var Tk=s(Ra);VS=r(Tk,"There is one class of "),qf=n(Tk,"CODE",{});var P6e=s(qf);XS=r(P6e,"AutoModel"),P6e.forEach(t),xHe=r(Tk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Tk.forEach(t),hXe=i(f),Bi=n(f,"H2",{class:!0});var Mk=s(Bi);jf=n(Mk,"A",{id:!0,class:!0,href:!0});var B6e=s(jf);Pae=n(B6e,"SPAN",{});var N6e=s(Pae);T(iL.$$.fragment,N6e),N6e.forEach(t),B6e.forEach(t),$He=i(Mk),Bae=n(Mk,"SPAN",{});var I6e=s(Bae);kHe=r(I6e,"Extending the Auto Classes"),I6e.forEach(t),Mk.forEach(t),pXe=i(f),qn=n(f,"P",{});var Sf=s(qn);SHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Nae=n(Sf,"CODE",{});var q6e=s(Nae);RHe=r(q6e,"NewModel"),q6e.forEach(t),PHe=r(Sf,", make sure you have a "),Iae=n(Sf,"CODE",{});var j6e=s(Iae);BHe=r(j6e,"NewModelConfig"),j6e.forEach(t),NHe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),_Xe=i(f),T(dL.$$.fragment,f),uXe=i(f),zS=n(f,"P",{});var D6e=s(zS);IHe=r(D6e,"You will then be able to use the auto classes like you would usually do!"),D6e.forEach(t),bXe=i(f),T(Df.$$.fragment,f),vXe=i(f),Ni=n(f,"H2",{class:!0});var Ek=s(Ni);Gf=n(Ek,"A",{id:!0,class:!0,href:!0});var G6e=s(Gf);qae=n(G6e,"SPAN",{});var O6e=s(qae);T(cL.$$.fragment,O6e),O6e.forEach(t),G6e.forEach(t),qHe=i(Ek),jae=n(Ek,"SPAN",{});var V6e=s(jae);jHe=r(V6e,"AutoConfig"),V6e.forEach(t),Ek.forEach(t),FXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(fL.$$.fragment,nt),DHe=i(nt),mL=n(nt,"P",{});var Ck=s(mL);GHe=r(Ck,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),QS=n(Ck,"A",{href:!0});var X6e=s(QS);OHe=r(X6e,"from_pretrained()"),X6e.forEach(t),VHe=r(Ck," class method."),Ck.forEach(t),XHe=i(nt),gL=n(nt,"P",{});var wk=s(gL);zHe=r(wk,"This class cannot be instantiated directly using "),Dae=n(wk,"CODE",{});var z6e=s(Dae);QHe=r(z6e,"__init__()"),z6e.forEach(t),WHe=r(wk," (throws an error)."),wk.forEach(t),HHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(hL.$$.fragment,st),UHe=i(st),Gae=n(st,"P",{});var Q6e=s(Gae);JHe=r(Q6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Q6e.forEach(t),YHe=i(st),Ii=n(st,"P",{});var Rf=s(Ii);KHe=r(Rf,"The configuration class to instantiate is selected based on the "),Oae=n(Rf,"CODE",{});var W6e=s(Oae);ZHe=r(W6e,"model_type"),W6e.forEach(t),eUe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vae=n(Rf,"CODE",{});var H6e=s(Vae);oUe=r(H6e,"pretrained_model_name_or_path"),H6e.forEach(t),rUe=r(Rf,":"),Rf.forEach(t),tUe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var DA=s(Of);Xae=n(DA,"STRONG",{});var U6e=s(Xae);aUe=r(U6e,"albert"),U6e.forEach(t),nUe=r(DA," \u2014 "),WS=n(DA,"A",{href:!0});var J6e=s(WS);sUe=r(J6e,"AlbertConfig"),J6e.forEach(t),lUe=r(DA," (ALBERT model)"),DA.forEach(t),iUe=i(L),Vf=n(L,"LI",{});var GA=s(Vf);zae=n(GA,"STRONG",{});var Y6e=s(zae);dUe=r(Y6e,"bart"),Y6e.forEach(t),cUe=r(GA," \u2014 "),HS=n(GA,"A",{href:!0});var K6e=s(HS);fUe=r(K6e,"BartConfig"),K6e.forEach(t),mUe=r(GA," (BART model)"),GA.forEach(t),gUe=i(L),Xf=n(L,"LI",{});var OA=s(Xf);Qae=n(OA,"STRONG",{});var Z6e=s(Qae);hUe=r(Z6e,"beit"),Z6e.forEach(t),pUe=r(OA," \u2014 "),US=n(OA,"A",{href:!0});var e7e=s(US);_Ue=r(e7e,"BeitConfig"),e7e.forEach(t),uUe=r(OA," (BEiT model)"),OA.forEach(t),bUe=i(L),zf=n(L,"LI",{});var VA=s(zf);Wae=n(VA,"STRONG",{});var o7e=s(Wae);vUe=r(o7e,"bert"),o7e.forEach(t),FUe=r(VA," \u2014 "),JS=n(VA,"A",{href:!0});var r7e=s(JS);TUe=r(r7e,"BertConfig"),r7e.forEach(t),MUe=r(VA," (BERT model)"),VA.forEach(t),EUe=i(L),Qf=n(L,"LI",{});var XA=s(Qf);Hae=n(XA,"STRONG",{});var t7e=s(Hae);CUe=r(t7e,"bert-generation"),t7e.forEach(t),wUe=r(XA," \u2014 "),YS=n(XA,"A",{href:!0});var a7e=s(YS);AUe=r(a7e,"BertGenerationConfig"),a7e.forEach(t),LUe=r(XA," (Bert Generation model)"),XA.forEach(t),yUe=i(L),Wf=n(L,"LI",{});var zA=s(Wf);Uae=n(zA,"STRONG",{});var n7e=s(Uae);xUe=r(n7e,"big_bird"),n7e.forEach(t),$Ue=r(zA," \u2014 "),KS=n(zA,"A",{href:!0});var s7e=s(KS);kUe=r(s7e,"BigBirdConfig"),s7e.forEach(t),SUe=r(zA," (BigBird model)"),zA.forEach(t),RUe=i(L),Hf=n(L,"LI",{});var QA=s(Hf);Jae=n(QA,"STRONG",{});var l7e=s(Jae);PUe=r(l7e,"bigbird_pegasus"),l7e.forEach(t),BUe=r(QA," \u2014 "),ZS=n(QA,"A",{href:!0});var i7e=s(ZS);NUe=r(i7e,"BigBirdPegasusConfig"),i7e.forEach(t),IUe=r(QA," (BigBird-Pegasus model)"),QA.forEach(t),qUe=i(L),Uf=n(L,"LI",{});var WA=s(Uf);Yae=n(WA,"STRONG",{});var d7e=s(Yae);jUe=r(d7e,"blenderbot"),d7e.forEach(t),DUe=r(WA," \u2014 "),eR=n(WA,"A",{href:!0});var c7e=s(eR);GUe=r(c7e,"BlenderbotConfig"),c7e.forEach(t),OUe=r(WA," (Blenderbot model)"),WA.forEach(t),VUe=i(L),Jf=n(L,"LI",{});var HA=s(Jf);Kae=n(HA,"STRONG",{});var f7e=s(Kae);XUe=r(f7e,"blenderbot-small"),f7e.forEach(t),zUe=r(HA," \u2014 "),oR=n(HA,"A",{href:!0});var m7e=s(oR);QUe=r(m7e,"BlenderbotSmallConfig"),m7e.forEach(t),WUe=r(HA," (BlenderbotSmall model)"),HA.forEach(t),HUe=i(L),Yf=n(L,"LI",{});var UA=s(Yf);Zae=n(UA,"STRONG",{});var g7e=s(Zae);UUe=r(g7e,"bloom"),g7e.forEach(t),JUe=r(UA," \u2014 "),rR=n(UA,"A",{href:!0});var h7e=s(rR);YUe=r(h7e,"BloomConfig"),h7e.forEach(t),KUe=r(UA," (BLOOM model)"),UA.forEach(t),ZUe=i(L),Kf=n(L,"LI",{});var JA=s(Kf);ene=n(JA,"STRONG",{});var p7e=s(ene);eJe=r(p7e,"camembert"),p7e.forEach(t),oJe=r(JA," \u2014 "),tR=n(JA,"A",{href:!0});var _7e=s(tR);rJe=r(_7e,"CamembertConfig"),_7e.forEach(t),tJe=r(JA," (CamemBERT model)"),JA.forEach(t),aJe=i(L),Zf=n(L,"LI",{});var YA=s(Zf);one=n(YA,"STRONG",{});var u7e=s(one);nJe=r(u7e,"canine"),u7e.forEach(t),sJe=r(YA," \u2014 "),aR=n(YA,"A",{href:!0});var b7e=s(aR);lJe=r(b7e,"CanineConfig"),b7e.forEach(t),iJe=r(YA," (CANINE model)"),YA.forEach(t),dJe=i(L),em=n(L,"LI",{});var KA=s(em);rne=n(KA,"STRONG",{});var v7e=s(rne);cJe=r(v7e,"clip"),v7e.forEach(t),fJe=r(KA," \u2014 "),nR=n(KA,"A",{href:!0});var F7e=s(nR);mJe=r(F7e,"CLIPConfig"),F7e.forEach(t),gJe=r(KA," (CLIP model)"),KA.forEach(t),hJe=i(L),om=n(L,"LI",{});var ZA=s(om);tne=n(ZA,"STRONG",{});var T7e=s(tne);pJe=r(T7e,"codegen"),T7e.forEach(t),_Je=r(ZA," \u2014 "),sR=n(ZA,"A",{href:!0});var M7e=s(sR);uJe=r(M7e,"CodeGenConfig"),M7e.forEach(t),bJe=r(ZA," (CodeGen model)"),ZA.forEach(t),vJe=i(L),rm=n(L,"LI",{});var e6=s(rm);ane=n(e6,"STRONG",{});var E7e=s(ane);FJe=r(E7e,"convbert"),E7e.forEach(t),TJe=r(e6," \u2014 "),lR=n(e6,"A",{href:!0});var C7e=s(lR);MJe=r(C7e,"ConvBertConfig"),C7e.forEach(t),EJe=r(e6," (ConvBERT model)"),e6.forEach(t),CJe=i(L),tm=n(L,"LI",{});var o6=s(tm);nne=n(o6,"STRONG",{});var w7e=s(nne);wJe=r(w7e,"convnext"),w7e.forEach(t),AJe=r(o6," \u2014 "),iR=n(o6,"A",{href:!0});var A7e=s(iR);LJe=r(A7e,"ConvNextConfig"),A7e.forEach(t),yJe=r(o6," (ConvNeXT model)"),o6.forEach(t),xJe=i(L),am=n(L,"LI",{});var r6=s(am);sne=n(r6,"STRONG",{});var L7e=s(sne);$Je=r(L7e,"ctrl"),L7e.forEach(t),kJe=r(r6," \u2014 "),dR=n(r6,"A",{href:!0});var y7e=s(dR);SJe=r(y7e,"CTRLConfig"),y7e.forEach(t),RJe=r(r6," (CTRL model)"),r6.forEach(t),PJe=i(L),nm=n(L,"LI",{});var t6=s(nm);lne=n(t6,"STRONG",{});var x7e=s(lne);BJe=r(x7e,"cvt"),x7e.forEach(t),NJe=r(t6," \u2014 "),cR=n(t6,"A",{href:!0});var $7e=s(cR);IJe=r($7e,"CvtConfig"),$7e.forEach(t),qJe=r(t6," (CvT model)"),t6.forEach(t),jJe=i(L),sm=n(L,"LI",{});var a6=s(sm);ine=n(a6,"STRONG",{});var k7e=s(ine);DJe=r(k7e,"data2vec-audio"),k7e.forEach(t),GJe=r(a6," \u2014 "),fR=n(a6,"A",{href:!0});var S7e=s(fR);OJe=r(S7e,"Data2VecAudioConfig"),S7e.forEach(t),VJe=r(a6," (Data2VecAudio model)"),a6.forEach(t),XJe=i(L),lm=n(L,"LI",{});var n6=s(lm);dne=n(n6,"STRONG",{});var R7e=s(dne);zJe=r(R7e,"data2vec-text"),R7e.forEach(t),QJe=r(n6," \u2014 "),mR=n(n6,"A",{href:!0});var P7e=s(mR);WJe=r(P7e,"Data2VecTextConfig"),P7e.forEach(t),HJe=r(n6," (Data2VecText model)"),n6.forEach(t),UJe=i(L),im=n(L,"LI",{});var s6=s(im);cne=n(s6,"STRONG",{});var B7e=s(cne);JJe=r(B7e,"data2vec-vision"),B7e.forEach(t),YJe=r(s6," \u2014 "),gR=n(s6,"A",{href:!0});var N7e=s(gR);KJe=r(N7e,"Data2VecVisionConfig"),N7e.forEach(t),ZJe=r(s6," (Data2VecVision model)"),s6.forEach(t),eYe=i(L),dm=n(L,"LI",{});var l6=s(dm);fne=n(l6,"STRONG",{});var I7e=s(fne);oYe=r(I7e,"deberta"),I7e.forEach(t),rYe=r(l6," \u2014 "),hR=n(l6,"A",{href:!0});var q7e=s(hR);tYe=r(q7e,"DebertaConfig"),q7e.forEach(t),aYe=r(l6," (DeBERTa model)"),l6.forEach(t),nYe=i(L),cm=n(L,"LI",{});var i6=s(cm);mne=n(i6,"STRONG",{});var j7e=s(mne);sYe=r(j7e,"deberta-v2"),j7e.forEach(t),lYe=r(i6," \u2014 "),pR=n(i6,"A",{href:!0});var D7e=s(pR);iYe=r(D7e,"DebertaV2Config"),D7e.forEach(t),dYe=r(i6," (DeBERTa-v2 model)"),i6.forEach(t),cYe=i(L),fm=n(L,"LI",{});var d6=s(fm);gne=n(d6,"STRONG",{});var Ott=s(gne);fYe=r(Ott,"decision_transformer"),Ott.forEach(t),mYe=r(d6," \u2014 "),_R=n(d6,"A",{href:!0});var Vtt=s(_R);gYe=r(Vtt,"DecisionTransformerConfig"),Vtt.forEach(t),hYe=r(d6," (Decision Transformer model)"),d6.forEach(t),pYe=i(L),mm=n(L,"LI",{});var G7e=s(mm);hne=n(G7e,"STRONG",{});var Xtt=s(hne);_Ye=r(Xtt,"deit"),Xtt.forEach(t),uYe=r(G7e," \u2014 "),uR=n(G7e,"A",{href:!0});var ztt=s(uR);bYe=r(ztt,"DeiTConfig"),ztt.forEach(t),vYe=r(G7e," (DeiT model)"),G7e.forEach(t),FYe=i(L),gm=n(L,"LI",{});var O7e=s(gm);pne=n(O7e,"STRONG",{});var Qtt=s(pne);TYe=r(Qtt,"detr"),Qtt.forEach(t),MYe=r(O7e," \u2014 "),bR=n(O7e,"A",{href:!0});var Wtt=s(bR);EYe=r(Wtt,"DetrConfig"),Wtt.forEach(t),CYe=r(O7e," (DETR model)"),O7e.forEach(t),wYe=i(L),hm=n(L,"LI",{});var V7e=s(hm);_ne=n(V7e,"STRONG",{});var Htt=s(_ne);AYe=r(Htt,"distilbert"),Htt.forEach(t),LYe=r(V7e," \u2014 "),vR=n(V7e,"A",{href:!0});var Utt=s(vR);yYe=r(Utt,"DistilBertConfig"),Utt.forEach(t),xYe=r(V7e," (DistilBERT model)"),V7e.forEach(t),$Ye=i(L),pm=n(L,"LI",{});var X7e=s(pm);une=n(X7e,"STRONG",{});var Jtt=s(une);kYe=r(Jtt,"dpr"),Jtt.forEach(t),SYe=r(X7e," \u2014 "),FR=n(X7e,"A",{href:!0});var Ytt=s(FR);RYe=r(Ytt,"DPRConfig"),Ytt.forEach(t),PYe=r(X7e," (DPR model)"),X7e.forEach(t),BYe=i(L),_m=n(L,"LI",{});var z7e=s(_m);bne=n(z7e,"STRONG",{});var Ktt=s(bne);NYe=r(Ktt,"dpt"),Ktt.forEach(t),IYe=r(z7e," \u2014 "),TR=n(z7e,"A",{href:!0});var Ztt=s(TR);qYe=r(Ztt,"DPTConfig"),Ztt.forEach(t),jYe=r(z7e," (DPT model)"),z7e.forEach(t),DYe=i(L),um=n(L,"LI",{});var Q7e=s(um);vne=n(Q7e,"STRONG",{});var eat=s(vne);GYe=r(eat,"electra"),eat.forEach(t),OYe=r(Q7e," \u2014 "),MR=n(Q7e,"A",{href:!0});var oat=s(MR);VYe=r(oat,"ElectraConfig"),oat.forEach(t),XYe=r(Q7e," (ELECTRA model)"),Q7e.forEach(t),zYe=i(L),bm=n(L,"LI",{});var W7e=s(bm);Fne=n(W7e,"STRONG",{});var rat=s(Fne);QYe=r(rat,"encoder-decoder"),rat.forEach(t),WYe=r(W7e," \u2014 "),ER=n(W7e,"A",{href:!0});var tat=s(ER);HYe=r(tat,"EncoderDecoderConfig"),tat.forEach(t),UYe=r(W7e," (Encoder decoder model)"),W7e.forEach(t),JYe=i(L),vm=n(L,"LI",{});var H7e=s(vm);Tne=n(H7e,"STRONG",{});var aat=s(Tne);YYe=r(aat,"flaubert"),aat.forEach(t),KYe=r(H7e," \u2014 "),CR=n(H7e,"A",{href:!0});var nat=s(CR);ZYe=r(nat,"FlaubertConfig"),nat.forEach(t),eKe=r(H7e," (FlauBERT model)"),H7e.forEach(t),oKe=i(L),Fm=n(L,"LI",{});var U7e=s(Fm);Mne=n(U7e,"STRONG",{});var sat=s(Mne);rKe=r(sat,"flava"),sat.forEach(t),tKe=r(U7e," \u2014 "),wR=n(U7e,"A",{href:!0});var lat=s(wR);aKe=r(lat,"FlavaConfig"),lat.forEach(t),nKe=r(U7e," (FLAVA model)"),U7e.forEach(t),sKe=i(L),Tm=n(L,"LI",{});var J7e=s(Tm);Ene=n(J7e,"STRONG",{});var iat=s(Ene);lKe=r(iat,"fnet"),iat.forEach(t),iKe=r(J7e," \u2014 "),AR=n(J7e,"A",{href:!0});var dat=s(AR);dKe=r(dat,"FNetConfig"),dat.forEach(t),cKe=r(J7e," (FNet model)"),J7e.forEach(t),fKe=i(L),Mm=n(L,"LI",{});var Y7e=s(Mm);Cne=n(Y7e,"STRONG",{});var cat=s(Cne);mKe=r(cat,"fsmt"),cat.forEach(t),gKe=r(Y7e," \u2014 "),LR=n(Y7e,"A",{href:!0});var fat=s(LR);hKe=r(fat,"FSMTConfig"),fat.forEach(t),pKe=r(Y7e," (FairSeq Machine-Translation model)"),Y7e.forEach(t),_Ke=i(L),Em=n(L,"LI",{});var K7e=s(Em);wne=n(K7e,"STRONG",{});var mat=s(wne);uKe=r(mat,"funnel"),mat.forEach(t),bKe=r(K7e," \u2014 "),yR=n(K7e,"A",{href:!0});var gat=s(yR);vKe=r(gat,"FunnelConfig"),gat.forEach(t),FKe=r(K7e," (Funnel Transformer model)"),K7e.forEach(t),TKe=i(L),Cm=n(L,"LI",{});var Z7e=s(Cm);Ane=n(Z7e,"STRONG",{});var hat=s(Ane);MKe=r(hat,"glpn"),hat.forEach(t),EKe=r(Z7e," \u2014 "),xR=n(Z7e,"A",{href:!0});var pat=s(xR);CKe=r(pat,"GLPNConfig"),pat.forEach(t),wKe=r(Z7e," (GLPN model)"),Z7e.forEach(t),AKe=i(L),wm=n(L,"LI",{});var eLe=s(wm);Lne=n(eLe,"STRONG",{});var _at=s(Lne);LKe=r(_at,"gpt2"),_at.forEach(t),yKe=r(eLe," \u2014 "),$R=n(eLe,"A",{href:!0});var uat=s($R);xKe=r(uat,"GPT2Config"),uat.forEach(t),$Ke=r(eLe," (OpenAI GPT-2 model)"),eLe.forEach(t),kKe=i(L),Am=n(L,"LI",{});var oLe=s(Am);yne=n(oLe,"STRONG",{});var bat=s(yne);SKe=r(bat,"gpt_neo"),bat.forEach(t),RKe=r(oLe," \u2014 "),kR=n(oLe,"A",{href:!0});var vat=s(kR);PKe=r(vat,"GPTNeoConfig"),vat.forEach(t),BKe=r(oLe," (GPT Neo model)"),oLe.forEach(t),NKe=i(L),Lm=n(L,"LI",{});var rLe=s(Lm);xne=n(rLe,"STRONG",{});var Fat=s(xne);IKe=r(Fat,"gpt_neox"),Fat.forEach(t),qKe=r(rLe," \u2014 "),SR=n(rLe,"A",{href:!0});var Tat=s(SR);jKe=r(Tat,"GPTNeoXConfig"),Tat.forEach(t),DKe=r(rLe," (GPT NeoX model)"),rLe.forEach(t),GKe=i(L),ym=n(L,"LI",{});var tLe=s(ym);$ne=n(tLe,"STRONG",{});var Mat=s($ne);OKe=r(Mat,"gptj"),Mat.forEach(t),VKe=r(tLe," \u2014 "),RR=n(tLe,"A",{href:!0});var Eat=s(RR);XKe=r(Eat,"GPTJConfig"),Eat.forEach(t),zKe=r(tLe," (GPT-J model)"),tLe.forEach(t),QKe=i(L),xm=n(L,"LI",{});var aLe=s(xm);kne=n(aLe,"STRONG",{});var Cat=s(kne);WKe=r(Cat,"groupvit"),Cat.forEach(t),HKe=r(aLe," \u2014 "),PR=n(aLe,"A",{href:!0});var wat=s(PR);UKe=r(wat,"GroupViTConfig"),wat.forEach(t),JKe=r(aLe," (GroupViT model)"),aLe.forEach(t),YKe=i(L),$m=n(L,"LI",{});var nLe=s($m);Sne=n(nLe,"STRONG",{});var Aat=s(Sne);KKe=r(Aat,"hubert"),Aat.forEach(t),ZKe=r(nLe," \u2014 "),BR=n(nLe,"A",{href:!0});var Lat=s(BR);eZe=r(Lat,"HubertConfig"),Lat.forEach(t),oZe=r(nLe," (Hubert model)"),nLe.forEach(t),rZe=i(L),km=n(L,"LI",{});var sLe=s(km);Rne=n(sLe,"STRONG",{});var yat=s(Rne);tZe=r(yat,"ibert"),yat.forEach(t),aZe=r(sLe," \u2014 "),NR=n(sLe,"A",{href:!0});var xat=s(NR);nZe=r(xat,"IBertConfig"),xat.forEach(t),sZe=r(sLe," (I-BERT model)"),sLe.forEach(t),lZe=i(L),Sm=n(L,"LI",{});var lLe=s(Sm);Pne=n(lLe,"STRONG",{});var $at=s(Pne);iZe=r($at,"imagegpt"),$at.forEach(t),dZe=r(lLe," \u2014 "),IR=n(lLe,"A",{href:!0});var kat=s(IR);cZe=r(kat,"ImageGPTConfig"),kat.forEach(t),fZe=r(lLe," (ImageGPT model)"),lLe.forEach(t),mZe=i(L),Rm=n(L,"LI",{});var iLe=s(Rm);Bne=n(iLe,"STRONG",{});var Sat=s(Bne);gZe=r(Sat,"layoutlm"),Sat.forEach(t),hZe=r(iLe," \u2014 "),qR=n(iLe,"A",{href:!0});var Rat=s(qR);pZe=r(Rat,"LayoutLMConfig"),Rat.forEach(t),_Ze=r(iLe," (LayoutLM model)"),iLe.forEach(t),uZe=i(L),Pm=n(L,"LI",{});var dLe=s(Pm);Nne=n(dLe,"STRONG",{});var Pat=s(Nne);bZe=r(Pat,"layoutlmv2"),Pat.forEach(t),vZe=r(dLe," \u2014 "),jR=n(dLe,"A",{href:!0});var Bat=s(jR);FZe=r(Bat,"LayoutLMv2Config"),Bat.forEach(t),TZe=r(dLe," (LayoutLMv2 model)"),dLe.forEach(t),MZe=i(L),Bm=n(L,"LI",{});var cLe=s(Bm);Ine=n(cLe,"STRONG",{});var Nat=s(Ine);EZe=r(Nat,"layoutlmv3"),Nat.forEach(t),CZe=r(cLe," \u2014 "),DR=n(cLe,"A",{href:!0});var Iat=s(DR);wZe=r(Iat,"LayoutLMv3Config"),Iat.forEach(t),AZe=r(cLe," (LayoutLMv3 model)"),cLe.forEach(t),LZe=i(L),Nm=n(L,"LI",{});var fLe=s(Nm);qne=n(fLe,"STRONG",{});var qat=s(qne);yZe=r(qat,"led"),qat.forEach(t),xZe=r(fLe," \u2014 "),GR=n(fLe,"A",{href:!0});var jat=s(GR);$Ze=r(jat,"LEDConfig"),jat.forEach(t),kZe=r(fLe," (LED model)"),fLe.forEach(t),SZe=i(L),Im=n(L,"LI",{});var mLe=s(Im);jne=n(mLe,"STRONG",{});var Dat=s(jne);RZe=r(Dat,"levit"),Dat.forEach(t),PZe=r(mLe," \u2014 "),OR=n(mLe,"A",{href:!0});var Gat=s(OR);BZe=r(Gat,"LevitConfig"),Gat.forEach(t),NZe=r(mLe," (LeViT model)"),mLe.forEach(t),IZe=i(L),qm=n(L,"LI",{});var gLe=s(qm);Dne=n(gLe,"STRONG",{});var Oat=s(Dne);qZe=r(Oat,"longformer"),Oat.forEach(t),jZe=r(gLe," \u2014 "),VR=n(gLe,"A",{href:!0});var Vat=s(VR);DZe=r(Vat,"LongformerConfig"),Vat.forEach(t),GZe=r(gLe," (Longformer model)"),gLe.forEach(t),OZe=i(L),jm=n(L,"LI",{});var hLe=s(jm);Gne=n(hLe,"STRONG",{});var Xat=s(Gne);VZe=r(Xat,"longt5"),Xat.forEach(t),XZe=r(hLe," \u2014 "),XR=n(hLe,"A",{href:!0});var zat=s(XR);zZe=r(zat,"LongT5Config"),zat.forEach(t),QZe=r(hLe," (LongT5 model)"),hLe.forEach(t),WZe=i(L),Dm=n(L,"LI",{});var pLe=s(Dm);One=n(pLe,"STRONG",{});var Qat=s(One);HZe=r(Qat,"luke"),Qat.forEach(t),UZe=r(pLe," \u2014 "),zR=n(pLe,"A",{href:!0});var Wat=s(zR);JZe=r(Wat,"LukeConfig"),Wat.forEach(t),YZe=r(pLe," (LUKE model)"),pLe.forEach(t),KZe=i(L),Gm=n(L,"LI",{});var _Le=s(Gm);Vne=n(_Le,"STRONG",{});var Hat=s(Vne);ZZe=r(Hat,"lxmert"),Hat.forEach(t),eeo=r(_Le," \u2014 "),QR=n(_Le,"A",{href:!0});var Uat=s(QR);oeo=r(Uat,"LxmertConfig"),Uat.forEach(t),reo=r(_Le," (LXMERT model)"),_Le.forEach(t),teo=i(L),Om=n(L,"LI",{});var uLe=s(Om);Xne=n(uLe,"STRONG",{});var Jat=s(Xne);aeo=r(Jat,"m2m_100"),Jat.forEach(t),neo=r(uLe," \u2014 "),WR=n(uLe,"A",{href:!0});var Yat=s(WR);seo=r(Yat,"M2M100Config"),Yat.forEach(t),leo=r(uLe," (M2M100 model)"),uLe.forEach(t),ieo=i(L),Vm=n(L,"LI",{});var bLe=s(Vm);zne=n(bLe,"STRONG",{});var Kat=s(zne);deo=r(Kat,"marian"),Kat.forEach(t),ceo=r(bLe," \u2014 "),HR=n(bLe,"A",{href:!0});var Zat=s(HR);feo=r(Zat,"MarianConfig"),Zat.forEach(t),meo=r(bLe," (Marian model)"),bLe.forEach(t),geo=i(L),Xm=n(L,"LI",{});var vLe=s(Xm);Qne=n(vLe,"STRONG",{});var ent=s(Qne);heo=r(ent,"maskformer"),ent.forEach(t),peo=r(vLe," \u2014 "),UR=n(vLe,"A",{href:!0});var ont=s(UR);_eo=r(ont,"MaskFormerConfig"),ont.forEach(t),ueo=r(vLe," (MaskFormer model)"),vLe.forEach(t),beo=i(L),zm=n(L,"LI",{});var FLe=s(zm);Wne=n(FLe,"STRONG",{});var rnt=s(Wne);veo=r(rnt,"mbart"),rnt.forEach(t),Feo=r(FLe," \u2014 "),JR=n(FLe,"A",{href:!0});var tnt=s(JR);Teo=r(tnt,"MBartConfig"),tnt.forEach(t),Meo=r(FLe," (mBART model)"),FLe.forEach(t),Eeo=i(L),Qm=n(L,"LI",{});var TLe=s(Qm);Hne=n(TLe,"STRONG",{});var ant=s(Hne);Ceo=r(ant,"mctct"),ant.forEach(t),weo=r(TLe," \u2014 "),YR=n(TLe,"A",{href:!0});var nnt=s(YR);Aeo=r(nnt,"MCTCTConfig"),nnt.forEach(t),Leo=r(TLe," (M-CTC-T model)"),TLe.forEach(t),yeo=i(L),Wm=n(L,"LI",{});var MLe=s(Wm);Une=n(MLe,"STRONG",{});var snt=s(Une);xeo=r(snt,"megatron-bert"),snt.forEach(t),$eo=r(MLe," \u2014 "),KR=n(MLe,"A",{href:!0});var lnt=s(KR);keo=r(lnt,"MegatronBertConfig"),lnt.forEach(t),Seo=r(MLe," (Megatron-BERT model)"),MLe.forEach(t),Reo=i(L),Hm=n(L,"LI",{});var ELe=s(Hm);Jne=n(ELe,"STRONG",{});var int=s(Jne);Peo=r(int,"mobilebert"),int.forEach(t),Beo=r(ELe," \u2014 "),ZR=n(ELe,"A",{href:!0});var dnt=s(ZR);Neo=r(dnt,"MobileBertConfig"),dnt.forEach(t),Ieo=r(ELe," (MobileBERT model)"),ELe.forEach(t),qeo=i(L),Um=n(L,"LI",{});var CLe=s(Um);Yne=n(CLe,"STRONG",{});var cnt=s(Yne);jeo=r(cnt,"mobilevit"),cnt.forEach(t),Deo=r(CLe," \u2014 "),eP=n(CLe,"A",{href:!0});var fnt=s(eP);Geo=r(fnt,"MobileViTConfig"),fnt.forEach(t),Oeo=r(CLe," (MobileViT model)"),CLe.forEach(t),Veo=i(L),Jm=n(L,"LI",{});var wLe=s(Jm);Kne=n(wLe,"STRONG",{});var mnt=s(Kne);Xeo=r(mnt,"mpnet"),mnt.forEach(t),zeo=r(wLe," \u2014 "),oP=n(wLe,"A",{href:!0});var gnt=s(oP);Qeo=r(gnt,"MPNetConfig"),gnt.forEach(t),Weo=r(wLe," (MPNet model)"),wLe.forEach(t),Heo=i(L),Ym=n(L,"LI",{});var ALe=s(Ym);Zne=n(ALe,"STRONG",{});var hnt=s(Zne);Ueo=r(hnt,"mt5"),hnt.forEach(t),Jeo=r(ALe," \u2014 "),rP=n(ALe,"A",{href:!0});var pnt=s(rP);Yeo=r(pnt,"MT5Config"),pnt.forEach(t),Keo=r(ALe," (MT5 model)"),ALe.forEach(t),Zeo=i(L),Km=n(L,"LI",{});var LLe=s(Km);ese=n(LLe,"STRONG",{});var _nt=s(ese);eoo=r(_nt,"mvp"),_nt.forEach(t),ooo=r(LLe," \u2014 "),tP=n(LLe,"A",{href:!0});var unt=s(tP);roo=r(unt,"MvpConfig"),unt.forEach(t),too=r(LLe," (MVP model)"),LLe.forEach(t),aoo=i(L),Zm=n(L,"LI",{});var yLe=s(Zm);ose=n(yLe,"STRONG",{});var bnt=s(ose);noo=r(bnt,"nezha"),bnt.forEach(t),soo=r(yLe," \u2014 "),aP=n(yLe,"A",{href:!0});var vnt=s(aP);loo=r(vnt,"NezhaConfig"),vnt.forEach(t),ioo=r(yLe," (Nezha model)"),yLe.forEach(t),doo=i(L),eg=n(L,"LI",{});var xLe=s(eg);rse=n(xLe,"STRONG",{});var Fnt=s(rse);coo=r(Fnt,"nystromformer"),Fnt.forEach(t),foo=r(xLe," \u2014 "),nP=n(xLe,"A",{href:!0});var Tnt=s(nP);moo=r(Tnt,"NystromformerConfig"),Tnt.forEach(t),goo=r(xLe," (Nystr\xF6mformer model)"),xLe.forEach(t),hoo=i(L),og=n(L,"LI",{});var $Le=s(og);tse=n($Le,"STRONG",{});var Mnt=s(tse);poo=r(Mnt,"openai-gpt"),Mnt.forEach(t),_oo=r($Le," \u2014 "),sP=n($Le,"A",{href:!0});var Ent=s(sP);uoo=r(Ent,"OpenAIGPTConfig"),Ent.forEach(t),boo=r($Le," (OpenAI GPT model)"),$Le.forEach(t),voo=i(L),rg=n(L,"LI",{});var kLe=s(rg);ase=n(kLe,"STRONG",{});var Cnt=s(ase);Foo=r(Cnt,"opt"),Cnt.forEach(t),Too=r(kLe," \u2014 "),lP=n(kLe,"A",{href:!0});var wnt=s(lP);Moo=r(wnt,"OPTConfig"),wnt.forEach(t),Eoo=r(kLe," (OPT model)"),kLe.forEach(t),Coo=i(L),tg=n(L,"LI",{});var SLe=s(tg);nse=n(SLe,"STRONG",{});var Ant=s(nse);woo=r(Ant,"pegasus"),Ant.forEach(t),Aoo=r(SLe," \u2014 "),iP=n(SLe,"A",{href:!0});var Lnt=s(iP);Loo=r(Lnt,"PegasusConfig"),Lnt.forEach(t),yoo=r(SLe," (Pegasus model)"),SLe.forEach(t),xoo=i(L),ag=n(L,"LI",{});var RLe=s(ag);sse=n(RLe,"STRONG",{});var ynt=s(sse);$oo=r(ynt,"perceiver"),ynt.forEach(t),koo=r(RLe," \u2014 "),dP=n(RLe,"A",{href:!0});var xnt=s(dP);Soo=r(xnt,"PerceiverConfig"),xnt.forEach(t),Roo=r(RLe," (Perceiver model)"),RLe.forEach(t),Poo=i(L),ng=n(L,"LI",{});var PLe=s(ng);lse=n(PLe,"STRONG",{});var $nt=s(lse);Boo=r($nt,"plbart"),$nt.forEach(t),Noo=r(PLe," \u2014 "),cP=n(PLe,"A",{href:!0});var knt=s(cP);Ioo=r(knt,"PLBartConfig"),knt.forEach(t),qoo=r(PLe," (PLBart model)"),PLe.forEach(t),joo=i(L),sg=n(L,"LI",{});var BLe=s(sg);ise=n(BLe,"STRONG",{});var Snt=s(ise);Doo=r(Snt,"poolformer"),Snt.forEach(t),Goo=r(BLe," \u2014 "),fP=n(BLe,"A",{href:!0});var Rnt=s(fP);Ooo=r(Rnt,"PoolFormerConfig"),Rnt.forEach(t),Voo=r(BLe," (PoolFormer model)"),BLe.forEach(t),Xoo=i(L),lg=n(L,"LI",{});var NLe=s(lg);dse=n(NLe,"STRONG",{});var Pnt=s(dse);zoo=r(Pnt,"prophetnet"),Pnt.forEach(t),Qoo=r(NLe," \u2014 "),mP=n(NLe,"A",{href:!0});var Bnt=s(mP);Woo=r(Bnt,"ProphetNetConfig"),Bnt.forEach(t),Hoo=r(NLe," (ProphetNet model)"),NLe.forEach(t),Uoo=i(L),ig=n(L,"LI",{});var ILe=s(ig);cse=n(ILe,"STRONG",{});var Nnt=s(cse);Joo=r(Nnt,"qdqbert"),Nnt.forEach(t),Yoo=r(ILe," \u2014 "),gP=n(ILe,"A",{href:!0});var Int=s(gP);Koo=r(Int,"QDQBertConfig"),Int.forEach(t),Zoo=r(ILe," (QDQBert model)"),ILe.forEach(t),ero=i(L),dg=n(L,"LI",{});var qLe=s(dg);fse=n(qLe,"STRONG",{});var qnt=s(fse);oro=r(qnt,"rag"),qnt.forEach(t),rro=r(qLe," \u2014 "),hP=n(qLe,"A",{href:!0});var jnt=s(hP);tro=r(jnt,"RagConfig"),jnt.forEach(t),aro=r(qLe," (RAG model)"),qLe.forEach(t),nro=i(L),cg=n(L,"LI",{});var jLe=s(cg);mse=n(jLe,"STRONG",{});var Dnt=s(mse);sro=r(Dnt,"realm"),Dnt.forEach(t),lro=r(jLe," \u2014 "),pP=n(jLe,"A",{href:!0});var Gnt=s(pP);iro=r(Gnt,"RealmConfig"),Gnt.forEach(t),dro=r(jLe," (REALM model)"),jLe.forEach(t),cro=i(L),fg=n(L,"LI",{});var DLe=s(fg);gse=n(DLe,"STRONG",{});var Ont=s(gse);fro=r(Ont,"reformer"),Ont.forEach(t),mro=r(DLe," \u2014 "),_P=n(DLe,"A",{href:!0});var Vnt=s(_P);gro=r(Vnt,"ReformerConfig"),Vnt.forEach(t),hro=r(DLe," (Reformer model)"),DLe.forEach(t),pro=i(L),mg=n(L,"LI",{});var GLe=s(mg);hse=n(GLe,"STRONG",{});var Xnt=s(hse);_ro=r(Xnt,"regnet"),Xnt.forEach(t),uro=r(GLe," \u2014 "),uP=n(GLe,"A",{href:!0});var znt=s(uP);bro=r(znt,"RegNetConfig"),znt.forEach(t),vro=r(GLe," (RegNet model)"),GLe.forEach(t),Fro=i(L),gg=n(L,"LI",{});var OLe=s(gg);pse=n(OLe,"STRONG",{});var Qnt=s(pse);Tro=r(Qnt,"rembert"),Qnt.forEach(t),Mro=r(OLe," \u2014 "),bP=n(OLe,"A",{href:!0});var Wnt=s(bP);Ero=r(Wnt,"RemBertConfig"),Wnt.forEach(t),Cro=r(OLe," (RemBERT model)"),OLe.forEach(t),wro=i(L),hg=n(L,"LI",{});var VLe=s(hg);_se=n(VLe,"STRONG",{});var Hnt=s(_se);Aro=r(Hnt,"resnet"),Hnt.forEach(t),Lro=r(VLe," \u2014 "),vP=n(VLe,"A",{href:!0});var Unt=s(vP);yro=r(Unt,"ResNetConfig"),Unt.forEach(t),xro=r(VLe," (ResNet model)"),VLe.forEach(t),$ro=i(L),pg=n(L,"LI",{});var XLe=s(pg);use=n(XLe,"STRONG",{});var Jnt=s(use);kro=r(Jnt,"retribert"),Jnt.forEach(t),Sro=r(XLe," \u2014 "),FP=n(XLe,"A",{href:!0});var Ynt=s(FP);Rro=r(Ynt,"RetriBertConfig"),Ynt.forEach(t),Pro=r(XLe," (RetriBERT model)"),XLe.forEach(t),Bro=i(L),_g=n(L,"LI",{});var zLe=s(_g);bse=n(zLe,"STRONG",{});var Knt=s(bse);Nro=r(Knt,"roberta"),Knt.forEach(t),Iro=r(zLe," \u2014 "),TP=n(zLe,"A",{href:!0});var Znt=s(TP);qro=r(Znt,"RobertaConfig"),Znt.forEach(t),jro=r(zLe," (RoBERTa model)"),zLe.forEach(t),Dro=i(L),ug=n(L,"LI",{});var QLe=s(ug);vse=n(QLe,"STRONG",{});var est=s(vse);Gro=r(est,"roformer"),est.forEach(t),Oro=r(QLe," \u2014 "),MP=n(QLe,"A",{href:!0});var ost=s(MP);Vro=r(ost,"RoFormerConfig"),ost.forEach(t),Xro=r(QLe," (RoFormer model)"),QLe.forEach(t),zro=i(L),bg=n(L,"LI",{});var WLe=s(bg);Fse=n(WLe,"STRONG",{});var rst=s(Fse);Qro=r(rst,"segformer"),rst.forEach(t),Wro=r(WLe," \u2014 "),EP=n(WLe,"A",{href:!0});var tst=s(EP);Hro=r(tst,"SegformerConfig"),tst.forEach(t),Uro=r(WLe," (SegFormer model)"),WLe.forEach(t),Jro=i(L),vg=n(L,"LI",{});var HLe=s(vg);Tse=n(HLe,"STRONG",{});var ast=s(Tse);Yro=r(ast,"sew"),ast.forEach(t),Kro=r(HLe," \u2014 "),CP=n(HLe,"A",{href:!0});var nst=s(CP);Zro=r(nst,"SEWConfig"),nst.forEach(t),eto=r(HLe," (SEW model)"),HLe.forEach(t),oto=i(L),Fg=n(L,"LI",{});var ULe=s(Fg);Mse=n(ULe,"STRONG",{});var sst=s(Mse);rto=r(sst,"sew-d"),sst.forEach(t),tto=r(ULe," \u2014 "),wP=n(ULe,"A",{href:!0});var lst=s(wP);ato=r(lst,"SEWDConfig"),lst.forEach(t),nto=r(ULe," (SEW-D model)"),ULe.forEach(t),sto=i(L),Tg=n(L,"LI",{});var JLe=s(Tg);Ese=n(JLe,"STRONG",{});var ist=s(Ese);lto=r(ist,"speech-encoder-decoder"),ist.forEach(t),ito=r(JLe," \u2014 "),AP=n(JLe,"A",{href:!0});var dst=s(AP);dto=r(dst,"SpeechEncoderDecoderConfig"),dst.forEach(t),cto=r(JLe," (Speech Encoder decoder model)"),JLe.forEach(t),fto=i(L),Mg=n(L,"LI",{});var YLe=s(Mg);Cse=n(YLe,"STRONG",{});var cst=s(Cse);mto=r(cst,"speech_to_text"),cst.forEach(t),gto=r(YLe," \u2014 "),LP=n(YLe,"A",{href:!0});var fst=s(LP);hto=r(fst,"Speech2TextConfig"),fst.forEach(t),pto=r(YLe," (Speech2Text model)"),YLe.forEach(t),_to=i(L),Eg=n(L,"LI",{});var KLe=s(Eg);wse=n(KLe,"STRONG",{});var mst=s(wse);uto=r(mst,"speech_to_text_2"),mst.forEach(t),bto=r(KLe," \u2014 "),yP=n(KLe,"A",{href:!0});var gst=s(yP);vto=r(gst,"Speech2Text2Config"),gst.forEach(t),Fto=r(KLe," (Speech2Text2 model)"),KLe.forEach(t),Tto=i(L),Cg=n(L,"LI",{});var ZLe=s(Cg);Ase=n(ZLe,"STRONG",{});var hst=s(Ase);Mto=r(hst,"splinter"),hst.forEach(t),Eto=r(ZLe," \u2014 "),xP=n(ZLe,"A",{href:!0});var pst=s(xP);Cto=r(pst,"SplinterConfig"),pst.forEach(t),wto=r(ZLe," (Splinter model)"),ZLe.forEach(t),Ato=i(L),wg=n(L,"LI",{});var eye=s(wg);Lse=n(eye,"STRONG",{});var _st=s(Lse);Lto=r(_st,"squeezebert"),_st.forEach(t),yto=r(eye," \u2014 "),$P=n(eye,"A",{href:!0});var ust=s($P);xto=r(ust,"SqueezeBertConfig"),ust.forEach(t),$to=r(eye," (SqueezeBERT model)"),eye.forEach(t),kto=i(L),Ag=n(L,"LI",{});var oye=s(Ag);yse=n(oye,"STRONG",{});var bst=s(yse);Sto=r(bst,"swin"),bst.forEach(t),Rto=r(oye," \u2014 "),kP=n(oye,"A",{href:!0});var vst=s(kP);Pto=r(vst,"SwinConfig"),vst.forEach(t),Bto=r(oye," (Swin Transformer model)"),oye.forEach(t),Nto=i(L),Lg=n(L,"LI",{});var rye=s(Lg);xse=n(rye,"STRONG",{});var Fst=s(xse);Ito=r(Fst,"t5"),Fst.forEach(t),qto=r(rye," \u2014 "),SP=n(rye,"A",{href:!0});var Tst=s(SP);jto=r(Tst,"T5Config"),Tst.forEach(t),Dto=r(rye," (T5 model)"),rye.forEach(t),Gto=i(L),yg=n(L,"LI",{});var tye=s(yg);$se=n(tye,"STRONG",{});var Mst=s($se);Oto=r(Mst,"tapas"),Mst.forEach(t),Vto=r(tye," \u2014 "),RP=n(tye,"A",{href:!0});var Est=s(RP);Xto=r(Est,"TapasConfig"),Est.forEach(t),zto=r(tye," (TAPAS model)"),tye.forEach(t),Qto=i(L),xg=n(L,"LI",{});var aye=s(xg);kse=n(aye,"STRONG",{});var Cst=s(kse);Wto=r(Cst,"trajectory_transformer"),Cst.forEach(t),Hto=r(aye," \u2014 "),PP=n(aye,"A",{href:!0});var wst=s(PP);Uto=r(wst,"TrajectoryTransformerConfig"),wst.forEach(t),Jto=r(aye," (Trajectory Transformer model)"),aye.forEach(t),Yto=i(L),$g=n(L,"LI",{});var nye=s($g);Sse=n(nye,"STRONG",{});var Ast=s(Sse);Kto=r(Ast,"transfo-xl"),Ast.forEach(t),Zto=r(nye," \u2014 "),BP=n(nye,"A",{href:!0});var Lst=s(BP);eao=r(Lst,"TransfoXLConfig"),Lst.forEach(t),oao=r(nye," (Transformer-XL model)"),nye.forEach(t),rao=i(L),kg=n(L,"LI",{});var sye=s(kg);Rse=n(sye,"STRONG",{});var yst=s(Rse);tao=r(yst,"trocr"),yst.forEach(t),aao=r(sye," \u2014 "),NP=n(sye,"A",{href:!0});var xst=s(NP);nao=r(xst,"TrOCRConfig"),xst.forEach(t),sao=r(sye," (TrOCR model)"),sye.forEach(t),lao=i(L),Sg=n(L,"LI",{});var lye=s(Sg);Pse=n(lye,"STRONG",{});var $st=s(Pse);iao=r($st,"unispeech"),$st.forEach(t),dao=r(lye," \u2014 "),IP=n(lye,"A",{href:!0});var kst=s(IP);cao=r(kst,"UniSpeechConfig"),kst.forEach(t),fao=r(lye," (UniSpeech model)"),lye.forEach(t),mao=i(L),Rg=n(L,"LI",{});var iye=s(Rg);Bse=n(iye,"STRONG",{});var Sst=s(Bse);gao=r(Sst,"unispeech-sat"),Sst.forEach(t),hao=r(iye," \u2014 "),qP=n(iye,"A",{href:!0});var Rst=s(qP);pao=r(Rst,"UniSpeechSatConfig"),Rst.forEach(t),_ao=r(iye," (UniSpeechSat model)"),iye.forEach(t),uao=i(L),Pg=n(L,"LI",{});var dye=s(Pg);Nse=n(dye,"STRONG",{});var Pst=s(Nse);bao=r(Pst,"van"),Pst.forEach(t),vao=r(dye," \u2014 "),jP=n(dye,"A",{href:!0});var Bst=s(jP);Fao=r(Bst,"VanConfig"),Bst.forEach(t),Tao=r(dye," (VAN model)"),dye.forEach(t),Mao=i(L),Bg=n(L,"LI",{});var cye=s(Bg);Ise=n(cye,"STRONG",{});var Nst=s(Ise);Eao=r(Nst,"vilt"),Nst.forEach(t),Cao=r(cye," \u2014 "),DP=n(cye,"A",{href:!0});var Ist=s(DP);wao=r(Ist,"ViltConfig"),Ist.forEach(t),Aao=r(cye," (ViLT model)"),cye.forEach(t),Lao=i(L),Ng=n(L,"LI",{});var fye=s(Ng);qse=n(fye,"STRONG",{});var qst=s(qse);yao=r(qst,"vision-encoder-decoder"),qst.forEach(t),xao=r(fye," \u2014 "),GP=n(fye,"A",{href:!0});var jst=s(GP);$ao=r(jst,"VisionEncoderDecoderConfig"),jst.forEach(t),kao=r(fye," (Vision Encoder decoder model)"),fye.forEach(t),Sao=i(L),Ig=n(L,"LI",{});var mye=s(Ig);jse=n(mye,"STRONG",{});var Dst=s(jse);Rao=r(Dst,"vision-text-dual-encoder"),Dst.forEach(t),Pao=r(mye," \u2014 "),OP=n(mye,"A",{href:!0});var Gst=s(OP);Bao=r(Gst,"VisionTextDualEncoderConfig"),Gst.forEach(t),Nao=r(mye," (VisionTextDualEncoder model)"),mye.forEach(t),Iao=i(L),qg=n(L,"LI",{});var gye=s(qg);Dse=n(gye,"STRONG",{});var Ost=s(Dse);qao=r(Ost,"visual_bert"),Ost.forEach(t),jao=r(gye," \u2014 "),VP=n(gye,"A",{href:!0});var Vst=s(VP);Dao=r(Vst,"VisualBertConfig"),Vst.forEach(t),Gao=r(gye," (VisualBERT model)"),gye.forEach(t),Oao=i(L),jg=n(L,"LI",{});var hye=s(jg);Gse=n(hye,"STRONG",{});var Xst=s(Gse);Vao=r(Xst,"vit"),Xst.forEach(t),Xao=r(hye," \u2014 "),XP=n(hye,"A",{href:!0});var zst=s(XP);zao=r(zst,"ViTConfig"),zst.forEach(t),Qao=r(hye," (ViT model)"),hye.forEach(t),Wao=i(L),Dg=n(L,"LI",{});var pye=s(Dg);Ose=n(pye,"STRONG",{});var Qst=s(Ose);Hao=r(Qst,"vit_mae"),Qst.forEach(t),Uao=r(pye," \u2014 "),zP=n(pye,"A",{href:!0});var Wst=s(zP);Jao=r(Wst,"ViTMAEConfig"),Wst.forEach(t),Yao=r(pye," (ViTMAE model)"),pye.forEach(t),Kao=i(L),Gg=n(L,"LI",{});var _ye=s(Gg);Vse=n(_ye,"STRONG",{});var Hst=s(Vse);Zao=r(Hst,"wav2vec2"),Hst.forEach(t),eno=r(_ye," \u2014 "),QP=n(_ye,"A",{href:!0});var Ust=s(QP);ono=r(Ust,"Wav2Vec2Config"),Ust.forEach(t),rno=r(_ye," (Wav2Vec2 model)"),_ye.forEach(t),tno=i(L),Og=n(L,"LI",{});var uye=s(Og);Xse=n(uye,"STRONG",{});var Jst=s(Xse);ano=r(Jst,"wav2vec2-conformer"),Jst.forEach(t),nno=r(uye," \u2014 "),WP=n(uye,"A",{href:!0});var Yst=s(WP);sno=r(Yst,"Wav2Vec2ConformerConfig"),Yst.forEach(t),lno=r(uye," (Wav2Vec2-Conformer model)"),uye.forEach(t),ino=i(L),Vg=n(L,"LI",{});var bye=s(Vg);zse=n(bye,"STRONG",{});var Kst=s(zse);dno=r(Kst,"wavlm"),Kst.forEach(t),cno=r(bye," \u2014 "),HP=n(bye,"A",{href:!0});var Zst=s(HP);fno=r(Zst,"WavLMConfig"),Zst.forEach(t),mno=r(bye," (WavLM model)"),bye.forEach(t),gno=i(L),Xg=n(L,"LI",{});var vye=s(Xg);Qse=n(vye,"STRONG",{});var elt=s(Qse);hno=r(elt,"xglm"),elt.forEach(t),pno=r(vye," \u2014 "),UP=n(vye,"A",{href:!0});var olt=s(UP);_no=r(olt,"XGLMConfig"),olt.forEach(t),uno=r(vye," (XGLM model)"),vye.forEach(t),bno=i(L),zg=n(L,"LI",{});var Fye=s(zg);Wse=n(Fye,"STRONG",{});var rlt=s(Wse);vno=r(rlt,"xlm"),rlt.forEach(t),Fno=r(Fye," \u2014 "),JP=n(Fye,"A",{href:!0});var tlt=s(JP);Tno=r(tlt,"XLMConfig"),tlt.forEach(t),Mno=r(Fye," (XLM model)"),Fye.forEach(t),Eno=i(L),Qg=n(L,"LI",{});var Tye=s(Qg);Hse=n(Tye,"STRONG",{});var alt=s(Hse);Cno=r(alt,"xlm-prophetnet"),alt.forEach(t),wno=r(Tye," \u2014 "),YP=n(Tye,"A",{href:!0});var nlt=s(YP);Ano=r(nlt,"XLMProphetNetConfig"),nlt.forEach(t),Lno=r(Tye," (XLM-ProphetNet model)"),Tye.forEach(t),yno=i(L),Wg=n(L,"LI",{});var Mye=s(Wg);Use=n(Mye,"STRONG",{});var slt=s(Use);xno=r(slt,"xlm-roberta"),slt.forEach(t),$no=r(Mye," \u2014 "),KP=n(Mye,"A",{href:!0});var llt=s(KP);kno=r(llt,"XLMRobertaConfig"),llt.forEach(t),Sno=r(Mye," (XLM-RoBERTa model)"),Mye.forEach(t),Rno=i(L),Hg=n(L,"LI",{});var Eye=s(Hg);Jse=n(Eye,"STRONG",{});var ilt=s(Jse);Pno=r(ilt,"xlm-roberta-xl"),ilt.forEach(t),Bno=r(Eye," \u2014 "),ZP=n(Eye,"A",{href:!0});var dlt=s(ZP);Nno=r(dlt,"XLMRobertaXLConfig"),dlt.forEach(t),Ino=r(Eye," (XLM-RoBERTa-XL model)"),Eye.forEach(t),qno=i(L),Ug=n(L,"LI",{});var Cye=s(Ug);Yse=n(Cye,"STRONG",{});var clt=s(Yse);jno=r(clt,"xlnet"),clt.forEach(t),Dno=r(Cye," \u2014 "),eB=n(Cye,"A",{href:!0});var flt=s(eB);Gno=r(flt,"XLNetConfig"),flt.forEach(t),Ono=r(Cye," (XLNet model)"),Cye.forEach(t),Vno=i(L),Jg=n(L,"LI",{});var wye=s(Jg);Kse=n(wye,"STRONG",{});var mlt=s(Kse);Xno=r(mlt,"yolos"),mlt.forEach(t),zno=r(wye," \u2014 "),oB=n(wye,"A",{href:!0});var glt=s(oB);Qno=r(glt,"YolosConfig"),glt.forEach(t),Wno=r(wye," (YOLOS model)"),wye.forEach(t),Hno=i(L),Yg=n(L,"LI",{});var Aye=s(Yg);Zse=n(Aye,"STRONG",{});var hlt=s(Zse);Uno=r(hlt,"yoso"),hlt.forEach(t),Jno=r(Aye," \u2014 "),rB=n(Aye,"A",{href:!0});var plt=s(rB);Yno=r(plt,"YosoConfig"),plt.forEach(t),Kno=r(Aye," (YOSO model)"),Aye.forEach(t),L.forEach(t),Zno=i(st),T(Kg.$$.fragment,st),st.forEach(t),eso=i(nt),Zg=n(nt,"DIV",{class:!0});var FQe=s(Zg);T(pL.$$.fragment,FQe),oso=i(FQe),ele=n(FQe,"P",{});var _lt=s(ele);rso=r(_lt,"Register a new configuration for this class."),_lt.forEach(t),FQe.forEach(t),nt.forEach(t),TXe=i(f),qi=n(f,"H2",{class:!0});var TQe=s(qi);eh=n(TQe,"A",{id:!0,class:!0,href:!0});var ult=s(eh);ole=n(ult,"SPAN",{});var blt=s(ole);T(_L.$$.fragment,blt),blt.forEach(t),ult.forEach(t),tso=i(TQe),rle=n(TQe,"SPAN",{});var vlt=s(rle);aso=r(vlt,"AutoTokenizer"),vlt.forEach(t),TQe.forEach(t),MXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(uL.$$.fragment,Zs),nso=i(Zs),bL=n(Zs,"P",{});var MQe=s(bL);sso=r(MQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tB=n(MQe,"A",{href:!0});var Flt=s(tB);lso=r(Flt,"AutoTokenizer.from_pretrained()"),Flt.forEach(t),iso=r(MQe," class method."),MQe.forEach(t),dso=i(Zs),vL=n(Zs,"P",{});var EQe=s(vL);cso=r(EQe,"This class cannot be instantiated directly using "),tle=n(EQe,"CODE",{});var Tlt=s(tle);fso=r(Tlt,"__init__()"),Tlt.forEach(t),mso=r(EQe," (throws an error)."),EQe.forEach(t),gso=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(FL.$$.fragment,el),hso=i(el),ale=n(el,"P",{});var Mlt=s(ale);pso=r(Mlt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Mlt.forEach(t),_so=i(el),Pa=n(el,"P",{});var c6=s(Pa);uso=r(c6,"The tokenizer class to instantiate is selected based on the "),nle=n(c6,"CODE",{});var Elt=s(nle);bso=r(Elt,"model_type"),Elt.forEach(t),vso=r(c6,` property of the config object (either
passed as an argument or loaded from `),sle=n(c6,"CODE",{});var Clt=s(sle);Fso=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),Tso=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=n(c6,"CODE",{});var wlt=s(lle);Mso=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),Eso=r(c6,":"),c6.forEach(t),Cso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ak=s(jn);ile=n(Ak,"STRONG",{});var Alt=s(ile);wso=r(Alt,"albert"),Alt.forEach(t),Aso=r(Ak," \u2014 "),aB=n(Ak,"A",{href:!0});var Llt=s(aB);Lso=r(Llt,"AlbertTokenizer"),Llt.forEach(t),yso=r(Ak," or "),nB=n(Ak,"A",{href:!0});var ylt=s(nB);xso=r(ylt,"AlbertTokenizerFast"),ylt.forEach(t),$so=r(Ak," (ALBERT model)"),Ak.forEach(t),kso=i(S),Dn=n(S,"LI",{});var Lk=s(Dn);dle=n(Lk,"STRONG",{});var xlt=s(dle);Sso=r(xlt,"bart"),xlt.forEach(t),Rso=r(Lk," \u2014 "),sB=n(Lk,"A",{href:!0});var $lt=s(sB);Pso=r($lt,"BartTokenizer"),$lt.forEach(t),Bso=r(Lk," or "),lB=n(Lk,"A",{href:!0});var klt=s(lB);Nso=r(klt,"BartTokenizerFast"),klt.forEach(t),Iso=r(Lk," (BART model)"),Lk.forEach(t),qso=i(S),Gn=n(S,"LI",{});var yk=s(Gn);cle=n(yk,"STRONG",{});var Slt=s(cle);jso=r(Slt,"barthez"),Slt.forEach(t),Dso=r(yk," \u2014 "),iB=n(yk,"A",{href:!0});var Rlt=s(iB);Gso=r(Rlt,"BarthezTokenizer"),Rlt.forEach(t),Oso=r(yk," or "),dB=n(yk,"A",{href:!0});var Plt=s(dB);Vso=r(Plt,"BarthezTokenizerFast"),Plt.forEach(t),Xso=r(yk," (BARThez model)"),yk.forEach(t),zso=i(S),oh=n(S,"LI",{});var Lye=s(oh);fle=n(Lye,"STRONG",{});var Blt=s(fle);Qso=r(Blt,"bartpho"),Blt.forEach(t),Wso=r(Lye," \u2014 "),cB=n(Lye,"A",{href:!0});var Nlt=s(cB);Hso=r(Nlt,"BartphoTokenizer"),Nlt.forEach(t),Uso=r(Lye," (BARTpho model)"),Lye.forEach(t),Jso=i(S),On=n(S,"LI",{});var xk=s(On);mle=n(xk,"STRONG",{});var Ilt=s(mle);Yso=r(Ilt,"bert"),Ilt.forEach(t),Kso=r(xk," \u2014 "),fB=n(xk,"A",{href:!0});var qlt=s(fB);Zso=r(qlt,"BertTokenizer"),qlt.forEach(t),elo=r(xk," or "),mB=n(xk,"A",{href:!0});var jlt=s(mB);olo=r(jlt,"BertTokenizerFast"),jlt.forEach(t),rlo=r(xk," (BERT model)"),xk.forEach(t),tlo=i(S),rh=n(S,"LI",{});var yye=s(rh);gle=n(yye,"STRONG",{});var Dlt=s(gle);alo=r(Dlt,"bert-generation"),Dlt.forEach(t),nlo=r(yye," \u2014 "),gB=n(yye,"A",{href:!0});var Glt=s(gB);slo=r(Glt,"BertGenerationTokenizer"),Glt.forEach(t),llo=r(yye," (Bert Generation model)"),yye.forEach(t),ilo=i(S),th=n(S,"LI",{});var xye=s(th);hle=n(xye,"STRONG",{});var Olt=s(hle);dlo=r(Olt,"bert-japanese"),Olt.forEach(t),clo=r(xye," \u2014 "),hB=n(xye,"A",{href:!0});var Vlt=s(hB);flo=r(Vlt,"BertJapaneseTokenizer"),Vlt.forEach(t),mlo=r(xye," (BertJapanese model)"),xye.forEach(t),glo=i(S),ah=n(S,"LI",{});var $ye=s(ah);ple=n($ye,"STRONG",{});var Xlt=s(ple);hlo=r(Xlt,"bertweet"),Xlt.forEach(t),plo=r($ye," \u2014 "),pB=n($ye,"A",{href:!0});var zlt=s(pB);_lo=r(zlt,"BertweetTokenizer"),zlt.forEach(t),ulo=r($ye," (BERTweet model)"),$ye.forEach(t),blo=i(S),Vn=n(S,"LI",{});var $k=s(Vn);_le=n($k,"STRONG",{});var Qlt=s(_le);vlo=r(Qlt,"big_bird"),Qlt.forEach(t),Flo=r($k," \u2014 "),_B=n($k,"A",{href:!0});var Wlt=s(_B);Tlo=r(Wlt,"BigBirdTokenizer"),Wlt.forEach(t),Mlo=r($k," or "),uB=n($k,"A",{href:!0});var Hlt=s(uB);Elo=r(Hlt,"BigBirdTokenizerFast"),Hlt.forEach(t),Clo=r($k," (BigBird model)"),$k.forEach(t),wlo=i(S),Xn=n(S,"LI",{});var kk=s(Xn);ule=n(kk,"STRONG",{});var Ult=s(ule);Alo=r(Ult,"bigbird_pegasus"),Ult.forEach(t),Llo=r(kk," \u2014 "),bB=n(kk,"A",{href:!0});var Jlt=s(bB);ylo=r(Jlt,"PegasusTokenizer"),Jlt.forEach(t),xlo=r(kk," or "),vB=n(kk,"A",{href:!0});var Ylt=s(vB);$lo=r(Ylt,"PegasusTokenizerFast"),Ylt.forEach(t),klo=r(kk," (BigBird-Pegasus model)"),kk.forEach(t),Slo=i(S),zn=n(S,"LI",{});var Sk=s(zn);ble=n(Sk,"STRONG",{});var Klt=s(ble);Rlo=r(Klt,"blenderbot"),Klt.forEach(t),Plo=r(Sk," \u2014 "),FB=n(Sk,"A",{href:!0});var Zlt=s(FB);Blo=r(Zlt,"BlenderbotTokenizer"),Zlt.forEach(t),Nlo=r(Sk," or "),TB=n(Sk,"A",{href:!0});var eit=s(TB);Ilo=r(eit,"BlenderbotTokenizerFast"),eit.forEach(t),qlo=r(Sk," (Blenderbot model)"),Sk.forEach(t),jlo=i(S),nh=n(S,"LI",{});var kye=s(nh);vle=n(kye,"STRONG",{});var oit=s(vle);Dlo=r(oit,"blenderbot-small"),oit.forEach(t),Glo=r(kye," \u2014 "),MB=n(kye,"A",{href:!0});var rit=s(MB);Olo=r(rit,"BlenderbotSmallTokenizer"),rit.forEach(t),Vlo=r(kye," (BlenderbotSmall model)"),kye.forEach(t),Xlo=i(S),sh=n(S,"LI",{});var Sye=s(sh);Fle=n(Sye,"STRONG",{});var tit=s(Fle);zlo=r(tit,"bloom"),tit.forEach(t),Qlo=r(Sye," \u2014 "),EB=n(Sye,"A",{href:!0});var ait=s(EB);Wlo=r(ait,"BloomTokenizerFast"),ait.forEach(t),Hlo=r(Sye," (BLOOM model)"),Sye.forEach(t),Ulo=i(S),lh=n(S,"LI",{});var Rye=s(lh);Tle=n(Rye,"STRONG",{});var nit=s(Tle);Jlo=r(nit,"byt5"),nit.forEach(t),Ylo=r(Rye," \u2014 "),CB=n(Rye,"A",{href:!0});var sit=s(CB);Klo=r(sit,"ByT5Tokenizer"),sit.forEach(t),Zlo=r(Rye," (ByT5 model)"),Rye.forEach(t),eio=i(S),Qn=n(S,"LI",{});var Rk=s(Qn);Mle=n(Rk,"STRONG",{});var lit=s(Mle);oio=r(lit,"camembert"),lit.forEach(t),rio=r(Rk," \u2014 "),wB=n(Rk,"A",{href:!0});var iit=s(wB);tio=r(iit,"CamembertTokenizer"),iit.forEach(t),aio=r(Rk," or "),AB=n(Rk,"A",{href:!0});var dit=s(AB);nio=r(dit,"CamembertTokenizerFast"),dit.forEach(t),sio=r(Rk," (CamemBERT model)"),Rk.forEach(t),lio=i(S),ih=n(S,"LI",{});var Pye=s(ih);Ele=n(Pye,"STRONG",{});var cit=s(Ele);iio=r(cit,"canine"),cit.forEach(t),dio=r(Pye," \u2014 "),LB=n(Pye,"A",{href:!0});var fit=s(LB);cio=r(fit,"CanineTokenizer"),fit.forEach(t),fio=r(Pye," (CANINE model)"),Pye.forEach(t),mio=i(S),Wn=n(S,"LI",{});var Pk=s(Wn);Cle=n(Pk,"STRONG",{});var mit=s(Cle);gio=r(mit,"clip"),mit.forEach(t),hio=r(Pk," \u2014 "),yB=n(Pk,"A",{href:!0});var git=s(yB);pio=r(git,"CLIPTokenizer"),git.forEach(t),_io=r(Pk," or "),xB=n(Pk,"A",{href:!0});var hit=s(xB);uio=r(hit,"CLIPTokenizerFast"),hit.forEach(t),bio=r(Pk," (CLIP model)"),Pk.forEach(t),vio=i(S),Hn=n(S,"LI",{});var Bk=s(Hn);wle=n(Bk,"STRONG",{});var pit=s(wle);Fio=r(pit,"codegen"),pit.forEach(t),Tio=r(Bk," \u2014 "),$B=n(Bk,"A",{href:!0});var _it=s($B);Mio=r(_it,"CodeGenTokenizer"),_it.forEach(t),Eio=r(Bk," or "),kB=n(Bk,"A",{href:!0});var uit=s(kB);Cio=r(uit,"CodeGenTokenizerFast"),uit.forEach(t),wio=r(Bk," (CodeGen model)"),Bk.forEach(t),Aio=i(S),Un=n(S,"LI",{});var Nk=s(Un);Ale=n(Nk,"STRONG",{});var bit=s(Ale);Lio=r(bit,"convbert"),bit.forEach(t),yio=r(Nk," \u2014 "),SB=n(Nk,"A",{href:!0});var vit=s(SB);xio=r(vit,"ConvBertTokenizer"),vit.forEach(t),$io=r(Nk," or "),RB=n(Nk,"A",{href:!0});var Fit=s(RB);kio=r(Fit,"ConvBertTokenizerFast"),Fit.forEach(t),Sio=r(Nk," (ConvBERT model)"),Nk.forEach(t),Rio=i(S),Jn=n(S,"LI",{});var Ik=s(Jn);Lle=n(Ik,"STRONG",{});var Tit=s(Lle);Pio=r(Tit,"cpm"),Tit.forEach(t),Bio=r(Ik," \u2014 "),PB=n(Ik,"A",{href:!0});var Mit=s(PB);Nio=r(Mit,"CpmTokenizer"),Mit.forEach(t),Iio=r(Ik," or "),BB=n(Ik,"A",{href:!0});var Eit=s(BB);qio=r(Eit,"CpmTokenizerFast"),Eit.forEach(t),jio=r(Ik," (CPM model)"),Ik.forEach(t),Dio=i(S),dh=n(S,"LI",{});var Bye=s(dh);yle=n(Bye,"STRONG",{});var Cit=s(yle);Gio=r(Cit,"ctrl"),Cit.forEach(t),Oio=r(Bye," \u2014 "),NB=n(Bye,"A",{href:!0});var wit=s(NB);Vio=r(wit,"CTRLTokenizer"),wit.forEach(t),Xio=r(Bye," (CTRL model)"),Bye.forEach(t),zio=i(S),Yn=n(S,"LI",{});var qk=s(Yn);xle=n(qk,"STRONG",{});var Ait=s(xle);Qio=r(Ait,"data2vec-text"),Ait.forEach(t),Wio=r(qk," \u2014 "),IB=n(qk,"A",{href:!0});var Lit=s(IB);Hio=r(Lit,"RobertaTokenizer"),Lit.forEach(t),Uio=r(qk," or "),qB=n(qk,"A",{href:!0});var yit=s(qB);Jio=r(yit,"RobertaTokenizerFast"),yit.forEach(t),Yio=r(qk," (Data2VecText model)"),qk.forEach(t),Kio=i(S),Kn=n(S,"LI",{});var jk=s(Kn);$le=n(jk,"STRONG",{});var xit=s($le);Zio=r(xit,"deberta"),xit.forEach(t),edo=r(jk," \u2014 "),jB=n(jk,"A",{href:!0});var $it=s(jB);odo=r($it,"DebertaTokenizer"),$it.forEach(t),rdo=r(jk," or "),DB=n(jk,"A",{href:!0});var kit=s(DB);tdo=r(kit,"DebertaTokenizerFast"),kit.forEach(t),ado=r(jk," (DeBERTa model)"),jk.forEach(t),ndo=i(S),Zn=n(S,"LI",{});var Dk=s(Zn);kle=n(Dk,"STRONG",{});var Sit=s(kle);sdo=r(Sit,"deberta-v2"),Sit.forEach(t),ldo=r(Dk," \u2014 "),GB=n(Dk,"A",{href:!0});var Rit=s(GB);ido=r(Rit,"DebertaV2Tokenizer"),Rit.forEach(t),ddo=r(Dk," or "),OB=n(Dk,"A",{href:!0});var Pit=s(OB);cdo=r(Pit,"DebertaV2TokenizerFast"),Pit.forEach(t),fdo=r(Dk," (DeBERTa-v2 model)"),Dk.forEach(t),mdo=i(S),es=n(S,"LI",{});var Gk=s(es);Sle=n(Gk,"STRONG",{});var Bit=s(Sle);gdo=r(Bit,"distilbert"),Bit.forEach(t),hdo=r(Gk," \u2014 "),VB=n(Gk,"A",{href:!0});var Nit=s(VB);pdo=r(Nit,"DistilBertTokenizer"),Nit.forEach(t),_do=r(Gk," or "),XB=n(Gk,"A",{href:!0});var Iit=s(XB);udo=r(Iit,"DistilBertTokenizerFast"),Iit.forEach(t),bdo=r(Gk," (DistilBERT model)"),Gk.forEach(t),vdo=i(S),os=n(S,"LI",{});var Ok=s(os);Rle=n(Ok,"STRONG",{});var qit=s(Rle);Fdo=r(qit,"dpr"),qit.forEach(t),Tdo=r(Ok," \u2014 "),zB=n(Ok,"A",{href:!0});var jit=s(zB);Mdo=r(jit,"DPRQuestionEncoderTokenizer"),jit.forEach(t),Edo=r(Ok," or "),QB=n(Ok,"A",{href:!0});var Dit=s(QB);Cdo=r(Dit,"DPRQuestionEncoderTokenizerFast"),Dit.forEach(t),wdo=r(Ok," (DPR model)"),Ok.forEach(t),Ado=i(S),rs=n(S,"LI",{});var Vk=s(rs);Ple=n(Vk,"STRONG",{});var Git=s(Ple);Ldo=r(Git,"electra"),Git.forEach(t),ydo=r(Vk," \u2014 "),WB=n(Vk,"A",{href:!0});var Oit=s(WB);xdo=r(Oit,"ElectraTokenizer"),Oit.forEach(t),$do=r(Vk," or "),HB=n(Vk,"A",{href:!0});var Vit=s(HB);kdo=r(Vit,"ElectraTokenizerFast"),Vit.forEach(t),Sdo=r(Vk," (ELECTRA model)"),Vk.forEach(t),Rdo=i(S),ch=n(S,"LI",{});var Nye=s(ch);Ble=n(Nye,"STRONG",{});var Xit=s(Ble);Pdo=r(Xit,"flaubert"),Xit.forEach(t),Bdo=r(Nye," \u2014 "),UB=n(Nye,"A",{href:!0});var zit=s(UB);Ndo=r(zit,"FlaubertTokenizer"),zit.forEach(t),Ido=r(Nye," (FlauBERT model)"),Nye.forEach(t),qdo=i(S),ts=n(S,"LI",{});var Xk=s(ts);Nle=n(Xk,"STRONG",{});var Qit=s(Nle);jdo=r(Qit,"fnet"),Qit.forEach(t),Ddo=r(Xk," \u2014 "),JB=n(Xk,"A",{href:!0});var Wit=s(JB);Gdo=r(Wit,"FNetTokenizer"),Wit.forEach(t),Odo=r(Xk," or "),YB=n(Xk,"A",{href:!0});var Hit=s(YB);Vdo=r(Hit,"FNetTokenizerFast"),Hit.forEach(t),Xdo=r(Xk," (FNet model)"),Xk.forEach(t),zdo=i(S),fh=n(S,"LI",{});var Iye=s(fh);Ile=n(Iye,"STRONG",{});var Uit=s(Ile);Qdo=r(Uit,"fsmt"),Uit.forEach(t),Wdo=r(Iye," \u2014 "),KB=n(Iye,"A",{href:!0});var Jit=s(KB);Hdo=r(Jit,"FSMTTokenizer"),Jit.forEach(t),Udo=r(Iye," (FairSeq Machine-Translation model)"),Iye.forEach(t),Jdo=i(S),as=n(S,"LI",{});var zk=s(as);qle=n(zk,"STRONG",{});var Yit=s(qle);Ydo=r(Yit,"funnel"),Yit.forEach(t),Kdo=r(zk," \u2014 "),ZB=n(zk,"A",{href:!0});var Kit=s(ZB);Zdo=r(Kit,"FunnelTokenizer"),Kit.forEach(t),eco=r(zk," or "),eN=n(zk,"A",{href:!0});var Zit=s(eN);oco=r(Zit,"FunnelTokenizerFast"),Zit.forEach(t),rco=r(zk," (Funnel Transformer model)"),zk.forEach(t),tco=i(S),ns=n(S,"LI",{});var Qk=s(ns);jle=n(Qk,"STRONG",{});var edt=s(jle);aco=r(edt,"gpt2"),edt.forEach(t),nco=r(Qk," \u2014 "),oN=n(Qk,"A",{href:!0});var odt=s(oN);sco=r(odt,"GPT2Tokenizer"),odt.forEach(t),lco=r(Qk," or "),rN=n(Qk,"A",{href:!0});var rdt=s(rN);ico=r(rdt,"GPT2TokenizerFast"),rdt.forEach(t),dco=r(Qk," (OpenAI GPT-2 model)"),Qk.forEach(t),cco=i(S),ss=n(S,"LI",{});var Wk=s(ss);Dle=n(Wk,"STRONG",{});var tdt=s(Dle);fco=r(tdt,"gpt_neo"),tdt.forEach(t),mco=r(Wk," \u2014 "),tN=n(Wk,"A",{href:!0});var adt=s(tN);gco=r(adt,"GPT2Tokenizer"),adt.forEach(t),hco=r(Wk," or "),aN=n(Wk,"A",{href:!0});var ndt=s(aN);pco=r(ndt,"GPT2TokenizerFast"),ndt.forEach(t),_co=r(Wk," (GPT Neo model)"),Wk.forEach(t),uco=i(S),mh=n(S,"LI",{});var qye=s(mh);Gle=n(qye,"STRONG",{});var sdt=s(Gle);bco=r(sdt,"gpt_neox"),sdt.forEach(t),vco=r(qye," \u2014 "),nN=n(qye,"A",{href:!0});var ldt=s(nN);Fco=r(ldt,"GPTNeoXTokenizerFast"),ldt.forEach(t),Tco=r(qye," (GPT NeoX model)"),qye.forEach(t),Mco=i(S),ls=n(S,"LI",{});var Hk=s(ls);Ole=n(Hk,"STRONG",{});var idt=s(Ole);Eco=r(idt,"gptj"),idt.forEach(t),Cco=r(Hk," \u2014 "),sN=n(Hk,"A",{href:!0});var ddt=s(sN);wco=r(ddt,"GPT2Tokenizer"),ddt.forEach(t),Aco=r(Hk," or "),lN=n(Hk,"A",{href:!0});var cdt=s(lN);Lco=r(cdt,"GPT2TokenizerFast"),cdt.forEach(t),yco=r(Hk," (GPT-J model)"),Hk.forEach(t),xco=i(S),is=n(S,"LI",{});var Uk=s(is);Vle=n(Uk,"STRONG",{});var fdt=s(Vle);$co=r(fdt,"groupvit"),fdt.forEach(t),kco=r(Uk," \u2014 "),iN=n(Uk,"A",{href:!0});var mdt=s(iN);Sco=r(mdt,"CLIPTokenizer"),mdt.forEach(t),Rco=r(Uk," or "),dN=n(Uk,"A",{href:!0});var gdt=s(dN);Pco=r(gdt,"CLIPTokenizerFast"),gdt.forEach(t),Bco=r(Uk," (GroupViT model)"),Uk.forEach(t),Nco=i(S),ds=n(S,"LI",{});var Jk=s(ds);Xle=n(Jk,"STRONG",{});var hdt=s(Xle);Ico=r(hdt,"herbert"),hdt.forEach(t),qco=r(Jk," \u2014 "),cN=n(Jk,"A",{href:!0});var pdt=s(cN);jco=r(pdt,"HerbertTokenizer"),pdt.forEach(t),Dco=r(Jk," or "),fN=n(Jk,"A",{href:!0});var _dt=s(fN);Gco=r(_dt,"HerbertTokenizerFast"),_dt.forEach(t),Oco=r(Jk," (HerBERT model)"),Jk.forEach(t),Vco=i(S),gh=n(S,"LI",{});var jye=s(gh);zle=n(jye,"STRONG",{});var udt=s(zle);Xco=r(udt,"hubert"),udt.forEach(t),zco=r(jye," \u2014 "),mN=n(jye,"A",{href:!0});var bdt=s(mN);Qco=r(bdt,"Wav2Vec2CTCTokenizer"),bdt.forEach(t),Wco=r(jye," (Hubert model)"),jye.forEach(t),Hco=i(S),cs=n(S,"LI",{});var Yk=s(cs);Qle=n(Yk,"STRONG",{});var vdt=s(Qle);Uco=r(vdt,"ibert"),vdt.forEach(t),Jco=r(Yk," \u2014 "),gN=n(Yk,"A",{href:!0});var Fdt=s(gN);Yco=r(Fdt,"RobertaTokenizer"),Fdt.forEach(t),Kco=r(Yk," or "),hN=n(Yk,"A",{href:!0});var Tdt=s(hN);Zco=r(Tdt,"RobertaTokenizerFast"),Tdt.forEach(t),efo=r(Yk," (I-BERT model)"),Yk.forEach(t),ofo=i(S),fs=n(S,"LI",{});var Kk=s(fs);Wle=n(Kk,"STRONG",{});var Mdt=s(Wle);rfo=r(Mdt,"layoutlm"),Mdt.forEach(t),tfo=r(Kk," \u2014 "),pN=n(Kk,"A",{href:!0});var Edt=s(pN);afo=r(Edt,"LayoutLMTokenizer"),Edt.forEach(t),nfo=r(Kk," or "),_N=n(Kk,"A",{href:!0});var Cdt=s(_N);sfo=r(Cdt,"LayoutLMTokenizerFast"),Cdt.forEach(t),lfo=r(Kk," (LayoutLM model)"),Kk.forEach(t),ifo=i(S),ms=n(S,"LI",{});var Zk=s(ms);Hle=n(Zk,"STRONG",{});var wdt=s(Hle);dfo=r(wdt,"layoutlmv2"),wdt.forEach(t),cfo=r(Zk," \u2014 "),uN=n(Zk,"A",{href:!0});var Adt=s(uN);ffo=r(Adt,"LayoutLMv2Tokenizer"),Adt.forEach(t),mfo=r(Zk," or "),bN=n(Zk,"A",{href:!0});var Ldt=s(bN);gfo=r(Ldt,"LayoutLMv2TokenizerFast"),Ldt.forEach(t),hfo=r(Zk," (LayoutLMv2 model)"),Zk.forEach(t),pfo=i(S),gs=n(S,"LI",{});var eS=s(gs);Ule=n(eS,"STRONG",{});var ydt=s(Ule);_fo=r(ydt,"layoutlmv3"),ydt.forEach(t),ufo=r(eS," \u2014 "),vN=n(eS,"A",{href:!0});var xdt=s(vN);bfo=r(xdt,"LayoutLMv3Tokenizer"),xdt.forEach(t),vfo=r(eS," or "),FN=n(eS,"A",{href:!0});var $dt=s(FN);Ffo=r($dt,"LayoutLMv3TokenizerFast"),$dt.forEach(t),Tfo=r(eS," (LayoutLMv3 model)"),eS.forEach(t),Mfo=i(S),hs=n(S,"LI",{});var oS=s(hs);Jle=n(oS,"STRONG",{});var kdt=s(Jle);Efo=r(kdt,"layoutxlm"),kdt.forEach(t),Cfo=r(oS," \u2014 "),TN=n(oS,"A",{href:!0});var Sdt=s(TN);wfo=r(Sdt,"LayoutXLMTokenizer"),Sdt.forEach(t),Afo=r(oS," or "),MN=n(oS,"A",{href:!0});var Rdt=s(MN);Lfo=r(Rdt,"LayoutXLMTokenizerFast"),Rdt.forEach(t),yfo=r(oS," (LayoutXLM model)"),oS.forEach(t),xfo=i(S),ps=n(S,"LI",{});var rS=s(ps);Yle=n(rS,"STRONG",{});var Pdt=s(Yle);$fo=r(Pdt,"led"),Pdt.forEach(t),kfo=r(rS," \u2014 "),EN=n(rS,"A",{href:!0});var Bdt=s(EN);Sfo=r(Bdt,"LEDTokenizer"),Bdt.forEach(t),Rfo=r(rS," or "),CN=n(rS,"A",{href:!0});var Ndt=s(CN);Pfo=r(Ndt,"LEDTokenizerFast"),Ndt.forEach(t),Bfo=r(rS," (LED model)"),rS.forEach(t),Nfo=i(S),_s=n(S,"LI",{});var tS=s(_s);Kle=n(tS,"STRONG",{});var Idt=s(Kle);Ifo=r(Idt,"longformer"),Idt.forEach(t),qfo=r(tS," \u2014 "),wN=n(tS,"A",{href:!0});var qdt=s(wN);jfo=r(qdt,"LongformerTokenizer"),qdt.forEach(t),Dfo=r(tS," or "),AN=n(tS,"A",{href:!0});var jdt=s(AN);Gfo=r(jdt,"LongformerTokenizerFast"),jdt.forEach(t),Ofo=r(tS," (Longformer model)"),tS.forEach(t),Vfo=i(S),us=n(S,"LI",{});var aS=s(us);Zle=n(aS,"STRONG",{});var Ddt=s(Zle);Xfo=r(Ddt,"longt5"),Ddt.forEach(t),zfo=r(aS," \u2014 "),LN=n(aS,"A",{href:!0});var Gdt=s(LN);Qfo=r(Gdt,"T5Tokenizer"),Gdt.forEach(t),Wfo=r(aS," or "),yN=n(aS,"A",{href:!0});var Odt=s(yN);Hfo=r(Odt,"T5TokenizerFast"),Odt.forEach(t),Ufo=r(aS," (LongT5 model)"),aS.forEach(t),Jfo=i(S),hh=n(S,"LI",{});var Dye=s(hh);eie=n(Dye,"STRONG",{});var Vdt=s(eie);Yfo=r(Vdt,"luke"),Vdt.forEach(t),Kfo=r(Dye," \u2014 "),xN=n(Dye,"A",{href:!0});var Xdt=s(xN);Zfo=r(Xdt,"LukeTokenizer"),Xdt.forEach(t),emo=r(Dye," (LUKE model)"),Dye.forEach(t),omo=i(S),bs=n(S,"LI",{});var nS=s(bs);oie=n(nS,"STRONG",{});var zdt=s(oie);rmo=r(zdt,"lxmert"),zdt.forEach(t),tmo=r(nS," \u2014 "),$N=n(nS,"A",{href:!0});var Qdt=s($N);amo=r(Qdt,"LxmertTokenizer"),Qdt.forEach(t),nmo=r(nS," or "),kN=n(nS,"A",{href:!0});var Wdt=s(kN);smo=r(Wdt,"LxmertTokenizerFast"),Wdt.forEach(t),lmo=r(nS," (LXMERT model)"),nS.forEach(t),imo=i(S),ph=n(S,"LI",{});var Gye=s(ph);rie=n(Gye,"STRONG",{});var Hdt=s(rie);dmo=r(Hdt,"m2m_100"),Hdt.forEach(t),cmo=r(Gye," \u2014 "),SN=n(Gye,"A",{href:!0});var Udt=s(SN);fmo=r(Udt,"M2M100Tokenizer"),Udt.forEach(t),mmo=r(Gye," (M2M100 model)"),Gye.forEach(t),gmo=i(S),_h=n(S,"LI",{});var Oye=s(_h);tie=n(Oye,"STRONG",{});var Jdt=s(tie);hmo=r(Jdt,"marian"),Jdt.forEach(t),pmo=r(Oye," \u2014 "),RN=n(Oye,"A",{href:!0});var Ydt=s(RN);_mo=r(Ydt,"MarianTokenizer"),Ydt.forEach(t),umo=r(Oye," (Marian model)"),Oye.forEach(t),bmo=i(S),vs=n(S,"LI",{});var sS=s(vs);aie=n(sS,"STRONG",{});var Kdt=s(aie);vmo=r(Kdt,"mbart"),Kdt.forEach(t),Fmo=r(sS," \u2014 "),PN=n(sS,"A",{href:!0});var Zdt=s(PN);Tmo=r(Zdt,"MBartTokenizer"),Zdt.forEach(t),Mmo=r(sS," or "),BN=n(sS,"A",{href:!0});var ect=s(BN);Emo=r(ect,"MBartTokenizerFast"),ect.forEach(t),Cmo=r(sS," (mBART model)"),sS.forEach(t),wmo=i(S),Fs=n(S,"LI",{});var lS=s(Fs);nie=n(lS,"STRONG",{});var oct=s(nie);Amo=r(oct,"mbart50"),oct.forEach(t),Lmo=r(lS," \u2014 "),NN=n(lS,"A",{href:!0});var rct=s(NN);ymo=r(rct,"MBart50Tokenizer"),rct.forEach(t),xmo=r(lS," or "),IN=n(lS,"A",{href:!0});var tct=s(IN);$mo=r(tct,"MBart50TokenizerFast"),tct.forEach(t),kmo=r(lS," (mBART-50 model)"),lS.forEach(t),Smo=i(S),Ts=n(S,"LI",{});var iS=s(Ts);sie=n(iS,"STRONG",{});var act=s(sie);Rmo=r(act,"megatron-bert"),act.forEach(t),Pmo=r(iS," \u2014 "),qN=n(iS,"A",{href:!0});var nct=s(qN);Bmo=r(nct,"BertTokenizer"),nct.forEach(t),Nmo=r(iS," or "),jN=n(iS,"A",{href:!0});var sct=s(jN);Imo=r(sct,"BertTokenizerFast"),sct.forEach(t),qmo=r(iS," (Megatron-BERT model)"),iS.forEach(t),jmo=i(S),uh=n(S,"LI",{});var Vye=s(uh);lie=n(Vye,"STRONG",{});var lct=s(lie);Dmo=r(lct,"mluke"),lct.forEach(t),Gmo=r(Vye," \u2014 "),DN=n(Vye,"A",{href:!0});var ict=s(DN);Omo=r(ict,"MLukeTokenizer"),ict.forEach(t),Vmo=r(Vye," (mLUKE model)"),Vye.forEach(t),Xmo=i(S),Ms=n(S,"LI",{});var dS=s(Ms);iie=n(dS,"STRONG",{});var dct=s(iie);zmo=r(dct,"mobilebert"),dct.forEach(t),Qmo=r(dS," \u2014 "),GN=n(dS,"A",{href:!0});var cct=s(GN);Wmo=r(cct,"MobileBertTokenizer"),cct.forEach(t),Hmo=r(dS," or "),ON=n(dS,"A",{href:!0});var fct=s(ON);Umo=r(fct,"MobileBertTokenizerFast"),fct.forEach(t),Jmo=r(dS," (MobileBERT model)"),dS.forEach(t),Ymo=i(S),Es=n(S,"LI",{});var cS=s(Es);die=n(cS,"STRONG",{});var mct=s(die);Kmo=r(mct,"mpnet"),mct.forEach(t),Zmo=r(cS," \u2014 "),VN=n(cS,"A",{href:!0});var gct=s(VN);ego=r(gct,"MPNetTokenizer"),gct.forEach(t),ogo=r(cS," or "),XN=n(cS,"A",{href:!0});var hct=s(XN);rgo=r(hct,"MPNetTokenizerFast"),hct.forEach(t),tgo=r(cS," (MPNet model)"),cS.forEach(t),ago=i(S),Cs=n(S,"LI",{});var fS=s(Cs);cie=n(fS,"STRONG",{});var pct=s(cie);ngo=r(pct,"mt5"),pct.forEach(t),sgo=r(fS," \u2014 "),zN=n(fS,"A",{href:!0});var _ct=s(zN);lgo=r(_ct,"MT5Tokenizer"),_ct.forEach(t),igo=r(fS," or "),QN=n(fS,"A",{href:!0});var uct=s(QN);dgo=r(uct,"MT5TokenizerFast"),uct.forEach(t),cgo=r(fS," (MT5 model)"),fS.forEach(t),fgo=i(S),ws=n(S,"LI",{});var mS=s(ws);fie=n(mS,"STRONG",{});var bct=s(fie);mgo=r(bct,"mvp"),bct.forEach(t),ggo=r(mS," \u2014 "),WN=n(mS,"A",{href:!0});var vct=s(WN);hgo=r(vct,"MvpTokenizer"),vct.forEach(t),pgo=r(mS," or "),HN=n(mS,"A",{href:!0});var Fct=s(HN);_go=r(Fct,"MvpTokenizerFast"),Fct.forEach(t),ugo=r(mS," (MVP model)"),mS.forEach(t),bgo=i(S),As=n(S,"LI",{});var gS=s(As);mie=n(gS,"STRONG",{});var Tct=s(mie);vgo=r(Tct,"nezha"),Tct.forEach(t),Fgo=r(gS," \u2014 "),UN=n(gS,"A",{href:!0});var Mct=s(UN);Tgo=r(Mct,"BertTokenizer"),Mct.forEach(t),Mgo=r(gS," or "),JN=n(gS,"A",{href:!0});var Ect=s(JN);Ego=r(Ect,"BertTokenizerFast"),Ect.forEach(t),Cgo=r(gS," (Nezha model)"),gS.forEach(t),wgo=i(S),Ls=n(S,"LI",{});var hS=s(Ls);gie=n(hS,"STRONG",{});var Cct=s(gie);Ago=r(Cct,"nllb"),Cct.forEach(t),Lgo=r(hS," \u2014 "),YN=n(hS,"A",{href:!0});var wct=s(YN);ygo=r(wct,"NllbTokenizer"),wct.forEach(t),xgo=r(hS," or "),KN=n(hS,"A",{href:!0});var Act=s(KN);$go=r(Act,"NllbTokenizerFast"),Act.forEach(t),kgo=r(hS," (NLLB model)"),hS.forEach(t),Sgo=i(S),ys=n(S,"LI",{});var pS=s(ys);hie=n(pS,"STRONG",{});var Lct=s(hie);Rgo=r(Lct,"nystromformer"),Lct.forEach(t),Pgo=r(pS," \u2014 "),ZN=n(pS,"A",{href:!0});var yct=s(ZN);Bgo=r(yct,"AlbertTokenizer"),yct.forEach(t),Ngo=r(pS," or "),eI=n(pS,"A",{href:!0});var xct=s(eI);Igo=r(xct,"AlbertTokenizerFast"),xct.forEach(t),qgo=r(pS," (Nystr\xF6mformer model)"),pS.forEach(t),jgo=i(S),xs=n(S,"LI",{});var _S=s(xs);pie=n(_S,"STRONG",{});var $ct=s(pie);Dgo=r($ct,"openai-gpt"),$ct.forEach(t),Ggo=r(_S," \u2014 "),oI=n(_S,"A",{href:!0});var kct=s(oI);Ogo=r(kct,"OpenAIGPTTokenizer"),kct.forEach(t),Vgo=r(_S," or "),rI=n(_S,"A",{href:!0});var Sct=s(rI);Xgo=r(Sct,"OpenAIGPTTokenizerFast"),Sct.forEach(t),zgo=r(_S," (OpenAI GPT model)"),_S.forEach(t),Qgo=i(S),bh=n(S,"LI",{});var Xye=s(bh);_ie=n(Xye,"STRONG",{});var Rct=s(_ie);Wgo=r(Rct,"opt"),Rct.forEach(t),Hgo=r(Xye," \u2014 "),tI=n(Xye,"A",{href:!0});var Pct=s(tI);Ugo=r(Pct,"GPT2Tokenizer"),Pct.forEach(t),Jgo=r(Xye," (OPT model)"),Xye.forEach(t),Ygo=i(S),$s=n(S,"LI",{});var uS=s($s);uie=n(uS,"STRONG",{});var Bct=s(uie);Kgo=r(Bct,"pegasus"),Bct.forEach(t),Zgo=r(uS," \u2014 "),aI=n(uS,"A",{href:!0});var Nct=s(aI);eho=r(Nct,"PegasusTokenizer"),Nct.forEach(t),oho=r(uS," or "),nI=n(uS,"A",{href:!0});var Ict=s(nI);rho=r(Ict,"PegasusTokenizerFast"),Ict.forEach(t),tho=r(uS," (Pegasus model)"),uS.forEach(t),aho=i(S),vh=n(S,"LI",{});var zye=s(vh);bie=n(zye,"STRONG",{});var qct=s(bie);nho=r(qct,"perceiver"),qct.forEach(t),sho=r(zye," \u2014 "),sI=n(zye,"A",{href:!0});var jct=s(sI);lho=r(jct,"PerceiverTokenizer"),jct.forEach(t),iho=r(zye," (Perceiver model)"),zye.forEach(t),dho=i(S),Fh=n(S,"LI",{});var Qye=s(Fh);vie=n(Qye,"STRONG",{});var Dct=s(vie);cho=r(Dct,"phobert"),Dct.forEach(t),fho=r(Qye," \u2014 "),lI=n(Qye,"A",{href:!0});var Gct=s(lI);mho=r(Gct,"PhobertTokenizer"),Gct.forEach(t),gho=r(Qye," (PhoBERT model)"),Qye.forEach(t),hho=i(S),Th=n(S,"LI",{});var Wye=s(Th);Fie=n(Wye,"STRONG",{});var Oct=s(Fie);pho=r(Oct,"plbart"),Oct.forEach(t),_ho=r(Wye," \u2014 "),iI=n(Wye,"A",{href:!0});var Vct=s(iI);uho=r(Vct,"PLBartTokenizer"),Vct.forEach(t),bho=r(Wye," (PLBart model)"),Wye.forEach(t),vho=i(S),Mh=n(S,"LI",{});var Hye=s(Mh);Tie=n(Hye,"STRONG",{});var Xct=s(Tie);Fho=r(Xct,"prophetnet"),Xct.forEach(t),Tho=r(Hye," \u2014 "),dI=n(Hye,"A",{href:!0});var zct=s(dI);Mho=r(zct,"ProphetNetTokenizer"),zct.forEach(t),Eho=r(Hye," (ProphetNet model)"),Hye.forEach(t),Cho=i(S),ks=n(S,"LI",{});var bS=s(ks);Mie=n(bS,"STRONG",{});var Qct=s(Mie);who=r(Qct,"qdqbert"),Qct.forEach(t),Aho=r(bS," \u2014 "),cI=n(bS,"A",{href:!0});var Wct=s(cI);Lho=r(Wct,"BertTokenizer"),Wct.forEach(t),yho=r(bS," or "),fI=n(bS,"A",{href:!0});var Hct=s(fI);xho=r(Hct,"BertTokenizerFast"),Hct.forEach(t),$ho=r(bS," (QDQBert model)"),bS.forEach(t),kho=i(S),Eh=n(S,"LI",{});var Uye=s(Eh);Eie=n(Uye,"STRONG",{});var Uct=s(Eie);Sho=r(Uct,"rag"),Uct.forEach(t),Rho=r(Uye," \u2014 "),mI=n(Uye,"A",{href:!0});var Jct=s(mI);Pho=r(Jct,"RagTokenizer"),Jct.forEach(t),Bho=r(Uye," (RAG model)"),Uye.forEach(t),Nho=i(S),Ss=n(S,"LI",{});var vS=s(Ss);Cie=n(vS,"STRONG",{});var Yct=s(Cie);Iho=r(Yct,"realm"),Yct.forEach(t),qho=r(vS," \u2014 "),gI=n(vS,"A",{href:!0});var Kct=s(gI);jho=r(Kct,"RealmTokenizer"),Kct.forEach(t),Dho=r(vS," or "),hI=n(vS,"A",{href:!0});var Zct=s(hI);Gho=r(Zct,"RealmTokenizerFast"),Zct.forEach(t),Oho=r(vS," (REALM model)"),vS.forEach(t),Vho=i(S),Rs=n(S,"LI",{});var FS=s(Rs);wie=n(FS,"STRONG",{});var eft=s(wie);Xho=r(eft,"reformer"),eft.forEach(t),zho=r(FS," \u2014 "),pI=n(FS,"A",{href:!0});var oft=s(pI);Qho=r(oft,"ReformerTokenizer"),oft.forEach(t),Who=r(FS," or "),_I=n(FS,"A",{href:!0});var rft=s(_I);Hho=r(rft,"ReformerTokenizerFast"),rft.forEach(t),Uho=r(FS," (Reformer model)"),FS.forEach(t),Jho=i(S),Ps=n(S,"LI",{});var TS=s(Ps);Aie=n(TS,"STRONG",{});var tft=s(Aie);Yho=r(tft,"rembert"),tft.forEach(t),Kho=r(TS," \u2014 "),uI=n(TS,"A",{href:!0});var aft=s(uI);Zho=r(aft,"RemBertTokenizer"),aft.forEach(t),epo=r(TS," or "),bI=n(TS,"A",{href:!0});var nft=s(bI);opo=r(nft,"RemBertTokenizerFast"),nft.forEach(t),rpo=r(TS," (RemBERT model)"),TS.forEach(t),tpo=i(S),Bs=n(S,"LI",{});var MS=s(Bs);Lie=n(MS,"STRONG",{});var sft=s(Lie);apo=r(sft,"retribert"),sft.forEach(t),npo=r(MS," \u2014 "),vI=n(MS,"A",{href:!0});var lft=s(vI);spo=r(lft,"RetriBertTokenizer"),lft.forEach(t),lpo=r(MS," or "),FI=n(MS,"A",{href:!0});var ift=s(FI);ipo=r(ift,"RetriBertTokenizerFast"),ift.forEach(t),dpo=r(MS," (RetriBERT model)"),MS.forEach(t),cpo=i(S),Ns=n(S,"LI",{});var ES=s(Ns);yie=n(ES,"STRONG",{});var dft=s(yie);fpo=r(dft,"roberta"),dft.forEach(t),mpo=r(ES," \u2014 "),TI=n(ES,"A",{href:!0});var cft=s(TI);gpo=r(cft,"RobertaTokenizer"),cft.forEach(t),hpo=r(ES," or "),MI=n(ES,"A",{href:!0});var fft=s(MI);ppo=r(fft,"RobertaTokenizerFast"),fft.forEach(t),_po=r(ES," (RoBERTa model)"),ES.forEach(t),upo=i(S),Is=n(S,"LI",{});var CS=s(Is);xie=n(CS,"STRONG",{});var mft=s(xie);bpo=r(mft,"roformer"),mft.forEach(t),vpo=r(CS," \u2014 "),EI=n(CS,"A",{href:!0});var gft=s(EI);Fpo=r(gft,"RoFormerTokenizer"),gft.forEach(t),Tpo=r(CS," or "),CI=n(CS,"A",{href:!0});var hft=s(CI);Mpo=r(hft,"RoFormerTokenizerFast"),hft.forEach(t),Epo=r(CS," (RoFormer model)"),CS.forEach(t),Cpo=i(S),Ch=n(S,"LI",{});var Jye=s(Ch);$ie=n(Jye,"STRONG",{});var pft=s($ie);wpo=r(pft,"speech_to_text"),pft.forEach(t),Apo=r(Jye," \u2014 "),wI=n(Jye,"A",{href:!0});var _ft=s(wI);Lpo=r(_ft,"Speech2TextTokenizer"),_ft.forEach(t),ypo=r(Jye," (Speech2Text model)"),Jye.forEach(t),xpo=i(S),wh=n(S,"LI",{});var Yye=s(wh);kie=n(Yye,"STRONG",{});var uft=s(kie);$po=r(uft,"speech_to_text_2"),uft.forEach(t),kpo=r(Yye," \u2014 "),AI=n(Yye,"A",{href:!0});var bft=s(AI);Spo=r(bft,"Speech2Text2Tokenizer"),bft.forEach(t),Rpo=r(Yye," (Speech2Text2 model)"),Yye.forEach(t),Ppo=i(S),qs=n(S,"LI",{});var wS=s(qs);Sie=n(wS,"STRONG",{});var vft=s(Sie);Bpo=r(vft,"splinter"),vft.forEach(t),Npo=r(wS," \u2014 "),LI=n(wS,"A",{href:!0});var Fft=s(LI);Ipo=r(Fft,"SplinterTokenizer"),Fft.forEach(t),qpo=r(wS," or "),yI=n(wS,"A",{href:!0});var Tft=s(yI);jpo=r(Tft,"SplinterTokenizerFast"),Tft.forEach(t),Dpo=r(wS," (Splinter model)"),wS.forEach(t),Gpo=i(S),js=n(S,"LI",{});var AS=s(js);Rie=n(AS,"STRONG",{});var Mft=s(Rie);Opo=r(Mft,"squeezebert"),Mft.forEach(t),Vpo=r(AS," \u2014 "),xI=n(AS,"A",{href:!0});var Eft=s(xI);Xpo=r(Eft,"SqueezeBertTokenizer"),Eft.forEach(t),zpo=r(AS," or "),$I=n(AS,"A",{href:!0});var Cft=s($I);Qpo=r(Cft,"SqueezeBertTokenizerFast"),Cft.forEach(t),Wpo=r(AS," (SqueezeBERT model)"),AS.forEach(t),Hpo=i(S),Ds=n(S,"LI",{});var LS=s(Ds);Pie=n(LS,"STRONG",{});var wft=s(Pie);Upo=r(wft,"t5"),wft.forEach(t),Jpo=r(LS," \u2014 "),kI=n(LS,"A",{href:!0});var Aft=s(kI);Ypo=r(Aft,"T5Tokenizer"),Aft.forEach(t),Kpo=r(LS," or "),SI=n(LS,"A",{href:!0});var Lft=s(SI);Zpo=r(Lft,"T5TokenizerFast"),Lft.forEach(t),e_o=r(LS," (T5 model)"),LS.forEach(t),o_o=i(S),Ah=n(S,"LI",{});var Kye=s(Ah);Bie=n(Kye,"STRONG",{});var yft=s(Bie);r_o=r(yft,"tapas"),yft.forEach(t),t_o=r(Kye," \u2014 "),RI=n(Kye,"A",{href:!0});var xft=s(RI);a_o=r(xft,"TapasTokenizer"),xft.forEach(t),n_o=r(Kye," (TAPAS model)"),Kye.forEach(t),s_o=i(S),Lh=n(S,"LI",{});var Zye=s(Lh);Nie=n(Zye,"STRONG",{});var $ft=s(Nie);l_o=r($ft,"tapex"),$ft.forEach(t),i_o=r(Zye," \u2014 "),PI=n(Zye,"A",{href:!0});var kft=s(PI);d_o=r(kft,"TapexTokenizer"),kft.forEach(t),c_o=r(Zye," (TAPEX model)"),Zye.forEach(t),f_o=i(S),yh=n(S,"LI",{});var e9e=s(yh);Iie=n(e9e,"STRONG",{});var Sft=s(Iie);m_o=r(Sft,"transfo-xl"),Sft.forEach(t),g_o=r(e9e," \u2014 "),BI=n(e9e,"A",{href:!0});var Rft=s(BI);h_o=r(Rft,"TransfoXLTokenizer"),Rft.forEach(t),p_o=r(e9e," (Transformer-XL model)"),e9e.forEach(t),__o=i(S),Gs=n(S,"LI",{});var yS=s(Gs);qie=n(yS,"STRONG",{});var Pft=s(qie);u_o=r(Pft,"vilt"),Pft.forEach(t),b_o=r(yS," \u2014 "),NI=n(yS,"A",{href:!0});var Bft=s(NI);v_o=r(Bft,"BertTokenizer"),Bft.forEach(t),F_o=r(yS," or "),II=n(yS,"A",{href:!0});var Nft=s(II);T_o=r(Nft,"BertTokenizerFast"),Nft.forEach(t),M_o=r(yS," (ViLT model)"),yS.forEach(t),E_o=i(S),Os=n(S,"LI",{});var xS=s(Os);jie=n(xS,"STRONG",{});var Ift=s(jie);C_o=r(Ift,"visual_bert"),Ift.forEach(t),w_o=r(xS," \u2014 "),qI=n(xS,"A",{href:!0});var qft=s(qI);A_o=r(qft,"BertTokenizer"),qft.forEach(t),L_o=r(xS," or "),jI=n(xS,"A",{href:!0});var jft=s(jI);y_o=r(jft,"BertTokenizerFast"),jft.forEach(t),x_o=r(xS," (VisualBERT model)"),xS.forEach(t),$_o=i(S),xh=n(S,"LI",{});var o9e=s(xh);Die=n(o9e,"STRONG",{});var Dft=s(Die);k_o=r(Dft,"wav2vec2"),Dft.forEach(t),S_o=r(o9e," \u2014 "),DI=n(o9e,"A",{href:!0});var Gft=s(DI);R_o=r(Gft,"Wav2Vec2CTCTokenizer"),Gft.forEach(t),P_o=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),B_o=i(S),$h=n(S,"LI",{});var r9e=s($h);Gie=n(r9e,"STRONG",{});var Oft=s(Gie);N_o=r(Oft,"wav2vec2-conformer"),Oft.forEach(t),I_o=r(r9e," \u2014 "),GI=n(r9e,"A",{href:!0});var Vft=s(GI);q_o=r(Vft,"Wav2Vec2CTCTokenizer"),Vft.forEach(t),j_o=r(r9e," (Wav2Vec2-Conformer model)"),r9e.forEach(t),D_o=i(S),kh=n(S,"LI",{});var t9e=s(kh);Oie=n(t9e,"STRONG",{});var Xft=s(Oie);G_o=r(Xft,"wav2vec2_phoneme"),Xft.forEach(t),O_o=r(t9e," \u2014 "),OI=n(t9e,"A",{href:!0});var zft=s(OI);V_o=r(zft,"Wav2Vec2PhonemeCTCTokenizer"),zft.forEach(t),X_o=r(t9e," (Wav2Vec2Phoneme model)"),t9e.forEach(t),z_o=i(S),Vs=n(S,"LI",{});var $S=s(Vs);Vie=n($S,"STRONG",{});var Qft=s(Vie);Q_o=r(Qft,"xglm"),Qft.forEach(t),W_o=r($S," \u2014 "),VI=n($S,"A",{href:!0});var Wft=s(VI);H_o=r(Wft,"XGLMTokenizer"),Wft.forEach(t),U_o=r($S," or "),XI=n($S,"A",{href:!0});var Hft=s(XI);J_o=r(Hft,"XGLMTokenizerFast"),Hft.forEach(t),Y_o=r($S," (XGLM model)"),$S.forEach(t),K_o=i(S),Sh=n(S,"LI",{});var a9e=s(Sh);Xie=n(a9e,"STRONG",{});var Uft=s(Xie);Z_o=r(Uft,"xlm"),Uft.forEach(t),euo=r(a9e," \u2014 "),zI=n(a9e,"A",{href:!0});var Jft=s(zI);ouo=r(Jft,"XLMTokenizer"),Jft.forEach(t),ruo=r(a9e," (XLM model)"),a9e.forEach(t),tuo=i(S),Rh=n(S,"LI",{});var n9e=s(Rh);zie=n(n9e,"STRONG",{});var Yft=s(zie);auo=r(Yft,"xlm-prophetnet"),Yft.forEach(t),nuo=r(n9e," \u2014 "),QI=n(n9e,"A",{href:!0});var Kft=s(QI);suo=r(Kft,"XLMProphetNetTokenizer"),Kft.forEach(t),luo=r(n9e," (XLM-ProphetNet model)"),n9e.forEach(t),iuo=i(S),Xs=n(S,"LI",{});var kS=s(Xs);Qie=n(kS,"STRONG",{});var Zft=s(Qie);duo=r(Zft,"xlm-roberta"),Zft.forEach(t),cuo=r(kS," \u2014 "),WI=n(kS,"A",{href:!0});var emt=s(WI);fuo=r(emt,"XLMRobertaTokenizer"),emt.forEach(t),muo=r(kS," or "),HI=n(kS,"A",{href:!0});var omt=s(HI);guo=r(omt,"XLMRobertaTokenizerFast"),omt.forEach(t),huo=r(kS," (XLM-RoBERTa model)"),kS.forEach(t),puo=i(S),zs=n(S,"LI",{});var SS=s(zs);Wie=n(SS,"STRONG",{});var rmt=s(Wie);_uo=r(rmt,"xlm-roberta-xl"),rmt.forEach(t),uuo=r(SS," \u2014 "),UI=n(SS,"A",{href:!0});var tmt=s(UI);buo=r(tmt,"RobertaTokenizer"),tmt.forEach(t),vuo=r(SS," or "),JI=n(SS,"A",{href:!0});var amt=s(JI);Fuo=r(amt,"RobertaTokenizerFast"),amt.forEach(t),Tuo=r(SS," (XLM-RoBERTa-XL model)"),SS.forEach(t),Muo=i(S),Qs=n(S,"LI",{});var RS=s(Qs);Hie=n(RS,"STRONG",{});var nmt=s(Hie);Euo=r(nmt,"xlnet"),nmt.forEach(t),Cuo=r(RS," \u2014 "),YI=n(RS,"A",{href:!0});var smt=s(YI);wuo=r(smt,"XLNetTokenizer"),smt.forEach(t),Auo=r(RS," or "),KI=n(RS,"A",{href:!0});var lmt=s(KI);Luo=r(lmt,"XLNetTokenizerFast"),lmt.forEach(t),yuo=r(RS," (XLNet model)"),RS.forEach(t),xuo=i(S),Ws=n(S,"LI",{});var PS=s(Ws);Uie=n(PS,"STRONG",{});var imt=s(Uie);$uo=r(imt,"yoso"),imt.forEach(t),kuo=r(PS," \u2014 "),ZI=n(PS,"A",{href:!0});var dmt=s(ZI);Suo=r(dmt,"AlbertTokenizer"),dmt.forEach(t),Ruo=r(PS," or "),eq=n(PS,"A",{href:!0});var cmt=s(eq);Puo=r(cmt,"AlbertTokenizerFast"),cmt.forEach(t),Buo=r(PS," (YOSO model)"),PS.forEach(t),S.forEach(t),Nuo=i(el),T(Ph.$$.fragment,el),el.forEach(t),Iuo=i(Zs),Bh=n(Zs,"DIV",{class:!0});var CQe=s(Bh);T(TL.$$.fragment,CQe),quo=i(CQe),Jie=n(CQe,"P",{});var fmt=s(Jie);juo=r(fmt,"Register a new tokenizer in this mapping."),fmt.forEach(t),CQe.forEach(t),Zs.forEach(t),EXe=i(f),ji=n(f,"H2",{class:!0});var wQe=s(ji);Nh=n(wQe,"A",{id:!0,class:!0,href:!0});var mmt=s(Nh);Yie=n(mmt,"SPAN",{});var gmt=s(Yie);T(ML.$$.fragment,gmt),gmt.forEach(t),mmt.forEach(t),Duo=i(wQe),Kie=n(wQe,"SPAN",{});var hmt=s(Kie);Guo=r(hmt,"AutoFeatureExtractor"),hmt.forEach(t),wQe.forEach(t),CXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(EL.$$.fragment,ol),Ouo=i(ol),CL=n(ol,"P",{});var AQe=s(CL);Vuo=r(AQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oq=n(AQe,"A",{href:!0});var pmt=s(oq);Xuo=r(pmt,"AutoFeatureExtractor.from_pretrained()"),pmt.forEach(t),zuo=r(AQe," class method."),AQe.forEach(t),Quo=i(ol),wL=n(ol,"P",{});var LQe=s(wL);Wuo=r(LQe,"This class cannot be instantiated directly using "),Zie=n(LQe,"CODE",{});var _mt=s(Zie);Huo=r(_mt,"__init__()"),_mt.forEach(t),Uuo=r(LQe," (throws an error)."),LQe.forEach(t),Juo=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(AL.$$.fragment,na),Yuo=i(na),ede=n(na,"P",{});var umt=s(ede);Kuo=r(umt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),umt.forEach(t),Zuo=i(na),Ba=n(na,"P",{});var f6=s(Ba);e1o=r(f6,"The feature extractor class to instantiate is selected based on the "),ode=n(f6,"CODE",{});var bmt=s(ode);o1o=r(bmt,"model_type"),bmt.forEach(t),r1o=r(f6,` property of the config object
(either passed as an argument or loaded from `),rde=n(f6,"CODE",{});var vmt=s(rde);t1o=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),a1o=r(f6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tde=n(f6,"CODE",{});var Fmt=s(tde);n1o=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),s1o=r(f6,":"),f6.forEach(t),l1o=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var s9e=s(Ih);ade=n(s9e,"STRONG",{});var Tmt=s(ade);i1o=r(Tmt,"beit"),Tmt.forEach(t),d1o=r(s9e," \u2014 "),rq=n(s9e,"A",{href:!0});var Mmt=s(rq);c1o=r(Mmt,"BeitFeatureExtractor"),Mmt.forEach(t),f1o=r(s9e," (BEiT model)"),s9e.forEach(t),m1o=i(K),qh=n(K,"LI",{});var l9e=s(qh);nde=n(l9e,"STRONG",{});var Emt=s(nde);g1o=r(Emt,"clip"),Emt.forEach(t),h1o=r(l9e," \u2014 "),tq=n(l9e,"A",{href:!0});var Cmt=s(tq);p1o=r(Cmt,"CLIPFeatureExtractor"),Cmt.forEach(t),_1o=r(l9e," (CLIP model)"),l9e.forEach(t),u1o=i(K),jh=n(K,"LI",{});var i9e=s(jh);sde=n(i9e,"STRONG",{});var wmt=s(sde);b1o=r(wmt,"convnext"),wmt.forEach(t),v1o=r(i9e," \u2014 "),aq=n(i9e,"A",{href:!0});var Amt=s(aq);F1o=r(Amt,"ConvNextFeatureExtractor"),Amt.forEach(t),T1o=r(i9e," (ConvNeXT model)"),i9e.forEach(t),M1o=i(K),Dh=n(K,"LI",{});var d9e=s(Dh);lde=n(d9e,"STRONG",{});var Lmt=s(lde);E1o=r(Lmt,"cvt"),Lmt.forEach(t),C1o=r(d9e," \u2014 "),nq=n(d9e,"A",{href:!0});var ymt=s(nq);w1o=r(ymt,"ConvNextFeatureExtractor"),ymt.forEach(t),A1o=r(d9e," (CvT model)"),d9e.forEach(t),L1o=i(K),Gh=n(K,"LI",{});var c9e=s(Gh);ide=n(c9e,"STRONG",{});var xmt=s(ide);y1o=r(xmt,"data2vec-audio"),xmt.forEach(t),x1o=r(c9e," \u2014 "),sq=n(c9e,"A",{href:!0});var $mt=s(sq);$1o=r($mt,"Wav2Vec2FeatureExtractor"),$mt.forEach(t),k1o=r(c9e," (Data2VecAudio model)"),c9e.forEach(t),S1o=i(K),Oh=n(K,"LI",{});var f9e=s(Oh);dde=n(f9e,"STRONG",{});var kmt=s(dde);R1o=r(kmt,"data2vec-vision"),kmt.forEach(t),P1o=r(f9e," \u2014 "),lq=n(f9e,"A",{href:!0});var Smt=s(lq);B1o=r(Smt,"BeitFeatureExtractor"),Smt.forEach(t),N1o=r(f9e," (Data2VecVision model)"),f9e.forEach(t),I1o=i(K),Vh=n(K,"LI",{});var m9e=s(Vh);cde=n(m9e,"STRONG",{});var Rmt=s(cde);q1o=r(Rmt,"deit"),Rmt.forEach(t),j1o=r(m9e," \u2014 "),iq=n(m9e,"A",{href:!0});var Pmt=s(iq);D1o=r(Pmt,"DeiTFeatureExtractor"),Pmt.forEach(t),G1o=r(m9e," (DeiT model)"),m9e.forEach(t),O1o=i(K),Xh=n(K,"LI",{});var g9e=s(Xh);fde=n(g9e,"STRONG",{});var Bmt=s(fde);V1o=r(Bmt,"detr"),Bmt.forEach(t),X1o=r(g9e," \u2014 "),dq=n(g9e,"A",{href:!0});var Nmt=s(dq);z1o=r(Nmt,"DetrFeatureExtractor"),Nmt.forEach(t),Q1o=r(g9e," (DETR model)"),g9e.forEach(t),W1o=i(K),zh=n(K,"LI",{});var h9e=s(zh);mde=n(h9e,"STRONG",{});var Imt=s(mde);H1o=r(Imt,"dpt"),Imt.forEach(t),U1o=r(h9e," \u2014 "),cq=n(h9e,"A",{href:!0});var qmt=s(cq);J1o=r(qmt,"DPTFeatureExtractor"),qmt.forEach(t),Y1o=r(h9e," (DPT model)"),h9e.forEach(t),K1o=i(K),Qh=n(K,"LI",{});var p9e=s(Qh);gde=n(p9e,"STRONG",{});var jmt=s(gde);Z1o=r(jmt,"flava"),jmt.forEach(t),e2o=r(p9e," \u2014 "),fq=n(p9e,"A",{href:!0});var Dmt=s(fq);o2o=r(Dmt,"FlavaFeatureExtractor"),Dmt.forEach(t),r2o=r(p9e," (FLAVA model)"),p9e.forEach(t),t2o=i(K),Wh=n(K,"LI",{});var _9e=s(Wh);hde=n(_9e,"STRONG",{});var Gmt=s(hde);a2o=r(Gmt,"glpn"),Gmt.forEach(t),n2o=r(_9e," \u2014 "),mq=n(_9e,"A",{href:!0});var Omt=s(mq);s2o=r(Omt,"GLPNFeatureExtractor"),Omt.forEach(t),l2o=r(_9e," (GLPN model)"),_9e.forEach(t),i2o=i(K),Hh=n(K,"LI",{});var u9e=s(Hh);pde=n(u9e,"STRONG",{});var Vmt=s(pde);d2o=r(Vmt,"groupvit"),Vmt.forEach(t),c2o=r(u9e," \u2014 "),gq=n(u9e,"A",{href:!0});var Xmt=s(gq);f2o=r(Xmt,"CLIPFeatureExtractor"),Xmt.forEach(t),m2o=r(u9e," (GroupViT model)"),u9e.forEach(t),g2o=i(K),Uh=n(K,"LI",{});var b9e=s(Uh);_de=n(b9e,"STRONG",{});var zmt=s(_de);h2o=r(zmt,"hubert"),zmt.forEach(t),p2o=r(b9e," \u2014 "),hq=n(b9e,"A",{href:!0});var Qmt=s(hq);_2o=r(Qmt,"Wav2Vec2FeatureExtractor"),Qmt.forEach(t),u2o=r(b9e," (Hubert model)"),b9e.forEach(t),b2o=i(K),Jh=n(K,"LI",{});var v9e=s(Jh);ude=n(v9e,"STRONG",{});var Wmt=s(ude);v2o=r(Wmt,"imagegpt"),Wmt.forEach(t),F2o=r(v9e," \u2014 "),pq=n(v9e,"A",{href:!0});var Hmt=s(pq);T2o=r(Hmt,"ImageGPTFeatureExtractor"),Hmt.forEach(t),M2o=r(v9e," (ImageGPT model)"),v9e.forEach(t),E2o=i(K),Yh=n(K,"LI",{});var F9e=s(Yh);bde=n(F9e,"STRONG",{});var Umt=s(bde);C2o=r(Umt,"layoutlmv2"),Umt.forEach(t),w2o=r(F9e," \u2014 "),_q=n(F9e,"A",{href:!0});var Jmt=s(_q);A2o=r(Jmt,"LayoutLMv2FeatureExtractor"),Jmt.forEach(t),L2o=r(F9e," (LayoutLMv2 model)"),F9e.forEach(t),y2o=i(K),Kh=n(K,"LI",{});var T9e=s(Kh);vde=n(T9e,"STRONG",{});var Ymt=s(vde);x2o=r(Ymt,"layoutlmv3"),Ymt.forEach(t),$2o=r(T9e," \u2014 "),uq=n(T9e,"A",{href:!0});var Kmt=s(uq);k2o=r(Kmt,"LayoutLMv3FeatureExtractor"),Kmt.forEach(t),S2o=r(T9e," (LayoutLMv3 model)"),T9e.forEach(t),R2o=i(K),Zh=n(K,"LI",{});var M9e=s(Zh);Fde=n(M9e,"STRONG",{});var Zmt=s(Fde);P2o=r(Zmt,"levit"),Zmt.forEach(t),B2o=r(M9e," \u2014 "),bq=n(M9e,"A",{href:!0});var egt=s(bq);N2o=r(egt,"LevitFeatureExtractor"),egt.forEach(t),I2o=r(M9e," (LeViT model)"),M9e.forEach(t),q2o=i(K),ep=n(K,"LI",{});var E9e=s(ep);Tde=n(E9e,"STRONG",{});var ogt=s(Tde);j2o=r(ogt,"maskformer"),ogt.forEach(t),D2o=r(E9e," \u2014 "),vq=n(E9e,"A",{href:!0});var rgt=s(vq);G2o=r(rgt,"MaskFormerFeatureExtractor"),rgt.forEach(t),O2o=r(E9e," (MaskFormer model)"),E9e.forEach(t),V2o=i(K),op=n(K,"LI",{});var C9e=s(op);Mde=n(C9e,"STRONG",{});var tgt=s(Mde);X2o=r(tgt,"mctct"),tgt.forEach(t),z2o=r(C9e," \u2014 "),Fq=n(C9e,"A",{href:!0});var agt=s(Fq);Q2o=r(agt,"MCTCTFeatureExtractor"),agt.forEach(t),W2o=r(C9e," (M-CTC-T model)"),C9e.forEach(t),H2o=i(K),rp=n(K,"LI",{});var w9e=s(rp);Ede=n(w9e,"STRONG",{});var ngt=s(Ede);U2o=r(ngt,"mobilevit"),ngt.forEach(t),J2o=r(w9e," \u2014 "),Tq=n(w9e,"A",{href:!0});var sgt=s(Tq);Y2o=r(sgt,"MobileViTFeatureExtractor"),sgt.forEach(t),K2o=r(w9e," (MobileViT model)"),w9e.forEach(t),Z2o=i(K),tp=n(K,"LI",{});var A9e=s(tp);Cde=n(A9e,"STRONG",{});var lgt=s(Cde);ebo=r(lgt,"perceiver"),lgt.forEach(t),obo=r(A9e," \u2014 "),Mq=n(A9e,"A",{href:!0});var igt=s(Mq);rbo=r(igt,"PerceiverFeatureExtractor"),igt.forEach(t),tbo=r(A9e," (Perceiver model)"),A9e.forEach(t),abo=i(K),ap=n(K,"LI",{});var L9e=s(ap);wde=n(L9e,"STRONG",{});var dgt=s(wde);nbo=r(dgt,"poolformer"),dgt.forEach(t),sbo=r(L9e," \u2014 "),Eq=n(L9e,"A",{href:!0});var cgt=s(Eq);lbo=r(cgt,"PoolFormerFeatureExtractor"),cgt.forEach(t),ibo=r(L9e," (PoolFormer model)"),L9e.forEach(t),dbo=i(K),np=n(K,"LI",{});var y9e=s(np);Ade=n(y9e,"STRONG",{});var fgt=s(Ade);cbo=r(fgt,"regnet"),fgt.forEach(t),fbo=r(y9e," \u2014 "),Cq=n(y9e,"A",{href:!0});var mgt=s(Cq);mbo=r(mgt,"ConvNextFeatureExtractor"),mgt.forEach(t),gbo=r(y9e," (RegNet model)"),y9e.forEach(t),hbo=i(K),sp=n(K,"LI",{});var x9e=s(sp);Lde=n(x9e,"STRONG",{});var ggt=s(Lde);pbo=r(ggt,"resnet"),ggt.forEach(t),_bo=r(x9e," \u2014 "),wq=n(x9e,"A",{href:!0});var hgt=s(wq);ubo=r(hgt,"ConvNextFeatureExtractor"),hgt.forEach(t),bbo=r(x9e," (ResNet model)"),x9e.forEach(t),vbo=i(K),lp=n(K,"LI",{});var $9e=s(lp);yde=n($9e,"STRONG",{});var pgt=s(yde);Fbo=r(pgt,"segformer"),pgt.forEach(t),Tbo=r($9e," \u2014 "),Aq=n($9e,"A",{href:!0});var _gt=s(Aq);Mbo=r(_gt,"SegformerFeatureExtractor"),_gt.forEach(t),Ebo=r($9e," (SegFormer model)"),$9e.forEach(t),Cbo=i(K),ip=n(K,"LI",{});var k9e=s(ip);xde=n(k9e,"STRONG",{});var ugt=s(xde);wbo=r(ugt,"speech_to_text"),ugt.forEach(t),Abo=r(k9e," \u2014 "),Lq=n(k9e,"A",{href:!0});var bgt=s(Lq);Lbo=r(bgt,"Speech2TextFeatureExtractor"),bgt.forEach(t),ybo=r(k9e," (Speech2Text model)"),k9e.forEach(t),xbo=i(K),dp=n(K,"LI",{});var S9e=s(dp);$de=n(S9e,"STRONG",{});var vgt=s($de);$bo=r(vgt,"swin"),vgt.forEach(t),kbo=r(S9e," \u2014 "),yq=n(S9e,"A",{href:!0});var Fgt=s(yq);Sbo=r(Fgt,"ViTFeatureExtractor"),Fgt.forEach(t),Rbo=r(S9e," (Swin Transformer model)"),S9e.forEach(t),Pbo=i(K),cp=n(K,"LI",{});var R9e=s(cp);kde=n(R9e,"STRONG",{});var Tgt=s(kde);Bbo=r(Tgt,"van"),Tgt.forEach(t),Nbo=r(R9e," \u2014 "),xq=n(R9e,"A",{href:!0});var Mgt=s(xq);Ibo=r(Mgt,"ConvNextFeatureExtractor"),Mgt.forEach(t),qbo=r(R9e," (VAN model)"),R9e.forEach(t),jbo=i(K),fp=n(K,"LI",{});var P9e=s(fp);Sde=n(P9e,"STRONG",{});var Egt=s(Sde);Dbo=r(Egt,"vilt"),Egt.forEach(t),Gbo=r(P9e," \u2014 "),$q=n(P9e,"A",{href:!0});var Cgt=s($q);Obo=r(Cgt,"ViltFeatureExtractor"),Cgt.forEach(t),Vbo=r(P9e," (ViLT model)"),P9e.forEach(t),Xbo=i(K),mp=n(K,"LI",{});var B9e=s(mp);Rde=n(B9e,"STRONG",{});var wgt=s(Rde);zbo=r(wgt,"vit"),wgt.forEach(t),Qbo=r(B9e," \u2014 "),kq=n(B9e,"A",{href:!0});var Agt=s(kq);Wbo=r(Agt,"ViTFeatureExtractor"),Agt.forEach(t),Hbo=r(B9e," (ViT model)"),B9e.forEach(t),Ubo=i(K),gp=n(K,"LI",{});var N9e=s(gp);Pde=n(N9e,"STRONG",{});var Lgt=s(Pde);Jbo=r(Lgt,"vit_mae"),Lgt.forEach(t),Ybo=r(N9e," \u2014 "),Sq=n(N9e,"A",{href:!0});var ygt=s(Sq);Kbo=r(ygt,"ViTFeatureExtractor"),ygt.forEach(t),Zbo=r(N9e," (ViTMAE model)"),N9e.forEach(t),e3o=i(K),hp=n(K,"LI",{});var I9e=s(hp);Bde=n(I9e,"STRONG",{});var xgt=s(Bde);o3o=r(xgt,"wav2vec2"),xgt.forEach(t),r3o=r(I9e," \u2014 "),Rq=n(I9e,"A",{href:!0});var $gt=s(Rq);t3o=r($gt,"Wav2Vec2FeatureExtractor"),$gt.forEach(t),a3o=r(I9e," (Wav2Vec2 model)"),I9e.forEach(t),n3o=i(K),pp=n(K,"LI",{});var q9e=s(pp);Nde=n(q9e,"STRONG",{});var kgt=s(Nde);s3o=r(kgt,"wav2vec2-conformer"),kgt.forEach(t),l3o=r(q9e," \u2014 "),Pq=n(q9e,"A",{href:!0});var Sgt=s(Pq);i3o=r(Sgt,"Wav2Vec2FeatureExtractor"),Sgt.forEach(t),d3o=r(q9e," (Wav2Vec2-Conformer model)"),q9e.forEach(t),c3o=i(K),_p=n(K,"LI",{});var j9e=s(_p);Ide=n(j9e,"STRONG",{});var Rgt=s(Ide);f3o=r(Rgt,"yolos"),Rgt.forEach(t),m3o=r(j9e," \u2014 "),Bq=n(j9e,"A",{href:!0});var Pgt=s(Bq);g3o=r(Pgt,"YolosFeatureExtractor"),Pgt.forEach(t),h3o=r(j9e," (YOLOS model)"),j9e.forEach(t),K.forEach(t),p3o=i(na),T(up.$$.fragment,na),_3o=i(na),T(bp.$$.fragment,na),na.forEach(t),u3o=i(ol),vp=n(ol,"DIV",{class:!0});var yQe=s(vp);T(LL.$$.fragment,yQe),b3o=i(yQe),qde=n(yQe,"P",{});var Bgt=s(qde);v3o=r(Bgt,"Register a new feature extractor for this class."),Bgt.forEach(t),yQe.forEach(t),ol.forEach(t),wXe=i(f),Di=n(f,"H2",{class:!0});var xQe=s(Di);Fp=n(xQe,"A",{id:!0,class:!0,href:!0});var Ngt=s(Fp);jde=n(Ngt,"SPAN",{});var Igt=s(jde);T(yL.$$.fragment,Igt),Igt.forEach(t),Ngt.forEach(t),F3o=i(xQe),Dde=n(xQe,"SPAN",{});var qgt=s(Dde);T3o=r(qgt,"AutoProcessor"),qgt.forEach(t),xQe.forEach(t),AXe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T(xL.$$.fragment,rl),M3o=i(rl),$L=n(rl,"P",{});var $Qe=s($L);E3o=r($Qe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Nq=n($Qe,"A",{href:!0});var jgt=s(Nq);C3o=r(jgt,"AutoProcessor.from_pretrained()"),jgt.forEach(t),w3o=r($Qe," class method."),$Qe.forEach(t),A3o=i(rl),kL=n(rl,"P",{});var kQe=s(kL);L3o=r(kQe,"This class cannot be instantiated directly using "),Gde=n(kQe,"CODE",{});var Dgt=s(Gde);y3o=r(Dgt,"__init__()"),Dgt.forEach(t),x3o=r(kQe," (throws an error)."),kQe.forEach(t),$3o=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(SL.$$.fragment,sa),k3o=i(sa),Ode=n(sa,"P",{});var Ggt=s(Ode);S3o=r(Ggt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ggt.forEach(t),R3o=i(sa),Gi=n(sa,"P",{});var Dre=s(Gi);P3o=r(Dre,"The processor class to instantiate is selected based on the "),Vde=n(Dre,"CODE",{});var Ogt=s(Vde);B3o=r(Ogt,"model_type"),Ogt.forEach(t),N3o=r(Dre,` property of the config object (either
passed as an argument or loaded from `),Xde=n(Dre,"CODE",{});var Vgt=s(Xde);I3o=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),q3o=r(Dre," if possible):"),Dre.forEach(t),j3o=i(sa),pe=n(sa,"UL",{});var be=s(pe);Tp=n(be,"LI",{});var D9e=s(Tp);zde=n(D9e,"STRONG",{});var Xgt=s(zde);D3o=r(Xgt,"clip"),Xgt.forEach(t),G3o=r(D9e," \u2014 "),Iq=n(D9e,"A",{href:!0});var zgt=s(Iq);O3o=r(zgt,"CLIPProcessor"),zgt.forEach(t),V3o=r(D9e," (CLIP model)"),D9e.forEach(t),X3o=i(be),Mp=n(be,"LI",{});var G9e=s(Mp);Qde=n(G9e,"STRONG",{});var Qgt=s(Qde);z3o=r(Qgt,"flava"),Qgt.forEach(t),Q3o=r(G9e," \u2014 "),Wde=n(G9e,"CODE",{});var Wgt=s(Wde);W3o=r(Wgt,"FLAVAProcessor"),Wgt.forEach(t),H3o=r(G9e," (FLAVA model)"),G9e.forEach(t),U3o=i(be),Ep=n(be,"LI",{});var O9e=s(Ep);Hde=n(O9e,"STRONG",{});var Hgt=s(Hde);J3o=r(Hgt,"groupvit"),Hgt.forEach(t),Y3o=r(O9e," \u2014 "),qq=n(O9e,"A",{href:!0});var Ugt=s(qq);K3o=r(Ugt,"CLIPProcessor"),Ugt.forEach(t),Z3o=r(O9e," (GroupViT model)"),O9e.forEach(t),evo=i(be),Cp=n(be,"LI",{});var V9e=s(Cp);Ude=n(V9e,"STRONG",{});var Jgt=s(Ude);ovo=r(Jgt,"layoutlmv2"),Jgt.forEach(t),rvo=r(V9e," \u2014 "),jq=n(V9e,"A",{href:!0});var Ygt=s(jq);tvo=r(Ygt,"LayoutLMv2Processor"),Ygt.forEach(t),avo=r(V9e," (LayoutLMv2 model)"),V9e.forEach(t),nvo=i(be),wp=n(be,"LI",{});var X9e=s(wp);Jde=n(X9e,"STRONG",{});var Kgt=s(Jde);svo=r(Kgt,"layoutlmv3"),Kgt.forEach(t),lvo=r(X9e," \u2014 "),Dq=n(X9e,"A",{href:!0});var Zgt=s(Dq);ivo=r(Zgt,"LayoutLMv3Processor"),Zgt.forEach(t),dvo=r(X9e," (LayoutLMv3 model)"),X9e.forEach(t),cvo=i(be),Ap=n(be,"LI",{});var z9e=s(Ap);Yde=n(z9e,"STRONG",{});var eht=s(Yde);fvo=r(eht,"layoutxlm"),eht.forEach(t),mvo=r(z9e," \u2014 "),Gq=n(z9e,"A",{href:!0});var oht=s(Gq);gvo=r(oht,"LayoutXLMProcessor"),oht.forEach(t),hvo=r(z9e," (LayoutXLM model)"),z9e.forEach(t),pvo=i(be),Lp=n(be,"LI",{});var Q9e=s(Lp);Kde=n(Q9e,"STRONG",{});var rht=s(Kde);_vo=r(rht,"sew"),rht.forEach(t),uvo=r(Q9e," \u2014 "),Oq=n(Q9e,"A",{href:!0});var tht=s(Oq);bvo=r(tht,"Wav2Vec2Processor"),tht.forEach(t),vvo=r(Q9e," (SEW model)"),Q9e.forEach(t),Fvo=i(be),yp=n(be,"LI",{});var W9e=s(yp);Zde=n(W9e,"STRONG",{});var aht=s(Zde);Tvo=r(aht,"sew-d"),aht.forEach(t),Mvo=r(W9e," \u2014 "),Vq=n(W9e,"A",{href:!0});var nht=s(Vq);Evo=r(nht,"Wav2Vec2Processor"),nht.forEach(t),Cvo=r(W9e," (SEW-D model)"),W9e.forEach(t),wvo=i(be),xp=n(be,"LI",{});var H9e=s(xp);ece=n(H9e,"STRONG",{});var sht=s(ece);Avo=r(sht,"speech_to_text"),sht.forEach(t),Lvo=r(H9e," \u2014 "),Xq=n(H9e,"A",{href:!0});var lht=s(Xq);yvo=r(lht,"Speech2TextProcessor"),lht.forEach(t),xvo=r(H9e," (Speech2Text model)"),H9e.forEach(t),$vo=i(be),$p=n(be,"LI",{});var U9e=s($p);oce=n(U9e,"STRONG",{});var iht=s(oce);kvo=r(iht,"speech_to_text_2"),iht.forEach(t),Svo=r(U9e," \u2014 "),zq=n(U9e,"A",{href:!0});var dht=s(zq);Rvo=r(dht,"Speech2Text2Processor"),dht.forEach(t),Pvo=r(U9e," (Speech2Text2 model)"),U9e.forEach(t),Bvo=i(be),kp=n(be,"LI",{});var J9e=s(kp);rce=n(J9e,"STRONG",{});var cht=s(rce);Nvo=r(cht,"trocr"),cht.forEach(t),Ivo=r(J9e," \u2014 "),Qq=n(J9e,"A",{href:!0});var fht=s(Qq);qvo=r(fht,"TrOCRProcessor"),fht.forEach(t),jvo=r(J9e," (TrOCR model)"),J9e.forEach(t),Dvo=i(be),Sp=n(be,"LI",{});var Y9e=s(Sp);tce=n(Y9e,"STRONG",{});var mht=s(tce);Gvo=r(mht,"unispeech"),mht.forEach(t),Ovo=r(Y9e," \u2014 "),Wq=n(Y9e,"A",{href:!0});var ght=s(Wq);Vvo=r(ght,"Wav2Vec2Processor"),ght.forEach(t),Xvo=r(Y9e," (UniSpeech model)"),Y9e.forEach(t),zvo=i(be),Rp=n(be,"LI",{});var K9e=s(Rp);ace=n(K9e,"STRONG",{});var hht=s(ace);Qvo=r(hht,"unispeech-sat"),hht.forEach(t),Wvo=r(K9e," \u2014 "),Hq=n(K9e,"A",{href:!0});var pht=s(Hq);Hvo=r(pht,"Wav2Vec2Processor"),pht.forEach(t),Uvo=r(K9e," (UniSpeechSat model)"),K9e.forEach(t),Jvo=i(be),Pp=n(be,"LI",{});var Z9e=s(Pp);nce=n(Z9e,"STRONG",{});var _ht=s(nce);Yvo=r(_ht,"vilt"),_ht.forEach(t),Kvo=r(Z9e," \u2014 "),Uq=n(Z9e,"A",{href:!0});var uht=s(Uq);Zvo=r(uht,"ViltProcessor"),uht.forEach(t),eFo=r(Z9e," (ViLT model)"),Z9e.forEach(t),oFo=i(be),Bp=n(be,"LI",{});var exe=s(Bp);sce=n(exe,"STRONG",{});var bht=s(sce);rFo=r(bht,"vision-text-dual-encoder"),bht.forEach(t),tFo=r(exe," \u2014 "),Jq=n(exe,"A",{href:!0});var vht=s(Jq);aFo=r(vht,"VisionTextDualEncoderProcessor"),vht.forEach(t),nFo=r(exe," (VisionTextDualEncoder model)"),exe.forEach(t),sFo=i(be),Np=n(be,"LI",{});var oxe=s(Np);lce=n(oxe,"STRONG",{});var Fht=s(lce);lFo=r(Fht,"wav2vec2"),Fht.forEach(t),iFo=r(oxe," \u2014 "),Yq=n(oxe,"A",{href:!0});var Tht=s(Yq);dFo=r(Tht,"Wav2Vec2Processor"),Tht.forEach(t),cFo=r(oxe," (Wav2Vec2 model)"),oxe.forEach(t),fFo=i(be),Ip=n(be,"LI",{});var rxe=s(Ip);ice=n(rxe,"STRONG",{});var Mht=s(ice);mFo=r(Mht,"wav2vec2-conformer"),Mht.forEach(t),gFo=r(rxe," \u2014 "),Kq=n(rxe,"A",{href:!0});var Eht=s(Kq);hFo=r(Eht,"Wav2Vec2Processor"),Eht.forEach(t),pFo=r(rxe," (Wav2Vec2-Conformer model)"),rxe.forEach(t),_Fo=i(be),qp=n(be,"LI",{});var txe=s(qp);dce=n(txe,"STRONG",{});var Cht=s(dce);uFo=r(Cht,"wavlm"),Cht.forEach(t),bFo=r(txe," \u2014 "),Zq=n(txe,"A",{href:!0});var wht=s(Zq);vFo=r(wht,"Wav2Vec2Processor"),wht.forEach(t),FFo=r(txe," (WavLM model)"),txe.forEach(t),be.forEach(t),TFo=i(sa),T(jp.$$.fragment,sa),MFo=i(sa),T(Dp.$$.fragment,sa),sa.forEach(t),EFo=i(rl),Gp=n(rl,"DIV",{class:!0});var SQe=s(Gp);T(RL.$$.fragment,SQe),CFo=i(SQe),cce=n(SQe,"P",{});var Aht=s(cce);wFo=r(Aht,"Register a new processor for this class."),Aht.forEach(t),SQe.forEach(t),rl.forEach(t),LXe=i(f),Oi=n(f,"H2",{class:!0});var RQe=s(Oi);Op=n(RQe,"A",{id:!0,class:!0,href:!0});var Lht=s(Op);fce=n(Lht,"SPAN",{});var yht=s(fce);T(PL.$$.fragment,yht),yht.forEach(t),Lht.forEach(t),AFo=i(RQe),mce=n(RQe,"SPAN",{});var xht=s(mce);LFo=r(xht,"AutoModel"),xht.forEach(t),RQe.forEach(t),yXe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(BL.$$.fragment,tl),yFo=i(tl),Vi=n(tl,"P",{});var Gre=s(Vi);xFo=r(Gre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ej=n(Gre,"A",{href:!0});var $ht=s(ej);$Fo=r($ht,"from_pretrained()"),$ht.forEach(t),kFo=r(Gre," class method or the "),oj=n(Gre,"A",{href:!0});var kht=s(oj);SFo=r(kht,"from_config()"),kht.forEach(t),RFo=r(Gre,` class
method.`),Gre.forEach(t),PFo=i(tl),NL=n(tl,"P",{});var PQe=s(NL);BFo=r(PQe,"This class cannot be instantiated directly using "),gce=n(PQe,"CODE",{});var Sht=s(gce);NFo=r(Sht,"__init__()"),Sht.forEach(t),IFo=r(PQe," (throws an error)."),PQe.forEach(t),qFo=i(tl),it=n(tl,"DIV",{class:!0});var m6=s(it);T(IL.$$.fragment,m6),jFo=i(m6),hce=n(m6,"P",{});var Rht=s(hce);DFo=r(Rht,"Instantiates one of the base model classes of the library from a configuration."),Rht.forEach(t),GFo=i(m6),Xi=n(m6,"P",{});var Ore=s(Xi);OFo=r(Ore,`Note:
Loading a model from its configuration file does `),pce=n(Ore,"STRONG",{});var Pht=s(pce);VFo=r(Pht,"not"),Pht.forEach(t),XFo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=n(Ore,"A",{href:!0});var Bht=s(rj);zFo=r(Bht,"from_pretrained()"),Bht.forEach(t),QFo=r(Ore," to load the model weights."),Ore.forEach(t),WFo=i(m6),T(Vp.$$.fragment,m6),m6.forEach(t),HFo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(qL.$$.fragment,la),UFo=i(la),_ce=n(la,"P",{});var Nht=s(_ce);JFo=r(Nht,"Instantiate one of the base model classes of the library from a pretrained model."),Nht.forEach(t),YFo=i(la),Na=n(la,"P",{});var g6=s(Na);KFo=r(g6,"The model class to instantiate is selected based on the "),uce=n(g6,"CODE",{});var Iht=s(uce);ZFo=r(Iht,"model_type"),Iht.forEach(t),eTo=r(g6,` property of the config object (either
passed as an argument or loaded from `),bce=n(g6,"CODE",{});var qht=s(bce);oTo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),rTo=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=n(g6,"CODE",{});var jht=s(vce);tTo=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),aTo=r(g6,":"),g6.forEach(t),nTo=i(la),y=n(la,"UL",{});var x=s(y);Xp=n(x,"LI",{});var axe=s(Xp);Fce=n(axe,"STRONG",{});var Dht=s(Fce);sTo=r(Dht,"albert"),Dht.forEach(t),lTo=r(axe," \u2014 "),tj=n(axe,"A",{href:!0});var Ght=s(tj);iTo=r(Ght,"AlbertModel"),Ght.forEach(t),dTo=r(axe," (ALBERT model)"),axe.forEach(t),cTo=i(x),zp=n(x,"LI",{});var nxe=s(zp);Tce=n(nxe,"STRONG",{});var Oht=s(Tce);fTo=r(Oht,"bart"),Oht.forEach(t),mTo=r(nxe," \u2014 "),aj=n(nxe,"A",{href:!0});var Vht=s(aj);gTo=r(Vht,"BartModel"),Vht.forEach(t),hTo=r(nxe," (BART model)"),nxe.forEach(t),pTo=i(x),Qp=n(x,"LI",{});var sxe=s(Qp);Mce=n(sxe,"STRONG",{});var Xht=s(Mce);_To=r(Xht,"beit"),Xht.forEach(t),uTo=r(sxe," \u2014 "),nj=n(sxe,"A",{href:!0});var zht=s(nj);bTo=r(zht,"BeitModel"),zht.forEach(t),vTo=r(sxe," (BEiT model)"),sxe.forEach(t),FTo=i(x),Wp=n(x,"LI",{});var lxe=s(Wp);Ece=n(lxe,"STRONG",{});var Qht=s(Ece);TTo=r(Qht,"bert"),Qht.forEach(t),MTo=r(lxe," \u2014 "),sj=n(lxe,"A",{href:!0});var Wht=s(sj);ETo=r(Wht,"BertModel"),Wht.forEach(t),CTo=r(lxe," (BERT model)"),lxe.forEach(t),wTo=i(x),Hp=n(x,"LI",{});var ixe=s(Hp);Cce=n(ixe,"STRONG",{});var Hht=s(Cce);ATo=r(Hht,"bert-generation"),Hht.forEach(t),LTo=r(ixe," \u2014 "),lj=n(ixe,"A",{href:!0});var Uht=s(lj);yTo=r(Uht,"BertGenerationEncoder"),Uht.forEach(t),xTo=r(ixe," (Bert Generation model)"),ixe.forEach(t),$To=i(x),Up=n(x,"LI",{});var dxe=s(Up);wce=n(dxe,"STRONG",{});var Jht=s(wce);kTo=r(Jht,"big_bird"),Jht.forEach(t),STo=r(dxe," \u2014 "),ij=n(dxe,"A",{href:!0});var Yht=s(ij);RTo=r(Yht,"BigBirdModel"),Yht.forEach(t),PTo=r(dxe," (BigBird model)"),dxe.forEach(t),BTo=i(x),Jp=n(x,"LI",{});var cxe=s(Jp);Ace=n(cxe,"STRONG",{});var Kht=s(Ace);NTo=r(Kht,"bigbird_pegasus"),Kht.forEach(t),ITo=r(cxe," \u2014 "),dj=n(cxe,"A",{href:!0});var Zht=s(dj);qTo=r(Zht,"BigBirdPegasusModel"),Zht.forEach(t),jTo=r(cxe," (BigBird-Pegasus model)"),cxe.forEach(t),DTo=i(x),Yp=n(x,"LI",{});var fxe=s(Yp);Lce=n(fxe,"STRONG",{});var ept=s(Lce);GTo=r(ept,"blenderbot"),ept.forEach(t),OTo=r(fxe," \u2014 "),cj=n(fxe,"A",{href:!0});var opt=s(cj);VTo=r(opt,"BlenderbotModel"),opt.forEach(t),XTo=r(fxe," (Blenderbot model)"),fxe.forEach(t),zTo=i(x),Kp=n(x,"LI",{});var mxe=s(Kp);yce=n(mxe,"STRONG",{});var rpt=s(yce);QTo=r(rpt,"blenderbot-small"),rpt.forEach(t),WTo=r(mxe," \u2014 "),fj=n(mxe,"A",{href:!0});var tpt=s(fj);HTo=r(tpt,"BlenderbotSmallModel"),tpt.forEach(t),UTo=r(mxe," (BlenderbotSmall model)"),mxe.forEach(t),JTo=i(x),Zp=n(x,"LI",{});var gxe=s(Zp);xce=n(gxe,"STRONG",{});var apt=s(xce);YTo=r(apt,"bloom"),apt.forEach(t),KTo=r(gxe," \u2014 "),mj=n(gxe,"A",{href:!0});var npt=s(mj);ZTo=r(npt,"BloomModel"),npt.forEach(t),e8o=r(gxe," (BLOOM model)"),gxe.forEach(t),o8o=i(x),e_=n(x,"LI",{});var hxe=s(e_);$ce=n(hxe,"STRONG",{});var spt=s($ce);r8o=r(spt,"camembert"),spt.forEach(t),t8o=r(hxe," \u2014 "),gj=n(hxe,"A",{href:!0});var lpt=s(gj);a8o=r(lpt,"CamembertModel"),lpt.forEach(t),n8o=r(hxe," (CamemBERT model)"),hxe.forEach(t),s8o=i(x),o_=n(x,"LI",{});var pxe=s(o_);kce=n(pxe,"STRONG",{});var ipt=s(kce);l8o=r(ipt,"canine"),ipt.forEach(t),i8o=r(pxe," \u2014 "),hj=n(pxe,"A",{href:!0});var dpt=s(hj);d8o=r(dpt,"CanineModel"),dpt.forEach(t),c8o=r(pxe," (CANINE model)"),pxe.forEach(t),f8o=i(x),r_=n(x,"LI",{});var _xe=s(r_);Sce=n(_xe,"STRONG",{});var cpt=s(Sce);m8o=r(cpt,"clip"),cpt.forEach(t),g8o=r(_xe," \u2014 "),pj=n(_xe,"A",{href:!0});var fpt=s(pj);h8o=r(fpt,"CLIPModel"),fpt.forEach(t),p8o=r(_xe," (CLIP model)"),_xe.forEach(t),_8o=i(x),t_=n(x,"LI",{});var uxe=s(t_);Rce=n(uxe,"STRONG",{});var mpt=s(Rce);u8o=r(mpt,"codegen"),mpt.forEach(t),b8o=r(uxe," \u2014 "),_j=n(uxe,"A",{href:!0});var gpt=s(_j);v8o=r(gpt,"CodeGenModel"),gpt.forEach(t),F8o=r(uxe," (CodeGen model)"),uxe.forEach(t),T8o=i(x),a_=n(x,"LI",{});var bxe=s(a_);Pce=n(bxe,"STRONG",{});var hpt=s(Pce);M8o=r(hpt,"convbert"),hpt.forEach(t),E8o=r(bxe," \u2014 "),uj=n(bxe,"A",{href:!0});var ppt=s(uj);C8o=r(ppt,"ConvBertModel"),ppt.forEach(t),w8o=r(bxe," (ConvBERT model)"),bxe.forEach(t),A8o=i(x),n_=n(x,"LI",{});var vxe=s(n_);Bce=n(vxe,"STRONG",{});var _pt=s(Bce);L8o=r(_pt,"convnext"),_pt.forEach(t),y8o=r(vxe," \u2014 "),bj=n(vxe,"A",{href:!0});var upt=s(bj);x8o=r(upt,"ConvNextModel"),upt.forEach(t),$8o=r(vxe," (ConvNeXT model)"),vxe.forEach(t),k8o=i(x),s_=n(x,"LI",{});var Fxe=s(s_);Nce=n(Fxe,"STRONG",{});var bpt=s(Nce);S8o=r(bpt,"ctrl"),bpt.forEach(t),R8o=r(Fxe," \u2014 "),vj=n(Fxe,"A",{href:!0});var vpt=s(vj);P8o=r(vpt,"CTRLModel"),vpt.forEach(t),B8o=r(Fxe," (CTRL model)"),Fxe.forEach(t),N8o=i(x),l_=n(x,"LI",{});var Txe=s(l_);Ice=n(Txe,"STRONG",{});var Fpt=s(Ice);I8o=r(Fpt,"cvt"),Fpt.forEach(t),q8o=r(Txe," \u2014 "),Fj=n(Txe,"A",{href:!0});var Tpt=s(Fj);j8o=r(Tpt,"CvtModel"),Tpt.forEach(t),D8o=r(Txe," (CvT model)"),Txe.forEach(t),G8o=i(x),i_=n(x,"LI",{});var Mxe=s(i_);qce=n(Mxe,"STRONG",{});var Mpt=s(qce);O8o=r(Mpt,"data2vec-audio"),Mpt.forEach(t),V8o=r(Mxe," \u2014 "),Tj=n(Mxe,"A",{href:!0});var Ept=s(Tj);X8o=r(Ept,"Data2VecAudioModel"),Ept.forEach(t),z8o=r(Mxe," (Data2VecAudio model)"),Mxe.forEach(t),Q8o=i(x),d_=n(x,"LI",{});var Exe=s(d_);jce=n(Exe,"STRONG",{});var Cpt=s(jce);W8o=r(Cpt,"data2vec-text"),Cpt.forEach(t),H8o=r(Exe," \u2014 "),Mj=n(Exe,"A",{href:!0});var wpt=s(Mj);U8o=r(wpt,"Data2VecTextModel"),wpt.forEach(t),J8o=r(Exe," (Data2VecText model)"),Exe.forEach(t),Y8o=i(x),c_=n(x,"LI",{});var Cxe=s(c_);Dce=n(Cxe,"STRONG",{});var Apt=s(Dce);K8o=r(Apt,"data2vec-vision"),Apt.forEach(t),Z8o=r(Cxe," \u2014 "),Ej=n(Cxe,"A",{href:!0});var Lpt=s(Ej);eMo=r(Lpt,"Data2VecVisionModel"),Lpt.forEach(t),oMo=r(Cxe," (Data2VecVision model)"),Cxe.forEach(t),rMo=i(x),f_=n(x,"LI",{});var wxe=s(f_);Gce=n(wxe,"STRONG",{});var ypt=s(Gce);tMo=r(ypt,"deberta"),ypt.forEach(t),aMo=r(wxe," \u2014 "),Cj=n(wxe,"A",{href:!0});var xpt=s(Cj);nMo=r(xpt,"DebertaModel"),xpt.forEach(t),sMo=r(wxe," (DeBERTa model)"),wxe.forEach(t),lMo=i(x),m_=n(x,"LI",{});var Axe=s(m_);Oce=n(Axe,"STRONG",{});var $pt=s(Oce);iMo=r($pt,"deberta-v2"),$pt.forEach(t),dMo=r(Axe," \u2014 "),wj=n(Axe,"A",{href:!0});var kpt=s(wj);cMo=r(kpt,"DebertaV2Model"),kpt.forEach(t),fMo=r(Axe," (DeBERTa-v2 model)"),Axe.forEach(t),mMo=i(x),g_=n(x,"LI",{});var Lxe=s(g_);Vce=n(Lxe,"STRONG",{});var Spt=s(Vce);gMo=r(Spt,"decision_transformer"),Spt.forEach(t),hMo=r(Lxe," \u2014 "),Aj=n(Lxe,"A",{href:!0});var Rpt=s(Aj);pMo=r(Rpt,"DecisionTransformerModel"),Rpt.forEach(t),_Mo=r(Lxe," (Decision Transformer model)"),Lxe.forEach(t),uMo=i(x),h_=n(x,"LI",{});var yxe=s(h_);Xce=n(yxe,"STRONG",{});var Ppt=s(Xce);bMo=r(Ppt,"deit"),Ppt.forEach(t),vMo=r(yxe," \u2014 "),Lj=n(yxe,"A",{href:!0});var Bpt=s(Lj);FMo=r(Bpt,"DeiTModel"),Bpt.forEach(t),TMo=r(yxe," (DeiT model)"),yxe.forEach(t),MMo=i(x),p_=n(x,"LI",{});var xxe=s(p_);zce=n(xxe,"STRONG",{});var Npt=s(zce);EMo=r(Npt,"detr"),Npt.forEach(t),CMo=r(xxe," \u2014 "),yj=n(xxe,"A",{href:!0});var Ipt=s(yj);wMo=r(Ipt,"DetrModel"),Ipt.forEach(t),AMo=r(xxe," (DETR model)"),xxe.forEach(t),LMo=i(x),__=n(x,"LI",{});var $xe=s(__);Qce=n($xe,"STRONG",{});var qpt=s(Qce);yMo=r(qpt,"distilbert"),qpt.forEach(t),xMo=r($xe," \u2014 "),xj=n($xe,"A",{href:!0});var jpt=s(xj);$Mo=r(jpt,"DistilBertModel"),jpt.forEach(t),kMo=r($xe," (DistilBERT model)"),$xe.forEach(t),SMo=i(x),u_=n(x,"LI",{});var kxe=s(u_);Wce=n(kxe,"STRONG",{});var Dpt=s(Wce);RMo=r(Dpt,"dpr"),Dpt.forEach(t),PMo=r(kxe," \u2014 "),$j=n(kxe,"A",{href:!0});var Gpt=s($j);BMo=r(Gpt,"DPRQuestionEncoder"),Gpt.forEach(t),NMo=r(kxe," (DPR model)"),kxe.forEach(t),IMo=i(x),b_=n(x,"LI",{});var Sxe=s(b_);Hce=n(Sxe,"STRONG",{});var Opt=s(Hce);qMo=r(Opt,"dpt"),Opt.forEach(t),jMo=r(Sxe," \u2014 "),kj=n(Sxe,"A",{href:!0});var Vpt=s(kj);DMo=r(Vpt,"DPTModel"),Vpt.forEach(t),GMo=r(Sxe," (DPT model)"),Sxe.forEach(t),OMo=i(x),v_=n(x,"LI",{});var Rxe=s(v_);Uce=n(Rxe,"STRONG",{});var Xpt=s(Uce);VMo=r(Xpt,"electra"),Xpt.forEach(t),XMo=r(Rxe," \u2014 "),Sj=n(Rxe,"A",{href:!0});var zpt=s(Sj);zMo=r(zpt,"ElectraModel"),zpt.forEach(t),QMo=r(Rxe," (ELECTRA model)"),Rxe.forEach(t),WMo=i(x),F_=n(x,"LI",{});var Pxe=s(F_);Jce=n(Pxe,"STRONG",{});var Qpt=s(Jce);HMo=r(Qpt,"flaubert"),Qpt.forEach(t),UMo=r(Pxe," \u2014 "),Rj=n(Pxe,"A",{href:!0});var Wpt=s(Rj);JMo=r(Wpt,"FlaubertModel"),Wpt.forEach(t),YMo=r(Pxe," (FlauBERT model)"),Pxe.forEach(t),KMo=i(x),T_=n(x,"LI",{});var Bxe=s(T_);Yce=n(Bxe,"STRONG",{});var Hpt=s(Yce);ZMo=r(Hpt,"flava"),Hpt.forEach(t),e4o=r(Bxe," \u2014 "),Pj=n(Bxe,"A",{href:!0});var Upt=s(Pj);o4o=r(Upt,"FlavaModel"),Upt.forEach(t),r4o=r(Bxe," (FLAVA model)"),Bxe.forEach(t),t4o=i(x),M_=n(x,"LI",{});var Nxe=s(M_);Kce=n(Nxe,"STRONG",{});var Jpt=s(Kce);a4o=r(Jpt,"fnet"),Jpt.forEach(t),n4o=r(Nxe," \u2014 "),Bj=n(Nxe,"A",{href:!0});var Ypt=s(Bj);s4o=r(Ypt,"FNetModel"),Ypt.forEach(t),l4o=r(Nxe," (FNet model)"),Nxe.forEach(t),i4o=i(x),E_=n(x,"LI",{});var Ixe=s(E_);Zce=n(Ixe,"STRONG",{});var Kpt=s(Zce);d4o=r(Kpt,"fsmt"),Kpt.forEach(t),c4o=r(Ixe," \u2014 "),Nj=n(Ixe,"A",{href:!0});var Zpt=s(Nj);f4o=r(Zpt,"FSMTModel"),Zpt.forEach(t),m4o=r(Ixe," (FairSeq Machine-Translation model)"),Ixe.forEach(t),g4o=i(x),Hs=n(x,"LI",{});var BS=s(Hs);efe=n(BS,"STRONG",{});var e_t=s(efe);h4o=r(e_t,"funnel"),e_t.forEach(t),p4o=r(BS," \u2014 "),Ij=n(BS,"A",{href:!0});var o_t=s(Ij);_4o=r(o_t,"FunnelModel"),o_t.forEach(t),u4o=r(BS," or "),qj=n(BS,"A",{href:!0});var r_t=s(qj);b4o=r(r_t,"FunnelBaseModel"),r_t.forEach(t),v4o=r(BS," (Funnel Transformer model)"),BS.forEach(t),F4o=i(x),C_=n(x,"LI",{});var qxe=s(C_);ofe=n(qxe,"STRONG",{});var t_t=s(ofe);T4o=r(t_t,"glpn"),t_t.forEach(t),M4o=r(qxe," \u2014 "),jj=n(qxe,"A",{href:!0});var a_t=s(jj);E4o=r(a_t,"GLPNModel"),a_t.forEach(t),C4o=r(qxe," (GLPN model)"),qxe.forEach(t),w4o=i(x),w_=n(x,"LI",{});var jxe=s(w_);rfe=n(jxe,"STRONG",{});var n_t=s(rfe);A4o=r(n_t,"gpt2"),n_t.forEach(t),L4o=r(jxe," \u2014 "),Dj=n(jxe,"A",{href:!0});var s_t=s(Dj);y4o=r(s_t,"GPT2Model"),s_t.forEach(t),x4o=r(jxe," (OpenAI GPT-2 model)"),jxe.forEach(t),$4o=i(x),A_=n(x,"LI",{});var Dxe=s(A_);tfe=n(Dxe,"STRONG",{});var l_t=s(tfe);k4o=r(l_t,"gpt_neo"),l_t.forEach(t),S4o=r(Dxe," \u2014 "),Gj=n(Dxe,"A",{href:!0});var i_t=s(Gj);R4o=r(i_t,"GPTNeoModel"),i_t.forEach(t),P4o=r(Dxe," (GPT Neo model)"),Dxe.forEach(t),B4o=i(x),L_=n(x,"LI",{});var Gxe=s(L_);afe=n(Gxe,"STRONG",{});var d_t=s(afe);N4o=r(d_t,"gpt_neox"),d_t.forEach(t),I4o=r(Gxe," \u2014 "),Oj=n(Gxe,"A",{href:!0});var c_t=s(Oj);q4o=r(c_t,"GPTNeoXModel"),c_t.forEach(t),j4o=r(Gxe," (GPT NeoX model)"),Gxe.forEach(t),D4o=i(x),y_=n(x,"LI",{});var Oxe=s(y_);nfe=n(Oxe,"STRONG",{});var f_t=s(nfe);G4o=r(f_t,"gptj"),f_t.forEach(t),O4o=r(Oxe," \u2014 "),Vj=n(Oxe,"A",{href:!0});var m_t=s(Vj);V4o=r(m_t,"GPTJModel"),m_t.forEach(t),X4o=r(Oxe," (GPT-J model)"),Oxe.forEach(t),z4o=i(x),x_=n(x,"LI",{});var Vxe=s(x_);sfe=n(Vxe,"STRONG",{});var g_t=s(sfe);Q4o=r(g_t,"groupvit"),g_t.forEach(t),W4o=r(Vxe," \u2014 "),Xj=n(Vxe,"A",{href:!0});var h_t=s(Xj);H4o=r(h_t,"GroupViTModel"),h_t.forEach(t),U4o=r(Vxe," (GroupViT model)"),Vxe.forEach(t),J4o=i(x),$_=n(x,"LI",{});var Xxe=s($_);lfe=n(Xxe,"STRONG",{});var p_t=s(lfe);Y4o=r(p_t,"hubert"),p_t.forEach(t),K4o=r(Xxe," \u2014 "),zj=n(Xxe,"A",{href:!0});var __t=s(zj);Z4o=r(__t,"HubertModel"),__t.forEach(t),eEo=r(Xxe," (Hubert model)"),Xxe.forEach(t),oEo=i(x),k_=n(x,"LI",{});var zxe=s(k_);ife=n(zxe,"STRONG",{});var u_t=s(ife);rEo=r(u_t,"ibert"),u_t.forEach(t),tEo=r(zxe," \u2014 "),Qj=n(zxe,"A",{href:!0});var b_t=s(Qj);aEo=r(b_t,"IBertModel"),b_t.forEach(t),nEo=r(zxe," (I-BERT model)"),zxe.forEach(t),sEo=i(x),S_=n(x,"LI",{});var Qxe=s(S_);dfe=n(Qxe,"STRONG",{});var v_t=s(dfe);lEo=r(v_t,"imagegpt"),v_t.forEach(t),iEo=r(Qxe," \u2014 "),Wj=n(Qxe,"A",{href:!0});var F_t=s(Wj);dEo=r(F_t,"ImageGPTModel"),F_t.forEach(t),cEo=r(Qxe," (ImageGPT model)"),Qxe.forEach(t),fEo=i(x),R_=n(x,"LI",{});var Wxe=s(R_);cfe=n(Wxe,"STRONG",{});var T_t=s(cfe);mEo=r(T_t,"layoutlm"),T_t.forEach(t),gEo=r(Wxe," \u2014 "),Hj=n(Wxe,"A",{href:!0});var M_t=s(Hj);hEo=r(M_t,"LayoutLMModel"),M_t.forEach(t),pEo=r(Wxe," (LayoutLM model)"),Wxe.forEach(t),_Eo=i(x),P_=n(x,"LI",{});var Hxe=s(P_);ffe=n(Hxe,"STRONG",{});var E_t=s(ffe);uEo=r(E_t,"layoutlmv2"),E_t.forEach(t),bEo=r(Hxe," \u2014 "),Uj=n(Hxe,"A",{href:!0});var C_t=s(Uj);vEo=r(C_t,"LayoutLMv2Model"),C_t.forEach(t),FEo=r(Hxe," (LayoutLMv2 model)"),Hxe.forEach(t),TEo=i(x),B_=n(x,"LI",{});var Uxe=s(B_);mfe=n(Uxe,"STRONG",{});var w_t=s(mfe);MEo=r(w_t,"layoutlmv3"),w_t.forEach(t),EEo=r(Uxe," \u2014 "),Jj=n(Uxe,"A",{href:!0});var A_t=s(Jj);CEo=r(A_t,"LayoutLMv3Model"),A_t.forEach(t),wEo=r(Uxe," (LayoutLMv3 model)"),Uxe.forEach(t),AEo=i(x),N_=n(x,"LI",{});var Jxe=s(N_);gfe=n(Jxe,"STRONG",{});var L_t=s(gfe);LEo=r(L_t,"led"),L_t.forEach(t),yEo=r(Jxe," \u2014 "),Yj=n(Jxe,"A",{href:!0});var y_t=s(Yj);xEo=r(y_t,"LEDModel"),y_t.forEach(t),$Eo=r(Jxe," (LED model)"),Jxe.forEach(t),kEo=i(x),I_=n(x,"LI",{});var Yxe=s(I_);hfe=n(Yxe,"STRONG",{});var x_t=s(hfe);SEo=r(x_t,"levit"),x_t.forEach(t),REo=r(Yxe," \u2014 "),Kj=n(Yxe,"A",{href:!0});var $_t=s(Kj);PEo=r($_t,"LevitModel"),$_t.forEach(t),BEo=r(Yxe," (LeViT model)"),Yxe.forEach(t),NEo=i(x),q_=n(x,"LI",{});var Kxe=s(q_);pfe=n(Kxe,"STRONG",{});var k_t=s(pfe);IEo=r(k_t,"longformer"),k_t.forEach(t),qEo=r(Kxe," \u2014 "),Zj=n(Kxe,"A",{href:!0});var S_t=s(Zj);jEo=r(S_t,"LongformerModel"),S_t.forEach(t),DEo=r(Kxe," (Longformer model)"),Kxe.forEach(t),GEo=i(x),j_=n(x,"LI",{});var Zxe=s(j_);_fe=n(Zxe,"STRONG",{});var R_t=s(_fe);OEo=r(R_t,"longt5"),R_t.forEach(t),VEo=r(Zxe," \u2014 "),eD=n(Zxe,"A",{href:!0});var P_t=s(eD);XEo=r(P_t,"LongT5Model"),P_t.forEach(t),zEo=r(Zxe," (LongT5 model)"),Zxe.forEach(t),QEo=i(x),D_=n(x,"LI",{});var e$e=s(D_);ufe=n(e$e,"STRONG",{});var B_t=s(ufe);WEo=r(B_t,"luke"),B_t.forEach(t),HEo=r(e$e," \u2014 "),oD=n(e$e,"A",{href:!0});var N_t=s(oD);UEo=r(N_t,"LukeModel"),N_t.forEach(t),JEo=r(e$e," (LUKE model)"),e$e.forEach(t),YEo=i(x),G_=n(x,"LI",{});var o$e=s(G_);bfe=n(o$e,"STRONG",{});var I_t=s(bfe);KEo=r(I_t,"lxmert"),I_t.forEach(t),ZEo=r(o$e," \u2014 "),rD=n(o$e,"A",{href:!0});var q_t=s(rD);eCo=r(q_t,"LxmertModel"),q_t.forEach(t),oCo=r(o$e," (LXMERT model)"),o$e.forEach(t),rCo=i(x),O_=n(x,"LI",{});var r$e=s(O_);vfe=n(r$e,"STRONG",{});var j_t=s(vfe);tCo=r(j_t,"m2m_100"),j_t.forEach(t),aCo=r(r$e," \u2014 "),tD=n(r$e,"A",{href:!0});var D_t=s(tD);nCo=r(D_t,"M2M100Model"),D_t.forEach(t),sCo=r(r$e," (M2M100 model)"),r$e.forEach(t),lCo=i(x),V_=n(x,"LI",{});var t$e=s(V_);Ffe=n(t$e,"STRONG",{});var G_t=s(Ffe);iCo=r(G_t,"marian"),G_t.forEach(t),dCo=r(t$e," \u2014 "),aD=n(t$e,"A",{href:!0});var O_t=s(aD);cCo=r(O_t,"MarianModel"),O_t.forEach(t),fCo=r(t$e," (Marian model)"),t$e.forEach(t),mCo=i(x),X_=n(x,"LI",{});var a$e=s(X_);Tfe=n(a$e,"STRONG",{});var V_t=s(Tfe);gCo=r(V_t,"maskformer"),V_t.forEach(t),hCo=r(a$e," \u2014 "),nD=n(a$e,"A",{href:!0});var X_t=s(nD);pCo=r(X_t,"MaskFormerModel"),X_t.forEach(t),_Co=r(a$e," (MaskFormer model)"),a$e.forEach(t),uCo=i(x),z_=n(x,"LI",{});var n$e=s(z_);Mfe=n(n$e,"STRONG",{});var z_t=s(Mfe);bCo=r(z_t,"mbart"),z_t.forEach(t),vCo=r(n$e," \u2014 "),sD=n(n$e,"A",{href:!0});var Q_t=s(sD);FCo=r(Q_t,"MBartModel"),Q_t.forEach(t),TCo=r(n$e," (mBART model)"),n$e.forEach(t),MCo=i(x),Q_=n(x,"LI",{});var s$e=s(Q_);Efe=n(s$e,"STRONG",{});var W_t=s(Efe);ECo=r(W_t,"mctct"),W_t.forEach(t),CCo=r(s$e," \u2014 "),lD=n(s$e,"A",{href:!0});var H_t=s(lD);wCo=r(H_t,"MCTCTModel"),H_t.forEach(t),ACo=r(s$e," (M-CTC-T model)"),s$e.forEach(t),LCo=i(x),W_=n(x,"LI",{});var l$e=s(W_);Cfe=n(l$e,"STRONG",{});var U_t=s(Cfe);yCo=r(U_t,"megatron-bert"),U_t.forEach(t),xCo=r(l$e," \u2014 "),iD=n(l$e,"A",{href:!0});var J_t=s(iD);$Co=r(J_t,"MegatronBertModel"),J_t.forEach(t),kCo=r(l$e," (Megatron-BERT model)"),l$e.forEach(t),SCo=i(x),H_=n(x,"LI",{});var i$e=s(H_);wfe=n(i$e,"STRONG",{});var Y_t=s(wfe);RCo=r(Y_t,"mobilebert"),Y_t.forEach(t),PCo=r(i$e," \u2014 "),dD=n(i$e,"A",{href:!0});var K_t=s(dD);BCo=r(K_t,"MobileBertModel"),K_t.forEach(t),NCo=r(i$e," (MobileBERT model)"),i$e.forEach(t),ICo=i(x),U_=n(x,"LI",{});var d$e=s(U_);Afe=n(d$e,"STRONG",{});var Z_t=s(Afe);qCo=r(Z_t,"mobilevit"),Z_t.forEach(t),jCo=r(d$e," \u2014 "),cD=n(d$e,"A",{href:!0});var eut=s(cD);DCo=r(eut,"MobileViTModel"),eut.forEach(t),GCo=r(d$e," (MobileViT model)"),d$e.forEach(t),OCo=i(x),J_=n(x,"LI",{});var c$e=s(J_);Lfe=n(c$e,"STRONG",{});var out=s(Lfe);VCo=r(out,"mpnet"),out.forEach(t),XCo=r(c$e," \u2014 "),fD=n(c$e,"A",{href:!0});var rut=s(fD);zCo=r(rut,"MPNetModel"),rut.forEach(t),QCo=r(c$e," (MPNet model)"),c$e.forEach(t),WCo=i(x),Y_=n(x,"LI",{});var f$e=s(Y_);yfe=n(f$e,"STRONG",{});var tut=s(yfe);HCo=r(tut,"mt5"),tut.forEach(t),UCo=r(f$e," \u2014 "),mD=n(f$e,"A",{href:!0});var aut=s(mD);JCo=r(aut,"MT5Model"),aut.forEach(t),YCo=r(f$e," (MT5 model)"),f$e.forEach(t),KCo=i(x),K_=n(x,"LI",{});var m$e=s(K_);xfe=n(m$e,"STRONG",{});var nut=s(xfe);ZCo=r(nut,"mvp"),nut.forEach(t),e5o=r(m$e," \u2014 "),gD=n(m$e,"A",{href:!0});var sut=s(gD);o5o=r(sut,"MvpModel"),sut.forEach(t),r5o=r(m$e," (MVP model)"),m$e.forEach(t),t5o=i(x),Z_=n(x,"LI",{});var g$e=s(Z_);$fe=n(g$e,"STRONG",{});var lut=s($fe);a5o=r(lut,"nezha"),lut.forEach(t),n5o=r(g$e," \u2014 "),hD=n(g$e,"A",{href:!0});var iut=s(hD);s5o=r(iut,"NezhaModel"),iut.forEach(t),l5o=r(g$e," (Nezha model)"),g$e.forEach(t),i5o=i(x),eu=n(x,"LI",{});var h$e=s(eu);kfe=n(h$e,"STRONG",{});var dut=s(kfe);d5o=r(dut,"nllb"),dut.forEach(t),c5o=r(h$e," \u2014 "),pD=n(h$e,"A",{href:!0});var cut=s(pD);f5o=r(cut,"M2M100Model"),cut.forEach(t),m5o=r(h$e," (NLLB model)"),h$e.forEach(t),g5o=i(x),ou=n(x,"LI",{});var p$e=s(ou);Sfe=n(p$e,"STRONG",{});var fut=s(Sfe);h5o=r(fut,"nystromformer"),fut.forEach(t),p5o=r(p$e," \u2014 "),_D=n(p$e,"A",{href:!0});var mut=s(_D);_5o=r(mut,"NystromformerModel"),mut.forEach(t),u5o=r(p$e," (Nystr\xF6mformer model)"),p$e.forEach(t),b5o=i(x),ru=n(x,"LI",{});var _$e=s(ru);Rfe=n(_$e,"STRONG",{});var gut=s(Rfe);v5o=r(gut,"openai-gpt"),gut.forEach(t),F5o=r(_$e," \u2014 "),uD=n(_$e,"A",{href:!0});var hut=s(uD);T5o=r(hut,"OpenAIGPTModel"),hut.forEach(t),M5o=r(_$e," (OpenAI GPT model)"),_$e.forEach(t),E5o=i(x),tu=n(x,"LI",{});var u$e=s(tu);Pfe=n(u$e,"STRONG",{});var put=s(Pfe);C5o=r(put,"opt"),put.forEach(t),w5o=r(u$e," \u2014 "),bD=n(u$e,"A",{href:!0});var _ut=s(bD);A5o=r(_ut,"OPTModel"),_ut.forEach(t),L5o=r(u$e," (OPT model)"),u$e.forEach(t),y5o=i(x),au=n(x,"LI",{});var b$e=s(au);Bfe=n(b$e,"STRONG",{});var uut=s(Bfe);x5o=r(uut,"pegasus"),uut.forEach(t),$5o=r(b$e," \u2014 "),vD=n(b$e,"A",{href:!0});var but=s(vD);k5o=r(but,"PegasusModel"),but.forEach(t),S5o=r(b$e," (Pegasus model)"),b$e.forEach(t),R5o=i(x),nu=n(x,"LI",{});var v$e=s(nu);Nfe=n(v$e,"STRONG",{});var vut=s(Nfe);P5o=r(vut,"perceiver"),vut.forEach(t),B5o=r(v$e," \u2014 "),FD=n(v$e,"A",{href:!0});var Fut=s(FD);N5o=r(Fut,"PerceiverModel"),Fut.forEach(t),I5o=r(v$e," (Perceiver model)"),v$e.forEach(t),q5o=i(x),su=n(x,"LI",{});var F$e=s(su);Ife=n(F$e,"STRONG",{});var Tut=s(Ife);j5o=r(Tut,"plbart"),Tut.forEach(t),D5o=r(F$e," \u2014 "),TD=n(F$e,"A",{href:!0});var Mut=s(TD);G5o=r(Mut,"PLBartModel"),Mut.forEach(t),O5o=r(F$e," (PLBart model)"),F$e.forEach(t),V5o=i(x),lu=n(x,"LI",{});var T$e=s(lu);qfe=n(T$e,"STRONG",{});var Eut=s(qfe);X5o=r(Eut,"poolformer"),Eut.forEach(t),z5o=r(T$e," \u2014 "),MD=n(T$e,"A",{href:!0});var Cut=s(MD);Q5o=r(Cut,"PoolFormerModel"),Cut.forEach(t),W5o=r(T$e," (PoolFormer model)"),T$e.forEach(t),H5o=i(x),iu=n(x,"LI",{});var M$e=s(iu);jfe=n(M$e,"STRONG",{});var wut=s(jfe);U5o=r(wut,"prophetnet"),wut.forEach(t),J5o=r(M$e," \u2014 "),ED=n(M$e,"A",{href:!0});var Aut=s(ED);Y5o=r(Aut,"ProphetNetModel"),Aut.forEach(t),K5o=r(M$e," (ProphetNet model)"),M$e.forEach(t),Z5o=i(x),du=n(x,"LI",{});var E$e=s(du);Dfe=n(E$e,"STRONG",{});var Lut=s(Dfe);e0o=r(Lut,"qdqbert"),Lut.forEach(t),o0o=r(E$e," \u2014 "),CD=n(E$e,"A",{href:!0});var yut=s(CD);r0o=r(yut,"QDQBertModel"),yut.forEach(t),t0o=r(E$e," (QDQBert model)"),E$e.forEach(t),a0o=i(x),cu=n(x,"LI",{});var C$e=s(cu);Gfe=n(C$e,"STRONG",{});var xut=s(Gfe);n0o=r(xut,"reformer"),xut.forEach(t),s0o=r(C$e," \u2014 "),wD=n(C$e,"A",{href:!0});var $ut=s(wD);l0o=r($ut,"ReformerModel"),$ut.forEach(t),i0o=r(C$e," (Reformer model)"),C$e.forEach(t),d0o=i(x),fu=n(x,"LI",{});var w$e=s(fu);Ofe=n(w$e,"STRONG",{});var kut=s(Ofe);c0o=r(kut,"regnet"),kut.forEach(t),f0o=r(w$e," \u2014 "),AD=n(w$e,"A",{href:!0});var Sut=s(AD);m0o=r(Sut,"RegNetModel"),Sut.forEach(t),g0o=r(w$e," (RegNet model)"),w$e.forEach(t),h0o=i(x),mu=n(x,"LI",{});var A$e=s(mu);Vfe=n(A$e,"STRONG",{});var Rut=s(Vfe);p0o=r(Rut,"rembert"),Rut.forEach(t),_0o=r(A$e," \u2014 "),LD=n(A$e,"A",{href:!0});var Put=s(LD);u0o=r(Put,"RemBertModel"),Put.forEach(t),b0o=r(A$e," (RemBERT model)"),A$e.forEach(t),v0o=i(x),gu=n(x,"LI",{});var L$e=s(gu);Xfe=n(L$e,"STRONG",{});var But=s(Xfe);F0o=r(But,"resnet"),But.forEach(t),T0o=r(L$e," \u2014 "),yD=n(L$e,"A",{href:!0});var Nut=s(yD);M0o=r(Nut,"ResNetModel"),Nut.forEach(t),E0o=r(L$e," (ResNet model)"),L$e.forEach(t),C0o=i(x),hu=n(x,"LI",{});var y$e=s(hu);zfe=n(y$e,"STRONG",{});var Iut=s(zfe);w0o=r(Iut,"retribert"),Iut.forEach(t),A0o=r(y$e," \u2014 "),xD=n(y$e,"A",{href:!0});var qut=s(xD);L0o=r(qut,"RetriBertModel"),qut.forEach(t),y0o=r(y$e," (RetriBERT model)"),y$e.forEach(t),x0o=i(x),pu=n(x,"LI",{});var x$e=s(pu);Qfe=n(x$e,"STRONG",{});var jut=s(Qfe);$0o=r(jut,"roberta"),jut.forEach(t),k0o=r(x$e," \u2014 "),$D=n(x$e,"A",{href:!0});var Dut=s($D);S0o=r(Dut,"RobertaModel"),Dut.forEach(t),R0o=r(x$e," (RoBERTa model)"),x$e.forEach(t),P0o=i(x),_u=n(x,"LI",{});var $$e=s(_u);Wfe=n($$e,"STRONG",{});var Gut=s(Wfe);B0o=r(Gut,"roformer"),Gut.forEach(t),N0o=r($$e," \u2014 "),kD=n($$e,"A",{href:!0});var Out=s(kD);I0o=r(Out,"RoFormerModel"),Out.forEach(t),q0o=r($$e," (RoFormer model)"),$$e.forEach(t),j0o=i(x),uu=n(x,"LI",{});var k$e=s(uu);Hfe=n(k$e,"STRONG",{});var Vut=s(Hfe);D0o=r(Vut,"segformer"),Vut.forEach(t),G0o=r(k$e," \u2014 "),SD=n(k$e,"A",{href:!0});var Xut=s(SD);O0o=r(Xut,"SegformerModel"),Xut.forEach(t),V0o=r(k$e," (SegFormer model)"),k$e.forEach(t),X0o=i(x),bu=n(x,"LI",{});var S$e=s(bu);Ufe=n(S$e,"STRONG",{});var zut=s(Ufe);z0o=r(zut,"sew"),zut.forEach(t),Q0o=r(S$e," \u2014 "),RD=n(S$e,"A",{href:!0});var Qut=s(RD);W0o=r(Qut,"SEWModel"),Qut.forEach(t),H0o=r(S$e," (SEW model)"),S$e.forEach(t),U0o=i(x),vu=n(x,"LI",{});var R$e=s(vu);Jfe=n(R$e,"STRONG",{});var Wut=s(Jfe);J0o=r(Wut,"sew-d"),Wut.forEach(t),Y0o=r(R$e," \u2014 "),PD=n(R$e,"A",{href:!0});var Hut=s(PD);K0o=r(Hut,"SEWDModel"),Hut.forEach(t),Z0o=r(R$e," (SEW-D model)"),R$e.forEach(t),ewo=i(x),Fu=n(x,"LI",{});var P$e=s(Fu);Yfe=n(P$e,"STRONG",{});var Uut=s(Yfe);owo=r(Uut,"speech_to_text"),Uut.forEach(t),rwo=r(P$e," \u2014 "),BD=n(P$e,"A",{href:!0});var Jut=s(BD);two=r(Jut,"Speech2TextModel"),Jut.forEach(t),awo=r(P$e," (Speech2Text model)"),P$e.forEach(t),nwo=i(x),Tu=n(x,"LI",{});var B$e=s(Tu);Kfe=n(B$e,"STRONG",{});var Yut=s(Kfe);swo=r(Yut,"splinter"),Yut.forEach(t),lwo=r(B$e," \u2014 "),ND=n(B$e,"A",{href:!0});var Kut=s(ND);iwo=r(Kut,"SplinterModel"),Kut.forEach(t),dwo=r(B$e," (Splinter model)"),B$e.forEach(t),cwo=i(x),Mu=n(x,"LI",{});var N$e=s(Mu);Zfe=n(N$e,"STRONG",{});var Zut=s(Zfe);fwo=r(Zut,"squeezebert"),Zut.forEach(t),mwo=r(N$e," \u2014 "),ID=n(N$e,"A",{href:!0});var e1t=s(ID);gwo=r(e1t,"SqueezeBertModel"),e1t.forEach(t),hwo=r(N$e," (SqueezeBERT model)"),N$e.forEach(t),pwo=i(x),Eu=n(x,"LI",{});var I$e=s(Eu);eme=n(I$e,"STRONG",{});var o1t=s(eme);_wo=r(o1t,"swin"),o1t.forEach(t),uwo=r(I$e," \u2014 "),qD=n(I$e,"A",{href:!0});var r1t=s(qD);bwo=r(r1t,"SwinModel"),r1t.forEach(t),vwo=r(I$e," (Swin Transformer model)"),I$e.forEach(t),Fwo=i(x),Cu=n(x,"LI",{});var q$e=s(Cu);ome=n(q$e,"STRONG",{});var t1t=s(ome);Two=r(t1t,"t5"),t1t.forEach(t),Mwo=r(q$e," \u2014 "),jD=n(q$e,"A",{href:!0});var a1t=s(jD);Ewo=r(a1t,"T5Model"),a1t.forEach(t),Cwo=r(q$e," (T5 model)"),q$e.forEach(t),wwo=i(x),wu=n(x,"LI",{});var j$e=s(wu);rme=n(j$e,"STRONG",{});var n1t=s(rme);Awo=r(n1t,"tapas"),n1t.forEach(t),Lwo=r(j$e," \u2014 "),DD=n(j$e,"A",{href:!0});var s1t=s(DD);ywo=r(s1t,"TapasModel"),s1t.forEach(t),xwo=r(j$e," (TAPAS model)"),j$e.forEach(t),$wo=i(x),Au=n(x,"LI",{});var D$e=s(Au);tme=n(D$e,"STRONG",{});var l1t=s(tme);kwo=r(l1t,"trajectory_transformer"),l1t.forEach(t),Swo=r(D$e," \u2014 "),GD=n(D$e,"A",{href:!0});var i1t=s(GD);Rwo=r(i1t,"TrajectoryTransformerModel"),i1t.forEach(t),Pwo=r(D$e," (Trajectory Transformer model)"),D$e.forEach(t),Bwo=i(x),Lu=n(x,"LI",{});var G$e=s(Lu);ame=n(G$e,"STRONG",{});var d1t=s(ame);Nwo=r(d1t,"transfo-xl"),d1t.forEach(t),Iwo=r(G$e," \u2014 "),OD=n(G$e,"A",{href:!0});var c1t=s(OD);qwo=r(c1t,"TransfoXLModel"),c1t.forEach(t),jwo=r(G$e," (Transformer-XL model)"),G$e.forEach(t),Dwo=i(x),yu=n(x,"LI",{});var O$e=s(yu);nme=n(O$e,"STRONG",{});var f1t=s(nme);Gwo=r(f1t,"unispeech"),f1t.forEach(t),Owo=r(O$e," \u2014 "),VD=n(O$e,"A",{href:!0});var m1t=s(VD);Vwo=r(m1t,"UniSpeechModel"),m1t.forEach(t),Xwo=r(O$e," (UniSpeech model)"),O$e.forEach(t),zwo=i(x),xu=n(x,"LI",{});var V$e=s(xu);sme=n(V$e,"STRONG",{});var g1t=s(sme);Qwo=r(g1t,"unispeech-sat"),g1t.forEach(t),Wwo=r(V$e," \u2014 "),XD=n(V$e,"A",{href:!0});var h1t=s(XD);Hwo=r(h1t,"UniSpeechSatModel"),h1t.forEach(t),Uwo=r(V$e," (UniSpeechSat model)"),V$e.forEach(t),Jwo=i(x),$u=n(x,"LI",{});var X$e=s($u);lme=n(X$e,"STRONG",{});var p1t=s(lme);Ywo=r(p1t,"van"),p1t.forEach(t),Kwo=r(X$e," \u2014 "),zD=n(X$e,"A",{href:!0});var _1t=s(zD);Zwo=r(_1t,"VanModel"),_1t.forEach(t),eAo=r(X$e," (VAN model)"),X$e.forEach(t),oAo=i(x),ku=n(x,"LI",{});var z$e=s(ku);ime=n(z$e,"STRONG",{});var u1t=s(ime);rAo=r(u1t,"vilt"),u1t.forEach(t),tAo=r(z$e," \u2014 "),QD=n(z$e,"A",{href:!0});var b1t=s(QD);aAo=r(b1t,"ViltModel"),b1t.forEach(t),nAo=r(z$e," (ViLT model)"),z$e.forEach(t),sAo=i(x),Su=n(x,"LI",{});var Q$e=s(Su);dme=n(Q$e,"STRONG",{});var v1t=s(dme);lAo=r(v1t,"vision-text-dual-encoder"),v1t.forEach(t),iAo=r(Q$e," \u2014 "),WD=n(Q$e,"A",{href:!0});var F1t=s(WD);dAo=r(F1t,"VisionTextDualEncoderModel"),F1t.forEach(t),cAo=r(Q$e," (VisionTextDualEncoder model)"),Q$e.forEach(t),fAo=i(x),Ru=n(x,"LI",{});var W$e=s(Ru);cme=n(W$e,"STRONG",{});var T1t=s(cme);mAo=r(T1t,"visual_bert"),T1t.forEach(t),gAo=r(W$e," \u2014 "),HD=n(W$e,"A",{href:!0});var M1t=s(HD);hAo=r(M1t,"VisualBertModel"),M1t.forEach(t),pAo=r(W$e," (VisualBERT model)"),W$e.forEach(t),_Ao=i(x),Pu=n(x,"LI",{});var H$e=s(Pu);fme=n(H$e,"STRONG",{});var E1t=s(fme);uAo=r(E1t,"vit"),E1t.forEach(t),bAo=r(H$e," \u2014 "),UD=n(H$e,"A",{href:!0});var C1t=s(UD);vAo=r(C1t,"ViTModel"),C1t.forEach(t),FAo=r(H$e," (ViT model)"),H$e.forEach(t),TAo=i(x),Bu=n(x,"LI",{});var U$e=s(Bu);mme=n(U$e,"STRONG",{});var w1t=s(mme);MAo=r(w1t,"vit_mae"),w1t.forEach(t),EAo=r(U$e," \u2014 "),JD=n(U$e,"A",{href:!0});var A1t=s(JD);CAo=r(A1t,"ViTMAEModel"),A1t.forEach(t),wAo=r(U$e," (ViTMAE model)"),U$e.forEach(t),AAo=i(x),Nu=n(x,"LI",{});var J$e=s(Nu);gme=n(J$e,"STRONG",{});var L1t=s(gme);LAo=r(L1t,"wav2vec2"),L1t.forEach(t),yAo=r(J$e," \u2014 "),YD=n(J$e,"A",{href:!0});var y1t=s(YD);xAo=r(y1t,"Wav2Vec2Model"),y1t.forEach(t),$Ao=r(J$e," (Wav2Vec2 model)"),J$e.forEach(t),kAo=i(x),Iu=n(x,"LI",{});var Y$e=s(Iu);hme=n(Y$e,"STRONG",{});var x1t=s(hme);SAo=r(x1t,"wav2vec2-conformer"),x1t.forEach(t),RAo=r(Y$e," \u2014 "),KD=n(Y$e,"A",{href:!0});var $1t=s(KD);PAo=r($1t,"Wav2Vec2ConformerModel"),$1t.forEach(t),BAo=r(Y$e," (Wav2Vec2-Conformer model)"),Y$e.forEach(t),NAo=i(x),qu=n(x,"LI",{});var K$e=s(qu);pme=n(K$e,"STRONG",{});var k1t=s(pme);IAo=r(k1t,"wavlm"),k1t.forEach(t),qAo=r(K$e," \u2014 "),ZD=n(K$e,"A",{href:!0});var S1t=s(ZD);jAo=r(S1t,"WavLMModel"),S1t.forEach(t),DAo=r(K$e," (WavLM model)"),K$e.forEach(t),GAo=i(x),ju=n(x,"LI",{});var Z$e=s(ju);_me=n(Z$e,"STRONG",{});var R1t=s(_me);OAo=r(R1t,"xglm"),R1t.forEach(t),VAo=r(Z$e," \u2014 "),eG=n(Z$e,"A",{href:!0});var P1t=s(eG);XAo=r(P1t,"XGLMModel"),P1t.forEach(t),zAo=r(Z$e," (XGLM model)"),Z$e.forEach(t),QAo=i(x),Du=n(x,"LI",{});var eke=s(Du);ume=n(eke,"STRONG",{});var B1t=s(ume);WAo=r(B1t,"xlm"),B1t.forEach(t),HAo=r(eke," \u2014 "),oG=n(eke,"A",{href:!0});var N1t=s(oG);UAo=r(N1t,"XLMModel"),N1t.forEach(t),JAo=r(eke," (XLM model)"),eke.forEach(t),YAo=i(x),Gu=n(x,"LI",{});var oke=s(Gu);bme=n(oke,"STRONG",{});var I1t=s(bme);KAo=r(I1t,"xlm-prophetnet"),I1t.forEach(t),ZAo=r(oke," \u2014 "),rG=n(oke,"A",{href:!0});var q1t=s(rG);e6o=r(q1t,"XLMProphetNetModel"),q1t.forEach(t),o6o=r(oke," (XLM-ProphetNet model)"),oke.forEach(t),r6o=i(x),Ou=n(x,"LI",{});var rke=s(Ou);vme=n(rke,"STRONG",{});var j1t=s(vme);t6o=r(j1t,"xlm-roberta"),j1t.forEach(t),a6o=r(rke," \u2014 "),tG=n(rke,"A",{href:!0});var D1t=s(tG);n6o=r(D1t,"XLMRobertaModel"),D1t.forEach(t),s6o=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),l6o=i(x),Vu=n(x,"LI",{});var tke=s(Vu);Fme=n(tke,"STRONG",{});var G1t=s(Fme);i6o=r(G1t,"xlm-roberta-xl"),G1t.forEach(t),d6o=r(tke," \u2014 "),aG=n(tke,"A",{href:!0});var O1t=s(aG);c6o=r(O1t,"XLMRobertaXLModel"),O1t.forEach(t),f6o=r(tke," (XLM-RoBERTa-XL model)"),tke.forEach(t),m6o=i(x),Xu=n(x,"LI",{});var ake=s(Xu);Tme=n(ake,"STRONG",{});var V1t=s(Tme);g6o=r(V1t,"xlnet"),V1t.forEach(t),h6o=r(ake," \u2014 "),nG=n(ake,"A",{href:!0});var X1t=s(nG);p6o=r(X1t,"XLNetModel"),X1t.forEach(t),_6o=r(ake," (XLNet model)"),ake.forEach(t),u6o=i(x),zu=n(x,"LI",{});var nke=s(zu);Mme=n(nke,"STRONG",{});var z1t=s(Mme);b6o=r(z1t,"yolos"),z1t.forEach(t),v6o=r(nke," \u2014 "),sG=n(nke,"A",{href:!0});var Q1t=s(sG);F6o=r(Q1t,"YolosModel"),Q1t.forEach(t),T6o=r(nke," (YOLOS model)"),nke.forEach(t),M6o=i(x),Qu=n(x,"LI",{});var ske=s(Qu);Eme=n(ske,"STRONG",{});var W1t=s(Eme);E6o=r(W1t,"yoso"),W1t.forEach(t),C6o=r(ske," \u2014 "),lG=n(ske,"A",{href:!0});var H1t=s(lG);w6o=r(H1t,"YosoModel"),H1t.forEach(t),A6o=r(ske," (YOSO model)"),ske.forEach(t),x.forEach(t),L6o=i(la),Wu=n(la,"P",{});var lke=s(Wu);y6o=r(lke,"The model is set in evaluation mode by default using "),Cme=n(lke,"CODE",{});var U1t=s(Cme);x6o=r(U1t,"model.eval()"),U1t.forEach(t),$6o=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=n(lke,"CODE",{});var J1t=s(wme);k6o=r(J1t,"model.train()"),J1t.forEach(t),lke.forEach(t),S6o=i(la),T(Hu.$$.fragment,la),la.forEach(t),tl.forEach(t),xXe=i(f),zi=n(f,"H2",{class:!0});var BQe=s(zi);Uu=n(BQe,"A",{id:!0,class:!0,href:!0});var Y1t=s(Uu);Ame=n(Y1t,"SPAN",{});var K1t=s(Ame);T(jL.$$.fragment,K1t),K1t.forEach(t),Y1t.forEach(t),R6o=i(BQe),Lme=n(BQe,"SPAN",{});var Z1t=s(Lme);P6o=r(Z1t,"AutoModelForPreTraining"),Z1t.forEach(t),BQe.forEach(t),$Xe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(DL.$$.fragment,al),B6o=i(al),Qi=n(al,"P",{});var Vre=s(Qi);N6o=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iG=n(Vre,"A",{href:!0});var e2t=s(iG);I6o=r(e2t,"from_pretrained()"),e2t.forEach(t),q6o=r(Vre," class method or the "),dG=n(Vre,"A",{href:!0});var o2t=s(dG);j6o=r(o2t,"from_config()"),o2t.forEach(t),D6o=r(Vre,` class
method.`),Vre.forEach(t),G6o=i(al),GL=n(al,"P",{});var NQe=s(GL);O6o=r(NQe,"This class cannot be instantiated directly using "),yme=n(NQe,"CODE",{});var r2t=s(yme);V6o=r(r2t,"__init__()"),r2t.forEach(t),X6o=r(NQe," (throws an error)."),NQe.forEach(t),z6o=i(al),dt=n(al,"DIV",{class:!0});var h6=s(dt);T(OL.$$.fragment,h6),Q6o=i(h6),xme=n(h6,"P",{});var t2t=s(xme);W6o=r(t2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t2t.forEach(t),H6o=i(h6),Wi=n(h6,"P",{});var Xre=s(Wi);U6o=r(Xre,`Note:
Loading a model from its configuration file does `),$me=n(Xre,"STRONG",{});var a2t=s($me);J6o=r(a2t,"not"),a2t.forEach(t),Y6o=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(Xre,"A",{href:!0});var n2t=s(cG);K6o=r(n2t,"from_pretrained()"),n2t.forEach(t),Z6o=r(Xre," to load the model weights."),Xre.forEach(t),e7o=i(h6),T(Ju.$$.fragment,h6),h6.forEach(t),o7o=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(VL.$$.fragment,ia),r7o=i(ia),kme=n(ia,"P",{});var s2t=s(kme);t7o=r(s2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s2t.forEach(t),a7o=i(ia),Ia=n(ia,"P",{});var p6=s(Ia);n7o=r(p6,"The model class to instantiate is selected based on the "),Sme=n(p6,"CODE",{});var l2t=s(Sme);s7o=r(l2t,"model_type"),l2t.forEach(t),l7o=r(p6,` property of the config object (either
passed as an argument or loaded from `),Rme=n(p6,"CODE",{});var i2t=s(Rme);i7o=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),d7o=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=n(p6,"CODE",{});var d2t=s(Pme);c7o=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),f7o=r(p6,":"),p6.forEach(t),m7o=i(ia),G=n(ia,"UL",{});var O=s(G);Yu=n(O,"LI",{});var ike=s(Yu);Bme=n(ike,"STRONG",{});var c2t=s(Bme);g7o=r(c2t,"albert"),c2t.forEach(t),h7o=r(ike," \u2014 "),fG=n(ike,"A",{href:!0});var f2t=s(fG);p7o=r(f2t,"AlbertForPreTraining"),f2t.forEach(t),_7o=r(ike," (ALBERT model)"),ike.forEach(t),u7o=i(O),Ku=n(O,"LI",{});var dke=s(Ku);Nme=n(dke,"STRONG",{});var m2t=s(Nme);b7o=r(m2t,"bart"),m2t.forEach(t),v7o=r(dke," \u2014 "),mG=n(dke,"A",{href:!0});var g2t=s(mG);F7o=r(g2t,"BartForConditionalGeneration"),g2t.forEach(t),T7o=r(dke," (BART model)"),dke.forEach(t),M7o=i(O),Zu=n(O,"LI",{});var cke=s(Zu);Ime=n(cke,"STRONG",{});var h2t=s(Ime);E7o=r(h2t,"bert"),h2t.forEach(t),C7o=r(cke," \u2014 "),gG=n(cke,"A",{href:!0});var p2t=s(gG);w7o=r(p2t,"BertForPreTraining"),p2t.forEach(t),A7o=r(cke," (BERT model)"),cke.forEach(t),L7o=i(O),e1=n(O,"LI",{});var fke=s(e1);qme=n(fke,"STRONG",{});var _2t=s(qme);y7o=r(_2t,"big_bird"),_2t.forEach(t),x7o=r(fke," \u2014 "),hG=n(fke,"A",{href:!0});var u2t=s(hG);$7o=r(u2t,"BigBirdForPreTraining"),u2t.forEach(t),k7o=r(fke," (BigBird model)"),fke.forEach(t),S7o=i(O),o1=n(O,"LI",{});var mke=s(o1);jme=n(mke,"STRONG",{});var b2t=s(jme);R7o=r(b2t,"bloom"),b2t.forEach(t),P7o=r(mke," \u2014 "),pG=n(mke,"A",{href:!0});var v2t=s(pG);B7o=r(v2t,"BloomForCausalLM"),v2t.forEach(t),N7o=r(mke," (BLOOM model)"),mke.forEach(t),I7o=i(O),r1=n(O,"LI",{});var gke=s(r1);Dme=n(gke,"STRONG",{});var F2t=s(Dme);q7o=r(F2t,"camembert"),F2t.forEach(t),j7o=r(gke," \u2014 "),_G=n(gke,"A",{href:!0});var T2t=s(_G);D7o=r(T2t,"CamembertForMaskedLM"),T2t.forEach(t),G7o=r(gke," (CamemBERT model)"),gke.forEach(t),O7o=i(O),t1=n(O,"LI",{});var hke=s(t1);Gme=n(hke,"STRONG",{});var M2t=s(Gme);V7o=r(M2t,"ctrl"),M2t.forEach(t),X7o=r(hke," \u2014 "),uG=n(hke,"A",{href:!0});var E2t=s(uG);z7o=r(E2t,"CTRLLMHeadModel"),E2t.forEach(t),Q7o=r(hke," (CTRL model)"),hke.forEach(t),W7o=i(O),a1=n(O,"LI",{});var pke=s(a1);Ome=n(pke,"STRONG",{});var C2t=s(Ome);H7o=r(C2t,"data2vec-text"),C2t.forEach(t),U7o=r(pke," \u2014 "),bG=n(pke,"A",{href:!0});var w2t=s(bG);J7o=r(w2t,"Data2VecTextForMaskedLM"),w2t.forEach(t),Y7o=r(pke," (Data2VecText model)"),pke.forEach(t),K7o=i(O),n1=n(O,"LI",{});var _ke=s(n1);Vme=n(_ke,"STRONG",{});var A2t=s(Vme);Z7o=r(A2t,"deberta"),A2t.forEach(t),eLo=r(_ke," \u2014 "),vG=n(_ke,"A",{href:!0});var L2t=s(vG);oLo=r(L2t,"DebertaForMaskedLM"),L2t.forEach(t),rLo=r(_ke," (DeBERTa model)"),_ke.forEach(t),tLo=i(O),s1=n(O,"LI",{});var uke=s(s1);Xme=n(uke,"STRONG",{});var y2t=s(Xme);aLo=r(y2t,"deberta-v2"),y2t.forEach(t),nLo=r(uke," \u2014 "),FG=n(uke,"A",{href:!0});var x2t=s(FG);sLo=r(x2t,"DebertaV2ForMaskedLM"),x2t.forEach(t),lLo=r(uke," (DeBERTa-v2 model)"),uke.forEach(t),iLo=i(O),l1=n(O,"LI",{});var bke=s(l1);zme=n(bke,"STRONG",{});var $2t=s(zme);dLo=r($2t,"distilbert"),$2t.forEach(t),cLo=r(bke," \u2014 "),TG=n(bke,"A",{href:!0});var k2t=s(TG);fLo=r(k2t,"DistilBertForMaskedLM"),k2t.forEach(t),mLo=r(bke," (DistilBERT model)"),bke.forEach(t),gLo=i(O),i1=n(O,"LI",{});var vke=s(i1);Qme=n(vke,"STRONG",{});var S2t=s(Qme);hLo=r(S2t,"electra"),S2t.forEach(t),pLo=r(vke," \u2014 "),MG=n(vke,"A",{href:!0});var R2t=s(MG);_Lo=r(R2t,"ElectraForPreTraining"),R2t.forEach(t),uLo=r(vke," (ELECTRA model)"),vke.forEach(t),bLo=i(O),d1=n(O,"LI",{});var Fke=s(d1);Wme=n(Fke,"STRONG",{});var P2t=s(Wme);vLo=r(P2t,"flaubert"),P2t.forEach(t),FLo=r(Fke," \u2014 "),EG=n(Fke,"A",{href:!0});var B2t=s(EG);TLo=r(B2t,"FlaubertWithLMHeadModel"),B2t.forEach(t),MLo=r(Fke," (FlauBERT model)"),Fke.forEach(t),ELo=i(O),c1=n(O,"LI",{});var Tke=s(c1);Hme=n(Tke,"STRONG",{});var N2t=s(Hme);CLo=r(N2t,"flava"),N2t.forEach(t),wLo=r(Tke," \u2014 "),CG=n(Tke,"A",{href:!0});var I2t=s(CG);ALo=r(I2t,"FlavaForPreTraining"),I2t.forEach(t),LLo=r(Tke," (FLAVA model)"),Tke.forEach(t),yLo=i(O),f1=n(O,"LI",{});var Mke=s(f1);Ume=n(Mke,"STRONG",{});var q2t=s(Ume);xLo=r(q2t,"fnet"),q2t.forEach(t),$Lo=r(Mke," \u2014 "),wG=n(Mke,"A",{href:!0});var j2t=s(wG);kLo=r(j2t,"FNetForPreTraining"),j2t.forEach(t),SLo=r(Mke," (FNet model)"),Mke.forEach(t),RLo=i(O),m1=n(O,"LI",{});var Eke=s(m1);Jme=n(Eke,"STRONG",{});var D2t=s(Jme);PLo=r(D2t,"fsmt"),D2t.forEach(t),BLo=r(Eke," \u2014 "),AG=n(Eke,"A",{href:!0});var G2t=s(AG);NLo=r(G2t,"FSMTForConditionalGeneration"),G2t.forEach(t),ILo=r(Eke," (FairSeq Machine-Translation model)"),Eke.forEach(t),qLo=i(O),g1=n(O,"LI",{});var Cke=s(g1);Yme=n(Cke,"STRONG",{});var O2t=s(Yme);jLo=r(O2t,"funnel"),O2t.forEach(t),DLo=r(Cke," \u2014 "),LG=n(Cke,"A",{href:!0});var V2t=s(LG);GLo=r(V2t,"FunnelForPreTraining"),V2t.forEach(t),OLo=r(Cke," (Funnel Transformer model)"),Cke.forEach(t),VLo=i(O),h1=n(O,"LI",{});var wke=s(h1);Kme=n(wke,"STRONG",{});var X2t=s(Kme);XLo=r(X2t,"gpt2"),X2t.forEach(t),zLo=r(wke," \u2014 "),yG=n(wke,"A",{href:!0});var z2t=s(yG);QLo=r(z2t,"GPT2LMHeadModel"),z2t.forEach(t),WLo=r(wke," (OpenAI GPT-2 model)"),wke.forEach(t),HLo=i(O),p1=n(O,"LI",{});var Ake=s(p1);Zme=n(Ake,"STRONG",{});var Q2t=s(Zme);ULo=r(Q2t,"ibert"),Q2t.forEach(t),JLo=r(Ake," \u2014 "),xG=n(Ake,"A",{href:!0});var W2t=s(xG);YLo=r(W2t,"IBertForMaskedLM"),W2t.forEach(t),KLo=r(Ake," (I-BERT model)"),Ake.forEach(t),ZLo=i(O),_1=n(O,"LI",{});var Lke=s(_1);ege=n(Lke,"STRONG",{});var H2t=s(ege);eyo=r(H2t,"layoutlm"),H2t.forEach(t),oyo=r(Lke," \u2014 "),$G=n(Lke,"A",{href:!0});var U2t=s($G);ryo=r(U2t,"LayoutLMForMaskedLM"),U2t.forEach(t),tyo=r(Lke," (LayoutLM model)"),Lke.forEach(t),ayo=i(O),u1=n(O,"LI",{});var yke=s(u1);oge=n(yke,"STRONG",{});var J2t=s(oge);nyo=r(J2t,"longformer"),J2t.forEach(t),syo=r(yke," \u2014 "),kG=n(yke,"A",{href:!0});var Y2t=s(kG);lyo=r(Y2t,"LongformerForMaskedLM"),Y2t.forEach(t),iyo=r(yke," (Longformer model)"),yke.forEach(t),dyo=i(O),b1=n(O,"LI",{});var xke=s(b1);rge=n(xke,"STRONG",{});var K2t=s(rge);cyo=r(K2t,"lxmert"),K2t.forEach(t),fyo=r(xke," \u2014 "),SG=n(xke,"A",{href:!0});var Z2t=s(SG);myo=r(Z2t,"LxmertForPreTraining"),Z2t.forEach(t),gyo=r(xke," (LXMERT model)"),xke.forEach(t),hyo=i(O),v1=n(O,"LI",{});var $ke=s(v1);tge=n($ke,"STRONG",{});var ebt=s(tge);pyo=r(ebt,"megatron-bert"),ebt.forEach(t),_yo=r($ke," \u2014 "),RG=n($ke,"A",{href:!0});var obt=s(RG);uyo=r(obt,"MegatronBertForPreTraining"),obt.forEach(t),byo=r($ke," (Megatron-BERT model)"),$ke.forEach(t),vyo=i(O),F1=n(O,"LI",{});var kke=s(F1);age=n(kke,"STRONG",{});var rbt=s(age);Fyo=r(rbt,"mobilebert"),rbt.forEach(t),Tyo=r(kke," \u2014 "),PG=n(kke,"A",{href:!0});var tbt=s(PG);Myo=r(tbt,"MobileBertForPreTraining"),tbt.forEach(t),Eyo=r(kke," (MobileBERT model)"),kke.forEach(t),Cyo=i(O),T1=n(O,"LI",{});var Ske=s(T1);nge=n(Ske,"STRONG",{});var abt=s(nge);wyo=r(abt,"mpnet"),abt.forEach(t),Ayo=r(Ske," \u2014 "),BG=n(Ske,"A",{href:!0});var nbt=s(BG);Lyo=r(nbt,"MPNetForMaskedLM"),nbt.forEach(t),yyo=r(Ske," (MPNet model)"),Ske.forEach(t),xyo=i(O),M1=n(O,"LI",{});var Rke=s(M1);sge=n(Rke,"STRONG",{});var sbt=s(sge);$yo=r(sbt,"mvp"),sbt.forEach(t),kyo=r(Rke," \u2014 "),NG=n(Rke,"A",{href:!0});var lbt=s(NG);Syo=r(lbt,"MvpForConditionalGeneration"),lbt.forEach(t),Ryo=r(Rke," (MVP model)"),Rke.forEach(t),Pyo=i(O),E1=n(O,"LI",{});var Pke=s(E1);lge=n(Pke,"STRONG",{});var ibt=s(lge);Byo=r(ibt,"nezha"),ibt.forEach(t),Nyo=r(Pke," \u2014 "),IG=n(Pke,"A",{href:!0});var dbt=s(IG);Iyo=r(dbt,"NezhaForPreTraining"),dbt.forEach(t),qyo=r(Pke," (Nezha model)"),Pke.forEach(t),jyo=i(O),C1=n(O,"LI",{});var Bke=s(C1);ige=n(Bke,"STRONG",{});var cbt=s(ige);Dyo=r(cbt,"openai-gpt"),cbt.forEach(t),Gyo=r(Bke," \u2014 "),qG=n(Bke,"A",{href:!0});var fbt=s(qG);Oyo=r(fbt,"OpenAIGPTLMHeadModel"),fbt.forEach(t),Vyo=r(Bke," (OpenAI GPT model)"),Bke.forEach(t),Xyo=i(O),w1=n(O,"LI",{});var Nke=s(w1);dge=n(Nke,"STRONG",{});var mbt=s(dge);zyo=r(mbt,"retribert"),mbt.forEach(t),Qyo=r(Nke," \u2014 "),jG=n(Nke,"A",{href:!0});var gbt=s(jG);Wyo=r(gbt,"RetriBertModel"),gbt.forEach(t),Hyo=r(Nke," (RetriBERT model)"),Nke.forEach(t),Uyo=i(O),A1=n(O,"LI",{});var Ike=s(A1);cge=n(Ike,"STRONG",{});var hbt=s(cge);Jyo=r(hbt,"roberta"),hbt.forEach(t),Yyo=r(Ike," \u2014 "),DG=n(Ike,"A",{href:!0});var pbt=s(DG);Kyo=r(pbt,"RobertaForMaskedLM"),pbt.forEach(t),Zyo=r(Ike," (RoBERTa model)"),Ike.forEach(t),e9o=i(O),L1=n(O,"LI",{});var qke=s(L1);fge=n(qke,"STRONG",{});var _bt=s(fge);o9o=r(_bt,"splinter"),_bt.forEach(t),r9o=r(qke," \u2014 "),GG=n(qke,"A",{href:!0});var ubt=s(GG);t9o=r(ubt,"SplinterForPreTraining"),ubt.forEach(t),a9o=r(qke," (Splinter model)"),qke.forEach(t),n9o=i(O),y1=n(O,"LI",{});var jke=s(y1);mge=n(jke,"STRONG",{});var bbt=s(mge);s9o=r(bbt,"squeezebert"),bbt.forEach(t),l9o=r(jke," \u2014 "),OG=n(jke,"A",{href:!0});var vbt=s(OG);i9o=r(vbt,"SqueezeBertForMaskedLM"),vbt.forEach(t),d9o=r(jke," (SqueezeBERT model)"),jke.forEach(t),c9o=i(O),x1=n(O,"LI",{});var Dke=s(x1);gge=n(Dke,"STRONG",{});var Fbt=s(gge);f9o=r(Fbt,"t5"),Fbt.forEach(t),m9o=r(Dke," \u2014 "),VG=n(Dke,"A",{href:!0});var Tbt=s(VG);g9o=r(Tbt,"T5ForConditionalGeneration"),Tbt.forEach(t),h9o=r(Dke," (T5 model)"),Dke.forEach(t),p9o=i(O),$1=n(O,"LI",{});var Gke=s($1);hge=n(Gke,"STRONG",{});var Mbt=s(hge);_9o=r(Mbt,"tapas"),Mbt.forEach(t),u9o=r(Gke," \u2014 "),XG=n(Gke,"A",{href:!0});var Ebt=s(XG);b9o=r(Ebt,"TapasForMaskedLM"),Ebt.forEach(t),v9o=r(Gke," (TAPAS model)"),Gke.forEach(t),F9o=i(O),k1=n(O,"LI",{});var Oke=s(k1);pge=n(Oke,"STRONG",{});var Cbt=s(pge);T9o=r(Cbt,"transfo-xl"),Cbt.forEach(t),M9o=r(Oke," \u2014 "),zG=n(Oke,"A",{href:!0});var wbt=s(zG);E9o=r(wbt,"TransfoXLLMHeadModel"),wbt.forEach(t),C9o=r(Oke," (Transformer-XL model)"),Oke.forEach(t),w9o=i(O),S1=n(O,"LI",{});var Vke=s(S1);_ge=n(Vke,"STRONG",{});var Abt=s(_ge);A9o=r(Abt,"unispeech"),Abt.forEach(t),L9o=r(Vke," \u2014 "),QG=n(Vke,"A",{href:!0});var Lbt=s(QG);y9o=r(Lbt,"UniSpeechForPreTraining"),Lbt.forEach(t),x9o=r(Vke," (UniSpeech model)"),Vke.forEach(t),$9o=i(O),R1=n(O,"LI",{});var Xke=s(R1);uge=n(Xke,"STRONG",{});var ybt=s(uge);k9o=r(ybt,"unispeech-sat"),ybt.forEach(t),S9o=r(Xke," \u2014 "),WG=n(Xke,"A",{href:!0});var xbt=s(WG);R9o=r(xbt,"UniSpeechSatForPreTraining"),xbt.forEach(t),P9o=r(Xke," (UniSpeechSat model)"),Xke.forEach(t),B9o=i(O),P1=n(O,"LI",{});var zke=s(P1);bge=n(zke,"STRONG",{});var $bt=s(bge);N9o=r($bt,"visual_bert"),$bt.forEach(t),I9o=r(zke," \u2014 "),HG=n(zke,"A",{href:!0});var kbt=s(HG);q9o=r(kbt,"VisualBertForPreTraining"),kbt.forEach(t),j9o=r(zke," (VisualBERT model)"),zke.forEach(t),D9o=i(O),B1=n(O,"LI",{});var Qke=s(B1);vge=n(Qke,"STRONG",{});var Sbt=s(vge);G9o=r(Sbt,"vit_mae"),Sbt.forEach(t),O9o=r(Qke," \u2014 "),UG=n(Qke,"A",{href:!0});var Rbt=s(UG);V9o=r(Rbt,"ViTMAEForPreTraining"),Rbt.forEach(t),X9o=r(Qke," (ViTMAE model)"),Qke.forEach(t),z9o=i(O),N1=n(O,"LI",{});var Wke=s(N1);Fge=n(Wke,"STRONG",{});var Pbt=s(Fge);Q9o=r(Pbt,"wav2vec2"),Pbt.forEach(t),W9o=r(Wke," \u2014 "),JG=n(Wke,"A",{href:!0});var Bbt=s(JG);H9o=r(Bbt,"Wav2Vec2ForPreTraining"),Bbt.forEach(t),U9o=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),J9o=i(O),I1=n(O,"LI",{});var Hke=s(I1);Tge=n(Hke,"STRONG",{});var Nbt=s(Tge);Y9o=r(Nbt,"wav2vec2-conformer"),Nbt.forEach(t),K9o=r(Hke," \u2014 "),YG=n(Hke,"A",{href:!0});var Ibt=s(YG);Z9o=r(Ibt,"Wav2Vec2ConformerForPreTraining"),Ibt.forEach(t),exo=r(Hke," (Wav2Vec2-Conformer model)"),Hke.forEach(t),oxo=i(O),q1=n(O,"LI",{});var Uke=s(q1);Mge=n(Uke,"STRONG",{});var qbt=s(Mge);rxo=r(qbt,"xlm"),qbt.forEach(t),txo=r(Uke," \u2014 "),KG=n(Uke,"A",{href:!0});var jbt=s(KG);axo=r(jbt,"XLMWithLMHeadModel"),jbt.forEach(t),nxo=r(Uke," (XLM model)"),Uke.forEach(t),sxo=i(O),j1=n(O,"LI",{});var Jke=s(j1);Ege=n(Jke,"STRONG",{});var Dbt=s(Ege);lxo=r(Dbt,"xlm-roberta"),Dbt.forEach(t),ixo=r(Jke," \u2014 "),ZG=n(Jke,"A",{href:!0});var Gbt=s(ZG);dxo=r(Gbt,"XLMRobertaForMaskedLM"),Gbt.forEach(t),cxo=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),fxo=i(O),D1=n(O,"LI",{});var Yke=s(D1);Cge=n(Yke,"STRONG",{});var Obt=s(Cge);mxo=r(Obt,"xlm-roberta-xl"),Obt.forEach(t),gxo=r(Yke," \u2014 "),eO=n(Yke,"A",{href:!0});var Vbt=s(eO);hxo=r(Vbt,"XLMRobertaXLForMaskedLM"),Vbt.forEach(t),pxo=r(Yke," (XLM-RoBERTa-XL model)"),Yke.forEach(t),_xo=i(O),G1=n(O,"LI",{});var Kke=s(G1);wge=n(Kke,"STRONG",{});var Xbt=s(wge);uxo=r(Xbt,"xlnet"),Xbt.forEach(t),bxo=r(Kke," \u2014 "),oO=n(Kke,"A",{href:!0});var zbt=s(oO);vxo=r(zbt,"XLNetLMHeadModel"),zbt.forEach(t),Fxo=r(Kke," (XLNet model)"),Kke.forEach(t),O.forEach(t),Txo=i(ia),O1=n(ia,"P",{});var Zke=s(O1);Mxo=r(Zke,"The model is set in evaluation mode by default using "),Age=n(Zke,"CODE",{});var Qbt=s(Age);Exo=r(Qbt,"model.eval()"),Qbt.forEach(t),Cxo=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(Zke,"CODE",{});var Wbt=s(Lge);wxo=r(Wbt,"model.train()"),Wbt.forEach(t),Zke.forEach(t),Axo=i(ia),T(V1.$$.fragment,ia),ia.forEach(t),al.forEach(t),kXe=i(f),Hi=n(f,"H2",{class:!0});var IQe=s(Hi);X1=n(IQe,"A",{id:!0,class:!0,href:!0});var Hbt=s(X1);yge=n(Hbt,"SPAN",{});var Ubt=s(yge);T(XL.$$.fragment,Ubt),Ubt.forEach(t),Hbt.forEach(t),Lxo=i(IQe),xge=n(IQe,"SPAN",{});var Jbt=s(xge);yxo=r(Jbt,"AutoModelForCausalLM"),Jbt.forEach(t),IQe.forEach(t),SXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(zL.$$.fragment,nl),xxo=i(nl),Ui=n(nl,"P",{});var zre=s(Ui);$xo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rO=n(zre,"A",{href:!0});var Ybt=s(rO);kxo=r(Ybt,"from_pretrained()"),Ybt.forEach(t),Sxo=r(zre," class method or the "),tO=n(zre,"A",{href:!0});var Kbt=s(tO);Rxo=r(Kbt,"from_config()"),Kbt.forEach(t),Pxo=r(zre,` class
method.`),zre.forEach(t),Bxo=i(nl),QL=n(nl,"P",{});var qQe=s(QL);Nxo=r(qQe,"This class cannot be instantiated directly using "),$ge=n(qQe,"CODE",{});var Zbt=s($ge);Ixo=r(Zbt,"__init__()"),Zbt.forEach(t),qxo=r(qQe," (throws an error)."),qQe.forEach(t),jxo=i(nl),ct=n(nl,"DIV",{class:!0});var _6=s(ct);T(WL.$$.fragment,_6),Dxo=i(_6),kge=n(_6,"P",{});var e3t=s(kge);Gxo=r(e3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e3t.forEach(t),Oxo=i(_6),Ji=n(_6,"P",{});var Qre=s(Ji);Vxo=r(Qre,`Note:
Loading a model from its configuration file does `),Sge=n(Qre,"STRONG",{});var o3t=s(Sge);Xxo=r(o3t,"not"),o3t.forEach(t),zxo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(Qre,"A",{href:!0});var r3t=s(aO);Qxo=r(r3t,"from_pretrained()"),r3t.forEach(t),Wxo=r(Qre," to load the model weights."),Qre.forEach(t),Hxo=i(_6),T(z1.$$.fragment,_6),_6.forEach(t),Uxo=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(HL.$$.fragment,da),Jxo=i(da),Rge=n(da,"P",{});var t3t=s(Rge);Yxo=r(t3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t3t.forEach(t),Kxo=i(da),qa=n(da,"P",{});var u6=s(qa);Zxo=r(u6,"The model class to instantiate is selected based on the "),Pge=n(u6,"CODE",{});var a3t=s(Pge);e$o=r(a3t,"model_type"),a3t.forEach(t),o$o=r(u6,` property of the config object (either
passed as an argument or loaded from `),Bge=n(u6,"CODE",{});var n3t=s(Bge);r$o=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),t$o=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=n(u6,"CODE",{});var s3t=s(Nge);a$o=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),n$o=r(u6,":"),u6.forEach(t),s$o=i(da),z=n(da,"UL",{});var Q=s(z);Q1=n(Q,"LI",{});var eSe=s(Q1);Ige=n(eSe,"STRONG",{});var l3t=s(Ige);l$o=r(l3t,"bart"),l3t.forEach(t),i$o=r(eSe," \u2014 "),nO=n(eSe,"A",{href:!0});var i3t=s(nO);d$o=r(i3t,"BartForCausalLM"),i3t.forEach(t),c$o=r(eSe," (BART model)"),eSe.forEach(t),f$o=i(Q),W1=n(Q,"LI",{});var oSe=s(W1);qge=n(oSe,"STRONG",{});var d3t=s(qge);m$o=r(d3t,"bert"),d3t.forEach(t),g$o=r(oSe," \u2014 "),sO=n(oSe,"A",{href:!0});var c3t=s(sO);h$o=r(c3t,"BertLMHeadModel"),c3t.forEach(t),p$o=r(oSe," (BERT model)"),oSe.forEach(t),_$o=i(Q),H1=n(Q,"LI",{});var rSe=s(H1);jge=n(rSe,"STRONG",{});var f3t=s(jge);u$o=r(f3t,"bert-generation"),f3t.forEach(t),b$o=r(rSe," \u2014 "),lO=n(rSe,"A",{href:!0});var m3t=s(lO);v$o=r(m3t,"BertGenerationDecoder"),m3t.forEach(t),F$o=r(rSe," (Bert Generation model)"),rSe.forEach(t),T$o=i(Q),U1=n(Q,"LI",{});var tSe=s(U1);Dge=n(tSe,"STRONG",{});var g3t=s(Dge);M$o=r(g3t,"big_bird"),g3t.forEach(t),E$o=r(tSe," \u2014 "),iO=n(tSe,"A",{href:!0});var h3t=s(iO);C$o=r(h3t,"BigBirdForCausalLM"),h3t.forEach(t),w$o=r(tSe," (BigBird model)"),tSe.forEach(t),A$o=i(Q),J1=n(Q,"LI",{});var aSe=s(J1);Gge=n(aSe,"STRONG",{});var p3t=s(Gge);L$o=r(p3t,"bigbird_pegasus"),p3t.forEach(t),y$o=r(aSe," \u2014 "),dO=n(aSe,"A",{href:!0});var _3t=s(dO);x$o=r(_3t,"BigBirdPegasusForCausalLM"),_3t.forEach(t),$$o=r(aSe," (BigBird-Pegasus model)"),aSe.forEach(t),k$o=i(Q),Y1=n(Q,"LI",{});var nSe=s(Y1);Oge=n(nSe,"STRONG",{});var u3t=s(Oge);S$o=r(u3t,"blenderbot"),u3t.forEach(t),R$o=r(nSe," \u2014 "),cO=n(nSe,"A",{href:!0});var b3t=s(cO);P$o=r(b3t,"BlenderbotForCausalLM"),b3t.forEach(t),B$o=r(nSe," (Blenderbot model)"),nSe.forEach(t),N$o=i(Q),K1=n(Q,"LI",{});var sSe=s(K1);Vge=n(sSe,"STRONG",{});var v3t=s(Vge);I$o=r(v3t,"blenderbot-small"),v3t.forEach(t),q$o=r(sSe," \u2014 "),fO=n(sSe,"A",{href:!0});var F3t=s(fO);j$o=r(F3t,"BlenderbotSmallForCausalLM"),F3t.forEach(t),D$o=r(sSe," (BlenderbotSmall model)"),sSe.forEach(t),G$o=i(Q),Z1=n(Q,"LI",{});var lSe=s(Z1);Xge=n(lSe,"STRONG",{});var T3t=s(Xge);O$o=r(T3t,"bloom"),T3t.forEach(t),V$o=r(lSe," \u2014 "),mO=n(lSe,"A",{href:!0});var M3t=s(mO);X$o=r(M3t,"BloomForCausalLM"),M3t.forEach(t),z$o=r(lSe," (BLOOM model)"),lSe.forEach(t),Q$o=i(Q),e2=n(Q,"LI",{});var iSe=s(e2);zge=n(iSe,"STRONG",{});var E3t=s(zge);W$o=r(E3t,"camembert"),E3t.forEach(t),H$o=r(iSe," \u2014 "),gO=n(iSe,"A",{href:!0});var C3t=s(gO);U$o=r(C3t,"CamembertForCausalLM"),C3t.forEach(t),J$o=r(iSe," (CamemBERT model)"),iSe.forEach(t),Y$o=i(Q),o2=n(Q,"LI",{});var dSe=s(o2);Qge=n(dSe,"STRONG",{});var w3t=s(Qge);K$o=r(w3t,"codegen"),w3t.forEach(t),Z$o=r(dSe," \u2014 "),hO=n(dSe,"A",{href:!0});var A3t=s(hO);eko=r(A3t,"CodeGenForCausalLM"),A3t.forEach(t),oko=r(dSe," (CodeGen model)"),dSe.forEach(t),rko=i(Q),r2=n(Q,"LI",{});var cSe=s(r2);Wge=n(cSe,"STRONG",{});var L3t=s(Wge);tko=r(L3t,"ctrl"),L3t.forEach(t),ako=r(cSe," \u2014 "),pO=n(cSe,"A",{href:!0});var y3t=s(pO);nko=r(y3t,"CTRLLMHeadModel"),y3t.forEach(t),sko=r(cSe," (CTRL model)"),cSe.forEach(t),lko=i(Q),t2=n(Q,"LI",{});var fSe=s(t2);Hge=n(fSe,"STRONG",{});var x3t=s(Hge);iko=r(x3t,"data2vec-text"),x3t.forEach(t),dko=r(fSe," \u2014 "),_O=n(fSe,"A",{href:!0});var $3t=s(_O);cko=r($3t,"Data2VecTextForCausalLM"),$3t.forEach(t),fko=r(fSe," (Data2VecText model)"),fSe.forEach(t),mko=i(Q),a2=n(Q,"LI",{});var mSe=s(a2);Uge=n(mSe,"STRONG",{});var k3t=s(Uge);gko=r(k3t,"electra"),k3t.forEach(t),hko=r(mSe," \u2014 "),uO=n(mSe,"A",{href:!0});var S3t=s(uO);pko=r(S3t,"ElectraForCausalLM"),S3t.forEach(t),_ko=r(mSe," (ELECTRA model)"),mSe.forEach(t),uko=i(Q),n2=n(Q,"LI",{});var gSe=s(n2);Jge=n(gSe,"STRONG",{});var R3t=s(Jge);bko=r(R3t,"gpt2"),R3t.forEach(t),vko=r(gSe," \u2014 "),bO=n(gSe,"A",{href:!0});var P3t=s(bO);Fko=r(P3t,"GPT2LMHeadModel"),P3t.forEach(t),Tko=r(gSe," (OpenAI GPT-2 model)"),gSe.forEach(t),Mko=i(Q),s2=n(Q,"LI",{});var hSe=s(s2);Yge=n(hSe,"STRONG",{});var B3t=s(Yge);Eko=r(B3t,"gpt_neo"),B3t.forEach(t),Cko=r(hSe," \u2014 "),vO=n(hSe,"A",{href:!0});var N3t=s(vO);wko=r(N3t,"GPTNeoForCausalLM"),N3t.forEach(t),Ako=r(hSe," (GPT Neo model)"),hSe.forEach(t),Lko=i(Q),l2=n(Q,"LI",{});var pSe=s(l2);Kge=n(pSe,"STRONG",{});var I3t=s(Kge);yko=r(I3t,"gpt_neox"),I3t.forEach(t),xko=r(pSe," \u2014 "),FO=n(pSe,"A",{href:!0});var q3t=s(FO);$ko=r(q3t,"GPTNeoXForCausalLM"),q3t.forEach(t),kko=r(pSe," (GPT NeoX model)"),pSe.forEach(t),Sko=i(Q),i2=n(Q,"LI",{});var _Se=s(i2);Zge=n(_Se,"STRONG",{});var j3t=s(Zge);Rko=r(j3t,"gptj"),j3t.forEach(t),Pko=r(_Se," \u2014 "),TO=n(_Se,"A",{href:!0});var D3t=s(TO);Bko=r(D3t,"GPTJForCausalLM"),D3t.forEach(t),Nko=r(_Se," (GPT-J model)"),_Se.forEach(t),Iko=i(Q),d2=n(Q,"LI",{});var uSe=s(d2);ehe=n(uSe,"STRONG",{});var G3t=s(ehe);qko=r(G3t,"marian"),G3t.forEach(t),jko=r(uSe," \u2014 "),MO=n(uSe,"A",{href:!0});var O3t=s(MO);Dko=r(O3t,"MarianForCausalLM"),O3t.forEach(t),Gko=r(uSe," (Marian model)"),uSe.forEach(t),Oko=i(Q),c2=n(Q,"LI",{});var bSe=s(c2);ohe=n(bSe,"STRONG",{});var V3t=s(ohe);Vko=r(V3t,"mbart"),V3t.forEach(t),Xko=r(bSe," \u2014 "),EO=n(bSe,"A",{href:!0});var X3t=s(EO);zko=r(X3t,"MBartForCausalLM"),X3t.forEach(t),Qko=r(bSe," (mBART model)"),bSe.forEach(t),Wko=i(Q),f2=n(Q,"LI",{});var vSe=s(f2);rhe=n(vSe,"STRONG",{});var z3t=s(rhe);Hko=r(z3t,"megatron-bert"),z3t.forEach(t),Uko=r(vSe," \u2014 "),CO=n(vSe,"A",{href:!0});var Q3t=s(CO);Jko=r(Q3t,"MegatronBertForCausalLM"),Q3t.forEach(t),Yko=r(vSe," (Megatron-BERT model)"),vSe.forEach(t),Kko=i(Q),m2=n(Q,"LI",{});var FSe=s(m2);the=n(FSe,"STRONG",{});var W3t=s(the);Zko=r(W3t,"mvp"),W3t.forEach(t),eSo=r(FSe," \u2014 "),wO=n(FSe,"A",{href:!0});var H3t=s(wO);oSo=r(H3t,"MvpForCausalLM"),H3t.forEach(t),rSo=r(FSe," (MVP model)"),FSe.forEach(t),tSo=i(Q),g2=n(Q,"LI",{});var TSe=s(g2);ahe=n(TSe,"STRONG",{});var U3t=s(ahe);aSo=r(U3t,"openai-gpt"),U3t.forEach(t),nSo=r(TSe," \u2014 "),AO=n(TSe,"A",{href:!0});var J3t=s(AO);sSo=r(J3t,"OpenAIGPTLMHeadModel"),J3t.forEach(t),lSo=r(TSe," (OpenAI GPT model)"),TSe.forEach(t),iSo=i(Q),h2=n(Q,"LI",{});var MSe=s(h2);nhe=n(MSe,"STRONG",{});var Y3t=s(nhe);dSo=r(Y3t,"opt"),Y3t.forEach(t),cSo=r(MSe," \u2014 "),LO=n(MSe,"A",{href:!0});var K3t=s(LO);fSo=r(K3t,"OPTForCausalLM"),K3t.forEach(t),mSo=r(MSe," (OPT model)"),MSe.forEach(t),gSo=i(Q),p2=n(Q,"LI",{});var ESe=s(p2);she=n(ESe,"STRONG",{});var Z3t=s(she);hSo=r(Z3t,"pegasus"),Z3t.forEach(t),pSo=r(ESe," \u2014 "),yO=n(ESe,"A",{href:!0});var evt=s(yO);_So=r(evt,"PegasusForCausalLM"),evt.forEach(t),uSo=r(ESe," (Pegasus model)"),ESe.forEach(t),bSo=i(Q),_2=n(Q,"LI",{});var CSe=s(_2);lhe=n(CSe,"STRONG",{});var ovt=s(lhe);vSo=r(ovt,"plbart"),ovt.forEach(t),FSo=r(CSe," \u2014 "),xO=n(CSe,"A",{href:!0});var rvt=s(xO);TSo=r(rvt,"PLBartForCausalLM"),rvt.forEach(t),MSo=r(CSe," (PLBart model)"),CSe.forEach(t),ESo=i(Q),u2=n(Q,"LI",{});var wSe=s(u2);ihe=n(wSe,"STRONG",{});var tvt=s(ihe);CSo=r(tvt,"prophetnet"),tvt.forEach(t),wSo=r(wSe," \u2014 "),$O=n(wSe,"A",{href:!0});var avt=s($O);ASo=r(avt,"ProphetNetForCausalLM"),avt.forEach(t),LSo=r(wSe," (ProphetNet model)"),wSe.forEach(t),ySo=i(Q),b2=n(Q,"LI",{});var ASe=s(b2);dhe=n(ASe,"STRONG",{});var nvt=s(dhe);xSo=r(nvt,"qdqbert"),nvt.forEach(t),$So=r(ASe," \u2014 "),kO=n(ASe,"A",{href:!0});var svt=s(kO);kSo=r(svt,"QDQBertLMHeadModel"),svt.forEach(t),SSo=r(ASe," (QDQBert model)"),ASe.forEach(t),RSo=i(Q),v2=n(Q,"LI",{});var LSe=s(v2);che=n(LSe,"STRONG",{});var lvt=s(che);PSo=r(lvt,"reformer"),lvt.forEach(t),BSo=r(LSe," \u2014 "),SO=n(LSe,"A",{href:!0});var ivt=s(SO);NSo=r(ivt,"ReformerModelWithLMHead"),ivt.forEach(t),ISo=r(LSe," (Reformer model)"),LSe.forEach(t),qSo=i(Q),F2=n(Q,"LI",{});var ySe=s(F2);fhe=n(ySe,"STRONG",{});var dvt=s(fhe);jSo=r(dvt,"rembert"),dvt.forEach(t),DSo=r(ySe," \u2014 "),RO=n(ySe,"A",{href:!0});var cvt=s(RO);GSo=r(cvt,"RemBertForCausalLM"),cvt.forEach(t),OSo=r(ySe," (RemBERT model)"),ySe.forEach(t),VSo=i(Q),T2=n(Q,"LI",{});var xSe=s(T2);mhe=n(xSe,"STRONG",{});var fvt=s(mhe);XSo=r(fvt,"roberta"),fvt.forEach(t),zSo=r(xSe," \u2014 "),PO=n(xSe,"A",{href:!0});var mvt=s(PO);QSo=r(mvt,"RobertaForCausalLM"),mvt.forEach(t),WSo=r(xSe," (RoBERTa model)"),xSe.forEach(t),HSo=i(Q),M2=n(Q,"LI",{});var $Se=s(M2);ghe=n($Se,"STRONG",{});var gvt=s(ghe);USo=r(gvt,"roformer"),gvt.forEach(t),JSo=r($Se," \u2014 "),BO=n($Se,"A",{href:!0});var hvt=s(BO);YSo=r(hvt,"RoFormerForCausalLM"),hvt.forEach(t),KSo=r($Se," (RoFormer model)"),$Se.forEach(t),ZSo=i(Q),E2=n(Q,"LI",{});var kSe=s(E2);hhe=n(kSe,"STRONG",{});var pvt=s(hhe);eRo=r(pvt,"speech_to_text_2"),pvt.forEach(t),oRo=r(kSe," \u2014 "),NO=n(kSe,"A",{href:!0});var _vt=s(NO);rRo=r(_vt,"Speech2Text2ForCausalLM"),_vt.forEach(t),tRo=r(kSe," (Speech2Text2 model)"),kSe.forEach(t),aRo=i(Q),C2=n(Q,"LI",{});var SSe=s(C2);phe=n(SSe,"STRONG",{});var uvt=s(phe);nRo=r(uvt,"transfo-xl"),uvt.forEach(t),sRo=r(SSe," \u2014 "),IO=n(SSe,"A",{href:!0});var bvt=s(IO);lRo=r(bvt,"TransfoXLLMHeadModel"),bvt.forEach(t),iRo=r(SSe," (Transformer-XL model)"),SSe.forEach(t),dRo=i(Q),w2=n(Q,"LI",{});var RSe=s(w2);_he=n(RSe,"STRONG",{});var vvt=s(_he);cRo=r(vvt,"trocr"),vvt.forEach(t),fRo=r(RSe," \u2014 "),qO=n(RSe,"A",{href:!0});var Fvt=s(qO);mRo=r(Fvt,"TrOCRForCausalLM"),Fvt.forEach(t),gRo=r(RSe," (TrOCR model)"),RSe.forEach(t),hRo=i(Q),A2=n(Q,"LI",{});var PSe=s(A2);uhe=n(PSe,"STRONG",{});var Tvt=s(uhe);pRo=r(Tvt,"xglm"),Tvt.forEach(t),_Ro=r(PSe," \u2014 "),jO=n(PSe,"A",{href:!0});var Mvt=s(jO);uRo=r(Mvt,"XGLMForCausalLM"),Mvt.forEach(t),bRo=r(PSe," (XGLM model)"),PSe.forEach(t),vRo=i(Q),L2=n(Q,"LI",{});var BSe=s(L2);bhe=n(BSe,"STRONG",{});var Evt=s(bhe);FRo=r(Evt,"xlm"),Evt.forEach(t),TRo=r(BSe," \u2014 "),DO=n(BSe,"A",{href:!0});var Cvt=s(DO);MRo=r(Cvt,"XLMWithLMHeadModel"),Cvt.forEach(t),ERo=r(BSe," (XLM model)"),BSe.forEach(t),CRo=i(Q),y2=n(Q,"LI",{});var NSe=s(y2);vhe=n(NSe,"STRONG",{});var wvt=s(vhe);wRo=r(wvt,"xlm-prophetnet"),wvt.forEach(t),ARo=r(NSe," \u2014 "),GO=n(NSe,"A",{href:!0});var Avt=s(GO);LRo=r(Avt,"XLMProphetNetForCausalLM"),Avt.forEach(t),yRo=r(NSe," (XLM-ProphetNet model)"),NSe.forEach(t),xRo=i(Q),x2=n(Q,"LI",{});var ISe=s(x2);Fhe=n(ISe,"STRONG",{});var Lvt=s(Fhe);$Ro=r(Lvt,"xlm-roberta"),Lvt.forEach(t),kRo=r(ISe," \u2014 "),OO=n(ISe,"A",{href:!0});var yvt=s(OO);SRo=r(yvt,"XLMRobertaForCausalLM"),yvt.forEach(t),RRo=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),PRo=i(Q),$2=n(Q,"LI",{});var qSe=s($2);The=n(qSe,"STRONG",{});var xvt=s(The);BRo=r(xvt,"xlm-roberta-xl"),xvt.forEach(t),NRo=r(qSe," \u2014 "),VO=n(qSe,"A",{href:!0});var $vt=s(VO);IRo=r($vt,"XLMRobertaXLForCausalLM"),$vt.forEach(t),qRo=r(qSe," (XLM-RoBERTa-XL model)"),qSe.forEach(t),jRo=i(Q),k2=n(Q,"LI",{});var jSe=s(k2);Mhe=n(jSe,"STRONG",{});var kvt=s(Mhe);DRo=r(kvt,"xlnet"),kvt.forEach(t),GRo=r(jSe," \u2014 "),XO=n(jSe,"A",{href:!0});var Svt=s(XO);ORo=r(Svt,"XLNetLMHeadModel"),Svt.forEach(t),VRo=r(jSe," (XLNet model)"),jSe.forEach(t),Q.forEach(t),XRo=i(da),S2=n(da,"P",{});var DSe=s(S2);zRo=r(DSe,"The model is set in evaluation mode by default using "),Ehe=n(DSe,"CODE",{});var Rvt=s(Ehe);QRo=r(Rvt,"model.eval()"),Rvt.forEach(t),WRo=r(DSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(DSe,"CODE",{});var Pvt=s(Che);HRo=r(Pvt,"model.train()"),Pvt.forEach(t),DSe.forEach(t),URo=i(da),T(R2.$$.fragment,da),da.forEach(t),nl.forEach(t),RXe=i(f),Yi=n(f,"H2",{class:!0});var jQe=s(Yi);P2=n(jQe,"A",{id:!0,class:!0,href:!0});var Bvt=s(P2);whe=n(Bvt,"SPAN",{});var Nvt=s(whe);T(UL.$$.fragment,Nvt),Nvt.forEach(t),Bvt.forEach(t),JRo=i(jQe),Ahe=n(jQe,"SPAN",{});var Ivt=s(Ahe);YRo=r(Ivt,"AutoModelForMaskedLM"),Ivt.forEach(t),jQe.forEach(t),PXe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(JL.$$.fragment,sl),KRo=i(sl),Ki=n(sl,"P",{});var Wre=s(Ki);ZRo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zO=n(Wre,"A",{href:!0});var qvt=s(zO);ePo=r(qvt,"from_pretrained()"),qvt.forEach(t),oPo=r(Wre," class method or the "),QO=n(Wre,"A",{href:!0});var jvt=s(QO);rPo=r(jvt,"from_config()"),jvt.forEach(t),tPo=r(Wre,` class
method.`),Wre.forEach(t),aPo=i(sl),YL=n(sl,"P",{});var DQe=s(YL);nPo=r(DQe,"This class cannot be instantiated directly using "),Lhe=n(DQe,"CODE",{});var Dvt=s(Lhe);sPo=r(Dvt,"__init__()"),Dvt.forEach(t),lPo=r(DQe," (throws an error)."),DQe.forEach(t),iPo=i(sl),ft=n(sl,"DIV",{class:!0});var b6=s(ft);T(KL.$$.fragment,b6),dPo=i(b6),yhe=n(b6,"P",{});var Gvt=s(yhe);cPo=r(Gvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gvt.forEach(t),fPo=i(b6),Zi=n(b6,"P",{});var Hre=s(Zi);mPo=r(Hre,`Note:
Loading a model from its configuration file does `),xhe=n(Hre,"STRONG",{});var Ovt=s(xhe);gPo=r(Ovt,"not"),Ovt.forEach(t),hPo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(Hre,"A",{href:!0});var Vvt=s(WO);pPo=r(Vvt,"from_pretrained()"),Vvt.forEach(t),_Po=r(Hre," to load the model weights."),Hre.forEach(t),uPo=i(b6),T(B2.$$.fragment,b6),b6.forEach(t),bPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(ZL.$$.fragment,ca),vPo=i(ca),$he=n(ca,"P",{});var Xvt=s($he);FPo=r(Xvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xvt.forEach(t),TPo=i(ca),ja=n(ca,"P",{});var v6=s(ja);MPo=r(v6,"The model class to instantiate is selected based on the "),khe=n(v6,"CODE",{});var zvt=s(khe);EPo=r(zvt,"model_type"),zvt.forEach(t),CPo=r(v6,` property of the config object (either
passed as an argument or loaded from `),She=n(v6,"CODE",{});var Qvt=s(She);wPo=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),APo=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(v6,"CODE",{});var Wvt=s(Rhe);LPo=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),yPo=r(v6,":"),v6.forEach(t),xPo=i(ca),W=n(ca,"UL",{});var H=s(W);N2=n(H,"LI",{});var GSe=s(N2);Phe=n(GSe,"STRONG",{});var Hvt=s(Phe);$Po=r(Hvt,"albert"),Hvt.forEach(t),kPo=r(GSe," \u2014 "),HO=n(GSe,"A",{href:!0});var Uvt=s(HO);SPo=r(Uvt,"AlbertForMaskedLM"),Uvt.forEach(t),RPo=r(GSe," (ALBERT model)"),GSe.forEach(t),PPo=i(H),I2=n(H,"LI",{});var OSe=s(I2);Bhe=n(OSe,"STRONG",{});var Jvt=s(Bhe);BPo=r(Jvt,"bart"),Jvt.forEach(t),NPo=r(OSe," \u2014 "),UO=n(OSe,"A",{href:!0});var Yvt=s(UO);IPo=r(Yvt,"BartForConditionalGeneration"),Yvt.forEach(t),qPo=r(OSe," (BART model)"),OSe.forEach(t),jPo=i(H),q2=n(H,"LI",{});var VSe=s(q2);Nhe=n(VSe,"STRONG",{});var Kvt=s(Nhe);DPo=r(Kvt,"bert"),Kvt.forEach(t),GPo=r(VSe," \u2014 "),JO=n(VSe,"A",{href:!0});var Zvt=s(JO);OPo=r(Zvt,"BertForMaskedLM"),Zvt.forEach(t),VPo=r(VSe," (BERT model)"),VSe.forEach(t),XPo=i(H),j2=n(H,"LI",{});var XSe=s(j2);Ihe=n(XSe,"STRONG",{});var eFt=s(Ihe);zPo=r(eFt,"big_bird"),eFt.forEach(t),QPo=r(XSe," \u2014 "),YO=n(XSe,"A",{href:!0});var oFt=s(YO);WPo=r(oFt,"BigBirdForMaskedLM"),oFt.forEach(t),HPo=r(XSe," (BigBird model)"),XSe.forEach(t),UPo=i(H),D2=n(H,"LI",{});var zSe=s(D2);qhe=n(zSe,"STRONG",{});var rFt=s(qhe);JPo=r(rFt,"camembert"),rFt.forEach(t),YPo=r(zSe," \u2014 "),KO=n(zSe,"A",{href:!0});var tFt=s(KO);KPo=r(tFt,"CamembertForMaskedLM"),tFt.forEach(t),ZPo=r(zSe," (CamemBERT model)"),zSe.forEach(t),eBo=i(H),G2=n(H,"LI",{});var QSe=s(G2);jhe=n(QSe,"STRONG",{});var aFt=s(jhe);oBo=r(aFt,"convbert"),aFt.forEach(t),rBo=r(QSe," \u2014 "),ZO=n(QSe,"A",{href:!0});var nFt=s(ZO);tBo=r(nFt,"ConvBertForMaskedLM"),nFt.forEach(t),aBo=r(QSe," (ConvBERT model)"),QSe.forEach(t),nBo=i(H),O2=n(H,"LI",{});var WSe=s(O2);Dhe=n(WSe,"STRONG",{});var sFt=s(Dhe);sBo=r(sFt,"data2vec-text"),sFt.forEach(t),lBo=r(WSe," \u2014 "),eV=n(WSe,"A",{href:!0});var lFt=s(eV);iBo=r(lFt,"Data2VecTextForMaskedLM"),lFt.forEach(t),dBo=r(WSe," (Data2VecText model)"),WSe.forEach(t),cBo=i(H),V2=n(H,"LI",{});var HSe=s(V2);Ghe=n(HSe,"STRONG",{});var iFt=s(Ghe);fBo=r(iFt,"deberta"),iFt.forEach(t),mBo=r(HSe," \u2014 "),oV=n(HSe,"A",{href:!0});var dFt=s(oV);gBo=r(dFt,"DebertaForMaskedLM"),dFt.forEach(t),hBo=r(HSe," (DeBERTa model)"),HSe.forEach(t),pBo=i(H),X2=n(H,"LI",{});var USe=s(X2);Ohe=n(USe,"STRONG",{});var cFt=s(Ohe);_Bo=r(cFt,"deberta-v2"),cFt.forEach(t),uBo=r(USe," \u2014 "),rV=n(USe,"A",{href:!0});var fFt=s(rV);bBo=r(fFt,"DebertaV2ForMaskedLM"),fFt.forEach(t),vBo=r(USe," (DeBERTa-v2 model)"),USe.forEach(t),FBo=i(H),z2=n(H,"LI",{});var JSe=s(z2);Vhe=n(JSe,"STRONG",{});var mFt=s(Vhe);TBo=r(mFt,"distilbert"),mFt.forEach(t),MBo=r(JSe," \u2014 "),tV=n(JSe,"A",{href:!0});var gFt=s(tV);EBo=r(gFt,"DistilBertForMaskedLM"),gFt.forEach(t),CBo=r(JSe," (DistilBERT model)"),JSe.forEach(t),wBo=i(H),Q2=n(H,"LI",{});var YSe=s(Q2);Xhe=n(YSe,"STRONG",{});var hFt=s(Xhe);ABo=r(hFt,"electra"),hFt.forEach(t),LBo=r(YSe," \u2014 "),aV=n(YSe,"A",{href:!0});var pFt=s(aV);yBo=r(pFt,"ElectraForMaskedLM"),pFt.forEach(t),xBo=r(YSe," (ELECTRA model)"),YSe.forEach(t),$Bo=i(H),W2=n(H,"LI",{});var KSe=s(W2);zhe=n(KSe,"STRONG",{});var _Ft=s(zhe);kBo=r(_Ft,"flaubert"),_Ft.forEach(t),SBo=r(KSe," \u2014 "),nV=n(KSe,"A",{href:!0});var uFt=s(nV);RBo=r(uFt,"FlaubertWithLMHeadModel"),uFt.forEach(t),PBo=r(KSe," (FlauBERT model)"),KSe.forEach(t),BBo=i(H),H2=n(H,"LI",{});var ZSe=s(H2);Qhe=n(ZSe,"STRONG",{});var bFt=s(Qhe);NBo=r(bFt,"fnet"),bFt.forEach(t),IBo=r(ZSe," \u2014 "),sV=n(ZSe,"A",{href:!0});var vFt=s(sV);qBo=r(vFt,"FNetForMaskedLM"),vFt.forEach(t),jBo=r(ZSe," (FNet model)"),ZSe.forEach(t),DBo=i(H),U2=n(H,"LI",{});var eRe=s(U2);Whe=n(eRe,"STRONG",{});var FFt=s(Whe);GBo=r(FFt,"funnel"),FFt.forEach(t),OBo=r(eRe," \u2014 "),lV=n(eRe,"A",{href:!0});var TFt=s(lV);VBo=r(TFt,"FunnelForMaskedLM"),TFt.forEach(t),XBo=r(eRe," (Funnel Transformer model)"),eRe.forEach(t),zBo=i(H),J2=n(H,"LI",{});var oRe=s(J2);Hhe=n(oRe,"STRONG",{});var MFt=s(Hhe);QBo=r(MFt,"ibert"),MFt.forEach(t),WBo=r(oRe," \u2014 "),iV=n(oRe,"A",{href:!0});var EFt=s(iV);HBo=r(EFt,"IBertForMaskedLM"),EFt.forEach(t),UBo=r(oRe," (I-BERT model)"),oRe.forEach(t),JBo=i(H),Y2=n(H,"LI",{});var rRe=s(Y2);Uhe=n(rRe,"STRONG",{});var CFt=s(Uhe);YBo=r(CFt,"layoutlm"),CFt.forEach(t),KBo=r(rRe," \u2014 "),dV=n(rRe,"A",{href:!0});var wFt=s(dV);ZBo=r(wFt,"LayoutLMForMaskedLM"),wFt.forEach(t),eNo=r(rRe," (LayoutLM model)"),rRe.forEach(t),oNo=i(H),K2=n(H,"LI",{});var tRe=s(K2);Jhe=n(tRe,"STRONG",{});var AFt=s(Jhe);rNo=r(AFt,"longformer"),AFt.forEach(t),tNo=r(tRe," \u2014 "),cV=n(tRe,"A",{href:!0});var LFt=s(cV);aNo=r(LFt,"LongformerForMaskedLM"),LFt.forEach(t),nNo=r(tRe," (Longformer model)"),tRe.forEach(t),sNo=i(H),Z2=n(H,"LI",{});var aRe=s(Z2);Yhe=n(aRe,"STRONG",{});var yFt=s(Yhe);lNo=r(yFt,"luke"),yFt.forEach(t),iNo=r(aRe," \u2014 "),fV=n(aRe,"A",{href:!0});var xFt=s(fV);dNo=r(xFt,"LukeForMaskedLM"),xFt.forEach(t),cNo=r(aRe," (LUKE model)"),aRe.forEach(t),fNo=i(H),eb=n(H,"LI",{});var nRe=s(eb);Khe=n(nRe,"STRONG",{});var $Ft=s(Khe);mNo=r($Ft,"mbart"),$Ft.forEach(t),gNo=r(nRe," \u2014 "),mV=n(nRe,"A",{href:!0});var kFt=s(mV);hNo=r(kFt,"MBartForConditionalGeneration"),kFt.forEach(t),pNo=r(nRe," (mBART model)"),nRe.forEach(t),_No=i(H),ob=n(H,"LI",{});var sRe=s(ob);Zhe=n(sRe,"STRONG",{});var SFt=s(Zhe);uNo=r(SFt,"megatron-bert"),SFt.forEach(t),bNo=r(sRe," \u2014 "),gV=n(sRe,"A",{href:!0});var RFt=s(gV);vNo=r(RFt,"MegatronBertForMaskedLM"),RFt.forEach(t),FNo=r(sRe," (Megatron-BERT model)"),sRe.forEach(t),TNo=i(H),rb=n(H,"LI",{});var lRe=s(rb);epe=n(lRe,"STRONG",{});var PFt=s(epe);MNo=r(PFt,"mobilebert"),PFt.forEach(t),ENo=r(lRe," \u2014 "),hV=n(lRe,"A",{href:!0});var BFt=s(hV);CNo=r(BFt,"MobileBertForMaskedLM"),BFt.forEach(t),wNo=r(lRe," (MobileBERT model)"),lRe.forEach(t),ANo=i(H),tb=n(H,"LI",{});var iRe=s(tb);ope=n(iRe,"STRONG",{});var NFt=s(ope);LNo=r(NFt,"mpnet"),NFt.forEach(t),yNo=r(iRe," \u2014 "),pV=n(iRe,"A",{href:!0});var IFt=s(pV);xNo=r(IFt,"MPNetForMaskedLM"),IFt.forEach(t),$No=r(iRe," (MPNet model)"),iRe.forEach(t),kNo=i(H),ab=n(H,"LI",{});var dRe=s(ab);rpe=n(dRe,"STRONG",{});var qFt=s(rpe);SNo=r(qFt,"mvp"),qFt.forEach(t),RNo=r(dRe," \u2014 "),_V=n(dRe,"A",{href:!0});var jFt=s(_V);PNo=r(jFt,"MvpForConditionalGeneration"),jFt.forEach(t),BNo=r(dRe," (MVP model)"),dRe.forEach(t),NNo=i(H),nb=n(H,"LI",{});var cRe=s(nb);tpe=n(cRe,"STRONG",{});var DFt=s(tpe);INo=r(DFt,"nezha"),DFt.forEach(t),qNo=r(cRe," \u2014 "),uV=n(cRe,"A",{href:!0});var GFt=s(uV);jNo=r(GFt,"NezhaForMaskedLM"),GFt.forEach(t),DNo=r(cRe," (Nezha model)"),cRe.forEach(t),GNo=i(H),sb=n(H,"LI",{});var fRe=s(sb);ape=n(fRe,"STRONG",{});var OFt=s(ape);ONo=r(OFt,"nystromformer"),OFt.forEach(t),VNo=r(fRe," \u2014 "),bV=n(fRe,"A",{href:!0});var VFt=s(bV);XNo=r(VFt,"NystromformerForMaskedLM"),VFt.forEach(t),zNo=r(fRe," (Nystr\xF6mformer model)"),fRe.forEach(t),QNo=i(H),lb=n(H,"LI",{});var mRe=s(lb);npe=n(mRe,"STRONG",{});var XFt=s(npe);WNo=r(XFt,"perceiver"),XFt.forEach(t),HNo=r(mRe," \u2014 "),vV=n(mRe,"A",{href:!0});var zFt=s(vV);UNo=r(zFt,"PerceiverForMaskedLM"),zFt.forEach(t),JNo=r(mRe," (Perceiver model)"),mRe.forEach(t),YNo=i(H),ib=n(H,"LI",{});var gRe=s(ib);spe=n(gRe,"STRONG",{});var QFt=s(spe);KNo=r(QFt,"qdqbert"),QFt.forEach(t),ZNo=r(gRe," \u2014 "),FV=n(gRe,"A",{href:!0});var WFt=s(FV);eIo=r(WFt,"QDQBertForMaskedLM"),WFt.forEach(t),oIo=r(gRe," (QDQBert model)"),gRe.forEach(t),rIo=i(H),db=n(H,"LI",{});var hRe=s(db);lpe=n(hRe,"STRONG",{});var HFt=s(lpe);tIo=r(HFt,"reformer"),HFt.forEach(t),aIo=r(hRe," \u2014 "),TV=n(hRe,"A",{href:!0});var UFt=s(TV);nIo=r(UFt,"ReformerForMaskedLM"),UFt.forEach(t),sIo=r(hRe," (Reformer model)"),hRe.forEach(t),lIo=i(H),cb=n(H,"LI",{});var pRe=s(cb);ipe=n(pRe,"STRONG",{});var JFt=s(ipe);iIo=r(JFt,"rembert"),JFt.forEach(t),dIo=r(pRe," \u2014 "),MV=n(pRe,"A",{href:!0});var YFt=s(MV);cIo=r(YFt,"RemBertForMaskedLM"),YFt.forEach(t),fIo=r(pRe," (RemBERT model)"),pRe.forEach(t),mIo=i(H),fb=n(H,"LI",{});var _Re=s(fb);dpe=n(_Re,"STRONG",{});var KFt=s(dpe);gIo=r(KFt,"roberta"),KFt.forEach(t),hIo=r(_Re," \u2014 "),EV=n(_Re,"A",{href:!0});var ZFt=s(EV);pIo=r(ZFt,"RobertaForMaskedLM"),ZFt.forEach(t),_Io=r(_Re," (RoBERTa model)"),_Re.forEach(t),uIo=i(H),mb=n(H,"LI",{});var uRe=s(mb);cpe=n(uRe,"STRONG",{});var eTt=s(cpe);bIo=r(eTt,"roformer"),eTt.forEach(t),vIo=r(uRe," \u2014 "),CV=n(uRe,"A",{href:!0});var oTt=s(CV);FIo=r(oTt,"RoFormerForMaskedLM"),oTt.forEach(t),TIo=r(uRe," (RoFormer model)"),uRe.forEach(t),MIo=i(H),gb=n(H,"LI",{});var bRe=s(gb);fpe=n(bRe,"STRONG",{});var rTt=s(fpe);EIo=r(rTt,"squeezebert"),rTt.forEach(t),CIo=r(bRe," \u2014 "),wV=n(bRe,"A",{href:!0});var tTt=s(wV);wIo=r(tTt,"SqueezeBertForMaskedLM"),tTt.forEach(t),AIo=r(bRe," (SqueezeBERT model)"),bRe.forEach(t),LIo=i(H),hb=n(H,"LI",{});var vRe=s(hb);mpe=n(vRe,"STRONG",{});var aTt=s(mpe);yIo=r(aTt,"tapas"),aTt.forEach(t),xIo=r(vRe," \u2014 "),AV=n(vRe,"A",{href:!0});var nTt=s(AV);$Io=r(nTt,"TapasForMaskedLM"),nTt.forEach(t),kIo=r(vRe," (TAPAS model)"),vRe.forEach(t),SIo=i(H),pb=n(H,"LI",{});var FRe=s(pb);gpe=n(FRe,"STRONG",{});var sTt=s(gpe);RIo=r(sTt,"wav2vec2"),sTt.forEach(t),PIo=r(FRe," \u2014 "),hpe=n(FRe,"CODE",{});var lTt=s(hpe);BIo=r(lTt,"Wav2Vec2ForMaskedLM"),lTt.forEach(t),NIo=r(FRe," (Wav2Vec2 model)"),FRe.forEach(t),IIo=i(H),_b=n(H,"LI",{});var TRe=s(_b);ppe=n(TRe,"STRONG",{});var iTt=s(ppe);qIo=r(iTt,"xlm"),iTt.forEach(t),jIo=r(TRe," \u2014 "),LV=n(TRe,"A",{href:!0});var dTt=s(LV);DIo=r(dTt,"XLMWithLMHeadModel"),dTt.forEach(t),GIo=r(TRe," (XLM model)"),TRe.forEach(t),OIo=i(H),ub=n(H,"LI",{});var MRe=s(ub);_pe=n(MRe,"STRONG",{});var cTt=s(_pe);VIo=r(cTt,"xlm-roberta"),cTt.forEach(t),XIo=r(MRe," \u2014 "),yV=n(MRe,"A",{href:!0});var fTt=s(yV);zIo=r(fTt,"XLMRobertaForMaskedLM"),fTt.forEach(t),QIo=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),WIo=i(H),bb=n(H,"LI",{});var ERe=s(bb);upe=n(ERe,"STRONG",{});var mTt=s(upe);HIo=r(mTt,"xlm-roberta-xl"),mTt.forEach(t),UIo=r(ERe," \u2014 "),xV=n(ERe,"A",{href:!0});var gTt=s(xV);JIo=r(gTt,"XLMRobertaXLForMaskedLM"),gTt.forEach(t),YIo=r(ERe," (XLM-RoBERTa-XL model)"),ERe.forEach(t),KIo=i(H),vb=n(H,"LI",{});var CRe=s(vb);bpe=n(CRe,"STRONG",{});var hTt=s(bpe);ZIo=r(hTt,"yoso"),hTt.forEach(t),eqo=r(CRe," \u2014 "),$V=n(CRe,"A",{href:!0});var pTt=s($V);oqo=r(pTt,"YosoForMaskedLM"),pTt.forEach(t),rqo=r(CRe," (YOSO model)"),CRe.forEach(t),H.forEach(t),tqo=i(ca),Fb=n(ca,"P",{});var wRe=s(Fb);aqo=r(wRe,"The model is set in evaluation mode by default using "),vpe=n(wRe,"CODE",{});var _Tt=s(vpe);nqo=r(_Tt,"model.eval()"),_Tt.forEach(t),sqo=r(wRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(wRe,"CODE",{});var uTt=s(Fpe);lqo=r(uTt,"model.train()"),uTt.forEach(t),wRe.forEach(t),iqo=i(ca),T(Tb.$$.fragment,ca),ca.forEach(t),sl.forEach(t),BXe=i(f),ed=n(f,"H2",{class:!0});var GQe=s(ed);Mb=n(GQe,"A",{id:!0,class:!0,href:!0});var bTt=s(Mb);Tpe=n(bTt,"SPAN",{});var vTt=s(Tpe);T(ey.$$.fragment,vTt),vTt.forEach(t),bTt.forEach(t),dqo=i(GQe),Mpe=n(GQe,"SPAN",{});var FTt=s(Mpe);cqo=r(FTt,"AutoModelForSeq2SeqLM"),FTt.forEach(t),GQe.forEach(t),NXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(oy.$$.fragment,ll),fqo=i(ll),od=n(ll,"P",{});var Ure=s(od);mqo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kV=n(Ure,"A",{href:!0});var TTt=s(kV);gqo=r(TTt,"from_pretrained()"),TTt.forEach(t),hqo=r(Ure," class method or the "),SV=n(Ure,"A",{href:!0});var MTt=s(SV);pqo=r(MTt,"from_config()"),MTt.forEach(t),_qo=r(Ure,` class
method.`),Ure.forEach(t),uqo=i(ll),ry=n(ll,"P",{});var OQe=s(ry);bqo=r(OQe,"This class cannot be instantiated directly using "),Epe=n(OQe,"CODE",{});var ETt=s(Epe);vqo=r(ETt,"__init__()"),ETt.forEach(t),Fqo=r(OQe," (throws an error)."),OQe.forEach(t),Tqo=i(ll),mt=n(ll,"DIV",{class:!0});var F6=s(mt);T(ty.$$.fragment,F6),Mqo=i(F6),Cpe=n(F6,"P",{});var CTt=s(Cpe);Eqo=r(CTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CTt.forEach(t),Cqo=i(F6),rd=n(F6,"P",{});var Jre=s(rd);wqo=r(Jre,`Note:
Loading a model from its configuration file does `),wpe=n(Jre,"STRONG",{});var wTt=s(wpe);Aqo=r(wTt,"not"),wTt.forEach(t),Lqo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(Jre,"A",{href:!0});var ATt=s(RV);yqo=r(ATt,"from_pretrained()"),ATt.forEach(t),xqo=r(Jre," to load the model weights."),Jre.forEach(t),$qo=i(F6),T(Eb.$$.fragment,F6),F6.forEach(t),kqo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(ay.$$.fragment,fa),Sqo=i(fa),Ape=n(fa,"P",{});var LTt=s(Ape);Rqo=r(LTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LTt.forEach(t),Pqo=i(fa),Da=n(fa,"P",{});var T6=s(Da);Bqo=r(T6,"The model class to instantiate is selected based on the "),Lpe=n(T6,"CODE",{});var yTt=s(Lpe);Nqo=r(yTt,"model_type"),yTt.forEach(t),Iqo=r(T6,` property of the config object (either
passed as an argument or loaded from `),ype=n(T6,"CODE",{});var xTt=s(ype);qqo=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),jqo=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(T6,"CODE",{});var $Tt=s(xpe);Dqo=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),Gqo=r(T6,":"),T6.forEach(t),Oqo=i(fa),fe=n(fa,"UL",{});var _e=s(fe);Cb=n(_e,"LI",{});var ARe=s(Cb);$pe=n(ARe,"STRONG",{});var kTt=s($pe);Vqo=r(kTt,"bart"),kTt.forEach(t),Xqo=r(ARe," \u2014 "),PV=n(ARe,"A",{href:!0});var STt=s(PV);zqo=r(STt,"BartForConditionalGeneration"),STt.forEach(t),Qqo=r(ARe," (BART model)"),ARe.forEach(t),Wqo=i(_e),wb=n(_e,"LI",{});var LRe=s(wb);kpe=n(LRe,"STRONG",{});var RTt=s(kpe);Hqo=r(RTt,"bigbird_pegasus"),RTt.forEach(t),Uqo=r(LRe," \u2014 "),BV=n(LRe,"A",{href:!0});var PTt=s(BV);Jqo=r(PTt,"BigBirdPegasusForConditionalGeneration"),PTt.forEach(t),Yqo=r(LRe," (BigBird-Pegasus model)"),LRe.forEach(t),Kqo=i(_e),Ab=n(_e,"LI",{});var yRe=s(Ab);Spe=n(yRe,"STRONG",{});var BTt=s(Spe);Zqo=r(BTt,"blenderbot"),BTt.forEach(t),ejo=r(yRe," \u2014 "),NV=n(yRe,"A",{href:!0});var NTt=s(NV);ojo=r(NTt,"BlenderbotForConditionalGeneration"),NTt.forEach(t),rjo=r(yRe," (Blenderbot model)"),yRe.forEach(t),tjo=i(_e),Lb=n(_e,"LI",{});var xRe=s(Lb);Rpe=n(xRe,"STRONG",{});var ITt=s(Rpe);ajo=r(ITt,"blenderbot-small"),ITt.forEach(t),njo=r(xRe," \u2014 "),IV=n(xRe,"A",{href:!0});var qTt=s(IV);sjo=r(qTt,"BlenderbotSmallForConditionalGeneration"),qTt.forEach(t),ljo=r(xRe," (BlenderbotSmall model)"),xRe.forEach(t),ijo=i(_e),yb=n(_e,"LI",{});var $Re=s(yb);Ppe=n($Re,"STRONG",{});var jTt=s(Ppe);djo=r(jTt,"encoder-decoder"),jTt.forEach(t),cjo=r($Re," \u2014 "),qV=n($Re,"A",{href:!0});var DTt=s(qV);fjo=r(DTt,"EncoderDecoderModel"),DTt.forEach(t),mjo=r($Re," (Encoder decoder model)"),$Re.forEach(t),gjo=i(_e),xb=n(_e,"LI",{});var kRe=s(xb);Bpe=n(kRe,"STRONG",{});var GTt=s(Bpe);hjo=r(GTt,"fsmt"),GTt.forEach(t),pjo=r(kRe," \u2014 "),jV=n(kRe,"A",{href:!0});var OTt=s(jV);_jo=r(OTt,"FSMTForConditionalGeneration"),OTt.forEach(t),ujo=r(kRe," (FairSeq Machine-Translation model)"),kRe.forEach(t),bjo=i(_e),$b=n(_e,"LI",{});var SRe=s($b);Npe=n(SRe,"STRONG",{});var VTt=s(Npe);vjo=r(VTt,"led"),VTt.forEach(t),Fjo=r(SRe," \u2014 "),DV=n(SRe,"A",{href:!0});var XTt=s(DV);Tjo=r(XTt,"LEDForConditionalGeneration"),XTt.forEach(t),Mjo=r(SRe," (LED model)"),SRe.forEach(t),Ejo=i(_e),kb=n(_e,"LI",{});var RRe=s(kb);Ipe=n(RRe,"STRONG",{});var zTt=s(Ipe);Cjo=r(zTt,"longt5"),zTt.forEach(t),wjo=r(RRe," \u2014 "),GV=n(RRe,"A",{href:!0});var QTt=s(GV);Ajo=r(QTt,"LongT5ForConditionalGeneration"),QTt.forEach(t),Ljo=r(RRe," (LongT5 model)"),RRe.forEach(t),yjo=i(_e),Sb=n(_e,"LI",{});var PRe=s(Sb);qpe=n(PRe,"STRONG",{});var WTt=s(qpe);xjo=r(WTt,"m2m_100"),WTt.forEach(t),$jo=r(PRe," \u2014 "),OV=n(PRe,"A",{href:!0});var HTt=s(OV);kjo=r(HTt,"M2M100ForConditionalGeneration"),HTt.forEach(t),Sjo=r(PRe," (M2M100 model)"),PRe.forEach(t),Rjo=i(_e),Rb=n(_e,"LI",{});var BRe=s(Rb);jpe=n(BRe,"STRONG",{});var UTt=s(jpe);Pjo=r(UTt,"marian"),UTt.forEach(t),Bjo=r(BRe," \u2014 "),VV=n(BRe,"A",{href:!0});var JTt=s(VV);Njo=r(JTt,"MarianMTModel"),JTt.forEach(t),Ijo=r(BRe," (Marian model)"),BRe.forEach(t),qjo=i(_e),Pb=n(_e,"LI",{});var NRe=s(Pb);Dpe=n(NRe,"STRONG",{});var YTt=s(Dpe);jjo=r(YTt,"mbart"),YTt.forEach(t),Djo=r(NRe," \u2014 "),XV=n(NRe,"A",{href:!0});var KTt=s(XV);Gjo=r(KTt,"MBartForConditionalGeneration"),KTt.forEach(t),Ojo=r(NRe," (mBART model)"),NRe.forEach(t),Vjo=i(_e),Bb=n(_e,"LI",{});var IRe=s(Bb);Gpe=n(IRe,"STRONG",{});var ZTt=s(Gpe);Xjo=r(ZTt,"mt5"),ZTt.forEach(t),zjo=r(IRe," \u2014 "),zV=n(IRe,"A",{href:!0});var e8t=s(zV);Qjo=r(e8t,"MT5ForConditionalGeneration"),e8t.forEach(t),Wjo=r(IRe," (MT5 model)"),IRe.forEach(t),Hjo=i(_e),Nb=n(_e,"LI",{});var qRe=s(Nb);Ope=n(qRe,"STRONG",{});var o8t=s(Ope);Ujo=r(o8t,"mvp"),o8t.forEach(t),Jjo=r(qRe," \u2014 "),QV=n(qRe,"A",{href:!0});var r8t=s(QV);Yjo=r(r8t,"MvpForConditionalGeneration"),r8t.forEach(t),Kjo=r(qRe," (MVP model)"),qRe.forEach(t),Zjo=i(_e),Ib=n(_e,"LI",{});var jRe=s(Ib);Vpe=n(jRe,"STRONG",{});var t8t=s(Vpe);eDo=r(t8t,"nllb"),t8t.forEach(t),oDo=r(jRe," \u2014 "),WV=n(jRe,"A",{href:!0});var a8t=s(WV);rDo=r(a8t,"M2M100ForConditionalGeneration"),a8t.forEach(t),tDo=r(jRe," (NLLB model)"),jRe.forEach(t),aDo=i(_e),qb=n(_e,"LI",{});var DRe=s(qb);Xpe=n(DRe,"STRONG",{});var n8t=s(Xpe);nDo=r(n8t,"pegasus"),n8t.forEach(t),sDo=r(DRe," \u2014 "),HV=n(DRe,"A",{href:!0});var s8t=s(HV);lDo=r(s8t,"PegasusForConditionalGeneration"),s8t.forEach(t),iDo=r(DRe," (Pegasus model)"),DRe.forEach(t),dDo=i(_e),jb=n(_e,"LI",{});var GRe=s(jb);zpe=n(GRe,"STRONG",{});var l8t=s(zpe);cDo=r(l8t,"plbart"),l8t.forEach(t),fDo=r(GRe," \u2014 "),UV=n(GRe,"A",{href:!0});var i8t=s(UV);mDo=r(i8t,"PLBartForConditionalGeneration"),i8t.forEach(t),gDo=r(GRe," (PLBart model)"),GRe.forEach(t),hDo=i(_e),Db=n(_e,"LI",{});var ORe=s(Db);Qpe=n(ORe,"STRONG",{});var d8t=s(Qpe);pDo=r(d8t,"prophetnet"),d8t.forEach(t),_Do=r(ORe," \u2014 "),JV=n(ORe,"A",{href:!0});var c8t=s(JV);uDo=r(c8t,"ProphetNetForConditionalGeneration"),c8t.forEach(t),bDo=r(ORe," (ProphetNet model)"),ORe.forEach(t),vDo=i(_e),Gb=n(_e,"LI",{});var VRe=s(Gb);Wpe=n(VRe,"STRONG",{});var f8t=s(Wpe);FDo=r(f8t,"t5"),f8t.forEach(t),TDo=r(VRe," \u2014 "),YV=n(VRe,"A",{href:!0});var m8t=s(YV);MDo=r(m8t,"T5ForConditionalGeneration"),m8t.forEach(t),EDo=r(VRe," (T5 model)"),VRe.forEach(t),CDo=i(_e),Ob=n(_e,"LI",{});var XRe=s(Ob);Hpe=n(XRe,"STRONG",{});var g8t=s(Hpe);wDo=r(g8t,"xlm-prophetnet"),g8t.forEach(t),ADo=r(XRe," \u2014 "),KV=n(XRe,"A",{href:!0});var h8t=s(KV);LDo=r(h8t,"XLMProphetNetForConditionalGeneration"),h8t.forEach(t),yDo=r(XRe," (XLM-ProphetNet model)"),XRe.forEach(t),_e.forEach(t),xDo=i(fa),Vb=n(fa,"P",{});var zRe=s(Vb);$Do=r(zRe,"The model is set in evaluation mode by default using "),Upe=n(zRe,"CODE",{});var p8t=s(Upe);kDo=r(p8t,"model.eval()"),p8t.forEach(t),SDo=r(zRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(zRe,"CODE",{});var _8t=s(Jpe);RDo=r(_8t,"model.train()"),_8t.forEach(t),zRe.forEach(t),PDo=i(fa),T(Xb.$$.fragment,fa),fa.forEach(t),ll.forEach(t),IXe=i(f),td=n(f,"H2",{class:!0});var VQe=s(td);zb=n(VQe,"A",{id:!0,class:!0,href:!0});var u8t=s(zb);Ype=n(u8t,"SPAN",{});var b8t=s(Ype);T(ny.$$.fragment,b8t),b8t.forEach(t),u8t.forEach(t),BDo=i(VQe),Kpe=n(VQe,"SPAN",{});var v8t=s(Kpe);NDo=r(v8t,"AutoModelForSequenceClassification"),v8t.forEach(t),VQe.forEach(t),qXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(sy.$$.fragment,il),IDo=i(il),ad=n(il,"P",{});var Yre=s(ad);qDo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZV=n(Yre,"A",{href:!0});var F8t=s(ZV);jDo=r(F8t,"from_pretrained()"),F8t.forEach(t),DDo=r(Yre," class method or the "),eX=n(Yre,"A",{href:!0});var T8t=s(eX);GDo=r(T8t,"from_config()"),T8t.forEach(t),ODo=r(Yre,` class
method.`),Yre.forEach(t),VDo=i(il),ly=n(il,"P",{});var XQe=s(ly);XDo=r(XQe,"This class cannot be instantiated directly using "),Zpe=n(XQe,"CODE",{});var M8t=s(Zpe);zDo=r(M8t,"__init__()"),M8t.forEach(t),QDo=r(XQe," (throws an error)."),XQe.forEach(t),WDo=i(il),gt=n(il,"DIV",{class:!0});var M6=s(gt);T(iy.$$.fragment,M6),HDo=i(M6),e_e=n(M6,"P",{});var E8t=s(e_e);UDo=r(E8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E8t.forEach(t),JDo=i(M6),nd=n(M6,"P",{});var Kre=s(nd);YDo=r(Kre,`Note:
Loading a model from its configuration file does `),o_e=n(Kre,"STRONG",{});var C8t=s(o_e);KDo=r(C8t,"not"),C8t.forEach(t),ZDo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(Kre,"A",{href:!0});var w8t=s(oX);eGo=r(w8t,"from_pretrained()"),w8t.forEach(t),oGo=r(Kre," to load the model weights."),Kre.forEach(t),rGo=i(M6),T(Qb.$$.fragment,M6),M6.forEach(t),tGo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(dy.$$.fragment,ma),aGo=i(ma),r_e=n(ma,"P",{});var A8t=s(r_e);nGo=r(A8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A8t.forEach(t),sGo=i(ma),Ga=n(ma,"P",{});var E6=s(Ga);lGo=r(E6,"The model class to instantiate is selected based on the "),t_e=n(E6,"CODE",{});var L8t=s(t_e);iGo=r(L8t,"model_type"),L8t.forEach(t),dGo=r(E6,` property of the config object (either
passed as an argument or loaded from `),a_e=n(E6,"CODE",{});var y8t=s(a_e);cGo=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),fGo=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(E6,"CODE",{});var x8t=s(n_e);mGo=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),gGo=r(E6,":"),E6.forEach(t),hGo=i(ma),B=n(ma,"UL",{});var j=s(B);Wb=n(j,"LI",{});var QRe=s(Wb);s_e=n(QRe,"STRONG",{});var $8t=s(s_e);pGo=r($8t,"albert"),$8t.forEach(t),_Go=r(QRe," \u2014 "),rX=n(QRe,"A",{href:!0});var k8t=s(rX);uGo=r(k8t,"AlbertForSequenceClassification"),k8t.forEach(t),bGo=r(QRe," (ALBERT model)"),QRe.forEach(t),vGo=i(j),Hb=n(j,"LI",{});var WRe=s(Hb);l_e=n(WRe,"STRONG",{});var S8t=s(l_e);FGo=r(S8t,"bart"),S8t.forEach(t),TGo=r(WRe," \u2014 "),tX=n(WRe,"A",{href:!0});var R8t=s(tX);MGo=r(R8t,"BartForSequenceClassification"),R8t.forEach(t),EGo=r(WRe," (BART model)"),WRe.forEach(t),CGo=i(j),Ub=n(j,"LI",{});var HRe=s(Ub);i_e=n(HRe,"STRONG",{});var P8t=s(i_e);wGo=r(P8t,"bert"),P8t.forEach(t),AGo=r(HRe," \u2014 "),aX=n(HRe,"A",{href:!0});var B8t=s(aX);LGo=r(B8t,"BertForSequenceClassification"),B8t.forEach(t),yGo=r(HRe," (BERT model)"),HRe.forEach(t),xGo=i(j),Jb=n(j,"LI",{});var URe=s(Jb);d_e=n(URe,"STRONG",{});var N8t=s(d_e);$Go=r(N8t,"big_bird"),N8t.forEach(t),kGo=r(URe," \u2014 "),nX=n(URe,"A",{href:!0});var I8t=s(nX);SGo=r(I8t,"BigBirdForSequenceClassification"),I8t.forEach(t),RGo=r(URe," (BigBird model)"),URe.forEach(t),PGo=i(j),Yb=n(j,"LI",{});var JRe=s(Yb);c_e=n(JRe,"STRONG",{});var q8t=s(c_e);BGo=r(q8t,"bigbird_pegasus"),q8t.forEach(t),NGo=r(JRe," \u2014 "),sX=n(JRe,"A",{href:!0});var j8t=s(sX);IGo=r(j8t,"BigBirdPegasusForSequenceClassification"),j8t.forEach(t),qGo=r(JRe," (BigBird-Pegasus model)"),JRe.forEach(t),jGo=i(j),Kb=n(j,"LI",{});var YRe=s(Kb);f_e=n(YRe,"STRONG",{});var D8t=s(f_e);DGo=r(D8t,"bloom"),D8t.forEach(t),GGo=r(YRe," \u2014 "),lX=n(YRe,"A",{href:!0});var G8t=s(lX);OGo=r(G8t,"BloomForSequenceClassification"),G8t.forEach(t),VGo=r(YRe," (BLOOM model)"),YRe.forEach(t),XGo=i(j),Zb=n(j,"LI",{});var KRe=s(Zb);m_e=n(KRe,"STRONG",{});var O8t=s(m_e);zGo=r(O8t,"camembert"),O8t.forEach(t),QGo=r(KRe," \u2014 "),iX=n(KRe,"A",{href:!0});var V8t=s(iX);WGo=r(V8t,"CamembertForSequenceClassification"),V8t.forEach(t),HGo=r(KRe," (CamemBERT model)"),KRe.forEach(t),UGo=i(j),e3=n(j,"LI",{});var ZRe=s(e3);g_e=n(ZRe,"STRONG",{});var X8t=s(g_e);JGo=r(X8t,"canine"),X8t.forEach(t),YGo=r(ZRe," \u2014 "),dX=n(ZRe,"A",{href:!0});var z8t=s(dX);KGo=r(z8t,"CanineForSequenceClassification"),z8t.forEach(t),ZGo=r(ZRe," (CANINE model)"),ZRe.forEach(t),eOo=i(j),o3=n(j,"LI",{});var ePe=s(o3);h_e=n(ePe,"STRONG",{});var Q8t=s(h_e);oOo=r(Q8t,"convbert"),Q8t.forEach(t),rOo=r(ePe," \u2014 "),cX=n(ePe,"A",{href:!0});var W8t=s(cX);tOo=r(W8t,"ConvBertForSequenceClassification"),W8t.forEach(t),aOo=r(ePe," (ConvBERT model)"),ePe.forEach(t),nOo=i(j),r3=n(j,"LI",{});var oPe=s(r3);p_e=n(oPe,"STRONG",{});var H8t=s(p_e);sOo=r(H8t,"ctrl"),H8t.forEach(t),lOo=r(oPe," \u2014 "),fX=n(oPe,"A",{href:!0});var U8t=s(fX);iOo=r(U8t,"CTRLForSequenceClassification"),U8t.forEach(t),dOo=r(oPe," (CTRL model)"),oPe.forEach(t),cOo=i(j),t3=n(j,"LI",{});var rPe=s(t3);__e=n(rPe,"STRONG",{});var J8t=s(__e);fOo=r(J8t,"data2vec-text"),J8t.forEach(t),mOo=r(rPe," \u2014 "),mX=n(rPe,"A",{href:!0});var Y8t=s(mX);gOo=r(Y8t,"Data2VecTextForSequenceClassification"),Y8t.forEach(t),hOo=r(rPe," (Data2VecText model)"),rPe.forEach(t),pOo=i(j),a3=n(j,"LI",{});var tPe=s(a3);u_e=n(tPe,"STRONG",{});var K8t=s(u_e);_Oo=r(K8t,"deberta"),K8t.forEach(t),uOo=r(tPe," \u2014 "),gX=n(tPe,"A",{href:!0});var Z8t=s(gX);bOo=r(Z8t,"DebertaForSequenceClassification"),Z8t.forEach(t),vOo=r(tPe," (DeBERTa model)"),tPe.forEach(t),FOo=i(j),n3=n(j,"LI",{});var aPe=s(n3);b_e=n(aPe,"STRONG",{});var eMt=s(b_e);TOo=r(eMt,"deberta-v2"),eMt.forEach(t),MOo=r(aPe," \u2014 "),hX=n(aPe,"A",{href:!0});var oMt=s(hX);EOo=r(oMt,"DebertaV2ForSequenceClassification"),oMt.forEach(t),COo=r(aPe," (DeBERTa-v2 model)"),aPe.forEach(t),wOo=i(j),s3=n(j,"LI",{});var nPe=s(s3);v_e=n(nPe,"STRONG",{});var rMt=s(v_e);AOo=r(rMt,"distilbert"),rMt.forEach(t),LOo=r(nPe," \u2014 "),pX=n(nPe,"A",{href:!0});var tMt=s(pX);yOo=r(tMt,"DistilBertForSequenceClassification"),tMt.forEach(t),xOo=r(nPe," (DistilBERT model)"),nPe.forEach(t),$Oo=i(j),l3=n(j,"LI",{});var sPe=s(l3);F_e=n(sPe,"STRONG",{});var aMt=s(F_e);kOo=r(aMt,"electra"),aMt.forEach(t),SOo=r(sPe," \u2014 "),_X=n(sPe,"A",{href:!0});var nMt=s(_X);ROo=r(nMt,"ElectraForSequenceClassification"),nMt.forEach(t),POo=r(sPe," (ELECTRA model)"),sPe.forEach(t),BOo=i(j),i3=n(j,"LI",{});var lPe=s(i3);T_e=n(lPe,"STRONG",{});var sMt=s(T_e);NOo=r(sMt,"flaubert"),sMt.forEach(t),IOo=r(lPe," \u2014 "),uX=n(lPe,"A",{href:!0});var lMt=s(uX);qOo=r(lMt,"FlaubertForSequenceClassification"),lMt.forEach(t),jOo=r(lPe," (FlauBERT model)"),lPe.forEach(t),DOo=i(j),d3=n(j,"LI",{});var iPe=s(d3);M_e=n(iPe,"STRONG",{});var iMt=s(M_e);GOo=r(iMt,"fnet"),iMt.forEach(t),OOo=r(iPe," \u2014 "),bX=n(iPe,"A",{href:!0});var dMt=s(bX);VOo=r(dMt,"FNetForSequenceClassification"),dMt.forEach(t),XOo=r(iPe," (FNet model)"),iPe.forEach(t),zOo=i(j),c3=n(j,"LI",{});var dPe=s(c3);E_e=n(dPe,"STRONG",{});var cMt=s(E_e);QOo=r(cMt,"funnel"),cMt.forEach(t),WOo=r(dPe," \u2014 "),vX=n(dPe,"A",{href:!0});var fMt=s(vX);HOo=r(fMt,"FunnelForSequenceClassification"),fMt.forEach(t),UOo=r(dPe," (Funnel Transformer model)"),dPe.forEach(t),JOo=i(j),f3=n(j,"LI",{});var cPe=s(f3);C_e=n(cPe,"STRONG",{});var mMt=s(C_e);YOo=r(mMt,"gpt2"),mMt.forEach(t),KOo=r(cPe," \u2014 "),FX=n(cPe,"A",{href:!0});var gMt=s(FX);ZOo=r(gMt,"GPT2ForSequenceClassification"),gMt.forEach(t),eVo=r(cPe," (OpenAI GPT-2 model)"),cPe.forEach(t),oVo=i(j),m3=n(j,"LI",{});var fPe=s(m3);w_e=n(fPe,"STRONG",{});var hMt=s(w_e);rVo=r(hMt,"gpt_neo"),hMt.forEach(t),tVo=r(fPe," \u2014 "),TX=n(fPe,"A",{href:!0});var pMt=s(TX);aVo=r(pMt,"GPTNeoForSequenceClassification"),pMt.forEach(t),nVo=r(fPe," (GPT Neo model)"),fPe.forEach(t),sVo=i(j),g3=n(j,"LI",{});var mPe=s(g3);A_e=n(mPe,"STRONG",{});var _Mt=s(A_e);lVo=r(_Mt,"gptj"),_Mt.forEach(t),iVo=r(mPe," \u2014 "),MX=n(mPe,"A",{href:!0});var uMt=s(MX);dVo=r(uMt,"GPTJForSequenceClassification"),uMt.forEach(t),cVo=r(mPe," (GPT-J model)"),mPe.forEach(t),fVo=i(j),h3=n(j,"LI",{});var gPe=s(h3);L_e=n(gPe,"STRONG",{});var bMt=s(L_e);mVo=r(bMt,"ibert"),bMt.forEach(t),gVo=r(gPe," \u2014 "),EX=n(gPe,"A",{href:!0});var vMt=s(EX);hVo=r(vMt,"IBertForSequenceClassification"),vMt.forEach(t),pVo=r(gPe," (I-BERT model)"),gPe.forEach(t),_Vo=i(j),p3=n(j,"LI",{});var hPe=s(p3);y_e=n(hPe,"STRONG",{});var FMt=s(y_e);uVo=r(FMt,"layoutlm"),FMt.forEach(t),bVo=r(hPe," \u2014 "),CX=n(hPe,"A",{href:!0});var TMt=s(CX);vVo=r(TMt,"LayoutLMForSequenceClassification"),TMt.forEach(t),FVo=r(hPe," (LayoutLM model)"),hPe.forEach(t),TVo=i(j),_3=n(j,"LI",{});var pPe=s(_3);x_e=n(pPe,"STRONG",{});var MMt=s(x_e);MVo=r(MMt,"layoutlmv2"),MMt.forEach(t),EVo=r(pPe," \u2014 "),wX=n(pPe,"A",{href:!0});var EMt=s(wX);CVo=r(EMt,"LayoutLMv2ForSequenceClassification"),EMt.forEach(t),wVo=r(pPe," (LayoutLMv2 model)"),pPe.forEach(t),AVo=i(j),u3=n(j,"LI",{});var _Pe=s(u3);$_e=n(_Pe,"STRONG",{});var CMt=s($_e);LVo=r(CMt,"layoutlmv3"),CMt.forEach(t),yVo=r(_Pe," \u2014 "),AX=n(_Pe,"A",{href:!0});var wMt=s(AX);xVo=r(wMt,"LayoutLMv3ForSequenceClassification"),wMt.forEach(t),$Vo=r(_Pe," (LayoutLMv3 model)"),_Pe.forEach(t),kVo=i(j),b3=n(j,"LI",{});var uPe=s(b3);k_e=n(uPe,"STRONG",{});var AMt=s(k_e);SVo=r(AMt,"led"),AMt.forEach(t),RVo=r(uPe," \u2014 "),LX=n(uPe,"A",{href:!0});var LMt=s(LX);PVo=r(LMt,"LEDForSequenceClassification"),LMt.forEach(t),BVo=r(uPe," (LED model)"),uPe.forEach(t),NVo=i(j),v3=n(j,"LI",{});var bPe=s(v3);S_e=n(bPe,"STRONG",{});var yMt=s(S_e);IVo=r(yMt,"longformer"),yMt.forEach(t),qVo=r(bPe," \u2014 "),yX=n(bPe,"A",{href:!0});var xMt=s(yX);jVo=r(xMt,"LongformerForSequenceClassification"),xMt.forEach(t),DVo=r(bPe," (Longformer model)"),bPe.forEach(t),GVo=i(j),F3=n(j,"LI",{});var vPe=s(F3);R_e=n(vPe,"STRONG",{});var $Mt=s(R_e);OVo=r($Mt,"mbart"),$Mt.forEach(t),VVo=r(vPe," \u2014 "),xX=n(vPe,"A",{href:!0});var kMt=s(xX);XVo=r(kMt,"MBartForSequenceClassification"),kMt.forEach(t),zVo=r(vPe," (mBART model)"),vPe.forEach(t),QVo=i(j),T3=n(j,"LI",{});var FPe=s(T3);P_e=n(FPe,"STRONG",{});var SMt=s(P_e);WVo=r(SMt,"megatron-bert"),SMt.forEach(t),HVo=r(FPe," \u2014 "),$X=n(FPe,"A",{href:!0});var RMt=s($X);UVo=r(RMt,"MegatronBertForSequenceClassification"),RMt.forEach(t),JVo=r(FPe," (Megatron-BERT model)"),FPe.forEach(t),YVo=i(j),M3=n(j,"LI",{});var TPe=s(M3);B_e=n(TPe,"STRONG",{});var PMt=s(B_e);KVo=r(PMt,"mobilebert"),PMt.forEach(t),ZVo=r(TPe," \u2014 "),kX=n(TPe,"A",{href:!0});var BMt=s(kX);eXo=r(BMt,"MobileBertForSequenceClassification"),BMt.forEach(t),oXo=r(TPe," (MobileBERT model)"),TPe.forEach(t),rXo=i(j),E3=n(j,"LI",{});var MPe=s(E3);N_e=n(MPe,"STRONG",{});var NMt=s(N_e);tXo=r(NMt,"mpnet"),NMt.forEach(t),aXo=r(MPe," \u2014 "),SX=n(MPe,"A",{href:!0});var IMt=s(SX);nXo=r(IMt,"MPNetForSequenceClassification"),IMt.forEach(t),sXo=r(MPe," (MPNet model)"),MPe.forEach(t),lXo=i(j),C3=n(j,"LI",{});var EPe=s(C3);I_e=n(EPe,"STRONG",{});var qMt=s(I_e);iXo=r(qMt,"mvp"),qMt.forEach(t),dXo=r(EPe," \u2014 "),RX=n(EPe,"A",{href:!0});var jMt=s(RX);cXo=r(jMt,"MvpForSequenceClassification"),jMt.forEach(t),fXo=r(EPe," (MVP model)"),EPe.forEach(t),mXo=i(j),w3=n(j,"LI",{});var CPe=s(w3);q_e=n(CPe,"STRONG",{});var DMt=s(q_e);gXo=r(DMt,"nezha"),DMt.forEach(t),hXo=r(CPe," \u2014 "),PX=n(CPe,"A",{href:!0});var GMt=s(PX);pXo=r(GMt,"NezhaForSequenceClassification"),GMt.forEach(t),_Xo=r(CPe," (Nezha model)"),CPe.forEach(t),uXo=i(j),A3=n(j,"LI",{});var wPe=s(A3);j_e=n(wPe,"STRONG",{});var OMt=s(j_e);bXo=r(OMt,"nystromformer"),OMt.forEach(t),vXo=r(wPe," \u2014 "),BX=n(wPe,"A",{href:!0});var VMt=s(BX);FXo=r(VMt,"NystromformerForSequenceClassification"),VMt.forEach(t),TXo=r(wPe," (Nystr\xF6mformer model)"),wPe.forEach(t),MXo=i(j),L3=n(j,"LI",{});var APe=s(L3);D_e=n(APe,"STRONG",{});var XMt=s(D_e);EXo=r(XMt,"openai-gpt"),XMt.forEach(t),CXo=r(APe," \u2014 "),NX=n(APe,"A",{href:!0});var zMt=s(NX);wXo=r(zMt,"OpenAIGPTForSequenceClassification"),zMt.forEach(t),AXo=r(APe," (OpenAI GPT model)"),APe.forEach(t),LXo=i(j),y3=n(j,"LI",{});var LPe=s(y3);G_e=n(LPe,"STRONG",{});var QMt=s(G_e);yXo=r(QMt,"opt"),QMt.forEach(t),xXo=r(LPe," \u2014 "),IX=n(LPe,"A",{href:!0});var WMt=s(IX);$Xo=r(WMt,"OPTForSequenceClassification"),WMt.forEach(t),kXo=r(LPe," (OPT model)"),LPe.forEach(t),SXo=i(j),x3=n(j,"LI",{});var yPe=s(x3);O_e=n(yPe,"STRONG",{});var HMt=s(O_e);RXo=r(HMt,"perceiver"),HMt.forEach(t),PXo=r(yPe," \u2014 "),qX=n(yPe,"A",{href:!0});var UMt=s(qX);BXo=r(UMt,"PerceiverForSequenceClassification"),UMt.forEach(t),NXo=r(yPe," (Perceiver model)"),yPe.forEach(t),IXo=i(j),$3=n(j,"LI",{});var xPe=s($3);V_e=n(xPe,"STRONG",{});var JMt=s(V_e);qXo=r(JMt,"plbart"),JMt.forEach(t),jXo=r(xPe," \u2014 "),jX=n(xPe,"A",{href:!0});var YMt=s(jX);DXo=r(YMt,"PLBartForSequenceClassification"),YMt.forEach(t),GXo=r(xPe," (PLBart model)"),xPe.forEach(t),OXo=i(j),k3=n(j,"LI",{});var $Pe=s(k3);X_e=n($Pe,"STRONG",{});var KMt=s(X_e);VXo=r(KMt,"qdqbert"),KMt.forEach(t),XXo=r($Pe," \u2014 "),DX=n($Pe,"A",{href:!0});var ZMt=s(DX);zXo=r(ZMt,"QDQBertForSequenceClassification"),ZMt.forEach(t),QXo=r($Pe," (QDQBert model)"),$Pe.forEach(t),WXo=i(j),S3=n(j,"LI",{});var kPe=s(S3);z_e=n(kPe,"STRONG",{});var e4t=s(z_e);HXo=r(e4t,"reformer"),e4t.forEach(t),UXo=r(kPe," \u2014 "),GX=n(kPe,"A",{href:!0});var o4t=s(GX);JXo=r(o4t,"ReformerForSequenceClassification"),o4t.forEach(t),YXo=r(kPe," (Reformer model)"),kPe.forEach(t),KXo=i(j),R3=n(j,"LI",{});var SPe=s(R3);Q_e=n(SPe,"STRONG",{});var r4t=s(Q_e);ZXo=r(r4t,"rembert"),r4t.forEach(t),ezo=r(SPe," \u2014 "),OX=n(SPe,"A",{href:!0});var t4t=s(OX);ozo=r(t4t,"RemBertForSequenceClassification"),t4t.forEach(t),rzo=r(SPe," (RemBERT model)"),SPe.forEach(t),tzo=i(j),P3=n(j,"LI",{});var RPe=s(P3);W_e=n(RPe,"STRONG",{});var a4t=s(W_e);azo=r(a4t,"roberta"),a4t.forEach(t),nzo=r(RPe," \u2014 "),VX=n(RPe,"A",{href:!0});var n4t=s(VX);szo=r(n4t,"RobertaForSequenceClassification"),n4t.forEach(t),lzo=r(RPe," (RoBERTa model)"),RPe.forEach(t),izo=i(j),B3=n(j,"LI",{});var PPe=s(B3);H_e=n(PPe,"STRONG",{});var s4t=s(H_e);dzo=r(s4t,"roformer"),s4t.forEach(t),czo=r(PPe," \u2014 "),XX=n(PPe,"A",{href:!0});var l4t=s(XX);fzo=r(l4t,"RoFormerForSequenceClassification"),l4t.forEach(t),mzo=r(PPe," (RoFormer model)"),PPe.forEach(t),gzo=i(j),N3=n(j,"LI",{});var BPe=s(N3);U_e=n(BPe,"STRONG",{});var i4t=s(U_e);hzo=r(i4t,"squeezebert"),i4t.forEach(t),pzo=r(BPe," \u2014 "),zX=n(BPe,"A",{href:!0});var d4t=s(zX);_zo=r(d4t,"SqueezeBertForSequenceClassification"),d4t.forEach(t),uzo=r(BPe," (SqueezeBERT model)"),BPe.forEach(t),bzo=i(j),I3=n(j,"LI",{});var NPe=s(I3);J_e=n(NPe,"STRONG",{});var c4t=s(J_e);vzo=r(c4t,"tapas"),c4t.forEach(t),Fzo=r(NPe," \u2014 "),QX=n(NPe,"A",{href:!0});var f4t=s(QX);Tzo=r(f4t,"TapasForSequenceClassification"),f4t.forEach(t),Mzo=r(NPe," (TAPAS model)"),NPe.forEach(t),Ezo=i(j),q3=n(j,"LI",{});var IPe=s(q3);Y_e=n(IPe,"STRONG",{});var m4t=s(Y_e);Czo=r(m4t,"transfo-xl"),m4t.forEach(t),wzo=r(IPe," \u2014 "),WX=n(IPe,"A",{href:!0});var g4t=s(WX);Azo=r(g4t,"TransfoXLForSequenceClassification"),g4t.forEach(t),Lzo=r(IPe," (Transformer-XL model)"),IPe.forEach(t),yzo=i(j),j3=n(j,"LI",{});var qPe=s(j3);K_e=n(qPe,"STRONG",{});var h4t=s(K_e);xzo=r(h4t,"xlm"),h4t.forEach(t),$zo=r(qPe," \u2014 "),HX=n(qPe,"A",{href:!0});var p4t=s(HX);kzo=r(p4t,"XLMForSequenceClassification"),p4t.forEach(t),Szo=r(qPe," (XLM model)"),qPe.forEach(t),Rzo=i(j),D3=n(j,"LI",{});var jPe=s(D3);Z_e=n(jPe,"STRONG",{});var _4t=s(Z_e);Pzo=r(_4t,"xlm-roberta"),_4t.forEach(t),Bzo=r(jPe," \u2014 "),UX=n(jPe,"A",{href:!0});var u4t=s(UX);Nzo=r(u4t,"XLMRobertaForSequenceClassification"),u4t.forEach(t),Izo=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),qzo=i(j),G3=n(j,"LI",{});var DPe=s(G3);eue=n(DPe,"STRONG",{});var b4t=s(eue);jzo=r(b4t,"xlm-roberta-xl"),b4t.forEach(t),Dzo=r(DPe," \u2014 "),JX=n(DPe,"A",{href:!0});var v4t=s(JX);Gzo=r(v4t,"XLMRobertaXLForSequenceClassification"),v4t.forEach(t),Ozo=r(DPe," (XLM-RoBERTa-XL model)"),DPe.forEach(t),Vzo=i(j),O3=n(j,"LI",{});var GPe=s(O3);oue=n(GPe,"STRONG",{});var F4t=s(oue);Xzo=r(F4t,"xlnet"),F4t.forEach(t),zzo=r(GPe," \u2014 "),YX=n(GPe,"A",{href:!0});var T4t=s(YX);Qzo=r(T4t,"XLNetForSequenceClassification"),T4t.forEach(t),Wzo=r(GPe," (XLNet model)"),GPe.forEach(t),Hzo=i(j),V3=n(j,"LI",{});var OPe=s(V3);rue=n(OPe,"STRONG",{});var M4t=s(rue);Uzo=r(M4t,"yoso"),M4t.forEach(t),Jzo=r(OPe," \u2014 "),KX=n(OPe,"A",{href:!0});var E4t=s(KX);Yzo=r(E4t,"YosoForSequenceClassification"),E4t.forEach(t),Kzo=r(OPe," (YOSO model)"),OPe.forEach(t),j.forEach(t),Zzo=i(ma),X3=n(ma,"P",{});var VPe=s(X3);eQo=r(VPe,"The model is set in evaluation mode by default using "),tue=n(VPe,"CODE",{});var C4t=s(tue);oQo=r(C4t,"model.eval()"),C4t.forEach(t),rQo=r(VPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(VPe,"CODE",{});var w4t=s(aue);tQo=r(w4t,"model.train()"),w4t.forEach(t),VPe.forEach(t),aQo=i(ma),T(z3.$$.fragment,ma),ma.forEach(t),il.forEach(t),jXe=i(f),sd=n(f,"H2",{class:!0});var zQe=s(sd);Q3=n(zQe,"A",{id:!0,class:!0,href:!0});var A4t=s(Q3);nue=n(A4t,"SPAN",{});var L4t=s(nue);T(cy.$$.fragment,L4t),L4t.forEach(t),A4t.forEach(t),nQo=i(zQe),sue=n(zQe,"SPAN",{});var y4t=s(sue);sQo=r(y4t,"AutoModelForMultipleChoice"),y4t.forEach(t),zQe.forEach(t),DXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(fy.$$.fragment,dl),lQo=i(dl),ld=n(dl,"P",{});var Zre=s(ld);iQo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZX=n(Zre,"A",{href:!0});var x4t=s(ZX);dQo=r(x4t,"from_pretrained()"),x4t.forEach(t),cQo=r(Zre," class method or the "),ez=n(Zre,"A",{href:!0});var $4t=s(ez);fQo=r($4t,"from_config()"),$4t.forEach(t),mQo=r(Zre,` class
method.`),Zre.forEach(t),gQo=i(dl),my=n(dl,"P",{});var QQe=s(my);hQo=r(QQe,"This class cannot be instantiated directly using "),lue=n(QQe,"CODE",{});var k4t=s(lue);pQo=r(k4t,"__init__()"),k4t.forEach(t),_Qo=r(QQe," (throws an error)."),QQe.forEach(t),uQo=i(dl),ht=n(dl,"DIV",{class:!0});var C6=s(ht);T(gy.$$.fragment,C6),bQo=i(C6),iue=n(C6,"P",{});var S4t=s(iue);vQo=r(S4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S4t.forEach(t),FQo=i(C6),id=n(C6,"P",{});var ete=s(id);TQo=r(ete,`Note:
Loading a model from its configuration file does `),due=n(ete,"STRONG",{});var R4t=s(due);MQo=r(R4t,"not"),R4t.forEach(t),EQo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(ete,"A",{href:!0});var P4t=s(oz);CQo=r(P4t,"from_pretrained()"),P4t.forEach(t),wQo=r(ete," to load the model weights."),ete.forEach(t),AQo=i(C6),T(W3.$$.fragment,C6),C6.forEach(t),LQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(hy.$$.fragment,ga),yQo=i(ga),cue=n(ga,"P",{});var B4t=s(cue);xQo=r(B4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B4t.forEach(t),$Qo=i(ga),Oa=n(ga,"P",{});var w6=s(Oa);kQo=r(w6,"The model class to instantiate is selected based on the "),fue=n(w6,"CODE",{});var N4t=s(fue);SQo=r(N4t,"model_type"),N4t.forEach(t),RQo=r(w6,` property of the config object (either
passed as an argument or loaded from `),mue=n(w6,"CODE",{});var I4t=s(mue);PQo=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),BQo=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(w6,"CODE",{});var q4t=s(gue);NQo=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),IQo=r(w6,":"),w6.forEach(t),qQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);H3=n(ee,"LI",{});var XPe=s(H3);hue=n(XPe,"STRONG",{});var j4t=s(hue);jQo=r(j4t,"albert"),j4t.forEach(t),DQo=r(XPe," \u2014 "),rz=n(XPe,"A",{href:!0});var D4t=s(rz);GQo=r(D4t,"AlbertForMultipleChoice"),D4t.forEach(t),OQo=r(XPe," (ALBERT model)"),XPe.forEach(t),VQo=i(ee),U3=n(ee,"LI",{});var zPe=s(U3);pue=n(zPe,"STRONG",{});var G4t=s(pue);XQo=r(G4t,"bert"),G4t.forEach(t),zQo=r(zPe," \u2014 "),tz=n(zPe,"A",{href:!0});var O4t=s(tz);QQo=r(O4t,"BertForMultipleChoice"),O4t.forEach(t),WQo=r(zPe," (BERT model)"),zPe.forEach(t),HQo=i(ee),J3=n(ee,"LI",{});var QPe=s(J3);_ue=n(QPe,"STRONG",{});var V4t=s(_ue);UQo=r(V4t,"big_bird"),V4t.forEach(t),JQo=r(QPe," \u2014 "),az=n(QPe,"A",{href:!0});var X4t=s(az);YQo=r(X4t,"BigBirdForMultipleChoice"),X4t.forEach(t),KQo=r(QPe," (BigBird model)"),QPe.forEach(t),ZQo=i(ee),Y3=n(ee,"LI",{});var WPe=s(Y3);uue=n(WPe,"STRONG",{});var z4t=s(uue);eWo=r(z4t,"camembert"),z4t.forEach(t),oWo=r(WPe," \u2014 "),nz=n(WPe,"A",{href:!0});var Q4t=s(nz);rWo=r(Q4t,"CamembertForMultipleChoice"),Q4t.forEach(t),tWo=r(WPe," (CamemBERT model)"),WPe.forEach(t),aWo=i(ee),K3=n(ee,"LI",{});var HPe=s(K3);bue=n(HPe,"STRONG",{});var W4t=s(bue);nWo=r(W4t,"canine"),W4t.forEach(t),sWo=r(HPe," \u2014 "),sz=n(HPe,"A",{href:!0});var H4t=s(sz);lWo=r(H4t,"CanineForMultipleChoice"),H4t.forEach(t),iWo=r(HPe," (CANINE model)"),HPe.forEach(t),dWo=i(ee),Z3=n(ee,"LI",{});var UPe=s(Z3);vue=n(UPe,"STRONG",{});var U4t=s(vue);cWo=r(U4t,"convbert"),U4t.forEach(t),fWo=r(UPe," \u2014 "),lz=n(UPe,"A",{href:!0});var J4t=s(lz);mWo=r(J4t,"ConvBertForMultipleChoice"),J4t.forEach(t),gWo=r(UPe," (ConvBERT model)"),UPe.forEach(t),hWo=i(ee),ev=n(ee,"LI",{});var JPe=s(ev);Fue=n(JPe,"STRONG",{});var Y4t=s(Fue);pWo=r(Y4t,"data2vec-text"),Y4t.forEach(t),_Wo=r(JPe," \u2014 "),iz=n(JPe,"A",{href:!0});var K4t=s(iz);uWo=r(K4t,"Data2VecTextForMultipleChoice"),K4t.forEach(t),bWo=r(JPe," (Data2VecText model)"),JPe.forEach(t),vWo=i(ee),ov=n(ee,"LI",{});var YPe=s(ov);Tue=n(YPe,"STRONG",{});var Z4t=s(Tue);FWo=r(Z4t,"deberta-v2"),Z4t.forEach(t),TWo=r(YPe," \u2014 "),dz=n(YPe,"A",{href:!0});var eEt=s(dz);MWo=r(eEt,"DebertaV2ForMultipleChoice"),eEt.forEach(t),EWo=r(YPe," (DeBERTa-v2 model)"),YPe.forEach(t),CWo=i(ee),rv=n(ee,"LI",{});var KPe=s(rv);Mue=n(KPe,"STRONG",{});var oEt=s(Mue);wWo=r(oEt,"distilbert"),oEt.forEach(t),AWo=r(KPe," \u2014 "),cz=n(KPe,"A",{href:!0});var rEt=s(cz);LWo=r(rEt,"DistilBertForMultipleChoice"),rEt.forEach(t),yWo=r(KPe," (DistilBERT model)"),KPe.forEach(t),xWo=i(ee),tv=n(ee,"LI",{});var ZPe=s(tv);Eue=n(ZPe,"STRONG",{});var tEt=s(Eue);$Wo=r(tEt,"electra"),tEt.forEach(t),kWo=r(ZPe," \u2014 "),fz=n(ZPe,"A",{href:!0});var aEt=s(fz);SWo=r(aEt,"ElectraForMultipleChoice"),aEt.forEach(t),RWo=r(ZPe," (ELECTRA model)"),ZPe.forEach(t),PWo=i(ee),av=n(ee,"LI",{});var eBe=s(av);Cue=n(eBe,"STRONG",{});var nEt=s(Cue);BWo=r(nEt,"flaubert"),nEt.forEach(t),NWo=r(eBe," \u2014 "),mz=n(eBe,"A",{href:!0});var sEt=s(mz);IWo=r(sEt,"FlaubertForMultipleChoice"),sEt.forEach(t),qWo=r(eBe," (FlauBERT model)"),eBe.forEach(t),jWo=i(ee),nv=n(ee,"LI",{});var oBe=s(nv);wue=n(oBe,"STRONG",{});var lEt=s(wue);DWo=r(lEt,"fnet"),lEt.forEach(t),GWo=r(oBe," \u2014 "),gz=n(oBe,"A",{href:!0});var iEt=s(gz);OWo=r(iEt,"FNetForMultipleChoice"),iEt.forEach(t),VWo=r(oBe," (FNet model)"),oBe.forEach(t),XWo=i(ee),sv=n(ee,"LI",{});var rBe=s(sv);Aue=n(rBe,"STRONG",{});var dEt=s(Aue);zWo=r(dEt,"funnel"),dEt.forEach(t),QWo=r(rBe," \u2014 "),hz=n(rBe,"A",{href:!0});var cEt=s(hz);WWo=r(cEt,"FunnelForMultipleChoice"),cEt.forEach(t),HWo=r(rBe," (Funnel Transformer model)"),rBe.forEach(t),UWo=i(ee),lv=n(ee,"LI",{});var tBe=s(lv);Lue=n(tBe,"STRONG",{});var fEt=s(Lue);JWo=r(fEt,"ibert"),fEt.forEach(t),YWo=r(tBe," \u2014 "),pz=n(tBe,"A",{href:!0});var mEt=s(pz);KWo=r(mEt,"IBertForMultipleChoice"),mEt.forEach(t),ZWo=r(tBe," (I-BERT model)"),tBe.forEach(t),eHo=i(ee),iv=n(ee,"LI",{});var aBe=s(iv);yue=n(aBe,"STRONG",{});var gEt=s(yue);oHo=r(gEt,"longformer"),gEt.forEach(t),rHo=r(aBe," \u2014 "),_z=n(aBe,"A",{href:!0});var hEt=s(_z);tHo=r(hEt,"LongformerForMultipleChoice"),hEt.forEach(t),aHo=r(aBe," (Longformer model)"),aBe.forEach(t),nHo=i(ee),dv=n(ee,"LI",{});var nBe=s(dv);xue=n(nBe,"STRONG",{});var pEt=s(xue);sHo=r(pEt,"megatron-bert"),pEt.forEach(t),lHo=r(nBe," \u2014 "),uz=n(nBe,"A",{href:!0});var _Et=s(uz);iHo=r(_Et,"MegatronBertForMultipleChoice"),_Et.forEach(t),dHo=r(nBe," (Megatron-BERT model)"),nBe.forEach(t),cHo=i(ee),cv=n(ee,"LI",{});var sBe=s(cv);$ue=n(sBe,"STRONG",{});var uEt=s($ue);fHo=r(uEt,"mobilebert"),uEt.forEach(t),mHo=r(sBe," \u2014 "),bz=n(sBe,"A",{href:!0});var bEt=s(bz);gHo=r(bEt,"MobileBertForMultipleChoice"),bEt.forEach(t),hHo=r(sBe," (MobileBERT model)"),sBe.forEach(t),pHo=i(ee),fv=n(ee,"LI",{});var lBe=s(fv);kue=n(lBe,"STRONG",{});var vEt=s(kue);_Ho=r(vEt,"mpnet"),vEt.forEach(t),uHo=r(lBe," \u2014 "),vz=n(lBe,"A",{href:!0});var FEt=s(vz);bHo=r(FEt,"MPNetForMultipleChoice"),FEt.forEach(t),vHo=r(lBe," (MPNet model)"),lBe.forEach(t),FHo=i(ee),mv=n(ee,"LI",{});var iBe=s(mv);Sue=n(iBe,"STRONG",{});var TEt=s(Sue);THo=r(TEt,"nezha"),TEt.forEach(t),MHo=r(iBe," \u2014 "),Fz=n(iBe,"A",{href:!0});var MEt=s(Fz);EHo=r(MEt,"NezhaForMultipleChoice"),MEt.forEach(t),CHo=r(iBe," (Nezha model)"),iBe.forEach(t),wHo=i(ee),gv=n(ee,"LI",{});var dBe=s(gv);Rue=n(dBe,"STRONG",{});var EEt=s(Rue);AHo=r(EEt,"nystromformer"),EEt.forEach(t),LHo=r(dBe," \u2014 "),Tz=n(dBe,"A",{href:!0});var CEt=s(Tz);yHo=r(CEt,"NystromformerForMultipleChoice"),CEt.forEach(t),xHo=r(dBe," (Nystr\xF6mformer model)"),dBe.forEach(t),$Ho=i(ee),hv=n(ee,"LI",{});var cBe=s(hv);Pue=n(cBe,"STRONG",{});var wEt=s(Pue);kHo=r(wEt,"qdqbert"),wEt.forEach(t),SHo=r(cBe," \u2014 "),Mz=n(cBe,"A",{href:!0});var AEt=s(Mz);RHo=r(AEt,"QDQBertForMultipleChoice"),AEt.forEach(t),PHo=r(cBe," (QDQBert model)"),cBe.forEach(t),BHo=i(ee),pv=n(ee,"LI",{});var fBe=s(pv);Bue=n(fBe,"STRONG",{});var LEt=s(Bue);NHo=r(LEt,"rembert"),LEt.forEach(t),IHo=r(fBe," \u2014 "),Ez=n(fBe,"A",{href:!0});var yEt=s(Ez);qHo=r(yEt,"RemBertForMultipleChoice"),yEt.forEach(t),jHo=r(fBe," (RemBERT model)"),fBe.forEach(t),DHo=i(ee),_v=n(ee,"LI",{});var mBe=s(_v);Nue=n(mBe,"STRONG",{});var xEt=s(Nue);GHo=r(xEt,"roberta"),xEt.forEach(t),OHo=r(mBe," \u2014 "),Cz=n(mBe,"A",{href:!0});var $Et=s(Cz);VHo=r($Et,"RobertaForMultipleChoice"),$Et.forEach(t),XHo=r(mBe," (RoBERTa model)"),mBe.forEach(t),zHo=i(ee),uv=n(ee,"LI",{});var gBe=s(uv);Iue=n(gBe,"STRONG",{});var kEt=s(Iue);QHo=r(kEt,"roformer"),kEt.forEach(t),WHo=r(gBe," \u2014 "),wz=n(gBe,"A",{href:!0});var SEt=s(wz);HHo=r(SEt,"RoFormerForMultipleChoice"),SEt.forEach(t),UHo=r(gBe," (RoFormer model)"),gBe.forEach(t),JHo=i(ee),bv=n(ee,"LI",{});var hBe=s(bv);que=n(hBe,"STRONG",{});var REt=s(que);YHo=r(REt,"squeezebert"),REt.forEach(t),KHo=r(hBe," \u2014 "),Az=n(hBe,"A",{href:!0});var PEt=s(Az);ZHo=r(PEt,"SqueezeBertForMultipleChoice"),PEt.forEach(t),eUo=r(hBe," (SqueezeBERT model)"),hBe.forEach(t),oUo=i(ee),vv=n(ee,"LI",{});var pBe=s(vv);jue=n(pBe,"STRONG",{});var BEt=s(jue);rUo=r(BEt,"xlm"),BEt.forEach(t),tUo=r(pBe," \u2014 "),Lz=n(pBe,"A",{href:!0});var NEt=s(Lz);aUo=r(NEt,"XLMForMultipleChoice"),NEt.forEach(t),nUo=r(pBe," (XLM model)"),pBe.forEach(t),sUo=i(ee),Fv=n(ee,"LI",{});var _Be=s(Fv);Due=n(_Be,"STRONG",{});var IEt=s(Due);lUo=r(IEt,"xlm-roberta"),IEt.forEach(t),iUo=r(_Be," \u2014 "),yz=n(_Be,"A",{href:!0});var qEt=s(yz);dUo=r(qEt,"XLMRobertaForMultipleChoice"),qEt.forEach(t),cUo=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),fUo=i(ee),Tv=n(ee,"LI",{});var uBe=s(Tv);Gue=n(uBe,"STRONG",{});var jEt=s(Gue);mUo=r(jEt,"xlm-roberta-xl"),jEt.forEach(t),gUo=r(uBe," \u2014 "),xz=n(uBe,"A",{href:!0});var DEt=s(xz);hUo=r(DEt,"XLMRobertaXLForMultipleChoice"),DEt.forEach(t),pUo=r(uBe," (XLM-RoBERTa-XL model)"),uBe.forEach(t),_Uo=i(ee),Mv=n(ee,"LI",{});var bBe=s(Mv);Oue=n(bBe,"STRONG",{});var GEt=s(Oue);uUo=r(GEt,"xlnet"),GEt.forEach(t),bUo=r(bBe," \u2014 "),$z=n(bBe,"A",{href:!0});var OEt=s($z);vUo=r(OEt,"XLNetForMultipleChoice"),OEt.forEach(t),FUo=r(bBe," (XLNet model)"),bBe.forEach(t),TUo=i(ee),Ev=n(ee,"LI",{});var vBe=s(Ev);Vue=n(vBe,"STRONG",{});var VEt=s(Vue);MUo=r(VEt,"yoso"),VEt.forEach(t),EUo=r(vBe," \u2014 "),kz=n(vBe,"A",{href:!0});var XEt=s(kz);CUo=r(XEt,"YosoForMultipleChoice"),XEt.forEach(t),wUo=r(vBe," (YOSO model)"),vBe.forEach(t),ee.forEach(t),AUo=i(ga),Cv=n(ga,"P",{});var FBe=s(Cv);LUo=r(FBe,"The model is set in evaluation mode by default using "),Xue=n(FBe,"CODE",{});var zEt=s(Xue);yUo=r(zEt,"model.eval()"),zEt.forEach(t),xUo=r(FBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(FBe,"CODE",{});var QEt=s(zue);$Uo=r(QEt,"model.train()"),QEt.forEach(t),FBe.forEach(t),kUo=i(ga),T(wv.$$.fragment,ga),ga.forEach(t),dl.forEach(t),GXe=i(f),dd=n(f,"H2",{class:!0});var WQe=s(dd);Av=n(WQe,"A",{id:!0,class:!0,href:!0});var WEt=s(Av);Que=n(WEt,"SPAN",{});var HEt=s(Que);T(py.$$.fragment,HEt),HEt.forEach(t),WEt.forEach(t),SUo=i(WQe),Wue=n(WQe,"SPAN",{});var UEt=s(Wue);RUo=r(UEt,"AutoModelForNextSentencePrediction"),UEt.forEach(t),WQe.forEach(t),OXe=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(_y.$$.fragment,cl),PUo=i(cl),cd=n(cl,"P",{});var ote=s(cd);BUo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sz=n(ote,"A",{href:!0});var JEt=s(Sz);NUo=r(JEt,"from_pretrained()"),JEt.forEach(t),IUo=r(ote," class method or the "),Rz=n(ote,"A",{href:!0});var YEt=s(Rz);qUo=r(YEt,"from_config()"),YEt.forEach(t),jUo=r(ote,` class
method.`),ote.forEach(t),DUo=i(cl),uy=n(cl,"P",{});var HQe=s(uy);GUo=r(HQe,"This class cannot be instantiated directly using "),Hue=n(HQe,"CODE",{});var KEt=s(Hue);OUo=r(KEt,"__init__()"),KEt.forEach(t),VUo=r(HQe," (throws an error)."),HQe.forEach(t),XUo=i(cl),pt=n(cl,"DIV",{class:!0});var A6=s(pt);T(by.$$.fragment,A6),zUo=i(A6),Uue=n(A6,"P",{});var ZEt=s(Uue);QUo=r(ZEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZEt.forEach(t),WUo=i(A6),fd=n(A6,"P",{});var rte=s(fd);HUo=r(rte,`Note:
Loading a model from its configuration file does `),Jue=n(rte,"STRONG",{});var eCt=s(Jue);UUo=r(eCt,"not"),eCt.forEach(t),JUo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(rte,"A",{href:!0});var oCt=s(Pz);YUo=r(oCt,"from_pretrained()"),oCt.forEach(t),KUo=r(rte," to load the model weights."),rte.forEach(t),ZUo=i(A6),T(Lv.$$.fragment,A6),A6.forEach(t),eJo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(vy.$$.fragment,ha),oJo=i(ha),Yue=n(ha,"P",{});var rCt=s(Yue);rJo=r(rCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rCt.forEach(t),tJo=i(ha),Va=n(ha,"P",{});var L6=s(Va);aJo=r(L6,"The model class to instantiate is selected based on the "),Kue=n(L6,"CODE",{});var tCt=s(Kue);nJo=r(tCt,"model_type"),tCt.forEach(t),sJo=r(L6,` property of the config object (either
passed as an argument or loaded from `),Zue=n(L6,"CODE",{});var aCt=s(Zue);lJo=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),iJo=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(L6,"CODE",{});var nCt=s(e1e);dJo=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),cJo=r(L6,":"),L6.forEach(t),fJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);yv=n(pa,"LI",{});var TBe=s(yv);o1e=n(TBe,"STRONG",{});var sCt=s(o1e);mJo=r(sCt,"bert"),sCt.forEach(t),gJo=r(TBe," \u2014 "),Bz=n(TBe,"A",{href:!0});var lCt=s(Bz);hJo=r(lCt,"BertForNextSentencePrediction"),lCt.forEach(t),pJo=r(TBe," (BERT model)"),TBe.forEach(t),_Jo=i(pa),xv=n(pa,"LI",{});var MBe=s(xv);r1e=n(MBe,"STRONG",{});var iCt=s(r1e);uJo=r(iCt,"fnet"),iCt.forEach(t),bJo=r(MBe," \u2014 "),Nz=n(MBe,"A",{href:!0});var dCt=s(Nz);vJo=r(dCt,"FNetForNextSentencePrediction"),dCt.forEach(t),FJo=r(MBe," (FNet model)"),MBe.forEach(t),TJo=i(pa),$v=n(pa,"LI",{});var EBe=s($v);t1e=n(EBe,"STRONG",{});var cCt=s(t1e);MJo=r(cCt,"megatron-bert"),cCt.forEach(t),EJo=r(EBe," \u2014 "),Iz=n(EBe,"A",{href:!0});var fCt=s(Iz);CJo=r(fCt,"MegatronBertForNextSentencePrediction"),fCt.forEach(t),wJo=r(EBe," (Megatron-BERT model)"),EBe.forEach(t),AJo=i(pa),kv=n(pa,"LI",{});var CBe=s(kv);a1e=n(CBe,"STRONG",{});var mCt=s(a1e);LJo=r(mCt,"mobilebert"),mCt.forEach(t),yJo=r(CBe," \u2014 "),qz=n(CBe,"A",{href:!0});var gCt=s(qz);xJo=r(gCt,"MobileBertForNextSentencePrediction"),gCt.forEach(t),$Jo=r(CBe," (MobileBERT model)"),CBe.forEach(t),kJo=i(pa),Sv=n(pa,"LI",{});var wBe=s(Sv);n1e=n(wBe,"STRONG",{});var hCt=s(n1e);SJo=r(hCt,"nezha"),hCt.forEach(t),RJo=r(wBe," \u2014 "),jz=n(wBe,"A",{href:!0});var pCt=s(jz);PJo=r(pCt,"NezhaForNextSentencePrediction"),pCt.forEach(t),BJo=r(wBe," (Nezha model)"),wBe.forEach(t),NJo=i(pa),Rv=n(pa,"LI",{});var ABe=s(Rv);s1e=n(ABe,"STRONG",{});var _Ct=s(s1e);IJo=r(_Ct,"qdqbert"),_Ct.forEach(t),qJo=r(ABe," \u2014 "),Dz=n(ABe,"A",{href:!0});var uCt=s(Dz);jJo=r(uCt,"QDQBertForNextSentencePrediction"),uCt.forEach(t),DJo=r(ABe," (QDQBert model)"),ABe.forEach(t),pa.forEach(t),GJo=i(ha),Pv=n(ha,"P",{});var LBe=s(Pv);OJo=r(LBe,"The model is set in evaluation mode by default using "),l1e=n(LBe,"CODE",{});var bCt=s(l1e);VJo=r(bCt,"model.eval()"),bCt.forEach(t),XJo=r(LBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(LBe,"CODE",{});var vCt=s(i1e);zJo=r(vCt,"model.train()"),vCt.forEach(t),LBe.forEach(t),QJo=i(ha),T(Bv.$$.fragment,ha),ha.forEach(t),cl.forEach(t),VXe=i(f),md=n(f,"H2",{class:!0});var UQe=s(md);Nv=n(UQe,"A",{id:!0,class:!0,href:!0});var FCt=s(Nv);d1e=n(FCt,"SPAN",{});var TCt=s(d1e);T(Fy.$$.fragment,TCt),TCt.forEach(t),FCt.forEach(t),WJo=i(UQe),c1e=n(UQe,"SPAN",{});var MCt=s(c1e);HJo=r(MCt,"AutoModelForTokenClassification"),MCt.forEach(t),UQe.forEach(t),XXe=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(Ty.$$.fragment,fl),UJo=i(fl),gd=n(fl,"P",{});var tte=s(gd);JJo=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gz=n(tte,"A",{href:!0});var ECt=s(Gz);YJo=r(ECt,"from_pretrained()"),ECt.forEach(t),KJo=r(tte," class method or the "),Oz=n(tte,"A",{href:!0});var CCt=s(Oz);ZJo=r(CCt,"from_config()"),CCt.forEach(t),eYo=r(tte,` class
method.`),tte.forEach(t),oYo=i(fl),My=n(fl,"P",{});var JQe=s(My);rYo=r(JQe,"This class cannot be instantiated directly using "),f1e=n(JQe,"CODE",{});var wCt=s(f1e);tYo=r(wCt,"__init__()"),wCt.forEach(t),aYo=r(JQe," (throws an error)."),JQe.forEach(t),nYo=i(fl),_t=n(fl,"DIV",{class:!0});var y6=s(_t);T(Ey.$$.fragment,y6),sYo=i(y6),m1e=n(y6,"P",{});var ACt=s(m1e);lYo=r(ACt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ACt.forEach(t),iYo=i(y6),hd=n(y6,"P",{});var ate=s(hd);dYo=r(ate,`Note:
Loading a model from its configuration file does `),g1e=n(ate,"STRONG",{});var LCt=s(g1e);cYo=r(LCt,"not"),LCt.forEach(t),fYo=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(ate,"A",{href:!0});var yCt=s(Vz);mYo=r(yCt,"from_pretrained()"),yCt.forEach(t),gYo=r(ate," to load the model weights."),ate.forEach(t),hYo=i(y6),T(Iv.$$.fragment,y6),y6.forEach(t),pYo=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(Cy.$$.fragment,_a),_Yo=i(_a),h1e=n(_a,"P",{});var xCt=s(h1e);uYo=r(xCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xCt.forEach(t),bYo=i(_a),Xa=n(_a,"P",{});var x6=s(Xa);vYo=r(x6,"The model class to instantiate is selected based on the "),p1e=n(x6,"CODE",{});var $Ct=s(p1e);FYo=r($Ct,"model_type"),$Ct.forEach(t),TYo=r(x6,` property of the config object (either
passed as an argument or loaded from `),_1e=n(x6,"CODE",{});var kCt=s(_1e);MYo=r(kCt,"pretrained_model_name_or_path"),kCt.forEach(t),EYo=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(x6,"CODE",{});var SCt=s(u1e);CYo=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),wYo=r(x6,":"),x6.forEach(t),AYo=i(_a),U=n(_a,"UL",{});var J=s(U);qv=n(J,"LI",{});var yBe=s(qv);b1e=n(yBe,"STRONG",{});var RCt=s(b1e);LYo=r(RCt,"albert"),RCt.forEach(t),yYo=r(yBe," \u2014 "),Xz=n(yBe,"A",{href:!0});var PCt=s(Xz);xYo=r(PCt,"AlbertForTokenClassification"),PCt.forEach(t),$Yo=r(yBe," (ALBERT model)"),yBe.forEach(t),kYo=i(J),jv=n(J,"LI",{});var xBe=s(jv);v1e=n(xBe,"STRONG",{});var BCt=s(v1e);SYo=r(BCt,"bert"),BCt.forEach(t),RYo=r(xBe," \u2014 "),zz=n(xBe,"A",{href:!0});var NCt=s(zz);PYo=r(NCt,"BertForTokenClassification"),NCt.forEach(t),BYo=r(xBe," (BERT model)"),xBe.forEach(t),NYo=i(J),Dv=n(J,"LI",{});var $Be=s(Dv);F1e=n($Be,"STRONG",{});var ICt=s(F1e);IYo=r(ICt,"big_bird"),ICt.forEach(t),qYo=r($Be," \u2014 "),Qz=n($Be,"A",{href:!0});var qCt=s(Qz);jYo=r(qCt,"BigBirdForTokenClassification"),qCt.forEach(t),DYo=r($Be," (BigBird model)"),$Be.forEach(t),GYo=i(J),Gv=n(J,"LI",{});var kBe=s(Gv);T1e=n(kBe,"STRONG",{});var jCt=s(T1e);OYo=r(jCt,"bloom"),jCt.forEach(t),VYo=r(kBe," \u2014 "),Wz=n(kBe,"A",{href:!0});var DCt=s(Wz);XYo=r(DCt,"BloomForTokenClassification"),DCt.forEach(t),zYo=r(kBe," (BLOOM model)"),kBe.forEach(t),QYo=i(J),Ov=n(J,"LI",{});var SBe=s(Ov);M1e=n(SBe,"STRONG",{});var GCt=s(M1e);WYo=r(GCt,"camembert"),GCt.forEach(t),HYo=r(SBe," \u2014 "),Hz=n(SBe,"A",{href:!0});var OCt=s(Hz);UYo=r(OCt,"CamembertForTokenClassification"),OCt.forEach(t),JYo=r(SBe," (CamemBERT model)"),SBe.forEach(t),YYo=i(J),Vv=n(J,"LI",{});var RBe=s(Vv);E1e=n(RBe,"STRONG",{});var VCt=s(E1e);KYo=r(VCt,"canine"),VCt.forEach(t),ZYo=r(RBe," \u2014 "),Uz=n(RBe,"A",{href:!0});var XCt=s(Uz);eKo=r(XCt,"CanineForTokenClassification"),XCt.forEach(t),oKo=r(RBe," (CANINE model)"),RBe.forEach(t),rKo=i(J),Xv=n(J,"LI",{});var PBe=s(Xv);C1e=n(PBe,"STRONG",{});var zCt=s(C1e);tKo=r(zCt,"convbert"),zCt.forEach(t),aKo=r(PBe," \u2014 "),Jz=n(PBe,"A",{href:!0});var QCt=s(Jz);nKo=r(QCt,"ConvBertForTokenClassification"),QCt.forEach(t),sKo=r(PBe," (ConvBERT model)"),PBe.forEach(t),lKo=i(J),zv=n(J,"LI",{});var BBe=s(zv);w1e=n(BBe,"STRONG",{});var WCt=s(w1e);iKo=r(WCt,"data2vec-text"),WCt.forEach(t),dKo=r(BBe," \u2014 "),Yz=n(BBe,"A",{href:!0});var HCt=s(Yz);cKo=r(HCt,"Data2VecTextForTokenClassification"),HCt.forEach(t),fKo=r(BBe," (Data2VecText model)"),BBe.forEach(t),mKo=i(J),Qv=n(J,"LI",{});var NBe=s(Qv);A1e=n(NBe,"STRONG",{});var UCt=s(A1e);gKo=r(UCt,"deberta"),UCt.forEach(t),hKo=r(NBe," \u2014 "),Kz=n(NBe,"A",{href:!0});var JCt=s(Kz);pKo=r(JCt,"DebertaForTokenClassification"),JCt.forEach(t),_Ko=r(NBe," (DeBERTa model)"),NBe.forEach(t),uKo=i(J),Wv=n(J,"LI",{});var IBe=s(Wv);L1e=n(IBe,"STRONG",{});var YCt=s(L1e);bKo=r(YCt,"deberta-v2"),YCt.forEach(t),vKo=r(IBe," \u2014 "),Zz=n(IBe,"A",{href:!0});var KCt=s(Zz);FKo=r(KCt,"DebertaV2ForTokenClassification"),KCt.forEach(t),TKo=r(IBe," (DeBERTa-v2 model)"),IBe.forEach(t),MKo=i(J),Hv=n(J,"LI",{});var qBe=s(Hv);y1e=n(qBe,"STRONG",{});var ZCt=s(y1e);EKo=r(ZCt,"distilbert"),ZCt.forEach(t),CKo=r(qBe," \u2014 "),eQ=n(qBe,"A",{href:!0});var e5t=s(eQ);wKo=r(e5t,"DistilBertForTokenClassification"),e5t.forEach(t),AKo=r(qBe," (DistilBERT model)"),qBe.forEach(t),LKo=i(J),Uv=n(J,"LI",{});var jBe=s(Uv);x1e=n(jBe,"STRONG",{});var o5t=s(x1e);yKo=r(o5t,"electra"),o5t.forEach(t),xKo=r(jBe," \u2014 "),oQ=n(jBe,"A",{href:!0});var r5t=s(oQ);$Ko=r(r5t,"ElectraForTokenClassification"),r5t.forEach(t),kKo=r(jBe," (ELECTRA model)"),jBe.forEach(t),SKo=i(J),Jv=n(J,"LI",{});var DBe=s(Jv);$1e=n(DBe,"STRONG",{});var t5t=s($1e);RKo=r(t5t,"flaubert"),t5t.forEach(t),PKo=r(DBe," \u2014 "),rQ=n(DBe,"A",{href:!0});var a5t=s(rQ);BKo=r(a5t,"FlaubertForTokenClassification"),a5t.forEach(t),NKo=r(DBe," (FlauBERT model)"),DBe.forEach(t),IKo=i(J),Yv=n(J,"LI",{});var GBe=s(Yv);k1e=n(GBe,"STRONG",{});var n5t=s(k1e);qKo=r(n5t,"fnet"),n5t.forEach(t),jKo=r(GBe," \u2014 "),tQ=n(GBe,"A",{href:!0});var s5t=s(tQ);DKo=r(s5t,"FNetForTokenClassification"),s5t.forEach(t),GKo=r(GBe," (FNet model)"),GBe.forEach(t),OKo=i(J),Kv=n(J,"LI",{});var OBe=s(Kv);S1e=n(OBe,"STRONG",{});var l5t=s(S1e);VKo=r(l5t,"funnel"),l5t.forEach(t),XKo=r(OBe," \u2014 "),aQ=n(OBe,"A",{href:!0});var i5t=s(aQ);zKo=r(i5t,"FunnelForTokenClassification"),i5t.forEach(t),QKo=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),WKo=i(J),Zv=n(J,"LI",{});var VBe=s(Zv);R1e=n(VBe,"STRONG",{});var d5t=s(R1e);HKo=r(d5t,"gpt2"),d5t.forEach(t),UKo=r(VBe," \u2014 "),nQ=n(VBe,"A",{href:!0});var c5t=s(nQ);JKo=r(c5t,"GPT2ForTokenClassification"),c5t.forEach(t),YKo=r(VBe," (OpenAI GPT-2 model)"),VBe.forEach(t),KKo=i(J),eF=n(J,"LI",{});var XBe=s(eF);P1e=n(XBe,"STRONG",{});var f5t=s(P1e);ZKo=r(f5t,"ibert"),f5t.forEach(t),eZo=r(XBe," \u2014 "),sQ=n(XBe,"A",{href:!0});var m5t=s(sQ);oZo=r(m5t,"IBertForTokenClassification"),m5t.forEach(t),rZo=r(XBe," (I-BERT model)"),XBe.forEach(t),tZo=i(J),oF=n(J,"LI",{});var zBe=s(oF);B1e=n(zBe,"STRONG",{});var g5t=s(B1e);aZo=r(g5t,"layoutlm"),g5t.forEach(t),nZo=r(zBe," \u2014 "),lQ=n(zBe,"A",{href:!0});var h5t=s(lQ);sZo=r(h5t,"LayoutLMForTokenClassification"),h5t.forEach(t),lZo=r(zBe," (LayoutLM model)"),zBe.forEach(t),iZo=i(J),rF=n(J,"LI",{});var QBe=s(rF);N1e=n(QBe,"STRONG",{});var p5t=s(N1e);dZo=r(p5t,"layoutlmv2"),p5t.forEach(t),cZo=r(QBe," \u2014 "),iQ=n(QBe,"A",{href:!0});var _5t=s(iQ);fZo=r(_5t,"LayoutLMv2ForTokenClassification"),_5t.forEach(t),mZo=r(QBe," (LayoutLMv2 model)"),QBe.forEach(t),gZo=i(J),tF=n(J,"LI",{});var WBe=s(tF);I1e=n(WBe,"STRONG",{});var u5t=s(I1e);hZo=r(u5t,"layoutlmv3"),u5t.forEach(t),pZo=r(WBe," \u2014 "),dQ=n(WBe,"A",{href:!0});var b5t=s(dQ);_Zo=r(b5t,"LayoutLMv3ForTokenClassification"),b5t.forEach(t),uZo=r(WBe," (LayoutLMv3 model)"),WBe.forEach(t),bZo=i(J),aF=n(J,"LI",{});var HBe=s(aF);q1e=n(HBe,"STRONG",{});var v5t=s(q1e);vZo=r(v5t,"longformer"),v5t.forEach(t),FZo=r(HBe," \u2014 "),cQ=n(HBe,"A",{href:!0});var F5t=s(cQ);TZo=r(F5t,"LongformerForTokenClassification"),F5t.forEach(t),MZo=r(HBe," (Longformer model)"),HBe.forEach(t),EZo=i(J),nF=n(J,"LI",{});var UBe=s(nF);j1e=n(UBe,"STRONG",{});var T5t=s(j1e);CZo=r(T5t,"megatron-bert"),T5t.forEach(t),wZo=r(UBe," \u2014 "),fQ=n(UBe,"A",{href:!0});var M5t=s(fQ);AZo=r(M5t,"MegatronBertForTokenClassification"),M5t.forEach(t),LZo=r(UBe," (Megatron-BERT model)"),UBe.forEach(t),yZo=i(J),sF=n(J,"LI",{});var JBe=s(sF);D1e=n(JBe,"STRONG",{});var E5t=s(D1e);xZo=r(E5t,"mobilebert"),E5t.forEach(t),$Zo=r(JBe," \u2014 "),mQ=n(JBe,"A",{href:!0});var C5t=s(mQ);kZo=r(C5t,"MobileBertForTokenClassification"),C5t.forEach(t),SZo=r(JBe," (MobileBERT model)"),JBe.forEach(t),RZo=i(J),lF=n(J,"LI",{});var YBe=s(lF);G1e=n(YBe,"STRONG",{});var w5t=s(G1e);PZo=r(w5t,"mpnet"),w5t.forEach(t),BZo=r(YBe," \u2014 "),gQ=n(YBe,"A",{href:!0});var A5t=s(gQ);NZo=r(A5t,"MPNetForTokenClassification"),A5t.forEach(t),IZo=r(YBe," (MPNet model)"),YBe.forEach(t),qZo=i(J),iF=n(J,"LI",{});var KBe=s(iF);O1e=n(KBe,"STRONG",{});var L5t=s(O1e);jZo=r(L5t,"nezha"),L5t.forEach(t),DZo=r(KBe," \u2014 "),hQ=n(KBe,"A",{href:!0});var y5t=s(hQ);GZo=r(y5t,"NezhaForTokenClassification"),y5t.forEach(t),OZo=r(KBe," (Nezha model)"),KBe.forEach(t),VZo=i(J),dF=n(J,"LI",{});var ZBe=s(dF);V1e=n(ZBe,"STRONG",{});var x5t=s(V1e);XZo=r(x5t,"nystromformer"),x5t.forEach(t),zZo=r(ZBe," \u2014 "),pQ=n(ZBe,"A",{href:!0});var $5t=s(pQ);QZo=r($5t,"NystromformerForTokenClassification"),$5t.forEach(t),WZo=r(ZBe," (Nystr\xF6mformer model)"),ZBe.forEach(t),HZo=i(J),cF=n(J,"LI",{});var eNe=s(cF);X1e=n(eNe,"STRONG",{});var k5t=s(X1e);UZo=r(k5t,"qdqbert"),k5t.forEach(t),JZo=r(eNe," \u2014 "),_Q=n(eNe,"A",{href:!0});var S5t=s(_Q);YZo=r(S5t,"QDQBertForTokenClassification"),S5t.forEach(t),KZo=r(eNe," (QDQBert model)"),eNe.forEach(t),ZZo=i(J),fF=n(J,"LI",{});var oNe=s(fF);z1e=n(oNe,"STRONG",{});var R5t=s(z1e);eer=r(R5t,"rembert"),R5t.forEach(t),oer=r(oNe," \u2014 "),uQ=n(oNe,"A",{href:!0});var P5t=s(uQ);rer=r(P5t,"RemBertForTokenClassification"),P5t.forEach(t),ter=r(oNe," (RemBERT model)"),oNe.forEach(t),aer=i(J),mF=n(J,"LI",{});var rNe=s(mF);Q1e=n(rNe,"STRONG",{});var B5t=s(Q1e);ner=r(B5t,"roberta"),B5t.forEach(t),ser=r(rNe," \u2014 "),bQ=n(rNe,"A",{href:!0});var N5t=s(bQ);ler=r(N5t,"RobertaForTokenClassification"),N5t.forEach(t),ier=r(rNe," (RoBERTa model)"),rNe.forEach(t),der=i(J),gF=n(J,"LI",{});var tNe=s(gF);W1e=n(tNe,"STRONG",{});var I5t=s(W1e);cer=r(I5t,"roformer"),I5t.forEach(t),fer=r(tNe," \u2014 "),vQ=n(tNe,"A",{href:!0});var q5t=s(vQ);mer=r(q5t,"RoFormerForTokenClassification"),q5t.forEach(t),ger=r(tNe," (RoFormer model)"),tNe.forEach(t),her=i(J),hF=n(J,"LI",{});var aNe=s(hF);H1e=n(aNe,"STRONG",{});var j5t=s(H1e);per=r(j5t,"squeezebert"),j5t.forEach(t),_er=r(aNe," \u2014 "),FQ=n(aNe,"A",{href:!0});var D5t=s(FQ);uer=r(D5t,"SqueezeBertForTokenClassification"),D5t.forEach(t),ber=r(aNe," (SqueezeBERT model)"),aNe.forEach(t),ver=i(J),pF=n(J,"LI",{});var nNe=s(pF);U1e=n(nNe,"STRONG",{});var G5t=s(U1e);Fer=r(G5t,"xlm"),G5t.forEach(t),Ter=r(nNe," \u2014 "),TQ=n(nNe,"A",{href:!0});var O5t=s(TQ);Mer=r(O5t,"XLMForTokenClassification"),O5t.forEach(t),Eer=r(nNe," (XLM model)"),nNe.forEach(t),Cer=i(J),_F=n(J,"LI",{});var sNe=s(_F);J1e=n(sNe,"STRONG",{});var V5t=s(J1e);wer=r(V5t,"xlm-roberta"),V5t.forEach(t),Aer=r(sNe," \u2014 "),MQ=n(sNe,"A",{href:!0});var X5t=s(MQ);Ler=r(X5t,"XLMRobertaForTokenClassification"),X5t.forEach(t),yer=r(sNe," (XLM-RoBERTa model)"),sNe.forEach(t),xer=i(J),uF=n(J,"LI",{});var lNe=s(uF);Y1e=n(lNe,"STRONG",{});var z5t=s(Y1e);$er=r(z5t,"xlm-roberta-xl"),z5t.forEach(t),ker=r(lNe," \u2014 "),EQ=n(lNe,"A",{href:!0});var Q5t=s(EQ);Ser=r(Q5t,"XLMRobertaXLForTokenClassification"),Q5t.forEach(t),Rer=r(lNe," (XLM-RoBERTa-XL model)"),lNe.forEach(t),Per=i(J),bF=n(J,"LI",{});var iNe=s(bF);K1e=n(iNe,"STRONG",{});var W5t=s(K1e);Ber=r(W5t,"xlnet"),W5t.forEach(t),Ner=r(iNe," \u2014 "),CQ=n(iNe,"A",{href:!0});var H5t=s(CQ);Ier=r(H5t,"XLNetForTokenClassification"),H5t.forEach(t),qer=r(iNe," (XLNet model)"),iNe.forEach(t),jer=i(J),vF=n(J,"LI",{});var dNe=s(vF);Z1e=n(dNe,"STRONG",{});var U5t=s(Z1e);Der=r(U5t,"yoso"),U5t.forEach(t),Ger=r(dNe," \u2014 "),wQ=n(dNe,"A",{href:!0});var J5t=s(wQ);Oer=r(J5t,"YosoForTokenClassification"),J5t.forEach(t),Ver=r(dNe," (YOSO model)"),dNe.forEach(t),J.forEach(t),Xer=i(_a),FF=n(_a,"P",{});var cNe=s(FF);zer=r(cNe,"The model is set in evaluation mode by default using "),e2e=n(cNe,"CODE",{});var Y5t=s(e2e);Qer=r(Y5t,"model.eval()"),Y5t.forEach(t),Wer=r(cNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=n(cNe,"CODE",{});var K5t=s(o2e);Her=r(K5t,"model.train()"),K5t.forEach(t),cNe.forEach(t),Uer=i(_a),T(TF.$$.fragment,_a),_a.forEach(t),fl.forEach(t),zXe=i(f),pd=n(f,"H2",{class:!0});var YQe=s(pd);MF=n(YQe,"A",{id:!0,class:!0,href:!0});var Z5t=s(MF);r2e=n(Z5t,"SPAN",{});var e0t=s(r2e);T(wy.$$.fragment,e0t),e0t.forEach(t),Z5t.forEach(t),Jer=i(YQe),t2e=n(YQe,"SPAN",{});var o0t=s(t2e);Yer=r(o0t,"AutoModelForQuestionAnswering"),o0t.forEach(t),YQe.forEach(t),QXe=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(Ay.$$.fragment,ml),Ker=i(ml),_d=n(ml,"P",{});var nte=s(_d);Zer=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AQ=n(nte,"A",{href:!0});var r0t=s(AQ);eor=r(r0t,"from_pretrained()"),r0t.forEach(t),oor=r(nte," class method or the "),LQ=n(nte,"A",{href:!0});var t0t=s(LQ);ror=r(t0t,"from_config()"),t0t.forEach(t),tor=r(nte,` class
method.`),nte.forEach(t),aor=i(ml),Ly=n(ml,"P",{});var KQe=s(Ly);nor=r(KQe,"This class cannot be instantiated directly using "),a2e=n(KQe,"CODE",{});var a0t=s(a2e);sor=r(a0t,"__init__()"),a0t.forEach(t),lor=r(KQe," (throws an error)."),KQe.forEach(t),ior=i(ml),ut=n(ml,"DIV",{class:!0});var $6=s(ut);T(yy.$$.fragment,$6),dor=i($6),n2e=n($6,"P",{});var n0t=s(n2e);cor=r(n0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),n0t.forEach(t),mor=i($6),ud=n($6,"P",{});var ste=s(ud);gor=r(ste,`Note:
Loading a model from its configuration file does `),s2e=n(ste,"STRONG",{});var s0t=s(s2e);hor=r(s0t,"not"),s0t.forEach(t),por=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(ste,"A",{href:!0});var l0t=s(yQ);_or=r(l0t,"from_pretrained()"),l0t.forEach(t),uor=r(ste," to load the model weights."),ste.forEach(t),bor=i($6),T(EF.$$.fragment,$6),$6.forEach(t),vor=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T(xy.$$.fragment,ua),For=i(ua),l2e=n(ua,"P",{});var i0t=s(l2e);Tor=r(i0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i0t.forEach(t),Mor=i(ua),za=n(ua,"P",{});var k6=s(za);Eor=r(k6,"The model class to instantiate is selected based on the "),i2e=n(k6,"CODE",{});var d0t=s(i2e);Cor=r(d0t,"model_type"),d0t.forEach(t),wor=r(k6,` property of the config object (either
passed as an argument or loaded from `),d2e=n(k6,"CODE",{});var c0t=s(d2e);Aor=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),Lor=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(k6,"CODE",{});var f0t=s(c2e);yor=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),xor=r(k6,":"),k6.forEach(t),$or=i(ua),V=n(ua,"UL",{});var X=s(V);CF=n(X,"LI",{});var fNe=s(CF);f2e=n(fNe,"STRONG",{});var m0t=s(f2e);kor=r(m0t,"albert"),m0t.forEach(t),Sor=r(fNe," \u2014 "),xQ=n(fNe,"A",{href:!0});var g0t=s(xQ);Ror=r(g0t,"AlbertForQuestionAnswering"),g0t.forEach(t),Por=r(fNe," (ALBERT model)"),fNe.forEach(t),Bor=i(X),wF=n(X,"LI",{});var mNe=s(wF);m2e=n(mNe,"STRONG",{});var h0t=s(m2e);Nor=r(h0t,"bart"),h0t.forEach(t),Ior=r(mNe," \u2014 "),$Q=n(mNe,"A",{href:!0});var p0t=s($Q);qor=r(p0t,"BartForQuestionAnswering"),p0t.forEach(t),jor=r(mNe," (BART model)"),mNe.forEach(t),Dor=i(X),AF=n(X,"LI",{});var gNe=s(AF);g2e=n(gNe,"STRONG",{});var _0t=s(g2e);Gor=r(_0t,"bert"),_0t.forEach(t),Oor=r(gNe," \u2014 "),kQ=n(gNe,"A",{href:!0});var u0t=s(kQ);Vor=r(u0t,"BertForQuestionAnswering"),u0t.forEach(t),Xor=r(gNe," (BERT model)"),gNe.forEach(t),zor=i(X),LF=n(X,"LI",{});var hNe=s(LF);h2e=n(hNe,"STRONG",{});var b0t=s(h2e);Qor=r(b0t,"big_bird"),b0t.forEach(t),Wor=r(hNe," \u2014 "),SQ=n(hNe,"A",{href:!0});var v0t=s(SQ);Hor=r(v0t,"BigBirdForQuestionAnswering"),v0t.forEach(t),Uor=r(hNe," (BigBird model)"),hNe.forEach(t),Jor=i(X),yF=n(X,"LI",{});var pNe=s(yF);p2e=n(pNe,"STRONG",{});var F0t=s(p2e);Yor=r(F0t,"bigbird_pegasus"),F0t.forEach(t),Kor=r(pNe," \u2014 "),RQ=n(pNe,"A",{href:!0});var T0t=s(RQ);Zor=r(T0t,"BigBirdPegasusForQuestionAnswering"),T0t.forEach(t),err=r(pNe," (BigBird-Pegasus model)"),pNe.forEach(t),orr=i(X),xF=n(X,"LI",{});var _Ne=s(xF);_2e=n(_Ne,"STRONG",{});var M0t=s(_2e);rrr=r(M0t,"camembert"),M0t.forEach(t),trr=r(_Ne," \u2014 "),PQ=n(_Ne,"A",{href:!0});var E0t=s(PQ);arr=r(E0t,"CamembertForQuestionAnswering"),E0t.forEach(t),nrr=r(_Ne," (CamemBERT model)"),_Ne.forEach(t),srr=i(X),$F=n(X,"LI",{});var uNe=s($F);u2e=n(uNe,"STRONG",{});var C0t=s(u2e);lrr=r(C0t,"canine"),C0t.forEach(t),irr=r(uNe," \u2014 "),BQ=n(uNe,"A",{href:!0});var w0t=s(BQ);drr=r(w0t,"CanineForQuestionAnswering"),w0t.forEach(t),crr=r(uNe," (CANINE model)"),uNe.forEach(t),frr=i(X),kF=n(X,"LI",{});var bNe=s(kF);b2e=n(bNe,"STRONG",{});var A0t=s(b2e);mrr=r(A0t,"convbert"),A0t.forEach(t),grr=r(bNe," \u2014 "),NQ=n(bNe,"A",{href:!0});var L0t=s(NQ);hrr=r(L0t,"ConvBertForQuestionAnswering"),L0t.forEach(t),prr=r(bNe," (ConvBERT model)"),bNe.forEach(t),_rr=i(X),SF=n(X,"LI",{});var vNe=s(SF);v2e=n(vNe,"STRONG",{});var y0t=s(v2e);urr=r(y0t,"data2vec-text"),y0t.forEach(t),brr=r(vNe," \u2014 "),IQ=n(vNe,"A",{href:!0});var x0t=s(IQ);vrr=r(x0t,"Data2VecTextForQuestionAnswering"),x0t.forEach(t),Frr=r(vNe," (Data2VecText model)"),vNe.forEach(t),Trr=i(X),RF=n(X,"LI",{});var FNe=s(RF);F2e=n(FNe,"STRONG",{});var $0t=s(F2e);Mrr=r($0t,"deberta"),$0t.forEach(t),Err=r(FNe," \u2014 "),qQ=n(FNe,"A",{href:!0});var k0t=s(qQ);Crr=r(k0t,"DebertaForQuestionAnswering"),k0t.forEach(t),wrr=r(FNe," (DeBERTa model)"),FNe.forEach(t),Arr=i(X),PF=n(X,"LI",{});var TNe=s(PF);T2e=n(TNe,"STRONG",{});var S0t=s(T2e);Lrr=r(S0t,"deberta-v2"),S0t.forEach(t),yrr=r(TNe," \u2014 "),jQ=n(TNe,"A",{href:!0});var R0t=s(jQ);xrr=r(R0t,"DebertaV2ForQuestionAnswering"),R0t.forEach(t),$rr=r(TNe," (DeBERTa-v2 model)"),TNe.forEach(t),krr=i(X),BF=n(X,"LI",{});var MNe=s(BF);M2e=n(MNe,"STRONG",{});var P0t=s(M2e);Srr=r(P0t,"distilbert"),P0t.forEach(t),Rrr=r(MNe," \u2014 "),DQ=n(MNe,"A",{href:!0});var B0t=s(DQ);Prr=r(B0t,"DistilBertForQuestionAnswering"),B0t.forEach(t),Brr=r(MNe," (DistilBERT model)"),MNe.forEach(t),Nrr=i(X),NF=n(X,"LI",{});var ENe=s(NF);E2e=n(ENe,"STRONG",{});var N0t=s(E2e);Irr=r(N0t,"electra"),N0t.forEach(t),qrr=r(ENe," \u2014 "),GQ=n(ENe,"A",{href:!0});var I0t=s(GQ);jrr=r(I0t,"ElectraForQuestionAnswering"),I0t.forEach(t),Drr=r(ENe," (ELECTRA model)"),ENe.forEach(t),Grr=i(X),IF=n(X,"LI",{});var CNe=s(IF);C2e=n(CNe,"STRONG",{});var q0t=s(C2e);Orr=r(q0t,"flaubert"),q0t.forEach(t),Vrr=r(CNe," \u2014 "),OQ=n(CNe,"A",{href:!0});var j0t=s(OQ);Xrr=r(j0t,"FlaubertForQuestionAnsweringSimple"),j0t.forEach(t),zrr=r(CNe," (FlauBERT model)"),CNe.forEach(t),Qrr=i(X),qF=n(X,"LI",{});var wNe=s(qF);w2e=n(wNe,"STRONG",{});var D0t=s(w2e);Wrr=r(D0t,"fnet"),D0t.forEach(t),Hrr=r(wNe," \u2014 "),VQ=n(wNe,"A",{href:!0});var G0t=s(VQ);Urr=r(G0t,"FNetForQuestionAnswering"),G0t.forEach(t),Jrr=r(wNe," (FNet model)"),wNe.forEach(t),Yrr=i(X),jF=n(X,"LI",{});var ANe=s(jF);A2e=n(ANe,"STRONG",{});var O0t=s(A2e);Krr=r(O0t,"funnel"),O0t.forEach(t),Zrr=r(ANe," \u2014 "),XQ=n(ANe,"A",{href:!0});var V0t=s(XQ);etr=r(V0t,"FunnelForQuestionAnswering"),V0t.forEach(t),otr=r(ANe," (Funnel Transformer model)"),ANe.forEach(t),rtr=i(X),DF=n(X,"LI",{});var LNe=s(DF);L2e=n(LNe,"STRONG",{});var X0t=s(L2e);ttr=r(X0t,"gptj"),X0t.forEach(t),atr=r(LNe," \u2014 "),zQ=n(LNe,"A",{href:!0});var z0t=s(zQ);ntr=r(z0t,"GPTJForQuestionAnswering"),z0t.forEach(t),str=r(LNe," (GPT-J model)"),LNe.forEach(t),ltr=i(X),GF=n(X,"LI",{});var yNe=s(GF);y2e=n(yNe,"STRONG",{});var Q0t=s(y2e);itr=r(Q0t,"ibert"),Q0t.forEach(t),dtr=r(yNe," \u2014 "),QQ=n(yNe,"A",{href:!0});var W0t=s(QQ);ctr=r(W0t,"IBertForQuestionAnswering"),W0t.forEach(t),ftr=r(yNe," (I-BERT model)"),yNe.forEach(t),mtr=i(X),OF=n(X,"LI",{});var xNe=s(OF);x2e=n(xNe,"STRONG",{});var H0t=s(x2e);gtr=r(H0t,"layoutlmv2"),H0t.forEach(t),htr=r(xNe," \u2014 "),WQ=n(xNe,"A",{href:!0});var U0t=s(WQ);ptr=r(U0t,"LayoutLMv2ForQuestionAnswering"),U0t.forEach(t),_tr=r(xNe," (LayoutLMv2 model)"),xNe.forEach(t),utr=i(X),VF=n(X,"LI",{});var $Ne=s(VF);$2e=n($Ne,"STRONG",{});var J0t=s($2e);btr=r(J0t,"layoutlmv3"),J0t.forEach(t),vtr=r($Ne," \u2014 "),HQ=n($Ne,"A",{href:!0});var Y0t=s(HQ);Ftr=r(Y0t,"LayoutLMv3ForQuestionAnswering"),Y0t.forEach(t),Ttr=r($Ne," (LayoutLMv3 model)"),$Ne.forEach(t),Mtr=i(X),XF=n(X,"LI",{});var kNe=s(XF);k2e=n(kNe,"STRONG",{});var K0t=s(k2e);Etr=r(K0t,"led"),K0t.forEach(t),Ctr=r(kNe," \u2014 "),UQ=n(kNe,"A",{href:!0});var Z0t=s(UQ);wtr=r(Z0t,"LEDForQuestionAnswering"),Z0t.forEach(t),Atr=r(kNe," (LED model)"),kNe.forEach(t),Ltr=i(X),zF=n(X,"LI",{});var SNe=s(zF);S2e=n(SNe,"STRONG",{});var ewt=s(S2e);ytr=r(ewt,"longformer"),ewt.forEach(t),xtr=r(SNe," \u2014 "),JQ=n(SNe,"A",{href:!0});var owt=s(JQ);$tr=r(owt,"LongformerForQuestionAnswering"),owt.forEach(t),ktr=r(SNe," (Longformer model)"),SNe.forEach(t),Str=i(X),QF=n(X,"LI",{});var RNe=s(QF);R2e=n(RNe,"STRONG",{});var rwt=s(R2e);Rtr=r(rwt,"lxmert"),rwt.forEach(t),Ptr=r(RNe," \u2014 "),YQ=n(RNe,"A",{href:!0});var twt=s(YQ);Btr=r(twt,"LxmertForQuestionAnswering"),twt.forEach(t),Ntr=r(RNe," (LXMERT model)"),RNe.forEach(t),Itr=i(X),WF=n(X,"LI",{});var PNe=s(WF);P2e=n(PNe,"STRONG",{});var awt=s(P2e);qtr=r(awt,"mbart"),awt.forEach(t),jtr=r(PNe," \u2014 "),KQ=n(PNe,"A",{href:!0});var nwt=s(KQ);Dtr=r(nwt,"MBartForQuestionAnswering"),nwt.forEach(t),Gtr=r(PNe," (mBART model)"),PNe.forEach(t),Otr=i(X),HF=n(X,"LI",{});var BNe=s(HF);B2e=n(BNe,"STRONG",{});var swt=s(B2e);Vtr=r(swt,"megatron-bert"),swt.forEach(t),Xtr=r(BNe," \u2014 "),ZQ=n(BNe,"A",{href:!0});var lwt=s(ZQ);ztr=r(lwt,"MegatronBertForQuestionAnswering"),lwt.forEach(t),Qtr=r(BNe," (Megatron-BERT model)"),BNe.forEach(t),Wtr=i(X),UF=n(X,"LI",{});var NNe=s(UF);N2e=n(NNe,"STRONG",{});var iwt=s(N2e);Htr=r(iwt,"mobilebert"),iwt.forEach(t),Utr=r(NNe," \u2014 "),eW=n(NNe,"A",{href:!0});var dwt=s(eW);Jtr=r(dwt,"MobileBertForQuestionAnswering"),dwt.forEach(t),Ytr=r(NNe," (MobileBERT model)"),NNe.forEach(t),Ktr=i(X),JF=n(X,"LI",{});var INe=s(JF);I2e=n(INe,"STRONG",{});var cwt=s(I2e);Ztr=r(cwt,"mpnet"),cwt.forEach(t),ear=r(INe," \u2014 "),oW=n(INe,"A",{href:!0});var fwt=s(oW);oar=r(fwt,"MPNetForQuestionAnswering"),fwt.forEach(t),rar=r(INe," (MPNet model)"),INe.forEach(t),tar=i(X),YF=n(X,"LI",{});var qNe=s(YF);q2e=n(qNe,"STRONG",{});var mwt=s(q2e);aar=r(mwt,"mvp"),mwt.forEach(t),nar=r(qNe," \u2014 "),rW=n(qNe,"A",{href:!0});var gwt=s(rW);sar=r(gwt,"MvpForQuestionAnswering"),gwt.forEach(t),lar=r(qNe," (MVP model)"),qNe.forEach(t),iar=i(X),KF=n(X,"LI",{});var jNe=s(KF);j2e=n(jNe,"STRONG",{});var hwt=s(j2e);dar=r(hwt,"nezha"),hwt.forEach(t),car=r(jNe," \u2014 "),tW=n(jNe,"A",{href:!0});var pwt=s(tW);far=r(pwt,"NezhaForQuestionAnswering"),pwt.forEach(t),mar=r(jNe," (Nezha model)"),jNe.forEach(t),gar=i(X),ZF=n(X,"LI",{});var DNe=s(ZF);D2e=n(DNe,"STRONG",{});var _wt=s(D2e);har=r(_wt,"nystromformer"),_wt.forEach(t),par=r(DNe," \u2014 "),aW=n(DNe,"A",{href:!0});var uwt=s(aW);_ar=r(uwt,"NystromformerForQuestionAnswering"),uwt.forEach(t),uar=r(DNe," (Nystr\xF6mformer model)"),DNe.forEach(t),bar=i(X),eT=n(X,"LI",{});var GNe=s(eT);G2e=n(GNe,"STRONG",{});var bwt=s(G2e);Far=r(bwt,"qdqbert"),bwt.forEach(t),Tar=r(GNe," \u2014 "),nW=n(GNe,"A",{href:!0});var vwt=s(nW);Mar=r(vwt,"QDQBertForQuestionAnswering"),vwt.forEach(t),Ear=r(GNe," (QDQBert model)"),GNe.forEach(t),Car=i(X),oT=n(X,"LI",{});var ONe=s(oT);O2e=n(ONe,"STRONG",{});var Fwt=s(O2e);war=r(Fwt,"reformer"),Fwt.forEach(t),Aar=r(ONe," \u2014 "),sW=n(ONe,"A",{href:!0});var Twt=s(sW);Lar=r(Twt,"ReformerForQuestionAnswering"),Twt.forEach(t),yar=r(ONe," (Reformer model)"),ONe.forEach(t),xar=i(X),rT=n(X,"LI",{});var VNe=s(rT);V2e=n(VNe,"STRONG",{});var Mwt=s(V2e);$ar=r(Mwt,"rembert"),Mwt.forEach(t),kar=r(VNe," \u2014 "),lW=n(VNe,"A",{href:!0});var Ewt=s(lW);Sar=r(Ewt,"RemBertForQuestionAnswering"),Ewt.forEach(t),Rar=r(VNe," (RemBERT model)"),VNe.forEach(t),Par=i(X),tT=n(X,"LI",{});var XNe=s(tT);X2e=n(XNe,"STRONG",{});var Cwt=s(X2e);Bar=r(Cwt,"roberta"),Cwt.forEach(t),Nar=r(XNe," \u2014 "),iW=n(XNe,"A",{href:!0});var wwt=s(iW);Iar=r(wwt,"RobertaForQuestionAnswering"),wwt.forEach(t),qar=r(XNe," (RoBERTa model)"),XNe.forEach(t),jar=i(X),aT=n(X,"LI",{});var zNe=s(aT);z2e=n(zNe,"STRONG",{});var Awt=s(z2e);Dar=r(Awt,"roformer"),Awt.forEach(t),Gar=r(zNe," \u2014 "),dW=n(zNe,"A",{href:!0});var Lwt=s(dW);Oar=r(Lwt,"RoFormerForQuestionAnswering"),Lwt.forEach(t),Var=r(zNe," (RoFormer model)"),zNe.forEach(t),Xar=i(X),nT=n(X,"LI",{});var QNe=s(nT);Q2e=n(QNe,"STRONG",{});var ywt=s(Q2e);zar=r(ywt,"splinter"),ywt.forEach(t),Qar=r(QNe," \u2014 "),cW=n(QNe,"A",{href:!0});var xwt=s(cW);War=r(xwt,"SplinterForQuestionAnswering"),xwt.forEach(t),Har=r(QNe," (Splinter model)"),QNe.forEach(t),Uar=i(X),sT=n(X,"LI",{});var WNe=s(sT);W2e=n(WNe,"STRONG",{});var $wt=s(W2e);Jar=r($wt,"squeezebert"),$wt.forEach(t),Yar=r(WNe," \u2014 "),fW=n(WNe,"A",{href:!0});var kwt=s(fW);Kar=r(kwt,"SqueezeBertForQuestionAnswering"),kwt.forEach(t),Zar=r(WNe," (SqueezeBERT model)"),WNe.forEach(t),enr=i(X),lT=n(X,"LI",{});var HNe=s(lT);H2e=n(HNe,"STRONG",{});var Swt=s(H2e);onr=r(Swt,"xlm"),Swt.forEach(t),rnr=r(HNe," \u2014 "),mW=n(HNe,"A",{href:!0});var Rwt=s(mW);tnr=r(Rwt,"XLMForQuestionAnsweringSimple"),Rwt.forEach(t),anr=r(HNe," (XLM model)"),HNe.forEach(t),nnr=i(X),iT=n(X,"LI",{});var UNe=s(iT);U2e=n(UNe,"STRONG",{});var Pwt=s(U2e);snr=r(Pwt,"xlm-roberta"),Pwt.forEach(t),lnr=r(UNe," \u2014 "),gW=n(UNe,"A",{href:!0});var Bwt=s(gW);inr=r(Bwt,"XLMRobertaForQuestionAnswering"),Bwt.forEach(t),dnr=r(UNe," (XLM-RoBERTa model)"),UNe.forEach(t),cnr=i(X),dT=n(X,"LI",{});var JNe=s(dT);J2e=n(JNe,"STRONG",{});var Nwt=s(J2e);fnr=r(Nwt,"xlm-roberta-xl"),Nwt.forEach(t),mnr=r(JNe," \u2014 "),hW=n(JNe,"A",{href:!0});var Iwt=s(hW);gnr=r(Iwt,"XLMRobertaXLForQuestionAnswering"),Iwt.forEach(t),hnr=r(JNe," (XLM-RoBERTa-XL model)"),JNe.forEach(t),pnr=i(X),cT=n(X,"LI",{});var YNe=s(cT);Y2e=n(YNe,"STRONG",{});var qwt=s(Y2e);_nr=r(qwt,"xlnet"),qwt.forEach(t),unr=r(YNe," \u2014 "),pW=n(YNe,"A",{href:!0});var jwt=s(pW);bnr=r(jwt,"XLNetForQuestionAnsweringSimple"),jwt.forEach(t),vnr=r(YNe," (XLNet model)"),YNe.forEach(t),Fnr=i(X),fT=n(X,"LI",{});var KNe=s(fT);K2e=n(KNe,"STRONG",{});var Dwt=s(K2e);Tnr=r(Dwt,"yoso"),Dwt.forEach(t),Mnr=r(KNe," \u2014 "),_W=n(KNe,"A",{href:!0});var Gwt=s(_W);Enr=r(Gwt,"YosoForQuestionAnswering"),Gwt.forEach(t),Cnr=r(KNe," (YOSO model)"),KNe.forEach(t),X.forEach(t),wnr=i(ua),mT=n(ua,"P",{});var ZNe=s(mT);Anr=r(ZNe,"The model is set in evaluation mode by default using "),Z2e=n(ZNe,"CODE",{});var Owt=s(Z2e);Lnr=r(Owt,"model.eval()"),Owt.forEach(t),ynr=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=n(ZNe,"CODE",{});var Vwt=s(ebe);xnr=r(Vwt,"model.train()"),Vwt.forEach(t),ZNe.forEach(t),$nr=i(ua),T(gT.$$.fragment,ua),ua.forEach(t),ml.forEach(t),WXe=i(f),bd=n(f,"H2",{class:!0});var ZQe=s(bd);hT=n(ZQe,"A",{id:!0,class:!0,href:!0});var Xwt=s(hT);obe=n(Xwt,"SPAN",{});var zwt=s(obe);T($y.$$.fragment,zwt),zwt.forEach(t),Xwt.forEach(t),knr=i(ZQe),rbe=n(ZQe,"SPAN",{});var Qwt=s(rbe);Snr=r(Qwt,"AutoModelForTableQuestionAnswering"),Qwt.forEach(t),ZQe.forEach(t),HXe=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(ky.$$.fragment,gl),Rnr=i(gl),vd=n(gl,"P",{});var lte=s(vd);Pnr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=n(lte,"A",{href:!0});var Wwt=s(uW);Bnr=r(Wwt,"from_pretrained()"),Wwt.forEach(t),Nnr=r(lte," class method or the "),bW=n(lte,"A",{href:!0});var Hwt=s(bW);Inr=r(Hwt,"from_config()"),Hwt.forEach(t),qnr=r(lte,` class
method.`),lte.forEach(t),jnr=i(gl),Sy=n(gl,"P",{});var eWe=s(Sy);Dnr=r(eWe,"This class cannot be instantiated directly using "),tbe=n(eWe,"CODE",{});var Uwt=s(tbe);Gnr=r(Uwt,"__init__()"),Uwt.forEach(t),Onr=r(eWe," (throws an error)."),eWe.forEach(t),Vnr=i(gl),bt=n(gl,"DIV",{class:!0});var S6=s(bt);T(Ry.$$.fragment,S6),Xnr=i(S6),abe=n(S6,"P",{});var Jwt=s(abe);znr=r(Jwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jwt.forEach(t),Qnr=i(S6),Fd=n(S6,"P",{});var ite=s(Fd);Wnr=r(ite,`Note:
Loading a model from its configuration file does `),nbe=n(ite,"STRONG",{});var Ywt=s(nbe);Hnr=r(Ywt,"not"),Ywt.forEach(t),Unr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(ite,"A",{href:!0});var Kwt=s(vW);Jnr=r(Kwt,"from_pretrained()"),Kwt.forEach(t),Ynr=r(ite," to load the model weights."),ite.forEach(t),Knr=i(S6),T(pT.$$.fragment,S6),S6.forEach(t),Znr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(Py.$$.fragment,ba),esr=i(ba),sbe=n(ba,"P",{});var Zwt=s(sbe);osr=r(Zwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Zwt.forEach(t),rsr=i(ba),Qa=n(ba,"P",{});var R6=s(Qa);tsr=r(R6,"The model class to instantiate is selected based on the "),lbe=n(R6,"CODE",{});var eAt=s(lbe);asr=r(eAt,"model_type"),eAt.forEach(t),nsr=r(R6,` property of the config object (either
passed as an argument or loaded from `),ibe=n(R6,"CODE",{});var oAt=s(ibe);ssr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),lsr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(R6,"CODE",{});var rAt=s(dbe);isr=r(rAt,"pretrained_model_name_or_path"),rAt.forEach(t),dsr=r(R6,":"),R6.forEach(t),csr=i(ba),cbe=n(ba,"UL",{});var tAt=s(cbe);_T=n(tAt,"LI",{});var eIe=s(_T);fbe=n(eIe,"STRONG",{});var aAt=s(fbe);fsr=r(aAt,"tapas"),aAt.forEach(t),msr=r(eIe," \u2014 "),FW=n(eIe,"A",{href:!0});var nAt=s(FW);gsr=r(nAt,"TapasForQuestionAnswering"),nAt.forEach(t),hsr=r(eIe," (TAPAS model)"),eIe.forEach(t),tAt.forEach(t),psr=i(ba),uT=n(ba,"P",{});var oIe=s(uT);_sr=r(oIe,"The model is set in evaluation mode by default using "),mbe=n(oIe,"CODE",{});var sAt=s(mbe);usr=r(sAt,"model.eval()"),sAt.forEach(t),bsr=r(oIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=n(oIe,"CODE",{});var lAt=s(gbe);vsr=r(lAt,"model.train()"),lAt.forEach(t),oIe.forEach(t),Fsr=i(ba),T(bT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),UXe=i(f),Td=n(f,"H2",{class:!0});var oWe=s(Td);vT=n(oWe,"A",{id:!0,class:!0,href:!0});var iAt=s(vT);hbe=n(iAt,"SPAN",{});var dAt=s(hbe);T(By.$$.fragment,dAt),dAt.forEach(t),iAt.forEach(t),Tsr=i(oWe),pbe=n(oWe,"SPAN",{});var cAt=s(pbe);Msr=r(cAt,"AutoModelForImageClassification"),cAt.forEach(t),oWe.forEach(t),JXe=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(Ny.$$.fragment,hl),Esr=i(hl),Md=n(hl,"P",{});var dte=s(Md);Csr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TW=n(dte,"A",{href:!0});var fAt=s(TW);wsr=r(fAt,"from_pretrained()"),fAt.forEach(t),Asr=r(dte," class method or the "),MW=n(dte,"A",{href:!0});var mAt=s(MW);Lsr=r(mAt,"from_config()"),mAt.forEach(t),ysr=r(dte,` class
method.`),dte.forEach(t),xsr=i(hl),Iy=n(hl,"P",{});var rWe=s(Iy);$sr=r(rWe,"This class cannot be instantiated directly using "),_be=n(rWe,"CODE",{});var gAt=s(_be);ksr=r(gAt,"__init__()"),gAt.forEach(t),Ssr=r(rWe," (throws an error)."),rWe.forEach(t),Rsr=i(hl),vt=n(hl,"DIV",{class:!0});var P6=s(vt);T(qy.$$.fragment,P6),Psr=i(P6),ube=n(P6,"P",{});var hAt=s(ube);Bsr=r(hAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hAt.forEach(t),Nsr=i(P6),Ed=n(P6,"P",{});var cte=s(Ed);Isr=r(cte,`Note:
Loading a model from its configuration file does `),bbe=n(cte,"STRONG",{});var pAt=s(bbe);qsr=r(pAt,"not"),pAt.forEach(t),jsr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(cte,"A",{href:!0});var _At=s(EW);Dsr=r(_At,"from_pretrained()"),_At.forEach(t),Gsr=r(cte," to load the model weights."),cte.forEach(t),Osr=i(P6),T(FT.$$.fragment,P6),P6.forEach(t),Vsr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(jy.$$.fragment,va),Xsr=i(va),vbe=n(va,"P",{});var uAt=s(vbe);zsr=r(uAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uAt.forEach(t),Qsr=i(va),Wa=n(va,"P",{});var B6=s(Wa);Wsr=r(B6,"The model class to instantiate is selected based on the "),Fbe=n(B6,"CODE",{});var bAt=s(Fbe);Hsr=r(bAt,"model_type"),bAt.forEach(t),Usr=r(B6,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(B6,"CODE",{});var vAt=s(Tbe);Jsr=r(vAt,"pretrained_model_name_or_path"),vAt.forEach(t),Ysr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(B6,"CODE",{});var FAt=s(Mbe);Ksr=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),Zsr=r(B6,":"),B6.forEach(t),elr=i(va),ve=n(va,"UL",{});var Te=s(ve);TT=n(Te,"LI",{});var rIe=s(TT);Ebe=n(rIe,"STRONG",{});var TAt=s(Ebe);olr=r(TAt,"beit"),TAt.forEach(t),rlr=r(rIe," \u2014 "),CW=n(rIe,"A",{href:!0});var MAt=s(CW);tlr=r(MAt,"BeitForImageClassification"),MAt.forEach(t),alr=r(rIe," (BEiT model)"),rIe.forEach(t),nlr=i(Te),MT=n(Te,"LI",{});var tIe=s(MT);Cbe=n(tIe,"STRONG",{});var EAt=s(Cbe);slr=r(EAt,"convnext"),EAt.forEach(t),llr=r(tIe," \u2014 "),wW=n(tIe,"A",{href:!0});var CAt=s(wW);ilr=r(CAt,"ConvNextForImageClassification"),CAt.forEach(t),dlr=r(tIe," (ConvNeXT model)"),tIe.forEach(t),clr=i(Te),ET=n(Te,"LI",{});var aIe=s(ET);wbe=n(aIe,"STRONG",{});var wAt=s(wbe);flr=r(wAt,"cvt"),wAt.forEach(t),mlr=r(aIe," \u2014 "),AW=n(aIe,"A",{href:!0});var AAt=s(AW);glr=r(AAt,"CvtForImageClassification"),AAt.forEach(t),hlr=r(aIe," (CvT model)"),aIe.forEach(t),plr=i(Te),CT=n(Te,"LI",{});var nIe=s(CT);Abe=n(nIe,"STRONG",{});var LAt=s(Abe);_lr=r(LAt,"data2vec-vision"),LAt.forEach(t),ulr=r(nIe," \u2014 "),LW=n(nIe,"A",{href:!0});var yAt=s(LW);blr=r(yAt,"Data2VecVisionForImageClassification"),yAt.forEach(t),vlr=r(nIe," (Data2VecVision model)"),nIe.forEach(t),Flr=i(Te),Us=n(Te,"LI",{});var NS=s(Us);Lbe=n(NS,"STRONG",{});var xAt=s(Lbe);Tlr=r(xAt,"deit"),xAt.forEach(t),Mlr=r(NS," \u2014 "),yW=n(NS,"A",{href:!0});var $At=s(yW);Elr=r($At,"DeiTForImageClassification"),$At.forEach(t),Clr=r(NS," or "),xW=n(NS,"A",{href:!0});var kAt=s(xW);wlr=r(kAt,"DeiTForImageClassificationWithTeacher"),kAt.forEach(t),Alr=r(NS," (DeiT model)"),NS.forEach(t),Llr=i(Te),wT=n(Te,"LI",{});var sIe=s(wT);ybe=n(sIe,"STRONG",{});var SAt=s(ybe);ylr=r(SAt,"imagegpt"),SAt.forEach(t),xlr=r(sIe," \u2014 "),$W=n(sIe,"A",{href:!0});var RAt=s($W);$lr=r(RAt,"ImageGPTForImageClassification"),RAt.forEach(t),klr=r(sIe," (ImageGPT model)"),sIe.forEach(t),Slr=i(Te),Js=n(Te,"LI",{});var IS=s(Js);xbe=n(IS,"STRONG",{});var PAt=s(xbe);Rlr=r(PAt,"levit"),PAt.forEach(t),Plr=r(IS," \u2014 "),kW=n(IS,"A",{href:!0});var BAt=s(kW);Blr=r(BAt,"LevitForImageClassification"),BAt.forEach(t),Nlr=r(IS," or "),SW=n(IS,"A",{href:!0});var NAt=s(SW);Ilr=r(NAt,"LevitForImageClassificationWithTeacher"),NAt.forEach(t),qlr=r(IS," (LeViT model)"),IS.forEach(t),jlr=i(Te),AT=n(Te,"LI",{});var lIe=s(AT);$be=n(lIe,"STRONG",{});var IAt=s($be);Dlr=r(IAt,"mobilevit"),IAt.forEach(t),Glr=r(lIe," \u2014 "),RW=n(lIe,"A",{href:!0});var qAt=s(RW);Olr=r(qAt,"MobileViTForImageClassification"),qAt.forEach(t),Vlr=r(lIe," (MobileViT model)"),lIe.forEach(t),Xlr=i(Te),Ft=n(Te,"LI",{});var Pf=s(Ft);kbe=n(Pf,"STRONG",{});var jAt=s(kbe);zlr=r(jAt,"perceiver"),jAt.forEach(t),Qlr=r(Pf," \u2014 "),PW=n(Pf,"A",{href:!0});var DAt=s(PW);Wlr=r(DAt,"PerceiverForImageClassificationLearned"),DAt.forEach(t),Hlr=r(Pf," or "),BW=n(Pf,"A",{href:!0});var GAt=s(BW);Ulr=r(GAt,"PerceiverForImageClassificationFourier"),GAt.forEach(t),Jlr=r(Pf," or "),NW=n(Pf,"A",{href:!0});var OAt=s(NW);Ylr=r(OAt,"PerceiverForImageClassificationConvProcessing"),OAt.forEach(t),Klr=r(Pf," (Perceiver model)"),Pf.forEach(t),Zlr=i(Te),LT=n(Te,"LI",{});var iIe=s(LT);Sbe=n(iIe,"STRONG",{});var VAt=s(Sbe);eir=r(VAt,"poolformer"),VAt.forEach(t),oir=r(iIe," \u2014 "),IW=n(iIe,"A",{href:!0});var XAt=s(IW);rir=r(XAt,"PoolFormerForImageClassification"),XAt.forEach(t),tir=r(iIe," (PoolFormer model)"),iIe.forEach(t),air=i(Te),yT=n(Te,"LI",{});var dIe=s(yT);Rbe=n(dIe,"STRONG",{});var zAt=s(Rbe);nir=r(zAt,"regnet"),zAt.forEach(t),sir=r(dIe," \u2014 "),qW=n(dIe,"A",{href:!0});var QAt=s(qW);lir=r(QAt,"RegNetForImageClassification"),QAt.forEach(t),iir=r(dIe," (RegNet model)"),dIe.forEach(t),dir=i(Te),xT=n(Te,"LI",{});var cIe=s(xT);Pbe=n(cIe,"STRONG",{});var WAt=s(Pbe);cir=r(WAt,"resnet"),WAt.forEach(t),fir=r(cIe," \u2014 "),jW=n(cIe,"A",{href:!0});var HAt=s(jW);mir=r(HAt,"ResNetForImageClassification"),HAt.forEach(t),gir=r(cIe," (ResNet model)"),cIe.forEach(t),hir=i(Te),$T=n(Te,"LI",{});var fIe=s($T);Bbe=n(fIe,"STRONG",{});var UAt=s(Bbe);pir=r(UAt,"segformer"),UAt.forEach(t),_ir=r(fIe," \u2014 "),DW=n(fIe,"A",{href:!0});var JAt=s(DW);uir=r(JAt,"SegformerForImageClassification"),JAt.forEach(t),bir=r(fIe," (SegFormer model)"),fIe.forEach(t),vir=i(Te),kT=n(Te,"LI",{});var mIe=s(kT);Nbe=n(mIe,"STRONG",{});var YAt=s(Nbe);Fir=r(YAt,"swin"),YAt.forEach(t),Tir=r(mIe," \u2014 "),GW=n(mIe,"A",{href:!0});var KAt=s(GW);Mir=r(KAt,"SwinForImageClassification"),KAt.forEach(t),Eir=r(mIe," (Swin Transformer model)"),mIe.forEach(t),Cir=i(Te),ST=n(Te,"LI",{});var gIe=s(ST);Ibe=n(gIe,"STRONG",{});var ZAt=s(Ibe);wir=r(ZAt,"van"),ZAt.forEach(t),Air=r(gIe," \u2014 "),OW=n(gIe,"A",{href:!0});var e6t=s(OW);Lir=r(e6t,"VanForImageClassification"),e6t.forEach(t),yir=r(gIe," (VAN model)"),gIe.forEach(t),xir=i(Te),RT=n(Te,"LI",{});var hIe=s(RT);qbe=n(hIe,"STRONG",{});var o6t=s(qbe);$ir=r(o6t,"vit"),o6t.forEach(t),kir=r(hIe," \u2014 "),VW=n(hIe,"A",{href:!0});var r6t=s(VW);Sir=r(r6t,"ViTForImageClassification"),r6t.forEach(t),Rir=r(hIe," (ViT model)"),hIe.forEach(t),Te.forEach(t),Pir=i(va),PT=n(va,"P",{});var pIe=s(PT);Bir=r(pIe,"The model is set in evaluation mode by default using "),jbe=n(pIe,"CODE",{});var t6t=s(jbe);Nir=r(t6t,"model.eval()"),t6t.forEach(t),Iir=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(pIe,"CODE",{});var a6t=s(Dbe);qir=r(a6t,"model.train()"),a6t.forEach(t),pIe.forEach(t),jir=i(va),T(BT.$$.fragment,va),va.forEach(t),hl.forEach(t),YXe=i(f),Cd=n(f,"H2",{class:!0});var tWe=s(Cd);NT=n(tWe,"A",{id:!0,class:!0,href:!0});var n6t=s(NT);Gbe=n(n6t,"SPAN",{});var s6t=s(Gbe);T(Dy.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),Dir=i(tWe),Obe=n(tWe,"SPAN",{});var l6t=s(Obe);Gir=r(l6t,"AutoModelForVision2Seq"),l6t.forEach(t),tWe.forEach(t),KXe=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(Gy.$$.fragment,pl),Oir=i(pl),wd=n(pl,"P",{});var fte=s(wd);Vir=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XW=n(fte,"A",{href:!0});var i6t=s(XW);Xir=r(i6t,"from_pretrained()"),i6t.forEach(t),zir=r(fte," class method or the "),zW=n(fte,"A",{href:!0});var d6t=s(zW);Qir=r(d6t,"from_config()"),d6t.forEach(t),Wir=r(fte,` class
method.`),fte.forEach(t),Hir=i(pl),Oy=n(pl,"P",{});var aWe=s(Oy);Uir=r(aWe,"This class cannot be instantiated directly using "),Vbe=n(aWe,"CODE",{});var c6t=s(Vbe);Jir=r(c6t,"__init__()"),c6t.forEach(t),Yir=r(aWe," (throws an error)."),aWe.forEach(t),Kir=i(pl),Tt=n(pl,"DIV",{class:!0});var N6=s(Tt);T(Vy.$$.fragment,N6),Zir=i(N6),Xbe=n(N6,"P",{});var f6t=s(Xbe);edr=r(f6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f6t.forEach(t),odr=i(N6),Ad=n(N6,"P",{});var mte=s(Ad);rdr=r(mte,`Note:
Loading a model from its configuration file does `),zbe=n(mte,"STRONG",{});var m6t=s(zbe);tdr=r(m6t,"not"),m6t.forEach(t),adr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(mte,"A",{href:!0});var g6t=s(QW);ndr=r(g6t,"from_pretrained()"),g6t.forEach(t),sdr=r(mte," to load the model weights."),mte.forEach(t),ldr=i(N6),T(IT.$$.fragment,N6),N6.forEach(t),idr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(Xy.$$.fragment,Fa),ddr=i(Fa),Qbe=n(Fa,"P",{});var h6t=s(Qbe);cdr=r(h6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h6t.forEach(t),fdr=i(Fa),Ha=n(Fa,"P",{});var I6=s(Ha);mdr=r(I6,"The model class to instantiate is selected based on the "),Wbe=n(I6,"CODE",{});var p6t=s(Wbe);gdr=r(p6t,"model_type"),p6t.forEach(t),hdr=r(I6,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(I6,"CODE",{});var _6t=s(Hbe);pdr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),_dr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(I6,"CODE",{});var u6t=s(Ube);udr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),bdr=r(I6,":"),I6.forEach(t),vdr=i(Fa),Jbe=n(Fa,"UL",{});var b6t=s(Jbe);qT=n(b6t,"LI",{});var _Ie=s(qT);Ybe=n(_Ie,"STRONG",{});var v6t=s(Ybe);Fdr=r(v6t,"vision-encoder-decoder"),v6t.forEach(t),Tdr=r(_Ie," \u2014 "),WW=n(_Ie,"A",{href:!0});var F6t=s(WW);Mdr=r(F6t,"VisionEncoderDecoderModel"),F6t.forEach(t),Edr=r(_Ie," (Vision Encoder decoder model)"),_Ie.forEach(t),b6t.forEach(t),Cdr=i(Fa),jT=n(Fa,"P",{});var uIe=s(jT);wdr=r(uIe,"The model is set in evaluation mode by default using "),Kbe=n(uIe,"CODE",{});var T6t=s(Kbe);Adr=r(T6t,"model.eval()"),T6t.forEach(t),Ldr=r(uIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(uIe,"CODE",{});var M6t=s(Zbe);ydr=r(M6t,"model.train()"),M6t.forEach(t),uIe.forEach(t),xdr=i(Fa),T(DT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),ZXe=i(f),Ld=n(f,"H2",{class:!0});var nWe=s(Ld);GT=n(nWe,"A",{id:!0,class:!0,href:!0});var E6t=s(GT);e3e=n(E6t,"SPAN",{});var C6t=s(e3e);T(zy.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),$dr=i(nWe),o3e=n(nWe,"SPAN",{});var w6t=s(o3e);kdr=r(w6t,"AutoModelForVisualQuestionAnswering"),w6t.forEach(t),nWe.forEach(t),eze=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(Qy.$$.fragment,_l),Sdr=i(_l),yd=n(_l,"P",{});var gte=s(yd);Rdr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),HW=n(gte,"A",{href:!0});var A6t=s(HW);Pdr=r(A6t,"from_pretrained()"),A6t.forEach(t),Bdr=r(gte," class method or the "),UW=n(gte,"A",{href:!0});var L6t=s(UW);Ndr=r(L6t,"from_config()"),L6t.forEach(t),Idr=r(gte,` class
method.`),gte.forEach(t),qdr=i(_l),Wy=n(_l,"P",{});var sWe=s(Wy);jdr=r(sWe,"This class cannot be instantiated directly using "),r3e=n(sWe,"CODE",{});var y6t=s(r3e);Ddr=r(y6t,"__init__()"),y6t.forEach(t),Gdr=r(sWe," (throws an error)."),sWe.forEach(t),Odr=i(_l),Mt=n(_l,"DIV",{class:!0});var q6=s(Mt);T(Hy.$$.fragment,q6),Vdr=i(q6),t3e=n(q6,"P",{});var x6t=s(t3e);Xdr=r(x6t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),x6t.forEach(t),zdr=i(q6),xd=n(q6,"P",{});var hte=s(xd);Qdr=r(hte,`Note:
Loading a model from its configuration file does `),a3e=n(hte,"STRONG",{});var $6t=s(a3e);Wdr=r($6t,"not"),$6t.forEach(t),Hdr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(hte,"A",{href:!0});var k6t=s(JW);Udr=r(k6t,"from_pretrained()"),k6t.forEach(t),Jdr=r(hte," to load the model weights."),hte.forEach(t),Ydr=i(q6),T(OT.$$.fragment,q6),q6.forEach(t),Kdr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(Uy.$$.fragment,Ta),Zdr=i(Ta),n3e=n(Ta,"P",{});var S6t=s(n3e);ecr=r(S6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),S6t.forEach(t),ocr=i(Ta),Ua=n(Ta,"P",{});var j6=s(Ua);rcr=r(j6,"The model class to instantiate is selected based on the "),s3e=n(j6,"CODE",{});var R6t=s(s3e);tcr=r(R6t,"model_type"),R6t.forEach(t),acr=r(j6,` property of the config object (either
passed as an argument or loaded from `),l3e=n(j6,"CODE",{});var P6t=s(l3e);ncr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),scr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(j6,"CODE",{});var B6t=s(i3e);lcr=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),icr=r(j6,":"),j6.forEach(t),dcr=i(Ta),d3e=n(Ta,"UL",{});var N6t=s(d3e);VT=n(N6t,"LI",{});var bIe=s(VT);c3e=n(bIe,"STRONG",{});var I6t=s(c3e);ccr=r(I6t,"vilt"),I6t.forEach(t),fcr=r(bIe," \u2014 "),YW=n(bIe,"A",{href:!0});var q6t=s(YW);mcr=r(q6t,"ViltForQuestionAnswering"),q6t.forEach(t),gcr=r(bIe," (ViLT model)"),bIe.forEach(t),N6t.forEach(t),hcr=i(Ta),XT=n(Ta,"P",{});var vIe=s(XT);pcr=r(vIe,"The model is set in evaluation mode by default using "),f3e=n(vIe,"CODE",{});var j6t=s(f3e);_cr=r(j6t,"model.eval()"),j6t.forEach(t),ucr=r(vIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m3e=n(vIe,"CODE",{});var D6t=s(m3e);bcr=r(D6t,"model.train()"),D6t.forEach(t),vIe.forEach(t),vcr=i(Ta),T(zT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),oze=i(f),$d=n(f,"H2",{class:!0});var lWe=s($d);QT=n(lWe,"A",{id:!0,class:!0,href:!0});var G6t=s(QT);g3e=n(G6t,"SPAN",{});var O6t=s(g3e);T(Jy.$$.fragment,O6t),O6t.forEach(t),G6t.forEach(t),Fcr=i(lWe),h3e=n(lWe,"SPAN",{});var V6t=s(h3e);Tcr=r(V6t,"AutoModelForAudioClassification"),V6t.forEach(t),lWe.forEach(t),rze=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(Yy.$$.fragment,ul),Mcr=i(ul),kd=n(ul,"P",{});var pte=s(kd);Ecr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KW=n(pte,"A",{href:!0});var X6t=s(KW);Ccr=r(X6t,"from_pretrained()"),X6t.forEach(t),wcr=r(pte," class method or the "),ZW=n(pte,"A",{href:!0});var z6t=s(ZW);Acr=r(z6t,"from_config()"),z6t.forEach(t),Lcr=r(pte,` class
method.`),pte.forEach(t),ycr=i(ul),Ky=n(ul,"P",{});var iWe=s(Ky);xcr=r(iWe,"This class cannot be instantiated directly using "),p3e=n(iWe,"CODE",{});var Q6t=s(p3e);$cr=r(Q6t,"__init__()"),Q6t.forEach(t),kcr=r(iWe," (throws an error)."),iWe.forEach(t),Scr=i(ul),Et=n(ul,"DIV",{class:!0});var D6=s(Et);T(Zy.$$.fragment,D6),Rcr=i(D6),_3e=n(D6,"P",{});var W6t=s(_3e);Pcr=r(W6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),W6t.forEach(t),Bcr=i(D6),Sd=n(D6,"P",{});var _te=s(Sd);Ncr=r(_te,`Note:
Loading a model from its configuration file does `),u3e=n(_te,"STRONG",{});var H6t=s(u3e);Icr=r(H6t,"not"),H6t.forEach(t),qcr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(_te,"A",{href:!0});var U6t=s(eH);jcr=r(U6t,"from_pretrained()"),U6t.forEach(t),Dcr=r(_te," to load the model weights."),_te.forEach(t),Gcr=i(D6),T(WT.$$.fragment,D6),D6.forEach(t),Ocr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(e9.$$.fragment,Ma),Vcr=i(Ma),b3e=n(Ma,"P",{});var J6t=s(b3e);Xcr=r(J6t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),J6t.forEach(t),zcr=i(Ma),Ja=n(Ma,"P",{});var G6=s(Ja);Qcr=r(G6,"The model class to instantiate is selected based on the "),v3e=n(G6,"CODE",{});var Y6t=s(v3e);Wcr=r(Y6t,"model_type"),Y6t.forEach(t),Hcr=r(G6,` property of the config object (either
passed as an argument or loaded from `),F3e=n(G6,"CODE",{});var K6t=s(F3e);Ucr=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),Jcr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=n(G6,"CODE",{});var Z6t=s(T3e);Ycr=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),Kcr=r(G6,":"),G6.forEach(t),Zcr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);HT=n(ze,"LI",{});var FIe=s(HT);M3e=n(FIe,"STRONG",{});var e7t=s(M3e);efr=r(e7t,"data2vec-audio"),e7t.forEach(t),ofr=r(FIe," \u2014 "),oH=n(FIe,"A",{href:!0});var o7t=s(oH);rfr=r(o7t,"Data2VecAudioForSequenceClassification"),o7t.forEach(t),tfr=r(FIe," (Data2VecAudio model)"),FIe.forEach(t),afr=i(ze),UT=n(ze,"LI",{});var TIe=s(UT);E3e=n(TIe,"STRONG",{});var r7t=s(E3e);nfr=r(r7t,"hubert"),r7t.forEach(t),sfr=r(TIe," \u2014 "),rH=n(TIe,"A",{href:!0});var t7t=s(rH);lfr=r(t7t,"HubertForSequenceClassification"),t7t.forEach(t),ifr=r(TIe," (Hubert model)"),TIe.forEach(t),dfr=i(ze),JT=n(ze,"LI",{});var MIe=s(JT);C3e=n(MIe,"STRONG",{});var a7t=s(C3e);cfr=r(a7t,"sew"),a7t.forEach(t),ffr=r(MIe," \u2014 "),tH=n(MIe,"A",{href:!0});var n7t=s(tH);mfr=r(n7t,"SEWForSequenceClassification"),n7t.forEach(t),gfr=r(MIe," (SEW model)"),MIe.forEach(t),hfr=i(ze),YT=n(ze,"LI",{});var EIe=s(YT);w3e=n(EIe,"STRONG",{});var s7t=s(w3e);pfr=r(s7t,"sew-d"),s7t.forEach(t),_fr=r(EIe," \u2014 "),aH=n(EIe,"A",{href:!0});var l7t=s(aH);ufr=r(l7t,"SEWDForSequenceClassification"),l7t.forEach(t),bfr=r(EIe," (SEW-D model)"),EIe.forEach(t),vfr=i(ze),KT=n(ze,"LI",{});var CIe=s(KT);A3e=n(CIe,"STRONG",{});var i7t=s(A3e);Ffr=r(i7t,"unispeech"),i7t.forEach(t),Tfr=r(CIe," \u2014 "),nH=n(CIe,"A",{href:!0});var d7t=s(nH);Mfr=r(d7t,"UniSpeechForSequenceClassification"),d7t.forEach(t),Efr=r(CIe," (UniSpeech model)"),CIe.forEach(t),Cfr=i(ze),ZT=n(ze,"LI",{});var wIe=s(ZT);L3e=n(wIe,"STRONG",{});var c7t=s(L3e);wfr=r(c7t,"unispeech-sat"),c7t.forEach(t),Afr=r(wIe," \u2014 "),sH=n(wIe,"A",{href:!0});var f7t=s(sH);Lfr=r(f7t,"UniSpeechSatForSequenceClassification"),f7t.forEach(t),yfr=r(wIe," (UniSpeechSat model)"),wIe.forEach(t),xfr=i(ze),e8=n(ze,"LI",{});var AIe=s(e8);y3e=n(AIe,"STRONG",{});var m7t=s(y3e);$fr=r(m7t,"wav2vec2"),m7t.forEach(t),kfr=r(AIe," \u2014 "),lH=n(AIe,"A",{href:!0});var g7t=s(lH);Sfr=r(g7t,"Wav2Vec2ForSequenceClassification"),g7t.forEach(t),Rfr=r(AIe," (Wav2Vec2 model)"),AIe.forEach(t),Pfr=i(ze),o8=n(ze,"LI",{});var LIe=s(o8);x3e=n(LIe,"STRONG",{});var h7t=s(x3e);Bfr=r(h7t,"wav2vec2-conformer"),h7t.forEach(t),Nfr=r(LIe," \u2014 "),iH=n(LIe,"A",{href:!0});var p7t=s(iH);Ifr=r(p7t,"Wav2Vec2ConformerForSequenceClassification"),p7t.forEach(t),qfr=r(LIe," (Wav2Vec2-Conformer model)"),LIe.forEach(t),jfr=i(ze),r8=n(ze,"LI",{});var yIe=s(r8);$3e=n(yIe,"STRONG",{});var _7t=s($3e);Dfr=r(_7t,"wavlm"),_7t.forEach(t),Gfr=r(yIe," \u2014 "),dH=n(yIe,"A",{href:!0});var u7t=s(dH);Ofr=r(u7t,"WavLMForSequenceClassification"),u7t.forEach(t),Vfr=r(yIe," (WavLM model)"),yIe.forEach(t),ze.forEach(t),Xfr=i(Ma),t8=n(Ma,"P",{});var xIe=s(t8);zfr=r(xIe,"The model is set in evaluation mode by default using "),k3e=n(xIe,"CODE",{});var b7t=s(k3e);Qfr=r(b7t,"model.eval()"),b7t.forEach(t),Wfr=r(xIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S3e=n(xIe,"CODE",{});var v7t=s(S3e);Hfr=r(v7t,"model.train()"),v7t.forEach(t),xIe.forEach(t),Ufr=i(Ma),T(a8.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),tze=i(f),Rd=n(f,"H2",{class:!0});var dWe=s(Rd);n8=n(dWe,"A",{id:!0,class:!0,href:!0});var F7t=s(n8);R3e=n(F7t,"SPAN",{});var T7t=s(R3e);T(o9.$$.fragment,T7t),T7t.forEach(t),F7t.forEach(t),Jfr=i(dWe),P3e=n(dWe,"SPAN",{});var M7t=s(P3e);Yfr=r(M7t,"AutoModelForAudioFrameClassification"),M7t.forEach(t),dWe.forEach(t),aze=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(r9.$$.fragment,bl),Kfr=i(bl),Pd=n(bl,"P",{});var ute=s(Pd);Zfr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cH=n(ute,"A",{href:!0});var E7t=s(cH);emr=r(E7t,"from_pretrained()"),E7t.forEach(t),omr=r(ute," class method or the "),fH=n(ute,"A",{href:!0});var C7t=s(fH);rmr=r(C7t,"from_config()"),C7t.forEach(t),tmr=r(ute,` class
method.`),ute.forEach(t),amr=i(bl),t9=n(bl,"P",{});var cWe=s(t9);nmr=r(cWe,"This class cannot be instantiated directly using "),B3e=n(cWe,"CODE",{});var w7t=s(B3e);smr=r(w7t,"__init__()"),w7t.forEach(t),lmr=r(cWe," (throws an error)."),cWe.forEach(t),imr=i(bl),Ct=n(bl,"DIV",{class:!0});var O6=s(Ct);T(a9.$$.fragment,O6),dmr=i(O6),N3e=n(O6,"P",{});var A7t=s(N3e);cmr=r(A7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),A7t.forEach(t),fmr=i(O6),Bd=n(O6,"P",{});var bte=s(Bd);mmr=r(bte,`Note:
Loading a model from its configuration file does `),I3e=n(bte,"STRONG",{});var L7t=s(I3e);gmr=r(L7t,"not"),L7t.forEach(t),hmr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(bte,"A",{href:!0});var y7t=s(mH);pmr=r(y7t,"from_pretrained()"),y7t.forEach(t),_mr=r(bte," to load the model weights."),bte.forEach(t),umr=i(O6),T(s8.$$.fragment,O6),O6.forEach(t),bmr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(n9.$$.fragment,Ea),vmr=i(Ea),q3e=n(Ea,"P",{});var x7t=s(q3e);Fmr=r(x7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),x7t.forEach(t),Tmr=i(Ea),Ya=n(Ea,"P",{});var V6=s(Ya);Mmr=r(V6,"The model class to instantiate is selected based on the "),j3e=n(V6,"CODE",{});var $7t=s(j3e);Emr=r($7t,"model_type"),$7t.forEach(t),Cmr=r(V6,` property of the config object (either
passed as an argument or loaded from `),D3e=n(V6,"CODE",{});var k7t=s(D3e);wmr=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),Amr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n(V6,"CODE",{});var S7t=s(G3e);Lmr=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),ymr=r(V6,":"),V6.forEach(t),xmr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);l8=n(vl,"LI",{});var $Ie=s(l8);O3e=n($Ie,"STRONG",{});var R7t=s(O3e);$mr=r(R7t,"data2vec-audio"),R7t.forEach(t),kmr=r($Ie," \u2014 "),gH=n($Ie,"A",{href:!0});var P7t=s(gH);Smr=r(P7t,"Data2VecAudioForAudioFrameClassification"),P7t.forEach(t),Rmr=r($Ie," (Data2VecAudio model)"),$Ie.forEach(t),Pmr=i(vl),i8=n(vl,"LI",{});var kIe=s(i8);V3e=n(kIe,"STRONG",{});var B7t=s(V3e);Bmr=r(B7t,"unispeech-sat"),B7t.forEach(t),Nmr=r(kIe," \u2014 "),hH=n(kIe,"A",{href:!0});var N7t=s(hH);Imr=r(N7t,"UniSpeechSatForAudioFrameClassification"),N7t.forEach(t),qmr=r(kIe," (UniSpeechSat model)"),kIe.forEach(t),jmr=i(vl),d8=n(vl,"LI",{});var SIe=s(d8);X3e=n(SIe,"STRONG",{});var I7t=s(X3e);Dmr=r(I7t,"wav2vec2"),I7t.forEach(t),Gmr=r(SIe," \u2014 "),pH=n(SIe,"A",{href:!0});var q7t=s(pH);Omr=r(q7t,"Wav2Vec2ForAudioFrameClassification"),q7t.forEach(t),Vmr=r(SIe," (Wav2Vec2 model)"),SIe.forEach(t),Xmr=i(vl),c8=n(vl,"LI",{});var RIe=s(c8);z3e=n(RIe,"STRONG",{});var j7t=s(z3e);zmr=r(j7t,"wav2vec2-conformer"),j7t.forEach(t),Qmr=r(RIe," \u2014 "),_H=n(RIe,"A",{href:!0});var D7t=s(_H);Wmr=r(D7t,"Wav2Vec2ConformerForAudioFrameClassification"),D7t.forEach(t),Hmr=r(RIe," (Wav2Vec2-Conformer model)"),RIe.forEach(t),Umr=i(vl),f8=n(vl,"LI",{});var PIe=s(f8);Q3e=n(PIe,"STRONG",{});var G7t=s(Q3e);Jmr=r(G7t,"wavlm"),G7t.forEach(t),Ymr=r(PIe," \u2014 "),uH=n(PIe,"A",{href:!0});var O7t=s(uH);Kmr=r(O7t,"WavLMForAudioFrameClassification"),O7t.forEach(t),Zmr=r(PIe," (WavLM model)"),PIe.forEach(t),vl.forEach(t),egr=i(Ea),m8=n(Ea,"P",{});var BIe=s(m8);ogr=r(BIe,"The model is set in evaluation mode by default using "),W3e=n(BIe,"CODE",{});var V7t=s(W3e);rgr=r(V7t,"model.eval()"),V7t.forEach(t),tgr=r(BIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H3e=n(BIe,"CODE",{});var X7t=s(H3e);agr=r(X7t,"model.train()"),X7t.forEach(t),BIe.forEach(t),ngr=i(Ea),T(g8.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),nze=i(f),Nd=n(f,"H2",{class:!0});var fWe=s(Nd);h8=n(fWe,"A",{id:!0,class:!0,href:!0});var z7t=s(h8);U3e=n(z7t,"SPAN",{});var Q7t=s(U3e);T(s9.$$.fragment,Q7t),Q7t.forEach(t),z7t.forEach(t),sgr=i(fWe),J3e=n(fWe,"SPAN",{});var W7t=s(J3e);lgr=r(W7t,"AutoModelForCTC"),W7t.forEach(t),fWe.forEach(t),sze=i(f),Wo=n(f,"DIV",{class:!0});var Fl=s(Wo);T(l9.$$.fragment,Fl),igr=i(Fl),Id=n(Fl,"P",{});var vte=s(Id);dgr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bH=n(vte,"A",{href:!0});var H7t=s(bH);cgr=r(H7t,"from_pretrained()"),H7t.forEach(t),fgr=r(vte," class method or the "),vH=n(vte,"A",{href:!0});var U7t=s(vH);mgr=r(U7t,"from_config()"),U7t.forEach(t),ggr=r(vte,` class
method.`),vte.forEach(t),hgr=i(Fl),i9=n(Fl,"P",{});var mWe=s(i9);pgr=r(mWe,"This class cannot be instantiated directly using "),Y3e=n(mWe,"CODE",{});var J7t=s(Y3e);_gr=r(J7t,"__init__()"),J7t.forEach(t),ugr=r(mWe," (throws an error)."),mWe.forEach(t),bgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var X6=s(wt);T(d9.$$.fragment,X6),vgr=i(X6),K3e=n(X6,"P",{});var Y7t=s(K3e);Fgr=r(Y7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Y7t.forEach(t),Tgr=i(X6),qd=n(X6,"P",{});var Fte=s(qd);Mgr=r(Fte,`Note:
Loading a model from its configuration file does `),Z3e=n(Fte,"STRONG",{});var K7t=s(Z3e);Egr=r(K7t,"not"),K7t.forEach(t),Cgr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(Fte,"A",{href:!0});var Z7t=s(FH);wgr=r(Z7t,"from_pretrained()"),Z7t.forEach(t),Agr=r(Fte," to load the model weights."),Fte.forEach(t),Lgr=i(X6),T(p8.$$.fragment,X6),X6.forEach(t),ygr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(c9.$$.fragment,Ca),xgr=i(Ca),eve=n(Ca,"P",{});var eLt=s(eve);$gr=r(eLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),eLt.forEach(t),kgr=i(Ca),Ka=n(Ca,"P",{});var z6=s(Ka);Sgr=r(z6,"The model class to instantiate is selected based on the "),ove=n(z6,"CODE",{});var oLt=s(ove);Rgr=r(oLt,"model_type"),oLt.forEach(t),Pgr=r(z6,` property of the config object (either
passed as an argument or loaded from `),rve=n(z6,"CODE",{});var rLt=s(rve);Bgr=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),Ngr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(z6,"CODE",{});var tLt=s(tve);Igr=r(tLt,"pretrained_model_name_or_path"),tLt.forEach(t),qgr=r(z6,":"),z6.forEach(t),jgr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);_8=n(Be,"LI",{});var NIe=s(_8);ave=n(NIe,"STRONG",{});var aLt=s(ave);Dgr=r(aLt,"data2vec-audio"),aLt.forEach(t),Ggr=r(NIe," \u2014 "),TH=n(NIe,"A",{href:!0});var nLt=s(TH);Ogr=r(nLt,"Data2VecAudioForCTC"),nLt.forEach(t),Vgr=r(NIe," (Data2VecAudio model)"),NIe.forEach(t),Xgr=i(Be),u8=n(Be,"LI",{});var IIe=s(u8);nve=n(IIe,"STRONG",{});var sLt=s(nve);zgr=r(sLt,"hubert"),sLt.forEach(t),Qgr=r(IIe," \u2014 "),MH=n(IIe,"A",{href:!0});var lLt=s(MH);Wgr=r(lLt,"HubertForCTC"),lLt.forEach(t),Hgr=r(IIe," (Hubert model)"),IIe.forEach(t),Ugr=i(Be),b8=n(Be,"LI",{});var qIe=s(b8);sve=n(qIe,"STRONG",{});var iLt=s(sve);Jgr=r(iLt,"mctct"),iLt.forEach(t),Ygr=r(qIe," \u2014 "),EH=n(qIe,"A",{href:!0});var dLt=s(EH);Kgr=r(dLt,"MCTCTForCTC"),dLt.forEach(t),Zgr=r(qIe," (M-CTC-T model)"),qIe.forEach(t),ehr=i(Be),v8=n(Be,"LI",{});var jIe=s(v8);lve=n(jIe,"STRONG",{});var cLt=s(lve);ohr=r(cLt,"sew"),cLt.forEach(t),rhr=r(jIe," \u2014 "),CH=n(jIe,"A",{href:!0});var fLt=s(CH);thr=r(fLt,"SEWForCTC"),fLt.forEach(t),ahr=r(jIe," (SEW model)"),jIe.forEach(t),nhr=i(Be),F8=n(Be,"LI",{});var DIe=s(F8);ive=n(DIe,"STRONG",{});var mLt=s(ive);shr=r(mLt,"sew-d"),mLt.forEach(t),lhr=r(DIe," \u2014 "),wH=n(DIe,"A",{href:!0});var gLt=s(wH);ihr=r(gLt,"SEWDForCTC"),gLt.forEach(t),dhr=r(DIe," (SEW-D model)"),DIe.forEach(t),chr=i(Be),T8=n(Be,"LI",{});var GIe=s(T8);dve=n(GIe,"STRONG",{});var hLt=s(dve);fhr=r(hLt,"unispeech"),hLt.forEach(t),mhr=r(GIe," \u2014 "),AH=n(GIe,"A",{href:!0});var pLt=s(AH);ghr=r(pLt,"UniSpeechForCTC"),pLt.forEach(t),hhr=r(GIe," (UniSpeech model)"),GIe.forEach(t),phr=i(Be),M8=n(Be,"LI",{});var OIe=s(M8);cve=n(OIe,"STRONG",{});var _Lt=s(cve);_hr=r(_Lt,"unispeech-sat"),_Lt.forEach(t),uhr=r(OIe," \u2014 "),LH=n(OIe,"A",{href:!0});var uLt=s(LH);bhr=r(uLt,"UniSpeechSatForCTC"),uLt.forEach(t),vhr=r(OIe," (UniSpeechSat model)"),OIe.forEach(t),Fhr=i(Be),E8=n(Be,"LI",{});var VIe=s(E8);fve=n(VIe,"STRONG",{});var bLt=s(fve);Thr=r(bLt,"wav2vec2"),bLt.forEach(t),Mhr=r(VIe," \u2014 "),yH=n(VIe,"A",{href:!0});var vLt=s(yH);Ehr=r(vLt,"Wav2Vec2ForCTC"),vLt.forEach(t),Chr=r(VIe," (Wav2Vec2 model)"),VIe.forEach(t),whr=i(Be),C8=n(Be,"LI",{});var XIe=s(C8);mve=n(XIe,"STRONG",{});var FLt=s(mve);Ahr=r(FLt,"wav2vec2-conformer"),FLt.forEach(t),Lhr=r(XIe," \u2014 "),xH=n(XIe,"A",{href:!0});var TLt=s(xH);yhr=r(TLt,"Wav2Vec2ConformerForCTC"),TLt.forEach(t),xhr=r(XIe," (Wav2Vec2-Conformer model)"),XIe.forEach(t),$hr=i(Be),w8=n(Be,"LI",{});var zIe=s(w8);gve=n(zIe,"STRONG",{});var MLt=s(gve);khr=r(MLt,"wavlm"),MLt.forEach(t),Shr=r(zIe," \u2014 "),$H=n(zIe,"A",{href:!0});var ELt=s($H);Rhr=r(ELt,"WavLMForCTC"),ELt.forEach(t),Phr=r(zIe," (WavLM model)"),zIe.forEach(t),Be.forEach(t),Bhr=i(Ca),A8=n(Ca,"P",{});var QIe=s(A8);Nhr=r(QIe,"The model is set in evaluation mode by default using "),hve=n(QIe,"CODE",{});var CLt=s(hve);Ihr=r(CLt,"model.eval()"),CLt.forEach(t),qhr=r(QIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=n(QIe,"CODE",{});var wLt=s(pve);jhr=r(wLt,"model.train()"),wLt.forEach(t),QIe.forEach(t),Dhr=i(Ca),T(L8.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),lze=i(f),jd=n(f,"H2",{class:!0});var gWe=s(jd);y8=n(gWe,"A",{id:!0,class:!0,href:!0});var ALt=s(y8);_ve=n(ALt,"SPAN",{});var LLt=s(_ve);T(f9.$$.fragment,LLt),LLt.forEach(t),ALt.forEach(t),Ghr=i(gWe),uve=n(gWe,"SPAN",{});var yLt=s(uve);Ohr=r(yLt,"AutoModelForSpeechSeq2Seq"),yLt.forEach(t),gWe.forEach(t),ize=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(m9.$$.fragment,Tl),Vhr=i(Tl),Dd=n(Tl,"P",{});var Tte=s(Dd);Xhr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kH=n(Tte,"A",{href:!0});var xLt=s(kH);zhr=r(xLt,"from_pretrained()"),xLt.forEach(t),Qhr=r(Tte," class method or the "),SH=n(Tte,"A",{href:!0});var $Lt=s(SH);Whr=r($Lt,"from_config()"),$Lt.forEach(t),Hhr=r(Tte,` class
method.`),Tte.forEach(t),Uhr=i(Tl),g9=n(Tl,"P",{});var hWe=s(g9);Jhr=r(hWe,"This class cannot be instantiated directly using "),bve=n(hWe,"CODE",{});var kLt=s(bve);Yhr=r(kLt,"__init__()"),kLt.forEach(t),Khr=r(hWe," (throws an error)."),hWe.forEach(t),Zhr=i(Tl),At=n(Tl,"DIV",{class:!0});var Q6=s(At);T(h9.$$.fragment,Q6),epr=i(Q6),vve=n(Q6,"P",{});var SLt=s(vve);opr=r(SLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SLt.forEach(t),rpr=i(Q6),Gd=n(Q6,"P",{});var Mte=s(Gd);tpr=r(Mte,`Note:
Loading a model from its configuration file does `),Fve=n(Mte,"STRONG",{});var RLt=s(Fve);apr=r(RLt,"not"),RLt.forEach(t),npr=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Mte,"A",{href:!0});var PLt=s(RH);spr=r(PLt,"from_pretrained()"),PLt.forEach(t),lpr=r(Mte," to load the model weights."),Mte.forEach(t),ipr=i(Q6),T(x8.$$.fragment,Q6),Q6.forEach(t),dpr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(p9.$$.fragment,wa),cpr=i(wa),Tve=n(wa,"P",{});var BLt=s(Tve);fpr=r(BLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BLt.forEach(t),mpr=i(wa),Za=n(wa,"P",{});var W6=s(Za);gpr=r(W6,"The model class to instantiate is selected based on the "),Mve=n(W6,"CODE",{});var NLt=s(Mve);hpr=r(NLt,"model_type"),NLt.forEach(t),ppr=r(W6,` property of the config object (either
passed as an argument or loaded from `),Eve=n(W6,"CODE",{});var ILt=s(Eve);_pr=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),upr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(W6,"CODE",{});var qLt=s(Cve);bpr=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),vpr=r(W6,":"),W6.forEach(t),Fpr=i(wa),_9=n(wa,"UL",{});var pWe=s(_9);$8=n(pWe,"LI",{});var WIe=s($8);wve=n(WIe,"STRONG",{});var jLt=s(wve);Tpr=r(jLt,"speech-encoder-decoder"),jLt.forEach(t),Mpr=r(WIe," \u2014 "),PH=n(WIe,"A",{href:!0});var DLt=s(PH);Epr=r(DLt,"SpeechEncoderDecoderModel"),DLt.forEach(t),Cpr=r(WIe," (Speech Encoder decoder model)"),WIe.forEach(t),wpr=i(pWe),k8=n(pWe,"LI",{});var HIe=s(k8);Ave=n(HIe,"STRONG",{});var GLt=s(Ave);Apr=r(GLt,"speech_to_text"),GLt.forEach(t),Lpr=r(HIe," \u2014 "),BH=n(HIe,"A",{href:!0});var OLt=s(BH);ypr=r(OLt,"Speech2TextForConditionalGeneration"),OLt.forEach(t),xpr=r(HIe," (Speech2Text model)"),HIe.forEach(t),pWe.forEach(t),$pr=i(wa),S8=n(wa,"P",{});var UIe=s(S8);kpr=r(UIe,"The model is set in evaluation mode by default using "),Lve=n(UIe,"CODE",{});var VLt=s(Lve);Spr=r(VLt,"model.eval()"),VLt.forEach(t),Rpr=r(UIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=n(UIe,"CODE",{});var XLt=s(yve);Ppr=r(XLt,"model.train()"),XLt.forEach(t),UIe.forEach(t),Bpr=i(wa),T(R8.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),dze=i(f),Od=n(f,"H2",{class:!0});var _We=s(Od);P8=n(_We,"A",{id:!0,class:!0,href:!0});var zLt=s(P8);xve=n(zLt,"SPAN",{});var QLt=s(xve);T(u9.$$.fragment,QLt),QLt.forEach(t),zLt.forEach(t),Npr=i(_We),$ve=n(_We,"SPAN",{});var WLt=s($ve);Ipr=r(WLt,"AutoModelForAudioXVector"),WLt.forEach(t),_We.forEach(t),cze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(b9.$$.fragment,Ml),qpr=i(Ml),Vd=n(Ml,"P",{});var Ete=s(Vd);jpr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NH=n(Ete,"A",{href:!0});var HLt=s(NH);Dpr=r(HLt,"from_pretrained()"),HLt.forEach(t),Gpr=r(Ete," class method or the "),IH=n(Ete,"A",{href:!0});var ULt=s(IH);Opr=r(ULt,"from_config()"),ULt.forEach(t),Vpr=r(Ete,` class
method.`),Ete.forEach(t),Xpr=i(Ml),v9=n(Ml,"P",{});var uWe=s(v9);zpr=r(uWe,"This class cannot be instantiated directly using "),kve=n(uWe,"CODE",{});var JLt=s(kve);Qpr=r(JLt,"__init__()"),JLt.forEach(t),Wpr=r(uWe," (throws an error)."),uWe.forEach(t),Hpr=i(Ml),Lt=n(Ml,"DIV",{class:!0});var H6=s(Lt);T(F9.$$.fragment,H6),Upr=i(H6),Sve=n(H6,"P",{});var YLt=s(Sve);Jpr=r(YLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YLt.forEach(t),Ypr=i(H6),Xd=n(H6,"P",{});var Cte=s(Xd);Kpr=r(Cte,`Note:
Loading a model from its configuration file does `),Rve=n(Cte,"STRONG",{});var KLt=s(Rve);Zpr=r(KLt,"not"),KLt.forEach(t),e_r=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(Cte,"A",{href:!0});var ZLt=s(qH);o_r=r(ZLt,"from_pretrained()"),ZLt.forEach(t),r_r=r(Cte," to load the model weights."),Cte.forEach(t),t_r=i(H6),T(B8.$$.fragment,H6),H6.forEach(t),a_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(T9.$$.fragment,Aa),n_r=i(Aa),Pve=n(Aa,"P",{});var eyt=s(Pve);s_r=r(eyt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eyt.forEach(t),l_r=i(Aa),en=n(Aa,"P",{});var U6=s(en);i_r=r(U6,"The model class to instantiate is selected based on the "),Bve=n(U6,"CODE",{});var oyt=s(Bve);d_r=r(oyt,"model_type"),oyt.forEach(t),c_r=r(U6,` property of the config object (either
passed as an argument or loaded from `),Nve=n(U6,"CODE",{});var ryt=s(Nve);f_r=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),m_r=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(U6,"CODE",{});var tyt=s(Ive);g_r=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),h_r=r(U6,":"),U6.forEach(t),p_r=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);N8=n(El,"LI",{});var JIe=s(N8);qve=n(JIe,"STRONG",{});var ayt=s(qve);__r=r(ayt,"data2vec-audio"),ayt.forEach(t),u_r=r(JIe," \u2014 "),jH=n(JIe,"A",{href:!0});var nyt=s(jH);b_r=r(nyt,"Data2VecAudioForXVector"),nyt.forEach(t),v_r=r(JIe," (Data2VecAudio model)"),JIe.forEach(t),F_r=i(El),I8=n(El,"LI",{});var YIe=s(I8);jve=n(YIe,"STRONG",{});var syt=s(jve);T_r=r(syt,"unispeech-sat"),syt.forEach(t),M_r=r(YIe," \u2014 "),DH=n(YIe,"A",{href:!0});var lyt=s(DH);E_r=r(lyt,"UniSpeechSatForXVector"),lyt.forEach(t),C_r=r(YIe," (UniSpeechSat model)"),YIe.forEach(t),w_r=i(El),q8=n(El,"LI",{});var KIe=s(q8);Dve=n(KIe,"STRONG",{});var iyt=s(Dve);A_r=r(iyt,"wav2vec2"),iyt.forEach(t),L_r=r(KIe," \u2014 "),GH=n(KIe,"A",{href:!0});var dyt=s(GH);y_r=r(dyt,"Wav2Vec2ForXVector"),dyt.forEach(t),x_r=r(KIe," (Wav2Vec2 model)"),KIe.forEach(t),$_r=i(El),j8=n(El,"LI",{});var ZIe=s(j8);Gve=n(ZIe,"STRONG",{});var cyt=s(Gve);k_r=r(cyt,"wav2vec2-conformer"),cyt.forEach(t),S_r=r(ZIe," \u2014 "),OH=n(ZIe,"A",{href:!0});var fyt=s(OH);R_r=r(fyt,"Wav2Vec2ConformerForXVector"),fyt.forEach(t),P_r=r(ZIe," (Wav2Vec2-Conformer model)"),ZIe.forEach(t),B_r=i(El),D8=n(El,"LI",{});var eqe=s(D8);Ove=n(eqe,"STRONG",{});var myt=s(Ove);N_r=r(myt,"wavlm"),myt.forEach(t),I_r=r(eqe," \u2014 "),VH=n(eqe,"A",{href:!0});var gyt=s(VH);q_r=r(gyt,"WavLMForXVector"),gyt.forEach(t),j_r=r(eqe," (WavLM model)"),eqe.forEach(t),El.forEach(t),D_r=i(Aa),G8=n(Aa,"P",{});var oqe=s(G8);G_r=r(oqe,"The model is set in evaluation mode by default using "),Vve=n(oqe,"CODE",{});var hyt=s(Vve);O_r=r(hyt,"model.eval()"),hyt.forEach(t),V_r=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xve=n(oqe,"CODE",{});var pyt=s(Xve);X_r=r(pyt,"model.train()"),pyt.forEach(t),oqe.forEach(t),z_r=i(Aa),T(O8.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),fze=i(f),zd=n(f,"H2",{class:!0});var bWe=s(zd);V8=n(bWe,"A",{id:!0,class:!0,href:!0});var _yt=s(V8);zve=n(_yt,"SPAN",{});var uyt=s(zve);T(M9.$$.fragment,uyt),uyt.forEach(t),_yt.forEach(t),Q_r=i(bWe),Qve=n(bWe,"SPAN",{});var byt=s(Qve);W_r=r(byt,"AutoModelForMaskedImageModeling"),byt.forEach(t),bWe.forEach(t),mze=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(E9.$$.fragment,Cl),H_r=i(Cl),Qd=n(Cl,"P",{});var wte=s(Qd);U_r=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XH=n(wte,"A",{href:!0});var vyt=s(XH);J_r=r(vyt,"from_pretrained()"),vyt.forEach(t),Y_r=r(wte," class method or the "),zH=n(wte,"A",{href:!0});var Fyt=s(zH);K_r=r(Fyt,"from_config()"),Fyt.forEach(t),Z_r=r(wte,` class
method.`),wte.forEach(t),eur=i(Cl),C9=n(Cl,"P",{});var vWe=s(C9);our=r(vWe,"This class cannot be instantiated directly using "),Wve=n(vWe,"CODE",{});var Tyt=s(Wve);rur=r(Tyt,"__init__()"),Tyt.forEach(t),tur=r(vWe," (throws an error)."),vWe.forEach(t),aur=i(Cl),yt=n(Cl,"DIV",{class:!0});var J6=s(yt);T(w9.$$.fragment,J6),nur=i(J6),Hve=n(J6,"P",{});var Myt=s(Hve);sur=r(Myt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Myt.forEach(t),lur=i(J6),Wd=n(J6,"P",{});var Ate=s(Wd);iur=r(Ate,`Note:
Loading a model from its configuration file does `),Uve=n(Ate,"STRONG",{});var Eyt=s(Uve);dur=r(Eyt,"not"),Eyt.forEach(t),cur=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Ate,"A",{href:!0});var Cyt=s(QH);fur=r(Cyt,"from_pretrained()"),Cyt.forEach(t),mur=r(Ate," to load the model weights."),Ate.forEach(t),gur=i(J6),T(X8.$$.fragment,J6),J6.forEach(t),hur=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(A9.$$.fragment,La),pur=i(La),Jve=n(La,"P",{});var wyt=s(Jve);_ur=r(wyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wyt.forEach(t),uur=i(La),on=n(La,"P",{});var Y6=s(on);bur=r(Y6,"The model class to instantiate is selected based on the "),Yve=n(Y6,"CODE",{});var Ayt=s(Yve);vur=r(Ayt,"model_type"),Ayt.forEach(t),Fur=r(Y6,` property of the config object (either
passed as an argument or loaded from `),Kve=n(Y6,"CODE",{});var Lyt=s(Kve);Tur=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),Mur=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(Y6,"CODE",{});var yyt=s(Zve);Eur=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),Cur=r(Y6,":"),Y6.forEach(t),wur=i(La),Hd=n(La,"UL",{});var Lte=s(Hd);z8=n(Lte,"LI",{});var rqe=s(z8);eFe=n(rqe,"STRONG",{});var xyt=s(eFe);Aur=r(xyt,"deit"),xyt.forEach(t),Lur=r(rqe," \u2014 "),WH=n(rqe,"A",{href:!0});var $yt=s(WH);yur=r($yt,"DeiTForMaskedImageModeling"),$yt.forEach(t),xur=r(rqe," (DeiT model)"),rqe.forEach(t),$ur=i(Lte),Q8=n(Lte,"LI",{});var tqe=s(Q8);oFe=n(tqe,"STRONG",{});var kyt=s(oFe);kur=r(kyt,"swin"),kyt.forEach(t),Sur=r(tqe," \u2014 "),HH=n(tqe,"A",{href:!0});var Syt=s(HH);Rur=r(Syt,"SwinForMaskedImageModeling"),Syt.forEach(t),Pur=r(tqe," (Swin Transformer model)"),tqe.forEach(t),Bur=i(Lte),W8=n(Lte,"LI",{});var aqe=s(W8);rFe=n(aqe,"STRONG",{});var Ryt=s(rFe);Nur=r(Ryt,"vit"),Ryt.forEach(t),Iur=r(aqe," \u2014 "),UH=n(aqe,"A",{href:!0});var Pyt=s(UH);qur=r(Pyt,"ViTForMaskedImageModeling"),Pyt.forEach(t),jur=r(aqe," (ViT model)"),aqe.forEach(t),Lte.forEach(t),Dur=i(La),H8=n(La,"P",{});var nqe=s(H8);Gur=r(nqe,"The model is set in evaluation mode by default using "),tFe=n(nqe,"CODE",{});var Byt=s(tFe);Our=r(Byt,"model.eval()"),Byt.forEach(t),Vur=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=n(nqe,"CODE",{});var Nyt=s(aFe);Xur=r(Nyt,"model.train()"),Nyt.forEach(t),nqe.forEach(t),zur=i(La),T(U8.$$.fragment,La),La.forEach(t),Cl.forEach(t),gze=i(f),Ud=n(f,"H2",{class:!0});var FWe=s(Ud);J8=n(FWe,"A",{id:!0,class:!0,href:!0});var Iyt=s(J8);nFe=n(Iyt,"SPAN",{});var qyt=s(nFe);T(L9.$$.fragment,qyt),qyt.forEach(t),Iyt.forEach(t),Qur=i(FWe),sFe=n(FWe,"SPAN",{});var jyt=s(sFe);Wur=r(jyt,"AutoModelForObjectDetection"),jyt.forEach(t),FWe.forEach(t),hze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(y9.$$.fragment,wl),Hur=i(wl),Jd=n(wl,"P",{});var yte=s(Jd);Uur=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JH=n(yte,"A",{href:!0});var Dyt=s(JH);Jur=r(Dyt,"from_pretrained()"),Dyt.forEach(t),Yur=r(yte," class method or the "),YH=n(yte,"A",{href:!0});var Gyt=s(YH);Kur=r(Gyt,"from_config()"),Gyt.forEach(t),Zur=r(yte,` class
method.`),yte.forEach(t),e1r=i(wl),x9=n(wl,"P",{});var TWe=s(x9);o1r=r(TWe,"This class cannot be instantiated directly using "),lFe=n(TWe,"CODE",{});var Oyt=s(lFe);r1r=r(Oyt,"__init__()"),Oyt.forEach(t),t1r=r(TWe," (throws an error)."),TWe.forEach(t),a1r=i(wl),xt=n(wl,"DIV",{class:!0});var K6=s(xt);T($9.$$.fragment,K6),n1r=i(K6),iFe=n(K6,"P",{});var Vyt=s(iFe);s1r=r(Vyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Vyt.forEach(t),l1r=i(K6),Yd=n(K6,"P",{});var xte=s(Yd);i1r=r(xte,`Note:
Loading a model from its configuration file does `),dFe=n(xte,"STRONG",{});var Xyt=s(dFe);d1r=r(Xyt,"not"),Xyt.forEach(t),c1r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(xte,"A",{href:!0});var zyt=s(KH);f1r=r(zyt,"from_pretrained()"),zyt.forEach(t),m1r=r(xte," to load the model weights."),xte.forEach(t),g1r=i(K6),T(Y8.$$.fragment,K6),K6.forEach(t),h1r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(k9.$$.fragment,ya),p1r=i(ya),cFe=n(ya,"P",{});var Qyt=s(cFe);_1r=r(Qyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Qyt.forEach(t),u1r=i(ya),rn=n(ya,"P",{});var Z6=s(rn);b1r=r(Z6,"The model class to instantiate is selected based on the "),fFe=n(Z6,"CODE",{});var Wyt=s(fFe);v1r=r(Wyt,"model_type"),Wyt.forEach(t),F1r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),mFe=n(Z6,"CODE",{});var Hyt=s(mFe);T1r=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),M1r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(Z6,"CODE",{});var Uyt=s(gFe);E1r=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),C1r=r(Z6,":"),Z6.forEach(t),w1r=i(ya),S9=n(ya,"UL",{});var MWe=s(S9);K8=n(MWe,"LI",{});var sqe=s(K8);hFe=n(sqe,"STRONG",{});var Jyt=s(hFe);A1r=r(Jyt,"detr"),Jyt.forEach(t),L1r=r(sqe," \u2014 "),ZH=n(sqe,"A",{href:!0});var Yyt=s(ZH);y1r=r(Yyt,"DetrForObjectDetection"),Yyt.forEach(t),x1r=r(sqe," (DETR model)"),sqe.forEach(t),$1r=i(MWe),Z8=n(MWe,"LI",{});var lqe=s(Z8);pFe=n(lqe,"STRONG",{});var Kyt=s(pFe);k1r=r(Kyt,"yolos"),Kyt.forEach(t),S1r=r(lqe," \u2014 "),eU=n(lqe,"A",{href:!0});var Zyt=s(eU);R1r=r(Zyt,"YolosForObjectDetection"),Zyt.forEach(t),P1r=r(lqe," (YOLOS model)"),lqe.forEach(t),MWe.forEach(t),B1r=i(ya),eM=n(ya,"P",{});var iqe=s(eM);N1r=r(iqe,"The model is set in evaluation mode by default using "),_Fe=n(iqe,"CODE",{});var e9t=s(_Fe);I1r=r(e9t,"model.eval()"),e9t.forEach(t),q1r=r(iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=n(iqe,"CODE",{});var o9t=s(uFe);j1r=r(o9t,"model.train()"),o9t.forEach(t),iqe.forEach(t),D1r=i(ya),T(oM.$$.fragment,ya),ya.forEach(t),wl.forEach(t),pze=i(f),Kd=n(f,"H2",{class:!0});var EWe=s(Kd);rM=n(EWe,"A",{id:!0,class:!0,href:!0});var r9t=s(rM);bFe=n(r9t,"SPAN",{});var t9t=s(bFe);T(R9.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),G1r=i(EWe),vFe=n(EWe,"SPAN",{});var a9t=s(vFe);O1r=r(a9t,"AutoModelForImageSegmentation"),a9t.forEach(t),EWe.forEach(t),_ze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(P9.$$.fragment,Al),V1r=i(Al),Zd=n(Al,"P",{});var $te=s(Zd);X1r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oU=n($te,"A",{href:!0});var n9t=s(oU);z1r=r(n9t,"from_pretrained()"),n9t.forEach(t),Q1r=r($te," class method or the "),rU=n($te,"A",{href:!0});var s9t=s(rU);W1r=r(s9t,"from_config()"),s9t.forEach(t),H1r=r($te,` class
method.`),$te.forEach(t),U1r=i(Al),B9=n(Al,"P",{});var CWe=s(B9);J1r=r(CWe,"This class cannot be instantiated directly using "),FFe=n(CWe,"CODE",{});var l9t=s(FFe);Y1r=r(l9t,"__init__()"),l9t.forEach(t),K1r=r(CWe," (throws an error)."),CWe.forEach(t),Z1r=i(Al),$t=n(Al,"DIV",{class:!0});var e7=s($t);T(N9.$$.fragment,e7),e2r=i(e7),TFe=n(e7,"P",{});var i9t=s(TFe);o2r=r(i9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),i9t.forEach(t),r2r=i(e7),ec=n(e7,"P",{});var kte=s(ec);t2r=r(kte,`Note:
Loading a model from its configuration file does `),MFe=n(kte,"STRONG",{});var d9t=s(MFe);a2r=r(d9t,"not"),d9t.forEach(t),n2r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(kte,"A",{href:!0});var c9t=s(tU);s2r=r(c9t,"from_pretrained()"),c9t.forEach(t),l2r=r(kte," to load the model weights."),kte.forEach(t),i2r=i(e7),T(tM.$$.fragment,e7),e7.forEach(t),d2r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(I9.$$.fragment,xa),c2r=i(xa),EFe=n(xa,"P",{});var f9t=s(EFe);f2r=r(f9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),f9t.forEach(t),m2r=i(xa),tn=n(xa,"P",{});var o7=s(tn);g2r=r(o7,"The model class to instantiate is selected based on the "),CFe=n(o7,"CODE",{});var m9t=s(CFe);h2r=r(m9t,"model_type"),m9t.forEach(t),p2r=r(o7,` property of the config object (either
passed as an argument or loaded from `),wFe=n(o7,"CODE",{});var g9t=s(wFe);_2r=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),u2r=r(o7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(o7,"CODE",{});var h9t=s(AFe);b2r=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),v2r=r(o7,":"),o7.forEach(t),F2r=i(xa),LFe=n(xa,"UL",{});var p9t=s(LFe);aM=n(p9t,"LI",{});var dqe=s(aM);yFe=n(dqe,"STRONG",{});var _9t=s(yFe);T2r=r(_9t,"detr"),_9t.forEach(t),M2r=r(dqe," \u2014 "),aU=n(dqe,"A",{href:!0});var u9t=s(aU);E2r=r(u9t,"DetrForSegmentation"),u9t.forEach(t),C2r=r(dqe," (DETR model)"),dqe.forEach(t),p9t.forEach(t),w2r=i(xa),nM=n(xa,"P",{});var cqe=s(nM);A2r=r(cqe,"The model is set in evaluation mode by default using "),xFe=n(cqe,"CODE",{});var b9t=s(xFe);L2r=r(b9t,"model.eval()"),b9t.forEach(t),y2r=r(cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=n(cqe,"CODE",{});var v9t=s($Fe);x2r=r(v9t,"model.train()"),v9t.forEach(t),cqe.forEach(t),$2r=i(xa),T(sM.$$.fragment,xa),xa.forEach(t),Al.forEach(t),uze=i(f),oc=n(f,"H2",{class:!0});var wWe=s(oc);lM=n(wWe,"A",{id:!0,class:!0,href:!0});var F9t=s(lM);kFe=n(F9t,"SPAN",{});var T9t=s(kFe);T(q9.$$.fragment,T9t),T9t.forEach(t),F9t.forEach(t),k2r=i(wWe),SFe=n(wWe,"SPAN",{});var M9t=s(SFe);S2r=r(M9t,"AutoModelForSemanticSegmentation"),M9t.forEach(t),wWe.forEach(t),bze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(j9.$$.fragment,Ll),R2r=i(Ll),rc=n(Ll,"P",{});var Ste=s(rc);P2r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nU=n(Ste,"A",{href:!0});var E9t=s(nU);B2r=r(E9t,"from_pretrained()"),E9t.forEach(t),N2r=r(Ste," class method or the "),sU=n(Ste,"A",{href:!0});var C9t=s(sU);I2r=r(C9t,"from_config()"),C9t.forEach(t),q2r=r(Ste,` class
method.`),Ste.forEach(t),j2r=i(Ll),D9=n(Ll,"P",{});var AWe=s(D9);D2r=r(AWe,"This class cannot be instantiated directly using "),RFe=n(AWe,"CODE",{});var w9t=s(RFe);G2r=r(w9t,"__init__()"),w9t.forEach(t),O2r=r(AWe," (throws an error)."),AWe.forEach(t),V2r=i(Ll),kt=n(Ll,"DIV",{class:!0});var r7=s(kt);T(G9.$$.fragment,r7),X2r=i(r7),PFe=n(r7,"P",{});var A9t=s(PFe);z2r=r(A9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),A9t.forEach(t),Q2r=i(r7),tc=n(r7,"P",{});var Rte=s(tc);W2r=r(Rte,`Note:
Loading a model from its configuration file does `),BFe=n(Rte,"STRONG",{});var L9t=s(BFe);H2r=r(L9t,"not"),L9t.forEach(t),U2r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Rte,"A",{href:!0});var y9t=s(lU);J2r=r(y9t,"from_pretrained()"),y9t.forEach(t),Y2r=r(Rte," to load the model weights."),Rte.forEach(t),K2r=i(r7),T(iM.$$.fragment,r7),r7.forEach(t),Z2r=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(O9.$$.fragment,$a),ebr=i($a),NFe=n($a,"P",{});var x9t=s(NFe);obr=r(x9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),x9t.forEach(t),rbr=i($a),an=n($a,"P",{});var t7=s(an);tbr=r(t7,"The model class to instantiate is selected based on the "),IFe=n(t7,"CODE",{});var $9t=s(IFe);abr=r($9t,"model_type"),$9t.forEach(t),nbr=r(t7,` property of the config object (either
passed as an argument or loaded from `),qFe=n(t7,"CODE",{});var k9t=s(qFe);sbr=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),lbr=r(t7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(t7,"CODE",{});var S9t=s(jFe);ibr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),dbr=r(t7,":"),t7.forEach(t),cbr=i($a),at=n($a,"UL",{});var yl=s(at);dM=n(yl,"LI",{});var fqe=s(dM);DFe=n(fqe,"STRONG",{});var R9t=s(DFe);fbr=r(R9t,"beit"),R9t.forEach(t),mbr=r(fqe," \u2014 "),iU=n(fqe,"A",{href:!0});var P9t=s(iU);gbr=r(P9t,"BeitForSemanticSegmentation"),P9t.forEach(t),hbr=r(fqe," (BEiT model)"),fqe.forEach(t),pbr=i(yl),cM=n(yl,"LI",{});var mqe=s(cM);GFe=n(mqe,"STRONG",{});var B9t=s(GFe);_br=r(B9t,"data2vec-vision"),B9t.forEach(t),ubr=r(mqe," \u2014 "),dU=n(mqe,"A",{href:!0});var N9t=s(dU);bbr=r(N9t,"Data2VecVisionForSemanticSegmentation"),N9t.forEach(t),vbr=r(mqe," (Data2VecVision model)"),mqe.forEach(t),Fbr=i(yl),fM=n(yl,"LI",{});var gqe=s(fM);OFe=n(gqe,"STRONG",{});var I9t=s(OFe);Tbr=r(I9t,"dpt"),I9t.forEach(t),Mbr=r(gqe," \u2014 "),cU=n(gqe,"A",{href:!0});var q9t=s(cU);Ebr=r(q9t,"DPTForSemanticSegmentation"),q9t.forEach(t),Cbr=r(gqe," (DPT model)"),gqe.forEach(t),wbr=i(yl),mM=n(yl,"LI",{});var hqe=s(mM);VFe=n(hqe,"STRONG",{});var j9t=s(VFe);Abr=r(j9t,"mobilevit"),j9t.forEach(t),Lbr=r(hqe," \u2014 "),fU=n(hqe,"A",{href:!0});var D9t=s(fU);ybr=r(D9t,"MobileViTForSemanticSegmentation"),D9t.forEach(t),xbr=r(hqe," (MobileViT model)"),hqe.forEach(t),$br=i(yl),gM=n(yl,"LI",{});var pqe=s(gM);XFe=n(pqe,"STRONG",{});var G9t=s(XFe);kbr=r(G9t,"segformer"),G9t.forEach(t),Sbr=r(pqe," \u2014 "),mU=n(pqe,"A",{href:!0});var O9t=s(mU);Rbr=r(O9t,"SegformerForSemanticSegmentation"),O9t.forEach(t),Pbr=r(pqe," (SegFormer model)"),pqe.forEach(t),yl.forEach(t),Bbr=i($a),hM=n($a,"P",{});var _qe=s(hM);Nbr=r(_qe,"The model is set in evaluation mode by default using "),zFe=n(_qe,"CODE",{});var V9t=s(zFe);Ibr=r(V9t,"model.eval()"),V9t.forEach(t),qbr=r(_qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=n(_qe,"CODE",{});var X9t=s(QFe);jbr=r(X9t,"model.train()"),X9t.forEach(t),_qe.forEach(t),Dbr=i($a),T(pM.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),vze=i(f),ac=n(f,"H2",{class:!0});var LWe=s(ac);_M=n(LWe,"A",{id:!0,class:!0,href:!0});var z9t=s(_M);WFe=n(z9t,"SPAN",{});var Q9t=s(WFe);T(V9.$$.fragment,Q9t),Q9t.forEach(t),z9t.forEach(t),Gbr=i(LWe),HFe=n(LWe,"SPAN",{});var W9t=s(HFe);Obr=r(W9t,"AutoModelForInstanceSegmentation"),W9t.forEach(t),LWe.forEach(t),Fze=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(X9.$$.fragment,xl),Vbr=i(xl),nc=n(xl,"P",{});var Pte=s(nc);Xbr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gU=n(Pte,"A",{href:!0});var H9t=s(gU);zbr=r(H9t,"from_pretrained()"),H9t.forEach(t),Qbr=r(Pte," class method or the "),hU=n(Pte,"A",{href:!0});var U9t=s(hU);Wbr=r(U9t,"from_config()"),U9t.forEach(t),Hbr=r(Pte,` class
method.`),Pte.forEach(t),Ubr=i(xl),z9=n(xl,"P",{});var yWe=s(z9);Jbr=r(yWe,"This class cannot be instantiated directly using "),UFe=n(yWe,"CODE",{});var J9t=s(UFe);Ybr=r(J9t,"__init__()"),J9t.forEach(t),Kbr=r(yWe," (throws an error)."),yWe.forEach(t),Zbr=i(xl),St=n(xl,"DIV",{class:!0});var a7=s(St);T(Q9.$$.fragment,a7),e3r=i(a7),JFe=n(a7,"P",{});var Y9t=s(JFe);o3r=r(Y9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Y9t.forEach(t),r3r=i(a7),sc=n(a7,"P",{});var Bte=s(sc);t3r=r(Bte,`Note:
Loading a model from its configuration file does `),YFe=n(Bte,"STRONG",{});var K9t=s(YFe);a3r=r(K9t,"not"),K9t.forEach(t),n3r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(Bte,"A",{href:!0});var Z9t=s(pU);s3r=r(Z9t,"from_pretrained()"),Z9t.forEach(t),l3r=r(Bte," to load the model weights."),Bte.forEach(t),i3r=i(a7),T(uM.$$.fragment,a7),a7.forEach(t),d3r=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(W9.$$.fragment,ka),c3r=i(ka),KFe=n(ka,"P",{});var ext=s(KFe);f3r=r(ext,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ext.forEach(t),m3r=i(ka),nn=n(ka,"P",{});var n7=s(nn);g3r=r(n7,"The model class to instantiate is selected based on the "),ZFe=n(n7,"CODE",{});var oxt=s(ZFe);h3r=r(oxt,"model_type"),oxt.forEach(t),p3r=r(n7,` property of the config object (either
passed as an argument or loaded from `),eTe=n(n7,"CODE",{});var rxt=s(eTe);_3r=r(rxt,"pretrained_model_name_or_path"),rxt.forEach(t),u3r=r(n7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(n7,"CODE",{});var txt=s(oTe);b3r=r(txt,"pretrained_model_name_or_path"),txt.forEach(t),v3r=r(n7,":"),n7.forEach(t),F3r=i(ka),rTe=n(ka,"UL",{});var axt=s(rTe);bM=n(axt,"LI",{});var uqe=s(bM);tTe=n(uqe,"STRONG",{});var nxt=s(tTe);T3r=r(nxt,"maskformer"),nxt.forEach(t),M3r=r(uqe," \u2014 "),_U=n(uqe,"A",{href:!0});var sxt=s(_U);E3r=r(sxt,"MaskFormerForInstanceSegmentation"),sxt.forEach(t),C3r=r(uqe," (MaskFormer model)"),uqe.forEach(t),axt.forEach(t),w3r=i(ka),vM=n(ka,"P",{});var bqe=s(vM);A3r=r(bqe,"The model is set in evaluation mode by default using "),aTe=n(bqe,"CODE",{});var lxt=s(aTe);L3r=r(lxt,"model.eval()"),lxt.forEach(t),y3r=r(bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nTe=n(bqe,"CODE",{});var ixt=s(nTe);x3r=r(ixt,"model.train()"),ixt.forEach(t),bqe.forEach(t),$3r=i(ka),T(FM.$$.fragment,ka),ka.forEach(t),xl.forEach(t),Tze=i(f),lc=n(f,"H2",{class:!0});var xWe=s(lc);TM=n(xWe,"A",{id:!0,class:!0,href:!0});var dxt=s(TM);sTe=n(dxt,"SPAN",{});var cxt=s(sTe);T(H9.$$.fragment,cxt),cxt.forEach(t),dxt.forEach(t),k3r=i(xWe),lTe=n(xWe,"SPAN",{});var fxt=s(lTe);S3r=r(fxt,"TFAutoModel"),fxt.forEach(t),xWe.forEach(t),Mze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(U9.$$.fragment,$l),R3r=i($l),ic=n($l,"P",{});var Nte=s(ic);P3r=r(Nte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uU=n(Nte,"A",{href:!0});var mxt=s(uU);B3r=r(mxt,"from_pretrained()"),mxt.forEach(t),N3r=r(Nte," class method or the "),bU=n(Nte,"A",{href:!0});var gxt=s(bU);I3r=r(gxt,"from_config()"),gxt.forEach(t),q3r=r(Nte,` class
method.`),Nte.forEach(t),j3r=i($l),J9=n($l,"P",{});var $We=s(J9);D3r=r($We,"This class cannot be instantiated directly using "),iTe=n($We,"CODE",{});var hxt=s(iTe);G3r=r(hxt,"__init__()"),hxt.forEach(t),O3r=r($We," (throws an error)."),$We.forEach(t),V3r=i($l),Rt=n($l,"DIV",{class:!0});var s7=s(Rt);T(Y9.$$.fragment,s7),X3r=i(s7),dTe=n(s7,"P",{});var pxt=s(dTe);z3r=r(pxt,"Instantiates one of the base model classes of the library from a configuration."),pxt.forEach(t),Q3r=i(s7),dc=n(s7,"P",{});var Ite=s(dc);W3r=r(Ite,`Note:
Loading a model from its configuration file does `),cTe=n(Ite,"STRONG",{});var _xt=s(cTe);H3r=r(_xt,"not"),_xt.forEach(t),U3r=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(Ite,"A",{href:!0});var uxt=s(vU);J3r=r(uxt,"from_pretrained()"),uxt.forEach(t),Y3r=r(Ite," to load the model weights."),Ite.forEach(t),K3r=i(s7),T(MM.$$.fragment,s7),s7.forEach(t),Z3r=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(K9.$$.fragment,kl),evr=i(kl),fTe=n(kl,"P",{});var bxt=s(fTe);ovr=r(bxt,"Instantiate one of the base model classes of the library from a pretrained model."),bxt.forEach(t),rvr=i(kl),sn=n(kl,"P",{});var l7=s(sn);tvr=r(l7,"The model class to instantiate is selected based on the "),mTe=n(l7,"CODE",{});var vxt=s(mTe);avr=r(vxt,"model_type"),vxt.forEach(t),nvr=r(l7,` property of the config object (either
passed as an argument or loaded from `),gTe=n(l7,"CODE",{});var Fxt=s(gTe);svr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),lvr=r(l7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=n(l7,"CODE",{});var Txt=s(hTe);ivr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),dvr=r(l7,":"),l7.forEach(t),cvr=i(kl),q=n(kl,"UL",{});var D=s(q);EM=n(D,"LI",{});var vqe=s(EM);pTe=n(vqe,"STRONG",{});var Mxt=s(pTe);fvr=r(Mxt,"albert"),Mxt.forEach(t),mvr=r(vqe," \u2014 "),FU=n(vqe,"A",{href:!0});var Ext=s(FU);gvr=r(Ext,"TFAlbertModel"),Ext.forEach(t),hvr=r(vqe," (ALBERT model)"),vqe.forEach(t),pvr=i(D),CM=n(D,"LI",{});var Fqe=s(CM);_Te=n(Fqe,"STRONG",{});var Cxt=s(_Te);_vr=r(Cxt,"bart"),Cxt.forEach(t),uvr=r(Fqe," \u2014 "),TU=n(Fqe,"A",{href:!0});var wxt=s(TU);bvr=r(wxt,"TFBartModel"),wxt.forEach(t),vvr=r(Fqe," (BART model)"),Fqe.forEach(t),Fvr=i(D),wM=n(D,"LI",{});var Tqe=s(wM);uTe=n(Tqe,"STRONG",{});var Axt=s(uTe);Tvr=r(Axt,"bert"),Axt.forEach(t),Mvr=r(Tqe," \u2014 "),MU=n(Tqe,"A",{href:!0});var Lxt=s(MU);Evr=r(Lxt,"TFBertModel"),Lxt.forEach(t),Cvr=r(Tqe," (BERT model)"),Tqe.forEach(t),wvr=i(D),AM=n(D,"LI",{});var Mqe=s(AM);bTe=n(Mqe,"STRONG",{});var yxt=s(bTe);Avr=r(yxt,"blenderbot"),yxt.forEach(t),Lvr=r(Mqe," \u2014 "),EU=n(Mqe,"A",{href:!0});var xxt=s(EU);yvr=r(xxt,"TFBlenderbotModel"),xxt.forEach(t),xvr=r(Mqe," (Blenderbot model)"),Mqe.forEach(t),$vr=i(D),LM=n(D,"LI",{});var Eqe=s(LM);vTe=n(Eqe,"STRONG",{});var $xt=s(vTe);kvr=r($xt,"blenderbot-small"),$xt.forEach(t),Svr=r(Eqe," \u2014 "),CU=n(Eqe,"A",{href:!0});var kxt=s(CU);Rvr=r(kxt,"TFBlenderbotSmallModel"),kxt.forEach(t),Pvr=r(Eqe," (BlenderbotSmall model)"),Eqe.forEach(t),Bvr=i(D),yM=n(D,"LI",{});var Cqe=s(yM);FTe=n(Cqe,"STRONG",{});var Sxt=s(FTe);Nvr=r(Sxt,"camembert"),Sxt.forEach(t),Ivr=r(Cqe," \u2014 "),wU=n(Cqe,"A",{href:!0});var Rxt=s(wU);qvr=r(Rxt,"TFCamembertModel"),Rxt.forEach(t),jvr=r(Cqe," (CamemBERT model)"),Cqe.forEach(t),Dvr=i(D),xM=n(D,"LI",{});var wqe=s(xM);TTe=n(wqe,"STRONG",{});var Pxt=s(TTe);Gvr=r(Pxt,"clip"),Pxt.forEach(t),Ovr=r(wqe," \u2014 "),AU=n(wqe,"A",{href:!0});var Bxt=s(AU);Vvr=r(Bxt,"TFCLIPModel"),Bxt.forEach(t),Xvr=r(wqe," (CLIP model)"),wqe.forEach(t),zvr=i(D),$M=n(D,"LI",{});var Aqe=s($M);MTe=n(Aqe,"STRONG",{});var Nxt=s(MTe);Qvr=r(Nxt,"convbert"),Nxt.forEach(t),Wvr=r(Aqe," \u2014 "),LU=n(Aqe,"A",{href:!0});var Ixt=s(LU);Hvr=r(Ixt,"TFConvBertModel"),Ixt.forEach(t),Uvr=r(Aqe," (ConvBERT model)"),Aqe.forEach(t),Jvr=i(D),kM=n(D,"LI",{});var Lqe=s(kM);ETe=n(Lqe,"STRONG",{});var qxt=s(ETe);Yvr=r(qxt,"convnext"),qxt.forEach(t),Kvr=r(Lqe," \u2014 "),yU=n(Lqe,"A",{href:!0});var jxt=s(yU);Zvr=r(jxt,"TFConvNextModel"),jxt.forEach(t),eFr=r(Lqe," (ConvNeXT model)"),Lqe.forEach(t),oFr=i(D),SM=n(D,"LI",{});var yqe=s(SM);CTe=n(yqe,"STRONG",{});var Dxt=s(CTe);rFr=r(Dxt,"ctrl"),Dxt.forEach(t),tFr=r(yqe," \u2014 "),xU=n(yqe,"A",{href:!0});var Gxt=s(xU);aFr=r(Gxt,"TFCTRLModel"),Gxt.forEach(t),nFr=r(yqe," (CTRL model)"),yqe.forEach(t),sFr=i(D),RM=n(D,"LI",{});var xqe=s(RM);wTe=n(xqe,"STRONG",{});var Oxt=s(wTe);lFr=r(Oxt,"data2vec-vision"),Oxt.forEach(t),iFr=r(xqe," \u2014 "),$U=n(xqe,"A",{href:!0});var Vxt=s($U);dFr=r(Vxt,"TFData2VecVisionModel"),Vxt.forEach(t),cFr=r(xqe," (Data2VecVision model)"),xqe.forEach(t),fFr=i(D),PM=n(D,"LI",{});var $qe=s(PM);ATe=n($qe,"STRONG",{});var Xxt=s(ATe);mFr=r(Xxt,"deberta"),Xxt.forEach(t),gFr=r($qe," \u2014 "),kU=n($qe,"A",{href:!0});var zxt=s(kU);hFr=r(zxt,"TFDebertaModel"),zxt.forEach(t),pFr=r($qe," (DeBERTa model)"),$qe.forEach(t),_Fr=i(D),BM=n(D,"LI",{});var kqe=s(BM);LTe=n(kqe,"STRONG",{});var Qxt=s(LTe);uFr=r(Qxt,"deberta-v2"),Qxt.forEach(t),bFr=r(kqe," \u2014 "),SU=n(kqe,"A",{href:!0});var Wxt=s(SU);vFr=r(Wxt,"TFDebertaV2Model"),Wxt.forEach(t),FFr=r(kqe," (DeBERTa-v2 model)"),kqe.forEach(t),TFr=i(D),NM=n(D,"LI",{});var Sqe=s(NM);yTe=n(Sqe,"STRONG",{});var Hxt=s(yTe);MFr=r(Hxt,"deit"),Hxt.forEach(t),EFr=r(Sqe," \u2014 "),RU=n(Sqe,"A",{href:!0});var Uxt=s(RU);CFr=r(Uxt,"TFDeiTModel"),Uxt.forEach(t),wFr=r(Sqe," (DeiT model)"),Sqe.forEach(t),AFr=i(D),IM=n(D,"LI",{});var Rqe=s(IM);xTe=n(Rqe,"STRONG",{});var Jxt=s(xTe);LFr=r(Jxt,"distilbert"),Jxt.forEach(t),yFr=r(Rqe," \u2014 "),PU=n(Rqe,"A",{href:!0});var Yxt=s(PU);xFr=r(Yxt,"TFDistilBertModel"),Yxt.forEach(t),$Fr=r(Rqe," (DistilBERT model)"),Rqe.forEach(t),kFr=i(D),qM=n(D,"LI",{});var Pqe=s(qM);$Te=n(Pqe,"STRONG",{});var Kxt=s($Te);SFr=r(Kxt,"dpr"),Kxt.forEach(t),RFr=r(Pqe," \u2014 "),BU=n(Pqe,"A",{href:!0});var Zxt=s(BU);PFr=r(Zxt,"TFDPRQuestionEncoder"),Zxt.forEach(t),BFr=r(Pqe," (DPR model)"),Pqe.forEach(t),NFr=i(D),jM=n(D,"LI",{});var Bqe=s(jM);kTe=n(Bqe,"STRONG",{});var e$t=s(kTe);IFr=r(e$t,"electra"),e$t.forEach(t),qFr=r(Bqe," \u2014 "),NU=n(Bqe,"A",{href:!0});var o$t=s(NU);jFr=r(o$t,"TFElectraModel"),o$t.forEach(t),DFr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),GFr=i(D),DM=n(D,"LI",{});var Nqe=s(DM);STe=n(Nqe,"STRONG",{});var r$t=s(STe);OFr=r(r$t,"flaubert"),r$t.forEach(t),VFr=r(Nqe," \u2014 "),IU=n(Nqe,"A",{href:!0});var t$t=s(IU);XFr=r(t$t,"TFFlaubertModel"),t$t.forEach(t),zFr=r(Nqe," (FlauBERT model)"),Nqe.forEach(t),QFr=i(D),Ys=n(D,"LI",{});var qS=s(Ys);RTe=n(qS,"STRONG",{});var a$t=s(RTe);WFr=r(a$t,"funnel"),a$t.forEach(t),HFr=r(qS," \u2014 "),qU=n(qS,"A",{href:!0});var n$t=s(qU);UFr=r(n$t,"TFFunnelModel"),n$t.forEach(t),JFr=r(qS," or "),jU=n(qS,"A",{href:!0});var s$t=s(jU);YFr=r(s$t,"TFFunnelBaseModel"),s$t.forEach(t),KFr=r(qS," (Funnel Transformer model)"),qS.forEach(t),ZFr=i(D),GM=n(D,"LI",{});var Iqe=s(GM);PTe=n(Iqe,"STRONG",{});var l$t=s(PTe);eTr=r(l$t,"gpt2"),l$t.forEach(t),oTr=r(Iqe," \u2014 "),DU=n(Iqe,"A",{href:!0});var i$t=s(DU);rTr=r(i$t,"TFGPT2Model"),i$t.forEach(t),tTr=r(Iqe," (OpenAI GPT-2 model)"),Iqe.forEach(t),aTr=i(D),OM=n(D,"LI",{});var qqe=s(OM);BTe=n(qqe,"STRONG",{});var d$t=s(BTe);nTr=r(d$t,"gptj"),d$t.forEach(t),sTr=r(qqe," \u2014 "),GU=n(qqe,"A",{href:!0});var c$t=s(GU);lTr=r(c$t,"TFGPTJModel"),c$t.forEach(t),iTr=r(qqe," (GPT-J model)"),qqe.forEach(t),dTr=i(D),VM=n(D,"LI",{});var jqe=s(VM);NTe=n(jqe,"STRONG",{});var f$t=s(NTe);cTr=r(f$t,"hubert"),f$t.forEach(t),fTr=r(jqe," \u2014 "),OU=n(jqe,"A",{href:!0});var m$t=s(OU);mTr=r(m$t,"TFHubertModel"),m$t.forEach(t),gTr=r(jqe," (Hubert model)"),jqe.forEach(t),hTr=i(D),XM=n(D,"LI",{});var Dqe=s(XM);ITe=n(Dqe,"STRONG",{});var g$t=s(ITe);pTr=r(g$t,"layoutlm"),g$t.forEach(t),_Tr=r(Dqe," \u2014 "),VU=n(Dqe,"A",{href:!0});var h$t=s(VU);uTr=r(h$t,"TFLayoutLMModel"),h$t.forEach(t),bTr=r(Dqe," (LayoutLM model)"),Dqe.forEach(t),vTr=i(D),zM=n(D,"LI",{});var Gqe=s(zM);qTe=n(Gqe,"STRONG",{});var p$t=s(qTe);FTr=r(p$t,"led"),p$t.forEach(t),TTr=r(Gqe," \u2014 "),XU=n(Gqe,"A",{href:!0});var _$t=s(XU);MTr=r(_$t,"TFLEDModel"),_$t.forEach(t),ETr=r(Gqe," (LED model)"),Gqe.forEach(t),CTr=i(D),QM=n(D,"LI",{});var Oqe=s(QM);jTe=n(Oqe,"STRONG",{});var u$t=s(jTe);wTr=r(u$t,"longformer"),u$t.forEach(t),ATr=r(Oqe," \u2014 "),zU=n(Oqe,"A",{href:!0});var b$t=s(zU);LTr=r(b$t,"TFLongformerModel"),b$t.forEach(t),yTr=r(Oqe," (Longformer model)"),Oqe.forEach(t),xTr=i(D),WM=n(D,"LI",{});var Vqe=s(WM);DTe=n(Vqe,"STRONG",{});var v$t=s(DTe);$Tr=r(v$t,"lxmert"),v$t.forEach(t),kTr=r(Vqe," \u2014 "),QU=n(Vqe,"A",{href:!0});var F$t=s(QU);STr=r(F$t,"TFLxmertModel"),F$t.forEach(t),RTr=r(Vqe," (LXMERT model)"),Vqe.forEach(t),PTr=i(D),HM=n(D,"LI",{});var Xqe=s(HM);GTe=n(Xqe,"STRONG",{});var T$t=s(GTe);BTr=r(T$t,"marian"),T$t.forEach(t),NTr=r(Xqe," \u2014 "),WU=n(Xqe,"A",{href:!0});var M$t=s(WU);ITr=r(M$t,"TFMarianModel"),M$t.forEach(t),qTr=r(Xqe," (Marian model)"),Xqe.forEach(t),jTr=i(D),UM=n(D,"LI",{});var zqe=s(UM);OTe=n(zqe,"STRONG",{});var E$t=s(OTe);DTr=r(E$t,"mbart"),E$t.forEach(t),GTr=r(zqe," \u2014 "),HU=n(zqe,"A",{href:!0});var C$t=s(HU);OTr=r(C$t,"TFMBartModel"),C$t.forEach(t),VTr=r(zqe," (mBART model)"),zqe.forEach(t),XTr=i(D),JM=n(D,"LI",{});var Qqe=s(JM);VTe=n(Qqe,"STRONG",{});var w$t=s(VTe);zTr=r(w$t,"mobilebert"),w$t.forEach(t),QTr=r(Qqe," \u2014 "),UU=n(Qqe,"A",{href:!0});var A$t=s(UU);WTr=r(A$t,"TFMobileBertModel"),A$t.forEach(t),HTr=r(Qqe," (MobileBERT model)"),Qqe.forEach(t),UTr=i(D),YM=n(D,"LI",{});var Wqe=s(YM);XTe=n(Wqe,"STRONG",{});var L$t=s(XTe);JTr=r(L$t,"mpnet"),L$t.forEach(t),YTr=r(Wqe," \u2014 "),JU=n(Wqe,"A",{href:!0});var y$t=s(JU);KTr=r(y$t,"TFMPNetModel"),y$t.forEach(t),ZTr=r(Wqe," (MPNet model)"),Wqe.forEach(t),e8r=i(D),KM=n(D,"LI",{});var Hqe=s(KM);zTe=n(Hqe,"STRONG",{});var x$t=s(zTe);o8r=r(x$t,"mt5"),x$t.forEach(t),r8r=r(Hqe," \u2014 "),YU=n(Hqe,"A",{href:!0});var $$t=s(YU);t8r=r($$t,"TFMT5Model"),$$t.forEach(t),a8r=r(Hqe," (MT5 model)"),Hqe.forEach(t),n8r=i(D),ZM=n(D,"LI",{});var Uqe=s(ZM);QTe=n(Uqe,"STRONG",{});var k$t=s(QTe);s8r=r(k$t,"openai-gpt"),k$t.forEach(t),l8r=r(Uqe," \u2014 "),KU=n(Uqe,"A",{href:!0});var S$t=s(KU);i8r=r(S$t,"TFOpenAIGPTModel"),S$t.forEach(t),d8r=r(Uqe," (OpenAI GPT model)"),Uqe.forEach(t),c8r=i(D),e4=n(D,"LI",{});var Jqe=s(e4);WTe=n(Jqe,"STRONG",{});var R$t=s(WTe);f8r=r(R$t,"opt"),R$t.forEach(t),m8r=r(Jqe," \u2014 "),ZU=n(Jqe,"A",{href:!0});var P$t=s(ZU);g8r=r(P$t,"TFOPTModel"),P$t.forEach(t),h8r=r(Jqe," (OPT model)"),Jqe.forEach(t),p8r=i(D),o4=n(D,"LI",{});var Yqe=s(o4);HTe=n(Yqe,"STRONG",{});var B$t=s(HTe);_8r=r(B$t,"pegasus"),B$t.forEach(t),u8r=r(Yqe," \u2014 "),eJ=n(Yqe,"A",{href:!0});var N$t=s(eJ);b8r=r(N$t,"TFPegasusModel"),N$t.forEach(t),v8r=r(Yqe," (Pegasus model)"),Yqe.forEach(t),F8r=i(D),r4=n(D,"LI",{});var Kqe=s(r4);UTe=n(Kqe,"STRONG",{});var I$t=s(UTe);T8r=r(I$t,"regnet"),I$t.forEach(t),M8r=r(Kqe," \u2014 "),oJ=n(Kqe,"A",{href:!0});var q$t=s(oJ);E8r=r(q$t,"TFRegNetModel"),q$t.forEach(t),C8r=r(Kqe," (RegNet model)"),Kqe.forEach(t),w8r=i(D),t4=n(D,"LI",{});var Zqe=s(t4);JTe=n(Zqe,"STRONG",{});var j$t=s(JTe);A8r=r(j$t,"rembert"),j$t.forEach(t),L8r=r(Zqe," \u2014 "),rJ=n(Zqe,"A",{href:!0});var D$t=s(rJ);y8r=r(D$t,"TFRemBertModel"),D$t.forEach(t),x8r=r(Zqe," (RemBERT model)"),Zqe.forEach(t),$8r=i(D),a4=n(D,"LI",{});var eje=s(a4);YTe=n(eje,"STRONG",{});var G$t=s(YTe);k8r=r(G$t,"resnet"),G$t.forEach(t),S8r=r(eje," \u2014 "),tJ=n(eje,"A",{href:!0});var O$t=s(tJ);R8r=r(O$t,"TFResNetModel"),O$t.forEach(t),P8r=r(eje," (ResNet model)"),eje.forEach(t),B8r=i(D),n4=n(D,"LI",{});var oje=s(n4);KTe=n(oje,"STRONG",{});var V$t=s(KTe);N8r=r(V$t,"roberta"),V$t.forEach(t),I8r=r(oje," \u2014 "),aJ=n(oje,"A",{href:!0});var X$t=s(aJ);q8r=r(X$t,"TFRobertaModel"),X$t.forEach(t),j8r=r(oje," (RoBERTa model)"),oje.forEach(t),D8r=i(D),s4=n(D,"LI",{});var rje=s(s4);ZTe=n(rje,"STRONG",{});var z$t=s(ZTe);G8r=r(z$t,"roformer"),z$t.forEach(t),O8r=r(rje," \u2014 "),nJ=n(rje,"A",{href:!0});var Q$t=s(nJ);V8r=r(Q$t,"TFRoFormerModel"),Q$t.forEach(t),X8r=r(rje," (RoFormer model)"),rje.forEach(t),z8r=i(D),l4=n(D,"LI",{});var tje=s(l4);e8e=n(tje,"STRONG",{});var W$t=s(e8e);Q8r=r(W$t,"speech_to_text"),W$t.forEach(t),W8r=r(tje," \u2014 "),sJ=n(tje,"A",{href:!0});var H$t=s(sJ);H8r=r(H$t,"TFSpeech2TextModel"),H$t.forEach(t),U8r=r(tje," (Speech2Text model)"),tje.forEach(t),J8r=i(D),i4=n(D,"LI",{});var aje=s(i4);o8e=n(aje,"STRONG",{});var U$t=s(o8e);Y8r=r(U$t,"swin"),U$t.forEach(t),K8r=r(aje," \u2014 "),lJ=n(aje,"A",{href:!0});var J$t=s(lJ);Z8r=r(J$t,"TFSwinModel"),J$t.forEach(t),eMr=r(aje," (Swin Transformer model)"),aje.forEach(t),oMr=i(D),d4=n(D,"LI",{});var nje=s(d4);r8e=n(nje,"STRONG",{});var Y$t=s(r8e);rMr=r(Y$t,"t5"),Y$t.forEach(t),tMr=r(nje," \u2014 "),iJ=n(nje,"A",{href:!0});var K$t=s(iJ);aMr=r(K$t,"TFT5Model"),K$t.forEach(t),nMr=r(nje," (T5 model)"),nje.forEach(t),sMr=i(D),c4=n(D,"LI",{});var sje=s(c4);t8e=n(sje,"STRONG",{});var Z$t=s(t8e);lMr=r(Z$t,"tapas"),Z$t.forEach(t),iMr=r(sje," \u2014 "),dJ=n(sje,"A",{href:!0});var ekt=s(dJ);dMr=r(ekt,"TFTapasModel"),ekt.forEach(t),cMr=r(sje," (TAPAS model)"),sje.forEach(t),fMr=i(D),f4=n(D,"LI",{});var lje=s(f4);a8e=n(lje,"STRONG",{});var okt=s(a8e);mMr=r(okt,"transfo-xl"),okt.forEach(t),gMr=r(lje," \u2014 "),cJ=n(lje,"A",{href:!0});var rkt=s(cJ);hMr=r(rkt,"TFTransfoXLModel"),rkt.forEach(t),pMr=r(lje," (Transformer-XL model)"),lje.forEach(t),_Mr=i(D),m4=n(D,"LI",{});var ije=s(m4);n8e=n(ije,"STRONG",{});var tkt=s(n8e);uMr=r(tkt,"vit"),tkt.forEach(t),bMr=r(ije," \u2014 "),fJ=n(ije,"A",{href:!0});var akt=s(fJ);vMr=r(akt,"TFViTModel"),akt.forEach(t),FMr=r(ije," (ViT model)"),ije.forEach(t),TMr=i(D),g4=n(D,"LI",{});var dje=s(g4);s8e=n(dje,"STRONG",{});var nkt=s(s8e);MMr=r(nkt,"vit_mae"),nkt.forEach(t),EMr=r(dje," \u2014 "),mJ=n(dje,"A",{href:!0});var skt=s(mJ);CMr=r(skt,"TFViTMAEModel"),skt.forEach(t),wMr=r(dje," (ViTMAE model)"),dje.forEach(t),AMr=i(D),h4=n(D,"LI",{});var cje=s(h4);l8e=n(cje,"STRONG",{});var lkt=s(l8e);LMr=r(lkt,"wav2vec2"),lkt.forEach(t),yMr=r(cje," \u2014 "),gJ=n(cje,"A",{href:!0});var ikt=s(gJ);xMr=r(ikt,"TFWav2Vec2Model"),ikt.forEach(t),$Mr=r(cje," (Wav2Vec2 model)"),cje.forEach(t),kMr=i(D),p4=n(D,"LI",{});var fje=s(p4);i8e=n(fje,"STRONG",{});var dkt=s(i8e);SMr=r(dkt,"xlm"),dkt.forEach(t),RMr=r(fje," \u2014 "),hJ=n(fje,"A",{href:!0});var ckt=s(hJ);PMr=r(ckt,"TFXLMModel"),ckt.forEach(t),BMr=r(fje," (XLM model)"),fje.forEach(t),NMr=i(D),_4=n(D,"LI",{});var mje=s(_4);d8e=n(mje,"STRONG",{});var fkt=s(d8e);IMr=r(fkt,"xlm-roberta"),fkt.forEach(t),qMr=r(mje," \u2014 "),pJ=n(mje,"A",{href:!0});var mkt=s(pJ);jMr=r(mkt,"TFXLMRobertaModel"),mkt.forEach(t),DMr=r(mje," (XLM-RoBERTa model)"),mje.forEach(t),GMr=i(D),u4=n(D,"LI",{});var gje=s(u4);c8e=n(gje,"STRONG",{});var gkt=s(c8e);OMr=r(gkt,"xlnet"),gkt.forEach(t),VMr=r(gje," \u2014 "),_J=n(gje,"A",{href:!0});var hkt=s(_J);XMr=r(hkt,"TFXLNetModel"),hkt.forEach(t),zMr=r(gje," (XLNet model)"),gje.forEach(t),D.forEach(t),QMr=i(kl),T(b4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Eze=i(f),cc=n(f,"H2",{class:!0});var kWe=s(cc);v4=n(kWe,"A",{id:!0,class:!0,href:!0});var pkt=s(v4);f8e=n(pkt,"SPAN",{});var _kt=s(f8e);T(Z9.$$.fragment,_kt),_kt.forEach(t),pkt.forEach(t),WMr=i(kWe),m8e=n(kWe,"SPAN",{});var ukt=s(m8e);HMr=r(ukt,"TFAutoModelForPreTraining"),ukt.forEach(t),kWe.forEach(t),Cze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(ex.$$.fragment,Sl),UMr=i(Sl),fc=n(Sl,"P",{});var qte=s(fc);JMr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=n(qte,"A",{href:!0});var bkt=s(uJ);YMr=r(bkt,"from_pretrained()"),bkt.forEach(t),KMr=r(qte," class method or the "),bJ=n(qte,"A",{href:!0});var vkt=s(bJ);ZMr=r(vkt,"from_config()"),vkt.forEach(t),e4r=r(qte,` class
method.`),qte.forEach(t),o4r=i(Sl),ox=n(Sl,"P",{});var SWe=s(ox);r4r=r(SWe,"This class cannot be instantiated directly using "),g8e=n(SWe,"CODE",{});var Fkt=s(g8e);t4r=r(Fkt,"__init__()"),Fkt.forEach(t),a4r=r(SWe," (throws an error)."),SWe.forEach(t),n4r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var i7=s(Pt);T(rx.$$.fragment,i7),s4r=i(i7),h8e=n(i7,"P",{});var Tkt=s(h8e);l4r=r(Tkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tkt.forEach(t),i4r=i(i7),mc=n(i7,"P",{});var jte=s(mc);d4r=r(jte,`Note:
Loading a model from its configuration file does `),p8e=n(jte,"STRONG",{});var Mkt=s(p8e);c4r=r(Mkt,"not"),Mkt.forEach(t),f4r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(jte,"A",{href:!0});var Ekt=s(vJ);m4r=r(Ekt,"from_pretrained()"),Ekt.forEach(t),g4r=r(jte," to load the model weights."),jte.forEach(t),h4r=i(i7),T(F4.$$.fragment,i7),i7.forEach(t),p4r=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(tx.$$.fragment,Rl),_4r=i(Rl),_8e=n(Rl,"P",{});var Ckt=s(_8e);u4r=r(Ckt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ckt.forEach(t),b4r=i(Rl),ln=n(Rl,"P",{});var d7=s(ln);v4r=r(d7,"The model class to instantiate is selected based on the "),u8e=n(d7,"CODE",{});var wkt=s(u8e);F4r=r(wkt,"model_type"),wkt.forEach(t),T4r=r(d7,` property of the config object (either
passed as an argument or loaded from `),b8e=n(d7,"CODE",{});var Akt=s(b8e);M4r=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),E4r=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v8e=n(d7,"CODE",{});var Lkt=s(v8e);C4r=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),w4r=r(d7,":"),d7.forEach(t),A4r=i(Rl),se=n(Rl,"UL",{});var le=s(se);T4=n(le,"LI",{});var hje=s(T4);F8e=n(hje,"STRONG",{});var ykt=s(F8e);L4r=r(ykt,"albert"),ykt.forEach(t),y4r=r(hje," \u2014 "),FJ=n(hje,"A",{href:!0});var xkt=s(FJ);x4r=r(xkt,"TFAlbertForPreTraining"),xkt.forEach(t),$4r=r(hje," (ALBERT model)"),hje.forEach(t),k4r=i(le),M4=n(le,"LI",{});var pje=s(M4);T8e=n(pje,"STRONG",{});var $kt=s(T8e);S4r=r($kt,"bart"),$kt.forEach(t),R4r=r(pje," \u2014 "),TJ=n(pje,"A",{href:!0});var kkt=s(TJ);P4r=r(kkt,"TFBartForConditionalGeneration"),kkt.forEach(t),B4r=r(pje," (BART model)"),pje.forEach(t),N4r=i(le),E4=n(le,"LI",{});var _je=s(E4);M8e=n(_je,"STRONG",{});var Skt=s(M8e);I4r=r(Skt,"bert"),Skt.forEach(t),q4r=r(_je," \u2014 "),MJ=n(_je,"A",{href:!0});var Rkt=s(MJ);j4r=r(Rkt,"TFBertForPreTraining"),Rkt.forEach(t),D4r=r(_je," (BERT model)"),_je.forEach(t),G4r=i(le),C4=n(le,"LI",{});var uje=s(C4);E8e=n(uje,"STRONG",{});var Pkt=s(E8e);O4r=r(Pkt,"camembert"),Pkt.forEach(t),V4r=r(uje," \u2014 "),EJ=n(uje,"A",{href:!0});var Bkt=s(EJ);X4r=r(Bkt,"TFCamembertForMaskedLM"),Bkt.forEach(t),z4r=r(uje," (CamemBERT model)"),uje.forEach(t),Q4r=i(le),w4=n(le,"LI",{});var bje=s(w4);C8e=n(bje,"STRONG",{});var Nkt=s(C8e);W4r=r(Nkt,"ctrl"),Nkt.forEach(t),H4r=r(bje," \u2014 "),CJ=n(bje,"A",{href:!0});var Ikt=s(CJ);U4r=r(Ikt,"TFCTRLLMHeadModel"),Ikt.forEach(t),J4r=r(bje," (CTRL model)"),bje.forEach(t),Y4r=i(le),A4=n(le,"LI",{});var vje=s(A4);w8e=n(vje,"STRONG",{});var qkt=s(w8e);K4r=r(qkt,"distilbert"),qkt.forEach(t),Z4r=r(vje," \u2014 "),wJ=n(vje,"A",{href:!0});var jkt=s(wJ);eEr=r(jkt,"TFDistilBertForMaskedLM"),jkt.forEach(t),oEr=r(vje," (DistilBERT model)"),vje.forEach(t),rEr=i(le),L4=n(le,"LI",{});var Fje=s(L4);A8e=n(Fje,"STRONG",{});var Dkt=s(A8e);tEr=r(Dkt,"electra"),Dkt.forEach(t),aEr=r(Fje," \u2014 "),AJ=n(Fje,"A",{href:!0});var Gkt=s(AJ);nEr=r(Gkt,"TFElectraForPreTraining"),Gkt.forEach(t),sEr=r(Fje," (ELECTRA model)"),Fje.forEach(t),lEr=i(le),y4=n(le,"LI",{});var Tje=s(y4);L8e=n(Tje,"STRONG",{});var Okt=s(L8e);iEr=r(Okt,"flaubert"),Okt.forEach(t),dEr=r(Tje," \u2014 "),LJ=n(Tje,"A",{href:!0});var Vkt=s(LJ);cEr=r(Vkt,"TFFlaubertWithLMHeadModel"),Vkt.forEach(t),fEr=r(Tje," (FlauBERT model)"),Tje.forEach(t),mEr=i(le),x4=n(le,"LI",{});var Mje=s(x4);y8e=n(Mje,"STRONG",{});var Xkt=s(y8e);gEr=r(Xkt,"funnel"),Xkt.forEach(t),hEr=r(Mje," \u2014 "),yJ=n(Mje,"A",{href:!0});var zkt=s(yJ);pEr=r(zkt,"TFFunnelForPreTraining"),zkt.forEach(t),_Er=r(Mje," (Funnel Transformer model)"),Mje.forEach(t),uEr=i(le),$4=n(le,"LI",{});var Eje=s($4);x8e=n(Eje,"STRONG",{});var Qkt=s(x8e);bEr=r(Qkt,"gpt2"),Qkt.forEach(t),vEr=r(Eje," \u2014 "),xJ=n(Eje,"A",{href:!0});var Wkt=s(xJ);FEr=r(Wkt,"TFGPT2LMHeadModel"),Wkt.forEach(t),TEr=r(Eje," (OpenAI GPT-2 model)"),Eje.forEach(t),MEr=i(le),k4=n(le,"LI",{});var Cje=s(k4);$8e=n(Cje,"STRONG",{});var Hkt=s($8e);EEr=r(Hkt,"layoutlm"),Hkt.forEach(t),CEr=r(Cje," \u2014 "),$J=n(Cje,"A",{href:!0});var Ukt=s($J);wEr=r(Ukt,"TFLayoutLMForMaskedLM"),Ukt.forEach(t),AEr=r(Cje," (LayoutLM model)"),Cje.forEach(t),LEr=i(le),S4=n(le,"LI",{});var wje=s(S4);k8e=n(wje,"STRONG",{});var Jkt=s(k8e);yEr=r(Jkt,"lxmert"),Jkt.forEach(t),xEr=r(wje," \u2014 "),kJ=n(wje,"A",{href:!0});var Ykt=s(kJ);$Er=r(Ykt,"TFLxmertForPreTraining"),Ykt.forEach(t),kEr=r(wje," (LXMERT model)"),wje.forEach(t),SEr=i(le),R4=n(le,"LI",{});var Aje=s(R4);S8e=n(Aje,"STRONG",{});var Kkt=s(S8e);REr=r(Kkt,"mobilebert"),Kkt.forEach(t),PEr=r(Aje," \u2014 "),SJ=n(Aje,"A",{href:!0});var Zkt=s(SJ);BEr=r(Zkt,"TFMobileBertForPreTraining"),Zkt.forEach(t),NEr=r(Aje," (MobileBERT model)"),Aje.forEach(t),IEr=i(le),P4=n(le,"LI",{});var Lje=s(P4);R8e=n(Lje,"STRONG",{});var eSt=s(R8e);qEr=r(eSt,"mpnet"),eSt.forEach(t),jEr=r(Lje," \u2014 "),RJ=n(Lje,"A",{href:!0});var oSt=s(RJ);DEr=r(oSt,"TFMPNetForMaskedLM"),oSt.forEach(t),GEr=r(Lje," (MPNet model)"),Lje.forEach(t),OEr=i(le),B4=n(le,"LI",{});var yje=s(B4);P8e=n(yje,"STRONG",{});var rSt=s(P8e);VEr=r(rSt,"openai-gpt"),rSt.forEach(t),XEr=r(yje," \u2014 "),PJ=n(yje,"A",{href:!0});var tSt=s(PJ);zEr=r(tSt,"TFOpenAIGPTLMHeadModel"),tSt.forEach(t),QEr=r(yje," (OpenAI GPT model)"),yje.forEach(t),WEr=i(le),N4=n(le,"LI",{});var xje=s(N4);B8e=n(xje,"STRONG",{});var aSt=s(B8e);HEr=r(aSt,"roberta"),aSt.forEach(t),UEr=r(xje," \u2014 "),BJ=n(xje,"A",{href:!0});var nSt=s(BJ);JEr=r(nSt,"TFRobertaForMaskedLM"),nSt.forEach(t),YEr=r(xje," (RoBERTa model)"),xje.forEach(t),KEr=i(le),I4=n(le,"LI",{});var $je=s(I4);N8e=n($je,"STRONG",{});var sSt=s(N8e);ZEr=r(sSt,"t5"),sSt.forEach(t),eCr=r($je," \u2014 "),NJ=n($je,"A",{href:!0});var lSt=s(NJ);oCr=r(lSt,"TFT5ForConditionalGeneration"),lSt.forEach(t),rCr=r($je," (T5 model)"),$je.forEach(t),tCr=i(le),q4=n(le,"LI",{});var kje=s(q4);I8e=n(kje,"STRONG",{});var iSt=s(I8e);aCr=r(iSt,"tapas"),iSt.forEach(t),nCr=r(kje," \u2014 "),IJ=n(kje,"A",{href:!0});var dSt=s(IJ);sCr=r(dSt,"TFTapasForMaskedLM"),dSt.forEach(t),lCr=r(kje," (TAPAS model)"),kje.forEach(t),iCr=i(le),j4=n(le,"LI",{});var Sje=s(j4);q8e=n(Sje,"STRONG",{});var cSt=s(q8e);dCr=r(cSt,"transfo-xl"),cSt.forEach(t),cCr=r(Sje," \u2014 "),qJ=n(Sje,"A",{href:!0});var fSt=s(qJ);fCr=r(fSt,"TFTransfoXLLMHeadModel"),fSt.forEach(t),mCr=r(Sje," (Transformer-XL model)"),Sje.forEach(t),gCr=i(le),D4=n(le,"LI",{});var Rje=s(D4);j8e=n(Rje,"STRONG",{});var mSt=s(j8e);hCr=r(mSt,"vit_mae"),mSt.forEach(t),pCr=r(Rje," \u2014 "),jJ=n(Rje,"A",{href:!0});var gSt=s(jJ);_Cr=r(gSt,"TFViTMAEForPreTraining"),gSt.forEach(t),uCr=r(Rje," (ViTMAE model)"),Rje.forEach(t),bCr=i(le),G4=n(le,"LI",{});var Pje=s(G4);D8e=n(Pje,"STRONG",{});var hSt=s(D8e);vCr=r(hSt,"xlm"),hSt.forEach(t),FCr=r(Pje," \u2014 "),DJ=n(Pje,"A",{href:!0});var pSt=s(DJ);TCr=r(pSt,"TFXLMWithLMHeadModel"),pSt.forEach(t),MCr=r(Pje," (XLM model)"),Pje.forEach(t),ECr=i(le),O4=n(le,"LI",{});var Bje=s(O4);G8e=n(Bje,"STRONG",{});var _St=s(G8e);CCr=r(_St,"xlm-roberta"),_St.forEach(t),wCr=r(Bje," \u2014 "),GJ=n(Bje,"A",{href:!0});var uSt=s(GJ);ACr=r(uSt,"TFXLMRobertaForMaskedLM"),uSt.forEach(t),LCr=r(Bje," (XLM-RoBERTa model)"),Bje.forEach(t),yCr=i(le),V4=n(le,"LI",{});var Nje=s(V4);O8e=n(Nje,"STRONG",{});var bSt=s(O8e);xCr=r(bSt,"xlnet"),bSt.forEach(t),$Cr=r(Nje," \u2014 "),OJ=n(Nje,"A",{href:!0});var vSt=s(OJ);kCr=r(vSt,"TFXLNetLMHeadModel"),vSt.forEach(t),SCr=r(Nje," (XLNet model)"),Nje.forEach(t),le.forEach(t),RCr=i(Rl),T(X4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),wze=i(f),gc=n(f,"H2",{class:!0});var RWe=s(gc);z4=n(RWe,"A",{id:!0,class:!0,href:!0});var FSt=s(z4);V8e=n(FSt,"SPAN",{});var TSt=s(V8e);T(ax.$$.fragment,TSt),TSt.forEach(t),FSt.forEach(t),PCr=i(RWe),X8e=n(RWe,"SPAN",{});var MSt=s(X8e);BCr=r(MSt,"TFAutoModelForCausalLM"),MSt.forEach(t),RWe.forEach(t),Aze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(nx.$$.fragment,Pl),NCr=i(Pl),hc=n(Pl,"P",{});var Dte=s(hc);ICr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VJ=n(Dte,"A",{href:!0});var ESt=s(VJ);qCr=r(ESt,"from_pretrained()"),ESt.forEach(t),jCr=r(Dte," class method or the "),XJ=n(Dte,"A",{href:!0});var CSt=s(XJ);DCr=r(CSt,"from_config()"),CSt.forEach(t),GCr=r(Dte,` class
method.`),Dte.forEach(t),OCr=i(Pl),sx=n(Pl,"P",{});var PWe=s(sx);VCr=r(PWe,"This class cannot be instantiated directly using "),z8e=n(PWe,"CODE",{});var wSt=s(z8e);XCr=r(wSt,"__init__()"),wSt.forEach(t),zCr=r(PWe," (throws an error)."),PWe.forEach(t),QCr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var c7=s(Bt);T(lx.$$.fragment,c7),WCr=i(c7),Q8e=n(c7,"P",{});var ASt=s(Q8e);HCr=r(ASt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ASt.forEach(t),UCr=i(c7),pc=n(c7,"P",{});var Gte=s(pc);JCr=r(Gte,`Note:
Loading a model from its configuration file does `),W8e=n(Gte,"STRONG",{});var LSt=s(W8e);YCr=r(LSt,"not"),LSt.forEach(t),KCr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Gte,"A",{href:!0});var ySt=s(zJ);ZCr=r(ySt,"from_pretrained()"),ySt.forEach(t),e5r=r(Gte," to load the model weights."),Gte.forEach(t),o5r=i(c7),T(Q4.$$.fragment,c7),c7.forEach(t),r5r=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(ix.$$.fragment,Bl),t5r=i(Bl),H8e=n(Bl,"P",{});var xSt=s(H8e);a5r=r(xSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xSt.forEach(t),n5r=i(Bl),dn=n(Bl,"P",{});var f7=s(dn);s5r=r(f7,"The model class to instantiate is selected based on the "),U8e=n(f7,"CODE",{});var $St=s(U8e);l5r=r($St,"model_type"),$St.forEach(t),i5r=r(f7,` property of the config object (either
passed as an argument or loaded from `),J8e=n(f7,"CODE",{});var kSt=s(J8e);d5r=r(kSt,"pretrained_model_name_or_path"),kSt.forEach(t),c5r=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=n(f7,"CODE",{});var SSt=s(Y8e);f5r=r(SSt,"pretrained_model_name_or_path"),SSt.forEach(t),m5r=r(f7,":"),f7.forEach(t),g5r=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);W4=n(Ce,"LI",{});var Ije=s(W4);K8e=n(Ije,"STRONG",{});var RSt=s(K8e);h5r=r(RSt,"bert"),RSt.forEach(t),p5r=r(Ije," \u2014 "),QJ=n(Ije,"A",{href:!0});var PSt=s(QJ);_5r=r(PSt,"TFBertLMHeadModel"),PSt.forEach(t),u5r=r(Ije," (BERT model)"),Ije.forEach(t),b5r=i(Ce),H4=n(Ce,"LI",{});var qje=s(H4);Z8e=n(qje,"STRONG",{});var BSt=s(Z8e);v5r=r(BSt,"camembert"),BSt.forEach(t),F5r=r(qje," \u2014 "),WJ=n(qje,"A",{href:!0});var NSt=s(WJ);T5r=r(NSt,"TFCamembertForCausalLM"),NSt.forEach(t),M5r=r(qje," (CamemBERT model)"),qje.forEach(t),E5r=i(Ce),U4=n(Ce,"LI",{});var jje=s(U4);eMe=n(jje,"STRONG",{});var ISt=s(eMe);C5r=r(ISt,"ctrl"),ISt.forEach(t),w5r=r(jje," \u2014 "),HJ=n(jje,"A",{href:!0});var qSt=s(HJ);A5r=r(qSt,"TFCTRLLMHeadModel"),qSt.forEach(t),L5r=r(jje," (CTRL model)"),jje.forEach(t),y5r=i(Ce),J4=n(Ce,"LI",{});var Dje=s(J4);oMe=n(Dje,"STRONG",{});var jSt=s(oMe);x5r=r(jSt,"gpt2"),jSt.forEach(t),$5r=r(Dje," \u2014 "),UJ=n(Dje,"A",{href:!0});var DSt=s(UJ);k5r=r(DSt,"TFGPT2LMHeadModel"),DSt.forEach(t),S5r=r(Dje," (OpenAI GPT-2 model)"),Dje.forEach(t),R5r=i(Ce),Y4=n(Ce,"LI",{});var Gje=s(Y4);rMe=n(Gje,"STRONG",{});var GSt=s(rMe);P5r=r(GSt,"gptj"),GSt.forEach(t),B5r=r(Gje," \u2014 "),JJ=n(Gje,"A",{href:!0});var OSt=s(JJ);N5r=r(OSt,"TFGPTJForCausalLM"),OSt.forEach(t),I5r=r(Gje," (GPT-J model)"),Gje.forEach(t),q5r=i(Ce),K4=n(Ce,"LI",{});var Oje=s(K4);tMe=n(Oje,"STRONG",{});var VSt=s(tMe);j5r=r(VSt,"openai-gpt"),VSt.forEach(t),D5r=r(Oje," \u2014 "),YJ=n(Oje,"A",{href:!0});var XSt=s(YJ);G5r=r(XSt,"TFOpenAIGPTLMHeadModel"),XSt.forEach(t),O5r=r(Oje," (OpenAI GPT model)"),Oje.forEach(t),V5r=i(Ce),Z4=n(Ce,"LI",{});var Vje=s(Z4);aMe=n(Vje,"STRONG",{});var zSt=s(aMe);X5r=r(zSt,"opt"),zSt.forEach(t),z5r=r(Vje," \u2014 "),KJ=n(Vje,"A",{href:!0});var QSt=s(KJ);Q5r=r(QSt,"TFOPTForCausalLM"),QSt.forEach(t),W5r=r(Vje," (OPT model)"),Vje.forEach(t),H5r=i(Ce),eE=n(Ce,"LI",{});var Xje=s(eE);nMe=n(Xje,"STRONG",{});var WSt=s(nMe);U5r=r(WSt,"rembert"),WSt.forEach(t),J5r=r(Xje," \u2014 "),ZJ=n(Xje,"A",{href:!0});var HSt=s(ZJ);Y5r=r(HSt,"TFRemBertForCausalLM"),HSt.forEach(t),K5r=r(Xje," (RemBERT model)"),Xje.forEach(t),Z5r=i(Ce),oE=n(Ce,"LI",{});var zje=s(oE);sMe=n(zje,"STRONG",{});var USt=s(sMe);e0r=r(USt,"roberta"),USt.forEach(t),o0r=r(zje," \u2014 "),eY=n(zje,"A",{href:!0});var JSt=s(eY);r0r=r(JSt,"TFRobertaForCausalLM"),JSt.forEach(t),t0r=r(zje," (RoBERTa model)"),zje.forEach(t),a0r=i(Ce),rE=n(Ce,"LI",{});var Qje=s(rE);lMe=n(Qje,"STRONG",{});var YSt=s(lMe);n0r=r(YSt,"roformer"),YSt.forEach(t),s0r=r(Qje," \u2014 "),oY=n(Qje,"A",{href:!0});var KSt=s(oY);l0r=r(KSt,"TFRoFormerForCausalLM"),KSt.forEach(t),i0r=r(Qje," (RoFormer model)"),Qje.forEach(t),d0r=i(Ce),tE=n(Ce,"LI",{});var Wje=s(tE);iMe=n(Wje,"STRONG",{});var ZSt=s(iMe);c0r=r(ZSt,"transfo-xl"),ZSt.forEach(t),f0r=r(Wje," \u2014 "),rY=n(Wje,"A",{href:!0});var eRt=s(rY);m0r=r(eRt,"TFTransfoXLLMHeadModel"),eRt.forEach(t),g0r=r(Wje," (Transformer-XL model)"),Wje.forEach(t),h0r=i(Ce),aE=n(Ce,"LI",{});var Hje=s(aE);dMe=n(Hje,"STRONG",{});var oRt=s(dMe);p0r=r(oRt,"xlm"),oRt.forEach(t),_0r=r(Hje," \u2014 "),tY=n(Hje,"A",{href:!0});var rRt=s(tY);u0r=r(rRt,"TFXLMWithLMHeadModel"),rRt.forEach(t),b0r=r(Hje," (XLM model)"),Hje.forEach(t),v0r=i(Ce),nE=n(Ce,"LI",{});var Uje=s(nE);cMe=n(Uje,"STRONG",{});var tRt=s(cMe);F0r=r(tRt,"xlnet"),tRt.forEach(t),T0r=r(Uje," \u2014 "),aY=n(Uje,"A",{href:!0});var aRt=s(aY);M0r=r(aRt,"TFXLNetLMHeadModel"),aRt.forEach(t),E0r=r(Uje," (XLNet model)"),Uje.forEach(t),Ce.forEach(t),C0r=i(Bl),T(sE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Lze=i(f),_c=n(f,"H2",{class:!0});var BWe=s(_c);lE=n(BWe,"A",{id:!0,class:!0,href:!0});var nRt=s(lE);fMe=n(nRt,"SPAN",{});var sRt=s(fMe);T(dx.$$.fragment,sRt),sRt.forEach(t),nRt.forEach(t),w0r=i(BWe),mMe=n(BWe,"SPAN",{});var lRt=s(mMe);A0r=r(lRt,"TFAutoModelForImageClassification"),lRt.forEach(t),BWe.forEach(t),yze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(cx.$$.fragment,Nl),L0r=i(Nl),uc=n(Nl,"P",{});var Ote=s(uc);y0r=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=n(Ote,"A",{href:!0});var iRt=s(nY);x0r=r(iRt,"from_pretrained()"),iRt.forEach(t),$0r=r(Ote," class method or the "),sY=n(Ote,"A",{href:!0});var dRt=s(sY);k0r=r(dRt,"from_config()"),dRt.forEach(t),S0r=r(Ote,` class
method.`),Ote.forEach(t),R0r=i(Nl),fx=n(Nl,"P",{});var NWe=s(fx);P0r=r(NWe,"This class cannot be instantiated directly using "),gMe=n(NWe,"CODE",{});var cRt=s(gMe);B0r=r(cRt,"__init__()"),cRt.forEach(t),N0r=r(NWe," (throws an error)."),NWe.forEach(t),I0r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var m7=s(Nt);T(mx.$$.fragment,m7),q0r=i(m7),hMe=n(m7,"P",{});var fRt=s(hMe);j0r=r(fRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fRt.forEach(t),D0r=i(m7),bc=n(m7,"P",{});var Vte=s(bc);G0r=r(Vte,`Note:
Loading a model from its configuration file does `),pMe=n(Vte,"STRONG",{});var mRt=s(pMe);O0r=r(mRt,"not"),mRt.forEach(t),V0r=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(Vte,"A",{href:!0});var gRt=s(lY);X0r=r(gRt,"from_pretrained()"),gRt.forEach(t),z0r=r(Vte," to load the model weights."),Vte.forEach(t),Q0r=i(m7),T(iE.$$.fragment,m7),m7.forEach(t),W0r=i(Nl),Sr=n(Nl,"DIV",{class:!0});var Il=s(Sr);T(gx.$$.fragment,Il),H0r=i(Il),_Me=n(Il,"P",{});var hRt=s(_Me);U0r=r(hRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hRt.forEach(t),J0r=i(Il),cn=n(Il,"P",{});var g7=s(cn);Y0r=r(g7,"The model class to instantiate is selected based on the "),uMe=n(g7,"CODE",{});var pRt=s(uMe);K0r=r(pRt,"model_type"),pRt.forEach(t),Z0r=r(g7,` property of the config object (either
passed as an argument or loaded from `),bMe=n(g7,"CODE",{});var _Rt=s(bMe);ewr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),owr=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(g7,"CODE",{});var uRt=s(vMe);rwr=r(uRt,"pretrained_model_name_or_path"),uRt.forEach(t),twr=r(g7,":"),g7.forEach(t),awr=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);dE=n(ot,"LI",{});var Jje=s(dE);FMe=n(Jje,"STRONG",{});var bRt=s(FMe);nwr=r(bRt,"convnext"),bRt.forEach(t),swr=r(Jje," \u2014 "),iY=n(Jje,"A",{href:!0});var vRt=s(iY);lwr=r(vRt,"TFConvNextForImageClassification"),vRt.forEach(t),iwr=r(Jje," (ConvNeXT model)"),Jje.forEach(t),dwr=i(ot),cE=n(ot,"LI",{});var Yje=s(cE);TMe=n(Yje,"STRONG",{});var FRt=s(TMe);cwr=r(FRt,"data2vec-vision"),FRt.forEach(t),fwr=r(Yje," \u2014 "),dY=n(Yje,"A",{href:!0});var TRt=s(dY);mwr=r(TRt,"TFData2VecVisionForImageClassification"),TRt.forEach(t),gwr=r(Yje," (Data2VecVision model)"),Yje.forEach(t),hwr=i(ot),Ks=n(ot,"LI",{});var jS=s(Ks);MMe=n(jS,"STRONG",{});var MRt=s(MMe);pwr=r(MRt,"deit"),MRt.forEach(t),_wr=r(jS," \u2014 "),cY=n(jS,"A",{href:!0});var ERt=s(cY);uwr=r(ERt,"TFDeiTForImageClassification"),ERt.forEach(t),bwr=r(jS," or "),fY=n(jS,"A",{href:!0});var CRt=s(fY);vwr=r(CRt,"TFDeiTForImageClassificationWithTeacher"),CRt.forEach(t),Fwr=r(jS," (DeiT model)"),jS.forEach(t),Twr=i(ot),fE=n(ot,"LI",{});var Kje=s(fE);EMe=n(Kje,"STRONG",{});var wRt=s(EMe);Mwr=r(wRt,"regnet"),wRt.forEach(t),Ewr=r(Kje," \u2014 "),mY=n(Kje,"A",{href:!0});var ARt=s(mY);Cwr=r(ARt,"TFRegNetForImageClassification"),ARt.forEach(t),wwr=r(Kje," (RegNet model)"),Kje.forEach(t),Awr=i(ot),mE=n(ot,"LI",{});var Zje=s(mE);CMe=n(Zje,"STRONG",{});var LRt=s(CMe);Lwr=r(LRt,"resnet"),LRt.forEach(t),ywr=r(Zje," \u2014 "),gY=n(Zje,"A",{href:!0});var yRt=s(gY);xwr=r(yRt,"TFResNetForImageClassification"),yRt.forEach(t),$wr=r(Zje," (ResNet model)"),Zje.forEach(t),kwr=i(ot),gE=n(ot,"LI",{});var eDe=s(gE);wMe=n(eDe,"STRONG",{});var xRt=s(wMe);Swr=r(xRt,"swin"),xRt.forEach(t),Rwr=r(eDe," \u2014 "),hY=n(eDe,"A",{href:!0});var $Rt=s(hY);Pwr=r($Rt,"TFSwinForImageClassification"),$Rt.forEach(t),Bwr=r(eDe," (Swin Transformer model)"),eDe.forEach(t),Nwr=i(ot),hE=n(ot,"LI",{});var oDe=s(hE);AMe=n(oDe,"STRONG",{});var kRt=s(AMe);Iwr=r(kRt,"vit"),kRt.forEach(t),qwr=r(oDe," \u2014 "),pY=n(oDe,"A",{href:!0});var SRt=s(pY);jwr=r(SRt,"TFViTForImageClassification"),SRt.forEach(t),Dwr=r(oDe," (ViT model)"),oDe.forEach(t),ot.forEach(t),Gwr=i(Il),T(pE.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),xze=i(f),vc=n(f,"H2",{class:!0});var IWe=s(vc);_E=n(IWe,"A",{id:!0,class:!0,href:!0});var RRt=s(_E);LMe=n(RRt,"SPAN",{});var PRt=s(LMe);T(hx.$$.fragment,PRt),PRt.forEach(t),RRt.forEach(t),Owr=i(IWe),yMe=n(IWe,"SPAN",{});var BRt=s(yMe);Vwr=r(BRt,"TFAutoModelForMaskedLM"),BRt.forEach(t),IWe.forEach(t),$ze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(px.$$.fragment,ql),Xwr=i(ql),Fc=n(ql,"P",{});var Xte=s(Fc);zwr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Y=n(Xte,"A",{href:!0});var NRt=s(_Y);Qwr=r(NRt,"from_pretrained()"),NRt.forEach(t),Wwr=r(Xte," class method or the "),uY=n(Xte,"A",{href:!0});var IRt=s(uY);Hwr=r(IRt,"from_config()"),IRt.forEach(t),Uwr=r(Xte,` class
method.`),Xte.forEach(t),Jwr=i(ql),_x=n(ql,"P",{});var qWe=s(_x);Ywr=r(qWe,"This class cannot be instantiated directly using "),xMe=n(qWe,"CODE",{});var qRt=s(xMe);Kwr=r(qRt,"__init__()"),qRt.forEach(t),Zwr=r(qWe," (throws an error)."),qWe.forEach(t),eAr=i(ql),It=n(ql,"DIV",{class:!0});var h7=s(It);T(ux.$$.fragment,h7),oAr=i(h7),$Me=n(h7,"P",{});var jRt=s($Me);rAr=r(jRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jRt.forEach(t),tAr=i(h7),Tc=n(h7,"P",{});var zte=s(Tc);aAr=r(zte,`Note:
Loading a model from its configuration file does `),kMe=n(zte,"STRONG",{});var DRt=s(kMe);nAr=r(DRt,"not"),DRt.forEach(t),sAr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(zte,"A",{href:!0});var GRt=s(bY);lAr=r(GRt,"from_pretrained()"),GRt.forEach(t),iAr=r(zte," to load the model weights."),zte.forEach(t),dAr=i(h7),T(uE.$$.fragment,h7),h7.forEach(t),cAr=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(bx.$$.fragment,jl),fAr=i(jl),SMe=n(jl,"P",{});var ORt=s(SMe);mAr=r(ORt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ORt.forEach(t),gAr=i(jl),fn=n(jl,"P",{});var p7=s(fn);hAr=r(p7,"The model class to instantiate is selected based on the "),RMe=n(p7,"CODE",{});var VRt=s(RMe);pAr=r(VRt,"model_type"),VRt.forEach(t),_Ar=r(p7,` property of the config object (either
passed as an argument or loaded from `),PMe=n(p7,"CODE",{});var XRt=s(PMe);uAr=r(XRt,"pretrained_model_name_or_path"),XRt.forEach(t),bAr=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(p7,"CODE",{});var zRt=s(BMe);vAr=r(zRt,"pretrained_model_name_or_path"),zRt.forEach(t),FAr=r(p7,":"),p7.forEach(t),TAr=i(jl),ie=n(jl,"UL",{});var me=s(ie);bE=n(me,"LI",{});var rDe=s(bE);NMe=n(rDe,"STRONG",{});var QRt=s(NMe);MAr=r(QRt,"albert"),QRt.forEach(t),EAr=r(rDe," \u2014 "),vY=n(rDe,"A",{href:!0});var WRt=s(vY);CAr=r(WRt,"TFAlbertForMaskedLM"),WRt.forEach(t),wAr=r(rDe," (ALBERT model)"),rDe.forEach(t),AAr=i(me),vE=n(me,"LI",{});var tDe=s(vE);IMe=n(tDe,"STRONG",{});var HRt=s(IMe);LAr=r(HRt,"bert"),HRt.forEach(t),yAr=r(tDe," \u2014 "),FY=n(tDe,"A",{href:!0});var URt=s(FY);xAr=r(URt,"TFBertForMaskedLM"),URt.forEach(t),$Ar=r(tDe," (BERT model)"),tDe.forEach(t),kAr=i(me),FE=n(me,"LI",{});var aDe=s(FE);qMe=n(aDe,"STRONG",{});var JRt=s(qMe);SAr=r(JRt,"camembert"),JRt.forEach(t),RAr=r(aDe," \u2014 "),TY=n(aDe,"A",{href:!0});var YRt=s(TY);PAr=r(YRt,"TFCamembertForMaskedLM"),YRt.forEach(t),BAr=r(aDe," (CamemBERT model)"),aDe.forEach(t),NAr=i(me),TE=n(me,"LI",{});var nDe=s(TE);jMe=n(nDe,"STRONG",{});var KRt=s(jMe);IAr=r(KRt,"convbert"),KRt.forEach(t),qAr=r(nDe," \u2014 "),MY=n(nDe,"A",{href:!0});var ZRt=s(MY);jAr=r(ZRt,"TFConvBertForMaskedLM"),ZRt.forEach(t),DAr=r(nDe," (ConvBERT model)"),nDe.forEach(t),GAr=i(me),ME=n(me,"LI",{});var sDe=s(ME);DMe=n(sDe,"STRONG",{});var ePt=s(DMe);OAr=r(ePt,"deberta"),ePt.forEach(t),VAr=r(sDe," \u2014 "),EY=n(sDe,"A",{href:!0});var oPt=s(EY);XAr=r(oPt,"TFDebertaForMaskedLM"),oPt.forEach(t),zAr=r(sDe," (DeBERTa model)"),sDe.forEach(t),QAr=i(me),EE=n(me,"LI",{});var lDe=s(EE);GMe=n(lDe,"STRONG",{});var rPt=s(GMe);WAr=r(rPt,"deberta-v2"),rPt.forEach(t),HAr=r(lDe," \u2014 "),CY=n(lDe,"A",{href:!0});var tPt=s(CY);UAr=r(tPt,"TFDebertaV2ForMaskedLM"),tPt.forEach(t),JAr=r(lDe," (DeBERTa-v2 model)"),lDe.forEach(t),YAr=i(me),CE=n(me,"LI",{});var iDe=s(CE);OMe=n(iDe,"STRONG",{});var aPt=s(OMe);KAr=r(aPt,"distilbert"),aPt.forEach(t),ZAr=r(iDe," \u2014 "),wY=n(iDe,"A",{href:!0});var nPt=s(wY);e6r=r(nPt,"TFDistilBertForMaskedLM"),nPt.forEach(t),o6r=r(iDe," (DistilBERT model)"),iDe.forEach(t),r6r=i(me),wE=n(me,"LI",{});var dDe=s(wE);VMe=n(dDe,"STRONG",{});var sPt=s(VMe);t6r=r(sPt,"electra"),sPt.forEach(t),a6r=r(dDe," \u2014 "),AY=n(dDe,"A",{href:!0});var lPt=s(AY);n6r=r(lPt,"TFElectraForMaskedLM"),lPt.forEach(t),s6r=r(dDe," (ELECTRA model)"),dDe.forEach(t),l6r=i(me),AE=n(me,"LI",{});var cDe=s(AE);XMe=n(cDe,"STRONG",{});var iPt=s(XMe);i6r=r(iPt,"flaubert"),iPt.forEach(t),d6r=r(cDe," \u2014 "),LY=n(cDe,"A",{href:!0});var dPt=s(LY);c6r=r(dPt,"TFFlaubertWithLMHeadModel"),dPt.forEach(t),f6r=r(cDe," (FlauBERT model)"),cDe.forEach(t),m6r=i(me),LE=n(me,"LI",{});var fDe=s(LE);zMe=n(fDe,"STRONG",{});var cPt=s(zMe);g6r=r(cPt,"funnel"),cPt.forEach(t),h6r=r(fDe," \u2014 "),yY=n(fDe,"A",{href:!0});var fPt=s(yY);p6r=r(fPt,"TFFunnelForMaskedLM"),fPt.forEach(t),_6r=r(fDe," (Funnel Transformer model)"),fDe.forEach(t),u6r=i(me),yE=n(me,"LI",{});var mDe=s(yE);QMe=n(mDe,"STRONG",{});var mPt=s(QMe);b6r=r(mPt,"layoutlm"),mPt.forEach(t),v6r=r(mDe," \u2014 "),xY=n(mDe,"A",{href:!0});var gPt=s(xY);F6r=r(gPt,"TFLayoutLMForMaskedLM"),gPt.forEach(t),T6r=r(mDe," (LayoutLM model)"),mDe.forEach(t),M6r=i(me),xE=n(me,"LI",{});var gDe=s(xE);WMe=n(gDe,"STRONG",{});var hPt=s(WMe);E6r=r(hPt,"longformer"),hPt.forEach(t),C6r=r(gDe," \u2014 "),$Y=n(gDe,"A",{href:!0});var pPt=s($Y);w6r=r(pPt,"TFLongformerForMaskedLM"),pPt.forEach(t),A6r=r(gDe," (Longformer model)"),gDe.forEach(t),L6r=i(me),$E=n(me,"LI",{});var hDe=s($E);HMe=n(hDe,"STRONG",{});var _Pt=s(HMe);y6r=r(_Pt,"mobilebert"),_Pt.forEach(t),x6r=r(hDe," \u2014 "),kY=n(hDe,"A",{href:!0});var uPt=s(kY);$6r=r(uPt,"TFMobileBertForMaskedLM"),uPt.forEach(t),k6r=r(hDe," (MobileBERT model)"),hDe.forEach(t),S6r=i(me),kE=n(me,"LI",{});var pDe=s(kE);UMe=n(pDe,"STRONG",{});var bPt=s(UMe);R6r=r(bPt,"mpnet"),bPt.forEach(t),P6r=r(pDe," \u2014 "),SY=n(pDe,"A",{href:!0});var vPt=s(SY);B6r=r(vPt,"TFMPNetForMaskedLM"),vPt.forEach(t),N6r=r(pDe," (MPNet model)"),pDe.forEach(t),I6r=i(me),SE=n(me,"LI",{});var _De=s(SE);JMe=n(_De,"STRONG",{});var FPt=s(JMe);q6r=r(FPt,"rembert"),FPt.forEach(t),j6r=r(_De," \u2014 "),RY=n(_De,"A",{href:!0});var TPt=s(RY);D6r=r(TPt,"TFRemBertForMaskedLM"),TPt.forEach(t),G6r=r(_De," (RemBERT model)"),_De.forEach(t),O6r=i(me),RE=n(me,"LI",{});var uDe=s(RE);YMe=n(uDe,"STRONG",{});var MPt=s(YMe);V6r=r(MPt,"roberta"),MPt.forEach(t),X6r=r(uDe," \u2014 "),PY=n(uDe,"A",{href:!0});var EPt=s(PY);z6r=r(EPt,"TFRobertaForMaskedLM"),EPt.forEach(t),Q6r=r(uDe," (RoBERTa model)"),uDe.forEach(t),W6r=i(me),PE=n(me,"LI",{});var bDe=s(PE);KMe=n(bDe,"STRONG",{});var CPt=s(KMe);H6r=r(CPt,"roformer"),CPt.forEach(t),U6r=r(bDe," \u2014 "),BY=n(bDe,"A",{href:!0});var wPt=s(BY);J6r=r(wPt,"TFRoFormerForMaskedLM"),wPt.forEach(t),Y6r=r(bDe," (RoFormer model)"),bDe.forEach(t),K6r=i(me),BE=n(me,"LI",{});var vDe=s(BE);ZMe=n(vDe,"STRONG",{});var APt=s(ZMe);Z6r=r(APt,"tapas"),APt.forEach(t),e7r=r(vDe," \u2014 "),NY=n(vDe,"A",{href:!0});var LPt=s(NY);o7r=r(LPt,"TFTapasForMaskedLM"),LPt.forEach(t),r7r=r(vDe," (TAPAS model)"),vDe.forEach(t),t7r=i(me),NE=n(me,"LI",{});var FDe=s(NE);e4e=n(FDe,"STRONG",{});var yPt=s(e4e);a7r=r(yPt,"xlm"),yPt.forEach(t),n7r=r(FDe," \u2014 "),IY=n(FDe,"A",{href:!0});var xPt=s(IY);s7r=r(xPt,"TFXLMWithLMHeadModel"),xPt.forEach(t),l7r=r(FDe," (XLM model)"),FDe.forEach(t),i7r=i(me),IE=n(me,"LI",{});var TDe=s(IE);o4e=n(TDe,"STRONG",{});var $Pt=s(o4e);d7r=r($Pt,"xlm-roberta"),$Pt.forEach(t),c7r=r(TDe," \u2014 "),qY=n(TDe,"A",{href:!0});var kPt=s(qY);f7r=r(kPt,"TFXLMRobertaForMaskedLM"),kPt.forEach(t),m7r=r(TDe," (XLM-RoBERTa model)"),TDe.forEach(t),me.forEach(t),g7r=i(jl),T(qE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),kze=i(f),Mc=n(f,"H2",{class:!0});var jWe=s(Mc);jE=n(jWe,"A",{id:!0,class:!0,href:!0});var SPt=s(jE);r4e=n(SPt,"SPAN",{});var RPt=s(r4e);T(vx.$$.fragment,RPt),RPt.forEach(t),SPt.forEach(t),h7r=i(jWe),t4e=n(jWe,"SPAN",{});var PPt=s(t4e);p7r=r(PPt,"TFAutoModelForSeq2SeqLM"),PPt.forEach(t),jWe.forEach(t),Sze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(Fx.$$.fragment,Dl),_7r=i(Dl),Ec=n(Dl,"P",{});var Qte=s(Ec);u7r=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=n(Qte,"A",{href:!0});var BPt=s(jY);b7r=r(BPt,"from_pretrained()"),BPt.forEach(t),v7r=r(Qte," class method or the "),DY=n(Qte,"A",{href:!0});var NPt=s(DY);F7r=r(NPt,"from_config()"),NPt.forEach(t),T7r=r(Qte,` class
method.`),Qte.forEach(t),M7r=i(Dl),Tx=n(Dl,"P",{});var DWe=s(Tx);E7r=r(DWe,"This class cannot be instantiated directly using "),a4e=n(DWe,"CODE",{});var IPt=s(a4e);C7r=r(IPt,"__init__()"),IPt.forEach(t),w7r=r(DWe," (throws an error)."),DWe.forEach(t),A7r=i(Dl),qt=n(Dl,"DIV",{class:!0});var _7=s(qt);T(Mx.$$.fragment,_7),L7r=i(_7),n4e=n(_7,"P",{});var qPt=s(n4e);y7r=r(qPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qPt.forEach(t),x7r=i(_7),Cc=n(_7,"P",{});var Wte=s(Cc);$7r=r(Wte,`Note:
Loading a model from its configuration file does `),s4e=n(Wte,"STRONG",{});var jPt=s(s4e);k7r=r(jPt,"not"),jPt.forEach(t),S7r=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(Wte,"A",{href:!0});var DPt=s(GY);R7r=r(DPt,"from_pretrained()"),DPt.forEach(t),P7r=r(Wte," to load the model weights."),Wte.forEach(t),B7r=i(_7),T(DE.$$.fragment,_7),_7.forEach(t),N7r=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Ex.$$.fragment,Gl),I7r=i(Gl),l4e=n(Gl,"P",{});var GPt=s(l4e);q7r=r(GPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GPt.forEach(t),j7r=i(Gl),mn=n(Gl,"P",{});var u7=s(mn);D7r=r(u7,"The model class to instantiate is selected based on the "),i4e=n(u7,"CODE",{});var OPt=s(i4e);G7r=r(OPt,"model_type"),OPt.forEach(t),O7r=r(u7,` property of the config object (either
passed as an argument or loaded from `),d4e=n(u7,"CODE",{});var VPt=s(d4e);V7r=r(VPt,"pretrained_model_name_or_path"),VPt.forEach(t),X7r=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(u7,"CODE",{});var XPt=s(c4e);z7r=r(XPt,"pretrained_model_name_or_path"),XPt.forEach(t),Q7r=r(u7,":"),u7.forEach(t),W7r=i(Gl),ye=n(Gl,"UL",{});var Ne=s(ye);GE=n(Ne,"LI",{});var MDe=s(GE);f4e=n(MDe,"STRONG",{});var zPt=s(f4e);H7r=r(zPt,"bart"),zPt.forEach(t),U7r=r(MDe," \u2014 "),OY=n(MDe,"A",{href:!0});var QPt=s(OY);J7r=r(QPt,"TFBartForConditionalGeneration"),QPt.forEach(t),Y7r=r(MDe," (BART model)"),MDe.forEach(t),K7r=i(Ne),OE=n(Ne,"LI",{});var EDe=s(OE);m4e=n(EDe,"STRONG",{});var WPt=s(m4e);Z7r=r(WPt,"blenderbot"),WPt.forEach(t),eLr=r(EDe," \u2014 "),VY=n(EDe,"A",{href:!0});var HPt=s(VY);oLr=r(HPt,"TFBlenderbotForConditionalGeneration"),HPt.forEach(t),rLr=r(EDe," (Blenderbot model)"),EDe.forEach(t),tLr=i(Ne),VE=n(Ne,"LI",{});var CDe=s(VE);g4e=n(CDe,"STRONG",{});var UPt=s(g4e);aLr=r(UPt,"blenderbot-small"),UPt.forEach(t),nLr=r(CDe," \u2014 "),XY=n(CDe,"A",{href:!0});var JPt=s(XY);sLr=r(JPt,"TFBlenderbotSmallForConditionalGeneration"),JPt.forEach(t),lLr=r(CDe," (BlenderbotSmall model)"),CDe.forEach(t),iLr=i(Ne),XE=n(Ne,"LI",{});var wDe=s(XE);h4e=n(wDe,"STRONG",{});var YPt=s(h4e);dLr=r(YPt,"encoder-decoder"),YPt.forEach(t),cLr=r(wDe," \u2014 "),zY=n(wDe,"A",{href:!0});var KPt=s(zY);fLr=r(KPt,"TFEncoderDecoderModel"),KPt.forEach(t),mLr=r(wDe," (Encoder decoder model)"),wDe.forEach(t),gLr=i(Ne),zE=n(Ne,"LI",{});var ADe=s(zE);p4e=n(ADe,"STRONG",{});var ZPt=s(p4e);hLr=r(ZPt,"led"),ZPt.forEach(t),pLr=r(ADe," \u2014 "),QY=n(ADe,"A",{href:!0});var eBt=s(QY);_Lr=r(eBt,"TFLEDForConditionalGeneration"),eBt.forEach(t),uLr=r(ADe," (LED model)"),ADe.forEach(t),bLr=i(Ne),QE=n(Ne,"LI",{});var LDe=s(QE);_4e=n(LDe,"STRONG",{});var oBt=s(_4e);vLr=r(oBt,"marian"),oBt.forEach(t),FLr=r(LDe," \u2014 "),WY=n(LDe,"A",{href:!0});var rBt=s(WY);TLr=r(rBt,"TFMarianMTModel"),rBt.forEach(t),MLr=r(LDe," (Marian model)"),LDe.forEach(t),ELr=i(Ne),WE=n(Ne,"LI",{});var yDe=s(WE);u4e=n(yDe,"STRONG",{});var tBt=s(u4e);CLr=r(tBt,"mbart"),tBt.forEach(t),wLr=r(yDe," \u2014 "),HY=n(yDe,"A",{href:!0});var aBt=s(HY);ALr=r(aBt,"TFMBartForConditionalGeneration"),aBt.forEach(t),LLr=r(yDe," (mBART model)"),yDe.forEach(t),yLr=i(Ne),HE=n(Ne,"LI",{});var xDe=s(HE);b4e=n(xDe,"STRONG",{});var nBt=s(b4e);xLr=r(nBt,"mt5"),nBt.forEach(t),$Lr=r(xDe," \u2014 "),UY=n(xDe,"A",{href:!0});var sBt=s(UY);kLr=r(sBt,"TFMT5ForConditionalGeneration"),sBt.forEach(t),SLr=r(xDe," (MT5 model)"),xDe.forEach(t),RLr=i(Ne),UE=n(Ne,"LI",{});var $De=s(UE);v4e=n($De,"STRONG",{});var lBt=s(v4e);PLr=r(lBt,"pegasus"),lBt.forEach(t),BLr=r($De," \u2014 "),JY=n($De,"A",{href:!0});var iBt=s(JY);NLr=r(iBt,"TFPegasusForConditionalGeneration"),iBt.forEach(t),ILr=r($De," (Pegasus model)"),$De.forEach(t),qLr=i(Ne),JE=n(Ne,"LI",{});var kDe=s(JE);F4e=n(kDe,"STRONG",{});var dBt=s(F4e);jLr=r(dBt,"t5"),dBt.forEach(t),DLr=r(kDe," \u2014 "),YY=n(kDe,"A",{href:!0});var cBt=s(YY);GLr=r(cBt,"TFT5ForConditionalGeneration"),cBt.forEach(t),OLr=r(kDe," (T5 model)"),kDe.forEach(t),Ne.forEach(t),VLr=i(Gl),T(YE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Rze=i(f),wc=n(f,"H2",{class:!0});var GWe=s(wc);KE=n(GWe,"A",{id:!0,class:!0,href:!0});var fBt=s(KE);T4e=n(fBt,"SPAN",{});var mBt=s(T4e);T(Cx.$$.fragment,mBt),mBt.forEach(t),fBt.forEach(t),XLr=i(GWe),M4e=n(GWe,"SPAN",{});var gBt=s(M4e);zLr=r(gBt,"TFAutoModelForSequenceClassification"),gBt.forEach(t),GWe.forEach(t),Pze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(wx.$$.fragment,Ol),QLr=i(Ol),Ac=n(Ol,"P",{});var Hte=s(Ac);WLr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KY=n(Hte,"A",{href:!0});var hBt=s(KY);HLr=r(hBt,"from_pretrained()"),hBt.forEach(t),ULr=r(Hte," class method or the "),ZY=n(Hte,"A",{href:!0});var pBt=s(ZY);JLr=r(pBt,"from_config()"),pBt.forEach(t),YLr=r(Hte,` class
method.`),Hte.forEach(t),KLr=i(Ol),Ax=n(Ol,"P",{});var OWe=s(Ax);ZLr=r(OWe,"This class cannot be instantiated directly using "),E4e=n(OWe,"CODE",{});var _Bt=s(E4e);eyr=r(_Bt,"__init__()"),_Bt.forEach(t),oyr=r(OWe," (throws an error)."),OWe.forEach(t),ryr=i(Ol),jt=n(Ol,"DIV",{class:!0});var b7=s(jt);T(Lx.$$.fragment,b7),tyr=i(b7),C4e=n(b7,"P",{});var uBt=s(C4e);ayr=r(uBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uBt.forEach(t),nyr=i(b7),Lc=n(b7,"P",{});var Ute=s(Lc);syr=r(Ute,`Note:
Loading a model from its configuration file does `),w4e=n(Ute,"STRONG",{});var bBt=s(w4e);lyr=r(bBt,"not"),bBt.forEach(t),iyr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Ute,"A",{href:!0});var vBt=s(eK);dyr=r(vBt,"from_pretrained()"),vBt.forEach(t),cyr=r(Ute," to load the model weights."),Ute.forEach(t),fyr=i(b7),T(ZE.$$.fragment,b7),b7.forEach(t),myr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(yx.$$.fragment,Vl),gyr=i(Vl),A4e=n(Vl,"P",{});var FBt=s(A4e);hyr=r(FBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FBt.forEach(t),pyr=i(Vl),gn=n(Vl,"P",{});var v7=s(gn);_yr=r(v7,"The model class to instantiate is selected based on the "),L4e=n(v7,"CODE",{});var TBt=s(L4e);uyr=r(TBt,"model_type"),TBt.forEach(t),byr=r(v7,` property of the config object (either
passed as an argument or loaded from `),y4e=n(v7,"CODE",{});var MBt=s(y4e);vyr=r(MBt,"pretrained_model_name_or_path"),MBt.forEach(t),Fyr=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(v7,"CODE",{});var EBt=s(x4e);Tyr=r(EBt,"pretrained_model_name_or_path"),EBt.forEach(t),Myr=r(v7,":"),v7.forEach(t),Eyr=i(Vl),te=n(Vl,"UL",{});var ne=s(te);eC=n(ne,"LI",{});var SDe=s(eC);$4e=n(SDe,"STRONG",{});var CBt=s($4e);Cyr=r(CBt,"albert"),CBt.forEach(t),wyr=r(SDe," \u2014 "),oK=n(SDe,"A",{href:!0});var wBt=s(oK);Ayr=r(wBt,"TFAlbertForSequenceClassification"),wBt.forEach(t),Lyr=r(SDe," (ALBERT model)"),SDe.forEach(t),yyr=i(ne),oC=n(ne,"LI",{});var RDe=s(oC);k4e=n(RDe,"STRONG",{});var ABt=s(k4e);xyr=r(ABt,"bert"),ABt.forEach(t),$yr=r(RDe," \u2014 "),rK=n(RDe,"A",{href:!0});var LBt=s(rK);kyr=r(LBt,"TFBertForSequenceClassification"),LBt.forEach(t),Syr=r(RDe," (BERT model)"),RDe.forEach(t),Ryr=i(ne),rC=n(ne,"LI",{});var PDe=s(rC);S4e=n(PDe,"STRONG",{});var yBt=s(S4e);Pyr=r(yBt,"camembert"),yBt.forEach(t),Byr=r(PDe," \u2014 "),tK=n(PDe,"A",{href:!0});var xBt=s(tK);Nyr=r(xBt,"TFCamembertForSequenceClassification"),xBt.forEach(t),Iyr=r(PDe," (CamemBERT model)"),PDe.forEach(t),qyr=i(ne),tC=n(ne,"LI",{});var BDe=s(tC);R4e=n(BDe,"STRONG",{});var $Bt=s(R4e);jyr=r($Bt,"convbert"),$Bt.forEach(t),Dyr=r(BDe," \u2014 "),aK=n(BDe,"A",{href:!0});var kBt=s(aK);Gyr=r(kBt,"TFConvBertForSequenceClassification"),kBt.forEach(t),Oyr=r(BDe," (ConvBERT model)"),BDe.forEach(t),Vyr=i(ne),aC=n(ne,"LI",{});var NDe=s(aC);P4e=n(NDe,"STRONG",{});var SBt=s(P4e);Xyr=r(SBt,"ctrl"),SBt.forEach(t),zyr=r(NDe," \u2014 "),nK=n(NDe,"A",{href:!0});var RBt=s(nK);Qyr=r(RBt,"TFCTRLForSequenceClassification"),RBt.forEach(t),Wyr=r(NDe," (CTRL model)"),NDe.forEach(t),Hyr=i(ne),nC=n(ne,"LI",{});var IDe=s(nC);B4e=n(IDe,"STRONG",{});var PBt=s(B4e);Uyr=r(PBt,"deberta"),PBt.forEach(t),Jyr=r(IDe," \u2014 "),sK=n(IDe,"A",{href:!0});var BBt=s(sK);Yyr=r(BBt,"TFDebertaForSequenceClassification"),BBt.forEach(t),Kyr=r(IDe," (DeBERTa model)"),IDe.forEach(t),Zyr=i(ne),sC=n(ne,"LI",{});var qDe=s(sC);N4e=n(qDe,"STRONG",{});var NBt=s(N4e);e9r=r(NBt,"deberta-v2"),NBt.forEach(t),o9r=r(qDe," \u2014 "),lK=n(qDe,"A",{href:!0});var IBt=s(lK);r9r=r(IBt,"TFDebertaV2ForSequenceClassification"),IBt.forEach(t),t9r=r(qDe," (DeBERTa-v2 model)"),qDe.forEach(t),a9r=i(ne),lC=n(ne,"LI",{});var jDe=s(lC);I4e=n(jDe,"STRONG",{});var qBt=s(I4e);n9r=r(qBt,"distilbert"),qBt.forEach(t),s9r=r(jDe," \u2014 "),iK=n(jDe,"A",{href:!0});var jBt=s(iK);l9r=r(jBt,"TFDistilBertForSequenceClassification"),jBt.forEach(t),i9r=r(jDe," (DistilBERT model)"),jDe.forEach(t),d9r=i(ne),iC=n(ne,"LI",{});var DDe=s(iC);q4e=n(DDe,"STRONG",{});var DBt=s(q4e);c9r=r(DBt,"electra"),DBt.forEach(t),f9r=r(DDe," \u2014 "),dK=n(DDe,"A",{href:!0});var GBt=s(dK);m9r=r(GBt,"TFElectraForSequenceClassification"),GBt.forEach(t),g9r=r(DDe," (ELECTRA model)"),DDe.forEach(t),h9r=i(ne),dC=n(ne,"LI",{});var GDe=s(dC);j4e=n(GDe,"STRONG",{});var OBt=s(j4e);p9r=r(OBt,"flaubert"),OBt.forEach(t),_9r=r(GDe," \u2014 "),cK=n(GDe,"A",{href:!0});var VBt=s(cK);u9r=r(VBt,"TFFlaubertForSequenceClassification"),VBt.forEach(t),b9r=r(GDe," (FlauBERT model)"),GDe.forEach(t),v9r=i(ne),cC=n(ne,"LI",{});var ODe=s(cC);D4e=n(ODe,"STRONG",{});var XBt=s(D4e);F9r=r(XBt,"funnel"),XBt.forEach(t),T9r=r(ODe," \u2014 "),fK=n(ODe,"A",{href:!0});var zBt=s(fK);M9r=r(zBt,"TFFunnelForSequenceClassification"),zBt.forEach(t),E9r=r(ODe," (Funnel Transformer model)"),ODe.forEach(t),C9r=i(ne),fC=n(ne,"LI",{});var VDe=s(fC);G4e=n(VDe,"STRONG",{});var QBt=s(G4e);w9r=r(QBt,"gpt2"),QBt.forEach(t),A9r=r(VDe," \u2014 "),mK=n(VDe,"A",{href:!0});var WBt=s(mK);L9r=r(WBt,"TFGPT2ForSequenceClassification"),WBt.forEach(t),y9r=r(VDe," (OpenAI GPT-2 model)"),VDe.forEach(t),x9r=i(ne),mC=n(ne,"LI",{});var XDe=s(mC);O4e=n(XDe,"STRONG",{});var HBt=s(O4e);$9r=r(HBt,"gptj"),HBt.forEach(t),k9r=r(XDe," \u2014 "),gK=n(XDe,"A",{href:!0});var UBt=s(gK);S9r=r(UBt,"TFGPTJForSequenceClassification"),UBt.forEach(t),R9r=r(XDe," (GPT-J model)"),XDe.forEach(t),P9r=i(ne),gC=n(ne,"LI",{});var zDe=s(gC);V4e=n(zDe,"STRONG",{});var JBt=s(V4e);B9r=r(JBt,"layoutlm"),JBt.forEach(t),N9r=r(zDe," \u2014 "),hK=n(zDe,"A",{href:!0});var YBt=s(hK);I9r=r(YBt,"TFLayoutLMForSequenceClassification"),YBt.forEach(t),q9r=r(zDe," (LayoutLM model)"),zDe.forEach(t),j9r=i(ne),hC=n(ne,"LI",{});var QDe=s(hC);X4e=n(QDe,"STRONG",{});var KBt=s(X4e);D9r=r(KBt,"longformer"),KBt.forEach(t),G9r=r(QDe," \u2014 "),pK=n(QDe,"A",{href:!0});var ZBt=s(pK);O9r=r(ZBt,"TFLongformerForSequenceClassification"),ZBt.forEach(t),V9r=r(QDe," (Longformer model)"),QDe.forEach(t),X9r=i(ne),pC=n(ne,"LI",{});var WDe=s(pC);z4e=n(WDe,"STRONG",{});var eNt=s(z4e);z9r=r(eNt,"mobilebert"),eNt.forEach(t),Q9r=r(WDe," \u2014 "),_K=n(WDe,"A",{href:!0});var oNt=s(_K);W9r=r(oNt,"TFMobileBertForSequenceClassification"),oNt.forEach(t),H9r=r(WDe," (MobileBERT model)"),WDe.forEach(t),U9r=i(ne),_C=n(ne,"LI",{});var HDe=s(_C);Q4e=n(HDe,"STRONG",{});var rNt=s(Q4e);J9r=r(rNt,"mpnet"),rNt.forEach(t),Y9r=r(HDe," \u2014 "),uK=n(HDe,"A",{href:!0});var tNt=s(uK);K9r=r(tNt,"TFMPNetForSequenceClassification"),tNt.forEach(t),Z9r=r(HDe," (MPNet model)"),HDe.forEach(t),exr=i(ne),uC=n(ne,"LI",{});var UDe=s(uC);W4e=n(UDe,"STRONG",{});var aNt=s(W4e);oxr=r(aNt,"openai-gpt"),aNt.forEach(t),rxr=r(UDe," \u2014 "),bK=n(UDe,"A",{href:!0});var nNt=s(bK);txr=r(nNt,"TFOpenAIGPTForSequenceClassification"),nNt.forEach(t),axr=r(UDe," (OpenAI GPT model)"),UDe.forEach(t),nxr=i(ne),bC=n(ne,"LI",{});var JDe=s(bC);H4e=n(JDe,"STRONG",{});var sNt=s(H4e);sxr=r(sNt,"rembert"),sNt.forEach(t),lxr=r(JDe," \u2014 "),vK=n(JDe,"A",{href:!0});var lNt=s(vK);ixr=r(lNt,"TFRemBertForSequenceClassification"),lNt.forEach(t),dxr=r(JDe," (RemBERT model)"),JDe.forEach(t),cxr=i(ne),vC=n(ne,"LI",{});var YDe=s(vC);U4e=n(YDe,"STRONG",{});var iNt=s(U4e);fxr=r(iNt,"roberta"),iNt.forEach(t),mxr=r(YDe," \u2014 "),FK=n(YDe,"A",{href:!0});var dNt=s(FK);gxr=r(dNt,"TFRobertaForSequenceClassification"),dNt.forEach(t),hxr=r(YDe," (RoBERTa model)"),YDe.forEach(t),pxr=i(ne),FC=n(ne,"LI",{});var KDe=s(FC);J4e=n(KDe,"STRONG",{});var cNt=s(J4e);_xr=r(cNt,"roformer"),cNt.forEach(t),uxr=r(KDe," \u2014 "),TK=n(KDe,"A",{href:!0});var fNt=s(TK);bxr=r(fNt,"TFRoFormerForSequenceClassification"),fNt.forEach(t),vxr=r(KDe," (RoFormer model)"),KDe.forEach(t),Fxr=i(ne),TC=n(ne,"LI",{});var ZDe=s(TC);Y4e=n(ZDe,"STRONG",{});var mNt=s(Y4e);Txr=r(mNt,"tapas"),mNt.forEach(t),Mxr=r(ZDe," \u2014 "),MK=n(ZDe,"A",{href:!0});var gNt=s(MK);Exr=r(gNt,"TFTapasForSequenceClassification"),gNt.forEach(t),Cxr=r(ZDe," (TAPAS model)"),ZDe.forEach(t),wxr=i(ne),MC=n(ne,"LI",{});var eGe=s(MC);K4e=n(eGe,"STRONG",{});var hNt=s(K4e);Axr=r(hNt,"transfo-xl"),hNt.forEach(t),Lxr=r(eGe," \u2014 "),EK=n(eGe,"A",{href:!0});var pNt=s(EK);yxr=r(pNt,"TFTransfoXLForSequenceClassification"),pNt.forEach(t),xxr=r(eGe," (Transformer-XL model)"),eGe.forEach(t),$xr=i(ne),EC=n(ne,"LI",{});var oGe=s(EC);Z4e=n(oGe,"STRONG",{});var _Nt=s(Z4e);kxr=r(_Nt,"xlm"),_Nt.forEach(t),Sxr=r(oGe," \u2014 "),CK=n(oGe,"A",{href:!0});var uNt=s(CK);Rxr=r(uNt,"TFXLMForSequenceClassification"),uNt.forEach(t),Pxr=r(oGe," (XLM model)"),oGe.forEach(t),Bxr=i(ne),CC=n(ne,"LI",{});var rGe=s(CC);eEe=n(rGe,"STRONG",{});var bNt=s(eEe);Nxr=r(bNt,"xlm-roberta"),bNt.forEach(t),Ixr=r(rGe," \u2014 "),wK=n(rGe,"A",{href:!0});var vNt=s(wK);qxr=r(vNt,"TFXLMRobertaForSequenceClassification"),vNt.forEach(t),jxr=r(rGe," (XLM-RoBERTa model)"),rGe.forEach(t),Dxr=i(ne),wC=n(ne,"LI",{});var tGe=s(wC);oEe=n(tGe,"STRONG",{});var FNt=s(oEe);Gxr=r(FNt,"xlnet"),FNt.forEach(t),Oxr=r(tGe," \u2014 "),AK=n(tGe,"A",{href:!0});var TNt=s(AK);Vxr=r(TNt,"TFXLNetForSequenceClassification"),TNt.forEach(t),Xxr=r(tGe," (XLNet model)"),tGe.forEach(t),ne.forEach(t),zxr=i(Vl),T(AC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Bze=i(f),yc=n(f,"H2",{class:!0});var VWe=s(yc);LC=n(VWe,"A",{id:!0,class:!0,href:!0});var MNt=s(LC);rEe=n(MNt,"SPAN",{});var ENt=s(rEe);T(xx.$$.fragment,ENt),ENt.forEach(t),MNt.forEach(t),Qxr=i(VWe),tEe=n(VWe,"SPAN",{});var CNt=s(tEe);Wxr=r(CNt,"TFAutoModelForMultipleChoice"),CNt.forEach(t),VWe.forEach(t),Nze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T($x.$$.fragment,Xl),Hxr=i(Xl),xc=n(Xl,"P",{});var Jte=s(xc);Uxr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LK=n(Jte,"A",{href:!0});var wNt=s(LK);Jxr=r(wNt,"from_pretrained()"),wNt.forEach(t),Yxr=r(Jte," class method or the "),yK=n(Jte,"A",{href:!0});var ANt=s(yK);Kxr=r(ANt,"from_config()"),ANt.forEach(t),Zxr=r(Jte,` class
method.`),Jte.forEach(t),e$r=i(Xl),kx=n(Xl,"P",{});var XWe=s(kx);o$r=r(XWe,"This class cannot be instantiated directly using "),aEe=n(XWe,"CODE",{});var LNt=s(aEe);r$r=r(LNt,"__init__()"),LNt.forEach(t),t$r=r(XWe," (throws an error)."),XWe.forEach(t),a$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var F7=s(Dt);T(Sx.$$.fragment,F7),n$r=i(F7),nEe=n(F7,"P",{});var yNt=s(nEe);s$r=r(yNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yNt.forEach(t),l$r=i(F7),$c=n(F7,"P",{});var Yte=s($c);i$r=r(Yte,`Note:
Loading a model from its configuration file does `),sEe=n(Yte,"STRONG",{});var xNt=s(sEe);d$r=r(xNt,"not"),xNt.forEach(t),c$r=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(Yte,"A",{href:!0});var $Nt=s(xK);f$r=r($Nt,"from_pretrained()"),$Nt.forEach(t),m$r=r(Yte," to load the model weights."),Yte.forEach(t),g$r=i(F7),T(yC.$$.fragment,F7),F7.forEach(t),h$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Rx.$$.fragment,zl),p$r=i(zl),lEe=n(zl,"P",{});var kNt=s(lEe);_$r=r(kNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kNt.forEach(t),u$r=i(zl),hn=n(zl,"P",{});var T7=s(hn);b$r=r(T7,"The model class to instantiate is selected based on the "),iEe=n(T7,"CODE",{});var SNt=s(iEe);v$r=r(SNt,"model_type"),SNt.forEach(t),F$r=r(T7,` property of the config object (either
passed as an argument or loaded from `),dEe=n(T7,"CODE",{});var RNt=s(dEe);T$r=r(RNt,"pretrained_model_name_or_path"),RNt.forEach(t),M$r=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=n(T7,"CODE",{});var PNt=s(cEe);E$r=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),C$r=r(T7,":"),T7.forEach(t),w$r=i(zl),ue=n(zl,"UL",{});var Fe=s(ue);xC=n(Fe,"LI",{});var aGe=s(xC);fEe=n(aGe,"STRONG",{});var BNt=s(fEe);A$r=r(BNt,"albert"),BNt.forEach(t),L$r=r(aGe," \u2014 "),$K=n(aGe,"A",{href:!0});var NNt=s($K);y$r=r(NNt,"TFAlbertForMultipleChoice"),NNt.forEach(t),x$r=r(aGe," (ALBERT model)"),aGe.forEach(t),$$r=i(Fe),$C=n(Fe,"LI",{});var nGe=s($C);mEe=n(nGe,"STRONG",{});var INt=s(mEe);k$r=r(INt,"bert"),INt.forEach(t),S$r=r(nGe," \u2014 "),kK=n(nGe,"A",{href:!0});var qNt=s(kK);R$r=r(qNt,"TFBertForMultipleChoice"),qNt.forEach(t),P$r=r(nGe," (BERT model)"),nGe.forEach(t),B$r=i(Fe),kC=n(Fe,"LI",{});var sGe=s(kC);gEe=n(sGe,"STRONG",{});var jNt=s(gEe);N$r=r(jNt,"camembert"),jNt.forEach(t),I$r=r(sGe," \u2014 "),SK=n(sGe,"A",{href:!0});var DNt=s(SK);q$r=r(DNt,"TFCamembertForMultipleChoice"),DNt.forEach(t),j$r=r(sGe," (CamemBERT model)"),sGe.forEach(t),D$r=i(Fe),SC=n(Fe,"LI",{});var lGe=s(SC);hEe=n(lGe,"STRONG",{});var GNt=s(hEe);G$r=r(GNt,"convbert"),GNt.forEach(t),O$r=r(lGe," \u2014 "),RK=n(lGe,"A",{href:!0});var ONt=s(RK);V$r=r(ONt,"TFConvBertForMultipleChoice"),ONt.forEach(t),X$r=r(lGe," (ConvBERT model)"),lGe.forEach(t),z$r=i(Fe),RC=n(Fe,"LI",{});var iGe=s(RC);pEe=n(iGe,"STRONG",{});var VNt=s(pEe);Q$r=r(VNt,"distilbert"),VNt.forEach(t),W$r=r(iGe," \u2014 "),PK=n(iGe,"A",{href:!0});var XNt=s(PK);H$r=r(XNt,"TFDistilBertForMultipleChoice"),XNt.forEach(t),U$r=r(iGe," (DistilBERT model)"),iGe.forEach(t),J$r=i(Fe),PC=n(Fe,"LI",{});var dGe=s(PC);_Ee=n(dGe,"STRONG",{});var zNt=s(_Ee);Y$r=r(zNt,"electra"),zNt.forEach(t),K$r=r(dGe," \u2014 "),BK=n(dGe,"A",{href:!0});var QNt=s(BK);Z$r=r(QNt,"TFElectraForMultipleChoice"),QNt.forEach(t),ekr=r(dGe," (ELECTRA model)"),dGe.forEach(t),okr=i(Fe),BC=n(Fe,"LI",{});var cGe=s(BC);uEe=n(cGe,"STRONG",{});var WNt=s(uEe);rkr=r(WNt,"flaubert"),WNt.forEach(t),tkr=r(cGe," \u2014 "),NK=n(cGe,"A",{href:!0});var HNt=s(NK);akr=r(HNt,"TFFlaubertForMultipleChoice"),HNt.forEach(t),nkr=r(cGe," (FlauBERT model)"),cGe.forEach(t),skr=i(Fe),NC=n(Fe,"LI",{});var fGe=s(NC);bEe=n(fGe,"STRONG",{});var UNt=s(bEe);lkr=r(UNt,"funnel"),UNt.forEach(t),ikr=r(fGe," \u2014 "),IK=n(fGe,"A",{href:!0});var JNt=s(IK);dkr=r(JNt,"TFFunnelForMultipleChoice"),JNt.forEach(t),ckr=r(fGe," (Funnel Transformer model)"),fGe.forEach(t),fkr=i(Fe),IC=n(Fe,"LI",{});var mGe=s(IC);vEe=n(mGe,"STRONG",{});var YNt=s(vEe);mkr=r(YNt,"longformer"),YNt.forEach(t),gkr=r(mGe," \u2014 "),qK=n(mGe,"A",{href:!0});var KNt=s(qK);hkr=r(KNt,"TFLongformerForMultipleChoice"),KNt.forEach(t),pkr=r(mGe," (Longformer model)"),mGe.forEach(t),_kr=i(Fe),qC=n(Fe,"LI",{});var gGe=s(qC);FEe=n(gGe,"STRONG",{});var ZNt=s(FEe);ukr=r(ZNt,"mobilebert"),ZNt.forEach(t),bkr=r(gGe," \u2014 "),jK=n(gGe,"A",{href:!0});var eIt=s(jK);vkr=r(eIt,"TFMobileBertForMultipleChoice"),eIt.forEach(t),Fkr=r(gGe," (MobileBERT model)"),gGe.forEach(t),Tkr=i(Fe),jC=n(Fe,"LI",{});var hGe=s(jC);TEe=n(hGe,"STRONG",{});var oIt=s(TEe);Mkr=r(oIt,"mpnet"),oIt.forEach(t),Ekr=r(hGe," \u2014 "),DK=n(hGe,"A",{href:!0});var rIt=s(DK);Ckr=r(rIt,"TFMPNetForMultipleChoice"),rIt.forEach(t),wkr=r(hGe," (MPNet model)"),hGe.forEach(t),Akr=i(Fe),DC=n(Fe,"LI",{});var pGe=s(DC);MEe=n(pGe,"STRONG",{});var tIt=s(MEe);Lkr=r(tIt,"rembert"),tIt.forEach(t),ykr=r(pGe," \u2014 "),GK=n(pGe,"A",{href:!0});var aIt=s(GK);xkr=r(aIt,"TFRemBertForMultipleChoice"),aIt.forEach(t),$kr=r(pGe," (RemBERT model)"),pGe.forEach(t),kkr=i(Fe),GC=n(Fe,"LI",{});var _Ge=s(GC);EEe=n(_Ge,"STRONG",{});var nIt=s(EEe);Skr=r(nIt,"roberta"),nIt.forEach(t),Rkr=r(_Ge," \u2014 "),OK=n(_Ge,"A",{href:!0});var sIt=s(OK);Pkr=r(sIt,"TFRobertaForMultipleChoice"),sIt.forEach(t),Bkr=r(_Ge," (RoBERTa model)"),_Ge.forEach(t),Nkr=i(Fe),OC=n(Fe,"LI",{});var uGe=s(OC);CEe=n(uGe,"STRONG",{});var lIt=s(CEe);Ikr=r(lIt,"roformer"),lIt.forEach(t),qkr=r(uGe," \u2014 "),VK=n(uGe,"A",{href:!0});var iIt=s(VK);jkr=r(iIt,"TFRoFormerForMultipleChoice"),iIt.forEach(t),Dkr=r(uGe," (RoFormer model)"),uGe.forEach(t),Gkr=i(Fe),VC=n(Fe,"LI",{});var bGe=s(VC);wEe=n(bGe,"STRONG",{});var dIt=s(wEe);Okr=r(dIt,"xlm"),dIt.forEach(t),Vkr=r(bGe," \u2014 "),XK=n(bGe,"A",{href:!0});var cIt=s(XK);Xkr=r(cIt,"TFXLMForMultipleChoice"),cIt.forEach(t),zkr=r(bGe," (XLM model)"),bGe.forEach(t),Qkr=i(Fe),XC=n(Fe,"LI",{});var vGe=s(XC);AEe=n(vGe,"STRONG",{});var fIt=s(AEe);Wkr=r(fIt,"xlm-roberta"),fIt.forEach(t),Hkr=r(vGe," \u2014 "),zK=n(vGe,"A",{href:!0});var mIt=s(zK);Ukr=r(mIt,"TFXLMRobertaForMultipleChoice"),mIt.forEach(t),Jkr=r(vGe," (XLM-RoBERTa model)"),vGe.forEach(t),Ykr=i(Fe),zC=n(Fe,"LI",{});var FGe=s(zC);LEe=n(FGe,"STRONG",{});var gIt=s(LEe);Kkr=r(gIt,"xlnet"),gIt.forEach(t),Zkr=r(FGe," \u2014 "),QK=n(FGe,"A",{href:!0});var hIt=s(QK);eSr=r(hIt,"TFXLNetForMultipleChoice"),hIt.forEach(t),oSr=r(FGe," (XLNet model)"),FGe.forEach(t),Fe.forEach(t),rSr=i(zl),T(QC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Ize=i(f),kc=n(f,"H2",{class:!0});var zWe=s(kc);WC=n(zWe,"A",{id:!0,class:!0,href:!0});var pIt=s(WC);yEe=n(pIt,"SPAN",{});var _It=s(yEe);T(Px.$$.fragment,_It),_It.forEach(t),pIt.forEach(t),tSr=i(zWe),xEe=n(zWe,"SPAN",{});var uIt=s(xEe);aSr=r(uIt,"TFAutoModelForNextSentencePrediction"),uIt.forEach(t),zWe.forEach(t),qze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Bx.$$.fragment,Ql),nSr=i(Ql),Sc=n(Ql,"P",{});var Kte=s(Sc);sSr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WK=n(Kte,"A",{href:!0});var bIt=s(WK);lSr=r(bIt,"from_pretrained()"),bIt.forEach(t),iSr=r(Kte," class method or the "),HK=n(Kte,"A",{href:!0});var vIt=s(HK);dSr=r(vIt,"from_config()"),vIt.forEach(t),cSr=r(Kte,` class
method.`),Kte.forEach(t),fSr=i(Ql),Nx=n(Ql,"P",{});var QWe=s(Nx);mSr=r(QWe,"This class cannot be instantiated directly using "),$Ee=n(QWe,"CODE",{});var FIt=s($Ee);gSr=r(FIt,"__init__()"),FIt.forEach(t),hSr=r(QWe," (throws an error)."),QWe.forEach(t),pSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var M7=s(Gt);T(Ix.$$.fragment,M7),_Sr=i(M7),kEe=n(M7,"P",{});var TIt=s(kEe);uSr=r(TIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TIt.forEach(t),bSr=i(M7),Rc=n(M7,"P",{});var Zte=s(Rc);vSr=r(Zte,`Note:
Loading a model from its configuration file does `),SEe=n(Zte,"STRONG",{});var MIt=s(SEe);FSr=r(MIt,"not"),MIt.forEach(t),TSr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(Zte,"A",{href:!0});var EIt=s(UK);MSr=r(EIt,"from_pretrained()"),EIt.forEach(t),ESr=r(Zte," to load the model weights."),Zte.forEach(t),CSr=i(M7),T(HC.$$.fragment,M7),M7.forEach(t),wSr=i(Ql),Ir=n(Ql,"DIV",{class:!0});var Wl=s(Ir);T(qx.$$.fragment,Wl),ASr=i(Wl),REe=n(Wl,"P",{});var CIt=s(REe);LSr=r(CIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CIt.forEach(t),ySr=i(Wl),pn=n(Wl,"P",{});var E7=s(pn);xSr=r(E7,"The model class to instantiate is selected based on the "),PEe=n(E7,"CODE",{});var wIt=s(PEe);$Sr=r(wIt,"model_type"),wIt.forEach(t),kSr=r(E7,` property of the config object (either
passed as an argument or loaded from `),BEe=n(E7,"CODE",{});var AIt=s(BEe);SSr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),RSr=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=n(E7,"CODE",{});var LIt=s(NEe);PSr=r(LIt,"pretrained_model_name_or_path"),LIt.forEach(t),BSr=r(E7,":"),E7.forEach(t),NSr=i(Wl),jx=n(Wl,"UL",{});var WWe=s(jx);UC=n(WWe,"LI",{});var TGe=s(UC);IEe=n(TGe,"STRONG",{});var yIt=s(IEe);ISr=r(yIt,"bert"),yIt.forEach(t),qSr=r(TGe," \u2014 "),JK=n(TGe,"A",{href:!0});var xIt=s(JK);jSr=r(xIt,"TFBertForNextSentencePrediction"),xIt.forEach(t),DSr=r(TGe," (BERT model)"),TGe.forEach(t),GSr=i(WWe),JC=n(WWe,"LI",{});var MGe=s(JC);qEe=n(MGe,"STRONG",{});var $It=s(qEe);OSr=r($It,"mobilebert"),$It.forEach(t),VSr=r(MGe," \u2014 "),YK=n(MGe,"A",{href:!0});var kIt=s(YK);XSr=r(kIt,"TFMobileBertForNextSentencePrediction"),kIt.forEach(t),zSr=r(MGe," (MobileBERT model)"),MGe.forEach(t),WWe.forEach(t),QSr=i(Wl),T(YC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),jze=i(f),Pc=n(f,"H2",{class:!0});var HWe=s(Pc);KC=n(HWe,"A",{id:!0,class:!0,href:!0});var SIt=s(KC);jEe=n(SIt,"SPAN",{});var RIt=s(jEe);T(Dx.$$.fragment,RIt),RIt.forEach(t),SIt.forEach(t),WSr=i(HWe),DEe=n(HWe,"SPAN",{});var PIt=s(DEe);HSr=r(PIt,"TFAutoModelForTableQuestionAnswering"),PIt.forEach(t),HWe.forEach(t),Dze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Gx.$$.fragment,Hl),USr=i(Hl),Bc=n(Hl,"P",{});var eae=s(Bc);JSr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KK=n(eae,"A",{href:!0});var BIt=s(KK);YSr=r(BIt,"from_pretrained()"),BIt.forEach(t),KSr=r(eae," class method or the "),ZK=n(eae,"A",{href:!0});var NIt=s(ZK);ZSr=r(NIt,"from_config()"),NIt.forEach(t),eRr=r(eae,` class
method.`),eae.forEach(t),oRr=i(Hl),Ox=n(Hl,"P",{});var UWe=s(Ox);rRr=r(UWe,"This class cannot be instantiated directly using "),GEe=n(UWe,"CODE",{});var IIt=s(GEe);tRr=r(IIt,"__init__()"),IIt.forEach(t),aRr=r(UWe," (throws an error)."),UWe.forEach(t),nRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var C7=s(Ot);T(Vx.$$.fragment,C7),sRr=i(C7),OEe=n(C7,"P",{});var qIt=s(OEe);lRr=r(qIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qIt.forEach(t),iRr=i(C7),Nc=n(C7,"P",{});var oae=s(Nc);dRr=r(oae,`Note:
Loading a model from its configuration file does `),VEe=n(oae,"STRONG",{});var jIt=s(VEe);cRr=r(jIt,"not"),jIt.forEach(t),fRr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(oae,"A",{href:!0});var DIt=s(eZ);mRr=r(DIt,"from_pretrained()"),DIt.forEach(t),gRr=r(oae," to load the model weights."),oae.forEach(t),hRr=i(C7),T(ZC.$$.fragment,C7),C7.forEach(t),pRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Xx.$$.fragment,Ul),_Rr=i(Ul),XEe=n(Ul,"P",{});var GIt=s(XEe);uRr=r(GIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GIt.forEach(t),bRr=i(Ul),_n=n(Ul,"P",{});var w7=s(_n);vRr=r(w7,"The model class to instantiate is selected based on the "),zEe=n(w7,"CODE",{});var OIt=s(zEe);FRr=r(OIt,"model_type"),OIt.forEach(t),TRr=r(w7,` property of the config object (either
passed as an argument or loaded from `),QEe=n(w7,"CODE",{});var VIt=s(QEe);MRr=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),ERr=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=n(w7,"CODE",{});var XIt=s(WEe);CRr=r(XIt,"pretrained_model_name_or_path"),XIt.forEach(t),wRr=r(w7,":"),w7.forEach(t),ARr=i(Ul),HEe=n(Ul,"UL",{});var zIt=s(HEe);e5=n(zIt,"LI",{});var EGe=s(e5);UEe=n(EGe,"STRONG",{});var QIt=s(UEe);LRr=r(QIt,"tapas"),QIt.forEach(t),yRr=r(EGe," \u2014 "),oZ=n(EGe,"A",{href:!0});var WIt=s(oZ);xRr=r(WIt,"TFTapasForQuestionAnswering"),WIt.forEach(t),$Rr=r(EGe," (TAPAS model)"),EGe.forEach(t),zIt.forEach(t),kRr=i(Ul),T(o5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Gze=i(f),Ic=n(f,"H2",{class:!0});var JWe=s(Ic);r5=n(JWe,"A",{id:!0,class:!0,href:!0});var HIt=s(r5);JEe=n(HIt,"SPAN",{});var UIt=s(JEe);T(zx.$$.fragment,UIt),UIt.forEach(t),HIt.forEach(t),SRr=i(JWe),YEe=n(JWe,"SPAN",{});var JIt=s(YEe);RRr=r(JIt,"TFAutoModelForTokenClassification"),JIt.forEach(t),JWe.forEach(t),Oze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Qx.$$.fragment,Jl),PRr=i(Jl),qc=n(Jl,"P",{});var rae=s(qc);BRr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rZ=n(rae,"A",{href:!0});var YIt=s(rZ);NRr=r(YIt,"from_pretrained()"),YIt.forEach(t),IRr=r(rae," class method or the "),tZ=n(rae,"A",{href:!0});var KIt=s(tZ);qRr=r(KIt,"from_config()"),KIt.forEach(t),jRr=r(rae,` class
method.`),rae.forEach(t),DRr=i(Jl),Wx=n(Jl,"P",{});var YWe=s(Wx);GRr=r(YWe,"This class cannot be instantiated directly using "),KEe=n(YWe,"CODE",{});var ZIt=s(KEe);ORr=r(ZIt,"__init__()"),ZIt.forEach(t),VRr=r(YWe," (throws an error)."),YWe.forEach(t),XRr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var A7=s(Vt);T(Hx.$$.fragment,A7),zRr=i(A7),ZEe=n(A7,"P",{});var eqt=s(ZEe);QRr=r(eqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eqt.forEach(t),WRr=i(A7),jc=n(A7,"P",{});var tae=s(jc);HRr=r(tae,`Note:
Loading a model from its configuration file does `),eCe=n(tae,"STRONG",{});var oqt=s(eCe);URr=r(oqt,"not"),oqt.forEach(t),JRr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(tae,"A",{href:!0});var rqt=s(aZ);YRr=r(rqt,"from_pretrained()"),rqt.forEach(t),KRr=r(tae," to load the model weights."),tae.forEach(t),ZRr=i(A7),T(t5.$$.fragment,A7),A7.forEach(t),ePr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Ux.$$.fragment,Yl),oPr=i(Yl),oCe=n(Yl,"P",{});var tqt=s(oCe);rPr=r(tqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tqt.forEach(t),tPr=i(Yl),un=n(Yl,"P",{});var L7=s(un);aPr=r(L7,"The model class to instantiate is selected based on the "),rCe=n(L7,"CODE",{});var aqt=s(rCe);nPr=r(aqt,"model_type"),aqt.forEach(t),sPr=r(L7,` property of the config object (either
passed as an argument or loaded from `),tCe=n(L7,"CODE",{});var nqt=s(tCe);lPr=r(nqt,"pretrained_model_name_or_path"),nqt.forEach(t),iPr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=n(L7,"CODE",{});var sqt=s(aCe);dPr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),cPr=r(L7,":"),L7.forEach(t),fPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);a5=n(ge,"LI",{});var CGe=s(a5);nCe=n(CGe,"STRONG",{});var lqt=s(nCe);mPr=r(lqt,"albert"),lqt.forEach(t),gPr=r(CGe," \u2014 "),nZ=n(CGe,"A",{href:!0});var iqt=s(nZ);hPr=r(iqt,"TFAlbertForTokenClassification"),iqt.forEach(t),pPr=r(CGe," (ALBERT model)"),CGe.forEach(t),_Pr=i(ge),n5=n(ge,"LI",{});var wGe=s(n5);sCe=n(wGe,"STRONG",{});var dqt=s(sCe);uPr=r(dqt,"bert"),dqt.forEach(t),bPr=r(wGe," \u2014 "),sZ=n(wGe,"A",{href:!0});var cqt=s(sZ);vPr=r(cqt,"TFBertForTokenClassification"),cqt.forEach(t),FPr=r(wGe," (BERT model)"),wGe.forEach(t),TPr=i(ge),s5=n(ge,"LI",{});var AGe=s(s5);lCe=n(AGe,"STRONG",{});var fqt=s(lCe);MPr=r(fqt,"camembert"),fqt.forEach(t),EPr=r(AGe," \u2014 "),lZ=n(AGe,"A",{href:!0});var mqt=s(lZ);CPr=r(mqt,"TFCamembertForTokenClassification"),mqt.forEach(t),wPr=r(AGe," (CamemBERT model)"),AGe.forEach(t),APr=i(ge),l5=n(ge,"LI",{});var LGe=s(l5);iCe=n(LGe,"STRONG",{});var gqt=s(iCe);LPr=r(gqt,"convbert"),gqt.forEach(t),yPr=r(LGe," \u2014 "),iZ=n(LGe,"A",{href:!0});var hqt=s(iZ);xPr=r(hqt,"TFConvBertForTokenClassification"),hqt.forEach(t),$Pr=r(LGe," (ConvBERT model)"),LGe.forEach(t),kPr=i(ge),i5=n(ge,"LI",{});var yGe=s(i5);dCe=n(yGe,"STRONG",{});var pqt=s(dCe);SPr=r(pqt,"deberta"),pqt.forEach(t),RPr=r(yGe," \u2014 "),dZ=n(yGe,"A",{href:!0});var _qt=s(dZ);PPr=r(_qt,"TFDebertaForTokenClassification"),_qt.forEach(t),BPr=r(yGe," (DeBERTa model)"),yGe.forEach(t),NPr=i(ge),d5=n(ge,"LI",{});var xGe=s(d5);cCe=n(xGe,"STRONG",{});var uqt=s(cCe);IPr=r(uqt,"deberta-v2"),uqt.forEach(t),qPr=r(xGe," \u2014 "),cZ=n(xGe,"A",{href:!0});var bqt=s(cZ);jPr=r(bqt,"TFDebertaV2ForTokenClassification"),bqt.forEach(t),DPr=r(xGe," (DeBERTa-v2 model)"),xGe.forEach(t),GPr=i(ge),c5=n(ge,"LI",{});var $Ge=s(c5);fCe=n($Ge,"STRONG",{});var vqt=s(fCe);OPr=r(vqt,"distilbert"),vqt.forEach(t),VPr=r($Ge," \u2014 "),fZ=n($Ge,"A",{href:!0});var Fqt=s(fZ);XPr=r(Fqt,"TFDistilBertForTokenClassification"),Fqt.forEach(t),zPr=r($Ge," (DistilBERT model)"),$Ge.forEach(t),QPr=i(ge),f5=n(ge,"LI",{});var kGe=s(f5);mCe=n(kGe,"STRONG",{});var Tqt=s(mCe);WPr=r(Tqt,"electra"),Tqt.forEach(t),HPr=r(kGe," \u2014 "),mZ=n(kGe,"A",{href:!0});var Mqt=s(mZ);UPr=r(Mqt,"TFElectraForTokenClassification"),Mqt.forEach(t),JPr=r(kGe," (ELECTRA model)"),kGe.forEach(t),YPr=i(ge),m5=n(ge,"LI",{});var SGe=s(m5);gCe=n(SGe,"STRONG",{});var Eqt=s(gCe);KPr=r(Eqt,"flaubert"),Eqt.forEach(t),ZPr=r(SGe," \u2014 "),gZ=n(SGe,"A",{href:!0});var Cqt=s(gZ);eBr=r(Cqt,"TFFlaubertForTokenClassification"),Cqt.forEach(t),oBr=r(SGe," (FlauBERT model)"),SGe.forEach(t),rBr=i(ge),g5=n(ge,"LI",{});var RGe=s(g5);hCe=n(RGe,"STRONG",{});var wqt=s(hCe);tBr=r(wqt,"funnel"),wqt.forEach(t),aBr=r(RGe," \u2014 "),hZ=n(RGe,"A",{href:!0});var Aqt=s(hZ);nBr=r(Aqt,"TFFunnelForTokenClassification"),Aqt.forEach(t),sBr=r(RGe," (Funnel Transformer model)"),RGe.forEach(t),lBr=i(ge),h5=n(ge,"LI",{});var PGe=s(h5);pCe=n(PGe,"STRONG",{});var Lqt=s(pCe);iBr=r(Lqt,"layoutlm"),Lqt.forEach(t),dBr=r(PGe," \u2014 "),pZ=n(PGe,"A",{href:!0});var yqt=s(pZ);cBr=r(yqt,"TFLayoutLMForTokenClassification"),yqt.forEach(t),fBr=r(PGe," (LayoutLM model)"),PGe.forEach(t),mBr=i(ge),p5=n(ge,"LI",{});var BGe=s(p5);_Ce=n(BGe,"STRONG",{});var xqt=s(_Ce);gBr=r(xqt,"longformer"),xqt.forEach(t),hBr=r(BGe," \u2014 "),_Z=n(BGe,"A",{href:!0});var $qt=s(_Z);pBr=r($qt,"TFLongformerForTokenClassification"),$qt.forEach(t),_Br=r(BGe," (Longformer model)"),BGe.forEach(t),uBr=i(ge),_5=n(ge,"LI",{});var NGe=s(_5);uCe=n(NGe,"STRONG",{});var kqt=s(uCe);bBr=r(kqt,"mobilebert"),kqt.forEach(t),vBr=r(NGe," \u2014 "),uZ=n(NGe,"A",{href:!0});var Sqt=s(uZ);FBr=r(Sqt,"TFMobileBertForTokenClassification"),Sqt.forEach(t),TBr=r(NGe," (MobileBERT model)"),NGe.forEach(t),MBr=i(ge),u5=n(ge,"LI",{});var IGe=s(u5);bCe=n(IGe,"STRONG",{});var Rqt=s(bCe);EBr=r(Rqt,"mpnet"),Rqt.forEach(t),CBr=r(IGe," \u2014 "),bZ=n(IGe,"A",{href:!0});var Pqt=s(bZ);wBr=r(Pqt,"TFMPNetForTokenClassification"),Pqt.forEach(t),ABr=r(IGe," (MPNet model)"),IGe.forEach(t),LBr=i(ge),b5=n(ge,"LI",{});var qGe=s(b5);vCe=n(qGe,"STRONG",{});var Bqt=s(vCe);yBr=r(Bqt,"rembert"),Bqt.forEach(t),xBr=r(qGe," \u2014 "),vZ=n(qGe,"A",{href:!0});var Nqt=s(vZ);$Br=r(Nqt,"TFRemBertForTokenClassification"),Nqt.forEach(t),kBr=r(qGe," (RemBERT model)"),qGe.forEach(t),SBr=i(ge),v5=n(ge,"LI",{});var jGe=s(v5);FCe=n(jGe,"STRONG",{});var Iqt=s(FCe);RBr=r(Iqt,"roberta"),Iqt.forEach(t),PBr=r(jGe," \u2014 "),FZ=n(jGe,"A",{href:!0});var qqt=s(FZ);BBr=r(qqt,"TFRobertaForTokenClassification"),qqt.forEach(t),NBr=r(jGe," (RoBERTa model)"),jGe.forEach(t),IBr=i(ge),F5=n(ge,"LI",{});var DGe=s(F5);TCe=n(DGe,"STRONG",{});var jqt=s(TCe);qBr=r(jqt,"roformer"),jqt.forEach(t),jBr=r(DGe," \u2014 "),TZ=n(DGe,"A",{href:!0});var Dqt=s(TZ);DBr=r(Dqt,"TFRoFormerForTokenClassification"),Dqt.forEach(t),GBr=r(DGe," (RoFormer model)"),DGe.forEach(t),OBr=i(ge),T5=n(ge,"LI",{});var GGe=s(T5);MCe=n(GGe,"STRONG",{});var Gqt=s(MCe);VBr=r(Gqt,"xlm"),Gqt.forEach(t),XBr=r(GGe," \u2014 "),MZ=n(GGe,"A",{href:!0});var Oqt=s(MZ);zBr=r(Oqt,"TFXLMForTokenClassification"),Oqt.forEach(t),QBr=r(GGe," (XLM model)"),GGe.forEach(t),WBr=i(ge),M5=n(ge,"LI",{});var OGe=s(M5);ECe=n(OGe,"STRONG",{});var Vqt=s(ECe);HBr=r(Vqt,"xlm-roberta"),Vqt.forEach(t),UBr=r(OGe," \u2014 "),EZ=n(OGe,"A",{href:!0});var Xqt=s(EZ);JBr=r(Xqt,"TFXLMRobertaForTokenClassification"),Xqt.forEach(t),YBr=r(OGe," (XLM-RoBERTa model)"),OGe.forEach(t),KBr=i(ge),E5=n(ge,"LI",{});var VGe=s(E5);CCe=n(VGe,"STRONG",{});var zqt=s(CCe);ZBr=r(zqt,"xlnet"),zqt.forEach(t),eNr=r(VGe," \u2014 "),CZ=n(VGe,"A",{href:!0});var Qqt=s(CZ);oNr=r(Qqt,"TFXLNetForTokenClassification"),Qqt.forEach(t),rNr=r(VGe," (XLNet model)"),VGe.forEach(t),ge.forEach(t),tNr=i(Yl),T(C5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Vze=i(f),Dc=n(f,"H2",{class:!0});var KWe=s(Dc);w5=n(KWe,"A",{id:!0,class:!0,href:!0});var Wqt=s(w5);wCe=n(Wqt,"SPAN",{});var Hqt=s(wCe);T(Jx.$$.fragment,Hqt),Hqt.forEach(t),Wqt.forEach(t),aNr=i(KWe),ACe=n(KWe,"SPAN",{});var Uqt=s(ACe);nNr=r(Uqt,"TFAutoModelForQuestionAnswering"),Uqt.forEach(t),KWe.forEach(t),Xze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Yx.$$.fragment,Kl),sNr=i(Kl),Gc=n(Kl,"P",{});var aae=s(Gc);lNr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wZ=n(aae,"A",{href:!0});var Jqt=s(wZ);iNr=r(Jqt,"from_pretrained()"),Jqt.forEach(t),dNr=r(aae," class method or the "),AZ=n(aae,"A",{href:!0});var Yqt=s(AZ);cNr=r(Yqt,"from_config()"),Yqt.forEach(t),fNr=r(aae,` class
method.`),aae.forEach(t),mNr=i(Kl),Kx=n(Kl,"P",{});var ZWe=s(Kx);gNr=r(ZWe,"This class cannot be instantiated directly using "),LCe=n(ZWe,"CODE",{});var Kqt=s(LCe);hNr=r(Kqt,"__init__()"),Kqt.forEach(t),pNr=r(ZWe," (throws an error)."),ZWe.forEach(t),_Nr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var y7=s(Xt);T(Zx.$$.fragment,y7),uNr=i(y7),yCe=n(y7,"P",{});var Zqt=s(yCe);bNr=r(Zqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zqt.forEach(t),vNr=i(y7),Oc=n(y7,"P",{});var nae=s(Oc);FNr=r(nae,`Note:
Loading a model from its configuration file does `),xCe=n(nae,"STRONG",{});var ejt=s(xCe);TNr=r(ejt,"not"),ejt.forEach(t),MNr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(nae,"A",{href:!0});var ojt=s(LZ);ENr=r(ojt,"from_pretrained()"),ojt.forEach(t),CNr=r(nae," to load the model weights."),nae.forEach(t),wNr=i(y7),T(A5.$$.fragment,y7),y7.forEach(t),ANr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(e$.$$.fragment,Zl),LNr=i(Zl),$Ce=n(Zl,"P",{});var rjt=s($Ce);yNr=r(rjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rjt.forEach(t),xNr=i(Zl),bn=n(Zl,"P",{});var x7=s(bn);$Nr=r(x7,"The model class to instantiate is selected based on the "),kCe=n(x7,"CODE",{});var tjt=s(kCe);kNr=r(tjt,"model_type"),tjt.forEach(t),SNr=r(x7,` property of the config object (either
passed as an argument or loaded from `),SCe=n(x7,"CODE",{});var ajt=s(SCe);RNr=r(ajt,"pretrained_model_name_or_path"),ajt.forEach(t),PNr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=n(x7,"CODE",{});var njt=s(RCe);BNr=r(njt,"pretrained_model_name_or_path"),njt.forEach(t),NNr=r(x7,":"),x7.forEach(t),INr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);L5=n(he,"LI",{});var XGe=s(L5);PCe=n(XGe,"STRONG",{});var sjt=s(PCe);qNr=r(sjt,"albert"),sjt.forEach(t),jNr=r(XGe," \u2014 "),yZ=n(XGe,"A",{href:!0});var ljt=s(yZ);DNr=r(ljt,"TFAlbertForQuestionAnswering"),ljt.forEach(t),GNr=r(XGe," (ALBERT model)"),XGe.forEach(t),ONr=i(he),y5=n(he,"LI",{});var zGe=s(y5);BCe=n(zGe,"STRONG",{});var ijt=s(BCe);VNr=r(ijt,"bert"),ijt.forEach(t),XNr=r(zGe," \u2014 "),xZ=n(zGe,"A",{href:!0});var djt=s(xZ);zNr=r(djt,"TFBertForQuestionAnswering"),djt.forEach(t),QNr=r(zGe," (BERT model)"),zGe.forEach(t),WNr=i(he),x5=n(he,"LI",{});var QGe=s(x5);NCe=n(QGe,"STRONG",{});var cjt=s(NCe);HNr=r(cjt,"camembert"),cjt.forEach(t),UNr=r(QGe," \u2014 "),$Z=n(QGe,"A",{href:!0});var fjt=s($Z);JNr=r(fjt,"TFCamembertForQuestionAnswering"),fjt.forEach(t),YNr=r(QGe," (CamemBERT model)"),QGe.forEach(t),KNr=i(he),$5=n(he,"LI",{});var WGe=s($5);ICe=n(WGe,"STRONG",{});var mjt=s(ICe);ZNr=r(mjt,"convbert"),mjt.forEach(t),eIr=r(WGe," \u2014 "),kZ=n(WGe,"A",{href:!0});var gjt=s(kZ);oIr=r(gjt,"TFConvBertForQuestionAnswering"),gjt.forEach(t),rIr=r(WGe," (ConvBERT model)"),WGe.forEach(t),tIr=i(he),k5=n(he,"LI",{});var HGe=s(k5);qCe=n(HGe,"STRONG",{});var hjt=s(qCe);aIr=r(hjt,"deberta"),hjt.forEach(t),nIr=r(HGe," \u2014 "),SZ=n(HGe,"A",{href:!0});var pjt=s(SZ);sIr=r(pjt,"TFDebertaForQuestionAnswering"),pjt.forEach(t),lIr=r(HGe," (DeBERTa model)"),HGe.forEach(t),iIr=i(he),S5=n(he,"LI",{});var UGe=s(S5);jCe=n(UGe,"STRONG",{});var _jt=s(jCe);dIr=r(_jt,"deberta-v2"),_jt.forEach(t),cIr=r(UGe," \u2014 "),RZ=n(UGe,"A",{href:!0});var ujt=s(RZ);fIr=r(ujt,"TFDebertaV2ForQuestionAnswering"),ujt.forEach(t),mIr=r(UGe," (DeBERTa-v2 model)"),UGe.forEach(t),gIr=i(he),R5=n(he,"LI",{});var JGe=s(R5);DCe=n(JGe,"STRONG",{});var bjt=s(DCe);hIr=r(bjt,"distilbert"),bjt.forEach(t),pIr=r(JGe," \u2014 "),PZ=n(JGe,"A",{href:!0});var vjt=s(PZ);_Ir=r(vjt,"TFDistilBertForQuestionAnswering"),vjt.forEach(t),uIr=r(JGe," (DistilBERT model)"),JGe.forEach(t),bIr=i(he),P5=n(he,"LI",{});var YGe=s(P5);GCe=n(YGe,"STRONG",{});var Fjt=s(GCe);vIr=r(Fjt,"electra"),Fjt.forEach(t),FIr=r(YGe," \u2014 "),BZ=n(YGe,"A",{href:!0});var Tjt=s(BZ);TIr=r(Tjt,"TFElectraForQuestionAnswering"),Tjt.forEach(t),MIr=r(YGe," (ELECTRA model)"),YGe.forEach(t),EIr=i(he),B5=n(he,"LI",{});var KGe=s(B5);OCe=n(KGe,"STRONG",{});var Mjt=s(OCe);CIr=r(Mjt,"flaubert"),Mjt.forEach(t),wIr=r(KGe," \u2014 "),NZ=n(KGe,"A",{href:!0});var Ejt=s(NZ);AIr=r(Ejt,"TFFlaubertForQuestionAnsweringSimple"),Ejt.forEach(t),LIr=r(KGe," (FlauBERT model)"),KGe.forEach(t),yIr=i(he),N5=n(he,"LI",{});var ZGe=s(N5);VCe=n(ZGe,"STRONG",{});var Cjt=s(VCe);xIr=r(Cjt,"funnel"),Cjt.forEach(t),$Ir=r(ZGe," \u2014 "),IZ=n(ZGe,"A",{href:!0});var wjt=s(IZ);kIr=r(wjt,"TFFunnelForQuestionAnswering"),wjt.forEach(t),SIr=r(ZGe," (Funnel Transformer model)"),ZGe.forEach(t),RIr=i(he),I5=n(he,"LI",{});var eOe=s(I5);XCe=n(eOe,"STRONG",{});var Ajt=s(XCe);PIr=r(Ajt,"gptj"),Ajt.forEach(t),BIr=r(eOe," \u2014 "),qZ=n(eOe,"A",{href:!0});var Ljt=s(qZ);NIr=r(Ljt,"TFGPTJForQuestionAnswering"),Ljt.forEach(t),IIr=r(eOe," (GPT-J model)"),eOe.forEach(t),qIr=i(he),q5=n(he,"LI",{});var oOe=s(q5);zCe=n(oOe,"STRONG",{});var yjt=s(zCe);jIr=r(yjt,"longformer"),yjt.forEach(t),DIr=r(oOe," \u2014 "),jZ=n(oOe,"A",{href:!0});var xjt=s(jZ);GIr=r(xjt,"TFLongformerForQuestionAnswering"),xjt.forEach(t),OIr=r(oOe," (Longformer model)"),oOe.forEach(t),VIr=i(he),j5=n(he,"LI",{});var rOe=s(j5);QCe=n(rOe,"STRONG",{});var $jt=s(QCe);XIr=r($jt,"mobilebert"),$jt.forEach(t),zIr=r(rOe," \u2014 "),DZ=n(rOe,"A",{href:!0});var kjt=s(DZ);QIr=r(kjt,"TFMobileBertForQuestionAnswering"),kjt.forEach(t),WIr=r(rOe," (MobileBERT model)"),rOe.forEach(t),HIr=i(he),D5=n(he,"LI",{});var tOe=s(D5);WCe=n(tOe,"STRONG",{});var Sjt=s(WCe);UIr=r(Sjt,"mpnet"),Sjt.forEach(t),JIr=r(tOe," \u2014 "),GZ=n(tOe,"A",{href:!0});var Rjt=s(GZ);YIr=r(Rjt,"TFMPNetForQuestionAnswering"),Rjt.forEach(t),KIr=r(tOe," (MPNet model)"),tOe.forEach(t),ZIr=i(he),G5=n(he,"LI",{});var aOe=s(G5);HCe=n(aOe,"STRONG",{});var Pjt=s(HCe);eqr=r(Pjt,"rembert"),Pjt.forEach(t),oqr=r(aOe," \u2014 "),OZ=n(aOe,"A",{href:!0});var Bjt=s(OZ);rqr=r(Bjt,"TFRemBertForQuestionAnswering"),Bjt.forEach(t),tqr=r(aOe," (RemBERT model)"),aOe.forEach(t),aqr=i(he),O5=n(he,"LI",{});var nOe=s(O5);UCe=n(nOe,"STRONG",{});var Njt=s(UCe);nqr=r(Njt,"roberta"),Njt.forEach(t),sqr=r(nOe," \u2014 "),VZ=n(nOe,"A",{href:!0});var Ijt=s(VZ);lqr=r(Ijt,"TFRobertaForQuestionAnswering"),Ijt.forEach(t),iqr=r(nOe," (RoBERTa model)"),nOe.forEach(t),dqr=i(he),V5=n(he,"LI",{});var sOe=s(V5);JCe=n(sOe,"STRONG",{});var qjt=s(JCe);cqr=r(qjt,"roformer"),qjt.forEach(t),fqr=r(sOe," \u2014 "),XZ=n(sOe,"A",{href:!0});var jjt=s(XZ);mqr=r(jjt,"TFRoFormerForQuestionAnswering"),jjt.forEach(t),gqr=r(sOe," (RoFormer model)"),sOe.forEach(t),hqr=i(he),X5=n(he,"LI",{});var lOe=s(X5);YCe=n(lOe,"STRONG",{});var Djt=s(YCe);pqr=r(Djt,"xlm"),Djt.forEach(t),_qr=r(lOe," \u2014 "),zZ=n(lOe,"A",{href:!0});var Gjt=s(zZ);uqr=r(Gjt,"TFXLMForQuestionAnsweringSimple"),Gjt.forEach(t),bqr=r(lOe," (XLM model)"),lOe.forEach(t),vqr=i(he),z5=n(he,"LI",{});var iOe=s(z5);KCe=n(iOe,"STRONG",{});var Ojt=s(KCe);Fqr=r(Ojt,"xlm-roberta"),Ojt.forEach(t),Tqr=r(iOe," \u2014 "),QZ=n(iOe,"A",{href:!0});var Vjt=s(QZ);Mqr=r(Vjt,"TFXLMRobertaForQuestionAnswering"),Vjt.forEach(t),Eqr=r(iOe," (XLM-RoBERTa model)"),iOe.forEach(t),Cqr=i(he),Q5=n(he,"LI",{});var dOe=s(Q5);ZCe=n(dOe,"STRONG",{});var Xjt=s(ZCe);wqr=r(Xjt,"xlnet"),Xjt.forEach(t),Aqr=r(dOe," \u2014 "),WZ=n(dOe,"A",{href:!0});var zjt=s(WZ);Lqr=r(zjt,"TFXLNetForQuestionAnsweringSimple"),zjt.forEach(t),yqr=r(dOe," (XLNet model)"),dOe.forEach(t),he.forEach(t),xqr=i(Zl),T(W5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),zze=i(f),Vc=n(f,"H2",{class:!0});var eHe=s(Vc);H5=n(eHe,"A",{id:!0,class:!0,href:!0});var Qjt=s(H5);e5e=n(Qjt,"SPAN",{});var Wjt=s(e5e);T(o$.$$.fragment,Wjt),Wjt.forEach(t),Qjt.forEach(t),$qr=i(eHe),o5e=n(eHe,"SPAN",{});var Hjt=s(o5e);kqr=r(Hjt,"TFAutoModelForVision2Seq"),Hjt.forEach(t),eHe.forEach(t),Qze=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(r$.$$.fragment,ei),Sqr=i(ei),Xc=n(ei,"P",{});var sae=s(Xc);Rqr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=n(sae,"A",{href:!0});var Ujt=s(HZ);Pqr=r(Ujt,"from_pretrained()"),Ujt.forEach(t),Bqr=r(sae," class method or the "),UZ=n(sae,"A",{href:!0});var Jjt=s(UZ);Nqr=r(Jjt,"from_config()"),Jjt.forEach(t),Iqr=r(sae,` class
method.`),sae.forEach(t),qqr=i(ei),t$=n(ei,"P",{});var oHe=s(t$);jqr=r(oHe,"This class cannot be instantiated directly using "),r5e=n(oHe,"CODE",{});var Yjt=s(r5e);Dqr=r(Yjt,"__init__()"),Yjt.forEach(t),Gqr=r(oHe," (throws an error)."),oHe.forEach(t),Oqr=i(ei),zt=n(ei,"DIV",{class:!0});var $7=s(zt);T(a$.$$.fragment,$7),Vqr=i($7),t5e=n($7,"P",{});var Kjt=s(t5e);Xqr=r(Kjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kjt.forEach(t),zqr=i($7),zc=n($7,"P",{});var lae=s(zc);Qqr=r(lae,`Note:
Loading a model from its configuration file does `),a5e=n(lae,"STRONG",{});var Zjt=s(a5e);Wqr=r(Zjt,"not"),Zjt.forEach(t),Hqr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(lae,"A",{href:!0});var eDt=s(JZ);Uqr=r(eDt,"from_pretrained()"),eDt.forEach(t),Jqr=r(lae," to load the model weights."),lae.forEach(t),Yqr=i($7),T(U5.$$.fragment,$7),$7.forEach(t),Kqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(n$.$$.fragment,oi),Zqr=i(oi),n5e=n(oi,"P",{});var oDt=s(n5e);ejr=r(oDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oDt.forEach(t),ojr=i(oi),vn=n(oi,"P",{});var k7=s(vn);rjr=r(k7,"The model class to instantiate is selected based on the "),s5e=n(k7,"CODE",{});var rDt=s(s5e);tjr=r(rDt,"model_type"),rDt.forEach(t),ajr=r(k7,` property of the config object (either
passed as an argument or loaded from `),l5e=n(k7,"CODE",{});var tDt=s(l5e);njr=r(tDt,"pretrained_model_name_or_path"),tDt.forEach(t),sjr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(k7,"CODE",{});var aDt=s(i5e);ljr=r(aDt,"pretrained_model_name_or_path"),aDt.forEach(t),ijr=r(k7,":"),k7.forEach(t),djr=i(oi),d5e=n(oi,"UL",{});var nDt=s(d5e);J5=n(nDt,"LI",{});var cOe=s(J5);c5e=n(cOe,"STRONG",{});var sDt=s(c5e);cjr=r(sDt,"vision-encoder-decoder"),sDt.forEach(t),fjr=r(cOe," \u2014 "),YZ=n(cOe,"A",{href:!0});var lDt=s(YZ);mjr=r(lDt,"TFVisionEncoderDecoderModel"),lDt.forEach(t),gjr=r(cOe," (Vision Encoder decoder model)"),cOe.forEach(t),nDt.forEach(t),hjr=i(oi),T(Y5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Wze=i(f),Qc=n(f,"H2",{class:!0});var rHe=s(Qc);K5=n(rHe,"A",{id:!0,class:!0,href:!0});var iDt=s(K5);f5e=n(iDt,"SPAN",{});var dDt=s(f5e);T(s$.$$.fragment,dDt),dDt.forEach(t),iDt.forEach(t),pjr=i(rHe),m5e=n(rHe,"SPAN",{});var cDt=s(m5e);_jr=r(cDt,"TFAutoModelForSpeechSeq2Seq"),cDt.forEach(t),rHe.forEach(t),Hze=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(l$.$$.fragment,ri),ujr=i(ri),Wc=n(ri,"P",{});var iae=s(Wc);bjr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KZ=n(iae,"A",{href:!0});var fDt=s(KZ);vjr=r(fDt,"from_pretrained()"),fDt.forEach(t),Fjr=r(iae," class method or the "),ZZ=n(iae,"A",{href:!0});var mDt=s(ZZ);Tjr=r(mDt,"from_config()"),mDt.forEach(t),Mjr=r(iae,` class
method.`),iae.forEach(t),Ejr=i(ri),i$=n(ri,"P",{});var tHe=s(i$);Cjr=r(tHe,"This class cannot be instantiated directly using "),g5e=n(tHe,"CODE",{});var gDt=s(g5e);wjr=r(gDt,"__init__()"),gDt.forEach(t),Ajr=r(tHe," (throws an error)."),tHe.forEach(t),Ljr=i(ri),Qt=n(ri,"DIV",{class:!0});var S7=s(Qt);T(d$.$$.fragment,S7),yjr=i(S7),h5e=n(S7,"P",{});var hDt=s(h5e);xjr=r(hDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hDt.forEach(t),$jr=i(S7),Hc=n(S7,"P",{});var dae=s(Hc);kjr=r(dae,`Note:
Loading a model from its configuration file does `),p5e=n(dae,"STRONG",{});var pDt=s(p5e);Sjr=r(pDt,"not"),pDt.forEach(t),Rjr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(dae,"A",{href:!0});var _Dt=s(eee);Pjr=r(_Dt,"from_pretrained()"),_Dt.forEach(t),Bjr=r(dae," to load the model weights."),dae.forEach(t),Njr=i(S7),T(Z5.$$.fragment,S7),S7.forEach(t),Ijr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(c$.$$.fragment,ti),qjr=i(ti),_5e=n(ti,"P",{});var uDt=s(_5e);jjr=r(uDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),uDt.forEach(t),Djr=i(ti),Fn=n(ti,"P",{});var R7=s(Fn);Gjr=r(R7,"The model class to instantiate is selected based on the "),u5e=n(R7,"CODE",{});var bDt=s(u5e);Ojr=r(bDt,"model_type"),bDt.forEach(t),Vjr=r(R7,` property of the config object (either
passed as an argument or loaded from `),b5e=n(R7,"CODE",{});var vDt=s(b5e);Xjr=r(vDt,"pretrained_model_name_or_path"),vDt.forEach(t),zjr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(R7,"CODE",{});var FDt=s(v5e);Qjr=r(FDt,"pretrained_model_name_or_path"),FDt.forEach(t),Wjr=r(R7,":"),R7.forEach(t),Hjr=i(ti),F5e=n(ti,"UL",{});var TDt=s(F5e);e0=n(TDt,"LI",{});var fOe=s(e0);T5e=n(fOe,"STRONG",{});var MDt=s(T5e);Ujr=r(MDt,"speech_to_text"),MDt.forEach(t),Jjr=r(fOe," \u2014 "),oee=n(fOe,"A",{href:!0});var EDt=s(oee);Yjr=r(EDt,"TFSpeech2TextForConditionalGeneration"),EDt.forEach(t),Kjr=r(fOe," (Speech2Text model)"),fOe.forEach(t),TDt.forEach(t),Zjr=i(ti),T(o0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Uze=i(f),Uc=n(f,"H2",{class:!0});var aHe=s(Uc);r0=n(aHe,"A",{id:!0,class:!0,href:!0});var CDt=s(r0);M5e=n(CDt,"SPAN",{});var wDt=s(M5e);T(f$.$$.fragment,wDt),wDt.forEach(t),CDt.forEach(t),eDr=i(aHe),E5e=n(aHe,"SPAN",{});var ADt=s(E5e);oDr=r(ADt,"FlaxAutoModel"),ADt.forEach(t),aHe.forEach(t),Jze=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(m$.$$.fragment,ai),rDr=i(ai),Jc=n(ai,"P",{});var cae=s(Jc);tDr=r(cae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ree=n(cae,"A",{href:!0});var LDt=s(ree);aDr=r(LDt,"from_pretrained()"),LDt.forEach(t),nDr=r(cae," class method or the "),tee=n(cae,"A",{href:!0});var yDt=s(tee);sDr=r(yDt,"from_config()"),yDt.forEach(t),lDr=r(cae,` class
method.`),cae.forEach(t),iDr=i(ai),g$=n(ai,"P",{});var nHe=s(g$);dDr=r(nHe,"This class cannot be instantiated directly using "),C5e=n(nHe,"CODE",{});var xDt=s(C5e);cDr=r(xDt,"__init__()"),xDt.forEach(t),fDr=r(nHe," (throws an error)."),nHe.forEach(t),mDr=i(ai),Wt=n(ai,"DIV",{class:!0});var P7=s(Wt);T(h$.$$.fragment,P7),gDr=i(P7),w5e=n(P7,"P",{});var $Dt=s(w5e);hDr=r($Dt,"Instantiates one of the base model classes of the library from a configuration."),$Dt.forEach(t),pDr=i(P7),Yc=n(P7,"P",{});var fae=s(Yc);_Dr=r(fae,`Note:
Loading a model from its configuration file does `),A5e=n(fae,"STRONG",{});var kDt=s(A5e);uDr=r(kDt,"not"),kDt.forEach(t),bDr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(fae,"A",{href:!0});var SDt=s(aee);vDr=r(SDt,"from_pretrained()"),SDt.forEach(t),FDr=r(fae," to load the model weights."),fae.forEach(t),TDr=i(P7),T(t0.$$.fragment,P7),P7.forEach(t),MDr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(p$.$$.fragment,ni),EDr=i(ni),L5e=n(ni,"P",{});var RDt=s(L5e);CDr=r(RDt,"Instantiate one of the base model classes of the library from a pretrained model."),RDt.forEach(t),wDr=i(ni),Tn=n(ni,"P",{});var B7=s(Tn);ADr=r(B7,"The model class to instantiate is selected based on the "),y5e=n(B7,"CODE",{});var PDt=s(y5e);LDr=r(PDt,"model_type"),PDt.forEach(t),yDr=r(B7,` property of the config object (either
passed as an argument or loaded from `),x5e=n(B7,"CODE",{});var BDt=s(x5e);xDr=r(BDt,"pretrained_model_name_or_path"),BDt.forEach(t),$Dr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(B7,"CODE",{});var NDt=s($5e);kDr=r(NDt,"pretrained_model_name_or_path"),NDt.forEach(t),SDr=r(B7,":"),B7.forEach(t),RDr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);a0=n(ae,"LI",{});var mOe=s(a0);k5e=n(mOe,"STRONG",{});var IDt=s(k5e);PDr=r(IDt,"albert"),IDt.forEach(t),BDr=r(mOe," \u2014 "),nee=n(mOe,"A",{href:!0});var qDt=s(nee);NDr=r(qDt,"FlaxAlbertModel"),qDt.forEach(t),IDr=r(mOe," (ALBERT model)"),mOe.forEach(t),qDr=i(ae),n0=n(ae,"LI",{});var gOe=s(n0);S5e=n(gOe,"STRONG",{});var jDt=s(S5e);jDr=r(jDt,"bart"),jDt.forEach(t),DDr=r(gOe," \u2014 "),see=n(gOe,"A",{href:!0});var DDt=s(see);GDr=r(DDt,"FlaxBartModel"),DDt.forEach(t),ODr=r(gOe," (BART model)"),gOe.forEach(t),VDr=i(ae),s0=n(ae,"LI",{});var hOe=s(s0);R5e=n(hOe,"STRONG",{});var GDt=s(R5e);XDr=r(GDt,"beit"),GDt.forEach(t),zDr=r(hOe," \u2014 "),lee=n(hOe,"A",{href:!0});var ODt=s(lee);QDr=r(ODt,"FlaxBeitModel"),ODt.forEach(t),WDr=r(hOe," (BEiT model)"),hOe.forEach(t),HDr=i(ae),l0=n(ae,"LI",{});var pOe=s(l0);P5e=n(pOe,"STRONG",{});var VDt=s(P5e);UDr=r(VDt,"bert"),VDt.forEach(t),JDr=r(pOe," \u2014 "),iee=n(pOe,"A",{href:!0});var XDt=s(iee);YDr=r(XDt,"FlaxBertModel"),XDt.forEach(t),KDr=r(pOe," (BERT model)"),pOe.forEach(t),ZDr=i(ae),i0=n(ae,"LI",{});var _Oe=s(i0);B5e=n(_Oe,"STRONG",{});var zDt=s(B5e);eGr=r(zDt,"big_bird"),zDt.forEach(t),oGr=r(_Oe," \u2014 "),dee=n(_Oe,"A",{href:!0});var QDt=s(dee);rGr=r(QDt,"FlaxBigBirdModel"),QDt.forEach(t),tGr=r(_Oe," (BigBird model)"),_Oe.forEach(t),aGr=i(ae),d0=n(ae,"LI",{});var uOe=s(d0);N5e=n(uOe,"STRONG",{});var WDt=s(N5e);nGr=r(WDt,"blenderbot"),WDt.forEach(t),sGr=r(uOe," \u2014 "),cee=n(uOe,"A",{href:!0});var HDt=s(cee);lGr=r(HDt,"FlaxBlenderbotModel"),HDt.forEach(t),iGr=r(uOe," (Blenderbot model)"),uOe.forEach(t),dGr=i(ae),c0=n(ae,"LI",{});var bOe=s(c0);I5e=n(bOe,"STRONG",{});var UDt=s(I5e);cGr=r(UDt,"blenderbot-small"),UDt.forEach(t),fGr=r(bOe," \u2014 "),fee=n(bOe,"A",{href:!0});var JDt=s(fee);mGr=r(JDt,"FlaxBlenderbotSmallModel"),JDt.forEach(t),gGr=r(bOe," (BlenderbotSmall model)"),bOe.forEach(t),hGr=i(ae),f0=n(ae,"LI",{});var vOe=s(f0);q5e=n(vOe,"STRONG",{});var YDt=s(q5e);pGr=r(YDt,"clip"),YDt.forEach(t),_Gr=r(vOe," \u2014 "),mee=n(vOe,"A",{href:!0});var KDt=s(mee);uGr=r(KDt,"FlaxCLIPModel"),KDt.forEach(t),bGr=r(vOe," (CLIP model)"),vOe.forEach(t),vGr=i(ae),m0=n(ae,"LI",{});var FOe=s(m0);j5e=n(FOe,"STRONG",{});var ZDt=s(j5e);FGr=r(ZDt,"distilbert"),ZDt.forEach(t),TGr=r(FOe," \u2014 "),gee=n(FOe,"A",{href:!0});var eGt=s(gee);MGr=r(eGt,"FlaxDistilBertModel"),eGt.forEach(t),EGr=r(FOe," (DistilBERT model)"),FOe.forEach(t),CGr=i(ae),g0=n(ae,"LI",{});var TOe=s(g0);D5e=n(TOe,"STRONG",{});var oGt=s(D5e);wGr=r(oGt,"electra"),oGt.forEach(t),AGr=r(TOe," \u2014 "),hee=n(TOe,"A",{href:!0});var rGt=s(hee);LGr=r(rGt,"FlaxElectraModel"),rGt.forEach(t),yGr=r(TOe," (ELECTRA model)"),TOe.forEach(t),xGr=i(ae),h0=n(ae,"LI",{});var MOe=s(h0);G5e=n(MOe,"STRONG",{});var tGt=s(G5e);$Gr=r(tGt,"gpt2"),tGt.forEach(t),kGr=r(MOe," \u2014 "),pee=n(MOe,"A",{href:!0});var aGt=s(pee);SGr=r(aGt,"FlaxGPT2Model"),aGt.forEach(t),RGr=r(MOe," (OpenAI GPT-2 model)"),MOe.forEach(t),PGr=i(ae),p0=n(ae,"LI",{});var EOe=s(p0);O5e=n(EOe,"STRONG",{});var nGt=s(O5e);BGr=r(nGt,"gpt_neo"),nGt.forEach(t),NGr=r(EOe," \u2014 "),_ee=n(EOe,"A",{href:!0});var sGt=s(_ee);IGr=r(sGt,"FlaxGPTNeoModel"),sGt.forEach(t),qGr=r(EOe," (GPT Neo model)"),EOe.forEach(t),jGr=i(ae),_0=n(ae,"LI",{});var COe=s(_0);V5e=n(COe,"STRONG",{});var lGt=s(V5e);DGr=r(lGt,"gptj"),lGt.forEach(t),GGr=r(COe," \u2014 "),uee=n(COe,"A",{href:!0});var iGt=s(uee);OGr=r(iGt,"FlaxGPTJModel"),iGt.forEach(t),VGr=r(COe," (GPT-J model)"),COe.forEach(t),XGr=i(ae),u0=n(ae,"LI",{});var wOe=s(u0);X5e=n(wOe,"STRONG",{});var dGt=s(X5e);zGr=r(dGt,"longt5"),dGt.forEach(t),QGr=r(wOe," \u2014 "),bee=n(wOe,"A",{href:!0});var cGt=s(bee);WGr=r(cGt,"FlaxLongT5Model"),cGt.forEach(t),HGr=r(wOe," (LongT5 model)"),wOe.forEach(t),UGr=i(ae),b0=n(ae,"LI",{});var AOe=s(b0);z5e=n(AOe,"STRONG",{});var fGt=s(z5e);JGr=r(fGt,"marian"),fGt.forEach(t),YGr=r(AOe," \u2014 "),vee=n(AOe,"A",{href:!0});var mGt=s(vee);KGr=r(mGt,"FlaxMarianModel"),mGt.forEach(t),ZGr=r(AOe," (Marian model)"),AOe.forEach(t),eOr=i(ae),v0=n(ae,"LI",{});var LOe=s(v0);Q5e=n(LOe,"STRONG",{});var gGt=s(Q5e);oOr=r(gGt,"mbart"),gGt.forEach(t),rOr=r(LOe," \u2014 "),Fee=n(LOe,"A",{href:!0});var hGt=s(Fee);tOr=r(hGt,"FlaxMBartModel"),hGt.forEach(t),aOr=r(LOe," (mBART model)"),LOe.forEach(t),nOr=i(ae),F0=n(ae,"LI",{});var yOe=s(F0);W5e=n(yOe,"STRONG",{});var pGt=s(W5e);sOr=r(pGt,"mt5"),pGt.forEach(t),lOr=r(yOe," \u2014 "),Tee=n(yOe,"A",{href:!0});var _Gt=s(Tee);iOr=r(_Gt,"FlaxMT5Model"),_Gt.forEach(t),dOr=r(yOe," (MT5 model)"),yOe.forEach(t),cOr=i(ae),T0=n(ae,"LI",{});var xOe=s(T0);H5e=n(xOe,"STRONG",{});var uGt=s(H5e);fOr=r(uGt,"opt"),uGt.forEach(t),mOr=r(xOe," \u2014 "),Mee=n(xOe,"A",{href:!0});var bGt=s(Mee);gOr=r(bGt,"FlaxOPTModel"),bGt.forEach(t),hOr=r(xOe," (OPT model)"),xOe.forEach(t),pOr=i(ae),M0=n(ae,"LI",{});var $Oe=s(M0);U5e=n($Oe,"STRONG",{});var vGt=s(U5e);_Or=r(vGt,"pegasus"),vGt.forEach(t),uOr=r($Oe," \u2014 "),Eee=n($Oe,"A",{href:!0});var FGt=s(Eee);bOr=r(FGt,"FlaxPegasusModel"),FGt.forEach(t),vOr=r($Oe," (Pegasus model)"),$Oe.forEach(t),FOr=i(ae),E0=n(ae,"LI",{});var kOe=s(E0);J5e=n(kOe,"STRONG",{});var TGt=s(J5e);TOr=r(TGt,"roberta"),TGt.forEach(t),MOr=r(kOe," \u2014 "),Cee=n(kOe,"A",{href:!0});var MGt=s(Cee);EOr=r(MGt,"FlaxRobertaModel"),MGt.forEach(t),COr=r(kOe," (RoBERTa model)"),kOe.forEach(t),wOr=i(ae),C0=n(ae,"LI",{});var SOe=s(C0);Y5e=n(SOe,"STRONG",{});var EGt=s(Y5e);AOr=r(EGt,"roformer"),EGt.forEach(t),LOr=r(SOe," \u2014 "),wee=n(SOe,"A",{href:!0});var CGt=s(wee);yOr=r(CGt,"FlaxRoFormerModel"),CGt.forEach(t),xOr=r(SOe," (RoFormer model)"),SOe.forEach(t),$Or=i(ae),w0=n(ae,"LI",{});var ROe=s(w0);K5e=n(ROe,"STRONG",{});var wGt=s(K5e);kOr=r(wGt,"t5"),wGt.forEach(t),SOr=r(ROe," \u2014 "),Aee=n(ROe,"A",{href:!0});var AGt=s(Aee);ROr=r(AGt,"FlaxT5Model"),AGt.forEach(t),POr=r(ROe," (T5 model)"),ROe.forEach(t),BOr=i(ae),A0=n(ae,"LI",{});var POe=s(A0);Z5e=n(POe,"STRONG",{});var LGt=s(Z5e);NOr=r(LGt,"vision-text-dual-encoder"),LGt.forEach(t),IOr=r(POe," \u2014 "),Lee=n(POe,"A",{href:!0});var yGt=s(Lee);qOr=r(yGt,"FlaxVisionTextDualEncoderModel"),yGt.forEach(t),jOr=r(POe," (VisionTextDualEncoder model)"),POe.forEach(t),DOr=i(ae),L0=n(ae,"LI",{});var BOe=s(L0);e0e=n(BOe,"STRONG",{});var xGt=s(e0e);GOr=r(xGt,"vit"),xGt.forEach(t),OOr=r(BOe," \u2014 "),yee=n(BOe,"A",{href:!0});var $Gt=s(yee);VOr=r($Gt,"FlaxViTModel"),$Gt.forEach(t),XOr=r(BOe," (ViT model)"),BOe.forEach(t),zOr=i(ae),y0=n(ae,"LI",{});var NOe=s(y0);o0e=n(NOe,"STRONG",{});var kGt=s(o0e);QOr=r(kGt,"wav2vec2"),kGt.forEach(t),WOr=r(NOe," \u2014 "),xee=n(NOe,"A",{href:!0});var SGt=s(xee);HOr=r(SGt,"FlaxWav2Vec2Model"),SGt.forEach(t),UOr=r(NOe," (Wav2Vec2 model)"),NOe.forEach(t),JOr=i(ae),x0=n(ae,"LI",{});var IOe=s(x0);r0e=n(IOe,"STRONG",{});var RGt=s(r0e);YOr=r(RGt,"xglm"),RGt.forEach(t),KOr=r(IOe," \u2014 "),$ee=n(IOe,"A",{href:!0});var PGt=s($ee);ZOr=r(PGt,"FlaxXGLMModel"),PGt.forEach(t),eVr=r(IOe," (XGLM model)"),IOe.forEach(t),oVr=i(ae),$0=n(ae,"LI",{});var qOe=s($0);t0e=n(qOe,"STRONG",{});var BGt=s(t0e);rVr=r(BGt,"xlm-roberta"),BGt.forEach(t),tVr=r(qOe," \u2014 "),kee=n(qOe,"A",{href:!0});var NGt=s(kee);aVr=r(NGt,"FlaxXLMRobertaModel"),NGt.forEach(t),nVr=r(qOe," (XLM-RoBERTa model)"),qOe.forEach(t),ae.forEach(t),sVr=i(ni),T(k0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Yze=i(f),Kc=n(f,"H2",{class:!0});var sHe=s(Kc);S0=n(sHe,"A",{id:!0,class:!0,href:!0});var IGt=s(S0);a0e=n(IGt,"SPAN",{});var qGt=s(a0e);T(_$.$$.fragment,qGt),qGt.forEach(t),IGt.forEach(t),lVr=i(sHe),n0e=n(sHe,"SPAN",{});var jGt=s(n0e);iVr=r(jGt,"FlaxAutoModelForCausalLM"),jGt.forEach(t),sHe.forEach(t),Kze=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(u$.$$.fragment,si),dVr=i(si),Zc=n(si,"P",{});var mae=s(Zc);cVr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),See=n(mae,"A",{href:!0});var DGt=s(See);fVr=r(DGt,"from_pretrained()"),DGt.forEach(t),mVr=r(mae," class method or the "),Ree=n(mae,"A",{href:!0});var GGt=s(Ree);gVr=r(GGt,"from_config()"),GGt.forEach(t),hVr=r(mae,` class
method.`),mae.forEach(t),pVr=i(si),b$=n(si,"P",{});var lHe=s(b$);_Vr=r(lHe,"This class cannot be instantiated directly using "),s0e=n(lHe,"CODE",{});var OGt=s(s0e);uVr=r(OGt,"__init__()"),OGt.forEach(t),bVr=r(lHe," (throws an error)."),lHe.forEach(t),vVr=i(si),Ht=n(si,"DIV",{class:!0});var N7=s(Ht);T(v$.$$.fragment,N7),FVr=i(N7),l0e=n(N7,"P",{});var VGt=s(l0e);TVr=r(VGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VGt.forEach(t),MVr=i(N7),ef=n(N7,"P",{});var gae=s(ef);EVr=r(gae,`Note:
Loading a model from its configuration file does `),i0e=n(gae,"STRONG",{});var XGt=s(i0e);CVr=r(XGt,"not"),XGt.forEach(t),wVr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(gae,"A",{href:!0});var zGt=s(Pee);AVr=r(zGt,"from_pretrained()"),zGt.forEach(t),LVr=r(gae," to load the model weights."),gae.forEach(t),yVr=i(N7),T(R0.$$.fragment,N7),N7.forEach(t),xVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(F$.$$.fragment,li),$Vr=i(li),d0e=n(li,"P",{});var QGt=s(d0e);kVr=r(QGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QGt.forEach(t),SVr=i(li),Mn=n(li,"P",{});var I7=s(Mn);RVr=r(I7,"The model class to instantiate is selected based on the "),c0e=n(I7,"CODE",{});var WGt=s(c0e);PVr=r(WGt,"model_type"),WGt.forEach(t),BVr=r(I7,` property of the config object (either
passed as an argument or loaded from `),f0e=n(I7,"CODE",{});var HGt=s(f0e);NVr=r(HGt,"pretrained_model_name_or_path"),HGt.forEach(t),IVr=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(I7,"CODE",{});var UGt=s(m0e);qVr=r(UGt,"pretrained_model_name_or_path"),UGt.forEach(t),jVr=r(I7,":"),I7.forEach(t),DVr=i(li),xe=n(li,"UL",{});var Ie=s(xe);P0=n(Ie,"LI",{});var jOe=s(P0);g0e=n(jOe,"STRONG",{});var JGt=s(g0e);GVr=r(JGt,"bart"),JGt.forEach(t),OVr=r(jOe," \u2014 "),Bee=n(jOe,"A",{href:!0});var YGt=s(Bee);VVr=r(YGt,"FlaxBartForCausalLM"),YGt.forEach(t),XVr=r(jOe," (BART model)"),jOe.forEach(t),zVr=i(Ie),B0=n(Ie,"LI",{});var DOe=s(B0);h0e=n(DOe,"STRONG",{});var KGt=s(h0e);QVr=r(KGt,"bert"),KGt.forEach(t),WVr=r(DOe," \u2014 "),Nee=n(DOe,"A",{href:!0});var ZGt=s(Nee);HVr=r(ZGt,"FlaxBertForCausalLM"),ZGt.forEach(t),UVr=r(DOe," (BERT model)"),DOe.forEach(t),JVr=i(Ie),N0=n(Ie,"LI",{});var GOe=s(N0);p0e=n(GOe,"STRONG",{});var eOt=s(p0e);YVr=r(eOt,"big_bird"),eOt.forEach(t),KVr=r(GOe," \u2014 "),Iee=n(GOe,"A",{href:!0});var oOt=s(Iee);ZVr=r(oOt,"FlaxBigBirdForCausalLM"),oOt.forEach(t),eXr=r(GOe," (BigBird model)"),GOe.forEach(t),oXr=i(Ie),I0=n(Ie,"LI",{});var OOe=s(I0);_0e=n(OOe,"STRONG",{});var rOt=s(_0e);rXr=r(rOt,"electra"),rOt.forEach(t),tXr=r(OOe," \u2014 "),qee=n(OOe,"A",{href:!0});var tOt=s(qee);aXr=r(tOt,"FlaxElectraForCausalLM"),tOt.forEach(t),nXr=r(OOe," (ELECTRA model)"),OOe.forEach(t),sXr=i(Ie),q0=n(Ie,"LI",{});var VOe=s(q0);u0e=n(VOe,"STRONG",{});var aOt=s(u0e);lXr=r(aOt,"gpt2"),aOt.forEach(t),iXr=r(VOe," \u2014 "),jee=n(VOe,"A",{href:!0});var nOt=s(jee);dXr=r(nOt,"FlaxGPT2LMHeadModel"),nOt.forEach(t),cXr=r(VOe," (OpenAI GPT-2 model)"),VOe.forEach(t),fXr=i(Ie),j0=n(Ie,"LI",{});var XOe=s(j0);b0e=n(XOe,"STRONG",{});var sOt=s(b0e);mXr=r(sOt,"gpt_neo"),sOt.forEach(t),gXr=r(XOe," \u2014 "),Dee=n(XOe,"A",{href:!0});var lOt=s(Dee);hXr=r(lOt,"FlaxGPTNeoForCausalLM"),lOt.forEach(t),pXr=r(XOe," (GPT Neo model)"),XOe.forEach(t),_Xr=i(Ie),D0=n(Ie,"LI",{});var zOe=s(D0);v0e=n(zOe,"STRONG",{});var iOt=s(v0e);uXr=r(iOt,"gptj"),iOt.forEach(t),bXr=r(zOe," \u2014 "),Gee=n(zOe,"A",{href:!0});var dOt=s(Gee);vXr=r(dOt,"FlaxGPTJForCausalLM"),dOt.forEach(t),FXr=r(zOe," (GPT-J model)"),zOe.forEach(t),TXr=i(Ie),G0=n(Ie,"LI",{});var QOe=s(G0);F0e=n(QOe,"STRONG",{});var cOt=s(F0e);MXr=r(cOt,"opt"),cOt.forEach(t),EXr=r(QOe," \u2014 "),Oee=n(QOe,"A",{href:!0});var fOt=s(Oee);CXr=r(fOt,"FlaxOPTForCausalLM"),fOt.forEach(t),wXr=r(QOe," (OPT model)"),QOe.forEach(t),AXr=i(Ie),O0=n(Ie,"LI",{});var WOe=s(O0);T0e=n(WOe,"STRONG",{});var mOt=s(T0e);LXr=r(mOt,"roberta"),mOt.forEach(t),yXr=r(WOe," \u2014 "),Vee=n(WOe,"A",{href:!0});var gOt=s(Vee);xXr=r(gOt,"FlaxRobertaForCausalLM"),gOt.forEach(t),$Xr=r(WOe," (RoBERTa model)"),WOe.forEach(t),kXr=i(Ie),V0=n(Ie,"LI",{});var HOe=s(V0);M0e=n(HOe,"STRONG",{});var hOt=s(M0e);SXr=r(hOt,"xglm"),hOt.forEach(t),RXr=r(HOe," \u2014 "),Xee=n(HOe,"A",{href:!0});var pOt=s(Xee);PXr=r(pOt,"FlaxXGLMForCausalLM"),pOt.forEach(t),BXr=r(HOe," (XGLM model)"),HOe.forEach(t),Ie.forEach(t),NXr=i(li),T(X0.$$.fragment,li),li.forEach(t),si.forEach(t),Zze=i(f),of=n(f,"H2",{class:!0});var iHe=s(of);z0=n(iHe,"A",{id:!0,class:!0,href:!0});var _Ot=s(z0);E0e=n(_Ot,"SPAN",{});var uOt=s(E0e);T(T$.$$.fragment,uOt),uOt.forEach(t),_Ot.forEach(t),IXr=i(iHe),C0e=n(iHe,"SPAN",{});var bOt=s(C0e);qXr=r(bOt,"FlaxAutoModelForPreTraining"),bOt.forEach(t),iHe.forEach(t),eQe=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(M$.$$.fragment,ii),jXr=i(ii),rf=n(ii,"P",{});var hae=s(rf);DXr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zee=n(hae,"A",{href:!0});var vOt=s(zee);GXr=r(vOt,"from_pretrained()"),vOt.forEach(t),OXr=r(hae," class method or the "),Qee=n(hae,"A",{href:!0});var FOt=s(Qee);VXr=r(FOt,"from_config()"),FOt.forEach(t),XXr=r(hae,` class
method.`),hae.forEach(t),zXr=i(ii),E$=n(ii,"P",{});var dHe=s(E$);QXr=r(dHe,"This class cannot be instantiated directly using "),w0e=n(dHe,"CODE",{});var TOt=s(w0e);WXr=r(TOt,"__init__()"),TOt.forEach(t),HXr=r(dHe," (throws an error)."),dHe.forEach(t),UXr=i(ii),Ut=n(ii,"DIV",{class:!0});var q7=s(Ut);T(C$.$$.fragment,q7),JXr=i(q7),A0e=n(q7,"P",{});var MOt=s(A0e);YXr=r(MOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MOt.forEach(t),KXr=i(q7),tf=n(q7,"P",{});var pae=s(tf);ZXr=r(pae,`Note:
Loading a model from its configuration file does `),L0e=n(pae,"STRONG",{});var EOt=s(L0e);ezr=r(EOt,"not"),EOt.forEach(t),ozr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(pae,"A",{href:!0});var COt=s(Wee);rzr=r(COt,"from_pretrained()"),COt.forEach(t),tzr=r(pae," to load the model weights."),pae.forEach(t),azr=i(q7),T(Q0.$$.fragment,q7),q7.forEach(t),nzr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(w$.$$.fragment,di),szr=i(di),y0e=n(di,"P",{});var wOt=s(y0e);lzr=r(wOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wOt.forEach(t),izr=i(di),En=n(di,"P",{});var j7=s(En);dzr=r(j7,"The model class to instantiate is selected based on the "),x0e=n(j7,"CODE",{});var AOt=s(x0e);czr=r(AOt,"model_type"),AOt.forEach(t),fzr=r(j7,` property of the config object (either
passed as an argument or loaded from `),$0e=n(j7,"CODE",{});var LOt=s($0e);mzr=r(LOt,"pretrained_model_name_or_path"),LOt.forEach(t),gzr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=n(j7,"CODE",{});var yOt=s(k0e);hzr=r(yOt,"pretrained_model_name_or_path"),yOt.forEach(t),pzr=r(j7,":"),j7.forEach(t),_zr=i(di),Ee=n(di,"UL",{});var we=s(Ee);W0=n(we,"LI",{});var UOe=s(W0);S0e=n(UOe,"STRONG",{});var xOt=s(S0e);uzr=r(xOt,"albert"),xOt.forEach(t),bzr=r(UOe," \u2014 "),Hee=n(UOe,"A",{href:!0});var $Ot=s(Hee);vzr=r($Ot,"FlaxAlbertForPreTraining"),$Ot.forEach(t),Fzr=r(UOe," (ALBERT model)"),UOe.forEach(t),Tzr=i(we),H0=n(we,"LI",{});var JOe=s(H0);R0e=n(JOe,"STRONG",{});var kOt=s(R0e);Mzr=r(kOt,"bart"),kOt.forEach(t),Ezr=r(JOe," \u2014 "),Uee=n(JOe,"A",{href:!0});var SOt=s(Uee);Czr=r(SOt,"FlaxBartForConditionalGeneration"),SOt.forEach(t),wzr=r(JOe," (BART model)"),JOe.forEach(t),Azr=i(we),U0=n(we,"LI",{});var YOe=s(U0);P0e=n(YOe,"STRONG",{});var ROt=s(P0e);Lzr=r(ROt,"bert"),ROt.forEach(t),yzr=r(YOe," \u2014 "),Jee=n(YOe,"A",{href:!0});var POt=s(Jee);xzr=r(POt,"FlaxBertForPreTraining"),POt.forEach(t),$zr=r(YOe," (BERT model)"),YOe.forEach(t),kzr=i(we),J0=n(we,"LI",{});var KOe=s(J0);B0e=n(KOe,"STRONG",{});var BOt=s(B0e);Szr=r(BOt,"big_bird"),BOt.forEach(t),Rzr=r(KOe," \u2014 "),Yee=n(KOe,"A",{href:!0});var NOt=s(Yee);Pzr=r(NOt,"FlaxBigBirdForPreTraining"),NOt.forEach(t),Bzr=r(KOe," (BigBird model)"),KOe.forEach(t),Nzr=i(we),Y0=n(we,"LI",{});var ZOe=s(Y0);N0e=n(ZOe,"STRONG",{});var IOt=s(N0e);Izr=r(IOt,"electra"),IOt.forEach(t),qzr=r(ZOe," \u2014 "),Kee=n(ZOe,"A",{href:!0});var qOt=s(Kee);jzr=r(qOt,"FlaxElectraForPreTraining"),qOt.forEach(t),Dzr=r(ZOe," (ELECTRA model)"),ZOe.forEach(t),Gzr=i(we),K0=n(we,"LI",{});var eVe=s(K0);I0e=n(eVe,"STRONG",{});var jOt=s(I0e);Ozr=r(jOt,"longt5"),jOt.forEach(t),Vzr=r(eVe," \u2014 "),Zee=n(eVe,"A",{href:!0});var DOt=s(Zee);Xzr=r(DOt,"FlaxLongT5ForConditionalGeneration"),DOt.forEach(t),zzr=r(eVe," (LongT5 model)"),eVe.forEach(t),Qzr=i(we),Z0=n(we,"LI",{});var oVe=s(Z0);q0e=n(oVe,"STRONG",{});var GOt=s(q0e);Wzr=r(GOt,"mbart"),GOt.forEach(t),Hzr=r(oVe," \u2014 "),eoe=n(oVe,"A",{href:!0});var OOt=s(eoe);Uzr=r(OOt,"FlaxMBartForConditionalGeneration"),OOt.forEach(t),Jzr=r(oVe," (mBART model)"),oVe.forEach(t),Yzr=i(we),ew=n(we,"LI",{});var rVe=s(ew);j0e=n(rVe,"STRONG",{});var VOt=s(j0e);Kzr=r(VOt,"mt5"),VOt.forEach(t),Zzr=r(rVe," \u2014 "),ooe=n(rVe,"A",{href:!0});var XOt=s(ooe);eQr=r(XOt,"FlaxMT5ForConditionalGeneration"),XOt.forEach(t),oQr=r(rVe," (MT5 model)"),rVe.forEach(t),rQr=i(we),ow=n(we,"LI",{});var tVe=s(ow);D0e=n(tVe,"STRONG",{});var zOt=s(D0e);tQr=r(zOt,"roberta"),zOt.forEach(t),aQr=r(tVe," \u2014 "),roe=n(tVe,"A",{href:!0});var QOt=s(roe);nQr=r(QOt,"FlaxRobertaForMaskedLM"),QOt.forEach(t),sQr=r(tVe," (RoBERTa model)"),tVe.forEach(t),lQr=i(we),rw=n(we,"LI",{});var aVe=s(rw);G0e=n(aVe,"STRONG",{});var WOt=s(G0e);iQr=r(WOt,"roformer"),WOt.forEach(t),dQr=r(aVe," \u2014 "),toe=n(aVe,"A",{href:!0});var HOt=s(toe);cQr=r(HOt,"FlaxRoFormerForMaskedLM"),HOt.forEach(t),fQr=r(aVe," (RoFormer model)"),aVe.forEach(t),mQr=i(we),tw=n(we,"LI",{});var nVe=s(tw);O0e=n(nVe,"STRONG",{});var UOt=s(O0e);gQr=r(UOt,"t5"),UOt.forEach(t),hQr=r(nVe," \u2014 "),aoe=n(nVe,"A",{href:!0});var JOt=s(aoe);pQr=r(JOt,"FlaxT5ForConditionalGeneration"),JOt.forEach(t),_Qr=r(nVe," (T5 model)"),nVe.forEach(t),uQr=i(we),aw=n(we,"LI",{});var sVe=s(aw);V0e=n(sVe,"STRONG",{});var YOt=s(V0e);bQr=r(YOt,"wav2vec2"),YOt.forEach(t),vQr=r(sVe," \u2014 "),noe=n(sVe,"A",{href:!0});var KOt=s(noe);FQr=r(KOt,"FlaxWav2Vec2ForPreTraining"),KOt.forEach(t),TQr=r(sVe," (Wav2Vec2 model)"),sVe.forEach(t),MQr=i(we),nw=n(we,"LI",{});var lVe=s(nw);X0e=n(lVe,"STRONG",{});var ZOt=s(X0e);EQr=r(ZOt,"xlm-roberta"),ZOt.forEach(t),CQr=r(lVe," \u2014 "),soe=n(lVe,"A",{href:!0});var eVt=s(soe);wQr=r(eVt,"FlaxXLMRobertaForMaskedLM"),eVt.forEach(t),AQr=r(lVe," (XLM-RoBERTa model)"),lVe.forEach(t),we.forEach(t),LQr=i(di),T(sw.$$.fragment,di),di.forEach(t),ii.forEach(t),oQe=i(f),af=n(f,"H2",{class:!0});var cHe=s(af);lw=n(cHe,"A",{id:!0,class:!0,href:!0});var oVt=s(lw);z0e=n(oVt,"SPAN",{});var rVt=s(z0e);T(A$.$$.fragment,rVt),rVt.forEach(t),oVt.forEach(t),yQr=i(cHe),Q0e=n(cHe,"SPAN",{});var tVt=s(Q0e);xQr=r(tVt,"FlaxAutoModelForMaskedLM"),tVt.forEach(t),cHe.forEach(t),rQe=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(L$.$$.fragment,ci),$Qr=i(ci),nf=n(ci,"P",{});var _ae=s(nf);kQr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),loe=n(_ae,"A",{href:!0});var aVt=s(loe);SQr=r(aVt,"from_pretrained()"),aVt.forEach(t),RQr=r(_ae," class method or the "),ioe=n(_ae,"A",{href:!0});var nVt=s(ioe);PQr=r(nVt,"from_config()"),nVt.forEach(t),BQr=r(_ae,` class
method.`),_ae.forEach(t),NQr=i(ci),y$=n(ci,"P",{});var fHe=s(y$);IQr=r(fHe,"This class cannot be instantiated directly using "),W0e=n(fHe,"CODE",{});var sVt=s(W0e);qQr=r(sVt,"__init__()"),sVt.forEach(t),jQr=r(fHe," (throws an error)."),fHe.forEach(t),DQr=i(ci),Jt=n(ci,"DIV",{class:!0});var D7=s(Jt);T(x$.$$.fragment,D7),GQr=i(D7),H0e=n(D7,"P",{});var lVt=s(H0e);OQr=r(lVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lVt.forEach(t),VQr=i(D7),sf=n(D7,"P",{});var uae=s(sf);XQr=r(uae,`Note:
Loading a model from its configuration file does `),U0e=n(uae,"STRONG",{});var iVt=s(U0e);zQr=r(iVt,"not"),iVt.forEach(t),QQr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(uae,"A",{href:!0});var dVt=s(doe);WQr=r(dVt,"from_pretrained()"),dVt.forEach(t),HQr=r(uae," to load the model weights."),uae.forEach(t),UQr=i(D7),T(iw.$$.fragment,D7),D7.forEach(t),JQr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T($$.$$.fragment,fi),YQr=i(fi),J0e=n(fi,"P",{});var cVt=s(J0e);KQr=r(cVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cVt.forEach(t),ZQr=i(fi),Cn=n(fi,"P",{});var G7=s(Cn);eWr=r(G7,"The model class to instantiate is selected based on the "),Y0e=n(G7,"CODE",{});var fVt=s(Y0e);oWr=r(fVt,"model_type"),fVt.forEach(t),rWr=r(G7,` property of the config object (either
passed as an argument or loaded from `),K0e=n(G7,"CODE",{});var mVt=s(K0e);tWr=r(mVt,"pretrained_model_name_or_path"),mVt.forEach(t),aWr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(G7,"CODE",{});var gVt=s(Z0e);nWr=r(gVt,"pretrained_model_name_or_path"),gVt.forEach(t),sWr=r(G7,":"),G7.forEach(t),lWr=i(fi),$e=n(fi,"UL",{});var qe=s($e);dw=n(qe,"LI",{});var iVe=s(dw);ewe=n(iVe,"STRONG",{});var hVt=s(ewe);iWr=r(hVt,"albert"),hVt.forEach(t),dWr=r(iVe," \u2014 "),coe=n(iVe,"A",{href:!0});var pVt=s(coe);cWr=r(pVt,"FlaxAlbertForMaskedLM"),pVt.forEach(t),fWr=r(iVe," (ALBERT model)"),iVe.forEach(t),mWr=i(qe),cw=n(qe,"LI",{});var dVe=s(cw);owe=n(dVe,"STRONG",{});var _Vt=s(owe);gWr=r(_Vt,"bart"),_Vt.forEach(t),hWr=r(dVe," \u2014 "),foe=n(dVe,"A",{href:!0});var uVt=s(foe);pWr=r(uVt,"FlaxBartForConditionalGeneration"),uVt.forEach(t),_Wr=r(dVe," (BART model)"),dVe.forEach(t),uWr=i(qe),fw=n(qe,"LI",{});var cVe=s(fw);rwe=n(cVe,"STRONG",{});var bVt=s(rwe);bWr=r(bVt,"bert"),bVt.forEach(t),vWr=r(cVe," \u2014 "),moe=n(cVe,"A",{href:!0});var vVt=s(moe);FWr=r(vVt,"FlaxBertForMaskedLM"),vVt.forEach(t),TWr=r(cVe," (BERT model)"),cVe.forEach(t),MWr=i(qe),mw=n(qe,"LI",{});var fVe=s(mw);twe=n(fVe,"STRONG",{});var FVt=s(twe);EWr=r(FVt,"big_bird"),FVt.forEach(t),CWr=r(fVe," \u2014 "),goe=n(fVe,"A",{href:!0});var TVt=s(goe);wWr=r(TVt,"FlaxBigBirdForMaskedLM"),TVt.forEach(t),AWr=r(fVe," (BigBird model)"),fVe.forEach(t),LWr=i(qe),gw=n(qe,"LI",{});var mVe=s(gw);awe=n(mVe,"STRONG",{});var MVt=s(awe);yWr=r(MVt,"distilbert"),MVt.forEach(t),xWr=r(mVe," \u2014 "),hoe=n(mVe,"A",{href:!0});var EVt=s(hoe);$Wr=r(EVt,"FlaxDistilBertForMaskedLM"),EVt.forEach(t),kWr=r(mVe," (DistilBERT model)"),mVe.forEach(t),SWr=i(qe),hw=n(qe,"LI",{});var gVe=s(hw);nwe=n(gVe,"STRONG",{});var CVt=s(nwe);RWr=r(CVt,"electra"),CVt.forEach(t),PWr=r(gVe," \u2014 "),poe=n(gVe,"A",{href:!0});var wVt=s(poe);BWr=r(wVt,"FlaxElectraForMaskedLM"),wVt.forEach(t),NWr=r(gVe," (ELECTRA model)"),gVe.forEach(t),IWr=i(qe),pw=n(qe,"LI",{});var hVe=s(pw);swe=n(hVe,"STRONG",{});var AVt=s(swe);qWr=r(AVt,"mbart"),AVt.forEach(t),jWr=r(hVe," \u2014 "),_oe=n(hVe,"A",{href:!0});var LVt=s(_oe);DWr=r(LVt,"FlaxMBartForConditionalGeneration"),LVt.forEach(t),GWr=r(hVe," (mBART model)"),hVe.forEach(t),OWr=i(qe),_w=n(qe,"LI",{});var pVe=s(_w);lwe=n(pVe,"STRONG",{});var yVt=s(lwe);VWr=r(yVt,"roberta"),yVt.forEach(t),XWr=r(pVe," \u2014 "),uoe=n(pVe,"A",{href:!0});var xVt=s(uoe);zWr=r(xVt,"FlaxRobertaForMaskedLM"),xVt.forEach(t),QWr=r(pVe," (RoBERTa model)"),pVe.forEach(t),WWr=i(qe),uw=n(qe,"LI",{});var _Ve=s(uw);iwe=n(_Ve,"STRONG",{});var $Vt=s(iwe);HWr=r($Vt,"roformer"),$Vt.forEach(t),UWr=r(_Ve," \u2014 "),boe=n(_Ve,"A",{href:!0});var kVt=s(boe);JWr=r(kVt,"FlaxRoFormerForMaskedLM"),kVt.forEach(t),YWr=r(_Ve," (RoFormer model)"),_Ve.forEach(t),KWr=i(qe),bw=n(qe,"LI",{});var uVe=s(bw);dwe=n(uVe,"STRONG",{});var SVt=s(dwe);ZWr=r(SVt,"xlm-roberta"),SVt.forEach(t),eHr=r(uVe," \u2014 "),voe=n(uVe,"A",{href:!0});var RVt=s(voe);oHr=r(RVt,"FlaxXLMRobertaForMaskedLM"),RVt.forEach(t),rHr=r(uVe," (XLM-RoBERTa model)"),uVe.forEach(t),qe.forEach(t),tHr=i(fi),T(vw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),tQe=i(f),lf=n(f,"H2",{class:!0});var mHe=s(lf);Fw=n(mHe,"A",{id:!0,class:!0,href:!0});var PVt=s(Fw);cwe=n(PVt,"SPAN",{});var BVt=s(cwe);T(k$.$$.fragment,BVt),BVt.forEach(t),PVt.forEach(t),aHr=i(mHe),fwe=n(mHe,"SPAN",{});var NVt=s(fwe);nHr=r(NVt,"FlaxAutoModelForSeq2SeqLM"),NVt.forEach(t),mHe.forEach(t),aQe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(S$.$$.fragment,mi),sHr=i(mi),df=n(mi,"P",{});var bae=s(df);lHr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Foe=n(bae,"A",{href:!0});var IVt=s(Foe);iHr=r(IVt,"from_pretrained()"),IVt.forEach(t),dHr=r(bae," class method or the "),Toe=n(bae,"A",{href:!0});var qVt=s(Toe);cHr=r(qVt,"from_config()"),qVt.forEach(t),fHr=r(bae,` class
method.`),bae.forEach(t),mHr=i(mi),R$=n(mi,"P",{});var gHe=s(R$);gHr=r(gHe,"This class cannot be instantiated directly using "),mwe=n(gHe,"CODE",{});var jVt=s(mwe);hHr=r(jVt,"__init__()"),jVt.forEach(t),pHr=r(gHe," (throws an error)."),gHe.forEach(t),_Hr=i(mi),Yt=n(mi,"DIV",{class:!0});var O7=s(Yt);T(P$.$$.fragment,O7),uHr=i(O7),gwe=n(O7,"P",{});var DVt=s(gwe);bHr=r(DVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DVt.forEach(t),vHr=i(O7),cf=n(O7,"P",{});var vae=s(cf);FHr=r(vae,`Note:
Loading a model from its configuration file does `),hwe=n(vae,"STRONG",{});var GVt=s(hwe);THr=r(GVt,"not"),GVt.forEach(t),MHr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=n(vae,"A",{href:!0});var OVt=s(Moe);EHr=r(OVt,"from_pretrained()"),OVt.forEach(t),CHr=r(vae," to load the model weights."),vae.forEach(t),wHr=i(O7),T(Tw.$$.fragment,O7),O7.forEach(t),AHr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(B$.$$.fragment,gi),LHr=i(gi),pwe=n(gi,"P",{});var VVt=s(pwe);yHr=r(VVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VVt.forEach(t),xHr=i(gi),wn=n(gi,"P",{});var V7=s(wn);$Hr=r(V7,"The model class to instantiate is selected based on the "),_we=n(V7,"CODE",{});var XVt=s(_we);kHr=r(XVt,"model_type"),XVt.forEach(t),SHr=r(V7,` property of the config object (either
passed as an argument or loaded from `),uwe=n(V7,"CODE",{});var zVt=s(uwe);RHr=r(zVt,"pretrained_model_name_or_path"),zVt.forEach(t),PHr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=n(V7,"CODE",{});var QVt=s(bwe);BHr=r(QVt,"pretrained_model_name_or_path"),QVt.forEach(t),NHr=r(V7,":"),V7.forEach(t),IHr=i(gi),ke=n(gi,"UL",{});var je=s(ke);Mw=n(je,"LI",{});var bVe=s(Mw);vwe=n(bVe,"STRONG",{});var WVt=s(vwe);qHr=r(WVt,"bart"),WVt.forEach(t),jHr=r(bVe," \u2014 "),Eoe=n(bVe,"A",{href:!0});var HVt=s(Eoe);DHr=r(HVt,"FlaxBartForConditionalGeneration"),HVt.forEach(t),GHr=r(bVe," (BART model)"),bVe.forEach(t),OHr=i(je),Ew=n(je,"LI",{});var vVe=s(Ew);Fwe=n(vVe,"STRONG",{});var UVt=s(Fwe);VHr=r(UVt,"blenderbot"),UVt.forEach(t),XHr=r(vVe," \u2014 "),Coe=n(vVe,"A",{href:!0});var JVt=s(Coe);zHr=r(JVt,"FlaxBlenderbotForConditionalGeneration"),JVt.forEach(t),QHr=r(vVe," (Blenderbot model)"),vVe.forEach(t),WHr=i(je),Cw=n(je,"LI",{});var FVe=s(Cw);Twe=n(FVe,"STRONG",{});var YVt=s(Twe);HHr=r(YVt,"blenderbot-small"),YVt.forEach(t),UHr=r(FVe," \u2014 "),woe=n(FVe,"A",{href:!0});var KVt=s(woe);JHr=r(KVt,"FlaxBlenderbotSmallForConditionalGeneration"),KVt.forEach(t),YHr=r(FVe," (BlenderbotSmall model)"),FVe.forEach(t),KHr=i(je),ww=n(je,"LI",{});var TVe=s(ww);Mwe=n(TVe,"STRONG",{});var ZVt=s(Mwe);ZHr=r(ZVt,"encoder-decoder"),ZVt.forEach(t),eUr=r(TVe," \u2014 "),Aoe=n(TVe,"A",{href:!0});var eXt=s(Aoe);oUr=r(eXt,"FlaxEncoderDecoderModel"),eXt.forEach(t),rUr=r(TVe," (Encoder decoder model)"),TVe.forEach(t),tUr=i(je),Aw=n(je,"LI",{});var MVe=s(Aw);Ewe=n(MVe,"STRONG",{});var oXt=s(Ewe);aUr=r(oXt,"longt5"),oXt.forEach(t),nUr=r(MVe," \u2014 "),Loe=n(MVe,"A",{href:!0});var rXt=s(Loe);sUr=r(rXt,"FlaxLongT5ForConditionalGeneration"),rXt.forEach(t),lUr=r(MVe," (LongT5 model)"),MVe.forEach(t),iUr=i(je),Lw=n(je,"LI",{});var EVe=s(Lw);Cwe=n(EVe,"STRONG",{});var tXt=s(Cwe);dUr=r(tXt,"marian"),tXt.forEach(t),cUr=r(EVe," \u2014 "),yoe=n(EVe,"A",{href:!0});var aXt=s(yoe);fUr=r(aXt,"FlaxMarianMTModel"),aXt.forEach(t),mUr=r(EVe," (Marian model)"),EVe.forEach(t),gUr=i(je),yw=n(je,"LI",{});var CVe=s(yw);wwe=n(CVe,"STRONG",{});var nXt=s(wwe);hUr=r(nXt,"mbart"),nXt.forEach(t),pUr=r(CVe," \u2014 "),xoe=n(CVe,"A",{href:!0});var sXt=s(xoe);_Ur=r(sXt,"FlaxMBartForConditionalGeneration"),sXt.forEach(t),uUr=r(CVe," (mBART model)"),CVe.forEach(t),bUr=i(je),xw=n(je,"LI",{});var wVe=s(xw);Awe=n(wVe,"STRONG",{});var lXt=s(Awe);vUr=r(lXt,"mt5"),lXt.forEach(t),FUr=r(wVe," \u2014 "),$oe=n(wVe,"A",{href:!0});var iXt=s($oe);TUr=r(iXt,"FlaxMT5ForConditionalGeneration"),iXt.forEach(t),MUr=r(wVe," (MT5 model)"),wVe.forEach(t),EUr=i(je),$w=n(je,"LI",{});var AVe=s($w);Lwe=n(AVe,"STRONG",{});var dXt=s(Lwe);CUr=r(dXt,"pegasus"),dXt.forEach(t),wUr=r(AVe," \u2014 "),koe=n(AVe,"A",{href:!0});var cXt=s(koe);AUr=r(cXt,"FlaxPegasusForConditionalGeneration"),cXt.forEach(t),LUr=r(AVe," (Pegasus model)"),AVe.forEach(t),yUr=i(je),kw=n(je,"LI",{});var LVe=s(kw);ywe=n(LVe,"STRONG",{});var fXt=s(ywe);xUr=r(fXt,"t5"),fXt.forEach(t),$Ur=r(LVe," \u2014 "),Soe=n(LVe,"A",{href:!0});var mXt=s(Soe);kUr=r(mXt,"FlaxT5ForConditionalGeneration"),mXt.forEach(t),SUr=r(LVe," (T5 model)"),LVe.forEach(t),je.forEach(t),RUr=i(gi),T(Sw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),nQe=i(f),ff=n(f,"H2",{class:!0});var hHe=s(ff);Rw=n(hHe,"A",{id:!0,class:!0,href:!0});var gXt=s(Rw);xwe=n(gXt,"SPAN",{});var hXt=s(xwe);T(N$.$$.fragment,hXt),hXt.forEach(t),gXt.forEach(t),PUr=i(hHe),$we=n(hHe,"SPAN",{});var pXt=s($we);BUr=r(pXt,"FlaxAutoModelForSequenceClassification"),pXt.forEach(t),hHe.forEach(t),sQe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(I$.$$.fragment,hi),NUr=i(hi),mf=n(hi,"P",{});var Fae=s(mf);IUr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Roe=n(Fae,"A",{href:!0});var _Xt=s(Roe);qUr=r(_Xt,"from_pretrained()"),_Xt.forEach(t),jUr=r(Fae," class method or the "),Poe=n(Fae,"A",{href:!0});var uXt=s(Poe);DUr=r(uXt,"from_config()"),uXt.forEach(t),GUr=r(Fae,` class
method.`),Fae.forEach(t),OUr=i(hi),q$=n(hi,"P",{});var pHe=s(q$);VUr=r(pHe,"This class cannot be instantiated directly using "),kwe=n(pHe,"CODE",{});var bXt=s(kwe);XUr=r(bXt,"__init__()"),bXt.forEach(t),zUr=r(pHe," (throws an error)."),pHe.forEach(t),QUr=i(hi),Kt=n(hi,"DIV",{class:!0});var X7=s(Kt);T(j$.$$.fragment,X7),WUr=i(X7),Swe=n(X7,"P",{});var vXt=s(Swe);HUr=r(vXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vXt.forEach(t),UUr=i(X7),gf=n(X7,"P",{});var Tae=s(gf);JUr=r(Tae,`Note:
Loading a model from its configuration file does `),Rwe=n(Tae,"STRONG",{});var FXt=s(Rwe);YUr=r(FXt,"not"),FXt.forEach(t),KUr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=n(Tae,"A",{href:!0});var TXt=s(Boe);ZUr=r(TXt,"from_pretrained()"),TXt.forEach(t),eJr=r(Tae," to load the model weights."),Tae.forEach(t),oJr=i(X7),T(Pw.$$.fragment,X7),X7.forEach(t),rJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(D$.$$.fragment,pi),tJr=i(pi),Pwe=n(pi,"P",{});var MXt=s(Pwe);aJr=r(MXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MXt.forEach(t),nJr=i(pi),An=n(pi,"P",{});var z7=s(An);sJr=r(z7,"The model class to instantiate is selected based on the "),Bwe=n(z7,"CODE",{});var EXt=s(Bwe);lJr=r(EXt,"model_type"),EXt.forEach(t),iJr=r(z7,` property of the config object (either
passed as an argument or loaded from `),Nwe=n(z7,"CODE",{});var CXt=s(Nwe);dJr=r(CXt,"pretrained_model_name_or_path"),CXt.forEach(t),cJr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iwe=n(z7,"CODE",{});var wXt=s(Iwe);fJr=r(wXt,"pretrained_model_name_or_path"),wXt.forEach(t),mJr=r(z7,":"),z7.forEach(t),gJr=i(pi),Se=n(pi,"UL",{});var De=s(Se);Bw=n(De,"LI",{});var yVe=s(Bw);qwe=n(yVe,"STRONG",{});var AXt=s(qwe);hJr=r(AXt,"albert"),AXt.forEach(t),pJr=r(yVe," \u2014 "),Noe=n(yVe,"A",{href:!0});var LXt=s(Noe);_Jr=r(LXt,"FlaxAlbertForSequenceClassification"),LXt.forEach(t),uJr=r(yVe," (ALBERT model)"),yVe.forEach(t),bJr=i(De),Nw=n(De,"LI",{});var xVe=s(Nw);jwe=n(xVe,"STRONG",{});var yXt=s(jwe);vJr=r(yXt,"bart"),yXt.forEach(t),FJr=r(xVe," \u2014 "),Ioe=n(xVe,"A",{href:!0});var xXt=s(Ioe);TJr=r(xXt,"FlaxBartForSequenceClassification"),xXt.forEach(t),MJr=r(xVe," (BART model)"),xVe.forEach(t),EJr=i(De),Iw=n(De,"LI",{});var $Ve=s(Iw);Dwe=n($Ve,"STRONG",{});var $Xt=s(Dwe);CJr=r($Xt,"bert"),$Xt.forEach(t),wJr=r($Ve," \u2014 "),qoe=n($Ve,"A",{href:!0});var kXt=s(qoe);AJr=r(kXt,"FlaxBertForSequenceClassification"),kXt.forEach(t),LJr=r($Ve," (BERT model)"),$Ve.forEach(t),yJr=i(De),qw=n(De,"LI",{});var kVe=s(qw);Gwe=n(kVe,"STRONG",{});var SXt=s(Gwe);xJr=r(SXt,"big_bird"),SXt.forEach(t),$Jr=r(kVe," \u2014 "),joe=n(kVe,"A",{href:!0});var RXt=s(joe);kJr=r(RXt,"FlaxBigBirdForSequenceClassification"),RXt.forEach(t),SJr=r(kVe," (BigBird model)"),kVe.forEach(t),RJr=i(De),jw=n(De,"LI",{});var SVe=s(jw);Owe=n(SVe,"STRONG",{});var PXt=s(Owe);PJr=r(PXt,"distilbert"),PXt.forEach(t),BJr=r(SVe," \u2014 "),Doe=n(SVe,"A",{href:!0});var BXt=s(Doe);NJr=r(BXt,"FlaxDistilBertForSequenceClassification"),BXt.forEach(t),IJr=r(SVe," (DistilBERT model)"),SVe.forEach(t),qJr=i(De),Dw=n(De,"LI",{});var RVe=s(Dw);Vwe=n(RVe,"STRONG",{});var NXt=s(Vwe);jJr=r(NXt,"electra"),NXt.forEach(t),DJr=r(RVe," \u2014 "),Goe=n(RVe,"A",{href:!0});var IXt=s(Goe);GJr=r(IXt,"FlaxElectraForSequenceClassification"),IXt.forEach(t),OJr=r(RVe," (ELECTRA model)"),RVe.forEach(t),VJr=i(De),Gw=n(De,"LI",{});var PVe=s(Gw);Xwe=n(PVe,"STRONG",{});var qXt=s(Xwe);XJr=r(qXt,"mbart"),qXt.forEach(t),zJr=r(PVe," \u2014 "),Ooe=n(PVe,"A",{href:!0});var jXt=s(Ooe);QJr=r(jXt,"FlaxMBartForSequenceClassification"),jXt.forEach(t),WJr=r(PVe," (mBART model)"),PVe.forEach(t),HJr=i(De),Ow=n(De,"LI",{});var BVe=s(Ow);zwe=n(BVe,"STRONG",{});var DXt=s(zwe);UJr=r(DXt,"roberta"),DXt.forEach(t),JJr=r(BVe," \u2014 "),Voe=n(BVe,"A",{href:!0});var GXt=s(Voe);YJr=r(GXt,"FlaxRobertaForSequenceClassification"),GXt.forEach(t),KJr=r(BVe," (RoBERTa model)"),BVe.forEach(t),ZJr=i(De),Vw=n(De,"LI",{});var NVe=s(Vw);Qwe=n(NVe,"STRONG",{});var OXt=s(Qwe);eYr=r(OXt,"roformer"),OXt.forEach(t),oYr=r(NVe," \u2014 "),Xoe=n(NVe,"A",{href:!0});var VXt=s(Xoe);rYr=r(VXt,"FlaxRoFormerForSequenceClassification"),VXt.forEach(t),tYr=r(NVe," (RoFormer model)"),NVe.forEach(t),aYr=i(De),Xw=n(De,"LI",{});var IVe=s(Xw);Wwe=n(IVe,"STRONG",{});var XXt=s(Wwe);nYr=r(XXt,"xlm-roberta"),XXt.forEach(t),sYr=r(IVe," \u2014 "),zoe=n(IVe,"A",{href:!0});var zXt=s(zoe);lYr=r(zXt,"FlaxXLMRobertaForSequenceClassification"),zXt.forEach(t),iYr=r(IVe," (XLM-RoBERTa model)"),IVe.forEach(t),De.forEach(t),dYr=i(pi),T(zw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),lQe=i(f),hf=n(f,"H2",{class:!0});var _He=s(hf);Qw=n(_He,"A",{id:!0,class:!0,href:!0});var QXt=s(Qw);Hwe=n(QXt,"SPAN",{});var WXt=s(Hwe);T(G$.$$.fragment,WXt),WXt.forEach(t),QXt.forEach(t),cYr=i(_He),Uwe=n(_He,"SPAN",{});var HXt=s(Uwe);fYr=r(HXt,"FlaxAutoModelForQuestionAnswering"),HXt.forEach(t),_He.forEach(t),iQe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(O$.$$.fragment,_i),mYr=i(_i),pf=n(_i,"P",{});var Mae=s(pf);gYr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qoe=n(Mae,"A",{href:!0});var UXt=s(Qoe);hYr=r(UXt,"from_pretrained()"),UXt.forEach(t),pYr=r(Mae," class method or the "),Woe=n(Mae,"A",{href:!0});var JXt=s(Woe);_Yr=r(JXt,"from_config()"),JXt.forEach(t),uYr=r(Mae,` class
method.`),Mae.forEach(t),bYr=i(_i),V$=n(_i,"P",{});var uHe=s(V$);vYr=r(uHe,"This class cannot be instantiated directly using "),Jwe=n(uHe,"CODE",{});var YXt=s(Jwe);FYr=r(YXt,"__init__()"),YXt.forEach(t),TYr=r(uHe," (throws an error)."),uHe.forEach(t),MYr=i(_i),Zt=n(_i,"DIV",{class:!0});var Q7=s(Zt);T(X$.$$.fragment,Q7),EYr=i(Q7),Ywe=n(Q7,"P",{});var KXt=s(Ywe);CYr=r(KXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KXt.forEach(t),wYr=i(Q7),_f=n(Q7,"P",{});var Eae=s(_f);AYr=r(Eae,`Note:
Loading a model from its configuration file does `),Kwe=n(Eae,"STRONG",{});var ZXt=s(Kwe);LYr=r(ZXt,"not"),ZXt.forEach(t),yYr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=n(Eae,"A",{href:!0});var ezt=s(Hoe);xYr=r(ezt,"from_pretrained()"),ezt.forEach(t),$Yr=r(Eae," to load the model weights."),Eae.forEach(t),kYr=i(Q7),T(Ww.$$.fragment,Q7),Q7.forEach(t),SYr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(z$.$$.fragment,ui),RYr=i(ui),Zwe=n(ui,"P",{});var ozt=s(Zwe);PYr=r(ozt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ozt.forEach(t),BYr=i(ui),Ln=n(ui,"P",{});var W7=s(Ln);NYr=r(W7,"The model class to instantiate is selected based on the "),eAe=n(W7,"CODE",{});var rzt=s(eAe);IYr=r(rzt,"model_type"),rzt.forEach(t),qYr=r(W7,` property of the config object (either
passed as an argument or loaded from `),oAe=n(W7,"CODE",{});var tzt=s(oAe);jYr=r(tzt,"pretrained_model_name_or_path"),tzt.forEach(t),DYr=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rAe=n(W7,"CODE",{});var azt=s(rAe);GYr=r(azt,"pretrained_model_name_or_path"),azt.forEach(t),OYr=r(W7,":"),W7.forEach(t),VYr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);Hw=n(Ge,"LI",{});var qVe=s(Hw);tAe=n(qVe,"STRONG",{});var nzt=s(tAe);XYr=r(nzt,"albert"),nzt.forEach(t),zYr=r(qVe," \u2014 "),Uoe=n(qVe,"A",{href:!0});var szt=s(Uoe);QYr=r(szt,"FlaxAlbertForQuestionAnswering"),szt.forEach(t),WYr=r(qVe," (ALBERT model)"),qVe.forEach(t),HYr=i(Ge),Uw=n(Ge,"LI",{});var jVe=s(Uw);aAe=n(jVe,"STRONG",{});var lzt=s(aAe);UYr=r(lzt,"bart"),lzt.forEach(t),JYr=r(jVe," \u2014 "),Joe=n(jVe,"A",{href:!0});var izt=s(Joe);YYr=r(izt,"FlaxBartForQuestionAnswering"),izt.forEach(t),KYr=r(jVe," (BART model)"),jVe.forEach(t),ZYr=i(Ge),Jw=n(Ge,"LI",{});var DVe=s(Jw);nAe=n(DVe,"STRONG",{});var dzt=s(nAe);eKr=r(dzt,"bert"),dzt.forEach(t),oKr=r(DVe," \u2014 "),Yoe=n(DVe,"A",{href:!0});var czt=s(Yoe);rKr=r(czt,"FlaxBertForQuestionAnswering"),czt.forEach(t),tKr=r(DVe," (BERT model)"),DVe.forEach(t),aKr=i(Ge),Yw=n(Ge,"LI",{});var GVe=s(Yw);sAe=n(GVe,"STRONG",{});var fzt=s(sAe);nKr=r(fzt,"big_bird"),fzt.forEach(t),sKr=r(GVe," \u2014 "),Koe=n(GVe,"A",{href:!0});var mzt=s(Koe);lKr=r(mzt,"FlaxBigBirdForQuestionAnswering"),mzt.forEach(t),iKr=r(GVe," (BigBird model)"),GVe.forEach(t),dKr=i(Ge),Kw=n(Ge,"LI",{});var OVe=s(Kw);lAe=n(OVe,"STRONG",{});var gzt=s(lAe);cKr=r(gzt,"distilbert"),gzt.forEach(t),fKr=r(OVe," \u2014 "),Zoe=n(OVe,"A",{href:!0});var hzt=s(Zoe);mKr=r(hzt,"FlaxDistilBertForQuestionAnswering"),hzt.forEach(t),gKr=r(OVe," (DistilBERT model)"),OVe.forEach(t),hKr=i(Ge),Zw=n(Ge,"LI",{});var VVe=s(Zw);iAe=n(VVe,"STRONG",{});var pzt=s(iAe);pKr=r(pzt,"electra"),pzt.forEach(t),_Kr=r(VVe," \u2014 "),ere=n(VVe,"A",{href:!0});var _zt=s(ere);uKr=r(_zt,"FlaxElectraForQuestionAnswering"),_zt.forEach(t),bKr=r(VVe," (ELECTRA model)"),VVe.forEach(t),vKr=i(Ge),eA=n(Ge,"LI",{});var XVe=s(eA);dAe=n(XVe,"STRONG",{});var uzt=s(dAe);FKr=r(uzt,"mbart"),uzt.forEach(t),TKr=r(XVe," \u2014 "),ore=n(XVe,"A",{href:!0});var bzt=s(ore);MKr=r(bzt,"FlaxMBartForQuestionAnswering"),bzt.forEach(t),EKr=r(XVe," (mBART model)"),XVe.forEach(t),CKr=i(Ge),oA=n(Ge,"LI",{});var zVe=s(oA);cAe=n(zVe,"STRONG",{});var vzt=s(cAe);wKr=r(vzt,"roberta"),vzt.forEach(t),AKr=r(zVe," \u2014 "),rre=n(zVe,"A",{href:!0});var Fzt=s(rre);LKr=r(Fzt,"FlaxRobertaForQuestionAnswering"),Fzt.forEach(t),yKr=r(zVe," (RoBERTa model)"),zVe.forEach(t),xKr=i(Ge),rA=n(Ge,"LI",{});var QVe=s(rA);fAe=n(QVe,"STRONG",{});var Tzt=s(fAe);$Kr=r(Tzt,"roformer"),Tzt.forEach(t),kKr=r(QVe," \u2014 "),tre=n(QVe,"A",{href:!0});var Mzt=s(tre);SKr=r(Mzt,"FlaxRoFormerForQuestionAnswering"),Mzt.forEach(t),RKr=r(QVe," (RoFormer model)"),QVe.forEach(t),PKr=i(Ge),tA=n(Ge,"LI",{});var WVe=s(tA);mAe=n(WVe,"STRONG",{});var Ezt=s(mAe);BKr=r(Ezt,"xlm-roberta"),Ezt.forEach(t),NKr=r(WVe," \u2014 "),are=n(WVe,"A",{href:!0});var Czt=s(are);IKr=r(Czt,"FlaxXLMRobertaForQuestionAnswering"),Czt.forEach(t),qKr=r(WVe," (XLM-RoBERTa model)"),WVe.forEach(t),Ge.forEach(t),jKr=i(ui),T(aA.$$.fragment,ui),ui.forEach(t),_i.forEach(t),dQe=i(f),uf=n(f,"H2",{class:!0});var bHe=s(uf);nA=n(bHe,"A",{id:!0,class:!0,href:!0});var wzt=s(nA);gAe=n(wzt,"SPAN",{});var Azt=s(gAe);T(Q$.$$.fragment,Azt),Azt.forEach(t),wzt.forEach(t),DKr=i(bHe),hAe=n(bHe,"SPAN",{});var Lzt=s(hAe);GKr=r(Lzt,"FlaxAutoModelForTokenClassification"),Lzt.forEach(t),bHe.forEach(t),cQe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(W$.$$.fragment,bi),OKr=i(bi),bf=n(bi,"P",{});var Cae=s(bf);VKr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nre=n(Cae,"A",{href:!0});var yzt=s(nre);XKr=r(yzt,"from_pretrained()"),yzt.forEach(t),zKr=r(Cae," class method or the "),sre=n(Cae,"A",{href:!0});var xzt=s(sre);QKr=r(xzt,"from_config()"),xzt.forEach(t),WKr=r(Cae,` class
method.`),Cae.forEach(t),HKr=i(bi),H$=n(bi,"P",{});var vHe=s(H$);UKr=r(vHe,"This class cannot be instantiated directly using "),pAe=n(vHe,"CODE",{});var $zt=s(pAe);JKr=r($zt,"__init__()"),$zt.forEach(t),YKr=r(vHe," (throws an error)."),vHe.forEach(t),KKr=i(bi),ea=n(bi,"DIV",{class:!0});var H7=s(ea);T(U$.$$.fragment,H7),ZKr=i(H7),_Ae=n(H7,"P",{});var kzt=s(_Ae);eZr=r(kzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kzt.forEach(t),oZr=i(H7),vf=n(H7,"P",{});var wae=s(vf);rZr=r(wae,`Note:
Loading a model from its configuration file does `),uAe=n(wae,"STRONG",{});var Szt=s(uAe);tZr=r(Szt,"not"),Szt.forEach(t),aZr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=n(wae,"A",{href:!0});var Rzt=s(lre);nZr=r(Rzt,"from_pretrained()"),Rzt.forEach(t),sZr=r(wae," to load the model weights."),wae.forEach(t),lZr=i(H7),T(sA.$$.fragment,H7),H7.forEach(t),iZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(J$.$$.fragment,vi),dZr=i(vi),bAe=n(vi,"P",{});var Pzt=s(bAe);cZr=r(Pzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pzt.forEach(t),fZr=i(vi),yn=n(vi,"P",{});var U7=s(yn);mZr=r(U7,"The model class to instantiate is selected based on the "),vAe=n(U7,"CODE",{});var Bzt=s(vAe);gZr=r(Bzt,"model_type"),Bzt.forEach(t),hZr=r(U7,` property of the config object (either
passed as an argument or loaded from `),FAe=n(U7,"CODE",{});var Nzt=s(FAe);pZr=r(Nzt,"pretrained_model_name_or_path"),Nzt.forEach(t),_Zr=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TAe=n(U7,"CODE",{});var Izt=s(TAe);uZr=r(Izt,"pretrained_model_name_or_path"),Izt.forEach(t),bZr=r(U7,":"),U7.forEach(t),vZr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);lA=n(Mo,"LI",{});var HVe=s(lA);MAe=n(HVe,"STRONG",{});var qzt=s(MAe);FZr=r(qzt,"albert"),qzt.forEach(t),TZr=r(HVe," \u2014 "),ire=n(HVe,"A",{href:!0});var jzt=s(ire);MZr=r(jzt,"FlaxAlbertForTokenClassification"),jzt.forEach(t),EZr=r(HVe," (ALBERT model)"),HVe.forEach(t),CZr=i(Mo),iA=n(Mo,"LI",{});var UVe=s(iA);EAe=n(UVe,"STRONG",{});var Dzt=s(EAe);wZr=r(Dzt,"bert"),Dzt.forEach(t),AZr=r(UVe," \u2014 "),dre=n(UVe,"A",{href:!0});var Gzt=s(dre);LZr=r(Gzt,"FlaxBertForTokenClassification"),Gzt.forEach(t),yZr=r(UVe," (BERT model)"),UVe.forEach(t),xZr=i(Mo),dA=n(Mo,"LI",{});var JVe=s(dA);CAe=n(JVe,"STRONG",{});var Ozt=s(CAe);$Zr=r(Ozt,"big_bird"),Ozt.forEach(t),kZr=r(JVe," \u2014 "),cre=n(JVe,"A",{href:!0});var Vzt=s(cre);SZr=r(Vzt,"FlaxBigBirdForTokenClassification"),Vzt.forEach(t),RZr=r(JVe," (BigBird model)"),JVe.forEach(t),PZr=i(Mo),cA=n(Mo,"LI",{});var YVe=s(cA);wAe=n(YVe,"STRONG",{});var Xzt=s(wAe);BZr=r(Xzt,"distilbert"),Xzt.forEach(t),NZr=r(YVe," \u2014 "),fre=n(YVe,"A",{href:!0});var zzt=s(fre);IZr=r(zzt,"FlaxDistilBertForTokenClassification"),zzt.forEach(t),qZr=r(YVe," (DistilBERT model)"),YVe.forEach(t),jZr=i(Mo),fA=n(Mo,"LI",{});var KVe=s(fA);AAe=n(KVe,"STRONG",{});var Qzt=s(AAe);DZr=r(Qzt,"electra"),Qzt.forEach(t),GZr=r(KVe," \u2014 "),mre=n(KVe,"A",{href:!0});var Wzt=s(mre);OZr=r(Wzt,"FlaxElectraForTokenClassification"),Wzt.forEach(t),VZr=r(KVe," (ELECTRA model)"),KVe.forEach(t),XZr=i(Mo),mA=n(Mo,"LI",{});var ZVe=s(mA);LAe=n(ZVe,"STRONG",{});var Hzt=s(LAe);zZr=r(Hzt,"roberta"),Hzt.forEach(t),QZr=r(ZVe," \u2014 "),gre=n(ZVe,"A",{href:!0});var Uzt=s(gre);WZr=r(Uzt,"FlaxRobertaForTokenClassification"),Uzt.forEach(t),HZr=r(ZVe," (RoBERTa model)"),ZVe.forEach(t),UZr=i(Mo),gA=n(Mo,"LI",{});var eXe=s(gA);yAe=n(eXe,"STRONG",{});var Jzt=s(yAe);JZr=r(Jzt,"roformer"),Jzt.forEach(t),YZr=r(eXe," \u2014 "),hre=n(eXe,"A",{href:!0});var Yzt=s(hre);KZr=r(Yzt,"FlaxRoFormerForTokenClassification"),Yzt.forEach(t),ZZr=r(eXe," (RoFormer model)"),eXe.forEach(t),eet=i(Mo),hA=n(Mo,"LI",{});var oXe=s(hA);xAe=n(oXe,"STRONG",{});var Kzt=s(xAe);oet=r(Kzt,"xlm-roberta"),Kzt.forEach(t),ret=r(oXe," \u2014 "),pre=n(oXe,"A",{href:!0});var Zzt=s(pre);tet=r(Zzt,"FlaxXLMRobertaForTokenClassification"),Zzt.forEach(t),aet=r(oXe," (XLM-RoBERTa model)"),oXe.forEach(t),Mo.forEach(t),net=i(vi),T(pA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),fQe=i(f),Ff=n(f,"H2",{class:!0});var FHe=s(Ff);_A=n(FHe,"A",{id:!0,class:!0,href:!0});var eQt=s(_A);$Ae=n(eQt,"SPAN",{});var oQt=s($Ae);T(Y$.$$.fragment,oQt),oQt.forEach(t),eQt.forEach(t),set=i(FHe),kAe=n(FHe,"SPAN",{});var rQt=s(kAe);iet=r(rQt,"FlaxAutoModelForMultipleChoice"),rQt.forEach(t),FHe.forEach(t),mQe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(K$.$$.fragment,Fi),det=i(Fi),Tf=n(Fi,"P",{});var Aae=s(Tf);cet=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_re=n(Aae,"A",{href:!0});var tQt=s(_re);fet=r(tQt,"from_pretrained()"),tQt.forEach(t),met=r(Aae," class method or the "),ure=n(Aae,"A",{href:!0});var aQt=s(ure);get=r(aQt,"from_config()"),aQt.forEach(t),het=r(Aae,` class
method.`),Aae.forEach(t),pet=i(Fi),Z$=n(Fi,"P",{});var THe=s(Z$);_et=r(THe,"This class cannot be instantiated directly using "),SAe=n(THe,"CODE",{});var nQt=s(SAe);uet=r(nQt,"__init__()"),nQt.forEach(t),bet=r(THe," (throws an error)."),THe.forEach(t),vet=i(Fi),oa=n(Fi,"DIV",{class:!0});var J7=s(oa);T(ek.$$.fragment,J7),Fet=i(J7),RAe=n(J7,"P",{});var sQt=s(RAe);Tet=r(sQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sQt.forEach(t),Met=i(J7),Mf=n(J7,"P",{});var Lae=s(Mf);Eet=r(Lae,`Note:
Loading a model from its configuration file does `),PAe=n(Lae,"STRONG",{});var lQt=s(PAe);Cet=r(lQt,"not"),lQt.forEach(t),wet=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=n(Lae,"A",{href:!0});var iQt=s(bre);Aet=r(iQt,"from_pretrained()"),iQt.forEach(t),Let=r(Lae," to load the model weights."),Lae.forEach(t),yet=i(J7),T(uA.$$.fragment,J7),J7.forEach(t),xet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(ok.$$.fragment,Ti),$et=i(Ti),BAe=n(Ti,"P",{});var dQt=s(BAe);ket=r(dQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dQt.forEach(t),Set=i(Ti),xn=n(Ti,"P",{});var Y7=s(xn);Ret=r(Y7,"The model class to instantiate is selected based on the "),NAe=n(Y7,"CODE",{});var cQt=s(NAe);Pet=r(cQt,"model_type"),cQt.forEach(t),Bet=r(Y7,` property of the config object (either
passed as an argument or loaded from `),IAe=n(Y7,"CODE",{});var fQt=s(IAe);Net=r(fQt,"pretrained_model_name_or_path"),fQt.forEach(t),Iet=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qAe=n(Y7,"CODE",{});var mQt=s(qAe);qet=r(mQt,"pretrained_model_name_or_path"),mQt.forEach(t),jet=r(Y7,":"),Y7.forEach(t),Det=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);bA=n(Eo,"LI",{});var rXe=s(bA);jAe=n(rXe,"STRONG",{});var gQt=s(jAe);Get=r(gQt,"albert"),gQt.forEach(t),Oet=r(rXe," \u2014 "),vre=n(rXe,"A",{href:!0});var hQt=s(vre);Vet=r(hQt,"FlaxAlbertForMultipleChoice"),hQt.forEach(t),Xet=r(rXe," (ALBERT model)"),rXe.forEach(t),zet=i(Eo),vA=n(Eo,"LI",{});var tXe=s(vA);DAe=n(tXe,"STRONG",{});var pQt=s(DAe);Qet=r(pQt,"bert"),pQt.forEach(t),Wet=r(tXe," \u2014 "),Fre=n(tXe,"A",{href:!0});var _Qt=s(Fre);Het=r(_Qt,"FlaxBertForMultipleChoice"),_Qt.forEach(t),Uet=r(tXe," (BERT model)"),tXe.forEach(t),Jet=i(Eo),FA=n(Eo,"LI",{});var aXe=s(FA);GAe=n(aXe,"STRONG",{});var uQt=s(GAe);Yet=r(uQt,"big_bird"),uQt.forEach(t),Ket=r(aXe," \u2014 "),Tre=n(aXe,"A",{href:!0});var bQt=s(Tre);Zet=r(bQt,"FlaxBigBirdForMultipleChoice"),bQt.forEach(t),eot=r(aXe," (BigBird model)"),aXe.forEach(t),oot=i(Eo),TA=n(Eo,"LI",{});var nXe=s(TA);OAe=n(nXe,"STRONG",{});var vQt=s(OAe);rot=r(vQt,"distilbert"),vQt.forEach(t),tot=r(nXe," \u2014 "),Mre=n(nXe,"A",{href:!0});var FQt=s(Mre);aot=r(FQt,"FlaxDistilBertForMultipleChoice"),FQt.forEach(t),not=r(nXe," (DistilBERT model)"),nXe.forEach(t),sot=i(Eo),MA=n(Eo,"LI",{});var sXe=s(MA);VAe=n(sXe,"STRONG",{});var TQt=s(VAe);lot=r(TQt,"electra"),TQt.forEach(t),iot=r(sXe," \u2014 "),Ere=n(sXe,"A",{href:!0});var MQt=s(Ere);dot=r(MQt,"FlaxElectraForMultipleChoice"),MQt.forEach(t),cot=r(sXe," (ELECTRA model)"),sXe.forEach(t),fot=i(Eo),EA=n(Eo,"LI",{});var lXe=s(EA);XAe=n(lXe,"STRONG",{});var EQt=s(XAe);mot=r(EQt,"roberta"),EQt.forEach(t),got=r(lXe," \u2014 "),Cre=n(lXe,"A",{href:!0});var CQt=s(Cre);hot=r(CQt,"FlaxRobertaForMultipleChoice"),CQt.forEach(t),pot=r(lXe," (RoBERTa model)"),lXe.forEach(t),_ot=i(Eo),CA=n(Eo,"LI",{});var iXe=s(CA);zAe=n(iXe,"STRONG",{});var wQt=s(zAe);uot=r(wQt,"roformer"),wQt.forEach(t),bot=r(iXe," \u2014 "),wre=n(iXe,"A",{href:!0});var AQt=s(wre);vot=r(AQt,"FlaxRoFormerForMultipleChoice"),AQt.forEach(t),Fot=r(iXe," (RoFormer model)"),iXe.forEach(t),Tot=i(Eo),wA=n(Eo,"LI",{});var dXe=s(wA);QAe=n(dXe,"STRONG",{});var LQt=s(QAe);Mot=r(LQt,"xlm-roberta"),LQt.forEach(t),Eot=r(dXe," \u2014 "),Are=n(dXe,"A",{href:!0});var yQt=s(Are);Cot=r(yQt,"FlaxXLMRobertaForMultipleChoice"),yQt.forEach(t),wot=r(dXe," (XLM-RoBERTa model)"),dXe.forEach(t),Eo.forEach(t),Aot=i(Ti),T(AA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),gQe=i(f),Ef=n(f,"H2",{class:!0});var MHe=s(Ef);LA=n(MHe,"A",{id:!0,class:!0,href:!0});var xQt=s(LA);WAe=n(xQt,"SPAN",{});var $Qt=s(WAe);T(rk.$$.fragment,$Qt),$Qt.forEach(t),xQt.forEach(t),Lot=i(MHe),HAe=n(MHe,"SPAN",{});var kQt=s(HAe);yot=r(kQt,"FlaxAutoModelForNextSentencePrediction"),kQt.forEach(t),MHe.forEach(t),hQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(tk.$$.fragment,Mi),xot=i(Mi),Cf=n(Mi,"P",{});var yae=s(Cf);$ot=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Lre=n(yae,"A",{href:!0});var SQt=s(Lre);kot=r(SQt,"from_pretrained()"),SQt.forEach(t),Sot=r(yae," class method or the "),yre=n(yae,"A",{href:!0});var RQt=s(yre);Rot=r(RQt,"from_config()"),RQt.forEach(t),Pot=r(yae,` class
method.`),yae.forEach(t),Bot=i(Mi),ak=n(Mi,"P",{});var EHe=s(ak);Not=r(EHe,"This class cannot be instantiated directly using "),UAe=n(EHe,"CODE",{});var PQt=s(UAe);Iot=r(PQt,"__init__()"),PQt.forEach(t),qot=r(EHe," (throws an error)."),EHe.forEach(t),jot=i(Mi),ra=n(Mi,"DIV",{class:!0});var K7=s(ra);T(nk.$$.fragment,K7),Dot=i(K7),JAe=n(K7,"P",{});var BQt=s(JAe);Got=r(BQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BQt.forEach(t),Oot=i(K7),wf=n(K7,"P",{});var xae=s(wf);Vot=r(xae,`Note:
Loading a model from its configuration file does `),YAe=n(xae,"STRONG",{});var NQt=s(YAe);Xot=r(NQt,"not"),NQt.forEach(t),zot=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xre=n(xae,"A",{href:!0});var IQt=s(xre);Qot=r(IQt,"from_pretrained()"),IQt.forEach(t),Wot=r(xae," to load the model weights."),xae.forEach(t),Hot=i(K7),T(yA.$$.fragment,K7),K7.forEach(t),Uot=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(sk.$$.fragment,Ei),Jot=i(Ei),KAe=n(Ei,"P",{});var qQt=s(KAe);Yot=r(qQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qQt.forEach(t),Kot=i(Ei),$n=n(Ei,"P",{});var Z7=s($n);Zot=r(Z7,"The model class to instantiate is selected based on the "),ZAe=n(Z7,"CODE",{});var jQt=s(ZAe);ert=r(jQt,"model_type"),jQt.forEach(t),ort=r(Z7,` property of the config object (either
passed as an argument or loaded from `),e6e=n(Z7,"CODE",{});var DQt=s(e6e);rrt=r(DQt,"pretrained_model_name_or_path"),DQt.forEach(t),trt=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(Z7,"CODE",{});var GQt=s(o6e);art=r(GQt,"pretrained_model_name_or_path"),GQt.forEach(t),nrt=r(Z7,":"),Z7.forEach(t),srt=i(Ei),r6e=n(Ei,"UL",{});var OQt=s(r6e);xA=n(OQt,"LI",{});var cXe=s(xA);t6e=n(cXe,"STRONG",{});var VQt=s(t6e);lrt=r(VQt,"bert"),VQt.forEach(t),irt=r(cXe," \u2014 "),$re=n(cXe,"A",{href:!0});var XQt=s($re);drt=r(XQt,"FlaxBertForNextSentencePrediction"),XQt.forEach(t),crt=r(cXe," (BERT model)"),cXe.forEach(t),OQt.forEach(t),frt=i(Ei),T($A.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),pQe=i(f),Af=n(f,"H2",{class:!0});var CHe=s(Af);kA=n(CHe,"A",{id:!0,class:!0,href:!0});var zQt=s(kA);a6e=n(zQt,"SPAN",{});var QQt=s(a6e);T(lk.$$.fragment,QQt),QQt.forEach(t),zQt.forEach(t),mrt=i(CHe),n6e=n(CHe,"SPAN",{});var WQt=s(n6e);grt=r(WQt,"FlaxAutoModelForImageClassification"),WQt.forEach(t),CHe.forEach(t),_Qe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(ik.$$.fragment,Ci),hrt=i(Ci),Lf=n(Ci,"P",{});var $ae=s(Lf);prt=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kre=n($ae,"A",{href:!0});var HQt=s(kre);_rt=r(HQt,"from_pretrained()"),HQt.forEach(t),urt=r($ae," class method or the "),Sre=n($ae,"A",{href:!0});var UQt=s(Sre);brt=r(UQt,"from_config()"),UQt.forEach(t),vrt=r($ae,` class
method.`),$ae.forEach(t),Frt=i(Ci),dk=n(Ci,"P",{});var wHe=s(dk);Trt=r(wHe,"This class cannot be instantiated directly using "),s6e=n(wHe,"CODE",{});var JQt=s(s6e);Mrt=r(JQt,"__init__()"),JQt.forEach(t),Ert=r(wHe," (throws an error)."),wHe.forEach(t),Crt=i(Ci),ta=n(Ci,"DIV",{class:!0});var eL=s(ta);T(ck.$$.fragment,eL),wrt=i(eL),l6e=n(eL,"P",{});var YQt=s(l6e);Art=r(YQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YQt.forEach(t),Lrt=i(eL),yf=n(eL,"P",{});var kae=s(yf);yrt=r(kae,`Note:
Loading a model from its configuration file does `),i6e=n(kae,"STRONG",{});var KQt=s(i6e);xrt=r(KQt,"not"),KQt.forEach(t),$rt=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=n(kae,"A",{href:!0});var ZQt=s(Rre);krt=r(ZQt,"from_pretrained()"),ZQt.forEach(t),Srt=r(kae," to load the model weights."),kae.forEach(t),Rrt=i(eL),T(SA.$$.fragment,eL),eL.forEach(t),Prt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(fk.$$.fragment,wi),Brt=i(wi),d6e=n(wi,"P",{});var eWt=s(d6e);Nrt=r(eWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eWt.forEach(t),Irt=i(wi),kn=n(wi,"P",{});var oL=s(kn);qrt=r(oL,"The model class to instantiate is selected based on the "),c6e=n(oL,"CODE",{});var oWt=s(c6e);jrt=r(oWt,"model_type"),oWt.forEach(t),Drt=r(oL,` property of the config object (either
passed as an argument or loaded from `),f6e=n(oL,"CODE",{});var rWt=s(f6e);Grt=r(rWt,"pretrained_model_name_or_path"),rWt.forEach(t),Ort=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=n(oL,"CODE",{});var tWt=s(m6e);Vrt=r(tWt,"pretrained_model_name_or_path"),tWt.forEach(t),Xrt=r(oL,":"),oL.forEach(t),zrt=i(wi),mk=n(wi,"UL",{});var AHe=s(mk);RA=n(AHe,"LI",{});var fXe=s(RA);g6e=n(fXe,"STRONG",{});var aWt=s(g6e);Qrt=r(aWt,"beit"),aWt.forEach(t),Wrt=r(fXe," \u2014 "),Pre=n(fXe,"A",{href:!0});var nWt=s(Pre);Hrt=r(nWt,"FlaxBeitForImageClassification"),nWt.forEach(t),Urt=r(fXe," (BEiT model)"),fXe.forEach(t),Jrt=i(AHe),PA=n(AHe,"LI",{});var mXe=s(PA);h6e=n(mXe,"STRONG",{});var sWt=s(h6e);Yrt=r(sWt,"vit"),sWt.forEach(t),Krt=r(mXe," \u2014 "),Bre=n(mXe,"A",{href:!0});var lWt=s(Bre);Zrt=r(lWt,"FlaxViTForImageClassification"),lWt.forEach(t),ett=r(mXe," (ViT model)"),mXe.forEach(t),AHe.forEach(t),ott=i(wi),T(BA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),uQe=i(f),xf=n(f,"H2",{class:!0});var LHe=s(xf);NA=n(LHe,"A",{id:!0,class:!0,href:!0});var iWt=s(NA);p6e=n(iWt,"SPAN",{});var dWt=s(p6e);T(gk.$$.fragment,dWt),dWt.forEach(t),iWt.forEach(t),rtt=i(LHe),_6e=n(LHe,"SPAN",{});var cWt=s(_6e);ttt=r(cWt,"FlaxAutoModelForVision2Seq"),cWt.forEach(t),LHe.forEach(t),bQe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(hk.$$.fragment,Ai),att=i(Ai),$f=n(Ai,"P",{});var Sae=s($f);ntt=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Nre=n(Sae,"A",{href:!0});var fWt=s(Nre);stt=r(fWt,"from_pretrained()"),fWt.forEach(t),ltt=r(Sae," class method or the "),Ire=n(Sae,"A",{href:!0});var mWt=s(Ire);itt=r(mWt,"from_config()"),mWt.forEach(t),dtt=r(Sae,` class
method.`),Sae.forEach(t),ctt=i(Ai),pk=n(Ai,"P",{});var yHe=s(pk);ftt=r(yHe,"This class cannot be instantiated directly using "),u6e=n(yHe,"CODE",{});var gWt=s(u6e);mtt=r(gWt,"__init__()"),gWt.forEach(t),gtt=r(yHe," (throws an error)."),yHe.forEach(t),htt=i(Ai),aa=n(Ai,"DIV",{class:!0});var rL=s(aa);T(_k.$$.fragment,rL),ptt=i(rL),b6e=n(rL,"P",{});var hWt=s(b6e);_tt=r(hWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hWt.forEach(t),utt=i(rL),kf=n(rL,"P",{});var Rae=s(kf);btt=r(Rae,`Note:
Loading a model from its configuration file does `),v6e=n(Rae,"STRONG",{});var pWt=s(v6e);vtt=r(pWt,"not"),pWt.forEach(t),Ftt=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=n(Rae,"A",{href:!0});var _Wt=s(qre);Ttt=r(_Wt,"from_pretrained()"),_Wt.forEach(t),Mtt=r(Rae," to load the model weights."),Rae.forEach(t),Ett=i(rL),T(IA.$$.fragment,rL),rL.forEach(t),Ctt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(uk.$$.fragment,Li),wtt=i(Li),F6e=n(Li,"P",{});var uWt=s(F6e);Att=r(uWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uWt.forEach(t),Ltt=i(Li),Sn=n(Li,"P",{});var tL=s(Sn);ytt=r(tL,"The model class to instantiate is selected based on the "),T6e=n(tL,"CODE",{});var bWt=s(T6e);xtt=r(bWt,"model_type"),bWt.forEach(t),$tt=r(tL,` property of the config object (either
passed as an argument or loaded from `),M6e=n(tL,"CODE",{});var vWt=s(M6e);ktt=r(vWt,"pretrained_model_name_or_path"),vWt.forEach(t),Stt=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=n(tL,"CODE",{});var FWt=s(E6e);Rtt=r(FWt,"pretrained_model_name_or_path"),FWt.forEach(t),Ptt=r(tL,":"),tL.forEach(t),Btt=i(Li),C6e=n(Li,"UL",{});var TWt=s(C6e);qA=n(TWt,"LI",{});var gXe=s(qA);w6e=n(gXe,"STRONG",{});var MWt=s(w6e);Ntt=r(MWt,"vision-encoder-decoder"),MWt.forEach(t),Itt=r(gXe," \u2014 "),jre=n(gXe,"A",{href:!0});var EWt=s(jre);qtt=r(EWt,"FlaxVisionEncoderDecoderModel"),EWt.forEach(t),jtt=r(gXe," (Vision Encoder decoder model)"),gXe.forEach(t),TWt.forEach(t),Dtt=i(Li),T(jA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(xUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(QS,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(WS,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig"),c(HS,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig"),c(US,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig"),c(JS,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig"),c(YS,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(KS,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ZS,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(eR,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(oR,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(rR,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig"),c(tR,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig"),c(aR,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig"),c(nR,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig"),c(sR,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig"),c(lR,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig"),c(iR,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig"),c(dR,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig"),c(cR,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig"),c(fR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(mR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(gR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(hR,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig"),c(pR,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(_R,"href","/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(uR,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig"),c(bR,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig"),c(vR,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig"),c(FR,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig"),c(TR,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig"),c(MR,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig"),c(ER,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(CR,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig"),c(wR,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig"),c(AR,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig"),c(LR,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig"),c(yR,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig"),c(xR,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNConfig"),c($R,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config"),c(kR,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(SR,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(RR,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig"),c(PR,"href","/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTConfig"),c(BR,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig"),c(NR,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig"),c(IR,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(qR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(jR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(DR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(GR,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig"),c(OR,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig"),c(VR,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig"),c(XR,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config"),c(zR,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig"),c(QR,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig"),c(WR,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config"),c(HR,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig"),c(UR,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(JR,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig"),c(YR,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig"),c(KR,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ZR,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eP,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(oP,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig"),c(rP,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config"),c(tP,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig"),c(aP,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig"),c(nP,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sP,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lP,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig"),c(iP,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig"),c(dP,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig"),c(cP,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig"),c(fP,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(mP,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(gP,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(hP,"href","/docs/transformers/pr_18123/en/model_doc/rag#transformers.RagConfig"),c(pP,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmConfig"),c(_P,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig"),c(uP,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig"),c(bP,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig"),c(vP,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig"),c(FP,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig"),c(TP,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig"),c(MP,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig"),c(EP,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig"),c(CP,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig"),c(wP,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig"),c(AP,"href","/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LP,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(yP,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(xP,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig"),c($P,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(kP,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig"),c(SP,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config"),c(RP,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig"),c(PP,"href","/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(BP,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(NP,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRConfig"),c(IP,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(qP,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jP,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig"),c(DP,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig"),c(GP,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(OP,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(VP,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(XP,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig"),c(zP,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(QP,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(WP,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(HP,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig"),c(UP,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig"),c(JP,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig"),c(YP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(KP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ZP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(eB,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig"),c(oB,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig"),c(rB,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(tB,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(aB,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(nB,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sB,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartTokenizer"),c(lB,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartTokenizerFast"),c(iB,"href","/docs/transformers/pr_18123/en/model_doc/barthez#transformers.BarthezTokenizer"),c(dB,"href","/docs/transformers/pr_18123/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(cB,"href","/docs/transformers/pr_18123/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(fB,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(mB,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(gB,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(hB,"href","/docs/transformers/pr_18123/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(pB,"href","/docs/transformers/pr_18123/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(_B,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(uB,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(bB,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vB,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FB,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(TB,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(MB,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(EB,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(CB,"href","/docs/transformers/pr_18123/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wB,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AB,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(LB,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineTokenizer"),c(yB,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizer"),c(xB,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($B,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(kB,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(SB,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(RB,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PB,"href","/docs/transformers/pr_18123/en/model_doc/cpm#transformers.CpmTokenizer"),c(BB,"href","/docs/transformers/pr_18123/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(NB,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(IB,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qB,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaTokenizer"),c(DB,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(OB,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(VB,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(XB,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(zB,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(QB,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(WB,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraTokenizer"),c(HB,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(UB,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(JB,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetTokenizer"),c(YB,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(KB,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ZB,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelTokenizer"),c(eN,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(oN,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rN,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tN,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aN,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nN,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(sN,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lN,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iN,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizer"),c(dN,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cN,"href","/docs/transformers/pr_18123/en/model_doc/herbert#transformers.HerbertTokenizer"),c(fN,"href","/docs/transformers/pr_18123/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(mN,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gN,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hN,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(_N,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(uN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(bN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(vN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(FN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(TN,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(MN,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(EN,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDTokenizer"),c(CN,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDTokenizerFast"),c(wN,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerTokenizer"),c(AN,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(LN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(yN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(xN,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeTokenizer"),c($N,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kN,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SN,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RN,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianTokenizer"),c(PN,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartTokenizer"),c(BN,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NN,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(IN,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(jN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(DN,"href","/docs/transformers/pr_18123/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GN,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ON,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VN,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XN,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(QN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(WN,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpTokenizer"),c(HN,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(UN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(JN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(YN,"href","/docs/transformers/pr_18123/en/model_doc/nllb#transformers.NllbTokenizer"),c(KN,"href","/docs/transformers/pr_18123/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(ZN,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(eI,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oI,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(rI,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(tI,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nI,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(sI,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(lI,"href","/docs/transformers/pr_18123/en/model_doc/phobert#transformers.PhobertTokenizer"),c(iI,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartTokenizer"),c(dI,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(cI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(fI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(mI,"href","/docs/transformers/pr_18123/en/model_doc/rag#transformers.RagTokenizer"),c(gI,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmTokenizer"),c(hI,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmTokenizerFast"),c(pI,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerTokenizer"),c(_I,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(uI,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertTokenizer"),c(bI,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(vI,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(FI,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(TI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EI,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(CI,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(wI,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(AI,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(LI,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yI,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(xI,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c($I,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(kI,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(SI,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(RI,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasTokenizer"),c(PI,"href","/docs/transformers/pr_18123/en/model_doc/tapex#transformers.TapexTokenizer"),c(BI,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(NI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(qI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(jI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(DI,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GI,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OI,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(VI,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMTokenizer"),c(XI,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(zI,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMTokenizer"),c(QI,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(WI,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(HI,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(UI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YI,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(KI,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(eq,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"id","transformers.AutoFeatureExtractor"),c(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(oq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(rq,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lq,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(iq,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(dq,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(cq,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(fq,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(mq,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(hq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pq,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(_q,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(uq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(bq,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(vq,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(yq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($q,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(kq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Pq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Bq,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(Nq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Iq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPProcessor"),c(qq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPProcessor"),c(jq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Dq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Gq,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Oq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Qq,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Wq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uq,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltProcessor"),c(Jq,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Yq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(ej,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oj,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rj,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tj,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertModel"),c(aj,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartModel"),c(nj,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitModel"),c(sj,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel"),c(lj,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ij,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdModel"),c(dj,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cj,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(fj,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mj,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomModel"),c(gj,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertModel"),c(hj,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineModel"),c(pj,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPModel"),c(_j,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenModel"),c(uj,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertModel"),c(bj,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextModel"),c(vj,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLModel"),c(Fj,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtModel"),c(Tj,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Mj,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Ej,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Cj,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaModel"),c(wj,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Aj,"href","/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Lj,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTModel"),c(yj,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrModel"),c(xj,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertModel"),c($j,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(kj,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTModel"),c(Sj,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraModel"),c(Rj,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertModel"),c(Pj,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaModel"),c(Bj,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetModel"),c(Nj,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTModel"),c(Ij,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelModel"),c(qj,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelBaseModel"),c(jj,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNModel"),c(Dj,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Model"),c(Gj,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Oj,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Vj,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJModel"),c(Xj,"href","/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTModel"),c(zj,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertModel"),c(Qj,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertModel"),c(Wj,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Hj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Uj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Jj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Yj,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDModel"),c(Kj,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitModel"),c(Zj,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerModel"),c(eD,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Model"),c(oD,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeModel"),c(rD,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertModel"),c(tD,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Model"),c(aD,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianModel"),c(nD,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerModel"),c(sD,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartModel"),c(lD,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTModel"),c(iD,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(dD,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertModel"),c(cD,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTModel"),c(fD,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetModel"),c(mD,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Model"),c(gD,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpModel"),c(hD,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaModel"),c(pD,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Model"),c(_D,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerModel"),c(uD,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(bD,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTModel"),c(vD,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusModel"),c(FD,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverModel"),c(TD,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartModel"),c(MD,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerModel"),c(ED,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(CD,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertModel"),c(wD,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModel"),c(AD,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetModel"),c(LD,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertModel"),c(yD,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetModel"),c(xD,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel"),c($D,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaModel"),c(kD,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerModel"),c(SD,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerModel"),c(RD,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWModel"),c(PD,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDModel"),c(BD,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(ND,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterModel"),c(ID,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(qD,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinModel"),c(jD,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Model"),c(DD,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasModel"),c(GD,"href","/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(OD,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(VD,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechModel"),c(XD,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(zD,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanModel"),c(QD,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltModel"),c(WD,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(HD,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertModel"),c(UD,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTModel"),c(JD,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(YD,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(KD,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(ZD,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMModel"),c(eG,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMModel"),c(oG,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMModel"),c(rG,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(tG,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(aG,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(nG,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetModel"),c(sG,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosModel"),c(lG,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(iG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForPreTraining"),c(mG,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForPreTraining"),c(hG,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(pG,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM"),c(_G,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(uG,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(bG,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(vG,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(FG,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(TG,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(MG,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForPreTraining"),c(EG,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CG,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaForPreTraining"),c(wG,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForPreTraining"),c(AG,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(yG,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(xG,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($G,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kG,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(SG,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(RG,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(PG,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(BG,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(NG,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(qG,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(jG,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel"),c(DG,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(GG,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(OG,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(VG,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zG,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(QG,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(WG,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(HG,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(UG,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(JG,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(YG,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(KG,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZG,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(eO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(oO,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X1,"id","transformers.AutoModelForCausalLM"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(rO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForCausalLM"),c(sO,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertLMHeadModel"),c(lO,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(iO,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(dO,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(cO,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(fO,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(mO,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM"),c(gO,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(hO,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(pO,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(_O,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(uO,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForCausalLM"),c(bO,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vO,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(FO,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(TO,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(MO,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianForCausalLM"),c(EO,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForCausalLM"),c(CO,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(wO,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForCausalLM"),c(AO,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(LO,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForCausalLM"),c(yO,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(xO,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForCausalLM"),c($O,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(kO,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(SO,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(RO,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(PO,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(BO,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(NO,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(IO,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(qO,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(jO,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(DO,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(OO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(VO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(XO,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P2,"id","transformers.AutoModelForMaskedLM"),c(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P2,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(zO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(UO,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMaskedLM"),c(YO,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(KO,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(eV,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oV,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rV,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tV,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(nV,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sV,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(lV,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(iV,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dV,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cV,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fV,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeForMaskedLM"),c(mV,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(_V,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(bV,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vV,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(FV,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(TV,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(MV,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(EV,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CV,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(wV,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(LV,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($V,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForSeq2SeqLM"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(kV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(jV,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianMTModel"),c(XV,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForSequenceClassification"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(ZV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tX,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c($X,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(OX,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(VX,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(XX,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(zX,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(QX,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(WX,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(HX,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(UX,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(JX,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(YX,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(KX,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.AutoModelForMultipleChoice"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMultipleChoice"),c(az,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(wz,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Az,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(yz,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(xz,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c($z,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(kz,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForNextSentencePrediction"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Nz,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Iz,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(qz,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(jz,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Dz,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForTokenClassification"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(Gz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zz,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(_Q,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uQ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bQ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vQ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(FQ,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CQ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wQ,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForQuestionAnswering"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c(AQ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VQ,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(fW,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(gW,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(hW,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(pW,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(_W,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForTableQuestionAnswering"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(uW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForImageClassification"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(TW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForImageClassification"),c(wW,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(AW,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtForImageClassification"),c(LW,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yW,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassification"),c(xW,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c($W,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(kW,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassification"),c(SW,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(RW,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(PW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(NW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(IW,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qW,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(jW,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(DW,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(GW,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForImageClassification"),c(OW,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanForImageClassification"),c(VW,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForVision2Seq"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(XW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(HW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForAudioClassification"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(KW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rH,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tH,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aH,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(dH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForAudioFrameClassification"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(cH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_H,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(uH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForCTC"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(bH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(MH,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForCTC"),c(EH,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTForCTC"),c(CH,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForCTC"),c(wH,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForCTC"),c(AH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(xH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c($H,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(kH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(BH,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P8,"id","transformers.AutoModelForAudioXVector"),c(P8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P8,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(NH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(DH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(OH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(VH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V8,"id","transformers.AutoModelForMaskedImageModeling"),c(V8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V8,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(XH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(HH,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(UH,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J8,"id","transformers.AutoModelForObjectDetection"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(JH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForObjectDetection"),c(eU,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForImageSegmentation"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(oU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.AutoModelForSemanticSegmentation"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(nU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(dU,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(cU,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(fU,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(mU,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.AutoModelForInstanceSegmentation"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(gU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModel"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(uU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertModel"),c(TU,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartModel"),c(MU,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertModel"),c(EU,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(CU,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wU,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertModel"),c(AU,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.TFCLIPModel"),c(LU,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertModel"),c(yU,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextModel"),c(xU,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLModel"),c($U,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kU,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaModel"),c(SU,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(RU,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTModel"),c(PU,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(BU,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NU,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraModel"),c(IU,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(qU,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelModel"),c(jU,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(DU,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2Model"),c(GU,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJModel"),c(OU,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.TFHubertModel"),c(VU,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(XU,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDModel"),c(zU,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerModel"),c(QU,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertModel"),c(WU,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianModel"),c(HU,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartModel"),c(UU,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(JU,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetModel"),c(YU,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5Model"),c(KU,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(ZU,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTModel"),c(eJ,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusModel"),c(oJ,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetModel"),c(rJ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertModel"),c(tJ,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetModel"),c(aJ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaModel"),c(nJ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerModel"),c(sJ,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(lJ,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinModel"),c(iJ,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5Model"),c(dJ,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasModel"),c(cJ,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(fJ,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTModel"),c(mJ,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(gJ,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(hJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMModel"),c(pJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(_J,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForPreTraining"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(TJ,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForPreTraining"),c(EJ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wJ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(LJ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yJ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(xJ,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($J,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kJ,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(SJ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(RJ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PJ,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BJ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NJ,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qJ,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jJ,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(DJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(OJ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForCausalLM"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WJ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(HJ,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UJ,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JJ,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(YJ,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(KJ,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(ZJ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(eY,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(oY,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(rY,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tY,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aY,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForImageClassification"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(nY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(dY,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(cY,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(fY,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(mY,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(gY,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(hY,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(pY,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModelForMaskedLM"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(FY,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(TY,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MY,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(EY,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(CY,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(wY,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LY,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yY,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(xY,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($Y,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(kY,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(SY,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RY,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(PY,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BY,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IY,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qY,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(jY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QY,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianMTModel"),c(HY,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.TFAutoModelForSequenceClassification"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(KY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(gK,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(hK,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(pK,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(_K,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(uK,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(bK,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(vK,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(FK,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(TK,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(MK,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(EK,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(CK,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(wK,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(AK,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.TFAutoModelForMultipleChoice"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(LK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(BK,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(NK,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qK,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(jK,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(DK,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(GK,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(OK,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(VK,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(XK,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(zK,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QK,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(WK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(YK,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(KK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.TFAutoModelForTokenClassification"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(rZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(dZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(cZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(fZ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(gZ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(pZ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(_Z,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(uZ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(bZ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(vZ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(FZ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(TZ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(MZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(EZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(CZ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.TFAutoModelForQuestionAnswering"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(wZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yZ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(IZ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(QZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.TFAutoModelForVision2Seq"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(HZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(KZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModel"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(ree,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertModel"),c(see,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartModel"),c(lee,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitModel"),c(iee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertModel"),c(dee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(cee,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(fee,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(mee,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.FlaxCLIPModel"),c(gee,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(hee,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraModel"),c(pee,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(_ee,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(uee,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(bee,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(vee,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianModel"),c(Fee,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Tee,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Mee,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTModel"),c(Eee,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Cee,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(wee,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Aee,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5Model"),c(Lee,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(yee,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTModel"),c(xee,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c($ee,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(kee,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForCausalLM"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(See,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Nee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Iee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(qee,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(jee,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Dee,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Gee,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Oee,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Vee,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Xee,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForPreTraining"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(zee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Uee,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Yee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Kee,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Zee,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(roe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(toe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aoe,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(noe,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(soe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForMaskedLM"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(loe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(foe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(goe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(hoe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(poe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(_oe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uoe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(boe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(voe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(Foe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Toe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Moe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eoe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(woe,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Loe,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(yoe,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xoe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($oe,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(koe,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Soe,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(Roe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Poe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Boe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Noe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(qoe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(joe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Doe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Goe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Ooe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Voe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Xoe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(zoe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(Qoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Woe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uoe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Zoe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(are,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.FlaxAutoModelForTokenClassification"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(nre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ire,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(dre,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(cre,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(fre,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(mre,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(gre,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(hre,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(pre,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_A,"id","transformers.FlaxAutoModelForMultipleChoice"),c(_A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_A,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(_re,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ure,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vre,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Fre,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Tre,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Mre,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Ere,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Cre,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(wre,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Are,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(LA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(Lre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($re,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kA,"id","transformers.FlaxAutoModelForImageClassification"),c(kA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(kre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pre,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Bre,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NA,"id","transformers.FlaxAutoModelForVision2Seq"),c(NA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c(Nre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ire,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jre,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,yi),b(f,Bf,u),b(f,lt,u),e(lt,xi),e(lt,$i),e($i,aL),e(lt,Nf),b(f,Oe,u),b(f,We,u),e(We,ki),e(We,Pn),e(Pn,nL),e(We,Bn),e(We,Nn),e(Nn,sL),e(We,Si),e(We,In),e(In,lL),e(We,Ri),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,DS),e(Ae,Pi),e(Pi,GS),e(Ae,OS),b(f,wo,u),b(f,Ra,u),e(Ra,VS),e(Ra,qf),e(qf,XS),e(Ra,xHe),b(f,hXe,u),b(f,Bi,u),e(Bi,jf),e(jf,Pae),M(iL,Pae,null),e(Bi,$He),e(Bi,Bae),e(Bae,kHe),b(f,pXe,u),b(f,qn,u),e(qn,SHe),e(qn,Nae),e(Nae,RHe),e(qn,PHe),e(qn,Iae),e(Iae,BHe),e(qn,NHe),b(f,_Xe,u),M(dL,f,u),b(f,uXe,u),b(f,zS,u),e(zS,IHe),b(f,bXe,u),M(Df,f,u),b(f,vXe,u),b(f,Ni,u),e(Ni,Gf),e(Gf,qae),M(cL,qae,null),e(Ni,qHe),e(Ni,jae),e(jae,jHe),b(f,FXe,u),b(f,Ao,u),M(fL,Ao,null),e(Ao,DHe),e(Ao,mL),e(mL,GHe),e(mL,QS),e(QS,OHe),e(mL,VHe),e(Ao,XHe),e(Ao,gL),e(gL,zHe),e(gL,Dae),e(Dae,QHe),e(gL,WHe),e(Ao,HHe),e(Ao,Lr),M(hL,Lr,null),e(Lr,UHe),e(Lr,Gae),e(Gae,JHe),e(Lr,YHe),e(Lr,Ii),e(Ii,KHe),e(Ii,Oae),e(Oae,ZHe),e(Ii,eUe),e(Ii,Vae),e(Vae,oUe),e(Ii,rUe),e(Lr,tUe),e(Lr,A),e(A,Of),e(Of,Xae),e(Xae,aUe),e(Of,nUe),e(Of,WS),e(WS,sUe),e(Of,lUe),e(A,iUe),e(A,Vf),e(Vf,zae),e(zae,dUe),e(Vf,cUe),e(Vf,HS),e(HS,fUe),e(Vf,mUe),e(A,gUe),e(A,Xf),e(Xf,Qae),e(Qae,hUe),e(Xf,pUe),e(Xf,US),e(US,_Ue),e(Xf,uUe),e(A,bUe),e(A,zf),e(zf,Wae),e(Wae,vUe),e(zf,FUe),e(zf,JS),e(JS,TUe),e(zf,MUe),e(A,EUe),e(A,Qf),e(Qf,Hae),e(Hae,CUe),e(Qf,wUe),e(Qf,YS),e(YS,AUe),e(Qf,LUe),e(A,yUe),e(A,Wf),e(Wf,Uae),e(Uae,xUe),e(Wf,$Ue),e(Wf,KS),e(KS,kUe),e(Wf,SUe),e(A,RUe),e(A,Hf),e(Hf,Jae),e(Jae,PUe),e(Hf,BUe),e(Hf,ZS),e(ZS,NUe),e(Hf,IUe),e(A,qUe),e(A,Uf),e(Uf,Yae),e(Yae,jUe),e(Uf,DUe),e(Uf,eR),e(eR,GUe),e(Uf,OUe),e(A,VUe),e(A,Jf),e(Jf,Kae),e(Kae,XUe),e(Jf,zUe),e(Jf,oR),e(oR,QUe),e(Jf,WUe),e(A,HUe),e(A,Yf),e(Yf,Zae),e(Zae,UUe),e(Yf,JUe),e(Yf,rR),e(rR,YUe),e(Yf,KUe),e(A,ZUe),e(A,Kf),e(Kf,ene),e(ene,eJe),e(Kf,oJe),e(Kf,tR),e(tR,rJe),e(Kf,tJe),e(A,aJe),e(A,Zf),e(Zf,one),e(one,nJe),e(Zf,sJe),e(Zf,aR),e(aR,lJe),e(Zf,iJe),e(A,dJe),e(A,em),e(em,rne),e(rne,cJe),e(em,fJe),e(em,nR),e(nR,mJe),e(em,gJe),e(A,hJe),e(A,om),e(om,tne),e(tne,pJe),e(om,_Je),e(om,sR),e(sR,uJe),e(om,bJe),e(A,vJe),e(A,rm),e(rm,ane),e(ane,FJe),e(rm,TJe),e(rm,lR),e(lR,MJe),e(rm,EJe),e(A,CJe),e(A,tm),e(tm,nne),e(nne,wJe),e(tm,AJe),e(tm,iR),e(iR,LJe),e(tm,yJe),e(A,xJe),e(A,am),e(am,sne),e(sne,$Je),e(am,kJe),e(am,dR),e(dR,SJe),e(am,RJe),e(A,PJe),e(A,nm),e(nm,lne),e(lne,BJe),e(nm,NJe),e(nm,cR),e(cR,IJe),e(nm,qJe),e(A,jJe),e(A,sm),e(sm,ine),e(ine,DJe),e(sm,GJe),e(sm,fR),e(fR,OJe),e(sm,VJe),e(A,XJe),e(A,lm),e(lm,dne),e(dne,zJe),e(lm,QJe),e(lm,mR),e(mR,WJe),e(lm,HJe),e(A,UJe),e(A,im),e(im,cne),e(cne,JJe),e(im,YJe),e(im,gR),e(gR,KJe),e(im,ZJe),e(A,eYe),e(A,dm),e(dm,fne),e(fne,oYe),e(dm,rYe),e(dm,hR),e(hR,tYe),e(dm,aYe),e(A,nYe),e(A,cm),e(cm,mne),e(mne,sYe),e(cm,lYe),e(cm,pR),e(pR,iYe),e(cm,dYe),e(A,cYe),e(A,fm),e(fm,gne),e(gne,fYe),e(fm,mYe),e(fm,_R),e(_R,gYe),e(fm,hYe),e(A,pYe),e(A,mm),e(mm,hne),e(hne,_Ye),e(mm,uYe),e(mm,uR),e(uR,bYe),e(mm,vYe),e(A,FYe),e(A,gm),e(gm,pne),e(pne,TYe),e(gm,MYe),e(gm,bR),e(bR,EYe),e(gm,CYe),e(A,wYe),e(A,hm),e(hm,_ne),e(_ne,AYe),e(hm,LYe),e(hm,vR),e(vR,yYe),e(hm,xYe),e(A,$Ye),e(A,pm),e(pm,une),e(une,kYe),e(pm,SYe),e(pm,FR),e(FR,RYe),e(pm,PYe),e(A,BYe),e(A,_m),e(_m,bne),e(bne,NYe),e(_m,IYe),e(_m,TR),e(TR,qYe),e(_m,jYe),e(A,DYe),e(A,um),e(um,vne),e(vne,GYe),e(um,OYe),e(um,MR),e(MR,VYe),e(um,XYe),e(A,zYe),e(A,bm),e(bm,Fne),e(Fne,QYe),e(bm,WYe),e(bm,ER),e(ER,HYe),e(bm,UYe),e(A,JYe),e(A,vm),e(vm,Tne),e(Tne,YYe),e(vm,KYe),e(vm,CR),e(CR,ZYe),e(vm,eKe),e(A,oKe),e(A,Fm),e(Fm,Mne),e(Mne,rKe),e(Fm,tKe),e(Fm,wR),e(wR,aKe),e(Fm,nKe),e(A,sKe),e(A,Tm),e(Tm,Ene),e(Ene,lKe),e(Tm,iKe),e(Tm,AR),e(AR,dKe),e(Tm,cKe),e(A,fKe),e(A,Mm),e(Mm,Cne),e(Cne,mKe),e(Mm,gKe),e(Mm,LR),e(LR,hKe),e(Mm,pKe),e(A,_Ke),e(A,Em),e(Em,wne),e(wne,uKe),e(Em,bKe),e(Em,yR),e(yR,vKe),e(Em,FKe),e(A,TKe),e(A,Cm),e(Cm,Ane),e(Ane,MKe),e(Cm,EKe),e(Cm,xR),e(xR,CKe),e(Cm,wKe),e(A,AKe),e(A,wm),e(wm,Lne),e(Lne,LKe),e(wm,yKe),e(wm,$R),e($R,xKe),e(wm,$Ke),e(A,kKe),e(A,Am),e(Am,yne),e(yne,SKe),e(Am,RKe),e(Am,kR),e(kR,PKe),e(Am,BKe),e(A,NKe),e(A,Lm),e(Lm,xne),e(xne,IKe),e(Lm,qKe),e(Lm,SR),e(SR,jKe),e(Lm,DKe),e(A,GKe),e(A,ym),e(ym,$ne),e($ne,OKe),e(ym,VKe),e(ym,RR),e(RR,XKe),e(ym,zKe),e(A,QKe),e(A,xm),e(xm,kne),e(kne,WKe),e(xm,HKe),e(xm,PR),e(PR,UKe),e(xm,JKe),e(A,YKe),e(A,$m),e($m,Sne),e(Sne,KKe),e($m,ZKe),e($m,BR),e(BR,eZe),e($m,oZe),e(A,rZe),e(A,km),e(km,Rne),e(Rne,tZe),e(km,aZe),e(km,NR),e(NR,nZe),e(km,sZe),e(A,lZe),e(A,Sm),e(Sm,Pne),e(Pne,iZe),e(Sm,dZe),e(Sm,IR),e(IR,cZe),e(Sm,fZe),e(A,mZe),e(A,Rm),e(Rm,Bne),e(Bne,gZe),e(Rm,hZe),e(Rm,qR),e(qR,pZe),e(Rm,_Ze),e(A,uZe),e(A,Pm),e(Pm,Nne),e(Nne,bZe),e(Pm,vZe),e(Pm,jR),e(jR,FZe),e(Pm,TZe),e(A,MZe),e(A,Bm),e(Bm,Ine),e(Ine,EZe),e(Bm,CZe),e(Bm,DR),e(DR,wZe),e(Bm,AZe),e(A,LZe),e(A,Nm),e(Nm,qne),e(qne,yZe),e(Nm,xZe),e(Nm,GR),e(GR,$Ze),e(Nm,kZe),e(A,SZe),e(A,Im),e(Im,jne),e(jne,RZe),e(Im,PZe),e(Im,OR),e(OR,BZe),e(Im,NZe),e(A,IZe),e(A,qm),e(qm,Dne),e(Dne,qZe),e(qm,jZe),e(qm,VR),e(VR,DZe),e(qm,GZe),e(A,OZe),e(A,jm),e(jm,Gne),e(Gne,VZe),e(jm,XZe),e(jm,XR),e(XR,zZe),e(jm,QZe),e(A,WZe),e(A,Dm),e(Dm,One),e(One,HZe),e(Dm,UZe),e(Dm,zR),e(zR,JZe),e(Dm,YZe),e(A,KZe),e(A,Gm),e(Gm,Vne),e(Vne,ZZe),e(Gm,eeo),e(Gm,QR),e(QR,oeo),e(Gm,reo),e(A,teo),e(A,Om),e(Om,Xne),e(Xne,aeo),e(Om,neo),e(Om,WR),e(WR,seo),e(Om,leo),e(A,ieo),e(A,Vm),e(Vm,zne),e(zne,deo),e(Vm,ceo),e(Vm,HR),e(HR,feo),e(Vm,meo),e(A,geo),e(A,Xm),e(Xm,Qne),e(Qne,heo),e(Xm,peo),e(Xm,UR),e(UR,_eo),e(Xm,ueo),e(A,beo),e(A,zm),e(zm,Wne),e(Wne,veo),e(zm,Feo),e(zm,JR),e(JR,Teo),e(zm,Meo),e(A,Eeo),e(A,Qm),e(Qm,Hne),e(Hne,Ceo),e(Qm,weo),e(Qm,YR),e(YR,Aeo),e(Qm,Leo),e(A,yeo),e(A,Wm),e(Wm,Une),e(Une,xeo),e(Wm,$eo),e(Wm,KR),e(KR,keo),e(Wm,Seo),e(A,Reo),e(A,Hm),e(Hm,Jne),e(Jne,Peo),e(Hm,Beo),e(Hm,ZR),e(ZR,Neo),e(Hm,Ieo),e(A,qeo),e(A,Um),e(Um,Yne),e(Yne,jeo),e(Um,Deo),e(Um,eP),e(eP,Geo),e(Um,Oeo),e(A,Veo),e(A,Jm),e(Jm,Kne),e(Kne,Xeo),e(Jm,zeo),e(Jm,oP),e(oP,Qeo),e(Jm,Weo),e(A,Heo),e(A,Ym),e(Ym,Zne),e(Zne,Ueo),e(Ym,Jeo),e(Ym,rP),e(rP,Yeo),e(Ym,Keo),e(A,Zeo),e(A,Km),e(Km,ese),e(ese,eoo),e(Km,ooo),e(Km,tP),e(tP,roo),e(Km,too),e(A,aoo),e(A,Zm),e(Zm,ose),e(ose,noo),e(Zm,soo),e(Zm,aP),e(aP,loo),e(Zm,ioo),e(A,doo),e(A,eg),e(eg,rse),e(rse,coo),e(eg,foo),e(eg,nP),e(nP,moo),e(eg,goo),e(A,hoo),e(A,og),e(og,tse),e(tse,poo),e(og,_oo),e(og,sP),e(sP,uoo),e(og,boo),e(A,voo),e(A,rg),e(rg,ase),e(ase,Foo),e(rg,Too),e(rg,lP),e(lP,Moo),e(rg,Eoo),e(A,Coo),e(A,tg),e(tg,nse),e(nse,woo),e(tg,Aoo),e(tg,iP),e(iP,Loo),e(tg,yoo),e(A,xoo),e(A,ag),e(ag,sse),e(sse,$oo),e(ag,koo),e(ag,dP),e(dP,Soo),e(ag,Roo),e(A,Poo),e(A,ng),e(ng,lse),e(lse,Boo),e(ng,Noo),e(ng,cP),e(cP,Ioo),e(ng,qoo),e(A,joo),e(A,sg),e(sg,ise),e(ise,Doo),e(sg,Goo),e(sg,fP),e(fP,Ooo),e(sg,Voo),e(A,Xoo),e(A,lg),e(lg,dse),e(dse,zoo),e(lg,Qoo),e(lg,mP),e(mP,Woo),e(lg,Hoo),e(A,Uoo),e(A,ig),e(ig,cse),e(cse,Joo),e(ig,Yoo),e(ig,gP),e(gP,Koo),e(ig,Zoo),e(A,ero),e(A,dg),e(dg,fse),e(fse,oro),e(dg,rro),e(dg,hP),e(hP,tro),e(dg,aro),e(A,nro),e(A,cg),e(cg,mse),e(mse,sro),e(cg,lro),e(cg,pP),e(pP,iro),e(cg,dro),e(A,cro),e(A,fg),e(fg,gse),e(gse,fro),e(fg,mro),e(fg,_P),e(_P,gro),e(fg,hro),e(A,pro),e(A,mg),e(mg,hse),e(hse,_ro),e(mg,uro),e(mg,uP),e(uP,bro),e(mg,vro),e(A,Fro),e(A,gg),e(gg,pse),e(pse,Tro),e(gg,Mro),e(gg,bP),e(bP,Ero),e(gg,Cro),e(A,wro),e(A,hg),e(hg,_se),e(_se,Aro),e(hg,Lro),e(hg,vP),e(vP,yro),e(hg,xro),e(A,$ro),e(A,pg),e(pg,use),e(use,kro),e(pg,Sro),e(pg,FP),e(FP,Rro),e(pg,Pro),e(A,Bro),e(A,_g),e(_g,bse),e(bse,Nro),e(_g,Iro),e(_g,TP),e(TP,qro),e(_g,jro),e(A,Dro),e(A,ug),e(ug,vse),e(vse,Gro),e(ug,Oro),e(ug,MP),e(MP,Vro),e(ug,Xro),e(A,zro),e(A,bg),e(bg,Fse),e(Fse,Qro),e(bg,Wro),e(bg,EP),e(EP,Hro),e(bg,Uro),e(A,Jro),e(A,vg),e(vg,Tse),e(Tse,Yro),e(vg,Kro),e(vg,CP),e(CP,Zro),e(vg,eto),e(A,oto),e(A,Fg),e(Fg,Mse),e(Mse,rto),e(Fg,tto),e(Fg,wP),e(wP,ato),e(Fg,nto),e(A,sto),e(A,Tg),e(Tg,Ese),e(Ese,lto),e(Tg,ito),e(Tg,AP),e(AP,dto),e(Tg,cto),e(A,fto),e(A,Mg),e(Mg,Cse),e(Cse,mto),e(Mg,gto),e(Mg,LP),e(LP,hto),e(Mg,pto),e(A,_to),e(A,Eg),e(Eg,wse),e(wse,uto),e(Eg,bto),e(Eg,yP),e(yP,vto),e(Eg,Fto),e(A,Tto),e(A,Cg),e(Cg,Ase),e(Ase,Mto),e(Cg,Eto),e(Cg,xP),e(xP,Cto),e(Cg,wto),e(A,Ato),e(A,wg),e(wg,Lse),e(Lse,Lto),e(wg,yto),e(wg,$P),e($P,xto),e(wg,$to),e(A,kto),e(A,Ag),e(Ag,yse),e(yse,Sto),e(Ag,Rto),e(Ag,kP),e(kP,Pto),e(Ag,Bto),e(A,Nto),e(A,Lg),e(Lg,xse),e(xse,Ito),e(Lg,qto),e(Lg,SP),e(SP,jto),e(Lg,Dto),e(A,Gto),e(A,yg),e(yg,$se),e($se,Oto),e(yg,Vto),e(yg,RP),e(RP,Xto),e(yg,zto),e(A,Qto),e(A,xg),e(xg,kse),e(kse,Wto),e(xg,Hto),e(xg,PP),e(PP,Uto),e(xg,Jto),e(A,Yto),e(A,$g),e($g,Sse),e(Sse,Kto),e($g,Zto),e($g,BP),e(BP,eao),e($g,oao),e(A,rao),e(A,kg),e(kg,Rse),e(Rse,tao),e(kg,aao),e(kg,NP),e(NP,nao),e(kg,sao),e(A,lao),e(A,Sg),e(Sg,Pse),e(Pse,iao),e(Sg,dao),e(Sg,IP),e(IP,cao),e(Sg,fao),e(A,mao),e(A,Rg),e(Rg,Bse),e(Bse,gao),e(Rg,hao),e(Rg,qP),e(qP,pao),e(Rg,_ao),e(A,uao),e(A,Pg),e(Pg,Nse),e(Nse,bao),e(Pg,vao),e(Pg,jP),e(jP,Fao),e(Pg,Tao),e(A,Mao),e(A,Bg),e(Bg,Ise),e(Ise,Eao),e(Bg,Cao),e(Bg,DP),e(DP,wao),e(Bg,Aao),e(A,Lao),e(A,Ng),e(Ng,qse),e(qse,yao),e(Ng,xao),e(Ng,GP),e(GP,$ao),e(Ng,kao),e(A,Sao),e(A,Ig),e(Ig,jse),e(jse,Rao),e(Ig,Pao),e(Ig,OP),e(OP,Bao),e(Ig,Nao),e(A,Iao),e(A,qg),e(qg,Dse),e(Dse,qao),e(qg,jao),e(qg,VP),e(VP,Dao),e(qg,Gao),e(A,Oao),e(A,jg),e(jg,Gse),e(Gse,Vao),e(jg,Xao),e(jg,XP),e(XP,zao),e(jg,Qao),e(A,Wao),e(A,Dg),e(Dg,Ose),e(Ose,Hao),e(Dg,Uao),e(Dg,zP),e(zP,Jao),e(Dg,Yao),e(A,Kao),e(A,Gg),e(Gg,Vse),e(Vse,Zao),e(Gg,eno),e(Gg,QP),e(QP,ono),e(Gg,rno),e(A,tno),e(A,Og),e(Og,Xse),e(Xse,ano),e(Og,nno),e(Og,WP),e(WP,sno),e(Og,lno),e(A,ino),e(A,Vg),e(Vg,zse),e(zse,dno),e(Vg,cno),e(Vg,HP),e(HP,fno),e(Vg,mno),e(A,gno),e(A,Xg),e(Xg,Qse),e(Qse,hno),e(Xg,pno),e(Xg,UP),e(UP,_no),e(Xg,uno),e(A,bno),e(A,zg),e(zg,Wse),e(Wse,vno),e(zg,Fno),e(zg,JP),e(JP,Tno),e(zg,Mno),e(A,Eno),e(A,Qg),e(Qg,Hse),e(Hse,Cno),e(Qg,wno),e(Qg,YP),e(YP,Ano),e(Qg,Lno),e(A,yno),e(A,Wg),e(Wg,Use),e(Use,xno),e(Wg,$no),e(Wg,KP),e(KP,kno),e(Wg,Sno),e(A,Rno),e(A,Hg),e(Hg,Jse),e(Jse,Pno),e(Hg,Bno),e(Hg,ZP),e(ZP,Nno),e(Hg,Ino),e(A,qno),e(A,Ug),e(Ug,Yse),e(Yse,jno),e(Ug,Dno),e(Ug,eB),e(eB,Gno),e(Ug,Ono),e(A,Vno),e(A,Jg),e(Jg,Kse),e(Kse,Xno),e(Jg,zno),e(Jg,oB),e(oB,Qno),e(Jg,Wno),e(A,Hno),e(A,Yg),e(Yg,Zse),e(Zse,Uno),e(Yg,Jno),e(Yg,rB),e(rB,Yno),e(Yg,Kno),e(Lr,Zno),M(Kg,Lr,null),e(Ao,eso),e(Ao,Zg),M(pL,Zg,null),e(Zg,oso),e(Zg,ele),e(ele,rso),b(f,TXe,u),b(f,qi,u),e(qi,eh),e(eh,ole),M(_L,ole,null),e(qi,tso),e(qi,rle),e(rle,aso),b(f,MXe,u),b(f,Lo,u),M(uL,Lo,null),e(Lo,nso),e(Lo,bL),e(bL,sso),e(bL,tB),e(tB,lso),e(bL,iso),e(Lo,dso),e(Lo,vL),e(vL,cso),e(vL,tle),e(tle,fso),e(vL,mso),e(Lo,gso),e(Lo,yr),M(FL,yr,null),e(yr,hso),e(yr,ale),e(ale,pso),e(yr,_so),e(yr,Pa),e(Pa,uso),e(Pa,nle),e(nle,bso),e(Pa,vso),e(Pa,sle),e(sle,Fso),e(Pa,Tso),e(Pa,lle),e(lle,Mso),e(Pa,Eso),e(yr,Cso),e(yr,k),e(k,jn),e(jn,ile),e(ile,wso),e(jn,Aso),e(jn,aB),e(aB,Lso),e(jn,yso),e(jn,nB),e(nB,xso),e(jn,$so),e(k,kso),e(k,Dn),e(Dn,dle),e(dle,Sso),e(Dn,Rso),e(Dn,sB),e(sB,Pso),e(Dn,Bso),e(Dn,lB),e(lB,Nso),e(Dn,Iso),e(k,qso),e(k,Gn),e(Gn,cle),e(cle,jso),e(Gn,Dso),e(Gn,iB),e(iB,Gso),e(Gn,Oso),e(Gn,dB),e(dB,Vso),e(Gn,Xso),e(k,zso),e(k,oh),e(oh,fle),e(fle,Qso),e(oh,Wso),e(oh,cB),e(cB,Hso),e(oh,Uso),e(k,Jso),e(k,On),e(On,mle),e(mle,Yso),e(On,Kso),e(On,fB),e(fB,Zso),e(On,elo),e(On,mB),e(mB,olo),e(On,rlo),e(k,tlo),e(k,rh),e(rh,gle),e(gle,alo),e(rh,nlo),e(rh,gB),e(gB,slo),e(rh,llo),e(k,ilo),e(k,th),e(th,hle),e(hle,dlo),e(th,clo),e(th,hB),e(hB,flo),e(th,mlo),e(k,glo),e(k,ah),e(ah,ple),e(ple,hlo),e(ah,plo),e(ah,pB),e(pB,_lo),e(ah,ulo),e(k,blo),e(k,Vn),e(Vn,_le),e(_le,vlo),e(Vn,Flo),e(Vn,_B),e(_B,Tlo),e(Vn,Mlo),e(Vn,uB),e(uB,Elo),e(Vn,Clo),e(k,wlo),e(k,Xn),e(Xn,ule),e(ule,Alo),e(Xn,Llo),e(Xn,bB),e(bB,ylo),e(Xn,xlo),e(Xn,vB),e(vB,$lo),e(Xn,klo),e(k,Slo),e(k,zn),e(zn,ble),e(ble,Rlo),e(zn,Plo),e(zn,FB),e(FB,Blo),e(zn,Nlo),e(zn,TB),e(TB,Ilo),e(zn,qlo),e(k,jlo),e(k,nh),e(nh,vle),e(vle,Dlo),e(nh,Glo),e(nh,MB),e(MB,Olo),e(nh,Vlo),e(k,Xlo),e(k,sh),e(sh,Fle),e(Fle,zlo),e(sh,Qlo),e(sh,EB),e(EB,Wlo),e(sh,Hlo),e(k,Ulo),e(k,lh),e(lh,Tle),e(Tle,Jlo),e(lh,Ylo),e(lh,CB),e(CB,Klo),e(lh,Zlo),e(k,eio),e(k,Qn),e(Qn,Mle),e(Mle,oio),e(Qn,rio),e(Qn,wB),e(wB,tio),e(Qn,aio),e(Qn,AB),e(AB,nio),e(Qn,sio),e(k,lio),e(k,ih),e(ih,Ele),e(Ele,iio),e(ih,dio),e(ih,LB),e(LB,cio),e(ih,fio),e(k,mio),e(k,Wn),e(Wn,Cle),e(Cle,gio),e(Wn,hio),e(Wn,yB),e(yB,pio),e(Wn,_io),e(Wn,xB),e(xB,uio),e(Wn,bio),e(k,vio),e(k,Hn),e(Hn,wle),e(wle,Fio),e(Hn,Tio),e(Hn,$B),e($B,Mio),e(Hn,Eio),e(Hn,kB),e(kB,Cio),e(Hn,wio),e(k,Aio),e(k,Un),e(Un,Ale),e(Ale,Lio),e(Un,yio),e(Un,SB),e(SB,xio),e(Un,$io),e(Un,RB),e(RB,kio),e(Un,Sio),e(k,Rio),e(k,Jn),e(Jn,Lle),e(Lle,Pio),e(Jn,Bio),e(Jn,PB),e(PB,Nio),e(Jn,Iio),e(Jn,BB),e(BB,qio),e(Jn,jio),e(k,Dio),e(k,dh),e(dh,yle),e(yle,Gio),e(dh,Oio),e(dh,NB),e(NB,Vio),e(dh,Xio),e(k,zio),e(k,Yn),e(Yn,xle),e(xle,Qio),e(Yn,Wio),e(Yn,IB),e(IB,Hio),e(Yn,Uio),e(Yn,qB),e(qB,Jio),e(Yn,Yio),e(k,Kio),e(k,Kn),e(Kn,$le),e($le,Zio),e(Kn,edo),e(Kn,jB),e(jB,odo),e(Kn,rdo),e(Kn,DB),e(DB,tdo),e(Kn,ado),e(k,ndo),e(k,Zn),e(Zn,kle),e(kle,sdo),e(Zn,ldo),e(Zn,GB),e(GB,ido),e(Zn,ddo),e(Zn,OB),e(OB,cdo),e(Zn,fdo),e(k,mdo),e(k,es),e(es,Sle),e(Sle,gdo),e(es,hdo),e(es,VB),e(VB,pdo),e(es,_do),e(es,XB),e(XB,udo),e(es,bdo),e(k,vdo),e(k,os),e(os,Rle),e(Rle,Fdo),e(os,Tdo),e(os,zB),e(zB,Mdo),e(os,Edo),e(os,QB),e(QB,Cdo),e(os,wdo),e(k,Ado),e(k,rs),e(rs,Ple),e(Ple,Ldo),e(rs,ydo),e(rs,WB),e(WB,xdo),e(rs,$do),e(rs,HB),e(HB,kdo),e(rs,Sdo),e(k,Rdo),e(k,ch),e(ch,Ble),e(Ble,Pdo),e(ch,Bdo),e(ch,UB),e(UB,Ndo),e(ch,Ido),e(k,qdo),e(k,ts),e(ts,Nle),e(Nle,jdo),e(ts,Ddo),e(ts,JB),e(JB,Gdo),e(ts,Odo),e(ts,YB),e(YB,Vdo),e(ts,Xdo),e(k,zdo),e(k,fh),e(fh,Ile),e(Ile,Qdo),e(fh,Wdo),e(fh,KB),e(KB,Hdo),e(fh,Udo),e(k,Jdo),e(k,as),e(as,qle),e(qle,Ydo),e(as,Kdo),e(as,ZB),e(ZB,Zdo),e(as,eco),e(as,eN),e(eN,oco),e(as,rco),e(k,tco),e(k,ns),e(ns,jle),e(jle,aco),e(ns,nco),e(ns,oN),e(oN,sco),e(ns,lco),e(ns,rN),e(rN,ico),e(ns,dco),e(k,cco),e(k,ss),e(ss,Dle),e(Dle,fco),e(ss,mco),e(ss,tN),e(tN,gco),e(ss,hco),e(ss,aN),e(aN,pco),e(ss,_co),e(k,uco),e(k,mh),e(mh,Gle),e(Gle,bco),e(mh,vco),e(mh,nN),e(nN,Fco),e(mh,Tco),e(k,Mco),e(k,ls),e(ls,Ole),e(Ole,Eco),e(ls,Cco),e(ls,sN),e(sN,wco),e(ls,Aco),e(ls,lN),e(lN,Lco),e(ls,yco),e(k,xco),e(k,is),e(is,Vle),e(Vle,$co),e(is,kco),e(is,iN),e(iN,Sco),e(is,Rco),e(is,dN),e(dN,Pco),e(is,Bco),e(k,Nco),e(k,ds),e(ds,Xle),e(Xle,Ico),e(ds,qco),e(ds,cN),e(cN,jco),e(ds,Dco),e(ds,fN),e(fN,Gco),e(ds,Oco),e(k,Vco),e(k,gh),e(gh,zle),e(zle,Xco),e(gh,zco),e(gh,mN),e(mN,Qco),e(gh,Wco),e(k,Hco),e(k,cs),e(cs,Qle),e(Qle,Uco),e(cs,Jco),e(cs,gN),e(gN,Yco),e(cs,Kco),e(cs,hN),e(hN,Zco),e(cs,efo),e(k,ofo),e(k,fs),e(fs,Wle),e(Wle,rfo),e(fs,tfo),e(fs,pN),e(pN,afo),e(fs,nfo),e(fs,_N),e(_N,sfo),e(fs,lfo),e(k,ifo),e(k,ms),e(ms,Hle),e(Hle,dfo),e(ms,cfo),e(ms,uN),e(uN,ffo),e(ms,mfo),e(ms,bN),e(bN,gfo),e(ms,hfo),e(k,pfo),e(k,gs),e(gs,Ule),e(Ule,_fo),e(gs,ufo),e(gs,vN),e(vN,bfo),e(gs,vfo),e(gs,FN),e(FN,Ffo),e(gs,Tfo),e(k,Mfo),e(k,hs),e(hs,Jle),e(Jle,Efo),e(hs,Cfo),e(hs,TN),e(TN,wfo),e(hs,Afo),e(hs,MN),e(MN,Lfo),e(hs,yfo),e(k,xfo),e(k,ps),e(ps,Yle),e(Yle,$fo),e(ps,kfo),e(ps,EN),e(EN,Sfo),e(ps,Rfo),e(ps,CN),e(CN,Pfo),e(ps,Bfo),e(k,Nfo),e(k,_s),e(_s,Kle),e(Kle,Ifo),e(_s,qfo),e(_s,wN),e(wN,jfo),e(_s,Dfo),e(_s,AN),e(AN,Gfo),e(_s,Ofo),e(k,Vfo),e(k,us),e(us,Zle),e(Zle,Xfo),e(us,zfo),e(us,LN),e(LN,Qfo),e(us,Wfo),e(us,yN),e(yN,Hfo),e(us,Ufo),e(k,Jfo),e(k,hh),e(hh,eie),e(eie,Yfo),e(hh,Kfo),e(hh,xN),e(xN,Zfo),e(hh,emo),e(k,omo),e(k,bs),e(bs,oie),e(oie,rmo),e(bs,tmo),e(bs,$N),e($N,amo),e(bs,nmo),e(bs,kN),e(kN,smo),e(bs,lmo),e(k,imo),e(k,ph),e(ph,rie),e(rie,dmo),e(ph,cmo),e(ph,SN),e(SN,fmo),e(ph,mmo),e(k,gmo),e(k,_h),e(_h,tie),e(tie,hmo),e(_h,pmo),e(_h,RN),e(RN,_mo),e(_h,umo),e(k,bmo),e(k,vs),e(vs,aie),e(aie,vmo),e(vs,Fmo),e(vs,PN),e(PN,Tmo),e(vs,Mmo),e(vs,BN),e(BN,Emo),e(vs,Cmo),e(k,wmo),e(k,Fs),e(Fs,nie),e(nie,Amo),e(Fs,Lmo),e(Fs,NN),e(NN,ymo),e(Fs,xmo),e(Fs,IN),e(IN,$mo),e(Fs,kmo),e(k,Smo),e(k,Ts),e(Ts,sie),e(sie,Rmo),e(Ts,Pmo),e(Ts,qN),e(qN,Bmo),e(Ts,Nmo),e(Ts,jN),e(jN,Imo),e(Ts,qmo),e(k,jmo),e(k,uh),e(uh,lie),e(lie,Dmo),e(uh,Gmo),e(uh,DN),e(DN,Omo),e(uh,Vmo),e(k,Xmo),e(k,Ms),e(Ms,iie),e(iie,zmo),e(Ms,Qmo),e(Ms,GN),e(GN,Wmo),e(Ms,Hmo),e(Ms,ON),e(ON,Umo),e(Ms,Jmo),e(k,Ymo),e(k,Es),e(Es,die),e(die,Kmo),e(Es,Zmo),e(Es,VN),e(VN,ego),e(Es,ogo),e(Es,XN),e(XN,rgo),e(Es,tgo),e(k,ago),e(k,Cs),e(Cs,cie),e(cie,ngo),e(Cs,sgo),e(Cs,zN),e(zN,lgo),e(Cs,igo),e(Cs,QN),e(QN,dgo),e(Cs,cgo),e(k,fgo),e(k,ws),e(ws,fie),e(fie,mgo),e(ws,ggo),e(ws,WN),e(WN,hgo),e(ws,pgo),e(ws,HN),e(HN,_go),e(ws,ugo),e(k,bgo),e(k,As),e(As,mie),e(mie,vgo),e(As,Fgo),e(As,UN),e(UN,Tgo),e(As,Mgo),e(As,JN),e(JN,Ego),e(As,Cgo),e(k,wgo),e(k,Ls),e(Ls,gie),e(gie,Ago),e(Ls,Lgo),e(Ls,YN),e(YN,ygo),e(Ls,xgo),e(Ls,KN),e(KN,$go),e(Ls,kgo),e(k,Sgo),e(k,ys),e(ys,hie),e(hie,Rgo),e(ys,Pgo),e(ys,ZN),e(ZN,Bgo),e(ys,Ngo),e(ys,eI),e(eI,Igo),e(ys,qgo),e(k,jgo),e(k,xs),e(xs,pie),e(pie,Dgo),e(xs,Ggo),e(xs,oI),e(oI,Ogo),e(xs,Vgo),e(xs,rI),e(rI,Xgo),e(xs,zgo),e(k,Qgo),e(k,bh),e(bh,_ie),e(_ie,Wgo),e(bh,Hgo),e(bh,tI),e(tI,Ugo),e(bh,Jgo),e(k,Ygo),e(k,$s),e($s,uie),e(uie,Kgo),e($s,Zgo),e($s,aI),e(aI,eho),e($s,oho),e($s,nI),e(nI,rho),e($s,tho),e(k,aho),e(k,vh),e(vh,bie),e(bie,nho),e(vh,sho),e(vh,sI),e(sI,lho),e(vh,iho),e(k,dho),e(k,Fh),e(Fh,vie),e(vie,cho),e(Fh,fho),e(Fh,lI),e(lI,mho),e(Fh,gho),e(k,hho),e(k,Th),e(Th,Fie),e(Fie,pho),e(Th,_ho),e(Th,iI),e(iI,uho),e(Th,bho),e(k,vho),e(k,Mh),e(Mh,Tie),e(Tie,Fho),e(Mh,Tho),e(Mh,dI),e(dI,Mho),e(Mh,Eho),e(k,Cho),e(k,ks),e(ks,Mie),e(Mie,who),e(ks,Aho),e(ks,cI),e(cI,Lho),e(ks,yho),e(ks,fI),e(fI,xho),e(ks,$ho),e(k,kho),e(k,Eh),e(Eh,Eie),e(Eie,Sho),e(Eh,Rho),e(Eh,mI),e(mI,Pho),e(Eh,Bho),e(k,Nho),e(k,Ss),e(Ss,Cie),e(Cie,Iho),e(Ss,qho),e(Ss,gI),e(gI,jho),e(Ss,Dho),e(Ss,hI),e(hI,Gho),e(Ss,Oho),e(k,Vho),e(k,Rs),e(Rs,wie),e(wie,Xho),e(Rs,zho),e(Rs,pI),e(pI,Qho),e(Rs,Who),e(Rs,_I),e(_I,Hho),e(Rs,Uho),e(k,Jho),e(k,Ps),e(Ps,Aie),e(Aie,Yho),e(Ps,Kho),e(Ps,uI),e(uI,Zho),e(Ps,epo),e(Ps,bI),e(bI,opo),e(Ps,rpo),e(k,tpo),e(k,Bs),e(Bs,Lie),e(Lie,apo),e(Bs,npo),e(Bs,vI),e(vI,spo),e(Bs,lpo),e(Bs,FI),e(FI,ipo),e(Bs,dpo),e(k,cpo),e(k,Ns),e(Ns,yie),e(yie,fpo),e(Ns,mpo),e(Ns,TI),e(TI,gpo),e(Ns,hpo),e(Ns,MI),e(MI,ppo),e(Ns,_po),e(k,upo),e(k,Is),e(Is,xie),e(xie,bpo),e(Is,vpo),e(Is,EI),e(EI,Fpo),e(Is,Tpo),e(Is,CI),e(CI,Mpo),e(Is,Epo),e(k,Cpo),e(k,Ch),e(Ch,$ie),e($ie,wpo),e(Ch,Apo),e(Ch,wI),e(wI,Lpo),e(Ch,ypo),e(k,xpo),e(k,wh),e(wh,kie),e(kie,$po),e(wh,kpo),e(wh,AI),e(AI,Spo),e(wh,Rpo),e(k,Ppo),e(k,qs),e(qs,Sie),e(Sie,Bpo),e(qs,Npo),e(qs,LI),e(LI,Ipo),e(qs,qpo),e(qs,yI),e(yI,jpo),e(qs,Dpo),e(k,Gpo),e(k,js),e(js,Rie),e(Rie,Opo),e(js,Vpo),e(js,xI),e(xI,Xpo),e(js,zpo),e(js,$I),e($I,Qpo),e(js,Wpo),e(k,Hpo),e(k,Ds),e(Ds,Pie),e(Pie,Upo),e(Ds,Jpo),e(Ds,kI),e(kI,Ypo),e(Ds,Kpo),e(Ds,SI),e(SI,Zpo),e(Ds,e_o),e(k,o_o),e(k,Ah),e(Ah,Bie),e(Bie,r_o),e(Ah,t_o),e(Ah,RI),e(RI,a_o),e(Ah,n_o),e(k,s_o),e(k,Lh),e(Lh,Nie),e(Nie,l_o),e(Lh,i_o),e(Lh,PI),e(PI,d_o),e(Lh,c_o),e(k,f_o),e(k,yh),e(yh,Iie),e(Iie,m_o),e(yh,g_o),e(yh,BI),e(BI,h_o),e(yh,p_o),e(k,__o),e(k,Gs),e(Gs,qie),e(qie,u_o),e(Gs,b_o),e(Gs,NI),e(NI,v_o),e(Gs,F_o),e(Gs,II),e(II,T_o),e(Gs,M_o),e(k,E_o),e(k,Os),e(Os,jie),e(jie,C_o),e(Os,w_o),e(Os,qI),e(qI,A_o),e(Os,L_o),e(Os,jI),e(jI,y_o),e(Os,x_o),e(k,$_o),e(k,xh),e(xh,Die),e(Die,k_o),e(xh,S_o),e(xh,DI),e(DI,R_o),e(xh,P_o),e(k,B_o),e(k,$h),e($h,Gie),e(Gie,N_o),e($h,I_o),e($h,GI),e(GI,q_o),e($h,j_o),e(k,D_o),e(k,kh),e(kh,Oie),e(Oie,G_o),e(kh,O_o),e(kh,OI),e(OI,V_o),e(kh,X_o),e(k,z_o),e(k,Vs),e(Vs,Vie),e(Vie,Q_o),e(Vs,W_o),e(Vs,VI),e(VI,H_o),e(Vs,U_o),e(Vs,XI),e(XI,J_o),e(Vs,Y_o),e(k,K_o),e(k,Sh),e(Sh,Xie),e(Xie,Z_o),e(Sh,euo),e(Sh,zI),e(zI,ouo),e(Sh,ruo),e(k,tuo),e(k,Rh),e(Rh,zie),e(zie,auo),e(Rh,nuo),e(Rh,QI),e(QI,suo),e(Rh,luo),e(k,iuo),e(k,Xs),e(Xs,Qie),e(Qie,duo),e(Xs,cuo),e(Xs,WI),e(WI,fuo),e(Xs,muo),e(Xs,HI),e(HI,guo),e(Xs,huo),e(k,puo),e(k,zs),e(zs,Wie),e(Wie,_uo),e(zs,uuo),e(zs,UI),e(UI,buo),e(zs,vuo),e(zs,JI),e(JI,Fuo),e(zs,Tuo),e(k,Muo),e(k,Qs),e(Qs,Hie),e(Hie,Euo),e(Qs,Cuo),e(Qs,YI),e(YI,wuo),e(Qs,Auo),e(Qs,KI),e(KI,Luo),e(Qs,yuo),e(k,xuo),e(k,Ws),e(Ws,Uie),e(Uie,$uo),e(Ws,kuo),e(Ws,ZI),e(ZI,Suo),e(Ws,Ruo),e(Ws,eq),e(eq,Puo),e(Ws,Buo),e(yr,Nuo),M(Ph,yr,null),e(Lo,Iuo),e(Lo,Bh),M(TL,Bh,null),e(Bh,quo),e(Bh,Jie),e(Jie,juo),b(f,EXe,u),b(f,ji,u),e(ji,Nh),e(Nh,Yie),M(ML,Yie,null),e(ji,Duo),e(ji,Kie),e(Kie,Guo),b(f,CXe,u),b(f,yo,u),M(EL,yo,null),e(yo,Ouo),e(yo,CL),e(CL,Vuo),e(CL,oq),e(oq,Xuo),e(CL,zuo),e(yo,Quo),e(yo,wL),e(wL,Wuo),e(wL,Zie),e(Zie,Huo),e(wL,Uuo),e(yo,Juo),e(yo,Ue),M(AL,Ue,null),e(Ue,Yuo),e(Ue,ede),e(ede,Kuo),e(Ue,Zuo),e(Ue,Ba),e(Ba,e1o),e(Ba,ode),e(ode,o1o),e(Ba,r1o),e(Ba,rde),e(rde,t1o),e(Ba,a1o),e(Ba,tde),e(tde,n1o),e(Ba,s1o),e(Ue,l1o),e(Ue,Y),e(Y,Ih),e(Ih,ade),e(ade,i1o),e(Ih,d1o),e(Ih,rq),e(rq,c1o),e(Ih,f1o),e(Y,m1o),e(Y,qh),e(qh,nde),e(nde,g1o),e(qh,h1o),e(qh,tq),e(tq,p1o),e(qh,_1o),e(Y,u1o),e(Y,jh),e(jh,sde),e(sde,b1o),e(jh,v1o),e(jh,aq),e(aq,F1o),e(jh,T1o),e(Y,M1o),e(Y,Dh),e(Dh,lde),e(lde,E1o),e(Dh,C1o),e(Dh,nq),e(nq,w1o),e(Dh,A1o),e(Y,L1o),e(Y,Gh),e(Gh,ide),e(ide,y1o),e(Gh,x1o),e(Gh,sq),e(sq,$1o),e(Gh,k1o),e(Y,S1o),e(Y,Oh),e(Oh,dde),e(dde,R1o),e(Oh,P1o),e(Oh,lq),e(lq,B1o),e(Oh,N1o),e(Y,I1o),e(Y,Vh),e(Vh,cde),e(cde,q1o),e(Vh,j1o),e(Vh,iq),e(iq,D1o),e(Vh,G1o),e(Y,O1o),e(Y,Xh),e(Xh,fde),e(fde,V1o),e(Xh,X1o),e(Xh,dq),e(dq,z1o),e(Xh,Q1o),e(Y,W1o),e(Y,zh),e(zh,mde),e(mde,H1o),e(zh,U1o),e(zh,cq),e(cq,J1o),e(zh,Y1o),e(Y,K1o),e(Y,Qh),e(Qh,gde),e(gde,Z1o),e(Qh,e2o),e(Qh,fq),e(fq,o2o),e(Qh,r2o),e(Y,t2o),e(Y,Wh),e(Wh,hde),e(hde,a2o),e(Wh,n2o),e(Wh,mq),e(mq,s2o),e(Wh,l2o),e(Y,i2o),e(Y,Hh),e(Hh,pde),e(pde,d2o),e(Hh,c2o),e(Hh,gq),e(gq,f2o),e(Hh,m2o),e(Y,g2o),e(Y,Uh),e(Uh,_de),e(_de,h2o),e(Uh,p2o),e(Uh,hq),e(hq,_2o),e(Uh,u2o),e(Y,b2o),e(Y,Jh),e(Jh,ude),e(ude,v2o),e(Jh,F2o),e(Jh,pq),e(pq,T2o),e(Jh,M2o),e(Y,E2o),e(Y,Yh),e(Yh,bde),e(bde,C2o),e(Yh,w2o),e(Yh,_q),e(_q,A2o),e(Yh,L2o),e(Y,y2o),e(Y,Kh),e(Kh,vde),e(vde,x2o),e(Kh,$2o),e(Kh,uq),e(uq,k2o),e(Kh,S2o),e(Y,R2o),e(Y,Zh),e(Zh,Fde),e(Fde,P2o),e(Zh,B2o),e(Zh,bq),e(bq,N2o),e(Zh,I2o),e(Y,q2o),e(Y,ep),e(ep,Tde),e(Tde,j2o),e(ep,D2o),e(ep,vq),e(vq,G2o),e(ep,O2o),e(Y,V2o),e(Y,op),e(op,Mde),e(Mde,X2o),e(op,z2o),e(op,Fq),e(Fq,Q2o),e(op,W2o),e(Y,H2o),e(Y,rp),e(rp,Ede),e(Ede,U2o),e(rp,J2o),e(rp,Tq),e(Tq,Y2o),e(rp,K2o),e(Y,Z2o),e(Y,tp),e(tp,Cde),e(Cde,ebo),e(tp,obo),e(tp,Mq),e(Mq,rbo),e(tp,tbo),e(Y,abo),e(Y,ap),e(ap,wde),e(wde,nbo),e(ap,sbo),e(ap,Eq),e(Eq,lbo),e(ap,ibo),e(Y,dbo),e(Y,np),e(np,Ade),e(Ade,cbo),e(np,fbo),e(np,Cq),e(Cq,mbo),e(np,gbo),e(Y,hbo),e(Y,sp),e(sp,Lde),e(Lde,pbo),e(sp,_bo),e(sp,wq),e(wq,ubo),e(sp,bbo),e(Y,vbo),e(Y,lp),e(lp,yde),e(yde,Fbo),e(lp,Tbo),e(lp,Aq),e(Aq,Mbo),e(lp,Ebo),e(Y,Cbo),e(Y,ip),e(ip,xde),e(xde,wbo),e(ip,Abo),e(ip,Lq),e(Lq,Lbo),e(ip,ybo),e(Y,xbo),e(Y,dp),e(dp,$de),e($de,$bo),e(dp,kbo),e(dp,yq),e(yq,Sbo),e(dp,Rbo),e(Y,Pbo),e(Y,cp),e(cp,kde),e(kde,Bbo),e(cp,Nbo),e(cp,xq),e(xq,Ibo),e(cp,qbo),e(Y,jbo),e(Y,fp),e(fp,Sde),e(Sde,Dbo),e(fp,Gbo),e(fp,$q),e($q,Obo),e(fp,Vbo),e(Y,Xbo),e(Y,mp),e(mp,Rde),e(Rde,zbo),e(mp,Qbo),e(mp,kq),e(kq,Wbo),e(mp,Hbo),e(Y,Ubo),e(Y,gp),e(gp,Pde),e(Pde,Jbo),e(gp,Ybo),e(gp,Sq),e(Sq,Kbo),e(gp,Zbo),e(Y,e3o),e(Y,hp),e(hp,Bde),e(Bde,o3o),e(hp,r3o),e(hp,Rq),e(Rq,t3o),e(hp,a3o),e(Y,n3o),e(Y,pp),e(pp,Nde),e(Nde,s3o),e(pp,l3o),e(pp,Pq),e(Pq,i3o),e(pp,d3o),e(Y,c3o),e(Y,_p),e(_p,Ide),e(Ide,f3o),e(_p,m3o),e(_p,Bq),e(Bq,g3o),e(_p,h3o),e(Ue,p3o),M(up,Ue,null),e(Ue,_3o),M(bp,Ue,null),e(yo,u3o),e(yo,vp),M(LL,vp,null),e(vp,b3o),e(vp,qde),e(qde,v3o),b(f,wXe,u),b(f,Di,u),e(Di,Fp),e(Fp,jde),M(yL,jde,null),e(Di,F3o),e(Di,Dde),e(Dde,T3o),b(f,AXe,u),b(f,xo,u),M(xL,xo,null),e(xo,M3o),e(xo,$L),e($L,E3o),e($L,Nq),e(Nq,C3o),e($L,w3o),e(xo,A3o),e(xo,kL),e(kL,L3o),e(kL,Gde),e(Gde,y3o),e(kL,x3o),e(xo,$3o),e(xo,Je),M(SL,Je,null),e(Je,k3o),e(Je,Ode),e(Ode,S3o),e(Je,R3o),e(Je,Gi),e(Gi,P3o),e(Gi,Vde),e(Vde,B3o),e(Gi,N3o),e(Gi,Xde),e(Xde,I3o),e(Gi,q3o),e(Je,j3o),e(Je,pe),e(pe,Tp),e(Tp,zde),e(zde,D3o),e(Tp,G3o),e(Tp,Iq),e(Iq,O3o),e(Tp,V3o),e(pe,X3o),e(pe,Mp),e(Mp,Qde),e(Qde,z3o),e(Mp,Q3o),e(Mp,Wde),e(Wde,W3o),e(Mp,H3o),e(pe,U3o),e(pe,Ep),e(Ep,Hde),e(Hde,J3o),e(Ep,Y3o),e(Ep,qq),e(qq,K3o),e(Ep,Z3o),e(pe,evo),e(pe,Cp),e(Cp,Ude),e(Ude,ovo),e(Cp,rvo),e(Cp,jq),e(jq,tvo),e(Cp,avo),e(pe,nvo),e(pe,wp),e(wp,Jde),e(Jde,svo),e(wp,lvo),e(wp,Dq),e(Dq,ivo),e(wp,dvo),e(pe,cvo),e(pe,Ap),e(Ap,Yde),e(Yde,fvo),e(Ap,mvo),e(Ap,Gq),e(Gq,gvo),e(Ap,hvo),e(pe,pvo),e(pe,Lp),e(Lp,Kde),e(Kde,_vo),e(Lp,uvo),e(Lp,Oq),e(Oq,bvo),e(Lp,vvo),e(pe,Fvo),e(pe,yp),e(yp,Zde),e(Zde,Tvo),e(yp,Mvo),e(yp,Vq),e(Vq,Evo),e(yp,Cvo),e(pe,wvo),e(pe,xp),e(xp,ece),e(ece,Avo),e(xp,Lvo),e(xp,Xq),e(Xq,yvo),e(xp,xvo),e(pe,$vo),e(pe,$p),e($p,oce),e(oce,kvo),e($p,Svo),e($p,zq),e(zq,Rvo),e($p,Pvo),e(pe,Bvo),e(pe,kp),e(kp,rce),e(rce,Nvo),e(kp,Ivo),e(kp,Qq),e(Qq,qvo),e(kp,jvo),e(pe,Dvo),e(pe,Sp),e(Sp,tce),e(tce,Gvo),e(Sp,Ovo),e(Sp,Wq),e(Wq,Vvo),e(Sp,Xvo),e(pe,zvo),e(pe,Rp),e(Rp,ace),e(ace,Qvo),e(Rp,Wvo),e(Rp,Hq),e(Hq,Hvo),e(Rp,Uvo),e(pe,Jvo),e(pe,Pp),e(Pp,nce),e(nce,Yvo),e(Pp,Kvo),e(Pp,Uq),e(Uq,Zvo),e(Pp,eFo),e(pe,oFo),e(pe,Bp),e(Bp,sce),e(sce,rFo),e(Bp,tFo),e(Bp,Jq),e(Jq,aFo),e(Bp,nFo),e(pe,sFo),e(pe,Np),e(Np,lce),e(lce,lFo),e(Np,iFo),e(Np,Yq),e(Yq,dFo),e(Np,cFo),e(pe,fFo),e(pe,Ip),e(Ip,ice),e(ice,mFo),e(Ip,gFo),e(Ip,Kq),e(Kq,hFo),e(Ip,pFo),e(pe,_Fo),e(pe,qp),e(qp,dce),e(dce,uFo),e(qp,bFo),e(qp,Zq),e(Zq,vFo),e(qp,FFo),e(Je,TFo),M(jp,Je,null),e(Je,MFo),M(Dp,Je,null),e(xo,EFo),e(xo,Gp),M(RL,Gp,null),e(Gp,CFo),e(Gp,cce),e(cce,wFo),b(f,LXe,u),b(f,Oi,u),e(Oi,Op),e(Op,fce),M(PL,fce,null),e(Oi,AFo),e(Oi,mce),e(mce,LFo),b(f,yXe,u),b(f,$o,u),M(BL,$o,null),e($o,yFo),e($o,Vi),e(Vi,xFo),e(Vi,ej),e(ej,$Fo),e(Vi,kFo),e(Vi,oj),e(oj,SFo),e(Vi,RFo),e($o,PFo),e($o,NL),e(NL,BFo),e(NL,gce),e(gce,NFo),e(NL,IFo),e($o,qFo),e($o,it),M(IL,it,null),e(it,jFo),e(it,hce),e(hce,DFo),e(it,GFo),e(it,Xi),e(Xi,OFo),e(Xi,pce),e(pce,VFo),e(Xi,XFo),e(Xi,rj),e(rj,zFo),e(Xi,QFo),e(it,WFo),M(Vp,it,null),e($o,HFo),e($o,Ye),M(qL,Ye,null),e(Ye,UFo),e(Ye,_ce),e(_ce,JFo),e(Ye,YFo),e(Ye,Na),e(Na,KFo),e(Na,uce),e(uce,ZFo),e(Na,eTo),e(Na,bce),e(bce,oTo),e(Na,rTo),e(Na,vce),e(vce,tTo),e(Na,aTo),e(Ye,nTo),e(Ye,y),e(y,Xp),e(Xp,Fce),e(Fce,sTo),e(Xp,lTo),e(Xp,tj),e(tj,iTo),e(Xp,dTo),e(y,cTo),e(y,zp),e(zp,Tce),e(Tce,fTo),e(zp,mTo),e(zp,aj),e(aj,gTo),e(zp,hTo),e(y,pTo),e(y,Qp),e(Qp,Mce),e(Mce,_To),e(Qp,uTo),e(Qp,nj),e(nj,bTo),e(Qp,vTo),e(y,FTo),e(y,Wp),e(Wp,Ece),e(Ece,TTo),e(Wp,MTo),e(Wp,sj),e(sj,ETo),e(Wp,CTo),e(y,wTo),e(y,Hp),e(Hp,Cce),e(Cce,ATo),e(Hp,LTo),e(Hp,lj),e(lj,yTo),e(Hp,xTo),e(y,$To),e(y,Up),e(Up,wce),e(wce,kTo),e(Up,STo),e(Up,ij),e(ij,RTo),e(Up,PTo),e(y,BTo),e(y,Jp),e(Jp,Ace),e(Ace,NTo),e(Jp,ITo),e(Jp,dj),e(dj,qTo),e(Jp,jTo),e(y,DTo),e(y,Yp),e(Yp,Lce),e(Lce,GTo),e(Yp,OTo),e(Yp,cj),e(cj,VTo),e(Yp,XTo),e(y,zTo),e(y,Kp),e(Kp,yce),e(yce,QTo),e(Kp,WTo),e(Kp,fj),e(fj,HTo),e(Kp,UTo),e(y,JTo),e(y,Zp),e(Zp,xce),e(xce,YTo),e(Zp,KTo),e(Zp,mj),e(mj,ZTo),e(Zp,e8o),e(y,o8o),e(y,e_),e(e_,$ce),e($ce,r8o),e(e_,t8o),e(e_,gj),e(gj,a8o),e(e_,n8o),e(y,s8o),e(y,o_),e(o_,kce),e(kce,l8o),e(o_,i8o),e(o_,hj),e(hj,d8o),e(o_,c8o),e(y,f8o),e(y,r_),e(r_,Sce),e(Sce,m8o),e(r_,g8o),e(r_,pj),e(pj,h8o),e(r_,p8o),e(y,_8o),e(y,t_),e(t_,Rce),e(Rce,u8o),e(t_,b8o),e(t_,_j),e(_j,v8o),e(t_,F8o),e(y,T8o),e(y,a_),e(a_,Pce),e(Pce,M8o),e(a_,E8o),e(a_,uj),e(uj,C8o),e(a_,w8o),e(y,A8o),e(y,n_),e(n_,Bce),e(Bce,L8o),e(n_,y8o),e(n_,bj),e(bj,x8o),e(n_,$8o),e(y,k8o),e(y,s_),e(s_,Nce),e(Nce,S8o),e(s_,R8o),e(s_,vj),e(vj,P8o),e(s_,B8o),e(y,N8o),e(y,l_),e(l_,Ice),e(Ice,I8o),e(l_,q8o),e(l_,Fj),e(Fj,j8o),e(l_,D8o),e(y,G8o),e(y,i_),e(i_,qce),e(qce,O8o),e(i_,V8o),e(i_,Tj),e(Tj,X8o),e(i_,z8o),e(y,Q8o),e(y,d_),e(d_,jce),e(jce,W8o),e(d_,H8o),e(d_,Mj),e(Mj,U8o),e(d_,J8o),e(y,Y8o),e(y,c_),e(c_,Dce),e(Dce,K8o),e(c_,Z8o),e(c_,Ej),e(Ej,eMo),e(c_,oMo),e(y,rMo),e(y,f_),e(f_,Gce),e(Gce,tMo),e(f_,aMo),e(f_,Cj),e(Cj,nMo),e(f_,sMo),e(y,lMo),e(y,m_),e(m_,Oce),e(Oce,iMo),e(m_,dMo),e(m_,wj),e(wj,cMo),e(m_,fMo),e(y,mMo),e(y,g_),e(g_,Vce),e(Vce,gMo),e(g_,hMo),e(g_,Aj),e(Aj,pMo),e(g_,_Mo),e(y,uMo),e(y,h_),e(h_,Xce),e(Xce,bMo),e(h_,vMo),e(h_,Lj),e(Lj,FMo),e(h_,TMo),e(y,MMo),e(y,p_),e(p_,zce),e(zce,EMo),e(p_,CMo),e(p_,yj),e(yj,wMo),e(p_,AMo),e(y,LMo),e(y,__),e(__,Qce),e(Qce,yMo),e(__,xMo),e(__,xj),e(xj,$Mo),e(__,kMo),e(y,SMo),e(y,u_),e(u_,Wce),e(Wce,RMo),e(u_,PMo),e(u_,$j),e($j,BMo),e(u_,NMo),e(y,IMo),e(y,b_),e(b_,Hce),e(Hce,qMo),e(b_,jMo),e(b_,kj),e(kj,DMo),e(b_,GMo),e(y,OMo),e(y,v_),e(v_,Uce),e(Uce,VMo),e(v_,XMo),e(v_,Sj),e(Sj,zMo),e(v_,QMo),e(y,WMo),e(y,F_),e(F_,Jce),e(Jce,HMo),e(F_,UMo),e(F_,Rj),e(Rj,JMo),e(F_,YMo),e(y,KMo),e(y,T_),e(T_,Yce),e(Yce,ZMo),e(T_,e4o),e(T_,Pj),e(Pj,o4o),e(T_,r4o),e(y,t4o),e(y,M_),e(M_,Kce),e(Kce,a4o),e(M_,n4o),e(M_,Bj),e(Bj,s4o),e(M_,l4o),e(y,i4o),e(y,E_),e(E_,Zce),e(Zce,d4o),e(E_,c4o),e(E_,Nj),e(Nj,f4o),e(E_,m4o),e(y,g4o),e(y,Hs),e(Hs,efe),e(efe,h4o),e(Hs,p4o),e(Hs,Ij),e(Ij,_4o),e(Hs,u4o),e(Hs,qj),e(qj,b4o),e(Hs,v4o),e(y,F4o),e(y,C_),e(C_,ofe),e(ofe,T4o),e(C_,M4o),e(C_,jj),e(jj,E4o),e(C_,C4o),e(y,w4o),e(y,w_),e(w_,rfe),e(rfe,A4o),e(w_,L4o),e(w_,Dj),e(Dj,y4o),e(w_,x4o),e(y,$4o),e(y,A_),e(A_,tfe),e(tfe,k4o),e(A_,S4o),e(A_,Gj),e(Gj,R4o),e(A_,P4o),e(y,B4o),e(y,L_),e(L_,afe),e(afe,N4o),e(L_,I4o),e(L_,Oj),e(Oj,q4o),e(L_,j4o),e(y,D4o),e(y,y_),e(y_,nfe),e(nfe,G4o),e(y_,O4o),e(y_,Vj),e(Vj,V4o),e(y_,X4o),e(y,z4o),e(y,x_),e(x_,sfe),e(sfe,Q4o),e(x_,W4o),e(x_,Xj),e(Xj,H4o),e(x_,U4o),e(y,J4o),e(y,$_),e($_,lfe),e(lfe,Y4o),e($_,K4o),e($_,zj),e(zj,Z4o),e($_,eEo),e(y,oEo),e(y,k_),e(k_,ife),e(ife,rEo),e(k_,tEo),e(k_,Qj),e(Qj,aEo),e(k_,nEo),e(y,sEo),e(y,S_),e(S_,dfe),e(dfe,lEo),e(S_,iEo),e(S_,Wj),e(Wj,dEo),e(S_,cEo),e(y,fEo),e(y,R_),e(R_,cfe),e(cfe,mEo),e(R_,gEo),e(R_,Hj),e(Hj,hEo),e(R_,pEo),e(y,_Eo),e(y,P_),e(P_,ffe),e(ffe,uEo),e(P_,bEo),e(P_,Uj),e(Uj,vEo),e(P_,FEo),e(y,TEo),e(y,B_),e(B_,mfe),e(mfe,MEo),e(B_,EEo),e(B_,Jj),e(Jj,CEo),e(B_,wEo),e(y,AEo),e(y,N_),e(N_,gfe),e(gfe,LEo),e(N_,yEo),e(N_,Yj),e(Yj,xEo),e(N_,$Eo),e(y,kEo),e(y,I_),e(I_,hfe),e(hfe,SEo),e(I_,REo),e(I_,Kj),e(Kj,PEo),e(I_,BEo),e(y,NEo),e(y,q_),e(q_,pfe),e(pfe,IEo),e(q_,qEo),e(q_,Zj),e(Zj,jEo),e(q_,DEo),e(y,GEo),e(y,j_),e(j_,_fe),e(_fe,OEo),e(j_,VEo),e(j_,eD),e(eD,XEo),e(j_,zEo),e(y,QEo),e(y,D_),e(D_,ufe),e(ufe,WEo),e(D_,HEo),e(D_,oD),e(oD,UEo),e(D_,JEo),e(y,YEo),e(y,G_),e(G_,bfe),e(bfe,KEo),e(G_,ZEo),e(G_,rD),e(rD,eCo),e(G_,oCo),e(y,rCo),e(y,O_),e(O_,vfe),e(vfe,tCo),e(O_,aCo),e(O_,tD),e(tD,nCo),e(O_,sCo),e(y,lCo),e(y,V_),e(V_,Ffe),e(Ffe,iCo),e(V_,dCo),e(V_,aD),e(aD,cCo),e(V_,fCo),e(y,mCo),e(y,X_),e(X_,Tfe),e(Tfe,gCo),e(X_,hCo),e(X_,nD),e(nD,pCo),e(X_,_Co),e(y,uCo),e(y,z_),e(z_,Mfe),e(Mfe,bCo),e(z_,vCo),e(z_,sD),e(sD,FCo),e(z_,TCo),e(y,MCo),e(y,Q_),e(Q_,Efe),e(Efe,ECo),e(Q_,CCo),e(Q_,lD),e(lD,wCo),e(Q_,ACo),e(y,LCo),e(y,W_),e(W_,Cfe),e(Cfe,yCo),e(W_,xCo),e(W_,iD),e(iD,$Co),e(W_,kCo),e(y,SCo),e(y,H_),e(H_,wfe),e(wfe,RCo),e(H_,PCo),e(H_,dD),e(dD,BCo),e(H_,NCo),e(y,ICo),e(y,U_),e(U_,Afe),e(Afe,qCo),e(U_,jCo),e(U_,cD),e(cD,DCo),e(U_,GCo),e(y,OCo),e(y,J_),e(J_,Lfe),e(Lfe,VCo),e(J_,XCo),e(J_,fD),e(fD,zCo),e(J_,QCo),e(y,WCo),e(y,Y_),e(Y_,yfe),e(yfe,HCo),e(Y_,UCo),e(Y_,mD),e(mD,JCo),e(Y_,YCo),e(y,KCo),e(y,K_),e(K_,xfe),e(xfe,ZCo),e(K_,e5o),e(K_,gD),e(gD,o5o),e(K_,r5o),e(y,t5o),e(y,Z_),e(Z_,$fe),e($fe,a5o),e(Z_,n5o),e(Z_,hD),e(hD,s5o),e(Z_,l5o),e(y,i5o),e(y,eu),e(eu,kfe),e(kfe,d5o),e(eu,c5o),e(eu,pD),e(pD,f5o),e(eu,m5o),e(y,g5o),e(y,ou),e(ou,Sfe),e(Sfe,h5o),e(ou,p5o),e(ou,_D),e(_D,_5o),e(ou,u5o),e(y,b5o),e(y,ru),e(ru,Rfe),e(Rfe,v5o),e(ru,F5o),e(ru,uD),e(uD,T5o),e(ru,M5o),e(y,E5o),e(y,tu),e(tu,Pfe),e(Pfe,C5o),e(tu,w5o),e(tu,bD),e(bD,A5o),e(tu,L5o),e(y,y5o),e(y,au),e(au,Bfe),e(Bfe,x5o),e(au,$5o),e(au,vD),e(vD,k5o),e(au,S5o),e(y,R5o),e(y,nu),e(nu,Nfe),e(Nfe,P5o),e(nu,B5o),e(nu,FD),e(FD,N5o),e(nu,I5o),e(y,q5o),e(y,su),e(su,Ife),e(Ife,j5o),e(su,D5o),e(su,TD),e(TD,G5o),e(su,O5o),e(y,V5o),e(y,lu),e(lu,qfe),e(qfe,X5o),e(lu,z5o),e(lu,MD),e(MD,Q5o),e(lu,W5o),e(y,H5o),e(y,iu),e(iu,jfe),e(jfe,U5o),e(iu,J5o),e(iu,ED),e(ED,Y5o),e(iu,K5o),e(y,Z5o),e(y,du),e(du,Dfe),e(Dfe,e0o),e(du,o0o),e(du,CD),e(CD,r0o),e(du,t0o),e(y,a0o),e(y,cu),e(cu,Gfe),e(Gfe,n0o),e(cu,s0o),e(cu,wD),e(wD,l0o),e(cu,i0o),e(y,d0o),e(y,fu),e(fu,Ofe),e(Ofe,c0o),e(fu,f0o),e(fu,AD),e(AD,m0o),e(fu,g0o),e(y,h0o),e(y,mu),e(mu,Vfe),e(Vfe,p0o),e(mu,_0o),e(mu,LD),e(LD,u0o),e(mu,b0o),e(y,v0o),e(y,gu),e(gu,Xfe),e(Xfe,F0o),e(gu,T0o),e(gu,yD),e(yD,M0o),e(gu,E0o),e(y,C0o),e(y,hu),e(hu,zfe),e(zfe,w0o),e(hu,A0o),e(hu,xD),e(xD,L0o),e(hu,y0o),e(y,x0o),e(y,pu),e(pu,Qfe),e(Qfe,$0o),e(pu,k0o),e(pu,$D),e($D,S0o),e(pu,R0o),e(y,P0o),e(y,_u),e(_u,Wfe),e(Wfe,B0o),e(_u,N0o),e(_u,kD),e(kD,I0o),e(_u,q0o),e(y,j0o),e(y,uu),e(uu,Hfe),e(Hfe,D0o),e(uu,G0o),e(uu,SD),e(SD,O0o),e(uu,V0o),e(y,X0o),e(y,bu),e(bu,Ufe),e(Ufe,z0o),e(bu,Q0o),e(bu,RD),e(RD,W0o),e(bu,H0o),e(y,U0o),e(y,vu),e(vu,Jfe),e(Jfe,J0o),e(vu,Y0o),e(vu,PD),e(PD,K0o),e(vu,Z0o),e(y,ewo),e(y,Fu),e(Fu,Yfe),e(Yfe,owo),e(Fu,rwo),e(Fu,BD),e(BD,two),e(Fu,awo),e(y,nwo),e(y,Tu),e(Tu,Kfe),e(Kfe,swo),e(Tu,lwo),e(Tu,ND),e(ND,iwo),e(Tu,dwo),e(y,cwo),e(y,Mu),e(Mu,Zfe),e(Zfe,fwo),e(Mu,mwo),e(Mu,ID),e(ID,gwo),e(Mu,hwo),e(y,pwo),e(y,Eu),e(Eu,eme),e(eme,_wo),e(Eu,uwo),e(Eu,qD),e(qD,bwo),e(Eu,vwo),e(y,Fwo),e(y,Cu),e(Cu,ome),e(ome,Two),e(Cu,Mwo),e(Cu,jD),e(jD,Ewo),e(Cu,Cwo),e(y,wwo),e(y,wu),e(wu,rme),e(rme,Awo),e(wu,Lwo),e(wu,DD),e(DD,ywo),e(wu,xwo),e(y,$wo),e(y,Au),e(Au,tme),e(tme,kwo),e(Au,Swo),e(Au,GD),e(GD,Rwo),e(Au,Pwo),e(y,Bwo),e(y,Lu),e(Lu,ame),e(ame,Nwo),e(Lu,Iwo),e(Lu,OD),e(OD,qwo),e(Lu,jwo),e(y,Dwo),e(y,yu),e(yu,nme),e(nme,Gwo),e(yu,Owo),e(yu,VD),e(VD,Vwo),e(yu,Xwo),e(y,zwo),e(y,xu),e(xu,sme),e(sme,Qwo),e(xu,Wwo),e(xu,XD),e(XD,Hwo),e(xu,Uwo),e(y,Jwo),e(y,$u),e($u,lme),e(lme,Ywo),e($u,Kwo),e($u,zD),e(zD,Zwo),e($u,eAo),e(y,oAo),e(y,ku),e(ku,ime),e(ime,rAo),e(ku,tAo),e(ku,QD),e(QD,aAo),e(ku,nAo),e(y,sAo),e(y,Su),e(Su,dme),e(dme,lAo),e(Su,iAo),e(Su,WD),e(WD,dAo),e(Su,cAo),e(y,fAo),e(y,Ru),e(Ru,cme),e(cme,mAo),e(Ru,gAo),e(Ru,HD),e(HD,hAo),e(Ru,pAo),e(y,_Ao),e(y,Pu),e(Pu,fme),e(fme,uAo),e(Pu,bAo),e(Pu,UD),e(UD,vAo),e(Pu,FAo),e(y,TAo),e(y,Bu),e(Bu,mme),e(mme,MAo),e(Bu,EAo),e(Bu,JD),e(JD,CAo),e(Bu,wAo),e(y,AAo),e(y,Nu),e(Nu,gme),e(gme,LAo),e(Nu,yAo),e(Nu,YD),e(YD,xAo),e(Nu,$Ao),e(y,kAo),e(y,Iu),e(Iu,hme),e(hme,SAo),e(Iu,RAo),e(Iu,KD),e(KD,PAo),e(Iu,BAo),e(y,NAo),e(y,qu),e(qu,pme),e(pme,IAo),e(qu,qAo),e(qu,ZD),e(ZD,jAo),e(qu,DAo),e(y,GAo),e(y,ju),e(ju,_me),e(_me,OAo),e(ju,VAo),e(ju,eG),e(eG,XAo),e(ju,zAo),e(y,QAo),e(y,Du),e(Du,ume),e(ume,WAo),e(Du,HAo),e(Du,oG),e(oG,UAo),e(Du,JAo),e(y,YAo),e(y,Gu),e(Gu,bme),e(bme,KAo),e(Gu,ZAo),e(Gu,rG),e(rG,e6o),e(Gu,o6o),e(y,r6o),e(y,Ou),e(Ou,vme),e(vme,t6o),e(Ou,a6o),e(Ou,tG),e(tG,n6o),e(Ou,s6o),e(y,l6o),e(y,Vu),e(Vu,Fme),e(Fme,i6o),e(Vu,d6o),e(Vu,aG),e(aG,c6o),e(Vu,f6o),e(y,m6o),e(y,Xu),e(Xu,Tme),e(Tme,g6o),e(Xu,h6o),e(Xu,nG),e(nG,p6o),e(Xu,_6o),e(y,u6o),e(y,zu),e(zu,Mme),e(Mme,b6o),e(zu,v6o),e(zu,sG),e(sG,F6o),e(zu,T6o),e(y,M6o),e(y,Qu),e(Qu,Eme),e(Eme,E6o),e(Qu,C6o),e(Qu,lG),e(lG,w6o),e(Qu,A6o),e(Ye,L6o),e(Ye,Wu),e(Wu,y6o),e(Wu,Cme),e(Cme,x6o),e(Wu,$6o),e(Wu,wme),e(wme,k6o),e(Ye,S6o),M(Hu,Ye,null),b(f,xXe,u),b(f,zi,u),e(zi,Uu),e(Uu,Ame),M(jL,Ame,null),e(zi,R6o),e(zi,Lme),e(Lme,P6o),b(f,$Xe,u),b(f,ko,u),M(DL,ko,null),e(ko,B6o),e(ko,Qi),e(Qi,N6o),e(Qi,iG),e(iG,I6o),e(Qi,q6o),e(Qi,dG),e(dG,j6o),e(Qi,D6o),e(ko,G6o),e(ko,GL),e(GL,O6o),e(GL,yme),e(yme,V6o),e(GL,X6o),e(ko,z6o),e(ko,dt),M(OL,dt,null),e(dt,Q6o),e(dt,xme),e(xme,W6o),e(dt,H6o),e(dt,Wi),e(Wi,U6o),e(Wi,$me),e($me,J6o),e(Wi,Y6o),e(Wi,cG),e(cG,K6o),e(Wi,Z6o),e(dt,e7o),M(Ju,dt,null),e(ko,o7o),e(ko,Ke),M(VL,Ke,null),e(Ke,r7o),e(Ke,kme),e(kme,t7o),e(Ke,a7o),e(Ke,Ia),e(Ia,n7o),e(Ia,Sme),e(Sme,s7o),e(Ia,l7o),e(Ia,Rme),e(Rme,i7o),e(Ia,d7o),e(Ia,Pme),e(Pme,c7o),e(Ia,f7o),e(Ke,m7o),e(Ke,G),e(G,Yu),e(Yu,Bme),e(Bme,g7o),e(Yu,h7o),e(Yu,fG),e(fG,p7o),e(Yu,_7o),e(G,u7o),e(G,Ku),e(Ku,Nme),e(Nme,b7o),e(Ku,v7o),e(Ku,mG),e(mG,F7o),e(Ku,T7o),e(G,M7o),e(G,Zu),e(Zu,Ime),e(Ime,E7o),e(Zu,C7o),e(Zu,gG),e(gG,w7o),e(Zu,A7o),e(G,L7o),e(G,e1),e(e1,qme),e(qme,y7o),e(e1,x7o),e(e1,hG),e(hG,$7o),e(e1,k7o),e(G,S7o),e(G,o1),e(o1,jme),e(jme,R7o),e(o1,P7o),e(o1,pG),e(pG,B7o),e(o1,N7o),e(G,I7o),e(G,r1),e(r1,Dme),e(Dme,q7o),e(r1,j7o),e(r1,_G),e(_G,D7o),e(r1,G7o),e(G,O7o),e(G,t1),e(t1,Gme),e(Gme,V7o),e(t1,X7o),e(t1,uG),e(uG,z7o),e(t1,Q7o),e(G,W7o),e(G,a1),e(a1,Ome),e(Ome,H7o),e(a1,U7o),e(a1,bG),e(bG,J7o),e(a1,Y7o),e(G,K7o),e(G,n1),e(n1,Vme),e(Vme,Z7o),e(n1,eLo),e(n1,vG),e(vG,oLo),e(n1,rLo),e(G,tLo),e(G,s1),e(s1,Xme),e(Xme,aLo),e(s1,nLo),e(s1,FG),e(FG,sLo),e(s1,lLo),e(G,iLo),e(G,l1),e(l1,zme),e(zme,dLo),e(l1,cLo),e(l1,TG),e(TG,fLo),e(l1,mLo),e(G,gLo),e(G,i1),e(i1,Qme),e(Qme,hLo),e(i1,pLo),e(i1,MG),e(MG,_Lo),e(i1,uLo),e(G,bLo),e(G,d1),e(d1,Wme),e(Wme,vLo),e(d1,FLo),e(d1,EG),e(EG,TLo),e(d1,MLo),e(G,ELo),e(G,c1),e(c1,Hme),e(Hme,CLo),e(c1,wLo),e(c1,CG),e(CG,ALo),e(c1,LLo),e(G,yLo),e(G,f1),e(f1,Ume),e(Ume,xLo),e(f1,$Lo),e(f1,wG),e(wG,kLo),e(f1,SLo),e(G,RLo),e(G,m1),e(m1,Jme),e(Jme,PLo),e(m1,BLo),e(m1,AG),e(AG,NLo),e(m1,ILo),e(G,qLo),e(G,g1),e(g1,Yme),e(Yme,jLo),e(g1,DLo),e(g1,LG),e(LG,GLo),e(g1,OLo),e(G,VLo),e(G,h1),e(h1,Kme),e(Kme,XLo),e(h1,zLo),e(h1,yG),e(yG,QLo),e(h1,WLo),e(G,HLo),e(G,p1),e(p1,Zme),e(Zme,ULo),e(p1,JLo),e(p1,xG),e(xG,YLo),e(p1,KLo),e(G,ZLo),e(G,_1),e(_1,ege),e(ege,eyo),e(_1,oyo),e(_1,$G),e($G,ryo),e(_1,tyo),e(G,ayo),e(G,u1),e(u1,oge),e(oge,nyo),e(u1,syo),e(u1,kG),e(kG,lyo),e(u1,iyo),e(G,dyo),e(G,b1),e(b1,rge),e(rge,cyo),e(b1,fyo),e(b1,SG),e(SG,myo),e(b1,gyo),e(G,hyo),e(G,v1),e(v1,tge),e(tge,pyo),e(v1,_yo),e(v1,RG),e(RG,uyo),e(v1,byo),e(G,vyo),e(G,F1),e(F1,age),e(age,Fyo),e(F1,Tyo),e(F1,PG),e(PG,Myo),e(F1,Eyo),e(G,Cyo),e(G,T1),e(T1,nge),e(nge,wyo),e(T1,Ayo),e(T1,BG),e(BG,Lyo),e(T1,yyo),e(G,xyo),e(G,M1),e(M1,sge),e(sge,$yo),e(M1,kyo),e(M1,NG),e(NG,Syo),e(M1,Ryo),e(G,Pyo),e(G,E1),e(E1,lge),e(lge,Byo),e(E1,Nyo),e(E1,IG),e(IG,Iyo),e(E1,qyo),e(G,jyo),e(G,C1),e(C1,ige),e(ige,Dyo),e(C1,Gyo),e(C1,qG),e(qG,Oyo),e(C1,Vyo),e(G,Xyo),e(G,w1),e(w1,dge),e(dge,zyo),e(w1,Qyo),e(w1,jG),e(jG,Wyo),e(w1,Hyo),e(G,Uyo),e(G,A1),e(A1,cge),e(cge,Jyo),e(A1,Yyo),e(A1,DG),e(DG,Kyo),e(A1,Zyo),e(G,e9o),e(G,L1),e(L1,fge),e(fge,o9o),e(L1,r9o),e(L1,GG),e(GG,t9o),e(L1,a9o),e(G,n9o),e(G,y1),e(y1,mge),e(mge,s9o),e(y1,l9o),e(y1,OG),e(OG,i9o),e(y1,d9o),e(G,c9o),e(G,x1),e(x1,gge),e(gge,f9o),e(x1,m9o),e(x1,VG),e(VG,g9o),e(x1,h9o),e(G,p9o),e(G,$1),e($1,hge),e(hge,_9o),e($1,u9o),e($1,XG),e(XG,b9o),e($1,v9o),e(G,F9o),e(G,k1),e(k1,pge),e(pge,T9o),e(k1,M9o),e(k1,zG),e(zG,E9o),e(k1,C9o),e(G,w9o),e(G,S1),e(S1,_ge),e(_ge,A9o),e(S1,L9o),e(S1,QG),e(QG,y9o),e(S1,x9o),e(G,$9o),e(G,R1),e(R1,uge),e(uge,k9o),e(R1,S9o),e(R1,WG),e(WG,R9o),e(R1,P9o),e(G,B9o),e(G,P1),e(P1,bge),e(bge,N9o),e(P1,I9o),e(P1,HG),e(HG,q9o),e(P1,j9o),e(G,D9o),e(G,B1),e(B1,vge),e(vge,G9o),e(B1,O9o),e(B1,UG),e(UG,V9o),e(B1,X9o),e(G,z9o),e(G,N1),e(N1,Fge),e(Fge,Q9o),e(N1,W9o),e(N1,JG),e(JG,H9o),e(N1,U9o),e(G,J9o),e(G,I1),e(I1,Tge),e(Tge,Y9o),e(I1,K9o),e(I1,YG),e(YG,Z9o),e(I1,exo),e(G,oxo),e(G,q1),e(q1,Mge),e(Mge,rxo),e(q1,txo),e(q1,KG),e(KG,axo),e(q1,nxo),e(G,sxo),e(G,j1),e(j1,Ege),e(Ege,lxo),e(j1,ixo),e(j1,ZG),e(ZG,dxo),e(j1,cxo),e(G,fxo),e(G,D1),e(D1,Cge),e(Cge,mxo),e(D1,gxo),e(D1,eO),e(eO,hxo),e(D1,pxo),e(G,_xo),e(G,G1),e(G1,wge),e(wge,uxo),e(G1,bxo),e(G1,oO),e(oO,vxo),e(G1,Fxo),e(Ke,Txo),e(Ke,O1),e(O1,Mxo),e(O1,Age),e(Age,Exo),e(O1,Cxo),e(O1,Lge),e(Lge,wxo),e(Ke,Axo),M(V1,Ke,null),b(f,kXe,u),b(f,Hi,u),e(Hi,X1),e(X1,yge),M(XL,yge,null),e(Hi,Lxo),e(Hi,xge),e(xge,yxo),b(f,SXe,u),b(f,So,u),M(zL,So,null),e(So,xxo),e(So,Ui),e(Ui,$xo),e(Ui,rO),e(rO,kxo),e(Ui,Sxo),e(Ui,tO),e(tO,Rxo),e(Ui,Pxo),e(So,Bxo),e(So,QL),e(QL,Nxo),e(QL,$ge),e($ge,Ixo),e(QL,qxo),e(So,jxo),e(So,ct),M(WL,ct,null),e(ct,Dxo),e(ct,kge),e(kge,Gxo),e(ct,Oxo),e(ct,Ji),e(Ji,Vxo),e(Ji,Sge),e(Sge,Xxo),e(Ji,zxo),e(Ji,aO),e(aO,Qxo),e(Ji,Wxo),e(ct,Hxo),M(z1,ct,null),e(So,Uxo),e(So,Ze),M(HL,Ze,null),e(Ze,Jxo),e(Ze,Rge),e(Rge,Yxo),e(Ze,Kxo),e(Ze,qa),e(qa,Zxo),e(qa,Pge),e(Pge,e$o),e(qa,o$o),e(qa,Bge),e(Bge,r$o),e(qa,t$o),e(qa,Nge),e(Nge,a$o),e(qa,n$o),e(Ze,s$o),e(Ze,z),e(z,Q1),e(Q1,Ige),e(Ige,l$o),e(Q1,i$o),e(Q1,nO),e(nO,d$o),e(Q1,c$o),e(z,f$o),e(z,W1),e(W1,qge),e(qge,m$o),e(W1,g$o),e(W1,sO),e(sO,h$o),e(W1,p$o),e(z,_$o),e(z,H1),e(H1,jge),e(jge,u$o),e(H1,b$o),e(H1,lO),e(lO,v$o),e(H1,F$o),e(z,T$o),e(z,U1),e(U1,Dge),e(Dge,M$o),e(U1,E$o),e(U1,iO),e(iO,C$o),e(U1,w$o),e(z,A$o),e(z,J1),e(J1,Gge),e(Gge,L$o),e(J1,y$o),e(J1,dO),e(dO,x$o),e(J1,$$o),e(z,k$o),e(z,Y1),e(Y1,Oge),e(Oge,S$o),e(Y1,R$o),e(Y1,cO),e(cO,P$o),e(Y1,B$o),e(z,N$o),e(z,K1),e(K1,Vge),e(Vge,I$o),e(K1,q$o),e(K1,fO),e(fO,j$o),e(K1,D$o),e(z,G$o),e(z,Z1),e(Z1,Xge),e(Xge,O$o),e(Z1,V$o),e(Z1,mO),e(mO,X$o),e(Z1,z$o),e(z,Q$o),e(z,e2),e(e2,zge),e(zge,W$o),e(e2,H$o),e(e2,gO),e(gO,U$o),e(e2,J$o),e(z,Y$o),e(z,o2),e(o2,Qge),e(Qge,K$o),e(o2,Z$o),e(o2,hO),e(hO,eko),e(o2,oko),e(z,rko),e(z,r2),e(r2,Wge),e(Wge,tko),e(r2,ako),e(r2,pO),e(pO,nko),e(r2,sko),e(z,lko),e(z,t2),e(t2,Hge),e(Hge,iko),e(t2,dko),e(t2,_O),e(_O,cko),e(t2,fko),e(z,mko),e(z,a2),e(a2,Uge),e(Uge,gko),e(a2,hko),e(a2,uO),e(uO,pko),e(a2,_ko),e(z,uko),e(z,n2),e(n2,Jge),e(Jge,bko),e(n2,vko),e(n2,bO),e(bO,Fko),e(n2,Tko),e(z,Mko),e(z,s2),e(s2,Yge),e(Yge,Eko),e(s2,Cko),e(s2,vO),e(vO,wko),e(s2,Ako),e(z,Lko),e(z,l2),e(l2,Kge),e(Kge,yko),e(l2,xko),e(l2,FO),e(FO,$ko),e(l2,kko),e(z,Sko),e(z,i2),e(i2,Zge),e(Zge,Rko),e(i2,Pko),e(i2,TO),e(TO,Bko),e(i2,Nko),e(z,Iko),e(z,d2),e(d2,ehe),e(ehe,qko),e(d2,jko),e(d2,MO),e(MO,Dko),e(d2,Gko),e(z,Oko),e(z,c2),e(c2,ohe),e(ohe,Vko),e(c2,Xko),e(c2,EO),e(EO,zko),e(c2,Qko),e(z,Wko),e(z,f2),e(f2,rhe),e(rhe,Hko),e(f2,Uko),e(f2,CO),e(CO,Jko),e(f2,Yko),e(z,Kko),e(z,m2),e(m2,the),e(the,Zko),e(m2,eSo),e(m2,wO),e(wO,oSo),e(m2,rSo),e(z,tSo),e(z,g2),e(g2,ahe),e(ahe,aSo),e(g2,nSo),e(g2,AO),e(AO,sSo),e(g2,lSo),e(z,iSo),e(z,h2),e(h2,nhe),e(nhe,dSo),e(h2,cSo),e(h2,LO),e(LO,fSo),e(h2,mSo),e(z,gSo),e(z,p2),e(p2,she),e(she,hSo),e(p2,pSo),e(p2,yO),e(yO,_So),e(p2,uSo),e(z,bSo),e(z,_2),e(_2,lhe),e(lhe,vSo),e(_2,FSo),e(_2,xO),e(xO,TSo),e(_2,MSo),e(z,ESo),e(z,u2),e(u2,ihe),e(ihe,CSo),e(u2,wSo),e(u2,$O),e($O,ASo),e(u2,LSo),e(z,ySo),e(z,b2),e(b2,dhe),e(dhe,xSo),e(b2,$So),e(b2,kO),e(kO,kSo),e(b2,SSo),e(z,RSo),e(z,v2),e(v2,che),e(che,PSo),e(v2,BSo),e(v2,SO),e(SO,NSo),e(v2,ISo),e(z,qSo),e(z,F2),e(F2,fhe),e(fhe,jSo),e(F2,DSo),e(F2,RO),e(RO,GSo),e(F2,OSo),e(z,VSo),e(z,T2),e(T2,mhe),e(mhe,XSo),e(T2,zSo),e(T2,PO),e(PO,QSo),e(T2,WSo),e(z,HSo),e(z,M2),e(M2,ghe),e(ghe,USo),e(M2,JSo),e(M2,BO),e(BO,YSo),e(M2,KSo),e(z,ZSo),e(z,E2),e(E2,hhe),e(hhe,eRo),e(E2,oRo),e(E2,NO),e(NO,rRo),e(E2,tRo),e(z,aRo),e(z,C2),e(C2,phe),e(phe,nRo),e(C2,sRo),e(C2,IO),e(IO,lRo),e(C2,iRo),e(z,dRo),e(z,w2),e(w2,_he),e(_he,cRo),e(w2,fRo),e(w2,qO),e(qO,mRo),e(w2,gRo),e(z,hRo),e(z,A2),e(A2,uhe),e(uhe,pRo),e(A2,_Ro),e(A2,jO),e(jO,uRo),e(A2,bRo),e(z,vRo),e(z,L2),e(L2,bhe),e(bhe,FRo),e(L2,TRo),e(L2,DO),e(DO,MRo),e(L2,ERo),e(z,CRo),e(z,y2),e(y2,vhe),e(vhe,wRo),e(y2,ARo),e(y2,GO),e(GO,LRo),e(y2,yRo),e(z,xRo),e(z,x2),e(x2,Fhe),e(Fhe,$Ro),e(x2,kRo),e(x2,OO),e(OO,SRo),e(x2,RRo),e(z,PRo),e(z,$2),e($2,The),e(The,BRo),e($2,NRo),e($2,VO),e(VO,IRo),e($2,qRo),e(z,jRo),e(z,k2),e(k2,Mhe),e(Mhe,DRo),e(k2,GRo),e(k2,XO),e(XO,ORo),e(k2,VRo),e(Ze,XRo),e(Ze,S2),e(S2,zRo),e(S2,Ehe),e(Ehe,QRo),e(S2,WRo),e(S2,Che),e(Che,HRo),e(Ze,URo),M(R2,Ze,null),b(f,RXe,u),b(f,Yi,u),e(Yi,P2),e(P2,whe),M(UL,whe,null),e(Yi,JRo),e(Yi,Ahe),e(Ahe,YRo),b(f,PXe,u),b(f,Ro,u),M(JL,Ro,null),e(Ro,KRo),e(Ro,Ki),e(Ki,ZRo),e(Ki,zO),e(zO,ePo),e(Ki,oPo),e(Ki,QO),e(QO,rPo),e(Ki,tPo),e(Ro,aPo),e(Ro,YL),e(YL,nPo),e(YL,Lhe),e(Lhe,sPo),e(YL,lPo),e(Ro,iPo),e(Ro,ft),M(KL,ft,null),e(ft,dPo),e(ft,yhe),e(yhe,cPo),e(ft,fPo),e(ft,Zi),e(Zi,mPo),e(Zi,xhe),e(xhe,gPo),e(Zi,hPo),e(Zi,WO),e(WO,pPo),e(Zi,_Po),e(ft,uPo),M(B2,ft,null),e(Ro,bPo),e(Ro,eo),M(ZL,eo,null),e(eo,vPo),e(eo,$he),e($he,FPo),e(eo,TPo),e(eo,ja),e(ja,MPo),e(ja,khe),e(khe,EPo),e(ja,CPo),e(ja,She),e(She,wPo),e(ja,APo),e(ja,Rhe),e(Rhe,LPo),e(ja,yPo),e(eo,xPo),e(eo,W),e(W,N2),e(N2,Phe),e(Phe,$Po),e(N2,kPo),e(N2,HO),e(HO,SPo),e(N2,RPo),e(W,PPo),e(W,I2),e(I2,Bhe),e(Bhe,BPo),e(I2,NPo),e(I2,UO),e(UO,IPo),e(I2,qPo),e(W,jPo),e(W,q2),e(q2,Nhe),e(Nhe,DPo),e(q2,GPo),e(q2,JO),e(JO,OPo),e(q2,VPo),e(W,XPo),e(W,j2),e(j2,Ihe),e(Ihe,zPo),e(j2,QPo),e(j2,YO),e(YO,WPo),e(j2,HPo),e(W,UPo),e(W,D2),e(D2,qhe),e(qhe,JPo),e(D2,YPo),e(D2,KO),e(KO,KPo),e(D2,ZPo),e(W,eBo),e(W,G2),e(G2,jhe),e(jhe,oBo),e(G2,rBo),e(G2,ZO),e(ZO,tBo),e(G2,aBo),e(W,nBo),e(W,O2),e(O2,Dhe),e(Dhe,sBo),e(O2,lBo),e(O2,eV),e(eV,iBo),e(O2,dBo),e(W,cBo),e(W,V2),e(V2,Ghe),e(Ghe,fBo),e(V2,mBo),e(V2,oV),e(oV,gBo),e(V2,hBo),e(W,pBo),e(W,X2),e(X2,Ohe),e(Ohe,_Bo),e(X2,uBo),e(X2,rV),e(rV,bBo),e(X2,vBo),e(W,FBo),e(W,z2),e(z2,Vhe),e(Vhe,TBo),e(z2,MBo),e(z2,tV),e(tV,EBo),e(z2,CBo),e(W,wBo),e(W,Q2),e(Q2,Xhe),e(Xhe,ABo),e(Q2,LBo),e(Q2,aV),e(aV,yBo),e(Q2,xBo),e(W,$Bo),e(W,W2),e(W2,zhe),e(zhe,kBo),e(W2,SBo),e(W2,nV),e(nV,RBo),e(W2,PBo),e(W,BBo),e(W,H2),e(H2,Qhe),e(Qhe,NBo),e(H2,IBo),e(H2,sV),e(sV,qBo),e(H2,jBo),e(W,DBo),e(W,U2),e(U2,Whe),e(Whe,GBo),e(U2,OBo),e(U2,lV),e(lV,VBo),e(U2,XBo),e(W,zBo),e(W,J2),e(J2,Hhe),e(Hhe,QBo),e(J2,WBo),e(J2,iV),e(iV,HBo),e(J2,UBo),e(W,JBo),e(W,Y2),e(Y2,Uhe),e(Uhe,YBo),e(Y2,KBo),e(Y2,dV),e(dV,ZBo),e(Y2,eNo),e(W,oNo),e(W,K2),e(K2,Jhe),e(Jhe,rNo),e(K2,tNo),e(K2,cV),e(cV,aNo),e(K2,nNo),e(W,sNo),e(W,Z2),e(Z2,Yhe),e(Yhe,lNo),e(Z2,iNo),e(Z2,fV),e(fV,dNo),e(Z2,cNo),e(W,fNo),e(W,eb),e(eb,Khe),e(Khe,mNo),e(eb,gNo),e(eb,mV),e(mV,hNo),e(eb,pNo),e(W,_No),e(W,ob),e(ob,Zhe),e(Zhe,uNo),e(ob,bNo),e(ob,gV),e(gV,vNo),e(ob,FNo),e(W,TNo),e(W,rb),e(rb,epe),e(epe,MNo),e(rb,ENo),e(rb,hV),e(hV,CNo),e(rb,wNo),e(W,ANo),e(W,tb),e(tb,ope),e(ope,LNo),e(tb,yNo),e(tb,pV),e(pV,xNo),e(tb,$No),e(W,kNo),e(W,ab),e(ab,rpe),e(rpe,SNo),e(ab,RNo),e(ab,_V),e(_V,PNo),e(ab,BNo),e(W,NNo),e(W,nb),e(nb,tpe),e(tpe,INo),e(nb,qNo),e(nb,uV),e(uV,jNo),e(nb,DNo),e(W,GNo),e(W,sb),e(sb,ape),e(ape,ONo),e(sb,VNo),e(sb,bV),e(bV,XNo),e(sb,zNo),e(W,QNo),e(W,lb),e(lb,npe),e(npe,WNo),e(lb,HNo),e(lb,vV),e(vV,UNo),e(lb,JNo),e(W,YNo),e(W,ib),e(ib,spe),e(spe,KNo),e(ib,ZNo),e(ib,FV),e(FV,eIo),e(ib,oIo),e(W,rIo),e(W,db),e(db,lpe),e(lpe,tIo),e(db,aIo),e(db,TV),e(TV,nIo),e(db,sIo),e(W,lIo),e(W,cb),e(cb,ipe),e(ipe,iIo),e(cb,dIo),e(cb,MV),e(MV,cIo),e(cb,fIo),e(W,mIo),e(W,fb),e(fb,dpe),e(dpe,gIo),e(fb,hIo),e(fb,EV),e(EV,pIo),e(fb,_Io),e(W,uIo),e(W,mb),e(mb,cpe),e(cpe,bIo),e(mb,vIo),e(mb,CV),e(CV,FIo),e(mb,TIo),e(W,MIo),e(W,gb),e(gb,fpe),e(fpe,EIo),e(gb,CIo),e(gb,wV),e(wV,wIo),e(gb,AIo),e(W,LIo),e(W,hb),e(hb,mpe),e(mpe,yIo),e(hb,xIo),e(hb,AV),e(AV,$Io),e(hb,kIo),e(W,SIo),e(W,pb),e(pb,gpe),e(gpe,RIo),e(pb,PIo),e(pb,hpe),e(hpe,BIo),e(pb,NIo),e(W,IIo),e(W,_b),e(_b,ppe),e(ppe,qIo),e(_b,jIo),e(_b,LV),e(LV,DIo),e(_b,GIo),e(W,OIo),e(W,ub),e(ub,_pe),e(_pe,VIo),e(ub,XIo),e(ub,yV),e(yV,zIo),e(ub,QIo),e(W,WIo),e(W,bb),e(bb,upe),e(upe,HIo),e(bb,UIo),e(bb,xV),e(xV,JIo),e(bb,YIo),e(W,KIo),e(W,vb),e(vb,bpe),e(bpe,ZIo),e(vb,eqo),e(vb,$V),e($V,oqo),e(vb,rqo),e(eo,tqo),e(eo,Fb),e(Fb,aqo),e(Fb,vpe),e(vpe,nqo),e(Fb,sqo),e(Fb,Fpe),e(Fpe,lqo),e(eo,iqo),M(Tb,eo,null),b(f,BXe,u),b(f,ed,u),e(ed,Mb),e(Mb,Tpe),M(ey,Tpe,null),e(ed,dqo),e(ed,Mpe),e(Mpe,cqo),b(f,NXe,u),b(f,Po,u),M(oy,Po,null),e(Po,fqo),e(Po,od),e(od,mqo),e(od,kV),e(kV,gqo),e(od,hqo),e(od,SV),e(SV,pqo),e(od,_qo),e(Po,uqo),e(Po,ry),e(ry,bqo),e(ry,Epe),e(Epe,vqo),e(ry,Fqo),e(Po,Tqo),e(Po,mt),M(ty,mt,null),e(mt,Mqo),e(mt,Cpe),e(Cpe,Eqo),e(mt,Cqo),e(mt,rd),e(rd,wqo),e(rd,wpe),e(wpe,Aqo),e(rd,Lqo),e(rd,RV),e(RV,yqo),e(rd,xqo),e(mt,$qo),M(Eb,mt,null),e(Po,kqo),e(Po,oo),M(ay,oo,null),e(oo,Sqo),e(oo,Ape),e(Ape,Rqo),e(oo,Pqo),e(oo,Da),e(Da,Bqo),e(Da,Lpe),e(Lpe,Nqo),e(Da,Iqo),e(Da,ype),e(ype,qqo),e(Da,jqo),e(Da,xpe),e(xpe,Dqo),e(Da,Gqo),e(oo,Oqo),e(oo,fe),e(fe,Cb),e(Cb,$pe),e($pe,Vqo),e(Cb,Xqo),e(Cb,PV),e(PV,zqo),e(Cb,Qqo),e(fe,Wqo),e(fe,wb),e(wb,kpe),e(kpe,Hqo),e(wb,Uqo),e(wb,BV),e(BV,Jqo),e(wb,Yqo),e(fe,Kqo),e(fe,Ab),e(Ab,Spe),e(Spe,Zqo),e(Ab,ejo),e(Ab,NV),e(NV,ojo),e(Ab,rjo),e(fe,tjo),e(fe,Lb),e(Lb,Rpe),e(Rpe,ajo),e(Lb,njo),e(Lb,IV),e(IV,sjo),e(Lb,ljo),e(fe,ijo),e(fe,yb),e(yb,Ppe),e(Ppe,djo),e(yb,cjo),e(yb,qV),e(qV,fjo),e(yb,mjo),e(fe,gjo),e(fe,xb),e(xb,Bpe),e(Bpe,hjo),e(xb,pjo),e(xb,jV),e(jV,_jo),e(xb,ujo),e(fe,bjo),e(fe,$b),e($b,Npe),e(Npe,vjo),e($b,Fjo),e($b,DV),e(DV,Tjo),e($b,Mjo),e(fe,Ejo),e(fe,kb),e(kb,Ipe),e(Ipe,Cjo),e(kb,wjo),e(kb,GV),e(GV,Ajo),e(kb,Ljo),e(fe,yjo),e(fe,Sb),e(Sb,qpe),e(qpe,xjo),e(Sb,$jo),e(Sb,OV),e(OV,kjo),e(Sb,Sjo),e(fe,Rjo),e(fe,Rb),e(Rb,jpe),e(jpe,Pjo),e(Rb,Bjo),e(Rb,VV),e(VV,Njo),e(Rb,Ijo),e(fe,qjo),e(fe,Pb),e(Pb,Dpe),e(Dpe,jjo),e(Pb,Djo),e(Pb,XV),e(XV,Gjo),e(Pb,Ojo),e(fe,Vjo),e(fe,Bb),e(Bb,Gpe),e(Gpe,Xjo),e(Bb,zjo),e(Bb,zV),e(zV,Qjo),e(Bb,Wjo),e(fe,Hjo),e(fe,Nb),e(Nb,Ope),e(Ope,Ujo),e(Nb,Jjo),e(Nb,QV),e(QV,Yjo),e(Nb,Kjo),e(fe,Zjo),e(fe,Ib),e(Ib,Vpe),e(Vpe,eDo),e(Ib,oDo),e(Ib,WV),e(WV,rDo),e(Ib,tDo),e(fe,aDo),e(fe,qb),e(qb,Xpe),e(Xpe,nDo),e(qb,sDo),e(qb,HV),e(HV,lDo),e(qb,iDo),e(fe,dDo),e(fe,jb),e(jb,zpe),e(zpe,cDo),e(jb,fDo),e(jb,UV),e(UV,mDo),e(jb,gDo),e(fe,hDo),e(fe,Db),e(Db,Qpe),e(Qpe,pDo),e(Db,_Do),e(Db,JV),e(JV,uDo),e(Db,bDo),e(fe,vDo),e(fe,Gb),e(Gb,Wpe),e(Wpe,FDo),e(Gb,TDo),e(Gb,YV),e(YV,MDo),e(Gb,EDo),e(fe,CDo),e(fe,Ob),e(Ob,Hpe),e(Hpe,wDo),e(Ob,ADo),e(Ob,KV),e(KV,LDo),e(Ob,yDo),e(oo,xDo),e(oo,Vb),e(Vb,$Do),e(Vb,Upe),e(Upe,kDo),e(Vb,SDo),e(Vb,Jpe),e(Jpe,RDo),e(oo,PDo),M(Xb,oo,null),b(f,IXe,u),b(f,td,u),e(td,zb),e(zb,Ype),M(ny,Ype,null),e(td,BDo),e(td,Kpe),e(Kpe,NDo),b(f,qXe,u),b(f,Bo,u),M(sy,Bo,null),e(Bo,IDo),e(Bo,ad),e(ad,qDo),e(ad,ZV),e(ZV,jDo),e(ad,DDo),e(ad,eX),e(eX,GDo),e(ad,ODo),e(Bo,VDo),e(Bo,ly),e(ly,XDo),e(ly,Zpe),e(Zpe,zDo),e(ly,QDo),e(Bo,WDo),e(Bo,gt),M(iy,gt,null),e(gt,HDo),e(gt,e_e),e(e_e,UDo),e(gt,JDo),e(gt,nd),e(nd,YDo),e(nd,o_e),e(o_e,KDo),e(nd,ZDo),e(nd,oX),e(oX,eGo),e(nd,oGo),e(gt,rGo),M(Qb,gt,null),e(Bo,tGo),e(Bo,ro),M(dy,ro,null),e(ro,aGo),e(ro,r_e),e(r_e,nGo),e(ro,sGo),e(ro,Ga),e(Ga,lGo),e(Ga,t_e),e(t_e,iGo),e(Ga,dGo),e(Ga,a_e),e(a_e,cGo),e(Ga,fGo),e(Ga,n_e),e(n_e,mGo),e(Ga,gGo),e(ro,hGo),e(ro,B),e(B,Wb),e(Wb,s_e),e(s_e,pGo),e(Wb,_Go),e(Wb,rX),e(rX,uGo),e(Wb,bGo),e(B,vGo),e(B,Hb),e(Hb,l_e),e(l_e,FGo),e(Hb,TGo),e(Hb,tX),e(tX,MGo),e(Hb,EGo),e(B,CGo),e(B,Ub),e(Ub,i_e),e(i_e,wGo),e(Ub,AGo),e(Ub,aX),e(aX,LGo),e(Ub,yGo),e(B,xGo),e(B,Jb),e(Jb,d_e),e(d_e,$Go),e(Jb,kGo),e(Jb,nX),e(nX,SGo),e(Jb,RGo),e(B,PGo),e(B,Yb),e(Yb,c_e),e(c_e,BGo),e(Yb,NGo),e(Yb,sX),e(sX,IGo),e(Yb,qGo),e(B,jGo),e(B,Kb),e(Kb,f_e),e(f_e,DGo),e(Kb,GGo),e(Kb,lX),e(lX,OGo),e(Kb,VGo),e(B,XGo),e(B,Zb),e(Zb,m_e),e(m_e,zGo),e(Zb,QGo),e(Zb,iX),e(iX,WGo),e(Zb,HGo),e(B,UGo),e(B,e3),e(e3,g_e),e(g_e,JGo),e(e3,YGo),e(e3,dX),e(dX,KGo),e(e3,ZGo),e(B,eOo),e(B,o3),e(o3,h_e),e(h_e,oOo),e(o3,rOo),e(o3,cX),e(cX,tOo),e(o3,aOo),e(B,nOo),e(B,r3),e(r3,p_e),e(p_e,sOo),e(r3,lOo),e(r3,fX),e(fX,iOo),e(r3,dOo),e(B,cOo),e(B,t3),e(t3,__e),e(__e,fOo),e(t3,mOo),e(t3,mX),e(mX,gOo),e(t3,hOo),e(B,pOo),e(B,a3),e(a3,u_e),e(u_e,_Oo),e(a3,uOo),e(a3,gX),e(gX,bOo),e(a3,vOo),e(B,FOo),e(B,n3),e(n3,b_e),e(b_e,TOo),e(n3,MOo),e(n3,hX),e(hX,EOo),e(n3,COo),e(B,wOo),e(B,s3),e(s3,v_e),e(v_e,AOo),e(s3,LOo),e(s3,pX),e(pX,yOo),e(s3,xOo),e(B,$Oo),e(B,l3),e(l3,F_e),e(F_e,kOo),e(l3,SOo),e(l3,_X),e(_X,ROo),e(l3,POo),e(B,BOo),e(B,i3),e(i3,T_e),e(T_e,NOo),e(i3,IOo),e(i3,uX),e(uX,qOo),e(i3,jOo),e(B,DOo),e(B,d3),e(d3,M_e),e(M_e,GOo),e(d3,OOo),e(d3,bX),e(bX,VOo),e(d3,XOo),e(B,zOo),e(B,c3),e(c3,E_e),e(E_e,QOo),e(c3,WOo),e(c3,vX),e(vX,HOo),e(c3,UOo),e(B,JOo),e(B,f3),e(f3,C_e),e(C_e,YOo),e(f3,KOo),e(f3,FX),e(FX,ZOo),e(f3,eVo),e(B,oVo),e(B,m3),e(m3,w_e),e(w_e,rVo),e(m3,tVo),e(m3,TX),e(TX,aVo),e(m3,nVo),e(B,sVo),e(B,g3),e(g3,A_e),e(A_e,lVo),e(g3,iVo),e(g3,MX),e(MX,dVo),e(g3,cVo),e(B,fVo),e(B,h3),e(h3,L_e),e(L_e,mVo),e(h3,gVo),e(h3,EX),e(EX,hVo),e(h3,pVo),e(B,_Vo),e(B,p3),e(p3,y_e),e(y_e,uVo),e(p3,bVo),e(p3,CX),e(CX,vVo),e(p3,FVo),e(B,TVo),e(B,_3),e(_3,x_e),e(x_e,MVo),e(_3,EVo),e(_3,wX),e(wX,CVo),e(_3,wVo),e(B,AVo),e(B,u3),e(u3,$_e),e($_e,LVo),e(u3,yVo),e(u3,AX),e(AX,xVo),e(u3,$Vo),e(B,kVo),e(B,b3),e(b3,k_e),e(k_e,SVo),e(b3,RVo),e(b3,LX),e(LX,PVo),e(b3,BVo),e(B,NVo),e(B,v3),e(v3,S_e),e(S_e,IVo),e(v3,qVo),e(v3,yX),e(yX,jVo),e(v3,DVo),e(B,GVo),e(B,F3),e(F3,R_e),e(R_e,OVo),e(F3,VVo),e(F3,xX),e(xX,XVo),e(F3,zVo),e(B,QVo),e(B,T3),e(T3,P_e),e(P_e,WVo),e(T3,HVo),e(T3,$X),e($X,UVo),e(T3,JVo),e(B,YVo),e(B,M3),e(M3,B_e),e(B_e,KVo),e(M3,ZVo),e(M3,kX),e(kX,eXo),e(M3,oXo),e(B,rXo),e(B,E3),e(E3,N_e),e(N_e,tXo),e(E3,aXo),e(E3,SX),e(SX,nXo),e(E3,sXo),e(B,lXo),e(B,C3),e(C3,I_e),e(I_e,iXo),e(C3,dXo),e(C3,RX),e(RX,cXo),e(C3,fXo),e(B,mXo),e(B,w3),e(w3,q_e),e(q_e,gXo),e(w3,hXo),e(w3,PX),e(PX,pXo),e(w3,_Xo),e(B,uXo),e(B,A3),e(A3,j_e),e(j_e,bXo),e(A3,vXo),e(A3,BX),e(BX,FXo),e(A3,TXo),e(B,MXo),e(B,L3),e(L3,D_e),e(D_e,EXo),e(L3,CXo),e(L3,NX),e(NX,wXo),e(L3,AXo),e(B,LXo),e(B,y3),e(y3,G_e),e(G_e,yXo),e(y3,xXo),e(y3,IX),e(IX,$Xo),e(y3,kXo),e(B,SXo),e(B,x3),e(x3,O_e),e(O_e,RXo),e(x3,PXo),e(x3,qX),e(qX,BXo),e(x3,NXo),e(B,IXo),e(B,$3),e($3,V_e),e(V_e,qXo),e($3,jXo),e($3,jX),e(jX,DXo),e($3,GXo),e(B,OXo),e(B,k3),e(k3,X_e),e(X_e,VXo),e(k3,XXo),e(k3,DX),e(DX,zXo),e(k3,QXo),e(B,WXo),e(B,S3),e(S3,z_e),e(z_e,HXo),e(S3,UXo),e(S3,GX),e(GX,JXo),e(S3,YXo),e(B,KXo),e(B,R3),e(R3,Q_e),e(Q_e,ZXo),e(R3,ezo),e(R3,OX),e(OX,ozo),e(R3,rzo),e(B,tzo),e(B,P3),e(P3,W_e),e(W_e,azo),e(P3,nzo),e(P3,VX),e(VX,szo),e(P3,lzo),e(B,izo),e(B,B3),e(B3,H_e),e(H_e,dzo),e(B3,czo),e(B3,XX),e(XX,fzo),e(B3,mzo),e(B,gzo),e(B,N3),e(N3,U_e),e(U_e,hzo),e(N3,pzo),e(N3,zX),e(zX,_zo),e(N3,uzo),e(B,bzo),e(B,I3),e(I3,J_e),e(J_e,vzo),e(I3,Fzo),e(I3,QX),e(QX,Tzo),e(I3,Mzo),e(B,Ezo),e(B,q3),e(q3,Y_e),e(Y_e,Czo),e(q3,wzo),e(q3,WX),e(WX,Azo),e(q3,Lzo),e(B,yzo),e(B,j3),e(j3,K_e),e(K_e,xzo),e(j3,$zo),e(j3,HX),e(HX,kzo),e(j3,Szo),e(B,Rzo),e(B,D3),e(D3,Z_e),e(Z_e,Pzo),e(D3,Bzo),e(D3,UX),e(UX,Nzo),e(D3,Izo),e(B,qzo),e(B,G3),e(G3,eue),e(eue,jzo),e(G3,Dzo),e(G3,JX),e(JX,Gzo),e(G3,Ozo),e(B,Vzo),e(B,O3),e(O3,oue),e(oue,Xzo),e(O3,zzo),e(O3,YX),e(YX,Qzo),e(O3,Wzo),e(B,Hzo),e(B,V3),e(V3,rue),e(rue,Uzo),e(V3,Jzo),e(V3,KX),e(KX,Yzo),e(V3,Kzo),e(ro,Zzo),e(ro,X3),e(X3,eQo),e(X3,tue),e(tue,oQo),e(X3,rQo),e(X3,aue),e(aue,tQo),e(ro,aQo),M(z3,ro,null),b(f,jXe,u),b(f,sd,u),e(sd,Q3),e(Q3,nue),M(cy,nue,null),e(sd,nQo),e(sd,sue),e(sue,sQo),b(f,DXe,u),b(f,No,u),M(fy,No,null),e(No,lQo),e(No,ld),e(ld,iQo),e(ld,ZX),e(ZX,dQo),e(ld,cQo),e(ld,ez),e(ez,fQo),e(ld,mQo),e(No,gQo),e(No,my),e(my,hQo),e(my,lue),e(lue,pQo),e(my,_Qo),e(No,uQo),e(No,ht),M(gy,ht,null),e(ht,bQo),e(ht,iue),e(iue,vQo),e(ht,FQo),e(ht,id),e(id,TQo),e(id,due),e(due,MQo),e(id,EQo),e(id,oz),e(oz,CQo),e(id,wQo),e(ht,AQo),M(W3,ht,null),e(No,LQo),e(No,to),M(hy,to,null),e(to,yQo),e(to,cue),e(cue,xQo),e(to,$Qo),e(to,Oa),e(Oa,kQo),e(Oa,fue),e(fue,SQo),e(Oa,RQo),e(Oa,mue),e(mue,PQo),e(Oa,BQo),e(Oa,gue),e(gue,NQo),e(Oa,IQo),e(to,qQo),e(to,Z),e(Z,H3),e(H3,hue),e(hue,jQo),e(H3,DQo),e(H3,rz),e(rz,GQo),e(H3,OQo),e(Z,VQo),e(Z,U3),e(U3,pue),e(pue,XQo),e(U3,zQo),e(U3,tz),e(tz,QQo),e(U3,WQo),e(Z,HQo),e(Z,J3),e(J3,_ue),e(_ue,UQo),e(J3,JQo),e(J3,az),e(az,YQo),e(J3,KQo),e(Z,ZQo),e(Z,Y3),e(Y3,uue),e(uue,eWo),e(Y3,oWo),e(Y3,nz),e(nz,rWo),e(Y3,tWo),e(Z,aWo),e(Z,K3),e(K3,bue),e(bue,nWo),e(K3,sWo),e(K3,sz),e(sz,lWo),e(K3,iWo),e(Z,dWo),e(Z,Z3),e(Z3,vue),e(vue,cWo),e(Z3,fWo),e(Z3,lz),e(lz,mWo),e(Z3,gWo),e(Z,hWo),e(Z,ev),e(ev,Fue),e(Fue,pWo),e(ev,_Wo),e(ev,iz),e(iz,uWo),e(ev,bWo),e(Z,vWo),e(Z,ov),e(ov,Tue),e(Tue,FWo),e(ov,TWo),e(ov,dz),e(dz,MWo),e(ov,EWo),e(Z,CWo),e(Z,rv),e(rv,Mue),e(Mue,wWo),e(rv,AWo),e(rv,cz),e(cz,LWo),e(rv,yWo),e(Z,xWo),e(Z,tv),e(tv,Eue),e(Eue,$Wo),e(tv,kWo),e(tv,fz),e(fz,SWo),e(tv,RWo),e(Z,PWo),e(Z,av),e(av,Cue),e(Cue,BWo),e(av,NWo),e(av,mz),e(mz,IWo),e(av,qWo),e(Z,jWo),e(Z,nv),e(nv,wue),e(wue,DWo),e(nv,GWo),e(nv,gz),e(gz,OWo),e(nv,VWo),e(Z,XWo),e(Z,sv),e(sv,Aue),e(Aue,zWo),e(sv,QWo),e(sv,hz),e(hz,WWo),e(sv,HWo),e(Z,UWo),e(Z,lv),e(lv,Lue),e(Lue,JWo),e(lv,YWo),e(lv,pz),e(pz,KWo),e(lv,ZWo),e(Z,eHo),e(Z,iv),e(iv,yue),e(yue,oHo),e(iv,rHo),e(iv,_z),e(_z,tHo),e(iv,aHo),e(Z,nHo),e(Z,dv),e(dv,xue),e(xue,sHo),e(dv,lHo),e(dv,uz),e(uz,iHo),e(dv,dHo),e(Z,cHo),e(Z,cv),e(cv,$ue),e($ue,fHo),e(cv,mHo),e(cv,bz),e(bz,gHo),e(cv,hHo),e(Z,pHo),e(Z,fv),e(fv,kue),e(kue,_Ho),e(fv,uHo),e(fv,vz),e(vz,bHo),e(fv,vHo),e(Z,FHo),e(Z,mv),e(mv,Sue),e(Sue,THo),e(mv,MHo),e(mv,Fz),e(Fz,EHo),e(mv,CHo),e(Z,wHo),e(Z,gv),e(gv,Rue),e(Rue,AHo),e(gv,LHo),e(gv,Tz),e(Tz,yHo),e(gv,xHo),e(Z,$Ho),e(Z,hv),e(hv,Pue),e(Pue,kHo),e(hv,SHo),e(hv,Mz),e(Mz,RHo),e(hv,PHo),e(Z,BHo),e(Z,pv),e(pv,Bue),e(Bue,NHo),e(pv,IHo),e(pv,Ez),e(Ez,qHo),e(pv,jHo),e(Z,DHo),e(Z,_v),e(_v,Nue),e(Nue,GHo),e(_v,OHo),e(_v,Cz),e(Cz,VHo),e(_v,XHo),e(Z,zHo),e(Z,uv),e(uv,Iue),e(Iue,QHo),e(uv,WHo),e(uv,wz),e(wz,HHo),e(uv,UHo),e(Z,JHo),e(Z,bv),e(bv,que),e(que,YHo),e(bv,KHo),e(bv,Az),e(Az,ZHo),e(bv,eUo),e(Z,oUo),e(Z,vv),e(vv,jue),e(jue,rUo),e(vv,tUo),e(vv,Lz),e(Lz,aUo),e(vv,nUo),e(Z,sUo),e(Z,Fv),e(Fv,Due),e(Due,lUo),e(Fv,iUo),e(Fv,yz),e(yz,dUo),e(Fv,cUo),e(Z,fUo),e(Z,Tv),e(Tv,Gue),e(Gue,mUo),e(Tv,gUo),e(Tv,xz),e(xz,hUo),e(Tv,pUo),e(Z,_Uo),e(Z,Mv),e(Mv,Oue),e(Oue,uUo),e(Mv,bUo),e(Mv,$z),e($z,vUo),e(Mv,FUo),e(Z,TUo),e(Z,Ev),e(Ev,Vue),e(Vue,MUo),e(Ev,EUo),e(Ev,kz),e(kz,CUo),e(Ev,wUo),e(to,AUo),e(to,Cv),e(Cv,LUo),e(Cv,Xue),e(Xue,yUo),e(Cv,xUo),e(Cv,zue),e(zue,$Uo),e(to,kUo),M(wv,to,null),b(f,GXe,u),b(f,dd,u),e(dd,Av),e(Av,Que),M(py,Que,null),e(dd,SUo),e(dd,Wue),e(Wue,RUo),b(f,OXe,u),b(f,Io,u),M(_y,Io,null),e(Io,PUo),e(Io,cd),e(cd,BUo),e(cd,Sz),e(Sz,NUo),e(cd,IUo),e(cd,Rz),e(Rz,qUo),e(cd,jUo),e(Io,DUo),e(Io,uy),e(uy,GUo),e(uy,Hue),e(Hue,OUo),e(uy,VUo),e(Io,XUo),e(Io,pt),M(by,pt,null),e(pt,zUo),e(pt,Uue),e(Uue,QUo),e(pt,WUo),e(pt,fd),e(fd,HUo),e(fd,Jue),e(Jue,UUo),e(fd,JUo),e(fd,Pz),e(Pz,YUo),e(fd,KUo),e(pt,ZUo),M(Lv,pt,null),e(Io,eJo),e(Io,ao),M(vy,ao,null),e(ao,oJo),e(ao,Yue),e(Yue,rJo),e(ao,tJo),e(ao,Va),e(Va,aJo),e(Va,Kue),e(Kue,nJo),e(Va,sJo),e(Va,Zue),e(Zue,lJo),e(Va,iJo),e(Va,e1e),e(e1e,dJo),e(Va,cJo),e(ao,fJo),e(ao,qo),e(qo,yv),e(yv,o1e),e(o1e,mJo),e(yv,gJo),e(yv,Bz),e(Bz,hJo),e(yv,pJo),e(qo,_Jo),e(qo,xv),e(xv,r1e),e(r1e,uJo),e(xv,bJo),e(xv,Nz),e(Nz,vJo),e(xv,FJo),e(qo,TJo),e(qo,$v),e($v,t1e),e(t1e,MJo),e($v,EJo),e($v,Iz),e(Iz,CJo),e($v,wJo),e(qo,AJo),e(qo,kv),e(kv,a1e),e(a1e,LJo),e(kv,yJo),e(kv,qz),e(qz,xJo),e(kv,$Jo),e(qo,kJo),e(qo,Sv),e(Sv,n1e),e(n1e,SJo),e(Sv,RJo),e(Sv,jz),e(jz,PJo),e(Sv,BJo),e(qo,NJo),e(qo,Rv),e(Rv,s1e),e(s1e,IJo),e(Rv,qJo),e(Rv,Dz),e(Dz,jJo),e(Rv,DJo),e(ao,GJo),e(ao,Pv),e(Pv,OJo),e(Pv,l1e),e(l1e,VJo),e(Pv,XJo),e(Pv,i1e),e(i1e,zJo),e(ao,QJo),M(Bv,ao,null),b(f,VXe,u),b(f,md,u),e(md,Nv),e(Nv,d1e),M(Fy,d1e,null),e(md,WJo),e(md,c1e),e(c1e,HJo),b(f,XXe,u),b(f,jo,u),M(Ty,jo,null),e(jo,UJo),e(jo,gd),e(gd,JJo),e(gd,Gz),e(Gz,YJo),e(gd,KJo),e(gd,Oz),e(Oz,ZJo),e(gd,eYo),e(jo,oYo),e(jo,My),e(My,rYo),e(My,f1e),e(f1e,tYo),e(My,aYo),e(jo,nYo),e(jo,_t),M(Ey,_t,null),e(_t,sYo),e(_t,m1e),e(m1e,lYo),e(_t,iYo),e(_t,hd),e(hd,dYo),e(hd,g1e),e(g1e,cYo),e(hd,fYo),e(hd,Vz),e(Vz,mYo),e(hd,gYo),e(_t,hYo),M(Iv,_t,null),e(jo,pYo),e(jo,no),M(Cy,no,null),e(no,_Yo),e(no,h1e),e(h1e,uYo),e(no,bYo),e(no,Xa),e(Xa,vYo),e(Xa,p1e),e(p1e,FYo),e(Xa,TYo),e(Xa,_1e),e(_1e,MYo),e(Xa,EYo),e(Xa,u1e),e(u1e,CYo),e(Xa,wYo),e(no,AYo),e(no,U),e(U,qv),e(qv,b1e),e(b1e,LYo),e(qv,yYo),e(qv,Xz),e(Xz,xYo),e(qv,$Yo),e(U,kYo),e(U,jv),e(jv,v1e),e(v1e,SYo),e(jv,RYo),e(jv,zz),e(zz,PYo),e(jv,BYo),e(U,NYo),e(U,Dv),e(Dv,F1e),e(F1e,IYo),e(Dv,qYo),e(Dv,Qz),e(Qz,jYo),e(Dv,DYo),e(U,GYo),e(U,Gv),e(Gv,T1e),e(T1e,OYo),e(Gv,VYo),e(Gv,Wz),e(Wz,XYo),e(Gv,zYo),e(U,QYo),e(U,Ov),e(Ov,M1e),e(M1e,WYo),e(Ov,HYo),e(Ov,Hz),e(Hz,UYo),e(Ov,JYo),e(U,YYo),e(U,Vv),e(Vv,E1e),e(E1e,KYo),e(Vv,ZYo),e(Vv,Uz),e(Uz,eKo),e(Vv,oKo),e(U,rKo),e(U,Xv),e(Xv,C1e),e(C1e,tKo),e(Xv,aKo),e(Xv,Jz),e(Jz,nKo),e(Xv,sKo),e(U,lKo),e(U,zv),e(zv,w1e),e(w1e,iKo),e(zv,dKo),e(zv,Yz),e(Yz,cKo),e(zv,fKo),e(U,mKo),e(U,Qv),e(Qv,A1e),e(A1e,gKo),e(Qv,hKo),e(Qv,Kz),e(Kz,pKo),e(Qv,_Ko),e(U,uKo),e(U,Wv),e(Wv,L1e),e(L1e,bKo),e(Wv,vKo),e(Wv,Zz),e(Zz,FKo),e(Wv,TKo),e(U,MKo),e(U,Hv),e(Hv,y1e),e(y1e,EKo),e(Hv,CKo),e(Hv,eQ),e(eQ,wKo),e(Hv,AKo),e(U,LKo),e(U,Uv),e(Uv,x1e),e(x1e,yKo),e(Uv,xKo),e(Uv,oQ),e(oQ,$Ko),e(Uv,kKo),e(U,SKo),e(U,Jv),e(Jv,$1e),e($1e,RKo),e(Jv,PKo),e(Jv,rQ),e(rQ,BKo),e(Jv,NKo),e(U,IKo),e(U,Yv),e(Yv,k1e),e(k1e,qKo),e(Yv,jKo),e(Yv,tQ),e(tQ,DKo),e(Yv,GKo),e(U,OKo),e(U,Kv),e(Kv,S1e),e(S1e,VKo),e(Kv,XKo),e(Kv,aQ),e(aQ,zKo),e(Kv,QKo),e(U,WKo),e(U,Zv),e(Zv,R1e),e(R1e,HKo),e(Zv,UKo),e(Zv,nQ),e(nQ,JKo),e(Zv,YKo),e(U,KKo),e(U,eF),e(eF,P1e),e(P1e,ZKo),e(eF,eZo),e(eF,sQ),e(sQ,oZo),e(eF,rZo),e(U,tZo),e(U,oF),e(oF,B1e),e(B1e,aZo),e(oF,nZo),e(oF,lQ),e(lQ,sZo),e(oF,lZo),e(U,iZo),e(U,rF),e(rF,N1e),e(N1e,dZo),e(rF,cZo),e(rF,iQ),e(iQ,fZo),e(rF,mZo),e(U,gZo),e(U,tF),e(tF,I1e),e(I1e,hZo),e(tF,pZo),e(tF,dQ),e(dQ,_Zo),e(tF,uZo),e(U,bZo),e(U,aF),e(aF,q1e),e(q1e,vZo),e(aF,FZo),e(aF,cQ),e(cQ,TZo),e(aF,MZo),e(U,EZo),e(U,nF),e(nF,j1e),e(j1e,CZo),e(nF,wZo),e(nF,fQ),e(fQ,AZo),e(nF,LZo),e(U,yZo),e(U,sF),e(sF,D1e),e(D1e,xZo),e(sF,$Zo),e(sF,mQ),e(mQ,kZo),e(sF,SZo),e(U,RZo),e(U,lF),e(lF,G1e),e(G1e,PZo),e(lF,BZo),e(lF,gQ),e(gQ,NZo),e(lF,IZo),e(U,qZo),e(U,iF),e(iF,O1e),e(O1e,jZo),e(iF,DZo),e(iF,hQ),e(hQ,GZo),e(iF,OZo),e(U,VZo),e(U,dF),e(dF,V1e),e(V1e,XZo),e(dF,zZo),e(dF,pQ),e(pQ,QZo),e(dF,WZo),e(U,HZo),e(U,cF),e(cF,X1e),e(X1e,UZo),e(cF,JZo),e(cF,_Q),e(_Q,YZo),e(cF,KZo),e(U,ZZo),e(U,fF),e(fF,z1e),e(z1e,eer),e(fF,oer),e(fF,uQ),e(uQ,rer),e(fF,ter),e(U,aer),e(U,mF),e(mF,Q1e),e(Q1e,ner),e(mF,ser),e(mF,bQ),e(bQ,ler),e(mF,ier),e(U,der),e(U,gF),e(gF,W1e),e(W1e,cer),e(gF,fer),e(gF,vQ),e(vQ,mer),e(gF,ger),e(U,her),e(U,hF),e(hF,H1e),e(H1e,per),e(hF,_er),e(hF,FQ),e(FQ,uer),e(hF,ber),e(U,ver),e(U,pF),e(pF,U1e),e(U1e,Fer),e(pF,Ter),e(pF,TQ),e(TQ,Mer),e(pF,Eer),e(U,Cer),e(U,_F),e(_F,J1e),e(J1e,wer),e(_F,Aer),e(_F,MQ),e(MQ,Ler),e(_F,yer),e(U,xer),e(U,uF),e(uF,Y1e),e(Y1e,$er),e(uF,ker),e(uF,EQ),e(EQ,Ser),e(uF,Rer),e(U,Per),e(U,bF),e(bF,K1e),e(K1e,Ber),e(bF,Ner),e(bF,CQ),e(CQ,Ier),e(bF,qer),e(U,jer),e(U,vF),e(vF,Z1e),e(Z1e,Der),e(vF,Ger),e(vF,wQ),e(wQ,Oer),e(vF,Ver),e(no,Xer),e(no,FF),e(FF,zer),e(FF,e2e),e(e2e,Qer),e(FF,Wer),e(FF,o2e),e(o2e,Her),e(no,Uer),M(TF,no,null),b(f,zXe,u),b(f,pd,u),e(pd,MF),e(MF,r2e),M(wy,r2e,null),e(pd,Jer),e(pd,t2e),e(t2e,Yer),b(f,QXe,u),b(f,Do,u),M(Ay,Do,null),e(Do,Ker),e(Do,_d),e(_d,Zer),e(_d,AQ),e(AQ,eor),e(_d,oor),e(_d,LQ),e(LQ,ror),e(_d,tor),e(Do,aor),e(Do,Ly),e(Ly,nor),e(Ly,a2e),e(a2e,sor),e(Ly,lor),e(Do,ior),e(Do,ut),M(yy,ut,null),e(ut,dor),e(ut,n2e),e(n2e,cor),e(ut,mor),e(ut,ud),e(ud,gor),e(ud,s2e),e(s2e,hor),e(ud,por),e(ud,yQ),e(yQ,_or),e(ud,uor),e(ut,bor),M(EF,ut,null),e(Do,vor),e(Do,so),M(xy,so,null),e(so,For),e(so,l2e),e(l2e,Tor),e(so,Mor),e(so,za),e(za,Eor),e(za,i2e),e(i2e,Cor),e(za,wor),e(za,d2e),e(d2e,Aor),e(za,Lor),e(za,c2e),e(c2e,yor),e(za,xor),e(so,$or),e(so,V),e(V,CF),e(CF,f2e),e(f2e,kor),e(CF,Sor),e(CF,xQ),e(xQ,Ror),e(CF,Por),e(V,Bor),e(V,wF),e(wF,m2e),e(m2e,Nor),e(wF,Ior),e(wF,$Q),e($Q,qor),e(wF,jor),e(V,Dor),e(V,AF),e(AF,g2e),e(g2e,Gor),e(AF,Oor),e(AF,kQ),e(kQ,Vor),e(AF,Xor),e(V,zor),e(V,LF),e(LF,h2e),e(h2e,Qor),e(LF,Wor),e(LF,SQ),e(SQ,Hor),e(LF,Uor),e(V,Jor),e(V,yF),e(yF,p2e),e(p2e,Yor),e(yF,Kor),e(yF,RQ),e(RQ,Zor),e(yF,err),e(V,orr),e(V,xF),e(xF,_2e),e(_2e,rrr),e(xF,trr),e(xF,PQ),e(PQ,arr),e(xF,nrr),e(V,srr),e(V,$F),e($F,u2e),e(u2e,lrr),e($F,irr),e($F,BQ),e(BQ,drr),e($F,crr),e(V,frr),e(V,kF),e(kF,b2e),e(b2e,mrr),e(kF,grr),e(kF,NQ),e(NQ,hrr),e(kF,prr),e(V,_rr),e(V,SF),e(SF,v2e),e(v2e,urr),e(SF,brr),e(SF,IQ),e(IQ,vrr),e(SF,Frr),e(V,Trr),e(V,RF),e(RF,F2e),e(F2e,Mrr),e(RF,Err),e(RF,qQ),e(qQ,Crr),e(RF,wrr),e(V,Arr),e(V,PF),e(PF,T2e),e(T2e,Lrr),e(PF,yrr),e(PF,jQ),e(jQ,xrr),e(PF,$rr),e(V,krr),e(V,BF),e(BF,M2e),e(M2e,Srr),e(BF,Rrr),e(BF,DQ),e(DQ,Prr),e(BF,Brr),e(V,Nrr),e(V,NF),e(NF,E2e),e(E2e,Irr),e(NF,qrr),e(NF,GQ),e(GQ,jrr),e(NF,Drr),e(V,Grr),e(V,IF),e(IF,C2e),e(C2e,Orr),e(IF,Vrr),e(IF,OQ),e(OQ,Xrr),e(IF,zrr),e(V,Qrr),e(V,qF),e(qF,w2e),e(w2e,Wrr),e(qF,Hrr),e(qF,VQ),e(VQ,Urr),e(qF,Jrr),e(V,Yrr),e(V,jF),e(jF,A2e),e(A2e,Krr),e(jF,Zrr),e(jF,XQ),e(XQ,etr),e(jF,otr),e(V,rtr),e(V,DF),e(DF,L2e),e(L2e,ttr),e(DF,atr),e(DF,zQ),e(zQ,ntr),e(DF,str),e(V,ltr),e(V,GF),e(GF,y2e),e(y2e,itr),e(GF,dtr),e(GF,QQ),e(QQ,ctr),e(GF,ftr),e(V,mtr),e(V,OF),e(OF,x2e),e(x2e,gtr),e(OF,htr),e(OF,WQ),e(WQ,ptr),e(OF,_tr),e(V,utr),e(V,VF),e(VF,$2e),e($2e,btr),e(VF,vtr),e(VF,HQ),e(HQ,Ftr),e(VF,Ttr),e(V,Mtr),e(V,XF),e(XF,k2e),e(k2e,Etr),e(XF,Ctr),e(XF,UQ),e(UQ,wtr),e(XF,Atr),e(V,Ltr),e(V,zF),e(zF,S2e),e(S2e,ytr),e(zF,xtr),e(zF,JQ),e(JQ,$tr),e(zF,ktr),e(V,Str),e(V,QF),e(QF,R2e),e(R2e,Rtr),e(QF,Ptr),e(QF,YQ),e(YQ,Btr),e(QF,Ntr),e(V,Itr),e(V,WF),e(WF,P2e),e(P2e,qtr),e(WF,jtr),e(WF,KQ),e(KQ,Dtr),e(WF,Gtr),e(V,Otr),e(V,HF),e(HF,B2e),e(B2e,Vtr),e(HF,Xtr),e(HF,ZQ),e(ZQ,ztr),e(HF,Qtr),e(V,Wtr),e(V,UF),e(UF,N2e),e(N2e,Htr),e(UF,Utr),e(UF,eW),e(eW,Jtr),e(UF,Ytr),e(V,Ktr),e(V,JF),e(JF,I2e),e(I2e,Ztr),e(JF,ear),e(JF,oW),e(oW,oar),e(JF,rar),e(V,tar),e(V,YF),e(YF,q2e),e(q2e,aar),e(YF,nar),e(YF,rW),e(rW,sar),e(YF,lar),e(V,iar),e(V,KF),e(KF,j2e),e(j2e,dar),e(KF,car),e(KF,tW),e(tW,far),e(KF,mar),e(V,gar),e(V,ZF),e(ZF,D2e),e(D2e,har),e(ZF,par),e(ZF,aW),e(aW,_ar),e(ZF,uar),e(V,bar),e(V,eT),e(eT,G2e),e(G2e,Far),e(eT,Tar),e(eT,nW),e(nW,Mar),e(eT,Ear),e(V,Car),e(V,oT),e(oT,O2e),e(O2e,war),e(oT,Aar),e(oT,sW),e(sW,Lar),e(oT,yar),e(V,xar),e(V,rT),e(rT,V2e),e(V2e,$ar),e(rT,kar),e(rT,lW),e(lW,Sar),e(rT,Rar),e(V,Par),e(V,tT),e(tT,X2e),e(X2e,Bar),e(tT,Nar),e(tT,iW),e(iW,Iar),e(tT,qar),e(V,jar),e(V,aT),e(aT,z2e),e(z2e,Dar),e(aT,Gar),e(aT,dW),e(dW,Oar),e(aT,Var),e(V,Xar),e(V,nT),e(nT,Q2e),e(Q2e,zar),e(nT,Qar),e(nT,cW),e(cW,War),e(nT,Har),e(V,Uar),e(V,sT),e(sT,W2e),e(W2e,Jar),e(sT,Yar),e(sT,fW),e(fW,Kar),e(sT,Zar),e(V,enr),e(V,lT),e(lT,H2e),e(H2e,onr),e(lT,rnr),e(lT,mW),e(mW,tnr),e(lT,anr),e(V,nnr),e(V,iT),e(iT,U2e),e(U2e,snr),e(iT,lnr),e(iT,gW),e(gW,inr),e(iT,dnr),e(V,cnr),e(V,dT),e(dT,J2e),e(J2e,fnr),e(dT,mnr),e(dT,hW),e(hW,gnr),e(dT,hnr),e(V,pnr),e(V,cT),e(cT,Y2e),e(Y2e,_nr),e(cT,unr),e(cT,pW),e(pW,bnr),e(cT,vnr),e(V,Fnr),e(V,fT),e(fT,K2e),e(K2e,Tnr),e(fT,Mnr),e(fT,_W),e(_W,Enr),e(fT,Cnr),e(so,wnr),e(so,mT),e(mT,Anr),e(mT,Z2e),e(Z2e,Lnr),e(mT,ynr),e(mT,ebe),e(ebe,xnr),e(so,$nr),M(gT,so,null),b(f,WXe,u),b(f,bd,u),e(bd,hT),e(hT,obe),M($y,obe,null),e(bd,knr),e(bd,rbe),e(rbe,Snr),b(f,HXe,u),b(f,Go,u),M(ky,Go,null),e(Go,Rnr),e(Go,vd),e(vd,Pnr),e(vd,uW),e(uW,Bnr),e(vd,Nnr),e(vd,bW),e(bW,Inr),e(vd,qnr),e(Go,jnr),e(Go,Sy),e(Sy,Dnr),e(Sy,tbe),e(tbe,Gnr),e(Sy,Onr),e(Go,Vnr),e(Go,bt),M(Ry,bt,null),e(bt,Xnr),e(bt,abe),e(abe,znr),e(bt,Qnr),e(bt,Fd),e(Fd,Wnr),e(Fd,nbe),e(nbe,Hnr),e(Fd,Unr),e(Fd,vW),e(vW,Jnr),e(Fd,Ynr),e(bt,Knr),M(pT,bt,null),e(Go,Znr),e(Go,lo),M(Py,lo,null),e(lo,esr),e(lo,sbe),e(sbe,osr),e(lo,rsr),e(lo,Qa),e(Qa,tsr),e(Qa,lbe),e(lbe,asr),e(Qa,nsr),e(Qa,ibe),e(ibe,ssr),e(Qa,lsr),e(Qa,dbe),e(dbe,isr),e(Qa,dsr),e(lo,csr),e(lo,cbe),e(cbe,_T),e(_T,fbe),e(fbe,fsr),e(_T,msr),e(_T,FW),e(FW,gsr),e(_T,hsr),e(lo,psr),e(lo,uT),e(uT,_sr),e(uT,mbe),e(mbe,usr),e(uT,bsr),e(uT,gbe),e(gbe,vsr),e(lo,Fsr),M(bT,lo,null),b(f,UXe,u),b(f,Td,u),e(Td,vT),e(vT,hbe),M(By,hbe,null),e(Td,Tsr),e(Td,pbe),e(pbe,Msr),b(f,JXe,u),b(f,Oo,u),M(Ny,Oo,null),e(Oo,Esr),e(Oo,Md),e(Md,Csr),e(Md,TW),e(TW,wsr),e(Md,Asr),e(Md,MW),e(MW,Lsr),e(Md,ysr),e(Oo,xsr),e(Oo,Iy),e(Iy,$sr),e(Iy,_be),e(_be,ksr),e(Iy,Ssr),e(Oo,Rsr),e(Oo,vt),M(qy,vt,null),e(vt,Psr),e(vt,ube),e(ube,Bsr),e(vt,Nsr),e(vt,Ed),e(Ed,Isr),e(Ed,bbe),e(bbe,qsr),e(Ed,jsr),e(Ed,EW),e(EW,Dsr),e(Ed,Gsr),e(vt,Osr),M(FT,vt,null),e(Oo,Vsr),e(Oo,io),M(jy,io,null),e(io,Xsr),e(io,vbe),e(vbe,zsr),e(io,Qsr),e(io,Wa),e(Wa,Wsr),e(Wa,Fbe),e(Fbe,Hsr),e(Wa,Usr),e(Wa,Tbe),e(Tbe,Jsr),e(Wa,Ysr),e(Wa,Mbe),e(Mbe,Ksr),e(Wa,Zsr),e(io,elr),e(io,ve),e(ve,TT),e(TT,Ebe),e(Ebe,olr),e(TT,rlr),e(TT,CW),e(CW,tlr),e(TT,alr),e(ve,nlr),e(ve,MT),e(MT,Cbe),e(Cbe,slr),e(MT,llr),e(MT,wW),e(wW,ilr),e(MT,dlr),e(ve,clr),e(ve,ET),e(ET,wbe),e(wbe,flr),e(ET,mlr),e(ET,AW),e(AW,glr),e(ET,hlr),e(ve,plr),e(ve,CT),e(CT,Abe),e(Abe,_lr),e(CT,ulr),e(CT,LW),e(LW,blr),e(CT,vlr),e(ve,Flr),e(ve,Us),e(Us,Lbe),e(Lbe,Tlr),e(Us,Mlr),e(Us,yW),e(yW,Elr),e(Us,Clr),e(Us,xW),e(xW,wlr),e(Us,Alr),e(ve,Llr),e(ve,wT),e(wT,ybe),e(ybe,ylr),e(wT,xlr),e(wT,$W),e($W,$lr),e(wT,klr),e(ve,Slr),e(ve,Js),e(Js,xbe),e(xbe,Rlr),e(Js,Plr),e(Js,kW),e(kW,Blr),e(Js,Nlr),e(Js,SW),e(SW,Ilr),e(Js,qlr),e(ve,jlr),e(ve,AT),e(AT,$be),e($be,Dlr),e(AT,Glr),e(AT,RW),e(RW,Olr),e(AT,Vlr),e(ve,Xlr),e(ve,Ft),e(Ft,kbe),e(kbe,zlr),e(Ft,Qlr),e(Ft,PW),e(PW,Wlr),e(Ft,Hlr),e(Ft,BW),e(BW,Ulr),e(Ft,Jlr),e(Ft,NW),e(NW,Ylr),e(Ft,Klr),e(ve,Zlr),e(ve,LT),e(LT,Sbe),e(Sbe,eir),e(LT,oir),e(LT,IW),e(IW,rir),e(LT,tir),e(ve,air),e(ve,yT),e(yT,Rbe),e(Rbe,nir),e(yT,sir),e(yT,qW),e(qW,lir),e(yT,iir),e(ve,dir),e(ve,xT),e(xT,Pbe),e(Pbe,cir),e(xT,fir),e(xT,jW),e(jW,mir),e(xT,gir),e(ve,hir),e(ve,$T),e($T,Bbe),e(Bbe,pir),e($T,_ir),e($T,DW),e(DW,uir),e($T,bir),e(ve,vir),e(ve,kT),e(kT,Nbe),e(Nbe,Fir),e(kT,Tir),e(kT,GW),e(GW,Mir),e(kT,Eir),e(ve,Cir),e(ve,ST),e(ST,Ibe),e(Ibe,wir),e(ST,Air),e(ST,OW),e(OW,Lir),e(ST,yir),e(ve,xir),e(ve,RT),e(RT,qbe),e(qbe,$ir),e(RT,kir),e(RT,VW),e(VW,Sir),e(RT,Rir),e(io,Pir),e(io,PT),e(PT,Bir),e(PT,jbe),e(jbe,Nir),e(PT,Iir),e(PT,Dbe),e(Dbe,qir),e(io,jir),M(BT,io,null),b(f,YXe,u),b(f,Cd,u),e(Cd,NT),e(NT,Gbe),M(Dy,Gbe,null),e(Cd,Dir),e(Cd,Obe),e(Obe,Gir),b(f,KXe,u),b(f,Vo,u),M(Gy,Vo,null),e(Vo,Oir),e(Vo,wd),e(wd,Vir),e(wd,XW),e(XW,Xir),e(wd,zir),e(wd,zW),e(zW,Qir),e(wd,Wir),e(Vo,Hir),e(Vo,Oy),e(Oy,Uir),e(Oy,Vbe),e(Vbe,Jir),e(Oy,Yir),e(Vo,Kir),e(Vo,Tt),M(Vy,Tt,null),e(Tt,Zir),e(Tt,Xbe),e(Xbe,edr),e(Tt,odr),e(Tt,Ad),e(Ad,rdr),e(Ad,zbe),e(zbe,tdr),e(Ad,adr),e(Ad,QW),e(QW,ndr),e(Ad,sdr),e(Tt,ldr),M(IT,Tt,null),e(Vo,idr),e(Vo,co),M(Xy,co,null),e(co,ddr),e(co,Qbe),e(Qbe,cdr),e(co,fdr),e(co,Ha),e(Ha,mdr),e(Ha,Wbe),e(Wbe,gdr),e(Ha,hdr),e(Ha,Hbe),e(Hbe,pdr),e(Ha,_dr),e(Ha,Ube),e(Ube,udr),e(Ha,bdr),e(co,vdr),e(co,Jbe),e(Jbe,qT),e(qT,Ybe),e(Ybe,Fdr),e(qT,Tdr),e(qT,WW),e(WW,Mdr),e(qT,Edr),e(co,Cdr),e(co,jT),e(jT,wdr),e(jT,Kbe),e(Kbe,Adr),e(jT,Ldr),e(jT,Zbe),e(Zbe,ydr),e(co,xdr),M(DT,co,null),b(f,ZXe,u),b(f,Ld,u),e(Ld,GT),e(GT,e3e),M(zy,e3e,null),e(Ld,$dr),e(Ld,o3e),e(o3e,kdr),b(f,eze,u),b(f,Xo,u),M(Qy,Xo,null),e(Xo,Sdr),e(Xo,yd),e(yd,Rdr),e(yd,HW),e(HW,Pdr),e(yd,Bdr),e(yd,UW),e(UW,Ndr),e(yd,Idr),e(Xo,qdr),e(Xo,Wy),e(Wy,jdr),e(Wy,r3e),e(r3e,Ddr),e(Wy,Gdr),e(Xo,Odr),e(Xo,Mt),M(Hy,Mt,null),e(Mt,Vdr),e(Mt,t3e),e(t3e,Xdr),e(Mt,zdr),e(Mt,xd),e(xd,Qdr),e(xd,a3e),e(a3e,Wdr),e(xd,Hdr),e(xd,JW),e(JW,Udr),e(xd,Jdr),e(Mt,Ydr),M(OT,Mt,null),e(Xo,Kdr),e(Xo,fo),M(Uy,fo,null),e(fo,Zdr),e(fo,n3e),e(n3e,ecr),e(fo,ocr),e(fo,Ua),e(Ua,rcr),e(Ua,s3e),e(s3e,tcr),e(Ua,acr),e(Ua,l3e),e(l3e,ncr),e(Ua,scr),e(Ua,i3e),e(i3e,lcr),e(Ua,icr),e(fo,dcr),e(fo,d3e),e(d3e,VT),e(VT,c3e),e(c3e,ccr),e(VT,fcr),e(VT,YW),e(YW,mcr),e(VT,gcr),e(fo,hcr),e(fo,XT),e(XT,pcr),e(XT,f3e),e(f3e,_cr),e(XT,ucr),e(XT,m3e),e(m3e,bcr),e(fo,vcr),M(zT,fo,null),b(f,oze,u),b(f,$d,u),e($d,QT),e(QT,g3e),M(Jy,g3e,null),e($d,Fcr),e($d,h3e),e(h3e,Tcr),b(f,rze,u),b(f,zo,u),M(Yy,zo,null),e(zo,Mcr),e(zo,kd),e(kd,Ecr),e(kd,KW),e(KW,Ccr),e(kd,wcr),e(kd,ZW),e(ZW,Acr),e(kd,Lcr),e(zo,ycr),e(zo,Ky),e(Ky,xcr),e(Ky,p3e),e(p3e,$cr),e(Ky,kcr),e(zo,Scr),e(zo,Et),M(Zy,Et,null),e(Et,Rcr),e(Et,_3e),e(_3e,Pcr),e(Et,Bcr),e(Et,Sd),e(Sd,Ncr),e(Sd,u3e),e(u3e,Icr),e(Sd,qcr),e(Sd,eH),e(eH,jcr),e(Sd,Dcr),e(Et,Gcr),M(WT,Et,null),e(zo,Ocr),e(zo,mo),M(e9,mo,null),e(mo,Vcr),e(mo,b3e),e(b3e,Xcr),e(mo,zcr),e(mo,Ja),e(Ja,Qcr),e(Ja,v3e),e(v3e,Wcr),e(Ja,Hcr),e(Ja,F3e),e(F3e,Ucr),e(Ja,Jcr),e(Ja,T3e),e(T3e,Ycr),e(Ja,Kcr),e(mo,Zcr),e(mo,Pe),e(Pe,HT),e(HT,M3e),e(M3e,efr),e(HT,ofr),e(HT,oH),e(oH,rfr),e(HT,tfr),e(Pe,afr),e(Pe,UT),e(UT,E3e),e(E3e,nfr),e(UT,sfr),e(UT,rH),e(rH,lfr),e(UT,ifr),e(Pe,dfr),e(Pe,JT),e(JT,C3e),e(C3e,cfr),e(JT,ffr),e(JT,tH),e(tH,mfr),e(JT,gfr),e(Pe,hfr),e(Pe,YT),e(YT,w3e),e(w3e,pfr),e(YT,_fr),e(YT,aH),e(aH,ufr),e(YT,bfr),e(Pe,vfr),e(Pe,KT),e(KT,A3e),e(A3e,Ffr),e(KT,Tfr),e(KT,nH),e(nH,Mfr),e(KT,Efr),e(Pe,Cfr),e(Pe,ZT),e(ZT,L3e),e(L3e,wfr),e(ZT,Afr),e(ZT,sH),e(sH,Lfr),e(ZT,yfr),e(Pe,xfr),e(Pe,e8),e(e8,y3e),e(y3e,$fr),e(e8,kfr),e(e8,lH),e(lH,Sfr),e(e8,Rfr),e(Pe,Pfr),e(Pe,o8),e(o8,x3e),e(x3e,Bfr),e(o8,Nfr),e(o8,iH),e(iH,Ifr),e(o8,qfr),e(Pe,jfr),e(Pe,r8),e(r8,$3e),e($3e,Dfr),e(r8,Gfr),e(r8,dH),e(dH,Ofr),e(r8,Vfr),e(mo,Xfr),e(mo,t8),e(t8,zfr),e(t8,k3e),e(k3e,Qfr),e(t8,Wfr),e(t8,S3e),e(S3e,Hfr),e(mo,Ufr),M(a8,mo,null),b(f,tze,u),b(f,Rd,u),e(Rd,n8),e(n8,R3e),M(o9,R3e,null),e(Rd,Jfr),e(Rd,P3e),e(P3e,Yfr),b(f,aze,u),b(f,Qo,u),M(r9,Qo,null),e(Qo,Kfr),e(Qo,Pd),e(Pd,Zfr),e(Pd,cH),e(cH,emr),e(Pd,omr),e(Pd,fH),e(fH,rmr),e(Pd,tmr),e(Qo,amr),e(Qo,t9),e(t9,nmr),e(t9,B3e),e(B3e,smr),e(t9,lmr),e(Qo,imr),e(Qo,Ct),M(a9,Ct,null),e(Ct,dmr),e(Ct,N3e),e(N3e,cmr),e(Ct,fmr),e(Ct,Bd),e(Bd,mmr),e(Bd,I3e),e(I3e,gmr),e(Bd,hmr),e(Bd,mH),e(mH,pmr),e(Bd,_mr),e(Ct,umr),M(s8,Ct,null),e(Qo,bmr),e(Qo,go),M(n9,go,null),e(go,vmr),e(go,q3e),e(q3e,Fmr),e(go,Tmr),e(go,Ya),e(Ya,Mmr),e(Ya,j3e),e(j3e,Emr),e(Ya,Cmr),e(Ya,D3e),e(D3e,wmr),e(Ya,Amr),e(Ya,G3e),e(G3e,Lmr),e(Ya,ymr),e(go,xmr),e(go,rt),e(rt,l8),e(l8,O3e),e(O3e,$mr),e(l8,kmr),e(l8,gH),e(gH,Smr),e(l8,Rmr),e(rt,Pmr),e(rt,i8),e(i8,V3e),e(V3e,Bmr),e(i8,Nmr),e(i8,hH),e(hH,Imr),e(i8,qmr),e(rt,jmr),e(rt,d8),e(d8,X3e),e(X3e,Dmr),e(d8,Gmr),e(d8,pH),e(pH,Omr),e(d8,Vmr),e(rt,Xmr),e(rt,c8),e(c8,z3e),e(z3e,zmr),e(c8,Qmr),e(c8,_H),e(_H,Wmr),e(c8,Hmr),e(rt,Umr),e(rt,f8),e(f8,Q3e),e(Q3e,Jmr),e(f8,Ymr),e(f8,uH),e(uH,Kmr),e(f8,Zmr),e(go,egr),e(go,m8),e(m8,ogr),e(m8,W3e),e(W3e,rgr),e(m8,tgr),e(m8,H3e),e(H3e,agr),e(go,ngr),M(g8,go,null),b(f,nze,u),b(f,Nd,u),e(Nd,h8),e(h8,U3e),M(s9,U3e,null),e(Nd,sgr),e(Nd,J3e),e(J3e,lgr),b(f,sze,u),b(f,Wo,u),M(l9,Wo,null),e(Wo,igr),e(Wo,Id),e(Id,dgr),e(Id,bH),e(bH,cgr),e(Id,fgr),e(Id,vH),e(vH,mgr),e(Id,ggr),e(Wo,hgr),e(Wo,i9),e(i9,pgr),e(i9,Y3e),e(Y3e,_gr),e(i9,ugr),e(Wo,bgr),e(Wo,wt),M(d9,wt,null),e(wt,vgr),e(wt,K3e),e(K3e,Fgr),e(wt,Tgr),e(wt,qd),e(qd,Mgr),e(qd,Z3e),e(Z3e,Egr),e(qd,Cgr),e(qd,FH),e(FH,wgr),e(qd,Agr),e(wt,Lgr),M(p8,wt,null),e(Wo,ygr),e(Wo,ho),M(c9,ho,null),e(ho,xgr),e(ho,eve),e(eve,$gr),e(ho,kgr),e(ho,Ka),e(Ka,Sgr),e(Ka,ove),e(ove,Rgr),e(Ka,Pgr),e(Ka,rve),e(rve,Bgr),e(Ka,Ngr),e(Ka,tve),e(tve,Igr),e(Ka,qgr),e(ho,jgr),e(ho,Le),e(Le,_8),e(_8,ave),e(ave,Dgr),e(_8,Ggr),e(_8,TH),e(TH,Ogr),e(_8,Vgr),e(Le,Xgr),e(Le,u8),e(u8,nve),e(nve,zgr),e(u8,Qgr),e(u8,MH),e(MH,Wgr),e(u8,Hgr),e(Le,Ugr),e(Le,b8),e(b8,sve),e(sve,Jgr),e(b8,Ygr),e(b8,EH),e(EH,Kgr),e(b8,Zgr),e(Le,ehr),e(Le,v8),e(v8,lve),e(lve,ohr),e(v8,rhr),e(v8,CH),e(CH,thr),e(v8,ahr),e(Le,nhr),e(Le,F8),e(F8,ive),e(ive,shr),e(F8,lhr),e(F8,wH),e(wH,ihr),e(F8,dhr),e(Le,chr),e(Le,T8),e(T8,dve),e(dve,fhr),e(T8,mhr),e(T8,AH),e(AH,ghr),e(T8,hhr),e(Le,phr),e(Le,M8),e(M8,cve),e(cve,_hr),e(M8,uhr),e(M8,LH),e(LH,bhr),e(M8,vhr),e(Le,Fhr),e(Le,E8),e(E8,fve),e(fve,Thr),e(E8,Mhr),e(E8,yH),e(yH,Ehr),e(E8,Chr),e(Le,whr),e(Le,C8),e(C8,mve),e(mve,Ahr),e(C8,Lhr),e(C8,xH),e(xH,yhr),e(C8,xhr),e(Le,$hr),e(Le,w8),e(w8,gve),e(gve,khr),e(w8,Shr),e(w8,$H),e($H,Rhr),e(w8,Phr),e(ho,Bhr),e(ho,A8),e(A8,Nhr),e(A8,hve),e(hve,Ihr),e(A8,qhr),e(A8,pve),e(pve,jhr),e(ho,Dhr),M(L8,ho,null),b(f,lze,u),b(f,jd,u),e(jd,y8),e(y8,_ve),M(f9,_ve,null),e(jd,Ghr),e(jd,uve),e(uve,Ohr),b(f,ize,u),b(f,Ho,u),M(m9,Ho,null),e(Ho,Vhr),e(Ho,Dd),e(Dd,Xhr),e(Dd,kH),e(kH,zhr),e(Dd,Qhr),e(Dd,SH),e(SH,Whr),e(Dd,Hhr),e(Ho,Uhr),e(Ho,g9),e(g9,Jhr),e(g9,bve),e(bve,Yhr),e(g9,Khr),e(Ho,Zhr),e(Ho,At),M(h9,At,null),e(At,epr),e(At,vve),e(vve,opr),e(At,rpr),e(At,Gd),e(Gd,tpr),e(Gd,Fve),e(Fve,apr),e(Gd,npr),e(Gd,RH),e(RH,spr),e(Gd,lpr),e(At,ipr),M(x8,At,null),e(Ho,dpr),e(Ho,po),M(p9,po,null),e(po,cpr),e(po,Tve),e(Tve,fpr),e(po,mpr),e(po,Za),e(Za,gpr),e(Za,Mve),e(Mve,hpr),e(Za,ppr),e(Za,Eve),e(Eve,_pr),e(Za,upr),e(Za,Cve),e(Cve,bpr),e(Za,vpr),e(po,Fpr),e(po,_9),e(_9,$8),e($8,wve),e(wve,Tpr),e($8,Mpr),e($8,PH),e(PH,Epr),e($8,Cpr),e(_9,wpr),e(_9,k8),e(k8,Ave),e(Ave,Apr),e(k8,Lpr),e(k8,BH),e(BH,ypr),e(k8,xpr),e(po,$pr),e(po,S8),e(S8,kpr),e(S8,Lve),e(Lve,Spr),e(S8,Rpr),e(S8,yve),e(yve,Ppr),e(po,Bpr),M(R8,po,null),b(f,dze,u),b(f,Od,u),e(Od,P8),e(P8,xve),M(u9,xve,null),e(Od,Npr),e(Od,$ve),e($ve,Ipr),b(f,cze,u),b(f,Uo,u),M(b9,Uo,null),e(Uo,qpr),e(Uo,Vd),e(Vd,jpr),e(Vd,NH),e(NH,Dpr),e(Vd,Gpr),e(Vd,IH),e(IH,Opr),e(Vd,Vpr),e(Uo,Xpr),e(Uo,v9),e(v9,zpr),e(v9,kve),e(kve,Qpr),e(v9,Wpr),e(Uo,Hpr),e(Uo,Lt),M(F9,Lt,null),e(Lt,Upr),e(Lt,Sve),e(Sve,Jpr),e(Lt,Ypr),e(Lt,Xd),e(Xd,Kpr),e(Xd,Rve),e(Rve,Zpr),e(Xd,e_r),e(Xd,qH),e(qH,o_r),e(Xd,r_r),e(Lt,t_r),M(B8,Lt,null),e(Uo,a_r),e(Uo,_o),M(T9,_o,null),e(_o,n_r),e(_o,Pve),e(Pve,s_r),e(_o,l_r),e(_o,en),e(en,i_r),e(en,Bve),e(Bve,d_r),e(en,c_r),e(en,Nve),e(Nve,f_r),e(en,m_r),e(en,Ive),e(Ive,g_r),e(en,h_r),e(_o,p_r),e(_o,tt),e(tt,N8),e(N8,qve),e(qve,__r),e(N8,u_r),e(N8,jH),e(jH,b_r),e(N8,v_r),e(tt,F_r),e(tt,I8),e(I8,jve),e(jve,T_r),e(I8,M_r),e(I8,DH),e(DH,E_r),e(I8,C_r),e(tt,w_r),e(tt,q8),e(q8,Dve),e(Dve,A_r),e(q8,L_r),e(q8,GH),e(GH,y_r),e(q8,x_r),e(tt,$_r),e(tt,j8),e(j8,Gve),e(Gve,k_r),e(j8,S_r),e(j8,OH),e(OH,R_r),e(j8,P_r),e(tt,B_r),e(tt,D8),e(D8,Ove),e(Ove,N_r),e(D8,I_r),e(D8,VH),e(VH,q_r),e(D8,j_r),e(_o,D_r),e(_o,G8),e(G8,G_r),e(G8,Vve),e(Vve,O_r),e(G8,V_r),e(G8,Xve),e(Xve,X_r),e(_o,z_r),M(O8,_o,null),b(f,fze,u),b(f,zd,u),e(zd,V8),e(V8,zve),M(M9,zve,null),e(zd,Q_r),e(zd,Qve),e(Qve,W_r),b(f,mze,u),b(f,Jo,u),M(E9,Jo,null),e(Jo,H_r),e(Jo,Qd),e(Qd,U_r),e(Qd,XH),e(XH,J_r),e(Qd,Y_r),e(Qd,zH),e(zH,K_r),e(Qd,Z_r),e(Jo,eur),e(Jo,C9),e(C9,our),e(C9,Wve),e(Wve,rur),e(C9,tur),e(Jo,aur),e(Jo,yt),M(w9,yt,null),e(yt,nur),e(yt,Hve),e(Hve,sur),e(yt,lur),e(yt,Wd),e(Wd,iur),e(Wd,Uve),e(Uve,dur),e(Wd,cur),e(Wd,QH),e(QH,fur),e(Wd,mur),e(yt,gur),M(X8,yt,null),e(Jo,hur),e(Jo,uo),M(A9,uo,null),e(uo,pur),e(uo,Jve),e(Jve,_ur),e(uo,uur),e(uo,on),e(on,bur),e(on,Yve),e(Yve,vur),e(on,Fur),e(on,Kve),e(Kve,Tur),e(on,Mur),e(on,Zve),e(Zve,Eur),e(on,Cur),e(uo,wur),e(uo,Hd),e(Hd,z8),e(z8,eFe),e(eFe,Aur),e(z8,Lur),e(z8,WH),e(WH,yur),e(z8,xur),e(Hd,$ur),e(Hd,Q8),e(Q8,oFe),e(oFe,kur),e(Q8,Sur),e(Q8,HH),e(HH,Rur),e(Q8,Pur),e(Hd,Bur),e(Hd,W8),e(W8,rFe),e(rFe,Nur),e(W8,Iur),e(W8,UH),e(UH,qur),e(W8,jur),e(uo,Dur),e(uo,H8),e(H8,Gur),e(H8,tFe),e(tFe,Our),e(H8,Vur),e(H8,aFe),e(aFe,Xur),e(uo,zur),M(U8,uo,null),b(f,gze,u),b(f,Ud,u),e(Ud,J8),e(J8,nFe),M(L9,nFe,null),e(Ud,Qur),e(Ud,sFe),e(sFe,Wur),b(f,hze,u),b(f,Yo,u),M(y9,Yo,null),e(Yo,Hur),e(Yo,Jd),e(Jd,Uur),e(Jd,JH),e(JH,Jur),e(Jd,Yur),e(Jd,YH),e(YH,Kur),e(Jd,Zur),e(Yo,e1r),e(Yo,x9),e(x9,o1r),e(x9,lFe),e(lFe,r1r),e(x9,t1r),e(Yo,a1r),e(Yo,xt),M($9,xt,null),e(xt,n1r),e(xt,iFe),e(iFe,s1r),e(xt,l1r),e(xt,Yd),e(Yd,i1r),e(Yd,dFe),e(dFe,d1r),e(Yd,c1r),e(Yd,KH),e(KH,f1r),e(Yd,m1r),e(xt,g1r),M(Y8,xt,null),e(Yo,h1r),e(Yo,bo),M(k9,bo,null),e(bo,p1r),e(bo,cFe),e(cFe,_1r),e(bo,u1r),e(bo,rn),e(rn,b1r),e(rn,fFe),e(fFe,v1r),e(rn,F1r),e(rn,mFe),e(mFe,T1r),e(rn,M1r),e(rn,gFe),e(gFe,E1r),e(rn,C1r),e(bo,w1r),e(bo,S9),e(S9,K8),e(K8,hFe),e(hFe,A1r),e(K8,L1r),e(K8,ZH),e(ZH,y1r),e(K8,x1r),e(S9,$1r),e(S9,Z8),e(Z8,pFe),e(pFe,k1r),e(Z8,S1r),e(Z8,eU),e(eU,R1r),e(Z8,P1r),e(bo,B1r),e(bo,eM),e(eM,N1r),e(eM,_Fe),e(_Fe,I1r),e(eM,q1r),e(eM,uFe),e(uFe,j1r),e(bo,D1r),M(oM,bo,null),b(f,pze,u),b(f,Kd,u),e(Kd,rM),e(rM,bFe),M(R9,bFe,null),e(Kd,G1r),e(Kd,vFe),e(vFe,O1r),b(f,_ze,u),b(f,Ko,u),M(P9,Ko,null),e(Ko,V1r),e(Ko,Zd),e(Zd,X1r),e(Zd,oU),e(oU,z1r),e(Zd,Q1r),e(Zd,rU),e(rU,W1r),e(Zd,H1r),e(Ko,U1r),e(Ko,B9),e(B9,J1r),e(B9,FFe),e(FFe,Y1r),e(B9,K1r),e(Ko,Z1r),e(Ko,$t),M(N9,$t,null),e($t,e2r),e($t,TFe),e(TFe,o2r),e($t,r2r),e($t,ec),e(ec,t2r),e(ec,MFe),e(MFe,a2r),e(ec,n2r),e(ec,tU),e(tU,s2r),e(ec,l2r),e($t,i2r),M(tM,$t,null),e(Ko,d2r),e(Ko,vo),M(I9,vo,null),e(vo,c2r),e(vo,EFe),e(EFe,f2r),e(vo,m2r),e(vo,tn),e(tn,g2r),e(tn,CFe),e(CFe,h2r),e(tn,p2r),e(tn,wFe),e(wFe,_2r),e(tn,u2r),e(tn,AFe),e(AFe,b2r),e(tn,v2r),e(vo,F2r),e(vo,LFe),e(LFe,aM),e(aM,yFe),e(yFe,T2r),e(aM,M2r),e(aM,aU),e(aU,E2r),e(aM,C2r),e(vo,w2r),e(vo,nM),e(nM,A2r),e(nM,xFe),e(xFe,L2r),e(nM,y2r),e(nM,$Fe),e($Fe,x2r),e(vo,$2r),M(sM,vo,null),b(f,uze,u),b(f,oc,u),e(oc,lM),e(lM,kFe),M(q9,kFe,null),e(oc,k2r),e(oc,SFe),e(SFe,S2r),b(f,bze,u),b(f,Zo,u),M(j9,Zo,null),e(Zo,R2r),e(Zo,rc),e(rc,P2r),e(rc,nU),e(nU,B2r),e(rc,N2r),e(rc,sU),e(sU,I2r),e(rc,q2r),e(Zo,j2r),e(Zo,D9),e(D9,D2r),e(D9,RFe),e(RFe,G2r),e(D9,O2r),e(Zo,V2r),e(Zo,kt),M(G9,kt,null),e(kt,X2r),e(kt,PFe),e(PFe,z2r),e(kt,Q2r),e(kt,tc),e(tc,W2r),e(tc,BFe),e(BFe,H2r),e(tc,U2r),e(tc,lU),e(lU,J2r),e(tc,Y2r),e(kt,K2r),M(iM,kt,null),e(Zo,Z2r),e(Zo,Fo),M(O9,Fo,null),e(Fo,ebr),e(Fo,NFe),e(NFe,obr),e(Fo,rbr),e(Fo,an),e(an,tbr),e(an,IFe),e(IFe,abr),e(an,nbr),e(an,qFe),e(qFe,sbr),e(an,lbr),e(an,jFe),e(jFe,ibr),e(an,dbr),e(Fo,cbr),e(Fo,at),e(at,dM),e(dM,DFe),e(DFe,fbr),e(dM,mbr),e(dM,iU),e(iU,gbr),e(dM,hbr),e(at,pbr),e(at,cM),e(cM,GFe),e(GFe,_br),e(cM,ubr),e(cM,dU),e(dU,bbr),e(cM,vbr),e(at,Fbr),e(at,fM),e(fM,OFe),e(OFe,Tbr),e(fM,Mbr),e(fM,cU),e(cU,Ebr),e(fM,Cbr),e(at,wbr),e(at,mM),e(mM,VFe),e(VFe,Abr),e(mM,Lbr),e(mM,fU),e(fU,ybr),e(mM,xbr),e(at,$br),e(at,gM),e(gM,XFe),e(XFe,kbr),e(gM,Sbr),e(gM,mU),e(mU,Rbr),e(gM,Pbr),e(Fo,Bbr),e(Fo,hM),e(hM,Nbr),e(hM,zFe),e(zFe,Ibr),e(hM,qbr),e(hM,QFe),e(QFe,jbr),e(Fo,Dbr),M(pM,Fo,null),b(f,vze,u),b(f,ac,u),e(ac,_M),e(_M,WFe),M(V9,WFe,null),e(ac,Gbr),e(ac,HFe),e(HFe,Obr),b(f,Fze,u),b(f,er,u),M(X9,er,null),e(er,Vbr),e(er,nc),e(nc,Xbr),e(nc,gU),e(gU,zbr),e(nc,Qbr),e(nc,hU),e(hU,Wbr),e(nc,Hbr),e(er,Ubr),e(er,z9),e(z9,Jbr),e(z9,UFe),e(UFe,Ybr),e(z9,Kbr),e(er,Zbr),e(er,St),M(Q9,St,null),e(St,e3r),e(St,JFe),e(JFe,o3r),e(St,r3r),e(St,sc),e(sc,t3r),e(sc,YFe),e(YFe,a3r),e(sc,n3r),e(sc,pU),e(pU,s3r),e(sc,l3r),e(St,i3r),M(uM,St,null),e(er,d3r),e(er,To),M(W9,To,null),e(To,c3r),e(To,KFe),e(KFe,f3r),e(To,m3r),e(To,nn),e(nn,g3r),e(nn,ZFe),e(ZFe,h3r),e(nn,p3r),e(nn,eTe),e(eTe,_3r),e(nn,u3r),e(nn,oTe),e(oTe,b3r),e(nn,v3r),e(To,F3r),e(To,rTe),e(rTe,bM),e(bM,tTe),e(tTe,T3r),e(bM,M3r),e(bM,_U),e(_U,E3r),e(bM,C3r),e(To,w3r),e(To,vM),e(vM,A3r),e(vM,aTe),e(aTe,L3r),e(vM,y3r),e(vM,nTe),e(nTe,x3r),e(To,$3r),M(FM,To,null),b(f,Tze,u),b(f,lc,u),e(lc,TM),e(TM,sTe),M(H9,sTe,null),e(lc,k3r),e(lc,lTe),e(lTe,S3r),b(f,Mze,u),b(f,or,u),M(U9,or,null),e(or,R3r),e(or,ic),e(ic,P3r),e(ic,uU),e(uU,B3r),e(ic,N3r),e(ic,bU),e(bU,I3r),e(ic,q3r),e(or,j3r),e(or,J9),e(J9,D3r),e(J9,iTe),e(iTe,G3r),e(J9,O3r),e(or,V3r),e(or,Rt),M(Y9,Rt,null),e(Rt,X3r),e(Rt,dTe),e(dTe,z3r),e(Rt,Q3r),e(Rt,dc),e(dc,W3r),e(dc,cTe),e(cTe,H3r),e(dc,U3r),e(dc,vU),e(vU,J3r),e(dc,Y3r),e(Rt,K3r),M(MM,Rt,null),e(or,Z3r),e(or,xr),M(K9,xr,null),e(xr,evr),e(xr,fTe),e(fTe,ovr),e(xr,rvr),e(xr,sn),e(sn,tvr),e(sn,mTe),e(mTe,avr),e(sn,nvr),e(sn,gTe),e(gTe,svr),e(sn,lvr),e(sn,hTe),e(hTe,ivr),e(sn,dvr),e(xr,cvr),e(xr,q),e(q,EM),e(EM,pTe),e(pTe,fvr),e(EM,mvr),e(EM,FU),e(FU,gvr),e(EM,hvr),e(q,pvr),e(q,CM),e(CM,_Te),e(_Te,_vr),e(CM,uvr),e(CM,TU),e(TU,bvr),e(CM,vvr),e(q,Fvr),e(q,wM),e(wM,uTe),e(uTe,Tvr),e(wM,Mvr),e(wM,MU),e(MU,Evr),e(wM,Cvr),e(q,wvr),e(q,AM),e(AM,bTe),e(bTe,Avr),e(AM,Lvr),e(AM,EU),e(EU,yvr),e(AM,xvr),e(q,$vr),e(q,LM),e(LM,vTe),e(vTe,kvr),e(LM,Svr),e(LM,CU),e(CU,Rvr),e(LM,Pvr),e(q,Bvr),e(q,yM),e(yM,FTe),e(FTe,Nvr),e(yM,Ivr),e(yM,wU),e(wU,qvr),e(yM,jvr),e(q,Dvr),e(q,xM),e(xM,TTe),e(TTe,Gvr),e(xM,Ovr),e(xM,AU),e(AU,Vvr),e(xM,Xvr),e(q,zvr),e(q,$M),e($M,MTe),e(MTe,Qvr),e($M,Wvr),e($M,LU),e(LU,Hvr),e($M,Uvr),e(q,Jvr),e(q,kM),e(kM,ETe),e(ETe,Yvr),e(kM,Kvr),e(kM,yU),e(yU,Zvr),e(kM,eFr),e(q,oFr),e(q,SM),e(SM,CTe),e(CTe,rFr),e(SM,tFr),e(SM,xU),e(xU,aFr),e(SM,nFr),e(q,sFr),e(q,RM),e(RM,wTe),e(wTe,lFr),e(RM,iFr),e(RM,$U),e($U,dFr),e(RM,cFr),e(q,fFr),e(q,PM),e(PM,ATe),e(ATe,mFr),e(PM,gFr),e(PM,kU),e(kU,hFr),e(PM,pFr),e(q,_Fr),e(q,BM),e(BM,LTe),e(LTe,uFr),e(BM,bFr),e(BM,SU),e(SU,vFr),e(BM,FFr),e(q,TFr),e(q,NM),e(NM,yTe),e(yTe,MFr),e(NM,EFr),e(NM,RU),e(RU,CFr),e(NM,wFr),e(q,AFr),e(q,IM),e(IM,xTe),e(xTe,LFr),e(IM,yFr),e(IM,PU),e(PU,xFr),e(IM,$Fr),e(q,kFr),e(q,qM),e(qM,$Te),e($Te,SFr),e(qM,RFr),e(qM,BU),e(BU,PFr),e(qM,BFr),e(q,NFr),e(q,jM),e(jM,kTe),e(kTe,IFr),e(jM,qFr),e(jM,NU),e(NU,jFr),e(jM,DFr),e(q,GFr),e(q,DM),e(DM,STe),e(STe,OFr),e(DM,VFr),e(DM,IU),e(IU,XFr),e(DM,zFr),e(q,QFr),e(q,Ys),e(Ys,RTe),e(RTe,WFr),e(Ys,HFr),e(Ys,qU),e(qU,UFr),e(Ys,JFr),e(Ys,jU),e(jU,YFr),e(Ys,KFr),e(q,ZFr),e(q,GM),e(GM,PTe),e(PTe,eTr),e(GM,oTr),e(GM,DU),e(DU,rTr),e(GM,tTr),e(q,aTr),e(q,OM),e(OM,BTe),e(BTe,nTr),e(OM,sTr),e(OM,GU),e(GU,lTr),e(OM,iTr),e(q,dTr),e(q,VM),e(VM,NTe),e(NTe,cTr),e(VM,fTr),e(VM,OU),e(OU,mTr),e(VM,gTr),e(q,hTr),e(q,XM),e(XM,ITe),e(ITe,pTr),e(XM,_Tr),e(XM,VU),e(VU,uTr),e(XM,bTr),e(q,vTr),e(q,zM),e(zM,qTe),e(qTe,FTr),e(zM,TTr),e(zM,XU),e(XU,MTr),e(zM,ETr),e(q,CTr),e(q,QM),e(QM,jTe),e(jTe,wTr),e(QM,ATr),e(QM,zU),e(zU,LTr),e(QM,yTr),e(q,xTr),e(q,WM),e(WM,DTe),e(DTe,$Tr),e(WM,kTr),e(WM,QU),e(QU,STr),e(WM,RTr),e(q,PTr),e(q,HM),e(HM,GTe),e(GTe,BTr),e(HM,NTr),e(HM,WU),e(WU,ITr),e(HM,qTr),e(q,jTr),e(q,UM),e(UM,OTe),e(OTe,DTr),e(UM,GTr),e(UM,HU),e(HU,OTr),e(UM,VTr),e(q,XTr),e(q,JM),e(JM,VTe),e(VTe,zTr),e(JM,QTr),e(JM,UU),e(UU,WTr),e(JM,HTr),e(q,UTr),e(q,YM),e(YM,XTe),e(XTe,JTr),e(YM,YTr),e(YM,JU),e(JU,KTr),e(YM,ZTr),e(q,e8r),e(q,KM),e(KM,zTe),e(zTe,o8r),e(KM,r8r),e(KM,YU),e(YU,t8r),e(KM,a8r),e(q,n8r),e(q,ZM),e(ZM,QTe),e(QTe,s8r),e(ZM,l8r),e(ZM,KU),e(KU,i8r),e(ZM,d8r),e(q,c8r),e(q,e4),e(e4,WTe),e(WTe,f8r),e(e4,m8r),e(e4,ZU),e(ZU,g8r),e(e4,h8r),e(q,p8r),e(q,o4),e(o4,HTe),e(HTe,_8r),e(o4,u8r),e(o4,eJ),e(eJ,b8r),e(o4,v8r),e(q,F8r),e(q,r4),e(r4,UTe),e(UTe,T8r),e(r4,M8r),e(r4,oJ),e(oJ,E8r),e(r4,C8r),e(q,w8r),e(q,t4),e(t4,JTe),e(JTe,A8r),e(t4,L8r),e(t4,rJ),e(rJ,y8r),e(t4,x8r),e(q,$8r),e(q,a4),e(a4,YTe),e(YTe,k8r),e(a4,S8r),e(a4,tJ),e(tJ,R8r),e(a4,P8r),e(q,B8r),e(q,n4),e(n4,KTe),e(KTe,N8r),e(n4,I8r),e(n4,aJ),e(aJ,q8r),e(n4,j8r),e(q,D8r),e(q,s4),e(s4,ZTe),e(ZTe,G8r),e(s4,O8r),e(s4,nJ),e(nJ,V8r),e(s4,X8r),e(q,z8r),e(q,l4),e(l4,e8e),e(e8e,Q8r),e(l4,W8r),e(l4,sJ),e(sJ,H8r),e(l4,U8r),e(q,J8r),e(q,i4),e(i4,o8e),e(o8e,Y8r),e(i4,K8r),e(i4,lJ),e(lJ,Z8r),e(i4,eMr),e(q,oMr),e(q,d4),e(d4,r8e),e(r8e,rMr),e(d4,tMr),e(d4,iJ),e(iJ,aMr),e(d4,nMr),e(q,sMr),e(q,c4),e(c4,t8e),e(t8e,lMr),e(c4,iMr),e(c4,dJ),e(dJ,dMr),e(c4,cMr),e(q,fMr),e(q,f4),e(f4,a8e),e(a8e,mMr),e(f4,gMr),e(f4,cJ),e(cJ,hMr),e(f4,pMr),e(q,_Mr),e(q,m4),e(m4,n8e),e(n8e,uMr),e(m4,bMr),e(m4,fJ),e(fJ,vMr),e(m4,FMr),e(q,TMr),e(q,g4),e(g4,s8e),e(s8e,MMr),e(g4,EMr),e(g4,mJ),e(mJ,CMr),e(g4,wMr),e(q,AMr),e(q,h4),e(h4,l8e),e(l8e,LMr),e(h4,yMr),e(h4,gJ),e(gJ,xMr),e(h4,$Mr),e(q,kMr),e(q,p4),e(p4,i8e),e(i8e,SMr),e(p4,RMr),e(p4,hJ),e(hJ,PMr),e(p4,BMr),e(q,NMr),e(q,_4),e(_4,d8e),e(d8e,IMr),e(_4,qMr),e(_4,pJ),e(pJ,jMr),e(_4,DMr),e(q,GMr),e(q,u4),e(u4,c8e),e(c8e,OMr),e(u4,VMr),e(u4,_J),e(_J,XMr),e(u4,zMr),e(xr,QMr),M(b4,xr,null),b(f,Eze,u),b(f,cc,u),e(cc,v4),e(v4,f8e),M(Z9,f8e,null),e(cc,WMr),e(cc,m8e),e(m8e,HMr),b(f,Cze,u),b(f,rr,u),M(ex,rr,null),e(rr,UMr),e(rr,fc),e(fc,JMr),e(fc,uJ),e(uJ,YMr),e(fc,KMr),e(fc,bJ),e(bJ,ZMr),e(fc,e4r),e(rr,o4r),e(rr,ox),e(ox,r4r),e(ox,g8e),e(g8e,t4r),e(ox,a4r),e(rr,n4r),e(rr,Pt),M(rx,Pt,null),e(Pt,s4r),e(Pt,h8e),e(h8e,l4r),e(Pt,i4r),e(Pt,mc),e(mc,d4r),e(mc,p8e),e(p8e,c4r),e(mc,f4r),e(mc,vJ),e(vJ,m4r),e(mc,g4r),e(Pt,h4r),M(F4,Pt,null),e(rr,p4r),e(rr,$r),M(tx,$r,null),e($r,_4r),e($r,_8e),e(_8e,u4r),e($r,b4r),e($r,ln),e(ln,v4r),e(ln,u8e),e(u8e,F4r),e(ln,T4r),e(ln,b8e),e(b8e,M4r),e(ln,E4r),e(ln,v8e),e(v8e,C4r),e(ln,w4r),e($r,A4r),e($r,se),e(se,T4),e(T4,F8e),e(F8e,L4r),e(T4,y4r),e(T4,FJ),e(FJ,x4r),e(T4,$4r),e(se,k4r),e(se,M4),e(M4,T8e),e(T8e,S4r),e(M4,R4r),e(M4,TJ),e(TJ,P4r),e(M4,B4r),e(se,N4r),e(se,E4),e(E4,M8e),e(M8e,I4r),e(E4,q4r),e(E4,MJ),e(MJ,j4r),e(E4,D4r),e(se,G4r),e(se,C4),e(C4,E8e),e(E8e,O4r),e(C4,V4r),e(C4,EJ),e(EJ,X4r),e(C4,z4r),e(se,Q4r),e(se,w4),e(w4,C8e),e(C8e,W4r),e(w4,H4r),e(w4,CJ),e(CJ,U4r),e(w4,J4r),e(se,Y4r),e(se,A4),e(A4,w8e),e(w8e,K4r),e(A4,Z4r),e(A4,wJ),e(wJ,eEr),e(A4,oEr),e(se,rEr),e(se,L4),e(L4,A8e),e(A8e,tEr),e(L4,aEr),e(L4,AJ),e(AJ,nEr),e(L4,sEr),e(se,lEr),e(se,y4),e(y4,L8e),e(L8e,iEr),e(y4,dEr),e(y4,LJ),e(LJ,cEr),e(y4,fEr),e(se,mEr),e(se,x4),e(x4,y8e),e(y8e,gEr),e(x4,hEr),e(x4,yJ),e(yJ,pEr),e(x4,_Er),e(se,uEr),e(se,$4),e($4,x8e),e(x8e,bEr),e($4,vEr),e($4,xJ),e(xJ,FEr),e($4,TEr),e(se,MEr),e(se,k4),e(k4,$8e),e($8e,EEr),e(k4,CEr),e(k4,$J),e($J,wEr),e(k4,AEr),e(se,LEr),e(se,S4),e(S4,k8e),e(k8e,yEr),e(S4,xEr),e(S4,kJ),e(kJ,$Er),e(S4,kEr),e(se,SEr),e(se,R4),e(R4,S8e),e(S8e,REr),e(R4,PEr),e(R4,SJ),e(SJ,BEr),e(R4,NEr),e(se,IEr),e(se,P4),e(P4,R8e),e(R8e,qEr),e(P4,jEr),e(P4,RJ),e(RJ,DEr),e(P4,GEr),e(se,OEr),e(se,B4),e(B4,P8e),e(P8e,VEr),e(B4,XEr),e(B4,PJ),e(PJ,zEr),e(B4,QEr),e(se,WEr),e(se,N4),e(N4,B8e),e(B8e,HEr),e(N4,UEr),e(N4,BJ),e(BJ,JEr),e(N4,YEr),e(se,KEr),e(se,I4),e(I4,N8e),e(N8e,ZEr),e(I4,eCr),e(I4,NJ),e(NJ,oCr),e(I4,rCr),e(se,tCr),e(se,q4),e(q4,I8e),e(I8e,aCr),e(q4,nCr),e(q4,IJ),e(IJ,sCr),e(q4,lCr),e(se,iCr),e(se,j4),e(j4,q8e),e(q8e,dCr),e(j4,cCr),e(j4,qJ),e(qJ,fCr),e(j4,mCr),e(se,gCr),e(se,D4),e(D4,j8e),e(j8e,hCr),e(D4,pCr),e(D4,jJ),e(jJ,_Cr),e(D4,uCr),e(se,bCr),e(se,G4),e(G4,D8e),e(D8e,vCr),e(G4,FCr),e(G4,DJ),e(DJ,TCr),e(G4,MCr),e(se,ECr),e(se,O4),e(O4,G8e),e(G8e,CCr),e(O4,wCr),e(O4,GJ),e(GJ,ACr),e(O4,LCr),e(se,yCr),e(se,V4),e(V4,O8e),e(O8e,xCr),e(V4,$Cr),e(V4,OJ),e(OJ,kCr),e(V4,SCr),e($r,RCr),M(X4,$r,null),b(f,wze,u),b(f,gc,u),e(gc,z4),e(z4,V8e),M(ax,V8e,null),e(gc,PCr),e(gc,X8e),e(X8e,BCr),b(f,Aze,u),b(f,tr,u),M(nx,tr,null),e(tr,NCr),e(tr,hc),e(hc,ICr),e(hc,VJ),e(VJ,qCr),e(hc,jCr),e(hc,XJ),e(XJ,DCr),e(hc,GCr),e(tr,OCr),e(tr,sx),e(sx,VCr),e(sx,z8e),e(z8e,XCr),e(sx,zCr),e(tr,QCr),e(tr,Bt),M(lx,Bt,null),e(Bt,WCr),e(Bt,Q8e),e(Q8e,HCr),e(Bt,UCr),e(Bt,pc),e(pc,JCr),e(pc,W8e),e(W8e,YCr),e(pc,KCr),e(pc,zJ),e(zJ,ZCr),e(pc,e5r),e(Bt,o5r),M(Q4,Bt,null),e(tr,r5r),e(tr,kr),M(ix,kr,null),e(kr,t5r),e(kr,H8e),e(H8e,a5r),e(kr,n5r),e(kr,dn),e(dn,s5r),e(dn,U8e),e(U8e,l5r),e(dn,i5r),e(dn,J8e),e(J8e,d5r),e(dn,c5r),e(dn,Y8e),e(Y8e,f5r),e(dn,m5r),e(kr,g5r),e(kr,Me),e(Me,W4),e(W4,K8e),e(K8e,h5r),e(W4,p5r),e(W4,QJ),e(QJ,_5r),e(W4,u5r),e(Me,b5r),e(Me,H4),e(H4,Z8e),e(Z8e,v5r),e(H4,F5r),e(H4,WJ),e(WJ,T5r),e(H4,M5r),e(Me,E5r),e(Me,U4),e(U4,eMe),e(eMe,C5r),e(U4,w5r),e(U4,HJ),e(HJ,A5r),e(U4,L5r),e(Me,y5r),e(Me,J4),e(J4,oMe),e(oMe,x5r),e(J4,$5r),e(J4,UJ),e(UJ,k5r),e(J4,S5r),e(Me,R5r),e(Me,Y4),e(Y4,rMe),e(rMe,P5r),e(Y4,B5r),e(Y4,JJ),e(JJ,N5r),e(Y4,I5r),e(Me,q5r),e(Me,K4),e(K4,tMe),e(tMe,j5r),e(K4,D5r),e(K4,YJ),e(YJ,G5r),e(K4,O5r),e(Me,V5r),e(Me,Z4),e(Z4,aMe),e(aMe,X5r),e(Z4,z5r),e(Z4,KJ),e(KJ,Q5r),e(Z4,W5r),e(Me,H5r),e(Me,eE),e(eE,nMe),e(nMe,U5r),e(eE,J5r),e(eE,ZJ),e(ZJ,Y5r),e(eE,K5r),e(Me,Z5r),e(Me,oE),e(oE,sMe),e(sMe,e0r),e(oE,o0r),e(oE,eY),e(eY,r0r),e(oE,t0r),e(Me,a0r),e(Me,rE),e(rE,lMe),e(lMe,n0r),e(rE,s0r),e(rE,oY),e(oY,l0r),e(rE,i0r),e(Me,d0r),e(Me,tE),e(tE,iMe),e(iMe,c0r),e(tE,f0r),e(tE,rY),e(rY,m0r),e(tE,g0r),e(Me,h0r),e(Me,aE),e(aE,dMe),e(dMe,p0r),e(aE,_0r),e(aE,tY),e(tY,u0r),e(aE,b0r),e(Me,v0r),e(Me,nE),e(nE,cMe),e(cMe,F0r),e(nE,T0r),e(nE,aY),e(aY,M0r),e(nE,E0r),e(kr,C0r),M(sE,kr,null),b(f,Lze,u),b(f,_c,u),e(_c,lE),e(lE,fMe),M(dx,fMe,null),e(_c,w0r),e(_c,mMe),e(mMe,A0r),b(f,yze,u),b(f,ar,u),M(cx,ar,null),e(ar,L0r),e(ar,uc),e(uc,y0r),e(uc,nY),e(nY,x0r),e(uc,$0r),e(uc,sY),e(sY,k0r),e(uc,S0r),e(ar,R0r),e(ar,fx),e(fx,P0r),e(fx,gMe),e(gMe,B0r),e(fx,N0r),e(ar,I0r),e(ar,Nt),M(mx,Nt,null),e(Nt,q0r),e(Nt,hMe),e(hMe,j0r),e(Nt,D0r),e(Nt,bc),e(bc,G0r),e(bc,pMe),e(pMe,O0r),e(bc,V0r),e(bc,lY),e(lY,X0r),e(bc,z0r),e(Nt,Q0r),M(iE,Nt,null),e(ar,W0r),e(ar,Sr),M(gx,Sr,null),e(Sr,H0r),e(Sr,_Me),e(_Me,U0r),e(Sr,J0r),e(Sr,cn),e(cn,Y0r),e(cn,uMe),e(uMe,K0r),e(cn,Z0r),e(cn,bMe),e(bMe,ewr),e(cn,owr),e(cn,vMe),e(vMe,rwr),e(cn,twr),e(Sr,awr),e(Sr,Qe),e(Qe,dE),e(dE,FMe),e(FMe,nwr),e(dE,swr),e(dE,iY),e(iY,lwr),e(dE,iwr),e(Qe,dwr),e(Qe,cE),e(cE,TMe),e(TMe,cwr),e(cE,fwr),e(cE,dY),e(dY,mwr),e(cE,gwr),e(Qe,hwr),e(Qe,Ks),e(Ks,MMe),e(MMe,pwr),e(Ks,_wr),e(Ks,cY),e(cY,uwr),e(Ks,bwr),e(Ks,fY),e(fY,vwr),e(Ks,Fwr),e(Qe,Twr),e(Qe,fE),e(fE,EMe),e(EMe,Mwr),e(fE,Ewr),e(fE,mY),e(mY,Cwr),e(fE,wwr),e(Qe,Awr),e(Qe,mE),e(mE,CMe),e(CMe,Lwr),e(mE,ywr),e(mE,gY),e(gY,xwr),e(mE,$wr),e(Qe,kwr),e(Qe,gE),e(gE,wMe),e(wMe,Swr),e(gE,Rwr),e(gE,hY),e(hY,Pwr),e(gE,Bwr),e(Qe,Nwr),e(Qe,hE),e(hE,AMe),e(AMe,Iwr),e(hE,qwr),e(hE,pY),e(pY,jwr),e(hE,Dwr),e(Sr,Gwr),M(pE,Sr,null),b(f,xze,u),b(f,vc,u),e(vc,_E),e(_E,LMe),M(hx,LMe,null),e(vc,Owr),e(vc,yMe),e(yMe,Vwr),b(f,$ze,u),b(f,nr,u),M(px,nr,null),e(nr,Xwr),e(nr,Fc),e(Fc,zwr),e(Fc,_Y),e(_Y,Qwr),e(Fc,Wwr),e(Fc,uY),e(uY,Hwr),e(Fc,Uwr),e(nr,Jwr),e(nr,_x),e(_x,Ywr),e(_x,xMe),e(xMe,Kwr),e(_x,Zwr),e(nr,eAr),e(nr,It),M(ux,It,null),e(It,oAr),e(It,$Me),e($Me,rAr),e(It,tAr),e(It,Tc),e(Tc,aAr),e(Tc,kMe),e(kMe,nAr),e(Tc,sAr),e(Tc,bY),e(bY,lAr),e(Tc,iAr),e(It,dAr),M(uE,It,null),e(nr,cAr),e(nr,Rr),M(bx,Rr,null),e(Rr,fAr),e(Rr,SMe),e(SMe,mAr),e(Rr,gAr),e(Rr,fn),e(fn,hAr),e(fn,RMe),e(RMe,pAr),e(fn,_Ar),e(fn,PMe),e(PMe,uAr),e(fn,bAr),e(fn,BMe),e(BMe,vAr),e(fn,FAr),e(Rr,TAr),e(Rr,ie),e(ie,bE),e(bE,NMe),e(NMe,MAr),e(bE,EAr),e(bE,vY),e(vY,CAr),e(bE,wAr),e(ie,AAr),e(ie,vE),e(vE,IMe),e(IMe,LAr),e(vE,yAr),e(vE,FY),e(FY,xAr),e(vE,$Ar),e(ie,kAr),e(ie,FE),e(FE,qMe),e(qMe,SAr),e(FE,RAr),e(FE,TY),e(TY,PAr),e(FE,BAr),e(ie,NAr),e(ie,TE),e(TE,jMe),e(jMe,IAr),e(TE,qAr),e(TE,MY),e(MY,jAr),e(TE,DAr),e(ie,GAr),e(ie,ME),e(ME,DMe),e(DMe,OAr),e(ME,VAr),e(ME,EY),e(EY,XAr),e(ME,zAr),e(ie,QAr),e(ie,EE),e(EE,GMe),e(GMe,WAr),e(EE,HAr),e(EE,CY),e(CY,UAr),e(EE,JAr),e(ie,YAr),e(ie,CE),e(CE,OMe),e(OMe,KAr),e(CE,ZAr),e(CE,wY),e(wY,e6r),e(CE,o6r),e(ie,r6r),e(ie,wE),e(wE,VMe),e(VMe,t6r),e(wE,a6r),e(wE,AY),e(AY,n6r),e(wE,s6r),e(ie,l6r),e(ie,AE),e(AE,XMe),e(XMe,i6r),e(AE,d6r),e(AE,LY),e(LY,c6r),e(AE,f6r),e(ie,m6r),e(ie,LE),e(LE,zMe),e(zMe,g6r),e(LE,h6r),e(LE,yY),e(yY,p6r),e(LE,_6r),e(ie,u6r),e(ie,yE),e(yE,QMe),e(QMe,b6r),e(yE,v6r),e(yE,xY),e(xY,F6r),e(yE,T6r),e(ie,M6r),e(ie,xE),e(xE,WMe),e(WMe,E6r),e(xE,C6r),e(xE,$Y),e($Y,w6r),e(xE,A6r),e(ie,L6r),e(ie,$E),e($E,HMe),e(HMe,y6r),e($E,x6r),e($E,kY),e(kY,$6r),e($E,k6r),e(ie,S6r),e(ie,kE),e(kE,UMe),e(UMe,R6r),e(kE,P6r),e(kE,SY),e(SY,B6r),e(kE,N6r),e(ie,I6r),e(ie,SE),e(SE,JMe),e(JMe,q6r),e(SE,j6r),e(SE,RY),e(RY,D6r),e(SE,G6r),e(ie,O6r),e(ie,RE),e(RE,YMe),e(YMe,V6r),e(RE,X6r),e(RE,PY),e(PY,z6r),e(RE,Q6r),e(ie,W6r),e(ie,PE),e(PE,KMe),e(KMe,H6r),e(PE,U6r),e(PE,BY),e(BY,J6r),e(PE,Y6r),e(ie,K6r),e(ie,BE),e(BE,ZMe),e(ZMe,Z6r),e(BE,e7r),e(BE,NY),e(NY,o7r),e(BE,r7r),e(ie,t7r),e(ie,NE),e(NE,e4e),e(e4e,a7r),e(NE,n7r),e(NE,IY),e(IY,s7r),e(NE,l7r),e(ie,i7r),e(ie,IE),e(IE,o4e),e(o4e,d7r),e(IE,c7r),e(IE,qY),e(qY,f7r),e(IE,m7r),e(Rr,g7r),M(qE,Rr,null),b(f,kze,u),b(f,Mc,u),e(Mc,jE),e(jE,r4e),M(vx,r4e,null),e(Mc,h7r),e(Mc,t4e),e(t4e,p7r),b(f,Sze,u),b(f,sr,u),M(Fx,sr,null),e(sr,_7r),e(sr,Ec),e(Ec,u7r),e(Ec,jY),e(jY,b7r),e(Ec,v7r),e(Ec,DY),e(DY,F7r),e(Ec,T7r),e(sr,M7r),e(sr,Tx),e(Tx,E7r),e(Tx,a4e),e(a4e,C7r),e(Tx,w7r),e(sr,A7r),e(sr,qt),M(Mx,qt,null),e(qt,L7r),e(qt,n4e),e(n4e,y7r),e(qt,x7r),e(qt,Cc),e(Cc,$7r),e(Cc,s4e),e(s4e,k7r),e(Cc,S7r),e(Cc,GY),e(GY,R7r),e(Cc,P7r),e(qt,B7r),M(DE,qt,null),e(sr,N7r),e(sr,Pr),M(Ex,Pr,null),e(Pr,I7r),e(Pr,l4e),e(l4e,q7r),e(Pr,j7r),e(Pr,mn),e(mn,D7r),e(mn,i4e),e(i4e,G7r),e(mn,O7r),e(mn,d4e),e(d4e,V7r),e(mn,X7r),e(mn,c4e),e(c4e,z7r),e(mn,Q7r),e(Pr,W7r),e(Pr,ye),e(ye,GE),e(GE,f4e),e(f4e,H7r),e(GE,U7r),e(GE,OY),e(OY,J7r),e(GE,Y7r),e(ye,K7r),e(ye,OE),e(OE,m4e),e(m4e,Z7r),e(OE,eLr),e(OE,VY),e(VY,oLr),e(OE,rLr),e(ye,tLr),e(ye,VE),e(VE,g4e),e(g4e,aLr),e(VE,nLr),e(VE,XY),e(XY,sLr),e(VE,lLr),e(ye,iLr),e(ye,XE),e(XE,h4e),e(h4e,dLr),e(XE,cLr),e(XE,zY),e(zY,fLr),e(XE,mLr),e(ye,gLr),e(ye,zE),e(zE,p4e),e(p4e,hLr),e(zE,pLr),e(zE,QY),e(QY,_Lr),e(zE,uLr),e(ye,bLr),e(ye,QE),e(QE,_4e),e(_4e,vLr),e(QE,FLr),e(QE,WY),e(WY,TLr),e(QE,MLr),e(ye,ELr),e(ye,WE),e(WE,u4e),e(u4e,CLr),e(WE,wLr),e(WE,HY),e(HY,ALr),e(WE,LLr),e(ye,yLr),e(ye,HE),e(HE,b4e),e(b4e,xLr),e(HE,$Lr),e(HE,UY),e(UY,kLr),e(HE,SLr),e(ye,RLr),e(ye,UE),e(UE,v4e),e(v4e,PLr),e(UE,BLr),e(UE,JY),e(JY,NLr),e(UE,ILr),e(ye,qLr),e(ye,JE),e(JE,F4e),e(F4e,jLr),e(JE,DLr),e(JE,YY),e(YY,GLr),e(JE,OLr),e(Pr,VLr),M(YE,Pr,null),b(f,Rze,u),b(f,wc,u),e(wc,KE),e(KE,T4e),M(Cx,T4e,null),e(wc,XLr),e(wc,M4e),e(M4e,zLr),b(f,Pze,u),b(f,lr,u),M(wx,lr,null),e(lr,QLr),e(lr,Ac),e(Ac,WLr),e(Ac,KY),e(KY,HLr),e(Ac,ULr),e(Ac,ZY),e(ZY,JLr),e(Ac,YLr),e(lr,KLr),e(lr,Ax),e(Ax,ZLr),e(Ax,E4e),e(E4e,eyr),e(Ax,oyr),e(lr,ryr),e(lr,jt),M(Lx,jt,null),e(jt,tyr),e(jt,C4e),e(C4e,ayr),e(jt,nyr),e(jt,Lc),e(Lc,syr),e(Lc,w4e),e(w4e,lyr),e(Lc,iyr),e(Lc,eK),e(eK,dyr),e(Lc,cyr),e(jt,fyr),M(ZE,jt,null),e(lr,myr),e(lr,Br),M(yx,Br,null),e(Br,gyr),e(Br,A4e),e(A4e,hyr),e(Br,pyr),e(Br,gn),e(gn,_yr),e(gn,L4e),e(L4e,uyr),e(gn,byr),e(gn,y4e),e(y4e,vyr),e(gn,Fyr),e(gn,x4e),e(x4e,Tyr),e(gn,Myr),e(Br,Eyr),e(Br,te),e(te,eC),e(eC,$4e),e($4e,Cyr),e(eC,wyr),e(eC,oK),e(oK,Ayr),e(eC,Lyr),e(te,yyr),e(te,oC),e(oC,k4e),e(k4e,xyr),e(oC,$yr),e(oC,rK),e(rK,kyr),e(oC,Syr),e(te,Ryr),e(te,rC),e(rC,S4e),e(S4e,Pyr),e(rC,Byr),e(rC,tK),e(tK,Nyr),e(rC,Iyr),e(te,qyr),e(te,tC),e(tC,R4e),e(R4e,jyr),e(tC,Dyr),e(tC,aK),e(aK,Gyr),e(tC,Oyr),e(te,Vyr),e(te,aC),e(aC,P4e),e(P4e,Xyr),e(aC,zyr),e(aC,nK),e(nK,Qyr),e(aC,Wyr),e(te,Hyr),e(te,nC),e(nC,B4e),e(B4e,Uyr),e(nC,Jyr),e(nC,sK),e(sK,Yyr),e(nC,Kyr),e(te,Zyr),e(te,sC),e(sC,N4e),e(N4e,e9r),e(sC,o9r),e(sC,lK),e(lK,r9r),e(sC,t9r),e(te,a9r),e(te,lC),e(lC,I4e),e(I4e,n9r),e(lC,s9r),e(lC,iK),e(iK,l9r),e(lC,i9r),e(te,d9r),e(te,iC),e(iC,q4e),e(q4e,c9r),e(iC,f9r),e(iC,dK),e(dK,m9r),e(iC,g9r),e(te,h9r),e(te,dC),e(dC,j4e),e(j4e,p9r),e(dC,_9r),e(dC,cK),e(cK,u9r),e(dC,b9r),e(te,v9r),e(te,cC),e(cC,D4e),e(D4e,F9r),e(cC,T9r),e(cC,fK),e(fK,M9r),e(cC,E9r),e(te,C9r),e(te,fC),e(fC,G4e),e(G4e,w9r),e(fC,A9r),e(fC,mK),e(mK,L9r),e(fC,y9r),e(te,x9r),e(te,mC),e(mC,O4e),e(O4e,$9r),e(mC,k9r),e(mC,gK),e(gK,S9r),e(mC,R9r),e(te,P9r),e(te,gC),e(gC,V4e),e(V4e,B9r),e(gC,N9r),e(gC,hK),e(hK,I9r),e(gC,q9r),e(te,j9r),e(te,hC),e(hC,X4e),e(X4e,D9r),e(hC,G9r),e(hC,pK),e(pK,O9r),e(hC,V9r),e(te,X9r),e(te,pC),e(pC,z4e),e(z4e,z9r),e(pC,Q9r),e(pC,_K),e(_K,W9r),e(pC,H9r),e(te,U9r),e(te,_C),e(_C,Q4e),e(Q4e,J9r),e(_C,Y9r),e(_C,uK),e(uK,K9r),e(_C,Z9r),e(te,exr),e(te,uC),e(uC,W4e),e(W4e,oxr),e(uC,rxr),e(uC,bK),e(bK,txr),e(uC,axr),e(te,nxr),e(te,bC),e(bC,H4e),e(H4e,sxr),e(bC,lxr),e(bC,vK),e(vK,ixr),e(bC,dxr),e(te,cxr),e(te,vC),e(vC,U4e),e(U4e,fxr),e(vC,mxr),e(vC,FK),e(FK,gxr),e(vC,hxr),e(te,pxr),e(te,FC),e(FC,J4e),e(J4e,_xr),e(FC,uxr),e(FC,TK),e(TK,bxr),e(FC,vxr),e(te,Fxr),e(te,TC),e(TC,Y4e),e(Y4e,Txr),e(TC,Mxr),e(TC,MK),e(MK,Exr),e(TC,Cxr),e(te,wxr),e(te,MC),e(MC,K4e),e(K4e,Axr),e(MC,Lxr),e(MC,EK),e(EK,yxr),e(MC,xxr),e(te,$xr),e(te,EC),e(EC,Z4e),e(Z4e,kxr),e(EC,Sxr),e(EC,CK),e(CK,Rxr),e(EC,Pxr),e(te,Bxr),e(te,CC),e(CC,eEe),e(eEe,Nxr),e(CC,Ixr),e(CC,wK),e(wK,qxr),e(CC,jxr),e(te,Dxr),e(te,wC),e(wC,oEe),e(oEe,Gxr),e(wC,Oxr),e(wC,AK),e(AK,Vxr),e(wC,Xxr),e(Br,zxr),M(AC,Br,null),b(f,Bze,u),b(f,yc,u),e(yc,LC),e(LC,rEe),M(xx,rEe,null),e(yc,Qxr),e(yc,tEe),e(tEe,Wxr),b(f,Nze,u),b(f,ir,u),M($x,ir,null),e(ir,Hxr),e(ir,xc),e(xc,Uxr),e(xc,LK),e(LK,Jxr),e(xc,Yxr),e(xc,yK),e(yK,Kxr),e(xc,Zxr),e(ir,e$r),e(ir,kx),e(kx,o$r),e(kx,aEe),e(aEe,r$r),e(kx,t$r),e(ir,a$r),e(ir,Dt),M(Sx,Dt,null),e(Dt,n$r),e(Dt,nEe),e(nEe,s$r),e(Dt,l$r),e(Dt,$c),e($c,i$r),e($c,sEe),e(sEe,d$r),e($c,c$r),e($c,xK),e(xK,f$r),e($c,m$r),e(Dt,g$r),M(yC,Dt,null),e(ir,h$r),e(ir,Nr),M(Rx,Nr,null),e(Nr,p$r),e(Nr,lEe),e(lEe,_$r),e(Nr,u$r),e(Nr,hn),e(hn,b$r),e(hn,iEe),e(iEe,v$r),e(hn,F$r),e(hn,dEe),e(dEe,T$r),e(hn,M$r),e(hn,cEe),e(cEe,E$r),e(hn,C$r),e(Nr,w$r),e(Nr,ue),e(ue,xC),e(xC,fEe),e(fEe,A$r),e(xC,L$r),e(xC,$K),e($K,y$r),e(xC,x$r),e(ue,$$r),e(ue,$C),e($C,mEe),e(mEe,k$r),e($C,S$r),e($C,kK),e(kK,R$r),e($C,P$r),e(ue,B$r),e(ue,kC),e(kC,gEe),e(gEe,N$r),e(kC,I$r),e(kC,SK),e(SK,q$r),e(kC,j$r),e(ue,D$r),e(ue,SC),e(SC,hEe),e(hEe,G$r),e(SC,O$r),e(SC,RK),e(RK,V$r),e(SC,X$r),e(ue,z$r),e(ue,RC),e(RC,pEe),e(pEe,Q$r),e(RC,W$r),e(RC,PK),e(PK,H$r),e(RC,U$r),e(ue,J$r),e(ue,PC),e(PC,_Ee),e(_Ee,Y$r),e(PC,K$r),e(PC,BK),e(BK,Z$r),e(PC,ekr),e(ue,okr),e(ue,BC),e(BC,uEe),e(uEe,rkr),e(BC,tkr),e(BC,NK),e(NK,akr),e(BC,nkr),e(ue,skr),e(ue,NC),e(NC,bEe),e(bEe,lkr),e(NC,ikr),e(NC,IK),e(IK,dkr),e(NC,ckr),e(ue,fkr),e(ue,IC),e(IC,vEe),e(vEe,mkr),e(IC,gkr),e(IC,qK),e(qK,hkr),e(IC,pkr),e(ue,_kr),e(ue,qC),e(qC,FEe),e(FEe,ukr),e(qC,bkr),e(qC,jK),e(jK,vkr),e(qC,Fkr),e(ue,Tkr),e(ue,jC),e(jC,TEe),e(TEe,Mkr),e(jC,Ekr),e(jC,DK),e(DK,Ckr),e(jC,wkr),e(ue,Akr),e(ue,DC),e(DC,MEe),e(MEe,Lkr),e(DC,ykr),e(DC,GK),e(GK,xkr),e(DC,$kr),e(ue,kkr),e(ue,GC),e(GC,EEe),e(EEe,Skr),e(GC,Rkr),e(GC,OK),e(OK,Pkr),e(GC,Bkr),e(ue,Nkr),e(ue,OC),e(OC,CEe),e(CEe,Ikr),e(OC,qkr),e(OC,VK),e(VK,jkr),e(OC,Dkr),e(ue,Gkr),e(ue,VC),e(VC,wEe),e(wEe,Okr),e(VC,Vkr),e(VC,XK),e(XK,Xkr),e(VC,zkr),e(ue,Qkr),e(ue,XC),e(XC,AEe),e(AEe,Wkr),e(XC,Hkr),e(XC,zK),e(zK,Ukr),e(XC,Jkr),e(ue,Ykr),e(ue,zC),e(zC,LEe),e(LEe,Kkr),e(zC,Zkr),e(zC,QK),e(QK,eSr),e(zC,oSr),e(Nr,rSr),M(QC,Nr,null),b(f,Ize,u),b(f,kc,u),e(kc,WC),e(WC,yEe),M(Px,yEe,null),e(kc,tSr),e(kc,xEe),e(xEe,aSr),b(f,qze,u),b(f,dr,u),M(Bx,dr,null),e(dr,nSr),e(dr,Sc),e(Sc,sSr),e(Sc,WK),e(WK,lSr),e(Sc,iSr),e(Sc,HK),e(HK,dSr),e(Sc,cSr),e(dr,fSr),e(dr,Nx),e(Nx,mSr),e(Nx,$Ee),e($Ee,gSr),e(Nx,hSr),e(dr,pSr),e(dr,Gt),M(Ix,Gt,null),e(Gt,_Sr),e(Gt,kEe),e(kEe,uSr),e(Gt,bSr),e(Gt,Rc),e(Rc,vSr),e(Rc,SEe),e(SEe,FSr),e(Rc,TSr),e(Rc,UK),e(UK,MSr),e(Rc,ESr),e(Gt,CSr),M(HC,Gt,null),e(dr,wSr),e(dr,Ir),M(qx,Ir,null),e(Ir,ASr),e(Ir,REe),e(REe,LSr),e(Ir,ySr),e(Ir,pn),e(pn,xSr),e(pn,PEe),e(PEe,$Sr),e(pn,kSr),e(pn,BEe),e(BEe,SSr),e(pn,RSr),e(pn,NEe),e(NEe,PSr),e(pn,BSr),e(Ir,NSr),e(Ir,jx),e(jx,UC),e(UC,IEe),e(IEe,ISr),e(UC,qSr),e(UC,JK),e(JK,jSr),e(UC,DSr),e(jx,GSr),e(jx,JC),e(JC,qEe),e(qEe,OSr),e(JC,VSr),e(JC,YK),e(YK,XSr),e(JC,zSr),e(Ir,QSr),M(YC,Ir,null),b(f,jze,u),b(f,Pc,u),e(Pc,KC),e(KC,jEe),M(Dx,jEe,null),e(Pc,WSr),e(Pc,DEe),e(DEe,HSr),b(f,Dze,u),b(f,cr,u),M(Gx,cr,null),e(cr,USr),e(cr,Bc),e(Bc,JSr),e(Bc,KK),e(KK,YSr),e(Bc,KSr),e(Bc,ZK),e(ZK,ZSr),e(Bc,eRr),e(cr,oRr),e(cr,Ox),e(Ox,rRr),e(Ox,GEe),e(GEe,tRr),e(Ox,aRr),e(cr,nRr),e(cr,Ot),M(Vx,Ot,null),e(Ot,sRr),e(Ot,OEe),e(OEe,lRr),e(Ot,iRr),e(Ot,Nc),e(Nc,dRr),e(Nc,VEe),e(VEe,cRr),e(Nc,fRr),e(Nc,eZ),e(eZ,mRr),e(Nc,gRr),e(Ot,hRr),M(ZC,Ot,null),e(cr,pRr),e(cr,qr),M(Xx,qr,null),e(qr,_Rr),e(qr,XEe),e(XEe,uRr),e(qr,bRr),e(qr,_n),e(_n,vRr),e(_n,zEe),e(zEe,FRr),e(_n,TRr),e(_n,QEe),e(QEe,MRr),e(_n,ERr),e(_n,WEe),e(WEe,CRr),e(_n,wRr),e(qr,ARr),e(qr,HEe),e(HEe,e5),e(e5,UEe),e(UEe,LRr),e(e5,yRr),e(e5,oZ),e(oZ,xRr),e(e5,$Rr),e(qr,kRr),M(o5,qr,null),b(f,Gze,u),b(f,Ic,u),e(Ic,r5),e(r5,JEe),M(zx,JEe,null),e(Ic,SRr),e(Ic,YEe),e(YEe,RRr),b(f,Oze,u),b(f,fr,u),M(Qx,fr,null),e(fr,PRr),e(fr,qc),e(qc,BRr),e(qc,rZ),e(rZ,NRr),e(qc,IRr),e(qc,tZ),e(tZ,qRr),e(qc,jRr),e(fr,DRr),e(fr,Wx),e(Wx,GRr),e(Wx,KEe),e(KEe,ORr),e(Wx,VRr),e(fr,XRr),e(fr,Vt),M(Hx,Vt,null),e(Vt,zRr),e(Vt,ZEe),e(ZEe,QRr),e(Vt,WRr),e(Vt,jc),e(jc,HRr),e(jc,eCe),e(eCe,URr),e(jc,JRr),e(jc,aZ),e(aZ,YRr),e(jc,KRr),e(Vt,ZRr),M(t5,Vt,null),e(fr,ePr),e(fr,jr),M(Ux,jr,null),e(jr,oPr),e(jr,oCe),e(oCe,rPr),e(jr,tPr),e(jr,un),e(un,aPr),e(un,rCe),e(rCe,nPr),e(un,sPr),e(un,tCe),e(tCe,lPr),e(un,iPr),e(un,aCe),e(aCe,dPr),e(un,cPr),e(jr,fPr),e(jr,de),e(de,a5),e(a5,nCe),e(nCe,mPr),e(a5,gPr),e(a5,nZ),e(nZ,hPr),e(a5,pPr),e(de,_Pr),e(de,n5),e(n5,sCe),e(sCe,uPr),e(n5,bPr),e(n5,sZ),e(sZ,vPr),e(n5,FPr),e(de,TPr),e(de,s5),e(s5,lCe),e(lCe,MPr),e(s5,EPr),e(s5,lZ),e(lZ,CPr),e(s5,wPr),e(de,APr),e(de,l5),e(l5,iCe),e(iCe,LPr),e(l5,yPr),e(l5,iZ),e(iZ,xPr),e(l5,$Pr),e(de,kPr),e(de,i5),e(i5,dCe),e(dCe,SPr),e(i5,RPr),e(i5,dZ),e(dZ,PPr),e(i5,BPr),e(de,NPr),e(de,d5),e(d5,cCe),e(cCe,IPr),e(d5,qPr),e(d5,cZ),e(cZ,jPr),e(d5,DPr),e(de,GPr),e(de,c5),e(c5,fCe),e(fCe,OPr),e(c5,VPr),e(c5,fZ),e(fZ,XPr),e(c5,zPr),e(de,QPr),e(de,f5),e(f5,mCe),e(mCe,WPr),e(f5,HPr),e(f5,mZ),e(mZ,UPr),e(f5,JPr),e(de,YPr),e(de,m5),e(m5,gCe),e(gCe,KPr),e(m5,ZPr),e(m5,gZ),e(gZ,eBr),e(m5,oBr),e(de,rBr),e(de,g5),e(g5,hCe),e(hCe,tBr),e(g5,aBr),e(g5,hZ),e(hZ,nBr),e(g5,sBr),e(de,lBr),e(de,h5),e(h5,pCe),e(pCe,iBr),e(h5,dBr),e(h5,pZ),e(pZ,cBr),e(h5,fBr),e(de,mBr),e(de,p5),e(p5,_Ce),e(_Ce,gBr),e(p5,hBr),e(p5,_Z),e(_Z,pBr),e(p5,_Br),e(de,uBr),e(de,_5),e(_5,uCe),e(uCe,bBr),e(_5,vBr),e(_5,uZ),e(uZ,FBr),e(_5,TBr),e(de,MBr),e(de,u5),e(u5,bCe),e(bCe,EBr),e(u5,CBr),e(u5,bZ),e(bZ,wBr),e(u5,ABr),e(de,LBr),e(de,b5),e(b5,vCe),e(vCe,yBr),e(b5,xBr),e(b5,vZ),e(vZ,$Br),e(b5,kBr),e(de,SBr),e(de,v5),e(v5,FCe),e(FCe,RBr),e(v5,PBr),e(v5,FZ),e(FZ,BBr),e(v5,NBr),e(de,IBr),e(de,F5),e(F5,TCe),e(TCe,qBr),e(F5,jBr),e(F5,TZ),e(TZ,DBr),e(F5,GBr),e(de,OBr),e(de,T5),e(T5,MCe),e(MCe,VBr),e(T5,XBr),e(T5,MZ),e(MZ,zBr),e(T5,QBr),e(de,WBr),e(de,M5),e(M5,ECe),e(ECe,HBr),e(M5,UBr),e(M5,EZ),e(EZ,JBr),e(M5,YBr),e(de,KBr),e(de,E5),e(E5,CCe),e(CCe,ZBr),e(E5,eNr),e(E5,CZ),e(CZ,oNr),e(E5,rNr),e(jr,tNr),M(C5,jr,null),b(f,Vze,u),b(f,Dc,u),e(Dc,w5),e(w5,wCe),M(Jx,wCe,null),e(Dc,aNr),e(Dc,ACe),e(ACe,nNr),b(f,Xze,u),b(f,mr,u),M(Yx,mr,null),e(mr,sNr),e(mr,Gc),e(Gc,lNr),e(Gc,wZ),e(wZ,iNr),e(Gc,dNr),e(Gc,AZ),e(AZ,cNr),e(Gc,fNr),e(mr,mNr),e(mr,Kx),e(Kx,gNr),e(Kx,LCe),e(LCe,hNr),e(Kx,pNr),e(mr,_Nr),e(mr,Xt),M(Zx,Xt,null),e(Xt,uNr),e(Xt,yCe),e(yCe,bNr),e(Xt,vNr),e(Xt,Oc),e(Oc,FNr),e(Oc,xCe),e(xCe,TNr),e(Oc,MNr),e(Oc,LZ),e(LZ,ENr),e(Oc,CNr),e(Xt,wNr),M(A5,Xt,null),e(mr,ANr),e(mr,Dr),M(e$,Dr,null),e(Dr,LNr),e(Dr,$Ce),e($Ce,yNr),e(Dr,xNr),e(Dr,bn),e(bn,$Nr),e(bn,kCe),e(kCe,kNr),e(bn,SNr),e(bn,SCe),e(SCe,RNr),e(bn,PNr),e(bn,RCe),e(RCe,BNr),e(bn,NNr),e(Dr,INr),e(Dr,ce),e(ce,L5),e(L5,PCe),e(PCe,qNr),e(L5,jNr),e(L5,yZ),e(yZ,DNr),e(L5,GNr),e(ce,ONr),e(ce,y5),e(y5,BCe),e(BCe,VNr),e(y5,XNr),e(y5,xZ),e(xZ,zNr),e(y5,QNr),e(ce,WNr),e(ce,x5),e(x5,NCe),e(NCe,HNr),e(x5,UNr),e(x5,$Z),e($Z,JNr),e(x5,YNr),e(ce,KNr),e(ce,$5),e($5,ICe),e(ICe,ZNr),e($5,eIr),e($5,kZ),e(kZ,oIr),e($5,rIr),e(ce,tIr),e(ce,k5),e(k5,qCe),e(qCe,aIr),e(k5,nIr),e(k5,SZ),e(SZ,sIr),e(k5,lIr),e(ce,iIr),e(ce,S5),e(S5,jCe),e(jCe,dIr),e(S5,cIr),e(S5,RZ),e(RZ,fIr),e(S5,mIr),e(ce,gIr),e(ce,R5),e(R5,DCe),e(DCe,hIr),e(R5,pIr),e(R5,PZ),e(PZ,_Ir),e(R5,uIr),e(ce,bIr),e(ce,P5),e(P5,GCe),e(GCe,vIr),e(P5,FIr),e(P5,BZ),e(BZ,TIr),e(P5,MIr),e(ce,EIr),e(ce,B5),e(B5,OCe),e(OCe,CIr),e(B5,wIr),e(B5,NZ),e(NZ,AIr),e(B5,LIr),e(ce,yIr),e(ce,N5),e(N5,VCe),e(VCe,xIr),e(N5,$Ir),e(N5,IZ),e(IZ,kIr),e(N5,SIr),e(ce,RIr),e(ce,I5),e(I5,XCe),e(XCe,PIr),e(I5,BIr),e(I5,qZ),e(qZ,NIr),e(I5,IIr),e(ce,qIr),e(ce,q5),e(q5,zCe),e(zCe,jIr),e(q5,DIr),e(q5,jZ),e(jZ,GIr),e(q5,OIr),e(ce,VIr),e(ce,j5),e(j5,QCe),e(QCe,XIr),e(j5,zIr),e(j5,DZ),e(DZ,QIr),e(j5,WIr),e(ce,HIr),e(ce,D5),e(D5,WCe),e(WCe,UIr),e(D5,JIr),e(D5,GZ),e(GZ,YIr),e(D5,KIr),e(ce,ZIr),e(ce,G5),e(G5,HCe),e(HCe,eqr),e(G5,oqr),e(G5,OZ),e(OZ,rqr),e(G5,tqr),e(ce,aqr),e(ce,O5),e(O5,UCe),e(UCe,nqr),e(O5,sqr),e(O5,VZ),e(VZ,lqr),e(O5,iqr),e(ce,dqr),e(ce,V5),e(V5,JCe),e(JCe,cqr),e(V5,fqr),e(V5,XZ),e(XZ,mqr),e(V5,gqr),e(ce,hqr),e(ce,X5),e(X5,YCe),e(YCe,pqr),e(X5,_qr),e(X5,zZ),e(zZ,uqr),e(X5,bqr),e(ce,vqr),e(ce,z5),e(z5,KCe),e(KCe,Fqr),e(z5,Tqr),e(z5,QZ),e(QZ,Mqr),e(z5,Eqr),e(ce,Cqr),e(ce,Q5),e(Q5,ZCe),e(ZCe,wqr),e(Q5,Aqr),e(Q5,WZ),e(WZ,Lqr),e(Q5,yqr),e(Dr,xqr),M(W5,Dr,null),b(f,zze,u),b(f,Vc,u),e(Vc,H5),e(H5,e5e),M(o$,e5e,null),e(Vc,$qr),e(Vc,o5e),e(o5e,kqr),b(f,Qze,u),b(f,gr,u),M(r$,gr,null),e(gr,Sqr),e(gr,Xc),e(Xc,Rqr),e(Xc,HZ),e(HZ,Pqr),e(Xc,Bqr),e(Xc,UZ),e(UZ,Nqr),e(Xc,Iqr),e(gr,qqr),e(gr,t$),e(t$,jqr),e(t$,r5e),e(r5e,Dqr),e(t$,Gqr),e(gr,Oqr),e(gr,zt),M(a$,zt,null),e(zt,Vqr),e(zt,t5e),e(t5e,Xqr),e(zt,zqr),e(zt,zc),e(zc,Qqr),e(zc,a5e),e(a5e,Wqr),e(zc,Hqr),e(zc,JZ),e(JZ,Uqr),e(zc,Jqr),e(zt,Yqr),M(U5,zt,null),e(gr,Kqr),e(gr,Gr),M(n$,Gr,null),e(Gr,Zqr),e(Gr,n5e),e(n5e,ejr),e(Gr,ojr),e(Gr,vn),e(vn,rjr),e(vn,s5e),e(s5e,tjr),e(vn,ajr),e(vn,l5e),e(l5e,njr),e(vn,sjr),e(vn,i5e),e(i5e,ljr),e(vn,ijr),e(Gr,djr),e(Gr,d5e),e(d5e,J5),e(J5,c5e),e(c5e,cjr),e(J5,fjr),e(J5,YZ),e(YZ,mjr),e(J5,gjr),e(Gr,hjr),M(Y5,Gr,null),b(f,Wze,u),b(f,Qc,u),e(Qc,K5),e(K5,f5e),M(s$,f5e,null),e(Qc,pjr),e(Qc,m5e),e(m5e,_jr),b(f,Hze,u),b(f,hr,u),M(l$,hr,null),e(hr,ujr),e(hr,Wc),e(Wc,bjr),e(Wc,KZ),e(KZ,vjr),e(Wc,Fjr),e(Wc,ZZ),e(ZZ,Tjr),e(Wc,Mjr),e(hr,Ejr),e(hr,i$),e(i$,Cjr),e(i$,g5e),e(g5e,wjr),e(i$,Ajr),e(hr,Ljr),e(hr,Qt),M(d$,Qt,null),e(Qt,yjr),e(Qt,h5e),e(h5e,xjr),e(Qt,$jr),e(Qt,Hc),e(Hc,kjr),e(Hc,p5e),e(p5e,Sjr),e(Hc,Rjr),e(Hc,eee),e(eee,Pjr),e(Hc,Bjr),e(Qt,Njr),M(Z5,Qt,null),e(hr,Ijr),e(hr,Or),M(c$,Or,null),e(Or,qjr),e(Or,_5e),e(_5e,jjr),e(Or,Djr),e(Or,Fn),e(Fn,Gjr),e(Fn,u5e),e(u5e,Ojr),e(Fn,Vjr),e(Fn,b5e),e(b5e,Xjr),e(Fn,zjr),e(Fn,v5e),e(v5e,Qjr),e(Fn,Wjr),e(Or,Hjr),e(Or,F5e),e(F5e,e0),e(e0,T5e),e(T5e,Ujr),e(e0,Jjr),e(e0,oee),e(oee,Yjr),e(e0,Kjr),e(Or,Zjr),M(o0,Or,null),b(f,Uze,u),b(f,Uc,u),e(Uc,r0),e(r0,M5e),M(f$,M5e,null),e(Uc,eDr),e(Uc,E5e),e(E5e,oDr),b(f,Jze,u),b(f,pr,u),M(m$,pr,null),e(pr,rDr),e(pr,Jc),e(Jc,tDr),e(Jc,ree),e(ree,aDr),e(Jc,nDr),e(Jc,tee),e(tee,sDr),e(Jc,lDr),e(pr,iDr),e(pr,g$),e(g$,dDr),e(g$,C5e),e(C5e,cDr),e(g$,fDr),e(pr,mDr),e(pr,Wt),M(h$,Wt,null),e(Wt,gDr),e(Wt,w5e),e(w5e,hDr),e(Wt,pDr),e(Wt,Yc),e(Yc,_Dr),e(Yc,A5e),e(A5e,uDr),e(Yc,bDr),e(Yc,aee),e(aee,vDr),e(Yc,FDr),e(Wt,TDr),M(t0,Wt,null),e(pr,MDr),e(pr,Vr),M(p$,Vr,null),e(Vr,EDr),e(Vr,L5e),e(L5e,CDr),e(Vr,wDr),e(Vr,Tn),e(Tn,ADr),e(Tn,y5e),e(y5e,LDr),e(Tn,yDr),e(Tn,x5e),e(x5e,xDr),e(Tn,$Dr),e(Tn,$5e),e($5e,kDr),e(Tn,SDr),e(Vr,RDr),e(Vr,oe),e(oe,a0),e(a0,k5e),e(k5e,PDr),e(a0,BDr),e(a0,nee),e(nee,NDr),e(a0,IDr),e(oe,qDr),e(oe,n0),e(n0,S5e),e(S5e,jDr),e(n0,DDr),e(n0,see),e(see,GDr),e(n0,ODr),e(oe,VDr),e(oe,s0),e(s0,R5e),e(R5e,XDr),e(s0,zDr),e(s0,lee),e(lee,QDr),e(s0,WDr),e(oe,HDr),e(oe,l0),e(l0,P5e),e(P5e,UDr),e(l0,JDr),e(l0,iee),e(iee,YDr),e(l0,KDr),e(oe,ZDr),e(oe,i0),e(i0,B5e),e(B5e,eGr),e(i0,oGr),e(i0,dee),e(dee,rGr),e(i0,tGr),e(oe,aGr),e(oe,d0),e(d0,N5e),e(N5e,nGr),e(d0,sGr),e(d0,cee),e(cee,lGr),e(d0,iGr),e(oe,dGr),e(oe,c0),e(c0,I5e),e(I5e,cGr),e(c0,fGr),e(c0,fee),e(fee,mGr),e(c0,gGr),e(oe,hGr),e(oe,f0),e(f0,q5e),e(q5e,pGr),e(f0,_Gr),e(f0,mee),e(mee,uGr),e(f0,bGr),e(oe,vGr),e(oe,m0),e(m0,j5e),e(j5e,FGr),e(m0,TGr),e(m0,gee),e(gee,MGr),e(m0,EGr),e(oe,CGr),e(oe,g0),e(g0,D5e),e(D5e,wGr),e(g0,AGr),e(g0,hee),e(hee,LGr),e(g0,yGr),e(oe,xGr),e(oe,h0),e(h0,G5e),e(G5e,$Gr),e(h0,kGr),e(h0,pee),e(pee,SGr),e(h0,RGr),e(oe,PGr),e(oe,p0),e(p0,O5e),e(O5e,BGr),e(p0,NGr),e(p0,_ee),e(_ee,IGr),e(p0,qGr),e(oe,jGr),e(oe,_0),e(_0,V5e),e(V5e,DGr),e(_0,GGr),e(_0,uee),e(uee,OGr),e(_0,VGr),e(oe,XGr),e(oe,u0),e(u0,X5e),e(X5e,zGr),e(u0,QGr),e(u0,bee),e(bee,WGr),e(u0,HGr),e(oe,UGr),e(oe,b0),e(b0,z5e),e(z5e,JGr),e(b0,YGr),e(b0,vee),e(vee,KGr),e(b0,ZGr),e(oe,eOr),e(oe,v0),e(v0,Q5e),e(Q5e,oOr),e(v0,rOr),e(v0,Fee),e(Fee,tOr),e(v0,aOr),e(oe,nOr),e(oe,F0),e(F0,W5e),e(W5e,sOr),e(F0,lOr),e(F0,Tee),e(Tee,iOr),e(F0,dOr),e(oe,cOr),e(oe,T0),e(T0,H5e),e(H5e,fOr),e(T0,mOr),e(T0,Mee),e(Mee,gOr),e(T0,hOr),e(oe,pOr),e(oe,M0),e(M0,U5e),e(U5e,_Or),e(M0,uOr),e(M0,Eee),e(Eee,bOr),e(M0,vOr),e(oe,FOr),e(oe,E0),e(E0,J5e),e(J5e,TOr),e(E0,MOr),e(E0,Cee),e(Cee,EOr),e(E0,COr),e(oe,wOr),e(oe,C0),e(C0,Y5e),e(Y5e,AOr),e(C0,LOr),e(C0,wee),e(wee,yOr),e(C0,xOr),e(oe,$Or),e(oe,w0),e(w0,K5e),e(K5e,kOr),e(w0,SOr),e(w0,Aee),e(Aee,ROr),e(w0,POr),e(oe,BOr),e(oe,A0),e(A0,Z5e),e(Z5e,NOr),e(A0,IOr),e(A0,Lee),e(Lee,qOr),e(A0,jOr),e(oe,DOr),e(oe,L0),e(L0,e0e),e(e0e,GOr),e(L0,OOr),e(L0,yee),e(yee,VOr),e(L0,XOr),e(oe,zOr),e(oe,y0),e(y0,o0e),e(o0e,QOr),e(y0,WOr),e(y0,xee),e(xee,HOr),e(y0,UOr),e(oe,JOr),e(oe,x0),e(x0,r0e),e(r0e,YOr),e(x0,KOr),e(x0,$ee),e($ee,ZOr),e(x0,eVr),e(oe,oVr),e(oe,$0),e($0,t0e),e(t0e,rVr),e($0,tVr),e($0,kee),e(kee,aVr),e($0,nVr),e(Vr,sVr),M(k0,Vr,null),b(f,Yze,u),b(f,Kc,u),e(Kc,S0),e(S0,a0e),M(_$,a0e,null),e(Kc,lVr),e(Kc,n0e),e(n0e,iVr),b(f,Kze,u),b(f,_r,u),M(u$,_r,null),e(_r,dVr),e(_r,Zc),e(Zc,cVr),e(Zc,See),e(See,fVr),e(Zc,mVr),e(Zc,Ree),e(Ree,gVr),e(Zc,hVr),e(_r,pVr),e(_r,b$),e(b$,_Vr),e(b$,s0e),e(s0e,uVr),e(b$,bVr),e(_r,vVr),e(_r,Ht),M(v$,Ht,null),e(Ht,FVr),e(Ht,l0e),e(l0e,TVr),e(Ht,MVr),e(Ht,ef),e(ef,EVr),e(ef,i0e),e(i0e,CVr),e(ef,wVr),e(ef,Pee),e(Pee,AVr),e(ef,LVr),e(Ht,yVr),M(R0,Ht,null),e(_r,xVr),e(_r,Xr),M(F$,Xr,null),e(Xr,$Vr),e(Xr,d0e),e(d0e,kVr),e(Xr,SVr),e(Xr,Mn),e(Mn,RVr),e(Mn,c0e),e(c0e,PVr),e(Mn,BVr),e(Mn,f0e),e(f0e,NVr),e(Mn,IVr),e(Mn,m0e),e(m0e,qVr),e(Mn,jVr),e(Xr,DVr),e(Xr,xe),e(xe,P0),e(P0,g0e),e(g0e,GVr),e(P0,OVr),e(P0,Bee),e(Bee,VVr),e(P0,XVr),e(xe,zVr),e(xe,B0),e(B0,h0e),e(h0e,QVr),e(B0,WVr),e(B0,Nee),e(Nee,HVr),e(B0,UVr),e(xe,JVr),e(xe,N0),e(N0,p0e),e(p0e,YVr),e(N0,KVr),e(N0,Iee),e(Iee,ZVr),e(N0,eXr),e(xe,oXr),e(xe,I0),e(I0,_0e),e(_0e,rXr),e(I0,tXr),e(I0,qee),e(qee,aXr),e(I0,nXr),e(xe,sXr),e(xe,q0),e(q0,u0e),e(u0e,lXr),e(q0,iXr),e(q0,jee),e(jee,dXr),e(q0,cXr),e(xe,fXr),e(xe,j0),e(j0,b0e),e(b0e,mXr),e(j0,gXr),e(j0,Dee),e(Dee,hXr),e(j0,pXr),e(xe,_Xr),e(xe,D0),e(D0,v0e),e(v0e,uXr),e(D0,bXr),e(D0,Gee),e(Gee,vXr),e(D0,FXr),e(xe,TXr),e(xe,G0),e(G0,F0e),e(F0e,MXr),e(G0,EXr),e(G0,Oee),e(Oee,CXr),e(G0,wXr),e(xe,AXr),e(xe,O0),e(O0,T0e),e(T0e,LXr),e(O0,yXr),e(O0,Vee),e(Vee,xXr),e(O0,$Xr),e(xe,kXr),e(xe,V0),e(V0,M0e),e(M0e,SXr),e(V0,RXr),e(V0,Xee),e(Xee,PXr),e(V0,BXr),e(Xr,NXr),M(X0,Xr,null),b(f,Zze,u),b(f,of,u),e(of,z0),e(z0,E0e),M(T$,E0e,null),e(of,IXr),e(of,C0e),e(C0e,qXr),b(f,eQe,u),b(f,ur,u),M(M$,ur,null),e(ur,jXr),e(ur,rf),e(rf,DXr),e(rf,zee),e(zee,GXr),e(rf,OXr),e(rf,Qee),e(Qee,VXr),e(rf,XXr),e(ur,zXr),e(ur,E$),e(E$,QXr),e(E$,w0e),e(w0e,WXr),e(E$,HXr),e(ur,UXr),e(ur,Ut),M(C$,Ut,null),e(Ut,JXr),e(Ut,A0e),e(A0e,YXr),e(Ut,KXr),e(Ut,tf),e(tf,ZXr),e(tf,L0e),e(L0e,ezr),e(tf,ozr),e(tf,Wee),e(Wee,rzr),e(tf,tzr),e(Ut,azr),M(Q0,Ut,null),e(ur,nzr),e(ur,zr),M(w$,zr,null),e(zr,szr),e(zr,y0e),e(y0e,lzr),e(zr,izr),e(zr,En),e(En,dzr),e(En,x0e),e(x0e,czr),e(En,fzr),e(En,$0e),e($0e,mzr),e(En,gzr),e(En,k0e),e(k0e,hzr),e(En,pzr),e(zr,_zr),e(zr,Ee),e(Ee,W0),e(W0,S0e),e(S0e,uzr),e(W0,bzr),e(W0,Hee),e(Hee,vzr),e(W0,Fzr),e(Ee,Tzr),e(Ee,H0),e(H0,R0e),e(R0e,Mzr),e(H0,Ezr),e(H0,Uee),e(Uee,Czr),e(H0,wzr),e(Ee,Azr),e(Ee,U0),e(U0,P0e),e(P0e,Lzr),e(U0,yzr),e(U0,Jee),e(Jee,xzr),e(U0,$zr),e(Ee,kzr),e(Ee,J0),e(J0,B0e),e(B0e,Szr),e(J0,Rzr),e(J0,Yee),e(Yee,Pzr),e(J0,Bzr),e(Ee,Nzr),e(Ee,Y0),e(Y0,N0e),e(N0e,Izr),e(Y0,qzr),e(Y0,Kee),e(Kee,jzr),e(Y0,Dzr),e(Ee,Gzr),e(Ee,K0),e(K0,I0e),e(I0e,Ozr),e(K0,Vzr),e(K0,Zee),e(Zee,Xzr),e(K0,zzr),e(Ee,Qzr),e(Ee,Z0),e(Z0,q0e),e(q0e,Wzr),e(Z0,Hzr),e(Z0,eoe),e(eoe,Uzr),e(Z0,Jzr),e(Ee,Yzr),e(Ee,ew),e(ew,j0e),e(j0e,Kzr),e(ew,Zzr),e(ew,ooe),e(ooe,eQr),e(ew,oQr),e(Ee,rQr),e(Ee,ow),e(ow,D0e),e(D0e,tQr),e(ow,aQr),e(ow,roe),e(roe,nQr),e(ow,sQr),e(Ee,lQr),e(Ee,rw),e(rw,G0e),e(G0e,iQr),e(rw,dQr),e(rw,toe),e(toe,cQr),e(rw,fQr),e(Ee,mQr),e(Ee,tw),e(tw,O0e),e(O0e,gQr),e(tw,hQr),e(tw,aoe),e(aoe,pQr),e(tw,_Qr),e(Ee,uQr),e(Ee,aw),e(aw,V0e),e(V0e,bQr),e(aw,vQr),e(aw,noe),e(noe,FQr),e(aw,TQr),e(Ee,MQr),e(Ee,nw),e(nw,X0e),e(X0e,EQr),e(nw,CQr),e(nw,soe),e(soe,wQr),e(nw,AQr),e(zr,LQr),M(sw,zr,null),b(f,oQe,u),b(f,af,u),e(af,lw),e(lw,z0e),M(A$,z0e,null),e(af,yQr),e(af,Q0e),e(Q0e,xQr),b(f,rQe,u),b(f,br,u),M(L$,br,null),e(br,$Qr),e(br,nf),e(nf,kQr),e(nf,loe),e(loe,SQr),e(nf,RQr),e(nf,ioe),e(ioe,PQr),e(nf,BQr),e(br,NQr),e(br,y$),e(y$,IQr),e(y$,W0e),e(W0e,qQr),e(y$,jQr),e(br,DQr),e(br,Jt),M(x$,Jt,null),e(Jt,GQr),e(Jt,H0e),e(H0e,OQr),e(Jt,VQr),e(Jt,sf),e(sf,XQr),e(sf,U0e),e(U0e,zQr),e(sf,QQr),e(sf,doe),e(doe,WQr),e(sf,HQr),e(Jt,UQr),M(iw,Jt,null),e(br,JQr),e(br,Qr),M($$,Qr,null),e(Qr,YQr),e(Qr,J0e),e(J0e,KQr),e(Qr,ZQr),e(Qr,Cn),e(Cn,eWr),e(Cn,Y0e),e(Y0e,oWr),e(Cn,rWr),e(Cn,K0e),e(K0e,tWr),e(Cn,aWr),e(Cn,Z0e),e(Z0e,nWr),e(Cn,sWr),e(Qr,lWr),e(Qr,$e),e($e,dw),e(dw,ewe),e(ewe,iWr),e(dw,dWr),e(dw,coe),e(coe,cWr),e(dw,fWr),e($e,mWr),e($e,cw),e(cw,owe),e(owe,gWr),e(cw,hWr),e(cw,foe),e(foe,pWr),e(cw,_Wr),e($e,uWr),e($e,fw),e(fw,rwe),e(rwe,bWr),e(fw,vWr),e(fw,moe),e(moe,FWr),e(fw,TWr),e($e,MWr),e($e,mw),e(mw,twe),e(twe,EWr),e(mw,CWr),e(mw,goe),e(goe,wWr),e(mw,AWr),e($e,LWr),e($e,gw),e(gw,awe),e(awe,yWr),e(gw,xWr),e(gw,hoe),e(hoe,$Wr),e(gw,kWr),e($e,SWr),e($e,hw),e(hw,nwe),e(nwe,RWr),e(hw,PWr),e(hw,poe),e(poe,BWr),e(hw,NWr),e($e,IWr),e($e,pw),e(pw,swe),e(swe,qWr),e(pw,jWr),e(pw,_oe),e(_oe,DWr),e(pw,GWr),e($e,OWr),e($e,_w),e(_w,lwe),e(lwe,VWr),e(_w,XWr),e(_w,uoe),e(uoe,zWr),e(_w,QWr),e($e,WWr),e($e,uw),e(uw,iwe),e(iwe,HWr),e(uw,UWr),e(uw,boe),e(boe,JWr),e(uw,YWr),e($e,KWr),e($e,bw),e(bw,dwe),e(dwe,ZWr),e(bw,eHr),e(bw,voe),e(voe,oHr),e(bw,rHr),e(Qr,tHr),M(vw,Qr,null),b(f,tQe,u),b(f,lf,u),e(lf,Fw),e(Fw,cwe),M(k$,cwe,null),e(lf,aHr),e(lf,fwe),e(fwe,nHr),b(f,aQe,u),b(f,vr,u),M(S$,vr,null),e(vr,sHr),e(vr,df),e(df,lHr),e(df,Foe),e(Foe,iHr),e(df,dHr),e(df,Toe),e(Toe,cHr),e(df,fHr),e(vr,mHr),e(vr,R$),e(R$,gHr),e(R$,mwe),e(mwe,hHr),e(R$,pHr),e(vr,_Hr),e(vr,Yt),M(P$,Yt,null),e(Yt,uHr),e(Yt,gwe),e(gwe,bHr),e(Yt,vHr),e(Yt,cf),e(cf,FHr),e(cf,hwe),e(hwe,THr),e(cf,MHr),e(cf,Moe),e(Moe,EHr),e(cf,CHr),e(Yt,wHr),M(Tw,Yt,null),e(vr,AHr),e(vr,Wr),M(B$,Wr,null),e(Wr,LHr),e(Wr,pwe),e(pwe,yHr),e(Wr,xHr),e(Wr,wn),e(wn,$Hr),e(wn,_we),e(_we,kHr),e(wn,SHr),e(wn,uwe),e(uwe,RHr),e(wn,PHr),e(wn,bwe),e(bwe,BHr),e(wn,NHr),e(Wr,IHr),e(Wr,ke),e(ke,Mw),e(Mw,vwe),e(vwe,qHr),e(Mw,jHr),e(Mw,Eoe),e(Eoe,DHr),e(Mw,GHr),e(ke,OHr),e(ke,Ew),e(Ew,Fwe),e(Fwe,VHr),e(Ew,XHr),e(Ew,Coe),e(Coe,zHr),e(Ew,QHr),e(ke,WHr),e(ke,Cw),e(Cw,Twe),e(Twe,HHr),e(Cw,UHr),e(Cw,woe),e(woe,JHr),e(Cw,YHr),e(ke,KHr),e(ke,ww),e(ww,Mwe),e(Mwe,ZHr),e(ww,eUr),e(ww,Aoe),e(Aoe,oUr),e(ww,rUr),e(ke,tUr),e(ke,Aw),e(Aw,Ewe),e(Ewe,aUr),e(Aw,nUr),e(Aw,Loe),e(Loe,sUr),e(Aw,lUr),e(ke,iUr),e(ke,Lw),e(Lw,Cwe),e(Cwe,dUr),e(Lw,cUr),e(Lw,yoe),e(yoe,fUr),e(Lw,mUr),e(ke,gUr),e(ke,yw),e(yw,wwe),e(wwe,hUr),e(yw,pUr),e(yw,xoe),e(xoe,_Ur),e(yw,uUr),e(ke,bUr),e(ke,xw),e(xw,Awe),e(Awe,vUr),e(xw,FUr),e(xw,$oe),e($oe,TUr),e(xw,MUr),e(ke,EUr),e(ke,$w),e($w,Lwe),e(Lwe,CUr),e($w,wUr),e($w,koe),e(koe,AUr),e($w,LUr),e(ke,yUr),e(ke,kw),e(kw,ywe),e(ywe,xUr),e(kw,$Ur),e(kw,Soe),e(Soe,kUr),e(kw,SUr),e(Wr,RUr),M(Sw,Wr,null),b(f,nQe,u),b(f,ff,u),e(ff,Rw),e(Rw,xwe),M(N$,xwe,null),e(ff,PUr),e(ff,$we),e($we,BUr),b(f,sQe,u),b(f,Fr,u),M(I$,Fr,null),e(Fr,NUr),e(Fr,mf),e(mf,IUr),e(mf,Roe),e(Roe,qUr),e(mf,jUr),e(mf,Poe),e(Poe,DUr),e(mf,GUr),e(Fr,OUr),e(Fr,q$),e(q$,VUr),e(q$,kwe),e(kwe,XUr),e(q$,zUr),e(Fr,QUr),e(Fr,Kt),M(j$,Kt,null),e(Kt,WUr),e(Kt,Swe),e(Swe,HUr),e(Kt,UUr),e(Kt,gf),e(gf,JUr),e(gf,Rwe),e(Rwe,YUr),e(gf,KUr),e(gf,Boe),e(Boe,ZUr),e(gf,eJr),e(Kt,oJr),M(Pw,Kt,null),e(Fr,rJr),e(Fr,Hr),M(D$,Hr,null),e(Hr,tJr),e(Hr,Pwe),e(Pwe,aJr),e(Hr,nJr),e(Hr,An),e(An,sJr),e(An,Bwe),e(Bwe,lJr),e(An,iJr),e(An,Nwe),e(Nwe,dJr),e(An,cJr),e(An,Iwe),e(Iwe,fJr),e(An,mJr),e(Hr,gJr),e(Hr,Se),e(Se,Bw),e(Bw,qwe),e(qwe,hJr),e(Bw,pJr),e(Bw,Noe),e(Noe,_Jr),e(Bw,uJr),e(Se,bJr),e(Se,Nw),e(Nw,jwe),e(jwe,vJr),e(Nw,FJr),e(Nw,Ioe),e(Ioe,TJr),e(Nw,MJr),e(Se,EJr),e(Se,Iw),e(Iw,Dwe),e(Dwe,CJr),e(Iw,wJr),e(Iw,qoe),e(qoe,AJr),e(Iw,LJr),e(Se,yJr),e(Se,qw),e(qw,Gwe),e(Gwe,xJr),e(qw,$Jr),e(qw,joe),e(joe,kJr),e(qw,SJr),e(Se,RJr),e(Se,jw),e(jw,Owe),e(Owe,PJr),e(jw,BJr),e(jw,Doe),e(Doe,NJr),e(jw,IJr),e(Se,qJr),e(Se,Dw),e(Dw,Vwe),e(Vwe,jJr),e(Dw,DJr),e(Dw,Goe),e(Goe,GJr),e(Dw,OJr),e(Se,VJr),e(Se,Gw),e(Gw,Xwe),e(Xwe,XJr),e(Gw,zJr),e(Gw,Ooe),e(Ooe,QJr),e(Gw,WJr),e(Se,HJr),e(Se,Ow),e(Ow,zwe),e(zwe,UJr),e(Ow,JJr),e(Ow,Voe),e(Voe,YJr),e(Ow,KJr),e(Se,ZJr),e(Se,Vw),e(Vw,Qwe),e(Qwe,eYr),e(Vw,oYr),e(Vw,Xoe),e(Xoe,rYr),e(Vw,tYr),e(Se,aYr),e(Se,Xw),e(Xw,Wwe),e(Wwe,nYr),e(Xw,sYr),e(Xw,zoe),e(zoe,lYr),e(Xw,iYr),e(Hr,dYr),M(zw,Hr,null),b(f,lQe,u),b(f,hf,u),e(hf,Qw),e(Qw,Hwe),M(G$,Hwe,null),e(hf,cYr),e(hf,Uwe),e(Uwe,fYr),b(f,iQe,u),b(f,Tr,u),M(O$,Tr,null),e(Tr,mYr),e(Tr,pf),e(pf,gYr),e(pf,Qoe),e(Qoe,hYr),e(pf,pYr),e(pf,Woe),e(Woe,_Yr),e(pf,uYr),e(Tr,bYr),e(Tr,V$),e(V$,vYr),e(V$,Jwe),e(Jwe,FYr),e(V$,TYr),e(Tr,MYr),e(Tr,Zt),M(X$,Zt,null),e(Zt,EYr),e(Zt,Ywe),e(Ywe,CYr),e(Zt,wYr),e(Zt,_f),e(_f,AYr),e(_f,Kwe),e(Kwe,LYr),e(_f,yYr),e(_f,Hoe),e(Hoe,xYr),e(_f,$Yr),e(Zt,kYr),M(Ww,Zt,null),e(Tr,SYr),e(Tr,Ur),M(z$,Ur,null),e(Ur,RYr),e(Ur,Zwe),e(Zwe,PYr),e(Ur,BYr),e(Ur,Ln),e(Ln,NYr),e(Ln,eAe),e(eAe,IYr),e(Ln,qYr),e(Ln,oAe),e(oAe,jYr),e(Ln,DYr),e(Ln,rAe),e(rAe,GYr),e(Ln,OYr),e(Ur,VYr),e(Ur,Re),e(Re,Hw),e(Hw,tAe),e(tAe,XYr),e(Hw,zYr),e(Hw,Uoe),e(Uoe,QYr),e(Hw,WYr),e(Re,HYr),e(Re,Uw),e(Uw,aAe),e(aAe,UYr),e(Uw,JYr),e(Uw,Joe),e(Joe,YYr),e(Uw,KYr),e(Re,ZYr),e(Re,Jw),e(Jw,nAe),e(nAe,eKr),e(Jw,oKr),e(Jw,Yoe),e(Yoe,rKr),e(Jw,tKr),e(Re,aKr),e(Re,Yw),e(Yw,sAe),e(sAe,nKr),e(Yw,sKr),e(Yw,Koe),e(Koe,lKr),e(Yw,iKr),e(Re,dKr),e(Re,Kw),e(Kw,lAe),e(lAe,cKr),e(Kw,fKr),e(Kw,Zoe),e(Zoe,mKr),e(Kw,gKr),e(Re,hKr),e(Re,Zw),e(Zw,iAe),e(iAe,pKr),e(Zw,_Kr),e(Zw,ere),e(ere,uKr),e(Zw,bKr),e(Re,vKr),e(Re,eA),e(eA,dAe),e(dAe,FKr),e(eA,TKr),e(eA,ore),e(ore,MKr),e(eA,EKr),e(Re,CKr),e(Re,oA),e(oA,cAe),e(cAe,wKr),e(oA,AKr),e(oA,rre),e(rre,LKr),e(oA,yKr),e(Re,xKr),e(Re,rA),e(rA,fAe),e(fAe,$Kr),e(rA,kKr),e(rA,tre),e(tre,SKr),e(rA,RKr),e(Re,PKr),e(Re,tA),e(tA,mAe),e(mAe,BKr),e(tA,NKr),e(tA,are),e(are,IKr),e(tA,qKr),e(Ur,jKr),M(aA,Ur,null),b(f,dQe,u),b(f,uf,u),e(uf,nA),e(nA,gAe),M(Q$,gAe,null),e(uf,DKr),e(uf,hAe),e(hAe,GKr),b(f,cQe,u),b(f,Mr,u),M(W$,Mr,null),e(Mr,OKr),e(Mr,bf),e(bf,VKr),e(bf,nre),e(nre,XKr),e(bf,zKr),e(bf,sre),e(sre,QKr),e(bf,WKr),e(Mr,HKr),e(Mr,H$),e(H$,UKr),e(H$,pAe),e(pAe,JKr),e(H$,YKr),e(Mr,KKr),e(Mr,ea),M(U$,ea,null),e(ea,ZKr),e(ea,_Ae),e(_Ae,eZr),e(ea,oZr),e(ea,vf),e(vf,rZr),e(vf,uAe),e(uAe,tZr),e(vf,aZr),e(vf,lre),e(lre,nZr),e(vf,sZr),e(ea,lZr),M(sA,ea,null),e(Mr,iZr),e(Mr,Jr),M(J$,Jr,null),e(Jr,dZr),e(Jr,bAe),e(bAe,cZr),e(Jr,fZr),e(Jr,yn),e(yn,mZr),e(yn,vAe),e(vAe,gZr),e(yn,hZr),e(yn,FAe),e(FAe,pZr),e(yn,_Zr),e(yn,TAe),e(TAe,uZr),e(yn,bZr),e(Jr,vZr),e(Jr,Ve),e(Ve,lA),e(lA,MAe),e(MAe,FZr),e(lA,TZr),e(lA,ire),e(ire,MZr),e(lA,EZr),e(Ve,CZr),e(Ve,iA),e(iA,EAe),e(EAe,wZr),e(iA,AZr),e(iA,dre),e(dre,LZr),e(iA,yZr),e(Ve,xZr),e(Ve,dA),e(dA,CAe),e(CAe,$Zr),e(dA,kZr),e(dA,cre),e(cre,SZr),e(dA,RZr),e(Ve,PZr),e(Ve,cA),e(cA,wAe),e(wAe,BZr),e(cA,NZr),e(cA,fre),e(fre,IZr),e(cA,qZr),e(Ve,jZr),e(Ve,fA),e(fA,AAe),e(AAe,DZr),e(fA,GZr),e(fA,mre),e(mre,OZr),e(fA,VZr),e(Ve,XZr),e(Ve,mA),e(mA,LAe),e(LAe,zZr),e(mA,QZr),e(mA,gre),e(gre,WZr),e(mA,HZr),e(Ve,UZr),e(Ve,gA),e(gA,yAe),e(yAe,JZr),e(gA,YZr),e(gA,hre),e(hre,KZr),e(gA,ZZr),e(Ve,eet),e(Ve,hA),e(hA,xAe),e(xAe,oet),e(hA,ret),e(hA,pre),e(pre,tet),e(hA,aet),e(Jr,net),M(pA,Jr,null),b(f,fQe,u),b(f,Ff,u),e(Ff,_A),e(_A,$Ae),M(Y$,$Ae,null),e(Ff,set),e(Ff,kAe),e(kAe,iet),b(f,mQe,u),b(f,Er,u),M(K$,Er,null),e(Er,det),e(Er,Tf),e(Tf,cet),e(Tf,_re),e(_re,fet),e(Tf,met),e(Tf,ure),e(ure,get),e(Tf,het),e(Er,pet),e(Er,Z$),e(Z$,_et),e(Z$,SAe),e(SAe,uet),e(Z$,bet),e(Er,vet),e(Er,oa),M(ek,oa,null),e(oa,Fet),e(oa,RAe),e(RAe,Tet),e(oa,Met),e(oa,Mf),e(Mf,Eet),e(Mf,PAe),e(PAe,Cet),e(Mf,wet),e(Mf,bre),e(bre,Aet),e(Mf,Let),e(oa,yet),M(uA,oa,null),e(Er,xet),e(Er,Yr),M(ok,Yr,null),e(Yr,$et),e(Yr,BAe),e(BAe,ket),e(Yr,Set),e(Yr,xn),e(xn,Ret),e(xn,NAe),e(NAe,Pet),e(xn,Bet),e(xn,IAe),e(IAe,Net),e(xn,Iet),e(xn,qAe),e(qAe,qet),e(xn,jet),e(Yr,Det),e(Yr,Xe),e(Xe,bA),e(bA,jAe),e(jAe,Get),e(bA,Oet),e(bA,vre),e(vre,Vet),e(bA,Xet),e(Xe,zet),e(Xe,vA),e(vA,DAe),e(DAe,Qet),e(vA,Wet),e(vA,Fre),e(Fre,Het),e(vA,Uet),e(Xe,Jet),e(Xe,FA),e(FA,GAe),e(GAe,Yet),e(FA,Ket),e(FA,Tre),e(Tre,Zet),e(FA,eot),e(Xe,oot),e(Xe,TA),e(TA,OAe),e(OAe,rot),e(TA,tot),e(TA,Mre),e(Mre,aot),e(TA,not),e(Xe,sot),e(Xe,MA),e(MA,VAe),e(VAe,lot),e(MA,iot),e(MA,Ere),e(Ere,dot),e(MA,cot),e(Xe,fot),e(Xe,EA),e(EA,XAe),e(XAe,mot),e(EA,got),e(EA,Cre),e(Cre,hot),e(EA,pot),e(Xe,_ot),e(Xe,CA),e(CA,zAe),e(zAe,uot),e(CA,bot),e(CA,wre),e(wre,vot),e(CA,Fot),e(Xe,Tot),e(Xe,wA),e(wA,QAe),e(QAe,Mot),e(wA,Eot),e(wA,Are),e(Are,Cot),e(wA,wot),e(Yr,Aot),M(AA,Yr,null),b(f,gQe,u),b(f,Ef,u),e(Ef,LA),e(LA,WAe),M(rk,WAe,null),e(Ef,Lot),e(Ef,HAe),e(HAe,yot),b(f,hQe,u),b(f,Cr,u),M(tk,Cr,null),e(Cr,xot),e(Cr,Cf),e(Cf,$ot),e(Cf,Lre),e(Lre,kot),e(Cf,Sot),e(Cf,yre),e(yre,Rot),e(Cf,Pot),e(Cr,Bot),e(Cr,ak),e(ak,Not),e(ak,UAe),e(UAe,Iot),e(ak,qot),e(Cr,jot),e(Cr,ra),M(nk,ra,null),e(ra,Dot),e(ra,JAe),e(JAe,Got),e(ra,Oot),e(ra,wf),e(wf,Vot),e(wf,YAe),e(YAe,Xot),e(wf,zot),e(wf,xre),e(xre,Qot),e(wf,Wot),e(ra,Hot),M(yA,ra,null),e(Cr,Uot),e(Cr,Kr),M(sk,Kr,null),e(Kr,Jot),e(Kr,KAe),e(KAe,Yot),e(Kr,Kot),e(Kr,$n),e($n,Zot),e($n,ZAe),e(ZAe,ert),e($n,ort),e($n,e6e),e(e6e,rrt),e($n,trt),e($n,o6e),e(o6e,art),e($n,nrt),e(Kr,srt),e(Kr,r6e),e(r6e,xA),e(xA,t6e),e(t6e,lrt),e(xA,irt),e(xA,$re),e($re,drt),e(xA,crt),e(Kr,frt),M($A,Kr,null),b(f,pQe,u),b(f,Af,u),e(Af,kA),e(kA,a6e),M(lk,a6e,null),e(Af,mrt),e(Af,n6e),e(n6e,grt),b(f,_Qe,u),b(f,wr,u),M(ik,wr,null),e(wr,hrt),e(wr,Lf),e(Lf,prt),e(Lf,kre),e(kre,_rt),e(Lf,urt),e(Lf,Sre),e(Sre,brt),e(Lf,vrt),e(wr,Frt),e(wr,dk),e(dk,Trt),e(dk,s6e),e(s6e,Mrt),e(dk,Ert),e(wr,Crt),e(wr,ta),M(ck,ta,null),e(ta,wrt),e(ta,l6e),e(l6e,Art),e(ta,Lrt),e(ta,yf),e(yf,yrt),e(yf,i6e),e(i6e,xrt),e(yf,$rt),e(yf,Rre),e(Rre,krt),e(yf,Srt),e(ta,Rrt),M(SA,ta,null),e(wr,Prt),e(wr,Zr),M(fk,Zr,null),e(Zr,Brt),e(Zr,d6e),e(d6e,Nrt),e(Zr,Irt),e(Zr,kn),e(kn,qrt),e(kn,c6e),e(c6e,jrt),e(kn,Drt),e(kn,f6e),e(f6e,Grt),e(kn,Ort),e(kn,m6e),e(m6e,Vrt),e(kn,Xrt),e(Zr,zrt),e(Zr,mk),e(mk,RA),e(RA,g6e),e(g6e,Qrt),e(RA,Wrt),e(RA,Pre),e(Pre,Hrt),e(RA,Urt),e(mk,Jrt),e(mk,PA),e(PA,h6e),e(h6e,Yrt),e(PA,Krt),e(PA,Bre),e(Bre,Zrt),e(PA,ett),e(Zr,ott),M(BA,Zr,null),b(f,uQe,u),b(f,xf,u),e(xf,NA),e(NA,p6e),M(gk,p6e,null),e(xf,rtt),e(xf,_6e),e(_6e,ttt),b(f,bQe,u),b(f,Ar,u),M(hk,Ar,null),e(Ar,att),e(Ar,$f),e($f,ntt),e($f,Nre),e(Nre,stt),e($f,ltt),e($f,Ire),e(Ire,itt),e($f,dtt),e(Ar,ctt),e(Ar,pk),e(pk,ftt),e(pk,u6e),e(u6e,mtt),e(pk,gtt),e(Ar,htt),e(Ar,aa),M(_k,aa,null),e(aa,ptt),e(aa,b6e),e(b6e,_tt),e(aa,utt),e(aa,kf),e(kf,btt),e(kf,v6e),e(v6e,vtt),e(kf,Ftt),e(kf,qre),e(qre,Ttt),e(kf,Mtt),e(aa,Ett),M(IA,aa,null),e(Ar,Ctt),e(Ar,et),M(uk,et,null),e(et,wtt),e(et,F6e),e(F6e,Att),e(et,Ltt),e(et,Sn),e(Sn,ytt),e(Sn,T6e),e(T6e,xtt),e(Sn,$tt),e(Sn,M6e),e(M6e,ktt),e(Sn,Stt),e(Sn,E6e),e(E6e,Rtt),e(Sn,Ptt),e(et,Btt),e(et,C6e),e(C6e,qA),e(qA,w6e),e(w6e,Ntt),e(qA,Itt),e(qA,jre),e(jre,qtt),e(qA,jtt),e(et,Dtt),M(jA,et,null),vQe=!0},p(f,[u]){const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),Df.$set(bk);const A6e={};u&2&&(A6e.$$scope={dirty:u,ctx:f}),Kg.$set(A6e);const L6e={};u&2&&(L6e.$$scope={dirty:u,ctx:f}),Ph.$set(L6e);const y6e={};u&2&&(y6e.$$scope={dirty:u,ctx:f}),up.$set(y6e);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),bp.$set(vk);const x6e={};u&2&&(x6e.$$scope={dirty:u,ctx:f}),jp.$set(x6e);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Dp.$set(Rn);const $6e={};u&2&&($6e.$$scope={dirty:u,ctx:f}),Vp.$set($6e);const k6e={};u&2&&(k6e.$$scope={dirty:u,ctx:f}),Hu.$set(k6e);const S6e={};u&2&&(S6e.$$scope={dirty:u,ctx:f}),Ju.$set(S6e);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),V1.$set(Fk);const R6e={};u&2&&(R6e.$$scope={dirty:u,ctx:f}),z1.$set(R6e);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),R2.$set(Tk);const P6e={};u&2&&(P6e.$$scope={dirty:u,ctx:f}),B2.$set(P6e);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),Tb.$set(Mk);const B6e={};u&2&&(B6e.$$scope={dirty:u,ctx:f}),Eb.$set(B6e);const N6e={};u&2&&(N6e.$$scope={dirty:u,ctx:f}),Xb.$set(N6e);const I6e={};u&2&&(I6e.$$scope={dirty:u,ctx:f}),Qb.$set(I6e);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),z3.$set(Sf);const q6e={};u&2&&(q6e.$$scope={dirty:u,ctx:f}),W3.$set(q6e);const j6e={};u&2&&(j6e.$$scope={dirty:u,ctx:f}),wv.$set(j6e);const D6e={};u&2&&(D6e.$$scope={dirty:u,ctx:f}),Lv.$set(D6e);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),Bv.$set(Ek);const G6e={};u&2&&(G6e.$$scope={dirty:u,ctx:f}),Iv.$set(G6e);const O6e={};u&2&&(O6e.$$scope={dirty:u,ctx:f}),TF.$set(O6e);const V6e={};u&2&&(V6e.$$scope={dirty:u,ctx:f}),EF.$set(V6e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),gT.$set(nt);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),pT.$set(Ck);const X6e={};u&2&&(X6e.$$scope={dirty:u,ctx:f}),bT.$set(X6e);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),FT.$set(wk);const z6e={};u&2&&(z6e.$$scope={dirty:u,ctx:f}),BT.$set(z6e);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),IT.$set(st);const Q6e={};u&2&&(Q6e.$$scope={dirty:u,ctx:f}),DT.$set(Q6e);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),OT.$set(Rf);const W6e={};u&2&&(W6e.$$scope={dirty:u,ctx:f}),zT.$set(W6e);const H6e={};u&2&&(H6e.$$scope={dirty:u,ctx:f}),WT.$set(H6e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),a8.$set(L);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),s8.$set(DA);const U6e={};u&2&&(U6e.$$scope={dirty:u,ctx:f}),g8.$set(U6e);const J6e={};u&2&&(J6e.$$scope={dirty:u,ctx:f}),p8.$set(J6e);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),L8.$set(GA);const Y6e={};u&2&&(Y6e.$$scope={dirty:u,ctx:f}),x8.$set(Y6e);const K6e={};u&2&&(K6e.$$scope={dirty:u,ctx:f}),R8.$set(K6e);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),B8.$set(OA);const Z6e={};u&2&&(Z6e.$$scope={dirty:u,ctx:f}),O8.$set(Z6e);const e7e={};u&2&&(e7e.$$scope={dirty:u,ctx:f}),X8.$set(e7e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),U8.$set(VA);const o7e={};u&2&&(o7e.$$scope={dirty:u,ctx:f}),Y8.$set(o7e);const r7e={};u&2&&(r7e.$$scope={dirty:u,ctx:f}),oM.$set(r7e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),tM.$set(XA);const t7e={};u&2&&(t7e.$$scope={dirty:u,ctx:f}),sM.$set(t7e);const a7e={};u&2&&(a7e.$$scope={dirty:u,ctx:f}),iM.$set(a7e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),pM.$set(zA);const n7e={};u&2&&(n7e.$$scope={dirty:u,ctx:f}),uM.$set(n7e);const s7e={};u&2&&(s7e.$$scope={dirty:u,ctx:f}),FM.$set(s7e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),MM.$set(QA);const l7e={};u&2&&(l7e.$$scope={dirty:u,ctx:f}),b4.$set(l7e);const i7e={};u&2&&(i7e.$$scope={dirty:u,ctx:f}),F4.$set(i7e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),X4.$set(WA);const d7e={};u&2&&(d7e.$$scope={dirty:u,ctx:f}),Q4.$set(d7e);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),sE.$set(c7e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),iE.$set(HA);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),pE.$set(f7e);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),uE.$set(m7e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),qE.$set(UA);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),DE.$set(g7e);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),YE.$set(h7e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),ZE.$set(JA);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),AC.$set(p7e);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),yC.$set(_7e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),QC.$set(YA);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),HC.$set(u7e);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),YC.$set(b7e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),ZC.$set(KA);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),o5.$set(v7e);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),t5.$set(F7e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),C5.$set(ZA);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),A5.$set(T7e);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),W5.$set(M7e);const e6={};u&2&&(e6.$$scope={dirty:u,ctx:f}),U5.$set(e6);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),Y5.$set(E7e);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),Z5.$set(C7e);const o6={};u&2&&(o6.$$scope={dirty:u,ctx:f}),o0.$set(o6);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),t0.$set(w7e);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),k0.$set(A7e);const r6={};u&2&&(r6.$$scope={dirty:u,ctx:f}),R0.$set(r6);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),X0.$set(L7e);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),Q0.$set(y7e);const t6={};u&2&&(t6.$$scope={dirty:u,ctx:f}),sw.$set(t6);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),iw.$set(x7e);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),vw.$set($7e);const a6={};u&2&&(a6.$$scope={dirty:u,ctx:f}),Tw.$set(a6);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),Sw.$set(k7e);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),Pw.$set(S7e);const n6={};u&2&&(n6.$$scope={dirty:u,ctx:f}),zw.$set(n6);const R7e={};u&2&&(R7e.$$scope={dirty:u,ctx:f}),Ww.$set(R7e);const P7e={};u&2&&(P7e.$$scope={dirty:u,ctx:f}),aA.$set(P7e);const s6={};u&2&&(s6.$$scope={dirty:u,ctx:f}),sA.$set(s6);const B7e={};u&2&&(B7e.$$scope={dirty:u,ctx:f}),pA.$set(B7e);const N7e={};u&2&&(N7e.$$scope={dirty:u,ctx:f}),uA.$set(N7e);const l6={};u&2&&(l6.$$scope={dirty:u,ctx:f}),AA.$set(l6);const I7e={};u&2&&(I7e.$$scope={dirty:u,ctx:f}),yA.$set(I7e);const q7e={};u&2&&(q7e.$$scope={dirty:u,ctx:f}),$A.$set(q7e);const i6={};u&2&&(i6.$$scope={dirty:u,ctx:f}),SA.$set(i6);const j7e={};u&2&&(j7e.$$scope={dirty:u,ctx:f}),BA.$set(j7e);const D7e={};u&2&&(D7e.$$scope={dirty:u,ctx:f}),IA.$set(D7e);const d6={};u&2&&(d6.$$scope={dirty:u,ctx:f}),jA.$set(d6)},i(f){vQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(Df.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(hL.$$.fragment,f),E(Kg.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(FL.$$.fragment,f),E(Ph.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(AL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(SL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(Vp.$$.fragment,f),E(qL.$$.fragment,f),E(Hu.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(Ju.$$.fragment,f),E(VL.$$.fragment,f),E(V1.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(z1.$$.fragment,f),E(HL.$$.fragment,f),E(R2.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(B2.$$.fragment,f),E(ZL.$$.fragment,f),E(Tb.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Eb.$$.fragment,f),E(ay.$$.fragment,f),E(Xb.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(Qb.$$.fragment,f),E(dy.$$.fragment,f),E(z3.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(W3.$$.fragment,f),E(hy.$$.fragment,f),E(wv.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Lv.$$.fragment,f),E(vy.$$.fragment,f),E(Bv.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(Iv.$$.fragment,f),E(Cy.$$.fragment,f),E(TF.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(EF.$$.fragment,f),E(xy.$$.fragment,f),E(gT.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(pT.$$.fragment,f),E(Py.$$.fragment,f),E(bT.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(FT.$$.fragment,f),E(jy.$$.fragment,f),E(BT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(IT.$$.fragment,f),E(Xy.$$.fragment,f),E(DT.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(OT.$$.fragment,f),E(Uy.$$.fragment,f),E(zT.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(WT.$$.fragment,f),E(e9.$$.fragment,f),E(a8.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(s8.$$.fragment,f),E(n9.$$.fragment,f),E(g8.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(p8.$$.fragment,f),E(c9.$$.fragment,f),E(L8.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(x8.$$.fragment,f),E(p9.$$.fragment,f),E(R8.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(B8.$$.fragment,f),E(T9.$$.fragment,f),E(O8.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(X8.$$.fragment,f),E(A9.$$.fragment,f),E(U8.$$.fragment,f),E(L9.$$.fragment,f),E(y9.$$.fragment,f),E($9.$$.fragment,f),E(Y8.$$.fragment,f),E(k9.$$.fragment,f),E(oM.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(N9.$$.fragment,f),E(tM.$$.fragment,f),E(I9.$$.fragment,f),E(sM.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(iM.$$.fragment,f),E(O9.$$.fragment,f),E(pM.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(Q9.$$.fragment,f),E(uM.$$.fragment,f),E(W9.$$.fragment,f),E(FM.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(MM.$$.fragment,f),E(K9.$$.fragment,f),E(b4.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(F4.$$.fragment,f),E(tx.$$.fragment,f),E(X4.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(Q4.$$.fragment,f),E(ix.$$.fragment,f),E(sE.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(iE.$$.fragment,f),E(gx.$$.fragment,f),E(pE.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(uE.$$.fragment,f),E(bx.$$.fragment,f),E(qE.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(DE.$$.fragment,f),E(Ex.$$.fragment,f),E(YE.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(ZE.$$.fragment,f),E(yx.$$.fragment,f),E(AC.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(yC.$$.fragment,f),E(Rx.$$.fragment,f),E(QC.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(HC.$$.fragment,f),E(qx.$$.fragment,f),E(YC.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(ZC.$$.fragment,f),E(Xx.$$.fragment,f),E(o5.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(t5.$$.fragment,f),E(Ux.$$.fragment,f),E(C5.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(A5.$$.fragment,f),E(e$.$$.fragment,f),E(W5.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(U5.$$.fragment,f),E(n$.$$.fragment,f),E(Y5.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(Z5.$$.fragment,f),E(c$.$$.fragment,f),E(o0.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(t0.$$.fragment,f),E(p$.$$.fragment,f),E(k0.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(R0.$$.fragment,f),E(F$.$$.fragment,f),E(X0.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(Q0.$$.fragment,f),E(w$.$$.fragment,f),E(sw.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(iw.$$.fragment,f),E($$.$$.fragment,f),E(vw.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(Tw.$$.fragment,f),E(B$.$$.fragment,f),E(Sw.$$.fragment,f),E(N$.$$.fragment,f),E(I$.$$.fragment,f),E(j$.$$.fragment,f),E(Pw.$$.fragment,f),E(D$.$$.fragment,f),E(zw.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(Ww.$$.fragment,f),E(z$.$$.fragment,f),E(aA.$$.fragment,f),E(Q$.$$.fragment,f),E(W$.$$.fragment,f),E(U$.$$.fragment,f),E(sA.$$.fragment,f),E(J$.$$.fragment,f),E(pA.$$.fragment,f),E(Y$.$$.fragment,f),E(K$.$$.fragment,f),E(ek.$$.fragment,f),E(uA.$$.fragment,f),E(ok.$$.fragment,f),E(AA.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(yA.$$.fragment,f),E(sk.$$.fragment,f),E($A.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(SA.$$.fragment,f),E(fk.$$.fragment,f),E(BA.$$.fragment,f),E(gk.$$.fragment,f),E(hk.$$.fragment,f),E(_k.$$.fragment,f),E(IA.$$.fragment,f),E(uk.$$.fragment,f),E(jA.$$.fragment,f),vQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(Df.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(hL.$$.fragment,f),C(Kg.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(FL.$$.fragment,f),C(Ph.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(AL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(SL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(Vp.$$.fragment,f),C(qL.$$.fragment,f),C(Hu.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(Ju.$$.fragment,f),C(VL.$$.fragment,f),C(V1.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(z1.$$.fragment,f),C(HL.$$.fragment,f),C(R2.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(B2.$$.fragment,f),C(ZL.$$.fragment,f),C(Tb.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Eb.$$.fragment,f),C(ay.$$.fragment,f),C(Xb.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(Qb.$$.fragment,f),C(dy.$$.fragment,f),C(z3.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(W3.$$.fragment,f),C(hy.$$.fragment,f),C(wv.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Lv.$$.fragment,f),C(vy.$$.fragment,f),C(Bv.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(Iv.$$.fragment,f),C(Cy.$$.fragment,f),C(TF.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(EF.$$.fragment,f),C(xy.$$.fragment,f),C(gT.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(pT.$$.fragment,f),C(Py.$$.fragment,f),C(bT.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(FT.$$.fragment,f),C(jy.$$.fragment,f),C(BT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(IT.$$.fragment,f),C(Xy.$$.fragment,f),C(DT.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(OT.$$.fragment,f),C(Uy.$$.fragment,f),C(zT.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(WT.$$.fragment,f),C(e9.$$.fragment,f),C(a8.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(s8.$$.fragment,f),C(n9.$$.fragment,f),C(g8.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(p8.$$.fragment,f),C(c9.$$.fragment,f),C(L8.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(x8.$$.fragment,f),C(p9.$$.fragment,f),C(R8.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(B8.$$.fragment,f),C(T9.$$.fragment,f),C(O8.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(X8.$$.fragment,f),C(A9.$$.fragment,f),C(U8.$$.fragment,f),C(L9.$$.fragment,f),C(y9.$$.fragment,f),C($9.$$.fragment,f),C(Y8.$$.fragment,f),C(k9.$$.fragment,f),C(oM.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(N9.$$.fragment,f),C(tM.$$.fragment,f),C(I9.$$.fragment,f),C(sM.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(iM.$$.fragment,f),C(O9.$$.fragment,f),C(pM.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(Q9.$$.fragment,f),C(uM.$$.fragment,f),C(W9.$$.fragment,f),C(FM.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(MM.$$.fragment,f),C(K9.$$.fragment,f),C(b4.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(F4.$$.fragment,f),C(tx.$$.fragment,f),C(X4.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(Q4.$$.fragment,f),C(ix.$$.fragment,f),C(sE.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(iE.$$.fragment,f),C(gx.$$.fragment,f),C(pE.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(uE.$$.fragment,f),C(bx.$$.fragment,f),C(qE.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(DE.$$.fragment,f),C(Ex.$$.fragment,f),C(YE.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(ZE.$$.fragment,f),C(yx.$$.fragment,f),C(AC.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(yC.$$.fragment,f),C(Rx.$$.fragment,f),C(QC.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(HC.$$.fragment,f),C(qx.$$.fragment,f),C(YC.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(ZC.$$.fragment,f),C(Xx.$$.fragment,f),C(o5.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(t5.$$.fragment,f),C(Ux.$$.fragment,f),C(C5.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(A5.$$.fragment,f),C(e$.$$.fragment,f),C(W5.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(U5.$$.fragment,f),C(n$.$$.fragment,f),C(Y5.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(Z5.$$.fragment,f),C(c$.$$.fragment,f),C(o0.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(t0.$$.fragment,f),C(p$.$$.fragment,f),C(k0.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(R0.$$.fragment,f),C(F$.$$.fragment,f),C(X0.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(Q0.$$.fragment,f),C(w$.$$.fragment,f),C(sw.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(iw.$$.fragment,f),C($$.$$.fragment,f),C(vw.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(Tw.$$.fragment,f),C(B$.$$.fragment,f),C(Sw.$$.fragment,f),C(N$.$$.fragment,f),C(I$.$$.fragment,f),C(j$.$$.fragment,f),C(Pw.$$.fragment,f),C(D$.$$.fragment,f),C(zw.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(Ww.$$.fragment,f),C(z$.$$.fragment,f),C(aA.$$.fragment,f),C(Q$.$$.fragment,f),C(W$.$$.fragment,f),C(U$.$$.fragment,f),C(sA.$$.fragment,f),C(J$.$$.fragment,f),C(pA.$$.fragment,f),C(Y$.$$.fragment,f),C(K$.$$.fragment,f),C(ek.$$.fragment,f),C(uA.$$.fragment,f),C(ok.$$.fragment,f),C(AA.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(yA.$$.fragment,f),C(sk.$$.fragment,f),C($A.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(SA.$$.fragment,f),C(fk.$$.fragment,f),C(BA.$$.fragment,f),C(gk.$$.fragment,f),C(hk.$$.fragment,f),C(_k.$$.fragment,f),C(IA.$$.fragment,f),C(uk.$$.fragment,f),C(jA.$$.fragment,f),vQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(hXe),f&&t(Bi),w(iL),f&&t(pXe),f&&t(qn),f&&t(_Xe),w(dL,f),f&&t(uXe),f&&t(zS),f&&t(bXe),w(Df,f),f&&t(vXe),f&&t(Ni),w(cL),f&&t(FXe),f&&t(Ao),w(fL),w(hL),w(Kg),w(pL),f&&t(TXe),f&&t(qi),w(_L),f&&t(MXe),f&&t(Lo),w(uL),w(FL),w(Ph),w(TL),f&&t(EXe),f&&t(ji),w(ML),f&&t(CXe),f&&t(yo),w(EL),w(AL),w(up),w(bp),w(LL),f&&t(wXe),f&&t(Di),w(yL),f&&t(AXe),f&&t(xo),w(xL),w(SL),w(jp),w(Dp),w(RL),f&&t(LXe),f&&t(Oi),w(PL),f&&t(yXe),f&&t($o),w(BL),w(IL),w(Vp),w(qL),w(Hu),f&&t(xXe),f&&t(zi),w(jL),f&&t($Xe),f&&t(ko),w(DL),w(OL),w(Ju),w(VL),w(V1),f&&t(kXe),f&&t(Hi),w(XL),f&&t(SXe),f&&t(So),w(zL),w(WL),w(z1),w(HL),w(R2),f&&t(RXe),f&&t(Yi),w(UL),f&&t(PXe),f&&t(Ro),w(JL),w(KL),w(B2),w(ZL),w(Tb),f&&t(BXe),f&&t(ed),w(ey),f&&t(NXe),f&&t(Po),w(oy),w(ty),w(Eb),w(ay),w(Xb),f&&t(IXe),f&&t(td),w(ny),f&&t(qXe),f&&t(Bo),w(sy),w(iy),w(Qb),w(dy),w(z3),f&&t(jXe),f&&t(sd),w(cy),f&&t(DXe),f&&t(No),w(fy),w(gy),w(W3),w(hy),w(wv),f&&t(GXe),f&&t(dd),w(py),f&&t(OXe),f&&t(Io),w(_y),w(by),w(Lv),w(vy),w(Bv),f&&t(VXe),f&&t(md),w(Fy),f&&t(XXe),f&&t(jo),w(Ty),w(Ey),w(Iv),w(Cy),w(TF),f&&t(zXe),f&&t(pd),w(wy),f&&t(QXe),f&&t(Do),w(Ay),w(yy),w(EF),w(xy),w(gT),f&&t(WXe),f&&t(bd),w($y),f&&t(HXe),f&&t(Go),w(ky),w(Ry),w(pT),w(Py),w(bT),f&&t(UXe),f&&t(Td),w(By),f&&t(JXe),f&&t(Oo),w(Ny),w(qy),w(FT),w(jy),w(BT),f&&t(YXe),f&&t(Cd),w(Dy),f&&t(KXe),f&&t(Vo),w(Gy),w(Vy),w(IT),w(Xy),w(DT),f&&t(ZXe),f&&t(Ld),w(zy),f&&t(eze),f&&t(Xo),w(Qy),w(Hy),w(OT),w(Uy),w(zT),f&&t(oze),f&&t($d),w(Jy),f&&t(rze),f&&t(zo),w(Yy),w(Zy),w(WT),w(e9),w(a8),f&&t(tze),f&&t(Rd),w(o9),f&&t(aze),f&&t(Qo),w(r9),w(a9),w(s8),w(n9),w(g8),f&&t(nze),f&&t(Nd),w(s9),f&&t(sze),f&&t(Wo),w(l9),w(d9),w(p8),w(c9),w(L8),f&&t(lze),f&&t(jd),w(f9),f&&t(ize),f&&t(Ho),w(m9),w(h9),w(x8),w(p9),w(R8),f&&t(dze),f&&t(Od),w(u9),f&&t(cze),f&&t(Uo),w(b9),w(F9),w(B8),w(T9),w(O8),f&&t(fze),f&&t(zd),w(M9),f&&t(mze),f&&t(Jo),w(E9),w(w9),w(X8),w(A9),w(U8),f&&t(gze),f&&t(Ud),w(L9),f&&t(hze),f&&t(Yo),w(y9),w($9),w(Y8),w(k9),w(oM),f&&t(pze),f&&t(Kd),w(R9),f&&t(_ze),f&&t(Ko),w(P9),w(N9),w(tM),w(I9),w(sM),f&&t(uze),f&&t(oc),w(q9),f&&t(bze),f&&t(Zo),w(j9),w(G9),w(iM),w(O9),w(pM),f&&t(vze),f&&t(ac),w(V9),f&&t(Fze),f&&t(er),w(X9),w(Q9),w(uM),w(W9),w(FM),f&&t(Tze),f&&t(lc),w(H9),f&&t(Mze),f&&t(or),w(U9),w(Y9),w(MM),w(K9),w(b4),f&&t(Eze),f&&t(cc),w(Z9),f&&t(Cze),f&&t(rr),w(ex),w(rx),w(F4),w(tx),w(X4),f&&t(wze),f&&t(gc),w(ax),f&&t(Aze),f&&t(tr),w(nx),w(lx),w(Q4),w(ix),w(sE),f&&t(Lze),f&&t(_c),w(dx),f&&t(yze),f&&t(ar),w(cx),w(mx),w(iE),w(gx),w(pE),f&&t(xze),f&&t(vc),w(hx),f&&t($ze),f&&t(nr),w(px),w(ux),w(uE),w(bx),w(qE),f&&t(kze),f&&t(Mc),w(vx),f&&t(Sze),f&&t(sr),w(Fx),w(Mx),w(DE),w(Ex),w(YE),f&&t(Rze),f&&t(wc),w(Cx),f&&t(Pze),f&&t(lr),w(wx),w(Lx),w(ZE),w(yx),w(AC),f&&t(Bze),f&&t(yc),w(xx),f&&t(Nze),f&&t(ir),w($x),w(Sx),w(yC),w(Rx),w(QC),f&&t(Ize),f&&t(kc),w(Px),f&&t(qze),f&&t(dr),w(Bx),w(Ix),w(HC),w(qx),w(YC),f&&t(jze),f&&t(Pc),w(Dx),f&&t(Dze),f&&t(cr),w(Gx),w(Vx),w(ZC),w(Xx),w(o5),f&&t(Gze),f&&t(Ic),w(zx),f&&t(Oze),f&&t(fr),w(Qx),w(Hx),w(t5),w(Ux),w(C5),f&&t(Vze),f&&t(Dc),w(Jx),f&&t(Xze),f&&t(mr),w(Yx),w(Zx),w(A5),w(e$),w(W5),f&&t(zze),f&&t(Vc),w(o$),f&&t(Qze),f&&t(gr),w(r$),w(a$),w(U5),w(n$),w(Y5),f&&t(Wze),f&&t(Qc),w(s$),f&&t(Hze),f&&t(hr),w(l$),w(d$),w(Z5),w(c$),w(o0),f&&t(Uze),f&&t(Uc),w(f$),f&&t(Jze),f&&t(pr),w(m$),w(h$),w(t0),w(p$),w(k0),f&&t(Yze),f&&t(Kc),w(_$),f&&t(Kze),f&&t(_r),w(u$),w(v$),w(R0),w(F$),w(X0),f&&t(Zze),f&&t(of),w(T$),f&&t(eQe),f&&t(ur),w(M$),w(C$),w(Q0),w(w$),w(sw),f&&t(oQe),f&&t(af),w(A$),f&&t(rQe),f&&t(br),w(L$),w(x$),w(iw),w($$),w(vw),f&&t(tQe),f&&t(lf),w(k$),f&&t(aQe),f&&t(vr),w(S$),w(P$),w(Tw),w(B$),w(Sw),f&&t(nQe),f&&t(ff),w(N$),f&&t(sQe),f&&t(Fr),w(I$),w(j$),w(Pw),w(D$),w(zw),f&&t(lQe),f&&t(hf),w(G$),f&&t(iQe),f&&t(Tr),w(O$),w(X$),w(Ww),w(z$),w(aA),f&&t(dQe),f&&t(uf),w(Q$),f&&t(cQe),f&&t(Mr),w(W$),w(U$),w(sA),w(J$),w(pA),f&&t(fQe),f&&t(Ff),w(Y$),f&&t(mQe),f&&t(Er),w(K$),w(ek),w(uA),w(ok),w(AA),f&&t(gQe),f&&t(Ef),w(rk),f&&t(hQe),f&&t(Cr),w(tk),w(nk),w(yA),w(sk),w($A),f&&t(pQe),f&&t(Af),w(lk),f&&t(_Qe),f&&t(wr),w(ik),w(ck),w(SA),w(fk),w(BA),f&&t(uQe),f&&t(xf),w(gk),f&&t(bQe),f&&t(Ar),w(hk),w(_k),w(IA),w(uk),w(jA)}}}const xUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function $Ut($){return yWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class IUt extends CWt{constructor(g){super();wWt(this,g,$Ut,yUt,AWt,{})}}export{IUt as default,xUt as metadata};
