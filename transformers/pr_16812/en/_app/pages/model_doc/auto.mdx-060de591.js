import{S as $yt,i as kyt,s as Syt,e as a,k as l,w as F,t as o,M as Ryt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Pyt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as zjr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function Byt(L){let g,v,p,m,u,d,h,Mo,di,hf,rt,ci,fi,e0,pf,je,We,mi,An,o0,yn,Ln,r0,gi,xn,t0,hi,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),di=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),ci=a("code"),fi=o('"new-model"'),e0=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),mi=a("code"),An=o("NewModel"),o0=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),r0=o(`, make sure its
`),gi=a("code"),xn=o("config_class"),t0=o(` attribute is set to the same class you use when registering the model (here
`),hi=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var T$=s(p);m=r(T$,"NewModelConfig"),T$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var pi=s(d);h=r(pi,"PretrainedConfig"),pi.forEach(t),Mo=r(Ae,`, make sure its
`),di=n(Ae,"CODE",{});var M$=s(di);hf=r(M$,"model_type"),M$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),ci=n(Ae,"CODE",{});var E$=s(ci);fi=r(E$,'"new-model"'),E$.forEach(t),e0=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),mi=n(Eo,"CODE",{});var wa=s(mi);An=r(wa,"NewModel"),wa.forEach(t),o0=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var C$=s(yn);Ln=r(C$,"PreTrainedModel"),C$.forEach(t),r0=r(Eo,`, make sure its
`),gi=n(Eo,"CODE",{});var _f=s(gi);xn=r(_f,"config_class"),_f.forEach(t),t0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),hi=n(Eo,"CODE",{});var w$=s(hi);uf=r(w$,"NewModelConfig"),w$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,di),e(di,hf),e(g,rt),e(g,ci),e(ci,fi),e(g,e0),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,mi),e(mi,An),e(je,o0),e(je,yn),e(yn,Ln),e(je,r0),e(je,gi),e(gi,xn),e(je,t0),e(je,hi),e(hi,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function Iyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function jyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Gyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,u,d,h,Mo,di,hf,rt,ci,fi,e0,pf,je,We,mi,An,o0,yn,Ln,r0,gi,xn,t0,hi,uf,Ca,Qe,Ae,T$,pi,M$,E$,Eo,wa,C$,_f,w$,LDe,_Ie,ui,bf,hee,a0,xDe,pee,$De,bIe,$n,kDe,uee,SDe,RDe,_ee,PDe,BDe,vIe,n0,FIe,A$,IDe,TIe,vf,MIe,_i,Ff,bee,s0,qDe,vee,NDe,EIe,Co,l0,jDe,i0,DDe,y$,GDe,ODe,VDe,d0,XDe,Fee,zDe,WDe,QDe,Er,c0,HDe,Tee,UDe,JDe,bi,YDe,Mee,KDe,ZDe,Eee,eGe,oGe,rGe,A,Tf,Cee,tGe,aGe,L$,nGe,sGe,lGe,Mf,wee,iGe,dGe,x$,cGe,fGe,mGe,Ef,Aee,gGe,hGe,$$,pGe,uGe,_Ge,Cf,yee,bGe,vGe,k$,FGe,TGe,MGe,wf,Lee,EGe,CGe,S$,wGe,AGe,yGe,Af,xee,LGe,xGe,R$,$Ge,kGe,SGe,yf,$ee,RGe,PGe,P$,BGe,IGe,qGe,Lf,kee,NGe,jGe,B$,DGe,GGe,OGe,xf,See,VGe,XGe,I$,zGe,WGe,QGe,$f,Ree,HGe,UGe,q$,JGe,YGe,KGe,kf,Pee,ZGe,eOe,N$,oOe,rOe,tOe,Sf,Bee,aOe,nOe,j$,sOe,lOe,iOe,Rf,Iee,dOe,cOe,D$,fOe,mOe,gOe,Pf,qee,hOe,pOe,G$,uOe,_Oe,bOe,Bf,Nee,vOe,FOe,O$,TOe,MOe,EOe,If,jee,COe,wOe,V$,AOe,yOe,LOe,qf,Dee,xOe,$Oe,X$,kOe,SOe,ROe,Nf,Gee,POe,BOe,z$,IOe,qOe,NOe,jf,Oee,jOe,DOe,W$,GOe,OOe,VOe,Df,Vee,XOe,zOe,Q$,WOe,QOe,HOe,Gf,Xee,UOe,JOe,H$,YOe,KOe,ZOe,Of,zee,eVe,oVe,U$,rVe,tVe,aVe,Vf,Wee,nVe,sVe,J$,lVe,iVe,dVe,Xf,Qee,cVe,fVe,Y$,mVe,gVe,hVe,zf,Hee,pVe,uVe,K$,_Ve,bVe,vVe,Wf,Uee,FVe,TVe,Z$,MVe,EVe,CVe,Qf,Jee,wVe,AVe,ek,yVe,LVe,xVe,Hf,Yee,$Ve,kVe,ok,SVe,RVe,PVe,Uf,Kee,BVe,IVe,rk,qVe,NVe,jVe,Jf,Zee,DVe,GVe,tk,OVe,VVe,XVe,Yf,eoe,zVe,WVe,ak,QVe,HVe,UVe,Kf,ooe,JVe,YVe,nk,KVe,ZVe,eXe,Zf,roe,oXe,rXe,sk,tXe,aXe,nXe,em,toe,sXe,lXe,lk,iXe,dXe,cXe,om,aoe,fXe,mXe,ik,gXe,hXe,pXe,rm,noe,uXe,_Xe,dk,bXe,vXe,FXe,tm,soe,TXe,MXe,ck,EXe,CXe,wXe,am,loe,AXe,yXe,fk,LXe,xXe,$Xe,nm,ioe,kXe,SXe,mk,RXe,PXe,BXe,sm,doe,IXe,qXe,gk,NXe,jXe,DXe,lm,coe,GXe,OXe,hk,VXe,XXe,zXe,im,foe,WXe,QXe,pk,HXe,UXe,JXe,dm,moe,YXe,KXe,uk,ZXe,eze,oze,cm,goe,rze,tze,_k,aze,nze,sze,fm,hoe,lze,ize,bk,dze,cze,fze,mm,poe,mze,gze,vk,hze,pze,uze,gm,uoe,_ze,bze,Fk,vze,Fze,Tze,hm,_oe,Mze,Eze,Tk,Cze,wze,Aze,pm,boe,yze,Lze,Mk,xze,$ze,kze,um,voe,Sze,Rze,Ek,Pze,Bze,Ize,_m,Foe,qze,Nze,Ck,jze,Dze,Gze,bm,Toe,Oze,Vze,wk,Xze,zze,Wze,vm,Moe,Qze,Hze,Ak,Uze,Jze,Yze,Fm,Eoe,Kze,Zze,yk,eWe,oWe,rWe,Tm,Coe,tWe,aWe,Lk,nWe,sWe,lWe,Mm,woe,iWe,dWe,xk,cWe,fWe,mWe,Em,Aoe,gWe,hWe,$k,pWe,uWe,_We,Cm,yoe,bWe,vWe,kk,FWe,TWe,MWe,wm,Loe,EWe,CWe,Sk,wWe,AWe,yWe,Am,xoe,LWe,xWe,Rk,$We,kWe,SWe,ym,$oe,RWe,PWe,Pk,BWe,IWe,qWe,Lm,koe,NWe,jWe,Bk,DWe,GWe,OWe,xm,Soe,VWe,XWe,Ik,zWe,WWe,QWe,$m,Roe,HWe,UWe,qk,JWe,YWe,KWe,km,Poe,ZWe,eQe,Nk,oQe,rQe,tQe,Sm,Boe,aQe,nQe,jk,sQe,lQe,iQe,Rm,Ioe,dQe,cQe,Dk,fQe,mQe,gQe,Pm,qoe,hQe,pQe,Gk,uQe,_Qe,bQe,Bm,Noe,vQe,FQe,Ok,TQe,MQe,EQe,Im,joe,CQe,wQe,Vk,AQe,yQe,LQe,qm,Doe,xQe,$Qe,Xk,kQe,SQe,RQe,Nm,Goe,PQe,BQe,zk,IQe,qQe,NQe,jm,Ooe,jQe,DQe,Wk,GQe,OQe,VQe,Dm,Voe,XQe,zQe,Qk,WQe,QQe,HQe,Gm,Xoe,UQe,JQe,Hk,YQe,KQe,ZQe,Om,zoe,eHe,oHe,Uk,rHe,tHe,aHe,Vm,Woe,nHe,sHe,Jk,lHe,iHe,dHe,Xm,Qoe,cHe,fHe,Yk,mHe,gHe,hHe,zm,Hoe,pHe,uHe,Kk,_He,bHe,vHe,Wm,Uoe,FHe,THe,Zk,MHe,EHe,CHe,Qm,Joe,wHe,AHe,eS,yHe,LHe,xHe,Hm,Yoe,$He,kHe,oS,SHe,RHe,PHe,Um,Koe,BHe,IHe,rS,qHe,NHe,jHe,Jm,Zoe,DHe,GHe,tS,OHe,VHe,XHe,Ym,ere,zHe,WHe,aS,QHe,HHe,UHe,Km,ore,JHe,YHe,nS,KHe,ZHe,eUe,Zm,rre,oUe,rUe,sS,tUe,aUe,nUe,eg,tre,sUe,lUe,lS,iUe,dUe,cUe,og,are,fUe,mUe,iS,gUe,hUe,pUe,rg,nre,uUe,_Ue,dS,bUe,vUe,FUe,tg,sre,TUe,MUe,cS,EUe,CUe,wUe,ag,lre,AUe,yUe,fS,LUe,xUe,$Ue,ng,ire,kUe,SUe,mS,RUe,PUe,BUe,sg,dre,IUe,qUe,gS,NUe,jUe,DUe,lg,cre,GUe,OUe,hS,VUe,XUe,zUe,ig,fre,WUe,QUe,pS,HUe,UUe,JUe,dg,mre,YUe,KUe,uS,ZUe,eJe,oJe,cg,gre,rJe,tJe,_S,aJe,nJe,sJe,fg,hre,lJe,iJe,bS,dJe,cJe,fJe,mg,pre,mJe,gJe,vS,hJe,pJe,uJe,gg,ure,_Je,bJe,FS,vJe,FJe,TJe,hg,_re,MJe,EJe,TS,CJe,wJe,AJe,pg,bre,yJe,LJe,MS,xJe,$Je,kJe,ug,vre,SJe,RJe,ES,PJe,BJe,IJe,_g,Fre,qJe,NJe,CS,jJe,DJe,GJe,bg,OJe,vg,f0,VJe,Tre,XJe,CIe,vi,Fg,Mre,m0,zJe,Ere,WJe,wIe,wo,g0,QJe,h0,HJe,wS,UJe,JJe,YJe,p0,KJe,Cre,ZJe,eYe,oYe,Cr,u0,rYe,wre,tYe,aYe,Aa,nYe,Are,sYe,lYe,yre,iYe,dYe,Lre,cYe,fYe,mYe,k,kn,xre,gYe,hYe,AS,pYe,uYe,yS,_Ye,bYe,vYe,Sn,$re,FYe,TYe,LS,MYe,EYe,xS,CYe,wYe,AYe,Rn,kre,yYe,LYe,$S,xYe,$Ye,kS,kYe,SYe,RYe,Tg,Sre,PYe,BYe,SS,IYe,qYe,NYe,Pn,Rre,jYe,DYe,RS,GYe,OYe,PS,VYe,XYe,zYe,Mg,Pre,WYe,QYe,BS,HYe,UYe,JYe,Eg,Bre,YYe,KYe,IS,ZYe,eKe,oKe,Cg,Ire,rKe,tKe,qS,aKe,nKe,sKe,Bn,qre,lKe,iKe,NS,dKe,cKe,jS,fKe,mKe,gKe,In,Nre,hKe,pKe,DS,uKe,_Ke,GS,bKe,vKe,FKe,qn,jre,TKe,MKe,OS,EKe,CKe,VS,wKe,AKe,yKe,wg,Dre,LKe,xKe,XS,$Ke,kKe,SKe,Ag,Gre,RKe,PKe,zS,BKe,IKe,qKe,Nn,Ore,NKe,jKe,WS,DKe,GKe,QS,OKe,VKe,XKe,yg,Vre,zKe,WKe,HS,QKe,HKe,UKe,jn,Xre,JKe,YKe,US,KKe,ZKe,JS,eZe,oZe,rZe,Dn,zre,tZe,aZe,YS,nZe,sZe,KS,lZe,iZe,dZe,Gn,Wre,cZe,fZe,ZS,mZe,gZe,eR,hZe,pZe,uZe,Lg,Qre,_Ze,bZe,oR,vZe,FZe,TZe,On,Hre,MZe,EZe,rR,CZe,wZe,tR,AZe,yZe,LZe,Vn,Ure,xZe,$Ze,aR,kZe,SZe,nR,RZe,PZe,BZe,Xn,Jre,IZe,qZe,sR,NZe,jZe,lR,DZe,GZe,OZe,zn,Yre,VZe,XZe,iR,zZe,WZe,dR,QZe,HZe,UZe,Wn,Kre,JZe,YZe,cR,KZe,ZZe,fR,eeo,oeo,reo,Qn,Zre,teo,aeo,mR,neo,seo,gR,leo,ieo,deo,xg,ete,ceo,feo,hR,meo,geo,heo,Hn,ote,peo,ueo,pR,_eo,beo,uR,veo,Feo,Teo,$g,rte,Meo,Eeo,_R,Ceo,weo,Aeo,Un,tte,yeo,Leo,bR,xeo,$eo,vR,keo,Seo,Reo,Jn,ate,Peo,Beo,FR,Ieo,qeo,TR,Neo,jeo,Deo,Yn,nte,Geo,Oeo,MR,Veo,Xeo,ER,zeo,Weo,Qeo,Kn,ste,Heo,Ueo,CR,Jeo,Yeo,wR,Keo,Zeo,eoo,Zn,lte,ooo,roo,AR,too,aoo,yR,noo,soo,loo,kg,ite,ioo,doo,LR,coo,foo,moo,es,dte,goo,hoo,xR,poo,uoo,$R,_oo,boo,voo,os,cte,Foo,Too,kR,Moo,Eoo,SR,Coo,woo,Aoo,rs,fte,yoo,Loo,RR,xoo,$oo,PR,koo,Soo,Roo,ts,mte,Poo,Boo,BR,Ioo,qoo,IR,Noo,joo,Doo,as,gte,Goo,Ooo,qR,Voo,Xoo,NR,zoo,Woo,Qoo,ns,hte,Hoo,Uoo,jR,Joo,Yoo,DR,Koo,Zoo,ero,Sg,pte,oro,rro,GR,tro,aro,nro,ss,ute,sro,lro,OR,iro,dro,VR,cro,fro,mro,Rg,_te,gro,hro,XR,pro,uro,_ro,Pg,bte,bro,vro,zR,Fro,Tro,Mro,ls,vte,Ero,Cro,WR,wro,Aro,QR,yro,Lro,xro,is,Fte,$ro,kro,HR,Sro,Rro,UR,Pro,Bro,Iro,ds,Tte,qro,Nro,JR,jro,Dro,YR,Gro,Oro,Vro,Bg,Mte,Xro,zro,KR,Wro,Qro,Hro,cs,Ete,Uro,Jro,ZR,Yro,Kro,eP,Zro,eto,oto,fs,Cte,rto,tto,oP,ato,nto,rP,sto,lto,ito,ms,wte,dto,cto,tP,fto,mto,aP,gto,hto,pto,gs,Ate,uto,_to,nP,bto,vto,sP,Fto,Tto,Mto,hs,yte,Eto,Cto,lP,wto,Ato,iP,yto,Lto,xto,Ig,Lte,$to,kto,dP,Sto,Rto,Pto,ps,xte,Bto,Ito,cP,qto,Nto,fP,jto,Dto,Gto,qg,$te,Oto,Vto,mP,Xto,zto,Wto,Ng,kte,Qto,Hto,gP,Uto,Jto,Yto,jg,Ste,Kto,Zto,hP,eao,oao,rao,Dg,Rte,tao,aao,pP,nao,sao,lao,us,Pte,iao,dao,uP,cao,fao,_P,mao,gao,hao,Gg,Bte,pao,uao,bP,_ao,bao,vao,_s,Ite,Fao,Tao,vP,Mao,Eao,FP,Cao,wao,Aao,bs,qte,yao,Lao,TP,xao,$ao,MP,kao,Sao,Rao,vs,Nte,Pao,Bao,EP,Iao,qao,CP,Nao,jao,Dao,Fs,jte,Gao,Oao,wP,Vao,Xao,AP,zao,Wao,Qao,Ts,Dte,Hao,Uao,yP,Jao,Yao,LP,Kao,Zao,eno,Ms,Gte,ono,rno,xP,tno,ano,$P,nno,sno,lno,Og,Ote,ino,dno,kP,cno,fno,mno,Vg,Vte,gno,hno,SP,pno,uno,_no,Es,Xte,bno,vno,RP,Fno,Tno,PP,Mno,Eno,Cno,Cs,zte,wno,Ano,BP,yno,Lno,IP,xno,$no,kno,ws,Wte,Sno,Rno,qP,Pno,Bno,NP,Ino,qno,Nno,Xg,Qte,jno,Dno,jP,Gno,Ono,Vno,zg,Hte,Xno,zno,DP,Wno,Qno,Hno,Wg,Ute,Uno,Jno,GP,Yno,Kno,Zno,As,Jte,eso,oso,OP,rso,tso,VP,aso,nso,sso,Qg,Yte,lso,iso,XP,dso,cso,fso,Hg,Kte,mso,gso,zP,hso,pso,uso,Ug,Zte,_so,bso,WP,vso,Fso,Tso,ys,eae,Mso,Eso,QP,Cso,wso,HP,Aso,yso,Lso,Jg,oae,xso,$so,UP,kso,Sso,Rso,Yg,rae,Pso,Bso,JP,Iso,qso,Nso,Ls,tae,jso,Dso,YP,Gso,Oso,KP,Vso,Xso,zso,xs,aae,Wso,Qso,ZP,Hso,Uso,eB,Jso,Yso,Kso,$s,nae,Zso,elo,oB,olo,rlo,rB,tlo,alo,nlo,ks,sae,slo,llo,tB,ilo,dlo,aB,clo,flo,mlo,Kg,glo,Zg,_0,hlo,lae,plo,AIe,Fi,eh,iae,b0,ulo,dae,_lo,yIe,Ao,v0,blo,F0,vlo,nB,Flo,Tlo,Mlo,T0,Elo,cae,Clo,wlo,Alo,He,M0,ylo,fae,Llo,xlo,ya,$lo,mae,klo,Slo,gae,Rlo,Plo,hae,Blo,Ilo,qlo,Z,oh,pae,Nlo,jlo,sB,Dlo,Glo,Olo,rh,uae,Vlo,Xlo,lB,zlo,Wlo,Qlo,th,_ae,Hlo,Ulo,iB,Jlo,Ylo,Klo,ah,bae,Zlo,eio,dB,oio,rio,tio,nh,vae,aio,nio,cB,sio,lio,iio,sh,Fae,dio,cio,fB,fio,mio,gio,lh,Tae,hio,pio,mB,uio,_io,bio,ih,Mae,vio,Fio,gB,Tio,Mio,Eio,dh,Eae,Cio,wio,hB,Aio,yio,Lio,ch,Cae,xio,$io,pB,kio,Sio,Rio,fh,wae,Pio,Bio,uB,Iio,qio,Nio,mh,Aae,jio,Dio,_B,Gio,Oio,Vio,gh,yae,Xio,zio,bB,Wio,Qio,Hio,hh,Lae,Uio,Jio,vB,Yio,Kio,Zio,ph,xae,edo,odo,FB,rdo,tdo,ado,uh,$ae,ndo,sdo,TB,ldo,ido,ddo,_h,kae,cdo,fdo,MB,mdo,gdo,hdo,bh,Sae,pdo,udo,EB,_do,bdo,vdo,vh,Rae,Fdo,Tdo,CB,Mdo,Edo,Cdo,Fh,Pae,wdo,Ado,wB,ydo,Ldo,xdo,Th,Bae,$do,kdo,AB,Sdo,Rdo,Pdo,Mh,Iae,Bdo,Ido,yB,qdo,Ndo,jdo,Eh,qae,Ddo,Gdo,LB,Odo,Vdo,Xdo,Ch,Nae,zdo,Wdo,xB,Qdo,Hdo,Udo,wh,jae,Jdo,Ydo,$B,Kdo,Zdo,eco,Ah,Dae,oco,rco,kB,tco,aco,nco,yh,sco,Lh,lco,xh,E0,ico,Gae,dco,LIe,Ti,$h,Oae,C0,cco,Vae,fco,xIe,yo,w0,mco,A0,gco,SB,hco,pco,uco,y0,_co,Xae,bco,vco,Fco,Ue,L0,Tco,zae,Mco,Eco,Mi,Cco,Wae,wco,Aco,Qae,yco,Lco,xco,pe,kh,Hae,$co,kco,RB,Sco,Rco,Pco,Sh,Uae,Bco,Ico,Jae,qco,Nco,jco,Rh,Yae,Dco,Gco,PB,Oco,Vco,Xco,Ph,Kae,zco,Wco,BB,Qco,Hco,Uco,Bh,Zae,Jco,Yco,IB,Kco,Zco,efo,Ih,ene,ofo,rfo,qB,tfo,afo,nfo,qh,one,sfo,lfo,NB,ifo,dfo,cfo,Nh,rne,ffo,mfo,jB,gfo,hfo,pfo,jh,tne,ufo,_fo,DB,bfo,vfo,Ffo,Dh,ane,Tfo,Mfo,GB,Efo,Cfo,wfo,Gh,nne,Afo,yfo,OB,Lfo,xfo,$fo,Oh,sne,kfo,Sfo,VB,Rfo,Pfo,Bfo,Vh,lne,Ifo,qfo,XB,Nfo,jfo,Dfo,Xh,ine,Gfo,Ofo,zB,Vfo,Xfo,zfo,zh,dne,Wfo,Qfo,WB,Hfo,Ufo,Jfo,Wh,cne,Yfo,Kfo,QB,Zfo,emo,omo,Qh,rmo,Hh,tmo,Uh,x0,amo,fne,nmo,$Ie,Ei,Jh,mne,$0,smo,gne,lmo,kIe,Lo,k0,imo,Ci,dmo,HB,cmo,fmo,UB,mmo,gmo,hmo,S0,pmo,hne,umo,_mo,bmo,tt,R0,vmo,pne,Fmo,Tmo,wi,Mmo,une,Emo,Cmo,JB,wmo,Amo,ymo,Yh,Lmo,Je,P0,xmo,_ne,$mo,kmo,La,Smo,bne,Rmo,Pmo,vne,Bmo,Imo,Fne,qmo,Nmo,jmo,x,Kh,Tne,Dmo,Gmo,YB,Omo,Vmo,Xmo,Zh,Mne,zmo,Wmo,KB,Qmo,Hmo,Umo,ep,Ene,Jmo,Ymo,ZB,Kmo,Zmo,ego,op,Cne,ogo,rgo,eI,tgo,ago,ngo,rp,wne,sgo,lgo,oI,igo,dgo,cgo,tp,Ane,fgo,mgo,rI,ggo,hgo,pgo,ap,yne,ugo,_go,tI,bgo,vgo,Fgo,np,Lne,Tgo,Mgo,aI,Ego,Cgo,wgo,sp,xne,Ago,ygo,nI,Lgo,xgo,$go,lp,$ne,kgo,Sgo,sI,Rgo,Pgo,Bgo,ip,kne,Igo,qgo,lI,Ngo,jgo,Dgo,dp,Sne,Ggo,Ogo,iI,Vgo,Xgo,zgo,cp,Rne,Wgo,Qgo,dI,Hgo,Ugo,Jgo,fp,Pne,Ygo,Kgo,cI,Zgo,eho,oho,mp,Bne,rho,tho,fI,aho,nho,sho,gp,Ine,lho,iho,mI,dho,cho,fho,hp,qne,mho,gho,gI,hho,pho,uho,pp,Nne,_ho,bho,hI,vho,Fho,Tho,up,jne,Mho,Eho,pI,Cho,who,Aho,_p,Dne,yho,Lho,uI,xho,$ho,kho,bp,Gne,Sho,Rho,_I,Pho,Bho,Iho,vp,One,qho,Nho,bI,jho,Dho,Gho,Fp,Vne,Oho,Vho,vI,Xho,zho,Who,Tp,Xne,Qho,Hho,FI,Uho,Jho,Yho,Mp,zne,Kho,Zho,TI,epo,opo,rpo,Ep,Wne,tpo,apo,MI,npo,spo,lpo,Cp,Qne,ipo,dpo,EI,cpo,fpo,mpo,wp,Hne,gpo,hpo,CI,ppo,upo,_po,Ap,Une,bpo,vpo,wI,Fpo,Tpo,Mpo,yp,Jne,Epo,Cpo,AI,wpo,Apo,ypo,Lp,Yne,Lpo,xpo,yI,$po,kpo,Spo,Ss,Kne,Rpo,Ppo,LI,Bpo,Ipo,xI,qpo,Npo,jpo,xp,Zne,Dpo,Gpo,$I,Opo,Vpo,Xpo,$p,ese,zpo,Wpo,kI,Qpo,Hpo,Upo,kp,ose,Jpo,Ypo,SI,Kpo,Zpo,euo,Sp,rse,ouo,ruo,RI,tuo,auo,nuo,Rp,tse,suo,luo,PI,iuo,duo,cuo,Pp,ase,fuo,muo,BI,guo,huo,puo,Bp,nse,uuo,_uo,II,buo,vuo,Fuo,Ip,sse,Tuo,Muo,qI,Euo,Cuo,wuo,qp,lse,Auo,yuo,NI,Luo,xuo,$uo,Np,ise,kuo,Suo,jI,Ruo,Puo,Buo,jp,dse,Iuo,quo,DI,Nuo,juo,Duo,Dp,cse,Guo,Ouo,GI,Vuo,Xuo,zuo,Gp,fse,Wuo,Quo,OI,Huo,Uuo,Juo,Op,mse,Yuo,Kuo,VI,Zuo,e_o,o_o,Vp,gse,r_o,t_o,XI,a_o,n_o,s_o,Xp,hse,l_o,i_o,zI,d_o,c_o,f_o,zp,pse,m_o,g_o,WI,h_o,p_o,u_o,Wp,use,__o,b_o,QI,v_o,F_o,T_o,Qp,_se,M_o,E_o,HI,C_o,w_o,A_o,Hp,bse,y_o,L_o,UI,x_o,$_o,k_o,Up,vse,S_o,R_o,JI,P_o,B_o,I_o,Jp,Fse,q_o,N_o,YI,j_o,D_o,G_o,Yp,Tse,O_o,V_o,KI,X_o,z_o,W_o,Kp,Mse,Q_o,H_o,ZI,U_o,J_o,Y_o,Zp,Ese,K_o,Z_o,eq,e1o,o1o,r1o,eu,Cse,t1o,a1o,oq,n1o,s1o,l1o,ou,wse,i1o,d1o,rq,c1o,f1o,m1o,ru,Ase,g1o,h1o,tq,p1o,u1o,_1o,tu,yse,b1o,v1o,aq,F1o,T1o,M1o,au,Lse,E1o,C1o,nq,w1o,A1o,y1o,nu,xse,L1o,x1o,sq,$1o,k1o,S1o,su,$se,R1o,P1o,lq,B1o,I1o,q1o,lu,kse,N1o,j1o,iq,D1o,G1o,O1o,iu,Sse,V1o,X1o,dq,z1o,W1o,Q1o,du,Rse,H1o,U1o,cq,J1o,Y1o,K1o,cu,Pse,Z1o,e2o,fq,o2o,r2o,t2o,fu,Bse,a2o,n2o,mq,s2o,l2o,i2o,mu,Ise,d2o,c2o,gq,f2o,m2o,g2o,gu,qse,h2o,p2o,hq,u2o,_2o,b2o,hu,Nse,v2o,F2o,pq,T2o,M2o,E2o,pu,jse,C2o,w2o,uq,A2o,y2o,L2o,uu,Dse,x2o,$2o,_q,k2o,S2o,R2o,_u,Gse,P2o,B2o,bq,I2o,q2o,N2o,bu,Ose,j2o,D2o,vq,G2o,O2o,V2o,vu,Vse,X2o,z2o,Fq,W2o,Q2o,H2o,Fu,Xse,U2o,J2o,Tq,Y2o,K2o,Z2o,Tu,zse,ebo,obo,Mq,rbo,tbo,abo,Mu,Wse,nbo,sbo,Eq,lbo,ibo,dbo,Eu,Qse,cbo,fbo,Cq,mbo,gbo,hbo,Cu,Hse,pbo,ubo,wq,_bo,bbo,vbo,wu,Use,Fbo,Tbo,Aq,Mbo,Ebo,Cbo,Au,Jse,wbo,Abo,yq,ybo,Lbo,xbo,yu,Yse,$bo,kbo,Lq,Sbo,Rbo,Pbo,Lu,Kse,Bbo,Ibo,xq,qbo,Nbo,jbo,xu,Zse,Dbo,Gbo,$q,Obo,Vbo,Xbo,$u,ele,zbo,Wbo,kq,Qbo,Hbo,Ubo,ku,ole,Jbo,Ybo,Sq,Kbo,Zbo,evo,Su,rle,ovo,rvo,Rq,tvo,avo,nvo,Ru,tle,svo,lvo,Pq,ivo,dvo,cvo,Pu,ale,fvo,mvo,Bq,gvo,hvo,pvo,Bu,nle,uvo,_vo,Iq,bvo,vvo,Fvo,Iu,sle,Tvo,Mvo,qq,Evo,Cvo,wvo,qu,lle,Avo,yvo,Nq,Lvo,xvo,$vo,Nu,ile,kvo,Svo,jq,Rvo,Pvo,Bvo,ju,dle,Ivo,qvo,Dq,Nvo,jvo,Dvo,Du,cle,Gvo,Ovo,Gq,Vvo,Xvo,zvo,Gu,Wvo,fle,Qvo,Hvo,mle,Uvo,Jvo,Ou,SIe,Ai,Vu,gle,B0,Yvo,hle,Kvo,RIe,xo,I0,Zvo,yi,eFo,Oq,oFo,rFo,Vq,tFo,aFo,nFo,q0,sFo,ple,lFo,iFo,dFo,at,N0,cFo,ule,fFo,mFo,Li,gFo,_le,hFo,pFo,Xq,uFo,_Fo,bFo,Xu,vFo,Ye,j0,FFo,ble,TFo,MFo,xa,EFo,vle,CFo,wFo,Fle,AFo,yFo,Tle,LFo,xFo,$Fo,G,zu,Mle,kFo,SFo,zq,RFo,PFo,BFo,Wu,Ele,IFo,qFo,Wq,NFo,jFo,DFo,Qu,Cle,GFo,OFo,Qq,VFo,XFo,zFo,Hu,wle,WFo,QFo,Hq,HFo,UFo,JFo,Uu,Ale,YFo,KFo,Uq,ZFo,e6o,o6o,Ju,yle,r6o,t6o,Jq,a6o,n6o,s6o,Yu,Lle,l6o,i6o,Yq,d6o,c6o,f6o,Ku,xle,m6o,g6o,Kq,h6o,p6o,u6o,Zu,$le,_6o,b6o,Zq,v6o,F6o,T6o,e_,kle,M6o,E6o,eN,C6o,w6o,A6o,o_,Sle,y6o,L6o,oN,x6o,$6o,k6o,r_,Rle,S6o,R6o,rN,P6o,B6o,I6o,t_,Ple,q6o,N6o,tN,j6o,D6o,G6o,a_,Ble,O6o,V6o,aN,X6o,z6o,W6o,n_,Ile,Q6o,H6o,nN,U6o,J6o,Y6o,s_,qle,K6o,Z6o,sN,eTo,oTo,rTo,l_,Nle,tTo,aTo,lN,nTo,sTo,lTo,i_,jle,iTo,dTo,iN,cTo,fTo,mTo,d_,Dle,gTo,hTo,dN,pTo,uTo,_To,c_,Gle,bTo,vTo,cN,FTo,TTo,MTo,f_,Ole,ETo,CTo,fN,wTo,ATo,yTo,m_,Vle,LTo,xTo,mN,$To,kTo,STo,g_,Xle,RTo,PTo,gN,BTo,ITo,qTo,h_,zle,NTo,jTo,hN,DTo,GTo,OTo,p_,Wle,VTo,XTo,pN,zTo,WTo,QTo,u_,Qle,HTo,UTo,uN,JTo,YTo,KTo,__,Hle,ZTo,e8o,_N,o8o,r8o,t8o,b_,Ule,a8o,n8o,bN,s8o,l8o,i8o,v_,Jle,d8o,c8o,vN,f8o,m8o,g8o,F_,Yle,h8o,p8o,FN,u8o,_8o,b8o,T_,Kle,v8o,F8o,TN,T8o,M8o,E8o,M_,Zle,C8o,w8o,MN,A8o,y8o,L8o,E_,eie,x8o,$8o,EN,k8o,S8o,R8o,C_,oie,P8o,B8o,CN,I8o,q8o,N8o,w_,rie,j8o,D8o,wN,G8o,O8o,V8o,A_,tie,X8o,z8o,AN,W8o,Q8o,H8o,y_,aie,U8o,J8o,yN,Y8o,K8o,Z8o,L_,nie,eMo,oMo,LN,rMo,tMo,aMo,x_,sie,nMo,sMo,xN,lMo,iMo,dMo,$_,lie,cMo,fMo,$N,mMo,gMo,hMo,k_,iie,pMo,uMo,kN,_Mo,bMo,vMo,S_,FMo,die,TMo,MMo,cie,EMo,CMo,R_,PIe,xi,P_,fie,D0,wMo,mie,AMo,BIe,$o,G0,yMo,$i,LMo,SN,xMo,$Mo,RN,kMo,SMo,RMo,O0,PMo,gie,BMo,IMo,qMo,nt,V0,NMo,hie,jMo,DMo,ki,GMo,pie,OMo,VMo,PN,XMo,zMo,WMo,B_,QMo,Ke,X0,HMo,uie,UMo,JMo,$a,YMo,_ie,KMo,ZMo,bie,e4o,o4o,vie,r4o,t4o,a4o,z,I_,Fie,n4o,s4o,BN,l4o,i4o,d4o,q_,Tie,c4o,f4o,IN,m4o,g4o,h4o,N_,Mie,p4o,u4o,qN,_4o,b4o,v4o,j_,Eie,F4o,T4o,NN,M4o,E4o,C4o,D_,Cie,w4o,A4o,jN,y4o,L4o,x4o,G_,wie,$4o,k4o,DN,S4o,R4o,P4o,O_,Aie,B4o,I4o,GN,q4o,N4o,j4o,V_,yie,D4o,G4o,ON,O4o,V4o,X4o,X_,Lie,z4o,W4o,VN,Q4o,H4o,U4o,z_,xie,J4o,Y4o,XN,K4o,Z4o,eEo,W_,$ie,oEo,rEo,zN,tEo,aEo,nEo,Q_,kie,sEo,lEo,WN,iEo,dEo,cEo,H_,Sie,fEo,mEo,QN,gEo,hEo,pEo,U_,Rie,uEo,_Eo,HN,bEo,vEo,FEo,J_,Pie,TEo,MEo,UN,EEo,CEo,wEo,Y_,Bie,AEo,yEo,JN,LEo,xEo,$Eo,K_,Iie,kEo,SEo,YN,REo,PEo,BEo,Z_,qie,IEo,qEo,KN,NEo,jEo,DEo,e1,Nie,GEo,OEo,ZN,VEo,XEo,zEo,o1,jie,WEo,QEo,ej,HEo,UEo,JEo,r1,Die,YEo,KEo,oj,ZEo,eCo,oCo,t1,Gie,rCo,tCo,rj,aCo,nCo,sCo,a1,Oie,lCo,iCo,tj,dCo,cCo,fCo,n1,Vie,mCo,gCo,aj,hCo,pCo,uCo,s1,Xie,_Co,bCo,nj,vCo,FCo,TCo,l1,zie,MCo,ECo,sj,CCo,wCo,ACo,i1,Wie,yCo,LCo,lj,xCo,$Co,kCo,d1,Qie,SCo,RCo,ij,PCo,BCo,ICo,c1,Hie,qCo,NCo,dj,jCo,DCo,GCo,f1,Uie,OCo,VCo,cj,XCo,zCo,WCo,m1,Jie,QCo,HCo,fj,UCo,JCo,YCo,g1,Yie,KCo,ZCo,mj,e5o,o5o,r5o,h1,Kie,t5o,a5o,gj,n5o,s5o,l5o,p1,Zie,i5o,d5o,hj,c5o,f5o,m5o,u1,ede,g5o,h5o,pj,p5o,u5o,_5o,_1,ode,b5o,v5o,uj,F5o,T5o,M5o,b1,E5o,rde,C5o,w5o,tde,A5o,y5o,v1,IIe,Si,F1,ade,z0,L5o,nde,x5o,qIe,ko,W0,$5o,Ri,k5o,_j,S5o,R5o,bj,P5o,B5o,I5o,Q0,q5o,sde,N5o,j5o,D5o,st,H0,G5o,lde,O5o,V5o,Pi,X5o,ide,z5o,W5o,vj,Q5o,H5o,U5o,T1,J5o,Ze,U0,Y5o,dde,K5o,Z5o,ka,e3o,cde,o3o,r3o,fde,t3o,a3o,mde,n3o,s3o,l3o,W,M1,gde,i3o,d3o,Fj,c3o,f3o,m3o,E1,hde,g3o,h3o,Tj,p3o,u3o,_3o,C1,pde,b3o,v3o,Mj,F3o,T3o,M3o,w1,ude,E3o,C3o,Ej,w3o,A3o,y3o,A1,_de,L3o,x3o,Cj,$3o,k3o,S3o,y1,bde,R3o,P3o,wj,B3o,I3o,q3o,L1,vde,N3o,j3o,Aj,D3o,G3o,O3o,x1,Fde,V3o,X3o,yj,z3o,W3o,Q3o,$1,Tde,H3o,U3o,Lj,J3o,Y3o,K3o,k1,Mde,Z3o,ewo,xj,owo,rwo,two,S1,Ede,awo,nwo,$j,swo,lwo,iwo,R1,Cde,dwo,cwo,kj,fwo,mwo,gwo,P1,wde,hwo,pwo,Sj,uwo,_wo,bwo,B1,Ade,vwo,Fwo,Rj,Two,Mwo,Ewo,I1,yde,Cwo,wwo,Pj,Awo,ywo,Lwo,q1,Lde,xwo,$wo,Bj,kwo,Swo,Rwo,N1,xde,Pwo,Bwo,Ij,Iwo,qwo,Nwo,j1,$de,jwo,Dwo,qj,Gwo,Owo,Vwo,D1,kde,Xwo,zwo,Nj,Wwo,Qwo,Hwo,G1,Sde,Uwo,Jwo,jj,Ywo,Kwo,Zwo,O1,Rde,eAo,oAo,Dj,rAo,tAo,aAo,V1,Pde,nAo,sAo,Gj,lAo,iAo,dAo,X1,Bde,cAo,fAo,Oj,mAo,gAo,hAo,z1,Ide,pAo,uAo,Vj,_Ao,bAo,vAo,W1,qde,FAo,TAo,Xj,MAo,EAo,CAo,Q1,Nde,wAo,AAo,zj,yAo,LAo,xAo,H1,jde,$Ao,kAo,Wj,SAo,RAo,PAo,U1,Dde,BAo,IAo,Qj,qAo,NAo,jAo,J1,Gde,DAo,GAo,Hj,OAo,VAo,XAo,Y1,Ode,zAo,WAo,Uj,QAo,HAo,UAo,K1,Vde,JAo,YAo,Xde,KAo,ZAo,e0o,Z1,zde,o0o,r0o,Jj,t0o,a0o,n0o,e2,Wde,s0o,l0o,Yj,i0o,d0o,c0o,o2,Qde,f0o,m0o,Kj,g0o,h0o,p0o,r2,Hde,u0o,_0o,Zj,b0o,v0o,F0o,t2,T0o,Ude,M0o,E0o,Jde,C0o,w0o,a2,NIe,Bi,n2,Yde,J0,A0o,Kde,y0o,jIe,So,Y0,L0o,Ii,x0o,eD,$0o,k0o,oD,S0o,R0o,P0o,K0,B0o,Zde,I0o,q0o,N0o,lt,Z0,j0o,ece,D0o,G0o,qi,O0o,oce,V0o,X0o,rD,z0o,W0o,Q0o,s2,H0o,eo,ey,U0o,rce,J0o,Y0o,Sa,K0o,tce,Z0o,eyo,ace,oyo,ryo,nce,tyo,ayo,nyo,ue,l2,sce,syo,lyo,tD,iyo,dyo,cyo,i2,lce,fyo,myo,aD,gyo,hyo,pyo,d2,ice,uyo,_yo,nD,byo,vyo,Fyo,c2,dce,Tyo,Myo,sD,Eyo,Cyo,wyo,f2,cce,Ayo,yyo,lD,Lyo,xyo,$yo,m2,fce,kyo,Syo,iD,Ryo,Pyo,Byo,g2,mce,Iyo,qyo,dD,Nyo,jyo,Dyo,h2,gce,Gyo,Oyo,cD,Vyo,Xyo,zyo,p2,hce,Wyo,Qyo,fD,Hyo,Uyo,Jyo,u2,pce,Yyo,Kyo,mD,Zyo,eLo,oLo,_2,uce,rLo,tLo,gD,aLo,nLo,sLo,b2,_ce,lLo,iLo,hD,dLo,cLo,fLo,v2,bce,mLo,gLo,pD,hLo,pLo,uLo,F2,vce,_Lo,bLo,uD,vLo,FLo,TLo,T2,Fce,MLo,ELo,_D,CLo,wLo,ALo,M2,Tce,yLo,LLo,bD,xLo,$Lo,kLo,E2,SLo,Mce,RLo,PLo,Ece,BLo,ILo,C2,DIe,Ni,w2,Cce,oy,qLo,wce,NLo,GIe,Ro,ry,jLo,ji,DLo,vD,GLo,OLo,FD,VLo,XLo,zLo,ty,WLo,Ace,QLo,HLo,ULo,it,ay,JLo,yce,YLo,KLo,Di,ZLo,Lce,exo,oxo,TD,rxo,txo,axo,A2,nxo,oo,ny,sxo,xce,lxo,ixo,Ra,dxo,$ce,cxo,fxo,kce,mxo,gxo,Sce,hxo,pxo,uxo,q,y2,Rce,_xo,bxo,MD,vxo,Fxo,Txo,L2,Pce,Mxo,Exo,ED,Cxo,wxo,Axo,x2,Bce,yxo,Lxo,CD,xxo,$xo,kxo,$2,Ice,Sxo,Rxo,wD,Pxo,Bxo,Ixo,k2,qce,qxo,Nxo,AD,jxo,Dxo,Gxo,S2,Nce,Oxo,Vxo,yD,Xxo,zxo,Wxo,R2,jce,Qxo,Hxo,LD,Uxo,Jxo,Yxo,P2,Dce,Kxo,Zxo,xD,e9o,o9o,r9o,B2,Gce,t9o,a9o,$D,n9o,s9o,l9o,I2,Oce,i9o,d9o,kD,c9o,f9o,m9o,q2,Vce,g9o,h9o,SD,p9o,u9o,_9o,N2,Xce,b9o,v9o,RD,F9o,T9o,M9o,j2,zce,E9o,C9o,PD,w9o,A9o,y9o,D2,Wce,L9o,x9o,BD,$9o,k9o,S9o,G2,Qce,R9o,P9o,ID,B9o,I9o,q9o,O2,Hce,N9o,j9o,qD,D9o,G9o,O9o,V2,Uce,V9o,X9o,ND,z9o,W9o,Q9o,X2,Jce,H9o,U9o,jD,J9o,Y9o,K9o,z2,Yce,Z9o,e7o,DD,o7o,r7o,t7o,W2,Kce,a7o,n7o,GD,s7o,l7o,i7o,Q2,Zce,d7o,c7o,OD,f7o,m7o,g7o,H2,efe,h7o,p7o,VD,u7o,_7o,b7o,U2,ofe,v7o,F7o,XD,T7o,M7o,E7o,J2,rfe,C7o,w7o,zD,A7o,y7o,L7o,Y2,tfe,x7o,$7o,WD,k7o,S7o,R7o,K2,afe,P7o,B7o,QD,I7o,q7o,N7o,Z2,nfe,j7o,D7o,HD,G7o,O7o,V7o,eb,sfe,X7o,z7o,UD,W7o,Q7o,H7o,ob,lfe,U7o,J7o,JD,Y7o,K7o,Z7o,rb,ife,e$o,o$o,YD,r$o,t$o,a$o,tb,dfe,n$o,s$o,KD,l$o,i$o,d$o,ab,cfe,c$o,f$o,ZD,m$o,g$o,h$o,nb,ffe,p$o,u$o,eG,_$o,b$o,v$o,sb,mfe,F$o,T$o,oG,M$o,E$o,C$o,lb,gfe,w$o,A$o,rG,y$o,L$o,x$o,ib,hfe,$$o,k$o,tG,S$o,R$o,P$o,db,pfe,B$o,I$o,aG,q$o,N$o,j$o,cb,ufe,D$o,G$o,nG,O$o,V$o,X$o,fb,_fe,z$o,W$o,sG,Q$o,H$o,U$o,mb,bfe,J$o,Y$o,lG,K$o,Z$o,eko,gb,vfe,oko,rko,iG,tko,ako,nko,hb,Ffe,sko,lko,dG,iko,dko,cko,pb,Tfe,fko,mko,cG,gko,hko,pko,ub,Mfe,uko,_ko,fG,bko,vko,Fko,_b,Efe,Tko,Mko,mG,Eko,Cko,wko,bb,Cfe,Ako,yko,gG,Lko,xko,$ko,vb,kko,wfe,Sko,Rko,Afe,Pko,Bko,Fb,OIe,Gi,Tb,yfe,sy,Iko,Lfe,qko,VIe,Po,ly,Nko,Oi,jko,hG,Dko,Gko,pG,Oko,Vko,Xko,iy,zko,xfe,Wko,Qko,Hko,dt,dy,Uko,$fe,Jko,Yko,Vi,Kko,kfe,Zko,eSo,uG,oSo,rSo,tSo,Mb,aSo,ro,cy,nSo,Sfe,sSo,lSo,Pa,iSo,Rfe,dSo,cSo,Pfe,fSo,mSo,Bfe,gSo,hSo,pSo,Y,Eb,Ife,uSo,_So,_G,bSo,vSo,FSo,Cb,qfe,TSo,MSo,bG,ESo,CSo,wSo,wb,Nfe,ASo,ySo,vG,LSo,xSo,$So,Ab,jfe,kSo,SSo,FG,RSo,PSo,BSo,yb,Dfe,ISo,qSo,TG,NSo,jSo,DSo,Lb,Gfe,GSo,OSo,MG,VSo,XSo,zSo,xb,Ofe,WSo,QSo,EG,HSo,USo,JSo,$b,Vfe,YSo,KSo,CG,ZSo,eRo,oRo,kb,Xfe,rRo,tRo,wG,aRo,nRo,sRo,Sb,zfe,lRo,iRo,AG,dRo,cRo,fRo,Rb,Wfe,mRo,gRo,yG,hRo,pRo,uRo,Pb,Qfe,_Ro,bRo,LG,vRo,FRo,TRo,Bb,Hfe,MRo,ERo,xG,CRo,wRo,ARo,Ib,Ufe,yRo,LRo,$G,xRo,$Ro,kRo,qb,Jfe,SRo,RRo,kG,PRo,BRo,IRo,Nb,Yfe,qRo,NRo,SG,jRo,DRo,GRo,jb,Kfe,ORo,VRo,RG,XRo,zRo,WRo,Db,Zfe,QRo,HRo,PG,URo,JRo,YRo,Gb,eme,KRo,ZRo,BG,ePo,oPo,rPo,Ob,ome,tPo,aPo,IG,nPo,sPo,lPo,Vb,rme,iPo,dPo,qG,cPo,fPo,mPo,Xb,tme,gPo,hPo,NG,pPo,uPo,_Po,zb,ame,bPo,vPo,jG,FPo,TPo,MPo,Wb,nme,EPo,CPo,DG,wPo,APo,yPo,Qb,sme,LPo,xPo,GG,$Po,kPo,SPo,Hb,lme,RPo,PPo,OG,BPo,IPo,qPo,Ub,ime,NPo,jPo,VG,DPo,GPo,OPo,Jb,dme,VPo,XPo,XG,zPo,WPo,QPo,Yb,cme,HPo,UPo,zG,JPo,YPo,KPo,Kb,ZPo,fme,eBo,oBo,mme,rBo,tBo,Zb,XIe,Xi,ev,gme,fy,aBo,hme,nBo,zIe,Bo,my,sBo,zi,lBo,WG,iBo,dBo,QG,cBo,fBo,mBo,gy,gBo,pme,hBo,pBo,uBo,ct,hy,_Bo,ume,bBo,vBo,Wi,FBo,_me,TBo,MBo,HG,EBo,CBo,wBo,ov,ABo,to,py,yBo,bme,LBo,xBo,Ba,$Bo,vme,kBo,SBo,Fme,RBo,PBo,Tme,BBo,IBo,qBo,Yr,rv,Mme,NBo,jBo,UG,DBo,GBo,OBo,tv,Eme,VBo,XBo,JG,zBo,WBo,QBo,av,Cme,HBo,UBo,YG,JBo,YBo,KBo,nv,wme,ZBo,eIo,KG,oIo,rIo,tIo,sv,Ame,aIo,nIo,ZG,sIo,lIo,iIo,lv,dIo,yme,cIo,fIo,Lme,mIo,gIo,iv,WIe,Qi,dv,xme,uy,hIo,$me,pIo,QIe,Io,_y,uIo,Hi,_Io,eO,bIo,vIo,oO,FIo,TIo,MIo,by,EIo,kme,CIo,wIo,AIo,ft,vy,yIo,Sme,LIo,xIo,Ui,$Io,Rme,kIo,SIo,rO,RIo,PIo,BIo,cv,IIo,ao,Fy,qIo,Pme,NIo,jIo,Ia,DIo,Bme,GIo,OIo,Ime,VIo,XIo,qme,zIo,WIo,QIo,U,fv,Nme,HIo,UIo,tO,JIo,YIo,KIo,mv,jme,ZIo,eqo,aO,oqo,rqo,tqo,gv,Dme,aqo,nqo,nO,sqo,lqo,iqo,hv,Gme,dqo,cqo,sO,fqo,mqo,gqo,pv,Ome,hqo,pqo,lO,uqo,_qo,bqo,uv,Vme,vqo,Fqo,iO,Tqo,Mqo,Eqo,_v,Xme,Cqo,wqo,dO,Aqo,yqo,Lqo,bv,zme,xqo,$qo,cO,kqo,Sqo,Rqo,vv,Wme,Pqo,Bqo,fO,Iqo,qqo,Nqo,Fv,Qme,jqo,Dqo,mO,Gqo,Oqo,Vqo,Tv,Hme,Xqo,zqo,gO,Wqo,Qqo,Hqo,Mv,Ume,Uqo,Jqo,hO,Yqo,Kqo,Zqo,Ev,Jme,eNo,oNo,pO,rNo,tNo,aNo,Cv,Yme,nNo,sNo,uO,lNo,iNo,dNo,wv,Kme,cNo,fNo,_O,mNo,gNo,hNo,Av,Zme,pNo,uNo,bO,_No,bNo,vNo,yv,ege,FNo,TNo,vO,MNo,ENo,CNo,Lv,oge,wNo,ANo,FO,yNo,LNo,xNo,xv,rge,$No,kNo,TO,SNo,RNo,PNo,$v,tge,BNo,INo,MO,qNo,NNo,jNo,kv,age,DNo,GNo,EO,ONo,VNo,XNo,Sv,nge,zNo,WNo,CO,QNo,HNo,UNo,Rv,sge,JNo,YNo,wO,KNo,ZNo,ejo,Pv,lge,ojo,rjo,AO,tjo,ajo,njo,Bv,ige,sjo,ljo,yO,ijo,djo,cjo,Iv,dge,fjo,mjo,LO,gjo,hjo,pjo,qv,cge,ujo,_jo,xO,bjo,vjo,Fjo,Nv,fge,Tjo,Mjo,$O,Ejo,Cjo,wjo,jv,mge,Ajo,yjo,kO,Ljo,xjo,$jo,Dv,gge,kjo,Sjo,SO,Rjo,Pjo,Bjo,Gv,hge,Ijo,qjo,RO,Njo,jjo,Djo,Ov,pge,Gjo,Ojo,PO,Vjo,Xjo,zjo,Vv,uge,Wjo,Qjo,BO,Hjo,Ujo,Jjo,Xv,Yjo,_ge,Kjo,Zjo,bge,eDo,oDo,zv,HIe,Ji,Wv,vge,Ty,rDo,Fge,tDo,UIe,qo,My,aDo,Yi,nDo,IO,sDo,lDo,qO,iDo,dDo,cDo,Ey,fDo,Tge,mDo,gDo,hDo,mt,Cy,pDo,Mge,uDo,_Do,Ki,bDo,Ege,vDo,FDo,NO,TDo,MDo,EDo,Qv,CDo,no,wy,wDo,Cge,ADo,yDo,qa,LDo,wge,xDo,$Do,Age,kDo,SDo,yge,RDo,PDo,BDo,V,Hv,Lge,IDo,qDo,jO,NDo,jDo,DDo,Uv,xge,GDo,ODo,DO,VDo,XDo,zDo,Jv,$ge,WDo,QDo,GO,HDo,UDo,JDo,Yv,kge,YDo,KDo,OO,ZDo,eGo,oGo,Kv,Sge,rGo,tGo,VO,aGo,nGo,sGo,Zv,Rge,lGo,iGo,XO,dGo,cGo,fGo,eF,Pge,mGo,gGo,zO,hGo,pGo,uGo,oF,Bge,_Go,bGo,WO,vGo,FGo,TGo,rF,Ige,MGo,EGo,QO,CGo,wGo,AGo,tF,qge,yGo,LGo,HO,xGo,$Go,kGo,aF,Nge,SGo,RGo,UO,PGo,BGo,IGo,nF,jge,qGo,NGo,JO,jGo,DGo,GGo,sF,Dge,OGo,VGo,YO,XGo,zGo,WGo,lF,Gge,QGo,HGo,KO,UGo,JGo,YGo,iF,Oge,KGo,ZGo,ZO,eOo,oOo,rOo,dF,Vge,tOo,aOo,eV,nOo,sOo,lOo,cF,Xge,iOo,dOo,oV,cOo,fOo,mOo,fF,zge,gOo,hOo,rV,pOo,uOo,_Oo,mF,Wge,bOo,vOo,tV,FOo,TOo,MOo,gF,Qge,EOo,COo,aV,wOo,AOo,yOo,hF,Hge,LOo,xOo,nV,$Oo,kOo,SOo,pF,Uge,ROo,POo,sV,BOo,IOo,qOo,uF,Jge,NOo,jOo,lV,DOo,GOo,OOo,_F,Yge,VOo,XOo,iV,zOo,WOo,QOo,bF,Kge,HOo,UOo,dV,JOo,YOo,KOo,vF,Zge,ZOo,eVo,cV,oVo,rVo,tVo,FF,ehe,aVo,nVo,fV,sVo,lVo,iVo,TF,ohe,dVo,cVo,mV,fVo,mVo,gVo,MF,rhe,hVo,pVo,gV,uVo,_Vo,bVo,EF,the,vVo,FVo,hV,TVo,MVo,EVo,CF,ahe,CVo,wVo,pV,AVo,yVo,LVo,wF,nhe,xVo,$Vo,uV,kVo,SVo,RVo,AF,she,PVo,BVo,_V,IVo,qVo,NVo,yF,lhe,jVo,DVo,bV,GVo,OVo,VVo,LF,ihe,XVo,zVo,vV,WVo,QVo,HVo,xF,dhe,UVo,JVo,FV,YVo,KVo,ZVo,$F,che,eXo,oXo,TV,rXo,tXo,aXo,kF,fhe,nXo,sXo,MV,lXo,iXo,dXo,SF,mhe,cXo,fXo,EV,mXo,gXo,hXo,RF,pXo,ghe,uXo,_Xo,hhe,bXo,vXo,PF,JIe,Zi,BF,phe,Ay,FXo,uhe,TXo,YIe,No,yy,MXo,ed,EXo,CV,CXo,wXo,wV,AXo,yXo,LXo,Ly,xXo,_he,$Xo,kXo,SXo,gt,xy,RXo,bhe,PXo,BXo,od,IXo,vhe,qXo,NXo,AV,jXo,DXo,GXo,IF,OXo,so,$y,VXo,Fhe,XXo,zXo,Na,WXo,The,QXo,HXo,Mhe,UXo,JXo,Ehe,YXo,KXo,ZXo,Che,qF,whe,ezo,ozo,yV,rzo,tzo,azo,NF,nzo,Ahe,szo,lzo,yhe,izo,dzo,jF,KIe,rd,DF,Lhe,ky,czo,xhe,fzo,ZIe,jo,Sy,mzo,td,gzo,LV,hzo,pzo,xV,uzo,_zo,bzo,Ry,vzo,$he,Fzo,Tzo,Mzo,ht,Py,Ezo,khe,Czo,wzo,ad,Azo,She,yzo,Lzo,$V,xzo,$zo,kzo,GF,Szo,lo,By,Rzo,Rhe,Pzo,Bzo,ja,Izo,Phe,qzo,Nzo,Bhe,jzo,Dzo,Ihe,Gzo,Ozo,Vzo,Fe,OF,qhe,Xzo,zzo,kV,Wzo,Qzo,Hzo,VF,Nhe,Uzo,Jzo,SV,Yzo,Kzo,Zzo,XF,jhe,eWo,oWo,RV,rWo,tWo,aWo,Rs,Dhe,nWo,sWo,PV,lWo,iWo,BV,dWo,cWo,fWo,zF,Ghe,mWo,gWo,IV,hWo,pWo,uWo,pt,Ohe,_Wo,bWo,qV,vWo,FWo,NV,TWo,MWo,jV,EWo,CWo,wWo,WF,Vhe,AWo,yWo,DV,LWo,xWo,$Wo,QF,Xhe,kWo,SWo,GV,RWo,PWo,BWo,HF,zhe,IWo,qWo,OV,NWo,jWo,DWo,UF,Whe,GWo,OWo,VV,VWo,XWo,zWo,JF,Qhe,WWo,QWo,XV,HWo,UWo,JWo,YF,Hhe,YWo,KWo,zV,ZWo,eQo,oQo,KF,Uhe,rQo,tQo,WV,aQo,nQo,sQo,ZF,lQo,Jhe,iQo,dQo,Yhe,cQo,fQo,e6,eqe,nd,o6,Khe,Iy,mQo,Zhe,gQo,oqe,Do,qy,hQo,sd,pQo,QV,uQo,_Qo,HV,bQo,vQo,FQo,Ny,TQo,epe,MQo,EQo,CQo,ut,jy,wQo,ope,AQo,yQo,ld,LQo,rpe,xQo,$Qo,UV,kQo,SQo,RQo,r6,PQo,io,Dy,BQo,tpe,IQo,qQo,Da,NQo,ape,jQo,DQo,npe,GQo,OQo,spe,VQo,XQo,zQo,lpe,t6,ipe,WQo,QQo,JV,HQo,UQo,JQo,a6,YQo,dpe,KQo,ZQo,cpe,eHo,oHo,n6,rqe,id,s6,fpe,Gy,rHo,mpe,tHo,tqe,Go,Oy,aHo,dd,nHo,YV,sHo,lHo,KV,iHo,dHo,cHo,Vy,fHo,gpe,mHo,gHo,hHo,_t,Xy,pHo,hpe,uHo,_Ho,cd,bHo,ppe,vHo,FHo,ZV,THo,MHo,EHo,l6,CHo,co,zy,wHo,upe,AHo,yHo,Ga,LHo,_pe,xHo,$Ho,bpe,kHo,SHo,vpe,RHo,PHo,BHo,ke,i6,Fpe,IHo,qHo,eX,NHo,jHo,DHo,d6,Tpe,GHo,OHo,oX,VHo,XHo,zHo,c6,Mpe,WHo,QHo,rX,HHo,UHo,JHo,f6,Epe,YHo,KHo,tX,ZHo,eUo,oUo,m6,Cpe,rUo,tUo,aX,aUo,nUo,sUo,g6,wpe,lUo,iUo,nX,dUo,cUo,fUo,h6,Ape,mUo,gUo,sX,hUo,pUo,uUo,p6,ype,_Uo,bUo,lX,vUo,FUo,TUo,u6,Lpe,MUo,EUo,iX,CUo,wUo,AUo,_6,yUo,xpe,LUo,xUo,$pe,$Uo,kUo,b6,aqe,fd,v6,kpe,Wy,SUo,Spe,RUo,nqe,Oo,Qy,PUo,md,BUo,dX,IUo,qUo,cX,NUo,jUo,DUo,Hy,GUo,Rpe,OUo,VUo,XUo,bt,Uy,zUo,Ppe,WUo,QUo,gd,HUo,Bpe,UUo,JUo,fX,YUo,KUo,ZUo,F6,eJo,fo,Jy,oJo,Ipe,rJo,tJo,Oa,aJo,qpe,nJo,sJo,Npe,lJo,iJo,jpe,dJo,cJo,fJo,Kr,T6,Dpe,mJo,gJo,mX,hJo,pJo,uJo,M6,Gpe,_Jo,bJo,gX,vJo,FJo,TJo,E6,Ope,MJo,EJo,hX,CJo,wJo,AJo,C6,Vpe,yJo,LJo,pX,xJo,$Jo,kJo,w6,Xpe,SJo,RJo,uX,PJo,BJo,IJo,A6,qJo,zpe,NJo,jJo,Wpe,DJo,GJo,y6,sqe,hd,L6,Qpe,Yy,OJo,Hpe,VJo,lqe,Vo,Ky,XJo,pd,zJo,_X,WJo,QJo,bX,HJo,UJo,JJo,Zy,YJo,Upe,KJo,ZJo,eYo,vt,eL,oYo,Jpe,rYo,tYo,ud,aYo,Ype,nYo,sYo,vX,lYo,iYo,dYo,x6,cYo,mo,oL,fYo,Kpe,mYo,gYo,Va,hYo,Zpe,pYo,uYo,eue,_Yo,bYo,oue,vYo,FYo,TYo,Se,$6,rue,MYo,EYo,FX,CYo,wYo,AYo,k6,tue,yYo,LYo,TX,xYo,$Yo,kYo,S6,aue,SYo,RYo,MX,PYo,BYo,IYo,R6,nue,qYo,NYo,EX,jYo,DYo,GYo,P6,sue,OYo,VYo,CX,XYo,zYo,WYo,B6,lue,QYo,HYo,wX,UYo,JYo,YYo,I6,iue,KYo,ZYo,AX,eKo,oKo,rKo,q6,due,tKo,aKo,yX,nKo,sKo,lKo,N6,cue,iKo,dKo,LX,cKo,fKo,mKo,j6,gKo,fue,hKo,pKo,mue,uKo,_Ko,D6,iqe,_d,G6,gue,rL,bKo,hue,vKo,dqe,Xo,tL,FKo,bd,TKo,xX,MKo,EKo,$X,CKo,wKo,AKo,aL,yKo,pue,LKo,xKo,$Ko,Ft,nL,kKo,uue,SKo,RKo,vd,PKo,_ue,BKo,IKo,kX,qKo,NKo,jKo,O6,DKo,go,sL,GKo,bue,OKo,VKo,Xa,XKo,vue,zKo,WKo,Fue,QKo,HKo,Tue,UKo,JKo,YKo,lL,V6,Mue,KKo,ZKo,SX,eZo,oZo,rZo,X6,Eue,tZo,aZo,RX,nZo,sZo,lZo,z6,iZo,Cue,dZo,cZo,wue,fZo,mZo,W6,cqe,Fd,Q6,Aue,iL,gZo,yue,hZo,fqe,zo,dL,pZo,Td,uZo,PX,_Zo,bZo,BX,vZo,FZo,TZo,cL,MZo,Lue,EZo,CZo,wZo,Tt,fL,AZo,xue,yZo,LZo,Md,xZo,$ue,$Zo,kZo,IX,SZo,RZo,PZo,H6,BZo,ho,mL,IZo,kue,qZo,NZo,za,jZo,Sue,DZo,GZo,Rue,OZo,VZo,Pue,XZo,zZo,WZo,Zr,U6,Bue,QZo,HZo,qX,UZo,JZo,YZo,J6,Iue,KZo,ZZo,NX,eer,oer,rer,Y6,que,ter,aer,jX,ner,ser,ler,K6,Nue,ier,der,DX,cer,fer,mer,Z6,jue,ger,her,GX,per,uer,_er,eT,ber,Due,ver,Fer,Gue,Ter,Mer,oT,mqe,Ed,rT,Oue,gL,Eer,Vue,Cer,gqe,Wo,hL,wer,Cd,Aer,OX,yer,Ler,VX,xer,$er,ker,pL,Ser,Xue,Rer,Per,Ber,Mt,uL,Ier,zue,qer,Ner,wd,jer,Wue,Der,Ger,XX,Oer,Ver,Xer,tT,zer,po,_L,Wer,Que,Qer,Her,Wa,Uer,Hue,Jer,Yer,Uue,Ker,Zer,Jue,eor,oor,ror,Ad,aT,Yue,tor,aor,zX,nor,sor,lor,nT,Kue,ior,dor,WX,cor,mor,gor,sT,Zue,hor,por,QX,uor,_or,bor,lT,vor,e_e,For,Tor,o_e,Mor,Eor,iT,hqe,yd,dT,r_e,bL,Cor,t_e,wor,pqe,Qo,vL,Aor,Ld,yor,HX,Lor,xor,UX,$or,kor,Sor,FL,Ror,a_e,Por,Bor,Ior,Et,TL,qor,n_e,Nor,jor,xd,Dor,s_e,Gor,Oor,JX,Vor,Xor,zor,cT,Wor,uo,ML,Qor,l_e,Hor,Uor,Qa,Jor,i_e,Yor,Kor,d_e,Zor,err,c_e,orr,rrr,trr,EL,fT,f_e,arr,nrr,YX,srr,lrr,irr,mT,m_e,drr,crr,KX,frr,mrr,grr,gT,hrr,g_e,prr,urr,h_e,_rr,brr,hT,uqe,$d,pT,p_e,CL,vrr,u_e,Frr,_qe,Ho,wL,Trr,kd,Mrr,ZX,Err,Crr,ez,wrr,Arr,yrr,AL,Lrr,__e,xrr,$rr,krr,Ct,yL,Srr,b_e,Rrr,Prr,Sd,Brr,v_e,Irr,qrr,oz,Nrr,jrr,Drr,uT,Grr,_o,LL,Orr,F_e,Vrr,Xrr,Ha,zrr,T_e,Wrr,Qrr,M_e,Hrr,Urr,E_e,Jrr,Yrr,Krr,C_e,_T,w_e,Zrr,etr,rz,otr,rtr,ttr,bT,atr,A_e,ntr,str,y_e,ltr,itr,vT,bqe,Rd,FT,L_e,xL,dtr,x_e,ctr,vqe,Uo,$L,ftr,Pd,mtr,tz,gtr,htr,az,ptr,utr,_tr,kL,btr,$_e,vtr,Ftr,Ttr,wt,SL,Mtr,k_e,Etr,Ctr,Bd,wtr,S_e,Atr,ytr,nz,Ltr,xtr,$tr,TT,ktr,bo,RL,Str,R_e,Rtr,Ptr,Ua,Btr,P_e,Itr,qtr,B_e,Ntr,jtr,I_e,Dtr,Gtr,Otr,Ja,MT,q_e,Vtr,Xtr,sz,ztr,Wtr,Qtr,ET,N_e,Htr,Utr,lz,Jtr,Ytr,Ktr,CT,j_e,Ztr,ear,iz,oar,rar,tar,wT,D_e,aar,nar,dz,sar,lar,iar,AT,dar,G_e,car,far,O_e,mar,gar,yT,Fqe,Id,LT,V_e,PL,har,X_e,par,Tqe,Jo,BL,uar,qd,_ar,cz,bar,Far,fz,Tar,Mar,Ear,IL,Car,z_e,war,Aar,yar,At,qL,Lar,W_e,xar,$ar,Nd,kar,Q_e,Sar,Rar,mz,Par,Bar,Iar,xT,qar,vo,NL,Nar,H_e,jar,Dar,Ya,Gar,U_e,Oar,Var,J_e,Xar,zar,Y_e,War,Qar,Har,K_e,$T,Z_e,Uar,Jar,gz,Yar,Kar,Zar,kT,enr,e1e,onr,rnr,o1e,tnr,anr,ST,Mqe,jd,RT,r1e,jL,nnr,t1e,snr,Eqe,Yo,DL,lnr,Dd,inr,hz,dnr,cnr,pz,fnr,mnr,gnr,GL,hnr,a1e,pnr,unr,_nr,yt,OL,bnr,n1e,vnr,Fnr,Gd,Tnr,s1e,Mnr,Enr,uz,Cnr,wnr,Anr,PT,ynr,wr,VL,Lnr,l1e,xnr,$nr,Ka,knr,i1e,Snr,Rnr,d1e,Pnr,Bnr,c1e,Inr,qnr,Nnr,N,BT,f1e,jnr,Dnr,_z,Gnr,Onr,Vnr,IT,m1e,Xnr,znr,bz,Wnr,Qnr,Hnr,qT,g1e,Unr,Jnr,vz,Ynr,Knr,Znr,NT,h1e,esr,osr,Fz,rsr,tsr,asr,jT,p1e,nsr,ssr,Tz,lsr,isr,dsr,DT,u1e,csr,fsr,Mz,msr,gsr,hsr,GT,_1e,psr,usr,Ez,_sr,bsr,vsr,OT,b1e,Fsr,Tsr,Cz,Msr,Esr,Csr,VT,v1e,wsr,Asr,wz,ysr,Lsr,xsr,XT,F1e,$sr,ksr,Az,Ssr,Rsr,Psr,zT,T1e,Bsr,Isr,yz,qsr,Nsr,jsr,WT,M1e,Dsr,Gsr,Lz,Osr,Vsr,Xsr,QT,E1e,zsr,Wsr,xz,Qsr,Hsr,Usr,HT,C1e,Jsr,Ysr,$z,Ksr,Zsr,elr,UT,w1e,olr,rlr,kz,tlr,alr,nlr,JT,A1e,slr,llr,Sz,ilr,dlr,clr,YT,y1e,flr,mlr,Rz,glr,hlr,plr,Ps,L1e,ulr,_lr,Pz,blr,vlr,Bz,Flr,Tlr,Mlr,KT,x1e,Elr,Clr,Iz,wlr,Alr,ylr,ZT,$1e,Llr,xlr,qz,$lr,klr,Slr,e8,k1e,Rlr,Plr,Nz,Blr,Ilr,qlr,o8,S1e,Nlr,jlr,jz,Dlr,Glr,Olr,r8,R1e,Vlr,Xlr,Dz,zlr,Wlr,Qlr,t8,P1e,Hlr,Ulr,Gz,Jlr,Ylr,Klr,a8,B1e,Zlr,eir,Oz,oir,rir,tir,n8,I1e,air,nir,Vz,sir,lir,iir,s8,q1e,dir,cir,Xz,fir,mir,gir,l8,N1e,hir,pir,zz,uir,_ir,bir,i8,j1e,vir,Fir,Wz,Tir,Mir,Eir,d8,D1e,Cir,wir,Qz,Air,yir,Lir,c8,G1e,xir,$ir,Hz,kir,Sir,Rir,f8,O1e,Pir,Bir,Uz,Iir,qir,Nir,m8,V1e,jir,Dir,Jz,Gir,Oir,Vir,g8,X1e,Xir,zir,Yz,Wir,Qir,Hir,h8,z1e,Uir,Jir,Kz,Yir,Kir,Zir,p8,W1e,edr,odr,Zz,rdr,tdr,adr,u8,Q1e,ndr,sdr,eW,ldr,idr,ddr,_8,H1e,cdr,fdr,oW,mdr,gdr,hdr,b8,U1e,pdr,udr,rW,_dr,bdr,vdr,v8,J1e,Fdr,Tdr,tW,Mdr,Edr,Cdr,F8,Y1e,wdr,Adr,aW,ydr,Ldr,xdr,T8,K1e,$dr,kdr,nW,Sdr,Rdr,Pdr,M8,Z1e,Bdr,Idr,sW,qdr,Ndr,jdr,E8,e2e,Ddr,Gdr,lW,Odr,Vdr,Xdr,C8,o2e,zdr,Wdr,iW,Qdr,Hdr,Udr,w8,Cqe,Od,A8,r2e,XL,Jdr,t2e,Ydr,wqe,Ko,zL,Kdr,Vd,Zdr,dW,ecr,ocr,cW,rcr,tcr,acr,WL,ncr,a2e,scr,lcr,icr,Lt,QL,dcr,n2e,ccr,fcr,Xd,mcr,s2e,gcr,hcr,fW,pcr,ucr,_cr,y8,bcr,Ar,HL,vcr,l2e,Fcr,Tcr,Za,Mcr,i2e,Ecr,Ccr,d2e,wcr,Acr,c2e,ycr,Lcr,xcr,se,L8,f2e,$cr,kcr,mW,Scr,Rcr,Pcr,x8,m2e,Bcr,Icr,gW,qcr,Ncr,jcr,$8,g2e,Dcr,Gcr,hW,Ocr,Vcr,Xcr,k8,h2e,zcr,Wcr,pW,Qcr,Hcr,Ucr,S8,p2e,Jcr,Ycr,uW,Kcr,Zcr,efr,R8,u2e,ofr,rfr,_W,tfr,afr,nfr,P8,_2e,sfr,lfr,bW,ifr,dfr,cfr,B8,b2e,ffr,mfr,vW,gfr,hfr,pfr,I8,v2e,ufr,_fr,FW,bfr,vfr,Ffr,q8,F2e,Tfr,Mfr,TW,Efr,Cfr,wfr,N8,T2e,Afr,yfr,MW,Lfr,xfr,$fr,j8,M2e,kfr,Sfr,EW,Rfr,Pfr,Bfr,D8,E2e,Ifr,qfr,CW,Nfr,jfr,Dfr,G8,C2e,Gfr,Ofr,wW,Vfr,Xfr,zfr,O8,w2e,Wfr,Qfr,AW,Hfr,Ufr,Jfr,V8,A2e,Yfr,Kfr,yW,Zfr,emr,omr,X8,y2e,rmr,tmr,LW,amr,nmr,smr,z8,L2e,lmr,imr,xW,dmr,cmr,fmr,W8,x2e,mmr,gmr,$W,hmr,pmr,umr,Q8,$2e,_mr,bmr,kW,vmr,Fmr,Tmr,H8,k2e,Mmr,Emr,SW,Cmr,wmr,Amr,U8,S2e,ymr,Lmr,RW,xmr,$mr,kmr,J8,R2e,Smr,Rmr,PW,Pmr,Bmr,Imr,Y8,Aqe,zd,K8,P2e,UL,qmr,B2e,Nmr,yqe,Zo,JL,jmr,Wd,Dmr,BW,Gmr,Omr,IW,Vmr,Xmr,zmr,YL,Wmr,I2e,Qmr,Hmr,Umr,xt,KL,Jmr,q2e,Ymr,Kmr,Qd,Zmr,N2e,egr,ogr,qW,rgr,tgr,agr,Z8,ngr,yr,ZL,sgr,j2e,lgr,igr,en,dgr,D2e,cgr,fgr,G2e,mgr,ggr,O2e,hgr,pgr,ugr,Te,eM,V2e,_gr,bgr,NW,vgr,Fgr,Tgr,oM,X2e,Mgr,Egr,jW,Cgr,wgr,Agr,rM,z2e,ygr,Lgr,DW,xgr,$gr,kgr,tM,W2e,Sgr,Rgr,GW,Pgr,Bgr,Igr,aM,Q2e,qgr,Ngr,OW,jgr,Dgr,Ggr,nM,H2e,Ogr,Vgr,VW,Xgr,zgr,Wgr,sM,U2e,Qgr,Hgr,XW,Ugr,Jgr,Ygr,lM,J2e,Kgr,Zgr,zW,ehr,ohr,rhr,iM,Y2e,thr,ahr,WW,nhr,shr,lhr,dM,K2e,ihr,dhr,QW,chr,fhr,mhr,cM,Z2e,ghr,hhr,HW,phr,uhr,_hr,fM,ebe,bhr,vhr,UW,Fhr,Thr,Mhr,mM,Lqe,Hd,gM,obe,ex,Ehr,rbe,Chr,xqe,er,ox,whr,Ud,Ahr,JW,yhr,Lhr,YW,xhr,$hr,khr,rx,Shr,tbe,Rhr,Phr,Bhr,$t,tx,Ihr,abe,qhr,Nhr,Jd,jhr,nbe,Dhr,Ghr,KW,Ohr,Vhr,Xhr,hM,zhr,Lr,ax,Whr,sbe,Qhr,Hhr,on,Uhr,lbe,Jhr,Yhr,ibe,Khr,Zhr,dbe,epr,opr,rpr,Yd,pM,cbe,tpr,apr,ZW,npr,spr,lpr,uM,fbe,ipr,dpr,eQ,cpr,fpr,mpr,_M,mbe,gpr,hpr,oQ,ppr,upr,_pr,bM,$qe,Kd,vM,gbe,nx,bpr,hbe,vpr,kqe,or,sx,Fpr,Zd,Tpr,rQ,Mpr,Epr,tQ,Cpr,wpr,Apr,lx,ypr,pbe,Lpr,xpr,$pr,kt,ix,kpr,ube,Spr,Rpr,ec,Ppr,_be,Bpr,Ipr,aQ,qpr,Npr,jpr,FM,Dpr,xr,dx,Gpr,bbe,Opr,Vpr,rn,Xpr,vbe,zpr,Wpr,Fbe,Qpr,Hpr,Tbe,Upr,Jpr,Ypr,ie,TM,Mbe,Kpr,Zpr,nQ,eur,our,rur,MM,Ebe,tur,aur,sQ,nur,sur,lur,EM,Cbe,iur,dur,lQ,cur,fur,mur,CM,wbe,gur,hur,iQ,pur,uur,_ur,wM,Abe,bur,vur,dQ,Fur,Tur,Mur,AM,ybe,Eur,Cur,cQ,wur,Aur,yur,yM,Lbe,Lur,xur,fQ,$ur,kur,Sur,LM,xbe,Rur,Pur,mQ,Bur,Iur,qur,xM,$be,Nur,jur,gQ,Dur,Gur,Our,$M,kbe,Vur,Xur,hQ,zur,Wur,Qur,kM,Sbe,Hur,Uur,pQ,Jur,Yur,Kur,SM,Rbe,Zur,e_r,uQ,o_r,r_r,t_r,RM,Pbe,a_r,n_r,_Q,s_r,l_r,i_r,PM,Bbe,d_r,c_r,bQ,f_r,m_r,g_r,BM,Ibe,h_r,p_r,vQ,u_r,__r,b_r,IM,qbe,v_r,F_r,FQ,T_r,M_r,E_r,qM,Nbe,C_r,w_r,TQ,A_r,y_r,L_r,NM,jbe,x_r,$_r,MQ,k_r,S_r,R_r,jM,Dbe,P_r,B_r,EQ,I_r,q_r,N_r,DM,Gbe,j_r,D_r,CQ,G_r,O_r,V_r,GM,Sqe,oc,OM,Obe,cx,X_r,Vbe,z_r,Rqe,rr,fx,W_r,rc,Q_r,wQ,H_r,U_r,AQ,J_r,Y_r,K_r,mx,Z_r,Xbe,e1r,o1r,r1r,St,gx,t1r,zbe,a1r,n1r,tc,s1r,Wbe,l1r,i1r,yQ,d1r,c1r,f1r,VM,m1r,$r,hx,g1r,Qbe,h1r,p1r,tn,u1r,Hbe,_1r,b1r,Ube,v1r,F1r,Jbe,T1r,M1r,E1r,ye,XM,Ybe,C1r,w1r,LQ,A1r,y1r,L1r,zM,Kbe,x1r,$1r,xQ,k1r,S1r,R1r,WM,Zbe,P1r,B1r,$Q,I1r,q1r,N1r,QM,eve,j1r,D1r,kQ,G1r,O1r,V1r,HM,ove,X1r,z1r,SQ,W1r,Q1r,H1r,UM,rve,U1r,J1r,RQ,Y1r,K1r,Z1r,JM,tve,e2r,o2r,PQ,r2r,t2r,a2r,YM,ave,n2r,s2r,BQ,l2r,i2r,d2r,KM,nve,c2r,f2r,IQ,m2r,g2r,h2r,ZM,sve,p2r,u2r,qQ,_2r,b2r,v2r,e4,Pqe,ac,o4,lve,px,F2r,ive,T2r,Bqe,tr,ux,M2r,nc,E2r,NQ,C2r,w2r,jQ,A2r,y2r,L2r,_x,x2r,dve,$2r,k2r,S2r,Rt,bx,R2r,cve,P2r,B2r,sc,I2r,fve,q2r,N2r,DQ,j2r,D2r,G2r,r4,O2r,kr,vx,V2r,mve,X2r,z2r,an,W2r,gve,Q2r,H2r,hve,U2r,J2r,pve,Y2r,K2r,Z2r,ee,t4,uve,ebr,obr,GQ,rbr,tbr,abr,a4,_ve,nbr,sbr,OQ,lbr,ibr,dbr,n4,bve,cbr,fbr,VQ,mbr,gbr,hbr,s4,vve,pbr,ubr,XQ,_br,bbr,vbr,l4,Fve,Fbr,Tbr,zQ,Mbr,Ebr,Cbr,i4,Tve,wbr,Abr,WQ,ybr,Lbr,xbr,d4,Mve,$br,kbr,QQ,Sbr,Rbr,Pbr,c4,Eve,Bbr,Ibr,HQ,qbr,Nbr,jbr,f4,Cve,Dbr,Gbr,UQ,Obr,Vbr,Xbr,m4,wve,zbr,Wbr,JQ,Qbr,Hbr,Ubr,g4,Ave,Jbr,Ybr,YQ,Kbr,Zbr,evr,h4,yve,ovr,rvr,KQ,tvr,avr,nvr,p4,Lve,svr,lvr,ZQ,ivr,dvr,cvr,u4,xve,fvr,mvr,eH,gvr,hvr,pvr,_4,$ve,uvr,_vr,oH,bvr,vvr,Fvr,b4,kve,Tvr,Mvr,rH,Evr,Cvr,wvr,v4,Sve,Avr,yvr,tH,Lvr,xvr,$vr,F4,Rve,kvr,Svr,aH,Rvr,Pvr,Bvr,T4,Pve,Ivr,qvr,nH,Nvr,jvr,Dvr,M4,Bve,Gvr,Ovr,sH,Vvr,Xvr,zvr,E4,Ive,Wvr,Qvr,lH,Hvr,Uvr,Jvr,C4,qve,Yvr,Kvr,iH,Zvr,eFr,oFr,w4,Nve,rFr,tFr,dH,aFr,nFr,sFr,A4,jve,lFr,iFr,cH,dFr,cFr,fFr,y4,Dve,mFr,gFr,fH,hFr,pFr,uFr,L4,Gve,_Fr,bFr,mH,vFr,FFr,TFr,x4,Iqe,lc,$4,Ove,Fx,MFr,Vve,EFr,qqe,ar,Tx,CFr,ic,wFr,gH,AFr,yFr,hH,LFr,xFr,$Fr,Mx,kFr,Xve,SFr,RFr,PFr,Pt,Ex,BFr,zve,IFr,qFr,dc,NFr,Wve,jFr,DFr,pH,GFr,OFr,VFr,k4,XFr,Sr,Cx,zFr,Qve,WFr,QFr,nn,HFr,Hve,UFr,JFr,Uve,YFr,KFr,Jve,ZFr,e6r,o6r,he,S4,Yve,r6r,t6r,uH,a6r,n6r,s6r,R4,Kve,l6r,i6r,_H,d6r,c6r,f6r,P4,Zve,m6r,g6r,bH,h6r,p6r,u6r,B4,eFe,_6r,b6r,vH,v6r,F6r,T6r,I4,oFe,M6r,E6r,FH,C6r,w6r,A6r,q4,rFe,y6r,L6r,TH,x6r,$6r,k6r,N4,tFe,S6r,R6r,MH,P6r,B6r,I6r,j4,aFe,q6r,N6r,EH,j6r,D6r,G6r,D4,nFe,O6r,V6r,CH,X6r,z6r,W6r,G4,sFe,Q6r,H6r,wH,U6r,J6r,Y6r,O4,lFe,K6r,Z6r,AH,eTr,oTr,rTr,V4,iFe,tTr,aTr,yH,nTr,sTr,lTr,X4,dFe,iTr,dTr,LH,cTr,fTr,mTr,z4,cFe,gTr,hTr,xH,pTr,uTr,_Tr,W4,fFe,bTr,vTr,$H,FTr,TTr,MTr,Q4,mFe,ETr,CTr,kH,wTr,ATr,yTr,H4,gFe,LTr,xTr,SH,$Tr,kTr,STr,U4,Nqe,cc,J4,hFe,wx,RTr,pFe,PTr,jqe,nr,Ax,BTr,fc,ITr,RH,qTr,NTr,PH,jTr,DTr,GTr,yx,OTr,uFe,VTr,XTr,zTr,Bt,Lx,WTr,_Fe,QTr,HTr,mc,UTr,bFe,JTr,YTr,BH,KTr,ZTr,e8r,Y4,o8r,Rr,xx,r8r,vFe,t8r,a8r,sn,n8r,FFe,s8r,l8r,TFe,i8r,d8r,MFe,c8r,f8r,m8r,$x,K4,EFe,g8r,h8r,IH,p8r,u8r,_8r,Z4,CFe,b8r,v8r,qH,F8r,T8r,M8r,eE,Dqe,gc,oE,wFe,kx,E8r,AFe,C8r,Gqe,sr,Sx,w8r,hc,A8r,NH,y8r,L8r,jH,x8r,$8r,k8r,Rx,S8r,yFe,R8r,P8r,B8r,It,Px,I8r,LFe,q8r,N8r,pc,j8r,xFe,D8r,G8r,DH,O8r,V8r,X8r,rE,z8r,Pr,Bx,W8r,$Fe,Q8r,H8r,ln,U8r,kFe,J8r,Y8r,SFe,K8r,Z8r,RFe,eMr,oMr,rMr,PFe,tE,BFe,tMr,aMr,GH,nMr,sMr,lMr,aE,Oqe,uc,nE,IFe,Ix,iMr,qFe,dMr,Vqe,lr,qx,cMr,_c,fMr,OH,mMr,gMr,VH,hMr,pMr,uMr,Nx,_Mr,NFe,bMr,vMr,FMr,qt,jx,TMr,jFe,MMr,EMr,bc,CMr,DFe,wMr,AMr,XH,yMr,LMr,xMr,sE,$Mr,Br,Dx,kMr,GFe,SMr,RMr,dn,PMr,OFe,BMr,IMr,VFe,qMr,NMr,XFe,jMr,DMr,GMr,de,lE,zFe,OMr,VMr,zH,XMr,zMr,WMr,iE,WFe,QMr,HMr,WH,UMr,JMr,YMr,dE,QFe,KMr,ZMr,QH,e4r,o4r,r4r,cE,HFe,t4r,a4r,HH,n4r,s4r,l4r,fE,UFe,i4r,d4r,UH,c4r,f4r,m4r,mE,JFe,g4r,h4r,JH,p4r,u4r,_4r,gE,YFe,b4r,v4r,YH,F4r,T4r,M4r,hE,KFe,E4r,C4r,KH,w4r,A4r,y4r,pE,ZFe,L4r,x4r,ZH,$4r,k4r,S4r,uE,e6e,R4r,P4r,eU,B4r,I4r,q4r,_E,o6e,N4r,j4r,oU,D4r,G4r,O4r,bE,r6e,V4r,X4r,rU,z4r,W4r,Q4r,vE,t6e,H4r,U4r,tU,J4r,Y4r,K4r,FE,a6e,Z4r,eEr,aU,oEr,rEr,tEr,TE,n6e,aEr,nEr,nU,sEr,lEr,iEr,ME,s6e,dEr,cEr,sU,fEr,mEr,gEr,EE,l6e,hEr,pEr,lU,uEr,_Er,bEr,CE,i6e,vEr,FEr,iU,TEr,MEr,EEr,wE,d6e,CEr,wEr,dU,AEr,yEr,LEr,AE,c6e,xEr,$Er,cU,kEr,SEr,REr,yE,Xqe,vc,LE,f6e,Gx,PEr,m6e,BEr,zqe,ir,Ox,IEr,Fc,qEr,fU,NEr,jEr,mU,DEr,GEr,OEr,Vx,VEr,g6e,XEr,zEr,WEr,Nt,Xx,QEr,h6e,HEr,UEr,Tc,JEr,p6e,YEr,KEr,gU,ZEr,eCr,oCr,xE,rCr,Ir,zx,tCr,u6e,aCr,nCr,cn,sCr,_6e,lCr,iCr,b6e,dCr,cCr,v6e,fCr,mCr,gCr,ce,$E,F6e,hCr,pCr,hU,uCr,_Cr,bCr,kE,T6e,vCr,FCr,pU,TCr,MCr,ECr,SE,M6e,CCr,wCr,uU,ACr,yCr,LCr,RE,E6e,xCr,$Cr,_U,kCr,SCr,RCr,PE,C6e,PCr,BCr,bU,ICr,qCr,NCr,BE,w6e,jCr,DCr,vU,GCr,OCr,VCr,IE,A6e,XCr,zCr,FU,WCr,QCr,HCr,qE,y6e,UCr,JCr,TU,YCr,KCr,ZCr,NE,L6e,e5r,o5r,MU,r5r,t5r,a5r,jE,x6e,n5r,s5r,EU,l5r,i5r,d5r,DE,$6e,c5r,f5r,CU,m5r,g5r,h5r,GE,k6e,p5r,u5r,wU,_5r,b5r,v5r,OE,S6e,F5r,T5r,AU,M5r,E5r,C5r,VE,R6e,w5r,A5r,yU,y5r,L5r,x5r,XE,P6e,$5r,k5r,LU,S5r,R5r,P5r,zE,B6e,B5r,I5r,xU,q5r,N5r,j5r,WE,I6e,D5r,G5r,$U,O5r,V5r,X5r,QE,q6e,z5r,W5r,kU,Q5r,H5r,U5r,HE,N6e,J5r,Y5r,SU,K5r,Z5r,e3r,UE,j6e,o3r,r3r,RU,t3r,a3r,n3r,JE,Wqe,Mc,YE,D6e,Wx,s3r,G6e,l3r,Qqe,dr,Qx,i3r,Ec,d3r,PU,c3r,f3r,BU,m3r,g3r,h3r,Hx,p3r,O6e,u3r,_3r,b3r,jt,Ux,v3r,V6e,F3r,T3r,Cc,M3r,X6e,E3r,C3r,IU,w3r,A3r,y3r,KE,L3r,qr,Jx,x3r,z6e,$3r,k3r,fn,S3r,W6e,R3r,P3r,Q6e,B3r,I3r,H6e,q3r,N3r,j3r,U6e,ZE,J6e,D3r,G3r,qU,O3r,V3r,X3r,eC,Hqe,wc,oC,Y6e,Yx,z3r,K6e,W3r,Uqe,cr,Kx,Q3r,Ac,H3r,NU,U3r,J3r,jU,Y3r,K3r,Z3r,Zx,ewr,Z6e,owr,rwr,twr,Dt,e9,awr,eTe,nwr,swr,yc,lwr,oTe,iwr,dwr,DU,cwr,fwr,mwr,rC,gwr,Nr,o9,hwr,rTe,pwr,uwr,mn,_wr,tTe,bwr,vwr,aTe,Fwr,Twr,nTe,Mwr,Ewr,Cwr,sTe,tC,lTe,wwr,Awr,GU,ywr,Lwr,xwr,aC,Jqe,Lc,nC,iTe,r9,$wr,dTe,kwr,Yqe,fr,t9,Swr,xc,Rwr,OU,Pwr,Bwr,VU,Iwr,qwr,Nwr,a9,jwr,cTe,Dwr,Gwr,Owr,Gt,n9,Vwr,fTe,Xwr,zwr,$c,Wwr,mTe,Qwr,Hwr,XU,Uwr,Jwr,Ywr,sC,Kwr,jr,s9,Zwr,gTe,eAr,oAr,gn,rAr,hTe,tAr,aAr,pTe,nAr,sAr,uTe,lAr,iAr,dAr,re,lC,_Te,cAr,fAr,zU,mAr,gAr,hAr,iC,bTe,pAr,uAr,WU,_Ar,bAr,vAr,dC,vTe,FAr,TAr,QU,MAr,EAr,CAr,cC,FTe,wAr,AAr,HU,yAr,LAr,xAr,fC,TTe,$Ar,kAr,UU,SAr,RAr,PAr,mC,MTe,BAr,IAr,JU,qAr,NAr,jAr,gC,ETe,DAr,GAr,YU,OAr,VAr,XAr,hC,CTe,zAr,WAr,KU,QAr,HAr,UAr,pC,wTe,JAr,YAr,ZU,KAr,ZAr,e0r,uC,ATe,o0r,r0r,eJ,t0r,a0r,n0r,_C,yTe,s0r,l0r,oJ,i0r,d0r,c0r,bC,LTe,f0r,m0r,rJ,g0r,h0r,p0r,vC,xTe,u0r,_0r,tJ,b0r,v0r,F0r,FC,$Te,T0r,M0r,aJ,E0r,C0r,w0r,TC,kTe,A0r,y0r,nJ,L0r,x0r,$0r,MC,STe,k0r,S0r,sJ,R0r,P0r,B0r,EC,RTe,I0r,q0r,lJ,N0r,j0r,D0r,CC,PTe,G0r,O0r,iJ,V0r,X0r,z0r,wC,BTe,W0r,Q0r,dJ,H0r,U0r,J0r,AC,ITe,Y0r,K0r,cJ,Z0r,eyr,oyr,yC,qTe,ryr,tyr,fJ,ayr,nyr,syr,LC,NTe,lyr,iyr,mJ,dyr,cyr,fyr,xC,jTe,myr,gyr,gJ,hyr,pyr,uyr,$C,DTe,_yr,byr,hJ,vyr,Fyr,Tyr,kC,GTe,Myr,Eyr,pJ,Cyr,wyr,Ayr,SC,Kqe,kc,RC,OTe,l9,yyr,VTe,Lyr,Zqe,mr,i9,xyr,Sc,$yr,uJ,kyr,Syr,_J,Ryr,Pyr,Byr,d9,Iyr,XTe,qyr,Nyr,jyr,Ot,c9,Dyr,zTe,Gyr,Oyr,Rc,Vyr,WTe,Xyr,zyr,bJ,Wyr,Qyr,Hyr,PC,Uyr,Dr,f9,Jyr,QTe,Yyr,Kyr,hn,Zyr,HTe,eLr,oLr,UTe,rLr,tLr,JTe,aLr,nLr,sLr,Re,BC,YTe,lLr,iLr,vJ,dLr,cLr,fLr,IC,KTe,mLr,gLr,FJ,hLr,pLr,uLr,qC,ZTe,_Lr,bLr,TJ,vLr,FLr,TLr,NC,e8e,MLr,ELr,MJ,CLr,wLr,ALr,jC,o8e,yLr,LLr,EJ,xLr,$Lr,kLr,DC,r8e,SLr,RLr,CJ,PLr,BLr,ILr,GC,t8e,qLr,NLr,wJ,jLr,DLr,GLr,OC,a8e,OLr,VLr,AJ,XLr,zLr,WLr,VC,n8e,QLr,HLr,yJ,ULr,JLr,YLr,XC,eNe,Pc,zC,s8e,m9,KLr,l8e,ZLr,oNe,gr,g9,exr,Bc,oxr,LJ,rxr,txr,xJ,axr,nxr,sxr,h9,lxr,i8e,ixr,dxr,cxr,Vt,p9,fxr,d8e,mxr,gxr,Ic,hxr,c8e,pxr,uxr,$J,_xr,bxr,vxr,WC,Fxr,Gr,u9,Txr,f8e,Mxr,Exr,pn,Cxr,m8e,wxr,Axr,g8e,yxr,Lxr,h8e,xxr,$xr,kxr,Me,QC,p8e,Sxr,Rxr,kJ,Pxr,Bxr,Ixr,HC,u8e,qxr,Nxr,SJ,jxr,Dxr,Gxr,UC,_8e,Oxr,Vxr,RJ,Xxr,zxr,Wxr,JC,b8e,Qxr,Hxr,PJ,Uxr,Jxr,Yxr,YC,v8e,Kxr,Zxr,BJ,e9r,o9r,r9r,KC,F8e,t9r,a9r,IJ,n9r,s9r,l9r,ZC,T8e,i9r,d9r,qJ,c9r,f9r,m9r,e5,M8e,g9r,h9r,NJ,p9r,u9r,_9r,o5,E8e,b9r,v9r,jJ,F9r,T9r,M9r,r5,C8e,E9r,C9r,DJ,w9r,A9r,y9r,t5,w8e,L9r,x9r,GJ,$9r,k9r,S9r,a5,A8e,R9r,P9r,OJ,B9r,I9r,q9r,n5,rNe,qc,s5,y8e,_9,N9r,L8e,j9r,tNe,hr,b9,D9r,Nc,G9r,VJ,O9r,V9r,XJ,X9r,z9r,W9r,v9,Q9r,x8e,H9r,U9r,J9r,Xt,F9,Y9r,$8e,K9r,Z9r,jc,e7r,k8e,o7r,r7r,zJ,t7r,a7r,n7r,l5,s7r,Or,T9,l7r,S8e,i7r,d7r,un,c7r,R8e,f7r,m7r,P8e,g7r,h7r,B8e,p7r,u7r,_7r,Le,i5,I8e,b7r,v7r,WJ,F7r,T7r,M7r,d5,q8e,E7r,C7r,QJ,w7r,A7r,y7r,c5,N8e,L7r,x7r,HJ,$7r,k7r,S7r,f5,j8e,R7r,P7r,UJ,B7r,I7r,q7r,m5,D8e,N7r,j7r,JJ,D7r,G7r,O7r,g5,G8e,V7r,X7r,YJ,z7r,W7r,Q7r,h5,O8e,H7r,U7r,KJ,J7r,Y7r,K7r,p5,V8e,Z7r,e$r,ZJ,o$r,r$r,t$r,u5,X8e,a$r,n$r,eY,s$r,l$r,i$r,_5,z8e,d$r,c$r,oY,f$r,m$r,g$r,b5,aNe,Dc,v5,W8e,M9,h$r,Q8e,p$r,nNe,pr,E9,u$r,Gc,_$r,rY,b$r,v$r,tY,F$r,T$r,M$r,C9,E$r,H8e,C$r,w$r,A$r,zt,w9,y$r,U8e,L$r,x$r,Oc,$$r,J8e,k$r,S$r,aY,R$r,P$r,B$r,F5,I$r,Vr,A9,q$r,Y8e,N$r,j$r,_n,D$r,K8e,G$r,O$r,Z8e,V$r,X$r,eMe,z$r,W$r,Q$r,Pe,T5,oMe,H$r,U$r,nY,J$r,Y$r,K$r,M5,rMe,Z$r,ekr,sY,okr,rkr,tkr,E5,tMe,akr,nkr,lY,skr,lkr,ikr,C5,aMe,dkr,ckr,iY,fkr,mkr,gkr,w5,nMe,hkr,pkr,dY,ukr,_kr,bkr,A5,sMe,vkr,Fkr,cY,Tkr,Mkr,Ekr,y5,lMe,Ckr,wkr,fY,Akr,ykr,Lkr,L5,iMe,xkr,$kr,mY,kkr,Skr,Rkr,x5,dMe,Pkr,Bkr,gY,Ikr,qkr,Nkr,$5,sNe,Vc,k5,cMe,y9,jkr,fMe,Dkr,lNe,ur,L9,Gkr,Xc,Okr,hY,Vkr,Xkr,pY,zkr,Wkr,Qkr,x9,Hkr,mMe,Ukr,Jkr,Ykr,Wt,$9,Kkr,gMe,Zkr,eSr,zc,oSr,hMe,rSr,tSr,uY,aSr,nSr,sSr,S5,lSr,Xr,k9,iSr,pMe,dSr,cSr,bn,fSr,uMe,mSr,gSr,_Me,hSr,pSr,bMe,uSr,_Sr,bSr,xe,R5,vMe,vSr,FSr,_Y,TSr,MSr,ESr,P5,FMe,CSr,wSr,bY,ASr,ySr,LSr,B5,TMe,xSr,$Sr,vY,kSr,SSr,RSr,I5,MMe,PSr,BSr,FY,ISr,qSr,NSr,q5,EMe,jSr,DSr,TY,GSr,OSr,VSr,N5,CMe,XSr,zSr,MY,WSr,QSr,HSr,j5,wMe,USr,JSr,EY,YSr,KSr,ZSr,D5,AMe,eRr,oRr,CY,rRr,tRr,aRr,G5,yMe,nRr,sRr,wY,lRr,iRr,dRr,O5,LMe,cRr,fRr,AY,mRr,gRr,hRr,V5,iNe,Wc,X5,xMe,S9,pRr,$Me,uRr,dNe,_r,R9,_Rr,Qc,bRr,yY,vRr,FRr,LY,TRr,MRr,ERr,P9,CRr,kMe,wRr,ARr,yRr,Qt,B9,LRr,SMe,xRr,$Rr,Hc,kRr,RMe,SRr,RRr,xY,PRr,BRr,IRr,z5,qRr,zr,I9,NRr,PMe,jRr,DRr,vn,GRr,BMe,ORr,VRr,IMe,XRr,zRr,qMe,WRr,QRr,HRr,$e,W5,NMe,URr,JRr,$Y,YRr,KRr,ZRr,Q5,jMe,ePr,oPr,kY,rPr,tPr,aPr,H5,DMe,nPr,sPr,SY,lPr,iPr,dPr,U5,GMe,cPr,fPr,RY,mPr,gPr,hPr,J5,OMe,pPr,uPr,PY,_Pr,bPr,vPr,Y5,VMe,FPr,TPr,BY,MPr,EPr,CPr,K5,XMe,wPr,APr,IY,yPr,LPr,xPr,Z5,zMe,$Pr,kPr,qY,SPr,RPr,PPr,e3,WMe,BPr,IPr,NY,qPr,NPr,jPr,o3,QMe,DPr,GPr,jY,OPr,VPr,XPr,r3,cNe,Uc,t3,HMe,q9,zPr,UMe,WPr,fNe,br,N9,QPr,Jc,HPr,DY,UPr,JPr,GY,YPr,KPr,ZPr,j9,eBr,JMe,oBr,rBr,tBr,Ht,D9,aBr,YMe,nBr,sBr,Yc,lBr,KMe,iBr,dBr,OY,cBr,fBr,mBr,a3,gBr,Wr,G9,hBr,ZMe,pBr,uBr,Fn,_Br,e4e,bBr,vBr,o4e,FBr,TBr,r4e,MBr,EBr,CBr,De,n3,t4e,wBr,ABr,VY,yBr,LBr,xBr,s3,a4e,$Br,kBr,XY,SBr,RBr,PBr,l3,n4e,BBr,IBr,zY,qBr,NBr,jBr,i3,s4e,DBr,GBr,WY,OBr,VBr,XBr,d3,l4e,zBr,WBr,QY,QBr,HBr,UBr,c3,i4e,JBr,YBr,HY,KBr,ZBr,eIr,f3,d4e,oIr,rIr,UY,tIr,aIr,nIr,m3,c4e,sIr,lIr,JY,iIr,dIr,cIr,g3,mNe,Kc,h3,f4e,O9,fIr,m4e,mIr,gNe,vr,V9,gIr,Zc,hIr,YY,pIr,uIr,KY,_Ir,bIr,vIr,X9,FIr,g4e,TIr,MIr,EIr,Ut,z9,CIr,h4e,wIr,AIr,ef,yIr,p4e,LIr,xIr,ZY,$Ir,kIr,SIr,p3,RIr,Qr,W9,PIr,u4e,BIr,IIr,Tn,qIr,_4e,NIr,jIr,b4e,DIr,GIr,v4e,OIr,VIr,XIr,Ge,u3,F4e,zIr,WIr,eK,QIr,HIr,UIr,_3,T4e,JIr,YIr,oK,KIr,ZIr,eqr,b3,M4e,oqr,rqr,rK,tqr,aqr,nqr,v3,E4e,sqr,lqr,tK,iqr,dqr,cqr,F3,C4e,fqr,mqr,aK,gqr,hqr,pqr,T3,w4e,uqr,_qr,nK,bqr,vqr,Fqr,M3,A4e,Tqr,Mqr,sK,Eqr,Cqr,wqr,E3,y4e,Aqr,yqr,lK,Lqr,xqr,$qr,C3,hNe,of,w3,L4e,Q9,kqr,x4e,Sqr,pNe,Fr,H9,Rqr,rf,Pqr,iK,Bqr,Iqr,dK,qqr,Nqr,jqr,U9,Dqr,$4e,Gqr,Oqr,Vqr,Jt,J9,Xqr,k4e,zqr,Wqr,tf,Qqr,S4e,Hqr,Uqr,cK,Jqr,Yqr,Kqr,A3,Zqr,Hr,Y9,eNr,R4e,oNr,rNr,Mn,tNr,P4e,aNr,nNr,B4e,sNr,lNr,I4e,iNr,dNr,cNr,q4e,y3,N4e,fNr,mNr,fK,gNr,hNr,pNr,L3,uNe,af,x3,j4e,K9,uNr,D4e,_Nr,_Ne,Tr,Z9,bNr,nf,vNr,mK,FNr,TNr,gK,MNr,ENr,CNr,e7,wNr,G4e,ANr,yNr,LNr,Yt,o7,xNr,O4e,$Nr,kNr,sf,SNr,V4e,RNr,PNr,hK,BNr,INr,qNr,$3,NNr,Ur,r7,jNr,X4e,DNr,GNr,En,ONr,z4e,VNr,XNr,W4e,zNr,WNr,Q4e,QNr,HNr,UNr,t7,k3,H4e,JNr,YNr,pK,KNr,ZNr,ejr,S3,U4e,ojr,rjr,uK,tjr,ajr,njr,R3,bNe,lf,P3,J4e,a7,sjr,Y4e,ljr,vNe,Mr,n7,ijr,df,djr,_K,cjr,fjr,bK,mjr,gjr,hjr,s7,pjr,K4e,ujr,_jr,bjr,Kt,l7,vjr,Z4e,Fjr,Tjr,cf,Mjr,eEe,Ejr,Cjr,vK,wjr,Ajr,yjr,B3,Ljr,Jr,i7,xjr,oEe,$jr,kjr,Cn,Sjr,rEe,Rjr,Pjr,tEe,Bjr,Ijr,aEe,qjr,Njr,jjr,nEe,I3,sEe,Djr,Gjr,FK,Ojr,Vjr,Xjr,q3,FNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),a0=new oe({}),n0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new zjr({props:{warning:!0,$$slots:{default:[Byt]},$$scope:{ctx:L}}}),s0=new oe({}),l0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/configuration_auto.py#L573"}}),c0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/configuration_auto.py#L596"}}),bg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),f0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/configuration_auto.py#L719"}}),m0=new oe({}),g0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/tokenization_auto.py#L382"}}),u0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16812/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/tokenization_auto.py#L396"}}),Kg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),_0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/tokenization_auto.py#L592"}}),b0=new oe({}),v0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/feature_extraction_auto.py#L181"}}),M0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16812/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),yh=new zjr({props:{$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),Lh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),E0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/feature_extraction_auto.py#L322"}}),C0=new oe({}),w0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/processing_auto.py#L81"}}),L0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/processing_auto.py#L95"}}),Qh=new zjr({props:{$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),Hh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),x0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/processing_auto.py#L248"}}),$0=new oe({}),k0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L725"}}),R0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Yh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Ou=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),B0=new oe({}),I0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L732"}}),N0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Xu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),j0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),R_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),D0=new oe({}),G0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L747"}}),V0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),B_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),X0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),v1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),z0=new oe({}),W0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L754"}}),H0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),T1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),U0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),a2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),J0=new oe({}),Y0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L761"}}),Z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),s2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),oy=new oe({}),ry=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L770"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),sy=new oe({}),ly=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L804"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),fy=new oe({}),my=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L811"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),uy=new oe({}),_y=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L797"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),Ty=new oe({}),My=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L779"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),Ay=new oe({}),yy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L786"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),ky=new oe({}),Sy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L820"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),Iy=new oe({}),qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L859"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),Gy=new oe({}),Oy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L866"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),Wy=new oe({}),Qy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L889"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),Yy=new oe({}),Ky=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L873"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),rL=new oe({}),tL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L880"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),W6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),iL=new oe({}),dL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L898"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),gL=new oe({}),hL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L905"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),bL=new oe({}),vL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L852"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L827"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L834"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),PL=new oe({}),BL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L843"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),w8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Y8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Z8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),px=new oe({}),ux=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),kx=new oe({}),Sx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),Ix=new oe({}),qx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),Gx=new oe({}),Ox=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),Wx=new oe({}),Qx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),Yx=new oe({}),Kx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),n9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),c9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),m9=new oe({}),g9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),p9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),_9=new oe({}),b9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),M9=new oe({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),y9=new oe({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),S9=new oe({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),q9=new oe({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Q9=new oe({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),o7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),a7=new oe({}),n7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),l7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),i7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),di=o("Auto Classes"),hf=l(),rt=a("p"),ci=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=a("code"),e0=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),mi=o("Instantiating one of "),An=a("a"),o0=o("AutoConfig"),yn=o(", "),Ln=a("a"),r0=o("AutoModel"),gi=o(`, and
`),xn=a("a"),t0=o("AutoTokenizer"),hi=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),T$=o("will create a model that is an instance of "),pi=a("a"),M$=o("BertModel"),E$=o("."),Eo=l(),wa=a("p"),C$=o("There is one class of "),_f=a("code"),w$=o("AutoModel"),LDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_Ie=l(),ui=a("h2"),bf=a("a"),hee=a("span"),F(a0.$$.fragment),xDe=l(),pee=a("span"),$De=o("Extending the Auto Classes"),bIe=l(),$n=a("p"),kDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),uee=a("code"),SDe=o("NewModel"),RDe=o(", make sure you have a "),_ee=a("code"),PDe=o("NewModelConfig"),BDe=o(` then you can add those to the auto
classes like this:`),vIe=l(),F(n0.$$.fragment),FIe=l(),A$=a("p"),IDe=o("You will then be able to use the auto classes like you would usually do!"),TIe=l(),F(vf.$$.fragment),MIe=l(),_i=a("h2"),Ff=a("a"),bee=a("span"),F(s0.$$.fragment),qDe=l(),vee=a("span"),NDe=o("AutoConfig"),EIe=l(),Co=a("div"),F(l0.$$.fragment),jDe=l(),i0=a("p"),DDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),y$=a("a"),GDe=o("from_pretrained()"),ODe=o(" class method."),VDe=l(),d0=a("p"),XDe=o("This class cannot be instantiated directly using "),Fee=a("code"),zDe=o("__init__()"),WDe=o(" (throws an error)."),QDe=l(),Er=a("div"),F(c0.$$.fragment),HDe=l(),Tee=a("p"),UDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),JDe=l(),bi=a("p"),YDe=o("The configuration class to instantiate is selected based on the "),Mee=a("code"),KDe=o("model_type"),ZDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eee=a("code"),eGe=o("pretrained_model_name_or_path"),oGe=o(":"),rGe=l(),A=a("ul"),Tf=a("li"),Cee=a("strong"),tGe=o("albert"),aGe=o(" \u2014 "),L$=a("a"),nGe=o("AlbertConfig"),sGe=o(" (ALBERT model)"),lGe=l(),Mf=a("li"),wee=a("strong"),iGe=o("bart"),dGe=o(" \u2014 "),x$=a("a"),cGe=o("BartConfig"),fGe=o(" (BART model)"),mGe=l(),Ef=a("li"),Aee=a("strong"),gGe=o("beit"),hGe=o(" \u2014 "),$$=a("a"),pGe=o("BeitConfig"),uGe=o(" (BEiT model)"),_Ge=l(),Cf=a("li"),yee=a("strong"),bGe=o("bert"),vGe=o(" \u2014 "),k$=a("a"),FGe=o("BertConfig"),TGe=o(" (BERT model)"),MGe=l(),wf=a("li"),Lee=a("strong"),EGe=o("bert-generation"),CGe=o(" \u2014 "),S$=a("a"),wGe=o("BertGenerationConfig"),AGe=o(" (Bert Generation model)"),yGe=l(),Af=a("li"),xee=a("strong"),LGe=o("big_bird"),xGe=o(" \u2014 "),R$=a("a"),$Ge=o("BigBirdConfig"),kGe=o(" (BigBird model)"),SGe=l(),yf=a("li"),$ee=a("strong"),RGe=o("bigbird_pegasus"),PGe=o(" \u2014 "),P$=a("a"),BGe=o("BigBirdPegasusConfig"),IGe=o(" (BigBirdPegasus model)"),qGe=l(),Lf=a("li"),kee=a("strong"),NGe=o("blenderbot"),jGe=o(" \u2014 "),B$=a("a"),DGe=o("BlenderbotConfig"),GGe=o(" (Blenderbot model)"),OGe=l(),xf=a("li"),See=a("strong"),VGe=o("blenderbot-small"),XGe=o(" \u2014 "),I$=a("a"),zGe=o("BlenderbotSmallConfig"),WGe=o(" (BlenderbotSmall model)"),QGe=l(),$f=a("li"),Ree=a("strong"),HGe=o("camembert"),UGe=o(" \u2014 "),q$=a("a"),JGe=o("CamembertConfig"),YGe=o(" (CamemBERT model)"),KGe=l(),kf=a("li"),Pee=a("strong"),ZGe=o("canine"),eOe=o(" \u2014 "),N$=a("a"),oOe=o("CanineConfig"),rOe=o(" (Canine model)"),tOe=l(),Sf=a("li"),Bee=a("strong"),aOe=o("clip"),nOe=o(" \u2014 "),j$=a("a"),sOe=o("CLIPConfig"),lOe=o(" (CLIP model)"),iOe=l(),Rf=a("li"),Iee=a("strong"),dOe=o("convbert"),cOe=o(" \u2014 "),D$=a("a"),fOe=o("ConvBertConfig"),mOe=o(" (ConvBERT model)"),gOe=l(),Pf=a("li"),qee=a("strong"),hOe=o("convnext"),pOe=o(" \u2014 "),G$=a("a"),uOe=o("ConvNextConfig"),_Oe=o(" (ConvNext model)"),bOe=l(),Bf=a("li"),Nee=a("strong"),vOe=o("ctrl"),FOe=o(" \u2014 "),O$=a("a"),TOe=o("CTRLConfig"),MOe=o(" (CTRL model)"),EOe=l(),If=a("li"),jee=a("strong"),COe=o("data2vec-audio"),wOe=o(" \u2014 "),V$=a("a"),AOe=o("Data2VecAudioConfig"),yOe=o(" (Data2VecAudio model)"),LOe=l(),qf=a("li"),Dee=a("strong"),xOe=o("data2vec-text"),$Oe=o(" \u2014 "),X$=a("a"),kOe=o("Data2VecTextConfig"),SOe=o(" (Data2VecText model)"),ROe=l(),Nf=a("li"),Gee=a("strong"),POe=o("data2vec-vision"),BOe=o(" \u2014 "),z$=a("a"),IOe=o("Data2VecVisionConfig"),qOe=o(" (Data2VecVision model)"),NOe=l(),jf=a("li"),Oee=a("strong"),jOe=o("deberta"),DOe=o(" \u2014 "),W$=a("a"),GOe=o("DebertaConfig"),OOe=o(" (DeBERTa model)"),VOe=l(),Df=a("li"),Vee=a("strong"),XOe=o("deberta-v2"),zOe=o(" \u2014 "),Q$=a("a"),WOe=o("DebertaV2Config"),QOe=o(" (DeBERTa-v2 model)"),HOe=l(),Gf=a("li"),Xee=a("strong"),UOe=o("decision_transformer"),JOe=o(" \u2014 "),H$=a("a"),YOe=o("DecisionTransformerConfig"),KOe=o(" (Decision Transformer model)"),ZOe=l(),Of=a("li"),zee=a("strong"),eVe=o("deit"),oVe=o(" \u2014 "),U$=a("a"),rVe=o("DeiTConfig"),tVe=o(" (DeiT model)"),aVe=l(),Vf=a("li"),Wee=a("strong"),nVe=o("detr"),sVe=o(" \u2014 "),J$=a("a"),lVe=o("DetrConfig"),iVe=o(" (DETR model)"),dVe=l(),Xf=a("li"),Qee=a("strong"),cVe=o("distilbert"),fVe=o(" \u2014 "),Y$=a("a"),mVe=o("DistilBertConfig"),gVe=o(" (DistilBERT model)"),hVe=l(),zf=a("li"),Hee=a("strong"),pVe=o("dpr"),uVe=o(" \u2014 "),K$=a("a"),_Ve=o("DPRConfig"),bVe=o(" (DPR model)"),vVe=l(),Wf=a("li"),Uee=a("strong"),FVe=o("dpt"),TVe=o(" \u2014 "),Z$=a("a"),MVe=o("DPTConfig"),EVe=o(" (DPT model)"),CVe=l(),Qf=a("li"),Jee=a("strong"),wVe=o("electra"),AVe=o(" \u2014 "),ek=a("a"),yVe=o("ElectraConfig"),LVe=o(" (ELECTRA model)"),xVe=l(),Hf=a("li"),Yee=a("strong"),$Ve=o("encoder-decoder"),kVe=o(" \u2014 "),ok=a("a"),SVe=o("EncoderDecoderConfig"),RVe=o(" (Encoder decoder model)"),PVe=l(),Uf=a("li"),Kee=a("strong"),BVe=o("flaubert"),IVe=o(" \u2014 "),rk=a("a"),qVe=o("FlaubertConfig"),NVe=o(" (FlauBERT model)"),jVe=l(),Jf=a("li"),Zee=a("strong"),DVe=o("flava"),GVe=o(" \u2014 "),tk=a("a"),OVe=o("FlavaConfig"),VVe=o(" (Flava model)"),XVe=l(),Yf=a("li"),eoe=a("strong"),zVe=o("fnet"),WVe=o(" \u2014 "),ak=a("a"),QVe=o("FNetConfig"),HVe=o(" (FNet model)"),UVe=l(),Kf=a("li"),ooe=a("strong"),JVe=o("fsmt"),YVe=o(" \u2014 "),nk=a("a"),KVe=o("FSMTConfig"),ZVe=o(" (FairSeq Machine-Translation model)"),eXe=l(),Zf=a("li"),roe=a("strong"),oXe=o("funnel"),rXe=o(" \u2014 "),sk=a("a"),tXe=o("FunnelConfig"),aXe=o(" (Funnel Transformer model)"),nXe=l(),em=a("li"),toe=a("strong"),sXe=o("glpn"),lXe=o(" \u2014 "),lk=a("a"),iXe=o("GLPNConfig"),dXe=o(" (GLPN model)"),cXe=l(),om=a("li"),aoe=a("strong"),fXe=o("gpt2"),mXe=o(" \u2014 "),ik=a("a"),gXe=o("GPT2Config"),hXe=o(" (OpenAI GPT-2 model)"),pXe=l(),rm=a("li"),noe=a("strong"),uXe=o("gpt_neo"),_Xe=o(" \u2014 "),dk=a("a"),bXe=o("GPTNeoConfig"),vXe=o(" (GPT Neo model)"),FXe=l(),tm=a("li"),soe=a("strong"),TXe=o("gptj"),MXe=o(" \u2014 "),ck=a("a"),EXe=o("GPTJConfig"),CXe=o(" (GPT-J model)"),wXe=l(),am=a("li"),loe=a("strong"),AXe=o("hubert"),yXe=o(" \u2014 "),fk=a("a"),LXe=o("HubertConfig"),xXe=o(" (Hubert model)"),$Xe=l(),nm=a("li"),ioe=a("strong"),kXe=o("ibert"),SXe=o(" \u2014 "),mk=a("a"),RXe=o("IBertConfig"),PXe=o(" (I-BERT model)"),BXe=l(),sm=a("li"),doe=a("strong"),IXe=o("imagegpt"),qXe=o(" \u2014 "),gk=a("a"),NXe=o("ImageGPTConfig"),jXe=o(" (ImageGPT model)"),DXe=l(),lm=a("li"),coe=a("strong"),GXe=o("layoutlm"),OXe=o(" \u2014 "),hk=a("a"),VXe=o("LayoutLMConfig"),XXe=o(" (LayoutLM model)"),zXe=l(),im=a("li"),foe=a("strong"),WXe=o("layoutlmv2"),QXe=o(" \u2014 "),pk=a("a"),HXe=o("LayoutLMv2Config"),UXe=o(" (LayoutLMv2 model)"),JXe=l(),dm=a("li"),moe=a("strong"),YXe=o("led"),KXe=o(" \u2014 "),uk=a("a"),ZXe=o("LEDConfig"),eze=o(" (LED model)"),oze=l(),cm=a("li"),goe=a("strong"),rze=o("longformer"),tze=o(" \u2014 "),_k=a("a"),aze=o("LongformerConfig"),nze=o(" (Longformer model)"),sze=l(),fm=a("li"),hoe=a("strong"),lze=o("luke"),ize=o(" \u2014 "),bk=a("a"),dze=o("LukeConfig"),cze=o(" (LUKE model)"),fze=l(),mm=a("li"),poe=a("strong"),mze=o("lxmert"),gze=o(" \u2014 "),vk=a("a"),hze=o("LxmertConfig"),pze=o(" (LXMERT model)"),uze=l(),gm=a("li"),uoe=a("strong"),_ze=o("m2m_100"),bze=o(" \u2014 "),Fk=a("a"),vze=o("M2M100Config"),Fze=o(" (M2M100 model)"),Tze=l(),hm=a("li"),_oe=a("strong"),Mze=o("marian"),Eze=o(" \u2014 "),Tk=a("a"),Cze=o("MarianConfig"),wze=o(" (Marian model)"),Aze=l(),pm=a("li"),boe=a("strong"),yze=o("maskformer"),Lze=o(" \u2014 "),Mk=a("a"),xze=o("MaskFormerConfig"),$ze=o(" (MaskFormer model)"),kze=l(),um=a("li"),voe=a("strong"),Sze=o("mbart"),Rze=o(" \u2014 "),Ek=a("a"),Pze=o("MBartConfig"),Bze=o(" (mBART model)"),Ize=l(),_m=a("li"),Foe=a("strong"),qze=o("megatron-bert"),Nze=o(" \u2014 "),Ck=a("a"),jze=o("MegatronBertConfig"),Dze=o(" (MegatronBert model)"),Gze=l(),bm=a("li"),Toe=a("strong"),Oze=o("mobilebert"),Vze=o(" \u2014 "),wk=a("a"),Xze=o("MobileBertConfig"),zze=o(" (MobileBERT model)"),Wze=l(),vm=a("li"),Moe=a("strong"),Qze=o("mpnet"),Hze=o(" \u2014 "),Ak=a("a"),Uze=o("MPNetConfig"),Jze=o(" (MPNet model)"),Yze=l(),Fm=a("li"),Eoe=a("strong"),Kze=o("mt5"),Zze=o(" \u2014 "),yk=a("a"),eWe=o("MT5Config"),oWe=o(" (mT5 model)"),rWe=l(),Tm=a("li"),Coe=a("strong"),tWe=o("nystromformer"),aWe=o(" \u2014 "),Lk=a("a"),nWe=o("NystromformerConfig"),sWe=o(" (Nystromformer model)"),lWe=l(),Mm=a("li"),woe=a("strong"),iWe=o("openai-gpt"),dWe=o(" \u2014 "),xk=a("a"),cWe=o("OpenAIGPTConfig"),fWe=o(" (OpenAI GPT model)"),mWe=l(),Em=a("li"),Aoe=a("strong"),gWe=o("opt"),hWe=o(" \u2014 "),$k=a("a"),pWe=o("OPTConfig"),uWe=o(" (OPT model)"),_We=l(),Cm=a("li"),yoe=a("strong"),bWe=o("pegasus"),vWe=o(" \u2014 "),kk=a("a"),FWe=o("PegasusConfig"),TWe=o(" (Pegasus model)"),MWe=l(),wm=a("li"),Loe=a("strong"),EWe=o("perceiver"),CWe=o(" \u2014 "),Sk=a("a"),wWe=o("PerceiverConfig"),AWe=o(" (Perceiver model)"),yWe=l(),Am=a("li"),xoe=a("strong"),LWe=o("plbart"),xWe=o(" \u2014 "),Rk=a("a"),$We=o("PLBartConfig"),kWe=o(" (PLBart model)"),SWe=l(),ym=a("li"),$oe=a("strong"),RWe=o("poolformer"),PWe=o(" \u2014 "),Pk=a("a"),BWe=o("PoolFormerConfig"),IWe=o(" (PoolFormer model)"),qWe=l(),Lm=a("li"),koe=a("strong"),NWe=o("prophetnet"),jWe=o(" \u2014 "),Bk=a("a"),DWe=o("ProphetNetConfig"),GWe=o(" (ProphetNet model)"),OWe=l(),xm=a("li"),Soe=a("strong"),VWe=o("qdqbert"),XWe=o(" \u2014 "),Ik=a("a"),zWe=o("QDQBertConfig"),WWe=o(" (QDQBert model)"),QWe=l(),$m=a("li"),Roe=a("strong"),HWe=o("rag"),UWe=o(" \u2014 "),qk=a("a"),JWe=o("RagConfig"),YWe=o(" (RAG model)"),KWe=l(),km=a("li"),Poe=a("strong"),ZWe=o("realm"),eQe=o(" \u2014 "),Nk=a("a"),oQe=o("RealmConfig"),rQe=o(" (Realm model)"),tQe=l(),Sm=a("li"),Boe=a("strong"),aQe=o("reformer"),nQe=o(" \u2014 "),jk=a("a"),sQe=o("ReformerConfig"),lQe=o(" (Reformer model)"),iQe=l(),Rm=a("li"),Ioe=a("strong"),dQe=o("regnet"),cQe=o(" \u2014 "),Dk=a("a"),fQe=o("RegNetConfig"),mQe=o(" (RegNet model)"),gQe=l(),Pm=a("li"),qoe=a("strong"),hQe=o("rembert"),pQe=o(" \u2014 "),Gk=a("a"),uQe=o("RemBertConfig"),_Qe=o(" (RemBERT model)"),bQe=l(),Bm=a("li"),Noe=a("strong"),vQe=o("resnet"),FQe=o(" \u2014 "),Ok=a("a"),TQe=o("ResNetConfig"),MQe=o(" (ResNet model)"),EQe=l(),Im=a("li"),joe=a("strong"),CQe=o("retribert"),wQe=o(" \u2014 "),Vk=a("a"),AQe=o("RetriBertConfig"),yQe=o(" (RetriBERT model)"),LQe=l(),qm=a("li"),Doe=a("strong"),xQe=o("roberta"),$Qe=o(" \u2014 "),Xk=a("a"),kQe=o("RobertaConfig"),SQe=o(" (RoBERTa model)"),RQe=l(),Nm=a("li"),Goe=a("strong"),PQe=o("roformer"),BQe=o(" \u2014 "),zk=a("a"),IQe=o("RoFormerConfig"),qQe=o(" (RoFormer model)"),NQe=l(),jm=a("li"),Ooe=a("strong"),jQe=o("segformer"),DQe=o(" \u2014 "),Wk=a("a"),GQe=o("SegformerConfig"),OQe=o(" (SegFormer model)"),VQe=l(),Dm=a("li"),Voe=a("strong"),XQe=o("sew"),zQe=o(" \u2014 "),Qk=a("a"),WQe=o("SEWConfig"),QQe=o(" (SEW model)"),HQe=l(),Gm=a("li"),Xoe=a("strong"),UQe=o("sew-d"),JQe=o(" \u2014 "),Hk=a("a"),YQe=o("SEWDConfig"),KQe=o(" (SEW-D model)"),ZQe=l(),Om=a("li"),zoe=a("strong"),eHe=o("speech-encoder-decoder"),oHe=o(" \u2014 "),Uk=a("a"),rHe=o("SpeechEncoderDecoderConfig"),tHe=o(" (Speech Encoder decoder model)"),aHe=l(),Vm=a("li"),Woe=a("strong"),nHe=o("speech_to_text"),sHe=o(" \u2014 "),Jk=a("a"),lHe=o("Speech2TextConfig"),iHe=o(" (Speech2Text model)"),dHe=l(),Xm=a("li"),Qoe=a("strong"),cHe=o("speech_to_text_2"),fHe=o(" \u2014 "),Yk=a("a"),mHe=o("Speech2Text2Config"),gHe=o(" (Speech2Text2 model)"),hHe=l(),zm=a("li"),Hoe=a("strong"),pHe=o("splinter"),uHe=o(" \u2014 "),Kk=a("a"),_He=o("SplinterConfig"),bHe=o(" (Splinter model)"),vHe=l(),Wm=a("li"),Uoe=a("strong"),FHe=o("squeezebert"),THe=o(" \u2014 "),Zk=a("a"),MHe=o("SqueezeBertConfig"),EHe=o(" (SqueezeBERT model)"),CHe=l(),Qm=a("li"),Joe=a("strong"),wHe=o("swin"),AHe=o(" \u2014 "),eS=a("a"),yHe=o("SwinConfig"),LHe=o(" (Swin model)"),xHe=l(),Hm=a("li"),Yoe=a("strong"),$He=o("t5"),kHe=o(" \u2014 "),oS=a("a"),SHe=o("T5Config"),RHe=o(" (T5 model)"),PHe=l(),Um=a("li"),Koe=a("strong"),BHe=o("tapas"),IHe=o(" \u2014 "),rS=a("a"),qHe=o("TapasConfig"),NHe=o(" (TAPAS model)"),jHe=l(),Jm=a("li"),Zoe=a("strong"),DHe=o("transfo-xl"),GHe=o(" \u2014 "),tS=a("a"),OHe=o("TransfoXLConfig"),VHe=o(" (Transformer-XL model)"),XHe=l(),Ym=a("li"),ere=a("strong"),zHe=o("trocr"),WHe=o(" \u2014 "),aS=a("a"),QHe=o("TrOCRConfig"),HHe=o(" (TrOCR model)"),UHe=l(),Km=a("li"),ore=a("strong"),JHe=o("unispeech"),YHe=o(" \u2014 "),nS=a("a"),KHe=o("UniSpeechConfig"),ZHe=o(" (UniSpeech model)"),eUe=l(),Zm=a("li"),rre=a("strong"),oUe=o("unispeech-sat"),rUe=o(" \u2014 "),sS=a("a"),tUe=o("UniSpeechSatConfig"),aUe=o(" (UniSpeechSat model)"),nUe=l(),eg=a("li"),tre=a("strong"),sUe=o("van"),lUe=o(" \u2014 "),lS=a("a"),iUe=o("VanConfig"),dUe=o(" (VAN model)"),cUe=l(),og=a("li"),are=a("strong"),fUe=o("vilt"),mUe=o(" \u2014 "),iS=a("a"),gUe=o("ViltConfig"),hUe=o(" (ViLT model)"),pUe=l(),rg=a("li"),nre=a("strong"),uUe=o("vision-encoder-decoder"),_Ue=o(" \u2014 "),dS=a("a"),bUe=o("VisionEncoderDecoderConfig"),vUe=o(" (Vision Encoder decoder model)"),FUe=l(),tg=a("li"),sre=a("strong"),TUe=o("vision-text-dual-encoder"),MUe=o(" \u2014 "),cS=a("a"),EUe=o("VisionTextDualEncoderConfig"),CUe=o(" (VisionTextDualEncoder model)"),wUe=l(),ag=a("li"),lre=a("strong"),AUe=o("visual_bert"),yUe=o(" \u2014 "),fS=a("a"),LUe=o("VisualBertConfig"),xUe=o(" (VisualBert model)"),$Ue=l(),ng=a("li"),ire=a("strong"),kUe=o("vit"),SUe=o(" \u2014 "),mS=a("a"),RUe=o("ViTConfig"),PUe=o(" (ViT model)"),BUe=l(),sg=a("li"),dre=a("strong"),IUe=o("vit_mae"),qUe=o(" \u2014 "),gS=a("a"),NUe=o("ViTMAEConfig"),jUe=o(" (ViTMAE model)"),DUe=l(),lg=a("li"),cre=a("strong"),GUe=o("wav2vec2"),OUe=o(" \u2014 "),hS=a("a"),VUe=o("Wav2Vec2Config"),XUe=o(" (Wav2Vec2 model)"),zUe=l(),ig=a("li"),fre=a("strong"),WUe=o("wav2vec2-conformer"),QUe=o(" \u2014 "),pS=a("a"),HUe=o("Wav2Vec2ConformerConfig"),UUe=o(" (Wav2Vec2-Conformer model)"),JUe=l(),dg=a("li"),mre=a("strong"),YUe=o("wavlm"),KUe=o(" \u2014 "),uS=a("a"),ZUe=o("WavLMConfig"),eJe=o(" (WavLM model)"),oJe=l(),cg=a("li"),gre=a("strong"),rJe=o("xglm"),tJe=o(" \u2014 "),_S=a("a"),aJe=o("XGLMConfig"),nJe=o(" (XGLM model)"),sJe=l(),fg=a("li"),hre=a("strong"),lJe=o("xlm"),iJe=o(" \u2014 "),bS=a("a"),dJe=o("XLMConfig"),cJe=o(" (XLM model)"),fJe=l(),mg=a("li"),pre=a("strong"),mJe=o("xlm-prophetnet"),gJe=o(" \u2014 "),vS=a("a"),hJe=o("XLMProphetNetConfig"),pJe=o(" (XLMProphetNet model)"),uJe=l(),gg=a("li"),ure=a("strong"),_Je=o("xlm-roberta"),bJe=o(" \u2014 "),FS=a("a"),vJe=o("XLMRobertaConfig"),FJe=o(" (XLM-RoBERTa model)"),TJe=l(),hg=a("li"),_re=a("strong"),MJe=o("xlm-roberta-xl"),EJe=o(" \u2014 "),TS=a("a"),CJe=o("XLMRobertaXLConfig"),wJe=o(" (XLM-RoBERTa-XL model)"),AJe=l(),pg=a("li"),bre=a("strong"),yJe=o("xlnet"),LJe=o(" \u2014 "),MS=a("a"),xJe=o("XLNetConfig"),$Je=o(" (XLNet model)"),kJe=l(),ug=a("li"),vre=a("strong"),SJe=o("yolos"),RJe=o(" \u2014 "),ES=a("a"),PJe=o("YolosConfig"),BJe=o(" (YOLOS model)"),IJe=l(),_g=a("li"),Fre=a("strong"),qJe=o("yoso"),NJe=o(" \u2014 "),CS=a("a"),jJe=o("YosoConfig"),DJe=o(" (YOSO model)"),GJe=l(),F(bg.$$.fragment),OJe=l(),vg=a("div"),F(f0.$$.fragment),VJe=l(),Tre=a("p"),XJe=o("Register a new configuration for this class."),CIe=l(),vi=a("h2"),Fg=a("a"),Mre=a("span"),F(m0.$$.fragment),zJe=l(),Ere=a("span"),WJe=o("AutoTokenizer"),wIe=l(),wo=a("div"),F(g0.$$.fragment),QJe=l(),h0=a("p"),HJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wS=a("a"),UJe=o("AutoTokenizer.from_pretrained()"),JJe=o(" class method."),YJe=l(),p0=a("p"),KJe=o("This class cannot be instantiated directly using "),Cre=a("code"),ZJe=o("__init__()"),eYe=o(" (throws an error)."),oYe=l(),Cr=a("div"),F(u0.$$.fragment),rYe=l(),wre=a("p"),tYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),aYe=l(),Aa=a("p"),nYe=o("The tokenizer class to instantiate is selected based on the "),Are=a("code"),sYe=o("model_type"),lYe=o(` property of the config object (either
passed as an argument or loaded from `),yre=a("code"),iYe=o("pretrained_model_name_or_path"),dYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lre=a("code"),cYe=o("pretrained_model_name_or_path"),fYe=o(":"),mYe=l(),k=a("ul"),kn=a("li"),xre=a("strong"),gYe=o("albert"),hYe=o(" \u2014 "),AS=a("a"),pYe=o("AlbertTokenizer"),uYe=o(" or "),yS=a("a"),_Ye=o("AlbertTokenizerFast"),bYe=o(" (ALBERT model)"),vYe=l(),Sn=a("li"),$re=a("strong"),FYe=o("bart"),TYe=o(" \u2014 "),LS=a("a"),MYe=o("BartTokenizer"),EYe=o(" or "),xS=a("a"),CYe=o("BartTokenizerFast"),wYe=o(" (BART model)"),AYe=l(),Rn=a("li"),kre=a("strong"),yYe=o("barthez"),LYe=o(" \u2014 "),$S=a("a"),xYe=o("BarthezTokenizer"),$Ye=o(" or "),kS=a("a"),kYe=o("BarthezTokenizerFast"),SYe=o(" (BARThez model)"),RYe=l(),Tg=a("li"),Sre=a("strong"),PYe=o("bartpho"),BYe=o(" \u2014 "),SS=a("a"),IYe=o("BartphoTokenizer"),qYe=o(" (BARTpho model)"),NYe=l(),Pn=a("li"),Rre=a("strong"),jYe=o("bert"),DYe=o(" \u2014 "),RS=a("a"),GYe=o("BertTokenizer"),OYe=o(" or "),PS=a("a"),VYe=o("BertTokenizerFast"),XYe=o(" (BERT model)"),zYe=l(),Mg=a("li"),Pre=a("strong"),WYe=o("bert-generation"),QYe=o(" \u2014 "),BS=a("a"),HYe=o("BertGenerationTokenizer"),UYe=o(" (Bert Generation model)"),JYe=l(),Eg=a("li"),Bre=a("strong"),YYe=o("bert-japanese"),KYe=o(" \u2014 "),IS=a("a"),ZYe=o("BertJapaneseTokenizer"),eKe=o(" (BertJapanese model)"),oKe=l(),Cg=a("li"),Ire=a("strong"),rKe=o("bertweet"),tKe=o(" \u2014 "),qS=a("a"),aKe=o("BertweetTokenizer"),nKe=o(" (Bertweet model)"),sKe=l(),Bn=a("li"),qre=a("strong"),lKe=o("big_bird"),iKe=o(" \u2014 "),NS=a("a"),dKe=o("BigBirdTokenizer"),cKe=o(" or "),jS=a("a"),fKe=o("BigBirdTokenizerFast"),mKe=o(" (BigBird model)"),gKe=l(),In=a("li"),Nre=a("strong"),hKe=o("bigbird_pegasus"),pKe=o(" \u2014 "),DS=a("a"),uKe=o("PegasusTokenizer"),_Ke=o(" or "),GS=a("a"),bKe=o("PegasusTokenizerFast"),vKe=o(" (BigBirdPegasus model)"),FKe=l(),qn=a("li"),jre=a("strong"),TKe=o("blenderbot"),MKe=o(" \u2014 "),OS=a("a"),EKe=o("BlenderbotTokenizer"),CKe=o(" or "),VS=a("a"),wKe=o("BlenderbotTokenizerFast"),AKe=o(" (Blenderbot model)"),yKe=l(),wg=a("li"),Dre=a("strong"),LKe=o("blenderbot-small"),xKe=o(" \u2014 "),XS=a("a"),$Ke=o("BlenderbotSmallTokenizer"),kKe=o(" (BlenderbotSmall model)"),SKe=l(),Ag=a("li"),Gre=a("strong"),RKe=o("byt5"),PKe=o(" \u2014 "),zS=a("a"),BKe=o("ByT5Tokenizer"),IKe=o(" (ByT5 model)"),qKe=l(),Nn=a("li"),Ore=a("strong"),NKe=o("camembert"),jKe=o(" \u2014 "),WS=a("a"),DKe=o("CamembertTokenizer"),GKe=o(" or "),QS=a("a"),OKe=o("CamembertTokenizerFast"),VKe=o(" (CamemBERT model)"),XKe=l(),yg=a("li"),Vre=a("strong"),zKe=o("canine"),WKe=o(" \u2014 "),HS=a("a"),QKe=o("CanineTokenizer"),HKe=o(" (Canine model)"),UKe=l(),jn=a("li"),Xre=a("strong"),JKe=o("clip"),YKe=o(" \u2014 "),US=a("a"),KKe=o("CLIPTokenizer"),ZKe=o(" or "),JS=a("a"),eZe=o("CLIPTokenizerFast"),oZe=o(" (CLIP model)"),rZe=l(),Dn=a("li"),zre=a("strong"),tZe=o("convbert"),aZe=o(" \u2014 "),YS=a("a"),nZe=o("ConvBertTokenizer"),sZe=o(" or "),KS=a("a"),lZe=o("ConvBertTokenizerFast"),iZe=o(" (ConvBERT model)"),dZe=l(),Gn=a("li"),Wre=a("strong"),cZe=o("cpm"),fZe=o(" \u2014 "),ZS=a("a"),mZe=o("CpmTokenizer"),gZe=o(" or "),eR=a("a"),hZe=o("CpmTokenizerFast"),pZe=o(" (CPM model)"),uZe=l(),Lg=a("li"),Qre=a("strong"),_Ze=o("ctrl"),bZe=o(" \u2014 "),oR=a("a"),vZe=o("CTRLTokenizer"),FZe=o(" (CTRL model)"),TZe=l(),On=a("li"),Hre=a("strong"),MZe=o("data2vec-text"),EZe=o(" \u2014 "),rR=a("a"),CZe=o("RobertaTokenizer"),wZe=o(" or "),tR=a("a"),AZe=o("RobertaTokenizerFast"),yZe=o(" (Data2VecText model)"),LZe=l(),Vn=a("li"),Ure=a("strong"),xZe=o("deberta"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("DebertaTokenizer"),SZe=o(" or "),nR=a("a"),RZe=o("DebertaTokenizerFast"),PZe=o(" (DeBERTa model)"),BZe=l(),Xn=a("li"),Jre=a("strong"),IZe=o("deberta-v2"),qZe=o(" \u2014 "),sR=a("a"),NZe=o("DebertaV2Tokenizer"),jZe=o(" or "),lR=a("a"),DZe=o("DebertaV2TokenizerFast"),GZe=o(" (DeBERTa-v2 model)"),OZe=l(),zn=a("li"),Yre=a("strong"),VZe=o("distilbert"),XZe=o(" \u2014 "),iR=a("a"),zZe=o("DistilBertTokenizer"),WZe=o(" or "),dR=a("a"),QZe=o("DistilBertTokenizerFast"),HZe=o(" (DistilBERT model)"),UZe=l(),Wn=a("li"),Kre=a("strong"),JZe=o("dpr"),YZe=o(" \u2014 "),cR=a("a"),KZe=o("DPRQuestionEncoderTokenizer"),ZZe=o(" or "),fR=a("a"),eeo=o("DPRQuestionEncoderTokenizerFast"),oeo=o(" (DPR model)"),reo=l(),Qn=a("li"),Zre=a("strong"),teo=o("electra"),aeo=o(" \u2014 "),mR=a("a"),neo=o("ElectraTokenizer"),seo=o(" or "),gR=a("a"),leo=o("ElectraTokenizerFast"),ieo=o(" (ELECTRA model)"),deo=l(),xg=a("li"),ete=a("strong"),ceo=o("flaubert"),feo=o(" \u2014 "),hR=a("a"),meo=o("FlaubertTokenizer"),geo=o(" (FlauBERT model)"),heo=l(),Hn=a("li"),ote=a("strong"),peo=o("fnet"),ueo=o(" \u2014 "),pR=a("a"),_eo=o("FNetTokenizer"),beo=o(" or "),uR=a("a"),veo=o("FNetTokenizerFast"),Feo=o(" (FNet model)"),Teo=l(),$g=a("li"),rte=a("strong"),Meo=o("fsmt"),Eeo=o(" \u2014 "),_R=a("a"),Ceo=o("FSMTTokenizer"),weo=o(" (FairSeq Machine-Translation model)"),Aeo=l(),Un=a("li"),tte=a("strong"),yeo=o("funnel"),Leo=o(" \u2014 "),bR=a("a"),xeo=o("FunnelTokenizer"),$eo=o(" or "),vR=a("a"),keo=o("FunnelTokenizerFast"),Seo=o(" (Funnel Transformer model)"),Reo=l(),Jn=a("li"),ate=a("strong"),Peo=o("gpt2"),Beo=o(" \u2014 "),FR=a("a"),Ieo=o("GPT2Tokenizer"),qeo=o(" or "),TR=a("a"),Neo=o("GPT2TokenizerFast"),jeo=o(" (OpenAI GPT-2 model)"),Deo=l(),Yn=a("li"),nte=a("strong"),Geo=o("gpt_neo"),Oeo=o(" \u2014 "),MR=a("a"),Veo=o("GPT2Tokenizer"),Xeo=o(" or "),ER=a("a"),zeo=o("GPT2TokenizerFast"),Weo=o(" (GPT Neo model)"),Qeo=l(),Kn=a("li"),ste=a("strong"),Heo=o("gptj"),Ueo=o(" \u2014 "),CR=a("a"),Jeo=o("GPT2Tokenizer"),Yeo=o(" or "),wR=a("a"),Keo=o("GPT2TokenizerFast"),Zeo=o(" (GPT-J model)"),eoo=l(),Zn=a("li"),lte=a("strong"),ooo=o("herbert"),roo=o(" \u2014 "),AR=a("a"),too=o("HerbertTokenizer"),aoo=o(" or "),yR=a("a"),noo=o("HerbertTokenizerFast"),soo=o(" (HerBERT model)"),loo=l(),kg=a("li"),ite=a("strong"),ioo=o("hubert"),doo=o(" \u2014 "),LR=a("a"),coo=o("Wav2Vec2CTCTokenizer"),foo=o(" (Hubert model)"),moo=l(),es=a("li"),dte=a("strong"),goo=o("ibert"),hoo=o(" \u2014 "),xR=a("a"),poo=o("RobertaTokenizer"),uoo=o(" or "),$R=a("a"),_oo=o("RobertaTokenizerFast"),boo=o(" (I-BERT model)"),voo=l(),os=a("li"),cte=a("strong"),Foo=o("layoutlm"),Too=o(" \u2014 "),kR=a("a"),Moo=o("LayoutLMTokenizer"),Eoo=o(" or "),SR=a("a"),Coo=o("LayoutLMTokenizerFast"),woo=o(" (LayoutLM model)"),Aoo=l(),rs=a("li"),fte=a("strong"),yoo=o("layoutlmv2"),Loo=o(" \u2014 "),RR=a("a"),xoo=o("LayoutLMv2Tokenizer"),$oo=o(" or "),PR=a("a"),koo=o("LayoutLMv2TokenizerFast"),Soo=o(" (LayoutLMv2 model)"),Roo=l(),ts=a("li"),mte=a("strong"),Poo=o("layoutxlm"),Boo=o(" \u2014 "),BR=a("a"),Ioo=o("LayoutXLMTokenizer"),qoo=o(" or "),IR=a("a"),Noo=o("LayoutXLMTokenizerFast"),joo=o(" (LayoutXLM model)"),Doo=l(),as=a("li"),gte=a("strong"),Goo=o("led"),Ooo=o(" \u2014 "),qR=a("a"),Voo=o("LEDTokenizer"),Xoo=o(" or "),NR=a("a"),zoo=o("LEDTokenizerFast"),Woo=o(" (LED model)"),Qoo=l(),ns=a("li"),hte=a("strong"),Hoo=o("longformer"),Uoo=o(" \u2014 "),jR=a("a"),Joo=o("LongformerTokenizer"),Yoo=o(" or "),DR=a("a"),Koo=o("LongformerTokenizerFast"),Zoo=o(" (Longformer model)"),ero=l(),Sg=a("li"),pte=a("strong"),oro=o("luke"),rro=o(" \u2014 "),GR=a("a"),tro=o("LukeTokenizer"),aro=o(" (LUKE model)"),nro=l(),ss=a("li"),ute=a("strong"),sro=o("lxmert"),lro=o(" \u2014 "),OR=a("a"),iro=o("LxmertTokenizer"),dro=o(" or "),VR=a("a"),cro=o("LxmertTokenizerFast"),fro=o(" (LXMERT model)"),mro=l(),Rg=a("li"),_te=a("strong"),gro=o("m2m_100"),hro=o(" \u2014 "),XR=a("a"),pro=o("M2M100Tokenizer"),uro=o(" (M2M100 model)"),_ro=l(),Pg=a("li"),bte=a("strong"),bro=o("marian"),vro=o(" \u2014 "),zR=a("a"),Fro=o("MarianTokenizer"),Tro=o(" (Marian model)"),Mro=l(),ls=a("li"),vte=a("strong"),Ero=o("mbart"),Cro=o(" \u2014 "),WR=a("a"),wro=o("MBartTokenizer"),Aro=o(" or "),QR=a("a"),yro=o("MBartTokenizerFast"),Lro=o(" (mBART model)"),xro=l(),is=a("li"),Fte=a("strong"),$ro=o("mbart50"),kro=o(" \u2014 "),HR=a("a"),Sro=o("MBart50Tokenizer"),Rro=o(" or "),UR=a("a"),Pro=o("MBart50TokenizerFast"),Bro=o(" (mBART-50 model)"),Iro=l(),ds=a("li"),Tte=a("strong"),qro=o("megatron-bert"),Nro=o(" \u2014 "),JR=a("a"),jro=o("BertTokenizer"),Dro=o(" or "),YR=a("a"),Gro=o("BertTokenizerFast"),Oro=o(" (MegatronBert model)"),Vro=l(),Bg=a("li"),Mte=a("strong"),Xro=o("mluke"),zro=o(" \u2014 "),KR=a("a"),Wro=o("MLukeTokenizer"),Qro=o(" (mLUKE model)"),Hro=l(),cs=a("li"),Ete=a("strong"),Uro=o("mobilebert"),Jro=o(" \u2014 "),ZR=a("a"),Yro=o("MobileBertTokenizer"),Kro=o(" or "),eP=a("a"),Zro=o("MobileBertTokenizerFast"),eto=o(" (MobileBERT model)"),oto=l(),fs=a("li"),Cte=a("strong"),rto=o("mpnet"),tto=o(" \u2014 "),oP=a("a"),ato=o("MPNetTokenizer"),nto=o(" or "),rP=a("a"),sto=o("MPNetTokenizerFast"),lto=o(" (MPNet model)"),ito=l(),ms=a("li"),wte=a("strong"),dto=o("mt5"),cto=o(" \u2014 "),tP=a("a"),fto=o("MT5Tokenizer"),mto=o(" or "),aP=a("a"),gto=o("MT5TokenizerFast"),hto=o(" (mT5 model)"),pto=l(),gs=a("li"),Ate=a("strong"),uto=o("nystromformer"),_to=o(" \u2014 "),nP=a("a"),bto=o("AlbertTokenizer"),vto=o(" or "),sP=a("a"),Fto=o("AlbertTokenizerFast"),Tto=o(" (Nystromformer model)"),Mto=l(),hs=a("li"),yte=a("strong"),Eto=o("openai-gpt"),Cto=o(" \u2014 "),lP=a("a"),wto=o("OpenAIGPTTokenizer"),Ato=o(" or "),iP=a("a"),yto=o("OpenAIGPTTokenizerFast"),Lto=o(" (OpenAI GPT model)"),xto=l(),Ig=a("li"),Lte=a("strong"),$to=o("opt"),kto=o(" \u2014 "),dP=a("a"),Sto=o("GPT2Tokenizer"),Rto=o(" (OPT model)"),Pto=l(),ps=a("li"),xte=a("strong"),Bto=o("pegasus"),Ito=o(" \u2014 "),cP=a("a"),qto=o("PegasusTokenizer"),Nto=o(" or "),fP=a("a"),jto=o("PegasusTokenizerFast"),Dto=o(" (Pegasus model)"),Gto=l(),qg=a("li"),$te=a("strong"),Oto=o("perceiver"),Vto=o(" \u2014 "),mP=a("a"),Xto=o("PerceiverTokenizer"),zto=o(" (Perceiver model)"),Wto=l(),Ng=a("li"),kte=a("strong"),Qto=o("phobert"),Hto=o(" \u2014 "),gP=a("a"),Uto=o("PhobertTokenizer"),Jto=o(" (PhoBERT model)"),Yto=l(),jg=a("li"),Ste=a("strong"),Kto=o("plbart"),Zto=o(" \u2014 "),hP=a("a"),eao=o("PLBartTokenizer"),oao=o(" (PLBart model)"),rao=l(),Dg=a("li"),Rte=a("strong"),tao=o("prophetnet"),aao=o(" \u2014 "),pP=a("a"),nao=o("ProphetNetTokenizer"),sao=o(" (ProphetNet model)"),lao=l(),us=a("li"),Pte=a("strong"),iao=o("qdqbert"),dao=o(" \u2014 "),uP=a("a"),cao=o("BertTokenizer"),fao=o(" or "),_P=a("a"),mao=o("BertTokenizerFast"),gao=o(" (QDQBert model)"),hao=l(),Gg=a("li"),Bte=a("strong"),pao=o("rag"),uao=o(" \u2014 "),bP=a("a"),_ao=o("RagTokenizer"),bao=o(" (RAG model)"),vao=l(),_s=a("li"),Ite=a("strong"),Fao=o("realm"),Tao=o(" \u2014 "),vP=a("a"),Mao=o("RealmTokenizer"),Eao=o(" or "),FP=a("a"),Cao=o("RealmTokenizerFast"),wao=o(" (Realm model)"),Aao=l(),bs=a("li"),qte=a("strong"),yao=o("reformer"),Lao=o(" \u2014 "),TP=a("a"),xao=o("ReformerTokenizer"),$ao=o(" or "),MP=a("a"),kao=o("ReformerTokenizerFast"),Sao=o(" (Reformer model)"),Rao=l(),vs=a("li"),Nte=a("strong"),Pao=o("rembert"),Bao=o(" \u2014 "),EP=a("a"),Iao=o("RemBertTokenizer"),qao=o(" or "),CP=a("a"),Nao=o("RemBertTokenizerFast"),jao=o(" (RemBERT model)"),Dao=l(),Fs=a("li"),jte=a("strong"),Gao=o("retribert"),Oao=o(" \u2014 "),wP=a("a"),Vao=o("RetriBertTokenizer"),Xao=o(" or "),AP=a("a"),zao=o("RetriBertTokenizerFast"),Wao=o(" (RetriBERT model)"),Qao=l(),Ts=a("li"),Dte=a("strong"),Hao=o("roberta"),Uao=o(" \u2014 "),yP=a("a"),Jao=o("RobertaTokenizer"),Yao=o(" or "),LP=a("a"),Kao=o("RobertaTokenizerFast"),Zao=o(" (RoBERTa model)"),eno=l(),Ms=a("li"),Gte=a("strong"),ono=o("roformer"),rno=o(" \u2014 "),xP=a("a"),tno=o("RoFormerTokenizer"),ano=o(" or "),$P=a("a"),nno=o("RoFormerTokenizerFast"),sno=o(" (RoFormer model)"),lno=l(),Og=a("li"),Ote=a("strong"),ino=o("speech_to_text"),dno=o(" \u2014 "),kP=a("a"),cno=o("Speech2TextTokenizer"),fno=o(" (Speech2Text model)"),mno=l(),Vg=a("li"),Vte=a("strong"),gno=o("speech_to_text_2"),hno=o(" \u2014 "),SP=a("a"),pno=o("Speech2Text2Tokenizer"),uno=o(" (Speech2Text2 model)"),_no=l(),Es=a("li"),Xte=a("strong"),bno=o("splinter"),vno=o(" \u2014 "),RP=a("a"),Fno=o("SplinterTokenizer"),Tno=o(" or "),PP=a("a"),Mno=o("SplinterTokenizerFast"),Eno=o(" (Splinter model)"),Cno=l(),Cs=a("li"),zte=a("strong"),wno=o("squeezebert"),Ano=o(" \u2014 "),BP=a("a"),yno=o("SqueezeBertTokenizer"),Lno=o(" or "),IP=a("a"),xno=o("SqueezeBertTokenizerFast"),$no=o(" (SqueezeBERT model)"),kno=l(),ws=a("li"),Wte=a("strong"),Sno=o("t5"),Rno=o(" \u2014 "),qP=a("a"),Pno=o("T5Tokenizer"),Bno=o(" or "),NP=a("a"),Ino=o("T5TokenizerFast"),qno=o(" (T5 model)"),Nno=l(),Xg=a("li"),Qte=a("strong"),jno=o("tapas"),Dno=o(" \u2014 "),jP=a("a"),Gno=o("TapasTokenizer"),Ono=o(" (TAPAS model)"),Vno=l(),zg=a("li"),Hte=a("strong"),Xno=o("tapex"),zno=o(" \u2014 "),DP=a("a"),Wno=o("TapexTokenizer"),Qno=o(" (TAPEX model)"),Hno=l(),Wg=a("li"),Ute=a("strong"),Uno=o("transfo-xl"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("TransfoXLTokenizer"),Kno=o(" (Transformer-XL model)"),Zno=l(),As=a("li"),Jte=a("strong"),eso=o("visual_bert"),oso=o(" \u2014 "),OP=a("a"),rso=o("BertTokenizer"),tso=o(" or "),VP=a("a"),aso=o("BertTokenizerFast"),nso=o(" (VisualBert model)"),sso=l(),Qg=a("li"),Yte=a("strong"),lso=o("wav2vec2"),iso=o(" \u2014 "),XP=a("a"),dso=o("Wav2Vec2CTCTokenizer"),cso=o(" (Wav2Vec2 model)"),fso=l(),Hg=a("li"),Kte=a("strong"),mso=o("wav2vec2-conformer"),gso=o(" \u2014 "),zP=a("a"),hso=o("Wav2Vec2CTCTokenizer"),pso=o(" (Wav2Vec2-Conformer model)"),uso=l(),Ug=a("li"),Zte=a("strong"),_so=o("wav2vec2_phoneme"),bso=o(" \u2014 "),WP=a("a"),vso=o("Wav2Vec2PhonemeCTCTokenizer"),Fso=o(" (Wav2Vec2Phoneme model)"),Tso=l(),ys=a("li"),eae=a("strong"),Mso=o("xglm"),Eso=o(" \u2014 "),QP=a("a"),Cso=o("XGLMTokenizer"),wso=o(" or "),HP=a("a"),Aso=o("XGLMTokenizerFast"),yso=o(" (XGLM model)"),Lso=l(),Jg=a("li"),oae=a("strong"),xso=o("xlm"),$so=o(" \u2014 "),UP=a("a"),kso=o("XLMTokenizer"),Sso=o(" (XLM model)"),Rso=l(),Yg=a("li"),rae=a("strong"),Pso=o("xlm-prophetnet"),Bso=o(" \u2014 "),JP=a("a"),Iso=o("XLMProphetNetTokenizer"),qso=o(" (XLMProphetNet model)"),Nso=l(),Ls=a("li"),tae=a("strong"),jso=o("xlm-roberta"),Dso=o(" \u2014 "),YP=a("a"),Gso=o("XLMRobertaTokenizer"),Oso=o(" or "),KP=a("a"),Vso=o("XLMRobertaTokenizerFast"),Xso=o(" (XLM-RoBERTa model)"),zso=l(),xs=a("li"),aae=a("strong"),Wso=o("xlm-roberta-xl"),Qso=o(" \u2014 "),ZP=a("a"),Hso=o("RobertaTokenizer"),Uso=o(" or "),eB=a("a"),Jso=o("RobertaTokenizerFast"),Yso=o(" (XLM-RoBERTa-XL model)"),Kso=l(),$s=a("li"),nae=a("strong"),Zso=o("xlnet"),elo=o(" \u2014 "),oB=a("a"),olo=o("XLNetTokenizer"),rlo=o(" or "),rB=a("a"),tlo=o("XLNetTokenizerFast"),alo=o(" (XLNet model)"),nlo=l(),ks=a("li"),sae=a("strong"),slo=o("yoso"),llo=o(" \u2014 "),tB=a("a"),ilo=o("AlbertTokenizer"),dlo=o(" or "),aB=a("a"),clo=o("AlbertTokenizerFast"),flo=o(" (YOSO model)"),mlo=l(),F(Kg.$$.fragment),glo=l(),Zg=a("div"),F(_0.$$.fragment),hlo=l(),lae=a("p"),plo=o("Register a new tokenizer in this mapping."),AIe=l(),Fi=a("h2"),eh=a("a"),iae=a("span"),F(b0.$$.fragment),ulo=l(),dae=a("span"),_lo=o("AutoFeatureExtractor"),yIe=l(),Ao=a("div"),F(v0.$$.fragment),blo=l(),F0=a("p"),vlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nB=a("a"),Flo=o("AutoFeatureExtractor.from_pretrained()"),Tlo=o(" class method."),Mlo=l(),T0=a("p"),Elo=o("This class cannot be instantiated directly using "),cae=a("code"),Clo=o("__init__()"),wlo=o(" (throws an error)."),Alo=l(),He=a("div"),F(M0.$$.fragment),ylo=l(),fae=a("p"),Llo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xlo=l(),ya=a("p"),$lo=o("The feature extractor class to instantiate is selected based on the "),mae=a("code"),klo=o("model_type"),Slo=o(` property of the config object
(either passed as an argument or loaded from `),gae=a("code"),Rlo=o("pretrained_model_name_or_path"),Plo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hae=a("code"),Blo=o("pretrained_model_name_or_path"),Ilo=o(":"),qlo=l(),Z=a("ul"),oh=a("li"),pae=a("strong"),Nlo=o("beit"),jlo=o(" \u2014 "),sB=a("a"),Dlo=o("BeitFeatureExtractor"),Glo=o(" (BEiT model)"),Olo=l(),rh=a("li"),uae=a("strong"),Vlo=o("clip"),Xlo=o(" \u2014 "),lB=a("a"),zlo=o("CLIPFeatureExtractor"),Wlo=o(" (CLIP model)"),Qlo=l(),th=a("li"),_ae=a("strong"),Hlo=o("convnext"),Ulo=o(" \u2014 "),iB=a("a"),Jlo=o("ConvNextFeatureExtractor"),Ylo=o(" (ConvNext model)"),Klo=l(),ah=a("li"),bae=a("strong"),Zlo=o("data2vec-audio"),eio=o(" \u2014 "),dB=a("a"),oio=o("Wav2Vec2FeatureExtractor"),rio=o(" (Data2VecAudio model)"),tio=l(),nh=a("li"),vae=a("strong"),aio=o("data2vec-vision"),nio=o(" \u2014 "),cB=a("a"),sio=o("BeitFeatureExtractor"),lio=o(" (Data2VecVision model)"),iio=l(),sh=a("li"),Fae=a("strong"),dio=o("deit"),cio=o(" \u2014 "),fB=a("a"),fio=o("DeiTFeatureExtractor"),mio=o(" (DeiT model)"),gio=l(),lh=a("li"),Tae=a("strong"),hio=o("detr"),pio=o(" \u2014 "),mB=a("a"),uio=o("DetrFeatureExtractor"),_io=o(" (DETR model)"),bio=l(),ih=a("li"),Mae=a("strong"),vio=o("dpt"),Fio=o(" \u2014 "),gB=a("a"),Tio=o("DPTFeatureExtractor"),Mio=o(" (DPT model)"),Eio=l(),dh=a("li"),Eae=a("strong"),Cio=o("flava"),wio=o(" \u2014 "),hB=a("a"),Aio=o("FlavaFeatureExtractor"),yio=o(" (Flava model)"),Lio=l(),ch=a("li"),Cae=a("strong"),xio=o("glpn"),$io=o(" \u2014 "),pB=a("a"),kio=o("GLPNFeatureExtractor"),Sio=o(" (GLPN model)"),Rio=l(),fh=a("li"),wae=a("strong"),Pio=o("hubert"),Bio=o(" \u2014 "),uB=a("a"),Iio=o("Wav2Vec2FeatureExtractor"),qio=o(" (Hubert model)"),Nio=l(),mh=a("li"),Aae=a("strong"),jio=o("layoutlmv2"),Dio=o(" \u2014 "),_B=a("a"),Gio=o("LayoutLMv2FeatureExtractor"),Oio=o(" (LayoutLMv2 model)"),Vio=l(),gh=a("li"),yae=a("strong"),Xio=o("maskformer"),zio=o(" \u2014 "),bB=a("a"),Wio=o("MaskFormerFeatureExtractor"),Qio=o(" (MaskFormer model)"),Hio=l(),hh=a("li"),Lae=a("strong"),Uio=o("perceiver"),Jio=o(" \u2014 "),vB=a("a"),Yio=o("PerceiverFeatureExtractor"),Kio=o(" (Perceiver model)"),Zio=l(),ph=a("li"),xae=a("strong"),edo=o("poolformer"),odo=o(" \u2014 "),FB=a("a"),rdo=o("PoolFormerFeatureExtractor"),tdo=o(" (PoolFormer model)"),ado=l(),uh=a("li"),$ae=a("strong"),ndo=o("regnet"),sdo=o(" \u2014 "),TB=a("a"),ldo=o("ConvNextFeatureExtractor"),ido=o(" (RegNet model)"),ddo=l(),_h=a("li"),kae=a("strong"),cdo=o("resnet"),fdo=o(" \u2014 "),MB=a("a"),mdo=o("ConvNextFeatureExtractor"),gdo=o(" (ResNet model)"),hdo=l(),bh=a("li"),Sae=a("strong"),pdo=o("segformer"),udo=o(" \u2014 "),EB=a("a"),_do=o("SegformerFeatureExtractor"),bdo=o(" (SegFormer model)"),vdo=l(),vh=a("li"),Rae=a("strong"),Fdo=o("speech_to_text"),Tdo=o(" \u2014 "),CB=a("a"),Mdo=o("Speech2TextFeatureExtractor"),Edo=o(" (Speech2Text model)"),Cdo=l(),Fh=a("li"),Pae=a("strong"),wdo=o("swin"),Ado=o(" \u2014 "),wB=a("a"),ydo=o("ViTFeatureExtractor"),Ldo=o(" (Swin model)"),xdo=l(),Th=a("li"),Bae=a("strong"),$do=o("van"),kdo=o(" \u2014 "),AB=a("a"),Sdo=o("ConvNextFeatureExtractor"),Rdo=o(" (VAN model)"),Pdo=l(),Mh=a("li"),Iae=a("strong"),Bdo=o("vit"),Ido=o(" \u2014 "),yB=a("a"),qdo=o("ViTFeatureExtractor"),Ndo=o(" (ViT model)"),jdo=l(),Eh=a("li"),qae=a("strong"),Ddo=o("vit_mae"),Gdo=o(" \u2014 "),LB=a("a"),Odo=o("ViTFeatureExtractor"),Vdo=o(" (ViTMAE model)"),Xdo=l(),Ch=a("li"),Nae=a("strong"),zdo=o("wav2vec2"),Wdo=o(" \u2014 "),xB=a("a"),Qdo=o("Wav2Vec2FeatureExtractor"),Hdo=o(" (Wav2Vec2 model)"),Udo=l(),wh=a("li"),jae=a("strong"),Jdo=o("wav2vec2-conformer"),Ydo=o(" \u2014 "),$B=a("a"),Kdo=o("Wav2Vec2FeatureExtractor"),Zdo=o(" (Wav2Vec2-Conformer model)"),eco=l(),Ah=a("li"),Dae=a("strong"),oco=o("yolos"),rco=o(" \u2014 "),kB=a("a"),tco=o("YolosFeatureExtractor"),aco=o(" (YOLOS model)"),nco=l(),F(yh.$$.fragment),sco=l(),F(Lh.$$.fragment),lco=l(),xh=a("div"),F(E0.$$.fragment),ico=l(),Gae=a("p"),dco=o("Register a new feature extractor for this class."),LIe=l(),Ti=a("h2"),$h=a("a"),Oae=a("span"),F(C0.$$.fragment),cco=l(),Vae=a("span"),fco=o("AutoProcessor"),xIe=l(),yo=a("div"),F(w0.$$.fragment),mco=l(),A0=a("p"),gco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SB=a("a"),hco=o("AutoProcessor.from_pretrained()"),pco=o(" class method."),uco=l(),y0=a("p"),_co=o("This class cannot be instantiated directly using "),Xae=a("code"),bco=o("__init__()"),vco=o(" (throws an error)."),Fco=l(),Ue=a("div"),F(L0.$$.fragment),Tco=l(),zae=a("p"),Mco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Eco=l(),Mi=a("p"),Cco=o("The processor class to instantiate is selected based on the "),Wae=a("code"),wco=o("model_type"),Aco=o(` property of the config object (either
passed as an argument or loaded from `),Qae=a("code"),yco=o("pretrained_model_name_or_path"),Lco=o(" if possible):"),xco=l(),pe=a("ul"),kh=a("li"),Hae=a("strong"),$co=o("clip"),kco=o(" \u2014 "),RB=a("a"),Sco=o("CLIPProcessor"),Rco=o(" (CLIP model)"),Pco=l(),Sh=a("li"),Uae=a("strong"),Bco=o("flava"),Ico=o(" \u2014 "),Jae=a("code"),qco=o("FLAVAProcessor"),Nco=o(" (Flava model)"),jco=l(),Rh=a("li"),Yae=a("strong"),Dco=o("layoutlmv2"),Gco=o(" \u2014 "),PB=a("a"),Oco=o("LayoutLMv2Processor"),Vco=o(" (LayoutLMv2 model)"),Xco=l(),Ph=a("li"),Kae=a("strong"),zco=o("layoutxlm"),Wco=o(" \u2014 "),BB=a("a"),Qco=o("LayoutXLMProcessor"),Hco=o(" (LayoutXLM model)"),Uco=l(),Bh=a("li"),Zae=a("strong"),Jco=o("sew"),Yco=o(" \u2014 "),IB=a("a"),Kco=o("Wav2Vec2Processor"),Zco=o(" (SEW model)"),efo=l(),Ih=a("li"),ene=a("strong"),ofo=o("sew-d"),rfo=o(" \u2014 "),qB=a("a"),tfo=o("Wav2Vec2Processor"),afo=o(" (SEW-D model)"),nfo=l(),qh=a("li"),one=a("strong"),sfo=o("speech_to_text"),lfo=o(" \u2014 "),NB=a("a"),ifo=o("Speech2TextProcessor"),dfo=o(" (Speech2Text model)"),cfo=l(),Nh=a("li"),rne=a("strong"),ffo=o("speech_to_text_2"),mfo=o(" \u2014 "),jB=a("a"),gfo=o("Speech2Text2Processor"),hfo=o(" (Speech2Text2 model)"),pfo=l(),jh=a("li"),tne=a("strong"),ufo=o("trocr"),_fo=o(" \u2014 "),DB=a("a"),bfo=o("TrOCRProcessor"),vfo=o(" (TrOCR model)"),Ffo=l(),Dh=a("li"),ane=a("strong"),Tfo=o("unispeech"),Mfo=o(" \u2014 "),GB=a("a"),Efo=o("Wav2Vec2Processor"),Cfo=o(" (UniSpeech model)"),wfo=l(),Gh=a("li"),nne=a("strong"),Afo=o("unispeech-sat"),yfo=o(" \u2014 "),OB=a("a"),Lfo=o("Wav2Vec2Processor"),xfo=o(" (UniSpeechSat model)"),$fo=l(),Oh=a("li"),sne=a("strong"),kfo=o("vilt"),Sfo=o(" \u2014 "),VB=a("a"),Rfo=o("ViltProcessor"),Pfo=o(" (ViLT model)"),Bfo=l(),Vh=a("li"),lne=a("strong"),Ifo=o("vision-text-dual-encoder"),qfo=o(" \u2014 "),XB=a("a"),Nfo=o("VisionTextDualEncoderProcessor"),jfo=o(" (VisionTextDualEncoder model)"),Dfo=l(),Xh=a("li"),ine=a("strong"),Gfo=o("wav2vec2"),Ofo=o(" \u2014 "),zB=a("a"),Vfo=o("Wav2Vec2Processor"),Xfo=o(" (Wav2Vec2 model)"),zfo=l(),zh=a("li"),dne=a("strong"),Wfo=o("wav2vec2-conformer"),Qfo=o(" \u2014 "),WB=a("a"),Hfo=o("Wav2Vec2Processor"),Ufo=o(" (Wav2Vec2-Conformer model)"),Jfo=l(),Wh=a("li"),cne=a("strong"),Yfo=o("wavlm"),Kfo=o(" \u2014 "),QB=a("a"),Zfo=o("Wav2Vec2Processor"),emo=o(" (WavLM model)"),omo=l(),F(Qh.$$.fragment),rmo=l(),F(Hh.$$.fragment),tmo=l(),Uh=a("div"),F(x0.$$.fragment),amo=l(),fne=a("p"),nmo=o("Register a new processor for this class."),$Ie=l(),Ei=a("h2"),Jh=a("a"),mne=a("span"),F($0.$$.fragment),smo=l(),gne=a("span"),lmo=o("AutoModel"),kIe=l(),Lo=a("div"),F(k0.$$.fragment),imo=l(),Ci=a("p"),dmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HB=a("a"),cmo=o("from_pretrained()"),fmo=o(" class method or the "),UB=a("a"),mmo=o("from_config()"),gmo=o(` class
method.`),hmo=l(),S0=a("p"),pmo=o("This class cannot be instantiated directly using "),hne=a("code"),umo=o("__init__()"),_mo=o(" (throws an error)."),bmo=l(),tt=a("div"),F(R0.$$.fragment),vmo=l(),pne=a("p"),Fmo=o("Instantiates one of the base model classes of the library from a configuration."),Tmo=l(),wi=a("p"),Mmo=o(`Note:
Loading a model from its configuration file does `),une=a("strong"),Emo=o("not"),Cmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JB=a("a"),wmo=o("from_pretrained()"),Amo=o(" to load the model weights."),ymo=l(),F(Yh.$$.fragment),Lmo=l(),Je=a("div"),F(P0.$$.fragment),xmo=l(),_ne=a("p"),$mo=o("Instantiate one of the base model classes of the library from a pretrained model."),kmo=l(),La=a("p"),Smo=o("The model class to instantiate is selected based on the "),bne=a("code"),Rmo=o("model_type"),Pmo=o(` property of the config object (either
passed as an argument or loaded from `),vne=a("code"),Bmo=o("pretrained_model_name_or_path"),Imo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fne=a("code"),qmo=o("pretrained_model_name_or_path"),Nmo=o(":"),jmo=l(),x=a("ul"),Kh=a("li"),Tne=a("strong"),Dmo=o("albert"),Gmo=o(" \u2014 "),YB=a("a"),Omo=o("AlbertModel"),Vmo=o(" (ALBERT model)"),Xmo=l(),Zh=a("li"),Mne=a("strong"),zmo=o("bart"),Wmo=o(" \u2014 "),KB=a("a"),Qmo=o("BartModel"),Hmo=o(" (BART model)"),Umo=l(),ep=a("li"),Ene=a("strong"),Jmo=o("beit"),Ymo=o(" \u2014 "),ZB=a("a"),Kmo=o("BeitModel"),Zmo=o(" (BEiT model)"),ego=l(),op=a("li"),Cne=a("strong"),ogo=o("bert"),rgo=o(" \u2014 "),eI=a("a"),tgo=o("BertModel"),ago=o(" (BERT model)"),ngo=l(),rp=a("li"),wne=a("strong"),sgo=o("bert-generation"),lgo=o(" \u2014 "),oI=a("a"),igo=o("BertGenerationEncoder"),dgo=o(" (Bert Generation model)"),cgo=l(),tp=a("li"),Ane=a("strong"),fgo=o("big_bird"),mgo=o(" \u2014 "),rI=a("a"),ggo=o("BigBirdModel"),hgo=o(" (BigBird model)"),pgo=l(),ap=a("li"),yne=a("strong"),ugo=o("bigbird_pegasus"),_go=o(" \u2014 "),tI=a("a"),bgo=o("BigBirdPegasusModel"),vgo=o(" (BigBirdPegasus model)"),Fgo=l(),np=a("li"),Lne=a("strong"),Tgo=o("blenderbot"),Mgo=o(" \u2014 "),aI=a("a"),Ego=o("BlenderbotModel"),Cgo=o(" (Blenderbot model)"),wgo=l(),sp=a("li"),xne=a("strong"),Ago=o("blenderbot-small"),ygo=o(" \u2014 "),nI=a("a"),Lgo=o("BlenderbotSmallModel"),xgo=o(" (BlenderbotSmall model)"),$go=l(),lp=a("li"),$ne=a("strong"),kgo=o("camembert"),Sgo=o(" \u2014 "),sI=a("a"),Rgo=o("CamembertModel"),Pgo=o(" (CamemBERT model)"),Bgo=l(),ip=a("li"),kne=a("strong"),Igo=o("canine"),qgo=o(" \u2014 "),lI=a("a"),Ngo=o("CanineModel"),jgo=o(" (Canine model)"),Dgo=l(),dp=a("li"),Sne=a("strong"),Ggo=o("clip"),Ogo=o(" \u2014 "),iI=a("a"),Vgo=o("CLIPModel"),Xgo=o(" (CLIP model)"),zgo=l(),cp=a("li"),Rne=a("strong"),Wgo=o("convbert"),Qgo=o(" \u2014 "),dI=a("a"),Hgo=o("ConvBertModel"),Ugo=o(" (ConvBERT model)"),Jgo=l(),fp=a("li"),Pne=a("strong"),Ygo=o("convnext"),Kgo=o(" \u2014 "),cI=a("a"),Zgo=o("ConvNextModel"),eho=o(" (ConvNext model)"),oho=l(),mp=a("li"),Bne=a("strong"),rho=o("ctrl"),tho=o(" \u2014 "),fI=a("a"),aho=o("CTRLModel"),nho=o(" (CTRL model)"),sho=l(),gp=a("li"),Ine=a("strong"),lho=o("data2vec-audio"),iho=o(" \u2014 "),mI=a("a"),dho=o("Data2VecAudioModel"),cho=o(" (Data2VecAudio model)"),fho=l(),hp=a("li"),qne=a("strong"),mho=o("data2vec-text"),gho=o(" \u2014 "),gI=a("a"),hho=o("Data2VecTextModel"),pho=o(" (Data2VecText model)"),uho=l(),pp=a("li"),Nne=a("strong"),_ho=o("data2vec-vision"),bho=o(" \u2014 "),hI=a("a"),vho=o("Data2VecVisionModel"),Fho=o(" (Data2VecVision model)"),Tho=l(),up=a("li"),jne=a("strong"),Mho=o("deberta"),Eho=o(" \u2014 "),pI=a("a"),Cho=o("DebertaModel"),who=o(" (DeBERTa model)"),Aho=l(),_p=a("li"),Dne=a("strong"),yho=o("deberta-v2"),Lho=o(" \u2014 "),uI=a("a"),xho=o("DebertaV2Model"),$ho=o(" (DeBERTa-v2 model)"),kho=l(),bp=a("li"),Gne=a("strong"),Sho=o("decision_transformer"),Rho=o(" \u2014 "),_I=a("a"),Pho=o("DecisionTransformerModel"),Bho=o(" (Decision Transformer model)"),Iho=l(),vp=a("li"),One=a("strong"),qho=o("deit"),Nho=o(" \u2014 "),bI=a("a"),jho=o("DeiTModel"),Dho=o(" (DeiT model)"),Gho=l(),Fp=a("li"),Vne=a("strong"),Oho=o("detr"),Vho=o(" \u2014 "),vI=a("a"),Xho=o("DetrModel"),zho=o(" (DETR model)"),Who=l(),Tp=a("li"),Xne=a("strong"),Qho=o("distilbert"),Hho=o(" \u2014 "),FI=a("a"),Uho=o("DistilBertModel"),Jho=o(" (DistilBERT model)"),Yho=l(),Mp=a("li"),zne=a("strong"),Kho=o("dpr"),Zho=o(" \u2014 "),TI=a("a"),epo=o("DPRQuestionEncoder"),opo=o(" (DPR model)"),rpo=l(),Ep=a("li"),Wne=a("strong"),tpo=o("dpt"),apo=o(" \u2014 "),MI=a("a"),npo=o("DPTModel"),spo=o(" (DPT model)"),lpo=l(),Cp=a("li"),Qne=a("strong"),ipo=o("electra"),dpo=o(" \u2014 "),EI=a("a"),cpo=o("ElectraModel"),fpo=o(" (ELECTRA model)"),mpo=l(),wp=a("li"),Hne=a("strong"),gpo=o("flaubert"),hpo=o(" \u2014 "),CI=a("a"),ppo=o("FlaubertModel"),upo=o(" (FlauBERT model)"),_po=l(),Ap=a("li"),Une=a("strong"),bpo=o("flava"),vpo=o(" \u2014 "),wI=a("a"),Fpo=o("FlavaModel"),Tpo=o(" (Flava model)"),Mpo=l(),yp=a("li"),Jne=a("strong"),Epo=o("fnet"),Cpo=o(" \u2014 "),AI=a("a"),wpo=o("FNetModel"),Apo=o(" (FNet model)"),ypo=l(),Lp=a("li"),Yne=a("strong"),Lpo=o("fsmt"),xpo=o(" \u2014 "),yI=a("a"),$po=o("FSMTModel"),kpo=o(" (FairSeq Machine-Translation model)"),Spo=l(),Ss=a("li"),Kne=a("strong"),Rpo=o("funnel"),Ppo=o(" \u2014 "),LI=a("a"),Bpo=o("FunnelModel"),Ipo=o(" or "),xI=a("a"),qpo=o("FunnelBaseModel"),Npo=o(" (Funnel Transformer model)"),jpo=l(),xp=a("li"),Zne=a("strong"),Dpo=o("glpn"),Gpo=o(" \u2014 "),$I=a("a"),Opo=o("GLPNModel"),Vpo=o(" (GLPN model)"),Xpo=l(),$p=a("li"),ese=a("strong"),zpo=o("gpt2"),Wpo=o(" \u2014 "),kI=a("a"),Qpo=o("GPT2Model"),Hpo=o(" (OpenAI GPT-2 model)"),Upo=l(),kp=a("li"),ose=a("strong"),Jpo=o("gpt_neo"),Ypo=o(" \u2014 "),SI=a("a"),Kpo=o("GPTNeoModel"),Zpo=o(" (GPT Neo model)"),euo=l(),Sp=a("li"),rse=a("strong"),ouo=o("gptj"),ruo=o(" \u2014 "),RI=a("a"),tuo=o("GPTJModel"),auo=o(" (GPT-J model)"),nuo=l(),Rp=a("li"),tse=a("strong"),suo=o("hubert"),luo=o(" \u2014 "),PI=a("a"),iuo=o("HubertModel"),duo=o(" (Hubert model)"),cuo=l(),Pp=a("li"),ase=a("strong"),fuo=o("ibert"),muo=o(" \u2014 "),BI=a("a"),guo=o("IBertModel"),huo=o(" (I-BERT model)"),puo=l(),Bp=a("li"),nse=a("strong"),uuo=o("imagegpt"),_uo=o(" \u2014 "),II=a("a"),buo=o("ImageGPTModel"),vuo=o(" (ImageGPT model)"),Fuo=l(),Ip=a("li"),sse=a("strong"),Tuo=o("layoutlm"),Muo=o(" \u2014 "),qI=a("a"),Euo=o("LayoutLMModel"),Cuo=o(" (LayoutLM model)"),wuo=l(),qp=a("li"),lse=a("strong"),Auo=o("layoutlmv2"),yuo=o(" \u2014 "),NI=a("a"),Luo=o("LayoutLMv2Model"),xuo=o(" (LayoutLMv2 model)"),$uo=l(),Np=a("li"),ise=a("strong"),kuo=o("led"),Suo=o(" \u2014 "),jI=a("a"),Ruo=o("LEDModel"),Puo=o(" (LED model)"),Buo=l(),jp=a("li"),dse=a("strong"),Iuo=o("longformer"),quo=o(" \u2014 "),DI=a("a"),Nuo=o("LongformerModel"),juo=o(" (Longformer model)"),Duo=l(),Dp=a("li"),cse=a("strong"),Guo=o("luke"),Ouo=o(" \u2014 "),GI=a("a"),Vuo=o("LukeModel"),Xuo=o(" (LUKE model)"),zuo=l(),Gp=a("li"),fse=a("strong"),Wuo=o("lxmert"),Quo=o(" \u2014 "),OI=a("a"),Huo=o("LxmertModel"),Uuo=o(" (LXMERT model)"),Juo=l(),Op=a("li"),mse=a("strong"),Yuo=o("m2m_100"),Kuo=o(" \u2014 "),VI=a("a"),Zuo=o("M2M100Model"),e_o=o(" (M2M100 model)"),o_o=l(),Vp=a("li"),gse=a("strong"),r_o=o("marian"),t_o=o(" \u2014 "),XI=a("a"),a_o=o("MarianModel"),n_o=o(" (Marian model)"),s_o=l(),Xp=a("li"),hse=a("strong"),l_o=o("maskformer"),i_o=o(" \u2014 "),zI=a("a"),d_o=o("MaskFormerModel"),c_o=o(" (MaskFormer model)"),f_o=l(),zp=a("li"),pse=a("strong"),m_o=o("mbart"),g_o=o(" \u2014 "),WI=a("a"),h_o=o("MBartModel"),p_o=o(" (mBART model)"),u_o=l(),Wp=a("li"),use=a("strong"),__o=o("megatron-bert"),b_o=o(" \u2014 "),QI=a("a"),v_o=o("MegatronBertModel"),F_o=o(" (MegatronBert model)"),T_o=l(),Qp=a("li"),_se=a("strong"),M_o=o("mobilebert"),E_o=o(" \u2014 "),HI=a("a"),C_o=o("MobileBertModel"),w_o=o(" (MobileBERT model)"),A_o=l(),Hp=a("li"),bse=a("strong"),y_o=o("mpnet"),L_o=o(" \u2014 "),UI=a("a"),x_o=o("MPNetModel"),$_o=o(" (MPNet model)"),k_o=l(),Up=a("li"),vse=a("strong"),S_o=o("mt5"),R_o=o(" \u2014 "),JI=a("a"),P_o=o("MT5Model"),B_o=o(" (mT5 model)"),I_o=l(),Jp=a("li"),Fse=a("strong"),q_o=o("nystromformer"),N_o=o(" \u2014 "),YI=a("a"),j_o=o("NystromformerModel"),D_o=o(" (Nystromformer model)"),G_o=l(),Yp=a("li"),Tse=a("strong"),O_o=o("openai-gpt"),V_o=o(" \u2014 "),KI=a("a"),X_o=o("OpenAIGPTModel"),z_o=o(" (OpenAI GPT model)"),W_o=l(),Kp=a("li"),Mse=a("strong"),Q_o=o("opt"),H_o=o(" \u2014 "),ZI=a("a"),U_o=o("OPTModel"),J_o=o(" (OPT model)"),Y_o=l(),Zp=a("li"),Ese=a("strong"),K_o=o("pegasus"),Z_o=o(" \u2014 "),eq=a("a"),e1o=o("PegasusModel"),o1o=o(" (Pegasus model)"),r1o=l(),eu=a("li"),Cse=a("strong"),t1o=o("perceiver"),a1o=o(" \u2014 "),oq=a("a"),n1o=o("PerceiverModel"),s1o=o(" (Perceiver model)"),l1o=l(),ou=a("li"),wse=a("strong"),i1o=o("plbart"),d1o=o(" \u2014 "),rq=a("a"),c1o=o("PLBartModel"),f1o=o(" (PLBart model)"),m1o=l(),ru=a("li"),Ase=a("strong"),g1o=o("poolformer"),h1o=o(" \u2014 "),tq=a("a"),p1o=o("PoolFormerModel"),u1o=o(" (PoolFormer model)"),_1o=l(),tu=a("li"),yse=a("strong"),b1o=o("prophetnet"),v1o=o(" \u2014 "),aq=a("a"),F1o=o("ProphetNetModel"),T1o=o(" (ProphetNet model)"),M1o=l(),au=a("li"),Lse=a("strong"),E1o=o("qdqbert"),C1o=o(" \u2014 "),nq=a("a"),w1o=o("QDQBertModel"),A1o=o(" (QDQBert model)"),y1o=l(),nu=a("li"),xse=a("strong"),L1o=o("reformer"),x1o=o(" \u2014 "),sq=a("a"),$1o=o("ReformerModel"),k1o=o(" (Reformer model)"),S1o=l(),su=a("li"),$se=a("strong"),R1o=o("regnet"),P1o=o(" \u2014 "),lq=a("a"),B1o=o("RegNetModel"),I1o=o(" (RegNet model)"),q1o=l(),lu=a("li"),kse=a("strong"),N1o=o("rembert"),j1o=o(" \u2014 "),iq=a("a"),D1o=o("RemBertModel"),G1o=o(" (RemBERT model)"),O1o=l(),iu=a("li"),Sse=a("strong"),V1o=o("resnet"),X1o=o(" \u2014 "),dq=a("a"),z1o=o("ResNetModel"),W1o=o(" (ResNet model)"),Q1o=l(),du=a("li"),Rse=a("strong"),H1o=o("retribert"),U1o=o(" \u2014 "),cq=a("a"),J1o=o("RetriBertModel"),Y1o=o(" (RetriBERT model)"),K1o=l(),cu=a("li"),Pse=a("strong"),Z1o=o("roberta"),e2o=o(" \u2014 "),fq=a("a"),o2o=o("RobertaModel"),r2o=o(" (RoBERTa model)"),t2o=l(),fu=a("li"),Bse=a("strong"),a2o=o("roformer"),n2o=o(" \u2014 "),mq=a("a"),s2o=o("RoFormerModel"),l2o=o(" (RoFormer model)"),i2o=l(),mu=a("li"),Ise=a("strong"),d2o=o("segformer"),c2o=o(" \u2014 "),gq=a("a"),f2o=o("SegformerModel"),m2o=o(" (SegFormer model)"),g2o=l(),gu=a("li"),qse=a("strong"),h2o=o("sew"),p2o=o(" \u2014 "),hq=a("a"),u2o=o("SEWModel"),_2o=o(" (SEW model)"),b2o=l(),hu=a("li"),Nse=a("strong"),v2o=o("sew-d"),F2o=o(" \u2014 "),pq=a("a"),T2o=o("SEWDModel"),M2o=o(" (SEW-D model)"),E2o=l(),pu=a("li"),jse=a("strong"),C2o=o("speech_to_text"),w2o=o(" \u2014 "),uq=a("a"),A2o=o("Speech2TextModel"),y2o=o(" (Speech2Text model)"),L2o=l(),uu=a("li"),Dse=a("strong"),x2o=o("splinter"),$2o=o(" \u2014 "),_q=a("a"),k2o=o("SplinterModel"),S2o=o(" (Splinter model)"),R2o=l(),_u=a("li"),Gse=a("strong"),P2o=o("squeezebert"),B2o=o(" \u2014 "),bq=a("a"),I2o=o("SqueezeBertModel"),q2o=o(" (SqueezeBERT model)"),N2o=l(),bu=a("li"),Ose=a("strong"),j2o=o("swin"),D2o=o(" \u2014 "),vq=a("a"),G2o=o("SwinModel"),O2o=o(" (Swin model)"),V2o=l(),vu=a("li"),Vse=a("strong"),X2o=o("t5"),z2o=o(" \u2014 "),Fq=a("a"),W2o=o("T5Model"),Q2o=o(" (T5 model)"),H2o=l(),Fu=a("li"),Xse=a("strong"),U2o=o("tapas"),J2o=o(" \u2014 "),Tq=a("a"),Y2o=o("TapasModel"),K2o=o(" (TAPAS model)"),Z2o=l(),Tu=a("li"),zse=a("strong"),ebo=o("transfo-xl"),obo=o(" \u2014 "),Mq=a("a"),rbo=o("TransfoXLModel"),tbo=o(" (Transformer-XL model)"),abo=l(),Mu=a("li"),Wse=a("strong"),nbo=o("unispeech"),sbo=o(" \u2014 "),Eq=a("a"),lbo=o("UniSpeechModel"),ibo=o(" (UniSpeech model)"),dbo=l(),Eu=a("li"),Qse=a("strong"),cbo=o("unispeech-sat"),fbo=o(" \u2014 "),Cq=a("a"),mbo=o("UniSpeechSatModel"),gbo=o(" (UniSpeechSat model)"),hbo=l(),Cu=a("li"),Hse=a("strong"),pbo=o("van"),ubo=o(" \u2014 "),wq=a("a"),_bo=o("VanModel"),bbo=o(" (VAN model)"),vbo=l(),wu=a("li"),Use=a("strong"),Fbo=o("vilt"),Tbo=o(" \u2014 "),Aq=a("a"),Mbo=o("ViltModel"),Ebo=o(" (ViLT model)"),Cbo=l(),Au=a("li"),Jse=a("strong"),wbo=o("vision-text-dual-encoder"),Abo=o(" \u2014 "),yq=a("a"),ybo=o("VisionTextDualEncoderModel"),Lbo=o(" (VisionTextDualEncoder model)"),xbo=l(),yu=a("li"),Yse=a("strong"),$bo=o("visual_bert"),kbo=o(" \u2014 "),Lq=a("a"),Sbo=o("VisualBertModel"),Rbo=o(" (VisualBert model)"),Pbo=l(),Lu=a("li"),Kse=a("strong"),Bbo=o("vit"),Ibo=o(" \u2014 "),xq=a("a"),qbo=o("ViTModel"),Nbo=o(" (ViT model)"),jbo=l(),xu=a("li"),Zse=a("strong"),Dbo=o("vit_mae"),Gbo=o(" \u2014 "),$q=a("a"),Obo=o("ViTMAEModel"),Vbo=o(" (ViTMAE model)"),Xbo=l(),$u=a("li"),ele=a("strong"),zbo=o("wav2vec2"),Wbo=o(" \u2014 "),kq=a("a"),Qbo=o("Wav2Vec2Model"),Hbo=o(" (Wav2Vec2 model)"),Ubo=l(),ku=a("li"),ole=a("strong"),Jbo=o("wav2vec2-conformer"),Ybo=o(" \u2014 "),Sq=a("a"),Kbo=o("Wav2Vec2ConformerModel"),Zbo=o(" (Wav2Vec2-Conformer model)"),evo=l(),Su=a("li"),rle=a("strong"),ovo=o("wavlm"),rvo=o(" \u2014 "),Rq=a("a"),tvo=o("WavLMModel"),avo=o(" (WavLM model)"),nvo=l(),Ru=a("li"),tle=a("strong"),svo=o("xglm"),lvo=o(" \u2014 "),Pq=a("a"),ivo=o("XGLMModel"),dvo=o(" (XGLM model)"),cvo=l(),Pu=a("li"),ale=a("strong"),fvo=o("xlm"),mvo=o(" \u2014 "),Bq=a("a"),gvo=o("XLMModel"),hvo=o(" (XLM model)"),pvo=l(),Bu=a("li"),nle=a("strong"),uvo=o("xlm-prophetnet"),_vo=o(" \u2014 "),Iq=a("a"),bvo=o("XLMProphetNetModel"),vvo=o(" (XLMProphetNet model)"),Fvo=l(),Iu=a("li"),sle=a("strong"),Tvo=o("xlm-roberta"),Mvo=o(" \u2014 "),qq=a("a"),Evo=o("XLMRobertaModel"),Cvo=o(" (XLM-RoBERTa model)"),wvo=l(),qu=a("li"),lle=a("strong"),Avo=o("xlm-roberta-xl"),yvo=o(" \u2014 "),Nq=a("a"),Lvo=o("XLMRobertaXLModel"),xvo=o(" (XLM-RoBERTa-XL model)"),$vo=l(),Nu=a("li"),ile=a("strong"),kvo=o("xlnet"),Svo=o(" \u2014 "),jq=a("a"),Rvo=o("XLNetModel"),Pvo=o(" (XLNet model)"),Bvo=l(),ju=a("li"),dle=a("strong"),Ivo=o("yolos"),qvo=o(" \u2014 "),Dq=a("a"),Nvo=o("YolosModel"),jvo=o(" (YOLOS model)"),Dvo=l(),Du=a("li"),cle=a("strong"),Gvo=o("yoso"),Ovo=o(" \u2014 "),Gq=a("a"),Vvo=o("YosoModel"),Xvo=o(" (YOSO model)"),zvo=l(),Gu=a("p"),Wvo=o("The model is set in evaluation mode by default using "),fle=a("code"),Qvo=o("model.eval()"),Hvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=a("code"),Uvo=o("model.train()"),Jvo=l(),F(Ou.$$.fragment),SIe=l(),Ai=a("h2"),Vu=a("a"),gle=a("span"),F(B0.$$.fragment),Yvo=l(),hle=a("span"),Kvo=o("AutoModelForPreTraining"),RIe=l(),xo=a("div"),F(I0.$$.fragment),Zvo=l(),yi=a("p"),eFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oq=a("a"),oFo=o("from_pretrained()"),rFo=o(" class method or the "),Vq=a("a"),tFo=o("from_config()"),aFo=o(` class
method.`),nFo=l(),q0=a("p"),sFo=o("This class cannot be instantiated directly using "),ple=a("code"),lFo=o("__init__()"),iFo=o(" (throws an error)."),dFo=l(),at=a("div"),F(N0.$$.fragment),cFo=l(),ule=a("p"),fFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mFo=l(),Li=a("p"),gFo=o(`Note:
Loading a model from its configuration file does `),_le=a("strong"),hFo=o("not"),pFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=a("a"),uFo=o("from_pretrained()"),_Fo=o(" to load the model weights."),bFo=l(),F(Xu.$$.fragment),vFo=l(),Ye=a("div"),F(j0.$$.fragment),FFo=l(),ble=a("p"),TFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MFo=l(),xa=a("p"),EFo=o("The model class to instantiate is selected based on the "),vle=a("code"),CFo=o("model_type"),wFo=o(` property of the config object (either
passed as an argument or loaded from `),Fle=a("code"),AFo=o("pretrained_model_name_or_path"),yFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=a("code"),LFo=o("pretrained_model_name_or_path"),xFo=o(":"),$Fo=l(),G=a("ul"),zu=a("li"),Mle=a("strong"),kFo=o("albert"),SFo=o(" \u2014 "),zq=a("a"),RFo=o("AlbertForPreTraining"),PFo=o(" (ALBERT model)"),BFo=l(),Wu=a("li"),Ele=a("strong"),IFo=o("bart"),qFo=o(" \u2014 "),Wq=a("a"),NFo=o("BartForConditionalGeneration"),jFo=o(" (BART model)"),DFo=l(),Qu=a("li"),Cle=a("strong"),GFo=o("bert"),OFo=o(" \u2014 "),Qq=a("a"),VFo=o("BertForPreTraining"),XFo=o(" (BERT model)"),zFo=l(),Hu=a("li"),wle=a("strong"),WFo=o("big_bird"),QFo=o(" \u2014 "),Hq=a("a"),HFo=o("BigBirdForPreTraining"),UFo=o(" (BigBird model)"),JFo=l(),Uu=a("li"),Ale=a("strong"),YFo=o("camembert"),KFo=o(" \u2014 "),Uq=a("a"),ZFo=o("CamembertForMaskedLM"),e6o=o(" (CamemBERT model)"),o6o=l(),Ju=a("li"),yle=a("strong"),r6o=o("ctrl"),t6o=o(" \u2014 "),Jq=a("a"),a6o=o("CTRLLMHeadModel"),n6o=o(" (CTRL model)"),s6o=l(),Yu=a("li"),Lle=a("strong"),l6o=o("data2vec-text"),i6o=o(" \u2014 "),Yq=a("a"),d6o=o("Data2VecTextForMaskedLM"),c6o=o(" (Data2VecText model)"),f6o=l(),Ku=a("li"),xle=a("strong"),m6o=o("deberta"),g6o=o(" \u2014 "),Kq=a("a"),h6o=o("DebertaForMaskedLM"),p6o=o(" (DeBERTa model)"),u6o=l(),Zu=a("li"),$le=a("strong"),_6o=o("deberta-v2"),b6o=o(" \u2014 "),Zq=a("a"),v6o=o("DebertaV2ForMaskedLM"),F6o=o(" (DeBERTa-v2 model)"),T6o=l(),e_=a("li"),kle=a("strong"),M6o=o("distilbert"),E6o=o(" \u2014 "),eN=a("a"),C6o=o("DistilBertForMaskedLM"),w6o=o(" (DistilBERT model)"),A6o=l(),o_=a("li"),Sle=a("strong"),y6o=o("electra"),L6o=o(" \u2014 "),oN=a("a"),x6o=o("ElectraForPreTraining"),$6o=o(" (ELECTRA model)"),k6o=l(),r_=a("li"),Rle=a("strong"),S6o=o("flaubert"),R6o=o(" \u2014 "),rN=a("a"),P6o=o("FlaubertWithLMHeadModel"),B6o=o(" (FlauBERT model)"),I6o=l(),t_=a("li"),Ple=a("strong"),q6o=o("flava"),N6o=o(" \u2014 "),tN=a("a"),j6o=o("FlavaForPreTraining"),D6o=o(" (Flava model)"),G6o=l(),a_=a("li"),Ble=a("strong"),O6o=o("fnet"),V6o=o(" \u2014 "),aN=a("a"),X6o=o("FNetForPreTraining"),z6o=o(" (FNet model)"),W6o=l(),n_=a("li"),Ile=a("strong"),Q6o=o("fsmt"),H6o=o(" \u2014 "),nN=a("a"),U6o=o("FSMTForConditionalGeneration"),J6o=o(" (FairSeq Machine-Translation model)"),Y6o=l(),s_=a("li"),qle=a("strong"),K6o=o("funnel"),Z6o=o(" \u2014 "),sN=a("a"),eTo=o("FunnelForPreTraining"),oTo=o(" (Funnel Transformer model)"),rTo=l(),l_=a("li"),Nle=a("strong"),tTo=o("gpt2"),aTo=o(" \u2014 "),lN=a("a"),nTo=o("GPT2LMHeadModel"),sTo=o(" (OpenAI GPT-2 model)"),lTo=l(),i_=a("li"),jle=a("strong"),iTo=o("ibert"),dTo=o(" \u2014 "),iN=a("a"),cTo=o("IBertForMaskedLM"),fTo=o(" (I-BERT model)"),mTo=l(),d_=a("li"),Dle=a("strong"),gTo=o("layoutlm"),hTo=o(" \u2014 "),dN=a("a"),pTo=o("LayoutLMForMaskedLM"),uTo=o(" (LayoutLM model)"),_To=l(),c_=a("li"),Gle=a("strong"),bTo=o("longformer"),vTo=o(" \u2014 "),cN=a("a"),FTo=o("LongformerForMaskedLM"),TTo=o(" (Longformer model)"),MTo=l(),f_=a("li"),Ole=a("strong"),ETo=o("lxmert"),CTo=o(" \u2014 "),fN=a("a"),wTo=o("LxmertForPreTraining"),ATo=o(" (LXMERT model)"),yTo=l(),m_=a("li"),Vle=a("strong"),LTo=o("megatron-bert"),xTo=o(" \u2014 "),mN=a("a"),$To=o("MegatronBertForPreTraining"),kTo=o(" (MegatronBert model)"),STo=l(),g_=a("li"),Xle=a("strong"),RTo=o("mobilebert"),PTo=o(" \u2014 "),gN=a("a"),BTo=o("MobileBertForPreTraining"),ITo=o(" (MobileBERT model)"),qTo=l(),h_=a("li"),zle=a("strong"),NTo=o("mpnet"),jTo=o(" \u2014 "),hN=a("a"),DTo=o("MPNetForMaskedLM"),GTo=o(" (MPNet model)"),OTo=l(),p_=a("li"),Wle=a("strong"),VTo=o("openai-gpt"),XTo=o(" \u2014 "),pN=a("a"),zTo=o("OpenAIGPTLMHeadModel"),WTo=o(" (OpenAI GPT model)"),QTo=l(),u_=a("li"),Qle=a("strong"),HTo=o("retribert"),UTo=o(" \u2014 "),uN=a("a"),JTo=o("RetriBertModel"),YTo=o(" (RetriBERT model)"),KTo=l(),__=a("li"),Hle=a("strong"),ZTo=o("roberta"),e8o=o(" \u2014 "),_N=a("a"),o8o=o("RobertaForMaskedLM"),r8o=o(" (RoBERTa model)"),t8o=l(),b_=a("li"),Ule=a("strong"),a8o=o("squeezebert"),n8o=o(" \u2014 "),bN=a("a"),s8o=o("SqueezeBertForMaskedLM"),l8o=o(" (SqueezeBERT model)"),i8o=l(),v_=a("li"),Jle=a("strong"),d8o=o("t5"),c8o=o(" \u2014 "),vN=a("a"),f8o=o("T5ForConditionalGeneration"),m8o=o(" (T5 model)"),g8o=l(),F_=a("li"),Yle=a("strong"),h8o=o("tapas"),p8o=o(" \u2014 "),FN=a("a"),u8o=o("TapasForMaskedLM"),_8o=o(" (TAPAS model)"),b8o=l(),T_=a("li"),Kle=a("strong"),v8o=o("transfo-xl"),F8o=o(" \u2014 "),TN=a("a"),T8o=o("TransfoXLLMHeadModel"),M8o=o(" (Transformer-XL model)"),E8o=l(),M_=a("li"),Zle=a("strong"),C8o=o("unispeech"),w8o=o(" \u2014 "),MN=a("a"),A8o=o("UniSpeechForPreTraining"),y8o=o(" (UniSpeech model)"),L8o=l(),E_=a("li"),eie=a("strong"),x8o=o("unispeech-sat"),$8o=o(" \u2014 "),EN=a("a"),k8o=o("UniSpeechSatForPreTraining"),S8o=o(" (UniSpeechSat model)"),R8o=l(),C_=a("li"),oie=a("strong"),P8o=o("visual_bert"),B8o=o(" \u2014 "),CN=a("a"),I8o=o("VisualBertForPreTraining"),q8o=o(" (VisualBert model)"),N8o=l(),w_=a("li"),rie=a("strong"),j8o=o("vit_mae"),D8o=o(" \u2014 "),wN=a("a"),G8o=o("ViTMAEForPreTraining"),O8o=o(" (ViTMAE model)"),V8o=l(),A_=a("li"),tie=a("strong"),X8o=o("wav2vec2"),z8o=o(" \u2014 "),AN=a("a"),W8o=o("Wav2Vec2ForPreTraining"),Q8o=o(" (Wav2Vec2 model)"),H8o=l(),y_=a("li"),aie=a("strong"),U8o=o("wav2vec2-conformer"),J8o=o(" \u2014 "),yN=a("a"),Y8o=o("Wav2Vec2ConformerForPreTraining"),K8o=o(" (Wav2Vec2-Conformer model)"),Z8o=l(),L_=a("li"),nie=a("strong"),eMo=o("xlm"),oMo=o(" \u2014 "),LN=a("a"),rMo=o("XLMWithLMHeadModel"),tMo=o(" (XLM model)"),aMo=l(),x_=a("li"),sie=a("strong"),nMo=o("xlm-roberta"),sMo=o(" \u2014 "),xN=a("a"),lMo=o("XLMRobertaForMaskedLM"),iMo=o(" (XLM-RoBERTa model)"),dMo=l(),$_=a("li"),lie=a("strong"),cMo=o("xlm-roberta-xl"),fMo=o(" \u2014 "),$N=a("a"),mMo=o("XLMRobertaXLForMaskedLM"),gMo=o(" (XLM-RoBERTa-XL model)"),hMo=l(),k_=a("li"),iie=a("strong"),pMo=o("xlnet"),uMo=o(" \u2014 "),kN=a("a"),_Mo=o("XLNetLMHeadModel"),bMo=o(" (XLNet model)"),vMo=l(),S_=a("p"),FMo=o("The model is set in evaluation mode by default using "),die=a("code"),TMo=o("model.eval()"),MMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=a("code"),EMo=o("model.train()"),CMo=l(),F(R_.$$.fragment),PIe=l(),xi=a("h2"),P_=a("a"),fie=a("span"),F(D0.$$.fragment),wMo=l(),mie=a("span"),AMo=o("AutoModelForCausalLM"),BIe=l(),$o=a("div"),F(G0.$$.fragment),yMo=l(),$i=a("p"),LMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SN=a("a"),xMo=o("from_pretrained()"),$Mo=o(" class method or the "),RN=a("a"),kMo=o("from_config()"),SMo=o(` class
method.`),RMo=l(),O0=a("p"),PMo=o("This class cannot be instantiated directly using "),gie=a("code"),BMo=o("__init__()"),IMo=o(" (throws an error)."),qMo=l(),nt=a("div"),F(V0.$$.fragment),NMo=l(),hie=a("p"),jMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DMo=l(),ki=a("p"),GMo=o(`Note:
Loading a model from its configuration file does `),pie=a("strong"),OMo=o("not"),VMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PN=a("a"),XMo=o("from_pretrained()"),zMo=o(" to load the model weights."),WMo=l(),F(B_.$$.fragment),QMo=l(),Ke=a("div"),F(X0.$$.fragment),HMo=l(),uie=a("p"),UMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JMo=l(),$a=a("p"),YMo=o("The model class to instantiate is selected based on the "),_ie=a("code"),KMo=o("model_type"),ZMo=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),e4o=o("pretrained_model_name_or_path"),o4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=a("code"),r4o=o("pretrained_model_name_or_path"),t4o=o(":"),a4o=l(),z=a("ul"),I_=a("li"),Fie=a("strong"),n4o=o("bart"),s4o=o(" \u2014 "),BN=a("a"),l4o=o("BartForCausalLM"),i4o=o(" (BART model)"),d4o=l(),q_=a("li"),Tie=a("strong"),c4o=o("bert"),f4o=o(" \u2014 "),IN=a("a"),m4o=o("BertLMHeadModel"),g4o=o(" (BERT model)"),h4o=l(),N_=a("li"),Mie=a("strong"),p4o=o("bert-generation"),u4o=o(" \u2014 "),qN=a("a"),_4o=o("BertGenerationDecoder"),b4o=o(" (Bert Generation model)"),v4o=l(),j_=a("li"),Eie=a("strong"),F4o=o("big_bird"),T4o=o(" \u2014 "),NN=a("a"),M4o=o("BigBirdForCausalLM"),E4o=o(" (BigBird model)"),C4o=l(),D_=a("li"),Cie=a("strong"),w4o=o("bigbird_pegasus"),A4o=o(" \u2014 "),jN=a("a"),y4o=o("BigBirdPegasusForCausalLM"),L4o=o(" (BigBirdPegasus model)"),x4o=l(),G_=a("li"),wie=a("strong"),$4o=o("blenderbot"),k4o=o(" \u2014 "),DN=a("a"),S4o=o("BlenderbotForCausalLM"),R4o=o(" (Blenderbot model)"),P4o=l(),O_=a("li"),Aie=a("strong"),B4o=o("blenderbot-small"),I4o=o(" \u2014 "),GN=a("a"),q4o=o("BlenderbotSmallForCausalLM"),N4o=o(" (BlenderbotSmall model)"),j4o=l(),V_=a("li"),yie=a("strong"),D4o=o("camembert"),G4o=o(" \u2014 "),ON=a("a"),O4o=o("CamembertForCausalLM"),V4o=o(" (CamemBERT model)"),X4o=l(),X_=a("li"),Lie=a("strong"),z4o=o("ctrl"),W4o=o(" \u2014 "),VN=a("a"),Q4o=o("CTRLLMHeadModel"),H4o=o(" (CTRL model)"),U4o=l(),z_=a("li"),xie=a("strong"),J4o=o("data2vec-text"),Y4o=o(" \u2014 "),XN=a("a"),K4o=o("Data2VecTextForCausalLM"),Z4o=o(" (Data2VecText model)"),eEo=l(),W_=a("li"),$ie=a("strong"),oEo=o("electra"),rEo=o(" \u2014 "),zN=a("a"),tEo=o("ElectraForCausalLM"),aEo=o(" (ELECTRA model)"),nEo=l(),Q_=a("li"),kie=a("strong"),sEo=o("gpt2"),lEo=o(" \u2014 "),WN=a("a"),iEo=o("GPT2LMHeadModel"),dEo=o(" (OpenAI GPT-2 model)"),cEo=l(),H_=a("li"),Sie=a("strong"),fEo=o("gpt_neo"),mEo=o(" \u2014 "),QN=a("a"),gEo=o("GPTNeoForCausalLM"),hEo=o(" (GPT Neo model)"),pEo=l(),U_=a("li"),Rie=a("strong"),uEo=o("gptj"),_Eo=o(" \u2014 "),HN=a("a"),bEo=o("GPTJForCausalLM"),vEo=o(" (GPT-J model)"),FEo=l(),J_=a("li"),Pie=a("strong"),TEo=o("marian"),MEo=o(" \u2014 "),UN=a("a"),EEo=o("MarianForCausalLM"),CEo=o(" (Marian model)"),wEo=l(),Y_=a("li"),Bie=a("strong"),AEo=o("mbart"),yEo=o(" \u2014 "),JN=a("a"),LEo=o("MBartForCausalLM"),xEo=o(" (mBART model)"),$Eo=l(),K_=a("li"),Iie=a("strong"),kEo=o("megatron-bert"),SEo=o(" \u2014 "),YN=a("a"),REo=o("MegatronBertForCausalLM"),PEo=o(" (MegatronBert model)"),BEo=l(),Z_=a("li"),qie=a("strong"),IEo=o("openai-gpt"),qEo=o(" \u2014 "),KN=a("a"),NEo=o("OpenAIGPTLMHeadModel"),jEo=o(" (OpenAI GPT model)"),DEo=l(),e1=a("li"),Nie=a("strong"),GEo=o("opt"),OEo=o(" \u2014 "),ZN=a("a"),VEo=o("OPTForCausalLM"),XEo=o(" (OPT model)"),zEo=l(),o1=a("li"),jie=a("strong"),WEo=o("pegasus"),QEo=o(" \u2014 "),ej=a("a"),HEo=o("PegasusForCausalLM"),UEo=o(" (Pegasus model)"),JEo=l(),r1=a("li"),Die=a("strong"),YEo=o("plbart"),KEo=o(" \u2014 "),oj=a("a"),ZEo=o("PLBartForCausalLM"),eCo=o(" (PLBart model)"),oCo=l(),t1=a("li"),Gie=a("strong"),rCo=o("prophetnet"),tCo=o(" \u2014 "),rj=a("a"),aCo=o("ProphetNetForCausalLM"),nCo=o(" (ProphetNet model)"),sCo=l(),a1=a("li"),Oie=a("strong"),lCo=o("qdqbert"),iCo=o(" \u2014 "),tj=a("a"),dCo=o("QDQBertLMHeadModel"),cCo=o(" (QDQBert model)"),fCo=l(),n1=a("li"),Vie=a("strong"),mCo=o("reformer"),gCo=o(" \u2014 "),aj=a("a"),hCo=o("ReformerModelWithLMHead"),pCo=o(" (Reformer model)"),uCo=l(),s1=a("li"),Xie=a("strong"),_Co=o("rembert"),bCo=o(" \u2014 "),nj=a("a"),vCo=o("RemBertForCausalLM"),FCo=o(" (RemBERT model)"),TCo=l(),l1=a("li"),zie=a("strong"),MCo=o("roberta"),ECo=o(" \u2014 "),sj=a("a"),CCo=o("RobertaForCausalLM"),wCo=o(" (RoBERTa model)"),ACo=l(),i1=a("li"),Wie=a("strong"),yCo=o("roformer"),LCo=o(" \u2014 "),lj=a("a"),xCo=o("RoFormerForCausalLM"),$Co=o(" (RoFormer model)"),kCo=l(),d1=a("li"),Qie=a("strong"),SCo=o("speech_to_text_2"),RCo=o(" \u2014 "),ij=a("a"),PCo=o("Speech2Text2ForCausalLM"),BCo=o(" (Speech2Text2 model)"),ICo=l(),c1=a("li"),Hie=a("strong"),qCo=o("transfo-xl"),NCo=o(" \u2014 "),dj=a("a"),jCo=o("TransfoXLLMHeadModel"),DCo=o(" (Transformer-XL model)"),GCo=l(),f1=a("li"),Uie=a("strong"),OCo=o("trocr"),VCo=o(" \u2014 "),cj=a("a"),XCo=o("TrOCRForCausalLM"),zCo=o(" (TrOCR model)"),WCo=l(),m1=a("li"),Jie=a("strong"),QCo=o("xglm"),HCo=o(" \u2014 "),fj=a("a"),UCo=o("XGLMForCausalLM"),JCo=o(" (XGLM model)"),YCo=l(),g1=a("li"),Yie=a("strong"),KCo=o("xlm"),ZCo=o(" \u2014 "),mj=a("a"),e5o=o("XLMWithLMHeadModel"),o5o=o(" (XLM model)"),r5o=l(),h1=a("li"),Kie=a("strong"),t5o=o("xlm-prophetnet"),a5o=o(" \u2014 "),gj=a("a"),n5o=o("XLMProphetNetForCausalLM"),s5o=o(" (XLMProphetNet model)"),l5o=l(),p1=a("li"),Zie=a("strong"),i5o=o("xlm-roberta"),d5o=o(" \u2014 "),hj=a("a"),c5o=o("XLMRobertaForCausalLM"),f5o=o(" (XLM-RoBERTa model)"),m5o=l(),u1=a("li"),ede=a("strong"),g5o=o("xlm-roberta-xl"),h5o=o(" \u2014 "),pj=a("a"),p5o=o("XLMRobertaXLForCausalLM"),u5o=o(" (XLM-RoBERTa-XL model)"),_5o=l(),_1=a("li"),ode=a("strong"),b5o=o("xlnet"),v5o=o(" \u2014 "),uj=a("a"),F5o=o("XLNetLMHeadModel"),T5o=o(" (XLNet model)"),M5o=l(),b1=a("p"),E5o=o("The model is set in evaluation mode by default using "),rde=a("code"),C5o=o("model.eval()"),w5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=a("code"),A5o=o("model.train()"),y5o=l(),F(v1.$$.fragment),IIe=l(),Si=a("h2"),F1=a("a"),ade=a("span"),F(z0.$$.fragment),L5o=l(),nde=a("span"),x5o=o("AutoModelForMaskedLM"),qIe=l(),ko=a("div"),F(W0.$$.fragment),$5o=l(),Ri=a("p"),k5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_j=a("a"),S5o=o("from_pretrained()"),R5o=o(" class method or the "),bj=a("a"),P5o=o("from_config()"),B5o=o(` class
method.`),I5o=l(),Q0=a("p"),q5o=o("This class cannot be instantiated directly using "),sde=a("code"),N5o=o("__init__()"),j5o=o(" (throws an error)."),D5o=l(),st=a("div"),F(H0.$$.fragment),G5o=l(),lde=a("p"),O5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),V5o=l(),Pi=a("p"),X5o=o(`Note:
Loading a model from its configuration file does `),ide=a("strong"),z5o=o("not"),W5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vj=a("a"),Q5o=o("from_pretrained()"),H5o=o(" to load the model weights."),U5o=l(),F(T1.$$.fragment),J5o=l(),Ze=a("div"),F(U0.$$.fragment),Y5o=l(),dde=a("p"),K5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z5o=l(),ka=a("p"),e3o=o("The model class to instantiate is selected based on the "),cde=a("code"),o3o=o("model_type"),r3o=o(` property of the config object (either
passed as an argument or loaded from `),fde=a("code"),t3o=o("pretrained_model_name_or_path"),a3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=a("code"),n3o=o("pretrained_model_name_or_path"),s3o=o(":"),l3o=l(),W=a("ul"),M1=a("li"),gde=a("strong"),i3o=o("albert"),d3o=o(" \u2014 "),Fj=a("a"),c3o=o("AlbertForMaskedLM"),f3o=o(" (ALBERT model)"),m3o=l(),E1=a("li"),hde=a("strong"),g3o=o("bart"),h3o=o(" \u2014 "),Tj=a("a"),p3o=o("BartForConditionalGeneration"),u3o=o(" (BART model)"),_3o=l(),C1=a("li"),pde=a("strong"),b3o=o("bert"),v3o=o(" \u2014 "),Mj=a("a"),F3o=o("BertForMaskedLM"),T3o=o(" (BERT model)"),M3o=l(),w1=a("li"),ude=a("strong"),E3o=o("big_bird"),C3o=o(" \u2014 "),Ej=a("a"),w3o=o("BigBirdForMaskedLM"),A3o=o(" (BigBird model)"),y3o=l(),A1=a("li"),_de=a("strong"),L3o=o("camembert"),x3o=o(" \u2014 "),Cj=a("a"),$3o=o("CamembertForMaskedLM"),k3o=o(" (CamemBERT model)"),S3o=l(),y1=a("li"),bde=a("strong"),R3o=o("convbert"),P3o=o(" \u2014 "),wj=a("a"),B3o=o("ConvBertForMaskedLM"),I3o=o(" (ConvBERT model)"),q3o=l(),L1=a("li"),vde=a("strong"),N3o=o("data2vec-text"),j3o=o(" \u2014 "),Aj=a("a"),D3o=o("Data2VecTextForMaskedLM"),G3o=o(" (Data2VecText model)"),O3o=l(),x1=a("li"),Fde=a("strong"),V3o=o("deberta"),X3o=o(" \u2014 "),yj=a("a"),z3o=o("DebertaForMaskedLM"),W3o=o(" (DeBERTa model)"),Q3o=l(),$1=a("li"),Tde=a("strong"),H3o=o("deberta-v2"),U3o=o(" \u2014 "),Lj=a("a"),J3o=o("DebertaV2ForMaskedLM"),Y3o=o(" (DeBERTa-v2 model)"),K3o=l(),k1=a("li"),Mde=a("strong"),Z3o=o("distilbert"),ewo=o(" \u2014 "),xj=a("a"),owo=o("DistilBertForMaskedLM"),rwo=o(" (DistilBERT model)"),two=l(),S1=a("li"),Ede=a("strong"),awo=o("electra"),nwo=o(" \u2014 "),$j=a("a"),swo=o("ElectraForMaskedLM"),lwo=o(" (ELECTRA model)"),iwo=l(),R1=a("li"),Cde=a("strong"),dwo=o("flaubert"),cwo=o(" \u2014 "),kj=a("a"),fwo=o("FlaubertWithLMHeadModel"),mwo=o(" (FlauBERT model)"),gwo=l(),P1=a("li"),wde=a("strong"),hwo=o("fnet"),pwo=o(" \u2014 "),Sj=a("a"),uwo=o("FNetForMaskedLM"),_wo=o(" (FNet model)"),bwo=l(),B1=a("li"),Ade=a("strong"),vwo=o("funnel"),Fwo=o(" \u2014 "),Rj=a("a"),Two=o("FunnelForMaskedLM"),Mwo=o(" (Funnel Transformer model)"),Ewo=l(),I1=a("li"),yde=a("strong"),Cwo=o("ibert"),wwo=o(" \u2014 "),Pj=a("a"),Awo=o("IBertForMaskedLM"),ywo=o(" (I-BERT model)"),Lwo=l(),q1=a("li"),Lde=a("strong"),xwo=o("layoutlm"),$wo=o(" \u2014 "),Bj=a("a"),kwo=o("LayoutLMForMaskedLM"),Swo=o(" (LayoutLM model)"),Rwo=l(),N1=a("li"),xde=a("strong"),Pwo=o("longformer"),Bwo=o(" \u2014 "),Ij=a("a"),Iwo=o("LongformerForMaskedLM"),qwo=o(" (Longformer model)"),Nwo=l(),j1=a("li"),$de=a("strong"),jwo=o("mbart"),Dwo=o(" \u2014 "),qj=a("a"),Gwo=o("MBartForConditionalGeneration"),Owo=o(" (mBART model)"),Vwo=l(),D1=a("li"),kde=a("strong"),Xwo=o("megatron-bert"),zwo=o(" \u2014 "),Nj=a("a"),Wwo=o("MegatronBertForMaskedLM"),Qwo=o(" (MegatronBert model)"),Hwo=l(),G1=a("li"),Sde=a("strong"),Uwo=o("mobilebert"),Jwo=o(" \u2014 "),jj=a("a"),Ywo=o("MobileBertForMaskedLM"),Kwo=o(" (MobileBERT model)"),Zwo=l(),O1=a("li"),Rde=a("strong"),eAo=o("mpnet"),oAo=o(" \u2014 "),Dj=a("a"),rAo=o("MPNetForMaskedLM"),tAo=o(" (MPNet model)"),aAo=l(),V1=a("li"),Pde=a("strong"),nAo=o("nystromformer"),sAo=o(" \u2014 "),Gj=a("a"),lAo=o("NystromformerForMaskedLM"),iAo=o(" (Nystromformer model)"),dAo=l(),X1=a("li"),Bde=a("strong"),cAo=o("perceiver"),fAo=o(" \u2014 "),Oj=a("a"),mAo=o("PerceiverForMaskedLM"),gAo=o(" (Perceiver model)"),hAo=l(),z1=a("li"),Ide=a("strong"),pAo=o("qdqbert"),uAo=o(" \u2014 "),Vj=a("a"),_Ao=o("QDQBertForMaskedLM"),bAo=o(" (QDQBert model)"),vAo=l(),W1=a("li"),qde=a("strong"),FAo=o("reformer"),TAo=o(" \u2014 "),Xj=a("a"),MAo=o("ReformerForMaskedLM"),EAo=o(" (Reformer model)"),CAo=l(),Q1=a("li"),Nde=a("strong"),wAo=o("rembert"),AAo=o(" \u2014 "),zj=a("a"),yAo=o("RemBertForMaskedLM"),LAo=o(" (RemBERT model)"),xAo=l(),H1=a("li"),jde=a("strong"),$Ao=o("roberta"),kAo=o(" \u2014 "),Wj=a("a"),SAo=o("RobertaForMaskedLM"),RAo=o(" (RoBERTa model)"),PAo=l(),U1=a("li"),Dde=a("strong"),BAo=o("roformer"),IAo=o(" \u2014 "),Qj=a("a"),qAo=o("RoFormerForMaskedLM"),NAo=o(" (RoFormer model)"),jAo=l(),J1=a("li"),Gde=a("strong"),DAo=o("squeezebert"),GAo=o(" \u2014 "),Hj=a("a"),OAo=o("SqueezeBertForMaskedLM"),VAo=o(" (SqueezeBERT model)"),XAo=l(),Y1=a("li"),Ode=a("strong"),zAo=o("tapas"),WAo=o(" \u2014 "),Uj=a("a"),QAo=o("TapasForMaskedLM"),HAo=o(" (TAPAS model)"),UAo=l(),K1=a("li"),Vde=a("strong"),JAo=o("wav2vec2"),YAo=o(" \u2014 "),Xde=a("code"),KAo=o("Wav2Vec2ForMaskedLM"),ZAo=o(" (Wav2Vec2 model)"),e0o=l(),Z1=a("li"),zde=a("strong"),o0o=o("xlm"),r0o=o(" \u2014 "),Jj=a("a"),t0o=o("XLMWithLMHeadModel"),a0o=o(" (XLM model)"),n0o=l(),e2=a("li"),Wde=a("strong"),s0o=o("xlm-roberta"),l0o=o(" \u2014 "),Yj=a("a"),i0o=o("XLMRobertaForMaskedLM"),d0o=o(" (XLM-RoBERTa model)"),c0o=l(),o2=a("li"),Qde=a("strong"),f0o=o("xlm-roberta-xl"),m0o=o(" \u2014 "),Kj=a("a"),g0o=o("XLMRobertaXLForMaskedLM"),h0o=o(" (XLM-RoBERTa-XL model)"),p0o=l(),r2=a("li"),Hde=a("strong"),u0o=o("yoso"),_0o=o(" \u2014 "),Zj=a("a"),b0o=o("YosoForMaskedLM"),v0o=o(" (YOSO model)"),F0o=l(),t2=a("p"),T0o=o("The model is set in evaluation mode by default using "),Ude=a("code"),M0o=o("model.eval()"),E0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),C0o=o("model.train()"),w0o=l(),F(a2.$$.fragment),NIe=l(),Bi=a("h2"),n2=a("a"),Yde=a("span"),F(J0.$$.fragment),A0o=l(),Kde=a("span"),y0o=o("AutoModelForSeq2SeqLM"),jIe=l(),So=a("div"),F(Y0.$$.fragment),L0o=l(),Ii=a("p"),x0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eD=a("a"),$0o=o("from_pretrained()"),k0o=o(" class method or the "),oD=a("a"),S0o=o("from_config()"),R0o=o(` class
method.`),P0o=l(),K0=a("p"),B0o=o("This class cannot be instantiated directly using "),Zde=a("code"),I0o=o("__init__()"),q0o=o(" (throws an error)."),N0o=l(),lt=a("div"),F(Z0.$$.fragment),j0o=l(),ece=a("p"),D0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G0o=l(),qi=a("p"),O0o=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),V0o=o("not"),X0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),z0o=o("from_pretrained()"),W0o=o(" to load the model weights."),Q0o=l(),F(s2.$$.fragment),H0o=l(),eo=a("div"),F(ey.$$.fragment),U0o=l(),rce=a("p"),J0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y0o=l(),Sa=a("p"),K0o=o("The model class to instantiate is selected based on the "),tce=a("code"),Z0o=o("model_type"),eyo=o(` property of the config object (either
passed as an argument or loaded from `),ace=a("code"),oyo=o("pretrained_model_name_or_path"),ryo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=a("code"),tyo=o("pretrained_model_name_or_path"),ayo=o(":"),nyo=l(),ue=a("ul"),l2=a("li"),sce=a("strong"),syo=o("bart"),lyo=o(" \u2014 "),tD=a("a"),iyo=o("BartForConditionalGeneration"),dyo=o(" (BART model)"),cyo=l(),i2=a("li"),lce=a("strong"),fyo=o("bigbird_pegasus"),myo=o(" \u2014 "),aD=a("a"),gyo=o("BigBirdPegasusForConditionalGeneration"),hyo=o(" (BigBirdPegasus model)"),pyo=l(),d2=a("li"),ice=a("strong"),uyo=o("blenderbot"),_yo=o(" \u2014 "),nD=a("a"),byo=o("BlenderbotForConditionalGeneration"),vyo=o(" (Blenderbot model)"),Fyo=l(),c2=a("li"),dce=a("strong"),Tyo=o("blenderbot-small"),Myo=o(" \u2014 "),sD=a("a"),Eyo=o("BlenderbotSmallForConditionalGeneration"),Cyo=o(" (BlenderbotSmall model)"),wyo=l(),f2=a("li"),cce=a("strong"),Ayo=o("encoder-decoder"),yyo=o(" \u2014 "),lD=a("a"),Lyo=o("EncoderDecoderModel"),xyo=o(" (Encoder decoder model)"),$yo=l(),m2=a("li"),fce=a("strong"),kyo=o("fsmt"),Syo=o(" \u2014 "),iD=a("a"),Ryo=o("FSMTForConditionalGeneration"),Pyo=o(" (FairSeq Machine-Translation model)"),Byo=l(),g2=a("li"),mce=a("strong"),Iyo=o("led"),qyo=o(" \u2014 "),dD=a("a"),Nyo=o("LEDForConditionalGeneration"),jyo=o(" (LED model)"),Dyo=l(),h2=a("li"),gce=a("strong"),Gyo=o("m2m_100"),Oyo=o(" \u2014 "),cD=a("a"),Vyo=o("M2M100ForConditionalGeneration"),Xyo=o(" (M2M100 model)"),zyo=l(),p2=a("li"),hce=a("strong"),Wyo=o("marian"),Qyo=o(" \u2014 "),fD=a("a"),Hyo=o("MarianMTModel"),Uyo=o(" (Marian model)"),Jyo=l(),u2=a("li"),pce=a("strong"),Yyo=o("mbart"),Kyo=o(" \u2014 "),mD=a("a"),Zyo=o("MBartForConditionalGeneration"),eLo=o(" (mBART model)"),oLo=l(),_2=a("li"),uce=a("strong"),rLo=o("mt5"),tLo=o(" \u2014 "),gD=a("a"),aLo=o("MT5ForConditionalGeneration"),nLo=o(" (mT5 model)"),sLo=l(),b2=a("li"),_ce=a("strong"),lLo=o("pegasus"),iLo=o(" \u2014 "),hD=a("a"),dLo=o("PegasusForConditionalGeneration"),cLo=o(" (Pegasus model)"),fLo=l(),v2=a("li"),bce=a("strong"),mLo=o("plbart"),gLo=o(" \u2014 "),pD=a("a"),hLo=o("PLBartForConditionalGeneration"),pLo=o(" (PLBart model)"),uLo=l(),F2=a("li"),vce=a("strong"),_Lo=o("prophetnet"),bLo=o(" \u2014 "),uD=a("a"),vLo=o("ProphetNetForConditionalGeneration"),FLo=o(" (ProphetNet model)"),TLo=l(),T2=a("li"),Fce=a("strong"),MLo=o("t5"),ELo=o(" \u2014 "),_D=a("a"),CLo=o("T5ForConditionalGeneration"),wLo=o(" (T5 model)"),ALo=l(),M2=a("li"),Tce=a("strong"),yLo=o("xlm-prophetnet"),LLo=o(" \u2014 "),bD=a("a"),xLo=o("XLMProphetNetForConditionalGeneration"),$Lo=o(" (XLMProphetNet model)"),kLo=l(),E2=a("p"),SLo=o("The model is set in evaluation mode by default using "),Mce=a("code"),RLo=o("model.eval()"),PLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),BLo=o("model.train()"),ILo=l(),F(C2.$$.fragment),DIe=l(),Ni=a("h2"),w2=a("a"),Cce=a("span"),F(oy.$$.fragment),qLo=l(),wce=a("span"),NLo=o("AutoModelForSequenceClassification"),GIe=l(),Ro=a("div"),F(ry.$$.fragment),jLo=l(),ji=a("p"),DLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vD=a("a"),GLo=o("from_pretrained()"),OLo=o(" class method or the "),FD=a("a"),VLo=o("from_config()"),XLo=o(` class
method.`),zLo=l(),ty=a("p"),WLo=o("This class cannot be instantiated directly using "),Ace=a("code"),QLo=o("__init__()"),HLo=o(" (throws an error)."),ULo=l(),it=a("div"),F(ay.$$.fragment),JLo=l(),yce=a("p"),YLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KLo=l(),Di=a("p"),ZLo=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),exo=o("not"),oxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TD=a("a"),rxo=o("from_pretrained()"),txo=o(" to load the model weights."),axo=l(),F(A2.$$.fragment),nxo=l(),oo=a("div"),F(ny.$$.fragment),sxo=l(),xce=a("p"),lxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ixo=l(),Ra=a("p"),dxo=o("The model class to instantiate is selected based on the "),$ce=a("code"),cxo=o("model_type"),fxo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),mxo=o("pretrained_model_name_or_path"),gxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),hxo=o("pretrained_model_name_or_path"),pxo=o(":"),uxo=l(),q=a("ul"),y2=a("li"),Rce=a("strong"),_xo=o("albert"),bxo=o(" \u2014 "),MD=a("a"),vxo=o("AlbertForSequenceClassification"),Fxo=o(" (ALBERT model)"),Txo=l(),L2=a("li"),Pce=a("strong"),Mxo=o("bart"),Exo=o(" \u2014 "),ED=a("a"),Cxo=o("BartForSequenceClassification"),wxo=o(" (BART model)"),Axo=l(),x2=a("li"),Bce=a("strong"),yxo=o("bert"),Lxo=o(" \u2014 "),CD=a("a"),xxo=o("BertForSequenceClassification"),$xo=o(" (BERT model)"),kxo=l(),$2=a("li"),Ice=a("strong"),Sxo=o("big_bird"),Rxo=o(" \u2014 "),wD=a("a"),Pxo=o("BigBirdForSequenceClassification"),Bxo=o(" (BigBird model)"),Ixo=l(),k2=a("li"),qce=a("strong"),qxo=o("bigbird_pegasus"),Nxo=o(" \u2014 "),AD=a("a"),jxo=o("BigBirdPegasusForSequenceClassification"),Dxo=o(" (BigBirdPegasus model)"),Gxo=l(),S2=a("li"),Nce=a("strong"),Oxo=o("camembert"),Vxo=o(" \u2014 "),yD=a("a"),Xxo=o("CamembertForSequenceClassification"),zxo=o(" (CamemBERT model)"),Wxo=l(),R2=a("li"),jce=a("strong"),Qxo=o("canine"),Hxo=o(" \u2014 "),LD=a("a"),Uxo=o("CanineForSequenceClassification"),Jxo=o(" (Canine model)"),Yxo=l(),P2=a("li"),Dce=a("strong"),Kxo=o("convbert"),Zxo=o(" \u2014 "),xD=a("a"),e9o=o("ConvBertForSequenceClassification"),o9o=o(" (ConvBERT model)"),r9o=l(),B2=a("li"),Gce=a("strong"),t9o=o("ctrl"),a9o=o(" \u2014 "),$D=a("a"),n9o=o("CTRLForSequenceClassification"),s9o=o(" (CTRL model)"),l9o=l(),I2=a("li"),Oce=a("strong"),i9o=o("data2vec-text"),d9o=o(" \u2014 "),kD=a("a"),c9o=o("Data2VecTextForSequenceClassification"),f9o=o(" (Data2VecText model)"),m9o=l(),q2=a("li"),Vce=a("strong"),g9o=o("deberta"),h9o=o(" \u2014 "),SD=a("a"),p9o=o("DebertaForSequenceClassification"),u9o=o(" (DeBERTa model)"),_9o=l(),N2=a("li"),Xce=a("strong"),b9o=o("deberta-v2"),v9o=o(" \u2014 "),RD=a("a"),F9o=o("DebertaV2ForSequenceClassification"),T9o=o(" (DeBERTa-v2 model)"),M9o=l(),j2=a("li"),zce=a("strong"),E9o=o("distilbert"),C9o=o(" \u2014 "),PD=a("a"),w9o=o("DistilBertForSequenceClassification"),A9o=o(" (DistilBERT model)"),y9o=l(),D2=a("li"),Wce=a("strong"),L9o=o("electra"),x9o=o(" \u2014 "),BD=a("a"),$9o=o("ElectraForSequenceClassification"),k9o=o(" (ELECTRA model)"),S9o=l(),G2=a("li"),Qce=a("strong"),R9o=o("flaubert"),P9o=o(" \u2014 "),ID=a("a"),B9o=o("FlaubertForSequenceClassification"),I9o=o(" (FlauBERT model)"),q9o=l(),O2=a("li"),Hce=a("strong"),N9o=o("fnet"),j9o=o(" \u2014 "),qD=a("a"),D9o=o("FNetForSequenceClassification"),G9o=o(" (FNet model)"),O9o=l(),V2=a("li"),Uce=a("strong"),V9o=o("funnel"),X9o=o(" \u2014 "),ND=a("a"),z9o=o("FunnelForSequenceClassification"),W9o=o(" (Funnel Transformer model)"),Q9o=l(),X2=a("li"),Jce=a("strong"),H9o=o("gpt2"),U9o=o(" \u2014 "),jD=a("a"),J9o=o("GPT2ForSequenceClassification"),Y9o=o(" (OpenAI GPT-2 model)"),K9o=l(),z2=a("li"),Yce=a("strong"),Z9o=o("gpt_neo"),e7o=o(" \u2014 "),DD=a("a"),o7o=o("GPTNeoForSequenceClassification"),r7o=o(" (GPT Neo model)"),t7o=l(),W2=a("li"),Kce=a("strong"),a7o=o("gptj"),n7o=o(" \u2014 "),GD=a("a"),s7o=o("GPTJForSequenceClassification"),l7o=o(" (GPT-J model)"),i7o=l(),Q2=a("li"),Zce=a("strong"),d7o=o("ibert"),c7o=o(" \u2014 "),OD=a("a"),f7o=o("IBertForSequenceClassification"),m7o=o(" (I-BERT model)"),g7o=l(),H2=a("li"),efe=a("strong"),h7o=o("layoutlm"),p7o=o(" \u2014 "),VD=a("a"),u7o=o("LayoutLMForSequenceClassification"),_7o=o(" (LayoutLM model)"),b7o=l(),U2=a("li"),ofe=a("strong"),v7o=o("layoutlmv2"),F7o=o(" \u2014 "),XD=a("a"),T7o=o("LayoutLMv2ForSequenceClassification"),M7o=o(" (LayoutLMv2 model)"),E7o=l(),J2=a("li"),rfe=a("strong"),C7o=o("led"),w7o=o(" \u2014 "),zD=a("a"),A7o=o("LEDForSequenceClassification"),y7o=o(" (LED model)"),L7o=l(),Y2=a("li"),tfe=a("strong"),x7o=o("longformer"),$7o=o(" \u2014 "),WD=a("a"),k7o=o("LongformerForSequenceClassification"),S7o=o(" (Longformer model)"),R7o=l(),K2=a("li"),afe=a("strong"),P7o=o("mbart"),B7o=o(" \u2014 "),QD=a("a"),I7o=o("MBartForSequenceClassification"),q7o=o(" (mBART model)"),N7o=l(),Z2=a("li"),nfe=a("strong"),j7o=o("megatron-bert"),D7o=o(" \u2014 "),HD=a("a"),G7o=o("MegatronBertForSequenceClassification"),O7o=o(" (MegatronBert model)"),V7o=l(),eb=a("li"),sfe=a("strong"),X7o=o("mobilebert"),z7o=o(" \u2014 "),UD=a("a"),W7o=o("MobileBertForSequenceClassification"),Q7o=o(" (MobileBERT model)"),H7o=l(),ob=a("li"),lfe=a("strong"),U7o=o("mpnet"),J7o=o(" \u2014 "),JD=a("a"),Y7o=o("MPNetForSequenceClassification"),K7o=o(" (MPNet model)"),Z7o=l(),rb=a("li"),ife=a("strong"),e$o=o("nystromformer"),o$o=o(" \u2014 "),YD=a("a"),r$o=o("NystromformerForSequenceClassification"),t$o=o(" (Nystromformer model)"),a$o=l(),tb=a("li"),dfe=a("strong"),n$o=o("openai-gpt"),s$o=o(" \u2014 "),KD=a("a"),l$o=o("OpenAIGPTForSequenceClassification"),i$o=o(" (OpenAI GPT model)"),d$o=l(),ab=a("li"),cfe=a("strong"),c$o=o("perceiver"),f$o=o(" \u2014 "),ZD=a("a"),m$o=o("PerceiverForSequenceClassification"),g$o=o(" (Perceiver model)"),h$o=l(),nb=a("li"),ffe=a("strong"),p$o=o("plbart"),u$o=o(" \u2014 "),eG=a("a"),_$o=o("PLBartForSequenceClassification"),b$o=o(" (PLBart model)"),v$o=l(),sb=a("li"),mfe=a("strong"),F$o=o("qdqbert"),T$o=o(" \u2014 "),oG=a("a"),M$o=o("QDQBertForSequenceClassification"),E$o=o(" (QDQBert model)"),C$o=l(),lb=a("li"),gfe=a("strong"),w$o=o("reformer"),A$o=o(" \u2014 "),rG=a("a"),y$o=o("ReformerForSequenceClassification"),L$o=o(" (Reformer model)"),x$o=l(),ib=a("li"),hfe=a("strong"),$$o=o("rembert"),k$o=o(" \u2014 "),tG=a("a"),S$o=o("RemBertForSequenceClassification"),R$o=o(" (RemBERT model)"),P$o=l(),db=a("li"),pfe=a("strong"),B$o=o("roberta"),I$o=o(" \u2014 "),aG=a("a"),q$o=o("RobertaForSequenceClassification"),N$o=o(" (RoBERTa model)"),j$o=l(),cb=a("li"),ufe=a("strong"),D$o=o("roformer"),G$o=o(" \u2014 "),nG=a("a"),O$o=o("RoFormerForSequenceClassification"),V$o=o(" (RoFormer model)"),X$o=l(),fb=a("li"),_fe=a("strong"),z$o=o("squeezebert"),W$o=o(" \u2014 "),sG=a("a"),Q$o=o("SqueezeBertForSequenceClassification"),H$o=o(" (SqueezeBERT model)"),U$o=l(),mb=a("li"),bfe=a("strong"),J$o=o("tapas"),Y$o=o(" \u2014 "),lG=a("a"),K$o=o("TapasForSequenceClassification"),Z$o=o(" (TAPAS model)"),eko=l(),gb=a("li"),vfe=a("strong"),oko=o("transfo-xl"),rko=o(" \u2014 "),iG=a("a"),tko=o("TransfoXLForSequenceClassification"),ako=o(" (Transformer-XL model)"),nko=l(),hb=a("li"),Ffe=a("strong"),sko=o("xlm"),lko=o(" \u2014 "),dG=a("a"),iko=o("XLMForSequenceClassification"),dko=o(" (XLM model)"),cko=l(),pb=a("li"),Tfe=a("strong"),fko=o("xlm-roberta"),mko=o(" \u2014 "),cG=a("a"),gko=o("XLMRobertaForSequenceClassification"),hko=o(" (XLM-RoBERTa model)"),pko=l(),ub=a("li"),Mfe=a("strong"),uko=o("xlm-roberta-xl"),_ko=o(" \u2014 "),fG=a("a"),bko=o("XLMRobertaXLForSequenceClassification"),vko=o(" (XLM-RoBERTa-XL model)"),Fko=l(),_b=a("li"),Efe=a("strong"),Tko=o("xlnet"),Mko=o(" \u2014 "),mG=a("a"),Eko=o("XLNetForSequenceClassification"),Cko=o(" (XLNet model)"),wko=l(),bb=a("li"),Cfe=a("strong"),Ako=o("yoso"),yko=o(" \u2014 "),gG=a("a"),Lko=o("YosoForSequenceClassification"),xko=o(" (YOSO model)"),$ko=l(),vb=a("p"),kko=o("The model is set in evaluation mode by default using "),wfe=a("code"),Sko=o("model.eval()"),Rko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=a("code"),Pko=o("model.train()"),Bko=l(),F(Fb.$$.fragment),OIe=l(),Gi=a("h2"),Tb=a("a"),yfe=a("span"),F(sy.$$.fragment),Iko=l(),Lfe=a("span"),qko=o("AutoModelForMultipleChoice"),VIe=l(),Po=a("div"),F(ly.$$.fragment),Nko=l(),Oi=a("p"),jko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hG=a("a"),Dko=o("from_pretrained()"),Gko=o(" class method or the "),pG=a("a"),Oko=o("from_config()"),Vko=o(` class
method.`),Xko=l(),iy=a("p"),zko=o("This class cannot be instantiated directly using "),xfe=a("code"),Wko=o("__init__()"),Qko=o(" (throws an error)."),Hko=l(),dt=a("div"),F(dy.$$.fragment),Uko=l(),$fe=a("p"),Jko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Yko=l(),Vi=a("p"),Kko=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),Zko=o("not"),eSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=a("a"),oSo=o("from_pretrained()"),rSo=o(" to load the model weights."),tSo=l(),F(Mb.$$.fragment),aSo=l(),ro=a("div"),F(cy.$$.fragment),nSo=l(),Sfe=a("p"),sSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lSo=l(),Pa=a("p"),iSo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),dSo=o("model_type"),cSo=o(` property of the config object (either
passed as an argument or loaded from `),Pfe=a("code"),fSo=o("pretrained_model_name_or_path"),mSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),gSo=o("pretrained_model_name_or_path"),hSo=o(":"),pSo=l(),Y=a("ul"),Eb=a("li"),Ife=a("strong"),uSo=o("albert"),_So=o(" \u2014 "),_G=a("a"),bSo=o("AlbertForMultipleChoice"),vSo=o(" (ALBERT model)"),FSo=l(),Cb=a("li"),qfe=a("strong"),TSo=o("bert"),MSo=o(" \u2014 "),bG=a("a"),ESo=o("BertForMultipleChoice"),CSo=o(" (BERT model)"),wSo=l(),wb=a("li"),Nfe=a("strong"),ASo=o("big_bird"),ySo=o(" \u2014 "),vG=a("a"),LSo=o("BigBirdForMultipleChoice"),xSo=o(" (BigBird model)"),$So=l(),Ab=a("li"),jfe=a("strong"),kSo=o("camembert"),SSo=o(" \u2014 "),FG=a("a"),RSo=o("CamembertForMultipleChoice"),PSo=o(" (CamemBERT model)"),BSo=l(),yb=a("li"),Dfe=a("strong"),ISo=o("canine"),qSo=o(" \u2014 "),TG=a("a"),NSo=o("CanineForMultipleChoice"),jSo=o(" (Canine model)"),DSo=l(),Lb=a("li"),Gfe=a("strong"),GSo=o("convbert"),OSo=o(" \u2014 "),MG=a("a"),VSo=o("ConvBertForMultipleChoice"),XSo=o(" (ConvBERT model)"),zSo=l(),xb=a("li"),Ofe=a("strong"),WSo=o("data2vec-text"),QSo=o(" \u2014 "),EG=a("a"),HSo=o("Data2VecTextForMultipleChoice"),USo=o(" (Data2VecText model)"),JSo=l(),$b=a("li"),Vfe=a("strong"),YSo=o("deberta-v2"),KSo=o(" \u2014 "),CG=a("a"),ZSo=o("DebertaV2ForMultipleChoice"),eRo=o(" (DeBERTa-v2 model)"),oRo=l(),kb=a("li"),Xfe=a("strong"),rRo=o("distilbert"),tRo=o(" \u2014 "),wG=a("a"),aRo=o("DistilBertForMultipleChoice"),nRo=o(" (DistilBERT model)"),sRo=l(),Sb=a("li"),zfe=a("strong"),lRo=o("electra"),iRo=o(" \u2014 "),AG=a("a"),dRo=o("ElectraForMultipleChoice"),cRo=o(" (ELECTRA model)"),fRo=l(),Rb=a("li"),Wfe=a("strong"),mRo=o("flaubert"),gRo=o(" \u2014 "),yG=a("a"),hRo=o("FlaubertForMultipleChoice"),pRo=o(" (FlauBERT model)"),uRo=l(),Pb=a("li"),Qfe=a("strong"),_Ro=o("fnet"),bRo=o(" \u2014 "),LG=a("a"),vRo=o("FNetForMultipleChoice"),FRo=o(" (FNet model)"),TRo=l(),Bb=a("li"),Hfe=a("strong"),MRo=o("funnel"),ERo=o(" \u2014 "),xG=a("a"),CRo=o("FunnelForMultipleChoice"),wRo=o(" (Funnel Transformer model)"),ARo=l(),Ib=a("li"),Ufe=a("strong"),yRo=o("ibert"),LRo=o(" \u2014 "),$G=a("a"),xRo=o("IBertForMultipleChoice"),$Ro=o(" (I-BERT model)"),kRo=l(),qb=a("li"),Jfe=a("strong"),SRo=o("longformer"),RRo=o(" \u2014 "),kG=a("a"),PRo=o("LongformerForMultipleChoice"),BRo=o(" (Longformer model)"),IRo=l(),Nb=a("li"),Yfe=a("strong"),qRo=o("megatron-bert"),NRo=o(" \u2014 "),SG=a("a"),jRo=o("MegatronBertForMultipleChoice"),DRo=o(" (MegatronBert model)"),GRo=l(),jb=a("li"),Kfe=a("strong"),ORo=o("mobilebert"),VRo=o(" \u2014 "),RG=a("a"),XRo=o("MobileBertForMultipleChoice"),zRo=o(" (MobileBERT model)"),WRo=l(),Db=a("li"),Zfe=a("strong"),QRo=o("mpnet"),HRo=o(" \u2014 "),PG=a("a"),URo=o("MPNetForMultipleChoice"),JRo=o(" (MPNet model)"),YRo=l(),Gb=a("li"),eme=a("strong"),KRo=o("nystromformer"),ZRo=o(" \u2014 "),BG=a("a"),ePo=o("NystromformerForMultipleChoice"),oPo=o(" (Nystromformer model)"),rPo=l(),Ob=a("li"),ome=a("strong"),tPo=o("qdqbert"),aPo=o(" \u2014 "),IG=a("a"),nPo=o("QDQBertForMultipleChoice"),sPo=o(" (QDQBert model)"),lPo=l(),Vb=a("li"),rme=a("strong"),iPo=o("rembert"),dPo=o(" \u2014 "),qG=a("a"),cPo=o("RemBertForMultipleChoice"),fPo=o(" (RemBERT model)"),mPo=l(),Xb=a("li"),tme=a("strong"),gPo=o("roberta"),hPo=o(" \u2014 "),NG=a("a"),pPo=o("RobertaForMultipleChoice"),uPo=o(" (RoBERTa model)"),_Po=l(),zb=a("li"),ame=a("strong"),bPo=o("roformer"),vPo=o(" \u2014 "),jG=a("a"),FPo=o("RoFormerForMultipleChoice"),TPo=o(" (RoFormer model)"),MPo=l(),Wb=a("li"),nme=a("strong"),EPo=o("squeezebert"),CPo=o(" \u2014 "),DG=a("a"),wPo=o("SqueezeBertForMultipleChoice"),APo=o(" (SqueezeBERT model)"),yPo=l(),Qb=a("li"),sme=a("strong"),LPo=o("xlm"),xPo=o(" \u2014 "),GG=a("a"),$Po=o("XLMForMultipleChoice"),kPo=o(" (XLM model)"),SPo=l(),Hb=a("li"),lme=a("strong"),RPo=o("xlm-roberta"),PPo=o(" \u2014 "),OG=a("a"),BPo=o("XLMRobertaForMultipleChoice"),IPo=o(" (XLM-RoBERTa model)"),qPo=l(),Ub=a("li"),ime=a("strong"),NPo=o("xlm-roberta-xl"),jPo=o(" \u2014 "),VG=a("a"),DPo=o("XLMRobertaXLForMultipleChoice"),GPo=o(" (XLM-RoBERTa-XL model)"),OPo=l(),Jb=a("li"),dme=a("strong"),VPo=o("xlnet"),XPo=o(" \u2014 "),XG=a("a"),zPo=o("XLNetForMultipleChoice"),WPo=o(" (XLNet model)"),QPo=l(),Yb=a("li"),cme=a("strong"),HPo=o("yoso"),UPo=o(" \u2014 "),zG=a("a"),JPo=o("YosoForMultipleChoice"),YPo=o(" (YOSO model)"),KPo=l(),Kb=a("p"),ZPo=o("The model is set in evaluation mode by default using "),fme=a("code"),eBo=o("model.eval()"),oBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=a("code"),rBo=o("model.train()"),tBo=l(),F(Zb.$$.fragment),XIe=l(),Xi=a("h2"),ev=a("a"),gme=a("span"),F(fy.$$.fragment),aBo=l(),hme=a("span"),nBo=o("AutoModelForNextSentencePrediction"),zIe=l(),Bo=a("div"),F(my.$$.fragment),sBo=l(),zi=a("p"),lBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WG=a("a"),iBo=o("from_pretrained()"),dBo=o(" class method or the "),QG=a("a"),cBo=o("from_config()"),fBo=o(` class
method.`),mBo=l(),gy=a("p"),gBo=o("This class cannot be instantiated directly using "),pme=a("code"),hBo=o("__init__()"),pBo=o(" (throws an error)."),uBo=l(),ct=a("div"),F(hy.$$.fragment),_Bo=l(),ume=a("p"),bBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vBo=l(),Wi=a("p"),FBo=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),TBo=o("not"),MBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),EBo=o("from_pretrained()"),CBo=o(" to load the model weights."),wBo=l(),F(ov.$$.fragment),ABo=l(),to=a("div"),F(py.$$.fragment),yBo=l(),bme=a("p"),LBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xBo=l(),Ba=a("p"),$Bo=o("The model class to instantiate is selected based on the "),vme=a("code"),kBo=o("model_type"),SBo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),RBo=o("pretrained_model_name_or_path"),PBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),BBo=o("pretrained_model_name_or_path"),IBo=o(":"),qBo=l(),Yr=a("ul"),rv=a("li"),Mme=a("strong"),NBo=o("bert"),jBo=o(" \u2014 "),UG=a("a"),DBo=o("BertForNextSentencePrediction"),GBo=o(" (BERT model)"),OBo=l(),tv=a("li"),Eme=a("strong"),VBo=o("fnet"),XBo=o(" \u2014 "),JG=a("a"),zBo=o("FNetForNextSentencePrediction"),WBo=o(" (FNet model)"),QBo=l(),av=a("li"),Cme=a("strong"),HBo=o("megatron-bert"),UBo=o(" \u2014 "),YG=a("a"),JBo=o("MegatronBertForNextSentencePrediction"),YBo=o(" (MegatronBert model)"),KBo=l(),nv=a("li"),wme=a("strong"),ZBo=o("mobilebert"),eIo=o(" \u2014 "),KG=a("a"),oIo=o("MobileBertForNextSentencePrediction"),rIo=o(" (MobileBERT model)"),tIo=l(),sv=a("li"),Ame=a("strong"),aIo=o("qdqbert"),nIo=o(" \u2014 "),ZG=a("a"),sIo=o("QDQBertForNextSentencePrediction"),lIo=o(" (QDQBert model)"),iIo=l(),lv=a("p"),dIo=o("The model is set in evaluation mode by default using "),yme=a("code"),cIo=o("model.eval()"),fIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),mIo=o("model.train()"),gIo=l(),F(iv.$$.fragment),WIe=l(),Qi=a("h2"),dv=a("a"),xme=a("span"),F(uy.$$.fragment),hIo=l(),$me=a("span"),pIo=o("AutoModelForTokenClassification"),QIe=l(),Io=a("div"),F(_y.$$.fragment),uIo=l(),Hi=a("p"),_Io=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eO=a("a"),bIo=o("from_pretrained()"),vIo=o(" class method or the "),oO=a("a"),FIo=o("from_config()"),TIo=o(` class
method.`),MIo=l(),by=a("p"),EIo=o("This class cannot be instantiated directly using "),kme=a("code"),CIo=o("__init__()"),wIo=o(" (throws an error)."),AIo=l(),ft=a("div"),F(vy.$$.fragment),yIo=l(),Sme=a("p"),LIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xIo=l(),Ui=a("p"),$Io=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),kIo=o("not"),SIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),RIo=o("from_pretrained()"),PIo=o(" to load the model weights."),BIo=l(),F(cv.$$.fragment),IIo=l(),ao=a("div"),F(Fy.$$.fragment),qIo=l(),Pme=a("p"),NIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jIo=l(),Ia=a("p"),DIo=o("The model class to instantiate is selected based on the "),Bme=a("code"),GIo=o("model_type"),OIo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),VIo=o("pretrained_model_name_or_path"),XIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),zIo=o("pretrained_model_name_or_path"),WIo=o(":"),QIo=l(),U=a("ul"),fv=a("li"),Nme=a("strong"),HIo=o("albert"),UIo=o(" \u2014 "),tO=a("a"),JIo=o("AlbertForTokenClassification"),YIo=o(" (ALBERT model)"),KIo=l(),mv=a("li"),jme=a("strong"),ZIo=o("bert"),eqo=o(" \u2014 "),aO=a("a"),oqo=o("BertForTokenClassification"),rqo=o(" (BERT model)"),tqo=l(),gv=a("li"),Dme=a("strong"),aqo=o("big_bird"),nqo=o(" \u2014 "),nO=a("a"),sqo=o("BigBirdForTokenClassification"),lqo=o(" (BigBird model)"),iqo=l(),hv=a("li"),Gme=a("strong"),dqo=o("camembert"),cqo=o(" \u2014 "),sO=a("a"),fqo=o("CamembertForTokenClassification"),mqo=o(" (CamemBERT model)"),gqo=l(),pv=a("li"),Ome=a("strong"),hqo=o("canine"),pqo=o(" \u2014 "),lO=a("a"),uqo=o("CanineForTokenClassification"),_qo=o(" (Canine model)"),bqo=l(),uv=a("li"),Vme=a("strong"),vqo=o("convbert"),Fqo=o(" \u2014 "),iO=a("a"),Tqo=o("ConvBertForTokenClassification"),Mqo=o(" (ConvBERT model)"),Eqo=l(),_v=a("li"),Xme=a("strong"),Cqo=o("data2vec-text"),wqo=o(" \u2014 "),dO=a("a"),Aqo=o("Data2VecTextForTokenClassification"),yqo=o(" (Data2VecText model)"),Lqo=l(),bv=a("li"),zme=a("strong"),xqo=o("deberta"),$qo=o(" \u2014 "),cO=a("a"),kqo=o("DebertaForTokenClassification"),Sqo=o(" (DeBERTa model)"),Rqo=l(),vv=a("li"),Wme=a("strong"),Pqo=o("deberta-v2"),Bqo=o(" \u2014 "),fO=a("a"),Iqo=o("DebertaV2ForTokenClassification"),qqo=o(" (DeBERTa-v2 model)"),Nqo=l(),Fv=a("li"),Qme=a("strong"),jqo=o("distilbert"),Dqo=o(" \u2014 "),mO=a("a"),Gqo=o("DistilBertForTokenClassification"),Oqo=o(" (DistilBERT model)"),Vqo=l(),Tv=a("li"),Hme=a("strong"),Xqo=o("electra"),zqo=o(" \u2014 "),gO=a("a"),Wqo=o("ElectraForTokenClassification"),Qqo=o(" (ELECTRA model)"),Hqo=l(),Mv=a("li"),Ume=a("strong"),Uqo=o("flaubert"),Jqo=o(" \u2014 "),hO=a("a"),Yqo=o("FlaubertForTokenClassification"),Kqo=o(" (FlauBERT model)"),Zqo=l(),Ev=a("li"),Jme=a("strong"),eNo=o("fnet"),oNo=o(" \u2014 "),pO=a("a"),rNo=o("FNetForTokenClassification"),tNo=o(" (FNet model)"),aNo=l(),Cv=a("li"),Yme=a("strong"),nNo=o("funnel"),sNo=o(" \u2014 "),uO=a("a"),lNo=o("FunnelForTokenClassification"),iNo=o(" (Funnel Transformer model)"),dNo=l(),wv=a("li"),Kme=a("strong"),cNo=o("gpt2"),fNo=o(" \u2014 "),_O=a("a"),mNo=o("GPT2ForTokenClassification"),gNo=o(" (OpenAI GPT-2 model)"),hNo=l(),Av=a("li"),Zme=a("strong"),pNo=o("ibert"),uNo=o(" \u2014 "),bO=a("a"),_No=o("IBertForTokenClassification"),bNo=o(" (I-BERT model)"),vNo=l(),yv=a("li"),ege=a("strong"),FNo=o("layoutlm"),TNo=o(" \u2014 "),vO=a("a"),MNo=o("LayoutLMForTokenClassification"),ENo=o(" (LayoutLM model)"),CNo=l(),Lv=a("li"),oge=a("strong"),wNo=o("layoutlmv2"),ANo=o(" \u2014 "),FO=a("a"),yNo=o("LayoutLMv2ForTokenClassification"),LNo=o(" (LayoutLMv2 model)"),xNo=l(),xv=a("li"),rge=a("strong"),$No=o("longformer"),kNo=o(" \u2014 "),TO=a("a"),SNo=o("LongformerForTokenClassification"),RNo=o(" (Longformer model)"),PNo=l(),$v=a("li"),tge=a("strong"),BNo=o("megatron-bert"),INo=o(" \u2014 "),MO=a("a"),qNo=o("MegatronBertForTokenClassification"),NNo=o(" (MegatronBert model)"),jNo=l(),kv=a("li"),age=a("strong"),DNo=o("mobilebert"),GNo=o(" \u2014 "),EO=a("a"),ONo=o("MobileBertForTokenClassification"),VNo=o(" (MobileBERT model)"),XNo=l(),Sv=a("li"),nge=a("strong"),zNo=o("mpnet"),WNo=o(" \u2014 "),CO=a("a"),QNo=o("MPNetForTokenClassification"),HNo=o(" (MPNet model)"),UNo=l(),Rv=a("li"),sge=a("strong"),JNo=o("nystromformer"),YNo=o(" \u2014 "),wO=a("a"),KNo=o("NystromformerForTokenClassification"),ZNo=o(" (Nystromformer model)"),ejo=l(),Pv=a("li"),lge=a("strong"),ojo=o("qdqbert"),rjo=o(" \u2014 "),AO=a("a"),tjo=o("QDQBertForTokenClassification"),ajo=o(" (QDQBert model)"),njo=l(),Bv=a("li"),ige=a("strong"),sjo=o("rembert"),ljo=o(" \u2014 "),yO=a("a"),ijo=o("RemBertForTokenClassification"),djo=o(" (RemBERT model)"),cjo=l(),Iv=a("li"),dge=a("strong"),fjo=o("roberta"),mjo=o(" \u2014 "),LO=a("a"),gjo=o("RobertaForTokenClassification"),hjo=o(" (RoBERTa model)"),pjo=l(),qv=a("li"),cge=a("strong"),ujo=o("roformer"),_jo=o(" \u2014 "),xO=a("a"),bjo=o("RoFormerForTokenClassification"),vjo=o(" (RoFormer model)"),Fjo=l(),Nv=a("li"),fge=a("strong"),Tjo=o("squeezebert"),Mjo=o(" \u2014 "),$O=a("a"),Ejo=o("SqueezeBertForTokenClassification"),Cjo=o(" (SqueezeBERT model)"),wjo=l(),jv=a("li"),mge=a("strong"),Ajo=o("xlm"),yjo=o(" \u2014 "),kO=a("a"),Ljo=o("XLMForTokenClassification"),xjo=o(" (XLM model)"),$jo=l(),Dv=a("li"),gge=a("strong"),kjo=o("xlm-roberta"),Sjo=o(" \u2014 "),SO=a("a"),Rjo=o("XLMRobertaForTokenClassification"),Pjo=o(" (XLM-RoBERTa model)"),Bjo=l(),Gv=a("li"),hge=a("strong"),Ijo=o("xlm-roberta-xl"),qjo=o(" \u2014 "),RO=a("a"),Njo=o("XLMRobertaXLForTokenClassification"),jjo=o(" (XLM-RoBERTa-XL model)"),Djo=l(),Ov=a("li"),pge=a("strong"),Gjo=o("xlnet"),Ojo=o(" \u2014 "),PO=a("a"),Vjo=o("XLNetForTokenClassification"),Xjo=o(" (XLNet model)"),zjo=l(),Vv=a("li"),uge=a("strong"),Wjo=o("yoso"),Qjo=o(" \u2014 "),BO=a("a"),Hjo=o("YosoForTokenClassification"),Ujo=o(" (YOSO model)"),Jjo=l(),Xv=a("p"),Yjo=o("The model is set in evaluation mode by default using "),_ge=a("code"),Kjo=o("model.eval()"),Zjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),eDo=o("model.train()"),oDo=l(),F(zv.$$.fragment),HIe=l(),Ji=a("h2"),Wv=a("a"),vge=a("span"),F(Ty.$$.fragment),rDo=l(),Fge=a("span"),tDo=o("AutoModelForQuestionAnswering"),UIe=l(),qo=a("div"),F(My.$$.fragment),aDo=l(),Yi=a("p"),nDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IO=a("a"),sDo=o("from_pretrained()"),lDo=o(" class method or the "),qO=a("a"),iDo=o("from_config()"),dDo=o(` class
method.`),cDo=l(),Ey=a("p"),fDo=o("This class cannot be instantiated directly using "),Tge=a("code"),mDo=o("__init__()"),gDo=o(" (throws an error)."),hDo=l(),mt=a("div"),F(Cy.$$.fragment),pDo=l(),Mge=a("p"),uDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Do=l(),Ki=a("p"),bDo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),vDo=o("not"),FDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),TDo=o("from_pretrained()"),MDo=o(" to load the model weights."),EDo=l(),F(Qv.$$.fragment),CDo=l(),no=a("div"),F(wy.$$.fragment),wDo=l(),Cge=a("p"),ADo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yDo=l(),qa=a("p"),LDo=o("The model class to instantiate is selected based on the "),wge=a("code"),xDo=o("model_type"),$Do=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),kDo=o("pretrained_model_name_or_path"),SDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),RDo=o("pretrained_model_name_or_path"),PDo=o(":"),BDo=l(),V=a("ul"),Hv=a("li"),Lge=a("strong"),IDo=o("albert"),qDo=o(" \u2014 "),jO=a("a"),NDo=o("AlbertForQuestionAnswering"),jDo=o(" (ALBERT model)"),DDo=l(),Uv=a("li"),xge=a("strong"),GDo=o("bart"),ODo=o(" \u2014 "),DO=a("a"),VDo=o("BartForQuestionAnswering"),XDo=o(" (BART model)"),zDo=l(),Jv=a("li"),$ge=a("strong"),WDo=o("bert"),QDo=o(" \u2014 "),GO=a("a"),HDo=o("BertForQuestionAnswering"),UDo=o(" (BERT model)"),JDo=l(),Yv=a("li"),kge=a("strong"),YDo=o("big_bird"),KDo=o(" \u2014 "),OO=a("a"),ZDo=o("BigBirdForQuestionAnswering"),eGo=o(" (BigBird model)"),oGo=l(),Kv=a("li"),Sge=a("strong"),rGo=o("bigbird_pegasus"),tGo=o(" \u2014 "),VO=a("a"),aGo=o("BigBirdPegasusForQuestionAnswering"),nGo=o(" (BigBirdPegasus model)"),sGo=l(),Zv=a("li"),Rge=a("strong"),lGo=o("camembert"),iGo=o(" \u2014 "),XO=a("a"),dGo=o("CamembertForQuestionAnswering"),cGo=o(" (CamemBERT model)"),fGo=l(),eF=a("li"),Pge=a("strong"),mGo=o("canine"),gGo=o(" \u2014 "),zO=a("a"),hGo=o("CanineForQuestionAnswering"),pGo=o(" (Canine model)"),uGo=l(),oF=a("li"),Bge=a("strong"),_Go=o("convbert"),bGo=o(" \u2014 "),WO=a("a"),vGo=o("ConvBertForQuestionAnswering"),FGo=o(" (ConvBERT model)"),TGo=l(),rF=a("li"),Ige=a("strong"),MGo=o("data2vec-text"),EGo=o(" \u2014 "),QO=a("a"),CGo=o("Data2VecTextForQuestionAnswering"),wGo=o(" (Data2VecText model)"),AGo=l(),tF=a("li"),qge=a("strong"),yGo=o("deberta"),LGo=o(" \u2014 "),HO=a("a"),xGo=o("DebertaForQuestionAnswering"),$Go=o(" (DeBERTa model)"),kGo=l(),aF=a("li"),Nge=a("strong"),SGo=o("deberta-v2"),RGo=o(" \u2014 "),UO=a("a"),PGo=o("DebertaV2ForQuestionAnswering"),BGo=o(" (DeBERTa-v2 model)"),IGo=l(),nF=a("li"),jge=a("strong"),qGo=o("distilbert"),NGo=o(" \u2014 "),JO=a("a"),jGo=o("DistilBertForQuestionAnswering"),DGo=o(" (DistilBERT model)"),GGo=l(),sF=a("li"),Dge=a("strong"),OGo=o("electra"),VGo=o(" \u2014 "),YO=a("a"),XGo=o("ElectraForQuestionAnswering"),zGo=o(" (ELECTRA model)"),WGo=l(),lF=a("li"),Gge=a("strong"),QGo=o("flaubert"),HGo=o(" \u2014 "),KO=a("a"),UGo=o("FlaubertForQuestionAnsweringSimple"),JGo=o(" (FlauBERT model)"),YGo=l(),iF=a("li"),Oge=a("strong"),KGo=o("fnet"),ZGo=o(" \u2014 "),ZO=a("a"),eOo=o("FNetForQuestionAnswering"),oOo=o(" (FNet model)"),rOo=l(),dF=a("li"),Vge=a("strong"),tOo=o("funnel"),aOo=o(" \u2014 "),eV=a("a"),nOo=o("FunnelForQuestionAnswering"),sOo=o(" (Funnel Transformer model)"),lOo=l(),cF=a("li"),Xge=a("strong"),iOo=o("gptj"),dOo=o(" \u2014 "),oV=a("a"),cOo=o("GPTJForQuestionAnswering"),fOo=o(" (GPT-J model)"),mOo=l(),fF=a("li"),zge=a("strong"),gOo=o("ibert"),hOo=o(" \u2014 "),rV=a("a"),pOo=o("IBertForQuestionAnswering"),uOo=o(" (I-BERT model)"),_Oo=l(),mF=a("li"),Wge=a("strong"),bOo=o("layoutlmv2"),vOo=o(" \u2014 "),tV=a("a"),FOo=o("LayoutLMv2ForQuestionAnswering"),TOo=o(" (LayoutLMv2 model)"),MOo=l(),gF=a("li"),Qge=a("strong"),EOo=o("led"),COo=o(" \u2014 "),aV=a("a"),wOo=o("LEDForQuestionAnswering"),AOo=o(" (LED model)"),yOo=l(),hF=a("li"),Hge=a("strong"),LOo=o("longformer"),xOo=o(" \u2014 "),nV=a("a"),$Oo=o("LongformerForQuestionAnswering"),kOo=o(" (Longformer model)"),SOo=l(),pF=a("li"),Uge=a("strong"),ROo=o("lxmert"),POo=o(" \u2014 "),sV=a("a"),BOo=o("LxmertForQuestionAnswering"),IOo=o(" (LXMERT model)"),qOo=l(),uF=a("li"),Jge=a("strong"),NOo=o("mbart"),jOo=o(" \u2014 "),lV=a("a"),DOo=o("MBartForQuestionAnswering"),GOo=o(" (mBART model)"),OOo=l(),_F=a("li"),Yge=a("strong"),VOo=o("megatron-bert"),XOo=o(" \u2014 "),iV=a("a"),zOo=o("MegatronBertForQuestionAnswering"),WOo=o(" (MegatronBert model)"),QOo=l(),bF=a("li"),Kge=a("strong"),HOo=o("mobilebert"),UOo=o(" \u2014 "),dV=a("a"),JOo=o("MobileBertForQuestionAnswering"),YOo=o(" (MobileBERT model)"),KOo=l(),vF=a("li"),Zge=a("strong"),ZOo=o("mpnet"),eVo=o(" \u2014 "),cV=a("a"),oVo=o("MPNetForQuestionAnswering"),rVo=o(" (MPNet model)"),tVo=l(),FF=a("li"),ehe=a("strong"),aVo=o("nystromformer"),nVo=o(" \u2014 "),fV=a("a"),sVo=o("NystromformerForQuestionAnswering"),lVo=o(" (Nystromformer model)"),iVo=l(),TF=a("li"),ohe=a("strong"),dVo=o("qdqbert"),cVo=o(" \u2014 "),mV=a("a"),fVo=o("QDQBertForQuestionAnswering"),mVo=o(" (QDQBert model)"),gVo=l(),MF=a("li"),rhe=a("strong"),hVo=o("reformer"),pVo=o(" \u2014 "),gV=a("a"),uVo=o("ReformerForQuestionAnswering"),_Vo=o(" (Reformer model)"),bVo=l(),EF=a("li"),the=a("strong"),vVo=o("rembert"),FVo=o(" \u2014 "),hV=a("a"),TVo=o("RemBertForQuestionAnswering"),MVo=o(" (RemBERT model)"),EVo=l(),CF=a("li"),ahe=a("strong"),CVo=o("roberta"),wVo=o(" \u2014 "),pV=a("a"),AVo=o("RobertaForQuestionAnswering"),yVo=o(" (RoBERTa model)"),LVo=l(),wF=a("li"),nhe=a("strong"),xVo=o("roformer"),$Vo=o(" \u2014 "),uV=a("a"),kVo=o("RoFormerForQuestionAnswering"),SVo=o(" (RoFormer model)"),RVo=l(),AF=a("li"),she=a("strong"),PVo=o("splinter"),BVo=o(" \u2014 "),_V=a("a"),IVo=o("SplinterForQuestionAnswering"),qVo=o(" (Splinter model)"),NVo=l(),yF=a("li"),lhe=a("strong"),jVo=o("squeezebert"),DVo=o(" \u2014 "),bV=a("a"),GVo=o("SqueezeBertForQuestionAnswering"),OVo=o(" (SqueezeBERT model)"),VVo=l(),LF=a("li"),ihe=a("strong"),XVo=o("xlm"),zVo=o(" \u2014 "),vV=a("a"),WVo=o("XLMForQuestionAnsweringSimple"),QVo=o(" (XLM model)"),HVo=l(),xF=a("li"),dhe=a("strong"),UVo=o("xlm-roberta"),JVo=o(" \u2014 "),FV=a("a"),YVo=o("XLMRobertaForQuestionAnswering"),KVo=o(" (XLM-RoBERTa model)"),ZVo=l(),$F=a("li"),che=a("strong"),eXo=o("xlm-roberta-xl"),oXo=o(" \u2014 "),TV=a("a"),rXo=o("XLMRobertaXLForQuestionAnswering"),tXo=o(" (XLM-RoBERTa-XL model)"),aXo=l(),kF=a("li"),fhe=a("strong"),nXo=o("xlnet"),sXo=o(" \u2014 "),MV=a("a"),lXo=o("XLNetForQuestionAnsweringSimple"),iXo=o(" (XLNet model)"),dXo=l(),SF=a("li"),mhe=a("strong"),cXo=o("yoso"),fXo=o(" \u2014 "),EV=a("a"),mXo=o("YosoForQuestionAnswering"),gXo=o(" (YOSO model)"),hXo=l(),RF=a("p"),pXo=o("The model is set in evaluation mode by default using "),ghe=a("code"),uXo=o("model.eval()"),_Xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=a("code"),bXo=o("model.train()"),vXo=l(),F(PF.$$.fragment),JIe=l(),Zi=a("h2"),BF=a("a"),phe=a("span"),F(Ay.$$.fragment),FXo=l(),uhe=a("span"),TXo=o("AutoModelForTableQuestionAnswering"),YIe=l(),No=a("div"),F(yy.$$.fragment),MXo=l(),ed=a("p"),EXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CV=a("a"),CXo=o("from_pretrained()"),wXo=o(" class method or the "),wV=a("a"),AXo=o("from_config()"),yXo=o(` class
method.`),LXo=l(),Ly=a("p"),xXo=o("This class cannot be instantiated directly using "),_he=a("code"),$Xo=o("__init__()"),kXo=o(" (throws an error)."),SXo=l(),gt=a("div"),F(xy.$$.fragment),RXo=l(),bhe=a("p"),PXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BXo=l(),od=a("p"),IXo=o(`Note:
Loading a model from its configuration file does `),vhe=a("strong"),qXo=o("not"),NXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),jXo=o("from_pretrained()"),DXo=o(" to load the model weights."),GXo=l(),F(IF.$$.fragment),OXo=l(),so=a("div"),F($y.$$.fragment),VXo=l(),Fhe=a("p"),XXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zXo=l(),Na=a("p"),WXo=o("The model class to instantiate is selected based on the "),The=a("code"),QXo=o("model_type"),HXo=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),UXo=o("pretrained_model_name_or_path"),JXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),YXo=o("pretrained_model_name_or_path"),KXo=o(":"),ZXo=l(),Che=a("ul"),qF=a("li"),whe=a("strong"),ezo=o("tapas"),ozo=o(" \u2014 "),yV=a("a"),rzo=o("TapasForQuestionAnswering"),tzo=o(" (TAPAS model)"),azo=l(),NF=a("p"),nzo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),szo=o("model.eval()"),lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),izo=o("model.train()"),dzo=l(),F(jF.$$.fragment),KIe=l(),rd=a("h2"),DF=a("a"),Lhe=a("span"),F(ky.$$.fragment),czo=l(),xhe=a("span"),fzo=o("AutoModelForImageClassification"),ZIe=l(),jo=a("div"),F(Sy.$$.fragment),mzo=l(),td=a("p"),gzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LV=a("a"),hzo=o("from_pretrained()"),pzo=o(" class method or the "),xV=a("a"),uzo=o("from_config()"),_zo=o(` class
method.`),bzo=l(),Ry=a("p"),vzo=o("This class cannot be instantiated directly using "),$he=a("code"),Fzo=o("__init__()"),Tzo=o(" (throws an error)."),Mzo=l(),ht=a("div"),F(Py.$$.fragment),Ezo=l(),khe=a("p"),Czo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wzo=l(),ad=a("p"),Azo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),yzo=o("not"),Lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),xzo=o("from_pretrained()"),$zo=o(" to load the model weights."),kzo=l(),F(GF.$$.fragment),Szo=l(),lo=a("div"),F(By.$$.fragment),Rzo=l(),Rhe=a("p"),Pzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bzo=l(),ja=a("p"),Izo=o("The model class to instantiate is selected based on the "),Phe=a("code"),qzo=o("model_type"),Nzo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),jzo=o("pretrained_model_name_or_path"),Dzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),Gzo=o("pretrained_model_name_or_path"),Ozo=o(":"),Vzo=l(),Fe=a("ul"),OF=a("li"),qhe=a("strong"),Xzo=o("beit"),zzo=o(" \u2014 "),kV=a("a"),Wzo=o("BeitForImageClassification"),Qzo=o(" (BEiT model)"),Hzo=l(),VF=a("li"),Nhe=a("strong"),Uzo=o("convnext"),Jzo=o(" \u2014 "),SV=a("a"),Yzo=o("ConvNextForImageClassification"),Kzo=o(" (ConvNext model)"),Zzo=l(),XF=a("li"),jhe=a("strong"),eWo=o("data2vec-vision"),oWo=o(" \u2014 "),RV=a("a"),rWo=o("Data2VecVisionForImageClassification"),tWo=o(" (Data2VecVision model)"),aWo=l(),Rs=a("li"),Dhe=a("strong"),nWo=o("deit"),sWo=o(" \u2014 "),PV=a("a"),lWo=o("DeiTForImageClassification"),iWo=o(" or "),BV=a("a"),dWo=o("DeiTForImageClassificationWithTeacher"),cWo=o(" (DeiT model)"),fWo=l(),zF=a("li"),Ghe=a("strong"),mWo=o("imagegpt"),gWo=o(" \u2014 "),IV=a("a"),hWo=o("ImageGPTForImageClassification"),pWo=o(" (ImageGPT model)"),uWo=l(),pt=a("li"),Ohe=a("strong"),_Wo=o("perceiver"),bWo=o(" \u2014 "),qV=a("a"),vWo=o("PerceiverForImageClassificationLearned"),FWo=o(" or "),NV=a("a"),TWo=o("PerceiverForImageClassificationFourier"),MWo=o(" or "),jV=a("a"),EWo=o("PerceiverForImageClassificationConvProcessing"),CWo=o(" (Perceiver model)"),wWo=l(),WF=a("li"),Vhe=a("strong"),AWo=o("poolformer"),yWo=o(" \u2014 "),DV=a("a"),LWo=o("PoolFormerForImageClassification"),xWo=o(" (PoolFormer model)"),$Wo=l(),QF=a("li"),Xhe=a("strong"),kWo=o("regnet"),SWo=o(" \u2014 "),GV=a("a"),RWo=o("RegNetForImageClassification"),PWo=o(" (RegNet model)"),BWo=l(),HF=a("li"),zhe=a("strong"),IWo=o("resnet"),qWo=o(" \u2014 "),OV=a("a"),NWo=o("ResNetForImageClassification"),jWo=o(" (ResNet model)"),DWo=l(),UF=a("li"),Whe=a("strong"),GWo=o("segformer"),OWo=o(" \u2014 "),VV=a("a"),VWo=o("SegformerForImageClassification"),XWo=o(" (SegFormer model)"),zWo=l(),JF=a("li"),Qhe=a("strong"),WWo=o("swin"),QWo=o(" \u2014 "),XV=a("a"),HWo=o("SwinForImageClassification"),UWo=o(" (Swin model)"),JWo=l(),YF=a("li"),Hhe=a("strong"),YWo=o("van"),KWo=o(" \u2014 "),zV=a("a"),ZWo=o("VanForImageClassification"),eQo=o(" (VAN model)"),oQo=l(),KF=a("li"),Uhe=a("strong"),rQo=o("vit"),tQo=o(" \u2014 "),WV=a("a"),aQo=o("ViTForImageClassification"),nQo=o(" (ViT model)"),sQo=l(),ZF=a("p"),lQo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),iQo=o("model.eval()"),dQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),cQo=o("model.train()"),fQo=l(),F(e6.$$.fragment),eqe=l(),nd=a("h2"),o6=a("a"),Khe=a("span"),F(Iy.$$.fragment),mQo=l(),Zhe=a("span"),gQo=o("AutoModelForVision2Seq"),oqe=l(),Do=a("div"),F(qy.$$.fragment),hQo=l(),sd=a("p"),pQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QV=a("a"),uQo=o("from_pretrained()"),_Qo=o(" class method or the "),HV=a("a"),bQo=o("from_config()"),vQo=o(` class
method.`),FQo=l(),Ny=a("p"),TQo=o("This class cannot be instantiated directly using "),epe=a("code"),MQo=o("__init__()"),EQo=o(" (throws an error)."),CQo=l(),ut=a("div"),F(jy.$$.fragment),wQo=l(),ope=a("p"),AQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yQo=l(),ld=a("p"),LQo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),xQo=o("not"),$Qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),kQo=o("from_pretrained()"),SQo=o(" to load the model weights."),RQo=l(),F(r6.$$.fragment),PQo=l(),io=a("div"),F(Dy.$$.fragment),BQo=l(),tpe=a("p"),IQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qQo=l(),Da=a("p"),NQo=o("The model class to instantiate is selected based on the "),ape=a("code"),jQo=o("model_type"),DQo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),GQo=o("pretrained_model_name_or_path"),OQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),VQo=o("pretrained_model_name_or_path"),XQo=o(":"),zQo=l(),lpe=a("ul"),t6=a("li"),ipe=a("strong"),WQo=o("vision-encoder-decoder"),QQo=o(" \u2014 "),JV=a("a"),HQo=o("VisionEncoderDecoderModel"),UQo=o(" (Vision Encoder decoder model)"),JQo=l(),a6=a("p"),YQo=o("The model is set in evaluation mode by default using "),dpe=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),eHo=o("model.train()"),oHo=l(),F(n6.$$.fragment),rqe=l(),id=a("h2"),s6=a("a"),fpe=a("span"),F(Gy.$$.fragment),rHo=l(),mpe=a("span"),tHo=o("AutoModelForAudioClassification"),tqe=l(),Go=a("div"),F(Oy.$$.fragment),aHo=l(),dd=a("p"),nHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YV=a("a"),sHo=o("from_pretrained()"),lHo=o(" class method or the "),KV=a("a"),iHo=o("from_config()"),dHo=o(` class
method.`),cHo=l(),Vy=a("p"),fHo=o("This class cannot be instantiated directly using "),gpe=a("code"),mHo=o("__init__()"),gHo=o(" (throws an error)."),hHo=l(),_t=a("div"),F(Xy.$$.fragment),pHo=l(),hpe=a("p"),uHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_Ho=l(),cd=a("p"),bHo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),vHo=o("not"),FHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),THo=o("from_pretrained()"),MHo=o(" to load the model weights."),EHo=l(),F(l6.$$.fragment),CHo=l(),co=a("div"),F(zy.$$.fragment),wHo=l(),upe=a("p"),AHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yHo=l(),Ga=a("p"),LHo=o("The model class to instantiate is selected based on the "),_pe=a("code"),xHo=o("model_type"),$Ho=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),kHo=o("pretrained_model_name_or_path"),SHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),RHo=o("pretrained_model_name_or_path"),PHo=o(":"),BHo=l(),ke=a("ul"),i6=a("li"),Fpe=a("strong"),IHo=o("data2vec-audio"),qHo=o(" \u2014 "),eX=a("a"),NHo=o("Data2VecAudioForSequenceClassification"),jHo=o(" (Data2VecAudio model)"),DHo=l(),d6=a("li"),Tpe=a("strong"),GHo=o("hubert"),OHo=o(" \u2014 "),oX=a("a"),VHo=o("HubertForSequenceClassification"),XHo=o(" (Hubert model)"),zHo=l(),c6=a("li"),Mpe=a("strong"),WHo=o("sew"),QHo=o(" \u2014 "),rX=a("a"),HHo=o("SEWForSequenceClassification"),UHo=o(" (SEW model)"),JHo=l(),f6=a("li"),Epe=a("strong"),YHo=o("sew-d"),KHo=o(" \u2014 "),tX=a("a"),ZHo=o("SEWDForSequenceClassification"),eUo=o(" (SEW-D model)"),oUo=l(),m6=a("li"),Cpe=a("strong"),rUo=o("unispeech"),tUo=o(" \u2014 "),aX=a("a"),aUo=o("UniSpeechForSequenceClassification"),nUo=o(" (UniSpeech model)"),sUo=l(),g6=a("li"),wpe=a("strong"),lUo=o("unispeech-sat"),iUo=o(" \u2014 "),nX=a("a"),dUo=o("UniSpeechSatForSequenceClassification"),cUo=o(" (UniSpeechSat model)"),fUo=l(),h6=a("li"),Ape=a("strong"),mUo=o("wav2vec2"),gUo=o(" \u2014 "),sX=a("a"),hUo=o("Wav2Vec2ForSequenceClassification"),pUo=o(" (Wav2Vec2 model)"),uUo=l(),p6=a("li"),ype=a("strong"),_Uo=o("wav2vec2-conformer"),bUo=o(" \u2014 "),lX=a("a"),vUo=o("Wav2Vec2ConformerForSequenceClassification"),FUo=o(" (Wav2Vec2-Conformer model)"),TUo=l(),u6=a("li"),Lpe=a("strong"),MUo=o("wavlm"),EUo=o(" \u2014 "),iX=a("a"),CUo=o("WavLMForSequenceClassification"),wUo=o(" (WavLM model)"),AUo=l(),_6=a("p"),yUo=o("The model is set in evaluation mode by default using "),xpe=a("code"),LUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),$Uo=o("model.train()"),kUo=l(),F(b6.$$.fragment),aqe=l(),fd=a("h2"),v6=a("a"),kpe=a("span"),F(Wy.$$.fragment),SUo=l(),Spe=a("span"),RUo=o("AutoModelForAudioFrameClassification"),nqe=l(),Oo=a("div"),F(Qy.$$.fragment),PUo=l(),md=a("p"),BUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dX=a("a"),IUo=o("from_pretrained()"),qUo=o(" class method or the "),cX=a("a"),NUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),Hy=a("p"),GUo=o("This class cannot be instantiated directly using "),Rpe=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),bt=a("div"),F(Uy.$$.fragment),zUo=l(),Ppe=a("p"),WUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QUo=l(),gd=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),F(F6.$$.fragment),eJo=l(),fo=a("div"),F(Jy.$$.fragment),oJo=l(),Ipe=a("p"),rJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tJo=l(),Oa=a("p"),aJo=o("The model class to instantiate is selected based on the "),qpe=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),Kr=a("ul"),T6=a("li"),Dpe=a("strong"),mJo=o("data2vec-audio"),gJo=o(" \u2014 "),mX=a("a"),hJo=o("Data2VecAudioForAudioFrameClassification"),pJo=o(" (Data2VecAudio model)"),uJo=l(),M6=a("li"),Gpe=a("strong"),_Jo=o("unispeech-sat"),bJo=o(" \u2014 "),gX=a("a"),vJo=o("UniSpeechSatForAudioFrameClassification"),FJo=o(" (UniSpeechSat model)"),TJo=l(),E6=a("li"),Ope=a("strong"),MJo=o("wav2vec2"),EJo=o(" \u2014 "),hX=a("a"),CJo=o("Wav2Vec2ForAudioFrameClassification"),wJo=o(" (Wav2Vec2 model)"),AJo=l(),C6=a("li"),Vpe=a("strong"),yJo=o("wav2vec2-conformer"),LJo=o(" \u2014 "),pX=a("a"),xJo=o("Wav2Vec2ConformerForAudioFrameClassification"),$Jo=o(" (Wav2Vec2-Conformer model)"),kJo=l(),w6=a("li"),Xpe=a("strong"),SJo=o("wavlm"),RJo=o(" \u2014 "),uX=a("a"),PJo=o("WavLMForAudioFrameClassification"),BJo=o(" (WavLM model)"),IJo=l(),A6=a("p"),qJo=o("The model is set in evaluation mode by default using "),zpe=a("code"),NJo=o("model.eval()"),jJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),DJo=o("model.train()"),GJo=l(),F(y6.$$.fragment),sqe=l(),hd=a("h2"),L6=a("a"),Qpe=a("span"),F(Yy.$$.fragment),OJo=l(),Hpe=a("span"),VJo=o("AutoModelForCTC"),lqe=l(),Vo=a("div"),F(Ky.$$.fragment),XJo=l(),pd=a("p"),zJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_X=a("a"),WJo=o("from_pretrained()"),QJo=o(" class method or the "),bX=a("a"),HJo=o("from_config()"),UJo=o(` class
method.`),JJo=l(),Zy=a("p"),YJo=o("This class cannot be instantiated directly using "),Upe=a("code"),KJo=o("__init__()"),ZJo=o(" (throws an error)."),eYo=l(),vt=a("div"),F(eL.$$.fragment),oYo=l(),Jpe=a("p"),rYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tYo=l(),ud=a("p"),aYo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),nYo=o("not"),sYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),lYo=o("from_pretrained()"),iYo=o(" to load the model weights."),dYo=l(),F(x6.$$.fragment),cYo=l(),mo=a("div"),F(oL.$$.fragment),fYo=l(),Kpe=a("p"),mYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gYo=l(),Va=a("p"),hYo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),pYo=o("model_type"),uYo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),_Yo=o("pretrained_model_name_or_path"),bYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),vYo=o("pretrained_model_name_or_path"),FYo=o(":"),TYo=l(),Se=a("ul"),$6=a("li"),rue=a("strong"),MYo=o("data2vec-audio"),EYo=o(" \u2014 "),FX=a("a"),CYo=o("Data2VecAudioForCTC"),wYo=o(" (Data2VecAudio model)"),AYo=l(),k6=a("li"),tue=a("strong"),yYo=o("hubert"),LYo=o(" \u2014 "),TX=a("a"),xYo=o("HubertForCTC"),$Yo=o(" (Hubert model)"),kYo=l(),S6=a("li"),aue=a("strong"),SYo=o("sew"),RYo=o(" \u2014 "),MX=a("a"),PYo=o("SEWForCTC"),BYo=o(" (SEW model)"),IYo=l(),R6=a("li"),nue=a("strong"),qYo=o("sew-d"),NYo=o(" \u2014 "),EX=a("a"),jYo=o("SEWDForCTC"),DYo=o(" (SEW-D model)"),GYo=l(),P6=a("li"),sue=a("strong"),OYo=o("unispeech"),VYo=o(" \u2014 "),CX=a("a"),XYo=o("UniSpeechForCTC"),zYo=o(" (UniSpeech model)"),WYo=l(),B6=a("li"),lue=a("strong"),QYo=o("unispeech-sat"),HYo=o(" \u2014 "),wX=a("a"),UYo=o("UniSpeechSatForCTC"),JYo=o(" (UniSpeechSat model)"),YYo=l(),I6=a("li"),iue=a("strong"),KYo=o("wav2vec2"),ZYo=o(" \u2014 "),AX=a("a"),eKo=o("Wav2Vec2ForCTC"),oKo=o(" (Wav2Vec2 model)"),rKo=l(),q6=a("li"),due=a("strong"),tKo=o("wav2vec2-conformer"),aKo=o(" \u2014 "),yX=a("a"),nKo=o("Wav2Vec2ConformerForCTC"),sKo=o(" (Wav2Vec2-Conformer model)"),lKo=l(),N6=a("li"),cue=a("strong"),iKo=o("wavlm"),dKo=o(" \u2014 "),LX=a("a"),cKo=o("WavLMForCTC"),fKo=o(" (WavLM model)"),mKo=l(),j6=a("p"),gKo=o("The model is set in evaluation mode by default using "),fue=a("code"),hKo=o("model.eval()"),pKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=a("code"),uKo=o("model.train()"),_Ko=l(),F(D6.$$.fragment),iqe=l(),_d=a("h2"),G6=a("a"),gue=a("span"),F(rL.$$.fragment),bKo=l(),hue=a("span"),vKo=o("AutoModelForSpeechSeq2Seq"),dqe=l(),Xo=a("div"),F(tL.$$.fragment),FKo=l(),bd=a("p"),TKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xX=a("a"),MKo=o("from_pretrained()"),EKo=o(" class method or the "),$X=a("a"),CKo=o("from_config()"),wKo=o(` class
method.`),AKo=l(),aL=a("p"),yKo=o("This class cannot be instantiated directly using "),pue=a("code"),LKo=o("__init__()"),xKo=o(" (throws an error)."),$Ko=l(),Ft=a("div"),F(nL.$$.fragment),kKo=l(),uue=a("p"),SKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RKo=l(),vd=a("p"),PKo=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),BKo=o("not"),IKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),qKo=o("from_pretrained()"),NKo=o(" to load the model weights."),jKo=l(),F(O6.$$.fragment),DKo=l(),go=a("div"),F(sL.$$.fragment),GKo=l(),bue=a("p"),OKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VKo=l(),Xa=a("p"),XKo=o("The model class to instantiate is selected based on the "),vue=a("code"),zKo=o("model_type"),WKo=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),QKo=o("pretrained_model_name_or_path"),HKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),UKo=o("pretrained_model_name_or_path"),JKo=o(":"),YKo=l(),lL=a("ul"),V6=a("li"),Mue=a("strong"),KKo=o("speech-encoder-decoder"),ZKo=o(" \u2014 "),SX=a("a"),eZo=o("SpeechEncoderDecoderModel"),oZo=o(" (Speech Encoder decoder model)"),rZo=l(),X6=a("li"),Eue=a("strong"),tZo=o("speech_to_text"),aZo=o(" \u2014 "),RX=a("a"),nZo=o("Speech2TextForConditionalGeneration"),sZo=o(" (Speech2Text model)"),lZo=l(),z6=a("p"),iZo=o("The model is set in evaluation mode by default using "),Cue=a("code"),dZo=o("model.eval()"),cZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),fZo=o("model.train()"),mZo=l(),F(W6.$$.fragment),cqe=l(),Fd=a("h2"),Q6=a("a"),Aue=a("span"),F(iL.$$.fragment),gZo=l(),yue=a("span"),hZo=o("AutoModelForAudioXVector"),fqe=l(),zo=a("div"),F(dL.$$.fragment),pZo=l(),Td=a("p"),uZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PX=a("a"),_Zo=o("from_pretrained()"),bZo=o(" class method or the "),BX=a("a"),vZo=o("from_config()"),FZo=o(` class
method.`),TZo=l(),cL=a("p"),MZo=o("This class cannot be instantiated directly using "),Lue=a("code"),EZo=o("__init__()"),CZo=o(" (throws an error)."),wZo=l(),Tt=a("div"),F(fL.$$.fragment),AZo=l(),xue=a("p"),yZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),LZo=l(),Md=a("p"),xZo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),$Zo=o("not"),kZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),SZo=o("from_pretrained()"),RZo=o(" to load the model weights."),PZo=l(),F(H6.$$.fragment),BZo=l(),ho=a("div"),F(mL.$$.fragment),IZo=l(),kue=a("p"),qZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),NZo=l(),za=a("p"),jZo=o("The model class to instantiate is selected based on the "),Sue=a("code"),DZo=o("model_type"),GZo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),OZo=o("pretrained_model_name_or_path"),VZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(":"),WZo=l(),Zr=a("ul"),U6=a("li"),Bue=a("strong"),QZo=o("data2vec-audio"),HZo=o(" \u2014 "),qX=a("a"),UZo=o("Data2VecAudioForXVector"),JZo=o(" (Data2VecAudio model)"),YZo=l(),J6=a("li"),Iue=a("strong"),KZo=o("unispeech-sat"),ZZo=o(" \u2014 "),NX=a("a"),eer=o("UniSpeechSatForXVector"),oer=o(" (UniSpeechSat model)"),rer=l(),Y6=a("li"),que=a("strong"),ter=o("wav2vec2"),aer=o(" \u2014 "),jX=a("a"),ner=o("Wav2Vec2ForXVector"),ser=o(" (Wav2Vec2 model)"),ler=l(),K6=a("li"),Nue=a("strong"),ier=o("wav2vec2-conformer"),der=o(" \u2014 "),DX=a("a"),cer=o("Wav2Vec2ConformerForXVector"),fer=o(" (Wav2Vec2-Conformer model)"),mer=l(),Z6=a("li"),jue=a("strong"),ger=o("wavlm"),her=o(" \u2014 "),GX=a("a"),per=o("WavLMForXVector"),uer=o(" (WavLM model)"),_er=l(),eT=a("p"),ber=o("The model is set in evaluation mode by default using "),Due=a("code"),ver=o("model.eval()"),Fer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),Ter=o("model.train()"),Mer=l(),F(oT.$$.fragment),mqe=l(),Ed=a("h2"),rT=a("a"),Oue=a("span"),F(gL.$$.fragment),Eer=l(),Vue=a("span"),Cer=o("AutoModelForMaskedImageModeling"),gqe=l(),Wo=a("div"),F(hL.$$.fragment),wer=l(),Cd=a("p"),Aer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OX=a("a"),yer=o("from_pretrained()"),Ler=o(" class method or the "),VX=a("a"),xer=o("from_config()"),$er=o(` class
method.`),ker=l(),pL=a("p"),Ser=o("This class cannot be instantiated directly using "),Xue=a("code"),Rer=o("__init__()"),Per=o(" (throws an error)."),Ber=l(),Mt=a("div"),F(uL.$$.fragment),Ier=l(),zue=a("p"),qer=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ner=l(),wd=a("p"),jer=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),Der=o("not"),Ger=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),Oer=o("from_pretrained()"),Ver=o(" to load the model weights."),Xer=l(),F(tT.$$.fragment),zer=l(),po=a("div"),F(_L.$$.fragment),Wer=l(),Que=a("p"),Qer=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Her=l(),Wa=a("p"),Uer=o("The model class to instantiate is selected based on the "),Hue=a("code"),Jer=o("model_type"),Yer=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),Ker=o("pretrained_model_name_or_path"),Zer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(":"),ror=l(),Ad=a("ul"),aT=a("li"),Yue=a("strong"),tor=o("deit"),aor=o(" \u2014 "),zX=a("a"),nor=o("DeiTForMaskedImageModeling"),sor=o(" (DeiT model)"),lor=l(),nT=a("li"),Kue=a("strong"),ior=o("swin"),dor=o(" \u2014 "),WX=a("a"),cor=o("SwinForMaskedImageModeling"),mor=o(" (Swin model)"),gor=l(),sT=a("li"),Zue=a("strong"),hor=o("vit"),por=o(" \u2014 "),QX=a("a"),uor=o("ViTForMaskedImageModeling"),_or=o(" (ViT model)"),bor=l(),lT=a("p"),vor=o("The model is set in evaluation mode by default using "),e_e=a("code"),For=o("model.eval()"),Tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=a("code"),Mor=o("model.train()"),Eor=l(),F(iT.$$.fragment),hqe=l(),yd=a("h2"),dT=a("a"),r_e=a("span"),F(bL.$$.fragment),Cor=l(),t_e=a("span"),wor=o("AutoModelForObjectDetection"),pqe=l(),Qo=a("div"),F(vL.$$.fragment),Aor=l(),Ld=a("p"),yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HX=a("a"),Lor=o("from_pretrained()"),xor=o(" class method or the "),UX=a("a"),$or=o("from_config()"),kor=o(` class
method.`),Sor=l(),FL=a("p"),Ror=o("This class cannot be instantiated directly using "),a_e=a("code"),Por=o("__init__()"),Bor=o(" (throws an error)."),Ior=l(),Et=a("div"),F(TL.$$.fragment),qor=l(),n_e=a("p"),Nor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),jor=l(),xd=a("p"),Dor=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),Gor=o("not"),Oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),Vor=o("from_pretrained()"),Xor=o(" to load the model weights."),zor=l(),F(cT.$$.fragment),Wor=l(),uo=a("div"),F(ML.$$.fragment),Qor=l(),l_e=a("p"),Hor=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Uor=l(),Qa=a("p"),Jor=o("The model class to instantiate is selected based on the "),i_e=a("code"),Yor=o("model_type"),Kor=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(":"),trr=l(),EL=a("ul"),fT=a("li"),f_e=a("strong"),arr=o("detr"),nrr=o(" \u2014 "),YX=a("a"),srr=o("DetrForObjectDetection"),lrr=o(" (DETR model)"),irr=l(),mT=a("li"),m_e=a("strong"),drr=o("yolos"),crr=o(" \u2014 "),KX=a("a"),frr=o("YolosForObjectDetection"),mrr=o(" (YOLOS model)"),grr=l(),gT=a("p"),hrr=o("The model is set in evaluation mode by default using "),g_e=a("code"),prr=o("model.eval()"),urr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h_e=a("code"),_rr=o("model.train()"),brr=l(),F(hT.$$.fragment),uqe=l(),$d=a("h2"),pT=a("a"),p_e=a("span"),F(CL.$$.fragment),vrr=l(),u_e=a("span"),Frr=o("AutoModelForImageSegmentation"),_qe=l(),Ho=a("div"),F(wL.$$.fragment),Trr=l(),kd=a("p"),Mrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZX=a("a"),Err=o("from_pretrained()"),Crr=o(" class method or the "),ez=a("a"),wrr=o("from_config()"),Arr=o(` class
method.`),yrr=l(),AL=a("p"),Lrr=o("This class cannot be instantiated directly using "),__e=a("code"),xrr=o("__init__()"),$rr=o(" (throws an error)."),krr=l(),Ct=a("div"),F(yL.$$.fragment),Srr=l(),b_e=a("p"),Rrr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Prr=l(),Sd=a("p"),Brr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),Irr=o("not"),qrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),Nrr=o("from_pretrained()"),jrr=o(" to load the model weights."),Drr=l(),F(uT.$$.fragment),Grr=l(),_o=a("div"),F(LL.$$.fragment),Orr=l(),F_e=a("p"),Vrr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Xrr=l(),Ha=a("p"),zrr=o("The model class to instantiate is selected based on the "),T_e=a("code"),Wrr=o("model_type"),Qrr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),Hrr=o("pretrained_model_name_or_path"),Urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),Jrr=o("pretrained_model_name_or_path"),Yrr=o(":"),Krr=l(),C_e=a("ul"),_T=a("li"),w_e=a("strong"),Zrr=o("detr"),etr=o(" \u2014 "),rz=a("a"),otr=o("DetrForSegmentation"),rtr=o(" (DETR model)"),ttr=l(),bT=a("p"),atr=o("The model is set in evaluation mode by default using "),A_e=a("code"),ntr=o("model.eval()"),str=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=a("code"),ltr=o("model.train()"),itr=l(),F(vT.$$.fragment),bqe=l(),Rd=a("h2"),FT=a("a"),L_e=a("span"),F(xL.$$.fragment),dtr=l(),x_e=a("span"),ctr=o("AutoModelForSemanticSegmentation"),vqe=l(),Uo=a("div"),F($L.$$.fragment),ftr=l(),Pd=a("p"),mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tz=a("a"),gtr=o("from_pretrained()"),htr=o(" class method or the "),az=a("a"),ptr=o("from_config()"),utr=o(` class
method.`),_tr=l(),kL=a("p"),btr=o("This class cannot be instantiated directly using "),$_e=a("code"),vtr=o("__init__()"),Ftr=o(" (throws an error)."),Ttr=l(),wt=a("div"),F(SL.$$.fragment),Mtr=l(),k_e=a("p"),Etr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ctr=l(),Bd=a("p"),wtr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),Atr=o("not"),ytr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),Ltr=o("from_pretrained()"),xtr=o(" to load the model weights."),$tr=l(),F(TT.$$.fragment),ktr=l(),bo=a("div"),F(RL.$$.fragment),Str=l(),R_e=a("p"),Rtr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ptr=l(),Ua=a("p"),Btr=o("The model class to instantiate is selected based on the "),P_e=a("code"),Itr=o("model_type"),qtr=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),Ntr=o("pretrained_model_name_or_path"),jtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),Dtr=o("pretrained_model_name_or_path"),Gtr=o(":"),Otr=l(),Ja=a("ul"),MT=a("li"),q_e=a("strong"),Vtr=o("beit"),Xtr=o(" \u2014 "),sz=a("a"),ztr=o("BeitForSemanticSegmentation"),Wtr=o(" (BEiT model)"),Qtr=l(),ET=a("li"),N_e=a("strong"),Htr=o("data2vec-vision"),Utr=o(" \u2014 "),lz=a("a"),Jtr=o("Data2VecVisionForSemanticSegmentation"),Ytr=o(" (Data2VecVision model)"),Ktr=l(),CT=a("li"),j_e=a("strong"),Ztr=o("dpt"),ear=o(" \u2014 "),iz=a("a"),oar=o("DPTForSemanticSegmentation"),rar=o(" (DPT model)"),tar=l(),wT=a("li"),D_e=a("strong"),aar=o("segformer"),nar=o(" \u2014 "),dz=a("a"),sar=o("SegformerForSemanticSegmentation"),lar=o(" (SegFormer model)"),iar=l(),AT=a("p"),dar=o("The model is set in evaluation mode by default using "),G_e=a("code"),car=o("model.eval()"),far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),mar=o("model.train()"),gar=l(),F(yT.$$.fragment),Fqe=l(),Id=a("h2"),LT=a("a"),V_e=a("span"),F(PL.$$.fragment),har=l(),X_e=a("span"),par=o("AutoModelForInstanceSegmentation"),Tqe=l(),Jo=a("div"),F(BL.$$.fragment),uar=l(),qd=a("p"),_ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cz=a("a"),bar=o("from_pretrained()"),Far=o(" class method or the "),fz=a("a"),Tar=o("from_config()"),Mar=o(` class
method.`),Ear=l(),IL=a("p"),Car=o("This class cannot be instantiated directly using "),z_e=a("code"),war=o("__init__()"),Aar=o(" (throws an error)."),yar=l(),At=a("div"),F(qL.$$.fragment),Lar=l(),W_e=a("p"),xar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$ar=l(),Nd=a("p"),kar=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),Sar=o("not"),Rar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),Par=o("from_pretrained()"),Bar=o(" to load the model weights."),Iar=l(),F(xT.$$.fragment),qar=l(),vo=a("div"),F(NL.$$.fragment),Nar=l(),H_e=a("p"),jar=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Dar=l(),Ya=a("p"),Gar=o("The model class to instantiate is selected based on the "),U_e=a("code"),Oar=o("model_type"),Var=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),Xar=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),War=o("pretrained_model_name_or_path"),Qar=o(":"),Har=l(),K_e=a("ul"),$T=a("li"),Z_e=a("strong"),Uar=o("maskformer"),Jar=o(" \u2014 "),gz=a("a"),Yar=o("MaskFormerForInstanceSegmentation"),Kar=o(" (MaskFormer model)"),Zar=l(),kT=a("p"),enr=o("The model is set in evaluation mode by default using "),e1e=a("code"),onr=o("model.eval()"),rnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),tnr=o("model.train()"),anr=l(),F(ST.$$.fragment),Mqe=l(),jd=a("h2"),RT=a("a"),r1e=a("span"),F(jL.$$.fragment),nnr=l(),t1e=a("span"),snr=o("TFAutoModel"),Eqe=l(),Yo=a("div"),F(DL.$$.fragment),lnr=l(),Dd=a("p"),inr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hz=a("a"),dnr=o("from_pretrained()"),cnr=o(" class method or the "),pz=a("a"),fnr=o("from_config()"),mnr=o(` class
method.`),gnr=l(),GL=a("p"),hnr=o("This class cannot be instantiated directly using "),a1e=a("code"),pnr=o("__init__()"),unr=o(" (throws an error)."),_nr=l(),yt=a("div"),F(OL.$$.fragment),bnr=l(),n1e=a("p"),vnr=o("Instantiates one of the base model classes of the library from a configuration."),Fnr=l(),Gd=a("p"),Tnr=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),Mnr=o("not"),Enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),Cnr=o("from_pretrained()"),wnr=o(" to load the model weights."),Anr=l(),F(PT.$$.fragment),ynr=l(),wr=a("div"),F(VL.$$.fragment),Lnr=l(),l1e=a("p"),xnr=o("Instantiate one of the base model classes of the library from a pretrained model."),$nr=l(),Ka=a("p"),knr=o("The model class to instantiate is selected based on the "),i1e=a("code"),Snr=o("model_type"),Rnr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),Pnr=o("pretrained_model_name_or_path"),Bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),Inr=o("pretrained_model_name_or_path"),qnr=o(":"),Nnr=l(),N=a("ul"),BT=a("li"),f1e=a("strong"),jnr=o("albert"),Dnr=o(" \u2014 "),_z=a("a"),Gnr=o("TFAlbertModel"),Onr=o(" (ALBERT model)"),Vnr=l(),IT=a("li"),m1e=a("strong"),Xnr=o("bart"),znr=o(" \u2014 "),bz=a("a"),Wnr=o("TFBartModel"),Qnr=o(" (BART model)"),Hnr=l(),qT=a("li"),g1e=a("strong"),Unr=o("bert"),Jnr=o(" \u2014 "),vz=a("a"),Ynr=o("TFBertModel"),Knr=o(" (BERT model)"),Znr=l(),NT=a("li"),h1e=a("strong"),esr=o("blenderbot"),osr=o(" \u2014 "),Fz=a("a"),rsr=o("TFBlenderbotModel"),tsr=o(" (Blenderbot model)"),asr=l(),jT=a("li"),p1e=a("strong"),nsr=o("blenderbot-small"),ssr=o(" \u2014 "),Tz=a("a"),lsr=o("TFBlenderbotSmallModel"),isr=o(" (BlenderbotSmall model)"),dsr=l(),DT=a("li"),u1e=a("strong"),csr=o("camembert"),fsr=o(" \u2014 "),Mz=a("a"),msr=o("TFCamembertModel"),gsr=o(" (CamemBERT model)"),hsr=l(),GT=a("li"),_1e=a("strong"),psr=o("clip"),usr=o(" \u2014 "),Ez=a("a"),_sr=o("TFCLIPModel"),bsr=o(" (CLIP model)"),vsr=l(),OT=a("li"),b1e=a("strong"),Fsr=o("convbert"),Tsr=o(" \u2014 "),Cz=a("a"),Msr=o("TFConvBertModel"),Esr=o(" (ConvBERT model)"),Csr=l(),VT=a("li"),v1e=a("strong"),wsr=o("convnext"),Asr=o(" \u2014 "),wz=a("a"),ysr=o("TFConvNextModel"),Lsr=o(" (ConvNext model)"),xsr=l(),XT=a("li"),F1e=a("strong"),$sr=o("ctrl"),ksr=o(" \u2014 "),Az=a("a"),Ssr=o("TFCTRLModel"),Rsr=o(" (CTRL model)"),Psr=l(),zT=a("li"),T1e=a("strong"),Bsr=o("data2vec-vision"),Isr=o(" \u2014 "),yz=a("a"),qsr=o("TFData2VecVisionModel"),Nsr=o(" (Data2VecVision model)"),jsr=l(),WT=a("li"),M1e=a("strong"),Dsr=o("deberta"),Gsr=o(" \u2014 "),Lz=a("a"),Osr=o("TFDebertaModel"),Vsr=o(" (DeBERTa model)"),Xsr=l(),QT=a("li"),E1e=a("strong"),zsr=o("deberta-v2"),Wsr=o(" \u2014 "),xz=a("a"),Qsr=o("TFDebertaV2Model"),Hsr=o(" (DeBERTa-v2 model)"),Usr=l(),HT=a("li"),C1e=a("strong"),Jsr=o("distilbert"),Ysr=o(" \u2014 "),$z=a("a"),Ksr=o("TFDistilBertModel"),Zsr=o(" (DistilBERT model)"),elr=l(),UT=a("li"),w1e=a("strong"),olr=o("dpr"),rlr=o(" \u2014 "),kz=a("a"),tlr=o("TFDPRQuestionEncoder"),alr=o(" (DPR model)"),nlr=l(),JT=a("li"),A1e=a("strong"),slr=o("electra"),llr=o(" \u2014 "),Sz=a("a"),ilr=o("TFElectraModel"),dlr=o(" (ELECTRA model)"),clr=l(),YT=a("li"),y1e=a("strong"),flr=o("flaubert"),mlr=o(" \u2014 "),Rz=a("a"),glr=o("TFFlaubertModel"),hlr=o(" (FlauBERT model)"),plr=l(),Ps=a("li"),L1e=a("strong"),ulr=o("funnel"),_lr=o(" \u2014 "),Pz=a("a"),blr=o("TFFunnelModel"),vlr=o(" or "),Bz=a("a"),Flr=o("TFFunnelBaseModel"),Tlr=o(" (Funnel Transformer model)"),Mlr=l(),KT=a("li"),x1e=a("strong"),Elr=o("gpt2"),Clr=o(" \u2014 "),Iz=a("a"),wlr=o("TFGPT2Model"),Alr=o(" (OpenAI GPT-2 model)"),ylr=l(),ZT=a("li"),$1e=a("strong"),Llr=o("gptj"),xlr=o(" \u2014 "),qz=a("a"),$lr=o("TFGPTJModel"),klr=o(" (GPT-J model)"),Slr=l(),e8=a("li"),k1e=a("strong"),Rlr=o("hubert"),Plr=o(" \u2014 "),Nz=a("a"),Blr=o("TFHubertModel"),Ilr=o(" (Hubert model)"),qlr=l(),o8=a("li"),S1e=a("strong"),Nlr=o("layoutlm"),jlr=o(" \u2014 "),jz=a("a"),Dlr=o("TFLayoutLMModel"),Glr=o(" (LayoutLM model)"),Olr=l(),r8=a("li"),R1e=a("strong"),Vlr=o("led"),Xlr=o(" \u2014 "),Dz=a("a"),zlr=o("TFLEDModel"),Wlr=o(" (LED model)"),Qlr=l(),t8=a("li"),P1e=a("strong"),Hlr=o("longformer"),Ulr=o(" \u2014 "),Gz=a("a"),Jlr=o("TFLongformerModel"),Ylr=o(" (Longformer model)"),Klr=l(),a8=a("li"),B1e=a("strong"),Zlr=o("lxmert"),eir=o(" \u2014 "),Oz=a("a"),oir=o("TFLxmertModel"),rir=o(" (LXMERT model)"),tir=l(),n8=a("li"),I1e=a("strong"),air=o("marian"),nir=o(" \u2014 "),Vz=a("a"),sir=o("TFMarianModel"),lir=o(" (Marian model)"),iir=l(),s8=a("li"),q1e=a("strong"),dir=o("mbart"),cir=o(" \u2014 "),Xz=a("a"),fir=o("TFMBartModel"),mir=o(" (mBART model)"),gir=l(),l8=a("li"),N1e=a("strong"),hir=o("mobilebert"),pir=o(" \u2014 "),zz=a("a"),uir=o("TFMobileBertModel"),_ir=o(" (MobileBERT model)"),bir=l(),i8=a("li"),j1e=a("strong"),vir=o("mpnet"),Fir=o(" \u2014 "),Wz=a("a"),Tir=o("TFMPNetModel"),Mir=o(" (MPNet model)"),Eir=l(),d8=a("li"),D1e=a("strong"),Cir=o("mt5"),wir=o(" \u2014 "),Qz=a("a"),Air=o("TFMT5Model"),yir=o(" (mT5 model)"),Lir=l(),c8=a("li"),G1e=a("strong"),xir=o("openai-gpt"),$ir=o(" \u2014 "),Hz=a("a"),kir=o("TFOpenAIGPTModel"),Sir=o(" (OpenAI GPT model)"),Rir=l(),f8=a("li"),O1e=a("strong"),Pir=o("pegasus"),Bir=o(" \u2014 "),Uz=a("a"),Iir=o("TFPegasusModel"),qir=o(" (Pegasus model)"),Nir=l(),m8=a("li"),V1e=a("strong"),jir=o("rembert"),Dir=o(" \u2014 "),Jz=a("a"),Gir=o("TFRemBertModel"),Oir=o(" (RemBERT model)"),Vir=l(),g8=a("li"),X1e=a("strong"),Xir=o("roberta"),zir=o(" \u2014 "),Yz=a("a"),Wir=o("TFRobertaModel"),Qir=o(" (RoBERTa model)"),Hir=l(),h8=a("li"),z1e=a("strong"),Uir=o("roformer"),Jir=o(" \u2014 "),Kz=a("a"),Yir=o("TFRoFormerModel"),Kir=o(" (RoFormer model)"),Zir=l(),p8=a("li"),W1e=a("strong"),edr=o("speech_to_text"),odr=o(" \u2014 "),Zz=a("a"),rdr=o("TFSpeech2TextModel"),tdr=o(" (Speech2Text model)"),adr=l(),u8=a("li"),Q1e=a("strong"),ndr=o("t5"),sdr=o(" \u2014 "),eW=a("a"),ldr=o("TFT5Model"),idr=o(" (T5 model)"),ddr=l(),_8=a("li"),H1e=a("strong"),cdr=o("tapas"),fdr=o(" \u2014 "),oW=a("a"),mdr=o("TFTapasModel"),gdr=o(" (TAPAS model)"),hdr=l(),b8=a("li"),U1e=a("strong"),pdr=o("transfo-xl"),udr=o(" \u2014 "),rW=a("a"),_dr=o("TFTransfoXLModel"),bdr=o(" (Transformer-XL model)"),vdr=l(),v8=a("li"),J1e=a("strong"),Fdr=o("vit"),Tdr=o(" \u2014 "),tW=a("a"),Mdr=o("TFViTModel"),Edr=o(" (ViT model)"),Cdr=l(),F8=a("li"),Y1e=a("strong"),wdr=o("vit_mae"),Adr=o(" \u2014 "),aW=a("a"),ydr=o("TFViTMAEModel"),Ldr=o(" (ViTMAE model)"),xdr=l(),T8=a("li"),K1e=a("strong"),$dr=o("wav2vec2"),kdr=o(" \u2014 "),nW=a("a"),Sdr=o("TFWav2Vec2Model"),Rdr=o(" (Wav2Vec2 model)"),Pdr=l(),M8=a("li"),Z1e=a("strong"),Bdr=o("xlm"),Idr=o(" \u2014 "),sW=a("a"),qdr=o("TFXLMModel"),Ndr=o(" (XLM model)"),jdr=l(),E8=a("li"),e2e=a("strong"),Ddr=o("xlm-roberta"),Gdr=o(" \u2014 "),lW=a("a"),Odr=o("TFXLMRobertaModel"),Vdr=o(" (XLM-RoBERTa model)"),Xdr=l(),C8=a("li"),o2e=a("strong"),zdr=o("xlnet"),Wdr=o(" \u2014 "),iW=a("a"),Qdr=o("TFXLNetModel"),Hdr=o(" (XLNet model)"),Udr=l(),F(w8.$$.fragment),Cqe=l(),Od=a("h2"),A8=a("a"),r2e=a("span"),F(XL.$$.fragment),Jdr=l(),t2e=a("span"),Ydr=o("TFAutoModelForPreTraining"),wqe=l(),Ko=a("div"),F(zL.$$.fragment),Kdr=l(),Vd=a("p"),Zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dW=a("a"),ecr=o("from_pretrained()"),ocr=o(" class method or the "),cW=a("a"),rcr=o("from_config()"),tcr=o(` class
method.`),acr=l(),WL=a("p"),ncr=o("This class cannot be instantiated directly using "),a2e=a("code"),scr=o("__init__()"),lcr=o(" (throws an error)."),icr=l(),Lt=a("div"),F(QL.$$.fragment),dcr=l(),n2e=a("p"),ccr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fcr=l(),Xd=a("p"),mcr=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),gcr=o("not"),hcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),pcr=o("from_pretrained()"),ucr=o(" to load the model weights."),_cr=l(),F(y8.$$.fragment),bcr=l(),Ar=a("div"),F(HL.$$.fragment),vcr=l(),l2e=a("p"),Fcr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tcr=l(),Za=a("p"),Mcr=o("The model class to instantiate is selected based on the "),i2e=a("code"),Ecr=o("model_type"),Ccr=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),wcr=o("pretrained_model_name_or_path"),Acr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),ycr=o("pretrained_model_name_or_path"),Lcr=o(":"),xcr=l(),se=a("ul"),L8=a("li"),f2e=a("strong"),$cr=o("albert"),kcr=o(" \u2014 "),mW=a("a"),Scr=o("TFAlbertForPreTraining"),Rcr=o(" (ALBERT model)"),Pcr=l(),x8=a("li"),m2e=a("strong"),Bcr=o("bart"),Icr=o(" \u2014 "),gW=a("a"),qcr=o("TFBartForConditionalGeneration"),Ncr=o(" (BART model)"),jcr=l(),$8=a("li"),g2e=a("strong"),Dcr=o("bert"),Gcr=o(" \u2014 "),hW=a("a"),Ocr=o("TFBertForPreTraining"),Vcr=o(" (BERT model)"),Xcr=l(),k8=a("li"),h2e=a("strong"),zcr=o("camembert"),Wcr=o(" \u2014 "),pW=a("a"),Qcr=o("TFCamembertForMaskedLM"),Hcr=o(" (CamemBERT model)"),Ucr=l(),S8=a("li"),p2e=a("strong"),Jcr=o("ctrl"),Ycr=o(" \u2014 "),uW=a("a"),Kcr=o("TFCTRLLMHeadModel"),Zcr=o(" (CTRL model)"),efr=l(),R8=a("li"),u2e=a("strong"),ofr=o("distilbert"),rfr=o(" \u2014 "),_W=a("a"),tfr=o("TFDistilBertForMaskedLM"),afr=o(" (DistilBERT model)"),nfr=l(),P8=a("li"),_2e=a("strong"),sfr=o("electra"),lfr=o(" \u2014 "),bW=a("a"),ifr=o("TFElectraForPreTraining"),dfr=o(" (ELECTRA model)"),cfr=l(),B8=a("li"),b2e=a("strong"),ffr=o("flaubert"),mfr=o(" \u2014 "),vW=a("a"),gfr=o("TFFlaubertWithLMHeadModel"),hfr=o(" (FlauBERT model)"),pfr=l(),I8=a("li"),v2e=a("strong"),ufr=o("funnel"),_fr=o(" \u2014 "),FW=a("a"),bfr=o("TFFunnelForPreTraining"),vfr=o(" (Funnel Transformer model)"),Ffr=l(),q8=a("li"),F2e=a("strong"),Tfr=o("gpt2"),Mfr=o(" \u2014 "),TW=a("a"),Efr=o("TFGPT2LMHeadModel"),Cfr=o(" (OpenAI GPT-2 model)"),wfr=l(),N8=a("li"),T2e=a("strong"),Afr=o("layoutlm"),yfr=o(" \u2014 "),MW=a("a"),Lfr=o("TFLayoutLMForMaskedLM"),xfr=o(" (LayoutLM model)"),$fr=l(),j8=a("li"),M2e=a("strong"),kfr=o("lxmert"),Sfr=o(" \u2014 "),EW=a("a"),Rfr=o("TFLxmertForPreTraining"),Pfr=o(" (LXMERT model)"),Bfr=l(),D8=a("li"),E2e=a("strong"),Ifr=o("mobilebert"),qfr=o(" \u2014 "),CW=a("a"),Nfr=o("TFMobileBertForPreTraining"),jfr=o(" (MobileBERT model)"),Dfr=l(),G8=a("li"),C2e=a("strong"),Gfr=o("mpnet"),Ofr=o(" \u2014 "),wW=a("a"),Vfr=o("TFMPNetForMaskedLM"),Xfr=o(" (MPNet model)"),zfr=l(),O8=a("li"),w2e=a("strong"),Wfr=o("openai-gpt"),Qfr=o(" \u2014 "),AW=a("a"),Hfr=o("TFOpenAIGPTLMHeadModel"),Ufr=o(" (OpenAI GPT model)"),Jfr=l(),V8=a("li"),A2e=a("strong"),Yfr=o("roberta"),Kfr=o(" \u2014 "),yW=a("a"),Zfr=o("TFRobertaForMaskedLM"),emr=o(" (RoBERTa model)"),omr=l(),X8=a("li"),y2e=a("strong"),rmr=o("t5"),tmr=o(" \u2014 "),LW=a("a"),amr=o("TFT5ForConditionalGeneration"),nmr=o(" (T5 model)"),smr=l(),z8=a("li"),L2e=a("strong"),lmr=o("tapas"),imr=o(" \u2014 "),xW=a("a"),dmr=o("TFTapasForMaskedLM"),cmr=o(" (TAPAS model)"),fmr=l(),W8=a("li"),x2e=a("strong"),mmr=o("transfo-xl"),gmr=o(" \u2014 "),$W=a("a"),hmr=o("TFTransfoXLLMHeadModel"),pmr=o(" (Transformer-XL model)"),umr=l(),Q8=a("li"),$2e=a("strong"),_mr=o("vit_mae"),bmr=o(" \u2014 "),kW=a("a"),vmr=o("TFViTMAEForPreTraining"),Fmr=o(" (ViTMAE model)"),Tmr=l(),H8=a("li"),k2e=a("strong"),Mmr=o("xlm"),Emr=o(" \u2014 "),SW=a("a"),Cmr=o("TFXLMWithLMHeadModel"),wmr=o(" (XLM model)"),Amr=l(),U8=a("li"),S2e=a("strong"),ymr=o("xlm-roberta"),Lmr=o(" \u2014 "),RW=a("a"),xmr=o("TFXLMRobertaForMaskedLM"),$mr=o(" (XLM-RoBERTa model)"),kmr=l(),J8=a("li"),R2e=a("strong"),Smr=o("xlnet"),Rmr=o(" \u2014 "),PW=a("a"),Pmr=o("TFXLNetLMHeadModel"),Bmr=o(" (XLNet model)"),Imr=l(),F(Y8.$$.fragment),Aqe=l(),zd=a("h2"),K8=a("a"),P2e=a("span"),F(UL.$$.fragment),qmr=l(),B2e=a("span"),Nmr=o("TFAutoModelForCausalLM"),yqe=l(),Zo=a("div"),F(JL.$$.fragment),jmr=l(),Wd=a("p"),Dmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BW=a("a"),Gmr=o("from_pretrained()"),Omr=o(" class method or the "),IW=a("a"),Vmr=o("from_config()"),Xmr=o(` class
method.`),zmr=l(),YL=a("p"),Wmr=o("This class cannot be instantiated directly using "),I2e=a("code"),Qmr=o("__init__()"),Hmr=o(" (throws an error)."),Umr=l(),xt=a("div"),F(KL.$$.fragment),Jmr=l(),q2e=a("p"),Ymr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kmr=l(),Qd=a("p"),Zmr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),egr=o("not"),ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),rgr=o("from_pretrained()"),tgr=o(" to load the model weights."),agr=l(),F(Z8.$$.fragment),ngr=l(),yr=a("div"),F(ZL.$$.fragment),sgr=l(),j2e=a("p"),lgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),igr=l(),en=a("p"),dgr=o("The model class to instantiate is selected based on the "),D2e=a("code"),cgr=o("model_type"),fgr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),hgr=o("pretrained_model_name_or_path"),pgr=o(":"),ugr=l(),Te=a("ul"),eM=a("li"),V2e=a("strong"),_gr=o("bert"),bgr=o(" \u2014 "),NW=a("a"),vgr=o("TFBertLMHeadModel"),Fgr=o(" (BERT model)"),Tgr=l(),oM=a("li"),X2e=a("strong"),Mgr=o("camembert"),Egr=o(" \u2014 "),jW=a("a"),Cgr=o("TFCamembertForCausalLM"),wgr=o(" (CamemBERT model)"),Agr=l(),rM=a("li"),z2e=a("strong"),ygr=o("ctrl"),Lgr=o(" \u2014 "),DW=a("a"),xgr=o("TFCTRLLMHeadModel"),$gr=o(" (CTRL model)"),kgr=l(),tM=a("li"),W2e=a("strong"),Sgr=o("gpt2"),Rgr=o(" \u2014 "),GW=a("a"),Pgr=o("TFGPT2LMHeadModel"),Bgr=o(" (OpenAI GPT-2 model)"),Igr=l(),aM=a("li"),Q2e=a("strong"),qgr=o("gptj"),Ngr=o(" \u2014 "),OW=a("a"),jgr=o("TFGPTJForCausalLM"),Dgr=o(" (GPT-J model)"),Ggr=l(),nM=a("li"),H2e=a("strong"),Ogr=o("openai-gpt"),Vgr=o(" \u2014 "),VW=a("a"),Xgr=o("TFOpenAIGPTLMHeadModel"),zgr=o(" (OpenAI GPT model)"),Wgr=l(),sM=a("li"),U2e=a("strong"),Qgr=o("rembert"),Hgr=o(" \u2014 "),XW=a("a"),Ugr=o("TFRemBertForCausalLM"),Jgr=o(" (RemBERT model)"),Ygr=l(),lM=a("li"),J2e=a("strong"),Kgr=o("roberta"),Zgr=o(" \u2014 "),zW=a("a"),ehr=o("TFRobertaForCausalLM"),ohr=o(" (RoBERTa model)"),rhr=l(),iM=a("li"),Y2e=a("strong"),thr=o("roformer"),ahr=o(" \u2014 "),WW=a("a"),nhr=o("TFRoFormerForCausalLM"),shr=o(" (RoFormer model)"),lhr=l(),dM=a("li"),K2e=a("strong"),ihr=o("transfo-xl"),dhr=o(" \u2014 "),QW=a("a"),chr=o("TFTransfoXLLMHeadModel"),fhr=o(" (Transformer-XL model)"),mhr=l(),cM=a("li"),Z2e=a("strong"),ghr=o("xlm"),hhr=o(" \u2014 "),HW=a("a"),phr=o("TFXLMWithLMHeadModel"),uhr=o(" (XLM model)"),_hr=l(),fM=a("li"),ebe=a("strong"),bhr=o("xlnet"),vhr=o(" \u2014 "),UW=a("a"),Fhr=o("TFXLNetLMHeadModel"),Thr=o(" (XLNet model)"),Mhr=l(),F(mM.$$.fragment),Lqe=l(),Hd=a("h2"),gM=a("a"),obe=a("span"),F(ex.$$.fragment),Ehr=l(),rbe=a("span"),Chr=o("TFAutoModelForImageClassification"),xqe=l(),er=a("div"),F(ox.$$.fragment),whr=l(),Ud=a("p"),Ahr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JW=a("a"),yhr=o("from_pretrained()"),Lhr=o(" class method or the "),YW=a("a"),xhr=o("from_config()"),$hr=o(` class
method.`),khr=l(),rx=a("p"),Shr=o("This class cannot be instantiated directly using "),tbe=a("code"),Rhr=o("__init__()"),Phr=o(" (throws an error)."),Bhr=l(),$t=a("div"),F(tx.$$.fragment),Ihr=l(),abe=a("p"),qhr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nhr=l(),Jd=a("p"),jhr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Dhr=o("not"),Ghr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Ohr=o("from_pretrained()"),Vhr=o(" to load the model weights."),Xhr=l(),F(hM.$$.fragment),zhr=l(),Lr=a("div"),F(ax.$$.fragment),Whr=l(),sbe=a("p"),Qhr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hhr=l(),on=a("p"),Uhr=o("The model class to instantiate is selected based on the "),lbe=a("code"),Jhr=o("model_type"),Yhr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),Khr=o("pretrained_model_name_or_path"),Zhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),epr=o("pretrained_model_name_or_path"),opr=o(":"),rpr=l(),Yd=a("ul"),pM=a("li"),cbe=a("strong"),tpr=o("convnext"),apr=o(" \u2014 "),ZW=a("a"),npr=o("TFConvNextForImageClassification"),spr=o(" (ConvNext model)"),lpr=l(),uM=a("li"),fbe=a("strong"),ipr=o("data2vec-vision"),dpr=o(" \u2014 "),eQ=a("a"),cpr=o("TFData2VecVisionForImageClassification"),fpr=o(" (Data2VecVision model)"),mpr=l(),_M=a("li"),mbe=a("strong"),gpr=o("vit"),hpr=o(" \u2014 "),oQ=a("a"),ppr=o("TFViTForImageClassification"),upr=o(" (ViT model)"),_pr=l(),F(bM.$$.fragment),$qe=l(),Kd=a("h2"),vM=a("a"),gbe=a("span"),F(nx.$$.fragment),bpr=l(),hbe=a("span"),vpr=o("TFAutoModelForMaskedLM"),kqe=l(),or=a("div"),F(sx.$$.fragment),Fpr=l(),Zd=a("p"),Tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rQ=a("a"),Mpr=o("from_pretrained()"),Epr=o(" class method or the "),tQ=a("a"),Cpr=o("from_config()"),wpr=o(` class
method.`),Apr=l(),lx=a("p"),ypr=o("This class cannot be instantiated directly using "),pbe=a("code"),Lpr=o("__init__()"),xpr=o(" (throws an error)."),$pr=l(),kt=a("div"),F(ix.$$.fragment),kpr=l(),ube=a("p"),Spr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rpr=l(),ec=a("p"),Ppr=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),Bpr=o("not"),Ipr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),qpr=o("from_pretrained()"),Npr=o(" to load the model weights."),jpr=l(),F(FM.$$.fragment),Dpr=l(),xr=a("div"),F(dx.$$.fragment),Gpr=l(),bbe=a("p"),Opr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vpr=l(),rn=a("p"),Xpr=o("The model class to instantiate is selected based on the "),vbe=a("code"),zpr=o("model_type"),Wpr=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),Qpr=o("pretrained_model_name_or_path"),Hpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),Upr=o("pretrained_model_name_or_path"),Jpr=o(":"),Ypr=l(),ie=a("ul"),TM=a("li"),Mbe=a("strong"),Kpr=o("albert"),Zpr=o(" \u2014 "),nQ=a("a"),eur=o("TFAlbertForMaskedLM"),our=o(" (ALBERT model)"),rur=l(),MM=a("li"),Ebe=a("strong"),tur=o("bert"),aur=o(" \u2014 "),sQ=a("a"),nur=o("TFBertForMaskedLM"),sur=o(" (BERT model)"),lur=l(),EM=a("li"),Cbe=a("strong"),iur=o("camembert"),dur=o(" \u2014 "),lQ=a("a"),cur=o("TFCamembertForMaskedLM"),fur=o(" (CamemBERT model)"),mur=l(),CM=a("li"),wbe=a("strong"),gur=o("convbert"),hur=o(" \u2014 "),iQ=a("a"),pur=o("TFConvBertForMaskedLM"),uur=o(" (ConvBERT model)"),_ur=l(),wM=a("li"),Abe=a("strong"),bur=o("deberta"),vur=o(" \u2014 "),dQ=a("a"),Fur=o("TFDebertaForMaskedLM"),Tur=o(" (DeBERTa model)"),Mur=l(),AM=a("li"),ybe=a("strong"),Eur=o("deberta-v2"),Cur=o(" \u2014 "),cQ=a("a"),wur=o("TFDebertaV2ForMaskedLM"),Aur=o(" (DeBERTa-v2 model)"),yur=l(),yM=a("li"),Lbe=a("strong"),Lur=o("distilbert"),xur=o(" \u2014 "),fQ=a("a"),$ur=o("TFDistilBertForMaskedLM"),kur=o(" (DistilBERT model)"),Sur=l(),LM=a("li"),xbe=a("strong"),Rur=o("electra"),Pur=o(" \u2014 "),mQ=a("a"),Bur=o("TFElectraForMaskedLM"),Iur=o(" (ELECTRA model)"),qur=l(),xM=a("li"),$be=a("strong"),Nur=o("flaubert"),jur=o(" \u2014 "),gQ=a("a"),Dur=o("TFFlaubertWithLMHeadModel"),Gur=o(" (FlauBERT model)"),Our=l(),$M=a("li"),kbe=a("strong"),Vur=o("funnel"),Xur=o(" \u2014 "),hQ=a("a"),zur=o("TFFunnelForMaskedLM"),Wur=o(" (Funnel Transformer model)"),Qur=l(),kM=a("li"),Sbe=a("strong"),Hur=o("layoutlm"),Uur=o(" \u2014 "),pQ=a("a"),Jur=o("TFLayoutLMForMaskedLM"),Yur=o(" (LayoutLM model)"),Kur=l(),SM=a("li"),Rbe=a("strong"),Zur=o("longformer"),e_r=o(" \u2014 "),uQ=a("a"),o_r=o("TFLongformerForMaskedLM"),r_r=o(" (Longformer model)"),t_r=l(),RM=a("li"),Pbe=a("strong"),a_r=o("mobilebert"),n_r=o(" \u2014 "),_Q=a("a"),s_r=o("TFMobileBertForMaskedLM"),l_r=o(" (MobileBERT model)"),i_r=l(),PM=a("li"),Bbe=a("strong"),d_r=o("mpnet"),c_r=o(" \u2014 "),bQ=a("a"),f_r=o("TFMPNetForMaskedLM"),m_r=o(" (MPNet model)"),g_r=l(),BM=a("li"),Ibe=a("strong"),h_r=o("rembert"),p_r=o(" \u2014 "),vQ=a("a"),u_r=o("TFRemBertForMaskedLM"),__r=o(" (RemBERT model)"),b_r=l(),IM=a("li"),qbe=a("strong"),v_r=o("roberta"),F_r=o(" \u2014 "),FQ=a("a"),T_r=o("TFRobertaForMaskedLM"),M_r=o(" (RoBERTa model)"),E_r=l(),qM=a("li"),Nbe=a("strong"),C_r=o("roformer"),w_r=o(" \u2014 "),TQ=a("a"),A_r=o("TFRoFormerForMaskedLM"),y_r=o(" (RoFormer model)"),L_r=l(),NM=a("li"),jbe=a("strong"),x_r=o("tapas"),$_r=o(" \u2014 "),MQ=a("a"),k_r=o("TFTapasForMaskedLM"),S_r=o(" (TAPAS model)"),R_r=l(),jM=a("li"),Dbe=a("strong"),P_r=o("xlm"),B_r=o(" \u2014 "),EQ=a("a"),I_r=o("TFXLMWithLMHeadModel"),q_r=o(" (XLM model)"),N_r=l(),DM=a("li"),Gbe=a("strong"),j_r=o("xlm-roberta"),D_r=o(" \u2014 "),CQ=a("a"),G_r=o("TFXLMRobertaForMaskedLM"),O_r=o(" (XLM-RoBERTa model)"),V_r=l(),F(GM.$$.fragment),Sqe=l(),oc=a("h2"),OM=a("a"),Obe=a("span"),F(cx.$$.fragment),X_r=l(),Vbe=a("span"),z_r=o("TFAutoModelForSeq2SeqLM"),Rqe=l(),rr=a("div"),F(fx.$$.fragment),W_r=l(),rc=a("p"),Q_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wQ=a("a"),H_r=o("from_pretrained()"),U_r=o(" class method or the "),AQ=a("a"),J_r=o("from_config()"),Y_r=o(` class
method.`),K_r=l(),mx=a("p"),Z_r=o("This class cannot be instantiated directly using "),Xbe=a("code"),e1r=o("__init__()"),o1r=o(" (throws an error)."),r1r=l(),St=a("div"),F(gx.$$.fragment),t1r=l(),zbe=a("p"),a1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n1r=l(),tc=a("p"),s1r=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),l1r=o("not"),i1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),d1r=o("from_pretrained()"),c1r=o(" to load the model weights."),f1r=l(),F(VM.$$.fragment),m1r=l(),$r=a("div"),F(hx.$$.fragment),g1r=l(),Qbe=a("p"),h1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p1r=l(),tn=a("p"),u1r=o("The model class to instantiate is selected based on the "),Hbe=a("code"),_1r=o("model_type"),b1r=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),v1r=o("pretrained_model_name_or_path"),F1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(":"),E1r=l(),ye=a("ul"),XM=a("li"),Ybe=a("strong"),C1r=o("bart"),w1r=o(" \u2014 "),LQ=a("a"),A1r=o("TFBartForConditionalGeneration"),y1r=o(" (BART model)"),L1r=l(),zM=a("li"),Kbe=a("strong"),x1r=o("blenderbot"),$1r=o(" \u2014 "),xQ=a("a"),k1r=o("TFBlenderbotForConditionalGeneration"),S1r=o(" (Blenderbot model)"),R1r=l(),WM=a("li"),Zbe=a("strong"),P1r=o("blenderbot-small"),B1r=o(" \u2014 "),$Q=a("a"),I1r=o("TFBlenderbotSmallForConditionalGeneration"),q1r=o(" (BlenderbotSmall model)"),N1r=l(),QM=a("li"),eve=a("strong"),j1r=o("encoder-decoder"),D1r=o(" \u2014 "),kQ=a("a"),G1r=o("TFEncoderDecoderModel"),O1r=o(" (Encoder decoder model)"),V1r=l(),HM=a("li"),ove=a("strong"),X1r=o("led"),z1r=o(" \u2014 "),SQ=a("a"),W1r=o("TFLEDForConditionalGeneration"),Q1r=o(" (LED model)"),H1r=l(),UM=a("li"),rve=a("strong"),U1r=o("marian"),J1r=o(" \u2014 "),RQ=a("a"),Y1r=o("TFMarianMTModel"),K1r=o(" (Marian model)"),Z1r=l(),JM=a("li"),tve=a("strong"),e2r=o("mbart"),o2r=o(" \u2014 "),PQ=a("a"),r2r=o("TFMBartForConditionalGeneration"),t2r=o(" (mBART model)"),a2r=l(),YM=a("li"),ave=a("strong"),n2r=o("mt5"),s2r=o(" \u2014 "),BQ=a("a"),l2r=o("TFMT5ForConditionalGeneration"),i2r=o(" (mT5 model)"),d2r=l(),KM=a("li"),nve=a("strong"),c2r=o("pegasus"),f2r=o(" \u2014 "),IQ=a("a"),m2r=o("TFPegasusForConditionalGeneration"),g2r=o(" (Pegasus model)"),h2r=l(),ZM=a("li"),sve=a("strong"),p2r=o("t5"),u2r=o(" \u2014 "),qQ=a("a"),_2r=o("TFT5ForConditionalGeneration"),b2r=o(" (T5 model)"),v2r=l(),F(e4.$$.fragment),Pqe=l(),ac=a("h2"),o4=a("a"),lve=a("span"),F(px.$$.fragment),F2r=l(),ive=a("span"),T2r=o("TFAutoModelForSequenceClassification"),Bqe=l(),tr=a("div"),F(ux.$$.fragment),M2r=l(),nc=a("p"),E2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NQ=a("a"),C2r=o("from_pretrained()"),w2r=o(" class method or the "),jQ=a("a"),A2r=o("from_config()"),y2r=o(` class
method.`),L2r=l(),_x=a("p"),x2r=o("This class cannot be instantiated directly using "),dve=a("code"),$2r=o("__init__()"),k2r=o(" (throws an error)."),S2r=l(),Rt=a("div"),F(bx.$$.fragment),R2r=l(),cve=a("p"),P2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B2r=l(),sc=a("p"),I2r=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),q2r=o("not"),N2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),j2r=o("from_pretrained()"),D2r=o(" to load the model weights."),G2r=l(),F(r4.$$.fragment),O2r=l(),kr=a("div"),F(vx.$$.fragment),V2r=l(),mve=a("p"),X2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z2r=l(),an=a("p"),W2r=o("The model class to instantiate is selected based on the "),gve=a("code"),Q2r=o("model_type"),H2r=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),U2r=o("pretrained_model_name_or_path"),J2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(":"),Z2r=l(),ee=a("ul"),t4=a("li"),uve=a("strong"),ebr=o("albert"),obr=o(" \u2014 "),GQ=a("a"),rbr=o("TFAlbertForSequenceClassification"),tbr=o(" (ALBERT model)"),abr=l(),a4=a("li"),_ve=a("strong"),nbr=o("bert"),sbr=o(" \u2014 "),OQ=a("a"),lbr=o("TFBertForSequenceClassification"),ibr=o(" (BERT model)"),dbr=l(),n4=a("li"),bve=a("strong"),cbr=o("camembert"),fbr=o(" \u2014 "),VQ=a("a"),mbr=o("TFCamembertForSequenceClassification"),gbr=o(" (CamemBERT model)"),hbr=l(),s4=a("li"),vve=a("strong"),pbr=o("convbert"),ubr=o(" \u2014 "),XQ=a("a"),_br=o("TFConvBertForSequenceClassification"),bbr=o(" (ConvBERT model)"),vbr=l(),l4=a("li"),Fve=a("strong"),Fbr=o("ctrl"),Tbr=o(" \u2014 "),zQ=a("a"),Mbr=o("TFCTRLForSequenceClassification"),Ebr=o(" (CTRL model)"),Cbr=l(),i4=a("li"),Tve=a("strong"),wbr=o("deberta"),Abr=o(" \u2014 "),WQ=a("a"),ybr=o("TFDebertaForSequenceClassification"),Lbr=o(" (DeBERTa model)"),xbr=l(),d4=a("li"),Mve=a("strong"),$br=o("deberta-v2"),kbr=o(" \u2014 "),QQ=a("a"),Sbr=o("TFDebertaV2ForSequenceClassification"),Rbr=o(" (DeBERTa-v2 model)"),Pbr=l(),c4=a("li"),Eve=a("strong"),Bbr=o("distilbert"),Ibr=o(" \u2014 "),HQ=a("a"),qbr=o("TFDistilBertForSequenceClassification"),Nbr=o(" (DistilBERT model)"),jbr=l(),f4=a("li"),Cve=a("strong"),Dbr=o("electra"),Gbr=o(" \u2014 "),UQ=a("a"),Obr=o("TFElectraForSequenceClassification"),Vbr=o(" (ELECTRA model)"),Xbr=l(),m4=a("li"),wve=a("strong"),zbr=o("flaubert"),Wbr=o(" \u2014 "),JQ=a("a"),Qbr=o("TFFlaubertForSequenceClassification"),Hbr=o(" (FlauBERT model)"),Ubr=l(),g4=a("li"),Ave=a("strong"),Jbr=o("funnel"),Ybr=o(" \u2014 "),YQ=a("a"),Kbr=o("TFFunnelForSequenceClassification"),Zbr=o(" (Funnel Transformer model)"),evr=l(),h4=a("li"),yve=a("strong"),ovr=o("gpt2"),rvr=o(" \u2014 "),KQ=a("a"),tvr=o("TFGPT2ForSequenceClassification"),avr=o(" (OpenAI GPT-2 model)"),nvr=l(),p4=a("li"),Lve=a("strong"),svr=o("gptj"),lvr=o(" \u2014 "),ZQ=a("a"),ivr=o("TFGPTJForSequenceClassification"),dvr=o(" (GPT-J model)"),cvr=l(),u4=a("li"),xve=a("strong"),fvr=o("layoutlm"),mvr=o(" \u2014 "),eH=a("a"),gvr=o("TFLayoutLMForSequenceClassification"),hvr=o(" (LayoutLM model)"),pvr=l(),_4=a("li"),$ve=a("strong"),uvr=o("longformer"),_vr=o(" \u2014 "),oH=a("a"),bvr=o("TFLongformerForSequenceClassification"),vvr=o(" (Longformer model)"),Fvr=l(),b4=a("li"),kve=a("strong"),Tvr=o("mobilebert"),Mvr=o(" \u2014 "),rH=a("a"),Evr=o("TFMobileBertForSequenceClassification"),Cvr=o(" (MobileBERT model)"),wvr=l(),v4=a("li"),Sve=a("strong"),Avr=o("mpnet"),yvr=o(" \u2014 "),tH=a("a"),Lvr=o("TFMPNetForSequenceClassification"),xvr=o(" (MPNet model)"),$vr=l(),F4=a("li"),Rve=a("strong"),kvr=o("openai-gpt"),Svr=o(" \u2014 "),aH=a("a"),Rvr=o("TFOpenAIGPTForSequenceClassification"),Pvr=o(" (OpenAI GPT model)"),Bvr=l(),T4=a("li"),Pve=a("strong"),Ivr=o("rembert"),qvr=o(" \u2014 "),nH=a("a"),Nvr=o("TFRemBertForSequenceClassification"),jvr=o(" (RemBERT model)"),Dvr=l(),M4=a("li"),Bve=a("strong"),Gvr=o("roberta"),Ovr=o(" \u2014 "),sH=a("a"),Vvr=o("TFRobertaForSequenceClassification"),Xvr=o(" (RoBERTa model)"),zvr=l(),E4=a("li"),Ive=a("strong"),Wvr=o("roformer"),Qvr=o(" \u2014 "),lH=a("a"),Hvr=o("TFRoFormerForSequenceClassification"),Uvr=o(" (RoFormer model)"),Jvr=l(),C4=a("li"),qve=a("strong"),Yvr=o("tapas"),Kvr=o(" \u2014 "),iH=a("a"),Zvr=o("TFTapasForSequenceClassification"),eFr=o(" (TAPAS model)"),oFr=l(),w4=a("li"),Nve=a("strong"),rFr=o("transfo-xl"),tFr=o(" \u2014 "),dH=a("a"),aFr=o("TFTransfoXLForSequenceClassification"),nFr=o(" (Transformer-XL model)"),sFr=l(),A4=a("li"),jve=a("strong"),lFr=o("xlm"),iFr=o(" \u2014 "),cH=a("a"),dFr=o("TFXLMForSequenceClassification"),cFr=o(" (XLM model)"),fFr=l(),y4=a("li"),Dve=a("strong"),mFr=o("xlm-roberta"),gFr=o(" \u2014 "),fH=a("a"),hFr=o("TFXLMRobertaForSequenceClassification"),pFr=o(" (XLM-RoBERTa model)"),uFr=l(),L4=a("li"),Gve=a("strong"),_Fr=o("xlnet"),bFr=o(" \u2014 "),mH=a("a"),vFr=o("TFXLNetForSequenceClassification"),FFr=o(" (XLNet model)"),TFr=l(),F(x4.$$.fragment),Iqe=l(),lc=a("h2"),$4=a("a"),Ove=a("span"),F(Fx.$$.fragment),MFr=l(),Vve=a("span"),EFr=o("TFAutoModelForMultipleChoice"),qqe=l(),ar=a("div"),F(Tx.$$.fragment),CFr=l(),ic=a("p"),wFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gH=a("a"),AFr=o("from_pretrained()"),yFr=o(" class method or the "),hH=a("a"),LFr=o("from_config()"),xFr=o(` class
method.`),$Fr=l(),Mx=a("p"),kFr=o("This class cannot be instantiated directly using "),Xve=a("code"),SFr=o("__init__()"),RFr=o(" (throws an error)."),PFr=l(),Pt=a("div"),F(Ex.$$.fragment),BFr=l(),zve=a("p"),IFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qFr=l(),dc=a("p"),NFr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),jFr=o("not"),DFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),GFr=o("from_pretrained()"),OFr=o(" to load the model weights."),VFr=l(),F(k4.$$.fragment),XFr=l(),Sr=a("div"),F(Cx.$$.fragment),zFr=l(),Qve=a("p"),WFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QFr=l(),nn=a("p"),HFr=o("The model class to instantiate is selected based on the "),Hve=a("code"),UFr=o("model_type"),JFr=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),YFr=o("pretrained_model_name_or_path"),KFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),ZFr=o("pretrained_model_name_or_path"),e6r=o(":"),o6r=l(),he=a("ul"),S4=a("li"),Yve=a("strong"),r6r=o("albert"),t6r=o(" \u2014 "),uH=a("a"),a6r=o("TFAlbertForMultipleChoice"),n6r=o(" (ALBERT model)"),s6r=l(),R4=a("li"),Kve=a("strong"),l6r=o("bert"),i6r=o(" \u2014 "),_H=a("a"),d6r=o("TFBertForMultipleChoice"),c6r=o(" (BERT model)"),f6r=l(),P4=a("li"),Zve=a("strong"),m6r=o("camembert"),g6r=o(" \u2014 "),bH=a("a"),h6r=o("TFCamembertForMultipleChoice"),p6r=o(" (CamemBERT model)"),u6r=l(),B4=a("li"),eFe=a("strong"),_6r=o("convbert"),b6r=o(" \u2014 "),vH=a("a"),v6r=o("TFConvBertForMultipleChoice"),F6r=o(" (ConvBERT model)"),T6r=l(),I4=a("li"),oFe=a("strong"),M6r=o("distilbert"),E6r=o(" \u2014 "),FH=a("a"),C6r=o("TFDistilBertForMultipleChoice"),w6r=o(" (DistilBERT model)"),A6r=l(),q4=a("li"),rFe=a("strong"),y6r=o("electra"),L6r=o(" \u2014 "),TH=a("a"),x6r=o("TFElectraForMultipleChoice"),$6r=o(" (ELECTRA model)"),k6r=l(),N4=a("li"),tFe=a("strong"),S6r=o("flaubert"),R6r=o(" \u2014 "),MH=a("a"),P6r=o("TFFlaubertForMultipleChoice"),B6r=o(" (FlauBERT model)"),I6r=l(),j4=a("li"),aFe=a("strong"),q6r=o("funnel"),N6r=o(" \u2014 "),EH=a("a"),j6r=o("TFFunnelForMultipleChoice"),D6r=o(" (Funnel Transformer model)"),G6r=l(),D4=a("li"),nFe=a("strong"),O6r=o("longformer"),V6r=o(" \u2014 "),CH=a("a"),X6r=o("TFLongformerForMultipleChoice"),z6r=o(" (Longformer model)"),W6r=l(),G4=a("li"),sFe=a("strong"),Q6r=o("mobilebert"),H6r=o(" \u2014 "),wH=a("a"),U6r=o("TFMobileBertForMultipleChoice"),J6r=o(" (MobileBERT model)"),Y6r=l(),O4=a("li"),lFe=a("strong"),K6r=o("mpnet"),Z6r=o(" \u2014 "),AH=a("a"),eTr=o("TFMPNetForMultipleChoice"),oTr=o(" (MPNet model)"),rTr=l(),V4=a("li"),iFe=a("strong"),tTr=o("rembert"),aTr=o(" \u2014 "),yH=a("a"),nTr=o("TFRemBertForMultipleChoice"),sTr=o(" (RemBERT model)"),lTr=l(),X4=a("li"),dFe=a("strong"),iTr=o("roberta"),dTr=o(" \u2014 "),LH=a("a"),cTr=o("TFRobertaForMultipleChoice"),fTr=o(" (RoBERTa model)"),mTr=l(),z4=a("li"),cFe=a("strong"),gTr=o("roformer"),hTr=o(" \u2014 "),xH=a("a"),pTr=o("TFRoFormerForMultipleChoice"),uTr=o(" (RoFormer model)"),_Tr=l(),W4=a("li"),fFe=a("strong"),bTr=o("xlm"),vTr=o(" \u2014 "),$H=a("a"),FTr=o("TFXLMForMultipleChoice"),TTr=o(" (XLM model)"),MTr=l(),Q4=a("li"),mFe=a("strong"),ETr=o("xlm-roberta"),CTr=o(" \u2014 "),kH=a("a"),wTr=o("TFXLMRobertaForMultipleChoice"),ATr=o(" (XLM-RoBERTa model)"),yTr=l(),H4=a("li"),gFe=a("strong"),LTr=o("xlnet"),xTr=o(" \u2014 "),SH=a("a"),$Tr=o("TFXLNetForMultipleChoice"),kTr=o(" (XLNet model)"),STr=l(),F(U4.$$.fragment),Nqe=l(),cc=a("h2"),J4=a("a"),hFe=a("span"),F(wx.$$.fragment),RTr=l(),pFe=a("span"),PTr=o("TFAutoModelForNextSentencePrediction"),jqe=l(),nr=a("div"),F(Ax.$$.fragment),BTr=l(),fc=a("p"),ITr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RH=a("a"),qTr=o("from_pretrained()"),NTr=o(" class method or the "),PH=a("a"),jTr=o("from_config()"),DTr=o(` class
method.`),GTr=l(),yx=a("p"),OTr=o("This class cannot be instantiated directly using "),uFe=a("code"),VTr=o("__init__()"),XTr=o(" (throws an error)."),zTr=l(),Bt=a("div"),F(Lx.$$.fragment),WTr=l(),_Fe=a("p"),QTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HTr=l(),mc=a("p"),UTr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),JTr=o("not"),YTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),KTr=o("from_pretrained()"),ZTr=o(" to load the model weights."),e8r=l(),F(Y4.$$.fragment),o8r=l(),Rr=a("div"),F(xx.$$.fragment),r8r=l(),vFe=a("p"),t8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),a8r=l(),sn=a("p"),n8r=o("The model class to instantiate is selected based on the "),FFe=a("code"),s8r=o("model_type"),l8r=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),i8r=o("pretrained_model_name_or_path"),d8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(":"),m8r=l(),$x=a("ul"),K4=a("li"),EFe=a("strong"),g8r=o("bert"),h8r=o(" \u2014 "),IH=a("a"),p8r=o("TFBertForNextSentencePrediction"),u8r=o(" (BERT model)"),_8r=l(),Z4=a("li"),CFe=a("strong"),b8r=o("mobilebert"),v8r=o(" \u2014 "),qH=a("a"),F8r=o("TFMobileBertForNextSentencePrediction"),T8r=o(" (MobileBERT model)"),M8r=l(),F(eE.$$.fragment),Dqe=l(),gc=a("h2"),oE=a("a"),wFe=a("span"),F(kx.$$.fragment),E8r=l(),AFe=a("span"),C8r=o("TFAutoModelForTableQuestionAnswering"),Gqe=l(),sr=a("div"),F(Sx.$$.fragment),w8r=l(),hc=a("p"),A8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NH=a("a"),y8r=o("from_pretrained()"),L8r=o(" class method or the "),jH=a("a"),x8r=o("from_config()"),$8r=o(` class
method.`),k8r=l(),Rx=a("p"),S8r=o("This class cannot be instantiated directly using "),yFe=a("code"),R8r=o("__init__()"),P8r=o(" (throws an error)."),B8r=l(),It=a("div"),F(Px.$$.fragment),I8r=l(),LFe=a("p"),q8r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N8r=l(),pc=a("p"),j8r=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),D8r=o("not"),G8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),O8r=o("from_pretrained()"),V8r=o(" to load the model weights."),X8r=l(),F(rE.$$.fragment),z8r=l(),Pr=a("div"),F(Bx.$$.fragment),W8r=l(),$Fe=a("p"),Q8r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),H8r=l(),ln=a("p"),U8r=o("The model class to instantiate is selected based on the "),kFe=a("code"),J8r=o("model_type"),Y8r=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(":"),rMr=l(),PFe=a("ul"),tE=a("li"),BFe=a("strong"),tMr=o("tapas"),aMr=o(" \u2014 "),GH=a("a"),nMr=o("TFTapasForQuestionAnswering"),sMr=o(" (TAPAS model)"),lMr=l(),F(aE.$$.fragment),Oqe=l(),uc=a("h2"),nE=a("a"),IFe=a("span"),F(Ix.$$.fragment),iMr=l(),qFe=a("span"),dMr=o("TFAutoModelForTokenClassification"),Vqe=l(),lr=a("div"),F(qx.$$.fragment),cMr=l(),_c=a("p"),fMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=a("a"),mMr=o("from_pretrained()"),gMr=o(" class method or the "),VH=a("a"),hMr=o("from_config()"),pMr=o(` class
method.`),uMr=l(),Nx=a("p"),_Mr=o("This class cannot be instantiated directly using "),NFe=a("code"),bMr=o("__init__()"),vMr=o(" (throws an error)."),FMr=l(),qt=a("div"),F(jx.$$.fragment),TMr=l(),jFe=a("p"),MMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EMr=l(),bc=a("p"),CMr=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),wMr=o("not"),AMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),yMr=o("from_pretrained()"),LMr=o(" to load the model weights."),xMr=l(),F(sE.$$.fragment),$Mr=l(),Br=a("div"),F(Dx.$$.fragment),kMr=l(),GFe=a("p"),SMr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RMr=l(),dn=a("p"),PMr=o("The model class to instantiate is selected based on the "),OFe=a("code"),BMr=o("model_type"),IMr=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),qMr=o("pretrained_model_name_or_path"),NMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),jMr=o("pretrained_model_name_or_path"),DMr=o(":"),GMr=l(),de=a("ul"),lE=a("li"),zFe=a("strong"),OMr=o("albert"),VMr=o(" \u2014 "),zH=a("a"),XMr=o("TFAlbertForTokenClassification"),zMr=o(" (ALBERT model)"),WMr=l(),iE=a("li"),WFe=a("strong"),QMr=o("bert"),HMr=o(" \u2014 "),WH=a("a"),UMr=o("TFBertForTokenClassification"),JMr=o(" (BERT model)"),YMr=l(),dE=a("li"),QFe=a("strong"),KMr=o("camembert"),ZMr=o(" \u2014 "),QH=a("a"),e4r=o("TFCamembertForTokenClassification"),o4r=o(" (CamemBERT model)"),r4r=l(),cE=a("li"),HFe=a("strong"),t4r=o("convbert"),a4r=o(" \u2014 "),HH=a("a"),n4r=o("TFConvBertForTokenClassification"),s4r=o(" (ConvBERT model)"),l4r=l(),fE=a("li"),UFe=a("strong"),i4r=o("deberta"),d4r=o(" \u2014 "),UH=a("a"),c4r=o("TFDebertaForTokenClassification"),f4r=o(" (DeBERTa model)"),m4r=l(),mE=a("li"),JFe=a("strong"),g4r=o("deberta-v2"),h4r=o(" \u2014 "),JH=a("a"),p4r=o("TFDebertaV2ForTokenClassification"),u4r=o(" (DeBERTa-v2 model)"),_4r=l(),gE=a("li"),YFe=a("strong"),b4r=o("distilbert"),v4r=o(" \u2014 "),YH=a("a"),F4r=o("TFDistilBertForTokenClassification"),T4r=o(" (DistilBERT model)"),M4r=l(),hE=a("li"),KFe=a("strong"),E4r=o("electra"),C4r=o(" \u2014 "),KH=a("a"),w4r=o("TFElectraForTokenClassification"),A4r=o(" (ELECTRA model)"),y4r=l(),pE=a("li"),ZFe=a("strong"),L4r=o("flaubert"),x4r=o(" \u2014 "),ZH=a("a"),$4r=o("TFFlaubertForTokenClassification"),k4r=o(" (FlauBERT model)"),S4r=l(),uE=a("li"),e6e=a("strong"),R4r=o("funnel"),P4r=o(" \u2014 "),eU=a("a"),B4r=o("TFFunnelForTokenClassification"),I4r=o(" (Funnel Transformer model)"),q4r=l(),_E=a("li"),o6e=a("strong"),N4r=o("layoutlm"),j4r=o(" \u2014 "),oU=a("a"),D4r=o("TFLayoutLMForTokenClassification"),G4r=o(" (LayoutLM model)"),O4r=l(),bE=a("li"),r6e=a("strong"),V4r=o("longformer"),X4r=o(" \u2014 "),rU=a("a"),z4r=o("TFLongformerForTokenClassification"),W4r=o(" (Longformer model)"),Q4r=l(),vE=a("li"),t6e=a("strong"),H4r=o("mobilebert"),U4r=o(" \u2014 "),tU=a("a"),J4r=o("TFMobileBertForTokenClassification"),Y4r=o(" (MobileBERT model)"),K4r=l(),FE=a("li"),a6e=a("strong"),Z4r=o("mpnet"),eEr=o(" \u2014 "),aU=a("a"),oEr=o("TFMPNetForTokenClassification"),rEr=o(" (MPNet model)"),tEr=l(),TE=a("li"),n6e=a("strong"),aEr=o("rembert"),nEr=o(" \u2014 "),nU=a("a"),sEr=o("TFRemBertForTokenClassification"),lEr=o(" (RemBERT model)"),iEr=l(),ME=a("li"),s6e=a("strong"),dEr=o("roberta"),cEr=o(" \u2014 "),sU=a("a"),fEr=o("TFRobertaForTokenClassification"),mEr=o(" (RoBERTa model)"),gEr=l(),EE=a("li"),l6e=a("strong"),hEr=o("roformer"),pEr=o(" \u2014 "),lU=a("a"),uEr=o("TFRoFormerForTokenClassification"),_Er=o(" (RoFormer model)"),bEr=l(),CE=a("li"),i6e=a("strong"),vEr=o("xlm"),FEr=o(" \u2014 "),iU=a("a"),TEr=o("TFXLMForTokenClassification"),MEr=o(" (XLM model)"),EEr=l(),wE=a("li"),d6e=a("strong"),CEr=o("xlm-roberta"),wEr=o(" \u2014 "),dU=a("a"),AEr=o("TFXLMRobertaForTokenClassification"),yEr=o(" (XLM-RoBERTa model)"),LEr=l(),AE=a("li"),c6e=a("strong"),xEr=o("xlnet"),$Er=o(" \u2014 "),cU=a("a"),kEr=o("TFXLNetForTokenClassification"),SEr=o(" (XLNet model)"),REr=l(),F(yE.$$.fragment),Xqe=l(),vc=a("h2"),LE=a("a"),f6e=a("span"),F(Gx.$$.fragment),PEr=l(),m6e=a("span"),BEr=o("TFAutoModelForQuestionAnswering"),zqe=l(),ir=a("div"),F(Ox.$$.fragment),IEr=l(),Fc=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fU=a("a"),NEr=o("from_pretrained()"),jEr=o(" class method or the "),mU=a("a"),DEr=o("from_config()"),GEr=o(` class
method.`),OEr=l(),Vx=a("p"),VEr=o("This class cannot be instantiated directly using "),g6e=a("code"),XEr=o("__init__()"),zEr=o(" (throws an error)."),WEr=l(),Nt=a("div"),F(Xx.$$.fragment),QEr=l(),h6e=a("p"),HEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UEr=l(),Tc=a("p"),JEr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),YEr=o("not"),KEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),ZEr=o("from_pretrained()"),eCr=o(" to load the model weights."),oCr=l(),F(xE.$$.fragment),rCr=l(),Ir=a("div"),F(zx.$$.fragment),tCr=l(),u6e=a("p"),aCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nCr=l(),cn=a("p"),sCr=o("The model class to instantiate is selected based on the "),_6e=a("code"),lCr=o("model_type"),iCr=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),dCr=o("pretrained_model_name_or_path"),cCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),fCr=o("pretrained_model_name_or_path"),mCr=o(":"),gCr=l(),ce=a("ul"),$E=a("li"),F6e=a("strong"),hCr=o("albert"),pCr=o(" \u2014 "),hU=a("a"),uCr=o("TFAlbertForQuestionAnswering"),_Cr=o(" (ALBERT model)"),bCr=l(),kE=a("li"),T6e=a("strong"),vCr=o("bert"),FCr=o(" \u2014 "),pU=a("a"),TCr=o("TFBertForQuestionAnswering"),MCr=o(" (BERT model)"),ECr=l(),SE=a("li"),M6e=a("strong"),CCr=o("camembert"),wCr=o(" \u2014 "),uU=a("a"),ACr=o("TFCamembertForQuestionAnswering"),yCr=o(" (CamemBERT model)"),LCr=l(),RE=a("li"),E6e=a("strong"),xCr=o("convbert"),$Cr=o(" \u2014 "),_U=a("a"),kCr=o("TFConvBertForQuestionAnswering"),SCr=o(" (ConvBERT model)"),RCr=l(),PE=a("li"),C6e=a("strong"),PCr=o("deberta"),BCr=o(" \u2014 "),bU=a("a"),ICr=o("TFDebertaForQuestionAnswering"),qCr=o(" (DeBERTa model)"),NCr=l(),BE=a("li"),w6e=a("strong"),jCr=o("deberta-v2"),DCr=o(" \u2014 "),vU=a("a"),GCr=o("TFDebertaV2ForQuestionAnswering"),OCr=o(" (DeBERTa-v2 model)"),VCr=l(),IE=a("li"),A6e=a("strong"),XCr=o("distilbert"),zCr=o(" \u2014 "),FU=a("a"),WCr=o("TFDistilBertForQuestionAnswering"),QCr=o(" (DistilBERT model)"),HCr=l(),qE=a("li"),y6e=a("strong"),UCr=o("electra"),JCr=o(" \u2014 "),TU=a("a"),YCr=o("TFElectraForQuestionAnswering"),KCr=o(" (ELECTRA model)"),ZCr=l(),NE=a("li"),L6e=a("strong"),e5r=o("flaubert"),o5r=o(" \u2014 "),MU=a("a"),r5r=o("TFFlaubertForQuestionAnsweringSimple"),t5r=o(" (FlauBERT model)"),a5r=l(),jE=a("li"),x6e=a("strong"),n5r=o("funnel"),s5r=o(" \u2014 "),EU=a("a"),l5r=o("TFFunnelForQuestionAnswering"),i5r=o(" (Funnel Transformer model)"),d5r=l(),DE=a("li"),$6e=a("strong"),c5r=o("gptj"),f5r=o(" \u2014 "),CU=a("a"),m5r=o("TFGPTJForQuestionAnswering"),g5r=o(" (GPT-J model)"),h5r=l(),GE=a("li"),k6e=a("strong"),p5r=o("longformer"),u5r=o(" \u2014 "),wU=a("a"),_5r=o("TFLongformerForQuestionAnswering"),b5r=o(" (Longformer model)"),v5r=l(),OE=a("li"),S6e=a("strong"),F5r=o("mobilebert"),T5r=o(" \u2014 "),AU=a("a"),M5r=o("TFMobileBertForQuestionAnswering"),E5r=o(" (MobileBERT model)"),C5r=l(),VE=a("li"),R6e=a("strong"),w5r=o("mpnet"),A5r=o(" \u2014 "),yU=a("a"),y5r=o("TFMPNetForQuestionAnswering"),L5r=o(" (MPNet model)"),x5r=l(),XE=a("li"),P6e=a("strong"),$5r=o("rembert"),k5r=o(" \u2014 "),LU=a("a"),S5r=o("TFRemBertForQuestionAnswering"),R5r=o(" (RemBERT model)"),P5r=l(),zE=a("li"),B6e=a("strong"),B5r=o("roberta"),I5r=o(" \u2014 "),xU=a("a"),q5r=o("TFRobertaForQuestionAnswering"),N5r=o(" (RoBERTa model)"),j5r=l(),WE=a("li"),I6e=a("strong"),D5r=o("roformer"),G5r=o(" \u2014 "),$U=a("a"),O5r=o("TFRoFormerForQuestionAnswering"),V5r=o(" (RoFormer model)"),X5r=l(),QE=a("li"),q6e=a("strong"),z5r=o("xlm"),W5r=o(" \u2014 "),kU=a("a"),Q5r=o("TFXLMForQuestionAnsweringSimple"),H5r=o(" (XLM model)"),U5r=l(),HE=a("li"),N6e=a("strong"),J5r=o("xlm-roberta"),Y5r=o(" \u2014 "),SU=a("a"),K5r=o("TFXLMRobertaForQuestionAnswering"),Z5r=o(" (XLM-RoBERTa model)"),e3r=l(),UE=a("li"),j6e=a("strong"),o3r=o("xlnet"),r3r=o(" \u2014 "),RU=a("a"),t3r=o("TFXLNetForQuestionAnsweringSimple"),a3r=o(" (XLNet model)"),n3r=l(),F(JE.$$.fragment),Wqe=l(),Mc=a("h2"),YE=a("a"),D6e=a("span"),F(Wx.$$.fragment),s3r=l(),G6e=a("span"),l3r=o("TFAutoModelForVision2Seq"),Qqe=l(),dr=a("div"),F(Qx.$$.fragment),i3r=l(),Ec=a("p"),d3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PU=a("a"),c3r=o("from_pretrained()"),f3r=o(" class method or the "),BU=a("a"),m3r=o("from_config()"),g3r=o(` class
method.`),h3r=l(),Hx=a("p"),p3r=o("This class cannot be instantiated directly using "),O6e=a("code"),u3r=o("__init__()"),_3r=o(" (throws an error)."),b3r=l(),jt=a("div"),F(Ux.$$.fragment),v3r=l(),V6e=a("p"),F3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T3r=l(),Cc=a("p"),M3r=o(`Note:
Loading a model from its configuration file does `),X6e=a("strong"),E3r=o("not"),C3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),w3r=o("from_pretrained()"),A3r=o(" to load the model weights."),y3r=l(),F(KE.$$.fragment),L3r=l(),qr=a("div"),F(Jx.$$.fragment),x3r=l(),z6e=a("p"),$3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k3r=l(),fn=a("p"),S3r=o("The model class to instantiate is selected based on the "),W6e=a("code"),R3r=o("model_type"),P3r=o(` property of the config object (either
passed as an argument or loaded from `),Q6e=a("code"),B3r=o("pretrained_model_name_or_path"),I3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=a("code"),q3r=o("pretrained_model_name_or_path"),N3r=o(":"),j3r=l(),U6e=a("ul"),ZE=a("li"),J6e=a("strong"),D3r=o("vision-encoder-decoder"),G3r=o(" \u2014 "),qU=a("a"),O3r=o("TFVisionEncoderDecoderModel"),V3r=o(" (Vision Encoder decoder model)"),X3r=l(),F(eC.$$.fragment),Hqe=l(),wc=a("h2"),oC=a("a"),Y6e=a("span"),F(Yx.$$.fragment),z3r=l(),K6e=a("span"),W3r=o("TFAutoModelForSpeechSeq2Seq"),Uqe=l(),cr=a("div"),F(Kx.$$.fragment),Q3r=l(),Ac=a("p"),H3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NU=a("a"),U3r=o("from_pretrained()"),J3r=o(" class method or the "),jU=a("a"),Y3r=o("from_config()"),K3r=o(` class
method.`),Z3r=l(),Zx=a("p"),ewr=o("This class cannot be instantiated directly using "),Z6e=a("code"),owr=o("__init__()"),rwr=o(" (throws an error)."),twr=l(),Dt=a("div"),F(e9.$$.fragment),awr=l(),eTe=a("p"),nwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),swr=l(),yc=a("p"),lwr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),iwr=o("not"),dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=a("a"),cwr=o("from_pretrained()"),fwr=o(" to load the model weights."),mwr=l(),F(rC.$$.fragment),gwr=l(),Nr=a("div"),F(o9.$$.fragment),hwr=l(),rTe=a("p"),pwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),uwr=l(),mn=a("p"),_wr=o("The model class to instantiate is selected based on the "),tTe=a("code"),bwr=o("model_type"),vwr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),Fwr=o("pretrained_model_name_or_path"),Twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(":"),Cwr=l(),sTe=a("ul"),tC=a("li"),lTe=a("strong"),wwr=o("speech_to_text"),Awr=o(" \u2014 "),GU=a("a"),ywr=o("TFSpeech2TextForConditionalGeneration"),Lwr=o(" (Speech2Text model)"),xwr=l(),F(aC.$$.fragment),Jqe=l(),Lc=a("h2"),nC=a("a"),iTe=a("span"),F(r9.$$.fragment),$wr=l(),dTe=a("span"),kwr=o("FlaxAutoModel"),Yqe=l(),fr=a("div"),F(t9.$$.fragment),Swr=l(),xc=a("p"),Rwr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OU=a("a"),Pwr=o("from_pretrained()"),Bwr=o(" class method or the "),VU=a("a"),Iwr=o("from_config()"),qwr=o(` class
method.`),Nwr=l(),a9=a("p"),jwr=o("This class cannot be instantiated directly using "),cTe=a("code"),Dwr=o("__init__()"),Gwr=o(" (throws an error)."),Owr=l(),Gt=a("div"),F(n9.$$.fragment),Vwr=l(),fTe=a("p"),Xwr=o("Instantiates one of the base model classes of the library from a configuration."),zwr=l(),$c=a("p"),Wwr=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),Qwr=o("not"),Hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),Uwr=o("from_pretrained()"),Jwr=o(" to load the model weights."),Ywr=l(),F(sC.$$.fragment),Kwr=l(),jr=a("div"),F(s9.$$.fragment),Zwr=l(),gTe=a("p"),eAr=o("Instantiate one of the base model classes of the library from a pretrained model."),oAr=l(),gn=a("p"),rAr=o("The model class to instantiate is selected based on the "),hTe=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),re=a("ul"),lC=a("li"),_Te=a("strong"),cAr=o("albert"),fAr=o(" \u2014 "),zU=a("a"),mAr=o("FlaxAlbertModel"),gAr=o(" (ALBERT model)"),hAr=l(),iC=a("li"),bTe=a("strong"),pAr=o("bart"),uAr=o(" \u2014 "),WU=a("a"),_Ar=o("FlaxBartModel"),bAr=o(" (BART model)"),vAr=l(),dC=a("li"),vTe=a("strong"),FAr=o("beit"),TAr=o(" \u2014 "),QU=a("a"),MAr=o("FlaxBeitModel"),EAr=o(" (BEiT model)"),CAr=l(),cC=a("li"),FTe=a("strong"),wAr=o("bert"),AAr=o(" \u2014 "),HU=a("a"),yAr=o("FlaxBertModel"),LAr=o(" (BERT model)"),xAr=l(),fC=a("li"),TTe=a("strong"),$Ar=o("big_bird"),kAr=o(" \u2014 "),UU=a("a"),SAr=o("FlaxBigBirdModel"),RAr=o(" (BigBird model)"),PAr=l(),mC=a("li"),MTe=a("strong"),BAr=o("blenderbot"),IAr=o(" \u2014 "),JU=a("a"),qAr=o("FlaxBlenderbotModel"),NAr=o(" (Blenderbot model)"),jAr=l(),gC=a("li"),ETe=a("strong"),DAr=o("blenderbot-small"),GAr=o(" \u2014 "),YU=a("a"),OAr=o("FlaxBlenderbotSmallModel"),VAr=o(" (BlenderbotSmall model)"),XAr=l(),hC=a("li"),CTe=a("strong"),zAr=o("clip"),WAr=o(" \u2014 "),KU=a("a"),QAr=o("FlaxCLIPModel"),HAr=o(" (CLIP model)"),UAr=l(),pC=a("li"),wTe=a("strong"),JAr=o("distilbert"),YAr=o(" \u2014 "),ZU=a("a"),KAr=o("FlaxDistilBertModel"),ZAr=o(" (DistilBERT model)"),e0r=l(),uC=a("li"),ATe=a("strong"),o0r=o("electra"),r0r=o(" \u2014 "),eJ=a("a"),t0r=o("FlaxElectraModel"),a0r=o(" (ELECTRA model)"),n0r=l(),_C=a("li"),yTe=a("strong"),s0r=o("gpt2"),l0r=o(" \u2014 "),oJ=a("a"),i0r=o("FlaxGPT2Model"),d0r=o(" (OpenAI GPT-2 model)"),c0r=l(),bC=a("li"),LTe=a("strong"),f0r=o("gpt_neo"),m0r=o(" \u2014 "),rJ=a("a"),g0r=o("FlaxGPTNeoModel"),h0r=o(" (GPT Neo model)"),p0r=l(),vC=a("li"),xTe=a("strong"),u0r=o("gptj"),_0r=o(" \u2014 "),tJ=a("a"),b0r=o("FlaxGPTJModel"),v0r=o(" (GPT-J model)"),F0r=l(),FC=a("li"),$Te=a("strong"),T0r=o("marian"),M0r=o(" \u2014 "),aJ=a("a"),E0r=o("FlaxMarianModel"),C0r=o(" (Marian model)"),w0r=l(),TC=a("li"),kTe=a("strong"),A0r=o("mbart"),y0r=o(" \u2014 "),nJ=a("a"),L0r=o("FlaxMBartModel"),x0r=o(" (mBART model)"),$0r=l(),MC=a("li"),STe=a("strong"),k0r=o("mt5"),S0r=o(" \u2014 "),sJ=a("a"),R0r=o("FlaxMT5Model"),P0r=o(" (mT5 model)"),B0r=l(),EC=a("li"),RTe=a("strong"),I0r=o("pegasus"),q0r=o(" \u2014 "),lJ=a("a"),N0r=o("FlaxPegasusModel"),j0r=o(" (Pegasus model)"),D0r=l(),CC=a("li"),PTe=a("strong"),G0r=o("roberta"),O0r=o(" \u2014 "),iJ=a("a"),V0r=o("FlaxRobertaModel"),X0r=o(" (RoBERTa model)"),z0r=l(),wC=a("li"),BTe=a("strong"),W0r=o("roformer"),Q0r=o(" \u2014 "),dJ=a("a"),H0r=o("FlaxRoFormerModel"),U0r=o(" (RoFormer model)"),J0r=l(),AC=a("li"),ITe=a("strong"),Y0r=o("t5"),K0r=o(" \u2014 "),cJ=a("a"),Z0r=o("FlaxT5Model"),eyr=o(" (T5 model)"),oyr=l(),yC=a("li"),qTe=a("strong"),ryr=o("vision-text-dual-encoder"),tyr=o(" \u2014 "),fJ=a("a"),ayr=o("FlaxVisionTextDualEncoderModel"),nyr=o(" (VisionTextDualEncoder model)"),syr=l(),LC=a("li"),NTe=a("strong"),lyr=o("vit"),iyr=o(" \u2014 "),mJ=a("a"),dyr=o("FlaxViTModel"),cyr=o(" (ViT model)"),fyr=l(),xC=a("li"),jTe=a("strong"),myr=o("wav2vec2"),gyr=o(" \u2014 "),gJ=a("a"),hyr=o("FlaxWav2Vec2Model"),pyr=o(" (Wav2Vec2 model)"),uyr=l(),$C=a("li"),DTe=a("strong"),_yr=o("xglm"),byr=o(" \u2014 "),hJ=a("a"),vyr=o("FlaxXGLMModel"),Fyr=o(" (XGLM model)"),Tyr=l(),kC=a("li"),GTe=a("strong"),Myr=o("xlm-roberta"),Eyr=o(" \u2014 "),pJ=a("a"),Cyr=o("FlaxXLMRobertaModel"),wyr=o(" (XLM-RoBERTa model)"),Ayr=l(),F(SC.$$.fragment),Kqe=l(),kc=a("h2"),RC=a("a"),OTe=a("span"),F(l9.$$.fragment),yyr=l(),VTe=a("span"),Lyr=o("FlaxAutoModelForCausalLM"),Zqe=l(),mr=a("div"),F(i9.$$.fragment),xyr=l(),Sc=a("p"),$yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uJ=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),_J=a("a"),Ryr=o("from_config()"),Pyr=o(` class
method.`),Byr=l(),d9=a("p"),Iyr=o("This class cannot be instantiated directly using "),XTe=a("code"),qyr=o("__init__()"),Nyr=o(" (throws an error)."),jyr=l(),Ot=a("div"),F(c9.$$.fragment),Dyr=l(),zTe=a("p"),Gyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oyr=l(),Rc=a("p"),Vyr=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),Xyr=o("not"),zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),Wyr=o("from_pretrained()"),Qyr=o(" to load the model weights."),Hyr=l(),F(PC.$$.fragment),Uyr=l(),Dr=a("div"),F(f9.$$.fragment),Jyr=l(),QTe=a("p"),Yyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kyr=l(),hn=a("p"),Zyr=o("The model class to instantiate is selected based on the "),HTe=a("code"),eLr=o("model_type"),oLr=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(":"),sLr=l(),Re=a("ul"),BC=a("li"),YTe=a("strong"),lLr=o("bart"),iLr=o(" \u2014 "),vJ=a("a"),dLr=o("FlaxBartForCausalLM"),cLr=o(" (BART model)"),fLr=l(),IC=a("li"),KTe=a("strong"),mLr=o("bert"),gLr=o(" \u2014 "),FJ=a("a"),hLr=o("FlaxBertForCausalLM"),pLr=o(" (BERT model)"),uLr=l(),qC=a("li"),ZTe=a("strong"),_Lr=o("big_bird"),bLr=o(" \u2014 "),TJ=a("a"),vLr=o("FlaxBigBirdForCausalLM"),FLr=o(" (BigBird model)"),TLr=l(),NC=a("li"),e8e=a("strong"),MLr=o("electra"),ELr=o(" \u2014 "),MJ=a("a"),CLr=o("FlaxElectraForCausalLM"),wLr=o(" (ELECTRA model)"),ALr=l(),jC=a("li"),o8e=a("strong"),yLr=o("gpt2"),LLr=o(" \u2014 "),EJ=a("a"),xLr=o("FlaxGPT2LMHeadModel"),$Lr=o(" (OpenAI GPT-2 model)"),kLr=l(),DC=a("li"),r8e=a("strong"),SLr=o("gpt_neo"),RLr=o(" \u2014 "),CJ=a("a"),PLr=o("FlaxGPTNeoForCausalLM"),BLr=o(" (GPT Neo model)"),ILr=l(),GC=a("li"),t8e=a("strong"),qLr=o("gptj"),NLr=o(" \u2014 "),wJ=a("a"),jLr=o("FlaxGPTJForCausalLM"),DLr=o(" (GPT-J model)"),GLr=l(),OC=a("li"),a8e=a("strong"),OLr=o("roberta"),VLr=o(" \u2014 "),AJ=a("a"),XLr=o("FlaxRobertaForCausalLM"),zLr=o(" (RoBERTa model)"),WLr=l(),VC=a("li"),n8e=a("strong"),QLr=o("xglm"),HLr=o(" \u2014 "),yJ=a("a"),ULr=o("FlaxXGLMForCausalLM"),JLr=o(" (XGLM model)"),YLr=l(),F(XC.$$.fragment),eNe=l(),Pc=a("h2"),zC=a("a"),s8e=a("span"),F(m9.$$.fragment),KLr=l(),l8e=a("span"),ZLr=o("FlaxAutoModelForPreTraining"),oNe=l(),gr=a("div"),F(g9.$$.fragment),exr=l(),Bc=a("p"),oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LJ=a("a"),rxr=o("from_pretrained()"),txr=o(" class method or the "),xJ=a("a"),axr=o("from_config()"),nxr=o(` class
method.`),sxr=l(),h9=a("p"),lxr=o("This class cannot be instantiated directly using "),i8e=a("code"),ixr=o("__init__()"),dxr=o(" (throws an error)."),cxr=l(),Vt=a("div"),F(p9.$$.fragment),fxr=l(),d8e=a("p"),mxr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gxr=l(),Ic=a("p"),hxr=o(`Note:
Loading a model from its configuration file does `),c8e=a("strong"),pxr=o("not"),uxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),_xr=o("from_pretrained()"),bxr=o(" to load the model weights."),vxr=l(),F(WC.$$.fragment),Fxr=l(),Gr=a("div"),F(u9.$$.fragment),Txr=l(),f8e=a("p"),Mxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Exr=l(),pn=a("p"),Cxr=o("The model class to instantiate is selected based on the "),m8e=a("code"),wxr=o("model_type"),Axr=o(` property of the config object (either
passed as an argument or loaded from `),g8e=a("code"),yxr=o("pretrained_model_name_or_path"),Lxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=a("code"),xxr=o("pretrained_model_name_or_path"),$xr=o(":"),kxr=l(),Me=a("ul"),QC=a("li"),p8e=a("strong"),Sxr=o("albert"),Rxr=o(" \u2014 "),kJ=a("a"),Pxr=o("FlaxAlbertForPreTraining"),Bxr=o(" (ALBERT model)"),Ixr=l(),HC=a("li"),u8e=a("strong"),qxr=o("bart"),Nxr=o(" \u2014 "),SJ=a("a"),jxr=o("FlaxBartForConditionalGeneration"),Dxr=o(" (BART model)"),Gxr=l(),UC=a("li"),_8e=a("strong"),Oxr=o("bert"),Vxr=o(" \u2014 "),RJ=a("a"),Xxr=o("FlaxBertForPreTraining"),zxr=o(" (BERT model)"),Wxr=l(),JC=a("li"),b8e=a("strong"),Qxr=o("big_bird"),Hxr=o(" \u2014 "),PJ=a("a"),Uxr=o("FlaxBigBirdForPreTraining"),Jxr=o(" (BigBird model)"),Yxr=l(),YC=a("li"),v8e=a("strong"),Kxr=o("electra"),Zxr=o(" \u2014 "),BJ=a("a"),e9r=o("FlaxElectraForPreTraining"),o9r=o(" (ELECTRA model)"),r9r=l(),KC=a("li"),F8e=a("strong"),t9r=o("mbart"),a9r=o(" \u2014 "),IJ=a("a"),n9r=o("FlaxMBartForConditionalGeneration"),s9r=o(" (mBART model)"),l9r=l(),ZC=a("li"),T8e=a("strong"),i9r=o("mt5"),d9r=o(" \u2014 "),qJ=a("a"),c9r=o("FlaxMT5ForConditionalGeneration"),f9r=o(" (mT5 model)"),m9r=l(),e5=a("li"),M8e=a("strong"),g9r=o("roberta"),h9r=o(" \u2014 "),NJ=a("a"),p9r=o("FlaxRobertaForMaskedLM"),u9r=o(" (RoBERTa model)"),_9r=l(),o5=a("li"),E8e=a("strong"),b9r=o("roformer"),v9r=o(" \u2014 "),jJ=a("a"),F9r=o("FlaxRoFormerForMaskedLM"),T9r=o(" (RoFormer model)"),M9r=l(),r5=a("li"),C8e=a("strong"),E9r=o("t5"),C9r=o(" \u2014 "),DJ=a("a"),w9r=o("FlaxT5ForConditionalGeneration"),A9r=o(" (T5 model)"),y9r=l(),t5=a("li"),w8e=a("strong"),L9r=o("wav2vec2"),x9r=o(" \u2014 "),GJ=a("a"),$9r=o("FlaxWav2Vec2ForPreTraining"),k9r=o(" (Wav2Vec2 model)"),S9r=l(),a5=a("li"),A8e=a("strong"),R9r=o("xlm-roberta"),P9r=o(" \u2014 "),OJ=a("a"),B9r=o("FlaxXLMRobertaForMaskedLM"),I9r=o(" (XLM-RoBERTa model)"),q9r=l(),F(n5.$$.fragment),rNe=l(),qc=a("h2"),s5=a("a"),y8e=a("span"),F(_9.$$.fragment),N9r=l(),L8e=a("span"),j9r=o("FlaxAutoModelForMaskedLM"),tNe=l(),hr=a("div"),F(b9.$$.fragment),D9r=l(),Nc=a("p"),G9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VJ=a("a"),O9r=o("from_pretrained()"),V9r=o(" class method or the "),XJ=a("a"),X9r=o("from_config()"),z9r=o(` class
method.`),W9r=l(),v9=a("p"),Q9r=o("This class cannot be instantiated directly using "),x8e=a("code"),H9r=o("__init__()"),U9r=o(" (throws an error)."),J9r=l(),Xt=a("div"),F(F9.$$.fragment),Y9r=l(),$8e=a("p"),K9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z9r=l(),jc=a("p"),e7r=o(`Note:
Loading a model from its configuration file does `),k8e=a("strong"),o7r=o("not"),r7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),t7r=o("from_pretrained()"),a7r=o(" to load the model weights."),n7r=l(),F(l5.$$.fragment),s7r=l(),Or=a("div"),F(T9.$$.fragment),l7r=l(),S8e=a("p"),i7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d7r=l(),un=a("p"),c7r=o("The model class to instantiate is selected based on the "),R8e=a("code"),f7r=o("model_type"),m7r=o(` property of the config object (either
passed as an argument or loaded from `),P8e=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B8e=a("code"),p7r=o("pretrained_model_name_or_path"),u7r=o(":"),_7r=l(),Le=a("ul"),i5=a("li"),I8e=a("strong"),b7r=o("albert"),v7r=o(" \u2014 "),WJ=a("a"),F7r=o("FlaxAlbertForMaskedLM"),T7r=o(" (ALBERT model)"),M7r=l(),d5=a("li"),q8e=a("strong"),E7r=o("bart"),C7r=o(" \u2014 "),QJ=a("a"),w7r=o("FlaxBartForConditionalGeneration"),A7r=o(" (BART model)"),y7r=l(),c5=a("li"),N8e=a("strong"),L7r=o("bert"),x7r=o(" \u2014 "),HJ=a("a"),$7r=o("FlaxBertForMaskedLM"),k7r=o(" (BERT model)"),S7r=l(),f5=a("li"),j8e=a("strong"),R7r=o("big_bird"),P7r=o(" \u2014 "),UJ=a("a"),B7r=o("FlaxBigBirdForMaskedLM"),I7r=o(" (BigBird model)"),q7r=l(),m5=a("li"),D8e=a("strong"),N7r=o("distilbert"),j7r=o(" \u2014 "),JJ=a("a"),D7r=o("FlaxDistilBertForMaskedLM"),G7r=o(" (DistilBERT model)"),O7r=l(),g5=a("li"),G8e=a("strong"),V7r=o("electra"),X7r=o(" \u2014 "),YJ=a("a"),z7r=o("FlaxElectraForMaskedLM"),W7r=o(" (ELECTRA model)"),Q7r=l(),h5=a("li"),O8e=a("strong"),H7r=o("mbart"),U7r=o(" \u2014 "),KJ=a("a"),J7r=o("FlaxMBartForConditionalGeneration"),Y7r=o(" (mBART model)"),K7r=l(),p5=a("li"),V8e=a("strong"),Z7r=o("roberta"),e$r=o(" \u2014 "),ZJ=a("a"),o$r=o("FlaxRobertaForMaskedLM"),r$r=o(" (RoBERTa model)"),t$r=l(),u5=a("li"),X8e=a("strong"),a$r=o("roformer"),n$r=o(" \u2014 "),eY=a("a"),s$r=o("FlaxRoFormerForMaskedLM"),l$r=o(" (RoFormer model)"),i$r=l(),_5=a("li"),z8e=a("strong"),d$r=o("xlm-roberta"),c$r=o(" \u2014 "),oY=a("a"),f$r=o("FlaxXLMRobertaForMaskedLM"),m$r=o(" (XLM-RoBERTa model)"),g$r=l(),F(b5.$$.fragment),aNe=l(),Dc=a("h2"),v5=a("a"),W8e=a("span"),F(M9.$$.fragment),h$r=l(),Q8e=a("span"),p$r=o("FlaxAutoModelForSeq2SeqLM"),nNe=l(),pr=a("div"),F(E9.$$.fragment),u$r=l(),Gc=a("p"),_$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rY=a("a"),b$r=o("from_pretrained()"),v$r=o(" class method or the "),tY=a("a"),F$r=o("from_config()"),T$r=o(` class
method.`),M$r=l(),C9=a("p"),E$r=o("This class cannot be instantiated directly using "),H8e=a("code"),C$r=o("__init__()"),w$r=o(" (throws an error)."),A$r=l(),zt=a("div"),F(w9.$$.fragment),y$r=l(),U8e=a("p"),L$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x$r=l(),Oc=a("p"),$$r=o(`Note:
Loading a model from its configuration file does `),J8e=a("strong"),k$r=o("not"),S$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),R$r=o("from_pretrained()"),P$r=o(" to load the model weights."),B$r=l(),F(F5.$$.fragment),I$r=l(),Vr=a("div"),F(A9.$$.fragment),q$r=l(),Y8e=a("p"),N$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j$r=l(),_n=a("p"),D$r=o("The model class to instantiate is selected based on the "),K8e=a("code"),G$r=o("model_type"),O$r=o(` property of the config object (either
passed as an argument or loaded from `),Z8e=a("code"),V$r=o("pretrained_model_name_or_path"),X$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),z$r=o("pretrained_model_name_or_path"),W$r=o(":"),Q$r=l(),Pe=a("ul"),T5=a("li"),oMe=a("strong"),H$r=o("bart"),U$r=o(" \u2014 "),nY=a("a"),J$r=o("FlaxBartForConditionalGeneration"),Y$r=o(" (BART model)"),K$r=l(),M5=a("li"),rMe=a("strong"),Z$r=o("blenderbot"),ekr=o(" \u2014 "),sY=a("a"),okr=o("FlaxBlenderbotForConditionalGeneration"),rkr=o(" (Blenderbot model)"),tkr=l(),E5=a("li"),tMe=a("strong"),akr=o("blenderbot-small"),nkr=o(" \u2014 "),lY=a("a"),skr=o("FlaxBlenderbotSmallForConditionalGeneration"),lkr=o(" (BlenderbotSmall model)"),ikr=l(),C5=a("li"),aMe=a("strong"),dkr=o("encoder-decoder"),ckr=o(" \u2014 "),iY=a("a"),fkr=o("FlaxEncoderDecoderModel"),mkr=o(" (Encoder decoder model)"),gkr=l(),w5=a("li"),nMe=a("strong"),hkr=o("marian"),pkr=o(" \u2014 "),dY=a("a"),ukr=o("FlaxMarianMTModel"),_kr=o(" (Marian model)"),bkr=l(),A5=a("li"),sMe=a("strong"),vkr=o("mbart"),Fkr=o(" \u2014 "),cY=a("a"),Tkr=o("FlaxMBartForConditionalGeneration"),Mkr=o(" (mBART model)"),Ekr=l(),y5=a("li"),lMe=a("strong"),Ckr=o("mt5"),wkr=o(" \u2014 "),fY=a("a"),Akr=o("FlaxMT5ForConditionalGeneration"),ykr=o(" (mT5 model)"),Lkr=l(),L5=a("li"),iMe=a("strong"),xkr=o("pegasus"),$kr=o(" \u2014 "),mY=a("a"),kkr=o("FlaxPegasusForConditionalGeneration"),Skr=o(" (Pegasus model)"),Rkr=l(),x5=a("li"),dMe=a("strong"),Pkr=o("t5"),Bkr=o(" \u2014 "),gY=a("a"),Ikr=o("FlaxT5ForConditionalGeneration"),qkr=o(" (T5 model)"),Nkr=l(),F($5.$$.fragment),sNe=l(),Vc=a("h2"),k5=a("a"),cMe=a("span"),F(y9.$$.fragment),jkr=l(),fMe=a("span"),Dkr=o("FlaxAutoModelForSequenceClassification"),lNe=l(),ur=a("div"),F(L9.$$.fragment),Gkr=l(),Xc=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hY=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),pY=a("a"),zkr=o("from_config()"),Wkr=o(` class
method.`),Qkr=l(),x9=a("p"),Hkr=o("This class cannot be instantiated directly using "),mMe=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Wt=a("div"),F($9.$$.fragment),Kkr=l(),gMe=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eSr=l(),zc=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),F(S5.$$.fragment),lSr=l(),Xr=a("div"),F(k9.$$.fragment),iSr=l(),pMe=a("p"),dSr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cSr=l(),bn=a("p"),fSr=o("The model class to instantiate is selected based on the "),uMe=a("code"),mSr=o("model_type"),gSr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),hSr=o("pretrained_model_name_or_path"),pSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),uSr=o("pretrained_model_name_or_path"),_Sr=o(":"),bSr=l(),xe=a("ul"),R5=a("li"),vMe=a("strong"),vSr=o("albert"),FSr=o(" \u2014 "),_Y=a("a"),TSr=o("FlaxAlbertForSequenceClassification"),MSr=o(" (ALBERT model)"),ESr=l(),P5=a("li"),FMe=a("strong"),CSr=o("bart"),wSr=o(" \u2014 "),bY=a("a"),ASr=o("FlaxBartForSequenceClassification"),ySr=o(" (BART model)"),LSr=l(),B5=a("li"),TMe=a("strong"),xSr=o("bert"),$Sr=o(" \u2014 "),vY=a("a"),kSr=o("FlaxBertForSequenceClassification"),SSr=o(" (BERT model)"),RSr=l(),I5=a("li"),MMe=a("strong"),PSr=o("big_bird"),BSr=o(" \u2014 "),FY=a("a"),ISr=o("FlaxBigBirdForSequenceClassification"),qSr=o(" (BigBird model)"),NSr=l(),q5=a("li"),EMe=a("strong"),jSr=o("distilbert"),DSr=o(" \u2014 "),TY=a("a"),GSr=o("FlaxDistilBertForSequenceClassification"),OSr=o(" (DistilBERT model)"),VSr=l(),N5=a("li"),CMe=a("strong"),XSr=o("electra"),zSr=o(" \u2014 "),MY=a("a"),WSr=o("FlaxElectraForSequenceClassification"),QSr=o(" (ELECTRA model)"),HSr=l(),j5=a("li"),wMe=a("strong"),USr=o("mbart"),JSr=o(" \u2014 "),EY=a("a"),YSr=o("FlaxMBartForSequenceClassification"),KSr=o(" (mBART model)"),ZSr=l(),D5=a("li"),AMe=a("strong"),eRr=o("roberta"),oRr=o(" \u2014 "),CY=a("a"),rRr=o("FlaxRobertaForSequenceClassification"),tRr=o(" (RoBERTa model)"),aRr=l(),G5=a("li"),yMe=a("strong"),nRr=o("roformer"),sRr=o(" \u2014 "),wY=a("a"),lRr=o("FlaxRoFormerForSequenceClassification"),iRr=o(" (RoFormer model)"),dRr=l(),O5=a("li"),LMe=a("strong"),cRr=o("xlm-roberta"),fRr=o(" \u2014 "),AY=a("a"),mRr=o("FlaxXLMRobertaForSequenceClassification"),gRr=o(" (XLM-RoBERTa model)"),hRr=l(),F(V5.$$.fragment),iNe=l(),Wc=a("h2"),X5=a("a"),xMe=a("span"),F(S9.$$.fragment),pRr=l(),$Me=a("span"),uRr=o("FlaxAutoModelForQuestionAnswering"),dNe=l(),_r=a("div"),F(R9.$$.fragment),_Rr=l(),Qc=a("p"),bRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yY=a("a"),vRr=o("from_pretrained()"),FRr=o(" class method or the "),LY=a("a"),TRr=o("from_config()"),MRr=o(` class
method.`),ERr=l(),P9=a("p"),CRr=o("This class cannot be instantiated directly using "),kMe=a("code"),wRr=o("__init__()"),ARr=o(" (throws an error)."),yRr=l(),Qt=a("div"),F(B9.$$.fragment),LRr=l(),SMe=a("p"),xRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Rr=l(),Hc=a("p"),kRr=o(`Note:
Loading a model from its configuration file does `),RMe=a("strong"),SRr=o("not"),RRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),PRr=o("from_pretrained()"),BRr=o(" to load the model weights."),IRr=l(),F(z5.$$.fragment),qRr=l(),zr=a("div"),F(I9.$$.fragment),NRr=l(),PMe=a("p"),jRr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DRr=l(),vn=a("p"),GRr=o("The model class to instantiate is selected based on the "),BMe=a("code"),ORr=o("model_type"),VRr=o(` property of the config object (either
passed as an argument or loaded from `),IMe=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(":"),HRr=l(),$e=a("ul"),W5=a("li"),NMe=a("strong"),URr=o("albert"),JRr=o(" \u2014 "),$Y=a("a"),YRr=o("FlaxAlbertForQuestionAnswering"),KRr=o(" (ALBERT model)"),ZRr=l(),Q5=a("li"),jMe=a("strong"),ePr=o("bart"),oPr=o(" \u2014 "),kY=a("a"),rPr=o("FlaxBartForQuestionAnswering"),tPr=o(" (BART model)"),aPr=l(),H5=a("li"),DMe=a("strong"),nPr=o("bert"),sPr=o(" \u2014 "),SY=a("a"),lPr=o("FlaxBertForQuestionAnswering"),iPr=o(" (BERT model)"),dPr=l(),U5=a("li"),GMe=a("strong"),cPr=o("big_bird"),fPr=o(" \u2014 "),RY=a("a"),mPr=o("FlaxBigBirdForQuestionAnswering"),gPr=o(" (BigBird model)"),hPr=l(),J5=a("li"),OMe=a("strong"),pPr=o("distilbert"),uPr=o(" \u2014 "),PY=a("a"),_Pr=o("FlaxDistilBertForQuestionAnswering"),bPr=o(" (DistilBERT model)"),vPr=l(),Y5=a("li"),VMe=a("strong"),FPr=o("electra"),TPr=o(" \u2014 "),BY=a("a"),MPr=o("FlaxElectraForQuestionAnswering"),EPr=o(" (ELECTRA model)"),CPr=l(),K5=a("li"),XMe=a("strong"),wPr=o("mbart"),APr=o(" \u2014 "),IY=a("a"),yPr=o("FlaxMBartForQuestionAnswering"),LPr=o(" (mBART model)"),xPr=l(),Z5=a("li"),zMe=a("strong"),$Pr=o("roberta"),kPr=o(" \u2014 "),qY=a("a"),SPr=o("FlaxRobertaForQuestionAnswering"),RPr=o(" (RoBERTa model)"),PPr=l(),e3=a("li"),WMe=a("strong"),BPr=o("roformer"),IPr=o(" \u2014 "),NY=a("a"),qPr=o("FlaxRoFormerForQuestionAnswering"),NPr=o(" (RoFormer model)"),jPr=l(),o3=a("li"),QMe=a("strong"),DPr=o("xlm-roberta"),GPr=o(" \u2014 "),jY=a("a"),OPr=o("FlaxXLMRobertaForQuestionAnswering"),VPr=o(" (XLM-RoBERTa model)"),XPr=l(),F(r3.$$.fragment),cNe=l(),Uc=a("h2"),t3=a("a"),HMe=a("span"),F(q9.$$.fragment),zPr=l(),UMe=a("span"),WPr=o("FlaxAutoModelForTokenClassification"),fNe=l(),br=a("div"),F(N9.$$.fragment),QPr=l(),Jc=a("p"),HPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DY=a("a"),UPr=o("from_pretrained()"),JPr=o(" class method or the "),GY=a("a"),YPr=o("from_config()"),KPr=o(` class
method.`),ZPr=l(),j9=a("p"),eBr=o("This class cannot be instantiated directly using "),JMe=a("code"),oBr=o("__init__()"),rBr=o(" (throws an error)."),tBr=l(),Ht=a("div"),F(D9.$$.fragment),aBr=l(),YMe=a("p"),nBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sBr=l(),Yc=a("p"),lBr=o(`Note:
Loading a model from its configuration file does `),KMe=a("strong"),iBr=o("not"),dBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),cBr=o("from_pretrained()"),fBr=o(" to load the model weights."),mBr=l(),F(a3.$$.fragment),gBr=l(),Wr=a("div"),F(G9.$$.fragment),hBr=l(),ZMe=a("p"),pBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uBr=l(),Fn=a("p"),_Br=o("The model class to instantiate is selected based on the "),e4e=a("code"),bBr=o("model_type"),vBr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),FBr=o("pretrained_model_name_or_path"),TBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(":"),CBr=l(),De=a("ul"),n3=a("li"),t4e=a("strong"),wBr=o("albert"),ABr=o(" \u2014 "),VY=a("a"),yBr=o("FlaxAlbertForTokenClassification"),LBr=o(" (ALBERT model)"),xBr=l(),s3=a("li"),a4e=a("strong"),$Br=o("bert"),kBr=o(" \u2014 "),XY=a("a"),SBr=o("FlaxBertForTokenClassification"),RBr=o(" (BERT model)"),PBr=l(),l3=a("li"),n4e=a("strong"),BBr=o("big_bird"),IBr=o(" \u2014 "),zY=a("a"),qBr=o("FlaxBigBirdForTokenClassification"),NBr=o(" (BigBird model)"),jBr=l(),i3=a("li"),s4e=a("strong"),DBr=o("distilbert"),GBr=o(" \u2014 "),WY=a("a"),OBr=o("FlaxDistilBertForTokenClassification"),VBr=o(" (DistilBERT model)"),XBr=l(),d3=a("li"),l4e=a("strong"),zBr=o("electra"),WBr=o(" \u2014 "),QY=a("a"),QBr=o("FlaxElectraForTokenClassification"),HBr=o(" (ELECTRA model)"),UBr=l(),c3=a("li"),i4e=a("strong"),JBr=o("roberta"),YBr=o(" \u2014 "),HY=a("a"),KBr=o("FlaxRobertaForTokenClassification"),ZBr=o(" (RoBERTa model)"),eIr=l(),f3=a("li"),d4e=a("strong"),oIr=o("roformer"),rIr=o(" \u2014 "),UY=a("a"),tIr=o("FlaxRoFormerForTokenClassification"),aIr=o(" (RoFormer model)"),nIr=l(),m3=a("li"),c4e=a("strong"),sIr=o("xlm-roberta"),lIr=o(" \u2014 "),JY=a("a"),iIr=o("FlaxXLMRobertaForTokenClassification"),dIr=o(" (XLM-RoBERTa model)"),cIr=l(),F(g3.$$.fragment),mNe=l(),Kc=a("h2"),h3=a("a"),f4e=a("span"),F(O9.$$.fragment),fIr=l(),m4e=a("span"),mIr=o("FlaxAutoModelForMultipleChoice"),gNe=l(),vr=a("div"),F(V9.$$.fragment),gIr=l(),Zc=a("p"),hIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YY=a("a"),pIr=o("from_pretrained()"),uIr=o(" class method or the "),KY=a("a"),_Ir=o("from_config()"),bIr=o(` class
method.`),vIr=l(),X9=a("p"),FIr=o("This class cannot be instantiated directly using "),g4e=a("code"),TIr=o("__init__()"),MIr=o(" (throws an error)."),EIr=l(),Ut=a("div"),F(z9.$$.fragment),CIr=l(),h4e=a("p"),wIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AIr=l(),ef=a("p"),yIr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),LIr=o("not"),xIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),$Ir=o("from_pretrained()"),kIr=o(" to load the model weights."),SIr=l(),F(p3.$$.fragment),RIr=l(),Qr=a("div"),F(W9.$$.fragment),PIr=l(),u4e=a("p"),BIr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IIr=l(),Tn=a("p"),qIr=o("The model class to instantiate is selected based on the "),_4e=a("code"),NIr=o("model_type"),jIr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),OIr=o("pretrained_model_name_or_path"),VIr=o(":"),XIr=l(),Ge=a("ul"),u3=a("li"),F4e=a("strong"),zIr=o("albert"),WIr=o(" \u2014 "),eK=a("a"),QIr=o("FlaxAlbertForMultipleChoice"),HIr=o(" (ALBERT model)"),UIr=l(),_3=a("li"),T4e=a("strong"),JIr=o("bert"),YIr=o(" \u2014 "),oK=a("a"),KIr=o("FlaxBertForMultipleChoice"),ZIr=o(" (BERT model)"),eqr=l(),b3=a("li"),M4e=a("strong"),oqr=o("big_bird"),rqr=o(" \u2014 "),rK=a("a"),tqr=o("FlaxBigBirdForMultipleChoice"),aqr=o(" (BigBird model)"),nqr=l(),v3=a("li"),E4e=a("strong"),sqr=o("distilbert"),lqr=o(" \u2014 "),tK=a("a"),iqr=o("FlaxDistilBertForMultipleChoice"),dqr=o(" (DistilBERT model)"),cqr=l(),F3=a("li"),C4e=a("strong"),fqr=o("electra"),mqr=o(" \u2014 "),aK=a("a"),gqr=o("FlaxElectraForMultipleChoice"),hqr=o(" (ELECTRA model)"),pqr=l(),T3=a("li"),w4e=a("strong"),uqr=o("roberta"),_qr=o(" \u2014 "),nK=a("a"),bqr=o("FlaxRobertaForMultipleChoice"),vqr=o(" (RoBERTa model)"),Fqr=l(),M3=a("li"),A4e=a("strong"),Tqr=o("roformer"),Mqr=o(" \u2014 "),sK=a("a"),Eqr=o("FlaxRoFormerForMultipleChoice"),Cqr=o(" (RoFormer model)"),wqr=l(),E3=a("li"),y4e=a("strong"),Aqr=o("xlm-roberta"),yqr=o(" \u2014 "),lK=a("a"),Lqr=o("FlaxXLMRobertaForMultipleChoice"),xqr=o(" (XLM-RoBERTa model)"),$qr=l(),F(C3.$$.fragment),hNe=l(),of=a("h2"),w3=a("a"),L4e=a("span"),F(Q9.$$.fragment),kqr=l(),x4e=a("span"),Sqr=o("FlaxAutoModelForNextSentencePrediction"),pNe=l(),Fr=a("div"),F(H9.$$.fragment),Rqr=l(),rf=a("p"),Pqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iK=a("a"),Bqr=o("from_pretrained()"),Iqr=o(" class method or the "),dK=a("a"),qqr=o("from_config()"),Nqr=o(` class
method.`),jqr=l(),U9=a("p"),Dqr=o("This class cannot be instantiated directly using "),$4e=a("code"),Gqr=o("__init__()"),Oqr=o(" (throws an error)."),Vqr=l(),Jt=a("div"),F(J9.$$.fragment),Xqr=l(),k4e=a("p"),zqr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wqr=l(),tf=a("p"),Qqr=o(`Note:
Loading a model from its configuration file does `),S4e=a("strong"),Hqr=o("not"),Uqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),Jqr=o("from_pretrained()"),Yqr=o(" to load the model weights."),Kqr=l(),F(A3.$$.fragment),Zqr=l(),Hr=a("div"),F(Y9.$$.fragment),eNr=l(),R4e=a("p"),oNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rNr=l(),Mn=a("p"),tNr=o("The model class to instantiate is selected based on the "),P4e=a("code"),aNr=o("model_type"),nNr=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),sNr=o("pretrained_model_name_or_path"),lNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=a("code"),iNr=o("pretrained_model_name_or_path"),dNr=o(":"),cNr=l(),q4e=a("ul"),y3=a("li"),N4e=a("strong"),fNr=o("bert"),mNr=o(" \u2014 "),fK=a("a"),gNr=o("FlaxBertForNextSentencePrediction"),hNr=o(" (BERT model)"),pNr=l(),F(L3.$$.fragment),uNe=l(),af=a("h2"),x3=a("a"),j4e=a("span"),F(K9.$$.fragment),uNr=l(),D4e=a("span"),_Nr=o("FlaxAutoModelForImageClassification"),_Ne=l(),Tr=a("div"),F(Z9.$$.fragment),bNr=l(),nf=a("p"),vNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mK=a("a"),FNr=o("from_pretrained()"),TNr=o(" class method or the "),gK=a("a"),MNr=o("from_config()"),ENr=o(` class
method.`),CNr=l(),e7=a("p"),wNr=o("This class cannot be instantiated directly using "),G4e=a("code"),ANr=o("__init__()"),yNr=o(" (throws an error)."),LNr=l(),Yt=a("div"),F(o7.$$.fragment),xNr=l(),O4e=a("p"),$Nr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kNr=l(),sf=a("p"),SNr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),RNr=o("not"),PNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),BNr=o("from_pretrained()"),INr=o(" to load the model weights."),qNr=l(),F($3.$$.fragment),NNr=l(),Ur=a("div"),F(r7.$$.fragment),jNr=l(),X4e=a("p"),DNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GNr=l(),En=a("p"),ONr=o("The model class to instantiate is selected based on the "),z4e=a("code"),VNr=o("model_type"),XNr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),zNr=o("pretrained_model_name_or_path"),WNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),QNr=o("pretrained_model_name_or_path"),HNr=o(":"),UNr=l(),t7=a("ul"),k3=a("li"),H4e=a("strong"),JNr=o("beit"),YNr=o(" \u2014 "),pK=a("a"),KNr=o("FlaxBeitForImageClassification"),ZNr=o(" (BEiT model)"),ejr=l(),S3=a("li"),U4e=a("strong"),ojr=o("vit"),rjr=o(" \u2014 "),uK=a("a"),tjr=o("FlaxViTForImageClassification"),ajr=o(" (ViT model)"),njr=l(),F(R3.$$.fragment),bNe=l(),lf=a("h2"),P3=a("a"),J4e=a("span"),F(a7.$$.fragment),sjr=l(),Y4e=a("span"),ljr=o("FlaxAutoModelForVision2Seq"),vNe=l(),Mr=a("div"),F(n7.$$.fragment),ijr=l(),df=a("p"),djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_K=a("a"),cjr=o("from_pretrained()"),fjr=o(" class method or the "),bK=a("a"),mjr=o("from_config()"),gjr=o(` class
method.`),hjr=l(),s7=a("p"),pjr=o("This class cannot be instantiated directly using "),K4e=a("code"),ujr=o("__init__()"),_jr=o(" (throws an error)."),bjr=l(),Kt=a("div"),F(l7.$$.fragment),vjr=l(),Z4e=a("p"),Fjr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tjr=l(),cf=a("p"),Mjr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),Ejr=o("not"),Cjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),wjr=o("from_pretrained()"),Ajr=o(" to load the model weights."),yjr=l(),F(B3.$$.fragment),Ljr=l(),Jr=a("div"),F(i7.$$.fragment),xjr=l(),oEe=a("p"),$jr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kjr=l(),Cn=a("p"),Sjr=o("The model class to instantiate is selected based on the "),rEe=a("code"),Rjr=o("model_type"),Pjr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),Bjr=o("pretrained_model_name_or_path"),Ijr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),qjr=o("pretrained_model_name_or_path"),Njr=o(":"),jjr=l(),nEe=a("ul"),I3=a("li"),sEe=a("strong"),Djr=o("vision-encoder-decoder"),Gjr=o(" \u2014 "),FK=a("a"),Ojr=o("FlaxVisionEncoderDecoderModel"),Vjr=o(" (Vision Encoder decoder model)"),Xjr=l(),F(q3.$$.fragment),this.h()},l(f){const _=Ryt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var d7=s(p);m=n(d7,"A",{id:!0,class:!0,href:!0});var lEe=s(m);u=n(lEe,"SPAN",{});var iEe=s(u);T(d.$$.fragment,iEe),iEe.forEach(t),lEe.forEach(t),h=i(d7),Mo=n(d7,"SPAN",{});var dEe=s(Mo);di=r(dEe,"Auto Classes"),dEe.forEach(t),d7.forEach(t),hf=i(f),rt=n(f,"P",{});var c7=s(rt);ci=r(c7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=n(c7,"CODE",{});var cEe=s(fi);e0=r(cEe,"from_pretrained()"),cEe.forEach(t),pf=r(c7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),c7.forEach(t),je=i(f),We=n(f,"P",{});var wn=s(We);mi=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var fEe=s(An);o0=r(fEe,"AutoConfig"),fEe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var mEe=s(Ln);r0=r(mEe,"AutoModel"),mEe.forEach(t),gi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var gEe=s(xn);t0=r(gEe,"AutoTokenizer"),gEe.forEach(t),hi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var f7=s(Ae);T$=r(f7,"will create a model that is an instance of "),pi=n(f7,"A",{href:!0});var hEe=s(pi);M$=r(hEe,"BertModel"),hEe.forEach(t),E$=r(f7,"."),f7.forEach(t),Eo=i(f),wa=n(f,"P",{});var m7=s(wa);C$=r(m7,"There is one class of "),_f=n(m7,"CODE",{});var pEe=s(_f);w$=r(pEe,"AutoModel"),pEe.forEach(t),LDe=r(m7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),m7.forEach(t),_Ie=i(f),ui=n(f,"H2",{class:!0});var g7=s(ui);bf=n(g7,"A",{id:!0,class:!0,href:!0});var uEe=s(bf);hee=n(uEe,"SPAN",{});var _Ee=s(hee);T(a0.$$.fragment,_Ee),_Ee.forEach(t),uEe.forEach(t),xDe=i(g7),pee=n(g7,"SPAN",{});var bEe=s(pee);$De=r(bEe,"Extending the Auto Classes"),bEe.forEach(t),g7.forEach(t),bIe=i(f),$n=n(f,"P",{});var ff=s($n);kDe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),uee=n(ff,"CODE",{});var vEe=s(uee);SDe=r(vEe,"NewModel"),vEe.forEach(t),RDe=r(ff,", make sure you have a "),_ee=n(ff,"CODE",{});var FEe=s(_ee);PDe=r(FEe,"NewModelConfig"),FEe.forEach(t),BDe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),vIe=i(f),T(n0.$$.fragment,f),FIe=i(f),A$=n(f,"P",{});var TEe=s(A$);IDe=r(TEe,"You will then be able to use the auto classes like you would usually do!"),TEe.forEach(t),TIe=i(f),T(vf.$$.fragment,f),MIe=i(f),_i=n(f,"H2",{class:!0});var h7=s(_i);Ff=n(h7,"A",{id:!0,class:!0,href:!0});var MEe=s(Ff);bee=n(MEe,"SPAN",{});var EEe=s(bee);T(s0.$$.fragment,EEe),EEe.forEach(t),MEe.forEach(t),qDe=i(h7),vee=n(h7,"SPAN",{});var CEe=s(vee);NDe=r(CEe,"AutoConfig"),CEe.forEach(t),h7.forEach(t),EIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(l0.$$.fragment,et),jDe=i(et),i0=n(et,"P",{});var p7=s(i0);DDe=r(p7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),y$=n(p7,"A",{href:!0});var wEe=s(y$);GDe=r(wEe,"from_pretrained()"),wEe.forEach(t),ODe=r(p7," class method."),p7.forEach(t),VDe=i(et),d0=n(et,"P",{});var u7=s(d0);XDe=r(u7,"This class cannot be instantiated directly using "),Fee=n(u7,"CODE",{});var AEe=s(Fee);zDe=r(AEe,"__init__()"),AEe.forEach(t),WDe=r(u7," (throws an error)."),u7.forEach(t),QDe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(c0.$$.fragment,ot),HDe=i(ot),Tee=n(ot,"P",{});var yEe=s(Tee);UDe=r(yEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),yEe.forEach(t),JDe=i(ot),bi=n(ot,"P",{});var mf=s(bi);YDe=r(mf,"The configuration class to instantiate is selected based on the "),Mee=n(mf,"CODE",{});var LEe=s(Mee);KDe=r(LEe,"model_type"),LEe.forEach(t),ZDe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eee=n(mf,"CODE",{});var xEe=s(Eee);eGe=r(xEe,"pretrained_model_name_or_path"),xEe.forEach(t),oGe=r(mf,":"),mf.forEach(t),rGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var N3=s(Tf);Cee=n(N3,"STRONG",{});var $Ee=s(Cee);tGe=r($Ee,"albert"),$Ee.forEach(t),aGe=r(N3," \u2014 "),L$=n(N3,"A",{href:!0});var kEe=s(L$);nGe=r(kEe,"AlbertConfig"),kEe.forEach(t),sGe=r(N3," (ALBERT model)"),N3.forEach(t),lGe=i(y),Mf=n(y,"LI",{});var j3=s(Mf);wee=n(j3,"STRONG",{});var SEe=s(wee);iGe=r(SEe,"bart"),SEe.forEach(t),dGe=r(j3," \u2014 "),x$=n(j3,"A",{href:!0});var REe=s(x$);cGe=r(REe,"BartConfig"),REe.forEach(t),fGe=r(j3," (BART model)"),j3.forEach(t),mGe=i(y),Ef=n(y,"LI",{});var D3=s(Ef);Aee=n(D3,"STRONG",{});var PEe=s(Aee);gGe=r(PEe,"beit"),PEe.forEach(t),hGe=r(D3," \u2014 "),$$=n(D3,"A",{href:!0});var BEe=s($$);pGe=r(BEe,"BeitConfig"),BEe.forEach(t),uGe=r(D3," (BEiT model)"),D3.forEach(t),_Ge=i(y),Cf=n(y,"LI",{});var G3=s(Cf);yee=n(G3,"STRONG",{});var IEe=s(yee);bGe=r(IEe,"bert"),IEe.forEach(t),vGe=r(G3," \u2014 "),k$=n(G3,"A",{href:!0});var qEe=s(k$);FGe=r(qEe,"BertConfig"),qEe.forEach(t),TGe=r(G3," (BERT model)"),G3.forEach(t),MGe=i(y),wf=n(y,"LI",{});var O3=s(wf);Lee=n(O3,"STRONG",{});var NEe=s(Lee);EGe=r(NEe,"bert-generation"),NEe.forEach(t),CGe=r(O3," \u2014 "),S$=n(O3,"A",{href:!0});var jEe=s(S$);wGe=r(jEe,"BertGenerationConfig"),jEe.forEach(t),AGe=r(O3," (Bert Generation model)"),O3.forEach(t),yGe=i(y),Af=n(y,"LI",{});var V3=s(Af);xee=n(V3,"STRONG",{});var DEe=s(xee);LGe=r(DEe,"big_bird"),DEe.forEach(t),xGe=r(V3," \u2014 "),R$=n(V3,"A",{href:!0});var GEe=s(R$);$Ge=r(GEe,"BigBirdConfig"),GEe.forEach(t),kGe=r(V3," (BigBird model)"),V3.forEach(t),SGe=i(y),yf=n(y,"LI",{});var X3=s(yf);$ee=n(X3,"STRONG",{});var OEe=s($ee);RGe=r(OEe,"bigbird_pegasus"),OEe.forEach(t),PGe=r(X3," \u2014 "),P$=n(X3,"A",{href:!0});var VEe=s(P$);BGe=r(VEe,"BigBirdPegasusConfig"),VEe.forEach(t),IGe=r(X3," (BigBirdPegasus model)"),X3.forEach(t),qGe=i(y),Lf=n(y,"LI",{});var z3=s(Lf);kee=n(z3,"STRONG",{});var XEe=s(kee);NGe=r(XEe,"blenderbot"),XEe.forEach(t),jGe=r(z3," \u2014 "),B$=n(z3,"A",{href:!0});var zEe=s(B$);DGe=r(zEe,"BlenderbotConfig"),zEe.forEach(t),GGe=r(z3," (Blenderbot model)"),z3.forEach(t),OGe=i(y),xf=n(y,"LI",{});var W3=s(xf);See=n(W3,"STRONG",{});var WEe=s(See);VGe=r(WEe,"blenderbot-small"),WEe.forEach(t),XGe=r(W3," \u2014 "),I$=n(W3,"A",{href:!0});var QEe=s(I$);zGe=r(QEe,"BlenderbotSmallConfig"),QEe.forEach(t),WGe=r(W3," (BlenderbotSmall model)"),W3.forEach(t),QGe=i(y),$f=n(y,"LI",{});var Q3=s($f);Ree=n(Q3,"STRONG",{});var HEe=s(Ree);HGe=r(HEe,"camembert"),HEe.forEach(t),UGe=r(Q3," \u2014 "),q$=n(Q3,"A",{href:!0});var UEe=s(q$);JGe=r(UEe,"CamembertConfig"),UEe.forEach(t),YGe=r(Q3," (CamemBERT model)"),Q3.forEach(t),KGe=i(y),kf=n(y,"LI",{});var H3=s(kf);Pee=n(H3,"STRONG",{});var JEe=s(Pee);ZGe=r(JEe,"canine"),JEe.forEach(t),eOe=r(H3," \u2014 "),N$=n(H3,"A",{href:!0});var YEe=s(N$);oOe=r(YEe,"CanineConfig"),YEe.forEach(t),rOe=r(H3," (Canine model)"),H3.forEach(t),tOe=i(y),Sf=n(y,"LI",{});var U3=s(Sf);Bee=n(U3,"STRONG",{});var KEe=s(Bee);aOe=r(KEe,"clip"),KEe.forEach(t),nOe=r(U3," \u2014 "),j$=n(U3,"A",{href:!0});var ZEe=s(j$);sOe=r(ZEe,"CLIPConfig"),ZEe.forEach(t),lOe=r(U3," (CLIP model)"),U3.forEach(t),iOe=i(y),Rf=n(y,"LI",{});var J3=s(Rf);Iee=n(J3,"STRONG",{});var eCe=s(Iee);dOe=r(eCe,"convbert"),eCe.forEach(t),cOe=r(J3," \u2014 "),D$=n(J3,"A",{href:!0});var oCe=s(D$);fOe=r(oCe,"ConvBertConfig"),oCe.forEach(t),mOe=r(J3," (ConvBERT model)"),J3.forEach(t),gOe=i(y),Pf=n(y,"LI",{});var Y3=s(Pf);qee=n(Y3,"STRONG",{});var rCe=s(qee);hOe=r(rCe,"convnext"),rCe.forEach(t),pOe=r(Y3," \u2014 "),G$=n(Y3,"A",{href:!0});var tCe=s(G$);uOe=r(tCe,"ConvNextConfig"),tCe.forEach(t),_Oe=r(Y3," (ConvNext model)"),Y3.forEach(t),bOe=i(y),Bf=n(y,"LI",{});var K3=s(Bf);Nee=n(K3,"STRONG",{});var aCe=s(Nee);vOe=r(aCe,"ctrl"),aCe.forEach(t),FOe=r(K3," \u2014 "),O$=n(K3,"A",{href:!0});var nCe=s(O$);TOe=r(nCe,"CTRLConfig"),nCe.forEach(t),MOe=r(K3," (CTRL model)"),K3.forEach(t),EOe=i(y),If=n(y,"LI",{});var Z3=s(If);jee=n(Z3,"STRONG",{});var sCe=s(jee);COe=r(sCe,"data2vec-audio"),sCe.forEach(t),wOe=r(Z3," \u2014 "),V$=n(Z3,"A",{href:!0});var lCe=s(V$);AOe=r(lCe,"Data2VecAudioConfig"),lCe.forEach(t),yOe=r(Z3," (Data2VecAudio model)"),Z3.forEach(t),LOe=i(y),qf=n(y,"LI",{});var ew=s(qf);Dee=n(ew,"STRONG",{});var iCe=s(Dee);xOe=r(iCe,"data2vec-text"),iCe.forEach(t),$Oe=r(ew," \u2014 "),X$=n(ew,"A",{href:!0});var dCe=s(X$);kOe=r(dCe,"Data2VecTextConfig"),dCe.forEach(t),SOe=r(ew," (Data2VecText model)"),ew.forEach(t),ROe=i(y),Nf=n(y,"LI",{});var ow=s(Nf);Gee=n(ow,"STRONG",{});var cCe=s(Gee);POe=r(cCe,"data2vec-vision"),cCe.forEach(t),BOe=r(ow," \u2014 "),z$=n(ow,"A",{href:!0});var fCe=s(z$);IOe=r(fCe,"Data2VecVisionConfig"),fCe.forEach(t),qOe=r(ow," (Data2VecVision model)"),ow.forEach(t),NOe=i(y),jf=n(y,"LI",{});var rw=s(jf);Oee=n(rw,"STRONG",{});var mCe=s(Oee);jOe=r(mCe,"deberta"),mCe.forEach(t),DOe=r(rw," \u2014 "),W$=n(rw,"A",{href:!0});var gCe=s(W$);GOe=r(gCe,"DebertaConfig"),gCe.forEach(t),OOe=r(rw," (DeBERTa model)"),rw.forEach(t),VOe=i(y),Df=n(y,"LI",{});var tw=s(Df);Vee=n(tw,"STRONG",{});var hCe=s(Vee);XOe=r(hCe,"deberta-v2"),hCe.forEach(t),zOe=r(tw," \u2014 "),Q$=n(tw,"A",{href:!0});var pCe=s(Q$);WOe=r(pCe,"DebertaV2Config"),pCe.forEach(t),QOe=r(tw," (DeBERTa-v2 model)"),tw.forEach(t),HOe=i(y),Gf=n(y,"LI",{});var aw=s(Gf);Xee=n(aw,"STRONG",{});var uCe=s(Xee);UOe=r(uCe,"decision_transformer"),uCe.forEach(t),JOe=r(aw," \u2014 "),H$=n(aw,"A",{href:!0});var _Ce=s(H$);YOe=r(_Ce,"DecisionTransformerConfig"),_Ce.forEach(t),KOe=r(aw," (Decision Transformer model)"),aw.forEach(t),ZOe=i(y),Of=n(y,"LI",{});var nw=s(Of);zee=n(nw,"STRONG",{});var bCe=s(zee);eVe=r(bCe,"deit"),bCe.forEach(t),oVe=r(nw," \u2014 "),U$=n(nw,"A",{href:!0});var vCe=s(U$);rVe=r(vCe,"DeiTConfig"),vCe.forEach(t),tVe=r(nw," (DeiT model)"),nw.forEach(t),aVe=i(y),Vf=n(y,"LI",{});var sw=s(Vf);Wee=n(sw,"STRONG",{});var FCe=s(Wee);nVe=r(FCe,"detr"),FCe.forEach(t),sVe=r(sw," \u2014 "),J$=n(sw,"A",{href:!0});var Wjr=s(J$);lVe=r(Wjr,"DetrConfig"),Wjr.forEach(t),iVe=r(sw," (DETR model)"),sw.forEach(t),dVe=i(y),Xf=n(y,"LI",{});var TCe=s(Xf);Qee=n(TCe,"STRONG",{});var Qjr=s(Qee);cVe=r(Qjr,"distilbert"),Qjr.forEach(t),fVe=r(TCe," \u2014 "),Y$=n(TCe,"A",{href:!0});var Hjr=s(Y$);mVe=r(Hjr,"DistilBertConfig"),Hjr.forEach(t),gVe=r(TCe," (DistilBERT model)"),TCe.forEach(t),hVe=i(y),zf=n(y,"LI",{});var MCe=s(zf);Hee=n(MCe,"STRONG",{});var Ujr=s(Hee);pVe=r(Ujr,"dpr"),Ujr.forEach(t),uVe=r(MCe," \u2014 "),K$=n(MCe,"A",{href:!0});var Jjr=s(K$);_Ve=r(Jjr,"DPRConfig"),Jjr.forEach(t),bVe=r(MCe," (DPR model)"),MCe.forEach(t),vVe=i(y),Wf=n(y,"LI",{});var ECe=s(Wf);Uee=n(ECe,"STRONG",{});var Yjr=s(Uee);FVe=r(Yjr,"dpt"),Yjr.forEach(t),TVe=r(ECe," \u2014 "),Z$=n(ECe,"A",{href:!0});var Kjr=s(Z$);MVe=r(Kjr,"DPTConfig"),Kjr.forEach(t),EVe=r(ECe," (DPT model)"),ECe.forEach(t),CVe=i(y),Qf=n(y,"LI",{});var CCe=s(Qf);Jee=n(CCe,"STRONG",{});var Zjr=s(Jee);wVe=r(Zjr,"electra"),Zjr.forEach(t),AVe=r(CCe," \u2014 "),ek=n(CCe,"A",{href:!0});var eDr=s(ek);yVe=r(eDr,"ElectraConfig"),eDr.forEach(t),LVe=r(CCe," (ELECTRA model)"),CCe.forEach(t),xVe=i(y),Hf=n(y,"LI",{});var wCe=s(Hf);Yee=n(wCe,"STRONG",{});var oDr=s(Yee);$Ve=r(oDr,"encoder-decoder"),oDr.forEach(t),kVe=r(wCe," \u2014 "),ok=n(wCe,"A",{href:!0});var rDr=s(ok);SVe=r(rDr,"EncoderDecoderConfig"),rDr.forEach(t),RVe=r(wCe," (Encoder decoder model)"),wCe.forEach(t),PVe=i(y),Uf=n(y,"LI",{});var ACe=s(Uf);Kee=n(ACe,"STRONG",{});var tDr=s(Kee);BVe=r(tDr,"flaubert"),tDr.forEach(t),IVe=r(ACe," \u2014 "),rk=n(ACe,"A",{href:!0});var aDr=s(rk);qVe=r(aDr,"FlaubertConfig"),aDr.forEach(t),NVe=r(ACe," (FlauBERT model)"),ACe.forEach(t),jVe=i(y),Jf=n(y,"LI",{});var yCe=s(Jf);Zee=n(yCe,"STRONG",{});var nDr=s(Zee);DVe=r(nDr,"flava"),nDr.forEach(t),GVe=r(yCe," \u2014 "),tk=n(yCe,"A",{href:!0});var sDr=s(tk);OVe=r(sDr,"FlavaConfig"),sDr.forEach(t),VVe=r(yCe," (Flava model)"),yCe.forEach(t),XVe=i(y),Yf=n(y,"LI",{});var LCe=s(Yf);eoe=n(LCe,"STRONG",{});var lDr=s(eoe);zVe=r(lDr,"fnet"),lDr.forEach(t),WVe=r(LCe," \u2014 "),ak=n(LCe,"A",{href:!0});var iDr=s(ak);QVe=r(iDr,"FNetConfig"),iDr.forEach(t),HVe=r(LCe," (FNet model)"),LCe.forEach(t),UVe=i(y),Kf=n(y,"LI",{});var xCe=s(Kf);ooe=n(xCe,"STRONG",{});var dDr=s(ooe);JVe=r(dDr,"fsmt"),dDr.forEach(t),YVe=r(xCe," \u2014 "),nk=n(xCe,"A",{href:!0});var cDr=s(nk);KVe=r(cDr,"FSMTConfig"),cDr.forEach(t),ZVe=r(xCe," (FairSeq Machine-Translation model)"),xCe.forEach(t),eXe=i(y),Zf=n(y,"LI",{});var $Ce=s(Zf);roe=n($Ce,"STRONG",{});var fDr=s(roe);oXe=r(fDr,"funnel"),fDr.forEach(t),rXe=r($Ce," \u2014 "),sk=n($Ce,"A",{href:!0});var mDr=s(sk);tXe=r(mDr,"FunnelConfig"),mDr.forEach(t),aXe=r($Ce," (Funnel Transformer model)"),$Ce.forEach(t),nXe=i(y),em=n(y,"LI",{});var kCe=s(em);toe=n(kCe,"STRONG",{});var gDr=s(toe);sXe=r(gDr,"glpn"),gDr.forEach(t),lXe=r(kCe," \u2014 "),lk=n(kCe,"A",{href:!0});var hDr=s(lk);iXe=r(hDr,"GLPNConfig"),hDr.forEach(t),dXe=r(kCe," (GLPN model)"),kCe.forEach(t),cXe=i(y),om=n(y,"LI",{});var SCe=s(om);aoe=n(SCe,"STRONG",{});var pDr=s(aoe);fXe=r(pDr,"gpt2"),pDr.forEach(t),mXe=r(SCe," \u2014 "),ik=n(SCe,"A",{href:!0});var uDr=s(ik);gXe=r(uDr,"GPT2Config"),uDr.forEach(t),hXe=r(SCe," (OpenAI GPT-2 model)"),SCe.forEach(t),pXe=i(y),rm=n(y,"LI",{});var RCe=s(rm);noe=n(RCe,"STRONG",{});var _Dr=s(noe);uXe=r(_Dr,"gpt_neo"),_Dr.forEach(t),_Xe=r(RCe," \u2014 "),dk=n(RCe,"A",{href:!0});var bDr=s(dk);bXe=r(bDr,"GPTNeoConfig"),bDr.forEach(t),vXe=r(RCe," (GPT Neo model)"),RCe.forEach(t),FXe=i(y),tm=n(y,"LI",{});var PCe=s(tm);soe=n(PCe,"STRONG",{});var vDr=s(soe);TXe=r(vDr,"gptj"),vDr.forEach(t),MXe=r(PCe," \u2014 "),ck=n(PCe,"A",{href:!0});var FDr=s(ck);EXe=r(FDr,"GPTJConfig"),FDr.forEach(t),CXe=r(PCe," (GPT-J model)"),PCe.forEach(t),wXe=i(y),am=n(y,"LI",{});var BCe=s(am);loe=n(BCe,"STRONG",{});var TDr=s(loe);AXe=r(TDr,"hubert"),TDr.forEach(t),yXe=r(BCe," \u2014 "),fk=n(BCe,"A",{href:!0});var MDr=s(fk);LXe=r(MDr,"HubertConfig"),MDr.forEach(t),xXe=r(BCe," (Hubert model)"),BCe.forEach(t),$Xe=i(y),nm=n(y,"LI",{});var ICe=s(nm);ioe=n(ICe,"STRONG",{});var EDr=s(ioe);kXe=r(EDr,"ibert"),EDr.forEach(t),SXe=r(ICe," \u2014 "),mk=n(ICe,"A",{href:!0});var CDr=s(mk);RXe=r(CDr,"IBertConfig"),CDr.forEach(t),PXe=r(ICe," (I-BERT model)"),ICe.forEach(t),BXe=i(y),sm=n(y,"LI",{});var qCe=s(sm);doe=n(qCe,"STRONG",{});var wDr=s(doe);IXe=r(wDr,"imagegpt"),wDr.forEach(t),qXe=r(qCe," \u2014 "),gk=n(qCe,"A",{href:!0});var ADr=s(gk);NXe=r(ADr,"ImageGPTConfig"),ADr.forEach(t),jXe=r(qCe," (ImageGPT model)"),qCe.forEach(t),DXe=i(y),lm=n(y,"LI",{});var NCe=s(lm);coe=n(NCe,"STRONG",{});var yDr=s(coe);GXe=r(yDr,"layoutlm"),yDr.forEach(t),OXe=r(NCe," \u2014 "),hk=n(NCe,"A",{href:!0});var LDr=s(hk);VXe=r(LDr,"LayoutLMConfig"),LDr.forEach(t),XXe=r(NCe," (LayoutLM model)"),NCe.forEach(t),zXe=i(y),im=n(y,"LI",{});var jCe=s(im);foe=n(jCe,"STRONG",{});var xDr=s(foe);WXe=r(xDr,"layoutlmv2"),xDr.forEach(t),QXe=r(jCe," \u2014 "),pk=n(jCe,"A",{href:!0});var $Dr=s(pk);HXe=r($Dr,"LayoutLMv2Config"),$Dr.forEach(t),UXe=r(jCe," (LayoutLMv2 model)"),jCe.forEach(t),JXe=i(y),dm=n(y,"LI",{});var DCe=s(dm);moe=n(DCe,"STRONG",{});var kDr=s(moe);YXe=r(kDr,"led"),kDr.forEach(t),KXe=r(DCe," \u2014 "),uk=n(DCe,"A",{href:!0});var SDr=s(uk);ZXe=r(SDr,"LEDConfig"),SDr.forEach(t),eze=r(DCe," (LED model)"),DCe.forEach(t),oze=i(y),cm=n(y,"LI",{});var GCe=s(cm);goe=n(GCe,"STRONG",{});var RDr=s(goe);rze=r(RDr,"longformer"),RDr.forEach(t),tze=r(GCe," \u2014 "),_k=n(GCe,"A",{href:!0});var PDr=s(_k);aze=r(PDr,"LongformerConfig"),PDr.forEach(t),nze=r(GCe," (Longformer model)"),GCe.forEach(t),sze=i(y),fm=n(y,"LI",{});var OCe=s(fm);hoe=n(OCe,"STRONG",{});var BDr=s(hoe);lze=r(BDr,"luke"),BDr.forEach(t),ize=r(OCe," \u2014 "),bk=n(OCe,"A",{href:!0});var IDr=s(bk);dze=r(IDr,"LukeConfig"),IDr.forEach(t),cze=r(OCe," (LUKE model)"),OCe.forEach(t),fze=i(y),mm=n(y,"LI",{});var VCe=s(mm);poe=n(VCe,"STRONG",{});var qDr=s(poe);mze=r(qDr,"lxmert"),qDr.forEach(t),gze=r(VCe," \u2014 "),vk=n(VCe,"A",{href:!0});var NDr=s(vk);hze=r(NDr,"LxmertConfig"),NDr.forEach(t),pze=r(VCe," (LXMERT model)"),VCe.forEach(t),uze=i(y),gm=n(y,"LI",{});var XCe=s(gm);uoe=n(XCe,"STRONG",{});var jDr=s(uoe);_ze=r(jDr,"m2m_100"),jDr.forEach(t),bze=r(XCe," \u2014 "),Fk=n(XCe,"A",{href:!0});var DDr=s(Fk);vze=r(DDr,"M2M100Config"),DDr.forEach(t),Fze=r(XCe," (M2M100 model)"),XCe.forEach(t),Tze=i(y),hm=n(y,"LI",{});var zCe=s(hm);_oe=n(zCe,"STRONG",{});var GDr=s(_oe);Mze=r(GDr,"marian"),GDr.forEach(t),Eze=r(zCe," \u2014 "),Tk=n(zCe,"A",{href:!0});var ODr=s(Tk);Cze=r(ODr,"MarianConfig"),ODr.forEach(t),wze=r(zCe," (Marian model)"),zCe.forEach(t),Aze=i(y),pm=n(y,"LI",{});var WCe=s(pm);boe=n(WCe,"STRONG",{});var VDr=s(boe);yze=r(VDr,"maskformer"),VDr.forEach(t),Lze=r(WCe," \u2014 "),Mk=n(WCe,"A",{href:!0});var XDr=s(Mk);xze=r(XDr,"MaskFormerConfig"),XDr.forEach(t),$ze=r(WCe," (MaskFormer model)"),WCe.forEach(t),kze=i(y),um=n(y,"LI",{});var QCe=s(um);voe=n(QCe,"STRONG",{});var zDr=s(voe);Sze=r(zDr,"mbart"),zDr.forEach(t),Rze=r(QCe," \u2014 "),Ek=n(QCe,"A",{href:!0});var WDr=s(Ek);Pze=r(WDr,"MBartConfig"),WDr.forEach(t),Bze=r(QCe," (mBART model)"),QCe.forEach(t),Ize=i(y),_m=n(y,"LI",{});var HCe=s(_m);Foe=n(HCe,"STRONG",{});var QDr=s(Foe);qze=r(QDr,"megatron-bert"),QDr.forEach(t),Nze=r(HCe," \u2014 "),Ck=n(HCe,"A",{href:!0});var HDr=s(Ck);jze=r(HDr,"MegatronBertConfig"),HDr.forEach(t),Dze=r(HCe," (MegatronBert model)"),HCe.forEach(t),Gze=i(y),bm=n(y,"LI",{});var UCe=s(bm);Toe=n(UCe,"STRONG",{});var UDr=s(Toe);Oze=r(UDr,"mobilebert"),UDr.forEach(t),Vze=r(UCe," \u2014 "),wk=n(UCe,"A",{href:!0});var JDr=s(wk);Xze=r(JDr,"MobileBertConfig"),JDr.forEach(t),zze=r(UCe," (MobileBERT model)"),UCe.forEach(t),Wze=i(y),vm=n(y,"LI",{});var JCe=s(vm);Moe=n(JCe,"STRONG",{});var YDr=s(Moe);Qze=r(YDr,"mpnet"),YDr.forEach(t),Hze=r(JCe," \u2014 "),Ak=n(JCe,"A",{href:!0});var KDr=s(Ak);Uze=r(KDr,"MPNetConfig"),KDr.forEach(t),Jze=r(JCe," (MPNet model)"),JCe.forEach(t),Yze=i(y),Fm=n(y,"LI",{});var YCe=s(Fm);Eoe=n(YCe,"STRONG",{});var ZDr=s(Eoe);Kze=r(ZDr,"mt5"),ZDr.forEach(t),Zze=r(YCe," \u2014 "),yk=n(YCe,"A",{href:!0});var eGr=s(yk);eWe=r(eGr,"MT5Config"),eGr.forEach(t),oWe=r(YCe," (mT5 model)"),YCe.forEach(t),rWe=i(y),Tm=n(y,"LI",{});var KCe=s(Tm);Coe=n(KCe,"STRONG",{});var oGr=s(Coe);tWe=r(oGr,"nystromformer"),oGr.forEach(t),aWe=r(KCe," \u2014 "),Lk=n(KCe,"A",{href:!0});var rGr=s(Lk);nWe=r(rGr,"NystromformerConfig"),rGr.forEach(t),sWe=r(KCe," (Nystromformer model)"),KCe.forEach(t),lWe=i(y),Mm=n(y,"LI",{});var ZCe=s(Mm);woe=n(ZCe,"STRONG",{});var tGr=s(woe);iWe=r(tGr,"openai-gpt"),tGr.forEach(t),dWe=r(ZCe," \u2014 "),xk=n(ZCe,"A",{href:!0});var aGr=s(xk);cWe=r(aGr,"OpenAIGPTConfig"),aGr.forEach(t),fWe=r(ZCe," (OpenAI GPT model)"),ZCe.forEach(t),mWe=i(y),Em=n(y,"LI",{});var e5e=s(Em);Aoe=n(e5e,"STRONG",{});var nGr=s(Aoe);gWe=r(nGr,"opt"),nGr.forEach(t),hWe=r(e5e," \u2014 "),$k=n(e5e,"A",{href:!0});var sGr=s($k);pWe=r(sGr,"OPTConfig"),sGr.forEach(t),uWe=r(e5e," (OPT model)"),e5e.forEach(t),_We=i(y),Cm=n(y,"LI",{});var o5e=s(Cm);yoe=n(o5e,"STRONG",{});var lGr=s(yoe);bWe=r(lGr,"pegasus"),lGr.forEach(t),vWe=r(o5e," \u2014 "),kk=n(o5e,"A",{href:!0});var iGr=s(kk);FWe=r(iGr,"PegasusConfig"),iGr.forEach(t),TWe=r(o5e," (Pegasus model)"),o5e.forEach(t),MWe=i(y),wm=n(y,"LI",{});var r5e=s(wm);Loe=n(r5e,"STRONG",{});var dGr=s(Loe);EWe=r(dGr,"perceiver"),dGr.forEach(t),CWe=r(r5e," \u2014 "),Sk=n(r5e,"A",{href:!0});var cGr=s(Sk);wWe=r(cGr,"PerceiverConfig"),cGr.forEach(t),AWe=r(r5e," (Perceiver model)"),r5e.forEach(t),yWe=i(y),Am=n(y,"LI",{});var t5e=s(Am);xoe=n(t5e,"STRONG",{});var fGr=s(xoe);LWe=r(fGr,"plbart"),fGr.forEach(t),xWe=r(t5e," \u2014 "),Rk=n(t5e,"A",{href:!0});var mGr=s(Rk);$We=r(mGr,"PLBartConfig"),mGr.forEach(t),kWe=r(t5e," (PLBart model)"),t5e.forEach(t),SWe=i(y),ym=n(y,"LI",{});var a5e=s(ym);$oe=n(a5e,"STRONG",{});var gGr=s($oe);RWe=r(gGr,"poolformer"),gGr.forEach(t),PWe=r(a5e," \u2014 "),Pk=n(a5e,"A",{href:!0});var hGr=s(Pk);BWe=r(hGr,"PoolFormerConfig"),hGr.forEach(t),IWe=r(a5e," (PoolFormer model)"),a5e.forEach(t),qWe=i(y),Lm=n(y,"LI",{});var n5e=s(Lm);koe=n(n5e,"STRONG",{});var pGr=s(koe);NWe=r(pGr,"prophetnet"),pGr.forEach(t),jWe=r(n5e," \u2014 "),Bk=n(n5e,"A",{href:!0});var uGr=s(Bk);DWe=r(uGr,"ProphetNetConfig"),uGr.forEach(t),GWe=r(n5e," (ProphetNet model)"),n5e.forEach(t),OWe=i(y),xm=n(y,"LI",{});var s5e=s(xm);Soe=n(s5e,"STRONG",{});var _Gr=s(Soe);VWe=r(_Gr,"qdqbert"),_Gr.forEach(t),XWe=r(s5e," \u2014 "),Ik=n(s5e,"A",{href:!0});var bGr=s(Ik);zWe=r(bGr,"QDQBertConfig"),bGr.forEach(t),WWe=r(s5e," (QDQBert model)"),s5e.forEach(t),QWe=i(y),$m=n(y,"LI",{});var l5e=s($m);Roe=n(l5e,"STRONG",{});var vGr=s(Roe);HWe=r(vGr,"rag"),vGr.forEach(t),UWe=r(l5e," \u2014 "),qk=n(l5e,"A",{href:!0});var FGr=s(qk);JWe=r(FGr,"RagConfig"),FGr.forEach(t),YWe=r(l5e," (RAG model)"),l5e.forEach(t),KWe=i(y),km=n(y,"LI",{});var i5e=s(km);Poe=n(i5e,"STRONG",{});var TGr=s(Poe);ZWe=r(TGr,"realm"),TGr.forEach(t),eQe=r(i5e," \u2014 "),Nk=n(i5e,"A",{href:!0});var MGr=s(Nk);oQe=r(MGr,"RealmConfig"),MGr.forEach(t),rQe=r(i5e," (Realm model)"),i5e.forEach(t),tQe=i(y),Sm=n(y,"LI",{});var d5e=s(Sm);Boe=n(d5e,"STRONG",{});var EGr=s(Boe);aQe=r(EGr,"reformer"),EGr.forEach(t),nQe=r(d5e," \u2014 "),jk=n(d5e,"A",{href:!0});var CGr=s(jk);sQe=r(CGr,"ReformerConfig"),CGr.forEach(t),lQe=r(d5e," (Reformer model)"),d5e.forEach(t),iQe=i(y),Rm=n(y,"LI",{});var c5e=s(Rm);Ioe=n(c5e,"STRONG",{});var wGr=s(Ioe);dQe=r(wGr,"regnet"),wGr.forEach(t),cQe=r(c5e," \u2014 "),Dk=n(c5e,"A",{href:!0});var AGr=s(Dk);fQe=r(AGr,"RegNetConfig"),AGr.forEach(t),mQe=r(c5e," (RegNet model)"),c5e.forEach(t),gQe=i(y),Pm=n(y,"LI",{});var f5e=s(Pm);qoe=n(f5e,"STRONG",{});var yGr=s(qoe);hQe=r(yGr,"rembert"),yGr.forEach(t),pQe=r(f5e," \u2014 "),Gk=n(f5e,"A",{href:!0});var LGr=s(Gk);uQe=r(LGr,"RemBertConfig"),LGr.forEach(t),_Qe=r(f5e," (RemBERT model)"),f5e.forEach(t),bQe=i(y),Bm=n(y,"LI",{});var m5e=s(Bm);Noe=n(m5e,"STRONG",{});var xGr=s(Noe);vQe=r(xGr,"resnet"),xGr.forEach(t),FQe=r(m5e," \u2014 "),Ok=n(m5e,"A",{href:!0});var $Gr=s(Ok);TQe=r($Gr,"ResNetConfig"),$Gr.forEach(t),MQe=r(m5e," (ResNet model)"),m5e.forEach(t),EQe=i(y),Im=n(y,"LI",{});var g5e=s(Im);joe=n(g5e,"STRONG",{});var kGr=s(joe);CQe=r(kGr,"retribert"),kGr.forEach(t),wQe=r(g5e," \u2014 "),Vk=n(g5e,"A",{href:!0});var SGr=s(Vk);AQe=r(SGr,"RetriBertConfig"),SGr.forEach(t),yQe=r(g5e," (RetriBERT model)"),g5e.forEach(t),LQe=i(y),qm=n(y,"LI",{});var h5e=s(qm);Doe=n(h5e,"STRONG",{});var RGr=s(Doe);xQe=r(RGr,"roberta"),RGr.forEach(t),$Qe=r(h5e," \u2014 "),Xk=n(h5e,"A",{href:!0});var PGr=s(Xk);kQe=r(PGr,"RobertaConfig"),PGr.forEach(t),SQe=r(h5e," (RoBERTa model)"),h5e.forEach(t),RQe=i(y),Nm=n(y,"LI",{});var p5e=s(Nm);Goe=n(p5e,"STRONG",{});var BGr=s(Goe);PQe=r(BGr,"roformer"),BGr.forEach(t),BQe=r(p5e," \u2014 "),zk=n(p5e,"A",{href:!0});var IGr=s(zk);IQe=r(IGr,"RoFormerConfig"),IGr.forEach(t),qQe=r(p5e," (RoFormer model)"),p5e.forEach(t),NQe=i(y),jm=n(y,"LI",{});var u5e=s(jm);Ooe=n(u5e,"STRONG",{});var qGr=s(Ooe);jQe=r(qGr,"segformer"),qGr.forEach(t),DQe=r(u5e," \u2014 "),Wk=n(u5e,"A",{href:!0});var NGr=s(Wk);GQe=r(NGr,"SegformerConfig"),NGr.forEach(t),OQe=r(u5e," (SegFormer model)"),u5e.forEach(t),VQe=i(y),Dm=n(y,"LI",{});var _5e=s(Dm);Voe=n(_5e,"STRONG",{});var jGr=s(Voe);XQe=r(jGr,"sew"),jGr.forEach(t),zQe=r(_5e," \u2014 "),Qk=n(_5e,"A",{href:!0});var DGr=s(Qk);WQe=r(DGr,"SEWConfig"),DGr.forEach(t),QQe=r(_5e," (SEW model)"),_5e.forEach(t),HQe=i(y),Gm=n(y,"LI",{});var b5e=s(Gm);Xoe=n(b5e,"STRONG",{});var GGr=s(Xoe);UQe=r(GGr,"sew-d"),GGr.forEach(t),JQe=r(b5e," \u2014 "),Hk=n(b5e,"A",{href:!0});var OGr=s(Hk);YQe=r(OGr,"SEWDConfig"),OGr.forEach(t),KQe=r(b5e," (SEW-D model)"),b5e.forEach(t),ZQe=i(y),Om=n(y,"LI",{});var v5e=s(Om);zoe=n(v5e,"STRONG",{});var VGr=s(zoe);eHe=r(VGr,"speech-encoder-decoder"),VGr.forEach(t),oHe=r(v5e," \u2014 "),Uk=n(v5e,"A",{href:!0});var XGr=s(Uk);rHe=r(XGr,"SpeechEncoderDecoderConfig"),XGr.forEach(t),tHe=r(v5e," (Speech Encoder decoder model)"),v5e.forEach(t),aHe=i(y),Vm=n(y,"LI",{});var F5e=s(Vm);Woe=n(F5e,"STRONG",{});var zGr=s(Woe);nHe=r(zGr,"speech_to_text"),zGr.forEach(t),sHe=r(F5e," \u2014 "),Jk=n(F5e,"A",{href:!0});var WGr=s(Jk);lHe=r(WGr,"Speech2TextConfig"),WGr.forEach(t),iHe=r(F5e," (Speech2Text model)"),F5e.forEach(t),dHe=i(y),Xm=n(y,"LI",{});var T5e=s(Xm);Qoe=n(T5e,"STRONG",{});var QGr=s(Qoe);cHe=r(QGr,"speech_to_text_2"),QGr.forEach(t),fHe=r(T5e," \u2014 "),Yk=n(T5e,"A",{href:!0});var HGr=s(Yk);mHe=r(HGr,"Speech2Text2Config"),HGr.forEach(t),gHe=r(T5e," (Speech2Text2 model)"),T5e.forEach(t),hHe=i(y),zm=n(y,"LI",{});var M5e=s(zm);Hoe=n(M5e,"STRONG",{});var UGr=s(Hoe);pHe=r(UGr,"splinter"),UGr.forEach(t),uHe=r(M5e," \u2014 "),Kk=n(M5e,"A",{href:!0});var JGr=s(Kk);_He=r(JGr,"SplinterConfig"),JGr.forEach(t),bHe=r(M5e," (Splinter model)"),M5e.forEach(t),vHe=i(y),Wm=n(y,"LI",{});var E5e=s(Wm);Uoe=n(E5e,"STRONG",{});var YGr=s(Uoe);FHe=r(YGr,"squeezebert"),YGr.forEach(t),THe=r(E5e," \u2014 "),Zk=n(E5e,"A",{href:!0});var KGr=s(Zk);MHe=r(KGr,"SqueezeBertConfig"),KGr.forEach(t),EHe=r(E5e," (SqueezeBERT model)"),E5e.forEach(t),CHe=i(y),Qm=n(y,"LI",{});var C5e=s(Qm);Joe=n(C5e,"STRONG",{});var ZGr=s(Joe);wHe=r(ZGr,"swin"),ZGr.forEach(t),AHe=r(C5e," \u2014 "),eS=n(C5e,"A",{href:!0});var eOr=s(eS);yHe=r(eOr,"SwinConfig"),eOr.forEach(t),LHe=r(C5e," (Swin model)"),C5e.forEach(t),xHe=i(y),Hm=n(y,"LI",{});var w5e=s(Hm);Yoe=n(w5e,"STRONG",{});var oOr=s(Yoe);$He=r(oOr,"t5"),oOr.forEach(t),kHe=r(w5e," \u2014 "),oS=n(w5e,"A",{href:!0});var rOr=s(oS);SHe=r(rOr,"T5Config"),rOr.forEach(t),RHe=r(w5e," (T5 model)"),w5e.forEach(t),PHe=i(y),Um=n(y,"LI",{});var A5e=s(Um);Koe=n(A5e,"STRONG",{});var tOr=s(Koe);BHe=r(tOr,"tapas"),tOr.forEach(t),IHe=r(A5e," \u2014 "),rS=n(A5e,"A",{href:!0});var aOr=s(rS);qHe=r(aOr,"TapasConfig"),aOr.forEach(t),NHe=r(A5e," (TAPAS model)"),A5e.forEach(t),jHe=i(y),Jm=n(y,"LI",{});var y5e=s(Jm);Zoe=n(y5e,"STRONG",{});var nOr=s(Zoe);DHe=r(nOr,"transfo-xl"),nOr.forEach(t),GHe=r(y5e," \u2014 "),tS=n(y5e,"A",{href:!0});var sOr=s(tS);OHe=r(sOr,"TransfoXLConfig"),sOr.forEach(t),VHe=r(y5e," (Transformer-XL model)"),y5e.forEach(t),XHe=i(y),Ym=n(y,"LI",{});var L5e=s(Ym);ere=n(L5e,"STRONG",{});var lOr=s(ere);zHe=r(lOr,"trocr"),lOr.forEach(t),WHe=r(L5e," \u2014 "),aS=n(L5e,"A",{href:!0});var iOr=s(aS);QHe=r(iOr,"TrOCRConfig"),iOr.forEach(t),HHe=r(L5e," (TrOCR model)"),L5e.forEach(t),UHe=i(y),Km=n(y,"LI",{});var x5e=s(Km);ore=n(x5e,"STRONG",{});var dOr=s(ore);JHe=r(dOr,"unispeech"),dOr.forEach(t),YHe=r(x5e," \u2014 "),nS=n(x5e,"A",{href:!0});var cOr=s(nS);KHe=r(cOr,"UniSpeechConfig"),cOr.forEach(t),ZHe=r(x5e," (UniSpeech model)"),x5e.forEach(t),eUe=i(y),Zm=n(y,"LI",{});var $5e=s(Zm);rre=n($5e,"STRONG",{});var fOr=s(rre);oUe=r(fOr,"unispeech-sat"),fOr.forEach(t),rUe=r($5e," \u2014 "),sS=n($5e,"A",{href:!0});var mOr=s(sS);tUe=r(mOr,"UniSpeechSatConfig"),mOr.forEach(t),aUe=r($5e," (UniSpeechSat model)"),$5e.forEach(t),nUe=i(y),eg=n(y,"LI",{});var k5e=s(eg);tre=n(k5e,"STRONG",{});var gOr=s(tre);sUe=r(gOr,"van"),gOr.forEach(t),lUe=r(k5e," \u2014 "),lS=n(k5e,"A",{href:!0});var hOr=s(lS);iUe=r(hOr,"VanConfig"),hOr.forEach(t),dUe=r(k5e," (VAN model)"),k5e.forEach(t),cUe=i(y),og=n(y,"LI",{});var S5e=s(og);are=n(S5e,"STRONG",{});var pOr=s(are);fUe=r(pOr,"vilt"),pOr.forEach(t),mUe=r(S5e," \u2014 "),iS=n(S5e,"A",{href:!0});var uOr=s(iS);gUe=r(uOr,"ViltConfig"),uOr.forEach(t),hUe=r(S5e," (ViLT model)"),S5e.forEach(t),pUe=i(y),rg=n(y,"LI",{});var R5e=s(rg);nre=n(R5e,"STRONG",{});var _Or=s(nre);uUe=r(_Or,"vision-encoder-decoder"),_Or.forEach(t),_Ue=r(R5e," \u2014 "),dS=n(R5e,"A",{href:!0});var bOr=s(dS);bUe=r(bOr,"VisionEncoderDecoderConfig"),bOr.forEach(t),vUe=r(R5e," (Vision Encoder decoder model)"),R5e.forEach(t),FUe=i(y),tg=n(y,"LI",{});var P5e=s(tg);sre=n(P5e,"STRONG",{});var vOr=s(sre);TUe=r(vOr,"vision-text-dual-encoder"),vOr.forEach(t),MUe=r(P5e," \u2014 "),cS=n(P5e,"A",{href:!0});var FOr=s(cS);EUe=r(FOr,"VisionTextDualEncoderConfig"),FOr.forEach(t),CUe=r(P5e," (VisionTextDualEncoder model)"),P5e.forEach(t),wUe=i(y),ag=n(y,"LI",{});var B5e=s(ag);lre=n(B5e,"STRONG",{});var TOr=s(lre);AUe=r(TOr,"visual_bert"),TOr.forEach(t),yUe=r(B5e," \u2014 "),fS=n(B5e,"A",{href:!0});var MOr=s(fS);LUe=r(MOr,"VisualBertConfig"),MOr.forEach(t),xUe=r(B5e," (VisualBert model)"),B5e.forEach(t),$Ue=i(y),ng=n(y,"LI",{});var I5e=s(ng);ire=n(I5e,"STRONG",{});var EOr=s(ire);kUe=r(EOr,"vit"),EOr.forEach(t),SUe=r(I5e," \u2014 "),mS=n(I5e,"A",{href:!0});var COr=s(mS);RUe=r(COr,"ViTConfig"),COr.forEach(t),PUe=r(I5e," (ViT model)"),I5e.forEach(t),BUe=i(y),sg=n(y,"LI",{});var q5e=s(sg);dre=n(q5e,"STRONG",{});var wOr=s(dre);IUe=r(wOr,"vit_mae"),wOr.forEach(t),qUe=r(q5e," \u2014 "),gS=n(q5e,"A",{href:!0});var AOr=s(gS);NUe=r(AOr,"ViTMAEConfig"),AOr.forEach(t),jUe=r(q5e," (ViTMAE model)"),q5e.forEach(t),DUe=i(y),lg=n(y,"LI",{});var N5e=s(lg);cre=n(N5e,"STRONG",{});var yOr=s(cre);GUe=r(yOr,"wav2vec2"),yOr.forEach(t),OUe=r(N5e," \u2014 "),hS=n(N5e,"A",{href:!0});var LOr=s(hS);VUe=r(LOr,"Wav2Vec2Config"),LOr.forEach(t),XUe=r(N5e," (Wav2Vec2 model)"),N5e.forEach(t),zUe=i(y),ig=n(y,"LI",{});var j5e=s(ig);fre=n(j5e,"STRONG",{});var xOr=s(fre);WUe=r(xOr,"wav2vec2-conformer"),xOr.forEach(t),QUe=r(j5e," \u2014 "),pS=n(j5e,"A",{href:!0});var $Or=s(pS);HUe=r($Or,"Wav2Vec2ConformerConfig"),$Or.forEach(t),UUe=r(j5e," (Wav2Vec2-Conformer model)"),j5e.forEach(t),JUe=i(y),dg=n(y,"LI",{});var D5e=s(dg);mre=n(D5e,"STRONG",{});var kOr=s(mre);YUe=r(kOr,"wavlm"),kOr.forEach(t),KUe=r(D5e," \u2014 "),uS=n(D5e,"A",{href:!0});var SOr=s(uS);ZUe=r(SOr,"WavLMConfig"),SOr.forEach(t),eJe=r(D5e," (WavLM model)"),D5e.forEach(t),oJe=i(y),cg=n(y,"LI",{});var G5e=s(cg);gre=n(G5e,"STRONG",{});var ROr=s(gre);rJe=r(ROr,"xglm"),ROr.forEach(t),tJe=r(G5e," \u2014 "),_S=n(G5e,"A",{href:!0});var POr=s(_S);aJe=r(POr,"XGLMConfig"),POr.forEach(t),nJe=r(G5e," (XGLM model)"),G5e.forEach(t),sJe=i(y),fg=n(y,"LI",{});var O5e=s(fg);hre=n(O5e,"STRONG",{});var BOr=s(hre);lJe=r(BOr,"xlm"),BOr.forEach(t),iJe=r(O5e," \u2014 "),bS=n(O5e,"A",{href:!0});var IOr=s(bS);dJe=r(IOr,"XLMConfig"),IOr.forEach(t),cJe=r(O5e," (XLM model)"),O5e.forEach(t),fJe=i(y),mg=n(y,"LI",{});var V5e=s(mg);pre=n(V5e,"STRONG",{});var qOr=s(pre);mJe=r(qOr,"xlm-prophetnet"),qOr.forEach(t),gJe=r(V5e," \u2014 "),vS=n(V5e,"A",{href:!0});var NOr=s(vS);hJe=r(NOr,"XLMProphetNetConfig"),NOr.forEach(t),pJe=r(V5e," (XLMProphetNet model)"),V5e.forEach(t),uJe=i(y),gg=n(y,"LI",{});var X5e=s(gg);ure=n(X5e,"STRONG",{});var jOr=s(ure);_Je=r(jOr,"xlm-roberta"),jOr.forEach(t),bJe=r(X5e," \u2014 "),FS=n(X5e,"A",{href:!0});var DOr=s(FS);vJe=r(DOr,"XLMRobertaConfig"),DOr.forEach(t),FJe=r(X5e," (XLM-RoBERTa model)"),X5e.forEach(t),TJe=i(y),hg=n(y,"LI",{});var z5e=s(hg);_re=n(z5e,"STRONG",{});var GOr=s(_re);MJe=r(GOr,"xlm-roberta-xl"),GOr.forEach(t),EJe=r(z5e," \u2014 "),TS=n(z5e,"A",{href:!0});var OOr=s(TS);CJe=r(OOr,"XLMRobertaXLConfig"),OOr.forEach(t),wJe=r(z5e," (XLM-RoBERTa-XL model)"),z5e.forEach(t),AJe=i(y),pg=n(y,"LI",{});var W5e=s(pg);bre=n(W5e,"STRONG",{});var VOr=s(bre);yJe=r(VOr,"xlnet"),VOr.forEach(t),LJe=r(W5e," \u2014 "),MS=n(W5e,"A",{href:!0});var XOr=s(MS);xJe=r(XOr,"XLNetConfig"),XOr.forEach(t),$Je=r(W5e," (XLNet model)"),W5e.forEach(t),kJe=i(y),ug=n(y,"LI",{});var Q5e=s(ug);vre=n(Q5e,"STRONG",{});var zOr=s(vre);SJe=r(zOr,"yolos"),zOr.forEach(t),RJe=r(Q5e," \u2014 "),ES=n(Q5e,"A",{href:!0});var WOr=s(ES);PJe=r(WOr,"YolosConfig"),WOr.forEach(t),BJe=r(Q5e," (YOLOS model)"),Q5e.forEach(t),IJe=i(y),_g=n(y,"LI",{});var H5e=s(_g);Fre=n(H5e,"STRONG",{});var QOr=s(Fre);qJe=r(QOr,"yoso"),QOr.forEach(t),NJe=r(H5e," \u2014 "),CS=n(H5e,"A",{href:!0});var HOr=s(CS);jJe=r(HOr,"YosoConfig"),HOr.forEach(t),DJe=r(H5e," (YOSO model)"),H5e.forEach(t),y.forEach(t),GJe=i(ot),T(bg.$$.fragment,ot),ot.forEach(t),OJe=i(et),vg=n(et,"DIV",{class:!0});var TNe=s(vg);T(f0.$$.fragment,TNe),VJe=i(TNe),Tre=n(TNe,"P",{});var UOr=s(Tre);XJe=r(UOr,"Register a new configuration for this class."),UOr.forEach(t),TNe.forEach(t),et.forEach(t),CIe=i(f),vi=n(f,"H2",{class:!0});var MNe=s(vi);Fg=n(MNe,"A",{id:!0,class:!0,href:!0});var JOr=s(Fg);Mre=n(JOr,"SPAN",{});var YOr=s(Mre);T(m0.$$.fragment,YOr),YOr.forEach(t),JOr.forEach(t),zJe=i(MNe),Ere=n(MNe,"SPAN",{});var KOr=s(Ere);WJe=r(KOr,"AutoTokenizer"),KOr.forEach(t),MNe.forEach(t),wIe=i(f),wo=n(f,"DIV",{class:!0});var Bs=s(wo);T(g0.$$.fragment,Bs),QJe=i(Bs),h0=n(Bs,"P",{});var ENe=s(h0);HJe=r(ENe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wS=n(ENe,"A",{href:!0});var ZOr=s(wS);UJe=r(ZOr,"AutoTokenizer.from_pretrained()"),ZOr.forEach(t),JJe=r(ENe," class method."),ENe.forEach(t),YJe=i(Bs),p0=n(Bs,"P",{});var CNe=s(p0);KJe=r(CNe,"This class cannot be instantiated directly using "),Cre=n(CNe,"CODE",{});var eVr=s(Cre);ZJe=r(eVr,"__init__()"),eVr.forEach(t),eYe=r(CNe," (throws an error)."),CNe.forEach(t),oYe=i(Bs),Cr=n(Bs,"DIV",{class:!0});var Is=s(Cr);T(u0.$$.fragment,Is),rYe=i(Is),wre=n(Is,"P",{});var oVr=s(wre);tYe=r(oVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oVr.forEach(t),aYe=i(Is),Aa=n(Is,"P",{});var lw=s(Aa);nYe=r(lw,"The tokenizer class to instantiate is selected based on the "),Are=n(lw,"CODE",{});var rVr=s(Are);sYe=r(rVr,"model_type"),rVr.forEach(t),lYe=r(lw,` property of the config object (either
passed as an argument or loaded from `),yre=n(lw,"CODE",{});var tVr=s(yre);iYe=r(tVr,"pretrained_model_name_or_path"),tVr.forEach(t),dYe=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lre=n(lw,"CODE",{});var aVr=s(Lre);cYe=r(aVr,"pretrained_model_name_or_path"),aVr.forEach(t),fYe=r(lw,":"),lw.forEach(t),mYe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var _7=s(kn);xre=n(_7,"STRONG",{});var nVr=s(xre);gYe=r(nVr,"albert"),nVr.forEach(t),hYe=r(_7," \u2014 "),AS=n(_7,"A",{href:!0});var sVr=s(AS);pYe=r(sVr,"AlbertTokenizer"),sVr.forEach(t),uYe=r(_7," or "),yS=n(_7,"A",{href:!0});var lVr=s(yS);_Ye=r(lVr,"AlbertTokenizerFast"),lVr.forEach(t),bYe=r(_7," (ALBERT model)"),_7.forEach(t),vYe=i(S),Sn=n(S,"LI",{});var b7=s(Sn);$re=n(b7,"STRONG",{});var iVr=s($re);FYe=r(iVr,"bart"),iVr.forEach(t),TYe=r(b7," \u2014 "),LS=n(b7,"A",{href:!0});var dVr=s(LS);MYe=r(dVr,"BartTokenizer"),dVr.forEach(t),EYe=r(b7," or "),xS=n(b7,"A",{href:!0});var cVr=s(xS);CYe=r(cVr,"BartTokenizerFast"),cVr.forEach(t),wYe=r(b7," (BART model)"),b7.forEach(t),AYe=i(S),Rn=n(S,"LI",{});var v7=s(Rn);kre=n(v7,"STRONG",{});var fVr=s(kre);yYe=r(fVr,"barthez"),fVr.forEach(t),LYe=r(v7," \u2014 "),$S=n(v7,"A",{href:!0});var mVr=s($S);xYe=r(mVr,"BarthezTokenizer"),mVr.forEach(t),$Ye=r(v7," or "),kS=n(v7,"A",{href:!0});var gVr=s(kS);kYe=r(gVr,"BarthezTokenizerFast"),gVr.forEach(t),SYe=r(v7," (BARThez model)"),v7.forEach(t),RYe=i(S),Tg=n(S,"LI",{});var U5e=s(Tg);Sre=n(U5e,"STRONG",{});var hVr=s(Sre);PYe=r(hVr,"bartpho"),hVr.forEach(t),BYe=r(U5e," \u2014 "),SS=n(U5e,"A",{href:!0});var pVr=s(SS);IYe=r(pVr,"BartphoTokenizer"),pVr.forEach(t),qYe=r(U5e," (BARTpho model)"),U5e.forEach(t),NYe=i(S),Pn=n(S,"LI",{});var F7=s(Pn);Rre=n(F7,"STRONG",{});var uVr=s(Rre);jYe=r(uVr,"bert"),uVr.forEach(t),DYe=r(F7," \u2014 "),RS=n(F7,"A",{href:!0});var _Vr=s(RS);GYe=r(_Vr,"BertTokenizer"),_Vr.forEach(t),OYe=r(F7," or "),PS=n(F7,"A",{href:!0});var bVr=s(PS);VYe=r(bVr,"BertTokenizerFast"),bVr.forEach(t),XYe=r(F7," (BERT model)"),F7.forEach(t),zYe=i(S),Mg=n(S,"LI",{});var J5e=s(Mg);Pre=n(J5e,"STRONG",{});var vVr=s(Pre);WYe=r(vVr,"bert-generation"),vVr.forEach(t),QYe=r(J5e," \u2014 "),BS=n(J5e,"A",{href:!0});var FVr=s(BS);HYe=r(FVr,"BertGenerationTokenizer"),FVr.forEach(t),UYe=r(J5e," (Bert Generation model)"),J5e.forEach(t),JYe=i(S),Eg=n(S,"LI",{});var Y5e=s(Eg);Bre=n(Y5e,"STRONG",{});var TVr=s(Bre);YYe=r(TVr,"bert-japanese"),TVr.forEach(t),KYe=r(Y5e," \u2014 "),IS=n(Y5e,"A",{href:!0});var MVr=s(IS);ZYe=r(MVr,"BertJapaneseTokenizer"),MVr.forEach(t),eKe=r(Y5e," (BertJapanese model)"),Y5e.forEach(t),oKe=i(S),Cg=n(S,"LI",{});var K5e=s(Cg);Ire=n(K5e,"STRONG",{});var EVr=s(Ire);rKe=r(EVr,"bertweet"),EVr.forEach(t),tKe=r(K5e," \u2014 "),qS=n(K5e,"A",{href:!0});var CVr=s(qS);aKe=r(CVr,"BertweetTokenizer"),CVr.forEach(t),nKe=r(K5e," (Bertweet model)"),K5e.forEach(t),sKe=i(S),Bn=n(S,"LI",{});var T7=s(Bn);qre=n(T7,"STRONG",{});var wVr=s(qre);lKe=r(wVr,"big_bird"),wVr.forEach(t),iKe=r(T7," \u2014 "),NS=n(T7,"A",{href:!0});var AVr=s(NS);dKe=r(AVr,"BigBirdTokenizer"),AVr.forEach(t),cKe=r(T7," or "),jS=n(T7,"A",{href:!0});var yVr=s(jS);fKe=r(yVr,"BigBirdTokenizerFast"),yVr.forEach(t),mKe=r(T7," (BigBird model)"),T7.forEach(t),gKe=i(S),In=n(S,"LI",{});var M7=s(In);Nre=n(M7,"STRONG",{});var LVr=s(Nre);hKe=r(LVr,"bigbird_pegasus"),LVr.forEach(t),pKe=r(M7," \u2014 "),DS=n(M7,"A",{href:!0});var xVr=s(DS);uKe=r(xVr,"PegasusTokenizer"),xVr.forEach(t),_Ke=r(M7," or "),GS=n(M7,"A",{href:!0});var $Vr=s(GS);bKe=r($Vr,"PegasusTokenizerFast"),$Vr.forEach(t),vKe=r(M7," (BigBirdPegasus model)"),M7.forEach(t),FKe=i(S),qn=n(S,"LI",{});var E7=s(qn);jre=n(E7,"STRONG",{});var kVr=s(jre);TKe=r(kVr,"blenderbot"),kVr.forEach(t),MKe=r(E7," \u2014 "),OS=n(E7,"A",{href:!0});var SVr=s(OS);EKe=r(SVr,"BlenderbotTokenizer"),SVr.forEach(t),CKe=r(E7," or "),VS=n(E7,"A",{href:!0});var RVr=s(VS);wKe=r(RVr,"BlenderbotTokenizerFast"),RVr.forEach(t),AKe=r(E7," (Blenderbot model)"),E7.forEach(t),yKe=i(S),wg=n(S,"LI",{});var Z5e=s(wg);Dre=n(Z5e,"STRONG",{});var PVr=s(Dre);LKe=r(PVr,"blenderbot-small"),PVr.forEach(t),xKe=r(Z5e," \u2014 "),XS=n(Z5e,"A",{href:!0});var BVr=s(XS);$Ke=r(BVr,"BlenderbotSmallTokenizer"),BVr.forEach(t),kKe=r(Z5e," (BlenderbotSmall model)"),Z5e.forEach(t),SKe=i(S),Ag=n(S,"LI",{});var e3e=s(Ag);Gre=n(e3e,"STRONG",{});var IVr=s(Gre);RKe=r(IVr,"byt5"),IVr.forEach(t),PKe=r(e3e," \u2014 "),zS=n(e3e,"A",{href:!0});var qVr=s(zS);BKe=r(qVr,"ByT5Tokenizer"),qVr.forEach(t),IKe=r(e3e," (ByT5 model)"),e3e.forEach(t),qKe=i(S),Nn=n(S,"LI",{});var C7=s(Nn);Ore=n(C7,"STRONG",{});var NVr=s(Ore);NKe=r(NVr,"camembert"),NVr.forEach(t),jKe=r(C7," \u2014 "),WS=n(C7,"A",{href:!0});var jVr=s(WS);DKe=r(jVr,"CamembertTokenizer"),jVr.forEach(t),GKe=r(C7," or "),QS=n(C7,"A",{href:!0});var DVr=s(QS);OKe=r(DVr,"CamembertTokenizerFast"),DVr.forEach(t),VKe=r(C7," (CamemBERT model)"),C7.forEach(t),XKe=i(S),yg=n(S,"LI",{});var o3e=s(yg);Vre=n(o3e,"STRONG",{});var GVr=s(Vre);zKe=r(GVr,"canine"),GVr.forEach(t),WKe=r(o3e," \u2014 "),HS=n(o3e,"A",{href:!0});var OVr=s(HS);QKe=r(OVr,"CanineTokenizer"),OVr.forEach(t),HKe=r(o3e," (Canine model)"),o3e.forEach(t),UKe=i(S),jn=n(S,"LI",{});var w7=s(jn);Xre=n(w7,"STRONG",{});var VVr=s(Xre);JKe=r(VVr,"clip"),VVr.forEach(t),YKe=r(w7," \u2014 "),US=n(w7,"A",{href:!0});var XVr=s(US);KKe=r(XVr,"CLIPTokenizer"),XVr.forEach(t),ZKe=r(w7," or "),JS=n(w7,"A",{href:!0});var zVr=s(JS);eZe=r(zVr,"CLIPTokenizerFast"),zVr.forEach(t),oZe=r(w7," (CLIP model)"),w7.forEach(t),rZe=i(S),Dn=n(S,"LI",{});var A7=s(Dn);zre=n(A7,"STRONG",{});var WVr=s(zre);tZe=r(WVr,"convbert"),WVr.forEach(t),aZe=r(A7," \u2014 "),YS=n(A7,"A",{href:!0});var QVr=s(YS);nZe=r(QVr,"ConvBertTokenizer"),QVr.forEach(t),sZe=r(A7," or "),KS=n(A7,"A",{href:!0});var HVr=s(KS);lZe=r(HVr,"ConvBertTokenizerFast"),HVr.forEach(t),iZe=r(A7," (ConvBERT model)"),A7.forEach(t),dZe=i(S),Gn=n(S,"LI",{});var y7=s(Gn);Wre=n(y7,"STRONG",{});var UVr=s(Wre);cZe=r(UVr,"cpm"),UVr.forEach(t),fZe=r(y7," \u2014 "),ZS=n(y7,"A",{href:!0});var JVr=s(ZS);mZe=r(JVr,"CpmTokenizer"),JVr.forEach(t),gZe=r(y7," or "),eR=n(y7,"A",{href:!0});var YVr=s(eR);hZe=r(YVr,"CpmTokenizerFast"),YVr.forEach(t),pZe=r(y7," (CPM model)"),y7.forEach(t),uZe=i(S),Lg=n(S,"LI",{});var r3e=s(Lg);Qre=n(r3e,"STRONG",{});var KVr=s(Qre);_Ze=r(KVr,"ctrl"),KVr.forEach(t),bZe=r(r3e," \u2014 "),oR=n(r3e,"A",{href:!0});var ZVr=s(oR);vZe=r(ZVr,"CTRLTokenizer"),ZVr.forEach(t),FZe=r(r3e," (CTRL model)"),r3e.forEach(t),TZe=i(S),On=n(S,"LI",{});var L7=s(On);Hre=n(L7,"STRONG",{});var eXr=s(Hre);MZe=r(eXr,"data2vec-text"),eXr.forEach(t),EZe=r(L7," \u2014 "),rR=n(L7,"A",{href:!0});var oXr=s(rR);CZe=r(oXr,"RobertaTokenizer"),oXr.forEach(t),wZe=r(L7," or "),tR=n(L7,"A",{href:!0});var rXr=s(tR);AZe=r(rXr,"RobertaTokenizerFast"),rXr.forEach(t),yZe=r(L7," (Data2VecText model)"),L7.forEach(t),LZe=i(S),Vn=n(S,"LI",{});var x7=s(Vn);Ure=n(x7,"STRONG",{});var tXr=s(Ure);xZe=r(tXr,"deberta"),tXr.forEach(t),$Ze=r(x7," \u2014 "),aR=n(x7,"A",{href:!0});var aXr=s(aR);kZe=r(aXr,"DebertaTokenizer"),aXr.forEach(t),SZe=r(x7," or "),nR=n(x7,"A",{href:!0});var nXr=s(nR);RZe=r(nXr,"DebertaTokenizerFast"),nXr.forEach(t),PZe=r(x7," (DeBERTa model)"),x7.forEach(t),BZe=i(S),Xn=n(S,"LI",{});var $7=s(Xn);Jre=n($7,"STRONG",{});var sXr=s(Jre);IZe=r(sXr,"deberta-v2"),sXr.forEach(t),qZe=r($7," \u2014 "),sR=n($7,"A",{href:!0});var lXr=s(sR);NZe=r(lXr,"DebertaV2Tokenizer"),lXr.forEach(t),jZe=r($7," or "),lR=n($7,"A",{href:!0});var iXr=s(lR);DZe=r(iXr,"DebertaV2TokenizerFast"),iXr.forEach(t),GZe=r($7," (DeBERTa-v2 model)"),$7.forEach(t),OZe=i(S),zn=n(S,"LI",{});var k7=s(zn);Yre=n(k7,"STRONG",{});var dXr=s(Yre);VZe=r(dXr,"distilbert"),dXr.forEach(t),XZe=r(k7," \u2014 "),iR=n(k7,"A",{href:!0});var cXr=s(iR);zZe=r(cXr,"DistilBertTokenizer"),cXr.forEach(t),WZe=r(k7," or "),dR=n(k7,"A",{href:!0});var fXr=s(dR);QZe=r(fXr,"DistilBertTokenizerFast"),fXr.forEach(t),HZe=r(k7," (DistilBERT model)"),k7.forEach(t),UZe=i(S),Wn=n(S,"LI",{});var S7=s(Wn);Kre=n(S7,"STRONG",{});var mXr=s(Kre);JZe=r(mXr,"dpr"),mXr.forEach(t),YZe=r(S7," \u2014 "),cR=n(S7,"A",{href:!0});var gXr=s(cR);KZe=r(gXr,"DPRQuestionEncoderTokenizer"),gXr.forEach(t),ZZe=r(S7," or "),fR=n(S7,"A",{href:!0});var hXr=s(fR);eeo=r(hXr,"DPRQuestionEncoderTokenizerFast"),hXr.forEach(t),oeo=r(S7," (DPR model)"),S7.forEach(t),reo=i(S),Qn=n(S,"LI",{});var R7=s(Qn);Zre=n(R7,"STRONG",{});var pXr=s(Zre);teo=r(pXr,"electra"),pXr.forEach(t),aeo=r(R7," \u2014 "),mR=n(R7,"A",{href:!0});var uXr=s(mR);neo=r(uXr,"ElectraTokenizer"),uXr.forEach(t),seo=r(R7," or "),gR=n(R7,"A",{href:!0});var _Xr=s(gR);leo=r(_Xr,"ElectraTokenizerFast"),_Xr.forEach(t),ieo=r(R7," (ELECTRA model)"),R7.forEach(t),deo=i(S),xg=n(S,"LI",{});var t3e=s(xg);ete=n(t3e,"STRONG",{});var bXr=s(ete);ceo=r(bXr,"flaubert"),bXr.forEach(t),feo=r(t3e," \u2014 "),hR=n(t3e,"A",{href:!0});var vXr=s(hR);meo=r(vXr,"FlaubertTokenizer"),vXr.forEach(t),geo=r(t3e," (FlauBERT model)"),t3e.forEach(t),heo=i(S),Hn=n(S,"LI",{});var P7=s(Hn);ote=n(P7,"STRONG",{});var FXr=s(ote);peo=r(FXr,"fnet"),FXr.forEach(t),ueo=r(P7," \u2014 "),pR=n(P7,"A",{href:!0});var TXr=s(pR);_eo=r(TXr,"FNetTokenizer"),TXr.forEach(t),beo=r(P7," or "),uR=n(P7,"A",{href:!0});var MXr=s(uR);veo=r(MXr,"FNetTokenizerFast"),MXr.forEach(t),Feo=r(P7," (FNet model)"),P7.forEach(t),Teo=i(S),$g=n(S,"LI",{});var a3e=s($g);rte=n(a3e,"STRONG",{});var EXr=s(rte);Meo=r(EXr,"fsmt"),EXr.forEach(t),Eeo=r(a3e," \u2014 "),_R=n(a3e,"A",{href:!0});var CXr=s(_R);Ceo=r(CXr,"FSMTTokenizer"),CXr.forEach(t),weo=r(a3e," (FairSeq Machine-Translation model)"),a3e.forEach(t),Aeo=i(S),Un=n(S,"LI",{});var B7=s(Un);tte=n(B7,"STRONG",{});var wXr=s(tte);yeo=r(wXr,"funnel"),wXr.forEach(t),Leo=r(B7," \u2014 "),bR=n(B7,"A",{href:!0});var AXr=s(bR);xeo=r(AXr,"FunnelTokenizer"),AXr.forEach(t),$eo=r(B7," or "),vR=n(B7,"A",{href:!0});var yXr=s(vR);keo=r(yXr,"FunnelTokenizerFast"),yXr.forEach(t),Seo=r(B7," (Funnel Transformer model)"),B7.forEach(t),Reo=i(S),Jn=n(S,"LI",{});var I7=s(Jn);ate=n(I7,"STRONG",{});var LXr=s(ate);Peo=r(LXr,"gpt2"),LXr.forEach(t),Beo=r(I7," \u2014 "),FR=n(I7,"A",{href:!0});var xXr=s(FR);Ieo=r(xXr,"GPT2Tokenizer"),xXr.forEach(t),qeo=r(I7," or "),TR=n(I7,"A",{href:!0});var $Xr=s(TR);Neo=r($Xr,"GPT2TokenizerFast"),$Xr.forEach(t),jeo=r(I7," (OpenAI GPT-2 model)"),I7.forEach(t),Deo=i(S),Yn=n(S,"LI",{});var q7=s(Yn);nte=n(q7,"STRONG",{});var kXr=s(nte);Geo=r(kXr,"gpt_neo"),kXr.forEach(t),Oeo=r(q7," \u2014 "),MR=n(q7,"A",{href:!0});var SXr=s(MR);Veo=r(SXr,"GPT2Tokenizer"),SXr.forEach(t),Xeo=r(q7," or "),ER=n(q7,"A",{href:!0});var RXr=s(ER);zeo=r(RXr,"GPT2TokenizerFast"),RXr.forEach(t),Weo=r(q7," (GPT Neo model)"),q7.forEach(t),Qeo=i(S),Kn=n(S,"LI",{});var N7=s(Kn);ste=n(N7,"STRONG",{});var PXr=s(ste);Heo=r(PXr,"gptj"),PXr.forEach(t),Ueo=r(N7," \u2014 "),CR=n(N7,"A",{href:!0});var BXr=s(CR);Jeo=r(BXr,"GPT2Tokenizer"),BXr.forEach(t),Yeo=r(N7," or "),wR=n(N7,"A",{href:!0});var IXr=s(wR);Keo=r(IXr,"GPT2TokenizerFast"),IXr.forEach(t),Zeo=r(N7," (GPT-J model)"),N7.forEach(t),eoo=i(S),Zn=n(S,"LI",{});var j7=s(Zn);lte=n(j7,"STRONG",{});var qXr=s(lte);ooo=r(qXr,"herbert"),qXr.forEach(t),roo=r(j7," \u2014 "),AR=n(j7,"A",{href:!0});var NXr=s(AR);too=r(NXr,"HerbertTokenizer"),NXr.forEach(t),aoo=r(j7," or "),yR=n(j7,"A",{href:!0});var jXr=s(yR);noo=r(jXr,"HerbertTokenizerFast"),jXr.forEach(t),soo=r(j7," (HerBERT model)"),j7.forEach(t),loo=i(S),kg=n(S,"LI",{});var n3e=s(kg);ite=n(n3e,"STRONG",{});var DXr=s(ite);ioo=r(DXr,"hubert"),DXr.forEach(t),doo=r(n3e," \u2014 "),LR=n(n3e,"A",{href:!0});var GXr=s(LR);coo=r(GXr,"Wav2Vec2CTCTokenizer"),GXr.forEach(t),foo=r(n3e," (Hubert model)"),n3e.forEach(t),moo=i(S),es=n(S,"LI",{});var D7=s(es);dte=n(D7,"STRONG",{});var OXr=s(dte);goo=r(OXr,"ibert"),OXr.forEach(t),hoo=r(D7," \u2014 "),xR=n(D7,"A",{href:!0});var VXr=s(xR);poo=r(VXr,"RobertaTokenizer"),VXr.forEach(t),uoo=r(D7," or "),$R=n(D7,"A",{href:!0});var XXr=s($R);_oo=r(XXr,"RobertaTokenizerFast"),XXr.forEach(t),boo=r(D7," (I-BERT model)"),D7.forEach(t),voo=i(S),os=n(S,"LI",{});var G7=s(os);cte=n(G7,"STRONG",{});var zXr=s(cte);Foo=r(zXr,"layoutlm"),zXr.forEach(t),Too=r(G7," \u2014 "),kR=n(G7,"A",{href:!0});var WXr=s(kR);Moo=r(WXr,"LayoutLMTokenizer"),WXr.forEach(t),Eoo=r(G7," or "),SR=n(G7,"A",{href:!0});var QXr=s(SR);Coo=r(QXr,"LayoutLMTokenizerFast"),QXr.forEach(t),woo=r(G7," (LayoutLM model)"),G7.forEach(t),Aoo=i(S),rs=n(S,"LI",{});var O7=s(rs);fte=n(O7,"STRONG",{});var HXr=s(fte);yoo=r(HXr,"layoutlmv2"),HXr.forEach(t),Loo=r(O7," \u2014 "),RR=n(O7,"A",{href:!0});var UXr=s(RR);xoo=r(UXr,"LayoutLMv2Tokenizer"),UXr.forEach(t),$oo=r(O7," or "),PR=n(O7,"A",{href:!0});var JXr=s(PR);koo=r(JXr,"LayoutLMv2TokenizerFast"),JXr.forEach(t),Soo=r(O7," (LayoutLMv2 model)"),O7.forEach(t),Roo=i(S),ts=n(S,"LI",{});var V7=s(ts);mte=n(V7,"STRONG",{});var YXr=s(mte);Poo=r(YXr,"layoutxlm"),YXr.forEach(t),Boo=r(V7," \u2014 "),BR=n(V7,"A",{href:!0});var KXr=s(BR);Ioo=r(KXr,"LayoutXLMTokenizer"),KXr.forEach(t),qoo=r(V7," or "),IR=n(V7,"A",{href:!0});var ZXr=s(IR);Noo=r(ZXr,"LayoutXLMTokenizerFast"),ZXr.forEach(t),joo=r(V7," (LayoutXLM model)"),V7.forEach(t),Doo=i(S),as=n(S,"LI",{});var X7=s(as);gte=n(X7,"STRONG",{});var ezr=s(gte);Goo=r(ezr,"led"),ezr.forEach(t),Ooo=r(X7," \u2014 "),qR=n(X7,"A",{href:!0});var ozr=s(qR);Voo=r(ozr,"LEDTokenizer"),ozr.forEach(t),Xoo=r(X7," or "),NR=n(X7,"A",{href:!0});var rzr=s(NR);zoo=r(rzr,"LEDTokenizerFast"),rzr.forEach(t),Woo=r(X7," (LED model)"),X7.forEach(t),Qoo=i(S),ns=n(S,"LI",{});var z7=s(ns);hte=n(z7,"STRONG",{});var tzr=s(hte);Hoo=r(tzr,"longformer"),tzr.forEach(t),Uoo=r(z7," \u2014 "),jR=n(z7,"A",{href:!0});var azr=s(jR);Joo=r(azr,"LongformerTokenizer"),azr.forEach(t),Yoo=r(z7," or "),DR=n(z7,"A",{href:!0});var nzr=s(DR);Koo=r(nzr,"LongformerTokenizerFast"),nzr.forEach(t),Zoo=r(z7," (Longformer model)"),z7.forEach(t),ero=i(S),Sg=n(S,"LI",{});var s3e=s(Sg);pte=n(s3e,"STRONG",{});var szr=s(pte);oro=r(szr,"luke"),szr.forEach(t),rro=r(s3e," \u2014 "),GR=n(s3e,"A",{href:!0});var lzr=s(GR);tro=r(lzr,"LukeTokenizer"),lzr.forEach(t),aro=r(s3e," (LUKE model)"),s3e.forEach(t),nro=i(S),ss=n(S,"LI",{});var W7=s(ss);ute=n(W7,"STRONG",{});var izr=s(ute);sro=r(izr,"lxmert"),izr.forEach(t),lro=r(W7," \u2014 "),OR=n(W7,"A",{href:!0});var dzr=s(OR);iro=r(dzr,"LxmertTokenizer"),dzr.forEach(t),dro=r(W7," or "),VR=n(W7,"A",{href:!0});var czr=s(VR);cro=r(czr,"LxmertTokenizerFast"),czr.forEach(t),fro=r(W7," (LXMERT model)"),W7.forEach(t),mro=i(S),Rg=n(S,"LI",{});var l3e=s(Rg);_te=n(l3e,"STRONG",{});var fzr=s(_te);gro=r(fzr,"m2m_100"),fzr.forEach(t),hro=r(l3e," \u2014 "),XR=n(l3e,"A",{href:!0});var mzr=s(XR);pro=r(mzr,"M2M100Tokenizer"),mzr.forEach(t),uro=r(l3e," (M2M100 model)"),l3e.forEach(t),_ro=i(S),Pg=n(S,"LI",{});var i3e=s(Pg);bte=n(i3e,"STRONG",{});var gzr=s(bte);bro=r(gzr,"marian"),gzr.forEach(t),vro=r(i3e," \u2014 "),zR=n(i3e,"A",{href:!0});var hzr=s(zR);Fro=r(hzr,"MarianTokenizer"),hzr.forEach(t),Tro=r(i3e," (Marian model)"),i3e.forEach(t),Mro=i(S),ls=n(S,"LI",{});var Q7=s(ls);vte=n(Q7,"STRONG",{});var pzr=s(vte);Ero=r(pzr,"mbart"),pzr.forEach(t),Cro=r(Q7," \u2014 "),WR=n(Q7,"A",{href:!0});var uzr=s(WR);wro=r(uzr,"MBartTokenizer"),uzr.forEach(t),Aro=r(Q7," or "),QR=n(Q7,"A",{href:!0});var _zr=s(QR);yro=r(_zr,"MBartTokenizerFast"),_zr.forEach(t),Lro=r(Q7," (mBART model)"),Q7.forEach(t),xro=i(S),is=n(S,"LI",{});var H7=s(is);Fte=n(H7,"STRONG",{});var bzr=s(Fte);$ro=r(bzr,"mbart50"),bzr.forEach(t),kro=r(H7," \u2014 "),HR=n(H7,"A",{href:!0});var vzr=s(HR);Sro=r(vzr,"MBart50Tokenizer"),vzr.forEach(t),Rro=r(H7," or "),UR=n(H7,"A",{href:!0});var Fzr=s(UR);Pro=r(Fzr,"MBart50TokenizerFast"),Fzr.forEach(t),Bro=r(H7," (mBART-50 model)"),H7.forEach(t),Iro=i(S),ds=n(S,"LI",{});var U7=s(ds);Tte=n(U7,"STRONG",{});var Tzr=s(Tte);qro=r(Tzr,"megatron-bert"),Tzr.forEach(t),Nro=r(U7," \u2014 "),JR=n(U7,"A",{href:!0});var Mzr=s(JR);jro=r(Mzr,"BertTokenizer"),Mzr.forEach(t),Dro=r(U7," or "),YR=n(U7,"A",{href:!0});var Ezr=s(YR);Gro=r(Ezr,"BertTokenizerFast"),Ezr.forEach(t),Oro=r(U7," (MegatronBert model)"),U7.forEach(t),Vro=i(S),Bg=n(S,"LI",{});var d3e=s(Bg);Mte=n(d3e,"STRONG",{});var Czr=s(Mte);Xro=r(Czr,"mluke"),Czr.forEach(t),zro=r(d3e," \u2014 "),KR=n(d3e,"A",{href:!0});var wzr=s(KR);Wro=r(wzr,"MLukeTokenizer"),wzr.forEach(t),Qro=r(d3e," (mLUKE model)"),d3e.forEach(t),Hro=i(S),cs=n(S,"LI",{});var J7=s(cs);Ete=n(J7,"STRONG",{});var Azr=s(Ete);Uro=r(Azr,"mobilebert"),Azr.forEach(t),Jro=r(J7," \u2014 "),ZR=n(J7,"A",{href:!0});var yzr=s(ZR);Yro=r(yzr,"MobileBertTokenizer"),yzr.forEach(t),Kro=r(J7," or "),eP=n(J7,"A",{href:!0});var Lzr=s(eP);Zro=r(Lzr,"MobileBertTokenizerFast"),Lzr.forEach(t),eto=r(J7," (MobileBERT model)"),J7.forEach(t),oto=i(S),fs=n(S,"LI",{});var Y7=s(fs);Cte=n(Y7,"STRONG",{});var xzr=s(Cte);rto=r(xzr,"mpnet"),xzr.forEach(t),tto=r(Y7," \u2014 "),oP=n(Y7,"A",{href:!0});var $zr=s(oP);ato=r($zr,"MPNetTokenizer"),$zr.forEach(t),nto=r(Y7," or "),rP=n(Y7,"A",{href:!0});var kzr=s(rP);sto=r(kzr,"MPNetTokenizerFast"),kzr.forEach(t),lto=r(Y7," (MPNet model)"),Y7.forEach(t),ito=i(S),ms=n(S,"LI",{});var K7=s(ms);wte=n(K7,"STRONG",{});var Szr=s(wte);dto=r(Szr,"mt5"),Szr.forEach(t),cto=r(K7," \u2014 "),tP=n(K7,"A",{href:!0});var Rzr=s(tP);fto=r(Rzr,"MT5Tokenizer"),Rzr.forEach(t),mto=r(K7," or "),aP=n(K7,"A",{href:!0});var Pzr=s(aP);gto=r(Pzr,"MT5TokenizerFast"),Pzr.forEach(t),hto=r(K7," (mT5 model)"),K7.forEach(t),pto=i(S),gs=n(S,"LI",{});var Z7=s(gs);Ate=n(Z7,"STRONG",{});var Bzr=s(Ate);uto=r(Bzr,"nystromformer"),Bzr.forEach(t),_to=r(Z7," \u2014 "),nP=n(Z7,"A",{href:!0});var Izr=s(nP);bto=r(Izr,"AlbertTokenizer"),Izr.forEach(t),vto=r(Z7," or "),sP=n(Z7,"A",{href:!0});var qzr=s(sP);Fto=r(qzr,"AlbertTokenizerFast"),qzr.forEach(t),Tto=r(Z7," (Nystromformer model)"),Z7.forEach(t),Mto=i(S),hs=n(S,"LI",{});var e$=s(hs);yte=n(e$,"STRONG",{});var Nzr=s(yte);Eto=r(Nzr,"openai-gpt"),Nzr.forEach(t),Cto=r(e$," \u2014 "),lP=n(e$,"A",{href:!0});var jzr=s(lP);wto=r(jzr,"OpenAIGPTTokenizer"),jzr.forEach(t),Ato=r(e$," or "),iP=n(e$,"A",{href:!0});var Dzr=s(iP);yto=r(Dzr,"OpenAIGPTTokenizerFast"),Dzr.forEach(t),Lto=r(e$," (OpenAI GPT model)"),e$.forEach(t),xto=i(S),Ig=n(S,"LI",{});var c3e=s(Ig);Lte=n(c3e,"STRONG",{});var Gzr=s(Lte);$to=r(Gzr,"opt"),Gzr.forEach(t),kto=r(c3e," \u2014 "),dP=n(c3e,"A",{href:!0});var Ozr=s(dP);Sto=r(Ozr,"GPT2Tokenizer"),Ozr.forEach(t),Rto=r(c3e," (OPT model)"),c3e.forEach(t),Pto=i(S),ps=n(S,"LI",{});var o$=s(ps);xte=n(o$,"STRONG",{});var Vzr=s(xte);Bto=r(Vzr,"pegasus"),Vzr.forEach(t),Ito=r(o$," \u2014 "),cP=n(o$,"A",{href:!0});var Xzr=s(cP);qto=r(Xzr,"PegasusTokenizer"),Xzr.forEach(t),Nto=r(o$," or "),fP=n(o$,"A",{href:!0});var zzr=s(fP);jto=r(zzr,"PegasusTokenizerFast"),zzr.forEach(t),Dto=r(o$," (Pegasus model)"),o$.forEach(t),Gto=i(S),qg=n(S,"LI",{});var f3e=s(qg);$te=n(f3e,"STRONG",{});var Wzr=s($te);Oto=r(Wzr,"perceiver"),Wzr.forEach(t),Vto=r(f3e," \u2014 "),mP=n(f3e,"A",{href:!0});var Qzr=s(mP);Xto=r(Qzr,"PerceiverTokenizer"),Qzr.forEach(t),zto=r(f3e," (Perceiver model)"),f3e.forEach(t),Wto=i(S),Ng=n(S,"LI",{});var m3e=s(Ng);kte=n(m3e,"STRONG",{});var Hzr=s(kte);Qto=r(Hzr,"phobert"),Hzr.forEach(t),Hto=r(m3e," \u2014 "),gP=n(m3e,"A",{href:!0});var Uzr=s(gP);Uto=r(Uzr,"PhobertTokenizer"),Uzr.forEach(t),Jto=r(m3e," (PhoBERT model)"),m3e.forEach(t),Yto=i(S),jg=n(S,"LI",{});var g3e=s(jg);Ste=n(g3e,"STRONG",{});var Jzr=s(Ste);Kto=r(Jzr,"plbart"),Jzr.forEach(t),Zto=r(g3e," \u2014 "),hP=n(g3e,"A",{href:!0});var Yzr=s(hP);eao=r(Yzr,"PLBartTokenizer"),Yzr.forEach(t),oao=r(g3e," (PLBart model)"),g3e.forEach(t),rao=i(S),Dg=n(S,"LI",{});var h3e=s(Dg);Rte=n(h3e,"STRONG",{});var Kzr=s(Rte);tao=r(Kzr,"prophetnet"),Kzr.forEach(t),aao=r(h3e," \u2014 "),pP=n(h3e,"A",{href:!0});var Zzr=s(pP);nao=r(Zzr,"ProphetNetTokenizer"),Zzr.forEach(t),sao=r(h3e," (ProphetNet model)"),h3e.forEach(t),lao=i(S),us=n(S,"LI",{});var r$=s(us);Pte=n(r$,"STRONG",{});var eWr=s(Pte);iao=r(eWr,"qdqbert"),eWr.forEach(t),dao=r(r$," \u2014 "),uP=n(r$,"A",{href:!0});var oWr=s(uP);cao=r(oWr,"BertTokenizer"),oWr.forEach(t),fao=r(r$," or "),_P=n(r$,"A",{href:!0});var rWr=s(_P);mao=r(rWr,"BertTokenizerFast"),rWr.forEach(t),gao=r(r$," (QDQBert model)"),r$.forEach(t),hao=i(S),Gg=n(S,"LI",{});var p3e=s(Gg);Bte=n(p3e,"STRONG",{});var tWr=s(Bte);pao=r(tWr,"rag"),tWr.forEach(t),uao=r(p3e," \u2014 "),bP=n(p3e,"A",{href:!0});var aWr=s(bP);_ao=r(aWr,"RagTokenizer"),aWr.forEach(t),bao=r(p3e," (RAG model)"),p3e.forEach(t),vao=i(S),_s=n(S,"LI",{});var t$=s(_s);Ite=n(t$,"STRONG",{});var nWr=s(Ite);Fao=r(nWr,"realm"),nWr.forEach(t),Tao=r(t$," \u2014 "),vP=n(t$,"A",{href:!0});var sWr=s(vP);Mao=r(sWr,"RealmTokenizer"),sWr.forEach(t),Eao=r(t$," or "),FP=n(t$,"A",{href:!0});var lWr=s(FP);Cao=r(lWr,"RealmTokenizerFast"),lWr.forEach(t),wao=r(t$," (Realm model)"),t$.forEach(t),Aao=i(S),bs=n(S,"LI",{});var a$=s(bs);qte=n(a$,"STRONG",{});var iWr=s(qte);yao=r(iWr,"reformer"),iWr.forEach(t),Lao=r(a$," \u2014 "),TP=n(a$,"A",{href:!0});var dWr=s(TP);xao=r(dWr,"ReformerTokenizer"),dWr.forEach(t),$ao=r(a$," or "),MP=n(a$,"A",{href:!0});var cWr=s(MP);kao=r(cWr,"ReformerTokenizerFast"),cWr.forEach(t),Sao=r(a$," (Reformer model)"),a$.forEach(t),Rao=i(S),vs=n(S,"LI",{});var n$=s(vs);Nte=n(n$,"STRONG",{});var fWr=s(Nte);Pao=r(fWr,"rembert"),fWr.forEach(t),Bao=r(n$," \u2014 "),EP=n(n$,"A",{href:!0});var mWr=s(EP);Iao=r(mWr,"RemBertTokenizer"),mWr.forEach(t),qao=r(n$," or "),CP=n(n$,"A",{href:!0});var gWr=s(CP);Nao=r(gWr,"RemBertTokenizerFast"),gWr.forEach(t),jao=r(n$," (RemBERT model)"),n$.forEach(t),Dao=i(S),Fs=n(S,"LI",{});var s$=s(Fs);jte=n(s$,"STRONG",{});var hWr=s(jte);Gao=r(hWr,"retribert"),hWr.forEach(t),Oao=r(s$," \u2014 "),wP=n(s$,"A",{href:!0});var pWr=s(wP);Vao=r(pWr,"RetriBertTokenizer"),pWr.forEach(t),Xao=r(s$," or "),AP=n(s$,"A",{href:!0});var uWr=s(AP);zao=r(uWr,"RetriBertTokenizerFast"),uWr.forEach(t),Wao=r(s$," (RetriBERT model)"),s$.forEach(t),Qao=i(S),Ts=n(S,"LI",{});var l$=s(Ts);Dte=n(l$,"STRONG",{});var _Wr=s(Dte);Hao=r(_Wr,"roberta"),_Wr.forEach(t),Uao=r(l$," \u2014 "),yP=n(l$,"A",{href:!0});var bWr=s(yP);Jao=r(bWr,"RobertaTokenizer"),bWr.forEach(t),Yao=r(l$," or "),LP=n(l$,"A",{href:!0});var vWr=s(LP);Kao=r(vWr,"RobertaTokenizerFast"),vWr.forEach(t),Zao=r(l$," (RoBERTa model)"),l$.forEach(t),eno=i(S),Ms=n(S,"LI",{});var i$=s(Ms);Gte=n(i$,"STRONG",{});var FWr=s(Gte);ono=r(FWr,"roformer"),FWr.forEach(t),rno=r(i$," \u2014 "),xP=n(i$,"A",{href:!0});var TWr=s(xP);tno=r(TWr,"RoFormerTokenizer"),TWr.forEach(t),ano=r(i$," or "),$P=n(i$,"A",{href:!0});var MWr=s($P);nno=r(MWr,"RoFormerTokenizerFast"),MWr.forEach(t),sno=r(i$," (RoFormer model)"),i$.forEach(t),lno=i(S),Og=n(S,"LI",{});var u3e=s(Og);Ote=n(u3e,"STRONG",{});var EWr=s(Ote);ino=r(EWr,"speech_to_text"),EWr.forEach(t),dno=r(u3e," \u2014 "),kP=n(u3e,"A",{href:!0});var CWr=s(kP);cno=r(CWr,"Speech2TextTokenizer"),CWr.forEach(t),fno=r(u3e," (Speech2Text model)"),u3e.forEach(t),mno=i(S),Vg=n(S,"LI",{});var _3e=s(Vg);Vte=n(_3e,"STRONG",{});var wWr=s(Vte);gno=r(wWr,"speech_to_text_2"),wWr.forEach(t),hno=r(_3e," \u2014 "),SP=n(_3e,"A",{href:!0});var AWr=s(SP);pno=r(AWr,"Speech2Text2Tokenizer"),AWr.forEach(t),uno=r(_3e," (Speech2Text2 model)"),_3e.forEach(t),_no=i(S),Es=n(S,"LI",{});var d$=s(Es);Xte=n(d$,"STRONG",{});var yWr=s(Xte);bno=r(yWr,"splinter"),yWr.forEach(t),vno=r(d$," \u2014 "),RP=n(d$,"A",{href:!0});var LWr=s(RP);Fno=r(LWr,"SplinterTokenizer"),LWr.forEach(t),Tno=r(d$," or "),PP=n(d$,"A",{href:!0});var xWr=s(PP);Mno=r(xWr,"SplinterTokenizerFast"),xWr.forEach(t),Eno=r(d$," (Splinter model)"),d$.forEach(t),Cno=i(S),Cs=n(S,"LI",{});var c$=s(Cs);zte=n(c$,"STRONG",{});var $Wr=s(zte);wno=r($Wr,"squeezebert"),$Wr.forEach(t),Ano=r(c$," \u2014 "),BP=n(c$,"A",{href:!0});var kWr=s(BP);yno=r(kWr,"SqueezeBertTokenizer"),kWr.forEach(t),Lno=r(c$," or "),IP=n(c$,"A",{href:!0});var SWr=s(IP);xno=r(SWr,"SqueezeBertTokenizerFast"),SWr.forEach(t),$no=r(c$," (SqueezeBERT model)"),c$.forEach(t),kno=i(S),ws=n(S,"LI",{});var f$=s(ws);Wte=n(f$,"STRONG",{});var RWr=s(Wte);Sno=r(RWr,"t5"),RWr.forEach(t),Rno=r(f$," \u2014 "),qP=n(f$,"A",{href:!0});var PWr=s(qP);Pno=r(PWr,"T5Tokenizer"),PWr.forEach(t),Bno=r(f$," or "),NP=n(f$,"A",{href:!0});var BWr=s(NP);Ino=r(BWr,"T5TokenizerFast"),BWr.forEach(t),qno=r(f$," (T5 model)"),f$.forEach(t),Nno=i(S),Xg=n(S,"LI",{});var b3e=s(Xg);Qte=n(b3e,"STRONG",{});var IWr=s(Qte);jno=r(IWr,"tapas"),IWr.forEach(t),Dno=r(b3e," \u2014 "),jP=n(b3e,"A",{href:!0});var qWr=s(jP);Gno=r(qWr,"TapasTokenizer"),qWr.forEach(t),Ono=r(b3e," (TAPAS model)"),b3e.forEach(t),Vno=i(S),zg=n(S,"LI",{});var v3e=s(zg);Hte=n(v3e,"STRONG",{});var NWr=s(Hte);Xno=r(NWr,"tapex"),NWr.forEach(t),zno=r(v3e," \u2014 "),DP=n(v3e,"A",{href:!0});var jWr=s(DP);Wno=r(jWr,"TapexTokenizer"),jWr.forEach(t),Qno=r(v3e," (TAPEX model)"),v3e.forEach(t),Hno=i(S),Wg=n(S,"LI",{});var F3e=s(Wg);Ute=n(F3e,"STRONG",{});var DWr=s(Ute);Uno=r(DWr,"transfo-xl"),DWr.forEach(t),Jno=r(F3e," \u2014 "),GP=n(F3e,"A",{href:!0});var GWr=s(GP);Yno=r(GWr,"TransfoXLTokenizer"),GWr.forEach(t),Kno=r(F3e," (Transformer-XL model)"),F3e.forEach(t),Zno=i(S),As=n(S,"LI",{});var m$=s(As);Jte=n(m$,"STRONG",{});var OWr=s(Jte);eso=r(OWr,"visual_bert"),OWr.forEach(t),oso=r(m$," \u2014 "),OP=n(m$,"A",{href:!0});var VWr=s(OP);rso=r(VWr,"BertTokenizer"),VWr.forEach(t),tso=r(m$," or "),VP=n(m$,"A",{href:!0});var XWr=s(VP);aso=r(XWr,"BertTokenizerFast"),XWr.forEach(t),nso=r(m$," (VisualBert model)"),m$.forEach(t),sso=i(S),Qg=n(S,"LI",{});var T3e=s(Qg);Yte=n(T3e,"STRONG",{});var zWr=s(Yte);lso=r(zWr,"wav2vec2"),zWr.forEach(t),iso=r(T3e," \u2014 "),XP=n(T3e,"A",{href:!0});var WWr=s(XP);dso=r(WWr,"Wav2Vec2CTCTokenizer"),WWr.forEach(t),cso=r(T3e," (Wav2Vec2 model)"),T3e.forEach(t),fso=i(S),Hg=n(S,"LI",{});var M3e=s(Hg);Kte=n(M3e,"STRONG",{});var QWr=s(Kte);mso=r(QWr,"wav2vec2-conformer"),QWr.forEach(t),gso=r(M3e," \u2014 "),zP=n(M3e,"A",{href:!0});var HWr=s(zP);hso=r(HWr,"Wav2Vec2CTCTokenizer"),HWr.forEach(t),pso=r(M3e," (Wav2Vec2-Conformer model)"),M3e.forEach(t),uso=i(S),Ug=n(S,"LI",{});var E3e=s(Ug);Zte=n(E3e,"STRONG",{});var UWr=s(Zte);_so=r(UWr,"wav2vec2_phoneme"),UWr.forEach(t),bso=r(E3e," \u2014 "),WP=n(E3e,"A",{href:!0});var JWr=s(WP);vso=r(JWr,"Wav2Vec2PhonemeCTCTokenizer"),JWr.forEach(t),Fso=r(E3e," (Wav2Vec2Phoneme model)"),E3e.forEach(t),Tso=i(S),ys=n(S,"LI",{});var g$=s(ys);eae=n(g$,"STRONG",{});var YWr=s(eae);Mso=r(YWr,"xglm"),YWr.forEach(t),Eso=r(g$," \u2014 "),QP=n(g$,"A",{href:!0});var KWr=s(QP);Cso=r(KWr,"XGLMTokenizer"),KWr.forEach(t),wso=r(g$," or "),HP=n(g$,"A",{href:!0});var ZWr=s(HP);Aso=r(ZWr,"XGLMTokenizerFast"),ZWr.forEach(t),yso=r(g$," (XGLM model)"),g$.forEach(t),Lso=i(S),Jg=n(S,"LI",{});var C3e=s(Jg);oae=n(C3e,"STRONG",{});var eQr=s(oae);xso=r(eQr,"xlm"),eQr.forEach(t),$so=r(C3e," \u2014 "),UP=n(C3e,"A",{href:!0});var oQr=s(UP);kso=r(oQr,"XLMTokenizer"),oQr.forEach(t),Sso=r(C3e," (XLM model)"),C3e.forEach(t),Rso=i(S),Yg=n(S,"LI",{});var w3e=s(Yg);rae=n(w3e,"STRONG",{});var rQr=s(rae);Pso=r(rQr,"xlm-prophetnet"),rQr.forEach(t),Bso=r(w3e," \u2014 "),JP=n(w3e,"A",{href:!0});var tQr=s(JP);Iso=r(tQr,"XLMProphetNetTokenizer"),tQr.forEach(t),qso=r(w3e," (XLMProphetNet model)"),w3e.forEach(t),Nso=i(S),Ls=n(S,"LI",{});var h$=s(Ls);tae=n(h$,"STRONG",{});var aQr=s(tae);jso=r(aQr,"xlm-roberta"),aQr.forEach(t),Dso=r(h$," \u2014 "),YP=n(h$,"A",{href:!0});var nQr=s(YP);Gso=r(nQr,"XLMRobertaTokenizer"),nQr.forEach(t),Oso=r(h$," or "),KP=n(h$,"A",{href:!0});var sQr=s(KP);Vso=r(sQr,"XLMRobertaTokenizerFast"),sQr.forEach(t),Xso=r(h$," (XLM-RoBERTa model)"),h$.forEach(t),zso=i(S),xs=n(S,"LI",{});var p$=s(xs);aae=n(p$,"STRONG",{});var lQr=s(aae);Wso=r(lQr,"xlm-roberta-xl"),lQr.forEach(t),Qso=r(p$," \u2014 "),ZP=n(p$,"A",{href:!0});var iQr=s(ZP);Hso=r(iQr,"RobertaTokenizer"),iQr.forEach(t),Uso=r(p$," or "),eB=n(p$,"A",{href:!0});var dQr=s(eB);Jso=r(dQr,"RobertaTokenizerFast"),dQr.forEach(t),Yso=r(p$," (XLM-RoBERTa-XL model)"),p$.forEach(t),Kso=i(S),$s=n(S,"LI",{});var u$=s($s);nae=n(u$,"STRONG",{});var cQr=s(nae);Zso=r(cQr,"xlnet"),cQr.forEach(t),elo=r(u$," \u2014 "),oB=n(u$,"A",{href:!0});var fQr=s(oB);olo=r(fQr,"XLNetTokenizer"),fQr.forEach(t),rlo=r(u$," or "),rB=n(u$,"A",{href:!0});var mQr=s(rB);tlo=r(mQr,"XLNetTokenizerFast"),mQr.forEach(t),alo=r(u$," (XLNet model)"),u$.forEach(t),nlo=i(S),ks=n(S,"LI",{});var _$=s(ks);sae=n(_$,"STRONG",{});var gQr=s(sae);slo=r(gQr,"yoso"),gQr.forEach(t),llo=r(_$," \u2014 "),tB=n(_$,"A",{href:!0});var hQr=s(tB);ilo=r(hQr,"AlbertTokenizer"),hQr.forEach(t),dlo=r(_$," or "),aB=n(_$,"A",{href:!0});var pQr=s(aB);clo=r(pQr,"AlbertTokenizerFast"),pQr.forEach(t),flo=r(_$," (YOSO model)"),_$.forEach(t),S.forEach(t),mlo=i(Is),T(Kg.$$.fragment,Is),Is.forEach(t),glo=i(Bs),Zg=n(Bs,"DIV",{class:!0});var wNe=s(Zg);T(_0.$$.fragment,wNe),hlo=i(wNe),lae=n(wNe,"P",{});var uQr=s(lae);plo=r(uQr,"Register a new tokenizer in this mapping."),uQr.forEach(t),wNe.forEach(t),Bs.forEach(t),AIe=i(f),Fi=n(f,"H2",{class:!0});var ANe=s(Fi);eh=n(ANe,"A",{id:!0,class:!0,href:!0});var _Qr=s(eh);iae=n(_Qr,"SPAN",{});var bQr=s(iae);T(b0.$$.fragment,bQr),bQr.forEach(t),_Qr.forEach(t),ulo=i(ANe),dae=n(ANe,"SPAN",{});var vQr=s(dae);_lo=r(vQr,"AutoFeatureExtractor"),vQr.forEach(t),ANe.forEach(t),yIe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(v0.$$.fragment,qs),blo=i(qs),F0=n(qs,"P",{});var yNe=s(F0);vlo=r(yNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nB=n(yNe,"A",{href:!0});var FQr=s(nB);Flo=r(FQr,"AutoFeatureExtractor.from_pretrained()"),FQr.forEach(t),Tlo=r(yNe," class method."),yNe.forEach(t),Mlo=i(qs),T0=n(qs,"P",{});var LNe=s(T0);Elo=r(LNe,"This class cannot be instantiated directly using "),cae=n(LNe,"CODE",{});var TQr=s(cae);Clo=r(TQr,"__init__()"),TQr.forEach(t),wlo=r(LNe," (throws an error)."),LNe.forEach(t),Alo=i(qs),He=n(qs,"DIV",{class:!0});var Zt=s(He);T(M0.$$.fragment,Zt),ylo=i(Zt),fae=n(Zt,"P",{});var MQr=s(fae);Llo=r(MQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),MQr.forEach(t),xlo=i(Zt),ya=n(Zt,"P",{});var iw=s(ya);$lo=r(iw,"The feature extractor class to instantiate is selected based on the "),mae=n(iw,"CODE",{});var EQr=s(mae);klo=r(EQr,"model_type"),EQr.forEach(t),Slo=r(iw,` property of the config object
(either passed as an argument or loaded from `),gae=n(iw,"CODE",{});var CQr=s(gae);Rlo=r(CQr,"pretrained_model_name_or_path"),CQr.forEach(t),Plo=r(iw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hae=n(iw,"CODE",{});var wQr=s(hae);Blo=r(wQr,"pretrained_model_name_or_path"),wQr.forEach(t),Ilo=r(iw,":"),iw.forEach(t),qlo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);oh=n(te,"LI",{});var A3e=s(oh);pae=n(A3e,"STRONG",{});var AQr=s(pae);Nlo=r(AQr,"beit"),AQr.forEach(t),jlo=r(A3e," \u2014 "),sB=n(A3e,"A",{href:!0});var yQr=s(sB);Dlo=r(yQr,"BeitFeatureExtractor"),yQr.forEach(t),Glo=r(A3e," (BEiT model)"),A3e.forEach(t),Olo=i(te),rh=n(te,"LI",{});var y3e=s(rh);uae=n(y3e,"STRONG",{});var LQr=s(uae);Vlo=r(LQr,"clip"),LQr.forEach(t),Xlo=r(y3e," \u2014 "),lB=n(y3e,"A",{href:!0});var xQr=s(lB);zlo=r(xQr,"CLIPFeatureExtractor"),xQr.forEach(t),Wlo=r(y3e," (CLIP model)"),y3e.forEach(t),Qlo=i(te),th=n(te,"LI",{});var L3e=s(th);_ae=n(L3e,"STRONG",{});var $Qr=s(_ae);Hlo=r($Qr,"convnext"),$Qr.forEach(t),Ulo=r(L3e," \u2014 "),iB=n(L3e,"A",{href:!0});var kQr=s(iB);Jlo=r(kQr,"ConvNextFeatureExtractor"),kQr.forEach(t),Ylo=r(L3e," (ConvNext model)"),L3e.forEach(t),Klo=i(te),ah=n(te,"LI",{});var x3e=s(ah);bae=n(x3e,"STRONG",{});var SQr=s(bae);Zlo=r(SQr,"data2vec-audio"),SQr.forEach(t),eio=r(x3e," \u2014 "),dB=n(x3e,"A",{href:!0});var RQr=s(dB);oio=r(RQr,"Wav2Vec2FeatureExtractor"),RQr.forEach(t),rio=r(x3e," (Data2VecAudio model)"),x3e.forEach(t),tio=i(te),nh=n(te,"LI",{});var $3e=s(nh);vae=n($3e,"STRONG",{});var PQr=s(vae);aio=r(PQr,"data2vec-vision"),PQr.forEach(t),nio=r($3e," \u2014 "),cB=n($3e,"A",{href:!0});var BQr=s(cB);sio=r(BQr,"BeitFeatureExtractor"),BQr.forEach(t),lio=r($3e," (Data2VecVision model)"),$3e.forEach(t),iio=i(te),sh=n(te,"LI",{});var k3e=s(sh);Fae=n(k3e,"STRONG",{});var IQr=s(Fae);dio=r(IQr,"deit"),IQr.forEach(t),cio=r(k3e," \u2014 "),fB=n(k3e,"A",{href:!0});var qQr=s(fB);fio=r(qQr,"DeiTFeatureExtractor"),qQr.forEach(t),mio=r(k3e," (DeiT model)"),k3e.forEach(t),gio=i(te),lh=n(te,"LI",{});var S3e=s(lh);Tae=n(S3e,"STRONG",{});var NQr=s(Tae);hio=r(NQr,"detr"),NQr.forEach(t),pio=r(S3e," \u2014 "),mB=n(S3e,"A",{href:!0});var jQr=s(mB);uio=r(jQr,"DetrFeatureExtractor"),jQr.forEach(t),_io=r(S3e," (DETR model)"),S3e.forEach(t),bio=i(te),ih=n(te,"LI",{});var R3e=s(ih);Mae=n(R3e,"STRONG",{});var DQr=s(Mae);vio=r(DQr,"dpt"),DQr.forEach(t),Fio=r(R3e," \u2014 "),gB=n(R3e,"A",{href:!0});var GQr=s(gB);Tio=r(GQr,"DPTFeatureExtractor"),GQr.forEach(t),Mio=r(R3e," (DPT model)"),R3e.forEach(t),Eio=i(te),dh=n(te,"LI",{});var P3e=s(dh);Eae=n(P3e,"STRONG",{});var OQr=s(Eae);Cio=r(OQr,"flava"),OQr.forEach(t),wio=r(P3e," \u2014 "),hB=n(P3e,"A",{href:!0});var VQr=s(hB);Aio=r(VQr,"FlavaFeatureExtractor"),VQr.forEach(t),yio=r(P3e," (Flava model)"),P3e.forEach(t),Lio=i(te),ch=n(te,"LI",{});var B3e=s(ch);Cae=n(B3e,"STRONG",{});var XQr=s(Cae);xio=r(XQr,"glpn"),XQr.forEach(t),$io=r(B3e," \u2014 "),pB=n(B3e,"A",{href:!0});var zQr=s(pB);kio=r(zQr,"GLPNFeatureExtractor"),zQr.forEach(t),Sio=r(B3e," (GLPN model)"),B3e.forEach(t),Rio=i(te),fh=n(te,"LI",{});var I3e=s(fh);wae=n(I3e,"STRONG",{});var WQr=s(wae);Pio=r(WQr,"hubert"),WQr.forEach(t),Bio=r(I3e," \u2014 "),uB=n(I3e,"A",{href:!0});var QQr=s(uB);Iio=r(QQr,"Wav2Vec2FeatureExtractor"),QQr.forEach(t),qio=r(I3e," (Hubert model)"),I3e.forEach(t),Nio=i(te),mh=n(te,"LI",{});var q3e=s(mh);Aae=n(q3e,"STRONG",{});var HQr=s(Aae);jio=r(HQr,"layoutlmv2"),HQr.forEach(t),Dio=r(q3e," \u2014 "),_B=n(q3e,"A",{href:!0});var UQr=s(_B);Gio=r(UQr,"LayoutLMv2FeatureExtractor"),UQr.forEach(t),Oio=r(q3e," (LayoutLMv2 model)"),q3e.forEach(t),Vio=i(te),gh=n(te,"LI",{});var N3e=s(gh);yae=n(N3e,"STRONG",{});var JQr=s(yae);Xio=r(JQr,"maskformer"),JQr.forEach(t),zio=r(N3e," \u2014 "),bB=n(N3e,"A",{href:!0});var YQr=s(bB);Wio=r(YQr,"MaskFormerFeatureExtractor"),YQr.forEach(t),Qio=r(N3e," (MaskFormer model)"),N3e.forEach(t),Hio=i(te),hh=n(te,"LI",{});var j3e=s(hh);Lae=n(j3e,"STRONG",{});var KQr=s(Lae);Uio=r(KQr,"perceiver"),KQr.forEach(t),Jio=r(j3e," \u2014 "),vB=n(j3e,"A",{href:!0});var ZQr=s(vB);Yio=r(ZQr,"PerceiverFeatureExtractor"),ZQr.forEach(t),Kio=r(j3e," (Perceiver model)"),j3e.forEach(t),Zio=i(te),ph=n(te,"LI",{});var D3e=s(ph);xae=n(D3e,"STRONG",{});var eHr=s(xae);edo=r(eHr,"poolformer"),eHr.forEach(t),odo=r(D3e," \u2014 "),FB=n(D3e,"A",{href:!0});var oHr=s(FB);rdo=r(oHr,"PoolFormerFeatureExtractor"),oHr.forEach(t),tdo=r(D3e," (PoolFormer model)"),D3e.forEach(t),ado=i(te),uh=n(te,"LI",{});var G3e=s(uh);$ae=n(G3e,"STRONG",{});var rHr=s($ae);ndo=r(rHr,"regnet"),rHr.forEach(t),sdo=r(G3e," \u2014 "),TB=n(G3e,"A",{href:!0});var tHr=s(TB);ldo=r(tHr,"ConvNextFeatureExtractor"),tHr.forEach(t),ido=r(G3e," (RegNet model)"),G3e.forEach(t),ddo=i(te),_h=n(te,"LI",{});var O3e=s(_h);kae=n(O3e,"STRONG",{});var aHr=s(kae);cdo=r(aHr,"resnet"),aHr.forEach(t),fdo=r(O3e," \u2014 "),MB=n(O3e,"A",{href:!0});var nHr=s(MB);mdo=r(nHr,"ConvNextFeatureExtractor"),nHr.forEach(t),gdo=r(O3e," (ResNet model)"),O3e.forEach(t),hdo=i(te),bh=n(te,"LI",{});var V3e=s(bh);Sae=n(V3e,"STRONG",{});var sHr=s(Sae);pdo=r(sHr,"segformer"),sHr.forEach(t),udo=r(V3e," \u2014 "),EB=n(V3e,"A",{href:!0});var lHr=s(EB);_do=r(lHr,"SegformerFeatureExtractor"),lHr.forEach(t),bdo=r(V3e," (SegFormer model)"),V3e.forEach(t),vdo=i(te),vh=n(te,"LI",{});var X3e=s(vh);Rae=n(X3e,"STRONG",{});var iHr=s(Rae);Fdo=r(iHr,"speech_to_text"),iHr.forEach(t),Tdo=r(X3e," \u2014 "),CB=n(X3e,"A",{href:!0});var dHr=s(CB);Mdo=r(dHr,"Speech2TextFeatureExtractor"),dHr.forEach(t),Edo=r(X3e," (Speech2Text model)"),X3e.forEach(t),Cdo=i(te),Fh=n(te,"LI",{});var z3e=s(Fh);Pae=n(z3e,"STRONG",{});var cHr=s(Pae);wdo=r(cHr,"swin"),cHr.forEach(t),Ado=r(z3e," \u2014 "),wB=n(z3e,"A",{href:!0});var fHr=s(wB);ydo=r(fHr,"ViTFeatureExtractor"),fHr.forEach(t),Ldo=r(z3e," (Swin model)"),z3e.forEach(t),xdo=i(te),Th=n(te,"LI",{});var W3e=s(Th);Bae=n(W3e,"STRONG",{});var mHr=s(Bae);$do=r(mHr,"van"),mHr.forEach(t),kdo=r(W3e," \u2014 "),AB=n(W3e,"A",{href:!0});var gHr=s(AB);Sdo=r(gHr,"ConvNextFeatureExtractor"),gHr.forEach(t),Rdo=r(W3e," (VAN model)"),W3e.forEach(t),Pdo=i(te),Mh=n(te,"LI",{});var Q3e=s(Mh);Iae=n(Q3e,"STRONG",{});var hHr=s(Iae);Bdo=r(hHr,"vit"),hHr.forEach(t),Ido=r(Q3e," \u2014 "),yB=n(Q3e,"A",{href:!0});var pHr=s(yB);qdo=r(pHr,"ViTFeatureExtractor"),pHr.forEach(t),Ndo=r(Q3e," (ViT model)"),Q3e.forEach(t),jdo=i(te),Eh=n(te,"LI",{});var H3e=s(Eh);qae=n(H3e,"STRONG",{});var uHr=s(qae);Ddo=r(uHr,"vit_mae"),uHr.forEach(t),Gdo=r(H3e," \u2014 "),LB=n(H3e,"A",{href:!0});var _Hr=s(LB);Odo=r(_Hr,"ViTFeatureExtractor"),_Hr.forEach(t),Vdo=r(H3e," (ViTMAE model)"),H3e.forEach(t),Xdo=i(te),Ch=n(te,"LI",{});var U3e=s(Ch);Nae=n(U3e,"STRONG",{});var bHr=s(Nae);zdo=r(bHr,"wav2vec2"),bHr.forEach(t),Wdo=r(U3e," \u2014 "),xB=n(U3e,"A",{href:!0});var vHr=s(xB);Qdo=r(vHr,"Wav2Vec2FeatureExtractor"),vHr.forEach(t),Hdo=r(U3e," (Wav2Vec2 model)"),U3e.forEach(t),Udo=i(te),wh=n(te,"LI",{});var J3e=s(wh);jae=n(J3e,"STRONG",{});var FHr=s(jae);Jdo=r(FHr,"wav2vec2-conformer"),FHr.forEach(t),Ydo=r(J3e," \u2014 "),$B=n(J3e,"A",{href:!0});var THr=s($B);Kdo=r(THr,"Wav2Vec2FeatureExtractor"),THr.forEach(t),Zdo=r(J3e," (Wav2Vec2-Conformer model)"),J3e.forEach(t),eco=i(te),Ah=n(te,"LI",{});var Y3e=s(Ah);Dae=n(Y3e,"STRONG",{});var MHr=s(Dae);oco=r(MHr,"yolos"),MHr.forEach(t),rco=r(Y3e," \u2014 "),kB=n(Y3e,"A",{href:!0});var EHr=s(kB);tco=r(EHr,"YolosFeatureExtractor"),EHr.forEach(t),aco=r(Y3e," (YOLOS model)"),Y3e.forEach(t),te.forEach(t),nco=i(Zt),T(yh.$$.fragment,Zt),sco=i(Zt),T(Lh.$$.fragment,Zt),Zt.forEach(t),lco=i(qs),xh=n(qs,"DIV",{class:!0});var xNe=s(xh);T(E0.$$.fragment,xNe),ico=i(xNe),Gae=n(xNe,"P",{});var CHr=s(Gae);dco=r(CHr,"Register a new feature extractor for this class."),CHr.forEach(t),xNe.forEach(t),qs.forEach(t),LIe=i(f),Ti=n(f,"H2",{class:!0});var $Ne=s(Ti);$h=n($Ne,"A",{id:!0,class:!0,href:!0});var wHr=s($h);Oae=n(wHr,"SPAN",{});var AHr=s(Oae);T(C0.$$.fragment,AHr),AHr.forEach(t),wHr.forEach(t),cco=i($Ne),Vae=n($Ne,"SPAN",{});var yHr=s(Vae);fco=r(yHr,"AutoProcessor"),yHr.forEach(t),$Ne.forEach(t),xIe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(w0.$$.fragment,Ns),mco=i(Ns),A0=n(Ns,"P",{});var kNe=s(A0);gco=r(kNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SB=n(kNe,"A",{href:!0});var LHr=s(SB);hco=r(LHr,"AutoProcessor.from_pretrained()"),LHr.forEach(t),pco=r(kNe," class method."),kNe.forEach(t),uco=i(Ns),y0=n(Ns,"P",{});var SNe=s(y0);_co=r(SNe,"This class cannot be instantiated directly using "),Xae=n(SNe,"CODE",{});var xHr=s(Xae);bco=r(xHr,"__init__()"),xHr.forEach(t),vco=r(SNe," (throws an error)."),SNe.forEach(t),Fco=i(Ns),Ue=n(Ns,"DIV",{class:!0});var ea=s(Ue);T(L0.$$.fragment,ea),Tco=i(ea),zae=n(ea,"P",{});var $Hr=s(zae);Mco=r($Hr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$Hr.forEach(t),Eco=i(ea),Mi=n(ea,"P",{});var TK=s(Mi);Cco=r(TK,"The processor class to instantiate is selected based on the "),Wae=n(TK,"CODE",{});var kHr=s(Wae);wco=r(kHr,"model_type"),kHr.forEach(t),Aco=r(TK,` property of the config object (either
passed as an argument or loaded from `),Qae=n(TK,"CODE",{});var SHr=s(Qae);yco=r(SHr,"pretrained_model_name_or_path"),SHr.forEach(t),Lco=r(TK," if possible):"),TK.forEach(t),xco=i(ea),pe=n(ea,"UL",{});var be=s(pe);kh=n(be,"LI",{});var K3e=s(kh);Hae=n(K3e,"STRONG",{});var RHr=s(Hae);$co=r(RHr,"clip"),RHr.forEach(t),kco=r(K3e," \u2014 "),RB=n(K3e,"A",{href:!0});var PHr=s(RB);Sco=r(PHr,"CLIPProcessor"),PHr.forEach(t),Rco=r(K3e," (CLIP model)"),K3e.forEach(t),Pco=i(be),Sh=n(be,"LI",{});var Z3e=s(Sh);Uae=n(Z3e,"STRONG",{});var BHr=s(Uae);Bco=r(BHr,"flava"),BHr.forEach(t),Ico=r(Z3e," \u2014 "),Jae=n(Z3e,"CODE",{});var IHr=s(Jae);qco=r(IHr,"FLAVAProcessor"),IHr.forEach(t),Nco=r(Z3e," (Flava model)"),Z3e.forEach(t),jco=i(be),Rh=n(be,"LI",{});var ewe=s(Rh);Yae=n(ewe,"STRONG",{});var qHr=s(Yae);Dco=r(qHr,"layoutlmv2"),qHr.forEach(t),Gco=r(ewe," \u2014 "),PB=n(ewe,"A",{href:!0});var NHr=s(PB);Oco=r(NHr,"LayoutLMv2Processor"),NHr.forEach(t),Vco=r(ewe," (LayoutLMv2 model)"),ewe.forEach(t),Xco=i(be),Ph=n(be,"LI",{});var owe=s(Ph);Kae=n(owe,"STRONG",{});var jHr=s(Kae);zco=r(jHr,"layoutxlm"),jHr.forEach(t),Wco=r(owe," \u2014 "),BB=n(owe,"A",{href:!0});var DHr=s(BB);Qco=r(DHr,"LayoutXLMProcessor"),DHr.forEach(t),Hco=r(owe," (LayoutXLM model)"),owe.forEach(t),Uco=i(be),Bh=n(be,"LI",{});var rwe=s(Bh);Zae=n(rwe,"STRONG",{});var GHr=s(Zae);Jco=r(GHr,"sew"),GHr.forEach(t),Yco=r(rwe," \u2014 "),IB=n(rwe,"A",{href:!0});var OHr=s(IB);Kco=r(OHr,"Wav2Vec2Processor"),OHr.forEach(t),Zco=r(rwe," (SEW model)"),rwe.forEach(t),efo=i(be),Ih=n(be,"LI",{});var twe=s(Ih);ene=n(twe,"STRONG",{});var VHr=s(ene);ofo=r(VHr,"sew-d"),VHr.forEach(t),rfo=r(twe," \u2014 "),qB=n(twe,"A",{href:!0});var XHr=s(qB);tfo=r(XHr,"Wav2Vec2Processor"),XHr.forEach(t),afo=r(twe," (SEW-D model)"),twe.forEach(t),nfo=i(be),qh=n(be,"LI",{});var awe=s(qh);one=n(awe,"STRONG",{});var zHr=s(one);sfo=r(zHr,"speech_to_text"),zHr.forEach(t),lfo=r(awe," \u2014 "),NB=n(awe,"A",{href:!0});var WHr=s(NB);ifo=r(WHr,"Speech2TextProcessor"),WHr.forEach(t),dfo=r(awe," (Speech2Text model)"),awe.forEach(t),cfo=i(be),Nh=n(be,"LI",{});var nwe=s(Nh);rne=n(nwe,"STRONG",{});var QHr=s(rne);ffo=r(QHr,"speech_to_text_2"),QHr.forEach(t),mfo=r(nwe," \u2014 "),jB=n(nwe,"A",{href:!0});var HHr=s(jB);gfo=r(HHr,"Speech2Text2Processor"),HHr.forEach(t),hfo=r(nwe," (Speech2Text2 model)"),nwe.forEach(t),pfo=i(be),jh=n(be,"LI",{});var swe=s(jh);tne=n(swe,"STRONG",{});var UHr=s(tne);ufo=r(UHr,"trocr"),UHr.forEach(t),_fo=r(swe," \u2014 "),DB=n(swe,"A",{href:!0});var JHr=s(DB);bfo=r(JHr,"TrOCRProcessor"),JHr.forEach(t),vfo=r(swe," (TrOCR model)"),swe.forEach(t),Ffo=i(be),Dh=n(be,"LI",{});var lwe=s(Dh);ane=n(lwe,"STRONG",{});var YHr=s(ane);Tfo=r(YHr,"unispeech"),YHr.forEach(t),Mfo=r(lwe," \u2014 "),GB=n(lwe,"A",{href:!0});var KHr=s(GB);Efo=r(KHr,"Wav2Vec2Processor"),KHr.forEach(t),Cfo=r(lwe," (UniSpeech model)"),lwe.forEach(t),wfo=i(be),Gh=n(be,"LI",{});var iwe=s(Gh);nne=n(iwe,"STRONG",{});var ZHr=s(nne);Afo=r(ZHr,"unispeech-sat"),ZHr.forEach(t),yfo=r(iwe," \u2014 "),OB=n(iwe,"A",{href:!0});var eUr=s(OB);Lfo=r(eUr,"Wav2Vec2Processor"),eUr.forEach(t),xfo=r(iwe," (UniSpeechSat model)"),iwe.forEach(t),$fo=i(be),Oh=n(be,"LI",{});var dwe=s(Oh);sne=n(dwe,"STRONG",{});var oUr=s(sne);kfo=r(oUr,"vilt"),oUr.forEach(t),Sfo=r(dwe," \u2014 "),VB=n(dwe,"A",{href:!0});var rUr=s(VB);Rfo=r(rUr,"ViltProcessor"),rUr.forEach(t),Pfo=r(dwe," (ViLT model)"),dwe.forEach(t),Bfo=i(be),Vh=n(be,"LI",{});var cwe=s(Vh);lne=n(cwe,"STRONG",{});var tUr=s(lne);Ifo=r(tUr,"vision-text-dual-encoder"),tUr.forEach(t),qfo=r(cwe," \u2014 "),XB=n(cwe,"A",{href:!0});var aUr=s(XB);Nfo=r(aUr,"VisionTextDualEncoderProcessor"),aUr.forEach(t),jfo=r(cwe," (VisionTextDualEncoder model)"),cwe.forEach(t),Dfo=i(be),Xh=n(be,"LI",{});var fwe=s(Xh);ine=n(fwe,"STRONG",{});var nUr=s(ine);Gfo=r(nUr,"wav2vec2"),nUr.forEach(t),Ofo=r(fwe," \u2014 "),zB=n(fwe,"A",{href:!0});var sUr=s(zB);Vfo=r(sUr,"Wav2Vec2Processor"),sUr.forEach(t),Xfo=r(fwe," (Wav2Vec2 model)"),fwe.forEach(t),zfo=i(be),zh=n(be,"LI",{});var mwe=s(zh);dne=n(mwe,"STRONG",{});var lUr=s(dne);Wfo=r(lUr,"wav2vec2-conformer"),lUr.forEach(t),Qfo=r(mwe," \u2014 "),WB=n(mwe,"A",{href:!0});var iUr=s(WB);Hfo=r(iUr,"Wav2Vec2Processor"),iUr.forEach(t),Ufo=r(mwe," (Wav2Vec2-Conformer model)"),mwe.forEach(t),Jfo=i(be),Wh=n(be,"LI",{});var gwe=s(Wh);cne=n(gwe,"STRONG",{});var dUr=s(cne);Yfo=r(dUr,"wavlm"),dUr.forEach(t),Kfo=r(gwe," \u2014 "),QB=n(gwe,"A",{href:!0});var cUr=s(QB);Zfo=r(cUr,"Wav2Vec2Processor"),cUr.forEach(t),emo=r(gwe," (WavLM model)"),gwe.forEach(t),be.forEach(t),omo=i(ea),T(Qh.$$.fragment,ea),rmo=i(ea),T(Hh.$$.fragment,ea),ea.forEach(t),tmo=i(Ns),Uh=n(Ns,"DIV",{class:!0});var RNe=s(Uh);T(x0.$$.fragment,RNe),amo=i(RNe),fne=n(RNe,"P",{});var fUr=s(fne);nmo=r(fUr,"Register a new processor for this class."),fUr.forEach(t),RNe.forEach(t),Ns.forEach(t),$Ie=i(f),Ei=n(f,"H2",{class:!0});var PNe=s(Ei);Jh=n(PNe,"A",{id:!0,class:!0,href:!0});var mUr=s(Jh);mne=n(mUr,"SPAN",{});var gUr=s(mne);T($0.$$.fragment,gUr),gUr.forEach(t),mUr.forEach(t),smo=i(PNe),gne=n(PNe,"SPAN",{});var hUr=s(gne);lmo=r(hUr,"AutoModel"),hUr.forEach(t),PNe.forEach(t),kIe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(k0.$$.fragment,js),imo=i(js),Ci=n(js,"P",{});var MK=s(Ci);dmo=r(MK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HB=n(MK,"A",{href:!0});var pUr=s(HB);cmo=r(pUr,"from_pretrained()"),pUr.forEach(t),fmo=r(MK," class method or the "),UB=n(MK,"A",{href:!0});var uUr=s(UB);mmo=r(uUr,"from_config()"),uUr.forEach(t),gmo=r(MK,` class
method.`),MK.forEach(t),hmo=i(js),S0=n(js,"P",{});var BNe=s(S0);pmo=r(BNe,"This class cannot be instantiated directly using "),hne=n(BNe,"CODE",{});var _Ur=s(hne);umo=r(_Ur,"__init__()"),_Ur.forEach(t),_mo=r(BNe," (throws an error)."),BNe.forEach(t),bmo=i(js),tt=n(js,"DIV",{class:!0});var dw=s(tt);T(R0.$$.fragment,dw),vmo=i(dw),pne=n(dw,"P",{});var bUr=s(pne);Fmo=r(bUr,"Instantiates one of the base model classes of the library from a configuration."),bUr.forEach(t),Tmo=i(dw),wi=n(dw,"P",{});var EK=s(wi);Mmo=r(EK,`Note:
Loading a model from its configuration file does `),une=n(EK,"STRONG",{});var vUr=s(une);Emo=r(vUr,"not"),vUr.forEach(t),Cmo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JB=n(EK,"A",{href:!0});var FUr=s(JB);wmo=r(FUr,"from_pretrained()"),FUr.forEach(t),Amo=r(EK," to load the model weights."),EK.forEach(t),ymo=i(dw),T(Yh.$$.fragment,dw),dw.forEach(t),Lmo=i(js),Je=n(js,"DIV",{class:!0});var oa=s(Je);T(P0.$$.fragment,oa),xmo=i(oa),_ne=n(oa,"P",{});var TUr=s(_ne);$mo=r(TUr,"Instantiate one of the base model classes of the library from a pretrained model."),TUr.forEach(t),kmo=i(oa),La=n(oa,"P",{});var cw=s(La);Smo=r(cw,"The model class to instantiate is selected based on the "),bne=n(cw,"CODE",{});var MUr=s(bne);Rmo=r(MUr,"model_type"),MUr.forEach(t),Pmo=r(cw,` property of the config object (either
passed as an argument or loaded from `),vne=n(cw,"CODE",{});var EUr=s(vne);Bmo=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),Imo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fne=n(cw,"CODE",{});var CUr=s(Fne);qmo=r(CUr,"pretrained_model_name_or_path"),CUr.forEach(t),Nmo=r(cw,":"),cw.forEach(t),jmo=i(oa),x=n(oa,"UL",{});var $=s(x);Kh=n($,"LI",{});var hwe=s(Kh);Tne=n(hwe,"STRONG",{});var wUr=s(Tne);Dmo=r(wUr,"albert"),wUr.forEach(t),Gmo=r(hwe," \u2014 "),YB=n(hwe,"A",{href:!0});var AUr=s(YB);Omo=r(AUr,"AlbertModel"),AUr.forEach(t),Vmo=r(hwe," (ALBERT model)"),hwe.forEach(t),Xmo=i($),Zh=n($,"LI",{});var pwe=s(Zh);Mne=n(pwe,"STRONG",{});var yUr=s(Mne);zmo=r(yUr,"bart"),yUr.forEach(t),Wmo=r(pwe," \u2014 "),KB=n(pwe,"A",{href:!0});var LUr=s(KB);Qmo=r(LUr,"BartModel"),LUr.forEach(t),Hmo=r(pwe," (BART model)"),pwe.forEach(t),Umo=i($),ep=n($,"LI",{});var uwe=s(ep);Ene=n(uwe,"STRONG",{});var xUr=s(Ene);Jmo=r(xUr,"beit"),xUr.forEach(t),Ymo=r(uwe," \u2014 "),ZB=n(uwe,"A",{href:!0});var $Ur=s(ZB);Kmo=r($Ur,"BeitModel"),$Ur.forEach(t),Zmo=r(uwe," (BEiT model)"),uwe.forEach(t),ego=i($),op=n($,"LI",{});var _we=s(op);Cne=n(_we,"STRONG",{});var kUr=s(Cne);ogo=r(kUr,"bert"),kUr.forEach(t),rgo=r(_we," \u2014 "),eI=n(_we,"A",{href:!0});var SUr=s(eI);tgo=r(SUr,"BertModel"),SUr.forEach(t),ago=r(_we," (BERT model)"),_we.forEach(t),ngo=i($),rp=n($,"LI",{});var bwe=s(rp);wne=n(bwe,"STRONG",{});var RUr=s(wne);sgo=r(RUr,"bert-generation"),RUr.forEach(t),lgo=r(bwe," \u2014 "),oI=n(bwe,"A",{href:!0});var PUr=s(oI);igo=r(PUr,"BertGenerationEncoder"),PUr.forEach(t),dgo=r(bwe," (Bert Generation model)"),bwe.forEach(t),cgo=i($),tp=n($,"LI",{});var vwe=s(tp);Ane=n(vwe,"STRONG",{});var BUr=s(Ane);fgo=r(BUr,"big_bird"),BUr.forEach(t),mgo=r(vwe," \u2014 "),rI=n(vwe,"A",{href:!0});var IUr=s(rI);ggo=r(IUr,"BigBirdModel"),IUr.forEach(t),hgo=r(vwe," (BigBird model)"),vwe.forEach(t),pgo=i($),ap=n($,"LI",{});var Fwe=s(ap);yne=n(Fwe,"STRONG",{});var qUr=s(yne);ugo=r(qUr,"bigbird_pegasus"),qUr.forEach(t),_go=r(Fwe," \u2014 "),tI=n(Fwe,"A",{href:!0});var NUr=s(tI);bgo=r(NUr,"BigBirdPegasusModel"),NUr.forEach(t),vgo=r(Fwe," (BigBirdPegasus model)"),Fwe.forEach(t),Fgo=i($),np=n($,"LI",{});var Twe=s(np);Lne=n(Twe,"STRONG",{});var jUr=s(Lne);Tgo=r(jUr,"blenderbot"),jUr.forEach(t),Mgo=r(Twe," \u2014 "),aI=n(Twe,"A",{href:!0});var DUr=s(aI);Ego=r(DUr,"BlenderbotModel"),DUr.forEach(t),Cgo=r(Twe," (Blenderbot model)"),Twe.forEach(t),wgo=i($),sp=n($,"LI",{});var Mwe=s(sp);xne=n(Mwe,"STRONG",{});var GUr=s(xne);Ago=r(GUr,"blenderbot-small"),GUr.forEach(t),ygo=r(Mwe," \u2014 "),nI=n(Mwe,"A",{href:!0});var OUr=s(nI);Lgo=r(OUr,"BlenderbotSmallModel"),OUr.forEach(t),xgo=r(Mwe," (BlenderbotSmall model)"),Mwe.forEach(t),$go=i($),lp=n($,"LI",{});var Ewe=s(lp);$ne=n(Ewe,"STRONG",{});var VUr=s($ne);kgo=r(VUr,"camembert"),VUr.forEach(t),Sgo=r(Ewe," \u2014 "),sI=n(Ewe,"A",{href:!0});var XUr=s(sI);Rgo=r(XUr,"CamembertModel"),XUr.forEach(t),Pgo=r(Ewe," (CamemBERT model)"),Ewe.forEach(t),Bgo=i($),ip=n($,"LI",{});var Cwe=s(ip);kne=n(Cwe,"STRONG",{});var zUr=s(kne);Igo=r(zUr,"canine"),zUr.forEach(t),qgo=r(Cwe," \u2014 "),lI=n(Cwe,"A",{href:!0});var WUr=s(lI);Ngo=r(WUr,"CanineModel"),WUr.forEach(t),jgo=r(Cwe," (Canine model)"),Cwe.forEach(t),Dgo=i($),dp=n($,"LI",{});var wwe=s(dp);Sne=n(wwe,"STRONG",{});var QUr=s(Sne);Ggo=r(QUr,"clip"),QUr.forEach(t),Ogo=r(wwe," \u2014 "),iI=n(wwe,"A",{href:!0});var HUr=s(iI);Vgo=r(HUr,"CLIPModel"),HUr.forEach(t),Xgo=r(wwe," (CLIP model)"),wwe.forEach(t),zgo=i($),cp=n($,"LI",{});var Awe=s(cp);Rne=n(Awe,"STRONG",{});var UUr=s(Rne);Wgo=r(UUr,"convbert"),UUr.forEach(t),Qgo=r(Awe," \u2014 "),dI=n(Awe,"A",{href:!0});var JUr=s(dI);Hgo=r(JUr,"ConvBertModel"),JUr.forEach(t),Ugo=r(Awe," (ConvBERT model)"),Awe.forEach(t),Jgo=i($),fp=n($,"LI",{});var ywe=s(fp);Pne=n(ywe,"STRONG",{});var YUr=s(Pne);Ygo=r(YUr,"convnext"),YUr.forEach(t),Kgo=r(ywe," \u2014 "),cI=n(ywe,"A",{href:!0});var KUr=s(cI);Zgo=r(KUr,"ConvNextModel"),KUr.forEach(t),eho=r(ywe," (ConvNext model)"),ywe.forEach(t),oho=i($),mp=n($,"LI",{});var Lwe=s(mp);Bne=n(Lwe,"STRONG",{});var ZUr=s(Bne);rho=r(ZUr,"ctrl"),ZUr.forEach(t),tho=r(Lwe," \u2014 "),fI=n(Lwe,"A",{href:!0});var eJr=s(fI);aho=r(eJr,"CTRLModel"),eJr.forEach(t),nho=r(Lwe," (CTRL model)"),Lwe.forEach(t),sho=i($),gp=n($,"LI",{});var xwe=s(gp);Ine=n(xwe,"STRONG",{});var oJr=s(Ine);lho=r(oJr,"data2vec-audio"),oJr.forEach(t),iho=r(xwe," \u2014 "),mI=n(xwe,"A",{href:!0});var rJr=s(mI);dho=r(rJr,"Data2VecAudioModel"),rJr.forEach(t),cho=r(xwe," (Data2VecAudio model)"),xwe.forEach(t),fho=i($),hp=n($,"LI",{});var $we=s(hp);qne=n($we,"STRONG",{});var tJr=s(qne);mho=r(tJr,"data2vec-text"),tJr.forEach(t),gho=r($we," \u2014 "),gI=n($we,"A",{href:!0});var aJr=s(gI);hho=r(aJr,"Data2VecTextModel"),aJr.forEach(t),pho=r($we," (Data2VecText model)"),$we.forEach(t),uho=i($),pp=n($,"LI",{});var kwe=s(pp);Nne=n(kwe,"STRONG",{});var nJr=s(Nne);_ho=r(nJr,"data2vec-vision"),nJr.forEach(t),bho=r(kwe," \u2014 "),hI=n(kwe,"A",{href:!0});var sJr=s(hI);vho=r(sJr,"Data2VecVisionModel"),sJr.forEach(t),Fho=r(kwe," (Data2VecVision model)"),kwe.forEach(t),Tho=i($),up=n($,"LI",{});var Swe=s(up);jne=n(Swe,"STRONG",{});var lJr=s(jne);Mho=r(lJr,"deberta"),lJr.forEach(t),Eho=r(Swe," \u2014 "),pI=n(Swe,"A",{href:!0});var iJr=s(pI);Cho=r(iJr,"DebertaModel"),iJr.forEach(t),who=r(Swe," (DeBERTa model)"),Swe.forEach(t),Aho=i($),_p=n($,"LI",{});var Rwe=s(_p);Dne=n(Rwe,"STRONG",{});var dJr=s(Dne);yho=r(dJr,"deberta-v2"),dJr.forEach(t),Lho=r(Rwe," \u2014 "),uI=n(Rwe,"A",{href:!0});var cJr=s(uI);xho=r(cJr,"DebertaV2Model"),cJr.forEach(t),$ho=r(Rwe," (DeBERTa-v2 model)"),Rwe.forEach(t),kho=i($),bp=n($,"LI",{});var Pwe=s(bp);Gne=n(Pwe,"STRONG",{});var fJr=s(Gne);Sho=r(fJr,"decision_transformer"),fJr.forEach(t),Rho=r(Pwe," \u2014 "),_I=n(Pwe,"A",{href:!0});var mJr=s(_I);Pho=r(mJr,"DecisionTransformerModel"),mJr.forEach(t),Bho=r(Pwe," (Decision Transformer model)"),Pwe.forEach(t),Iho=i($),vp=n($,"LI",{});var Bwe=s(vp);One=n(Bwe,"STRONG",{});var gJr=s(One);qho=r(gJr,"deit"),gJr.forEach(t),Nho=r(Bwe," \u2014 "),bI=n(Bwe,"A",{href:!0});var hJr=s(bI);jho=r(hJr,"DeiTModel"),hJr.forEach(t),Dho=r(Bwe," (DeiT model)"),Bwe.forEach(t),Gho=i($),Fp=n($,"LI",{});var Iwe=s(Fp);Vne=n(Iwe,"STRONG",{});var pJr=s(Vne);Oho=r(pJr,"detr"),pJr.forEach(t),Vho=r(Iwe," \u2014 "),vI=n(Iwe,"A",{href:!0});var uJr=s(vI);Xho=r(uJr,"DetrModel"),uJr.forEach(t),zho=r(Iwe," (DETR model)"),Iwe.forEach(t),Who=i($),Tp=n($,"LI",{});var qwe=s(Tp);Xne=n(qwe,"STRONG",{});var _Jr=s(Xne);Qho=r(_Jr,"distilbert"),_Jr.forEach(t),Hho=r(qwe," \u2014 "),FI=n(qwe,"A",{href:!0});var bJr=s(FI);Uho=r(bJr,"DistilBertModel"),bJr.forEach(t),Jho=r(qwe," (DistilBERT model)"),qwe.forEach(t),Yho=i($),Mp=n($,"LI",{});var Nwe=s(Mp);zne=n(Nwe,"STRONG",{});var vJr=s(zne);Kho=r(vJr,"dpr"),vJr.forEach(t),Zho=r(Nwe," \u2014 "),TI=n(Nwe,"A",{href:!0});var FJr=s(TI);epo=r(FJr,"DPRQuestionEncoder"),FJr.forEach(t),opo=r(Nwe," (DPR model)"),Nwe.forEach(t),rpo=i($),Ep=n($,"LI",{});var jwe=s(Ep);Wne=n(jwe,"STRONG",{});var TJr=s(Wne);tpo=r(TJr,"dpt"),TJr.forEach(t),apo=r(jwe," \u2014 "),MI=n(jwe,"A",{href:!0});var MJr=s(MI);npo=r(MJr,"DPTModel"),MJr.forEach(t),spo=r(jwe," (DPT model)"),jwe.forEach(t),lpo=i($),Cp=n($,"LI",{});var Dwe=s(Cp);Qne=n(Dwe,"STRONG",{});var EJr=s(Qne);ipo=r(EJr,"electra"),EJr.forEach(t),dpo=r(Dwe," \u2014 "),EI=n(Dwe,"A",{href:!0});var CJr=s(EI);cpo=r(CJr,"ElectraModel"),CJr.forEach(t),fpo=r(Dwe," (ELECTRA model)"),Dwe.forEach(t),mpo=i($),wp=n($,"LI",{});var Gwe=s(wp);Hne=n(Gwe,"STRONG",{});var wJr=s(Hne);gpo=r(wJr,"flaubert"),wJr.forEach(t),hpo=r(Gwe," \u2014 "),CI=n(Gwe,"A",{href:!0});var AJr=s(CI);ppo=r(AJr,"FlaubertModel"),AJr.forEach(t),upo=r(Gwe," (FlauBERT model)"),Gwe.forEach(t),_po=i($),Ap=n($,"LI",{});var Owe=s(Ap);Une=n(Owe,"STRONG",{});var yJr=s(Une);bpo=r(yJr,"flava"),yJr.forEach(t),vpo=r(Owe," \u2014 "),wI=n(Owe,"A",{href:!0});var LJr=s(wI);Fpo=r(LJr,"FlavaModel"),LJr.forEach(t),Tpo=r(Owe," (Flava model)"),Owe.forEach(t),Mpo=i($),yp=n($,"LI",{});var Vwe=s(yp);Jne=n(Vwe,"STRONG",{});var xJr=s(Jne);Epo=r(xJr,"fnet"),xJr.forEach(t),Cpo=r(Vwe," \u2014 "),AI=n(Vwe,"A",{href:!0});var $Jr=s(AI);wpo=r($Jr,"FNetModel"),$Jr.forEach(t),Apo=r(Vwe," (FNet model)"),Vwe.forEach(t),ypo=i($),Lp=n($,"LI",{});var Xwe=s(Lp);Yne=n(Xwe,"STRONG",{});var kJr=s(Yne);Lpo=r(kJr,"fsmt"),kJr.forEach(t),xpo=r(Xwe," \u2014 "),yI=n(Xwe,"A",{href:!0});var SJr=s(yI);$po=r(SJr,"FSMTModel"),SJr.forEach(t),kpo=r(Xwe," (FairSeq Machine-Translation model)"),Xwe.forEach(t),Spo=i($),Ss=n($,"LI",{});var b$=s(Ss);Kne=n(b$,"STRONG",{});var RJr=s(Kne);Rpo=r(RJr,"funnel"),RJr.forEach(t),Ppo=r(b$," \u2014 "),LI=n(b$,"A",{href:!0});var PJr=s(LI);Bpo=r(PJr,"FunnelModel"),PJr.forEach(t),Ipo=r(b$," or "),xI=n(b$,"A",{href:!0});var BJr=s(xI);qpo=r(BJr,"FunnelBaseModel"),BJr.forEach(t),Npo=r(b$," (Funnel Transformer model)"),b$.forEach(t),jpo=i($),xp=n($,"LI",{});var zwe=s(xp);Zne=n(zwe,"STRONG",{});var IJr=s(Zne);Dpo=r(IJr,"glpn"),IJr.forEach(t),Gpo=r(zwe," \u2014 "),$I=n(zwe,"A",{href:!0});var qJr=s($I);Opo=r(qJr,"GLPNModel"),qJr.forEach(t),Vpo=r(zwe," (GLPN model)"),zwe.forEach(t),Xpo=i($),$p=n($,"LI",{});var Wwe=s($p);ese=n(Wwe,"STRONG",{});var NJr=s(ese);zpo=r(NJr,"gpt2"),NJr.forEach(t),Wpo=r(Wwe," \u2014 "),kI=n(Wwe,"A",{href:!0});var jJr=s(kI);Qpo=r(jJr,"GPT2Model"),jJr.forEach(t),Hpo=r(Wwe," (OpenAI GPT-2 model)"),Wwe.forEach(t),Upo=i($),kp=n($,"LI",{});var Qwe=s(kp);ose=n(Qwe,"STRONG",{});var DJr=s(ose);Jpo=r(DJr,"gpt_neo"),DJr.forEach(t),Ypo=r(Qwe," \u2014 "),SI=n(Qwe,"A",{href:!0});var GJr=s(SI);Kpo=r(GJr,"GPTNeoModel"),GJr.forEach(t),Zpo=r(Qwe," (GPT Neo model)"),Qwe.forEach(t),euo=i($),Sp=n($,"LI",{});var Hwe=s(Sp);rse=n(Hwe,"STRONG",{});var OJr=s(rse);ouo=r(OJr,"gptj"),OJr.forEach(t),ruo=r(Hwe," \u2014 "),RI=n(Hwe,"A",{href:!0});var VJr=s(RI);tuo=r(VJr,"GPTJModel"),VJr.forEach(t),auo=r(Hwe," (GPT-J model)"),Hwe.forEach(t),nuo=i($),Rp=n($,"LI",{});var Uwe=s(Rp);tse=n(Uwe,"STRONG",{});var XJr=s(tse);suo=r(XJr,"hubert"),XJr.forEach(t),luo=r(Uwe," \u2014 "),PI=n(Uwe,"A",{href:!0});var zJr=s(PI);iuo=r(zJr,"HubertModel"),zJr.forEach(t),duo=r(Uwe," (Hubert model)"),Uwe.forEach(t),cuo=i($),Pp=n($,"LI",{});var Jwe=s(Pp);ase=n(Jwe,"STRONG",{});var WJr=s(ase);fuo=r(WJr,"ibert"),WJr.forEach(t),muo=r(Jwe," \u2014 "),BI=n(Jwe,"A",{href:!0});var QJr=s(BI);guo=r(QJr,"IBertModel"),QJr.forEach(t),huo=r(Jwe," (I-BERT model)"),Jwe.forEach(t),puo=i($),Bp=n($,"LI",{});var Ywe=s(Bp);nse=n(Ywe,"STRONG",{});var HJr=s(nse);uuo=r(HJr,"imagegpt"),HJr.forEach(t),_uo=r(Ywe," \u2014 "),II=n(Ywe,"A",{href:!0});var UJr=s(II);buo=r(UJr,"ImageGPTModel"),UJr.forEach(t),vuo=r(Ywe," (ImageGPT model)"),Ywe.forEach(t),Fuo=i($),Ip=n($,"LI",{});var Kwe=s(Ip);sse=n(Kwe,"STRONG",{});var JJr=s(sse);Tuo=r(JJr,"layoutlm"),JJr.forEach(t),Muo=r(Kwe," \u2014 "),qI=n(Kwe,"A",{href:!0});var YJr=s(qI);Euo=r(YJr,"LayoutLMModel"),YJr.forEach(t),Cuo=r(Kwe," (LayoutLM model)"),Kwe.forEach(t),wuo=i($),qp=n($,"LI",{});var Zwe=s(qp);lse=n(Zwe,"STRONG",{});var KJr=s(lse);Auo=r(KJr,"layoutlmv2"),KJr.forEach(t),yuo=r(Zwe," \u2014 "),NI=n(Zwe,"A",{href:!0});var ZJr=s(NI);Luo=r(ZJr,"LayoutLMv2Model"),ZJr.forEach(t),xuo=r(Zwe," (LayoutLMv2 model)"),Zwe.forEach(t),$uo=i($),Np=n($,"LI",{});var eAe=s(Np);ise=n(eAe,"STRONG",{});var eYr=s(ise);kuo=r(eYr,"led"),eYr.forEach(t),Suo=r(eAe," \u2014 "),jI=n(eAe,"A",{href:!0});var oYr=s(jI);Ruo=r(oYr,"LEDModel"),oYr.forEach(t),Puo=r(eAe," (LED model)"),eAe.forEach(t),Buo=i($),jp=n($,"LI",{});var oAe=s(jp);dse=n(oAe,"STRONG",{});var rYr=s(dse);Iuo=r(rYr,"longformer"),rYr.forEach(t),quo=r(oAe," \u2014 "),DI=n(oAe,"A",{href:!0});var tYr=s(DI);Nuo=r(tYr,"LongformerModel"),tYr.forEach(t),juo=r(oAe," (Longformer model)"),oAe.forEach(t),Duo=i($),Dp=n($,"LI",{});var rAe=s(Dp);cse=n(rAe,"STRONG",{});var aYr=s(cse);Guo=r(aYr,"luke"),aYr.forEach(t),Ouo=r(rAe," \u2014 "),GI=n(rAe,"A",{href:!0});var nYr=s(GI);Vuo=r(nYr,"LukeModel"),nYr.forEach(t),Xuo=r(rAe," (LUKE model)"),rAe.forEach(t),zuo=i($),Gp=n($,"LI",{});var tAe=s(Gp);fse=n(tAe,"STRONG",{});var sYr=s(fse);Wuo=r(sYr,"lxmert"),sYr.forEach(t),Quo=r(tAe," \u2014 "),OI=n(tAe,"A",{href:!0});var lYr=s(OI);Huo=r(lYr,"LxmertModel"),lYr.forEach(t),Uuo=r(tAe," (LXMERT model)"),tAe.forEach(t),Juo=i($),Op=n($,"LI",{});var aAe=s(Op);mse=n(aAe,"STRONG",{});var iYr=s(mse);Yuo=r(iYr,"m2m_100"),iYr.forEach(t),Kuo=r(aAe," \u2014 "),VI=n(aAe,"A",{href:!0});var dYr=s(VI);Zuo=r(dYr,"M2M100Model"),dYr.forEach(t),e_o=r(aAe," (M2M100 model)"),aAe.forEach(t),o_o=i($),Vp=n($,"LI",{});var nAe=s(Vp);gse=n(nAe,"STRONG",{});var cYr=s(gse);r_o=r(cYr,"marian"),cYr.forEach(t),t_o=r(nAe," \u2014 "),XI=n(nAe,"A",{href:!0});var fYr=s(XI);a_o=r(fYr,"MarianModel"),fYr.forEach(t),n_o=r(nAe," (Marian model)"),nAe.forEach(t),s_o=i($),Xp=n($,"LI",{});var sAe=s(Xp);hse=n(sAe,"STRONG",{});var mYr=s(hse);l_o=r(mYr,"maskformer"),mYr.forEach(t),i_o=r(sAe," \u2014 "),zI=n(sAe,"A",{href:!0});var gYr=s(zI);d_o=r(gYr,"MaskFormerModel"),gYr.forEach(t),c_o=r(sAe," (MaskFormer model)"),sAe.forEach(t),f_o=i($),zp=n($,"LI",{});var lAe=s(zp);pse=n(lAe,"STRONG",{});var hYr=s(pse);m_o=r(hYr,"mbart"),hYr.forEach(t),g_o=r(lAe," \u2014 "),WI=n(lAe,"A",{href:!0});var pYr=s(WI);h_o=r(pYr,"MBartModel"),pYr.forEach(t),p_o=r(lAe," (mBART model)"),lAe.forEach(t),u_o=i($),Wp=n($,"LI",{});var iAe=s(Wp);use=n(iAe,"STRONG",{});var uYr=s(use);__o=r(uYr,"megatron-bert"),uYr.forEach(t),b_o=r(iAe," \u2014 "),QI=n(iAe,"A",{href:!0});var _Yr=s(QI);v_o=r(_Yr,"MegatronBertModel"),_Yr.forEach(t),F_o=r(iAe," (MegatronBert model)"),iAe.forEach(t),T_o=i($),Qp=n($,"LI",{});var dAe=s(Qp);_se=n(dAe,"STRONG",{});var bYr=s(_se);M_o=r(bYr,"mobilebert"),bYr.forEach(t),E_o=r(dAe," \u2014 "),HI=n(dAe,"A",{href:!0});var vYr=s(HI);C_o=r(vYr,"MobileBertModel"),vYr.forEach(t),w_o=r(dAe," (MobileBERT model)"),dAe.forEach(t),A_o=i($),Hp=n($,"LI",{});var cAe=s(Hp);bse=n(cAe,"STRONG",{});var FYr=s(bse);y_o=r(FYr,"mpnet"),FYr.forEach(t),L_o=r(cAe," \u2014 "),UI=n(cAe,"A",{href:!0});var TYr=s(UI);x_o=r(TYr,"MPNetModel"),TYr.forEach(t),$_o=r(cAe," (MPNet model)"),cAe.forEach(t),k_o=i($),Up=n($,"LI",{});var fAe=s(Up);vse=n(fAe,"STRONG",{});var MYr=s(vse);S_o=r(MYr,"mt5"),MYr.forEach(t),R_o=r(fAe," \u2014 "),JI=n(fAe,"A",{href:!0});var EYr=s(JI);P_o=r(EYr,"MT5Model"),EYr.forEach(t),B_o=r(fAe," (mT5 model)"),fAe.forEach(t),I_o=i($),Jp=n($,"LI",{});var mAe=s(Jp);Fse=n(mAe,"STRONG",{});var CYr=s(Fse);q_o=r(CYr,"nystromformer"),CYr.forEach(t),N_o=r(mAe," \u2014 "),YI=n(mAe,"A",{href:!0});var wYr=s(YI);j_o=r(wYr,"NystromformerModel"),wYr.forEach(t),D_o=r(mAe," (Nystromformer model)"),mAe.forEach(t),G_o=i($),Yp=n($,"LI",{});var gAe=s(Yp);Tse=n(gAe,"STRONG",{});var AYr=s(Tse);O_o=r(AYr,"openai-gpt"),AYr.forEach(t),V_o=r(gAe," \u2014 "),KI=n(gAe,"A",{href:!0});var yYr=s(KI);X_o=r(yYr,"OpenAIGPTModel"),yYr.forEach(t),z_o=r(gAe," (OpenAI GPT model)"),gAe.forEach(t),W_o=i($),Kp=n($,"LI",{});var hAe=s(Kp);Mse=n(hAe,"STRONG",{});var LYr=s(Mse);Q_o=r(LYr,"opt"),LYr.forEach(t),H_o=r(hAe," \u2014 "),ZI=n(hAe,"A",{href:!0});var xYr=s(ZI);U_o=r(xYr,"OPTModel"),xYr.forEach(t),J_o=r(hAe," (OPT model)"),hAe.forEach(t),Y_o=i($),Zp=n($,"LI",{});var pAe=s(Zp);Ese=n(pAe,"STRONG",{});var $Yr=s(Ese);K_o=r($Yr,"pegasus"),$Yr.forEach(t),Z_o=r(pAe," \u2014 "),eq=n(pAe,"A",{href:!0});var kYr=s(eq);e1o=r(kYr,"PegasusModel"),kYr.forEach(t),o1o=r(pAe," (Pegasus model)"),pAe.forEach(t),r1o=i($),eu=n($,"LI",{});var uAe=s(eu);Cse=n(uAe,"STRONG",{});var SYr=s(Cse);t1o=r(SYr,"perceiver"),SYr.forEach(t),a1o=r(uAe," \u2014 "),oq=n(uAe,"A",{href:!0});var RYr=s(oq);n1o=r(RYr,"PerceiverModel"),RYr.forEach(t),s1o=r(uAe," (Perceiver model)"),uAe.forEach(t),l1o=i($),ou=n($,"LI",{});var _Ae=s(ou);wse=n(_Ae,"STRONG",{});var PYr=s(wse);i1o=r(PYr,"plbart"),PYr.forEach(t),d1o=r(_Ae," \u2014 "),rq=n(_Ae,"A",{href:!0});var BYr=s(rq);c1o=r(BYr,"PLBartModel"),BYr.forEach(t),f1o=r(_Ae," (PLBart model)"),_Ae.forEach(t),m1o=i($),ru=n($,"LI",{});var bAe=s(ru);Ase=n(bAe,"STRONG",{});var IYr=s(Ase);g1o=r(IYr,"poolformer"),IYr.forEach(t),h1o=r(bAe," \u2014 "),tq=n(bAe,"A",{href:!0});var qYr=s(tq);p1o=r(qYr,"PoolFormerModel"),qYr.forEach(t),u1o=r(bAe," (PoolFormer model)"),bAe.forEach(t),_1o=i($),tu=n($,"LI",{});var vAe=s(tu);yse=n(vAe,"STRONG",{});var NYr=s(yse);b1o=r(NYr,"prophetnet"),NYr.forEach(t),v1o=r(vAe," \u2014 "),aq=n(vAe,"A",{href:!0});var jYr=s(aq);F1o=r(jYr,"ProphetNetModel"),jYr.forEach(t),T1o=r(vAe," (ProphetNet model)"),vAe.forEach(t),M1o=i($),au=n($,"LI",{});var FAe=s(au);Lse=n(FAe,"STRONG",{});var DYr=s(Lse);E1o=r(DYr,"qdqbert"),DYr.forEach(t),C1o=r(FAe," \u2014 "),nq=n(FAe,"A",{href:!0});var GYr=s(nq);w1o=r(GYr,"QDQBertModel"),GYr.forEach(t),A1o=r(FAe," (QDQBert model)"),FAe.forEach(t),y1o=i($),nu=n($,"LI",{});var TAe=s(nu);xse=n(TAe,"STRONG",{});var OYr=s(xse);L1o=r(OYr,"reformer"),OYr.forEach(t),x1o=r(TAe," \u2014 "),sq=n(TAe,"A",{href:!0});var VYr=s(sq);$1o=r(VYr,"ReformerModel"),VYr.forEach(t),k1o=r(TAe," (Reformer model)"),TAe.forEach(t),S1o=i($),su=n($,"LI",{});var MAe=s(su);$se=n(MAe,"STRONG",{});var XYr=s($se);R1o=r(XYr,"regnet"),XYr.forEach(t),P1o=r(MAe," \u2014 "),lq=n(MAe,"A",{href:!0});var zYr=s(lq);B1o=r(zYr,"RegNetModel"),zYr.forEach(t),I1o=r(MAe," (RegNet model)"),MAe.forEach(t),q1o=i($),lu=n($,"LI",{});var EAe=s(lu);kse=n(EAe,"STRONG",{});var WYr=s(kse);N1o=r(WYr,"rembert"),WYr.forEach(t),j1o=r(EAe," \u2014 "),iq=n(EAe,"A",{href:!0});var QYr=s(iq);D1o=r(QYr,"RemBertModel"),QYr.forEach(t),G1o=r(EAe," (RemBERT model)"),EAe.forEach(t),O1o=i($),iu=n($,"LI",{});var CAe=s(iu);Sse=n(CAe,"STRONG",{});var HYr=s(Sse);V1o=r(HYr,"resnet"),HYr.forEach(t),X1o=r(CAe," \u2014 "),dq=n(CAe,"A",{href:!0});var UYr=s(dq);z1o=r(UYr,"ResNetModel"),UYr.forEach(t),W1o=r(CAe," (ResNet model)"),CAe.forEach(t),Q1o=i($),du=n($,"LI",{});var wAe=s(du);Rse=n(wAe,"STRONG",{});var JYr=s(Rse);H1o=r(JYr,"retribert"),JYr.forEach(t),U1o=r(wAe," \u2014 "),cq=n(wAe,"A",{href:!0});var YYr=s(cq);J1o=r(YYr,"RetriBertModel"),YYr.forEach(t),Y1o=r(wAe," (RetriBERT model)"),wAe.forEach(t),K1o=i($),cu=n($,"LI",{});var AAe=s(cu);Pse=n(AAe,"STRONG",{});var KYr=s(Pse);Z1o=r(KYr,"roberta"),KYr.forEach(t),e2o=r(AAe," \u2014 "),fq=n(AAe,"A",{href:!0});var ZYr=s(fq);o2o=r(ZYr,"RobertaModel"),ZYr.forEach(t),r2o=r(AAe," (RoBERTa model)"),AAe.forEach(t),t2o=i($),fu=n($,"LI",{});var yAe=s(fu);Bse=n(yAe,"STRONG",{});var eKr=s(Bse);a2o=r(eKr,"roformer"),eKr.forEach(t),n2o=r(yAe," \u2014 "),mq=n(yAe,"A",{href:!0});var oKr=s(mq);s2o=r(oKr,"RoFormerModel"),oKr.forEach(t),l2o=r(yAe," (RoFormer model)"),yAe.forEach(t),i2o=i($),mu=n($,"LI",{});var LAe=s(mu);Ise=n(LAe,"STRONG",{});var rKr=s(Ise);d2o=r(rKr,"segformer"),rKr.forEach(t),c2o=r(LAe," \u2014 "),gq=n(LAe,"A",{href:!0});var tKr=s(gq);f2o=r(tKr,"SegformerModel"),tKr.forEach(t),m2o=r(LAe," (SegFormer model)"),LAe.forEach(t),g2o=i($),gu=n($,"LI",{});var xAe=s(gu);qse=n(xAe,"STRONG",{});var aKr=s(qse);h2o=r(aKr,"sew"),aKr.forEach(t),p2o=r(xAe," \u2014 "),hq=n(xAe,"A",{href:!0});var nKr=s(hq);u2o=r(nKr,"SEWModel"),nKr.forEach(t),_2o=r(xAe," (SEW model)"),xAe.forEach(t),b2o=i($),hu=n($,"LI",{});var $Ae=s(hu);Nse=n($Ae,"STRONG",{});var sKr=s(Nse);v2o=r(sKr,"sew-d"),sKr.forEach(t),F2o=r($Ae," \u2014 "),pq=n($Ae,"A",{href:!0});var lKr=s(pq);T2o=r(lKr,"SEWDModel"),lKr.forEach(t),M2o=r($Ae," (SEW-D model)"),$Ae.forEach(t),E2o=i($),pu=n($,"LI",{});var kAe=s(pu);jse=n(kAe,"STRONG",{});var iKr=s(jse);C2o=r(iKr,"speech_to_text"),iKr.forEach(t),w2o=r(kAe," \u2014 "),uq=n(kAe,"A",{href:!0});var dKr=s(uq);A2o=r(dKr,"Speech2TextModel"),dKr.forEach(t),y2o=r(kAe," (Speech2Text model)"),kAe.forEach(t),L2o=i($),uu=n($,"LI",{});var SAe=s(uu);Dse=n(SAe,"STRONG",{});var cKr=s(Dse);x2o=r(cKr,"splinter"),cKr.forEach(t),$2o=r(SAe," \u2014 "),_q=n(SAe,"A",{href:!0});var fKr=s(_q);k2o=r(fKr,"SplinterModel"),fKr.forEach(t),S2o=r(SAe," (Splinter model)"),SAe.forEach(t),R2o=i($),_u=n($,"LI",{});var RAe=s(_u);Gse=n(RAe,"STRONG",{});var mKr=s(Gse);P2o=r(mKr,"squeezebert"),mKr.forEach(t),B2o=r(RAe," \u2014 "),bq=n(RAe,"A",{href:!0});var gKr=s(bq);I2o=r(gKr,"SqueezeBertModel"),gKr.forEach(t),q2o=r(RAe," (SqueezeBERT model)"),RAe.forEach(t),N2o=i($),bu=n($,"LI",{});var PAe=s(bu);Ose=n(PAe,"STRONG",{});var hKr=s(Ose);j2o=r(hKr,"swin"),hKr.forEach(t),D2o=r(PAe," \u2014 "),vq=n(PAe,"A",{href:!0});var pKr=s(vq);G2o=r(pKr,"SwinModel"),pKr.forEach(t),O2o=r(PAe," (Swin model)"),PAe.forEach(t),V2o=i($),vu=n($,"LI",{});var BAe=s(vu);Vse=n(BAe,"STRONG",{});var uKr=s(Vse);X2o=r(uKr,"t5"),uKr.forEach(t),z2o=r(BAe," \u2014 "),Fq=n(BAe,"A",{href:!0});var _Kr=s(Fq);W2o=r(_Kr,"T5Model"),_Kr.forEach(t),Q2o=r(BAe," (T5 model)"),BAe.forEach(t),H2o=i($),Fu=n($,"LI",{});var IAe=s(Fu);Xse=n(IAe,"STRONG",{});var bKr=s(Xse);U2o=r(bKr,"tapas"),bKr.forEach(t),J2o=r(IAe," \u2014 "),Tq=n(IAe,"A",{href:!0});var vKr=s(Tq);Y2o=r(vKr,"TapasModel"),vKr.forEach(t),K2o=r(IAe," (TAPAS model)"),IAe.forEach(t),Z2o=i($),Tu=n($,"LI",{});var qAe=s(Tu);zse=n(qAe,"STRONG",{});var FKr=s(zse);ebo=r(FKr,"transfo-xl"),FKr.forEach(t),obo=r(qAe," \u2014 "),Mq=n(qAe,"A",{href:!0});var TKr=s(Mq);rbo=r(TKr,"TransfoXLModel"),TKr.forEach(t),tbo=r(qAe," (Transformer-XL model)"),qAe.forEach(t),abo=i($),Mu=n($,"LI",{});var NAe=s(Mu);Wse=n(NAe,"STRONG",{});var MKr=s(Wse);nbo=r(MKr,"unispeech"),MKr.forEach(t),sbo=r(NAe," \u2014 "),Eq=n(NAe,"A",{href:!0});var EKr=s(Eq);lbo=r(EKr,"UniSpeechModel"),EKr.forEach(t),ibo=r(NAe," (UniSpeech model)"),NAe.forEach(t),dbo=i($),Eu=n($,"LI",{});var jAe=s(Eu);Qse=n(jAe,"STRONG",{});var CKr=s(Qse);cbo=r(CKr,"unispeech-sat"),CKr.forEach(t),fbo=r(jAe," \u2014 "),Cq=n(jAe,"A",{href:!0});var wKr=s(Cq);mbo=r(wKr,"UniSpeechSatModel"),wKr.forEach(t),gbo=r(jAe," (UniSpeechSat model)"),jAe.forEach(t),hbo=i($),Cu=n($,"LI",{});var DAe=s(Cu);Hse=n(DAe,"STRONG",{});var AKr=s(Hse);pbo=r(AKr,"van"),AKr.forEach(t),ubo=r(DAe," \u2014 "),wq=n(DAe,"A",{href:!0});var yKr=s(wq);_bo=r(yKr,"VanModel"),yKr.forEach(t),bbo=r(DAe," (VAN model)"),DAe.forEach(t),vbo=i($),wu=n($,"LI",{});var GAe=s(wu);Use=n(GAe,"STRONG",{});var LKr=s(Use);Fbo=r(LKr,"vilt"),LKr.forEach(t),Tbo=r(GAe," \u2014 "),Aq=n(GAe,"A",{href:!0});var xKr=s(Aq);Mbo=r(xKr,"ViltModel"),xKr.forEach(t),Ebo=r(GAe," (ViLT model)"),GAe.forEach(t),Cbo=i($),Au=n($,"LI",{});var OAe=s(Au);Jse=n(OAe,"STRONG",{});var $Kr=s(Jse);wbo=r($Kr,"vision-text-dual-encoder"),$Kr.forEach(t),Abo=r(OAe," \u2014 "),yq=n(OAe,"A",{href:!0});var kKr=s(yq);ybo=r(kKr,"VisionTextDualEncoderModel"),kKr.forEach(t),Lbo=r(OAe," (VisionTextDualEncoder model)"),OAe.forEach(t),xbo=i($),yu=n($,"LI",{});var VAe=s(yu);Yse=n(VAe,"STRONG",{});var SKr=s(Yse);$bo=r(SKr,"visual_bert"),SKr.forEach(t),kbo=r(VAe," \u2014 "),Lq=n(VAe,"A",{href:!0});var RKr=s(Lq);Sbo=r(RKr,"VisualBertModel"),RKr.forEach(t),Rbo=r(VAe," (VisualBert model)"),VAe.forEach(t),Pbo=i($),Lu=n($,"LI",{});var XAe=s(Lu);Kse=n(XAe,"STRONG",{});var PKr=s(Kse);Bbo=r(PKr,"vit"),PKr.forEach(t),Ibo=r(XAe," \u2014 "),xq=n(XAe,"A",{href:!0});var BKr=s(xq);qbo=r(BKr,"ViTModel"),BKr.forEach(t),Nbo=r(XAe," (ViT model)"),XAe.forEach(t),jbo=i($),xu=n($,"LI",{});var zAe=s(xu);Zse=n(zAe,"STRONG",{});var IKr=s(Zse);Dbo=r(IKr,"vit_mae"),IKr.forEach(t),Gbo=r(zAe," \u2014 "),$q=n(zAe,"A",{href:!0});var qKr=s($q);Obo=r(qKr,"ViTMAEModel"),qKr.forEach(t),Vbo=r(zAe," (ViTMAE model)"),zAe.forEach(t),Xbo=i($),$u=n($,"LI",{});var WAe=s($u);ele=n(WAe,"STRONG",{});var NKr=s(ele);zbo=r(NKr,"wav2vec2"),NKr.forEach(t),Wbo=r(WAe," \u2014 "),kq=n(WAe,"A",{href:!0});var jKr=s(kq);Qbo=r(jKr,"Wav2Vec2Model"),jKr.forEach(t),Hbo=r(WAe," (Wav2Vec2 model)"),WAe.forEach(t),Ubo=i($),ku=n($,"LI",{});var QAe=s(ku);ole=n(QAe,"STRONG",{});var DKr=s(ole);Jbo=r(DKr,"wav2vec2-conformer"),DKr.forEach(t),Ybo=r(QAe," \u2014 "),Sq=n(QAe,"A",{href:!0});var GKr=s(Sq);Kbo=r(GKr,"Wav2Vec2ConformerModel"),GKr.forEach(t),Zbo=r(QAe," (Wav2Vec2-Conformer model)"),QAe.forEach(t),evo=i($),Su=n($,"LI",{});var HAe=s(Su);rle=n(HAe,"STRONG",{});var OKr=s(rle);ovo=r(OKr,"wavlm"),OKr.forEach(t),rvo=r(HAe," \u2014 "),Rq=n(HAe,"A",{href:!0});var VKr=s(Rq);tvo=r(VKr,"WavLMModel"),VKr.forEach(t),avo=r(HAe," (WavLM model)"),HAe.forEach(t),nvo=i($),Ru=n($,"LI",{});var UAe=s(Ru);tle=n(UAe,"STRONG",{});var XKr=s(tle);svo=r(XKr,"xglm"),XKr.forEach(t),lvo=r(UAe," \u2014 "),Pq=n(UAe,"A",{href:!0});var zKr=s(Pq);ivo=r(zKr,"XGLMModel"),zKr.forEach(t),dvo=r(UAe," (XGLM model)"),UAe.forEach(t),cvo=i($),Pu=n($,"LI",{});var JAe=s(Pu);ale=n(JAe,"STRONG",{});var WKr=s(ale);fvo=r(WKr,"xlm"),WKr.forEach(t),mvo=r(JAe," \u2014 "),Bq=n(JAe,"A",{href:!0});var QKr=s(Bq);gvo=r(QKr,"XLMModel"),QKr.forEach(t),hvo=r(JAe," (XLM model)"),JAe.forEach(t),pvo=i($),Bu=n($,"LI",{});var YAe=s(Bu);nle=n(YAe,"STRONG",{});var HKr=s(nle);uvo=r(HKr,"xlm-prophetnet"),HKr.forEach(t),_vo=r(YAe," \u2014 "),Iq=n(YAe,"A",{href:!0});var UKr=s(Iq);bvo=r(UKr,"XLMProphetNetModel"),UKr.forEach(t),vvo=r(YAe," (XLMProphetNet model)"),YAe.forEach(t),Fvo=i($),Iu=n($,"LI",{});var KAe=s(Iu);sle=n(KAe,"STRONG",{});var JKr=s(sle);Tvo=r(JKr,"xlm-roberta"),JKr.forEach(t),Mvo=r(KAe," \u2014 "),qq=n(KAe,"A",{href:!0});var YKr=s(qq);Evo=r(YKr,"XLMRobertaModel"),YKr.forEach(t),Cvo=r(KAe," (XLM-RoBERTa model)"),KAe.forEach(t),wvo=i($),qu=n($,"LI",{});var ZAe=s(qu);lle=n(ZAe,"STRONG",{});var KKr=s(lle);Avo=r(KKr,"xlm-roberta-xl"),KKr.forEach(t),yvo=r(ZAe," \u2014 "),Nq=n(ZAe,"A",{href:!0});var ZKr=s(Nq);Lvo=r(ZKr,"XLMRobertaXLModel"),ZKr.forEach(t),xvo=r(ZAe," (XLM-RoBERTa-XL model)"),ZAe.forEach(t),$vo=i($),Nu=n($,"LI",{});var e0e=s(Nu);ile=n(e0e,"STRONG",{});var eZr=s(ile);kvo=r(eZr,"xlnet"),eZr.forEach(t),Svo=r(e0e," \u2014 "),jq=n(e0e,"A",{href:!0});var oZr=s(jq);Rvo=r(oZr,"XLNetModel"),oZr.forEach(t),Pvo=r(e0e," (XLNet model)"),e0e.forEach(t),Bvo=i($),ju=n($,"LI",{});var o0e=s(ju);dle=n(o0e,"STRONG",{});var rZr=s(dle);Ivo=r(rZr,"yolos"),rZr.forEach(t),qvo=r(o0e," \u2014 "),Dq=n(o0e,"A",{href:!0});var tZr=s(Dq);Nvo=r(tZr,"YolosModel"),tZr.forEach(t),jvo=r(o0e," (YOLOS model)"),o0e.forEach(t),Dvo=i($),Du=n($,"LI",{});var r0e=s(Du);cle=n(r0e,"STRONG",{});var aZr=s(cle);Gvo=r(aZr,"yoso"),aZr.forEach(t),Ovo=r(r0e," \u2014 "),Gq=n(r0e,"A",{href:!0});var nZr=s(Gq);Vvo=r(nZr,"YosoModel"),nZr.forEach(t),Xvo=r(r0e," (YOSO model)"),r0e.forEach(t),$.forEach(t),zvo=i(oa),Gu=n(oa,"P",{});var t0e=s(Gu);Wvo=r(t0e,"The model is set in evaluation mode by default using "),fle=n(t0e,"CODE",{});var sZr=s(fle);Qvo=r(sZr,"model.eval()"),sZr.forEach(t),Hvo=r(t0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=n(t0e,"CODE",{});var lZr=s(mle);Uvo=r(lZr,"model.train()"),lZr.forEach(t),t0e.forEach(t),Jvo=i(oa),T(Ou.$$.fragment,oa),oa.forEach(t),js.forEach(t),SIe=i(f),Ai=n(f,"H2",{class:!0});var INe=s(Ai);Vu=n(INe,"A",{id:!0,class:!0,href:!0});var iZr=s(Vu);gle=n(iZr,"SPAN",{});var dZr=s(gle);T(B0.$$.fragment,dZr),dZr.forEach(t),iZr.forEach(t),Yvo=i(INe),hle=n(INe,"SPAN",{});var cZr=s(hle);Kvo=r(cZr,"AutoModelForPreTraining"),cZr.forEach(t),INe.forEach(t),RIe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(I0.$$.fragment,Ds),Zvo=i(Ds),yi=n(Ds,"P",{});var CK=s(yi);eFo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oq=n(CK,"A",{href:!0});var fZr=s(Oq);oFo=r(fZr,"from_pretrained()"),fZr.forEach(t),rFo=r(CK," class method or the "),Vq=n(CK,"A",{href:!0});var mZr=s(Vq);tFo=r(mZr,"from_config()"),mZr.forEach(t),aFo=r(CK,` class
method.`),CK.forEach(t),nFo=i(Ds),q0=n(Ds,"P",{});var qNe=s(q0);sFo=r(qNe,"This class cannot be instantiated directly using "),ple=n(qNe,"CODE",{});var gZr=s(ple);lFo=r(gZr,"__init__()"),gZr.forEach(t),iFo=r(qNe," (throws an error)."),qNe.forEach(t),dFo=i(Ds),at=n(Ds,"DIV",{class:!0});var fw=s(at);T(N0.$$.fragment,fw),cFo=i(fw),ule=n(fw,"P",{});var hZr=s(ule);fFo=r(hZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hZr.forEach(t),mFo=i(fw),Li=n(fw,"P",{});var wK=s(Li);gFo=r(wK,`Note:
Loading a model from its configuration file does `),_le=n(wK,"STRONG",{});var pZr=s(_le);hFo=r(pZr,"not"),pZr.forEach(t),pFo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=n(wK,"A",{href:!0});var uZr=s(Xq);uFo=r(uZr,"from_pretrained()"),uZr.forEach(t),_Fo=r(wK," to load the model weights."),wK.forEach(t),bFo=i(fw),T(Xu.$$.fragment,fw),fw.forEach(t),vFo=i(Ds),Ye=n(Ds,"DIV",{class:!0});var ra=s(Ye);T(j0.$$.fragment,ra),FFo=i(ra),ble=n(ra,"P",{});var _Zr=s(ble);TFo=r(_Zr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Zr.forEach(t),MFo=i(ra),xa=n(ra,"P",{});var mw=s(xa);EFo=r(mw,"The model class to instantiate is selected based on the "),vle=n(mw,"CODE",{});var bZr=s(vle);CFo=r(bZr,"model_type"),bZr.forEach(t),wFo=r(mw,` property of the config object (either
passed as an argument or loaded from `),Fle=n(mw,"CODE",{});var vZr=s(Fle);AFo=r(vZr,"pretrained_model_name_or_path"),vZr.forEach(t),yFo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=n(mw,"CODE",{});var FZr=s(Tle);LFo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),xFo=r(mw,":"),mw.forEach(t),$Fo=i(ra),G=n(ra,"UL",{});var O=s(G);zu=n(O,"LI",{});var a0e=s(zu);Mle=n(a0e,"STRONG",{});var TZr=s(Mle);kFo=r(TZr,"albert"),TZr.forEach(t),SFo=r(a0e," \u2014 "),zq=n(a0e,"A",{href:!0});var MZr=s(zq);RFo=r(MZr,"AlbertForPreTraining"),MZr.forEach(t),PFo=r(a0e," (ALBERT model)"),a0e.forEach(t),BFo=i(O),Wu=n(O,"LI",{});var n0e=s(Wu);Ele=n(n0e,"STRONG",{});var EZr=s(Ele);IFo=r(EZr,"bart"),EZr.forEach(t),qFo=r(n0e," \u2014 "),Wq=n(n0e,"A",{href:!0});var CZr=s(Wq);NFo=r(CZr,"BartForConditionalGeneration"),CZr.forEach(t),jFo=r(n0e," (BART model)"),n0e.forEach(t),DFo=i(O),Qu=n(O,"LI",{});var s0e=s(Qu);Cle=n(s0e,"STRONG",{});var wZr=s(Cle);GFo=r(wZr,"bert"),wZr.forEach(t),OFo=r(s0e," \u2014 "),Qq=n(s0e,"A",{href:!0});var AZr=s(Qq);VFo=r(AZr,"BertForPreTraining"),AZr.forEach(t),XFo=r(s0e," (BERT model)"),s0e.forEach(t),zFo=i(O),Hu=n(O,"LI",{});var l0e=s(Hu);wle=n(l0e,"STRONG",{});var yZr=s(wle);WFo=r(yZr,"big_bird"),yZr.forEach(t),QFo=r(l0e," \u2014 "),Hq=n(l0e,"A",{href:!0});var LZr=s(Hq);HFo=r(LZr,"BigBirdForPreTraining"),LZr.forEach(t),UFo=r(l0e," (BigBird model)"),l0e.forEach(t),JFo=i(O),Uu=n(O,"LI",{});var i0e=s(Uu);Ale=n(i0e,"STRONG",{});var xZr=s(Ale);YFo=r(xZr,"camembert"),xZr.forEach(t),KFo=r(i0e," \u2014 "),Uq=n(i0e,"A",{href:!0});var $Zr=s(Uq);ZFo=r($Zr,"CamembertForMaskedLM"),$Zr.forEach(t),e6o=r(i0e," (CamemBERT model)"),i0e.forEach(t),o6o=i(O),Ju=n(O,"LI",{});var d0e=s(Ju);yle=n(d0e,"STRONG",{});var kZr=s(yle);r6o=r(kZr,"ctrl"),kZr.forEach(t),t6o=r(d0e," \u2014 "),Jq=n(d0e,"A",{href:!0});var SZr=s(Jq);a6o=r(SZr,"CTRLLMHeadModel"),SZr.forEach(t),n6o=r(d0e," (CTRL model)"),d0e.forEach(t),s6o=i(O),Yu=n(O,"LI",{});var c0e=s(Yu);Lle=n(c0e,"STRONG",{});var RZr=s(Lle);l6o=r(RZr,"data2vec-text"),RZr.forEach(t),i6o=r(c0e," \u2014 "),Yq=n(c0e,"A",{href:!0});var PZr=s(Yq);d6o=r(PZr,"Data2VecTextForMaskedLM"),PZr.forEach(t),c6o=r(c0e," (Data2VecText model)"),c0e.forEach(t),f6o=i(O),Ku=n(O,"LI",{});var f0e=s(Ku);xle=n(f0e,"STRONG",{});var BZr=s(xle);m6o=r(BZr,"deberta"),BZr.forEach(t),g6o=r(f0e," \u2014 "),Kq=n(f0e,"A",{href:!0});var IZr=s(Kq);h6o=r(IZr,"DebertaForMaskedLM"),IZr.forEach(t),p6o=r(f0e," (DeBERTa model)"),f0e.forEach(t),u6o=i(O),Zu=n(O,"LI",{});var m0e=s(Zu);$le=n(m0e,"STRONG",{});var qZr=s($le);_6o=r(qZr,"deberta-v2"),qZr.forEach(t),b6o=r(m0e," \u2014 "),Zq=n(m0e,"A",{href:!0});var NZr=s(Zq);v6o=r(NZr,"DebertaV2ForMaskedLM"),NZr.forEach(t),F6o=r(m0e," (DeBERTa-v2 model)"),m0e.forEach(t),T6o=i(O),e_=n(O,"LI",{});var g0e=s(e_);kle=n(g0e,"STRONG",{});var jZr=s(kle);M6o=r(jZr,"distilbert"),jZr.forEach(t),E6o=r(g0e," \u2014 "),eN=n(g0e,"A",{href:!0});var DZr=s(eN);C6o=r(DZr,"DistilBertForMaskedLM"),DZr.forEach(t),w6o=r(g0e," (DistilBERT model)"),g0e.forEach(t),A6o=i(O),o_=n(O,"LI",{});var h0e=s(o_);Sle=n(h0e,"STRONG",{});var GZr=s(Sle);y6o=r(GZr,"electra"),GZr.forEach(t),L6o=r(h0e," \u2014 "),oN=n(h0e,"A",{href:!0});var OZr=s(oN);x6o=r(OZr,"ElectraForPreTraining"),OZr.forEach(t),$6o=r(h0e," (ELECTRA model)"),h0e.forEach(t),k6o=i(O),r_=n(O,"LI",{});var p0e=s(r_);Rle=n(p0e,"STRONG",{});var VZr=s(Rle);S6o=r(VZr,"flaubert"),VZr.forEach(t),R6o=r(p0e," \u2014 "),rN=n(p0e,"A",{href:!0});var XZr=s(rN);P6o=r(XZr,"FlaubertWithLMHeadModel"),XZr.forEach(t),B6o=r(p0e," (FlauBERT model)"),p0e.forEach(t),I6o=i(O),t_=n(O,"LI",{});var u0e=s(t_);Ple=n(u0e,"STRONG",{});var zZr=s(Ple);q6o=r(zZr,"flava"),zZr.forEach(t),N6o=r(u0e," \u2014 "),tN=n(u0e,"A",{href:!0});var WZr=s(tN);j6o=r(WZr,"FlavaForPreTraining"),WZr.forEach(t),D6o=r(u0e," (Flava model)"),u0e.forEach(t),G6o=i(O),a_=n(O,"LI",{});var _0e=s(a_);Ble=n(_0e,"STRONG",{});var QZr=s(Ble);O6o=r(QZr,"fnet"),QZr.forEach(t),V6o=r(_0e," \u2014 "),aN=n(_0e,"A",{href:!0});var HZr=s(aN);X6o=r(HZr,"FNetForPreTraining"),HZr.forEach(t),z6o=r(_0e," (FNet model)"),_0e.forEach(t),W6o=i(O),n_=n(O,"LI",{});var b0e=s(n_);Ile=n(b0e,"STRONG",{});var UZr=s(Ile);Q6o=r(UZr,"fsmt"),UZr.forEach(t),H6o=r(b0e," \u2014 "),nN=n(b0e,"A",{href:!0});var JZr=s(nN);U6o=r(JZr,"FSMTForConditionalGeneration"),JZr.forEach(t),J6o=r(b0e," (FairSeq Machine-Translation model)"),b0e.forEach(t),Y6o=i(O),s_=n(O,"LI",{});var v0e=s(s_);qle=n(v0e,"STRONG",{});var YZr=s(qle);K6o=r(YZr,"funnel"),YZr.forEach(t),Z6o=r(v0e," \u2014 "),sN=n(v0e,"A",{href:!0});var KZr=s(sN);eTo=r(KZr,"FunnelForPreTraining"),KZr.forEach(t),oTo=r(v0e," (Funnel Transformer model)"),v0e.forEach(t),rTo=i(O),l_=n(O,"LI",{});var F0e=s(l_);Nle=n(F0e,"STRONG",{});var ZZr=s(Nle);tTo=r(ZZr,"gpt2"),ZZr.forEach(t),aTo=r(F0e," \u2014 "),lN=n(F0e,"A",{href:!0});var eet=s(lN);nTo=r(eet,"GPT2LMHeadModel"),eet.forEach(t),sTo=r(F0e," (OpenAI GPT-2 model)"),F0e.forEach(t),lTo=i(O),i_=n(O,"LI",{});var T0e=s(i_);jle=n(T0e,"STRONG",{});var oet=s(jle);iTo=r(oet,"ibert"),oet.forEach(t),dTo=r(T0e," \u2014 "),iN=n(T0e,"A",{href:!0});var ret=s(iN);cTo=r(ret,"IBertForMaskedLM"),ret.forEach(t),fTo=r(T0e," (I-BERT model)"),T0e.forEach(t),mTo=i(O),d_=n(O,"LI",{});var M0e=s(d_);Dle=n(M0e,"STRONG",{});var tet=s(Dle);gTo=r(tet,"layoutlm"),tet.forEach(t),hTo=r(M0e," \u2014 "),dN=n(M0e,"A",{href:!0});var aet=s(dN);pTo=r(aet,"LayoutLMForMaskedLM"),aet.forEach(t),uTo=r(M0e," (LayoutLM model)"),M0e.forEach(t),_To=i(O),c_=n(O,"LI",{});var E0e=s(c_);Gle=n(E0e,"STRONG",{});var net=s(Gle);bTo=r(net,"longformer"),net.forEach(t),vTo=r(E0e," \u2014 "),cN=n(E0e,"A",{href:!0});var set=s(cN);FTo=r(set,"LongformerForMaskedLM"),set.forEach(t),TTo=r(E0e," (Longformer model)"),E0e.forEach(t),MTo=i(O),f_=n(O,"LI",{});var C0e=s(f_);Ole=n(C0e,"STRONG",{});var iet=s(Ole);ETo=r(iet,"lxmert"),iet.forEach(t),CTo=r(C0e," \u2014 "),fN=n(C0e,"A",{href:!0});var det=s(fN);wTo=r(det,"LxmertForPreTraining"),det.forEach(t),ATo=r(C0e," (LXMERT model)"),C0e.forEach(t),yTo=i(O),m_=n(O,"LI",{});var w0e=s(m_);Vle=n(w0e,"STRONG",{});var cet=s(Vle);LTo=r(cet,"megatron-bert"),cet.forEach(t),xTo=r(w0e," \u2014 "),mN=n(w0e,"A",{href:!0});var fet=s(mN);$To=r(fet,"MegatronBertForPreTraining"),fet.forEach(t),kTo=r(w0e," (MegatronBert model)"),w0e.forEach(t),STo=i(O),g_=n(O,"LI",{});var A0e=s(g_);Xle=n(A0e,"STRONG",{});var met=s(Xle);RTo=r(met,"mobilebert"),met.forEach(t),PTo=r(A0e," \u2014 "),gN=n(A0e,"A",{href:!0});var get=s(gN);BTo=r(get,"MobileBertForPreTraining"),get.forEach(t),ITo=r(A0e," (MobileBERT model)"),A0e.forEach(t),qTo=i(O),h_=n(O,"LI",{});var y0e=s(h_);zle=n(y0e,"STRONG",{});var het=s(zle);NTo=r(het,"mpnet"),het.forEach(t),jTo=r(y0e," \u2014 "),hN=n(y0e,"A",{href:!0});var pet=s(hN);DTo=r(pet,"MPNetForMaskedLM"),pet.forEach(t),GTo=r(y0e," (MPNet model)"),y0e.forEach(t),OTo=i(O),p_=n(O,"LI",{});var L0e=s(p_);Wle=n(L0e,"STRONG",{});var uet=s(Wle);VTo=r(uet,"openai-gpt"),uet.forEach(t),XTo=r(L0e," \u2014 "),pN=n(L0e,"A",{href:!0});var _et=s(pN);zTo=r(_et,"OpenAIGPTLMHeadModel"),_et.forEach(t),WTo=r(L0e," (OpenAI GPT model)"),L0e.forEach(t),QTo=i(O),u_=n(O,"LI",{});var x0e=s(u_);Qle=n(x0e,"STRONG",{});var bet=s(Qle);HTo=r(bet,"retribert"),bet.forEach(t),UTo=r(x0e," \u2014 "),uN=n(x0e,"A",{href:!0});var vet=s(uN);JTo=r(vet,"RetriBertModel"),vet.forEach(t),YTo=r(x0e," (RetriBERT model)"),x0e.forEach(t),KTo=i(O),__=n(O,"LI",{});var $0e=s(__);Hle=n($0e,"STRONG",{});var Fet=s(Hle);ZTo=r(Fet,"roberta"),Fet.forEach(t),e8o=r($0e," \u2014 "),_N=n($0e,"A",{href:!0});var Tet=s(_N);o8o=r(Tet,"RobertaForMaskedLM"),Tet.forEach(t),r8o=r($0e," (RoBERTa model)"),$0e.forEach(t),t8o=i(O),b_=n(O,"LI",{});var k0e=s(b_);Ule=n(k0e,"STRONG",{});var Met=s(Ule);a8o=r(Met,"squeezebert"),Met.forEach(t),n8o=r(k0e," \u2014 "),bN=n(k0e,"A",{href:!0});var Eet=s(bN);s8o=r(Eet,"SqueezeBertForMaskedLM"),Eet.forEach(t),l8o=r(k0e," (SqueezeBERT model)"),k0e.forEach(t),i8o=i(O),v_=n(O,"LI",{});var S0e=s(v_);Jle=n(S0e,"STRONG",{});var Cet=s(Jle);d8o=r(Cet,"t5"),Cet.forEach(t),c8o=r(S0e," \u2014 "),vN=n(S0e,"A",{href:!0});var wet=s(vN);f8o=r(wet,"T5ForConditionalGeneration"),wet.forEach(t),m8o=r(S0e," (T5 model)"),S0e.forEach(t),g8o=i(O),F_=n(O,"LI",{});var R0e=s(F_);Yle=n(R0e,"STRONG",{});var Aet=s(Yle);h8o=r(Aet,"tapas"),Aet.forEach(t),p8o=r(R0e," \u2014 "),FN=n(R0e,"A",{href:!0});var yet=s(FN);u8o=r(yet,"TapasForMaskedLM"),yet.forEach(t),_8o=r(R0e," (TAPAS model)"),R0e.forEach(t),b8o=i(O),T_=n(O,"LI",{});var P0e=s(T_);Kle=n(P0e,"STRONG",{});var Let=s(Kle);v8o=r(Let,"transfo-xl"),Let.forEach(t),F8o=r(P0e," \u2014 "),TN=n(P0e,"A",{href:!0});var xet=s(TN);T8o=r(xet,"TransfoXLLMHeadModel"),xet.forEach(t),M8o=r(P0e," (Transformer-XL model)"),P0e.forEach(t),E8o=i(O),M_=n(O,"LI",{});var B0e=s(M_);Zle=n(B0e,"STRONG",{});var $et=s(Zle);C8o=r($et,"unispeech"),$et.forEach(t),w8o=r(B0e," \u2014 "),MN=n(B0e,"A",{href:!0});var ket=s(MN);A8o=r(ket,"UniSpeechForPreTraining"),ket.forEach(t),y8o=r(B0e," (UniSpeech model)"),B0e.forEach(t),L8o=i(O),E_=n(O,"LI",{});var I0e=s(E_);eie=n(I0e,"STRONG",{});var Set=s(eie);x8o=r(Set,"unispeech-sat"),Set.forEach(t),$8o=r(I0e," \u2014 "),EN=n(I0e,"A",{href:!0});var Ret=s(EN);k8o=r(Ret,"UniSpeechSatForPreTraining"),Ret.forEach(t),S8o=r(I0e," (UniSpeechSat model)"),I0e.forEach(t),R8o=i(O),C_=n(O,"LI",{});var q0e=s(C_);oie=n(q0e,"STRONG",{});var Pet=s(oie);P8o=r(Pet,"visual_bert"),Pet.forEach(t),B8o=r(q0e," \u2014 "),CN=n(q0e,"A",{href:!0});var Bet=s(CN);I8o=r(Bet,"VisualBertForPreTraining"),Bet.forEach(t),q8o=r(q0e," (VisualBert model)"),q0e.forEach(t),N8o=i(O),w_=n(O,"LI",{});var N0e=s(w_);rie=n(N0e,"STRONG",{});var Iet=s(rie);j8o=r(Iet,"vit_mae"),Iet.forEach(t),D8o=r(N0e," \u2014 "),wN=n(N0e,"A",{href:!0});var qet=s(wN);G8o=r(qet,"ViTMAEForPreTraining"),qet.forEach(t),O8o=r(N0e," (ViTMAE model)"),N0e.forEach(t),V8o=i(O),A_=n(O,"LI",{});var j0e=s(A_);tie=n(j0e,"STRONG",{});var Net=s(tie);X8o=r(Net,"wav2vec2"),Net.forEach(t),z8o=r(j0e," \u2014 "),AN=n(j0e,"A",{href:!0});var jet=s(AN);W8o=r(jet,"Wav2Vec2ForPreTraining"),jet.forEach(t),Q8o=r(j0e," (Wav2Vec2 model)"),j0e.forEach(t),H8o=i(O),y_=n(O,"LI",{});var D0e=s(y_);aie=n(D0e,"STRONG",{});var Det=s(aie);U8o=r(Det,"wav2vec2-conformer"),Det.forEach(t),J8o=r(D0e," \u2014 "),yN=n(D0e,"A",{href:!0});var Get=s(yN);Y8o=r(Get,"Wav2Vec2ConformerForPreTraining"),Get.forEach(t),K8o=r(D0e," (Wav2Vec2-Conformer model)"),D0e.forEach(t),Z8o=i(O),L_=n(O,"LI",{});var G0e=s(L_);nie=n(G0e,"STRONG",{});var Oet=s(nie);eMo=r(Oet,"xlm"),Oet.forEach(t),oMo=r(G0e," \u2014 "),LN=n(G0e,"A",{href:!0});var Vet=s(LN);rMo=r(Vet,"XLMWithLMHeadModel"),Vet.forEach(t),tMo=r(G0e," (XLM model)"),G0e.forEach(t),aMo=i(O),x_=n(O,"LI",{});var O0e=s(x_);sie=n(O0e,"STRONG",{});var Xet=s(sie);nMo=r(Xet,"xlm-roberta"),Xet.forEach(t),sMo=r(O0e," \u2014 "),xN=n(O0e,"A",{href:!0});var zet=s(xN);lMo=r(zet,"XLMRobertaForMaskedLM"),zet.forEach(t),iMo=r(O0e," (XLM-RoBERTa model)"),O0e.forEach(t),dMo=i(O),$_=n(O,"LI",{});var V0e=s($_);lie=n(V0e,"STRONG",{});var Wet=s(lie);cMo=r(Wet,"xlm-roberta-xl"),Wet.forEach(t),fMo=r(V0e," \u2014 "),$N=n(V0e,"A",{href:!0});var Qet=s($N);mMo=r(Qet,"XLMRobertaXLForMaskedLM"),Qet.forEach(t),gMo=r(V0e," (XLM-RoBERTa-XL model)"),V0e.forEach(t),hMo=i(O),k_=n(O,"LI",{});var X0e=s(k_);iie=n(X0e,"STRONG",{});var Het=s(iie);pMo=r(Het,"xlnet"),Het.forEach(t),uMo=r(X0e," \u2014 "),kN=n(X0e,"A",{href:!0});var Uet=s(kN);_Mo=r(Uet,"XLNetLMHeadModel"),Uet.forEach(t),bMo=r(X0e," (XLNet model)"),X0e.forEach(t),O.forEach(t),vMo=i(ra),S_=n(ra,"P",{});var z0e=s(S_);FMo=r(z0e,"The model is set in evaluation mode by default using "),die=n(z0e,"CODE",{});var Jet=s(die);TMo=r(Jet,"model.eval()"),Jet.forEach(t),MMo=r(z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=n(z0e,"CODE",{});var Yet=s(cie);EMo=r(Yet,"model.train()"),Yet.forEach(t),z0e.forEach(t),CMo=i(ra),T(R_.$$.fragment,ra),ra.forEach(t),Ds.forEach(t),PIe=i(f),xi=n(f,"H2",{class:!0});var NNe=s(xi);P_=n(NNe,"A",{id:!0,class:!0,href:!0});var Ket=s(P_);fie=n(Ket,"SPAN",{});var Zet=s(fie);T(D0.$$.fragment,Zet),Zet.forEach(t),Ket.forEach(t),wMo=i(NNe),mie=n(NNe,"SPAN",{});var eot=s(mie);AMo=r(eot,"AutoModelForCausalLM"),eot.forEach(t),NNe.forEach(t),BIe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(G0.$$.fragment,Gs),yMo=i(Gs),$i=n(Gs,"P",{});var AK=s($i);LMo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SN=n(AK,"A",{href:!0});var oot=s(SN);xMo=r(oot,"from_pretrained()"),oot.forEach(t),$Mo=r(AK," class method or the "),RN=n(AK,"A",{href:!0});var rot=s(RN);kMo=r(rot,"from_config()"),rot.forEach(t),SMo=r(AK,` class
method.`),AK.forEach(t),RMo=i(Gs),O0=n(Gs,"P",{});var jNe=s(O0);PMo=r(jNe,"This class cannot be instantiated directly using "),gie=n(jNe,"CODE",{});var tot=s(gie);BMo=r(tot,"__init__()"),tot.forEach(t),IMo=r(jNe," (throws an error)."),jNe.forEach(t),qMo=i(Gs),nt=n(Gs,"DIV",{class:!0});var gw=s(nt);T(V0.$$.fragment,gw),NMo=i(gw),hie=n(gw,"P",{});var aot=s(hie);jMo=r(aot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aot.forEach(t),DMo=i(gw),ki=n(gw,"P",{});var yK=s(ki);GMo=r(yK,`Note:
Loading a model from its configuration file does `),pie=n(yK,"STRONG",{});var not=s(pie);OMo=r(not,"not"),not.forEach(t),VMo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PN=n(yK,"A",{href:!0});var sot=s(PN);XMo=r(sot,"from_pretrained()"),sot.forEach(t),zMo=r(yK," to load the model weights."),yK.forEach(t),WMo=i(gw),T(B_.$$.fragment,gw),gw.forEach(t),QMo=i(Gs),Ke=n(Gs,"DIV",{class:!0});var ta=s(Ke);T(X0.$$.fragment,ta),HMo=i(ta),uie=n(ta,"P",{});var lot=s(uie);UMo=r(lot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lot.forEach(t),JMo=i(ta),$a=n(ta,"P",{});var hw=s($a);YMo=r(hw,"The model class to instantiate is selected based on the "),_ie=n(hw,"CODE",{});var iot=s(_ie);KMo=r(iot,"model_type"),iot.forEach(t),ZMo=r(hw,` property of the config object (either
passed as an argument or loaded from `),bie=n(hw,"CODE",{});var dot=s(bie);e4o=r(dot,"pretrained_model_name_or_path"),dot.forEach(t),o4o=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=n(hw,"CODE",{});var cot=s(vie);r4o=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),t4o=r(hw,":"),hw.forEach(t),a4o=i(ta),z=n(ta,"UL",{});var Q=s(z);I_=n(Q,"LI",{});var W0e=s(I_);Fie=n(W0e,"STRONG",{});var fot=s(Fie);n4o=r(fot,"bart"),fot.forEach(t),s4o=r(W0e," \u2014 "),BN=n(W0e,"A",{href:!0});var mot=s(BN);l4o=r(mot,"BartForCausalLM"),mot.forEach(t),i4o=r(W0e," (BART model)"),W0e.forEach(t),d4o=i(Q),q_=n(Q,"LI",{});var Q0e=s(q_);Tie=n(Q0e,"STRONG",{});var got=s(Tie);c4o=r(got,"bert"),got.forEach(t),f4o=r(Q0e," \u2014 "),IN=n(Q0e,"A",{href:!0});var hot=s(IN);m4o=r(hot,"BertLMHeadModel"),hot.forEach(t),g4o=r(Q0e," (BERT model)"),Q0e.forEach(t),h4o=i(Q),N_=n(Q,"LI",{});var H0e=s(N_);Mie=n(H0e,"STRONG",{});var pot=s(Mie);p4o=r(pot,"bert-generation"),pot.forEach(t),u4o=r(H0e," \u2014 "),qN=n(H0e,"A",{href:!0});var uot=s(qN);_4o=r(uot,"BertGenerationDecoder"),uot.forEach(t),b4o=r(H0e," (Bert Generation model)"),H0e.forEach(t),v4o=i(Q),j_=n(Q,"LI",{});var U0e=s(j_);Eie=n(U0e,"STRONG",{});var _ot=s(Eie);F4o=r(_ot,"big_bird"),_ot.forEach(t),T4o=r(U0e," \u2014 "),NN=n(U0e,"A",{href:!0});var bot=s(NN);M4o=r(bot,"BigBirdForCausalLM"),bot.forEach(t),E4o=r(U0e," (BigBird model)"),U0e.forEach(t),C4o=i(Q),D_=n(Q,"LI",{});var J0e=s(D_);Cie=n(J0e,"STRONG",{});var vot=s(Cie);w4o=r(vot,"bigbird_pegasus"),vot.forEach(t),A4o=r(J0e," \u2014 "),jN=n(J0e,"A",{href:!0});var Fot=s(jN);y4o=r(Fot,"BigBirdPegasusForCausalLM"),Fot.forEach(t),L4o=r(J0e," (BigBirdPegasus model)"),J0e.forEach(t),x4o=i(Q),G_=n(Q,"LI",{});var Y0e=s(G_);wie=n(Y0e,"STRONG",{});var Tot=s(wie);$4o=r(Tot,"blenderbot"),Tot.forEach(t),k4o=r(Y0e," \u2014 "),DN=n(Y0e,"A",{href:!0});var Mot=s(DN);S4o=r(Mot,"BlenderbotForCausalLM"),Mot.forEach(t),R4o=r(Y0e," (Blenderbot model)"),Y0e.forEach(t),P4o=i(Q),O_=n(Q,"LI",{});var K0e=s(O_);Aie=n(K0e,"STRONG",{});var Eot=s(Aie);B4o=r(Eot,"blenderbot-small"),Eot.forEach(t),I4o=r(K0e," \u2014 "),GN=n(K0e,"A",{href:!0});var Cot=s(GN);q4o=r(Cot,"BlenderbotSmallForCausalLM"),Cot.forEach(t),N4o=r(K0e," (BlenderbotSmall model)"),K0e.forEach(t),j4o=i(Q),V_=n(Q,"LI",{});var Z0e=s(V_);yie=n(Z0e,"STRONG",{});var wot=s(yie);D4o=r(wot,"camembert"),wot.forEach(t),G4o=r(Z0e," \u2014 "),ON=n(Z0e,"A",{href:!0});var Aot=s(ON);O4o=r(Aot,"CamembertForCausalLM"),Aot.forEach(t),V4o=r(Z0e," (CamemBERT model)"),Z0e.forEach(t),X4o=i(Q),X_=n(Q,"LI",{});var eye=s(X_);Lie=n(eye,"STRONG",{});var yot=s(Lie);z4o=r(yot,"ctrl"),yot.forEach(t),W4o=r(eye," \u2014 "),VN=n(eye,"A",{href:!0});var Lot=s(VN);Q4o=r(Lot,"CTRLLMHeadModel"),Lot.forEach(t),H4o=r(eye," (CTRL model)"),eye.forEach(t),U4o=i(Q),z_=n(Q,"LI",{});var oye=s(z_);xie=n(oye,"STRONG",{});var xot=s(xie);J4o=r(xot,"data2vec-text"),xot.forEach(t),Y4o=r(oye," \u2014 "),XN=n(oye,"A",{href:!0});var $ot=s(XN);K4o=r($ot,"Data2VecTextForCausalLM"),$ot.forEach(t),Z4o=r(oye," (Data2VecText model)"),oye.forEach(t),eEo=i(Q),W_=n(Q,"LI",{});var rye=s(W_);$ie=n(rye,"STRONG",{});var kot=s($ie);oEo=r(kot,"electra"),kot.forEach(t),rEo=r(rye," \u2014 "),zN=n(rye,"A",{href:!0});var Sot=s(zN);tEo=r(Sot,"ElectraForCausalLM"),Sot.forEach(t),aEo=r(rye," (ELECTRA model)"),rye.forEach(t),nEo=i(Q),Q_=n(Q,"LI",{});var tye=s(Q_);kie=n(tye,"STRONG",{});var Rot=s(kie);sEo=r(Rot,"gpt2"),Rot.forEach(t),lEo=r(tye," \u2014 "),WN=n(tye,"A",{href:!0});var Pot=s(WN);iEo=r(Pot,"GPT2LMHeadModel"),Pot.forEach(t),dEo=r(tye," (OpenAI GPT-2 model)"),tye.forEach(t),cEo=i(Q),H_=n(Q,"LI",{});var aye=s(H_);Sie=n(aye,"STRONG",{});var Bot=s(Sie);fEo=r(Bot,"gpt_neo"),Bot.forEach(t),mEo=r(aye," \u2014 "),QN=n(aye,"A",{href:!0});var Iot=s(QN);gEo=r(Iot,"GPTNeoForCausalLM"),Iot.forEach(t),hEo=r(aye," (GPT Neo model)"),aye.forEach(t),pEo=i(Q),U_=n(Q,"LI",{});var nye=s(U_);Rie=n(nye,"STRONG",{});var qot=s(Rie);uEo=r(qot,"gptj"),qot.forEach(t),_Eo=r(nye," \u2014 "),HN=n(nye,"A",{href:!0});var Not=s(HN);bEo=r(Not,"GPTJForCausalLM"),Not.forEach(t),vEo=r(nye," (GPT-J model)"),nye.forEach(t),FEo=i(Q),J_=n(Q,"LI",{});var sye=s(J_);Pie=n(sye,"STRONG",{});var jot=s(Pie);TEo=r(jot,"marian"),jot.forEach(t),MEo=r(sye," \u2014 "),UN=n(sye,"A",{href:!0});var Dot=s(UN);EEo=r(Dot,"MarianForCausalLM"),Dot.forEach(t),CEo=r(sye," (Marian model)"),sye.forEach(t),wEo=i(Q),Y_=n(Q,"LI",{});var lye=s(Y_);Bie=n(lye,"STRONG",{});var Got=s(Bie);AEo=r(Got,"mbart"),Got.forEach(t),yEo=r(lye," \u2014 "),JN=n(lye,"A",{href:!0});var Oot=s(JN);LEo=r(Oot,"MBartForCausalLM"),Oot.forEach(t),xEo=r(lye," (mBART model)"),lye.forEach(t),$Eo=i(Q),K_=n(Q,"LI",{});var iye=s(K_);Iie=n(iye,"STRONG",{});var Vot=s(Iie);kEo=r(Vot,"megatron-bert"),Vot.forEach(t),SEo=r(iye," \u2014 "),YN=n(iye,"A",{href:!0});var Xot=s(YN);REo=r(Xot,"MegatronBertForCausalLM"),Xot.forEach(t),PEo=r(iye," (MegatronBert model)"),iye.forEach(t),BEo=i(Q),Z_=n(Q,"LI",{});var dye=s(Z_);qie=n(dye,"STRONG",{});var zot=s(qie);IEo=r(zot,"openai-gpt"),zot.forEach(t),qEo=r(dye," \u2014 "),KN=n(dye,"A",{href:!0});var Wot=s(KN);NEo=r(Wot,"OpenAIGPTLMHeadModel"),Wot.forEach(t),jEo=r(dye," (OpenAI GPT model)"),dye.forEach(t),DEo=i(Q),e1=n(Q,"LI",{});var cye=s(e1);Nie=n(cye,"STRONG",{});var Qot=s(Nie);GEo=r(Qot,"opt"),Qot.forEach(t),OEo=r(cye," \u2014 "),ZN=n(cye,"A",{href:!0});var Hot=s(ZN);VEo=r(Hot,"OPTForCausalLM"),Hot.forEach(t),XEo=r(cye," (OPT model)"),cye.forEach(t),zEo=i(Q),o1=n(Q,"LI",{});var fye=s(o1);jie=n(fye,"STRONG",{});var Uot=s(jie);WEo=r(Uot,"pegasus"),Uot.forEach(t),QEo=r(fye," \u2014 "),ej=n(fye,"A",{href:!0});var Jot=s(ej);HEo=r(Jot,"PegasusForCausalLM"),Jot.forEach(t),UEo=r(fye," (Pegasus model)"),fye.forEach(t),JEo=i(Q),r1=n(Q,"LI",{});var mye=s(r1);Die=n(mye,"STRONG",{});var Yot=s(Die);YEo=r(Yot,"plbart"),Yot.forEach(t),KEo=r(mye," \u2014 "),oj=n(mye,"A",{href:!0});var Kot=s(oj);ZEo=r(Kot,"PLBartForCausalLM"),Kot.forEach(t),eCo=r(mye," (PLBart model)"),mye.forEach(t),oCo=i(Q),t1=n(Q,"LI",{});var gye=s(t1);Gie=n(gye,"STRONG",{});var Zot=s(Gie);rCo=r(Zot,"prophetnet"),Zot.forEach(t),tCo=r(gye," \u2014 "),rj=n(gye,"A",{href:!0});var ert=s(rj);aCo=r(ert,"ProphetNetForCausalLM"),ert.forEach(t),nCo=r(gye," (ProphetNet model)"),gye.forEach(t),sCo=i(Q),a1=n(Q,"LI",{});var hye=s(a1);Oie=n(hye,"STRONG",{});var ort=s(Oie);lCo=r(ort,"qdqbert"),ort.forEach(t),iCo=r(hye," \u2014 "),tj=n(hye,"A",{href:!0});var rrt=s(tj);dCo=r(rrt,"QDQBertLMHeadModel"),rrt.forEach(t),cCo=r(hye," (QDQBert model)"),hye.forEach(t),fCo=i(Q),n1=n(Q,"LI",{});var pye=s(n1);Vie=n(pye,"STRONG",{});var trt=s(Vie);mCo=r(trt,"reformer"),trt.forEach(t),gCo=r(pye," \u2014 "),aj=n(pye,"A",{href:!0});var art=s(aj);hCo=r(art,"ReformerModelWithLMHead"),art.forEach(t),pCo=r(pye," (Reformer model)"),pye.forEach(t),uCo=i(Q),s1=n(Q,"LI",{});var uye=s(s1);Xie=n(uye,"STRONG",{});var nrt=s(Xie);_Co=r(nrt,"rembert"),nrt.forEach(t),bCo=r(uye," \u2014 "),nj=n(uye,"A",{href:!0});var srt=s(nj);vCo=r(srt,"RemBertForCausalLM"),srt.forEach(t),FCo=r(uye," (RemBERT model)"),uye.forEach(t),TCo=i(Q),l1=n(Q,"LI",{});var _ye=s(l1);zie=n(_ye,"STRONG",{});var lrt=s(zie);MCo=r(lrt,"roberta"),lrt.forEach(t),ECo=r(_ye," \u2014 "),sj=n(_ye,"A",{href:!0});var irt=s(sj);CCo=r(irt,"RobertaForCausalLM"),irt.forEach(t),wCo=r(_ye," (RoBERTa model)"),_ye.forEach(t),ACo=i(Q),i1=n(Q,"LI",{});var bye=s(i1);Wie=n(bye,"STRONG",{});var drt=s(Wie);yCo=r(drt,"roformer"),drt.forEach(t),LCo=r(bye," \u2014 "),lj=n(bye,"A",{href:!0});var crt=s(lj);xCo=r(crt,"RoFormerForCausalLM"),crt.forEach(t),$Co=r(bye," (RoFormer model)"),bye.forEach(t),kCo=i(Q),d1=n(Q,"LI",{});var vye=s(d1);Qie=n(vye,"STRONG",{});var frt=s(Qie);SCo=r(frt,"speech_to_text_2"),frt.forEach(t),RCo=r(vye," \u2014 "),ij=n(vye,"A",{href:!0});var mrt=s(ij);PCo=r(mrt,"Speech2Text2ForCausalLM"),mrt.forEach(t),BCo=r(vye," (Speech2Text2 model)"),vye.forEach(t),ICo=i(Q),c1=n(Q,"LI",{});var Fye=s(c1);Hie=n(Fye,"STRONG",{});var grt=s(Hie);qCo=r(grt,"transfo-xl"),grt.forEach(t),NCo=r(Fye," \u2014 "),dj=n(Fye,"A",{href:!0});var hrt=s(dj);jCo=r(hrt,"TransfoXLLMHeadModel"),hrt.forEach(t),DCo=r(Fye," (Transformer-XL model)"),Fye.forEach(t),GCo=i(Q),f1=n(Q,"LI",{});var Tye=s(f1);Uie=n(Tye,"STRONG",{});var prt=s(Uie);OCo=r(prt,"trocr"),prt.forEach(t),VCo=r(Tye," \u2014 "),cj=n(Tye,"A",{href:!0});var urt=s(cj);XCo=r(urt,"TrOCRForCausalLM"),urt.forEach(t),zCo=r(Tye," (TrOCR model)"),Tye.forEach(t),WCo=i(Q),m1=n(Q,"LI",{});var Mye=s(m1);Jie=n(Mye,"STRONG",{});var _rt=s(Jie);QCo=r(_rt,"xglm"),_rt.forEach(t),HCo=r(Mye," \u2014 "),fj=n(Mye,"A",{href:!0});var brt=s(fj);UCo=r(brt,"XGLMForCausalLM"),brt.forEach(t),JCo=r(Mye," (XGLM model)"),Mye.forEach(t),YCo=i(Q),g1=n(Q,"LI",{});var Eye=s(g1);Yie=n(Eye,"STRONG",{});var vrt=s(Yie);KCo=r(vrt,"xlm"),vrt.forEach(t),ZCo=r(Eye," \u2014 "),mj=n(Eye,"A",{href:!0});var Frt=s(mj);e5o=r(Frt,"XLMWithLMHeadModel"),Frt.forEach(t),o5o=r(Eye," (XLM model)"),Eye.forEach(t),r5o=i(Q),h1=n(Q,"LI",{});var Cye=s(h1);Kie=n(Cye,"STRONG",{});var Trt=s(Kie);t5o=r(Trt,"xlm-prophetnet"),Trt.forEach(t),a5o=r(Cye," \u2014 "),gj=n(Cye,"A",{href:!0});var Mrt=s(gj);n5o=r(Mrt,"XLMProphetNetForCausalLM"),Mrt.forEach(t),s5o=r(Cye," (XLMProphetNet model)"),Cye.forEach(t),l5o=i(Q),p1=n(Q,"LI",{});var wye=s(p1);Zie=n(wye,"STRONG",{});var Ert=s(Zie);i5o=r(Ert,"xlm-roberta"),Ert.forEach(t),d5o=r(wye," \u2014 "),hj=n(wye,"A",{href:!0});var Crt=s(hj);c5o=r(Crt,"XLMRobertaForCausalLM"),Crt.forEach(t),f5o=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),m5o=i(Q),u1=n(Q,"LI",{});var Aye=s(u1);ede=n(Aye,"STRONG",{});var wrt=s(ede);g5o=r(wrt,"xlm-roberta-xl"),wrt.forEach(t),h5o=r(Aye," \u2014 "),pj=n(Aye,"A",{href:!0});var Art=s(pj);p5o=r(Art,"XLMRobertaXLForCausalLM"),Art.forEach(t),u5o=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),_5o=i(Q),_1=n(Q,"LI",{});var yye=s(_1);ode=n(yye,"STRONG",{});var yrt=s(ode);b5o=r(yrt,"xlnet"),yrt.forEach(t),v5o=r(yye," \u2014 "),uj=n(yye,"A",{href:!0});var Lrt=s(uj);F5o=r(Lrt,"XLNetLMHeadModel"),Lrt.forEach(t),T5o=r(yye," (XLNet model)"),yye.forEach(t),Q.forEach(t),M5o=i(ta),b1=n(ta,"P",{});var Lye=s(b1);E5o=r(Lye,"The model is set in evaluation mode by default using "),rde=n(Lye,"CODE",{});var xrt=s(rde);C5o=r(xrt,"model.eval()"),xrt.forEach(t),w5o=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=n(Lye,"CODE",{});var $rt=s(tde);A5o=r($rt,"model.train()"),$rt.forEach(t),Lye.forEach(t),y5o=i(ta),T(v1.$$.fragment,ta),ta.forEach(t),Gs.forEach(t),IIe=i(f),Si=n(f,"H2",{class:!0});var DNe=s(Si);F1=n(DNe,"A",{id:!0,class:!0,href:!0});var krt=s(F1);ade=n(krt,"SPAN",{});var Srt=s(ade);T(z0.$$.fragment,Srt),Srt.forEach(t),krt.forEach(t),L5o=i(DNe),nde=n(DNe,"SPAN",{});var Rrt=s(nde);x5o=r(Rrt,"AutoModelForMaskedLM"),Rrt.forEach(t),DNe.forEach(t),qIe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(W0.$$.fragment,Os),$5o=i(Os),Ri=n(Os,"P",{});var LK=s(Ri);k5o=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_j=n(LK,"A",{href:!0});var Prt=s(_j);S5o=r(Prt,"from_pretrained()"),Prt.forEach(t),R5o=r(LK," class method or the "),bj=n(LK,"A",{href:!0});var Brt=s(bj);P5o=r(Brt,"from_config()"),Brt.forEach(t),B5o=r(LK,` class
method.`),LK.forEach(t),I5o=i(Os),Q0=n(Os,"P",{});var GNe=s(Q0);q5o=r(GNe,"This class cannot be instantiated directly using "),sde=n(GNe,"CODE",{});var Irt=s(sde);N5o=r(Irt,"__init__()"),Irt.forEach(t),j5o=r(GNe," (throws an error)."),GNe.forEach(t),D5o=i(Os),st=n(Os,"DIV",{class:!0});var pw=s(st);T(H0.$$.fragment,pw),G5o=i(pw),lde=n(pw,"P",{});var qrt=s(lde);O5o=r(qrt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qrt.forEach(t),V5o=i(pw),Pi=n(pw,"P",{});var xK=s(Pi);X5o=r(xK,`Note:
Loading a model from its configuration file does `),ide=n(xK,"STRONG",{});var Nrt=s(ide);z5o=r(Nrt,"not"),Nrt.forEach(t),W5o=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vj=n(xK,"A",{href:!0});var jrt=s(vj);Q5o=r(jrt,"from_pretrained()"),jrt.forEach(t),H5o=r(xK," to load the model weights."),xK.forEach(t),U5o=i(pw),T(T1.$$.fragment,pw),pw.forEach(t),J5o=i(Os),Ze=n(Os,"DIV",{class:!0});var aa=s(Ze);T(U0.$$.fragment,aa),Y5o=i(aa),dde=n(aa,"P",{});var Drt=s(dde);K5o=r(Drt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Drt.forEach(t),Z5o=i(aa),ka=n(aa,"P",{});var uw=s(ka);e3o=r(uw,"The model class to instantiate is selected based on the "),cde=n(uw,"CODE",{});var Grt=s(cde);o3o=r(Grt,"model_type"),Grt.forEach(t),r3o=r(uw,` property of the config object (either
passed as an argument or loaded from `),fde=n(uw,"CODE",{});var Ort=s(fde);t3o=r(Ort,"pretrained_model_name_or_path"),Ort.forEach(t),a3o=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=n(uw,"CODE",{});var Vrt=s(mde);n3o=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),s3o=r(uw,":"),uw.forEach(t),l3o=i(aa),W=n(aa,"UL",{});var H=s(W);M1=n(H,"LI",{});var xye=s(M1);gde=n(xye,"STRONG",{});var Xrt=s(gde);i3o=r(Xrt,"albert"),Xrt.forEach(t),d3o=r(xye," \u2014 "),Fj=n(xye,"A",{href:!0});var zrt=s(Fj);c3o=r(zrt,"AlbertForMaskedLM"),zrt.forEach(t),f3o=r(xye," (ALBERT model)"),xye.forEach(t),m3o=i(H),E1=n(H,"LI",{});var $ye=s(E1);hde=n($ye,"STRONG",{});var Wrt=s(hde);g3o=r(Wrt,"bart"),Wrt.forEach(t),h3o=r($ye," \u2014 "),Tj=n($ye,"A",{href:!0});var Qrt=s(Tj);p3o=r(Qrt,"BartForConditionalGeneration"),Qrt.forEach(t),u3o=r($ye," (BART model)"),$ye.forEach(t),_3o=i(H),C1=n(H,"LI",{});var kye=s(C1);pde=n(kye,"STRONG",{});var Hrt=s(pde);b3o=r(Hrt,"bert"),Hrt.forEach(t),v3o=r(kye," \u2014 "),Mj=n(kye,"A",{href:!0});var Urt=s(Mj);F3o=r(Urt,"BertForMaskedLM"),Urt.forEach(t),T3o=r(kye," (BERT model)"),kye.forEach(t),M3o=i(H),w1=n(H,"LI",{});var Sye=s(w1);ude=n(Sye,"STRONG",{});var Jrt=s(ude);E3o=r(Jrt,"big_bird"),Jrt.forEach(t),C3o=r(Sye," \u2014 "),Ej=n(Sye,"A",{href:!0});var Yrt=s(Ej);w3o=r(Yrt,"BigBirdForMaskedLM"),Yrt.forEach(t),A3o=r(Sye," (BigBird model)"),Sye.forEach(t),y3o=i(H),A1=n(H,"LI",{});var Rye=s(A1);_de=n(Rye,"STRONG",{});var Krt=s(_de);L3o=r(Krt,"camembert"),Krt.forEach(t),x3o=r(Rye," \u2014 "),Cj=n(Rye,"A",{href:!0});var Zrt=s(Cj);$3o=r(Zrt,"CamembertForMaskedLM"),Zrt.forEach(t),k3o=r(Rye," (CamemBERT model)"),Rye.forEach(t),S3o=i(H),y1=n(H,"LI",{});var Pye=s(y1);bde=n(Pye,"STRONG",{});var ett=s(bde);R3o=r(ett,"convbert"),ett.forEach(t),P3o=r(Pye," \u2014 "),wj=n(Pye,"A",{href:!0});var ott=s(wj);B3o=r(ott,"ConvBertForMaskedLM"),ott.forEach(t),I3o=r(Pye," (ConvBERT model)"),Pye.forEach(t),q3o=i(H),L1=n(H,"LI",{});var Bye=s(L1);vde=n(Bye,"STRONG",{});var rtt=s(vde);N3o=r(rtt,"data2vec-text"),rtt.forEach(t),j3o=r(Bye," \u2014 "),Aj=n(Bye,"A",{href:!0});var ttt=s(Aj);D3o=r(ttt,"Data2VecTextForMaskedLM"),ttt.forEach(t),G3o=r(Bye," (Data2VecText model)"),Bye.forEach(t),O3o=i(H),x1=n(H,"LI",{});var Iye=s(x1);Fde=n(Iye,"STRONG",{});var att=s(Fde);V3o=r(att,"deberta"),att.forEach(t),X3o=r(Iye," \u2014 "),yj=n(Iye,"A",{href:!0});var ntt=s(yj);z3o=r(ntt,"DebertaForMaskedLM"),ntt.forEach(t),W3o=r(Iye," (DeBERTa model)"),Iye.forEach(t),Q3o=i(H),$1=n(H,"LI",{});var qye=s($1);Tde=n(qye,"STRONG",{});var stt=s(Tde);H3o=r(stt,"deberta-v2"),stt.forEach(t),U3o=r(qye," \u2014 "),Lj=n(qye,"A",{href:!0});var ltt=s(Lj);J3o=r(ltt,"DebertaV2ForMaskedLM"),ltt.forEach(t),Y3o=r(qye," (DeBERTa-v2 model)"),qye.forEach(t),K3o=i(H),k1=n(H,"LI",{});var Nye=s(k1);Mde=n(Nye,"STRONG",{});var itt=s(Mde);Z3o=r(itt,"distilbert"),itt.forEach(t),ewo=r(Nye," \u2014 "),xj=n(Nye,"A",{href:!0});var dtt=s(xj);owo=r(dtt,"DistilBertForMaskedLM"),dtt.forEach(t),rwo=r(Nye," (DistilBERT model)"),Nye.forEach(t),two=i(H),S1=n(H,"LI",{});var jye=s(S1);Ede=n(jye,"STRONG",{});var ctt=s(Ede);awo=r(ctt,"electra"),ctt.forEach(t),nwo=r(jye," \u2014 "),$j=n(jye,"A",{href:!0});var ftt=s($j);swo=r(ftt,"ElectraForMaskedLM"),ftt.forEach(t),lwo=r(jye," (ELECTRA model)"),jye.forEach(t),iwo=i(H),R1=n(H,"LI",{});var Dye=s(R1);Cde=n(Dye,"STRONG",{});var mtt=s(Cde);dwo=r(mtt,"flaubert"),mtt.forEach(t),cwo=r(Dye," \u2014 "),kj=n(Dye,"A",{href:!0});var gtt=s(kj);fwo=r(gtt,"FlaubertWithLMHeadModel"),gtt.forEach(t),mwo=r(Dye," (FlauBERT model)"),Dye.forEach(t),gwo=i(H),P1=n(H,"LI",{});var Gye=s(P1);wde=n(Gye,"STRONG",{});var htt=s(wde);hwo=r(htt,"fnet"),htt.forEach(t),pwo=r(Gye," \u2014 "),Sj=n(Gye,"A",{href:!0});var ptt=s(Sj);uwo=r(ptt,"FNetForMaskedLM"),ptt.forEach(t),_wo=r(Gye," (FNet model)"),Gye.forEach(t),bwo=i(H),B1=n(H,"LI",{});var Oye=s(B1);Ade=n(Oye,"STRONG",{});var utt=s(Ade);vwo=r(utt,"funnel"),utt.forEach(t),Fwo=r(Oye," \u2014 "),Rj=n(Oye,"A",{href:!0});var _tt=s(Rj);Two=r(_tt,"FunnelForMaskedLM"),_tt.forEach(t),Mwo=r(Oye," (Funnel Transformer model)"),Oye.forEach(t),Ewo=i(H),I1=n(H,"LI",{});var Vye=s(I1);yde=n(Vye,"STRONG",{});var btt=s(yde);Cwo=r(btt,"ibert"),btt.forEach(t),wwo=r(Vye," \u2014 "),Pj=n(Vye,"A",{href:!0});var vtt=s(Pj);Awo=r(vtt,"IBertForMaskedLM"),vtt.forEach(t),ywo=r(Vye," (I-BERT model)"),Vye.forEach(t),Lwo=i(H),q1=n(H,"LI",{});var Xye=s(q1);Lde=n(Xye,"STRONG",{});var Ftt=s(Lde);xwo=r(Ftt,"layoutlm"),Ftt.forEach(t),$wo=r(Xye," \u2014 "),Bj=n(Xye,"A",{href:!0});var Ttt=s(Bj);kwo=r(Ttt,"LayoutLMForMaskedLM"),Ttt.forEach(t),Swo=r(Xye," (LayoutLM model)"),Xye.forEach(t),Rwo=i(H),N1=n(H,"LI",{});var zye=s(N1);xde=n(zye,"STRONG",{});var Mtt=s(xde);Pwo=r(Mtt,"longformer"),Mtt.forEach(t),Bwo=r(zye," \u2014 "),Ij=n(zye,"A",{href:!0});var Ett=s(Ij);Iwo=r(Ett,"LongformerForMaskedLM"),Ett.forEach(t),qwo=r(zye," (Longformer model)"),zye.forEach(t),Nwo=i(H),j1=n(H,"LI",{});var Wye=s(j1);$de=n(Wye,"STRONG",{});var Ctt=s($de);jwo=r(Ctt,"mbart"),Ctt.forEach(t),Dwo=r(Wye," \u2014 "),qj=n(Wye,"A",{href:!0});var wtt=s(qj);Gwo=r(wtt,"MBartForConditionalGeneration"),wtt.forEach(t),Owo=r(Wye," (mBART model)"),Wye.forEach(t),Vwo=i(H),D1=n(H,"LI",{});var Qye=s(D1);kde=n(Qye,"STRONG",{});var Att=s(kde);Xwo=r(Att,"megatron-bert"),Att.forEach(t),zwo=r(Qye," \u2014 "),Nj=n(Qye,"A",{href:!0});var ytt=s(Nj);Wwo=r(ytt,"MegatronBertForMaskedLM"),ytt.forEach(t),Qwo=r(Qye," (MegatronBert model)"),Qye.forEach(t),Hwo=i(H),G1=n(H,"LI",{});var Hye=s(G1);Sde=n(Hye,"STRONG",{});var Ltt=s(Sde);Uwo=r(Ltt,"mobilebert"),Ltt.forEach(t),Jwo=r(Hye," \u2014 "),jj=n(Hye,"A",{href:!0});var xtt=s(jj);Ywo=r(xtt,"MobileBertForMaskedLM"),xtt.forEach(t),Kwo=r(Hye," (MobileBERT model)"),Hye.forEach(t),Zwo=i(H),O1=n(H,"LI",{});var Uye=s(O1);Rde=n(Uye,"STRONG",{});var $tt=s(Rde);eAo=r($tt,"mpnet"),$tt.forEach(t),oAo=r(Uye," \u2014 "),Dj=n(Uye,"A",{href:!0});var ktt=s(Dj);rAo=r(ktt,"MPNetForMaskedLM"),ktt.forEach(t),tAo=r(Uye," (MPNet model)"),Uye.forEach(t),aAo=i(H),V1=n(H,"LI",{});var Jye=s(V1);Pde=n(Jye,"STRONG",{});var Stt=s(Pde);nAo=r(Stt,"nystromformer"),Stt.forEach(t),sAo=r(Jye," \u2014 "),Gj=n(Jye,"A",{href:!0});var Rtt=s(Gj);lAo=r(Rtt,"NystromformerForMaskedLM"),Rtt.forEach(t),iAo=r(Jye," (Nystromformer model)"),Jye.forEach(t),dAo=i(H),X1=n(H,"LI",{});var Yye=s(X1);Bde=n(Yye,"STRONG",{});var Ptt=s(Bde);cAo=r(Ptt,"perceiver"),Ptt.forEach(t),fAo=r(Yye," \u2014 "),Oj=n(Yye,"A",{href:!0});var Btt=s(Oj);mAo=r(Btt,"PerceiverForMaskedLM"),Btt.forEach(t),gAo=r(Yye," (Perceiver model)"),Yye.forEach(t),hAo=i(H),z1=n(H,"LI",{});var Kye=s(z1);Ide=n(Kye,"STRONG",{});var Itt=s(Ide);pAo=r(Itt,"qdqbert"),Itt.forEach(t),uAo=r(Kye," \u2014 "),Vj=n(Kye,"A",{href:!0});var qtt=s(Vj);_Ao=r(qtt,"QDQBertForMaskedLM"),qtt.forEach(t),bAo=r(Kye," (QDQBert model)"),Kye.forEach(t),vAo=i(H),W1=n(H,"LI",{});var Zye=s(W1);qde=n(Zye,"STRONG",{});var Ntt=s(qde);FAo=r(Ntt,"reformer"),Ntt.forEach(t),TAo=r(Zye," \u2014 "),Xj=n(Zye,"A",{href:!0});var jtt=s(Xj);MAo=r(jtt,"ReformerForMaskedLM"),jtt.forEach(t),EAo=r(Zye," (Reformer model)"),Zye.forEach(t),CAo=i(H),Q1=n(H,"LI",{});var eLe=s(Q1);Nde=n(eLe,"STRONG",{});var Dtt=s(Nde);wAo=r(Dtt,"rembert"),Dtt.forEach(t),AAo=r(eLe," \u2014 "),zj=n(eLe,"A",{href:!0});var Gtt=s(zj);yAo=r(Gtt,"RemBertForMaskedLM"),Gtt.forEach(t),LAo=r(eLe," (RemBERT model)"),eLe.forEach(t),xAo=i(H),H1=n(H,"LI",{});var oLe=s(H1);jde=n(oLe,"STRONG",{});var Ott=s(jde);$Ao=r(Ott,"roberta"),Ott.forEach(t),kAo=r(oLe," \u2014 "),Wj=n(oLe,"A",{href:!0});var Vtt=s(Wj);SAo=r(Vtt,"RobertaForMaskedLM"),Vtt.forEach(t),RAo=r(oLe," (RoBERTa model)"),oLe.forEach(t),PAo=i(H),U1=n(H,"LI",{});var rLe=s(U1);Dde=n(rLe,"STRONG",{});var Xtt=s(Dde);BAo=r(Xtt,"roformer"),Xtt.forEach(t),IAo=r(rLe," \u2014 "),Qj=n(rLe,"A",{href:!0});var ztt=s(Qj);qAo=r(ztt,"RoFormerForMaskedLM"),ztt.forEach(t),NAo=r(rLe," (RoFormer model)"),rLe.forEach(t),jAo=i(H),J1=n(H,"LI",{});var tLe=s(J1);Gde=n(tLe,"STRONG",{});var Wtt=s(Gde);DAo=r(Wtt,"squeezebert"),Wtt.forEach(t),GAo=r(tLe," \u2014 "),Hj=n(tLe,"A",{href:!0});var Qtt=s(Hj);OAo=r(Qtt,"SqueezeBertForMaskedLM"),Qtt.forEach(t),VAo=r(tLe," (SqueezeBERT model)"),tLe.forEach(t),XAo=i(H),Y1=n(H,"LI",{});var aLe=s(Y1);Ode=n(aLe,"STRONG",{});var Htt=s(Ode);zAo=r(Htt,"tapas"),Htt.forEach(t),WAo=r(aLe," \u2014 "),Uj=n(aLe,"A",{href:!0});var Utt=s(Uj);QAo=r(Utt,"TapasForMaskedLM"),Utt.forEach(t),HAo=r(aLe," (TAPAS model)"),aLe.forEach(t),UAo=i(H),K1=n(H,"LI",{});var nLe=s(K1);Vde=n(nLe,"STRONG",{});var Jtt=s(Vde);JAo=r(Jtt,"wav2vec2"),Jtt.forEach(t),YAo=r(nLe," \u2014 "),Xde=n(nLe,"CODE",{});var Ytt=s(Xde);KAo=r(Ytt,"Wav2Vec2ForMaskedLM"),Ytt.forEach(t),ZAo=r(nLe," (Wav2Vec2 model)"),nLe.forEach(t),e0o=i(H),Z1=n(H,"LI",{});var sLe=s(Z1);zde=n(sLe,"STRONG",{});var Ktt=s(zde);o0o=r(Ktt,"xlm"),Ktt.forEach(t),r0o=r(sLe," \u2014 "),Jj=n(sLe,"A",{href:!0});var Ztt=s(Jj);t0o=r(Ztt,"XLMWithLMHeadModel"),Ztt.forEach(t),a0o=r(sLe," (XLM model)"),sLe.forEach(t),n0o=i(H),e2=n(H,"LI",{});var lLe=s(e2);Wde=n(lLe,"STRONG",{});var eat=s(Wde);s0o=r(eat,"xlm-roberta"),eat.forEach(t),l0o=r(lLe," \u2014 "),Yj=n(lLe,"A",{href:!0});var oat=s(Yj);i0o=r(oat,"XLMRobertaForMaskedLM"),oat.forEach(t),d0o=r(lLe," (XLM-RoBERTa model)"),lLe.forEach(t),c0o=i(H),o2=n(H,"LI",{});var iLe=s(o2);Qde=n(iLe,"STRONG",{});var rat=s(Qde);f0o=r(rat,"xlm-roberta-xl"),rat.forEach(t),m0o=r(iLe," \u2014 "),Kj=n(iLe,"A",{href:!0});var tat=s(Kj);g0o=r(tat,"XLMRobertaXLForMaskedLM"),tat.forEach(t),h0o=r(iLe," (XLM-RoBERTa-XL model)"),iLe.forEach(t),p0o=i(H),r2=n(H,"LI",{});var dLe=s(r2);Hde=n(dLe,"STRONG",{});var aat=s(Hde);u0o=r(aat,"yoso"),aat.forEach(t),_0o=r(dLe," \u2014 "),Zj=n(dLe,"A",{href:!0});var nat=s(Zj);b0o=r(nat,"YosoForMaskedLM"),nat.forEach(t),v0o=r(dLe," (YOSO model)"),dLe.forEach(t),H.forEach(t),F0o=i(aa),t2=n(aa,"P",{});var cLe=s(t2);T0o=r(cLe,"The model is set in evaluation mode by default using "),Ude=n(cLe,"CODE",{});var sat=s(Ude);M0o=r(sat,"model.eval()"),sat.forEach(t),E0o=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=n(cLe,"CODE",{});var lat=s(Jde);C0o=r(lat,"model.train()"),lat.forEach(t),cLe.forEach(t),w0o=i(aa),T(a2.$$.fragment,aa),aa.forEach(t),Os.forEach(t),NIe=i(f),Bi=n(f,"H2",{class:!0});var ONe=s(Bi);n2=n(ONe,"A",{id:!0,class:!0,href:!0});var iat=s(n2);Yde=n(iat,"SPAN",{});var dat=s(Yde);T(J0.$$.fragment,dat),dat.forEach(t),iat.forEach(t),A0o=i(ONe),Kde=n(ONe,"SPAN",{});var cat=s(Kde);y0o=r(cat,"AutoModelForSeq2SeqLM"),cat.forEach(t),ONe.forEach(t),jIe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(Y0.$$.fragment,Vs),L0o=i(Vs),Ii=n(Vs,"P",{});var $K=s(Ii);x0o=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eD=n($K,"A",{href:!0});var fat=s(eD);$0o=r(fat,"from_pretrained()"),fat.forEach(t),k0o=r($K," class method or the "),oD=n($K,"A",{href:!0});var mat=s(oD);S0o=r(mat,"from_config()"),mat.forEach(t),R0o=r($K,` class
method.`),$K.forEach(t),P0o=i(Vs),K0=n(Vs,"P",{});var VNe=s(K0);B0o=r(VNe,"This class cannot be instantiated directly using "),Zde=n(VNe,"CODE",{});var gat=s(Zde);I0o=r(gat,"__init__()"),gat.forEach(t),q0o=r(VNe," (throws an error)."),VNe.forEach(t),N0o=i(Vs),lt=n(Vs,"DIV",{class:!0});var _w=s(lt);T(Z0.$$.fragment,_w),j0o=i(_w),ece=n(_w,"P",{});var hat=s(ece);D0o=r(hat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hat.forEach(t),G0o=i(_w),qi=n(_w,"P",{});var kK=s(qi);O0o=r(kK,`Note:
Loading a model from its configuration file does `),oce=n(kK,"STRONG",{});var pat=s(oce);V0o=r(pat,"not"),pat.forEach(t),X0o=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(kK,"A",{href:!0});var uat=s(rD);z0o=r(uat,"from_pretrained()"),uat.forEach(t),W0o=r(kK," to load the model weights."),kK.forEach(t),Q0o=i(_w),T(s2.$$.fragment,_w),_w.forEach(t),H0o=i(Vs),eo=n(Vs,"DIV",{class:!0});var na=s(eo);T(ey.$$.fragment,na),U0o=i(na),rce=n(na,"P",{});var _at=s(rce);J0o=r(_at,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_at.forEach(t),Y0o=i(na),Sa=n(na,"P",{});var bw=s(Sa);K0o=r(bw,"The model class to instantiate is selected based on the "),tce=n(bw,"CODE",{});var bat=s(tce);Z0o=r(bat,"model_type"),bat.forEach(t),eyo=r(bw,` property of the config object (either
passed as an argument or loaded from `),ace=n(bw,"CODE",{});var vat=s(ace);oyo=r(vat,"pretrained_model_name_or_path"),vat.forEach(t),ryo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=n(bw,"CODE",{});var Fat=s(nce);tyo=r(Fat,"pretrained_model_name_or_path"),Fat.forEach(t),ayo=r(bw,":"),bw.forEach(t),nyo=i(na),ue=n(na,"UL",{});var ve=s(ue);l2=n(ve,"LI",{});var fLe=s(l2);sce=n(fLe,"STRONG",{});var Tat=s(sce);syo=r(Tat,"bart"),Tat.forEach(t),lyo=r(fLe," \u2014 "),tD=n(fLe,"A",{href:!0});var Mat=s(tD);iyo=r(Mat,"BartForConditionalGeneration"),Mat.forEach(t),dyo=r(fLe," (BART model)"),fLe.forEach(t),cyo=i(ve),i2=n(ve,"LI",{});var mLe=s(i2);lce=n(mLe,"STRONG",{});var Eat=s(lce);fyo=r(Eat,"bigbird_pegasus"),Eat.forEach(t),myo=r(mLe," \u2014 "),aD=n(mLe,"A",{href:!0});var Cat=s(aD);gyo=r(Cat,"BigBirdPegasusForConditionalGeneration"),Cat.forEach(t),hyo=r(mLe," (BigBirdPegasus model)"),mLe.forEach(t),pyo=i(ve),d2=n(ve,"LI",{});var gLe=s(d2);ice=n(gLe,"STRONG",{});var wat=s(ice);uyo=r(wat,"blenderbot"),wat.forEach(t),_yo=r(gLe," \u2014 "),nD=n(gLe,"A",{href:!0});var Aat=s(nD);byo=r(Aat,"BlenderbotForConditionalGeneration"),Aat.forEach(t),vyo=r(gLe," (Blenderbot model)"),gLe.forEach(t),Fyo=i(ve),c2=n(ve,"LI",{});var hLe=s(c2);dce=n(hLe,"STRONG",{});var yat=s(dce);Tyo=r(yat,"blenderbot-small"),yat.forEach(t),Myo=r(hLe," \u2014 "),sD=n(hLe,"A",{href:!0});var Lat=s(sD);Eyo=r(Lat,"BlenderbotSmallForConditionalGeneration"),Lat.forEach(t),Cyo=r(hLe," (BlenderbotSmall model)"),hLe.forEach(t),wyo=i(ve),f2=n(ve,"LI",{});var pLe=s(f2);cce=n(pLe,"STRONG",{});var xat=s(cce);Ayo=r(xat,"encoder-decoder"),xat.forEach(t),yyo=r(pLe," \u2014 "),lD=n(pLe,"A",{href:!0});var $at=s(lD);Lyo=r($at,"EncoderDecoderModel"),$at.forEach(t),xyo=r(pLe," (Encoder decoder model)"),pLe.forEach(t),$yo=i(ve),m2=n(ve,"LI",{});var uLe=s(m2);fce=n(uLe,"STRONG",{});var kat=s(fce);kyo=r(kat,"fsmt"),kat.forEach(t),Syo=r(uLe," \u2014 "),iD=n(uLe,"A",{href:!0});var Sat=s(iD);Ryo=r(Sat,"FSMTForConditionalGeneration"),Sat.forEach(t),Pyo=r(uLe," (FairSeq Machine-Translation model)"),uLe.forEach(t),Byo=i(ve),g2=n(ve,"LI",{});var _Le=s(g2);mce=n(_Le,"STRONG",{});var Rat=s(mce);Iyo=r(Rat,"led"),Rat.forEach(t),qyo=r(_Le," \u2014 "),dD=n(_Le,"A",{href:!0});var Pat=s(dD);Nyo=r(Pat,"LEDForConditionalGeneration"),Pat.forEach(t),jyo=r(_Le," (LED model)"),_Le.forEach(t),Dyo=i(ve),h2=n(ve,"LI",{});var bLe=s(h2);gce=n(bLe,"STRONG",{});var Bat=s(gce);Gyo=r(Bat,"m2m_100"),Bat.forEach(t),Oyo=r(bLe," \u2014 "),cD=n(bLe,"A",{href:!0});var Iat=s(cD);Vyo=r(Iat,"M2M100ForConditionalGeneration"),Iat.forEach(t),Xyo=r(bLe," (M2M100 model)"),bLe.forEach(t),zyo=i(ve),p2=n(ve,"LI",{});var vLe=s(p2);hce=n(vLe,"STRONG",{});var qat=s(hce);Wyo=r(qat,"marian"),qat.forEach(t),Qyo=r(vLe," \u2014 "),fD=n(vLe,"A",{href:!0});var Nat=s(fD);Hyo=r(Nat,"MarianMTModel"),Nat.forEach(t),Uyo=r(vLe," (Marian model)"),vLe.forEach(t),Jyo=i(ve),u2=n(ve,"LI",{});var FLe=s(u2);pce=n(FLe,"STRONG",{});var jat=s(pce);Yyo=r(jat,"mbart"),jat.forEach(t),Kyo=r(FLe," \u2014 "),mD=n(FLe,"A",{href:!0});var Dat=s(mD);Zyo=r(Dat,"MBartForConditionalGeneration"),Dat.forEach(t),eLo=r(FLe," (mBART model)"),FLe.forEach(t),oLo=i(ve),_2=n(ve,"LI",{});var TLe=s(_2);uce=n(TLe,"STRONG",{});var Gat=s(uce);rLo=r(Gat,"mt5"),Gat.forEach(t),tLo=r(TLe," \u2014 "),gD=n(TLe,"A",{href:!0});var Oat=s(gD);aLo=r(Oat,"MT5ForConditionalGeneration"),Oat.forEach(t),nLo=r(TLe," (mT5 model)"),TLe.forEach(t),sLo=i(ve),b2=n(ve,"LI",{});var MLe=s(b2);_ce=n(MLe,"STRONG",{});var Vat=s(_ce);lLo=r(Vat,"pegasus"),Vat.forEach(t),iLo=r(MLe," \u2014 "),hD=n(MLe,"A",{href:!0});var Xat=s(hD);dLo=r(Xat,"PegasusForConditionalGeneration"),Xat.forEach(t),cLo=r(MLe," (Pegasus model)"),MLe.forEach(t),fLo=i(ve),v2=n(ve,"LI",{});var ELe=s(v2);bce=n(ELe,"STRONG",{});var zat=s(bce);mLo=r(zat,"plbart"),zat.forEach(t),gLo=r(ELe," \u2014 "),pD=n(ELe,"A",{href:!0});var Wat=s(pD);hLo=r(Wat,"PLBartForConditionalGeneration"),Wat.forEach(t),pLo=r(ELe," (PLBart model)"),ELe.forEach(t),uLo=i(ve),F2=n(ve,"LI",{});var CLe=s(F2);vce=n(CLe,"STRONG",{});var Qat=s(vce);_Lo=r(Qat,"prophetnet"),Qat.forEach(t),bLo=r(CLe," \u2014 "),uD=n(CLe,"A",{href:!0});var Hat=s(uD);vLo=r(Hat,"ProphetNetForConditionalGeneration"),Hat.forEach(t),FLo=r(CLe," (ProphetNet model)"),CLe.forEach(t),TLo=i(ve),T2=n(ve,"LI",{});var wLe=s(T2);Fce=n(wLe,"STRONG",{});var Uat=s(Fce);MLo=r(Uat,"t5"),Uat.forEach(t),ELo=r(wLe," \u2014 "),_D=n(wLe,"A",{href:!0});var Jat=s(_D);CLo=r(Jat,"T5ForConditionalGeneration"),Jat.forEach(t),wLo=r(wLe," (T5 model)"),wLe.forEach(t),ALo=i(ve),M2=n(ve,"LI",{});var ALe=s(M2);Tce=n(ALe,"STRONG",{});var Yat=s(Tce);yLo=r(Yat,"xlm-prophetnet"),Yat.forEach(t),LLo=r(ALe," \u2014 "),bD=n(ALe,"A",{href:!0});var Kat=s(bD);xLo=r(Kat,"XLMProphetNetForConditionalGeneration"),Kat.forEach(t),$Lo=r(ALe," (XLMProphetNet model)"),ALe.forEach(t),ve.forEach(t),kLo=i(na),E2=n(na,"P",{});var yLe=s(E2);SLo=r(yLe,"The model is set in evaluation mode by default using "),Mce=n(yLe,"CODE",{});var Zat=s(Mce);RLo=r(Zat,"model.eval()"),Zat.forEach(t),PLo=r(yLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(yLe,"CODE",{});var ent=s(Ece);BLo=r(ent,"model.train()"),ent.forEach(t),yLe.forEach(t),ILo=i(na),T(C2.$$.fragment,na),na.forEach(t),Vs.forEach(t),DIe=i(f),Ni=n(f,"H2",{class:!0});var XNe=s(Ni);w2=n(XNe,"A",{id:!0,class:!0,href:!0});var ont=s(w2);Cce=n(ont,"SPAN",{});var rnt=s(Cce);T(oy.$$.fragment,rnt),rnt.forEach(t),ont.forEach(t),qLo=i(XNe),wce=n(XNe,"SPAN",{});var tnt=s(wce);NLo=r(tnt,"AutoModelForSequenceClassification"),tnt.forEach(t),XNe.forEach(t),GIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(ry.$$.fragment,Xs),jLo=i(Xs),ji=n(Xs,"P",{});var SK=s(ji);DLo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vD=n(SK,"A",{href:!0});var ant=s(vD);GLo=r(ant,"from_pretrained()"),ant.forEach(t),OLo=r(SK," class method or the "),FD=n(SK,"A",{href:!0});var nnt=s(FD);VLo=r(nnt,"from_config()"),nnt.forEach(t),XLo=r(SK,` class
method.`),SK.forEach(t),zLo=i(Xs),ty=n(Xs,"P",{});var zNe=s(ty);WLo=r(zNe,"This class cannot be instantiated directly using "),Ace=n(zNe,"CODE",{});var snt=s(Ace);QLo=r(snt,"__init__()"),snt.forEach(t),HLo=r(zNe," (throws an error)."),zNe.forEach(t),ULo=i(Xs),it=n(Xs,"DIV",{class:!0});var vw=s(it);T(ay.$$.fragment,vw),JLo=i(vw),yce=n(vw,"P",{});var lnt=s(yce);YLo=r(lnt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lnt.forEach(t),KLo=i(vw),Di=n(vw,"P",{});var RK=s(Di);ZLo=r(RK,`Note:
Loading a model from its configuration file does `),Lce=n(RK,"STRONG",{});var int=s(Lce);exo=r(int,"not"),int.forEach(t),oxo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TD=n(RK,"A",{href:!0});var dnt=s(TD);rxo=r(dnt,"from_pretrained()"),dnt.forEach(t),txo=r(RK," to load the model weights."),RK.forEach(t),axo=i(vw),T(A2.$$.fragment,vw),vw.forEach(t),nxo=i(Xs),oo=n(Xs,"DIV",{class:!0});var sa=s(oo);T(ny.$$.fragment,sa),sxo=i(sa),xce=n(sa,"P",{});var cnt=s(xce);lxo=r(cnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cnt.forEach(t),ixo=i(sa),Ra=n(sa,"P",{});var Fw=s(Ra);dxo=r(Fw,"The model class to instantiate is selected based on the "),$ce=n(Fw,"CODE",{});var fnt=s($ce);cxo=r(fnt,"model_type"),fnt.forEach(t),fxo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),kce=n(Fw,"CODE",{});var mnt=s(kce);mxo=r(mnt,"pretrained_model_name_or_path"),mnt.forEach(t),gxo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(Fw,"CODE",{});var gnt=s(Sce);hxo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),pxo=r(Fw,":"),Fw.forEach(t),uxo=i(sa),q=n(sa,"UL",{});var j=s(q);y2=n(j,"LI",{});var LLe=s(y2);Rce=n(LLe,"STRONG",{});var hnt=s(Rce);_xo=r(hnt,"albert"),hnt.forEach(t),bxo=r(LLe," \u2014 "),MD=n(LLe,"A",{href:!0});var pnt=s(MD);vxo=r(pnt,"AlbertForSequenceClassification"),pnt.forEach(t),Fxo=r(LLe," (ALBERT model)"),LLe.forEach(t),Txo=i(j),L2=n(j,"LI",{});var xLe=s(L2);Pce=n(xLe,"STRONG",{});var unt=s(Pce);Mxo=r(unt,"bart"),unt.forEach(t),Exo=r(xLe," \u2014 "),ED=n(xLe,"A",{href:!0});var _nt=s(ED);Cxo=r(_nt,"BartForSequenceClassification"),_nt.forEach(t),wxo=r(xLe," (BART model)"),xLe.forEach(t),Axo=i(j),x2=n(j,"LI",{});var $Le=s(x2);Bce=n($Le,"STRONG",{});var bnt=s(Bce);yxo=r(bnt,"bert"),bnt.forEach(t),Lxo=r($Le," \u2014 "),CD=n($Le,"A",{href:!0});var vnt=s(CD);xxo=r(vnt,"BertForSequenceClassification"),vnt.forEach(t),$xo=r($Le," (BERT model)"),$Le.forEach(t),kxo=i(j),$2=n(j,"LI",{});var kLe=s($2);Ice=n(kLe,"STRONG",{});var Fnt=s(Ice);Sxo=r(Fnt,"big_bird"),Fnt.forEach(t),Rxo=r(kLe," \u2014 "),wD=n(kLe,"A",{href:!0});var Tnt=s(wD);Pxo=r(Tnt,"BigBirdForSequenceClassification"),Tnt.forEach(t),Bxo=r(kLe," (BigBird model)"),kLe.forEach(t),Ixo=i(j),k2=n(j,"LI",{});var SLe=s(k2);qce=n(SLe,"STRONG",{});var Mnt=s(qce);qxo=r(Mnt,"bigbird_pegasus"),Mnt.forEach(t),Nxo=r(SLe," \u2014 "),AD=n(SLe,"A",{href:!0});var Ent=s(AD);jxo=r(Ent,"BigBirdPegasusForSequenceClassification"),Ent.forEach(t),Dxo=r(SLe," (BigBirdPegasus model)"),SLe.forEach(t),Gxo=i(j),S2=n(j,"LI",{});var RLe=s(S2);Nce=n(RLe,"STRONG",{});var Cnt=s(Nce);Oxo=r(Cnt,"camembert"),Cnt.forEach(t),Vxo=r(RLe," \u2014 "),yD=n(RLe,"A",{href:!0});var wnt=s(yD);Xxo=r(wnt,"CamembertForSequenceClassification"),wnt.forEach(t),zxo=r(RLe," (CamemBERT model)"),RLe.forEach(t),Wxo=i(j),R2=n(j,"LI",{});var PLe=s(R2);jce=n(PLe,"STRONG",{});var Ant=s(jce);Qxo=r(Ant,"canine"),Ant.forEach(t),Hxo=r(PLe," \u2014 "),LD=n(PLe,"A",{href:!0});var ynt=s(LD);Uxo=r(ynt,"CanineForSequenceClassification"),ynt.forEach(t),Jxo=r(PLe," (Canine model)"),PLe.forEach(t),Yxo=i(j),P2=n(j,"LI",{});var BLe=s(P2);Dce=n(BLe,"STRONG",{});var Lnt=s(Dce);Kxo=r(Lnt,"convbert"),Lnt.forEach(t),Zxo=r(BLe," \u2014 "),xD=n(BLe,"A",{href:!0});var xnt=s(xD);e9o=r(xnt,"ConvBertForSequenceClassification"),xnt.forEach(t),o9o=r(BLe," (ConvBERT model)"),BLe.forEach(t),r9o=i(j),B2=n(j,"LI",{});var ILe=s(B2);Gce=n(ILe,"STRONG",{});var $nt=s(Gce);t9o=r($nt,"ctrl"),$nt.forEach(t),a9o=r(ILe," \u2014 "),$D=n(ILe,"A",{href:!0});var knt=s($D);n9o=r(knt,"CTRLForSequenceClassification"),knt.forEach(t),s9o=r(ILe," (CTRL model)"),ILe.forEach(t),l9o=i(j),I2=n(j,"LI",{});var qLe=s(I2);Oce=n(qLe,"STRONG",{});var Snt=s(Oce);i9o=r(Snt,"data2vec-text"),Snt.forEach(t),d9o=r(qLe," \u2014 "),kD=n(qLe,"A",{href:!0});var Rnt=s(kD);c9o=r(Rnt,"Data2VecTextForSequenceClassification"),Rnt.forEach(t),f9o=r(qLe," (Data2VecText model)"),qLe.forEach(t),m9o=i(j),q2=n(j,"LI",{});var NLe=s(q2);Vce=n(NLe,"STRONG",{});var Pnt=s(Vce);g9o=r(Pnt,"deberta"),Pnt.forEach(t),h9o=r(NLe," \u2014 "),SD=n(NLe,"A",{href:!0});var Bnt=s(SD);p9o=r(Bnt,"DebertaForSequenceClassification"),Bnt.forEach(t),u9o=r(NLe," (DeBERTa model)"),NLe.forEach(t),_9o=i(j),N2=n(j,"LI",{});var jLe=s(N2);Xce=n(jLe,"STRONG",{});var Int=s(Xce);b9o=r(Int,"deberta-v2"),Int.forEach(t),v9o=r(jLe," \u2014 "),RD=n(jLe,"A",{href:!0});var qnt=s(RD);F9o=r(qnt,"DebertaV2ForSequenceClassification"),qnt.forEach(t),T9o=r(jLe," (DeBERTa-v2 model)"),jLe.forEach(t),M9o=i(j),j2=n(j,"LI",{});var DLe=s(j2);zce=n(DLe,"STRONG",{});var Nnt=s(zce);E9o=r(Nnt,"distilbert"),Nnt.forEach(t),C9o=r(DLe," \u2014 "),PD=n(DLe,"A",{href:!0});var jnt=s(PD);w9o=r(jnt,"DistilBertForSequenceClassification"),jnt.forEach(t),A9o=r(DLe," (DistilBERT model)"),DLe.forEach(t),y9o=i(j),D2=n(j,"LI",{});var GLe=s(D2);Wce=n(GLe,"STRONG",{});var Dnt=s(Wce);L9o=r(Dnt,"electra"),Dnt.forEach(t),x9o=r(GLe," \u2014 "),BD=n(GLe,"A",{href:!0});var Gnt=s(BD);$9o=r(Gnt,"ElectraForSequenceClassification"),Gnt.forEach(t),k9o=r(GLe," (ELECTRA model)"),GLe.forEach(t),S9o=i(j),G2=n(j,"LI",{});var OLe=s(G2);Qce=n(OLe,"STRONG",{});var Ont=s(Qce);R9o=r(Ont,"flaubert"),Ont.forEach(t),P9o=r(OLe," \u2014 "),ID=n(OLe,"A",{href:!0});var Vnt=s(ID);B9o=r(Vnt,"FlaubertForSequenceClassification"),Vnt.forEach(t),I9o=r(OLe," (FlauBERT model)"),OLe.forEach(t),q9o=i(j),O2=n(j,"LI",{});var VLe=s(O2);Hce=n(VLe,"STRONG",{});var Xnt=s(Hce);N9o=r(Xnt,"fnet"),Xnt.forEach(t),j9o=r(VLe," \u2014 "),qD=n(VLe,"A",{href:!0});var znt=s(qD);D9o=r(znt,"FNetForSequenceClassification"),znt.forEach(t),G9o=r(VLe," (FNet model)"),VLe.forEach(t),O9o=i(j),V2=n(j,"LI",{});var XLe=s(V2);Uce=n(XLe,"STRONG",{});var Wnt=s(Uce);V9o=r(Wnt,"funnel"),Wnt.forEach(t),X9o=r(XLe," \u2014 "),ND=n(XLe,"A",{href:!0});var Qnt=s(ND);z9o=r(Qnt,"FunnelForSequenceClassification"),Qnt.forEach(t),W9o=r(XLe," (Funnel Transformer model)"),XLe.forEach(t),Q9o=i(j),X2=n(j,"LI",{});var zLe=s(X2);Jce=n(zLe,"STRONG",{});var Hnt=s(Jce);H9o=r(Hnt,"gpt2"),Hnt.forEach(t),U9o=r(zLe," \u2014 "),jD=n(zLe,"A",{href:!0});var Unt=s(jD);J9o=r(Unt,"GPT2ForSequenceClassification"),Unt.forEach(t),Y9o=r(zLe," (OpenAI GPT-2 model)"),zLe.forEach(t),K9o=i(j),z2=n(j,"LI",{});var WLe=s(z2);Yce=n(WLe,"STRONG",{});var Jnt=s(Yce);Z9o=r(Jnt,"gpt_neo"),Jnt.forEach(t),e7o=r(WLe," \u2014 "),DD=n(WLe,"A",{href:!0});var Ynt=s(DD);o7o=r(Ynt,"GPTNeoForSequenceClassification"),Ynt.forEach(t),r7o=r(WLe," (GPT Neo model)"),WLe.forEach(t),t7o=i(j),W2=n(j,"LI",{});var QLe=s(W2);Kce=n(QLe,"STRONG",{});var Knt=s(Kce);a7o=r(Knt,"gptj"),Knt.forEach(t),n7o=r(QLe," \u2014 "),GD=n(QLe,"A",{href:!0});var Znt=s(GD);s7o=r(Znt,"GPTJForSequenceClassification"),Znt.forEach(t),l7o=r(QLe," (GPT-J model)"),QLe.forEach(t),i7o=i(j),Q2=n(j,"LI",{});var HLe=s(Q2);Zce=n(HLe,"STRONG",{});var est=s(Zce);d7o=r(est,"ibert"),est.forEach(t),c7o=r(HLe," \u2014 "),OD=n(HLe,"A",{href:!0});var ost=s(OD);f7o=r(ost,"IBertForSequenceClassification"),ost.forEach(t),m7o=r(HLe," (I-BERT model)"),HLe.forEach(t),g7o=i(j),H2=n(j,"LI",{});var ULe=s(H2);efe=n(ULe,"STRONG",{});var rst=s(efe);h7o=r(rst,"layoutlm"),rst.forEach(t),p7o=r(ULe," \u2014 "),VD=n(ULe,"A",{href:!0});var tst=s(VD);u7o=r(tst,"LayoutLMForSequenceClassification"),tst.forEach(t),_7o=r(ULe," (LayoutLM model)"),ULe.forEach(t),b7o=i(j),U2=n(j,"LI",{});var JLe=s(U2);ofe=n(JLe,"STRONG",{});var ast=s(ofe);v7o=r(ast,"layoutlmv2"),ast.forEach(t),F7o=r(JLe," \u2014 "),XD=n(JLe,"A",{href:!0});var nst=s(XD);T7o=r(nst,"LayoutLMv2ForSequenceClassification"),nst.forEach(t),M7o=r(JLe," (LayoutLMv2 model)"),JLe.forEach(t),E7o=i(j),J2=n(j,"LI",{});var YLe=s(J2);rfe=n(YLe,"STRONG",{});var sst=s(rfe);C7o=r(sst,"led"),sst.forEach(t),w7o=r(YLe," \u2014 "),zD=n(YLe,"A",{href:!0});var lst=s(zD);A7o=r(lst,"LEDForSequenceClassification"),lst.forEach(t),y7o=r(YLe," (LED model)"),YLe.forEach(t),L7o=i(j),Y2=n(j,"LI",{});var KLe=s(Y2);tfe=n(KLe,"STRONG",{});var ist=s(tfe);x7o=r(ist,"longformer"),ist.forEach(t),$7o=r(KLe," \u2014 "),WD=n(KLe,"A",{href:!0});var dst=s(WD);k7o=r(dst,"LongformerForSequenceClassification"),dst.forEach(t),S7o=r(KLe," (Longformer model)"),KLe.forEach(t),R7o=i(j),K2=n(j,"LI",{});var ZLe=s(K2);afe=n(ZLe,"STRONG",{});var cst=s(afe);P7o=r(cst,"mbart"),cst.forEach(t),B7o=r(ZLe," \u2014 "),QD=n(ZLe,"A",{href:!0});var fst=s(QD);I7o=r(fst,"MBartForSequenceClassification"),fst.forEach(t),q7o=r(ZLe," (mBART model)"),ZLe.forEach(t),N7o=i(j),Z2=n(j,"LI",{});var exe=s(Z2);nfe=n(exe,"STRONG",{});var mst=s(nfe);j7o=r(mst,"megatron-bert"),mst.forEach(t),D7o=r(exe," \u2014 "),HD=n(exe,"A",{href:!0});var gst=s(HD);G7o=r(gst,"MegatronBertForSequenceClassification"),gst.forEach(t),O7o=r(exe," (MegatronBert model)"),exe.forEach(t),V7o=i(j),eb=n(j,"LI",{});var oxe=s(eb);sfe=n(oxe,"STRONG",{});var hst=s(sfe);X7o=r(hst,"mobilebert"),hst.forEach(t),z7o=r(oxe," \u2014 "),UD=n(oxe,"A",{href:!0});var pst=s(UD);W7o=r(pst,"MobileBertForSequenceClassification"),pst.forEach(t),Q7o=r(oxe," (MobileBERT model)"),oxe.forEach(t),H7o=i(j),ob=n(j,"LI",{});var rxe=s(ob);lfe=n(rxe,"STRONG",{});var ust=s(lfe);U7o=r(ust,"mpnet"),ust.forEach(t),J7o=r(rxe," \u2014 "),JD=n(rxe,"A",{href:!0});var _st=s(JD);Y7o=r(_st,"MPNetForSequenceClassification"),_st.forEach(t),K7o=r(rxe," (MPNet model)"),rxe.forEach(t),Z7o=i(j),rb=n(j,"LI",{});var txe=s(rb);ife=n(txe,"STRONG",{});var bst=s(ife);e$o=r(bst,"nystromformer"),bst.forEach(t),o$o=r(txe," \u2014 "),YD=n(txe,"A",{href:!0});var vst=s(YD);r$o=r(vst,"NystromformerForSequenceClassification"),vst.forEach(t),t$o=r(txe," (Nystromformer model)"),txe.forEach(t),a$o=i(j),tb=n(j,"LI",{});var axe=s(tb);dfe=n(axe,"STRONG",{});var Fst=s(dfe);n$o=r(Fst,"openai-gpt"),Fst.forEach(t),s$o=r(axe," \u2014 "),KD=n(axe,"A",{href:!0});var Tst=s(KD);l$o=r(Tst,"OpenAIGPTForSequenceClassification"),Tst.forEach(t),i$o=r(axe," (OpenAI GPT model)"),axe.forEach(t),d$o=i(j),ab=n(j,"LI",{});var nxe=s(ab);cfe=n(nxe,"STRONG",{});var Mst=s(cfe);c$o=r(Mst,"perceiver"),Mst.forEach(t),f$o=r(nxe," \u2014 "),ZD=n(nxe,"A",{href:!0});var Est=s(ZD);m$o=r(Est,"PerceiverForSequenceClassification"),Est.forEach(t),g$o=r(nxe," (Perceiver model)"),nxe.forEach(t),h$o=i(j),nb=n(j,"LI",{});var sxe=s(nb);ffe=n(sxe,"STRONG",{});var Cst=s(ffe);p$o=r(Cst,"plbart"),Cst.forEach(t),u$o=r(sxe," \u2014 "),eG=n(sxe,"A",{href:!0});var wst=s(eG);_$o=r(wst,"PLBartForSequenceClassification"),wst.forEach(t),b$o=r(sxe," (PLBart model)"),sxe.forEach(t),v$o=i(j),sb=n(j,"LI",{});var lxe=s(sb);mfe=n(lxe,"STRONG",{});var Ast=s(mfe);F$o=r(Ast,"qdqbert"),Ast.forEach(t),T$o=r(lxe," \u2014 "),oG=n(lxe,"A",{href:!0});var yst=s(oG);M$o=r(yst,"QDQBertForSequenceClassification"),yst.forEach(t),E$o=r(lxe," (QDQBert model)"),lxe.forEach(t),C$o=i(j),lb=n(j,"LI",{});var ixe=s(lb);gfe=n(ixe,"STRONG",{});var Lst=s(gfe);w$o=r(Lst,"reformer"),Lst.forEach(t),A$o=r(ixe," \u2014 "),rG=n(ixe,"A",{href:!0});var xst=s(rG);y$o=r(xst,"ReformerForSequenceClassification"),xst.forEach(t),L$o=r(ixe," (Reformer model)"),ixe.forEach(t),x$o=i(j),ib=n(j,"LI",{});var dxe=s(ib);hfe=n(dxe,"STRONG",{});var $st=s(hfe);$$o=r($st,"rembert"),$st.forEach(t),k$o=r(dxe," \u2014 "),tG=n(dxe,"A",{href:!0});var kst=s(tG);S$o=r(kst,"RemBertForSequenceClassification"),kst.forEach(t),R$o=r(dxe," (RemBERT model)"),dxe.forEach(t),P$o=i(j),db=n(j,"LI",{});var cxe=s(db);pfe=n(cxe,"STRONG",{});var Sst=s(pfe);B$o=r(Sst,"roberta"),Sst.forEach(t),I$o=r(cxe," \u2014 "),aG=n(cxe,"A",{href:!0});var Rst=s(aG);q$o=r(Rst,"RobertaForSequenceClassification"),Rst.forEach(t),N$o=r(cxe," (RoBERTa model)"),cxe.forEach(t),j$o=i(j),cb=n(j,"LI",{});var fxe=s(cb);ufe=n(fxe,"STRONG",{});var Pst=s(ufe);D$o=r(Pst,"roformer"),Pst.forEach(t),G$o=r(fxe," \u2014 "),nG=n(fxe,"A",{href:!0});var Bst=s(nG);O$o=r(Bst,"RoFormerForSequenceClassification"),Bst.forEach(t),V$o=r(fxe," (RoFormer model)"),fxe.forEach(t),X$o=i(j),fb=n(j,"LI",{});var mxe=s(fb);_fe=n(mxe,"STRONG",{});var Ist=s(_fe);z$o=r(Ist,"squeezebert"),Ist.forEach(t),W$o=r(mxe," \u2014 "),sG=n(mxe,"A",{href:!0});var qst=s(sG);Q$o=r(qst,"SqueezeBertForSequenceClassification"),qst.forEach(t),H$o=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),U$o=i(j),mb=n(j,"LI",{});var gxe=s(mb);bfe=n(gxe,"STRONG",{});var Nst=s(bfe);J$o=r(Nst,"tapas"),Nst.forEach(t),Y$o=r(gxe," \u2014 "),lG=n(gxe,"A",{href:!0});var jst=s(lG);K$o=r(jst,"TapasForSequenceClassification"),jst.forEach(t),Z$o=r(gxe," (TAPAS model)"),gxe.forEach(t),eko=i(j),gb=n(j,"LI",{});var hxe=s(gb);vfe=n(hxe,"STRONG",{});var Dst=s(vfe);oko=r(Dst,"transfo-xl"),Dst.forEach(t),rko=r(hxe," \u2014 "),iG=n(hxe,"A",{href:!0});var Gst=s(iG);tko=r(Gst,"TransfoXLForSequenceClassification"),Gst.forEach(t),ako=r(hxe," (Transformer-XL model)"),hxe.forEach(t),nko=i(j),hb=n(j,"LI",{});var pxe=s(hb);Ffe=n(pxe,"STRONG",{});var Ost=s(Ffe);sko=r(Ost,"xlm"),Ost.forEach(t),lko=r(pxe," \u2014 "),dG=n(pxe,"A",{href:!0});var Vst=s(dG);iko=r(Vst,"XLMForSequenceClassification"),Vst.forEach(t),dko=r(pxe," (XLM model)"),pxe.forEach(t),cko=i(j),pb=n(j,"LI",{});var uxe=s(pb);Tfe=n(uxe,"STRONG",{});var Xst=s(Tfe);fko=r(Xst,"xlm-roberta"),Xst.forEach(t),mko=r(uxe," \u2014 "),cG=n(uxe,"A",{href:!0});var zst=s(cG);gko=r(zst,"XLMRobertaForSequenceClassification"),zst.forEach(t),hko=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),pko=i(j),ub=n(j,"LI",{});var _xe=s(ub);Mfe=n(_xe,"STRONG",{});var Wst=s(Mfe);uko=r(Wst,"xlm-roberta-xl"),Wst.forEach(t),_ko=r(_xe," \u2014 "),fG=n(_xe,"A",{href:!0});var Qst=s(fG);bko=r(Qst,"XLMRobertaXLForSequenceClassification"),Qst.forEach(t),vko=r(_xe," (XLM-RoBERTa-XL model)"),_xe.forEach(t),Fko=i(j),_b=n(j,"LI",{});var bxe=s(_b);Efe=n(bxe,"STRONG",{});var Hst=s(Efe);Tko=r(Hst,"xlnet"),Hst.forEach(t),Mko=r(bxe," \u2014 "),mG=n(bxe,"A",{href:!0});var Ust=s(mG);Eko=r(Ust,"XLNetForSequenceClassification"),Ust.forEach(t),Cko=r(bxe," (XLNet model)"),bxe.forEach(t),wko=i(j),bb=n(j,"LI",{});var vxe=s(bb);Cfe=n(vxe,"STRONG",{});var Jst=s(Cfe);Ako=r(Jst,"yoso"),Jst.forEach(t),yko=r(vxe," \u2014 "),gG=n(vxe,"A",{href:!0});var Yst=s(gG);Lko=r(Yst,"YosoForSequenceClassification"),Yst.forEach(t),xko=r(vxe," (YOSO model)"),vxe.forEach(t),j.forEach(t),$ko=i(sa),vb=n(sa,"P",{});var Fxe=s(vb);kko=r(Fxe,"The model is set in evaluation mode by default using "),wfe=n(Fxe,"CODE",{});var Kst=s(wfe);Sko=r(Kst,"model.eval()"),Kst.forEach(t),Rko=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=n(Fxe,"CODE",{});var Zst=s(Afe);Pko=r(Zst,"model.train()"),Zst.forEach(t),Fxe.forEach(t),Bko=i(sa),T(Fb.$$.fragment,sa),sa.forEach(t),Xs.forEach(t),OIe=i(f),Gi=n(f,"H2",{class:!0});var WNe=s(Gi);Tb=n(WNe,"A",{id:!0,class:!0,href:!0});var elt=s(Tb);yfe=n(elt,"SPAN",{});var olt=s(yfe);T(sy.$$.fragment,olt),olt.forEach(t),elt.forEach(t),Iko=i(WNe),Lfe=n(WNe,"SPAN",{});var rlt=s(Lfe);qko=r(rlt,"AutoModelForMultipleChoice"),rlt.forEach(t),WNe.forEach(t),VIe=i(f),Po=n(f,"DIV",{class:!0});var zs=s(Po);T(ly.$$.fragment,zs),Nko=i(zs),Oi=n(zs,"P",{});var PK=s(Oi);jko=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hG=n(PK,"A",{href:!0});var tlt=s(hG);Dko=r(tlt,"from_pretrained()"),tlt.forEach(t),Gko=r(PK," class method or the "),pG=n(PK,"A",{href:!0});var alt=s(pG);Oko=r(alt,"from_config()"),alt.forEach(t),Vko=r(PK,` class
method.`),PK.forEach(t),Xko=i(zs),iy=n(zs,"P",{});var QNe=s(iy);zko=r(QNe,"This class cannot be instantiated directly using "),xfe=n(QNe,"CODE",{});var nlt=s(xfe);Wko=r(nlt,"__init__()"),nlt.forEach(t),Qko=r(QNe," (throws an error)."),QNe.forEach(t),Hko=i(zs),dt=n(zs,"DIV",{class:!0});var Tw=s(dt);T(dy.$$.fragment,Tw),Uko=i(Tw),$fe=n(Tw,"P",{});var slt=s($fe);Jko=r(slt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),slt.forEach(t),Yko=i(Tw),Vi=n(Tw,"P",{});var BK=s(Vi);Kko=r(BK,`Note:
Loading a model from its configuration file does `),kfe=n(BK,"STRONG",{});var llt=s(kfe);Zko=r(llt,"not"),llt.forEach(t),eSo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=n(BK,"A",{href:!0});var ilt=s(uG);oSo=r(ilt,"from_pretrained()"),ilt.forEach(t),rSo=r(BK," to load the model weights."),BK.forEach(t),tSo=i(Tw),T(Mb.$$.fragment,Tw),Tw.forEach(t),aSo=i(zs),ro=n(zs,"DIV",{class:!0});var la=s(ro);T(cy.$$.fragment,la),nSo=i(la),Sfe=n(la,"P",{});var dlt=s(Sfe);sSo=r(dlt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dlt.forEach(t),lSo=i(la),Pa=n(la,"P",{});var Mw=s(Pa);iSo=r(Mw,"The model class to instantiate is selected based on the "),Rfe=n(Mw,"CODE",{});var clt=s(Rfe);dSo=r(clt,"model_type"),clt.forEach(t),cSo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Pfe=n(Mw,"CODE",{});var flt=s(Pfe);fSo=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),mSo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(Mw,"CODE",{});var mlt=s(Bfe);gSo=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),hSo=r(Mw,":"),Mw.forEach(t),pSo=i(la),Y=n(la,"UL",{});var K=s(Y);Eb=n(K,"LI",{});var Txe=s(Eb);Ife=n(Txe,"STRONG",{});var glt=s(Ife);uSo=r(glt,"albert"),glt.forEach(t),_So=r(Txe," \u2014 "),_G=n(Txe,"A",{href:!0});var hlt=s(_G);bSo=r(hlt,"AlbertForMultipleChoice"),hlt.forEach(t),vSo=r(Txe," (ALBERT model)"),Txe.forEach(t),FSo=i(K),Cb=n(K,"LI",{});var Mxe=s(Cb);qfe=n(Mxe,"STRONG",{});var plt=s(qfe);TSo=r(plt,"bert"),plt.forEach(t),MSo=r(Mxe," \u2014 "),bG=n(Mxe,"A",{href:!0});var ult=s(bG);ESo=r(ult,"BertForMultipleChoice"),ult.forEach(t),CSo=r(Mxe," (BERT model)"),Mxe.forEach(t),wSo=i(K),wb=n(K,"LI",{});var Exe=s(wb);Nfe=n(Exe,"STRONG",{});var _lt=s(Nfe);ASo=r(_lt,"big_bird"),_lt.forEach(t),ySo=r(Exe," \u2014 "),vG=n(Exe,"A",{href:!0});var blt=s(vG);LSo=r(blt,"BigBirdForMultipleChoice"),blt.forEach(t),xSo=r(Exe," (BigBird model)"),Exe.forEach(t),$So=i(K),Ab=n(K,"LI",{});var Cxe=s(Ab);jfe=n(Cxe,"STRONG",{});var vlt=s(jfe);kSo=r(vlt,"camembert"),vlt.forEach(t),SSo=r(Cxe," \u2014 "),FG=n(Cxe,"A",{href:!0});var Flt=s(FG);RSo=r(Flt,"CamembertForMultipleChoice"),Flt.forEach(t),PSo=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),BSo=i(K),yb=n(K,"LI",{});var wxe=s(yb);Dfe=n(wxe,"STRONG",{});var Tlt=s(Dfe);ISo=r(Tlt,"canine"),Tlt.forEach(t),qSo=r(wxe," \u2014 "),TG=n(wxe,"A",{href:!0});var Mlt=s(TG);NSo=r(Mlt,"CanineForMultipleChoice"),Mlt.forEach(t),jSo=r(wxe," (Canine model)"),wxe.forEach(t),DSo=i(K),Lb=n(K,"LI",{});var Axe=s(Lb);Gfe=n(Axe,"STRONG",{});var Elt=s(Gfe);GSo=r(Elt,"convbert"),Elt.forEach(t),OSo=r(Axe," \u2014 "),MG=n(Axe,"A",{href:!0});var Clt=s(MG);VSo=r(Clt,"ConvBertForMultipleChoice"),Clt.forEach(t),XSo=r(Axe," (ConvBERT model)"),Axe.forEach(t),zSo=i(K),xb=n(K,"LI",{});var yxe=s(xb);Ofe=n(yxe,"STRONG",{});var wlt=s(Ofe);WSo=r(wlt,"data2vec-text"),wlt.forEach(t),QSo=r(yxe," \u2014 "),EG=n(yxe,"A",{href:!0});var Alt=s(EG);HSo=r(Alt,"Data2VecTextForMultipleChoice"),Alt.forEach(t),USo=r(yxe," (Data2VecText model)"),yxe.forEach(t),JSo=i(K),$b=n(K,"LI",{});var Lxe=s($b);Vfe=n(Lxe,"STRONG",{});var ylt=s(Vfe);YSo=r(ylt,"deberta-v2"),ylt.forEach(t),KSo=r(Lxe," \u2014 "),CG=n(Lxe,"A",{href:!0});var Llt=s(CG);ZSo=r(Llt,"DebertaV2ForMultipleChoice"),Llt.forEach(t),eRo=r(Lxe," (DeBERTa-v2 model)"),Lxe.forEach(t),oRo=i(K),kb=n(K,"LI",{});var xxe=s(kb);Xfe=n(xxe,"STRONG",{});var xlt=s(Xfe);rRo=r(xlt,"distilbert"),xlt.forEach(t),tRo=r(xxe," \u2014 "),wG=n(xxe,"A",{href:!0});var $lt=s(wG);aRo=r($lt,"DistilBertForMultipleChoice"),$lt.forEach(t),nRo=r(xxe," (DistilBERT model)"),xxe.forEach(t),sRo=i(K),Sb=n(K,"LI",{});var $xe=s(Sb);zfe=n($xe,"STRONG",{});var klt=s(zfe);lRo=r(klt,"electra"),klt.forEach(t),iRo=r($xe," \u2014 "),AG=n($xe,"A",{href:!0});var Slt=s(AG);dRo=r(Slt,"ElectraForMultipleChoice"),Slt.forEach(t),cRo=r($xe," (ELECTRA model)"),$xe.forEach(t),fRo=i(K),Rb=n(K,"LI",{});var kxe=s(Rb);Wfe=n(kxe,"STRONG",{});var Rlt=s(Wfe);mRo=r(Rlt,"flaubert"),Rlt.forEach(t),gRo=r(kxe," \u2014 "),yG=n(kxe,"A",{href:!0});var Plt=s(yG);hRo=r(Plt,"FlaubertForMultipleChoice"),Plt.forEach(t),pRo=r(kxe," (FlauBERT model)"),kxe.forEach(t),uRo=i(K),Pb=n(K,"LI",{});var Sxe=s(Pb);Qfe=n(Sxe,"STRONG",{});var Blt=s(Qfe);_Ro=r(Blt,"fnet"),Blt.forEach(t),bRo=r(Sxe," \u2014 "),LG=n(Sxe,"A",{href:!0});var Ilt=s(LG);vRo=r(Ilt,"FNetForMultipleChoice"),Ilt.forEach(t),FRo=r(Sxe," (FNet model)"),Sxe.forEach(t),TRo=i(K),Bb=n(K,"LI",{});var Rxe=s(Bb);Hfe=n(Rxe,"STRONG",{});var qlt=s(Hfe);MRo=r(qlt,"funnel"),qlt.forEach(t),ERo=r(Rxe," \u2014 "),xG=n(Rxe,"A",{href:!0});var Nlt=s(xG);CRo=r(Nlt,"FunnelForMultipleChoice"),Nlt.forEach(t),wRo=r(Rxe," (Funnel Transformer model)"),Rxe.forEach(t),ARo=i(K),Ib=n(K,"LI",{});var Pxe=s(Ib);Ufe=n(Pxe,"STRONG",{});var jlt=s(Ufe);yRo=r(jlt,"ibert"),jlt.forEach(t),LRo=r(Pxe," \u2014 "),$G=n(Pxe,"A",{href:!0});var Dlt=s($G);xRo=r(Dlt,"IBertForMultipleChoice"),Dlt.forEach(t),$Ro=r(Pxe," (I-BERT model)"),Pxe.forEach(t),kRo=i(K),qb=n(K,"LI",{});var Bxe=s(qb);Jfe=n(Bxe,"STRONG",{});var Glt=s(Jfe);SRo=r(Glt,"longformer"),Glt.forEach(t),RRo=r(Bxe," \u2014 "),kG=n(Bxe,"A",{href:!0});var Olt=s(kG);PRo=r(Olt,"LongformerForMultipleChoice"),Olt.forEach(t),BRo=r(Bxe," (Longformer model)"),Bxe.forEach(t),IRo=i(K),Nb=n(K,"LI",{});var Ixe=s(Nb);Yfe=n(Ixe,"STRONG",{});var Vlt=s(Yfe);qRo=r(Vlt,"megatron-bert"),Vlt.forEach(t),NRo=r(Ixe," \u2014 "),SG=n(Ixe,"A",{href:!0});var Xlt=s(SG);jRo=r(Xlt,"MegatronBertForMultipleChoice"),Xlt.forEach(t),DRo=r(Ixe," (MegatronBert model)"),Ixe.forEach(t),GRo=i(K),jb=n(K,"LI",{});var qxe=s(jb);Kfe=n(qxe,"STRONG",{});var zlt=s(Kfe);ORo=r(zlt,"mobilebert"),zlt.forEach(t),VRo=r(qxe," \u2014 "),RG=n(qxe,"A",{href:!0});var Wlt=s(RG);XRo=r(Wlt,"MobileBertForMultipleChoice"),Wlt.forEach(t),zRo=r(qxe," (MobileBERT model)"),qxe.forEach(t),WRo=i(K),Db=n(K,"LI",{});var Nxe=s(Db);Zfe=n(Nxe,"STRONG",{});var Qlt=s(Zfe);QRo=r(Qlt,"mpnet"),Qlt.forEach(t),HRo=r(Nxe," \u2014 "),PG=n(Nxe,"A",{href:!0});var Hlt=s(PG);URo=r(Hlt,"MPNetForMultipleChoice"),Hlt.forEach(t),JRo=r(Nxe," (MPNet model)"),Nxe.forEach(t),YRo=i(K),Gb=n(K,"LI",{});var jxe=s(Gb);eme=n(jxe,"STRONG",{});var Ult=s(eme);KRo=r(Ult,"nystromformer"),Ult.forEach(t),ZRo=r(jxe," \u2014 "),BG=n(jxe,"A",{href:!0});var Jlt=s(BG);ePo=r(Jlt,"NystromformerForMultipleChoice"),Jlt.forEach(t),oPo=r(jxe," (Nystromformer model)"),jxe.forEach(t),rPo=i(K),Ob=n(K,"LI",{});var Dxe=s(Ob);ome=n(Dxe,"STRONG",{});var Ylt=s(ome);tPo=r(Ylt,"qdqbert"),Ylt.forEach(t),aPo=r(Dxe," \u2014 "),IG=n(Dxe,"A",{href:!0});var Klt=s(IG);nPo=r(Klt,"QDQBertForMultipleChoice"),Klt.forEach(t),sPo=r(Dxe," (QDQBert model)"),Dxe.forEach(t),lPo=i(K),Vb=n(K,"LI",{});var Gxe=s(Vb);rme=n(Gxe,"STRONG",{});var Zlt=s(rme);iPo=r(Zlt,"rembert"),Zlt.forEach(t),dPo=r(Gxe," \u2014 "),qG=n(Gxe,"A",{href:!0});var eit=s(qG);cPo=r(eit,"RemBertForMultipleChoice"),eit.forEach(t),fPo=r(Gxe," (RemBERT model)"),Gxe.forEach(t),mPo=i(K),Xb=n(K,"LI",{});var Oxe=s(Xb);tme=n(Oxe,"STRONG",{});var oit=s(tme);gPo=r(oit,"roberta"),oit.forEach(t),hPo=r(Oxe," \u2014 "),NG=n(Oxe,"A",{href:!0});var rit=s(NG);pPo=r(rit,"RobertaForMultipleChoice"),rit.forEach(t),uPo=r(Oxe," (RoBERTa model)"),Oxe.forEach(t),_Po=i(K),zb=n(K,"LI",{});var Vxe=s(zb);ame=n(Vxe,"STRONG",{});var tit=s(ame);bPo=r(tit,"roformer"),tit.forEach(t),vPo=r(Vxe," \u2014 "),jG=n(Vxe,"A",{href:!0});var ait=s(jG);FPo=r(ait,"RoFormerForMultipleChoice"),ait.forEach(t),TPo=r(Vxe," (RoFormer model)"),Vxe.forEach(t),MPo=i(K),Wb=n(K,"LI",{});var Xxe=s(Wb);nme=n(Xxe,"STRONG",{});var nit=s(nme);EPo=r(nit,"squeezebert"),nit.forEach(t),CPo=r(Xxe," \u2014 "),DG=n(Xxe,"A",{href:!0});var sit=s(DG);wPo=r(sit,"SqueezeBertForMultipleChoice"),sit.forEach(t),APo=r(Xxe," (SqueezeBERT model)"),Xxe.forEach(t),yPo=i(K),Qb=n(K,"LI",{});var zxe=s(Qb);sme=n(zxe,"STRONG",{});var lit=s(sme);LPo=r(lit,"xlm"),lit.forEach(t),xPo=r(zxe," \u2014 "),GG=n(zxe,"A",{href:!0});var iit=s(GG);$Po=r(iit,"XLMForMultipleChoice"),iit.forEach(t),kPo=r(zxe," (XLM model)"),zxe.forEach(t),SPo=i(K),Hb=n(K,"LI",{});var Wxe=s(Hb);lme=n(Wxe,"STRONG",{});var dit=s(lme);RPo=r(dit,"xlm-roberta"),dit.forEach(t),PPo=r(Wxe," \u2014 "),OG=n(Wxe,"A",{href:!0});var cit=s(OG);BPo=r(cit,"XLMRobertaForMultipleChoice"),cit.forEach(t),IPo=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),qPo=i(K),Ub=n(K,"LI",{});var Qxe=s(Ub);ime=n(Qxe,"STRONG",{});var fit=s(ime);NPo=r(fit,"xlm-roberta-xl"),fit.forEach(t),jPo=r(Qxe," \u2014 "),VG=n(Qxe,"A",{href:!0});var mit=s(VG);DPo=r(mit,"XLMRobertaXLForMultipleChoice"),mit.forEach(t),GPo=r(Qxe," (XLM-RoBERTa-XL model)"),Qxe.forEach(t),OPo=i(K),Jb=n(K,"LI",{});var Hxe=s(Jb);dme=n(Hxe,"STRONG",{});var git=s(dme);VPo=r(git,"xlnet"),git.forEach(t),XPo=r(Hxe," \u2014 "),XG=n(Hxe,"A",{href:!0});var hit=s(XG);zPo=r(hit,"XLNetForMultipleChoice"),hit.forEach(t),WPo=r(Hxe," (XLNet model)"),Hxe.forEach(t),QPo=i(K),Yb=n(K,"LI",{});var Uxe=s(Yb);cme=n(Uxe,"STRONG",{});var pit=s(cme);HPo=r(pit,"yoso"),pit.forEach(t),UPo=r(Uxe," \u2014 "),zG=n(Uxe,"A",{href:!0});var uit=s(zG);JPo=r(uit,"YosoForMultipleChoice"),uit.forEach(t),YPo=r(Uxe," (YOSO model)"),Uxe.forEach(t),K.forEach(t),KPo=i(la),Kb=n(la,"P",{});var Jxe=s(Kb);ZPo=r(Jxe,"The model is set in evaluation mode by default using "),fme=n(Jxe,"CODE",{});var _it=s(fme);eBo=r(_it,"model.eval()"),_it.forEach(t),oBo=r(Jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=n(Jxe,"CODE",{});var bit=s(mme);rBo=r(bit,"model.train()"),bit.forEach(t),Jxe.forEach(t),tBo=i(la),T(Zb.$$.fragment,la),la.forEach(t),zs.forEach(t),XIe=i(f),Xi=n(f,"H2",{class:!0});var HNe=s(Xi);ev=n(HNe,"A",{id:!0,class:!0,href:!0});var vit=s(ev);gme=n(vit,"SPAN",{});var Fit=s(gme);T(fy.$$.fragment,Fit),Fit.forEach(t),vit.forEach(t),aBo=i(HNe),hme=n(HNe,"SPAN",{});var Tit=s(hme);nBo=r(Tit,"AutoModelForNextSentencePrediction"),Tit.forEach(t),HNe.forEach(t),zIe=i(f),Bo=n(f,"DIV",{class:!0});var Ws=s(Bo);T(my.$$.fragment,Ws),sBo=i(Ws),zi=n(Ws,"P",{});var IK=s(zi);lBo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WG=n(IK,"A",{href:!0});var Mit=s(WG);iBo=r(Mit,"from_pretrained()"),Mit.forEach(t),dBo=r(IK," class method or the "),QG=n(IK,"A",{href:!0});var Eit=s(QG);cBo=r(Eit,"from_config()"),Eit.forEach(t),fBo=r(IK,` class
method.`),IK.forEach(t),mBo=i(Ws),gy=n(Ws,"P",{});var UNe=s(gy);gBo=r(UNe,"This class cannot be instantiated directly using "),pme=n(UNe,"CODE",{});var Cit=s(pme);hBo=r(Cit,"__init__()"),Cit.forEach(t),pBo=r(UNe," (throws an error)."),UNe.forEach(t),uBo=i(Ws),ct=n(Ws,"DIV",{class:!0});var Ew=s(ct);T(hy.$$.fragment,Ew),_Bo=i(Ew),ume=n(Ew,"P",{});var wit=s(ume);bBo=r(wit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wit.forEach(t),vBo=i(Ew),Wi=n(Ew,"P",{});var qK=s(Wi);FBo=r(qK,`Note:
Loading a model from its configuration file does `),_me=n(qK,"STRONG",{});var Ait=s(_me);TBo=r(Ait,"not"),Ait.forEach(t),MBo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(qK,"A",{href:!0});var yit=s(HG);EBo=r(yit,"from_pretrained()"),yit.forEach(t),CBo=r(qK," to load the model weights."),qK.forEach(t),wBo=i(Ew),T(ov.$$.fragment,Ew),Ew.forEach(t),ABo=i(Ws),to=n(Ws,"DIV",{class:!0});var ia=s(to);T(py.$$.fragment,ia),yBo=i(ia),bme=n(ia,"P",{});var Lit=s(bme);LBo=r(Lit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Lit.forEach(t),xBo=i(ia),Ba=n(ia,"P",{});var Cw=s(Ba);$Bo=r(Cw,"The model class to instantiate is selected based on the "),vme=n(Cw,"CODE",{});var xit=s(vme);kBo=r(xit,"model_type"),xit.forEach(t),SBo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Fme=n(Cw,"CODE",{});var $it=s(Fme);RBo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),PBo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(Cw,"CODE",{});var kit=s(Tme);BBo=r(kit,"pretrained_model_name_or_path"),kit.forEach(t),IBo=r(Cw,":"),Cw.forEach(t),qBo=i(ia),Yr=n(ia,"UL",{});var Qs=s(Yr);rv=n(Qs,"LI",{});var Yxe=s(rv);Mme=n(Yxe,"STRONG",{});var Sit=s(Mme);NBo=r(Sit,"bert"),Sit.forEach(t),jBo=r(Yxe," \u2014 "),UG=n(Yxe,"A",{href:!0});var Rit=s(UG);DBo=r(Rit,"BertForNextSentencePrediction"),Rit.forEach(t),GBo=r(Yxe," (BERT model)"),Yxe.forEach(t),OBo=i(Qs),tv=n(Qs,"LI",{});var Kxe=s(tv);Eme=n(Kxe,"STRONG",{});var Pit=s(Eme);VBo=r(Pit,"fnet"),Pit.forEach(t),XBo=r(Kxe," \u2014 "),JG=n(Kxe,"A",{href:!0});var Bit=s(JG);zBo=r(Bit,"FNetForNextSentencePrediction"),Bit.forEach(t),WBo=r(Kxe," (FNet model)"),Kxe.forEach(t),QBo=i(Qs),av=n(Qs,"LI",{});var Zxe=s(av);Cme=n(Zxe,"STRONG",{});var Iit=s(Cme);HBo=r(Iit,"megatron-bert"),Iit.forEach(t),UBo=r(Zxe," \u2014 "),YG=n(Zxe,"A",{href:!0});var qit=s(YG);JBo=r(qit,"MegatronBertForNextSentencePrediction"),qit.forEach(t),YBo=r(Zxe," (MegatronBert model)"),Zxe.forEach(t),KBo=i(Qs),nv=n(Qs,"LI",{});var e9e=s(nv);wme=n(e9e,"STRONG",{});var Nit=s(wme);ZBo=r(Nit,"mobilebert"),Nit.forEach(t),eIo=r(e9e," \u2014 "),KG=n(e9e,"A",{href:!0});var jit=s(KG);oIo=r(jit,"MobileBertForNextSentencePrediction"),jit.forEach(t),rIo=r(e9e," (MobileBERT model)"),e9e.forEach(t),tIo=i(Qs),sv=n(Qs,"LI",{});var o9e=s(sv);Ame=n(o9e,"STRONG",{});var Dit=s(Ame);aIo=r(Dit,"qdqbert"),Dit.forEach(t),nIo=r(o9e," \u2014 "),ZG=n(o9e,"A",{href:!0});var Git=s(ZG);sIo=r(Git,"QDQBertForNextSentencePrediction"),Git.forEach(t),lIo=r(o9e," (QDQBert model)"),o9e.forEach(t),Qs.forEach(t),iIo=i(ia),lv=n(ia,"P",{});var r9e=s(lv);dIo=r(r9e,"The model is set in evaluation mode by default using "),yme=n(r9e,"CODE",{});var Oit=s(yme);cIo=r(Oit,"model.eval()"),Oit.forEach(t),fIo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(r9e,"CODE",{});var Vit=s(Lme);mIo=r(Vit,"model.train()"),Vit.forEach(t),r9e.forEach(t),gIo=i(ia),T(iv.$$.fragment,ia),ia.forEach(t),Ws.forEach(t),WIe=i(f),Qi=n(f,"H2",{class:!0});var JNe=s(Qi);dv=n(JNe,"A",{id:!0,class:!0,href:!0});var Xit=s(dv);xme=n(Xit,"SPAN",{});var zit=s(xme);T(uy.$$.fragment,zit),zit.forEach(t),Xit.forEach(t),hIo=i(JNe),$me=n(JNe,"SPAN",{});var Wit=s($me);pIo=r(Wit,"AutoModelForTokenClassification"),Wit.forEach(t),JNe.forEach(t),QIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(_y.$$.fragment,Hs),uIo=i(Hs),Hi=n(Hs,"P",{});var NK=s(Hi);_Io=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eO=n(NK,"A",{href:!0});var Qit=s(eO);bIo=r(Qit,"from_pretrained()"),Qit.forEach(t),vIo=r(NK," class method or the "),oO=n(NK,"A",{href:!0});var Hit=s(oO);FIo=r(Hit,"from_config()"),Hit.forEach(t),TIo=r(NK,` class
method.`),NK.forEach(t),MIo=i(Hs),by=n(Hs,"P",{});var YNe=s(by);EIo=r(YNe,"This class cannot be instantiated directly using "),kme=n(YNe,"CODE",{});var Uit=s(kme);CIo=r(Uit,"__init__()"),Uit.forEach(t),wIo=r(YNe," (throws an error)."),YNe.forEach(t),AIo=i(Hs),ft=n(Hs,"DIV",{class:!0});var ww=s(ft);T(vy.$$.fragment,ww),yIo=i(ww),Sme=n(ww,"P",{});var Jit=s(Sme);LIo=r(Jit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jit.forEach(t),xIo=i(ww),Ui=n(ww,"P",{});var jK=s(Ui);$Io=r(jK,`Note:
Loading a model from its configuration file does `),Rme=n(jK,"STRONG",{});var Yit=s(Rme);kIo=r(Yit,"not"),Yit.forEach(t),SIo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(jK,"A",{href:!0});var Kit=s(rO);RIo=r(Kit,"from_pretrained()"),Kit.forEach(t),PIo=r(jK," to load the model weights."),jK.forEach(t),BIo=i(ww),T(cv.$$.fragment,ww),ww.forEach(t),IIo=i(Hs),ao=n(Hs,"DIV",{class:!0});var da=s(ao);T(Fy.$$.fragment,da),qIo=i(da),Pme=n(da,"P",{});var Zit=s(Pme);NIo=r(Zit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zit.forEach(t),jIo=i(da),Ia=n(da,"P",{});var Aw=s(Ia);DIo=r(Aw,"The model class to instantiate is selected based on the "),Bme=n(Aw,"CODE",{});var edt=s(Bme);GIo=r(edt,"model_type"),edt.forEach(t),OIo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Ime=n(Aw,"CODE",{});var odt=s(Ime);VIo=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),XIo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(Aw,"CODE",{});var rdt=s(qme);zIo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),WIo=r(Aw,":"),Aw.forEach(t),QIo=i(da),U=n(da,"UL",{});var J=s(U);fv=n(J,"LI",{});var t9e=s(fv);Nme=n(t9e,"STRONG",{});var tdt=s(Nme);HIo=r(tdt,"albert"),tdt.forEach(t),UIo=r(t9e," \u2014 "),tO=n(t9e,"A",{href:!0});var adt=s(tO);JIo=r(adt,"AlbertForTokenClassification"),adt.forEach(t),YIo=r(t9e," (ALBERT model)"),t9e.forEach(t),KIo=i(J),mv=n(J,"LI",{});var a9e=s(mv);jme=n(a9e,"STRONG",{});var ndt=s(jme);ZIo=r(ndt,"bert"),ndt.forEach(t),eqo=r(a9e," \u2014 "),aO=n(a9e,"A",{href:!0});var sdt=s(aO);oqo=r(sdt,"BertForTokenClassification"),sdt.forEach(t),rqo=r(a9e," (BERT model)"),a9e.forEach(t),tqo=i(J),gv=n(J,"LI",{});var n9e=s(gv);Dme=n(n9e,"STRONG",{});var ldt=s(Dme);aqo=r(ldt,"big_bird"),ldt.forEach(t),nqo=r(n9e," \u2014 "),nO=n(n9e,"A",{href:!0});var idt=s(nO);sqo=r(idt,"BigBirdForTokenClassification"),idt.forEach(t),lqo=r(n9e," (BigBird model)"),n9e.forEach(t),iqo=i(J),hv=n(J,"LI",{});var s9e=s(hv);Gme=n(s9e,"STRONG",{});var ddt=s(Gme);dqo=r(ddt,"camembert"),ddt.forEach(t),cqo=r(s9e," \u2014 "),sO=n(s9e,"A",{href:!0});var cdt=s(sO);fqo=r(cdt,"CamembertForTokenClassification"),cdt.forEach(t),mqo=r(s9e," (CamemBERT model)"),s9e.forEach(t),gqo=i(J),pv=n(J,"LI",{});var l9e=s(pv);Ome=n(l9e,"STRONG",{});var fdt=s(Ome);hqo=r(fdt,"canine"),fdt.forEach(t),pqo=r(l9e," \u2014 "),lO=n(l9e,"A",{href:!0});var mdt=s(lO);uqo=r(mdt,"CanineForTokenClassification"),mdt.forEach(t),_qo=r(l9e," (Canine model)"),l9e.forEach(t),bqo=i(J),uv=n(J,"LI",{});var i9e=s(uv);Vme=n(i9e,"STRONG",{});var gdt=s(Vme);vqo=r(gdt,"convbert"),gdt.forEach(t),Fqo=r(i9e," \u2014 "),iO=n(i9e,"A",{href:!0});var hdt=s(iO);Tqo=r(hdt,"ConvBertForTokenClassification"),hdt.forEach(t),Mqo=r(i9e," (ConvBERT model)"),i9e.forEach(t),Eqo=i(J),_v=n(J,"LI",{});var d9e=s(_v);Xme=n(d9e,"STRONG",{});var pdt=s(Xme);Cqo=r(pdt,"data2vec-text"),pdt.forEach(t),wqo=r(d9e," \u2014 "),dO=n(d9e,"A",{href:!0});var udt=s(dO);Aqo=r(udt,"Data2VecTextForTokenClassification"),udt.forEach(t),yqo=r(d9e," (Data2VecText model)"),d9e.forEach(t),Lqo=i(J),bv=n(J,"LI",{});var c9e=s(bv);zme=n(c9e,"STRONG",{});var _dt=s(zme);xqo=r(_dt,"deberta"),_dt.forEach(t),$qo=r(c9e," \u2014 "),cO=n(c9e,"A",{href:!0});var bdt=s(cO);kqo=r(bdt,"DebertaForTokenClassification"),bdt.forEach(t),Sqo=r(c9e," (DeBERTa model)"),c9e.forEach(t),Rqo=i(J),vv=n(J,"LI",{});var f9e=s(vv);Wme=n(f9e,"STRONG",{});var vdt=s(Wme);Pqo=r(vdt,"deberta-v2"),vdt.forEach(t),Bqo=r(f9e," \u2014 "),fO=n(f9e,"A",{href:!0});var Fdt=s(fO);Iqo=r(Fdt,"DebertaV2ForTokenClassification"),Fdt.forEach(t),qqo=r(f9e," (DeBERTa-v2 model)"),f9e.forEach(t),Nqo=i(J),Fv=n(J,"LI",{});var m9e=s(Fv);Qme=n(m9e,"STRONG",{});var Tdt=s(Qme);jqo=r(Tdt,"distilbert"),Tdt.forEach(t),Dqo=r(m9e," \u2014 "),mO=n(m9e,"A",{href:!0});var Mdt=s(mO);Gqo=r(Mdt,"DistilBertForTokenClassification"),Mdt.forEach(t),Oqo=r(m9e," (DistilBERT model)"),m9e.forEach(t),Vqo=i(J),Tv=n(J,"LI",{});var g9e=s(Tv);Hme=n(g9e,"STRONG",{});var Edt=s(Hme);Xqo=r(Edt,"electra"),Edt.forEach(t),zqo=r(g9e," \u2014 "),gO=n(g9e,"A",{href:!0});var Cdt=s(gO);Wqo=r(Cdt,"ElectraForTokenClassification"),Cdt.forEach(t),Qqo=r(g9e," (ELECTRA model)"),g9e.forEach(t),Hqo=i(J),Mv=n(J,"LI",{});var h9e=s(Mv);Ume=n(h9e,"STRONG",{});var wdt=s(Ume);Uqo=r(wdt,"flaubert"),wdt.forEach(t),Jqo=r(h9e," \u2014 "),hO=n(h9e,"A",{href:!0});var Adt=s(hO);Yqo=r(Adt,"FlaubertForTokenClassification"),Adt.forEach(t),Kqo=r(h9e," (FlauBERT model)"),h9e.forEach(t),Zqo=i(J),Ev=n(J,"LI",{});var p9e=s(Ev);Jme=n(p9e,"STRONG",{});var ydt=s(Jme);eNo=r(ydt,"fnet"),ydt.forEach(t),oNo=r(p9e," \u2014 "),pO=n(p9e,"A",{href:!0});var Ldt=s(pO);rNo=r(Ldt,"FNetForTokenClassification"),Ldt.forEach(t),tNo=r(p9e," (FNet model)"),p9e.forEach(t),aNo=i(J),Cv=n(J,"LI",{});var u9e=s(Cv);Yme=n(u9e,"STRONG",{});var xdt=s(Yme);nNo=r(xdt,"funnel"),xdt.forEach(t),sNo=r(u9e," \u2014 "),uO=n(u9e,"A",{href:!0});var $dt=s(uO);lNo=r($dt,"FunnelForTokenClassification"),$dt.forEach(t),iNo=r(u9e," (Funnel Transformer model)"),u9e.forEach(t),dNo=i(J),wv=n(J,"LI",{});var _9e=s(wv);Kme=n(_9e,"STRONG",{});var kdt=s(Kme);cNo=r(kdt,"gpt2"),kdt.forEach(t),fNo=r(_9e," \u2014 "),_O=n(_9e,"A",{href:!0});var Sdt=s(_O);mNo=r(Sdt,"GPT2ForTokenClassification"),Sdt.forEach(t),gNo=r(_9e," (OpenAI GPT-2 model)"),_9e.forEach(t),hNo=i(J),Av=n(J,"LI",{});var b9e=s(Av);Zme=n(b9e,"STRONG",{});var Rdt=s(Zme);pNo=r(Rdt,"ibert"),Rdt.forEach(t),uNo=r(b9e," \u2014 "),bO=n(b9e,"A",{href:!0});var Pdt=s(bO);_No=r(Pdt,"IBertForTokenClassification"),Pdt.forEach(t),bNo=r(b9e," (I-BERT model)"),b9e.forEach(t),vNo=i(J),yv=n(J,"LI",{});var v9e=s(yv);ege=n(v9e,"STRONG",{});var Bdt=s(ege);FNo=r(Bdt,"layoutlm"),Bdt.forEach(t),TNo=r(v9e," \u2014 "),vO=n(v9e,"A",{href:!0});var Idt=s(vO);MNo=r(Idt,"LayoutLMForTokenClassification"),Idt.forEach(t),ENo=r(v9e," (LayoutLM model)"),v9e.forEach(t),CNo=i(J),Lv=n(J,"LI",{});var F9e=s(Lv);oge=n(F9e,"STRONG",{});var qdt=s(oge);wNo=r(qdt,"layoutlmv2"),qdt.forEach(t),ANo=r(F9e," \u2014 "),FO=n(F9e,"A",{href:!0});var Ndt=s(FO);yNo=r(Ndt,"LayoutLMv2ForTokenClassification"),Ndt.forEach(t),LNo=r(F9e," (LayoutLMv2 model)"),F9e.forEach(t),xNo=i(J),xv=n(J,"LI",{});var T9e=s(xv);rge=n(T9e,"STRONG",{});var jdt=s(rge);$No=r(jdt,"longformer"),jdt.forEach(t),kNo=r(T9e," \u2014 "),TO=n(T9e,"A",{href:!0});var Ddt=s(TO);SNo=r(Ddt,"LongformerForTokenClassification"),Ddt.forEach(t),RNo=r(T9e," (Longformer model)"),T9e.forEach(t),PNo=i(J),$v=n(J,"LI",{});var M9e=s($v);tge=n(M9e,"STRONG",{});var Gdt=s(tge);BNo=r(Gdt,"megatron-bert"),Gdt.forEach(t),INo=r(M9e," \u2014 "),MO=n(M9e,"A",{href:!0});var Odt=s(MO);qNo=r(Odt,"MegatronBertForTokenClassification"),Odt.forEach(t),NNo=r(M9e," (MegatronBert model)"),M9e.forEach(t),jNo=i(J),kv=n(J,"LI",{});var E9e=s(kv);age=n(E9e,"STRONG",{});var Vdt=s(age);DNo=r(Vdt,"mobilebert"),Vdt.forEach(t),GNo=r(E9e," \u2014 "),EO=n(E9e,"A",{href:!0});var Xdt=s(EO);ONo=r(Xdt,"MobileBertForTokenClassification"),Xdt.forEach(t),VNo=r(E9e," (MobileBERT model)"),E9e.forEach(t),XNo=i(J),Sv=n(J,"LI",{});var C9e=s(Sv);nge=n(C9e,"STRONG",{});var zdt=s(nge);zNo=r(zdt,"mpnet"),zdt.forEach(t),WNo=r(C9e," \u2014 "),CO=n(C9e,"A",{href:!0});var Wdt=s(CO);QNo=r(Wdt,"MPNetForTokenClassification"),Wdt.forEach(t),HNo=r(C9e," (MPNet model)"),C9e.forEach(t),UNo=i(J),Rv=n(J,"LI",{});var w9e=s(Rv);sge=n(w9e,"STRONG",{});var Qdt=s(sge);JNo=r(Qdt,"nystromformer"),Qdt.forEach(t),YNo=r(w9e," \u2014 "),wO=n(w9e,"A",{href:!0});var Hdt=s(wO);KNo=r(Hdt,"NystromformerForTokenClassification"),Hdt.forEach(t),ZNo=r(w9e," (Nystromformer model)"),w9e.forEach(t),ejo=i(J),Pv=n(J,"LI",{});var A9e=s(Pv);lge=n(A9e,"STRONG",{});var Udt=s(lge);ojo=r(Udt,"qdqbert"),Udt.forEach(t),rjo=r(A9e," \u2014 "),AO=n(A9e,"A",{href:!0});var Jdt=s(AO);tjo=r(Jdt,"QDQBertForTokenClassification"),Jdt.forEach(t),ajo=r(A9e," (QDQBert model)"),A9e.forEach(t),njo=i(J),Bv=n(J,"LI",{});var y9e=s(Bv);ige=n(y9e,"STRONG",{});var Ydt=s(ige);sjo=r(Ydt,"rembert"),Ydt.forEach(t),ljo=r(y9e," \u2014 "),yO=n(y9e,"A",{href:!0});var Kdt=s(yO);ijo=r(Kdt,"RemBertForTokenClassification"),Kdt.forEach(t),djo=r(y9e," (RemBERT model)"),y9e.forEach(t),cjo=i(J),Iv=n(J,"LI",{});var L9e=s(Iv);dge=n(L9e,"STRONG",{});var Zdt=s(dge);fjo=r(Zdt,"roberta"),Zdt.forEach(t),mjo=r(L9e," \u2014 "),LO=n(L9e,"A",{href:!0});var ect=s(LO);gjo=r(ect,"RobertaForTokenClassification"),ect.forEach(t),hjo=r(L9e," (RoBERTa model)"),L9e.forEach(t),pjo=i(J),qv=n(J,"LI",{});var x9e=s(qv);cge=n(x9e,"STRONG",{});var oct=s(cge);ujo=r(oct,"roformer"),oct.forEach(t),_jo=r(x9e," \u2014 "),xO=n(x9e,"A",{href:!0});var rct=s(xO);bjo=r(rct,"RoFormerForTokenClassification"),rct.forEach(t),vjo=r(x9e," (RoFormer model)"),x9e.forEach(t),Fjo=i(J),Nv=n(J,"LI",{});var $9e=s(Nv);fge=n($9e,"STRONG",{});var tct=s(fge);Tjo=r(tct,"squeezebert"),tct.forEach(t),Mjo=r($9e," \u2014 "),$O=n($9e,"A",{href:!0});var act=s($O);Ejo=r(act,"SqueezeBertForTokenClassification"),act.forEach(t),Cjo=r($9e," (SqueezeBERT model)"),$9e.forEach(t),wjo=i(J),jv=n(J,"LI",{});var k9e=s(jv);mge=n(k9e,"STRONG",{});var nct=s(mge);Ajo=r(nct,"xlm"),nct.forEach(t),yjo=r(k9e," \u2014 "),kO=n(k9e,"A",{href:!0});var sct=s(kO);Ljo=r(sct,"XLMForTokenClassification"),sct.forEach(t),xjo=r(k9e," (XLM model)"),k9e.forEach(t),$jo=i(J),Dv=n(J,"LI",{});var S9e=s(Dv);gge=n(S9e,"STRONG",{});var lct=s(gge);kjo=r(lct,"xlm-roberta"),lct.forEach(t),Sjo=r(S9e," \u2014 "),SO=n(S9e,"A",{href:!0});var ict=s(SO);Rjo=r(ict,"XLMRobertaForTokenClassification"),ict.forEach(t),Pjo=r(S9e," (XLM-RoBERTa model)"),S9e.forEach(t),Bjo=i(J),Gv=n(J,"LI",{});var R9e=s(Gv);hge=n(R9e,"STRONG",{});var dct=s(hge);Ijo=r(dct,"xlm-roberta-xl"),dct.forEach(t),qjo=r(R9e," \u2014 "),RO=n(R9e,"A",{href:!0});var cct=s(RO);Njo=r(cct,"XLMRobertaXLForTokenClassification"),cct.forEach(t),jjo=r(R9e," (XLM-RoBERTa-XL model)"),R9e.forEach(t),Djo=i(J),Ov=n(J,"LI",{});var P9e=s(Ov);pge=n(P9e,"STRONG",{});var fct=s(pge);Gjo=r(fct,"xlnet"),fct.forEach(t),Ojo=r(P9e," \u2014 "),PO=n(P9e,"A",{href:!0});var mct=s(PO);Vjo=r(mct,"XLNetForTokenClassification"),mct.forEach(t),Xjo=r(P9e," (XLNet model)"),P9e.forEach(t),zjo=i(J),Vv=n(J,"LI",{});var B9e=s(Vv);uge=n(B9e,"STRONG",{});var gct=s(uge);Wjo=r(gct,"yoso"),gct.forEach(t),Qjo=r(B9e," \u2014 "),BO=n(B9e,"A",{href:!0});var hct=s(BO);Hjo=r(hct,"YosoForTokenClassification"),hct.forEach(t),Ujo=r(B9e," (YOSO model)"),B9e.forEach(t),J.forEach(t),Jjo=i(da),Xv=n(da,"P",{});var I9e=s(Xv);Yjo=r(I9e,"The model is set in evaluation mode by default using "),_ge=n(I9e,"CODE",{});var pct=s(_ge);Kjo=r(pct,"model.eval()"),pct.forEach(t),Zjo=r(I9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(I9e,"CODE",{});var uct=s(bge);eDo=r(uct,"model.train()"),uct.forEach(t),I9e.forEach(t),oDo=i(da),T(zv.$$.fragment,da),da.forEach(t),Hs.forEach(t),HIe=i(f),Ji=n(f,"H2",{class:!0});var KNe=s(Ji);Wv=n(KNe,"A",{id:!0,class:!0,href:!0});var _ct=s(Wv);vge=n(_ct,"SPAN",{});var bct=s(vge);T(Ty.$$.fragment,bct),bct.forEach(t),_ct.forEach(t),rDo=i(KNe),Fge=n(KNe,"SPAN",{});var vct=s(Fge);tDo=r(vct,"AutoModelForQuestionAnswering"),vct.forEach(t),KNe.forEach(t),UIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(My.$$.fragment,Us),aDo=i(Us),Yi=n(Us,"P",{});var DK=s(Yi);nDo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IO=n(DK,"A",{href:!0});var Fct=s(IO);sDo=r(Fct,"from_pretrained()"),Fct.forEach(t),lDo=r(DK," class method or the "),qO=n(DK,"A",{href:!0});var Tct=s(qO);iDo=r(Tct,"from_config()"),Tct.forEach(t),dDo=r(DK,` class
method.`),DK.forEach(t),cDo=i(Us),Ey=n(Us,"P",{});var ZNe=s(Ey);fDo=r(ZNe,"This class cannot be instantiated directly using "),Tge=n(ZNe,"CODE",{});var Mct=s(Tge);mDo=r(Mct,"__init__()"),Mct.forEach(t),gDo=r(ZNe," (throws an error)."),ZNe.forEach(t),hDo=i(Us),mt=n(Us,"DIV",{class:!0});var yw=s(mt);T(Cy.$$.fragment,yw),pDo=i(yw),Mge=n(yw,"P",{});var Ect=s(Mge);uDo=r(Ect,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ect.forEach(t),_Do=i(yw),Ki=n(yw,"P",{});var GK=s(Ki);bDo=r(GK,`Note:
Loading a model from its configuration file does `),Ege=n(GK,"STRONG",{});var Cct=s(Ege);vDo=r(Cct,"not"),Cct.forEach(t),FDo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(GK,"A",{href:!0});var wct=s(NO);TDo=r(wct,"from_pretrained()"),wct.forEach(t),MDo=r(GK," to load the model weights."),GK.forEach(t),EDo=i(yw),T(Qv.$$.fragment,yw),yw.forEach(t),CDo=i(Us),no=n(Us,"DIV",{class:!0});var ca=s(no);T(wy.$$.fragment,ca),wDo=i(ca),Cge=n(ca,"P",{});var Act=s(Cge);ADo=r(Act,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Act.forEach(t),yDo=i(ca),qa=n(ca,"P",{});var Lw=s(qa);LDo=r(Lw,"The model class to instantiate is selected based on the "),wge=n(Lw,"CODE",{});var yct=s(wge);xDo=r(yct,"model_type"),yct.forEach(t),$Do=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Age=n(Lw,"CODE",{});var Lct=s(Age);kDo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),SDo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(Lw,"CODE",{});var xct=s(yge);RDo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),PDo=r(Lw,":"),Lw.forEach(t),BDo=i(ca),V=n(ca,"UL",{});var X=s(V);Hv=n(X,"LI",{});var q9e=s(Hv);Lge=n(q9e,"STRONG",{});var $ct=s(Lge);IDo=r($ct,"albert"),$ct.forEach(t),qDo=r(q9e," \u2014 "),jO=n(q9e,"A",{href:!0});var kct=s(jO);NDo=r(kct,"AlbertForQuestionAnswering"),kct.forEach(t),jDo=r(q9e," (ALBERT model)"),q9e.forEach(t),DDo=i(X),Uv=n(X,"LI",{});var N9e=s(Uv);xge=n(N9e,"STRONG",{});var Sct=s(xge);GDo=r(Sct,"bart"),Sct.forEach(t),ODo=r(N9e," \u2014 "),DO=n(N9e,"A",{href:!0});var Rct=s(DO);VDo=r(Rct,"BartForQuestionAnswering"),Rct.forEach(t),XDo=r(N9e," (BART model)"),N9e.forEach(t),zDo=i(X),Jv=n(X,"LI",{});var j9e=s(Jv);$ge=n(j9e,"STRONG",{});var Pct=s($ge);WDo=r(Pct,"bert"),Pct.forEach(t),QDo=r(j9e," \u2014 "),GO=n(j9e,"A",{href:!0});var Bct=s(GO);HDo=r(Bct,"BertForQuestionAnswering"),Bct.forEach(t),UDo=r(j9e," (BERT model)"),j9e.forEach(t),JDo=i(X),Yv=n(X,"LI",{});var D9e=s(Yv);kge=n(D9e,"STRONG",{});var Ict=s(kge);YDo=r(Ict,"big_bird"),Ict.forEach(t),KDo=r(D9e," \u2014 "),OO=n(D9e,"A",{href:!0});var qct=s(OO);ZDo=r(qct,"BigBirdForQuestionAnswering"),qct.forEach(t),eGo=r(D9e," (BigBird model)"),D9e.forEach(t),oGo=i(X),Kv=n(X,"LI",{});var G9e=s(Kv);Sge=n(G9e,"STRONG",{});var Nct=s(Sge);rGo=r(Nct,"bigbird_pegasus"),Nct.forEach(t),tGo=r(G9e," \u2014 "),VO=n(G9e,"A",{href:!0});var jct=s(VO);aGo=r(jct,"BigBirdPegasusForQuestionAnswering"),jct.forEach(t),nGo=r(G9e," (BigBirdPegasus model)"),G9e.forEach(t),sGo=i(X),Zv=n(X,"LI",{});var O9e=s(Zv);Rge=n(O9e,"STRONG",{});var Dct=s(Rge);lGo=r(Dct,"camembert"),Dct.forEach(t),iGo=r(O9e," \u2014 "),XO=n(O9e,"A",{href:!0});var Gct=s(XO);dGo=r(Gct,"CamembertForQuestionAnswering"),Gct.forEach(t),cGo=r(O9e," (CamemBERT model)"),O9e.forEach(t),fGo=i(X),eF=n(X,"LI",{});var V9e=s(eF);Pge=n(V9e,"STRONG",{});var Oct=s(Pge);mGo=r(Oct,"canine"),Oct.forEach(t),gGo=r(V9e," \u2014 "),zO=n(V9e,"A",{href:!0});var Vct=s(zO);hGo=r(Vct,"CanineForQuestionAnswering"),Vct.forEach(t),pGo=r(V9e," (Canine model)"),V9e.forEach(t),uGo=i(X),oF=n(X,"LI",{});var X9e=s(oF);Bge=n(X9e,"STRONG",{});var Xct=s(Bge);_Go=r(Xct,"convbert"),Xct.forEach(t),bGo=r(X9e," \u2014 "),WO=n(X9e,"A",{href:!0});var zct=s(WO);vGo=r(zct,"ConvBertForQuestionAnswering"),zct.forEach(t),FGo=r(X9e," (ConvBERT model)"),X9e.forEach(t),TGo=i(X),rF=n(X,"LI",{});var z9e=s(rF);Ige=n(z9e,"STRONG",{});var Wct=s(Ige);MGo=r(Wct,"data2vec-text"),Wct.forEach(t),EGo=r(z9e," \u2014 "),QO=n(z9e,"A",{href:!0});var Qct=s(QO);CGo=r(Qct,"Data2VecTextForQuestionAnswering"),Qct.forEach(t),wGo=r(z9e," (Data2VecText model)"),z9e.forEach(t),AGo=i(X),tF=n(X,"LI",{});var W9e=s(tF);qge=n(W9e,"STRONG",{});var Hct=s(qge);yGo=r(Hct,"deberta"),Hct.forEach(t),LGo=r(W9e," \u2014 "),HO=n(W9e,"A",{href:!0});var Uct=s(HO);xGo=r(Uct,"DebertaForQuestionAnswering"),Uct.forEach(t),$Go=r(W9e," (DeBERTa model)"),W9e.forEach(t),kGo=i(X),aF=n(X,"LI",{});var Q9e=s(aF);Nge=n(Q9e,"STRONG",{});var Jct=s(Nge);SGo=r(Jct,"deberta-v2"),Jct.forEach(t),RGo=r(Q9e," \u2014 "),UO=n(Q9e,"A",{href:!0});var Yct=s(UO);PGo=r(Yct,"DebertaV2ForQuestionAnswering"),Yct.forEach(t),BGo=r(Q9e," (DeBERTa-v2 model)"),Q9e.forEach(t),IGo=i(X),nF=n(X,"LI",{});var H9e=s(nF);jge=n(H9e,"STRONG",{});var Kct=s(jge);qGo=r(Kct,"distilbert"),Kct.forEach(t),NGo=r(H9e," \u2014 "),JO=n(H9e,"A",{href:!0});var Zct=s(JO);jGo=r(Zct,"DistilBertForQuestionAnswering"),Zct.forEach(t),DGo=r(H9e," (DistilBERT model)"),H9e.forEach(t),GGo=i(X),sF=n(X,"LI",{});var U9e=s(sF);Dge=n(U9e,"STRONG",{});var eft=s(Dge);OGo=r(eft,"electra"),eft.forEach(t),VGo=r(U9e," \u2014 "),YO=n(U9e,"A",{href:!0});var oft=s(YO);XGo=r(oft,"ElectraForQuestionAnswering"),oft.forEach(t),zGo=r(U9e," (ELECTRA model)"),U9e.forEach(t),WGo=i(X),lF=n(X,"LI",{});var J9e=s(lF);Gge=n(J9e,"STRONG",{});var rft=s(Gge);QGo=r(rft,"flaubert"),rft.forEach(t),HGo=r(J9e," \u2014 "),KO=n(J9e,"A",{href:!0});var tft=s(KO);UGo=r(tft,"FlaubertForQuestionAnsweringSimple"),tft.forEach(t),JGo=r(J9e," (FlauBERT model)"),J9e.forEach(t),YGo=i(X),iF=n(X,"LI",{});var Y9e=s(iF);Oge=n(Y9e,"STRONG",{});var aft=s(Oge);KGo=r(aft,"fnet"),aft.forEach(t),ZGo=r(Y9e," \u2014 "),ZO=n(Y9e,"A",{href:!0});var nft=s(ZO);eOo=r(nft,"FNetForQuestionAnswering"),nft.forEach(t),oOo=r(Y9e," (FNet model)"),Y9e.forEach(t),rOo=i(X),dF=n(X,"LI",{});var K9e=s(dF);Vge=n(K9e,"STRONG",{});var sft=s(Vge);tOo=r(sft,"funnel"),sft.forEach(t),aOo=r(K9e," \u2014 "),eV=n(K9e,"A",{href:!0});var lft=s(eV);nOo=r(lft,"FunnelForQuestionAnswering"),lft.forEach(t),sOo=r(K9e," (Funnel Transformer model)"),K9e.forEach(t),lOo=i(X),cF=n(X,"LI",{});var Z9e=s(cF);Xge=n(Z9e,"STRONG",{});var ift=s(Xge);iOo=r(ift,"gptj"),ift.forEach(t),dOo=r(Z9e," \u2014 "),oV=n(Z9e,"A",{href:!0});var dft=s(oV);cOo=r(dft,"GPTJForQuestionAnswering"),dft.forEach(t),fOo=r(Z9e," (GPT-J model)"),Z9e.forEach(t),mOo=i(X),fF=n(X,"LI",{});var e7e=s(fF);zge=n(e7e,"STRONG",{});var cft=s(zge);gOo=r(cft,"ibert"),cft.forEach(t),hOo=r(e7e," \u2014 "),rV=n(e7e,"A",{href:!0});var fft=s(rV);pOo=r(fft,"IBertForQuestionAnswering"),fft.forEach(t),uOo=r(e7e," (I-BERT model)"),e7e.forEach(t),_Oo=i(X),mF=n(X,"LI",{});var o7e=s(mF);Wge=n(o7e,"STRONG",{});var mft=s(Wge);bOo=r(mft,"layoutlmv2"),mft.forEach(t),vOo=r(o7e," \u2014 "),tV=n(o7e,"A",{href:!0});var gft=s(tV);FOo=r(gft,"LayoutLMv2ForQuestionAnswering"),gft.forEach(t),TOo=r(o7e," (LayoutLMv2 model)"),o7e.forEach(t),MOo=i(X),gF=n(X,"LI",{});var r7e=s(gF);Qge=n(r7e,"STRONG",{});var hft=s(Qge);EOo=r(hft,"led"),hft.forEach(t),COo=r(r7e," \u2014 "),aV=n(r7e,"A",{href:!0});var pft=s(aV);wOo=r(pft,"LEDForQuestionAnswering"),pft.forEach(t),AOo=r(r7e," (LED model)"),r7e.forEach(t),yOo=i(X),hF=n(X,"LI",{});var t7e=s(hF);Hge=n(t7e,"STRONG",{});var uft=s(Hge);LOo=r(uft,"longformer"),uft.forEach(t),xOo=r(t7e," \u2014 "),nV=n(t7e,"A",{href:!0});var _ft=s(nV);$Oo=r(_ft,"LongformerForQuestionAnswering"),_ft.forEach(t),kOo=r(t7e," (Longformer model)"),t7e.forEach(t),SOo=i(X),pF=n(X,"LI",{});var a7e=s(pF);Uge=n(a7e,"STRONG",{});var bft=s(Uge);ROo=r(bft,"lxmert"),bft.forEach(t),POo=r(a7e," \u2014 "),sV=n(a7e,"A",{href:!0});var vft=s(sV);BOo=r(vft,"LxmertForQuestionAnswering"),vft.forEach(t),IOo=r(a7e," (LXMERT model)"),a7e.forEach(t),qOo=i(X),uF=n(X,"LI",{});var n7e=s(uF);Jge=n(n7e,"STRONG",{});var Fft=s(Jge);NOo=r(Fft,"mbart"),Fft.forEach(t),jOo=r(n7e," \u2014 "),lV=n(n7e,"A",{href:!0});var Tft=s(lV);DOo=r(Tft,"MBartForQuestionAnswering"),Tft.forEach(t),GOo=r(n7e," (mBART model)"),n7e.forEach(t),OOo=i(X),_F=n(X,"LI",{});var s7e=s(_F);Yge=n(s7e,"STRONG",{});var Mft=s(Yge);VOo=r(Mft,"megatron-bert"),Mft.forEach(t),XOo=r(s7e," \u2014 "),iV=n(s7e,"A",{href:!0});var Eft=s(iV);zOo=r(Eft,"MegatronBertForQuestionAnswering"),Eft.forEach(t),WOo=r(s7e," (MegatronBert model)"),s7e.forEach(t),QOo=i(X),bF=n(X,"LI",{});var l7e=s(bF);Kge=n(l7e,"STRONG",{});var Cft=s(Kge);HOo=r(Cft,"mobilebert"),Cft.forEach(t),UOo=r(l7e," \u2014 "),dV=n(l7e,"A",{href:!0});var wft=s(dV);JOo=r(wft,"MobileBertForQuestionAnswering"),wft.forEach(t),YOo=r(l7e," (MobileBERT model)"),l7e.forEach(t),KOo=i(X),vF=n(X,"LI",{});var i7e=s(vF);Zge=n(i7e,"STRONG",{});var Aft=s(Zge);ZOo=r(Aft,"mpnet"),Aft.forEach(t),eVo=r(i7e," \u2014 "),cV=n(i7e,"A",{href:!0});var yft=s(cV);oVo=r(yft,"MPNetForQuestionAnswering"),yft.forEach(t),rVo=r(i7e," (MPNet model)"),i7e.forEach(t),tVo=i(X),FF=n(X,"LI",{});var d7e=s(FF);ehe=n(d7e,"STRONG",{});var Lft=s(ehe);aVo=r(Lft,"nystromformer"),Lft.forEach(t),nVo=r(d7e," \u2014 "),fV=n(d7e,"A",{href:!0});var xft=s(fV);sVo=r(xft,"NystromformerForQuestionAnswering"),xft.forEach(t),lVo=r(d7e," (Nystromformer model)"),d7e.forEach(t),iVo=i(X),TF=n(X,"LI",{});var c7e=s(TF);ohe=n(c7e,"STRONG",{});var $ft=s(ohe);dVo=r($ft,"qdqbert"),$ft.forEach(t),cVo=r(c7e," \u2014 "),mV=n(c7e,"A",{href:!0});var kft=s(mV);fVo=r(kft,"QDQBertForQuestionAnswering"),kft.forEach(t),mVo=r(c7e," (QDQBert model)"),c7e.forEach(t),gVo=i(X),MF=n(X,"LI",{});var f7e=s(MF);rhe=n(f7e,"STRONG",{});var Sft=s(rhe);hVo=r(Sft,"reformer"),Sft.forEach(t),pVo=r(f7e," \u2014 "),gV=n(f7e,"A",{href:!0});var Rft=s(gV);uVo=r(Rft,"ReformerForQuestionAnswering"),Rft.forEach(t),_Vo=r(f7e," (Reformer model)"),f7e.forEach(t),bVo=i(X),EF=n(X,"LI",{});var m7e=s(EF);the=n(m7e,"STRONG",{});var Pft=s(the);vVo=r(Pft,"rembert"),Pft.forEach(t),FVo=r(m7e," \u2014 "),hV=n(m7e,"A",{href:!0});var Bft=s(hV);TVo=r(Bft,"RemBertForQuestionAnswering"),Bft.forEach(t),MVo=r(m7e," (RemBERT model)"),m7e.forEach(t),EVo=i(X),CF=n(X,"LI",{});var g7e=s(CF);ahe=n(g7e,"STRONG",{});var Ift=s(ahe);CVo=r(Ift,"roberta"),Ift.forEach(t),wVo=r(g7e," \u2014 "),pV=n(g7e,"A",{href:!0});var qft=s(pV);AVo=r(qft,"RobertaForQuestionAnswering"),qft.forEach(t),yVo=r(g7e," (RoBERTa model)"),g7e.forEach(t),LVo=i(X),wF=n(X,"LI",{});var h7e=s(wF);nhe=n(h7e,"STRONG",{});var Nft=s(nhe);xVo=r(Nft,"roformer"),Nft.forEach(t),$Vo=r(h7e," \u2014 "),uV=n(h7e,"A",{href:!0});var jft=s(uV);kVo=r(jft,"RoFormerForQuestionAnswering"),jft.forEach(t),SVo=r(h7e," (RoFormer model)"),h7e.forEach(t),RVo=i(X),AF=n(X,"LI",{});var p7e=s(AF);she=n(p7e,"STRONG",{});var Dft=s(she);PVo=r(Dft,"splinter"),Dft.forEach(t),BVo=r(p7e," \u2014 "),_V=n(p7e,"A",{href:!0});var Gft=s(_V);IVo=r(Gft,"SplinterForQuestionAnswering"),Gft.forEach(t),qVo=r(p7e," (Splinter model)"),p7e.forEach(t),NVo=i(X),yF=n(X,"LI",{});var u7e=s(yF);lhe=n(u7e,"STRONG",{});var Oft=s(lhe);jVo=r(Oft,"squeezebert"),Oft.forEach(t),DVo=r(u7e," \u2014 "),bV=n(u7e,"A",{href:!0});var Vft=s(bV);GVo=r(Vft,"SqueezeBertForQuestionAnswering"),Vft.forEach(t),OVo=r(u7e," (SqueezeBERT model)"),u7e.forEach(t),VVo=i(X),LF=n(X,"LI",{});var _7e=s(LF);ihe=n(_7e,"STRONG",{});var Xft=s(ihe);XVo=r(Xft,"xlm"),Xft.forEach(t),zVo=r(_7e," \u2014 "),vV=n(_7e,"A",{href:!0});var zft=s(vV);WVo=r(zft,"XLMForQuestionAnsweringSimple"),zft.forEach(t),QVo=r(_7e," (XLM model)"),_7e.forEach(t),HVo=i(X),xF=n(X,"LI",{});var b7e=s(xF);dhe=n(b7e,"STRONG",{});var Wft=s(dhe);UVo=r(Wft,"xlm-roberta"),Wft.forEach(t),JVo=r(b7e," \u2014 "),FV=n(b7e,"A",{href:!0});var Qft=s(FV);YVo=r(Qft,"XLMRobertaForQuestionAnswering"),Qft.forEach(t),KVo=r(b7e," (XLM-RoBERTa model)"),b7e.forEach(t),ZVo=i(X),$F=n(X,"LI",{});var v7e=s($F);che=n(v7e,"STRONG",{});var Hft=s(che);eXo=r(Hft,"xlm-roberta-xl"),Hft.forEach(t),oXo=r(v7e," \u2014 "),TV=n(v7e,"A",{href:!0});var Uft=s(TV);rXo=r(Uft,"XLMRobertaXLForQuestionAnswering"),Uft.forEach(t),tXo=r(v7e," (XLM-RoBERTa-XL model)"),v7e.forEach(t),aXo=i(X),kF=n(X,"LI",{});var F7e=s(kF);fhe=n(F7e,"STRONG",{});var Jft=s(fhe);nXo=r(Jft,"xlnet"),Jft.forEach(t),sXo=r(F7e," \u2014 "),MV=n(F7e,"A",{href:!0});var Yft=s(MV);lXo=r(Yft,"XLNetForQuestionAnsweringSimple"),Yft.forEach(t),iXo=r(F7e," (XLNet model)"),F7e.forEach(t),dXo=i(X),SF=n(X,"LI",{});var T7e=s(SF);mhe=n(T7e,"STRONG",{});var Kft=s(mhe);cXo=r(Kft,"yoso"),Kft.forEach(t),fXo=r(T7e," \u2014 "),EV=n(T7e,"A",{href:!0});var Zft=s(EV);mXo=r(Zft,"YosoForQuestionAnswering"),Zft.forEach(t),gXo=r(T7e," (YOSO model)"),T7e.forEach(t),X.forEach(t),hXo=i(ca),RF=n(ca,"P",{});var M7e=s(RF);pXo=r(M7e,"The model is set in evaluation mode by default using "),ghe=n(M7e,"CODE",{});var emt=s(ghe);uXo=r(emt,"model.eval()"),emt.forEach(t),_Xo=r(M7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=n(M7e,"CODE",{});var omt=s(hhe);bXo=r(omt,"model.train()"),omt.forEach(t),M7e.forEach(t),vXo=i(ca),T(PF.$$.fragment,ca),ca.forEach(t),Us.forEach(t),JIe=i(f),Zi=n(f,"H2",{class:!0});var eje=s(Zi);BF=n(eje,"A",{id:!0,class:!0,href:!0});var rmt=s(BF);phe=n(rmt,"SPAN",{});var tmt=s(phe);T(Ay.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),FXo=i(eje),uhe=n(eje,"SPAN",{});var amt=s(uhe);TXo=r(amt,"AutoModelForTableQuestionAnswering"),amt.forEach(t),eje.forEach(t),YIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(yy.$$.fragment,Js),MXo=i(Js),ed=n(Js,"P",{});var OK=s(ed);EXo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CV=n(OK,"A",{href:!0});var nmt=s(CV);CXo=r(nmt,"from_pretrained()"),nmt.forEach(t),wXo=r(OK," class method or the "),wV=n(OK,"A",{href:!0});var smt=s(wV);AXo=r(smt,"from_config()"),smt.forEach(t),yXo=r(OK,` class
method.`),OK.forEach(t),LXo=i(Js),Ly=n(Js,"P",{});var oje=s(Ly);xXo=r(oje,"This class cannot be instantiated directly using "),_he=n(oje,"CODE",{});var lmt=s(_he);$Xo=r(lmt,"__init__()"),lmt.forEach(t),kXo=r(oje," (throws an error)."),oje.forEach(t),SXo=i(Js),gt=n(Js,"DIV",{class:!0});var xw=s(gt);T(xy.$$.fragment,xw),RXo=i(xw),bhe=n(xw,"P",{});var imt=s(bhe);PXo=r(imt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),imt.forEach(t),BXo=i(xw),od=n(xw,"P",{});var VK=s(od);IXo=r(VK,`Note:
Loading a model from its configuration file does `),vhe=n(VK,"STRONG",{});var dmt=s(vhe);qXo=r(dmt,"not"),dmt.forEach(t),NXo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(VK,"A",{href:!0});var cmt=s(AV);jXo=r(cmt,"from_pretrained()"),cmt.forEach(t),DXo=r(VK," to load the model weights."),VK.forEach(t),GXo=i(xw),T(IF.$$.fragment,xw),xw.forEach(t),OXo=i(Js),so=n(Js,"DIV",{class:!0});var fa=s(so);T($y.$$.fragment,fa),VXo=i(fa),Fhe=n(fa,"P",{});var fmt=s(Fhe);XXo=r(fmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fmt.forEach(t),zXo=i(fa),Na=n(fa,"P",{});var $w=s(Na);WXo=r($w,"The model class to instantiate is selected based on the "),The=n($w,"CODE",{});var mmt=s(The);QXo=r(mmt,"model_type"),mmt.forEach(t),HXo=r($w,` property of the config object (either
passed as an argument or loaded from `),Mhe=n($w,"CODE",{});var gmt=s(Mhe);UXo=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),JXo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n($w,"CODE",{});var hmt=s(Ehe);YXo=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),KXo=r($w,":"),$w.forEach(t),ZXo=i(fa),Che=n(fa,"UL",{});var pmt=s(Che);qF=n(pmt,"LI",{});var E7e=s(qF);whe=n(E7e,"STRONG",{});var umt=s(whe);ezo=r(umt,"tapas"),umt.forEach(t),ozo=r(E7e," \u2014 "),yV=n(E7e,"A",{href:!0});var _mt=s(yV);rzo=r(_mt,"TapasForQuestionAnswering"),_mt.forEach(t),tzo=r(E7e," (TAPAS model)"),E7e.forEach(t),pmt.forEach(t),azo=i(fa),NF=n(fa,"P",{});var C7e=s(NF);nzo=r(C7e,"The model is set in evaluation mode by default using "),Ahe=n(C7e,"CODE",{});var bmt=s(Ahe);szo=r(bmt,"model.eval()"),bmt.forEach(t),lzo=r(C7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(C7e,"CODE",{});var vmt=s(yhe);izo=r(vmt,"model.train()"),vmt.forEach(t),C7e.forEach(t),dzo=i(fa),T(jF.$$.fragment,fa),fa.forEach(t),Js.forEach(t),KIe=i(f),rd=n(f,"H2",{class:!0});var rje=s(rd);DF=n(rje,"A",{id:!0,class:!0,href:!0});var Fmt=s(DF);Lhe=n(Fmt,"SPAN",{});var Tmt=s(Lhe);T(ky.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),czo=i(rje),xhe=n(rje,"SPAN",{});var Mmt=s(xhe);fzo=r(Mmt,"AutoModelForImageClassification"),Mmt.forEach(t),rje.forEach(t),ZIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(Sy.$$.fragment,Ys),mzo=i(Ys),td=n(Ys,"P",{});var XK=s(td);gzo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LV=n(XK,"A",{href:!0});var Emt=s(LV);hzo=r(Emt,"from_pretrained()"),Emt.forEach(t),pzo=r(XK," class method or the "),xV=n(XK,"A",{href:!0});var Cmt=s(xV);uzo=r(Cmt,"from_config()"),Cmt.forEach(t),_zo=r(XK,` class
method.`),XK.forEach(t),bzo=i(Ys),Ry=n(Ys,"P",{});var tje=s(Ry);vzo=r(tje,"This class cannot be instantiated directly using "),$he=n(tje,"CODE",{});var wmt=s($he);Fzo=r(wmt,"__init__()"),wmt.forEach(t),Tzo=r(tje," (throws an error)."),tje.forEach(t),Mzo=i(Ys),ht=n(Ys,"DIV",{class:!0});var kw=s(ht);T(Py.$$.fragment,kw),Ezo=i(kw),khe=n(kw,"P",{});var Amt=s(khe);Czo=r(Amt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Amt.forEach(t),wzo=i(kw),ad=n(kw,"P",{});var zK=s(ad);Azo=r(zK,`Note:
Loading a model from its configuration file does `),She=n(zK,"STRONG",{});var ymt=s(She);yzo=r(ymt,"not"),ymt.forEach(t),Lzo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(zK,"A",{href:!0});var Lmt=s($V);xzo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),$zo=r(zK," to load the model weights."),zK.forEach(t),kzo=i(kw),T(GF.$$.fragment,kw),kw.forEach(t),Szo=i(Ys),lo=n(Ys,"DIV",{class:!0});var ma=s(lo);T(By.$$.fragment,ma),Rzo=i(ma),Rhe=n(ma,"P",{});var xmt=s(Rhe);Pzo=r(xmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xmt.forEach(t),Bzo=i(ma),ja=n(ma,"P",{});var Sw=s(ja);Izo=r(Sw,"The model class to instantiate is selected based on the "),Phe=n(Sw,"CODE",{});var $mt=s(Phe);qzo=r($mt,"model_type"),$mt.forEach(t),Nzo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(Sw,"CODE",{});var kmt=s(Bhe);jzo=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),Dzo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(Sw,"CODE",{});var Smt=s(Ihe);Gzo=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),Ozo=r(Sw,":"),Sw.forEach(t),Vzo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);OF=n(Ee,"LI",{});var w7e=s(OF);qhe=n(w7e,"STRONG",{});var Rmt=s(qhe);Xzo=r(Rmt,"beit"),Rmt.forEach(t),zzo=r(w7e," \u2014 "),kV=n(w7e,"A",{href:!0});var Pmt=s(kV);Wzo=r(Pmt,"BeitForImageClassification"),Pmt.forEach(t),Qzo=r(w7e," (BEiT model)"),w7e.forEach(t),Hzo=i(Ee),VF=n(Ee,"LI",{});var A7e=s(VF);Nhe=n(A7e,"STRONG",{});var Bmt=s(Nhe);Uzo=r(Bmt,"convnext"),Bmt.forEach(t),Jzo=r(A7e," \u2014 "),SV=n(A7e,"A",{href:!0});var Imt=s(SV);Yzo=r(Imt,"ConvNextForImageClassification"),Imt.forEach(t),Kzo=r(A7e," (ConvNext model)"),A7e.forEach(t),Zzo=i(Ee),XF=n(Ee,"LI",{});var y7e=s(XF);jhe=n(y7e,"STRONG",{});var qmt=s(jhe);eWo=r(qmt,"data2vec-vision"),qmt.forEach(t),oWo=r(y7e," \u2014 "),RV=n(y7e,"A",{href:!0});var Nmt=s(RV);rWo=r(Nmt,"Data2VecVisionForImageClassification"),Nmt.forEach(t),tWo=r(y7e," (Data2VecVision model)"),y7e.forEach(t),aWo=i(Ee),Rs=n(Ee,"LI",{});var v$=s(Rs);Dhe=n(v$,"STRONG",{});var jmt=s(Dhe);nWo=r(jmt,"deit"),jmt.forEach(t),sWo=r(v$," \u2014 "),PV=n(v$,"A",{href:!0});var Dmt=s(PV);lWo=r(Dmt,"DeiTForImageClassification"),Dmt.forEach(t),iWo=r(v$," or "),BV=n(v$,"A",{href:!0});var Gmt=s(BV);dWo=r(Gmt,"DeiTForImageClassificationWithTeacher"),Gmt.forEach(t),cWo=r(v$," (DeiT model)"),v$.forEach(t),fWo=i(Ee),zF=n(Ee,"LI",{});var L7e=s(zF);Ghe=n(L7e,"STRONG",{});var Omt=s(Ghe);mWo=r(Omt,"imagegpt"),Omt.forEach(t),gWo=r(L7e," \u2014 "),IV=n(L7e,"A",{href:!0});var Vmt=s(IV);hWo=r(Vmt,"ImageGPTForImageClassification"),Vmt.forEach(t),pWo=r(L7e," (ImageGPT model)"),L7e.forEach(t),uWo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);Ohe=n(gf,"STRONG",{});var Xmt=s(Ohe);_Wo=r(Xmt,"perceiver"),Xmt.forEach(t),bWo=r(gf," \u2014 "),qV=n(gf,"A",{href:!0});var zmt=s(qV);vWo=r(zmt,"PerceiverForImageClassificationLearned"),zmt.forEach(t),FWo=r(gf," or "),NV=n(gf,"A",{href:!0});var Wmt=s(NV);TWo=r(Wmt,"PerceiverForImageClassificationFourier"),Wmt.forEach(t),MWo=r(gf," or "),jV=n(gf,"A",{href:!0});var Qmt=s(jV);EWo=r(Qmt,"PerceiverForImageClassificationConvProcessing"),Qmt.forEach(t),CWo=r(gf," (Perceiver model)"),gf.forEach(t),wWo=i(Ee),WF=n(Ee,"LI",{});var x7e=s(WF);Vhe=n(x7e,"STRONG",{});var Hmt=s(Vhe);AWo=r(Hmt,"poolformer"),Hmt.forEach(t),yWo=r(x7e," \u2014 "),DV=n(x7e,"A",{href:!0});var Umt=s(DV);LWo=r(Umt,"PoolFormerForImageClassification"),Umt.forEach(t),xWo=r(x7e," (PoolFormer model)"),x7e.forEach(t),$Wo=i(Ee),QF=n(Ee,"LI",{});var $7e=s(QF);Xhe=n($7e,"STRONG",{});var Jmt=s(Xhe);kWo=r(Jmt,"regnet"),Jmt.forEach(t),SWo=r($7e," \u2014 "),GV=n($7e,"A",{href:!0});var Ymt=s(GV);RWo=r(Ymt,"RegNetForImageClassification"),Ymt.forEach(t),PWo=r($7e," (RegNet model)"),$7e.forEach(t),BWo=i(Ee),HF=n(Ee,"LI",{});var k7e=s(HF);zhe=n(k7e,"STRONG",{});var Kmt=s(zhe);IWo=r(Kmt,"resnet"),Kmt.forEach(t),qWo=r(k7e," \u2014 "),OV=n(k7e,"A",{href:!0});var Zmt=s(OV);NWo=r(Zmt,"ResNetForImageClassification"),Zmt.forEach(t),jWo=r(k7e," (ResNet model)"),k7e.forEach(t),DWo=i(Ee),UF=n(Ee,"LI",{});var S7e=s(UF);Whe=n(S7e,"STRONG",{});var egt=s(Whe);GWo=r(egt,"segformer"),egt.forEach(t),OWo=r(S7e," \u2014 "),VV=n(S7e,"A",{href:!0});var ogt=s(VV);VWo=r(ogt,"SegformerForImageClassification"),ogt.forEach(t),XWo=r(S7e," (SegFormer model)"),S7e.forEach(t),zWo=i(Ee),JF=n(Ee,"LI",{});var R7e=s(JF);Qhe=n(R7e,"STRONG",{});var rgt=s(Qhe);WWo=r(rgt,"swin"),rgt.forEach(t),QWo=r(R7e," \u2014 "),XV=n(R7e,"A",{href:!0});var tgt=s(XV);HWo=r(tgt,"SwinForImageClassification"),tgt.forEach(t),UWo=r(R7e," (Swin model)"),R7e.forEach(t),JWo=i(Ee),YF=n(Ee,"LI",{});var P7e=s(YF);Hhe=n(P7e,"STRONG",{});var agt=s(Hhe);YWo=r(agt,"van"),agt.forEach(t),KWo=r(P7e," \u2014 "),zV=n(P7e,"A",{href:!0});var ngt=s(zV);ZWo=r(ngt,"VanForImageClassification"),ngt.forEach(t),eQo=r(P7e," (VAN model)"),P7e.forEach(t),oQo=i(Ee),KF=n(Ee,"LI",{});var B7e=s(KF);Uhe=n(B7e,"STRONG",{});var sgt=s(Uhe);rQo=r(sgt,"vit"),sgt.forEach(t),tQo=r(B7e," \u2014 "),WV=n(B7e,"A",{href:!0});var lgt=s(WV);aQo=r(lgt,"ViTForImageClassification"),lgt.forEach(t),nQo=r(B7e," (ViT model)"),B7e.forEach(t),Ee.forEach(t),sQo=i(ma),ZF=n(ma,"P",{});var I7e=s(ZF);lQo=r(I7e,"The model is set in evaluation mode by default using "),Jhe=n(I7e,"CODE",{});var igt=s(Jhe);iQo=r(igt,"model.eval()"),igt.forEach(t),dQo=r(I7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(I7e,"CODE",{});var dgt=s(Yhe);cQo=r(dgt,"model.train()"),dgt.forEach(t),I7e.forEach(t),fQo=i(ma),T(e6.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),eqe=i(f),nd=n(f,"H2",{class:!0});var aje=s(nd);o6=n(aje,"A",{id:!0,class:!0,href:!0});var cgt=s(o6);Khe=n(cgt,"SPAN",{});var fgt=s(Khe);T(Iy.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),mQo=i(aje),Zhe=n(aje,"SPAN",{});var mgt=s(Zhe);gQo=r(mgt,"AutoModelForVision2Seq"),mgt.forEach(t),aje.forEach(t),oqe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(qy.$$.fragment,Ks),hQo=i(Ks),sd=n(Ks,"P",{});var WK=s(sd);pQo=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QV=n(WK,"A",{href:!0});var ggt=s(QV);uQo=r(ggt,"from_pretrained()"),ggt.forEach(t),_Qo=r(WK," class method or the "),HV=n(WK,"A",{href:!0});var hgt=s(HV);bQo=r(hgt,"from_config()"),hgt.forEach(t),vQo=r(WK,` class
method.`),WK.forEach(t),FQo=i(Ks),Ny=n(Ks,"P",{});var nje=s(Ny);TQo=r(nje,"This class cannot be instantiated directly using "),epe=n(nje,"CODE",{});var pgt=s(epe);MQo=r(pgt,"__init__()"),pgt.forEach(t),EQo=r(nje," (throws an error)."),nje.forEach(t),CQo=i(Ks),ut=n(Ks,"DIV",{class:!0});var Rw=s(ut);T(jy.$$.fragment,Rw),wQo=i(Rw),ope=n(Rw,"P",{});var ugt=s(ope);AQo=r(ugt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ugt.forEach(t),yQo=i(Rw),ld=n(Rw,"P",{});var QK=s(ld);LQo=r(QK,`Note:
Loading a model from its configuration file does `),rpe=n(QK,"STRONG",{});var _gt=s(rpe);xQo=r(_gt,"not"),_gt.forEach(t),$Qo=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(QK,"A",{href:!0});var bgt=s(UV);kQo=r(bgt,"from_pretrained()"),bgt.forEach(t),SQo=r(QK," to load the model weights."),QK.forEach(t),RQo=i(Rw),T(r6.$$.fragment,Rw),Rw.forEach(t),PQo=i(Ks),io=n(Ks,"DIV",{class:!0});var ga=s(io);T(Dy.$$.fragment,ga),BQo=i(ga),tpe=n(ga,"P",{});var vgt=s(tpe);IQo=r(vgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vgt.forEach(t),qQo=i(ga),Da=n(ga,"P",{});var Pw=s(Da);NQo=r(Pw,"The model class to instantiate is selected based on the "),ape=n(Pw,"CODE",{});var Fgt=s(ape);jQo=r(Fgt,"model_type"),Fgt.forEach(t),DQo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),npe=n(Pw,"CODE",{});var Tgt=s(npe);GQo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),OQo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(Pw,"CODE",{});var Mgt=s(spe);VQo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),XQo=r(Pw,":"),Pw.forEach(t),zQo=i(ga),lpe=n(ga,"UL",{});var Egt=s(lpe);t6=n(Egt,"LI",{});var q7e=s(t6);ipe=n(q7e,"STRONG",{});var Cgt=s(ipe);WQo=r(Cgt,"vision-encoder-decoder"),Cgt.forEach(t),QQo=r(q7e," \u2014 "),JV=n(q7e,"A",{href:!0});var wgt=s(JV);HQo=r(wgt,"VisionEncoderDecoderModel"),wgt.forEach(t),UQo=r(q7e," (Vision Encoder decoder model)"),q7e.forEach(t),Egt.forEach(t),JQo=i(ga),a6=n(ga,"P",{});var N7e=s(a6);YQo=r(N7e,"The model is set in evaluation mode by default using "),dpe=n(N7e,"CODE",{});var Agt=s(dpe);KQo=r(Agt,"model.eval()"),Agt.forEach(t),ZQo=r(N7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(N7e,"CODE",{});var ygt=s(cpe);eHo=r(ygt,"model.train()"),ygt.forEach(t),N7e.forEach(t),oHo=i(ga),T(n6.$$.fragment,ga),ga.forEach(t),Ks.forEach(t),rqe=i(f),id=n(f,"H2",{class:!0});var sje=s(id);s6=n(sje,"A",{id:!0,class:!0,href:!0});var Lgt=s(s6);fpe=n(Lgt,"SPAN",{});var xgt=s(fpe);T(Gy.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),rHo=i(sje),mpe=n(sje,"SPAN",{});var $gt=s(mpe);tHo=r($gt,"AutoModelForAudioClassification"),$gt.forEach(t),sje.forEach(t),tqe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(Oy.$$.fragment,Zs),aHo=i(Zs),dd=n(Zs,"P",{});var HK=s(dd);nHo=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YV=n(HK,"A",{href:!0});var kgt=s(YV);sHo=r(kgt,"from_pretrained()"),kgt.forEach(t),lHo=r(HK," class method or the "),KV=n(HK,"A",{href:!0});var Sgt=s(KV);iHo=r(Sgt,"from_config()"),Sgt.forEach(t),dHo=r(HK,` class
method.`),HK.forEach(t),cHo=i(Zs),Vy=n(Zs,"P",{});var lje=s(Vy);fHo=r(lje,"This class cannot be instantiated directly using "),gpe=n(lje,"CODE",{});var Rgt=s(gpe);mHo=r(Rgt,"__init__()"),Rgt.forEach(t),gHo=r(lje," (throws an error)."),lje.forEach(t),hHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var Bw=s(_t);T(Xy.$$.fragment,Bw),pHo=i(Bw),hpe=n(Bw,"P",{});var Pgt=s(hpe);uHo=r(Pgt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Pgt.forEach(t),_Ho=i(Bw),cd=n(Bw,"P",{});var UK=s(cd);bHo=r(UK,`Note:
Loading a model from its configuration file does `),ppe=n(UK,"STRONG",{});var Bgt=s(ppe);vHo=r(Bgt,"not"),Bgt.forEach(t),FHo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(UK,"A",{href:!0});var Igt=s(ZV);THo=r(Igt,"from_pretrained()"),Igt.forEach(t),MHo=r(UK," to load the model weights."),UK.forEach(t),EHo=i(Bw),T(l6.$$.fragment,Bw),Bw.forEach(t),CHo=i(Zs),co=n(Zs,"DIV",{class:!0});var ha=s(co);T(zy.$$.fragment,ha),wHo=i(ha),upe=n(ha,"P",{});var qgt=s(upe);AHo=r(qgt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qgt.forEach(t),yHo=i(ha),Ga=n(ha,"P",{});var Iw=s(Ga);LHo=r(Iw,"The model class to instantiate is selected based on the "),_pe=n(Iw,"CODE",{});var Ngt=s(_pe);xHo=r(Ngt,"model_type"),Ngt.forEach(t),$Ho=r(Iw,` property of the config object (either
passed as an argument or loaded from `),bpe=n(Iw,"CODE",{});var jgt=s(bpe);kHo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),SHo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(Iw,"CODE",{});var Dgt=s(vpe);RHo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),PHo=r(Iw,":"),Iw.forEach(t),BHo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);i6=n(Oe,"LI",{});var j7e=s(i6);Fpe=n(j7e,"STRONG",{});var Ggt=s(Fpe);IHo=r(Ggt,"data2vec-audio"),Ggt.forEach(t),qHo=r(j7e," \u2014 "),eX=n(j7e,"A",{href:!0});var Ogt=s(eX);NHo=r(Ogt,"Data2VecAudioForSequenceClassification"),Ogt.forEach(t),jHo=r(j7e," (Data2VecAudio model)"),j7e.forEach(t),DHo=i(Oe),d6=n(Oe,"LI",{});var D7e=s(d6);Tpe=n(D7e,"STRONG",{});var Vgt=s(Tpe);GHo=r(Vgt,"hubert"),Vgt.forEach(t),OHo=r(D7e," \u2014 "),oX=n(D7e,"A",{href:!0});var Xgt=s(oX);VHo=r(Xgt,"HubertForSequenceClassification"),Xgt.forEach(t),XHo=r(D7e," (Hubert model)"),D7e.forEach(t),zHo=i(Oe),c6=n(Oe,"LI",{});var G7e=s(c6);Mpe=n(G7e,"STRONG",{});var zgt=s(Mpe);WHo=r(zgt,"sew"),zgt.forEach(t),QHo=r(G7e," \u2014 "),rX=n(G7e,"A",{href:!0});var Wgt=s(rX);HHo=r(Wgt,"SEWForSequenceClassification"),Wgt.forEach(t),UHo=r(G7e," (SEW model)"),G7e.forEach(t),JHo=i(Oe),f6=n(Oe,"LI",{});var O7e=s(f6);Epe=n(O7e,"STRONG",{});var Qgt=s(Epe);YHo=r(Qgt,"sew-d"),Qgt.forEach(t),KHo=r(O7e," \u2014 "),tX=n(O7e,"A",{href:!0});var Hgt=s(tX);ZHo=r(Hgt,"SEWDForSequenceClassification"),Hgt.forEach(t),eUo=r(O7e," (SEW-D model)"),O7e.forEach(t),oUo=i(Oe),m6=n(Oe,"LI",{});var V7e=s(m6);Cpe=n(V7e,"STRONG",{});var Ugt=s(Cpe);rUo=r(Ugt,"unispeech"),Ugt.forEach(t),tUo=r(V7e," \u2014 "),aX=n(V7e,"A",{href:!0});var Jgt=s(aX);aUo=r(Jgt,"UniSpeechForSequenceClassification"),Jgt.forEach(t),nUo=r(V7e," (UniSpeech model)"),V7e.forEach(t),sUo=i(Oe),g6=n(Oe,"LI",{});var X7e=s(g6);wpe=n(X7e,"STRONG",{});var Ygt=s(wpe);lUo=r(Ygt,"unispeech-sat"),Ygt.forEach(t),iUo=r(X7e," \u2014 "),nX=n(X7e,"A",{href:!0});var Kgt=s(nX);dUo=r(Kgt,"UniSpeechSatForSequenceClassification"),Kgt.forEach(t),cUo=r(X7e," (UniSpeechSat model)"),X7e.forEach(t),fUo=i(Oe),h6=n(Oe,"LI",{});var z7e=s(h6);Ape=n(z7e,"STRONG",{});var Zgt=s(Ape);mUo=r(Zgt,"wav2vec2"),Zgt.forEach(t),gUo=r(z7e," \u2014 "),sX=n(z7e,"A",{href:!0});var eht=s(sX);hUo=r(eht,"Wav2Vec2ForSequenceClassification"),eht.forEach(t),pUo=r(z7e," (Wav2Vec2 model)"),z7e.forEach(t),uUo=i(Oe),p6=n(Oe,"LI",{});var W7e=s(p6);ype=n(W7e,"STRONG",{});var oht=s(ype);_Uo=r(oht,"wav2vec2-conformer"),oht.forEach(t),bUo=r(W7e," \u2014 "),lX=n(W7e,"A",{href:!0});var rht=s(lX);vUo=r(rht,"Wav2Vec2ConformerForSequenceClassification"),rht.forEach(t),FUo=r(W7e," (Wav2Vec2-Conformer model)"),W7e.forEach(t),TUo=i(Oe),u6=n(Oe,"LI",{});var Q7e=s(u6);Lpe=n(Q7e,"STRONG",{});var tht=s(Lpe);MUo=r(tht,"wavlm"),tht.forEach(t),EUo=r(Q7e," \u2014 "),iX=n(Q7e,"A",{href:!0});var aht=s(iX);CUo=r(aht,"WavLMForSequenceClassification"),aht.forEach(t),wUo=r(Q7e," (WavLM model)"),Q7e.forEach(t),Oe.forEach(t),AUo=i(ha),_6=n(ha,"P",{});var H7e=s(_6);yUo=r(H7e,"The model is set in evaluation mode by default using "),xpe=n(H7e,"CODE",{});var nht=s(xpe);LUo=r(nht,"model.eval()"),nht.forEach(t),xUo=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(H7e,"CODE",{});var sht=s($pe);$Uo=r(sht,"model.train()"),sht.forEach(t),H7e.forEach(t),kUo=i(ha),T(b6.$$.fragment,ha),ha.forEach(t),Zs.forEach(t),aqe=i(f),fd=n(f,"H2",{class:!0});var ije=s(fd);v6=n(ije,"A",{id:!0,class:!0,href:!0});var lht=s(v6);kpe=n(lht,"SPAN",{});var iht=s(kpe);T(Wy.$$.fragment,iht),iht.forEach(t),lht.forEach(t),SUo=i(ije),Spe=n(ije,"SPAN",{});var dht=s(Spe);RUo=r(dht,"AutoModelForAudioFrameClassification"),dht.forEach(t),ije.forEach(t),nqe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(Qy.$$.fragment,el),PUo=i(el),md=n(el,"P",{});var JK=s(md);BUo=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dX=n(JK,"A",{href:!0});var cht=s(dX);IUo=r(cht,"from_pretrained()"),cht.forEach(t),qUo=r(JK," class method or the "),cX=n(JK,"A",{href:!0});var fht=s(cX);NUo=r(fht,"from_config()"),fht.forEach(t),jUo=r(JK,` class
method.`),JK.forEach(t),DUo=i(el),Hy=n(el,"P",{});var dje=s(Hy);GUo=r(dje,"This class cannot be instantiated directly using "),Rpe=n(dje,"CODE",{});var mht=s(Rpe);OUo=r(mht,"__init__()"),mht.forEach(t),VUo=r(dje," (throws an error)."),dje.forEach(t),XUo=i(el),bt=n(el,"DIV",{class:!0});var qw=s(bt);T(Uy.$$.fragment,qw),zUo=i(qw),Ppe=n(qw,"P",{});var ght=s(Ppe);WUo=r(ght,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ght.forEach(t),QUo=i(qw),gd=n(qw,"P",{});var YK=s(gd);HUo=r(YK,`Note:
Loading a model from its configuration file does `),Bpe=n(YK,"STRONG",{});var hht=s(Bpe);UUo=r(hht,"not"),hht.forEach(t),JUo=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(YK,"A",{href:!0});var pht=s(fX);YUo=r(pht,"from_pretrained()"),pht.forEach(t),KUo=r(YK," to load the model weights."),YK.forEach(t),ZUo=i(qw),T(F6.$$.fragment,qw),qw.forEach(t),eJo=i(el),fo=n(el,"DIV",{class:!0});var pa=s(fo);T(Jy.$$.fragment,pa),oJo=i(pa),Ipe=n(pa,"P",{});var uht=s(Ipe);rJo=r(uht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),uht.forEach(t),tJo=i(pa),Oa=n(pa,"P",{});var Nw=s(Oa);aJo=r(Nw,"The model class to instantiate is selected based on the "),qpe=n(Nw,"CODE",{});var _ht=s(qpe);nJo=r(_ht,"model_type"),_ht.forEach(t),sJo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Npe=n(Nw,"CODE",{});var bht=s(Npe);lJo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),iJo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(Nw,"CODE",{});var vht=s(jpe);dJo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),cJo=r(Nw,":"),Nw.forEach(t),fJo=i(pa),Kr=n(pa,"UL",{});var ol=s(Kr);T6=n(ol,"LI",{});var U7e=s(T6);Dpe=n(U7e,"STRONG",{});var Fht=s(Dpe);mJo=r(Fht,"data2vec-audio"),Fht.forEach(t),gJo=r(U7e," \u2014 "),mX=n(U7e,"A",{href:!0});var Tht=s(mX);hJo=r(Tht,"Data2VecAudioForAudioFrameClassification"),Tht.forEach(t),pJo=r(U7e," (Data2VecAudio model)"),U7e.forEach(t),uJo=i(ol),M6=n(ol,"LI",{});var J7e=s(M6);Gpe=n(J7e,"STRONG",{});var Mht=s(Gpe);_Jo=r(Mht,"unispeech-sat"),Mht.forEach(t),bJo=r(J7e," \u2014 "),gX=n(J7e,"A",{href:!0});var Eht=s(gX);vJo=r(Eht,"UniSpeechSatForAudioFrameClassification"),Eht.forEach(t),FJo=r(J7e," (UniSpeechSat model)"),J7e.forEach(t),TJo=i(ol),E6=n(ol,"LI",{});var Y7e=s(E6);Ope=n(Y7e,"STRONG",{});var Cht=s(Ope);MJo=r(Cht,"wav2vec2"),Cht.forEach(t),EJo=r(Y7e," \u2014 "),hX=n(Y7e,"A",{href:!0});var wht=s(hX);CJo=r(wht,"Wav2Vec2ForAudioFrameClassification"),wht.forEach(t),wJo=r(Y7e," (Wav2Vec2 model)"),Y7e.forEach(t),AJo=i(ol),C6=n(ol,"LI",{});var K7e=s(C6);Vpe=n(K7e,"STRONG",{});var Aht=s(Vpe);yJo=r(Aht,"wav2vec2-conformer"),Aht.forEach(t),LJo=r(K7e," \u2014 "),pX=n(K7e,"A",{href:!0});var yht=s(pX);xJo=r(yht,"Wav2Vec2ConformerForAudioFrameClassification"),yht.forEach(t),$Jo=r(K7e," (Wav2Vec2-Conformer model)"),K7e.forEach(t),kJo=i(ol),w6=n(ol,"LI",{});var Z7e=s(w6);Xpe=n(Z7e,"STRONG",{});var Lht=s(Xpe);SJo=r(Lht,"wavlm"),Lht.forEach(t),RJo=r(Z7e," \u2014 "),uX=n(Z7e,"A",{href:!0});var xht=s(uX);PJo=r(xht,"WavLMForAudioFrameClassification"),xht.forEach(t),BJo=r(Z7e," (WavLM model)"),Z7e.forEach(t),ol.forEach(t),IJo=i(pa),A6=n(pa,"P",{});var e$e=s(A6);qJo=r(e$e,"The model is set in evaluation mode by default using "),zpe=n(e$e,"CODE",{});var $ht=s(zpe);NJo=r($ht,"model.eval()"),$ht.forEach(t),jJo=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(e$e,"CODE",{});var kht=s(Wpe);DJo=r(kht,"model.train()"),kht.forEach(t),e$e.forEach(t),GJo=i(pa),T(y6.$$.fragment,pa),pa.forEach(t),el.forEach(t),sqe=i(f),hd=n(f,"H2",{class:!0});var cje=s(hd);L6=n(cje,"A",{id:!0,class:!0,href:!0});var Sht=s(L6);Qpe=n(Sht,"SPAN",{});var Rht=s(Qpe);T(Yy.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),OJo=i(cje),Hpe=n(cje,"SPAN",{});var Pht=s(Hpe);VJo=r(Pht,"AutoModelForCTC"),Pht.forEach(t),cje.forEach(t),lqe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(Ky.$$.fragment,rl),XJo=i(rl),pd=n(rl,"P",{});var KK=s(pd);zJo=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_X=n(KK,"A",{href:!0});var Bht=s(_X);WJo=r(Bht,"from_pretrained()"),Bht.forEach(t),QJo=r(KK," class method or the "),bX=n(KK,"A",{href:!0});var Iht=s(bX);HJo=r(Iht,"from_config()"),Iht.forEach(t),UJo=r(KK,` class
method.`),KK.forEach(t),JJo=i(rl),Zy=n(rl,"P",{});var fje=s(Zy);YJo=r(fje,"This class cannot be instantiated directly using "),Upe=n(fje,"CODE",{});var qht=s(Upe);KJo=r(qht,"__init__()"),qht.forEach(t),ZJo=r(fje," (throws an error)."),fje.forEach(t),eYo=i(rl),vt=n(rl,"DIV",{class:!0});var jw=s(vt);T(eL.$$.fragment,jw),oYo=i(jw),Jpe=n(jw,"P",{});var Nht=s(Jpe);rYo=r(Nht,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Nht.forEach(t),tYo=i(jw),ud=n(jw,"P",{});var ZK=s(ud);aYo=r(ZK,`Note:
Loading a model from its configuration file does `),Ype=n(ZK,"STRONG",{});var jht=s(Ype);nYo=r(jht,"not"),jht.forEach(t),sYo=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(ZK,"A",{href:!0});var Dht=s(vX);lYo=r(Dht,"from_pretrained()"),Dht.forEach(t),iYo=r(ZK," to load the model weights."),ZK.forEach(t),dYo=i(jw),T(x6.$$.fragment,jw),jw.forEach(t),cYo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(oL.$$.fragment,ua),fYo=i(ua),Kpe=n(ua,"P",{});var Ght=s(Kpe);mYo=r(Ght,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ght.forEach(t),gYo=i(ua),Va=n(ua,"P",{});var Dw=s(Va);hYo=r(Dw,"The model class to instantiate is selected based on the "),Zpe=n(Dw,"CODE",{});var Oht=s(Zpe);pYo=r(Oht,"model_type"),Oht.forEach(t),uYo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),eue=n(Dw,"CODE",{});var Vht=s(eue);_Yo=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),bYo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(Dw,"CODE",{});var Xht=s(oue);vYo=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),FYo=r(Dw,":"),Dw.forEach(t),TYo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);$6=n(Ve,"LI",{});var o$e=s($6);rue=n(o$e,"STRONG",{});var zht=s(rue);MYo=r(zht,"data2vec-audio"),zht.forEach(t),EYo=r(o$e," \u2014 "),FX=n(o$e,"A",{href:!0});var Wht=s(FX);CYo=r(Wht,"Data2VecAudioForCTC"),Wht.forEach(t),wYo=r(o$e," (Data2VecAudio model)"),o$e.forEach(t),AYo=i(Ve),k6=n(Ve,"LI",{});var r$e=s(k6);tue=n(r$e,"STRONG",{});var Qht=s(tue);yYo=r(Qht,"hubert"),Qht.forEach(t),LYo=r(r$e," \u2014 "),TX=n(r$e,"A",{href:!0});var Hht=s(TX);xYo=r(Hht,"HubertForCTC"),Hht.forEach(t),$Yo=r(r$e," (Hubert model)"),r$e.forEach(t),kYo=i(Ve),S6=n(Ve,"LI",{});var t$e=s(S6);aue=n(t$e,"STRONG",{});var Uht=s(aue);SYo=r(Uht,"sew"),Uht.forEach(t),RYo=r(t$e," \u2014 "),MX=n(t$e,"A",{href:!0});var Jht=s(MX);PYo=r(Jht,"SEWForCTC"),Jht.forEach(t),BYo=r(t$e," (SEW model)"),t$e.forEach(t),IYo=i(Ve),R6=n(Ve,"LI",{});var a$e=s(R6);nue=n(a$e,"STRONG",{});var Yht=s(nue);qYo=r(Yht,"sew-d"),Yht.forEach(t),NYo=r(a$e," \u2014 "),EX=n(a$e,"A",{href:!0});var Kht=s(EX);jYo=r(Kht,"SEWDForCTC"),Kht.forEach(t),DYo=r(a$e," (SEW-D model)"),a$e.forEach(t),GYo=i(Ve),P6=n(Ve,"LI",{});var n$e=s(P6);sue=n(n$e,"STRONG",{});var Zht=s(sue);OYo=r(Zht,"unispeech"),Zht.forEach(t),VYo=r(n$e," \u2014 "),CX=n(n$e,"A",{href:!0});var ept=s(CX);XYo=r(ept,"UniSpeechForCTC"),ept.forEach(t),zYo=r(n$e," (UniSpeech model)"),n$e.forEach(t),WYo=i(Ve),B6=n(Ve,"LI",{});var s$e=s(B6);lue=n(s$e,"STRONG",{});var opt=s(lue);QYo=r(opt,"unispeech-sat"),opt.forEach(t),HYo=r(s$e," \u2014 "),wX=n(s$e,"A",{href:!0});var rpt=s(wX);UYo=r(rpt,"UniSpeechSatForCTC"),rpt.forEach(t),JYo=r(s$e," (UniSpeechSat model)"),s$e.forEach(t),YYo=i(Ve),I6=n(Ve,"LI",{});var l$e=s(I6);iue=n(l$e,"STRONG",{});var tpt=s(iue);KYo=r(tpt,"wav2vec2"),tpt.forEach(t),ZYo=r(l$e," \u2014 "),AX=n(l$e,"A",{href:!0});var apt=s(AX);eKo=r(apt,"Wav2Vec2ForCTC"),apt.forEach(t),oKo=r(l$e," (Wav2Vec2 model)"),l$e.forEach(t),rKo=i(Ve),q6=n(Ve,"LI",{});var i$e=s(q6);due=n(i$e,"STRONG",{});var npt=s(due);tKo=r(npt,"wav2vec2-conformer"),npt.forEach(t),aKo=r(i$e," \u2014 "),yX=n(i$e,"A",{href:!0});var spt=s(yX);nKo=r(spt,"Wav2Vec2ConformerForCTC"),spt.forEach(t),sKo=r(i$e," (Wav2Vec2-Conformer model)"),i$e.forEach(t),lKo=i(Ve),N6=n(Ve,"LI",{});var d$e=s(N6);cue=n(d$e,"STRONG",{});var lpt=s(cue);iKo=r(lpt,"wavlm"),lpt.forEach(t),dKo=r(d$e," \u2014 "),LX=n(d$e,"A",{href:!0});var ipt=s(LX);cKo=r(ipt,"WavLMForCTC"),ipt.forEach(t),fKo=r(d$e," (WavLM model)"),d$e.forEach(t),Ve.forEach(t),mKo=i(ua),j6=n(ua,"P",{});var c$e=s(j6);gKo=r(c$e,"The model is set in evaluation mode by default using "),fue=n(c$e,"CODE",{});var dpt=s(fue);hKo=r(dpt,"model.eval()"),dpt.forEach(t),pKo=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=n(c$e,"CODE",{});var cpt=s(mue);uKo=r(cpt,"model.train()"),cpt.forEach(t),c$e.forEach(t),_Ko=i(ua),T(D6.$$.fragment,ua),ua.forEach(t),rl.forEach(t),iqe=i(f),_d=n(f,"H2",{class:!0});var mje=s(_d);G6=n(mje,"A",{id:!0,class:!0,href:!0});var fpt=s(G6);gue=n(fpt,"SPAN",{});var mpt=s(gue);T(rL.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),bKo=i(mje),hue=n(mje,"SPAN",{});var gpt=s(hue);vKo=r(gpt,"AutoModelForSpeechSeq2Seq"),gpt.forEach(t),mje.forEach(t),dqe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(tL.$$.fragment,tl),FKo=i(tl),bd=n(tl,"P",{});var eZ=s(bd);TKo=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xX=n(eZ,"A",{href:!0});var hpt=s(xX);MKo=r(hpt,"from_pretrained()"),hpt.forEach(t),EKo=r(eZ," class method or the "),$X=n(eZ,"A",{href:!0});var ppt=s($X);CKo=r(ppt,"from_config()"),ppt.forEach(t),wKo=r(eZ,` class
method.`),eZ.forEach(t),AKo=i(tl),aL=n(tl,"P",{});var gje=s(aL);yKo=r(gje,"This class cannot be instantiated directly using "),pue=n(gje,"CODE",{});var upt=s(pue);LKo=r(upt,"__init__()"),upt.forEach(t),xKo=r(gje," (throws an error)."),gje.forEach(t),$Ko=i(tl),Ft=n(tl,"DIV",{class:!0});var Gw=s(Ft);T(nL.$$.fragment,Gw),kKo=i(Gw),uue=n(Gw,"P",{});var _pt=s(uue);SKo=r(_pt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_pt.forEach(t),RKo=i(Gw),vd=n(Gw,"P",{});var oZ=s(vd);PKo=r(oZ,`Note:
Loading a model from its configuration file does `),_ue=n(oZ,"STRONG",{});var bpt=s(_ue);BKo=r(bpt,"not"),bpt.forEach(t),IKo=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(oZ,"A",{href:!0});var vpt=s(kX);qKo=r(vpt,"from_pretrained()"),vpt.forEach(t),NKo=r(oZ," to load the model weights."),oZ.forEach(t),jKo=i(Gw),T(O6.$$.fragment,Gw),Gw.forEach(t),DKo=i(tl),go=n(tl,"DIV",{class:!0});var _a=s(go);T(sL.$$.fragment,_a),GKo=i(_a),bue=n(_a,"P",{});var Fpt=s(bue);OKo=r(Fpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fpt.forEach(t),VKo=i(_a),Xa=n(_a,"P",{});var Ow=s(Xa);XKo=r(Ow,"The model class to instantiate is selected based on the "),vue=n(Ow,"CODE",{});var Tpt=s(vue);zKo=r(Tpt,"model_type"),Tpt.forEach(t),WKo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Fue=n(Ow,"CODE",{});var Mpt=s(Fue);QKo=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),HKo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(Ow,"CODE",{});var Ept=s(Tue);UKo=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),JKo=r(Ow,":"),Ow.forEach(t),YKo=i(_a),lL=n(_a,"UL",{});var hje=s(lL);V6=n(hje,"LI",{});var f$e=s(V6);Mue=n(f$e,"STRONG",{});var Cpt=s(Mue);KKo=r(Cpt,"speech-encoder-decoder"),Cpt.forEach(t),ZKo=r(f$e," \u2014 "),SX=n(f$e,"A",{href:!0});var wpt=s(SX);eZo=r(wpt,"SpeechEncoderDecoderModel"),wpt.forEach(t),oZo=r(f$e," (Speech Encoder decoder model)"),f$e.forEach(t),rZo=i(hje),X6=n(hje,"LI",{});var m$e=s(X6);Eue=n(m$e,"STRONG",{});var Apt=s(Eue);tZo=r(Apt,"speech_to_text"),Apt.forEach(t),aZo=r(m$e," \u2014 "),RX=n(m$e,"A",{href:!0});var ypt=s(RX);nZo=r(ypt,"Speech2TextForConditionalGeneration"),ypt.forEach(t),sZo=r(m$e," (Speech2Text model)"),m$e.forEach(t),hje.forEach(t),lZo=i(_a),z6=n(_a,"P",{});var g$e=s(z6);iZo=r(g$e,"The model is set in evaluation mode by default using "),Cue=n(g$e,"CODE",{});var Lpt=s(Cue);dZo=r(Lpt,"model.eval()"),Lpt.forEach(t),cZo=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(g$e,"CODE",{});var xpt=s(wue);fZo=r(xpt,"model.train()"),xpt.forEach(t),g$e.forEach(t),mZo=i(_a),T(W6.$$.fragment,_a),_a.forEach(t),tl.forEach(t),cqe=i(f),Fd=n(f,"H2",{class:!0});var pje=s(Fd);Q6=n(pje,"A",{id:!0,class:!0,href:!0});var $pt=s(Q6);Aue=n($pt,"SPAN",{});var kpt=s(Aue);T(iL.$$.fragment,kpt),kpt.forEach(t),$pt.forEach(t),gZo=i(pje),yue=n(pje,"SPAN",{});var Spt=s(yue);hZo=r(Spt,"AutoModelForAudioXVector"),Spt.forEach(t),pje.forEach(t),fqe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(dL.$$.fragment,al),pZo=i(al),Td=n(al,"P",{});var rZ=s(Td);uZo=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PX=n(rZ,"A",{href:!0});var Rpt=s(PX);_Zo=r(Rpt,"from_pretrained()"),Rpt.forEach(t),bZo=r(rZ," class method or the "),BX=n(rZ,"A",{href:!0});var Ppt=s(BX);vZo=r(Ppt,"from_config()"),Ppt.forEach(t),FZo=r(rZ,` class
method.`),rZ.forEach(t),TZo=i(al),cL=n(al,"P",{});var uje=s(cL);MZo=r(uje,"This class cannot be instantiated directly using "),Lue=n(uje,"CODE",{});var Bpt=s(Lue);EZo=r(Bpt,"__init__()"),Bpt.forEach(t),CZo=r(uje," (throws an error)."),uje.forEach(t),wZo=i(al),Tt=n(al,"DIV",{class:!0});var Vw=s(Tt);T(fL.$$.fragment,Vw),AZo=i(Vw),xue=n(Vw,"P",{});var Ipt=s(xue);yZo=r(Ipt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ipt.forEach(t),LZo=i(Vw),Md=n(Vw,"P",{});var tZ=s(Md);xZo=r(tZ,`Note:
Loading a model from its configuration file does `),$ue=n(tZ,"STRONG",{});var qpt=s($ue);$Zo=r(qpt,"not"),qpt.forEach(t),kZo=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(tZ,"A",{href:!0});var Npt=s(IX);SZo=r(Npt,"from_pretrained()"),Npt.forEach(t),RZo=r(tZ," to load the model weights."),tZ.forEach(t),PZo=i(Vw),T(H6.$$.fragment,Vw),Vw.forEach(t),BZo=i(al),ho=n(al,"DIV",{class:!0});var ba=s(ho);T(mL.$$.fragment,ba),IZo=i(ba),kue=n(ba,"P",{});var jpt=s(kue);qZo=r(jpt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jpt.forEach(t),NZo=i(ba),za=n(ba,"P",{});var Xw=s(za);jZo=r(Xw,"The model class to instantiate is selected based on the "),Sue=n(Xw,"CODE",{});var Dpt=s(Sue);DZo=r(Dpt,"model_type"),Dpt.forEach(t),GZo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Rue=n(Xw,"CODE",{});var Gpt=s(Rue);OZo=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),VZo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(Xw,"CODE",{});var Opt=s(Pue);XZo=r(Opt,"pretrained_model_name_or_path"),Opt.forEach(t),zZo=r(Xw,":"),Xw.forEach(t),WZo=i(ba),Zr=n(ba,"UL",{});var nl=s(Zr);U6=n(nl,"LI",{});var h$e=s(U6);Bue=n(h$e,"STRONG",{});var Vpt=s(Bue);QZo=r(Vpt,"data2vec-audio"),Vpt.forEach(t),HZo=r(h$e," \u2014 "),qX=n(h$e,"A",{href:!0});var Xpt=s(qX);UZo=r(Xpt,"Data2VecAudioForXVector"),Xpt.forEach(t),JZo=r(h$e," (Data2VecAudio model)"),h$e.forEach(t),YZo=i(nl),J6=n(nl,"LI",{});var p$e=s(J6);Iue=n(p$e,"STRONG",{});var zpt=s(Iue);KZo=r(zpt,"unispeech-sat"),zpt.forEach(t),ZZo=r(p$e," \u2014 "),NX=n(p$e,"A",{href:!0});var Wpt=s(NX);eer=r(Wpt,"UniSpeechSatForXVector"),Wpt.forEach(t),oer=r(p$e," (UniSpeechSat model)"),p$e.forEach(t),rer=i(nl),Y6=n(nl,"LI",{});var u$e=s(Y6);que=n(u$e,"STRONG",{});var Qpt=s(que);ter=r(Qpt,"wav2vec2"),Qpt.forEach(t),aer=r(u$e," \u2014 "),jX=n(u$e,"A",{href:!0});var Hpt=s(jX);ner=r(Hpt,"Wav2Vec2ForXVector"),Hpt.forEach(t),ser=r(u$e," (Wav2Vec2 model)"),u$e.forEach(t),ler=i(nl),K6=n(nl,"LI",{});var _$e=s(K6);Nue=n(_$e,"STRONG",{});var Upt=s(Nue);ier=r(Upt,"wav2vec2-conformer"),Upt.forEach(t),der=r(_$e," \u2014 "),DX=n(_$e,"A",{href:!0});var Jpt=s(DX);cer=r(Jpt,"Wav2Vec2ConformerForXVector"),Jpt.forEach(t),fer=r(_$e," (Wav2Vec2-Conformer model)"),_$e.forEach(t),mer=i(nl),Z6=n(nl,"LI",{});var b$e=s(Z6);jue=n(b$e,"STRONG",{});var Ypt=s(jue);ger=r(Ypt,"wavlm"),Ypt.forEach(t),her=r(b$e," \u2014 "),GX=n(b$e,"A",{href:!0});var Kpt=s(GX);per=r(Kpt,"WavLMForXVector"),Kpt.forEach(t),uer=r(b$e," (WavLM model)"),b$e.forEach(t),nl.forEach(t),_er=i(ba),eT=n(ba,"P",{});var v$e=s(eT);ber=r(v$e,"The model is set in evaluation mode by default using "),Due=n(v$e,"CODE",{});var Zpt=s(Due);ver=r(Zpt,"model.eval()"),Zpt.forEach(t),Fer=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(v$e,"CODE",{});var eut=s(Gue);Ter=r(eut,"model.train()"),eut.forEach(t),v$e.forEach(t),Mer=i(ba),T(oT.$$.fragment,ba),ba.forEach(t),al.forEach(t),mqe=i(f),Ed=n(f,"H2",{class:!0});var _je=s(Ed);rT=n(_je,"A",{id:!0,class:!0,href:!0});var out=s(rT);Oue=n(out,"SPAN",{});var rut=s(Oue);T(gL.$$.fragment,rut),rut.forEach(t),out.forEach(t),Eer=i(_je),Vue=n(_je,"SPAN",{});var tut=s(Vue);Cer=r(tut,"AutoModelForMaskedImageModeling"),tut.forEach(t),_je.forEach(t),gqe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(hL.$$.fragment,sl),wer=i(sl),Cd=n(sl,"P",{});var aZ=s(Cd);Aer=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OX=n(aZ,"A",{href:!0});var aut=s(OX);yer=r(aut,"from_pretrained()"),aut.forEach(t),Ler=r(aZ," class method or the "),VX=n(aZ,"A",{href:!0});var nut=s(VX);xer=r(nut,"from_config()"),nut.forEach(t),$er=r(aZ,` class
method.`),aZ.forEach(t),ker=i(sl),pL=n(sl,"P",{});var bje=s(pL);Ser=r(bje,"This class cannot be instantiated directly using "),Xue=n(bje,"CODE",{});var sut=s(Xue);Rer=r(sut,"__init__()"),sut.forEach(t),Per=r(bje," (throws an error)."),bje.forEach(t),Ber=i(sl),Mt=n(sl,"DIV",{class:!0});var zw=s(Mt);T(uL.$$.fragment,zw),Ier=i(zw),zue=n(zw,"P",{});var lut=s(zue);qer=r(lut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lut.forEach(t),Ner=i(zw),wd=n(zw,"P",{});var nZ=s(wd);jer=r(nZ,`Note:
Loading a model from its configuration file does `),Wue=n(nZ,"STRONG",{});var iut=s(Wue);Der=r(iut,"not"),iut.forEach(t),Ger=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(nZ,"A",{href:!0});var dut=s(XX);Oer=r(dut,"from_pretrained()"),dut.forEach(t),Ver=r(nZ," to load the model weights."),nZ.forEach(t),Xer=i(zw),T(tT.$$.fragment,zw),zw.forEach(t),zer=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(_L.$$.fragment,va),Wer=i(va),Que=n(va,"P",{});var cut=s(Que);Qer=r(cut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),cut.forEach(t),Her=i(va),Wa=n(va,"P",{});var Ww=s(Wa);Uer=r(Ww,"The model class to instantiate is selected based on the "),Hue=n(Ww,"CODE",{});var fut=s(Hue);Jer=r(fut,"model_type"),fut.forEach(t),Yer=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Uue=n(Ww,"CODE",{});var mut=s(Uue);Ker=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),Zer=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(Ww,"CODE",{});var gut=s(Jue);eor=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),oor=r(Ww,":"),Ww.forEach(t),ror=i(va),Ad=n(va,"UL",{});var sZ=s(Ad);aT=n(sZ,"LI",{});var F$e=s(aT);Yue=n(F$e,"STRONG",{});var hut=s(Yue);tor=r(hut,"deit"),hut.forEach(t),aor=r(F$e," \u2014 "),zX=n(F$e,"A",{href:!0});var put=s(zX);nor=r(put,"DeiTForMaskedImageModeling"),put.forEach(t),sor=r(F$e," (DeiT model)"),F$e.forEach(t),lor=i(sZ),nT=n(sZ,"LI",{});var T$e=s(nT);Kue=n(T$e,"STRONG",{});var uut=s(Kue);ior=r(uut,"swin"),uut.forEach(t),dor=r(T$e," \u2014 "),WX=n(T$e,"A",{href:!0});var _ut=s(WX);cor=r(_ut,"SwinForMaskedImageModeling"),_ut.forEach(t),mor=r(T$e," (Swin model)"),T$e.forEach(t),gor=i(sZ),sT=n(sZ,"LI",{});var M$e=s(sT);Zue=n(M$e,"STRONG",{});var but=s(Zue);hor=r(but,"vit"),but.forEach(t),por=r(M$e," \u2014 "),QX=n(M$e,"A",{href:!0});var vut=s(QX);uor=r(vut,"ViTForMaskedImageModeling"),vut.forEach(t),_or=r(M$e," (ViT model)"),M$e.forEach(t),sZ.forEach(t),bor=i(va),lT=n(va,"P",{});var E$e=s(lT);vor=r(E$e,"The model is set in evaluation mode by default using "),e_e=n(E$e,"CODE",{});var Fut=s(e_e);For=r(Fut,"model.eval()"),Fut.forEach(t),Tor=r(E$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=n(E$e,"CODE",{});var Tut=s(o_e);Mor=r(Tut,"model.train()"),Tut.forEach(t),E$e.forEach(t),Eor=i(va),T(iT.$$.fragment,va),va.forEach(t),sl.forEach(t),hqe=i(f),yd=n(f,"H2",{class:!0});var vje=s(yd);dT=n(vje,"A",{id:!0,class:!0,href:!0});var Mut=s(dT);r_e=n(Mut,"SPAN",{});var Eut=s(r_e);T(bL.$$.fragment,Eut),Eut.forEach(t),Mut.forEach(t),Cor=i(vje),t_e=n(vje,"SPAN",{});var Cut=s(t_e);wor=r(Cut,"AutoModelForObjectDetection"),Cut.forEach(t),vje.forEach(t),pqe=i(f),Qo=n(f,"DIV",{class:!0});var ll=s(Qo);T(vL.$$.fragment,ll),Aor=i(ll),Ld=n(ll,"P",{});var lZ=s(Ld);yor=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HX=n(lZ,"A",{href:!0});var wut=s(HX);Lor=r(wut,"from_pretrained()"),wut.forEach(t),xor=r(lZ," class method or the "),UX=n(lZ,"A",{href:!0});var Aut=s(UX);$or=r(Aut,"from_config()"),Aut.forEach(t),kor=r(lZ,` class
method.`),lZ.forEach(t),Sor=i(ll),FL=n(ll,"P",{});var Fje=s(FL);Ror=r(Fje,"This class cannot be instantiated directly using "),a_e=n(Fje,"CODE",{});var yut=s(a_e);Por=r(yut,"__init__()"),yut.forEach(t),Bor=r(Fje," (throws an error)."),Fje.forEach(t),Ior=i(ll),Et=n(ll,"DIV",{class:!0});var Qw=s(Et);T(TL.$$.fragment,Qw),qor=i(Qw),n_e=n(Qw,"P",{});var Lut=s(n_e);Nor=r(Lut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Lut.forEach(t),jor=i(Qw),xd=n(Qw,"P",{});var iZ=s(xd);Dor=r(iZ,`Note:
Loading a model from its configuration file does `),s_e=n(iZ,"STRONG",{});var xut=s(s_e);Gor=r(xut,"not"),xut.forEach(t),Oor=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(iZ,"A",{href:!0});var $ut=s(JX);Vor=r($ut,"from_pretrained()"),$ut.forEach(t),Xor=r(iZ," to load the model weights."),iZ.forEach(t),zor=i(Qw),T(cT.$$.fragment,Qw),Qw.forEach(t),Wor=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(ML.$$.fragment,Fa),Qor=i(Fa),l_e=n(Fa,"P",{});var kut=s(l_e);Hor=r(kut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kut.forEach(t),Uor=i(Fa),Qa=n(Fa,"P",{});var Hw=s(Qa);Jor=r(Hw,"The model class to instantiate is selected based on the "),i_e=n(Hw,"CODE",{});var Sut=s(i_e);Yor=r(Sut,"model_type"),Sut.forEach(t),Kor=r(Hw,` property of the config object (either
passed as an argument or loaded from `),d_e=n(Hw,"CODE",{});var Rut=s(d_e);Zor=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),err=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(Hw,"CODE",{});var Put=s(c_e);orr=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),rrr=r(Hw,":"),Hw.forEach(t),trr=i(Fa),EL=n(Fa,"UL",{});var Tje=s(EL);fT=n(Tje,"LI",{});var C$e=s(fT);f_e=n(C$e,"STRONG",{});var But=s(f_e);arr=r(But,"detr"),But.forEach(t),nrr=r(C$e," \u2014 "),YX=n(C$e,"A",{href:!0});var Iut=s(YX);srr=r(Iut,"DetrForObjectDetection"),Iut.forEach(t),lrr=r(C$e," (DETR model)"),C$e.forEach(t),irr=i(Tje),mT=n(Tje,"LI",{});var w$e=s(mT);m_e=n(w$e,"STRONG",{});var qut=s(m_e);drr=r(qut,"yolos"),qut.forEach(t),crr=r(w$e," \u2014 "),KX=n(w$e,"A",{href:!0});var Nut=s(KX);frr=r(Nut,"YolosForObjectDetection"),Nut.forEach(t),mrr=r(w$e," (YOLOS model)"),w$e.forEach(t),Tje.forEach(t),grr=i(Fa),gT=n(Fa,"P",{});var A$e=s(gT);hrr=r(A$e,"The model is set in evaluation mode by default using "),g_e=n(A$e,"CODE",{});var jut=s(g_e);prr=r(jut,"model.eval()"),jut.forEach(t),urr=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h_e=n(A$e,"CODE",{});var Dut=s(h_e);_rr=r(Dut,"model.train()"),Dut.forEach(t),A$e.forEach(t),brr=i(Fa),T(hT.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),uqe=i(f),$d=n(f,"H2",{class:!0});var Mje=s($d);pT=n(Mje,"A",{id:!0,class:!0,href:!0});var Gut=s(pT);p_e=n(Gut,"SPAN",{});var Out=s(p_e);T(CL.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),vrr=i(Mje),u_e=n(Mje,"SPAN",{});var Vut=s(u_e);Frr=r(Vut,"AutoModelForImageSegmentation"),Vut.forEach(t),Mje.forEach(t),_qe=i(f),Ho=n(f,"DIV",{class:!0});var il=s(Ho);T(wL.$$.fragment,il),Trr=i(il),kd=n(il,"P",{});var dZ=s(kd);Mrr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZX=n(dZ,"A",{href:!0});var Xut=s(ZX);Err=r(Xut,"from_pretrained()"),Xut.forEach(t),Crr=r(dZ," class method or the "),ez=n(dZ,"A",{href:!0});var zut=s(ez);wrr=r(zut,"from_config()"),zut.forEach(t),Arr=r(dZ,` class
method.`),dZ.forEach(t),yrr=i(il),AL=n(il,"P",{});var Eje=s(AL);Lrr=r(Eje,"This class cannot be instantiated directly using "),__e=n(Eje,"CODE",{});var Wut=s(__e);xrr=r(Wut,"__init__()"),Wut.forEach(t),$rr=r(Eje," (throws an error)."),Eje.forEach(t),krr=i(il),Ct=n(il,"DIV",{class:!0});var Uw=s(Ct);T(yL.$$.fragment,Uw),Srr=i(Uw),b_e=n(Uw,"P",{});var Qut=s(b_e);Rrr=r(Qut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qut.forEach(t),Prr=i(Uw),Sd=n(Uw,"P",{});var cZ=s(Sd);Brr=r(cZ,`Note:
Loading a model from its configuration file does `),v_e=n(cZ,"STRONG",{});var Hut=s(v_e);Irr=r(Hut,"not"),Hut.forEach(t),qrr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(cZ,"A",{href:!0});var Uut=s(oz);Nrr=r(Uut,"from_pretrained()"),Uut.forEach(t),jrr=r(cZ," to load the model weights."),cZ.forEach(t),Drr=i(Uw),T(uT.$$.fragment,Uw),Uw.forEach(t),Grr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(LL.$$.fragment,Ta),Orr=i(Ta),F_e=n(Ta,"P",{});var Jut=s(F_e);Vrr=r(Jut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Jut.forEach(t),Xrr=i(Ta),Ha=n(Ta,"P",{});var Jw=s(Ha);zrr=r(Jw,"The model class to instantiate is selected based on the "),T_e=n(Jw,"CODE",{});var Yut=s(T_e);Wrr=r(Yut,"model_type"),Yut.forEach(t),Qrr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),M_e=n(Jw,"CODE",{});var Kut=s(M_e);Hrr=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),Urr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(Jw,"CODE",{});var Zut=s(E_e);Jrr=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),Yrr=r(Jw,":"),Jw.forEach(t),Krr=i(Ta),C_e=n(Ta,"UL",{});var e_t=s(C_e);_T=n(e_t,"LI",{});var y$e=s(_T);w_e=n(y$e,"STRONG",{});var o_t=s(w_e);Zrr=r(o_t,"detr"),o_t.forEach(t),etr=r(y$e," \u2014 "),rz=n(y$e,"A",{href:!0});var r_t=s(rz);otr=r(r_t,"DetrForSegmentation"),r_t.forEach(t),rtr=r(y$e," (DETR model)"),y$e.forEach(t),e_t.forEach(t),ttr=i(Ta),bT=n(Ta,"P",{});var L$e=s(bT);atr=r(L$e,"The model is set in evaluation mode by default using "),A_e=n(L$e,"CODE",{});var t_t=s(A_e);ntr=r(t_t,"model.eval()"),t_t.forEach(t),str=r(L$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=n(L$e,"CODE",{});var a_t=s(y_e);ltr=r(a_t,"model.train()"),a_t.forEach(t),L$e.forEach(t),itr=i(Ta),T(vT.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),bqe=i(f),Rd=n(f,"H2",{class:!0});var Cje=s(Rd);FT=n(Cje,"A",{id:!0,class:!0,href:!0});var n_t=s(FT);L_e=n(n_t,"SPAN",{});var s_t=s(L_e);T(xL.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),dtr=i(Cje),x_e=n(Cje,"SPAN",{});var l_t=s(x_e);ctr=r(l_t,"AutoModelForSemanticSegmentation"),l_t.forEach(t),Cje.forEach(t),vqe=i(f),Uo=n(f,"DIV",{class:!0});var dl=s(Uo);T($L.$$.fragment,dl),ftr=i(dl),Pd=n(dl,"P",{});var fZ=s(Pd);mtr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tz=n(fZ,"A",{href:!0});var i_t=s(tz);gtr=r(i_t,"from_pretrained()"),i_t.forEach(t),htr=r(fZ," class method or the "),az=n(fZ,"A",{href:!0});var d_t=s(az);ptr=r(d_t,"from_config()"),d_t.forEach(t),utr=r(fZ,` class
method.`),fZ.forEach(t),_tr=i(dl),kL=n(dl,"P",{});var wje=s(kL);btr=r(wje,"This class cannot be instantiated directly using "),$_e=n(wje,"CODE",{});var c_t=s($_e);vtr=r(c_t,"__init__()"),c_t.forEach(t),Ftr=r(wje," (throws an error)."),wje.forEach(t),Ttr=i(dl),wt=n(dl,"DIV",{class:!0});var Yw=s(wt);T(SL.$$.fragment,Yw),Mtr=i(Yw),k_e=n(Yw,"P",{});var f_t=s(k_e);Etr=r(f_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),f_t.forEach(t),Ctr=i(Yw),Bd=n(Yw,"P",{});var mZ=s(Bd);wtr=r(mZ,`Note:
Loading a model from its configuration file does `),S_e=n(mZ,"STRONG",{});var m_t=s(S_e);Atr=r(m_t,"not"),m_t.forEach(t),ytr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(mZ,"A",{href:!0});var g_t=s(nz);Ltr=r(g_t,"from_pretrained()"),g_t.forEach(t),xtr=r(mZ," to load the model weights."),mZ.forEach(t),$tr=i(Yw),T(TT.$$.fragment,Yw),Yw.forEach(t),ktr=i(dl),bo=n(dl,"DIV",{class:!0});var Ma=s(bo);T(RL.$$.fragment,Ma),Str=i(Ma),R_e=n(Ma,"P",{});var h_t=s(R_e);Rtr=r(h_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),h_t.forEach(t),Ptr=i(Ma),Ua=n(Ma,"P",{});var Kw=s(Ua);Btr=r(Kw,"The model class to instantiate is selected based on the "),P_e=n(Kw,"CODE",{});var p_t=s(P_e);Itr=r(p_t,"model_type"),p_t.forEach(t),qtr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),B_e=n(Kw,"CODE",{});var u_t=s(B_e);Ntr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),jtr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(Kw,"CODE",{});var __t=s(I_e);Dtr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),Gtr=r(Kw,":"),Kw.forEach(t),Otr=i(Ma),Ja=n(Ma,"UL",{});var Zw=s(Ja);MT=n(Zw,"LI",{});var x$e=s(MT);q_e=n(x$e,"STRONG",{});var b_t=s(q_e);Vtr=r(b_t,"beit"),b_t.forEach(t),Xtr=r(x$e," \u2014 "),sz=n(x$e,"A",{href:!0});var v_t=s(sz);ztr=r(v_t,"BeitForSemanticSegmentation"),v_t.forEach(t),Wtr=r(x$e," (BEiT model)"),x$e.forEach(t),Qtr=i(Zw),ET=n(Zw,"LI",{});var $$e=s(ET);N_e=n($$e,"STRONG",{});var F_t=s(N_e);Htr=r(F_t,"data2vec-vision"),F_t.forEach(t),Utr=r($$e," \u2014 "),lz=n($$e,"A",{href:!0});var T_t=s(lz);Jtr=r(T_t,"Data2VecVisionForSemanticSegmentation"),T_t.forEach(t),Ytr=r($$e," (Data2VecVision model)"),$$e.forEach(t),Ktr=i(Zw),CT=n(Zw,"LI",{});var k$e=s(CT);j_e=n(k$e,"STRONG",{});var M_t=s(j_e);Ztr=r(M_t,"dpt"),M_t.forEach(t),ear=r(k$e," \u2014 "),iz=n(k$e,"A",{href:!0});var E_t=s(iz);oar=r(E_t,"DPTForSemanticSegmentation"),E_t.forEach(t),rar=r(k$e," (DPT model)"),k$e.forEach(t),tar=i(Zw),wT=n(Zw,"LI",{});var S$e=s(wT);D_e=n(S$e,"STRONG",{});var C_t=s(D_e);aar=r(C_t,"segformer"),C_t.forEach(t),nar=r(S$e," \u2014 "),dz=n(S$e,"A",{href:!0});var w_t=s(dz);sar=r(w_t,"SegformerForSemanticSegmentation"),w_t.forEach(t),lar=r(S$e," (SegFormer model)"),S$e.forEach(t),Zw.forEach(t),iar=i(Ma),AT=n(Ma,"P",{});var R$e=s(AT);dar=r(R$e,"The model is set in evaluation mode by default using "),G_e=n(R$e,"CODE",{});var A_t=s(G_e);car=r(A_t,"model.eval()"),A_t.forEach(t),far=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(R$e,"CODE",{});var y_t=s(O_e);mar=r(y_t,"model.train()"),y_t.forEach(t),R$e.forEach(t),gar=i(Ma),T(yT.$$.fragment,Ma),Ma.forEach(t),dl.forEach(t),Fqe=i(f),Id=n(f,"H2",{class:!0});var Aje=s(Id);LT=n(Aje,"A",{id:!0,class:!0,href:!0});var L_t=s(LT);V_e=n(L_t,"SPAN",{});var x_t=s(V_e);T(PL.$$.fragment,x_t),x_t.forEach(t),L_t.forEach(t),har=i(Aje),X_e=n(Aje,"SPAN",{});var $_t=s(X_e);par=r($_t,"AutoModelForInstanceSegmentation"),$_t.forEach(t),Aje.forEach(t),Tqe=i(f),Jo=n(f,"DIV",{class:!0});var cl=s(Jo);T(BL.$$.fragment,cl),uar=i(cl),qd=n(cl,"P",{});var gZ=s(qd);_ar=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cz=n(gZ,"A",{href:!0});var k_t=s(cz);bar=r(k_t,"from_pretrained()"),k_t.forEach(t),Far=r(gZ," class method or the "),fz=n(gZ,"A",{href:!0});var S_t=s(fz);Tar=r(S_t,"from_config()"),S_t.forEach(t),Mar=r(gZ,` class
method.`),gZ.forEach(t),Ear=i(cl),IL=n(cl,"P",{});var yje=s(IL);Car=r(yje,"This class cannot be instantiated directly using "),z_e=n(yje,"CODE",{});var R_t=s(z_e);war=r(R_t,"__init__()"),R_t.forEach(t),Aar=r(yje," (throws an error)."),yje.forEach(t),yar=i(cl),At=n(cl,"DIV",{class:!0});var eA=s(At);T(qL.$$.fragment,eA),Lar=i(eA),W_e=n(eA,"P",{});var P_t=s(W_e);xar=r(P_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),P_t.forEach(t),$ar=i(eA),Nd=n(eA,"P",{});var hZ=s(Nd);kar=r(hZ,`Note:
Loading a model from its configuration file does `),Q_e=n(hZ,"STRONG",{});var B_t=s(Q_e);Sar=r(B_t,"not"),B_t.forEach(t),Rar=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(hZ,"A",{href:!0});var I_t=s(mz);Par=r(I_t,"from_pretrained()"),I_t.forEach(t),Bar=r(hZ," to load the model weights."),hZ.forEach(t),Iar=i(eA),T(xT.$$.fragment,eA),eA.forEach(t),qar=i(cl),vo=n(cl,"DIV",{class:!0});var Ea=s(vo);T(NL.$$.fragment,Ea),Nar=i(Ea),H_e=n(Ea,"P",{});var q_t=s(H_e);jar=r(q_t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),q_t.forEach(t),Dar=i(Ea),Ya=n(Ea,"P",{});var oA=s(Ya);Gar=r(oA,"The model class to instantiate is selected based on the "),U_e=n(oA,"CODE",{});var N_t=s(U_e);Oar=r(N_t,"model_type"),N_t.forEach(t),Var=r(oA,` property of the config object (either
passed as an argument or loaded from `),J_e=n(oA,"CODE",{});var j_t=s(J_e);Xar=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),zar=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(oA,"CODE",{});var D_t=s(Y_e);War=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),Qar=r(oA,":"),oA.forEach(t),Har=i(Ea),K_e=n(Ea,"UL",{});var G_t=s(K_e);$T=n(G_t,"LI",{});var P$e=s($T);Z_e=n(P$e,"STRONG",{});var O_t=s(Z_e);Uar=r(O_t,"maskformer"),O_t.forEach(t),Jar=r(P$e," \u2014 "),gz=n(P$e,"A",{href:!0});var V_t=s(gz);Yar=r(V_t,"MaskFormerForInstanceSegmentation"),V_t.forEach(t),Kar=r(P$e," (MaskFormer model)"),P$e.forEach(t),G_t.forEach(t),Zar=i(Ea),kT=n(Ea,"P",{});var B$e=s(kT);enr=r(B$e,"The model is set in evaluation mode by default using "),e1e=n(B$e,"CODE",{});var X_t=s(e1e);onr=r(X_t,"model.eval()"),X_t.forEach(t),rnr=r(B$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(B$e,"CODE",{});var z_t=s(o1e);tnr=r(z_t,"model.train()"),z_t.forEach(t),B$e.forEach(t),anr=i(Ea),T(ST.$$.fragment,Ea),Ea.forEach(t),cl.forEach(t),Mqe=i(f),jd=n(f,"H2",{class:!0});var Lje=s(jd);RT=n(Lje,"A",{id:!0,class:!0,href:!0});var W_t=s(RT);r1e=n(W_t,"SPAN",{});var Q_t=s(r1e);T(jL.$$.fragment,Q_t),Q_t.forEach(t),W_t.forEach(t),nnr=i(Lje),t1e=n(Lje,"SPAN",{});var H_t=s(t1e);snr=r(H_t,"TFAutoModel"),H_t.forEach(t),Lje.forEach(t),Eqe=i(f),Yo=n(f,"DIV",{class:!0});var fl=s(Yo);T(DL.$$.fragment,fl),lnr=i(fl),Dd=n(fl,"P",{});var pZ=s(Dd);inr=r(pZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hz=n(pZ,"A",{href:!0});var U_t=s(hz);dnr=r(U_t,"from_pretrained()"),U_t.forEach(t),cnr=r(pZ," class method or the "),pz=n(pZ,"A",{href:!0});var J_t=s(pz);fnr=r(J_t,"from_config()"),J_t.forEach(t),mnr=r(pZ,` class
method.`),pZ.forEach(t),gnr=i(fl),GL=n(fl,"P",{});var xje=s(GL);hnr=r(xje,"This class cannot be instantiated directly using "),a1e=n(xje,"CODE",{});var Y_t=s(a1e);pnr=r(Y_t,"__init__()"),Y_t.forEach(t),unr=r(xje," (throws an error)."),xje.forEach(t),_nr=i(fl),yt=n(fl,"DIV",{class:!0});var rA=s(yt);T(OL.$$.fragment,rA),bnr=i(rA),n1e=n(rA,"P",{});var K_t=s(n1e);vnr=r(K_t,"Instantiates one of the base model classes of the library from a configuration."),K_t.forEach(t),Fnr=i(rA),Gd=n(rA,"P",{});var uZ=s(Gd);Tnr=r(uZ,`Note:
Loading a model from its configuration file does `),s1e=n(uZ,"STRONG",{});var Z_t=s(s1e);Mnr=r(Z_t,"not"),Z_t.forEach(t),Enr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(uZ,"A",{href:!0});var e1t=s(uz);Cnr=r(e1t,"from_pretrained()"),e1t.forEach(t),wnr=r(uZ," to load the model weights."),uZ.forEach(t),Anr=i(rA),T(PT.$$.fragment,rA),rA.forEach(t),ynr=i(fl),wr=n(fl,"DIV",{class:!0});var ml=s(wr);T(VL.$$.fragment,ml),Lnr=i(ml),l1e=n(ml,"P",{});var o1t=s(l1e);xnr=r(o1t,"Instantiate one of the base model classes of the library from a pretrained model."),o1t.forEach(t),$nr=i(ml),Ka=n(ml,"P",{});var tA=s(Ka);knr=r(tA,"The model class to instantiate is selected based on the "),i1e=n(tA,"CODE",{});var r1t=s(i1e);Snr=r(r1t,"model_type"),r1t.forEach(t),Rnr=r(tA,` property of the config object (either
passed as an argument or loaded from `),d1e=n(tA,"CODE",{});var t1t=s(d1e);Pnr=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),Bnr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(tA,"CODE",{});var a1t=s(c1e);Inr=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),qnr=r(tA,":"),tA.forEach(t),Nnr=i(ml),N=n(ml,"UL",{});var D=s(N);BT=n(D,"LI",{});var I$e=s(BT);f1e=n(I$e,"STRONG",{});var n1t=s(f1e);jnr=r(n1t,"albert"),n1t.forEach(t),Dnr=r(I$e," \u2014 "),_z=n(I$e,"A",{href:!0});var s1t=s(_z);Gnr=r(s1t,"TFAlbertModel"),s1t.forEach(t),Onr=r(I$e," (ALBERT model)"),I$e.forEach(t),Vnr=i(D),IT=n(D,"LI",{});var q$e=s(IT);m1e=n(q$e,"STRONG",{});var l1t=s(m1e);Xnr=r(l1t,"bart"),l1t.forEach(t),znr=r(q$e," \u2014 "),bz=n(q$e,"A",{href:!0});var i1t=s(bz);Wnr=r(i1t,"TFBartModel"),i1t.forEach(t),Qnr=r(q$e," (BART model)"),q$e.forEach(t),Hnr=i(D),qT=n(D,"LI",{});var N$e=s(qT);g1e=n(N$e,"STRONG",{});var d1t=s(g1e);Unr=r(d1t,"bert"),d1t.forEach(t),Jnr=r(N$e," \u2014 "),vz=n(N$e,"A",{href:!0});var c1t=s(vz);Ynr=r(c1t,"TFBertModel"),c1t.forEach(t),Knr=r(N$e," (BERT model)"),N$e.forEach(t),Znr=i(D),NT=n(D,"LI",{});var j$e=s(NT);h1e=n(j$e,"STRONG",{});var f1t=s(h1e);esr=r(f1t,"blenderbot"),f1t.forEach(t),osr=r(j$e," \u2014 "),Fz=n(j$e,"A",{href:!0});var m1t=s(Fz);rsr=r(m1t,"TFBlenderbotModel"),m1t.forEach(t),tsr=r(j$e," (Blenderbot model)"),j$e.forEach(t),asr=i(D),jT=n(D,"LI",{});var D$e=s(jT);p1e=n(D$e,"STRONG",{});var g1t=s(p1e);nsr=r(g1t,"blenderbot-small"),g1t.forEach(t),ssr=r(D$e," \u2014 "),Tz=n(D$e,"A",{href:!0});var h1t=s(Tz);lsr=r(h1t,"TFBlenderbotSmallModel"),h1t.forEach(t),isr=r(D$e," (BlenderbotSmall model)"),D$e.forEach(t),dsr=i(D),DT=n(D,"LI",{});var G$e=s(DT);u1e=n(G$e,"STRONG",{});var p1t=s(u1e);csr=r(p1t,"camembert"),p1t.forEach(t),fsr=r(G$e," \u2014 "),Mz=n(G$e,"A",{href:!0});var u1t=s(Mz);msr=r(u1t,"TFCamembertModel"),u1t.forEach(t),gsr=r(G$e," (CamemBERT model)"),G$e.forEach(t),hsr=i(D),GT=n(D,"LI",{});var O$e=s(GT);_1e=n(O$e,"STRONG",{});var _1t=s(_1e);psr=r(_1t,"clip"),_1t.forEach(t),usr=r(O$e," \u2014 "),Ez=n(O$e,"A",{href:!0});var b1t=s(Ez);_sr=r(b1t,"TFCLIPModel"),b1t.forEach(t),bsr=r(O$e," (CLIP model)"),O$e.forEach(t),vsr=i(D),OT=n(D,"LI",{});var V$e=s(OT);b1e=n(V$e,"STRONG",{});var v1t=s(b1e);Fsr=r(v1t,"convbert"),v1t.forEach(t),Tsr=r(V$e," \u2014 "),Cz=n(V$e,"A",{href:!0});var F1t=s(Cz);Msr=r(F1t,"TFConvBertModel"),F1t.forEach(t),Esr=r(V$e," (ConvBERT model)"),V$e.forEach(t),Csr=i(D),VT=n(D,"LI",{});var X$e=s(VT);v1e=n(X$e,"STRONG",{});var T1t=s(v1e);wsr=r(T1t,"convnext"),T1t.forEach(t),Asr=r(X$e," \u2014 "),wz=n(X$e,"A",{href:!0});var M1t=s(wz);ysr=r(M1t,"TFConvNextModel"),M1t.forEach(t),Lsr=r(X$e," (ConvNext model)"),X$e.forEach(t),xsr=i(D),XT=n(D,"LI",{});var z$e=s(XT);F1e=n(z$e,"STRONG",{});var E1t=s(F1e);$sr=r(E1t,"ctrl"),E1t.forEach(t),ksr=r(z$e," \u2014 "),Az=n(z$e,"A",{href:!0});var C1t=s(Az);Ssr=r(C1t,"TFCTRLModel"),C1t.forEach(t),Rsr=r(z$e," (CTRL model)"),z$e.forEach(t),Psr=i(D),zT=n(D,"LI",{});var W$e=s(zT);T1e=n(W$e,"STRONG",{});var w1t=s(T1e);Bsr=r(w1t,"data2vec-vision"),w1t.forEach(t),Isr=r(W$e," \u2014 "),yz=n(W$e,"A",{href:!0});var A1t=s(yz);qsr=r(A1t,"TFData2VecVisionModel"),A1t.forEach(t),Nsr=r(W$e," (Data2VecVision model)"),W$e.forEach(t),jsr=i(D),WT=n(D,"LI",{});var Q$e=s(WT);M1e=n(Q$e,"STRONG",{});var y1t=s(M1e);Dsr=r(y1t,"deberta"),y1t.forEach(t),Gsr=r(Q$e," \u2014 "),Lz=n(Q$e,"A",{href:!0});var L1t=s(Lz);Osr=r(L1t,"TFDebertaModel"),L1t.forEach(t),Vsr=r(Q$e," (DeBERTa model)"),Q$e.forEach(t),Xsr=i(D),QT=n(D,"LI",{});var H$e=s(QT);E1e=n(H$e,"STRONG",{});var x1t=s(E1e);zsr=r(x1t,"deberta-v2"),x1t.forEach(t),Wsr=r(H$e," \u2014 "),xz=n(H$e,"A",{href:!0});var $1t=s(xz);Qsr=r($1t,"TFDebertaV2Model"),$1t.forEach(t),Hsr=r(H$e," (DeBERTa-v2 model)"),H$e.forEach(t),Usr=i(D),HT=n(D,"LI",{});var U$e=s(HT);C1e=n(U$e,"STRONG",{});var k1t=s(C1e);Jsr=r(k1t,"distilbert"),k1t.forEach(t),Ysr=r(U$e," \u2014 "),$z=n(U$e,"A",{href:!0});var S1t=s($z);Ksr=r(S1t,"TFDistilBertModel"),S1t.forEach(t),Zsr=r(U$e," (DistilBERT model)"),U$e.forEach(t),elr=i(D),UT=n(D,"LI",{});var J$e=s(UT);w1e=n(J$e,"STRONG",{});var R1t=s(w1e);olr=r(R1t,"dpr"),R1t.forEach(t),rlr=r(J$e," \u2014 "),kz=n(J$e,"A",{href:!0});var P1t=s(kz);tlr=r(P1t,"TFDPRQuestionEncoder"),P1t.forEach(t),alr=r(J$e," (DPR model)"),J$e.forEach(t),nlr=i(D),JT=n(D,"LI",{});var Y$e=s(JT);A1e=n(Y$e,"STRONG",{});var B1t=s(A1e);slr=r(B1t,"electra"),B1t.forEach(t),llr=r(Y$e," \u2014 "),Sz=n(Y$e,"A",{href:!0});var I1t=s(Sz);ilr=r(I1t,"TFElectraModel"),I1t.forEach(t),dlr=r(Y$e," (ELECTRA model)"),Y$e.forEach(t),clr=i(D),YT=n(D,"LI",{});var K$e=s(YT);y1e=n(K$e,"STRONG",{});var q1t=s(y1e);flr=r(q1t,"flaubert"),q1t.forEach(t),mlr=r(K$e," \u2014 "),Rz=n(K$e,"A",{href:!0});var N1t=s(Rz);glr=r(N1t,"TFFlaubertModel"),N1t.forEach(t),hlr=r(K$e," (FlauBERT model)"),K$e.forEach(t),plr=i(D),Ps=n(D,"LI",{});var F$=s(Ps);L1e=n(F$,"STRONG",{});var j1t=s(L1e);ulr=r(j1t,"funnel"),j1t.forEach(t),_lr=r(F$," \u2014 "),Pz=n(F$,"A",{href:!0});var D1t=s(Pz);blr=r(D1t,"TFFunnelModel"),D1t.forEach(t),vlr=r(F$," or "),Bz=n(F$,"A",{href:!0});var G1t=s(Bz);Flr=r(G1t,"TFFunnelBaseModel"),G1t.forEach(t),Tlr=r(F$," (Funnel Transformer model)"),F$.forEach(t),Mlr=i(D),KT=n(D,"LI",{});var Z$e=s(KT);x1e=n(Z$e,"STRONG",{});var O1t=s(x1e);Elr=r(O1t,"gpt2"),O1t.forEach(t),Clr=r(Z$e," \u2014 "),Iz=n(Z$e,"A",{href:!0});var V1t=s(Iz);wlr=r(V1t,"TFGPT2Model"),V1t.forEach(t),Alr=r(Z$e," (OpenAI GPT-2 model)"),Z$e.forEach(t),ylr=i(D),ZT=n(D,"LI",{});var eke=s(ZT);$1e=n(eke,"STRONG",{});var X1t=s($1e);Llr=r(X1t,"gptj"),X1t.forEach(t),xlr=r(eke," \u2014 "),qz=n(eke,"A",{href:!0});var z1t=s(qz);$lr=r(z1t,"TFGPTJModel"),z1t.forEach(t),klr=r(eke," (GPT-J model)"),eke.forEach(t),Slr=i(D),e8=n(D,"LI",{});var oke=s(e8);k1e=n(oke,"STRONG",{});var W1t=s(k1e);Rlr=r(W1t,"hubert"),W1t.forEach(t),Plr=r(oke," \u2014 "),Nz=n(oke,"A",{href:!0});var Q1t=s(Nz);Blr=r(Q1t,"TFHubertModel"),Q1t.forEach(t),Ilr=r(oke," (Hubert model)"),oke.forEach(t),qlr=i(D),o8=n(D,"LI",{});var rke=s(o8);S1e=n(rke,"STRONG",{});var H1t=s(S1e);Nlr=r(H1t,"layoutlm"),H1t.forEach(t),jlr=r(rke," \u2014 "),jz=n(rke,"A",{href:!0});var U1t=s(jz);Dlr=r(U1t,"TFLayoutLMModel"),U1t.forEach(t),Glr=r(rke," (LayoutLM model)"),rke.forEach(t),Olr=i(D),r8=n(D,"LI",{});var tke=s(r8);R1e=n(tke,"STRONG",{});var J1t=s(R1e);Vlr=r(J1t,"led"),J1t.forEach(t),Xlr=r(tke," \u2014 "),Dz=n(tke,"A",{href:!0});var Y1t=s(Dz);zlr=r(Y1t,"TFLEDModel"),Y1t.forEach(t),Wlr=r(tke," (LED model)"),tke.forEach(t),Qlr=i(D),t8=n(D,"LI",{});var ake=s(t8);P1e=n(ake,"STRONG",{});var K1t=s(P1e);Hlr=r(K1t,"longformer"),K1t.forEach(t),Ulr=r(ake," \u2014 "),Gz=n(ake,"A",{href:!0});var Z1t=s(Gz);Jlr=r(Z1t,"TFLongformerModel"),Z1t.forEach(t),Ylr=r(ake," (Longformer model)"),ake.forEach(t),Klr=i(D),a8=n(D,"LI",{});var nke=s(a8);B1e=n(nke,"STRONG",{});var e2t=s(B1e);Zlr=r(e2t,"lxmert"),e2t.forEach(t),eir=r(nke," \u2014 "),Oz=n(nke,"A",{href:!0});var o2t=s(Oz);oir=r(o2t,"TFLxmertModel"),o2t.forEach(t),rir=r(nke," (LXMERT model)"),nke.forEach(t),tir=i(D),n8=n(D,"LI",{});var ske=s(n8);I1e=n(ske,"STRONG",{});var r2t=s(I1e);air=r(r2t,"marian"),r2t.forEach(t),nir=r(ske," \u2014 "),Vz=n(ske,"A",{href:!0});var t2t=s(Vz);sir=r(t2t,"TFMarianModel"),t2t.forEach(t),lir=r(ske," (Marian model)"),ske.forEach(t),iir=i(D),s8=n(D,"LI",{});var lke=s(s8);q1e=n(lke,"STRONG",{});var a2t=s(q1e);dir=r(a2t,"mbart"),a2t.forEach(t),cir=r(lke," \u2014 "),Xz=n(lke,"A",{href:!0});var n2t=s(Xz);fir=r(n2t,"TFMBartModel"),n2t.forEach(t),mir=r(lke," (mBART model)"),lke.forEach(t),gir=i(D),l8=n(D,"LI",{});var ike=s(l8);N1e=n(ike,"STRONG",{});var s2t=s(N1e);hir=r(s2t,"mobilebert"),s2t.forEach(t),pir=r(ike," \u2014 "),zz=n(ike,"A",{href:!0});var l2t=s(zz);uir=r(l2t,"TFMobileBertModel"),l2t.forEach(t),_ir=r(ike," (MobileBERT model)"),ike.forEach(t),bir=i(D),i8=n(D,"LI",{});var dke=s(i8);j1e=n(dke,"STRONG",{});var i2t=s(j1e);vir=r(i2t,"mpnet"),i2t.forEach(t),Fir=r(dke," \u2014 "),Wz=n(dke,"A",{href:!0});var d2t=s(Wz);Tir=r(d2t,"TFMPNetModel"),d2t.forEach(t),Mir=r(dke," (MPNet model)"),dke.forEach(t),Eir=i(D),d8=n(D,"LI",{});var cke=s(d8);D1e=n(cke,"STRONG",{});var c2t=s(D1e);Cir=r(c2t,"mt5"),c2t.forEach(t),wir=r(cke," \u2014 "),Qz=n(cke,"A",{href:!0});var f2t=s(Qz);Air=r(f2t,"TFMT5Model"),f2t.forEach(t),yir=r(cke," (mT5 model)"),cke.forEach(t),Lir=i(D),c8=n(D,"LI",{});var fke=s(c8);G1e=n(fke,"STRONG",{});var m2t=s(G1e);xir=r(m2t,"openai-gpt"),m2t.forEach(t),$ir=r(fke," \u2014 "),Hz=n(fke,"A",{href:!0});var g2t=s(Hz);kir=r(g2t,"TFOpenAIGPTModel"),g2t.forEach(t),Sir=r(fke," (OpenAI GPT model)"),fke.forEach(t),Rir=i(D),f8=n(D,"LI",{});var mke=s(f8);O1e=n(mke,"STRONG",{});var h2t=s(O1e);Pir=r(h2t,"pegasus"),h2t.forEach(t),Bir=r(mke," \u2014 "),Uz=n(mke,"A",{href:!0});var p2t=s(Uz);Iir=r(p2t,"TFPegasusModel"),p2t.forEach(t),qir=r(mke," (Pegasus model)"),mke.forEach(t),Nir=i(D),m8=n(D,"LI",{});var gke=s(m8);V1e=n(gke,"STRONG",{});var u2t=s(V1e);jir=r(u2t,"rembert"),u2t.forEach(t),Dir=r(gke," \u2014 "),Jz=n(gke,"A",{href:!0});var _2t=s(Jz);Gir=r(_2t,"TFRemBertModel"),_2t.forEach(t),Oir=r(gke," (RemBERT model)"),gke.forEach(t),Vir=i(D),g8=n(D,"LI",{});var hke=s(g8);X1e=n(hke,"STRONG",{});var b2t=s(X1e);Xir=r(b2t,"roberta"),b2t.forEach(t),zir=r(hke," \u2014 "),Yz=n(hke,"A",{href:!0});var v2t=s(Yz);Wir=r(v2t,"TFRobertaModel"),v2t.forEach(t),Qir=r(hke," (RoBERTa model)"),hke.forEach(t),Hir=i(D),h8=n(D,"LI",{});var pke=s(h8);z1e=n(pke,"STRONG",{});var F2t=s(z1e);Uir=r(F2t,"roformer"),F2t.forEach(t),Jir=r(pke," \u2014 "),Kz=n(pke,"A",{href:!0});var T2t=s(Kz);Yir=r(T2t,"TFRoFormerModel"),T2t.forEach(t),Kir=r(pke," (RoFormer model)"),pke.forEach(t),Zir=i(D),p8=n(D,"LI",{});var uke=s(p8);W1e=n(uke,"STRONG",{});var M2t=s(W1e);edr=r(M2t,"speech_to_text"),M2t.forEach(t),odr=r(uke," \u2014 "),Zz=n(uke,"A",{href:!0});var E2t=s(Zz);rdr=r(E2t,"TFSpeech2TextModel"),E2t.forEach(t),tdr=r(uke," (Speech2Text model)"),uke.forEach(t),adr=i(D),u8=n(D,"LI",{});var _ke=s(u8);Q1e=n(_ke,"STRONG",{});var C2t=s(Q1e);ndr=r(C2t,"t5"),C2t.forEach(t),sdr=r(_ke," \u2014 "),eW=n(_ke,"A",{href:!0});var w2t=s(eW);ldr=r(w2t,"TFT5Model"),w2t.forEach(t),idr=r(_ke," (T5 model)"),_ke.forEach(t),ddr=i(D),_8=n(D,"LI",{});var bke=s(_8);H1e=n(bke,"STRONG",{});var A2t=s(H1e);cdr=r(A2t,"tapas"),A2t.forEach(t),fdr=r(bke," \u2014 "),oW=n(bke,"A",{href:!0});var y2t=s(oW);mdr=r(y2t,"TFTapasModel"),y2t.forEach(t),gdr=r(bke," (TAPAS model)"),bke.forEach(t),hdr=i(D),b8=n(D,"LI",{});var vke=s(b8);U1e=n(vke,"STRONG",{});var L2t=s(U1e);pdr=r(L2t,"transfo-xl"),L2t.forEach(t),udr=r(vke," \u2014 "),rW=n(vke,"A",{href:!0});var x2t=s(rW);_dr=r(x2t,"TFTransfoXLModel"),x2t.forEach(t),bdr=r(vke," (Transformer-XL model)"),vke.forEach(t),vdr=i(D),v8=n(D,"LI",{});var Fke=s(v8);J1e=n(Fke,"STRONG",{});var $2t=s(J1e);Fdr=r($2t,"vit"),$2t.forEach(t),Tdr=r(Fke," \u2014 "),tW=n(Fke,"A",{href:!0});var k2t=s(tW);Mdr=r(k2t,"TFViTModel"),k2t.forEach(t),Edr=r(Fke," (ViT model)"),Fke.forEach(t),Cdr=i(D),F8=n(D,"LI",{});var Tke=s(F8);Y1e=n(Tke,"STRONG",{});var S2t=s(Y1e);wdr=r(S2t,"vit_mae"),S2t.forEach(t),Adr=r(Tke," \u2014 "),aW=n(Tke,"A",{href:!0});var R2t=s(aW);ydr=r(R2t,"TFViTMAEModel"),R2t.forEach(t),Ldr=r(Tke," (ViTMAE model)"),Tke.forEach(t),xdr=i(D),T8=n(D,"LI",{});var Mke=s(T8);K1e=n(Mke,"STRONG",{});var P2t=s(K1e);$dr=r(P2t,"wav2vec2"),P2t.forEach(t),kdr=r(Mke," \u2014 "),nW=n(Mke,"A",{href:!0});var B2t=s(nW);Sdr=r(B2t,"TFWav2Vec2Model"),B2t.forEach(t),Rdr=r(Mke," (Wav2Vec2 model)"),Mke.forEach(t),Pdr=i(D),M8=n(D,"LI",{});var Eke=s(M8);Z1e=n(Eke,"STRONG",{});var I2t=s(Z1e);Bdr=r(I2t,"xlm"),I2t.forEach(t),Idr=r(Eke," \u2014 "),sW=n(Eke,"A",{href:!0});var q2t=s(sW);qdr=r(q2t,"TFXLMModel"),q2t.forEach(t),Ndr=r(Eke," (XLM model)"),Eke.forEach(t),jdr=i(D),E8=n(D,"LI",{});var Cke=s(E8);e2e=n(Cke,"STRONG",{});var N2t=s(e2e);Ddr=r(N2t,"xlm-roberta"),N2t.forEach(t),Gdr=r(Cke," \u2014 "),lW=n(Cke,"A",{href:!0});var j2t=s(lW);Odr=r(j2t,"TFXLMRobertaModel"),j2t.forEach(t),Vdr=r(Cke," (XLM-RoBERTa model)"),Cke.forEach(t),Xdr=i(D),C8=n(D,"LI",{});var wke=s(C8);o2e=n(wke,"STRONG",{});var D2t=s(o2e);zdr=r(D2t,"xlnet"),D2t.forEach(t),Wdr=r(wke," \u2014 "),iW=n(wke,"A",{href:!0});var G2t=s(iW);Qdr=r(G2t,"TFXLNetModel"),G2t.forEach(t),Hdr=r(wke," (XLNet model)"),wke.forEach(t),D.forEach(t),Udr=i(ml),T(w8.$$.fragment,ml),ml.forEach(t),fl.forEach(t),Cqe=i(f),Od=n(f,"H2",{class:!0});var $je=s(Od);A8=n($je,"A",{id:!0,class:!0,href:!0});var O2t=s(A8);r2e=n(O2t,"SPAN",{});var V2t=s(r2e);T(XL.$$.fragment,V2t),V2t.forEach(t),O2t.forEach(t),Jdr=i($je),t2e=n($je,"SPAN",{});var X2t=s(t2e);Ydr=r(X2t,"TFAutoModelForPreTraining"),X2t.forEach(t),$je.forEach(t),wqe=i(f),Ko=n(f,"DIV",{class:!0});var gl=s(Ko);T(zL.$$.fragment,gl),Kdr=i(gl),Vd=n(gl,"P",{});var _Z=s(Vd);Zdr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dW=n(_Z,"A",{href:!0});var z2t=s(dW);ecr=r(z2t,"from_pretrained()"),z2t.forEach(t),ocr=r(_Z," class method or the "),cW=n(_Z,"A",{href:!0});var W2t=s(cW);rcr=r(W2t,"from_config()"),W2t.forEach(t),tcr=r(_Z,` class
method.`),_Z.forEach(t),acr=i(gl),WL=n(gl,"P",{});var kje=s(WL);ncr=r(kje,"This class cannot be instantiated directly using "),a2e=n(kje,"CODE",{});var Q2t=s(a2e);scr=r(Q2t,"__init__()"),Q2t.forEach(t),lcr=r(kje," (throws an error)."),kje.forEach(t),icr=i(gl),Lt=n(gl,"DIV",{class:!0});var aA=s(Lt);T(QL.$$.fragment,aA),dcr=i(aA),n2e=n(aA,"P",{});var H2t=s(n2e);ccr=r(H2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H2t.forEach(t),fcr=i(aA),Xd=n(aA,"P",{});var bZ=s(Xd);mcr=r(bZ,`Note:
Loading a model from its configuration file does `),s2e=n(bZ,"STRONG",{});var U2t=s(s2e);gcr=r(U2t,"not"),U2t.forEach(t),hcr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(bZ,"A",{href:!0});var J2t=s(fW);pcr=r(J2t,"from_pretrained()"),J2t.forEach(t),ucr=r(bZ," to load the model weights."),bZ.forEach(t),_cr=i(aA),T(y8.$$.fragment,aA),aA.forEach(t),bcr=i(gl),Ar=n(gl,"DIV",{class:!0});var hl=s(Ar);T(HL.$$.fragment,hl),vcr=i(hl),l2e=n(hl,"P",{});var Y2t=s(l2e);Fcr=r(Y2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y2t.forEach(t),Tcr=i(hl),Za=n(hl,"P",{});var nA=s(Za);Mcr=r(nA,"The model class to instantiate is selected based on the "),i2e=n(nA,"CODE",{});var K2t=s(i2e);Ecr=r(K2t,"model_type"),K2t.forEach(t),Ccr=r(nA,` property of the config object (either
passed as an argument or loaded from `),d2e=n(nA,"CODE",{});var Z2t=s(d2e);wcr=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),Acr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(nA,"CODE",{});var ebt=s(c2e);ycr=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),Lcr=r(nA,":"),nA.forEach(t),xcr=i(hl),se=n(hl,"UL",{});var le=s(se);L8=n(le,"LI",{});var Ake=s(L8);f2e=n(Ake,"STRONG",{});var obt=s(f2e);$cr=r(obt,"albert"),obt.forEach(t),kcr=r(Ake," \u2014 "),mW=n(Ake,"A",{href:!0});var rbt=s(mW);Scr=r(rbt,"TFAlbertForPreTraining"),rbt.forEach(t),Rcr=r(Ake," (ALBERT model)"),Ake.forEach(t),Pcr=i(le),x8=n(le,"LI",{});var yke=s(x8);m2e=n(yke,"STRONG",{});var tbt=s(m2e);Bcr=r(tbt,"bart"),tbt.forEach(t),Icr=r(yke," \u2014 "),gW=n(yke,"A",{href:!0});var abt=s(gW);qcr=r(abt,"TFBartForConditionalGeneration"),abt.forEach(t),Ncr=r(yke," (BART model)"),yke.forEach(t),jcr=i(le),$8=n(le,"LI",{});var Lke=s($8);g2e=n(Lke,"STRONG",{});var nbt=s(g2e);Dcr=r(nbt,"bert"),nbt.forEach(t),Gcr=r(Lke," \u2014 "),hW=n(Lke,"A",{href:!0});var sbt=s(hW);Ocr=r(sbt,"TFBertForPreTraining"),sbt.forEach(t),Vcr=r(Lke," (BERT model)"),Lke.forEach(t),Xcr=i(le),k8=n(le,"LI",{});var xke=s(k8);h2e=n(xke,"STRONG",{});var lbt=s(h2e);zcr=r(lbt,"camembert"),lbt.forEach(t),Wcr=r(xke," \u2014 "),pW=n(xke,"A",{href:!0});var ibt=s(pW);Qcr=r(ibt,"TFCamembertForMaskedLM"),ibt.forEach(t),Hcr=r(xke," (CamemBERT model)"),xke.forEach(t),Ucr=i(le),S8=n(le,"LI",{});var $ke=s(S8);p2e=n($ke,"STRONG",{});var dbt=s(p2e);Jcr=r(dbt,"ctrl"),dbt.forEach(t),Ycr=r($ke," \u2014 "),uW=n($ke,"A",{href:!0});var cbt=s(uW);Kcr=r(cbt,"TFCTRLLMHeadModel"),cbt.forEach(t),Zcr=r($ke," (CTRL model)"),$ke.forEach(t),efr=i(le),R8=n(le,"LI",{});var kke=s(R8);u2e=n(kke,"STRONG",{});var fbt=s(u2e);ofr=r(fbt,"distilbert"),fbt.forEach(t),rfr=r(kke," \u2014 "),_W=n(kke,"A",{href:!0});var mbt=s(_W);tfr=r(mbt,"TFDistilBertForMaskedLM"),mbt.forEach(t),afr=r(kke," (DistilBERT model)"),kke.forEach(t),nfr=i(le),P8=n(le,"LI",{});var Ske=s(P8);_2e=n(Ske,"STRONG",{});var gbt=s(_2e);sfr=r(gbt,"electra"),gbt.forEach(t),lfr=r(Ske," \u2014 "),bW=n(Ske,"A",{href:!0});var hbt=s(bW);ifr=r(hbt,"TFElectraForPreTraining"),hbt.forEach(t),dfr=r(Ske," (ELECTRA model)"),Ske.forEach(t),cfr=i(le),B8=n(le,"LI",{});var Rke=s(B8);b2e=n(Rke,"STRONG",{});var pbt=s(b2e);ffr=r(pbt,"flaubert"),pbt.forEach(t),mfr=r(Rke," \u2014 "),vW=n(Rke,"A",{href:!0});var ubt=s(vW);gfr=r(ubt,"TFFlaubertWithLMHeadModel"),ubt.forEach(t),hfr=r(Rke," (FlauBERT model)"),Rke.forEach(t),pfr=i(le),I8=n(le,"LI",{});var Pke=s(I8);v2e=n(Pke,"STRONG",{});var _bt=s(v2e);ufr=r(_bt,"funnel"),_bt.forEach(t),_fr=r(Pke," \u2014 "),FW=n(Pke,"A",{href:!0});var bbt=s(FW);bfr=r(bbt,"TFFunnelForPreTraining"),bbt.forEach(t),vfr=r(Pke," (Funnel Transformer model)"),Pke.forEach(t),Ffr=i(le),q8=n(le,"LI",{});var Bke=s(q8);F2e=n(Bke,"STRONG",{});var vbt=s(F2e);Tfr=r(vbt,"gpt2"),vbt.forEach(t),Mfr=r(Bke," \u2014 "),TW=n(Bke,"A",{href:!0});var Fbt=s(TW);Efr=r(Fbt,"TFGPT2LMHeadModel"),Fbt.forEach(t),Cfr=r(Bke," (OpenAI GPT-2 model)"),Bke.forEach(t),wfr=i(le),N8=n(le,"LI",{});var Ike=s(N8);T2e=n(Ike,"STRONG",{});var Tbt=s(T2e);Afr=r(Tbt,"layoutlm"),Tbt.forEach(t),yfr=r(Ike," \u2014 "),MW=n(Ike,"A",{href:!0});var Mbt=s(MW);Lfr=r(Mbt,"TFLayoutLMForMaskedLM"),Mbt.forEach(t),xfr=r(Ike," (LayoutLM model)"),Ike.forEach(t),$fr=i(le),j8=n(le,"LI",{});var qke=s(j8);M2e=n(qke,"STRONG",{});var Ebt=s(M2e);kfr=r(Ebt,"lxmert"),Ebt.forEach(t),Sfr=r(qke," \u2014 "),EW=n(qke,"A",{href:!0});var Cbt=s(EW);Rfr=r(Cbt,"TFLxmertForPreTraining"),Cbt.forEach(t),Pfr=r(qke," (LXMERT model)"),qke.forEach(t),Bfr=i(le),D8=n(le,"LI",{});var Nke=s(D8);E2e=n(Nke,"STRONG",{});var wbt=s(E2e);Ifr=r(wbt,"mobilebert"),wbt.forEach(t),qfr=r(Nke," \u2014 "),CW=n(Nke,"A",{href:!0});var Abt=s(CW);Nfr=r(Abt,"TFMobileBertForPreTraining"),Abt.forEach(t),jfr=r(Nke," (MobileBERT model)"),Nke.forEach(t),Dfr=i(le),G8=n(le,"LI",{});var jke=s(G8);C2e=n(jke,"STRONG",{});var ybt=s(C2e);Gfr=r(ybt,"mpnet"),ybt.forEach(t),Ofr=r(jke," \u2014 "),wW=n(jke,"A",{href:!0});var Lbt=s(wW);Vfr=r(Lbt,"TFMPNetForMaskedLM"),Lbt.forEach(t),Xfr=r(jke," (MPNet model)"),jke.forEach(t),zfr=i(le),O8=n(le,"LI",{});var Dke=s(O8);w2e=n(Dke,"STRONG",{});var xbt=s(w2e);Wfr=r(xbt,"openai-gpt"),xbt.forEach(t),Qfr=r(Dke," \u2014 "),AW=n(Dke,"A",{href:!0});var $bt=s(AW);Hfr=r($bt,"TFOpenAIGPTLMHeadModel"),$bt.forEach(t),Ufr=r(Dke," (OpenAI GPT model)"),Dke.forEach(t),Jfr=i(le),V8=n(le,"LI",{});var Gke=s(V8);A2e=n(Gke,"STRONG",{});var kbt=s(A2e);Yfr=r(kbt,"roberta"),kbt.forEach(t),Kfr=r(Gke," \u2014 "),yW=n(Gke,"A",{href:!0});var Sbt=s(yW);Zfr=r(Sbt,"TFRobertaForMaskedLM"),Sbt.forEach(t),emr=r(Gke," (RoBERTa model)"),Gke.forEach(t),omr=i(le),X8=n(le,"LI",{});var Oke=s(X8);y2e=n(Oke,"STRONG",{});var Rbt=s(y2e);rmr=r(Rbt,"t5"),Rbt.forEach(t),tmr=r(Oke," \u2014 "),LW=n(Oke,"A",{href:!0});var Pbt=s(LW);amr=r(Pbt,"TFT5ForConditionalGeneration"),Pbt.forEach(t),nmr=r(Oke," (T5 model)"),Oke.forEach(t),smr=i(le),z8=n(le,"LI",{});var Vke=s(z8);L2e=n(Vke,"STRONG",{});var Bbt=s(L2e);lmr=r(Bbt,"tapas"),Bbt.forEach(t),imr=r(Vke," \u2014 "),xW=n(Vke,"A",{href:!0});var Ibt=s(xW);dmr=r(Ibt,"TFTapasForMaskedLM"),Ibt.forEach(t),cmr=r(Vke," (TAPAS model)"),Vke.forEach(t),fmr=i(le),W8=n(le,"LI",{});var Xke=s(W8);x2e=n(Xke,"STRONG",{});var qbt=s(x2e);mmr=r(qbt,"transfo-xl"),qbt.forEach(t),gmr=r(Xke," \u2014 "),$W=n(Xke,"A",{href:!0});var Nbt=s($W);hmr=r(Nbt,"TFTransfoXLLMHeadModel"),Nbt.forEach(t),pmr=r(Xke," (Transformer-XL model)"),Xke.forEach(t),umr=i(le),Q8=n(le,"LI",{});var zke=s(Q8);$2e=n(zke,"STRONG",{});var jbt=s($2e);_mr=r(jbt,"vit_mae"),jbt.forEach(t),bmr=r(zke," \u2014 "),kW=n(zke,"A",{href:!0});var Dbt=s(kW);vmr=r(Dbt,"TFViTMAEForPreTraining"),Dbt.forEach(t),Fmr=r(zke," (ViTMAE model)"),zke.forEach(t),Tmr=i(le),H8=n(le,"LI",{});var Wke=s(H8);k2e=n(Wke,"STRONG",{});var Gbt=s(k2e);Mmr=r(Gbt,"xlm"),Gbt.forEach(t),Emr=r(Wke," \u2014 "),SW=n(Wke,"A",{href:!0});var Obt=s(SW);Cmr=r(Obt,"TFXLMWithLMHeadModel"),Obt.forEach(t),wmr=r(Wke," (XLM model)"),Wke.forEach(t),Amr=i(le),U8=n(le,"LI",{});var Qke=s(U8);S2e=n(Qke,"STRONG",{});var Vbt=s(S2e);ymr=r(Vbt,"xlm-roberta"),Vbt.forEach(t),Lmr=r(Qke," \u2014 "),RW=n(Qke,"A",{href:!0});var Xbt=s(RW);xmr=r(Xbt,"TFXLMRobertaForMaskedLM"),Xbt.forEach(t),$mr=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),kmr=i(le),J8=n(le,"LI",{});var Hke=s(J8);R2e=n(Hke,"STRONG",{});var zbt=s(R2e);Smr=r(zbt,"xlnet"),zbt.forEach(t),Rmr=r(Hke," \u2014 "),PW=n(Hke,"A",{href:!0});var Wbt=s(PW);Pmr=r(Wbt,"TFXLNetLMHeadModel"),Wbt.forEach(t),Bmr=r(Hke," (XLNet model)"),Hke.forEach(t),le.forEach(t),Imr=i(hl),T(Y8.$$.fragment,hl),hl.forEach(t),gl.forEach(t),Aqe=i(f),zd=n(f,"H2",{class:!0});var Sje=s(zd);K8=n(Sje,"A",{id:!0,class:!0,href:!0});var Qbt=s(K8);P2e=n(Qbt,"SPAN",{});var Hbt=s(P2e);T(UL.$$.fragment,Hbt),Hbt.forEach(t),Qbt.forEach(t),qmr=i(Sje),B2e=n(Sje,"SPAN",{});var Ubt=s(B2e);Nmr=r(Ubt,"TFAutoModelForCausalLM"),Ubt.forEach(t),Sje.forEach(t),yqe=i(f),Zo=n(f,"DIV",{class:!0});var pl=s(Zo);T(JL.$$.fragment,pl),jmr=i(pl),Wd=n(pl,"P",{});var vZ=s(Wd);Dmr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BW=n(vZ,"A",{href:!0});var Jbt=s(BW);Gmr=r(Jbt,"from_pretrained()"),Jbt.forEach(t),Omr=r(vZ," class method or the "),IW=n(vZ,"A",{href:!0});var Ybt=s(IW);Vmr=r(Ybt,"from_config()"),Ybt.forEach(t),Xmr=r(vZ,` class
method.`),vZ.forEach(t),zmr=i(pl),YL=n(pl,"P",{});var Rje=s(YL);Wmr=r(Rje,"This class cannot be instantiated directly using "),I2e=n(Rje,"CODE",{});var Kbt=s(I2e);Qmr=r(Kbt,"__init__()"),Kbt.forEach(t),Hmr=r(Rje," (throws an error)."),Rje.forEach(t),Umr=i(pl),xt=n(pl,"DIV",{class:!0});var sA=s(xt);T(KL.$$.fragment,sA),Jmr=i(sA),q2e=n(sA,"P",{});var Zbt=s(q2e);Ymr=r(Zbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zbt.forEach(t),Kmr=i(sA),Qd=n(sA,"P",{});var FZ=s(Qd);Zmr=r(FZ,`Note:
Loading a model from its configuration file does `),N2e=n(FZ,"STRONG",{});var evt=s(N2e);egr=r(evt,"not"),evt.forEach(t),ogr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(FZ,"A",{href:!0});var ovt=s(qW);rgr=r(ovt,"from_pretrained()"),ovt.forEach(t),tgr=r(FZ," to load the model weights."),FZ.forEach(t),agr=i(sA),T(Z8.$$.fragment,sA),sA.forEach(t),ngr=i(pl),yr=n(pl,"DIV",{class:!0});var ul=s(yr);T(ZL.$$.fragment,ul),sgr=i(ul),j2e=n(ul,"P",{});var rvt=s(j2e);lgr=r(rvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rvt.forEach(t),igr=i(ul),en=n(ul,"P",{});var lA=s(en);dgr=r(lA,"The model class to instantiate is selected based on the "),D2e=n(lA,"CODE",{});var tvt=s(D2e);cgr=r(tvt,"model_type"),tvt.forEach(t),fgr=r(lA,` property of the config object (either
passed as an argument or loaded from `),G2e=n(lA,"CODE",{});var avt=s(G2e);mgr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),ggr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(lA,"CODE",{});var nvt=s(O2e);hgr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),pgr=r(lA,":"),lA.forEach(t),ugr=i(ul),Te=n(ul,"UL",{});var Ce=s(Te);eM=n(Ce,"LI",{});var Uke=s(eM);V2e=n(Uke,"STRONG",{});var svt=s(V2e);_gr=r(svt,"bert"),svt.forEach(t),bgr=r(Uke," \u2014 "),NW=n(Uke,"A",{href:!0});var lvt=s(NW);vgr=r(lvt,"TFBertLMHeadModel"),lvt.forEach(t),Fgr=r(Uke," (BERT model)"),Uke.forEach(t),Tgr=i(Ce),oM=n(Ce,"LI",{});var Jke=s(oM);X2e=n(Jke,"STRONG",{});var ivt=s(X2e);Mgr=r(ivt,"camembert"),ivt.forEach(t),Egr=r(Jke," \u2014 "),jW=n(Jke,"A",{href:!0});var dvt=s(jW);Cgr=r(dvt,"TFCamembertForCausalLM"),dvt.forEach(t),wgr=r(Jke," (CamemBERT model)"),Jke.forEach(t),Agr=i(Ce),rM=n(Ce,"LI",{});var Yke=s(rM);z2e=n(Yke,"STRONG",{});var cvt=s(z2e);ygr=r(cvt,"ctrl"),cvt.forEach(t),Lgr=r(Yke," \u2014 "),DW=n(Yke,"A",{href:!0});var fvt=s(DW);xgr=r(fvt,"TFCTRLLMHeadModel"),fvt.forEach(t),$gr=r(Yke," (CTRL model)"),Yke.forEach(t),kgr=i(Ce),tM=n(Ce,"LI",{});var Kke=s(tM);W2e=n(Kke,"STRONG",{});var mvt=s(W2e);Sgr=r(mvt,"gpt2"),mvt.forEach(t),Rgr=r(Kke," \u2014 "),GW=n(Kke,"A",{href:!0});var gvt=s(GW);Pgr=r(gvt,"TFGPT2LMHeadModel"),gvt.forEach(t),Bgr=r(Kke," (OpenAI GPT-2 model)"),Kke.forEach(t),Igr=i(Ce),aM=n(Ce,"LI",{});var Zke=s(aM);Q2e=n(Zke,"STRONG",{});var hvt=s(Q2e);qgr=r(hvt,"gptj"),hvt.forEach(t),Ngr=r(Zke," \u2014 "),OW=n(Zke,"A",{href:!0});var pvt=s(OW);jgr=r(pvt,"TFGPTJForCausalLM"),pvt.forEach(t),Dgr=r(Zke," (GPT-J model)"),Zke.forEach(t),Ggr=i(Ce),nM=n(Ce,"LI",{});var eSe=s(nM);H2e=n(eSe,"STRONG",{});var uvt=s(H2e);Ogr=r(uvt,"openai-gpt"),uvt.forEach(t),Vgr=r(eSe," \u2014 "),VW=n(eSe,"A",{href:!0});var _vt=s(VW);Xgr=r(_vt,"TFOpenAIGPTLMHeadModel"),_vt.forEach(t),zgr=r(eSe," (OpenAI GPT model)"),eSe.forEach(t),Wgr=i(Ce),sM=n(Ce,"LI",{});var oSe=s(sM);U2e=n(oSe,"STRONG",{});var bvt=s(U2e);Qgr=r(bvt,"rembert"),bvt.forEach(t),Hgr=r(oSe," \u2014 "),XW=n(oSe,"A",{href:!0});var vvt=s(XW);Ugr=r(vvt,"TFRemBertForCausalLM"),vvt.forEach(t),Jgr=r(oSe," (RemBERT model)"),oSe.forEach(t),Ygr=i(Ce),lM=n(Ce,"LI",{});var rSe=s(lM);J2e=n(rSe,"STRONG",{});var Fvt=s(J2e);Kgr=r(Fvt,"roberta"),Fvt.forEach(t),Zgr=r(rSe," \u2014 "),zW=n(rSe,"A",{href:!0});var Tvt=s(zW);ehr=r(Tvt,"TFRobertaForCausalLM"),Tvt.forEach(t),ohr=r(rSe," (RoBERTa model)"),rSe.forEach(t),rhr=i(Ce),iM=n(Ce,"LI",{});var tSe=s(iM);Y2e=n(tSe,"STRONG",{});var Mvt=s(Y2e);thr=r(Mvt,"roformer"),Mvt.forEach(t),ahr=r(tSe," \u2014 "),WW=n(tSe,"A",{href:!0});var Evt=s(WW);nhr=r(Evt,"TFRoFormerForCausalLM"),Evt.forEach(t),shr=r(tSe," (RoFormer model)"),tSe.forEach(t),lhr=i(Ce),dM=n(Ce,"LI",{});var aSe=s(dM);K2e=n(aSe,"STRONG",{});var Cvt=s(K2e);ihr=r(Cvt,"transfo-xl"),Cvt.forEach(t),dhr=r(aSe," \u2014 "),QW=n(aSe,"A",{href:!0});var wvt=s(QW);chr=r(wvt,"TFTransfoXLLMHeadModel"),wvt.forEach(t),fhr=r(aSe," (Transformer-XL model)"),aSe.forEach(t),mhr=i(Ce),cM=n(Ce,"LI",{});var nSe=s(cM);Z2e=n(nSe,"STRONG",{});var Avt=s(Z2e);ghr=r(Avt,"xlm"),Avt.forEach(t),hhr=r(nSe," \u2014 "),HW=n(nSe,"A",{href:!0});var yvt=s(HW);phr=r(yvt,"TFXLMWithLMHeadModel"),yvt.forEach(t),uhr=r(nSe," (XLM model)"),nSe.forEach(t),_hr=i(Ce),fM=n(Ce,"LI",{});var sSe=s(fM);ebe=n(sSe,"STRONG",{});var Lvt=s(ebe);bhr=r(Lvt,"xlnet"),Lvt.forEach(t),vhr=r(sSe," \u2014 "),UW=n(sSe,"A",{href:!0});var xvt=s(UW);Fhr=r(xvt,"TFXLNetLMHeadModel"),xvt.forEach(t),Thr=r(sSe," (XLNet model)"),sSe.forEach(t),Ce.forEach(t),Mhr=i(ul),T(mM.$$.fragment,ul),ul.forEach(t),pl.forEach(t),Lqe=i(f),Hd=n(f,"H2",{class:!0});var Pje=s(Hd);gM=n(Pje,"A",{id:!0,class:!0,href:!0});var $vt=s(gM);obe=n($vt,"SPAN",{});var kvt=s(obe);T(ex.$$.fragment,kvt),kvt.forEach(t),$vt.forEach(t),Ehr=i(Pje),rbe=n(Pje,"SPAN",{});var Svt=s(rbe);Chr=r(Svt,"TFAutoModelForImageClassification"),Svt.forEach(t),Pje.forEach(t),xqe=i(f),er=n(f,"DIV",{class:!0});var _l=s(er);T(ox.$$.fragment,_l),whr=i(_l),Ud=n(_l,"P",{});var TZ=s(Ud);Ahr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JW=n(TZ,"A",{href:!0});var Rvt=s(JW);yhr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),Lhr=r(TZ," class method or the "),YW=n(TZ,"A",{href:!0});var Pvt=s(YW);xhr=r(Pvt,"from_config()"),Pvt.forEach(t),$hr=r(TZ,` class
method.`),TZ.forEach(t),khr=i(_l),rx=n(_l,"P",{});var Bje=s(rx);Shr=r(Bje,"This class cannot be instantiated directly using "),tbe=n(Bje,"CODE",{});var Bvt=s(tbe);Rhr=r(Bvt,"__init__()"),Bvt.forEach(t),Phr=r(Bje," (throws an error)."),Bje.forEach(t),Bhr=i(_l),$t=n(_l,"DIV",{class:!0});var iA=s($t);T(tx.$$.fragment,iA),Ihr=i(iA),abe=n(iA,"P",{});var Ivt=s(abe);qhr=r(Ivt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ivt.forEach(t),Nhr=i(iA),Jd=n(iA,"P",{});var MZ=s(Jd);jhr=r(MZ,`Note:
Loading a model from its configuration file does `),nbe=n(MZ,"STRONG",{});var qvt=s(nbe);Dhr=r(qvt,"not"),qvt.forEach(t),Ghr=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(MZ,"A",{href:!0});var Nvt=s(KW);Ohr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),Vhr=r(MZ," to load the model weights."),MZ.forEach(t),Xhr=i(iA),T(hM.$$.fragment,iA),iA.forEach(t),zhr=i(_l),Lr=n(_l,"DIV",{class:!0});var bl=s(Lr);T(ax.$$.fragment,bl),Whr=i(bl),sbe=n(bl,"P",{});var jvt=s(sbe);Qhr=r(jvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jvt.forEach(t),Hhr=i(bl),on=n(bl,"P",{});var dA=s(on);Uhr=r(dA,"The model class to instantiate is selected based on the "),lbe=n(dA,"CODE",{});var Dvt=s(lbe);Jhr=r(Dvt,"model_type"),Dvt.forEach(t),Yhr=r(dA,` property of the config object (either
passed as an argument or loaded from `),ibe=n(dA,"CODE",{});var Gvt=s(ibe);Khr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),Zhr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(dA,"CODE",{});var Ovt=s(dbe);epr=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),opr=r(dA,":"),dA.forEach(t),rpr=i(bl),Yd=n(bl,"UL",{});var EZ=s(Yd);pM=n(EZ,"LI",{});var lSe=s(pM);cbe=n(lSe,"STRONG",{});var Vvt=s(cbe);tpr=r(Vvt,"convnext"),Vvt.forEach(t),apr=r(lSe," \u2014 "),ZW=n(lSe,"A",{href:!0});var Xvt=s(ZW);npr=r(Xvt,"TFConvNextForImageClassification"),Xvt.forEach(t),spr=r(lSe," (ConvNext model)"),lSe.forEach(t),lpr=i(EZ),uM=n(EZ,"LI",{});var iSe=s(uM);fbe=n(iSe,"STRONG",{});var zvt=s(fbe);ipr=r(zvt,"data2vec-vision"),zvt.forEach(t),dpr=r(iSe," \u2014 "),eQ=n(iSe,"A",{href:!0});var Wvt=s(eQ);cpr=r(Wvt,"TFData2VecVisionForImageClassification"),Wvt.forEach(t),fpr=r(iSe," (Data2VecVision model)"),iSe.forEach(t),mpr=i(EZ),_M=n(EZ,"LI",{});var dSe=s(_M);mbe=n(dSe,"STRONG",{});var Qvt=s(mbe);gpr=r(Qvt,"vit"),Qvt.forEach(t),hpr=r(dSe," \u2014 "),oQ=n(dSe,"A",{href:!0});var Hvt=s(oQ);ppr=r(Hvt,"TFViTForImageClassification"),Hvt.forEach(t),upr=r(dSe," (ViT model)"),dSe.forEach(t),EZ.forEach(t),_pr=i(bl),T(bM.$$.fragment,bl),bl.forEach(t),_l.forEach(t),$qe=i(f),Kd=n(f,"H2",{class:!0});var Ije=s(Kd);vM=n(Ije,"A",{id:!0,class:!0,href:!0});var Uvt=s(vM);gbe=n(Uvt,"SPAN",{});var Jvt=s(gbe);T(nx.$$.fragment,Jvt),Jvt.forEach(t),Uvt.forEach(t),bpr=i(Ije),hbe=n(Ije,"SPAN",{});var Yvt=s(hbe);vpr=r(Yvt,"TFAutoModelForMaskedLM"),Yvt.forEach(t),Ije.forEach(t),kqe=i(f),or=n(f,"DIV",{class:!0});var vl=s(or);T(sx.$$.fragment,vl),Fpr=i(vl),Zd=n(vl,"P",{});var CZ=s(Zd);Tpr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rQ=n(CZ,"A",{href:!0});var Kvt=s(rQ);Mpr=r(Kvt,"from_pretrained()"),Kvt.forEach(t),Epr=r(CZ," class method or the "),tQ=n(CZ,"A",{href:!0});var Zvt=s(tQ);Cpr=r(Zvt,"from_config()"),Zvt.forEach(t),wpr=r(CZ,` class
method.`),CZ.forEach(t),Apr=i(vl),lx=n(vl,"P",{});var qje=s(lx);ypr=r(qje,"This class cannot be instantiated directly using "),pbe=n(qje,"CODE",{});var eFt=s(pbe);Lpr=r(eFt,"__init__()"),eFt.forEach(t),xpr=r(qje," (throws an error)."),qje.forEach(t),$pr=i(vl),kt=n(vl,"DIV",{class:!0});var cA=s(kt);T(ix.$$.fragment,cA),kpr=i(cA),ube=n(cA,"P",{});var oFt=s(ube);Spr=r(oFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oFt.forEach(t),Rpr=i(cA),ec=n(cA,"P",{});var wZ=s(ec);Ppr=r(wZ,`Note:
Loading a model from its configuration file does `),_be=n(wZ,"STRONG",{});var rFt=s(_be);Bpr=r(rFt,"not"),rFt.forEach(t),Ipr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(wZ,"A",{href:!0});var tFt=s(aQ);qpr=r(tFt,"from_pretrained()"),tFt.forEach(t),Npr=r(wZ," to load the model weights."),wZ.forEach(t),jpr=i(cA),T(FM.$$.fragment,cA),cA.forEach(t),Dpr=i(vl),xr=n(vl,"DIV",{class:!0});var Fl=s(xr);T(dx.$$.fragment,Fl),Gpr=i(Fl),bbe=n(Fl,"P",{});var aFt=s(bbe);Opr=r(aFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aFt.forEach(t),Vpr=i(Fl),rn=n(Fl,"P",{});var fA=s(rn);Xpr=r(fA,"The model class to instantiate is selected based on the "),vbe=n(fA,"CODE",{});var nFt=s(vbe);zpr=r(nFt,"model_type"),nFt.forEach(t),Wpr=r(fA,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(fA,"CODE",{});var sFt=s(Fbe);Qpr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),Hpr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(fA,"CODE",{});var lFt=s(Tbe);Upr=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),Jpr=r(fA,":"),fA.forEach(t),Ypr=i(Fl),ie=n(Fl,"UL",{});var fe=s(ie);TM=n(fe,"LI",{});var cSe=s(TM);Mbe=n(cSe,"STRONG",{});var iFt=s(Mbe);Kpr=r(iFt,"albert"),iFt.forEach(t),Zpr=r(cSe," \u2014 "),nQ=n(cSe,"A",{href:!0});var dFt=s(nQ);eur=r(dFt,"TFAlbertForMaskedLM"),dFt.forEach(t),our=r(cSe," (ALBERT model)"),cSe.forEach(t),rur=i(fe),MM=n(fe,"LI",{});var fSe=s(MM);Ebe=n(fSe,"STRONG",{});var cFt=s(Ebe);tur=r(cFt,"bert"),cFt.forEach(t),aur=r(fSe," \u2014 "),sQ=n(fSe,"A",{href:!0});var fFt=s(sQ);nur=r(fFt,"TFBertForMaskedLM"),fFt.forEach(t),sur=r(fSe," (BERT model)"),fSe.forEach(t),lur=i(fe),EM=n(fe,"LI",{});var mSe=s(EM);Cbe=n(mSe,"STRONG",{});var mFt=s(Cbe);iur=r(mFt,"camembert"),mFt.forEach(t),dur=r(mSe," \u2014 "),lQ=n(mSe,"A",{href:!0});var gFt=s(lQ);cur=r(gFt,"TFCamembertForMaskedLM"),gFt.forEach(t),fur=r(mSe," (CamemBERT model)"),mSe.forEach(t),mur=i(fe),CM=n(fe,"LI",{});var gSe=s(CM);wbe=n(gSe,"STRONG",{});var hFt=s(wbe);gur=r(hFt,"convbert"),hFt.forEach(t),hur=r(gSe," \u2014 "),iQ=n(gSe,"A",{href:!0});var pFt=s(iQ);pur=r(pFt,"TFConvBertForMaskedLM"),pFt.forEach(t),uur=r(gSe," (ConvBERT model)"),gSe.forEach(t),_ur=i(fe),wM=n(fe,"LI",{});var hSe=s(wM);Abe=n(hSe,"STRONG",{});var uFt=s(Abe);bur=r(uFt,"deberta"),uFt.forEach(t),vur=r(hSe," \u2014 "),dQ=n(hSe,"A",{href:!0});var _Ft=s(dQ);Fur=r(_Ft,"TFDebertaForMaskedLM"),_Ft.forEach(t),Tur=r(hSe," (DeBERTa model)"),hSe.forEach(t),Mur=i(fe),AM=n(fe,"LI",{});var pSe=s(AM);ybe=n(pSe,"STRONG",{});var bFt=s(ybe);Eur=r(bFt,"deberta-v2"),bFt.forEach(t),Cur=r(pSe," \u2014 "),cQ=n(pSe,"A",{href:!0});var vFt=s(cQ);wur=r(vFt,"TFDebertaV2ForMaskedLM"),vFt.forEach(t),Aur=r(pSe," (DeBERTa-v2 model)"),pSe.forEach(t),yur=i(fe),yM=n(fe,"LI",{});var uSe=s(yM);Lbe=n(uSe,"STRONG",{});var FFt=s(Lbe);Lur=r(FFt,"distilbert"),FFt.forEach(t),xur=r(uSe," \u2014 "),fQ=n(uSe,"A",{href:!0});var TFt=s(fQ);$ur=r(TFt,"TFDistilBertForMaskedLM"),TFt.forEach(t),kur=r(uSe," (DistilBERT model)"),uSe.forEach(t),Sur=i(fe),LM=n(fe,"LI",{});var _Se=s(LM);xbe=n(_Se,"STRONG",{});var MFt=s(xbe);Rur=r(MFt,"electra"),MFt.forEach(t),Pur=r(_Se," \u2014 "),mQ=n(_Se,"A",{href:!0});var EFt=s(mQ);Bur=r(EFt,"TFElectraForMaskedLM"),EFt.forEach(t),Iur=r(_Se," (ELECTRA model)"),_Se.forEach(t),qur=i(fe),xM=n(fe,"LI",{});var bSe=s(xM);$be=n(bSe,"STRONG",{});var CFt=s($be);Nur=r(CFt,"flaubert"),CFt.forEach(t),jur=r(bSe," \u2014 "),gQ=n(bSe,"A",{href:!0});var wFt=s(gQ);Dur=r(wFt,"TFFlaubertWithLMHeadModel"),wFt.forEach(t),Gur=r(bSe," (FlauBERT model)"),bSe.forEach(t),Our=i(fe),$M=n(fe,"LI",{});var vSe=s($M);kbe=n(vSe,"STRONG",{});var AFt=s(kbe);Vur=r(AFt,"funnel"),AFt.forEach(t),Xur=r(vSe," \u2014 "),hQ=n(vSe,"A",{href:!0});var yFt=s(hQ);zur=r(yFt,"TFFunnelForMaskedLM"),yFt.forEach(t),Wur=r(vSe," (Funnel Transformer model)"),vSe.forEach(t),Qur=i(fe),kM=n(fe,"LI",{});var FSe=s(kM);Sbe=n(FSe,"STRONG",{});var LFt=s(Sbe);Hur=r(LFt,"layoutlm"),LFt.forEach(t),Uur=r(FSe," \u2014 "),pQ=n(FSe,"A",{href:!0});var xFt=s(pQ);Jur=r(xFt,"TFLayoutLMForMaskedLM"),xFt.forEach(t),Yur=r(FSe," (LayoutLM model)"),FSe.forEach(t),Kur=i(fe),SM=n(fe,"LI",{});var TSe=s(SM);Rbe=n(TSe,"STRONG",{});var $Ft=s(Rbe);Zur=r($Ft,"longformer"),$Ft.forEach(t),e_r=r(TSe," \u2014 "),uQ=n(TSe,"A",{href:!0});var kFt=s(uQ);o_r=r(kFt,"TFLongformerForMaskedLM"),kFt.forEach(t),r_r=r(TSe," (Longformer model)"),TSe.forEach(t),t_r=i(fe),RM=n(fe,"LI",{});var MSe=s(RM);Pbe=n(MSe,"STRONG",{});var SFt=s(Pbe);a_r=r(SFt,"mobilebert"),SFt.forEach(t),n_r=r(MSe," \u2014 "),_Q=n(MSe,"A",{href:!0});var RFt=s(_Q);s_r=r(RFt,"TFMobileBertForMaskedLM"),RFt.forEach(t),l_r=r(MSe," (MobileBERT model)"),MSe.forEach(t),i_r=i(fe),PM=n(fe,"LI",{});var ESe=s(PM);Bbe=n(ESe,"STRONG",{});var PFt=s(Bbe);d_r=r(PFt,"mpnet"),PFt.forEach(t),c_r=r(ESe," \u2014 "),bQ=n(ESe,"A",{href:!0});var BFt=s(bQ);f_r=r(BFt,"TFMPNetForMaskedLM"),BFt.forEach(t),m_r=r(ESe," (MPNet model)"),ESe.forEach(t),g_r=i(fe),BM=n(fe,"LI",{});var CSe=s(BM);Ibe=n(CSe,"STRONG",{});var IFt=s(Ibe);h_r=r(IFt,"rembert"),IFt.forEach(t),p_r=r(CSe," \u2014 "),vQ=n(CSe,"A",{href:!0});var qFt=s(vQ);u_r=r(qFt,"TFRemBertForMaskedLM"),qFt.forEach(t),__r=r(CSe," (RemBERT model)"),CSe.forEach(t),b_r=i(fe),IM=n(fe,"LI",{});var wSe=s(IM);qbe=n(wSe,"STRONG",{});var NFt=s(qbe);v_r=r(NFt,"roberta"),NFt.forEach(t),F_r=r(wSe," \u2014 "),FQ=n(wSe,"A",{href:!0});var jFt=s(FQ);T_r=r(jFt,"TFRobertaForMaskedLM"),jFt.forEach(t),M_r=r(wSe," (RoBERTa model)"),wSe.forEach(t),E_r=i(fe),qM=n(fe,"LI",{});var ASe=s(qM);Nbe=n(ASe,"STRONG",{});var DFt=s(Nbe);C_r=r(DFt,"roformer"),DFt.forEach(t),w_r=r(ASe," \u2014 "),TQ=n(ASe,"A",{href:!0});var GFt=s(TQ);A_r=r(GFt,"TFRoFormerForMaskedLM"),GFt.forEach(t),y_r=r(ASe," (RoFormer model)"),ASe.forEach(t),L_r=i(fe),NM=n(fe,"LI",{});var ySe=s(NM);jbe=n(ySe,"STRONG",{});var OFt=s(jbe);x_r=r(OFt,"tapas"),OFt.forEach(t),$_r=r(ySe," \u2014 "),MQ=n(ySe,"A",{href:!0});var VFt=s(MQ);k_r=r(VFt,"TFTapasForMaskedLM"),VFt.forEach(t),S_r=r(ySe," (TAPAS model)"),ySe.forEach(t),R_r=i(fe),jM=n(fe,"LI",{});var LSe=s(jM);Dbe=n(LSe,"STRONG",{});var XFt=s(Dbe);P_r=r(XFt,"xlm"),XFt.forEach(t),B_r=r(LSe," \u2014 "),EQ=n(LSe,"A",{href:!0});var zFt=s(EQ);I_r=r(zFt,"TFXLMWithLMHeadModel"),zFt.forEach(t),q_r=r(LSe," (XLM model)"),LSe.forEach(t),N_r=i(fe),DM=n(fe,"LI",{});var xSe=s(DM);Gbe=n(xSe,"STRONG",{});var WFt=s(Gbe);j_r=r(WFt,"xlm-roberta"),WFt.forEach(t),D_r=r(xSe," \u2014 "),CQ=n(xSe,"A",{href:!0});var QFt=s(CQ);G_r=r(QFt,"TFXLMRobertaForMaskedLM"),QFt.forEach(t),O_r=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),fe.forEach(t),V_r=i(Fl),T(GM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),Sqe=i(f),oc=n(f,"H2",{class:!0});var Nje=s(oc);OM=n(Nje,"A",{id:!0,class:!0,href:!0});var HFt=s(OM);Obe=n(HFt,"SPAN",{});var UFt=s(Obe);T(cx.$$.fragment,UFt),UFt.forEach(t),HFt.forEach(t),X_r=i(Nje),Vbe=n(Nje,"SPAN",{});var JFt=s(Vbe);z_r=r(JFt,"TFAutoModelForSeq2SeqLM"),JFt.forEach(t),Nje.forEach(t),Rqe=i(f),rr=n(f,"DIV",{class:!0});var Tl=s(rr);T(fx.$$.fragment,Tl),W_r=i(Tl),rc=n(Tl,"P",{});var AZ=s(rc);Q_r=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wQ=n(AZ,"A",{href:!0});var YFt=s(wQ);H_r=r(YFt,"from_pretrained()"),YFt.forEach(t),U_r=r(AZ," class method or the "),AQ=n(AZ,"A",{href:!0});var KFt=s(AQ);J_r=r(KFt,"from_config()"),KFt.forEach(t),Y_r=r(AZ,` class
method.`),AZ.forEach(t),K_r=i(Tl),mx=n(Tl,"P",{});var jje=s(mx);Z_r=r(jje,"This class cannot be instantiated directly using "),Xbe=n(jje,"CODE",{});var ZFt=s(Xbe);e1r=r(ZFt,"__init__()"),ZFt.forEach(t),o1r=r(jje," (throws an error)."),jje.forEach(t),r1r=i(Tl),St=n(Tl,"DIV",{class:!0});var mA=s(St);T(gx.$$.fragment,mA),t1r=i(mA),zbe=n(mA,"P",{});var e6t=s(zbe);a1r=r(e6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e6t.forEach(t),n1r=i(mA),tc=n(mA,"P",{});var yZ=s(tc);s1r=r(yZ,`Note:
Loading a model from its configuration file does `),Wbe=n(yZ,"STRONG",{});var o6t=s(Wbe);l1r=r(o6t,"not"),o6t.forEach(t),i1r=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(yZ,"A",{href:!0});var r6t=s(yQ);d1r=r(r6t,"from_pretrained()"),r6t.forEach(t),c1r=r(yZ," to load the model weights."),yZ.forEach(t),f1r=i(mA),T(VM.$$.fragment,mA),mA.forEach(t),m1r=i(Tl),$r=n(Tl,"DIV",{class:!0});var Ml=s($r);T(hx.$$.fragment,Ml),g1r=i(Ml),Qbe=n(Ml,"P",{});var t6t=s(Qbe);h1r=r(t6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t6t.forEach(t),p1r=i(Ml),tn=n(Ml,"P",{});var gA=s(tn);u1r=r(gA,"The model class to instantiate is selected based on the "),Hbe=n(gA,"CODE",{});var a6t=s(Hbe);_1r=r(a6t,"model_type"),a6t.forEach(t),b1r=r(gA,` property of the config object (either
passed as an argument or loaded from `),Ube=n(gA,"CODE",{});var n6t=s(Ube);v1r=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),F1r=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(gA,"CODE",{});var s6t=s(Jbe);T1r=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),M1r=r(gA,":"),gA.forEach(t),E1r=i(Ml),ye=n(Ml,"UL",{});var Be=s(ye);XM=n(Be,"LI",{});var $Se=s(XM);Ybe=n($Se,"STRONG",{});var l6t=s(Ybe);C1r=r(l6t,"bart"),l6t.forEach(t),w1r=r($Se," \u2014 "),LQ=n($Se,"A",{href:!0});var i6t=s(LQ);A1r=r(i6t,"TFBartForConditionalGeneration"),i6t.forEach(t),y1r=r($Se," (BART model)"),$Se.forEach(t),L1r=i(Be),zM=n(Be,"LI",{});var kSe=s(zM);Kbe=n(kSe,"STRONG",{});var d6t=s(Kbe);x1r=r(d6t,"blenderbot"),d6t.forEach(t),$1r=r(kSe," \u2014 "),xQ=n(kSe,"A",{href:!0});var c6t=s(xQ);k1r=r(c6t,"TFBlenderbotForConditionalGeneration"),c6t.forEach(t),S1r=r(kSe," (Blenderbot model)"),kSe.forEach(t),R1r=i(Be),WM=n(Be,"LI",{});var SSe=s(WM);Zbe=n(SSe,"STRONG",{});var f6t=s(Zbe);P1r=r(f6t,"blenderbot-small"),f6t.forEach(t),B1r=r(SSe," \u2014 "),$Q=n(SSe,"A",{href:!0});var m6t=s($Q);I1r=r(m6t,"TFBlenderbotSmallForConditionalGeneration"),m6t.forEach(t),q1r=r(SSe," (BlenderbotSmall model)"),SSe.forEach(t),N1r=i(Be),QM=n(Be,"LI",{});var RSe=s(QM);eve=n(RSe,"STRONG",{});var g6t=s(eve);j1r=r(g6t,"encoder-decoder"),g6t.forEach(t),D1r=r(RSe," \u2014 "),kQ=n(RSe,"A",{href:!0});var h6t=s(kQ);G1r=r(h6t,"TFEncoderDecoderModel"),h6t.forEach(t),O1r=r(RSe," (Encoder decoder model)"),RSe.forEach(t),V1r=i(Be),HM=n(Be,"LI",{});var PSe=s(HM);ove=n(PSe,"STRONG",{});var p6t=s(ove);X1r=r(p6t,"led"),p6t.forEach(t),z1r=r(PSe," \u2014 "),SQ=n(PSe,"A",{href:!0});var u6t=s(SQ);W1r=r(u6t,"TFLEDForConditionalGeneration"),u6t.forEach(t),Q1r=r(PSe," (LED model)"),PSe.forEach(t),H1r=i(Be),UM=n(Be,"LI",{});var BSe=s(UM);rve=n(BSe,"STRONG",{});var _6t=s(rve);U1r=r(_6t,"marian"),_6t.forEach(t),J1r=r(BSe," \u2014 "),RQ=n(BSe,"A",{href:!0});var b6t=s(RQ);Y1r=r(b6t,"TFMarianMTModel"),b6t.forEach(t),K1r=r(BSe," (Marian model)"),BSe.forEach(t),Z1r=i(Be),JM=n(Be,"LI",{});var ISe=s(JM);tve=n(ISe,"STRONG",{});var v6t=s(tve);e2r=r(v6t,"mbart"),v6t.forEach(t),o2r=r(ISe," \u2014 "),PQ=n(ISe,"A",{href:!0});var F6t=s(PQ);r2r=r(F6t,"TFMBartForConditionalGeneration"),F6t.forEach(t),t2r=r(ISe," (mBART model)"),ISe.forEach(t),a2r=i(Be),YM=n(Be,"LI",{});var qSe=s(YM);ave=n(qSe,"STRONG",{});var T6t=s(ave);n2r=r(T6t,"mt5"),T6t.forEach(t),s2r=r(qSe," \u2014 "),BQ=n(qSe,"A",{href:!0});var M6t=s(BQ);l2r=r(M6t,"TFMT5ForConditionalGeneration"),M6t.forEach(t),i2r=r(qSe," (mT5 model)"),qSe.forEach(t),d2r=i(Be),KM=n(Be,"LI",{});var NSe=s(KM);nve=n(NSe,"STRONG",{});var E6t=s(nve);c2r=r(E6t,"pegasus"),E6t.forEach(t),f2r=r(NSe," \u2014 "),IQ=n(NSe,"A",{href:!0});var C6t=s(IQ);m2r=r(C6t,"TFPegasusForConditionalGeneration"),C6t.forEach(t),g2r=r(NSe," (Pegasus model)"),NSe.forEach(t),h2r=i(Be),ZM=n(Be,"LI",{});var jSe=s(ZM);sve=n(jSe,"STRONG",{});var w6t=s(sve);p2r=r(w6t,"t5"),w6t.forEach(t),u2r=r(jSe," \u2014 "),qQ=n(jSe,"A",{href:!0});var A6t=s(qQ);_2r=r(A6t,"TFT5ForConditionalGeneration"),A6t.forEach(t),b2r=r(jSe," (T5 model)"),jSe.forEach(t),Be.forEach(t),v2r=i(Ml),T(e4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Pqe=i(f),ac=n(f,"H2",{class:!0});var Dje=s(ac);o4=n(Dje,"A",{id:!0,class:!0,href:!0});var y6t=s(o4);lve=n(y6t,"SPAN",{});var L6t=s(lve);T(px.$$.fragment,L6t),L6t.forEach(t),y6t.forEach(t),F2r=i(Dje),ive=n(Dje,"SPAN",{});var x6t=s(ive);T2r=r(x6t,"TFAutoModelForSequenceClassification"),x6t.forEach(t),Dje.forEach(t),Bqe=i(f),tr=n(f,"DIV",{class:!0});var El=s(tr);T(ux.$$.fragment,El),M2r=i(El),nc=n(El,"P",{});var LZ=s(nc);E2r=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NQ=n(LZ,"A",{href:!0});var $6t=s(NQ);C2r=r($6t,"from_pretrained()"),$6t.forEach(t),w2r=r(LZ," class method or the "),jQ=n(LZ,"A",{href:!0});var k6t=s(jQ);A2r=r(k6t,"from_config()"),k6t.forEach(t),y2r=r(LZ,` class
method.`),LZ.forEach(t),L2r=i(El),_x=n(El,"P",{});var Gje=s(_x);x2r=r(Gje,"This class cannot be instantiated directly using "),dve=n(Gje,"CODE",{});var S6t=s(dve);$2r=r(S6t,"__init__()"),S6t.forEach(t),k2r=r(Gje," (throws an error)."),Gje.forEach(t),S2r=i(El),Rt=n(El,"DIV",{class:!0});var hA=s(Rt);T(bx.$$.fragment,hA),R2r=i(hA),cve=n(hA,"P",{});var R6t=s(cve);P2r=r(R6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R6t.forEach(t),B2r=i(hA),sc=n(hA,"P",{});var xZ=s(sc);I2r=r(xZ,`Note:
Loading a model from its configuration file does `),fve=n(xZ,"STRONG",{});var P6t=s(fve);q2r=r(P6t,"not"),P6t.forEach(t),N2r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(xZ,"A",{href:!0});var B6t=s(DQ);j2r=r(B6t,"from_pretrained()"),B6t.forEach(t),D2r=r(xZ," to load the model weights."),xZ.forEach(t),G2r=i(hA),T(r4.$$.fragment,hA),hA.forEach(t),O2r=i(El),kr=n(El,"DIV",{class:!0});var Cl=s(kr);T(vx.$$.fragment,Cl),V2r=i(Cl),mve=n(Cl,"P",{});var I6t=s(mve);X2r=r(I6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I6t.forEach(t),z2r=i(Cl),an=n(Cl,"P",{});var pA=s(an);W2r=r(pA,"The model class to instantiate is selected based on the "),gve=n(pA,"CODE",{});var q6t=s(gve);Q2r=r(q6t,"model_type"),q6t.forEach(t),H2r=r(pA,` property of the config object (either
passed as an argument or loaded from `),hve=n(pA,"CODE",{});var N6t=s(hve);U2r=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),J2r=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(pA,"CODE",{});var j6t=s(pve);Y2r=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),K2r=r(pA,":"),pA.forEach(t),Z2r=i(Cl),ee=n(Cl,"UL",{});var ae=s(ee);t4=n(ae,"LI",{});var DSe=s(t4);uve=n(DSe,"STRONG",{});var D6t=s(uve);ebr=r(D6t,"albert"),D6t.forEach(t),obr=r(DSe," \u2014 "),GQ=n(DSe,"A",{href:!0});var G6t=s(GQ);rbr=r(G6t,"TFAlbertForSequenceClassification"),G6t.forEach(t),tbr=r(DSe," (ALBERT model)"),DSe.forEach(t),abr=i(ae),a4=n(ae,"LI",{});var GSe=s(a4);_ve=n(GSe,"STRONG",{});var O6t=s(_ve);nbr=r(O6t,"bert"),O6t.forEach(t),sbr=r(GSe," \u2014 "),OQ=n(GSe,"A",{href:!0});var V6t=s(OQ);lbr=r(V6t,"TFBertForSequenceClassification"),V6t.forEach(t),ibr=r(GSe," (BERT model)"),GSe.forEach(t),dbr=i(ae),n4=n(ae,"LI",{});var OSe=s(n4);bve=n(OSe,"STRONG",{});var X6t=s(bve);cbr=r(X6t,"camembert"),X6t.forEach(t),fbr=r(OSe," \u2014 "),VQ=n(OSe,"A",{href:!0});var z6t=s(VQ);mbr=r(z6t,"TFCamembertForSequenceClassification"),z6t.forEach(t),gbr=r(OSe," (CamemBERT model)"),OSe.forEach(t),hbr=i(ae),s4=n(ae,"LI",{});var VSe=s(s4);vve=n(VSe,"STRONG",{});var W6t=s(vve);pbr=r(W6t,"convbert"),W6t.forEach(t),ubr=r(VSe," \u2014 "),XQ=n(VSe,"A",{href:!0});var Q6t=s(XQ);_br=r(Q6t,"TFConvBertForSequenceClassification"),Q6t.forEach(t),bbr=r(VSe," (ConvBERT model)"),VSe.forEach(t),vbr=i(ae),l4=n(ae,"LI",{});var XSe=s(l4);Fve=n(XSe,"STRONG",{});var H6t=s(Fve);Fbr=r(H6t,"ctrl"),H6t.forEach(t),Tbr=r(XSe," \u2014 "),zQ=n(XSe,"A",{href:!0});var U6t=s(zQ);Mbr=r(U6t,"TFCTRLForSequenceClassification"),U6t.forEach(t),Ebr=r(XSe," (CTRL model)"),XSe.forEach(t),Cbr=i(ae),i4=n(ae,"LI",{});var zSe=s(i4);Tve=n(zSe,"STRONG",{});var J6t=s(Tve);wbr=r(J6t,"deberta"),J6t.forEach(t),Abr=r(zSe," \u2014 "),WQ=n(zSe,"A",{href:!0});var Y6t=s(WQ);ybr=r(Y6t,"TFDebertaForSequenceClassification"),Y6t.forEach(t),Lbr=r(zSe," (DeBERTa model)"),zSe.forEach(t),xbr=i(ae),d4=n(ae,"LI",{});var WSe=s(d4);Mve=n(WSe,"STRONG",{});var K6t=s(Mve);$br=r(K6t,"deberta-v2"),K6t.forEach(t),kbr=r(WSe," \u2014 "),QQ=n(WSe,"A",{href:!0});var Z6t=s(QQ);Sbr=r(Z6t,"TFDebertaV2ForSequenceClassification"),Z6t.forEach(t),Rbr=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),Pbr=i(ae),c4=n(ae,"LI",{});var QSe=s(c4);Eve=n(QSe,"STRONG",{});var eTt=s(Eve);Bbr=r(eTt,"distilbert"),eTt.forEach(t),Ibr=r(QSe," \u2014 "),HQ=n(QSe,"A",{href:!0});var oTt=s(HQ);qbr=r(oTt,"TFDistilBertForSequenceClassification"),oTt.forEach(t),Nbr=r(QSe," (DistilBERT model)"),QSe.forEach(t),jbr=i(ae),f4=n(ae,"LI",{});var HSe=s(f4);Cve=n(HSe,"STRONG",{});var rTt=s(Cve);Dbr=r(rTt,"electra"),rTt.forEach(t),Gbr=r(HSe," \u2014 "),UQ=n(HSe,"A",{href:!0});var tTt=s(UQ);Obr=r(tTt,"TFElectraForSequenceClassification"),tTt.forEach(t),Vbr=r(HSe," (ELECTRA model)"),HSe.forEach(t),Xbr=i(ae),m4=n(ae,"LI",{});var USe=s(m4);wve=n(USe,"STRONG",{});var aTt=s(wve);zbr=r(aTt,"flaubert"),aTt.forEach(t),Wbr=r(USe," \u2014 "),JQ=n(USe,"A",{href:!0});var nTt=s(JQ);Qbr=r(nTt,"TFFlaubertForSequenceClassification"),nTt.forEach(t),Hbr=r(USe," (FlauBERT model)"),USe.forEach(t),Ubr=i(ae),g4=n(ae,"LI",{});var JSe=s(g4);Ave=n(JSe,"STRONG",{});var sTt=s(Ave);Jbr=r(sTt,"funnel"),sTt.forEach(t),Ybr=r(JSe," \u2014 "),YQ=n(JSe,"A",{href:!0});var lTt=s(YQ);Kbr=r(lTt,"TFFunnelForSequenceClassification"),lTt.forEach(t),Zbr=r(JSe," (Funnel Transformer model)"),JSe.forEach(t),evr=i(ae),h4=n(ae,"LI",{});var YSe=s(h4);yve=n(YSe,"STRONG",{});var iTt=s(yve);ovr=r(iTt,"gpt2"),iTt.forEach(t),rvr=r(YSe," \u2014 "),KQ=n(YSe,"A",{href:!0});var dTt=s(KQ);tvr=r(dTt,"TFGPT2ForSequenceClassification"),dTt.forEach(t),avr=r(YSe," (OpenAI GPT-2 model)"),YSe.forEach(t),nvr=i(ae),p4=n(ae,"LI",{});var KSe=s(p4);Lve=n(KSe,"STRONG",{});var cTt=s(Lve);svr=r(cTt,"gptj"),cTt.forEach(t),lvr=r(KSe," \u2014 "),ZQ=n(KSe,"A",{href:!0});var fTt=s(ZQ);ivr=r(fTt,"TFGPTJForSequenceClassification"),fTt.forEach(t),dvr=r(KSe," (GPT-J model)"),KSe.forEach(t),cvr=i(ae),u4=n(ae,"LI",{});var ZSe=s(u4);xve=n(ZSe,"STRONG",{});var mTt=s(xve);fvr=r(mTt,"layoutlm"),mTt.forEach(t),mvr=r(ZSe," \u2014 "),eH=n(ZSe,"A",{href:!0});var gTt=s(eH);gvr=r(gTt,"TFLayoutLMForSequenceClassification"),gTt.forEach(t),hvr=r(ZSe," (LayoutLM model)"),ZSe.forEach(t),pvr=i(ae),_4=n(ae,"LI",{});var eRe=s(_4);$ve=n(eRe,"STRONG",{});var hTt=s($ve);uvr=r(hTt,"longformer"),hTt.forEach(t),_vr=r(eRe," \u2014 "),oH=n(eRe,"A",{href:!0});var pTt=s(oH);bvr=r(pTt,"TFLongformerForSequenceClassification"),pTt.forEach(t),vvr=r(eRe," (Longformer model)"),eRe.forEach(t),Fvr=i(ae),b4=n(ae,"LI",{});var oRe=s(b4);kve=n(oRe,"STRONG",{});var uTt=s(kve);Tvr=r(uTt,"mobilebert"),uTt.forEach(t),Mvr=r(oRe," \u2014 "),rH=n(oRe,"A",{href:!0});var _Tt=s(rH);Evr=r(_Tt,"TFMobileBertForSequenceClassification"),_Tt.forEach(t),Cvr=r(oRe," (MobileBERT model)"),oRe.forEach(t),wvr=i(ae),v4=n(ae,"LI",{});var rRe=s(v4);Sve=n(rRe,"STRONG",{});var bTt=s(Sve);Avr=r(bTt,"mpnet"),bTt.forEach(t),yvr=r(rRe," \u2014 "),tH=n(rRe,"A",{href:!0});var vTt=s(tH);Lvr=r(vTt,"TFMPNetForSequenceClassification"),vTt.forEach(t),xvr=r(rRe," (MPNet model)"),rRe.forEach(t),$vr=i(ae),F4=n(ae,"LI",{});var tRe=s(F4);Rve=n(tRe,"STRONG",{});var FTt=s(Rve);kvr=r(FTt,"openai-gpt"),FTt.forEach(t),Svr=r(tRe," \u2014 "),aH=n(tRe,"A",{href:!0});var TTt=s(aH);Rvr=r(TTt,"TFOpenAIGPTForSequenceClassification"),TTt.forEach(t),Pvr=r(tRe," (OpenAI GPT model)"),tRe.forEach(t),Bvr=i(ae),T4=n(ae,"LI",{});var aRe=s(T4);Pve=n(aRe,"STRONG",{});var MTt=s(Pve);Ivr=r(MTt,"rembert"),MTt.forEach(t),qvr=r(aRe," \u2014 "),nH=n(aRe,"A",{href:!0});var ETt=s(nH);Nvr=r(ETt,"TFRemBertForSequenceClassification"),ETt.forEach(t),jvr=r(aRe," (RemBERT model)"),aRe.forEach(t),Dvr=i(ae),M4=n(ae,"LI",{});var nRe=s(M4);Bve=n(nRe,"STRONG",{});var CTt=s(Bve);Gvr=r(CTt,"roberta"),CTt.forEach(t),Ovr=r(nRe," \u2014 "),sH=n(nRe,"A",{href:!0});var wTt=s(sH);Vvr=r(wTt,"TFRobertaForSequenceClassification"),wTt.forEach(t),Xvr=r(nRe," (RoBERTa model)"),nRe.forEach(t),zvr=i(ae),E4=n(ae,"LI",{});var sRe=s(E4);Ive=n(sRe,"STRONG",{});var ATt=s(Ive);Wvr=r(ATt,"roformer"),ATt.forEach(t),Qvr=r(sRe," \u2014 "),lH=n(sRe,"A",{href:!0});var yTt=s(lH);Hvr=r(yTt,"TFRoFormerForSequenceClassification"),yTt.forEach(t),Uvr=r(sRe," (RoFormer model)"),sRe.forEach(t),Jvr=i(ae),C4=n(ae,"LI",{});var lRe=s(C4);qve=n(lRe,"STRONG",{});var LTt=s(qve);Yvr=r(LTt,"tapas"),LTt.forEach(t),Kvr=r(lRe," \u2014 "),iH=n(lRe,"A",{href:!0});var xTt=s(iH);Zvr=r(xTt,"TFTapasForSequenceClassification"),xTt.forEach(t),eFr=r(lRe," (TAPAS model)"),lRe.forEach(t),oFr=i(ae),w4=n(ae,"LI",{});var iRe=s(w4);Nve=n(iRe,"STRONG",{});var $Tt=s(Nve);rFr=r($Tt,"transfo-xl"),$Tt.forEach(t),tFr=r(iRe," \u2014 "),dH=n(iRe,"A",{href:!0});var kTt=s(dH);aFr=r(kTt,"TFTransfoXLForSequenceClassification"),kTt.forEach(t),nFr=r(iRe," (Transformer-XL model)"),iRe.forEach(t),sFr=i(ae),A4=n(ae,"LI",{});var dRe=s(A4);jve=n(dRe,"STRONG",{});var STt=s(jve);lFr=r(STt,"xlm"),STt.forEach(t),iFr=r(dRe," \u2014 "),cH=n(dRe,"A",{href:!0});var RTt=s(cH);dFr=r(RTt,"TFXLMForSequenceClassification"),RTt.forEach(t),cFr=r(dRe," (XLM model)"),dRe.forEach(t),fFr=i(ae),y4=n(ae,"LI",{});var cRe=s(y4);Dve=n(cRe,"STRONG",{});var PTt=s(Dve);mFr=r(PTt,"xlm-roberta"),PTt.forEach(t),gFr=r(cRe," \u2014 "),fH=n(cRe,"A",{href:!0});var BTt=s(fH);hFr=r(BTt,"TFXLMRobertaForSequenceClassification"),BTt.forEach(t),pFr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),uFr=i(ae),L4=n(ae,"LI",{});var fRe=s(L4);Gve=n(fRe,"STRONG",{});var ITt=s(Gve);_Fr=r(ITt,"xlnet"),ITt.forEach(t),bFr=r(fRe," \u2014 "),mH=n(fRe,"A",{href:!0});var qTt=s(mH);vFr=r(qTt,"TFXLNetForSequenceClassification"),qTt.forEach(t),FFr=r(fRe," (XLNet model)"),fRe.forEach(t),ae.forEach(t),TFr=i(Cl),T(x4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Iqe=i(f),lc=n(f,"H2",{class:!0});var Oje=s(lc);$4=n(Oje,"A",{id:!0,class:!0,href:!0});var NTt=s($4);Ove=n(NTt,"SPAN",{});var jTt=s(Ove);T(Fx.$$.fragment,jTt),jTt.forEach(t),NTt.forEach(t),MFr=i(Oje),Vve=n(Oje,"SPAN",{});var DTt=s(Vve);EFr=r(DTt,"TFAutoModelForMultipleChoice"),DTt.forEach(t),Oje.forEach(t),qqe=i(f),ar=n(f,"DIV",{class:!0});var wl=s(ar);T(Tx.$$.fragment,wl),CFr=i(wl),ic=n(wl,"P",{});var $Z=s(ic);wFr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gH=n($Z,"A",{href:!0});var GTt=s(gH);AFr=r(GTt,"from_pretrained()"),GTt.forEach(t),yFr=r($Z," class method or the "),hH=n($Z,"A",{href:!0});var OTt=s(hH);LFr=r(OTt,"from_config()"),OTt.forEach(t),xFr=r($Z,` class
method.`),$Z.forEach(t),$Fr=i(wl),Mx=n(wl,"P",{});var Vje=s(Mx);kFr=r(Vje,"This class cannot be instantiated directly using "),Xve=n(Vje,"CODE",{});var VTt=s(Xve);SFr=r(VTt,"__init__()"),VTt.forEach(t),RFr=r(Vje," (throws an error)."),Vje.forEach(t),PFr=i(wl),Pt=n(wl,"DIV",{class:!0});var uA=s(Pt);T(Ex.$$.fragment,uA),BFr=i(uA),zve=n(uA,"P",{});var XTt=s(zve);IFr=r(XTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XTt.forEach(t),qFr=i(uA),dc=n(uA,"P",{});var kZ=s(dc);NFr=r(kZ,`Note:
Loading a model from its configuration file does `),Wve=n(kZ,"STRONG",{});var zTt=s(Wve);jFr=r(zTt,"not"),zTt.forEach(t),DFr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(kZ,"A",{href:!0});var WTt=s(pH);GFr=r(WTt,"from_pretrained()"),WTt.forEach(t),OFr=r(kZ," to load the model weights."),kZ.forEach(t),VFr=i(uA),T(k4.$$.fragment,uA),uA.forEach(t),XFr=i(wl),Sr=n(wl,"DIV",{class:!0});var Al=s(Sr);T(Cx.$$.fragment,Al),zFr=i(Al),Qve=n(Al,"P",{});var QTt=s(Qve);WFr=r(QTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QTt.forEach(t),QFr=i(Al),nn=n(Al,"P",{});var _A=s(nn);HFr=r(_A,"The model class to instantiate is selected based on the "),Hve=n(_A,"CODE",{});var HTt=s(Hve);UFr=r(HTt,"model_type"),HTt.forEach(t),JFr=r(_A,` property of the config object (either
passed as an argument or loaded from `),Uve=n(_A,"CODE",{});var UTt=s(Uve);YFr=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),KFr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(_A,"CODE",{});var JTt=s(Jve);ZFr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),e6r=r(_A,":"),_A.forEach(t),o6r=i(Al),he=n(Al,"UL",{});var _e=s(he);S4=n(_e,"LI",{});var mRe=s(S4);Yve=n(mRe,"STRONG",{});var YTt=s(Yve);r6r=r(YTt,"albert"),YTt.forEach(t),t6r=r(mRe," \u2014 "),uH=n(mRe,"A",{href:!0});var KTt=s(uH);a6r=r(KTt,"TFAlbertForMultipleChoice"),KTt.forEach(t),n6r=r(mRe," (ALBERT model)"),mRe.forEach(t),s6r=i(_e),R4=n(_e,"LI",{});var gRe=s(R4);Kve=n(gRe,"STRONG",{});var ZTt=s(Kve);l6r=r(ZTt,"bert"),ZTt.forEach(t),i6r=r(gRe," \u2014 "),_H=n(gRe,"A",{href:!0});var e8t=s(_H);d6r=r(e8t,"TFBertForMultipleChoice"),e8t.forEach(t),c6r=r(gRe," (BERT model)"),gRe.forEach(t),f6r=i(_e),P4=n(_e,"LI",{});var hRe=s(P4);Zve=n(hRe,"STRONG",{});var o8t=s(Zve);m6r=r(o8t,"camembert"),o8t.forEach(t),g6r=r(hRe," \u2014 "),bH=n(hRe,"A",{href:!0});var r8t=s(bH);h6r=r(r8t,"TFCamembertForMultipleChoice"),r8t.forEach(t),p6r=r(hRe," (CamemBERT model)"),hRe.forEach(t),u6r=i(_e),B4=n(_e,"LI",{});var pRe=s(B4);eFe=n(pRe,"STRONG",{});var t8t=s(eFe);_6r=r(t8t,"convbert"),t8t.forEach(t),b6r=r(pRe," \u2014 "),vH=n(pRe,"A",{href:!0});var a8t=s(vH);v6r=r(a8t,"TFConvBertForMultipleChoice"),a8t.forEach(t),F6r=r(pRe," (ConvBERT model)"),pRe.forEach(t),T6r=i(_e),I4=n(_e,"LI",{});var uRe=s(I4);oFe=n(uRe,"STRONG",{});var n8t=s(oFe);M6r=r(n8t,"distilbert"),n8t.forEach(t),E6r=r(uRe," \u2014 "),FH=n(uRe,"A",{href:!0});var s8t=s(FH);C6r=r(s8t,"TFDistilBertForMultipleChoice"),s8t.forEach(t),w6r=r(uRe," (DistilBERT model)"),uRe.forEach(t),A6r=i(_e),q4=n(_e,"LI",{});var _Re=s(q4);rFe=n(_Re,"STRONG",{});var l8t=s(rFe);y6r=r(l8t,"electra"),l8t.forEach(t),L6r=r(_Re," \u2014 "),TH=n(_Re,"A",{href:!0});var i8t=s(TH);x6r=r(i8t,"TFElectraForMultipleChoice"),i8t.forEach(t),$6r=r(_Re," (ELECTRA model)"),_Re.forEach(t),k6r=i(_e),N4=n(_e,"LI",{});var bRe=s(N4);tFe=n(bRe,"STRONG",{});var d8t=s(tFe);S6r=r(d8t,"flaubert"),d8t.forEach(t),R6r=r(bRe," \u2014 "),MH=n(bRe,"A",{href:!0});var c8t=s(MH);P6r=r(c8t,"TFFlaubertForMultipleChoice"),c8t.forEach(t),B6r=r(bRe," (FlauBERT model)"),bRe.forEach(t),I6r=i(_e),j4=n(_e,"LI",{});var vRe=s(j4);aFe=n(vRe,"STRONG",{});var f8t=s(aFe);q6r=r(f8t,"funnel"),f8t.forEach(t),N6r=r(vRe," \u2014 "),EH=n(vRe,"A",{href:!0});var m8t=s(EH);j6r=r(m8t,"TFFunnelForMultipleChoice"),m8t.forEach(t),D6r=r(vRe," (Funnel Transformer model)"),vRe.forEach(t),G6r=i(_e),D4=n(_e,"LI",{});var FRe=s(D4);nFe=n(FRe,"STRONG",{});var g8t=s(nFe);O6r=r(g8t,"longformer"),g8t.forEach(t),V6r=r(FRe," \u2014 "),CH=n(FRe,"A",{href:!0});var h8t=s(CH);X6r=r(h8t,"TFLongformerForMultipleChoice"),h8t.forEach(t),z6r=r(FRe," (Longformer model)"),FRe.forEach(t),W6r=i(_e),G4=n(_e,"LI",{});var TRe=s(G4);sFe=n(TRe,"STRONG",{});var p8t=s(sFe);Q6r=r(p8t,"mobilebert"),p8t.forEach(t),H6r=r(TRe," \u2014 "),wH=n(TRe,"A",{href:!0});var u8t=s(wH);U6r=r(u8t,"TFMobileBertForMultipleChoice"),u8t.forEach(t),J6r=r(TRe," (MobileBERT model)"),TRe.forEach(t),Y6r=i(_e),O4=n(_e,"LI",{});var MRe=s(O4);lFe=n(MRe,"STRONG",{});var _8t=s(lFe);K6r=r(_8t,"mpnet"),_8t.forEach(t),Z6r=r(MRe," \u2014 "),AH=n(MRe,"A",{href:!0});var b8t=s(AH);eTr=r(b8t,"TFMPNetForMultipleChoice"),b8t.forEach(t),oTr=r(MRe," (MPNet model)"),MRe.forEach(t),rTr=i(_e),V4=n(_e,"LI",{});var ERe=s(V4);iFe=n(ERe,"STRONG",{});var v8t=s(iFe);tTr=r(v8t,"rembert"),v8t.forEach(t),aTr=r(ERe," \u2014 "),yH=n(ERe,"A",{href:!0});var F8t=s(yH);nTr=r(F8t,"TFRemBertForMultipleChoice"),F8t.forEach(t),sTr=r(ERe," (RemBERT model)"),ERe.forEach(t),lTr=i(_e),X4=n(_e,"LI",{});var CRe=s(X4);dFe=n(CRe,"STRONG",{});var T8t=s(dFe);iTr=r(T8t,"roberta"),T8t.forEach(t),dTr=r(CRe," \u2014 "),LH=n(CRe,"A",{href:!0});var M8t=s(LH);cTr=r(M8t,"TFRobertaForMultipleChoice"),M8t.forEach(t),fTr=r(CRe," (RoBERTa model)"),CRe.forEach(t),mTr=i(_e),z4=n(_e,"LI",{});var wRe=s(z4);cFe=n(wRe,"STRONG",{});var E8t=s(cFe);gTr=r(E8t,"roformer"),E8t.forEach(t),hTr=r(wRe," \u2014 "),xH=n(wRe,"A",{href:!0});var C8t=s(xH);pTr=r(C8t,"TFRoFormerForMultipleChoice"),C8t.forEach(t),uTr=r(wRe," (RoFormer model)"),wRe.forEach(t),_Tr=i(_e),W4=n(_e,"LI",{});var ARe=s(W4);fFe=n(ARe,"STRONG",{});var w8t=s(fFe);bTr=r(w8t,"xlm"),w8t.forEach(t),vTr=r(ARe," \u2014 "),$H=n(ARe,"A",{href:!0});var A8t=s($H);FTr=r(A8t,"TFXLMForMultipleChoice"),A8t.forEach(t),TTr=r(ARe," (XLM model)"),ARe.forEach(t),MTr=i(_e),Q4=n(_e,"LI",{});var yRe=s(Q4);mFe=n(yRe,"STRONG",{});var y8t=s(mFe);ETr=r(y8t,"xlm-roberta"),y8t.forEach(t),CTr=r(yRe," \u2014 "),kH=n(yRe,"A",{href:!0});var L8t=s(kH);wTr=r(L8t,"TFXLMRobertaForMultipleChoice"),L8t.forEach(t),ATr=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),yTr=i(_e),H4=n(_e,"LI",{});var LRe=s(H4);gFe=n(LRe,"STRONG",{});var x8t=s(gFe);LTr=r(x8t,"xlnet"),x8t.forEach(t),xTr=r(LRe," \u2014 "),SH=n(LRe,"A",{href:!0});var $8t=s(SH);$Tr=r($8t,"TFXLNetForMultipleChoice"),$8t.forEach(t),kTr=r(LRe," (XLNet model)"),LRe.forEach(t),_e.forEach(t),STr=i(Al),T(U4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Nqe=i(f),cc=n(f,"H2",{class:!0});var Xje=s(cc);J4=n(Xje,"A",{id:!0,class:!0,href:!0});var k8t=s(J4);hFe=n(k8t,"SPAN",{});var S8t=s(hFe);T(wx.$$.fragment,S8t),S8t.forEach(t),k8t.forEach(t),RTr=i(Xje),pFe=n(Xje,"SPAN",{});var R8t=s(pFe);PTr=r(R8t,"TFAutoModelForNextSentencePrediction"),R8t.forEach(t),Xje.forEach(t),jqe=i(f),nr=n(f,"DIV",{class:!0});var yl=s(nr);T(Ax.$$.fragment,yl),BTr=i(yl),fc=n(yl,"P",{});var SZ=s(fc);ITr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RH=n(SZ,"A",{href:!0});var P8t=s(RH);qTr=r(P8t,"from_pretrained()"),P8t.forEach(t),NTr=r(SZ," class method or the "),PH=n(SZ,"A",{href:!0});var B8t=s(PH);jTr=r(B8t,"from_config()"),B8t.forEach(t),DTr=r(SZ,` class
method.`),SZ.forEach(t),GTr=i(yl),yx=n(yl,"P",{});var zje=s(yx);OTr=r(zje,"This class cannot be instantiated directly using "),uFe=n(zje,"CODE",{});var I8t=s(uFe);VTr=r(I8t,"__init__()"),I8t.forEach(t),XTr=r(zje," (throws an error)."),zje.forEach(t),zTr=i(yl),Bt=n(yl,"DIV",{class:!0});var bA=s(Bt);T(Lx.$$.fragment,bA),WTr=i(bA),_Fe=n(bA,"P",{});var q8t=s(_Fe);QTr=r(q8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),q8t.forEach(t),HTr=i(bA),mc=n(bA,"P",{});var RZ=s(mc);UTr=r(RZ,`Note:
Loading a model from its configuration file does `),bFe=n(RZ,"STRONG",{});var N8t=s(bFe);JTr=r(N8t,"not"),N8t.forEach(t),YTr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(RZ,"A",{href:!0});var j8t=s(BH);KTr=r(j8t,"from_pretrained()"),j8t.forEach(t),ZTr=r(RZ," to load the model weights."),RZ.forEach(t),e8r=i(bA),T(Y4.$$.fragment,bA),bA.forEach(t),o8r=i(yl),Rr=n(yl,"DIV",{class:!0});var Ll=s(Rr);T(xx.$$.fragment,Ll),r8r=i(Ll),vFe=n(Ll,"P",{});var D8t=s(vFe);t8r=r(D8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),D8t.forEach(t),a8r=i(Ll),sn=n(Ll,"P",{});var vA=s(sn);n8r=r(vA,"The model class to instantiate is selected based on the "),FFe=n(vA,"CODE",{});var G8t=s(FFe);s8r=r(G8t,"model_type"),G8t.forEach(t),l8r=r(vA,` property of the config object (either
passed as an argument or loaded from `),TFe=n(vA,"CODE",{});var O8t=s(TFe);i8r=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),d8r=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(vA,"CODE",{});var V8t=s(MFe);c8r=r(V8t,"pretrained_model_name_or_path"),V8t.forEach(t),f8r=r(vA,":"),vA.forEach(t),m8r=i(Ll),$x=n(Ll,"UL",{});var Wje=s($x);K4=n(Wje,"LI",{});var xRe=s(K4);EFe=n(xRe,"STRONG",{});var X8t=s(EFe);g8r=r(X8t,"bert"),X8t.forEach(t),h8r=r(xRe," \u2014 "),IH=n(xRe,"A",{href:!0});var z8t=s(IH);p8r=r(z8t,"TFBertForNextSentencePrediction"),z8t.forEach(t),u8r=r(xRe," (BERT model)"),xRe.forEach(t),_8r=i(Wje),Z4=n(Wje,"LI",{});var $Re=s(Z4);CFe=n($Re,"STRONG",{});var W8t=s(CFe);b8r=r(W8t,"mobilebert"),W8t.forEach(t),v8r=r($Re," \u2014 "),qH=n($Re,"A",{href:!0});var Q8t=s(qH);F8r=r(Q8t,"TFMobileBertForNextSentencePrediction"),Q8t.forEach(t),T8r=r($Re," (MobileBERT model)"),$Re.forEach(t),Wje.forEach(t),M8r=i(Ll),T(eE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Dqe=i(f),gc=n(f,"H2",{class:!0});var Qje=s(gc);oE=n(Qje,"A",{id:!0,class:!0,href:!0});var H8t=s(oE);wFe=n(H8t,"SPAN",{});var U8t=s(wFe);T(kx.$$.fragment,U8t),U8t.forEach(t),H8t.forEach(t),E8r=i(Qje),AFe=n(Qje,"SPAN",{});var J8t=s(AFe);C8r=r(J8t,"TFAutoModelForTableQuestionAnswering"),J8t.forEach(t),Qje.forEach(t),Gqe=i(f),sr=n(f,"DIV",{class:!0});var xl=s(sr);T(Sx.$$.fragment,xl),w8r=i(xl),hc=n(xl,"P",{});var PZ=s(hc);A8r=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NH=n(PZ,"A",{href:!0});var Y8t=s(NH);y8r=r(Y8t,"from_pretrained()"),Y8t.forEach(t),L8r=r(PZ," class method or the "),jH=n(PZ,"A",{href:!0});var K8t=s(jH);x8r=r(K8t,"from_config()"),K8t.forEach(t),$8r=r(PZ,` class
method.`),PZ.forEach(t),k8r=i(xl),Rx=n(xl,"P",{});var Hje=s(Rx);S8r=r(Hje,"This class cannot be instantiated directly using "),yFe=n(Hje,"CODE",{});var Z8t=s(yFe);R8r=r(Z8t,"__init__()"),Z8t.forEach(t),P8r=r(Hje," (throws an error)."),Hje.forEach(t),B8r=i(xl),It=n(xl,"DIV",{class:!0});var FA=s(It);T(Px.$$.fragment,FA),I8r=i(FA),LFe=n(FA,"P",{});var eMt=s(LFe);q8r=r(eMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),eMt.forEach(t),N8r=i(FA),pc=n(FA,"P",{});var BZ=s(pc);j8r=r(BZ,`Note:
Loading a model from its configuration file does `),xFe=n(BZ,"STRONG",{});var oMt=s(xFe);D8r=r(oMt,"not"),oMt.forEach(t),G8r=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(BZ,"A",{href:!0});var rMt=s(DH);O8r=r(rMt,"from_pretrained()"),rMt.forEach(t),V8r=r(BZ," to load the model weights."),BZ.forEach(t),X8r=i(FA),T(rE.$$.fragment,FA),FA.forEach(t),z8r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(Bx.$$.fragment,$l),W8r=i($l),$Fe=n($l,"P",{});var tMt=s($Fe);Q8r=r(tMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tMt.forEach(t),H8r=i($l),ln=n($l,"P",{});var TA=s(ln);U8r=r(TA,"The model class to instantiate is selected based on the "),kFe=n(TA,"CODE",{});var aMt=s(kFe);J8r=r(aMt,"model_type"),aMt.forEach(t),Y8r=r(TA,` property of the config object (either
passed as an argument or loaded from `),SFe=n(TA,"CODE",{});var nMt=s(SFe);K8r=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),Z8r=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(TA,"CODE",{});var sMt=s(RFe);eMr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),oMr=r(TA,":"),TA.forEach(t),rMr=i($l),PFe=n($l,"UL",{});var lMt=s(PFe);tE=n(lMt,"LI",{});var kRe=s(tE);BFe=n(kRe,"STRONG",{});var iMt=s(BFe);tMr=r(iMt,"tapas"),iMt.forEach(t),aMr=r(kRe," \u2014 "),GH=n(kRe,"A",{href:!0});var dMt=s(GH);nMr=r(dMt,"TFTapasForQuestionAnswering"),dMt.forEach(t),sMr=r(kRe," (TAPAS model)"),kRe.forEach(t),lMt.forEach(t),lMr=i($l),T(aE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Oqe=i(f),uc=n(f,"H2",{class:!0});var Uje=s(uc);nE=n(Uje,"A",{id:!0,class:!0,href:!0});var cMt=s(nE);IFe=n(cMt,"SPAN",{});var fMt=s(IFe);T(Ix.$$.fragment,fMt),fMt.forEach(t),cMt.forEach(t),iMr=i(Uje),qFe=n(Uje,"SPAN",{});var mMt=s(qFe);dMr=r(mMt,"TFAutoModelForTokenClassification"),mMt.forEach(t),Uje.forEach(t),Vqe=i(f),lr=n(f,"DIV",{class:!0});var kl=s(lr);T(qx.$$.fragment,kl),cMr=i(kl),_c=n(kl,"P",{});var IZ=s(_c);fMr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=n(IZ,"A",{href:!0});var gMt=s(OH);mMr=r(gMt,"from_pretrained()"),gMt.forEach(t),gMr=r(IZ," class method or the "),VH=n(IZ,"A",{href:!0});var hMt=s(VH);hMr=r(hMt,"from_config()"),hMt.forEach(t),pMr=r(IZ,` class
method.`),IZ.forEach(t),uMr=i(kl),Nx=n(kl,"P",{});var Jje=s(Nx);_Mr=r(Jje,"This class cannot be instantiated directly using "),NFe=n(Jje,"CODE",{});var pMt=s(NFe);bMr=r(pMt,"__init__()"),pMt.forEach(t),vMr=r(Jje," (throws an error)."),Jje.forEach(t),FMr=i(kl),qt=n(kl,"DIV",{class:!0});var MA=s(qt);T(jx.$$.fragment,MA),TMr=i(MA),jFe=n(MA,"P",{});var uMt=s(jFe);MMr=r(uMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uMt.forEach(t),EMr=i(MA),bc=n(MA,"P",{});var qZ=s(bc);CMr=r(qZ,`Note:
Loading a model from its configuration file does `),DFe=n(qZ,"STRONG",{});var _Mt=s(DFe);wMr=r(_Mt,"not"),_Mt.forEach(t),AMr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(qZ,"A",{href:!0});var bMt=s(XH);yMr=r(bMt,"from_pretrained()"),bMt.forEach(t),LMr=r(qZ," to load the model weights."),qZ.forEach(t),xMr=i(MA),T(sE.$$.fragment,MA),MA.forEach(t),$Mr=i(kl),Br=n(kl,"DIV",{class:!0});var Sl=s(Br);T(Dx.$$.fragment,Sl),kMr=i(Sl),GFe=n(Sl,"P",{});var vMt=s(GFe);SMr=r(vMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vMt.forEach(t),RMr=i(Sl),dn=n(Sl,"P",{});var EA=s(dn);PMr=r(EA,"The model class to instantiate is selected based on the "),OFe=n(EA,"CODE",{});var FMt=s(OFe);BMr=r(FMt,"model_type"),FMt.forEach(t),IMr=r(EA,` property of the config object (either
passed as an argument or loaded from `),VFe=n(EA,"CODE",{});var TMt=s(VFe);qMr=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),NMr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(EA,"CODE",{});var MMt=s(XFe);jMr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),DMr=r(EA,":"),EA.forEach(t),GMr=i(Sl),de=n(Sl,"UL",{});var me=s(de);lE=n(me,"LI",{});var SRe=s(lE);zFe=n(SRe,"STRONG",{});var EMt=s(zFe);OMr=r(EMt,"albert"),EMt.forEach(t),VMr=r(SRe," \u2014 "),zH=n(SRe,"A",{href:!0});var CMt=s(zH);XMr=r(CMt,"TFAlbertForTokenClassification"),CMt.forEach(t),zMr=r(SRe," (ALBERT model)"),SRe.forEach(t),WMr=i(me),iE=n(me,"LI",{});var RRe=s(iE);WFe=n(RRe,"STRONG",{});var wMt=s(WFe);QMr=r(wMt,"bert"),wMt.forEach(t),HMr=r(RRe," \u2014 "),WH=n(RRe,"A",{href:!0});var AMt=s(WH);UMr=r(AMt,"TFBertForTokenClassification"),AMt.forEach(t),JMr=r(RRe," (BERT model)"),RRe.forEach(t),YMr=i(me),dE=n(me,"LI",{});var PRe=s(dE);QFe=n(PRe,"STRONG",{});var yMt=s(QFe);KMr=r(yMt,"camembert"),yMt.forEach(t),ZMr=r(PRe," \u2014 "),QH=n(PRe,"A",{href:!0});var LMt=s(QH);e4r=r(LMt,"TFCamembertForTokenClassification"),LMt.forEach(t),o4r=r(PRe," (CamemBERT model)"),PRe.forEach(t),r4r=i(me),cE=n(me,"LI",{});var BRe=s(cE);HFe=n(BRe,"STRONG",{});var xMt=s(HFe);t4r=r(xMt,"convbert"),xMt.forEach(t),a4r=r(BRe," \u2014 "),HH=n(BRe,"A",{href:!0});var $Mt=s(HH);n4r=r($Mt,"TFConvBertForTokenClassification"),$Mt.forEach(t),s4r=r(BRe," (ConvBERT model)"),BRe.forEach(t),l4r=i(me),fE=n(me,"LI",{});var IRe=s(fE);UFe=n(IRe,"STRONG",{});var kMt=s(UFe);i4r=r(kMt,"deberta"),kMt.forEach(t),d4r=r(IRe," \u2014 "),UH=n(IRe,"A",{href:!0});var SMt=s(UH);c4r=r(SMt,"TFDebertaForTokenClassification"),SMt.forEach(t),f4r=r(IRe," (DeBERTa model)"),IRe.forEach(t),m4r=i(me),mE=n(me,"LI",{});var qRe=s(mE);JFe=n(qRe,"STRONG",{});var RMt=s(JFe);g4r=r(RMt,"deberta-v2"),RMt.forEach(t),h4r=r(qRe," \u2014 "),JH=n(qRe,"A",{href:!0});var PMt=s(JH);p4r=r(PMt,"TFDebertaV2ForTokenClassification"),PMt.forEach(t),u4r=r(qRe," (DeBERTa-v2 model)"),qRe.forEach(t),_4r=i(me),gE=n(me,"LI",{});var NRe=s(gE);YFe=n(NRe,"STRONG",{});var BMt=s(YFe);b4r=r(BMt,"distilbert"),BMt.forEach(t),v4r=r(NRe," \u2014 "),YH=n(NRe,"A",{href:!0});var IMt=s(YH);F4r=r(IMt,"TFDistilBertForTokenClassification"),IMt.forEach(t),T4r=r(NRe," (DistilBERT model)"),NRe.forEach(t),M4r=i(me),hE=n(me,"LI",{});var jRe=s(hE);KFe=n(jRe,"STRONG",{});var qMt=s(KFe);E4r=r(qMt,"electra"),qMt.forEach(t),C4r=r(jRe," \u2014 "),KH=n(jRe,"A",{href:!0});var NMt=s(KH);w4r=r(NMt,"TFElectraForTokenClassification"),NMt.forEach(t),A4r=r(jRe," (ELECTRA model)"),jRe.forEach(t),y4r=i(me),pE=n(me,"LI",{});var DRe=s(pE);ZFe=n(DRe,"STRONG",{});var jMt=s(ZFe);L4r=r(jMt,"flaubert"),jMt.forEach(t),x4r=r(DRe," \u2014 "),ZH=n(DRe,"A",{href:!0});var DMt=s(ZH);$4r=r(DMt,"TFFlaubertForTokenClassification"),DMt.forEach(t),k4r=r(DRe," (FlauBERT model)"),DRe.forEach(t),S4r=i(me),uE=n(me,"LI",{});var GRe=s(uE);e6e=n(GRe,"STRONG",{});var GMt=s(e6e);R4r=r(GMt,"funnel"),GMt.forEach(t),P4r=r(GRe," \u2014 "),eU=n(GRe,"A",{href:!0});var OMt=s(eU);B4r=r(OMt,"TFFunnelForTokenClassification"),OMt.forEach(t),I4r=r(GRe," (Funnel Transformer model)"),GRe.forEach(t),q4r=i(me),_E=n(me,"LI",{});var ORe=s(_E);o6e=n(ORe,"STRONG",{});var VMt=s(o6e);N4r=r(VMt,"layoutlm"),VMt.forEach(t),j4r=r(ORe," \u2014 "),oU=n(ORe,"A",{href:!0});var XMt=s(oU);D4r=r(XMt,"TFLayoutLMForTokenClassification"),XMt.forEach(t),G4r=r(ORe," (LayoutLM model)"),ORe.forEach(t),O4r=i(me),bE=n(me,"LI",{});var VRe=s(bE);r6e=n(VRe,"STRONG",{});var zMt=s(r6e);V4r=r(zMt,"longformer"),zMt.forEach(t),X4r=r(VRe," \u2014 "),rU=n(VRe,"A",{href:!0});var WMt=s(rU);z4r=r(WMt,"TFLongformerForTokenClassification"),WMt.forEach(t),W4r=r(VRe," (Longformer model)"),VRe.forEach(t),Q4r=i(me),vE=n(me,"LI",{});var XRe=s(vE);t6e=n(XRe,"STRONG",{});var QMt=s(t6e);H4r=r(QMt,"mobilebert"),QMt.forEach(t),U4r=r(XRe," \u2014 "),tU=n(XRe,"A",{href:!0});var HMt=s(tU);J4r=r(HMt,"TFMobileBertForTokenClassification"),HMt.forEach(t),Y4r=r(XRe," (MobileBERT model)"),XRe.forEach(t),K4r=i(me),FE=n(me,"LI",{});var zRe=s(FE);a6e=n(zRe,"STRONG",{});var UMt=s(a6e);Z4r=r(UMt,"mpnet"),UMt.forEach(t),eEr=r(zRe," \u2014 "),aU=n(zRe,"A",{href:!0});var JMt=s(aU);oEr=r(JMt,"TFMPNetForTokenClassification"),JMt.forEach(t),rEr=r(zRe," (MPNet model)"),zRe.forEach(t),tEr=i(me),TE=n(me,"LI",{});var WRe=s(TE);n6e=n(WRe,"STRONG",{});var YMt=s(n6e);aEr=r(YMt,"rembert"),YMt.forEach(t),nEr=r(WRe," \u2014 "),nU=n(WRe,"A",{href:!0});var KMt=s(nU);sEr=r(KMt,"TFRemBertForTokenClassification"),KMt.forEach(t),lEr=r(WRe," (RemBERT model)"),WRe.forEach(t),iEr=i(me),ME=n(me,"LI",{});var QRe=s(ME);s6e=n(QRe,"STRONG",{});var ZMt=s(s6e);dEr=r(ZMt,"roberta"),ZMt.forEach(t),cEr=r(QRe," \u2014 "),sU=n(QRe,"A",{href:!0});var e4t=s(sU);fEr=r(e4t,"TFRobertaForTokenClassification"),e4t.forEach(t),mEr=r(QRe," (RoBERTa model)"),QRe.forEach(t),gEr=i(me),EE=n(me,"LI",{});var HRe=s(EE);l6e=n(HRe,"STRONG",{});var o4t=s(l6e);hEr=r(o4t,"roformer"),o4t.forEach(t),pEr=r(HRe," \u2014 "),lU=n(HRe,"A",{href:!0});var r4t=s(lU);uEr=r(r4t,"TFRoFormerForTokenClassification"),r4t.forEach(t),_Er=r(HRe," (RoFormer model)"),HRe.forEach(t),bEr=i(me),CE=n(me,"LI",{});var URe=s(CE);i6e=n(URe,"STRONG",{});var t4t=s(i6e);vEr=r(t4t,"xlm"),t4t.forEach(t),FEr=r(URe," \u2014 "),iU=n(URe,"A",{href:!0});var a4t=s(iU);TEr=r(a4t,"TFXLMForTokenClassification"),a4t.forEach(t),MEr=r(URe," (XLM model)"),URe.forEach(t),EEr=i(me),wE=n(me,"LI",{});var JRe=s(wE);d6e=n(JRe,"STRONG",{});var n4t=s(d6e);CEr=r(n4t,"xlm-roberta"),n4t.forEach(t),wEr=r(JRe," \u2014 "),dU=n(JRe,"A",{href:!0});var s4t=s(dU);AEr=r(s4t,"TFXLMRobertaForTokenClassification"),s4t.forEach(t),yEr=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),LEr=i(me),AE=n(me,"LI",{});var YRe=s(AE);c6e=n(YRe,"STRONG",{});var l4t=s(c6e);xEr=r(l4t,"xlnet"),l4t.forEach(t),$Er=r(YRe," \u2014 "),cU=n(YRe,"A",{href:!0});var i4t=s(cU);kEr=r(i4t,"TFXLNetForTokenClassification"),i4t.forEach(t),SEr=r(YRe," (XLNet model)"),YRe.forEach(t),me.forEach(t),REr=i(Sl),T(yE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Xqe=i(f),vc=n(f,"H2",{class:!0});var Yje=s(vc);LE=n(Yje,"A",{id:!0,class:!0,href:!0});var d4t=s(LE);f6e=n(d4t,"SPAN",{});var c4t=s(f6e);T(Gx.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),PEr=i(Yje),m6e=n(Yje,"SPAN",{});var f4t=s(m6e);BEr=r(f4t,"TFAutoModelForQuestionAnswering"),f4t.forEach(t),Yje.forEach(t),zqe=i(f),ir=n(f,"DIV",{class:!0});var Rl=s(ir);T(Ox.$$.fragment,Rl),IEr=i(Rl),Fc=n(Rl,"P",{});var NZ=s(Fc);qEr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fU=n(NZ,"A",{href:!0});var m4t=s(fU);NEr=r(m4t,"from_pretrained()"),m4t.forEach(t),jEr=r(NZ," class method or the "),mU=n(NZ,"A",{href:!0});var g4t=s(mU);DEr=r(g4t,"from_config()"),g4t.forEach(t),GEr=r(NZ,` class
method.`),NZ.forEach(t),OEr=i(Rl),Vx=n(Rl,"P",{});var Kje=s(Vx);VEr=r(Kje,"This class cannot be instantiated directly using "),g6e=n(Kje,"CODE",{});var h4t=s(g6e);XEr=r(h4t,"__init__()"),h4t.forEach(t),zEr=r(Kje," (throws an error)."),Kje.forEach(t),WEr=i(Rl),Nt=n(Rl,"DIV",{class:!0});var CA=s(Nt);T(Xx.$$.fragment,CA),QEr=i(CA),h6e=n(CA,"P",{});var p4t=s(h6e);HEr=r(p4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),p4t.forEach(t),UEr=i(CA),Tc=n(CA,"P",{});var jZ=s(Tc);JEr=r(jZ,`Note:
Loading a model from its configuration file does `),p6e=n(jZ,"STRONG",{});var u4t=s(p6e);YEr=r(u4t,"not"),u4t.forEach(t),KEr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(jZ,"A",{href:!0});var _4t=s(gU);ZEr=r(_4t,"from_pretrained()"),_4t.forEach(t),eCr=r(jZ," to load the model weights."),jZ.forEach(t),oCr=i(CA),T(xE.$$.fragment,CA),CA.forEach(t),rCr=i(Rl),Ir=n(Rl,"DIV",{class:!0});var Pl=s(Ir);T(zx.$$.fragment,Pl),tCr=i(Pl),u6e=n(Pl,"P",{});var b4t=s(u6e);aCr=r(b4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),b4t.forEach(t),nCr=i(Pl),cn=n(Pl,"P",{});var wA=s(cn);sCr=r(wA,"The model class to instantiate is selected based on the "),_6e=n(wA,"CODE",{});var v4t=s(_6e);lCr=r(v4t,"model_type"),v4t.forEach(t),iCr=r(wA,` property of the config object (either
passed as an argument or loaded from `),b6e=n(wA,"CODE",{});var F4t=s(b6e);dCr=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),cCr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(wA,"CODE",{});var T4t=s(v6e);fCr=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),mCr=r(wA,":"),wA.forEach(t),gCr=i(Pl),ce=n(Pl,"UL",{});var ge=s(ce);$E=n(ge,"LI",{});var KRe=s($E);F6e=n(KRe,"STRONG",{});var M4t=s(F6e);hCr=r(M4t,"albert"),M4t.forEach(t),pCr=r(KRe," \u2014 "),hU=n(KRe,"A",{href:!0});var E4t=s(hU);uCr=r(E4t,"TFAlbertForQuestionAnswering"),E4t.forEach(t),_Cr=r(KRe," (ALBERT model)"),KRe.forEach(t),bCr=i(ge),kE=n(ge,"LI",{});var ZRe=s(kE);T6e=n(ZRe,"STRONG",{});var C4t=s(T6e);vCr=r(C4t,"bert"),C4t.forEach(t),FCr=r(ZRe," \u2014 "),pU=n(ZRe,"A",{href:!0});var w4t=s(pU);TCr=r(w4t,"TFBertForQuestionAnswering"),w4t.forEach(t),MCr=r(ZRe," (BERT model)"),ZRe.forEach(t),ECr=i(ge),SE=n(ge,"LI",{});var ePe=s(SE);M6e=n(ePe,"STRONG",{});var A4t=s(M6e);CCr=r(A4t,"camembert"),A4t.forEach(t),wCr=r(ePe," \u2014 "),uU=n(ePe,"A",{href:!0});var y4t=s(uU);ACr=r(y4t,"TFCamembertForQuestionAnswering"),y4t.forEach(t),yCr=r(ePe," (CamemBERT model)"),ePe.forEach(t),LCr=i(ge),RE=n(ge,"LI",{});var oPe=s(RE);E6e=n(oPe,"STRONG",{});var L4t=s(E6e);xCr=r(L4t,"convbert"),L4t.forEach(t),$Cr=r(oPe," \u2014 "),_U=n(oPe,"A",{href:!0});var x4t=s(_U);kCr=r(x4t,"TFConvBertForQuestionAnswering"),x4t.forEach(t),SCr=r(oPe," (ConvBERT model)"),oPe.forEach(t),RCr=i(ge),PE=n(ge,"LI",{});var rPe=s(PE);C6e=n(rPe,"STRONG",{});var $4t=s(C6e);PCr=r($4t,"deberta"),$4t.forEach(t),BCr=r(rPe," \u2014 "),bU=n(rPe,"A",{href:!0});var k4t=s(bU);ICr=r(k4t,"TFDebertaForQuestionAnswering"),k4t.forEach(t),qCr=r(rPe," (DeBERTa model)"),rPe.forEach(t),NCr=i(ge),BE=n(ge,"LI",{});var tPe=s(BE);w6e=n(tPe,"STRONG",{});var S4t=s(w6e);jCr=r(S4t,"deberta-v2"),S4t.forEach(t),DCr=r(tPe," \u2014 "),vU=n(tPe,"A",{href:!0});var R4t=s(vU);GCr=r(R4t,"TFDebertaV2ForQuestionAnswering"),R4t.forEach(t),OCr=r(tPe," (DeBERTa-v2 model)"),tPe.forEach(t),VCr=i(ge),IE=n(ge,"LI",{});var aPe=s(IE);A6e=n(aPe,"STRONG",{});var P4t=s(A6e);XCr=r(P4t,"distilbert"),P4t.forEach(t),zCr=r(aPe," \u2014 "),FU=n(aPe,"A",{href:!0});var B4t=s(FU);WCr=r(B4t,"TFDistilBertForQuestionAnswering"),B4t.forEach(t),QCr=r(aPe," (DistilBERT model)"),aPe.forEach(t),HCr=i(ge),qE=n(ge,"LI",{});var nPe=s(qE);y6e=n(nPe,"STRONG",{});var I4t=s(y6e);UCr=r(I4t,"electra"),I4t.forEach(t),JCr=r(nPe," \u2014 "),TU=n(nPe,"A",{href:!0});var q4t=s(TU);YCr=r(q4t,"TFElectraForQuestionAnswering"),q4t.forEach(t),KCr=r(nPe," (ELECTRA model)"),nPe.forEach(t),ZCr=i(ge),NE=n(ge,"LI",{});var sPe=s(NE);L6e=n(sPe,"STRONG",{});var N4t=s(L6e);e5r=r(N4t,"flaubert"),N4t.forEach(t),o5r=r(sPe," \u2014 "),MU=n(sPe,"A",{href:!0});var j4t=s(MU);r5r=r(j4t,"TFFlaubertForQuestionAnsweringSimple"),j4t.forEach(t),t5r=r(sPe," (FlauBERT model)"),sPe.forEach(t),a5r=i(ge),jE=n(ge,"LI",{});var lPe=s(jE);x6e=n(lPe,"STRONG",{});var D4t=s(x6e);n5r=r(D4t,"funnel"),D4t.forEach(t),s5r=r(lPe," \u2014 "),EU=n(lPe,"A",{href:!0});var G4t=s(EU);l5r=r(G4t,"TFFunnelForQuestionAnswering"),G4t.forEach(t),i5r=r(lPe," (Funnel Transformer model)"),lPe.forEach(t),d5r=i(ge),DE=n(ge,"LI",{});var iPe=s(DE);$6e=n(iPe,"STRONG",{});var O4t=s($6e);c5r=r(O4t,"gptj"),O4t.forEach(t),f5r=r(iPe," \u2014 "),CU=n(iPe,"A",{href:!0});var V4t=s(CU);m5r=r(V4t,"TFGPTJForQuestionAnswering"),V4t.forEach(t),g5r=r(iPe," (GPT-J model)"),iPe.forEach(t),h5r=i(ge),GE=n(ge,"LI",{});var dPe=s(GE);k6e=n(dPe,"STRONG",{});var X4t=s(k6e);p5r=r(X4t,"longformer"),X4t.forEach(t),u5r=r(dPe," \u2014 "),wU=n(dPe,"A",{href:!0});var z4t=s(wU);_5r=r(z4t,"TFLongformerForQuestionAnswering"),z4t.forEach(t),b5r=r(dPe," (Longformer model)"),dPe.forEach(t),v5r=i(ge),OE=n(ge,"LI",{});var cPe=s(OE);S6e=n(cPe,"STRONG",{});var W4t=s(S6e);F5r=r(W4t,"mobilebert"),W4t.forEach(t),T5r=r(cPe," \u2014 "),AU=n(cPe,"A",{href:!0});var Q4t=s(AU);M5r=r(Q4t,"TFMobileBertForQuestionAnswering"),Q4t.forEach(t),E5r=r(cPe," (MobileBERT model)"),cPe.forEach(t),C5r=i(ge),VE=n(ge,"LI",{});var fPe=s(VE);R6e=n(fPe,"STRONG",{});var H4t=s(R6e);w5r=r(H4t,"mpnet"),H4t.forEach(t),A5r=r(fPe," \u2014 "),yU=n(fPe,"A",{href:!0});var U4t=s(yU);y5r=r(U4t,"TFMPNetForQuestionAnswering"),U4t.forEach(t),L5r=r(fPe," (MPNet model)"),fPe.forEach(t),x5r=i(ge),XE=n(ge,"LI",{});var mPe=s(XE);P6e=n(mPe,"STRONG",{});var J4t=s(P6e);$5r=r(J4t,"rembert"),J4t.forEach(t),k5r=r(mPe," \u2014 "),LU=n(mPe,"A",{href:!0});var Y4t=s(LU);S5r=r(Y4t,"TFRemBertForQuestionAnswering"),Y4t.forEach(t),R5r=r(mPe," (RemBERT model)"),mPe.forEach(t),P5r=i(ge),zE=n(ge,"LI",{});var gPe=s(zE);B6e=n(gPe,"STRONG",{});var K4t=s(B6e);B5r=r(K4t,"roberta"),K4t.forEach(t),I5r=r(gPe," \u2014 "),xU=n(gPe,"A",{href:!0});var Z4t=s(xU);q5r=r(Z4t,"TFRobertaForQuestionAnswering"),Z4t.forEach(t),N5r=r(gPe," (RoBERTa model)"),gPe.forEach(t),j5r=i(ge),WE=n(ge,"LI",{});var hPe=s(WE);I6e=n(hPe,"STRONG",{});var eEt=s(I6e);D5r=r(eEt,"roformer"),eEt.forEach(t),G5r=r(hPe," \u2014 "),$U=n(hPe,"A",{href:!0});var oEt=s($U);O5r=r(oEt,"TFRoFormerForQuestionAnswering"),oEt.forEach(t),V5r=r(hPe," (RoFormer model)"),hPe.forEach(t),X5r=i(ge),QE=n(ge,"LI",{});var pPe=s(QE);q6e=n(pPe,"STRONG",{});var rEt=s(q6e);z5r=r(rEt,"xlm"),rEt.forEach(t),W5r=r(pPe," \u2014 "),kU=n(pPe,"A",{href:!0});var tEt=s(kU);Q5r=r(tEt,"TFXLMForQuestionAnsweringSimple"),tEt.forEach(t),H5r=r(pPe," (XLM model)"),pPe.forEach(t),U5r=i(ge),HE=n(ge,"LI",{});var uPe=s(HE);N6e=n(uPe,"STRONG",{});var aEt=s(N6e);J5r=r(aEt,"xlm-roberta"),aEt.forEach(t),Y5r=r(uPe," \u2014 "),SU=n(uPe,"A",{href:!0});var nEt=s(SU);K5r=r(nEt,"TFXLMRobertaForQuestionAnswering"),nEt.forEach(t),Z5r=r(uPe," (XLM-RoBERTa model)"),uPe.forEach(t),e3r=i(ge),UE=n(ge,"LI",{});var _Pe=s(UE);j6e=n(_Pe,"STRONG",{});var sEt=s(j6e);o3r=r(sEt,"xlnet"),sEt.forEach(t),r3r=r(_Pe," \u2014 "),RU=n(_Pe,"A",{href:!0});var lEt=s(RU);t3r=r(lEt,"TFXLNetForQuestionAnsweringSimple"),lEt.forEach(t),a3r=r(_Pe," (XLNet model)"),_Pe.forEach(t),ge.forEach(t),n3r=i(Pl),T(JE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Wqe=i(f),Mc=n(f,"H2",{class:!0});var Zje=s(Mc);YE=n(Zje,"A",{id:!0,class:!0,href:!0});var iEt=s(YE);D6e=n(iEt,"SPAN",{});var dEt=s(D6e);T(Wx.$$.fragment,dEt),dEt.forEach(t),iEt.forEach(t),s3r=i(Zje),G6e=n(Zje,"SPAN",{});var cEt=s(G6e);l3r=r(cEt,"TFAutoModelForVision2Seq"),cEt.forEach(t),Zje.forEach(t),Qqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(Qx.$$.fragment,Bl),i3r=i(Bl),Ec=n(Bl,"P",{});var DZ=s(Ec);d3r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PU=n(DZ,"A",{href:!0});var fEt=s(PU);c3r=r(fEt,"from_pretrained()"),fEt.forEach(t),f3r=r(DZ," class method or the "),BU=n(DZ,"A",{href:!0});var mEt=s(BU);m3r=r(mEt,"from_config()"),mEt.forEach(t),g3r=r(DZ,` class
method.`),DZ.forEach(t),h3r=i(Bl),Hx=n(Bl,"P",{});var eDe=s(Hx);p3r=r(eDe,"This class cannot be instantiated directly using "),O6e=n(eDe,"CODE",{});var gEt=s(O6e);u3r=r(gEt,"__init__()"),gEt.forEach(t),_3r=r(eDe," (throws an error)."),eDe.forEach(t),b3r=i(Bl),jt=n(Bl,"DIV",{class:!0});var AA=s(jt);T(Ux.$$.fragment,AA),v3r=i(AA),V6e=n(AA,"P",{});var hEt=s(V6e);F3r=r(hEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hEt.forEach(t),T3r=i(AA),Cc=n(AA,"P",{});var GZ=s(Cc);M3r=r(GZ,`Note:
Loading a model from its configuration file does `),X6e=n(GZ,"STRONG",{});var pEt=s(X6e);E3r=r(pEt,"not"),pEt.forEach(t),C3r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(GZ,"A",{href:!0});var uEt=s(IU);w3r=r(uEt,"from_pretrained()"),uEt.forEach(t),A3r=r(GZ," to load the model weights."),GZ.forEach(t),y3r=i(AA),T(KE.$$.fragment,AA),AA.forEach(t),L3r=i(Bl),qr=n(Bl,"DIV",{class:!0});var Il=s(qr);T(Jx.$$.fragment,Il),x3r=i(Il),z6e=n(Il,"P",{});var _Et=s(z6e);$3r=r(_Et,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Et.forEach(t),k3r=i(Il),fn=n(Il,"P",{});var yA=s(fn);S3r=r(yA,"The model class to instantiate is selected based on the "),W6e=n(yA,"CODE",{});var bEt=s(W6e);R3r=r(bEt,"model_type"),bEt.forEach(t),P3r=r(yA,` property of the config object (either
passed as an argument or loaded from `),Q6e=n(yA,"CODE",{});var vEt=s(Q6e);B3r=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),I3r=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=n(yA,"CODE",{});var FEt=s(H6e);q3r=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),N3r=r(yA,":"),yA.forEach(t),j3r=i(Il),U6e=n(Il,"UL",{});var TEt=s(U6e);ZE=n(TEt,"LI",{});var bPe=s(ZE);J6e=n(bPe,"STRONG",{});var MEt=s(J6e);D3r=r(MEt,"vision-encoder-decoder"),MEt.forEach(t),G3r=r(bPe," \u2014 "),qU=n(bPe,"A",{href:!0});var EEt=s(qU);O3r=r(EEt,"TFVisionEncoderDecoderModel"),EEt.forEach(t),V3r=r(bPe," (Vision Encoder decoder model)"),bPe.forEach(t),TEt.forEach(t),X3r=i(Il),T(eC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Hqe=i(f),wc=n(f,"H2",{class:!0});var oDe=s(wc);oC=n(oDe,"A",{id:!0,class:!0,href:!0});var CEt=s(oC);Y6e=n(CEt,"SPAN",{});var wEt=s(Y6e);T(Yx.$$.fragment,wEt),wEt.forEach(t),CEt.forEach(t),z3r=i(oDe),K6e=n(oDe,"SPAN",{});var AEt=s(K6e);W3r=r(AEt,"TFAutoModelForSpeechSeq2Seq"),AEt.forEach(t),oDe.forEach(t),Uqe=i(f),cr=n(f,"DIV",{class:!0});var ql=s(cr);T(Kx.$$.fragment,ql),Q3r=i(ql),Ac=n(ql,"P",{});var OZ=s(Ac);H3r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NU=n(OZ,"A",{href:!0});var yEt=s(NU);U3r=r(yEt,"from_pretrained()"),yEt.forEach(t),J3r=r(OZ," class method or the "),jU=n(OZ,"A",{href:!0});var LEt=s(jU);Y3r=r(LEt,"from_config()"),LEt.forEach(t),K3r=r(OZ,` class
method.`),OZ.forEach(t),Z3r=i(ql),Zx=n(ql,"P",{});var rDe=s(Zx);ewr=r(rDe,"This class cannot be instantiated directly using "),Z6e=n(rDe,"CODE",{});var xEt=s(Z6e);owr=r(xEt,"__init__()"),xEt.forEach(t),rwr=r(rDe," (throws an error)."),rDe.forEach(t),twr=i(ql),Dt=n(ql,"DIV",{class:!0});var LA=s(Dt);T(e9.$$.fragment,LA),awr=i(LA),eTe=n(LA,"P",{});var $Et=s(eTe);nwr=r($Et,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Et.forEach(t),swr=i(LA),yc=n(LA,"P",{});var VZ=s(yc);lwr=r(VZ,`Note:
Loading a model from its configuration file does `),oTe=n(VZ,"STRONG",{});var kEt=s(oTe);iwr=r(kEt,"not"),kEt.forEach(t),dwr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=n(VZ,"A",{href:!0});var SEt=s(DU);cwr=r(SEt,"from_pretrained()"),SEt.forEach(t),fwr=r(VZ," to load the model weights."),VZ.forEach(t),mwr=i(LA),T(rC.$$.fragment,LA),LA.forEach(t),gwr=i(ql),Nr=n(ql,"DIV",{class:!0});var Nl=s(Nr);T(o9.$$.fragment,Nl),hwr=i(Nl),rTe=n(Nl,"P",{});var REt=s(rTe);pwr=r(REt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),REt.forEach(t),uwr=i(Nl),mn=n(Nl,"P",{});var xA=s(mn);_wr=r(xA,"The model class to instantiate is selected based on the "),tTe=n(xA,"CODE",{});var PEt=s(tTe);bwr=r(PEt,"model_type"),PEt.forEach(t),vwr=r(xA,` property of the config object (either
passed as an argument or loaded from `),aTe=n(xA,"CODE",{});var BEt=s(aTe);Fwr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),Twr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(xA,"CODE",{});var IEt=s(nTe);Mwr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),Ewr=r(xA,":"),xA.forEach(t),Cwr=i(Nl),sTe=n(Nl,"UL",{});var qEt=s(sTe);tC=n(qEt,"LI",{});var vPe=s(tC);lTe=n(vPe,"STRONG",{});var NEt=s(lTe);wwr=r(NEt,"speech_to_text"),NEt.forEach(t),Awr=r(vPe," \u2014 "),GU=n(vPe,"A",{href:!0});var jEt=s(GU);ywr=r(jEt,"TFSpeech2TextForConditionalGeneration"),jEt.forEach(t),Lwr=r(vPe," (Speech2Text model)"),vPe.forEach(t),qEt.forEach(t),xwr=i(Nl),T(aC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Jqe=i(f),Lc=n(f,"H2",{class:!0});var tDe=s(Lc);nC=n(tDe,"A",{id:!0,class:!0,href:!0});var DEt=s(nC);iTe=n(DEt,"SPAN",{});var GEt=s(iTe);T(r9.$$.fragment,GEt),GEt.forEach(t),DEt.forEach(t),$wr=i(tDe),dTe=n(tDe,"SPAN",{});var OEt=s(dTe);kwr=r(OEt,"FlaxAutoModel"),OEt.forEach(t),tDe.forEach(t),Yqe=i(f),fr=n(f,"DIV",{class:!0});var jl=s(fr);T(t9.$$.fragment,jl),Swr=i(jl),xc=n(jl,"P",{});var XZ=s(xc);Rwr=r(XZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OU=n(XZ,"A",{href:!0});var VEt=s(OU);Pwr=r(VEt,"from_pretrained()"),VEt.forEach(t),Bwr=r(XZ," class method or the "),VU=n(XZ,"A",{href:!0});var XEt=s(VU);Iwr=r(XEt,"from_config()"),XEt.forEach(t),qwr=r(XZ,` class
method.`),XZ.forEach(t),Nwr=i(jl),a9=n(jl,"P",{});var aDe=s(a9);jwr=r(aDe,"This class cannot be instantiated directly using "),cTe=n(aDe,"CODE",{});var zEt=s(cTe);Dwr=r(zEt,"__init__()"),zEt.forEach(t),Gwr=r(aDe," (throws an error)."),aDe.forEach(t),Owr=i(jl),Gt=n(jl,"DIV",{class:!0});var $A=s(Gt);T(n9.$$.fragment,$A),Vwr=i($A),fTe=n($A,"P",{});var WEt=s(fTe);Xwr=r(WEt,"Instantiates one of the base model classes of the library from a configuration."),WEt.forEach(t),zwr=i($A),$c=n($A,"P",{});var zZ=s($c);Wwr=r(zZ,`Note:
Loading a model from its configuration file does `),mTe=n(zZ,"STRONG",{});var QEt=s(mTe);Qwr=r(QEt,"not"),QEt.forEach(t),Hwr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(zZ,"A",{href:!0});var HEt=s(XU);Uwr=r(HEt,"from_pretrained()"),HEt.forEach(t),Jwr=r(zZ," to load the model weights."),zZ.forEach(t),Ywr=i($A),T(sC.$$.fragment,$A),$A.forEach(t),Kwr=i(jl),jr=n(jl,"DIV",{class:!0});var Dl=s(jr);T(s9.$$.fragment,Dl),Zwr=i(Dl),gTe=n(Dl,"P",{});var UEt=s(gTe);eAr=r(UEt,"Instantiate one of the base model classes of the library from a pretrained model."),UEt.forEach(t),oAr=i(Dl),gn=n(Dl,"P",{});var kA=s(gn);rAr=r(kA,"The model class to instantiate is selected based on the "),hTe=n(kA,"CODE",{});var JEt=s(hTe);tAr=r(JEt,"model_type"),JEt.forEach(t),aAr=r(kA,` property of the config object (either
passed as an argument or loaded from `),pTe=n(kA,"CODE",{});var YEt=s(pTe);nAr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),sAr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(kA,"CODE",{});var KEt=s(uTe);lAr=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),iAr=r(kA,":"),kA.forEach(t),dAr=i(Dl),re=n(Dl,"UL",{});var ne=s(re);lC=n(ne,"LI",{});var FPe=s(lC);_Te=n(FPe,"STRONG",{});var ZEt=s(_Te);cAr=r(ZEt,"albert"),ZEt.forEach(t),fAr=r(FPe," \u2014 "),zU=n(FPe,"A",{href:!0});var eCt=s(zU);mAr=r(eCt,"FlaxAlbertModel"),eCt.forEach(t),gAr=r(FPe," (ALBERT model)"),FPe.forEach(t),hAr=i(ne),iC=n(ne,"LI",{});var TPe=s(iC);bTe=n(TPe,"STRONG",{});var oCt=s(bTe);pAr=r(oCt,"bart"),oCt.forEach(t),uAr=r(TPe," \u2014 "),WU=n(TPe,"A",{href:!0});var rCt=s(WU);_Ar=r(rCt,"FlaxBartModel"),rCt.forEach(t),bAr=r(TPe," (BART model)"),TPe.forEach(t),vAr=i(ne),dC=n(ne,"LI",{});var MPe=s(dC);vTe=n(MPe,"STRONG",{});var tCt=s(vTe);FAr=r(tCt,"beit"),tCt.forEach(t),TAr=r(MPe," \u2014 "),QU=n(MPe,"A",{href:!0});var aCt=s(QU);MAr=r(aCt,"FlaxBeitModel"),aCt.forEach(t),EAr=r(MPe," (BEiT model)"),MPe.forEach(t),CAr=i(ne),cC=n(ne,"LI",{});var EPe=s(cC);FTe=n(EPe,"STRONG",{});var nCt=s(FTe);wAr=r(nCt,"bert"),nCt.forEach(t),AAr=r(EPe," \u2014 "),HU=n(EPe,"A",{href:!0});var sCt=s(HU);yAr=r(sCt,"FlaxBertModel"),sCt.forEach(t),LAr=r(EPe," (BERT model)"),EPe.forEach(t),xAr=i(ne),fC=n(ne,"LI",{});var CPe=s(fC);TTe=n(CPe,"STRONG",{});var lCt=s(TTe);$Ar=r(lCt,"big_bird"),lCt.forEach(t),kAr=r(CPe," \u2014 "),UU=n(CPe,"A",{href:!0});var iCt=s(UU);SAr=r(iCt,"FlaxBigBirdModel"),iCt.forEach(t),RAr=r(CPe," (BigBird model)"),CPe.forEach(t),PAr=i(ne),mC=n(ne,"LI",{});var wPe=s(mC);MTe=n(wPe,"STRONG",{});var dCt=s(MTe);BAr=r(dCt,"blenderbot"),dCt.forEach(t),IAr=r(wPe," \u2014 "),JU=n(wPe,"A",{href:!0});var cCt=s(JU);qAr=r(cCt,"FlaxBlenderbotModel"),cCt.forEach(t),NAr=r(wPe," (Blenderbot model)"),wPe.forEach(t),jAr=i(ne),gC=n(ne,"LI",{});var APe=s(gC);ETe=n(APe,"STRONG",{});var fCt=s(ETe);DAr=r(fCt,"blenderbot-small"),fCt.forEach(t),GAr=r(APe," \u2014 "),YU=n(APe,"A",{href:!0});var mCt=s(YU);OAr=r(mCt,"FlaxBlenderbotSmallModel"),mCt.forEach(t),VAr=r(APe," (BlenderbotSmall model)"),APe.forEach(t),XAr=i(ne),hC=n(ne,"LI",{});var yPe=s(hC);CTe=n(yPe,"STRONG",{});var gCt=s(CTe);zAr=r(gCt,"clip"),gCt.forEach(t),WAr=r(yPe," \u2014 "),KU=n(yPe,"A",{href:!0});var hCt=s(KU);QAr=r(hCt,"FlaxCLIPModel"),hCt.forEach(t),HAr=r(yPe," (CLIP model)"),yPe.forEach(t),UAr=i(ne),pC=n(ne,"LI",{});var LPe=s(pC);wTe=n(LPe,"STRONG",{});var pCt=s(wTe);JAr=r(pCt,"distilbert"),pCt.forEach(t),YAr=r(LPe," \u2014 "),ZU=n(LPe,"A",{href:!0});var uCt=s(ZU);KAr=r(uCt,"FlaxDistilBertModel"),uCt.forEach(t),ZAr=r(LPe," (DistilBERT model)"),LPe.forEach(t),e0r=i(ne),uC=n(ne,"LI",{});var xPe=s(uC);ATe=n(xPe,"STRONG",{});var _Ct=s(ATe);o0r=r(_Ct,"electra"),_Ct.forEach(t),r0r=r(xPe," \u2014 "),eJ=n(xPe,"A",{href:!0});var bCt=s(eJ);t0r=r(bCt,"FlaxElectraModel"),bCt.forEach(t),a0r=r(xPe," (ELECTRA model)"),xPe.forEach(t),n0r=i(ne),_C=n(ne,"LI",{});var $Pe=s(_C);yTe=n($Pe,"STRONG",{});var vCt=s(yTe);s0r=r(vCt,"gpt2"),vCt.forEach(t),l0r=r($Pe," \u2014 "),oJ=n($Pe,"A",{href:!0});var FCt=s(oJ);i0r=r(FCt,"FlaxGPT2Model"),FCt.forEach(t),d0r=r($Pe," (OpenAI GPT-2 model)"),$Pe.forEach(t),c0r=i(ne),bC=n(ne,"LI",{});var kPe=s(bC);LTe=n(kPe,"STRONG",{});var TCt=s(LTe);f0r=r(TCt,"gpt_neo"),TCt.forEach(t),m0r=r(kPe," \u2014 "),rJ=n(kPe,"A",{href:!0});var MCt=s(rJ);g0r=r(MCt,"FlaxGPTNeoModel"),MCt.forEach(t),h0r=r(kPe," (GPT Neo model)"),kPe.forEach(t),p0r=i(ne),vC=n(ne,"LI",{});var SPe=s(vC);xTe=n(SPe,"STRONG",{});var ECt=s(xTe);u0r=r(ECt,"gptj"),ECt.forEach(t),_0r=r(SPe," \u2014 "),tJ=n(SPe,"A",{href:!0});var CCt=s(tJ);b0r=r(CCt,"FlaxGPTJModel"),CCt.forEach(t),v0r=r(SPe," (GPT-J model)"),SPe.forEach(t),F0r=i(ne),FC=n(ne,"LI",{});var RPe=s(FC);$Te=n(RPe,"STRONG",{});var wCt=s($Te);T0r=r(wCt,"marian"),wCt.forEach(t),M0r=r(RPe," \u2014 "),aJ=n(RPe,"A",{href:!0});var ACt=s(aJ);E0r=r(ACt,"FlaxMarianModel"),ACt.forEach(t),C0r=r(RPe," (Marian model)"),RPe.forEach(t),w0r=i(ne),TC=n(ne,"LI",{});var PPe=s(TC);kTe=n(PPe,"STRONG",{});var yCt=s(kTe);A0r=r(yCt,"mbart"),yCt.forEach(t),y0r=r(PPe," \u2014 "),nJ=n(PPe,"A",{href:!0});var LCt=s(nJ);L0r=r(LCt,"FlaxMBartModel"),LCt.forEach(t),x0r=r(PPe," (mBART model)"),PPe.forEach(t),$0r=i(ne),MC=n(ne,"LI",{});var BPe=s(MC);STe=n(BPe,"STRONG",{});var xCt=s(STe);k0r=r(xCt,"mt5"),xCt.forEach(t),S0r=r(BPe," \u2014 "),sJ=n(BPe,"A",{href:!0});var $Ct=s(sJ);R0r=r($Ct,"FlaxMT5Model"),$Ct.forEach(t),P0r=r(BPe," (mT5 model)"),BPe.forEach(t),B0r=i(ne),EC=n(ne,"LI",{});var IPe=s(EC);RTe=n(IPe,"STRONG",{});var kCt=s(RTe);I0r=r(kCt,"pegasus"),kCt.forEach(t),q0r=r(IPe," \u2014 "),lJ=n(IPe,"A",{href:!0});var SCt=s(lJ);N0r=r(SCt,"FlaxPegasusModel"),SCt.forEach(t),j0r=r(IPe," (Pegasus model)"),IPe.forEach(t),D0r=i(ne),CC=n(ne,"LI",{});var qPe=s(CC);PTe=n(qPe,"STRONG",{});var RCt=s(PTe);G0r=r(RCt,"roberta"),RCt.forEach(t),O0r=r(qPe," \u2014 "),iJ=n(qPe,"A",{href:!0});var PCt=s(iJ);V0r=r(PCt,"FlaxRobertaModel"),PCt.forEach(t),X0r=r(qPe," (RoBERTa model)"),qPe.forEach(t),z0r=i(ne),wC=n(ne,"LI",{});var NPe=s(wC);BTe=n(NPe,"STRONG",{});var BCt=s(BTe);W0r=r(BCt,"roformer"),BCt.forEach(t),Q0r=r(NPe," \u2014 "),dJ=n(NPe,"A",{href:!0});var ICt=s(dJ);H0r=r(ICt,"FlaxRoFormerModel"),ICt.forEach(t),U0r=r(NPe," (RoFormer model)"),NPe.forEach(t),J0r=i(ne),AC=n(ne,"LI",{});var jPe=s(AC);ITe=n(jPe,"STRONG",{});var qCt=s(ITe);Y0r=r(qCt,"t5"),qCt.forEach(t),K0r=r(jPe," \u2014 "),cJ=n(jPe,"A",{href:!0});var NCt=s(cJ);Z0r=r(NCt,"FlaxT5Model"),NCt.forEach(t),eyr=r(jPe," (T5 model)"),jPe.forEach(t),oyr=i(ne),yC=n(ne,"LI",{});var DPe=s(yC);qTe=n(DPe,"STRONG",{});var jCt=s(qTe);ryr=r(jCt,"vision-text-dual-encoder"),jCt.forEach(t),tyr=r(DPe," \u2014 "),fJ=n(DPe,"A",{href:!0});var DCt=s(fJ);ayr=r(DCt,"FlaxVisionTextDualEncoderModel"),DCt.forEach(t),nyr=r(DPe," (VisionTextDualEncoder model)"),DPe.forEach(t),syr=i(ne),LC=n(ne,"LI",{});var GPe=s(LC);NTe=n(GPe,"STRONG",{});var GCt=s(NTe);lyr=r(GCt,"vit"),GCt.forEach(t),iyr=r(GPe," \u2014 "),mJ=n(GPe,"A",{href:!0});var OCt=s(mJ);dyr=r(OCt,"FlaxViTModel"),OCt.forEach(t),cyr=r(GPe," (ViT model)"),GPe.forEach(t),fyr=i(ne),xC=n(ne,"LI",{});var OPe=s(xC);jTe=n(OPe,"STRONG",{});var VCt=s(jTe);myr=r(VCt,"wav2vec2"),VCt.forEach(t),gyr=r(OPe," \u2014 "),gJ=n(OPe,"A",{href:!0});var XCt=s(gJ);hyr=r(XCt,"FlaxWav2Vec2Model"),XCt.forEach(t),pyr=r(OPe," (Wav2Vec2 model)"),OPe.forEach(t),uyr=i(ne),$C=n(ne,"LI",{});var VPe=s($C);DTe=n(VPe,"STRONG",{});var zCt=s(DTe);_yr=r(zCt,"xglm"),zCt.forEach(t),byr=r(VPe," \u2014 "),hJ=n(VPe,"A",{href:!0});var WCt=s(hJ);vyr=r(WCt,"FlaxXGLMModel"),WCt.forEach(t),Fyr=r(VPe," (XGLM model)"),VPe.forEach(t),Tyr=i(ne),kC=n(ne,"LI",{});var XPe=s(kC);GTe=n(XPe,"STRONG",{});var QCt=s(GTe);Myr=r(QCt,"xlm-roberta"),QCt.forEach(t),Eyr=r(XPe," \u2014 "),pJ=n(XPe,"A",{href:!0});var HCt=s(pJ);Cyr=r(HCt,"FlaxXLMRobertaModel"),HCt.forEach(t),wyr=r(XPe," (XLM-RoBERTa model)"),XPe.forEach(t),ne.forEach(t),Ayr=i(Dl),T(SC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Kqe=i(f),kc=n(f,"H2",{class:!0});var nDe=s(kc);RC=n(nDe,"A",{id:!0,class:!0,href:!0});var UCt=s(RC);OTe=n(UCt,"SPAN",{});var JCt=s(OTe);T(l9.$$.fragment,JCt),JCt.forEach(t),UCt.forEach(t),yyr=i(nDe),VTe=n(nDe,"SPAN",{});var YCt=s(VTe);Lyr=r(YCt,"FlaxAutoModelForCausalLM"),YCt.forEach(t),nDe.forEach(t),Zqe=i(f),mr=n(f,"DIV",{class:!0});var Gl=s(mr);T(i9.$$.fragment,Gl),xyr=i(Gl),Sc=n(Gl,"P",{});var WZ=s(Sc);$yr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uJ=n(WZ,"A",{href:!0});var KCt=s(uJ);kyr=r(KCt,"from_pretrained()"),KCt.forEach(t),Syr=r(WZ," class method or the "),_J=n(WZ,"A",{href:!0});var ZCt=s(_J);Ryr=r(ZCt,"from_config()"),ZCt.forEach(t),Pyr=r(WZ,` class
method.`),WZ.forEach(t),Byr=i(Gl),d9=n(Gl,"P",{});var sDe=s(d9);Iyr=r(sDe,"This class cannot be instantiated directly using "),XTe=n(sDe,"CODE",{});var e5t=s(XTe);qyr=r(e5t,"__init__()"),e5t.forEach(t),Nyr=r(sDe," (throws an error)."),sDe.forEach(t),jyr=i(Gl),Ot=n(Gl,"DIV",{class:!0});var SA=s(Ot);T(c9.$$.fragment,SA),Dyr=i(SA),zTe=n(SA,"P",{});var o5t=s(zTe);Gyr=r(o5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),o5t.forEach(t),Oyr=i(SA),Rc=n(SA,"P",{});var QZ=s(Rc);Vyr=r(QZ,`Note:
Loading a model from its configuration file does `),WTe=n(QZ,"STRONG",{});var r5t=s(WTe);Xyr=r(r5t,"not"),r5t.forEach(t),zyr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(QZ,"A",{href:!0});var t5t=s(bJ);Wyr=r(t5t,"from_pretrained()"),t5t.forEach(t),Qyr=r(QZ," to load the model weights."),QZ.forEach(t),Hyr=i(SA),T(PC.$$.fragment,SA),SA.forEach(t),Uyr=i(Gl),Dr=n(Gl,"DIV",{class:!0});var Ol=s(Dr);T(f9.$$.fragment,Ol),Jyr=i(Ol),QTe=n(Ol,"P",{});var a5t=s(QTe);Yyr=r(a5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a5t.forEach(t),Kyr=i(Ol),hn=n(Ol,"P",{});var RA=s(hn);Zyr=r(RA,"The model class to instantiate is selected based on the "),HTe=n(RA,"CODE",{});var n5t=s(HTe);eLr=r(n5t,"model_type"),n5t.forEach(t),oLr=r(RA,` property of the config object (either
passed as an argument or loaded from `),UTe=n(RA,"CODE",{});var s5t=s(UTe);rLr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),tLr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(RA,"CODE",{});var l5t=s(JTe);aLr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),nLr=r(RA,":"),RA.forEach(t),sLr=i(Ol),Re=n(Ol,"UL",{});var Xe=s(Re);BC=n(Xe,"LI",{});var zPe=s(BC);YTe=n(zPe,"STRONG",{});var i5t=s(YTe);lLr=r(i5t,"bart"),i5t.forEach(t),iLr=r(zPe," \u2014 "),vJ=n(zPe,"A",{href:!0});var d5t=s(vJ);dLr=r(d5t,"FlaxBartForCausalLM"),d5t.forEach(t),cLr=r(zPe," (BART model)"),zPe.forEach(t),fLr=i(Xe),IC=n(Xe,"LI",{});var WPe=s(IC);KTe=n(WPe,"STRONG",{});var c5t=s(KTe);mLr=r(c5t,"bert"),c5t.forEach(t),gLr=r(WPe," \u2014 "),FJ=n(WPe,"A",{href:!0});var f5t=s(FJ);hLr=r(f5t,"FlaxBertForCausalLM"),f5t.forEach(t),pLr=r(WPe," (BERT model)"),WPe.forEach(t),uLr=i(Xe),qC=n(Xe,"LI",{});var QPe=s(qC);ZTe=n(QPe,"STRONG",{});var m5t=s(ZTe);_Lr=r(m5t,"big_bird"),m5t.forEach(t),bLr=r(QPe," \u2014 "),TJ=n(QPe,"A",{href:!0});var g5t=s(TJ);vLr=r(g5t,"FlaxBigBirdForCausalLM"),g5t.forEach(t),FLr=r(QPe," (BigBird model)"),QPe.forEach(t),TLr=i(Xe),NC=n(Xe,"LI",{});var HPe=s(NC);e8e=n(HPe,"STRONG",{});var h5t=s(e8e);MLr=r(h5t,"electra"),h5t.forEach(t),ELr=r(HPe," \u2014 "),MJ=n(HPe,"A",{href:!0});var p5t=s(MJ);CLr=r(p5t,"FlaxElectraForCausalLM"),p5t.forEach(t),wLr=r(HPe," (ELECTRA model)"),HPe.forEach(t),ALr=i(Xe),jC=n(Xe,"LI",{});var UPe=s(jC);o8e=n(UPe,"STRONG",{});var u5t=s(o8e);yLr=r(u5t,"gpt2"),u5t.forEach(t),LLr=r(UPe," \u2014 "),EJ=n(UPe,"A",{href:!0});var _5t=s(EJ);xLr=r(_5t,"FlaxGPT2LMHeadModel"),_5t.forEach(t),$Lr=r(UPe," (OpenAI GPT-2 model)"),UPe.forEach(t),kLr=i(Xe),DC=n(Xe,"LI",{});var JPe=s(DC);r8e=n(JPe,"STRONG",{});var b5t=s(r8e);SLr=r(b5t,"gpt_neo"),b5t.forEach(t),RLr=r(JPe," \u2014 "),CJ=n(JPe,"A",{href:!0});var v5t=s(CJ);PLr=r(v5t,"FlaxGPTNeoForCausalLM"),v5t.forEach(t),BLr=r(JPe," (GPT Neo model)"),JPe.forEach(t),ILr=i(Xe),GC=n(Xe,"LI",{});var YPe=s(GC);t8e=n(YPe,"STRONG",{});var F5t=s(t8e);qLr=r(F5t,"gptj"),F5t.forEach(t),NLr=r(YPe," \u2014 "),wJ=n(YPe,"A",{href:!0});var T5t=s(wJ);jLr=r(T5t,"FlaxGPTJForCausalLM"),T5t.forEach(t),DLr=r(YPe," (GPT-J model)"),YPe.forEach(t),GLr=i(Xe),OC=n(Xe,"LI",{});var KPe=s(OC);a8e=n(KPe,"STRONG",{});var M5t=s(a8e);OLr=r(M5t,"roberta"),M5t.forEach(t),VLr=r(KPe," \u2014 "),AJ=n(KPe,"A",{href:!0});var E5t=s(AJ);XLr=r(E5t,"FlaxRobertaForCausalLM"),E5t.forEach(t),zLr=r(KPe," (RoBERTa model)"),KPe.forEach(t),WLr=i(Xe),VC=n(Xe,"LI",{});var ZPe=s(VC);n8e=n(ZPe,"STRONG",{});var C5t=s(n8e);QLr=r(C5t,"xglm"),C5t.forEach(t),HLr=r(ZPe," \u2014 "),yJ=n(ZPe,"A",{href:!0});var w5t=s(yJ);ULr=r(w5t,"FlaxXGLMForCausalLM"),w5t.forEach(t),JLr=r(ZPe," (XGLM model)"),ZPe.forEach(t),Xe.forEach(t),YLr=i(Ol),T(XC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),eNe=i(f),Pc=n(f,"H2",{class:!0});var lDe=s(Pc);zC=n(lDe,"A",{id:!0,class:!0,href:!0});var A5t=s(zC);s8e=n(A5t,"SPAN",{});var y5t=s(s8e);T(m9.$$.fragment,y5t),y5t.forEach(t),A5t.forEach(t),KLr=i(lDe),l8e=n(lDe,"SPAN",{});var L5t=s(l8e);ZLr=r(L5t,"FlaxAutoModelForPreTraining"),L5t.forEach(t),lDe.forEach(t),oNe=i(f),gr=n(f,"DIV",{class:!0});var Vl=s(gr);T(g9.$$.fragment,Vl),exr=i(Vl),Bc=n(Vl,"P",{});var HZ=s(Bc);oxr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LJ=n(HZ,"A",{href:!0});var x5t=s(LJ);rxr=r(x5t,"from_pretrained()"),x5t.forEach(t),txr=r(HZ," class method or the "),xJ=n(HZ,"A",{href:!0});var $5t=s(xJ);axr=r($5t,"from_config()"),$5t.forEach(t),nxr=r(HZ,` class
method.`),HZ.forEach(t),sxr=i(Vl),h9=n(Vl,"P",{});var iDe=s(h9);lxr=r(iDe,"This class cannot be instantiated directly using "),i8e=n(iDe,"CODE",{});var k5t=s(i8e);ixr=r(k5t,"__init__()"),k5t.forEach(t),dxr=r(iDe," (throws an error)."),iDe.forEach(t),cxr=i(Vl),Vt=n(Vl,"DIV",{class:!0});var PA=s(Vt);T(p9.$$.fragment,PA),fxr=i(PA),d8e=n(PA,"P",{});var S5t=s(d8e);mxr=r(S5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),S5t.forEach(t),gxr=i(PA),Ic=n(PA,"P",{});var UZ=s(Ic);hxr=r(UZ,`Note:
Loading a model from its configuration file does `),c8e=n(UZ,"STRONG",{});var R5t=s(c8e);pxr=r(R5t,"not"),R5t.forEach(t),uxr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(UZ,"A",{href:!0});var P5t=s($J);_xr=r(P5t,"from_pretrained()"),P5t.forEach(t),bxr=r(UZ," to load the model weights."),UZ.forEach(t),vxr=i(PA),T(WC.$$.fragment,PA),PA.forEach(t),Fxr=i(Vl),Gr=n(Vl,"DIV",{class:!0});var Xl=s(Gr);T(u9.$$.fragment,Xl),Txr=i(Xl),f8e=n(Xl,"P",{});var B5t=s(f8e);Mxr=r(B5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),B5t.forEach(t),Exr=i(Xl),pn=n(Xl,"P",{});var BA=s(pn);Cxr=r(BA,"The model class to instantiate is selected based on the "),m8e=n(BA,"CODE",{});var I5t=s(m8e);wxr=r(I5t,"model_type"),I5t.forEach(t),Axr=r(BA,` property of the config object (either
passed as an argument or loaded from `),g8e=n(BA,"CODE",{});var q5t=s(g8e);yxr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),Lxr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=n(BA,"CODE",{});var N5t=s(h8e);xxr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),$xr=r(BA,":"),BA.forEach(t),kxr=i(Xl),Me=n(Xl,"UL",{});var we=s(Me);QC=n(we,"LI",{});var eBe=s(QC);p8e=n(eBe,"STRONG",{});var j5t=s(p8e);Sxr=r(j5t,"albert"),j5t.forEach(t),Rxr=r(eBe," \u2014 "),kJ=n(eBe,"A",{href:!0});var D5t=s(kJ);Pxr=r(D5t,"FlaxAlbertForPreTraining"),D5t.forEach(t),Bxr=r(eBe," (ALBERT model)"),eBe.forEach(t),Ixr=i(we),HC=n(we,"LI",{});var oBe=s(HC);u8e=n(oBe,"STRONG",{});var G5t=s(u8e);qxr=r(G5t,"bart"),G5t.forEach(t),Nxr=r(oBe," \u2014 "),SJ=n(oBe,"A",{href:!0});var O5t=s(SJ);jxr=r(O5t,"FlaxBartForConditionalGeneration"),O5t.forEach(t),Dxr=r(oBe," (BART model)"),oBe.forEach(t),Gxr=i(we),UC=n(we,"LI",{});var rBe=s(UC);_8e=n(rBe,"STRONG",{});var V5t=s(_8e);Oxr=r(V5t,"bert"),V5t.forEach(t),Vxr=r(rBe," \u2014 "),RJ=n(rBe,"A",{href:!0});var X5t=s(RJ);Xxr=r(X5t,"FlaxBertForPreTraining"),X5t.forEach(t),zxr=r(rBe," (BERT model)"),rBe.forEach(t),Wxr=i(we),JC=n(we,"LI",{});var tBe=s(JC);b8e=n(tBe,"STRONG",{});var z5t=s(b8e);Qxr=r(z5t,"big_bird"),z5t.forEach(t),Hxr=r(tBe," \u2014 "),PJ=n(tBe,"A",{href:!0});var W5t=s(PJ);Uxr=r(W5t,"FlaxBigBirdForPreTraining"),W5t.forEach(t),Jxr=r(tBe," (BigBird model)"),tBe.forEach(t),Yxr=i(we),YC=n(we,"LI",{});var aBe=s(YC);v8e=n(aBe,"STRONG",{});var Q5t=s(v8e);Kxr=r(Q5t,"electra"),Q5t.forEach(t),Zxr=r(aBe," \u2014 "),BJ=n(aBe,"A",{href:!0});var H5t=s(BJ);e9r=r(H5t,"FlaxElectraForPreTraining"),H5t.forEach(t),o9r=r(aBe," (ELECTRA model)"),aBe.forEach(t),r9r=i(we),KC=n(we,"LI",{});var nBe=s(KC);F8e=n(nBe,"STRONG",{});var U5t=s(F8e);t9r=r(U5t,"mbart"),U5t.forEach(t),a9r=r(nBe," \u2014 "),IJ=n(nBe,"A",{href:!0});var J5t=s(IJ);n9r=r(J5t,"FlaxMBartForConditionalGeneration"),J5t.forEach(t),s9r=r(nBe," (mBART model)"),nBe.forEach(t),l9r=i(we),ZC=n(we,"LI",{});var sBe=s(ZC);T8e=n(sBe,"STRONG",{});var Y5t=s(T8e);i9r=r(Y5t,"mt5"),Y5t.forEach(t),d9r=r(sBe," \u2014 "),qJ=n(sBe,"A",{href:!0});var K5t=s(qJ);c9r=r(K5t,"FlaxMT5ForConditionalGeneration"),K5t.forEach(t),f9r=r(sBe," (mT5 model)"),sBe.forEach(t),m9r=i(we),e5=n(we,"LI",{});var lBe=s(e5);M8e=n(lBe,"STRONG",{});var Z5t=s(M8e);g9r=r(Z5t,"roberta"),Z5t.forEach(t),h9r=r(lBe," \u2014 "),NJ=n(lBe,"A",{href:!0});var e3t=s(NJ);p9r=r(e3t,"FlaxRobertaForMaskedLM"),e3t.forEach(t),u9r=r(lBe," (RoBERTa model)"),lBe.forEach(t),_9r=i(we),o5=n(we,"LI",{});var iBe=s(o5);E8e=n(iBe,"STRONG",{});var o3t=s(E8e);b9r=r(o3t,"roformer"),o3t.forEach(t),v9r=r(iBe," \u2014 "),jJ=n(iBe,"A",{href:!0});var r3t=s(jJ);F9r=r(r3t,"FlaxRoFormerForMaskedLM"),r3t.forEach(t),T9r=r(iBe," (RoFormer model)"),iBe.forEach(t),M9r=i(we),r5=n(we,"LI",{});var dBe=s(r5);C8e=n(dBe,"STRONG",{});var t3t=s(C8e);E9r=r(t3t,"t5"),t3t.forEach(t),C9r=r(dBe," \u2014 "),DJ=n(dBe,"A",{href:!0});var a3t=s(DJ);w9r=r(a3t,"FlaxT5ForConditionalGeneration"),a3t.forEach(t),A9r=r(dBe," (T5 model)"),dBe.forEach(t),y9r=i(we),t5=n(we,"LI",{});var cBe=s(t5);w8e=n(cBe,"STRONG",{});var n3t=s(w8e);L9r=r(n3t,"wav2vec2"),n3t.forEach(t),x9r=r(cBe," \u2014 "),GJ=n(cBe,"A",{href:!0});var s3t=s(GJ);$9r=r(s3t,"FlaxWav2Vec2ForPreTraining"),s3t.forEach(t),k9r=r(cBe," (Wav2Vec2 model)"),cBe.forEach(t),S9r=i(we),a5=n(we,"LI",{});var fBe=s(a5);A8e=n(fBe,"STRONG",{});var l3t=s(A8e);R9r=r(l3t,"xlm-roberta"),l3t.forEach(t),P9r=r(fBe," \u2014 "),OJ=n(fBe,"A",{href:!0});var i3t=s(OJ);B9r=r(i3t,"FlaxXLMRobertaForMaskedLM"),i3t.forEach(t),I9r=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),we.forEach(t),q9r=i(Xl),T(n5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),rNe=i(f),qc=n(f,"H2",{class:!0});var dDe=s(qc);s5=n(dDe,"A",{id:!0,class:!0,href:!0});var d3t=s(s5);y8e=n(d3t,"SPAN",{});var c3t=s(y8e);T(_9.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),N9r=i(dDe),L8e=n(dDe,"SPAN",{});var f3t=s(L8e);j9r=r(f3t,"FlaxAutoModelForMaskedLM"),f3t.forEach(t),dDe.forEach(t),tNe=i(f),hr=n(f,"DIV",{class:!0});var zl=s(hr);T(b9.$$.fragment,zl),D9r=i(zl),Nc=n(zl,"P",{});var JZ=s(Nc);G9r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VJ=n(JZ,"A",{href:!0});var m3t=s(VJ);O9r=r(m3t,"from_pretrained()"),m3t.forEach(t),V9r=r(JZ," class method or the "),XJ=n(JZ,"A",{href:!0});var g3t=s(XJ);X9r=r(g3t,"from_config()"),g3t.forEach(t),z9r=r(JZ,` class
method.`),JZ.forEach(t),W9r=i(zl),v9=n(zl,"P",{});var cDe=s(v9);Q9r=r(cDe,"This class cannot be instantiated directly using "),x8e=n(cDe,"CODE",{});var h3t=s(x8e);H9r=r(h3t,"__init__()"),h3t.forEach(t),U9r=r(cDe," (throws an error)."),cDe.forEach(t),J9r=i(zl),Xt=n(zl,"DIV",{class:!0});var IA=s(Xt);T(F9.$$.fragment,IA),Y9r=i(IA),$8e=n(IA,"P",{});var p3t=s($8e);K9r=r(p3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p3t.forEach(t),Z9r=i(IA),jc=n(IA,"P",{});var YZ=s(jc);e7r=r(YZ,`Note:
Loading a model from its configuration file does `),k8e=n(YZ,"STRONG",{});var u3t=s(k8e);o7r=r(u3t,"not"),u3t.forEach(t),r7r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(YZ,"A",{href:!0});var _3t=s(zJ);t7r=r(_3t,"from_pretrained()"),_3t.forEach(t),a7r=r(YZ," to load the model weights."),YZ.forEach(t),n7r=i(IA),T(l5.$$.fragment,IA),IA.forEach(t),s7r=i(zl),Or=n(zl,"DIV",{class:!0});var Wl=s(Or);T(T9.$$.fragment,Wl),l7r=i(Wl),S8e=n(Wl,"P",{});var b3t=s(S8e);i7r=r(b3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b3t.forEach(t),d7r=i(Wl),un=n(Wl,"P",{});var qA=s(un);c7r=r(qA,"The model class to instantiate is selected based on the "),R8e=n(qA,"CODE",{});var v3t=s(R8e);f7r=r(v3t,"model_type"),v3t.forEach(t),m7r=r(qA,` property of the config object (either
passed as an argument or loaded from `),P8e=n(qA,"CODE",{});var F3t=s(P8e);g7r=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),h7r=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B8e=n(qA,"CODE",{});var T3t=s(B8e);p7r=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),u7r=r(qA,":"),qA.forEach(t),_7r=i(Wl),Le=n(Wl,"UL",{});var Ie=s(Le);i5=n(Ie,"LI",{});var mBe=s(i5);I8e=n(mBe,"STRONG",{});var M3t=s(I8e);b7r=r(M3t,"albert"),M3t.forEach(t),v7r=r(mBe," \u2014 "),WJ=n(mBe,"A",{href:!0});var E3t=s(WJ);F7r=r(E3t,"FlaxAlbertForMaskedLM"),E3t.forEach(t),T7r=r(mBe," (ALBERT model)"),mBe.forEach(t),M7r=i(Ie),d5=n(Ie,"LI",{});var gBe=s(d5);q8e=n(gBe,"STRONG",{});var C3t=s(q8e);E7r=r(C3t,"bart"),C3t.forEach(t),C7r=r(gBe," \u2014 "),QJ=n(gBe,"A",{href:!0});var w3t=s(QJ);w7r=r(w3t,"FlaxBartForConditionalGeneration"),w3t.forEach(t),A7r=r(gBe," (BART model)"),gBe.forEach(t),y7r=i(Ie),c5=n(Ie,"LI",{});var hBe=s(c5);N8e=n(hBe,"STRONG",{});var A3t=s(N8e);L7r=r(A3t,"bert"),A3t.forEach(t),x7r=r(hBe," \u2014 "),HJ=n(hBe,"A",{href:!0});var y3t=s(HJ);$7r=r(y3t,"FlaxBertForMaskedLM"),y3t.forEach(t),k7r=r(hBe," (BERT model)"),hBe.forEach(t),S7r=i(Ie),f5=n(Ie,"LI",{});var pBe=s(f5);j8e=n(pBe,"STRONG",{});var L3t=s(j8e);R7r=r(L3t,"big_bird"),L3t.forEach(t),P7r=r(pBe," \u2014 "),UJ=n(pBe,"A",{href:!0});var x3t=s(UJ);B7r=r(x3t,"FlaxBigBirdForMaskedLM"),x3t.forEach(t),I7r=r(pBe," (BigBird model)"),pBe.forEach(t),q7r=i(Ie),m5=n(Ie,"LI",{});var uBe=s(m5);D8e=n(uBe,"STRONG",{});var $3t=s(D8e);N7r=r($3t,"distilbert"),$3t.forEach(t),j7r=r(uBe," \u2014 "),JJ=n(uBe,"A",{href:!0});var k3t=s(JJ);D7r=r(k3t,"FlaxDistilBertForMaskedLM"),k3t.forEach(t),G7r=r(uBe," (DistilBERT model)"),uBe.forEach(t),O7r=i(Ie),g5=n(Ie,"LI",{});var _Be=s(g5);G8e=n(_Be,"STRONG",{});var S3t=s(G8e);V7r=r(S3t,"electra"),S3t.forEach(t),X7r=r(_Be," \u2014 "),YJ=n(_Be,"A",{href:!0});var R3t=s(YJ);z7r=r(R3t,"FlaxElectraForMaskedLM"),R3t.forEach(t),W7r=r(_Be," (ELECTRA model)"),_Be.forEach(t),Q7r=i(Ie),h5=n(Ie,"LI",{});var bBe=s(h5);O8e=n(bBe,"STRONG",{});var P3t=s(O8e);H7r=r(P3t,"mbart"),P3t.forEach(t),U7r=r(bBe," \u2014 "),KJ=n(bBe,"A",{href:!0});var B3t=s(KJ);J7r=r(B3t,"FlaxMBartForConditionalGeneration"),B3t.forEach(t),Y7r=r(bBe," (mBART model)"),bBe.forEach(t),K7r=i(Ie),p5=n(Ie,"LI",{});var vBe=s(p5);V8e=n(vBe,"STRONG",{});var I3t=s(V8e);Z7r=r(I3t,"roberta"),I3t.forEach(t),e$r=r(vBe," \u2014 "),ZJ=n(vBe,"A",{href:!0});var q3t=s(ZJ);o$r=r(q3t,"FlaxRobertaForMaskedLM"),q3t.forEach(t),r$r=r(vBe," (RoBERTa model)"),vBe.forEach(t),t$r=i(Ie),u5=n(Ie,"LI",{});var FBe=s(u5);X8e=n(FBe,"STRONG",{});var N3t=s(X8e);a$r=r(N3t,"roformer"),N3t.forEach(t),n$r=r(FBe," \u2014 "),eY=n(FBe,"A",{href:!0});var j3t=s(eY);s$r=r(j3t,"FlaxRoFormerForMaskedLM"),j3t.forEach(t),l$r=r(FBe," (RoFormer model)"),FBe.forEach(t),i$r=i(Ie),_5=n(Ie,"LI",{});var TBe=s(_5);z8e=n(TBe,"STRONG",{});var D3t=s(z8e);d$r=r(D3t,"xlm-roberta"),D3t.forEach(t),c$r=r(TBe," \u2014 "),oY=n(TBe,"A",{href:!0});var G3t=s(oY);f$r=r(G3t,"FlaxXLMRobertaForMaskedLM"),G3t.forEach(t),m$r=r(TBe," (XLM-RoBERTa model)"),TBe.forEach(t),Ie.forEach(t),g$r=i(Wl),T(b5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),aNe=i(f),Dc=n(f,"H2",{class:!0});var fDe=s(Dc);v5=n(fDe,"A",{id:!0,class:!0,href:!0});var O3t=s(v5);W8e=n(O3t,"SPAN",{});var V3t=s(W8e);T(M9.$$.fragment,V3t),V3t.forEach(t),O3t.forEach(t),h$r=i(fDe),Q8e=n(fDe,"SPAN",{});var X3t=s(Q8e);p$r=r(X3t,"FlaxAutoModelForSeq2SeqLM"),X3t.forEach(t),fDe.forEach(t),nNe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(E9.$$.fragment,Ql),u$r=i(Ql),Gc=n(Ql,"P",{});var KZ=s(Gc);_$r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rY=n(KZ,"A",{href:!0});var z3t=s(rY);b$r=r(z3t,"from_pretrained()"),z3t.forEach(t),v$r=r(KZ," class method or the "),tY=n(KZ,"A",{href:!0});var W3t=s(tY);F$r=r(W3t,"from_config()"),W3t.forEach(t),T$r=r(KZ,` class
method.`),KZ.forEach(t),M$r=i(Ql),C9=n(Ql,"P",{});var mDe=s(C9);E$r=r(mDe,"This class cannot be instantiated directly using "),H8e=n(mDe,"CODE",{});var Q3t=s(H8e);C$r=r(Q3t,"__init__()"),Q3t.forEach(t),w$r=r(mDe," (throws an error)."),mDe.forEach(t),A$r=i(Ql),zt=n(Ql,"DIV",{class:!0});var NA=s(zt);T(w9.$$.fragment,NA),y$r=i(NA),U8e=n(NA,"P",{});var H3t=s(U8e);L$r=r(H3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),H3t.forEach(t),x$r=i(NA),Oc=n(NA,"P",{});var ZZ=s(Oc);$$r=r(ZZ,`Note:
Loading a model from its configuration file does `),J8e=n(ZZ,"STRONG",{});var U3t=s(J8e);k$r=r(U3t,"not"),U3t.forEach(t),S$r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(ZZ,"A",{href:!0});var J3t=s(aY);R$r=r(J3t,"from_pretrained()"),J3t.forEach(t),P$r=r(ZZ," to load the model weights."),ZZ.forEach(t),B$r=i(NA),T(F5.$$.fragment,NA),NA.forEach(t),I$r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Hl=s(Vr);T(A9.$$.fragment,Hl),q$r=i(Hl),Y8e=n(Hl,"P",{});var Y3t=s(Y8e);N$r=r(Y3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y3t.forEach(t),j$r=i(Hl),_n=n(Hl,"P",{});var jA=s(_n);D$r=r(jA,"The model class to instantiate is selected based on the "),K8e=n(jA,"CODE",{});var K3t=s(K8e);G$r=r(K3t,"model_type"),K3t.forEach(t),O$r=r(jA,` property of the config object (either
passed as an argument or loaded from `),Z8e=n(jA,"CODE",{});var Z3t=s(Z8e);V$r=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),X$r=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(jA,"CODE",{});var ewt=s(eMe);z$r=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),W$r=r(jA,":"),jA.forEach(t),Q$r=i(Hl),Pe=n(Hl,"UL",{});var ze=s(Pe);T5=n(ze,"LI",{});var MBe=s(T5);oMe=n(MBe,"STRONG",{});var owt=s(oMe);H$r=r(owt,"bart"),owt.forEach(t),U$r=r(MBe," \u2014 "),nY=n(MBe,"A",{href:!0});var rwt=s(nY);J$r=r(rwt,"FlaxBartForConditionalGeneration"),rwt.forEach(t),Y$r=r(MBe," (BART model)"),MBe.forEach(t),K$r=i(ze),M5=n(ze,"LI",{});var EBe=s(M5);rMe=n(EBe,"STRONG",{});var twt=s(rMe);Z$r=r(twt,"blenderbot"),twt.forEach(t),ekr=r(EBe," \u2014 "),sY=n(EBe,"A",{href:!0});var awt=s(sY);okr=r(awt,"FlaxBlenderbotForConditionalGeneration"),awt.forEach(t),rkr=r(EBe," (Blenderbot model)"),EBe.forEach(t),tkr=i(ze),E5=n(ze,"LI",{});var CBe=s(E5);tMe=n(CBe,"STRONG",{});var nwt=s(tMe);akr=r(nwt,"blenderbot-small"),nwt.forEach(t),nkr=r(CBe," \u2014 "),lY=n(CBe,"A",{href:!0});var swt=s(lY);skr=r(swt,"FlaxBlenderbotSmallForConditionalGeneration"),swt.forEach(t),lkr=r(CBe," (BlenderbotSmall model)"),CBe.forEach(t),ikr=i(ze),C5=n(ze,"LI",{});var wBe=s(C5);aMe=n(wBe,"STRONG",{});var lwt=s(aMe);dkr=r(lwt,"encoder-decoder"),lwt.forEach(t),ckr=r(wBe," \u2014 "),iY=n(wBe,"A",{href:!0});var iwt=s(iY);fkr=r(iwt,"FlaxEncoderDecoderModel"),iwt.forEach(t),mkr=r(wBe," (Encoder decoder model)"),wBe.forEach(t),gkr=i(ze),w5=n(ze,"LI",{});var ABe=s(w5);nMe=n(ABe,"STRONG",{});var dwt=s(nMe);hkr=r(dwt,"marian"),dwt.forEach(t),pkr=r(ABe," \u2014 "),dY=n(ABe,"A",{href:!0});var cwt=s(dY);ukr=r(cwt,"FlaxMarianMTModel"),cwt.forEach(t),_kr=r(ABe," (Marian model)"),ABe.forEach(t),bkr=i(ze),A5=n(ze,"LI",{});var yBe=s(A5);sMe=n(yBe,"STRONG",{});var fwt=s(sMe);vkr=r(fwt,"mbart"),fwt.forEach(t),Fkr=r(yBe," \u2014 "),cY=n(yBe,"A",{href:!0});var mwt=s(cY);Tkr=r(mwt,"FlaxMBartForConditionalGeneration"),mwt.forEach(t),Mkr=r(yBe," (mBART model)"),yBe.forEach(t),Ekr=i(ze),y5=n(ze,"LI",{});var LBe=s(y5);lMe=n(LBe,"STRONG",{});var gwt=s(lMe);Ckr=r(gwt,"mt5"),gwt.forEach(t),wkr=r(LBe," \u2014 "),fY=n(LBe,"A",{href:!0});var hwt=s(fY);Akr=r(hwt,"FlaxMT5ForConditionalGeneration"),hwt.forEach(t),ykr=r(LBe," (mT5 model)"),LBe.forEach(t),Lkr=i(ze),L5=n(ze,"LI",{});var xBe=s(L5);iMe=n(xBe,"STRONG",{});var pwt=s(iMe);xkr=r(pwt,"pegasus"),pwt.forEach(t),$kr=r(xBe," \u2014 "),mY=n(xBe,"A",{href:!0});var uwt=s(mY);kkr=r(uwt,"FlaxPegasusForConditionalGeneration"),uwt.forEach(t),Skr=r(xBe," (Pegasus model)"),xBe.forEach(t),Rkr=i(ze),x5=n(ze,"LI",{});var $Be=s(x5);dMe=n($Be,"STRONG",{});var _wt=s(dMe);Pkr=r(_wt,"t5"),_wt.forEach(t),Bkr=r($Be," \u2014 "),gY=n($Be,"A",{href:!0});var bwt=s(gY);Ikr=r(bwt,"FlaxT5ForConditionalGeneration"),bwt.forEach(t),qkr=r($Be," (T5 model)"),$Be.forEach(t),ze.forEach(t),Nkr=i(Hl),T($5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),sNe=i(f),Vc=n(f,"H2",{class:!0});var gDe=s(Vc);k5=n(gDe,"A",{id:!0,class:!0,href:!0});var vwt=s(k5);cMe=n(vwt,"SPAN",{});var Fwt=s(cMe);T(y9.$$.fragment,Fwt),Fwt.forEach(t),vwt.forEach(t),jkr=i(gDe),fMe=n(gDe,"SPAN",{});var Twt=s(fMe);Dkr=r(Twt,"FlaxAutoModelForSequenceClassification"),Twt.forEach(t),gDe.forEach(t),lNe=i(f),ur=n(f,"DIV",{class:!0});var Ul=s(ur);T(L9.$$.fragment,Ul),Gkr=i(Ul),Xc=n(Ul,"P",{});var eee=s(Xc);Okr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hY=n(eee,"A",{href:!0});var Mwt=s(hY);Vkr=r(Mwt,"from_pretrained()"),Mwt.forEach(t),Xkr=r(eee," class method or the "),pY=n(eee,"A",{href:!0});var Ewt=s(pY);zkr=r(Ewt,"from_config()"),Ewt.forEach(t),Wkr=r(eee,` class
method.`),eee.forEach(t),Qkr=i(Ul),x9=n(Ul,"P",{});var hDe=s(x9);Hkr=r(hDe,"This class cannot be instantiated directly using "),mMe=n(hDe,"CODE",{});var Cwt=s(mMe);Ukr=r(Cwt,"__init__()"),Cwt.forEach(t),Jkr=r(hDe," (throws an error)."),hDe.forEach(t),Ykr=i(Ul),Wt=n(Ul,"DIV",{class:!0});var DA=s(Wt);T($9.$$.fragment,DA),Kkr=i(DA),gMe=n(DA,"P",{});var wwt=s(gMe);Zkr=r(wwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wwt.forEach(t),eSr=i(DA),zc=n(DA,"P",{});var oee=s(zc);oSr=r(oee,`Note:
Loading a model from its configuration file does `),hMe=n(oee,"STRONG",{});var Awt=s(hMe);rSr=r(Awt,"not"),Awt.forEach(t),tSr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(oee,"A",{href:!0});var ywt=s(uY);aSr=r(ywt,"from_pretrained()"),ywt.forEach(t),nSr=r(oee," to load the model weights."),oee.forEach(t),sSr=i(DA),T(S5.$$.fragment,DA),DA.forEach(t),lSr=i(Ul),Xr=n(Ul,"DIV",{class:!0});var Jl=s(Xr);T(k9.$$.fragment,Jl),iSr=i(Jl),pMe=n(Jl,"P",{});var Lwt=s(pMe);dSr=r(Lwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lwt.forEach(t),cSr=i(Jl),bn=n(Jl,"P",{});var GA=s(bn);fSr=r(GA,"The model class to instantiate is selected based on the "),uMe=n(GA,"CODE",{});var xwt=s(uMe);mSr=r(xwt,"model_type"),xwt.forEach(t),gSr=r(GA,` property of the config object (either
passed as an argument or loaded from `),_Me=n(GA,"CODE",{});var $wt=s(_Me);hSr=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),pSr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(GA,"CODE",{});var kwt=s(bMe);uSr=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),_Sr=r(GA,":"),GA.forEach(t),bSr=i(Jl),xe=n(Jl,"UL",{});var qe=s(xe);R5=n(qe,"LI",{});var kBe=s(R5);vMe=n(kBe,"STRONG",{});var Swt=s(vMe);vSr=r(Swt,"albert"),Swt.forEach(t),FSr=r(kBe," \u2014 "),_Y=n(kBe,"A",{href:!0});var Rwt=s(_Y);TSr=r(Rwt,"FlaxAlbertForSequenceClassification"),Rwt.forEach(t),MSr=r(kBe," (ALBERT model)"),kBe.forEach(t),ESr=i(qe),P5=n(qe,"LI",{});var SBe=s(P5);FMe=n(SBe,"STRONG",{});var Pwt=s(FMe);CSr=r(Pwt,"bart"),Pwt.forEach(t),wSr=r(SBe," \u2014 "),bY=n(SBe,"A",{href:!0});var Bwt=s(bY);ASr=r(Bwt,"FlaxBartForSequenceClassification"),Bwt.forEach(t),ySr=r(SBe," (BART model)"),SBe.forEach(t),LSr=i(qe),B5=n(qe,"LI",{});var RBe=s(B5);TMe=n(RBe,"STRONG",{});var Iwt=s(TMe);xSr=r(Iwt,"bert"),Iwt.forEach(t),$Sr=r(RBe," \u2014 "),vY=n(RBe,"A",{href:!0});var qwt=s(vY);kSr=r(qwt,"FlaxBertForSequenceClassification"),qwt.forEach(t),SSr=r(RBe," (BERT model)"),RBe.forEach(t),RSr=i(qe),I5=n(qe,"LI",{});var PBe=s(I5);MMe=n(PBe,"STRONG",{});var Nwt=s(MMe);PSr=r(Nwt,"big_bird"),Nwt.forEach(t),BSr=r(PBe," \u2014 "),FY=n(PBe,"A",{href:!0});var jwt=s(FY);ISr=r(jwt,"FlaxBigBirdForSequenceClassification"),jwt.forEach(t),qSr=r(PBe," (BigBird model)"),PBe.forEach(t),NSr=i(qe),q5=n(qe,"LI",{});var BBe=s(q5);EMe=n(BBe,"STRONG",{});var Dwt=s(EMe);jSr=r(Dwt,"distilbert"),Dwt.forEach(t),DSr=r(BBe," \u2014 "),TY=n(BBe,"A",{href:!0});var Gwt=s(TY);GSr=r(Gwt,"FlaxDistilBertForSequenceClassification"),Gwt.forEach(t),OSr=r(BBe," (DistilBERT model)"),BBe.forEach(t),VSr=i(qe),N5=n(qe,"LI",{});var IBe=s(N5);CMe=n(IBe,"STRONG",{});var Owt=s(CMe);XSr=r(Owt,"electra"),Owt.forEach(t),zSr=r(IBe," \u2014 "),MY=n(IBe,"A",{href:!0});var Vwt=s(MY);WSr=r(Vwt,"FlaxElectraForSequenceClassification"),Vwt.forEach(t),QSr=r(IBe," (ELECTRA model)"),IBe.forEach(t),HSr=i(qe),j5=n(qe,"LI",{});var qBe=s(j5);wMe=n(qBe,"STRONG",{});var Xwt=s(wMe);USr=r(Xwt,"mbart"),Xwt.forEach(t),JSr=r(qBe," \u2014 "),EY=n(qBe,"A",{href:!0});var zwt=s(EY);YSr=r(zwt,"FlaxMBartForSequenceClassification"),zwt.forEach(t),KSr=r(qBe," (mBART model)"),qBe.forEach(t),ZSr=i(qe),D5=n(qe,"LI",{});var NBe=s(D5);AMe=n(NBe,"STRONG",{});var Wwt=s(AMe);eRr=r(Wwt,"roberta"),Wwt.forEach(t),oRr=r(NBe," \u2014 "),CY=n(NBe,"A",{href:!0});var Qwt=s(CY);rRr=r(Qwt,"FlaxRobertaForSequenceClassification"),Qwt.forEach(t),tRr=r(NBe," (RoBERTa model)"),NBe.forEach(t),aRr=i(qe),G5=n(qe,"LI",{});var jBe=s(G5);yMe=n(jBe,"STRONG",{});var Hwt=s(yMe);nRr=r(Hwt,"roformer"),Hwt.forEach(t),sRr=r(jBe," \u2014 "),wY=n(jBe,"A",{href:!0});var Uwt=s(wY);lRr=r(Uwt,"FlaxRoFormerForSequenceClassification"),Uwt.forEach(t),iRr=r(jBe," (RoFormer model)"),jBe.forEach(t),dRr=i(qe),O5=n(qe,"LI",{});var DBe=s(O5);LMe=n(DBe,"STRONG",{});var Jwt=s(LMe);cRr=r(Jwt,"xlm-roberta"),Jwt.forEach(t),fRr=r(DBe," \u2014 "),AY=n(DBe,"A",{href:!0});var Ywt=s(AY);mRr=r(Ywt,"FlaxXLMRobertaForSequenceClassification"),Ywt.forEach(t),gRr=r(DBe," (XLM-RoBERTa model)"),DBe.forEach(t),qe.forEach(t),hRr=i(Jl),T(V5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),iNe=i(f),Wc=n(f,"H2",{class:!0});var pDe=s(Wc);X5=n(pDe,"A",{id:!0,class:!0,href:!0});var Kwt=s(X5);xMe=n(Kwt,"SPAN",{});var Zwt=s(xMe);T(S9.$$.fragment,Zwt),Zwt.forEach(t),Kwt.forEach(t),pRr=i(pDe),$Me=n(pDe,"SPAN",{});var eAt=s($Me);uRr=r(eAt,"FlaxAutoModelForQuestionAnswering"),eAt.forEach(t),pDe.forEach(t),dNe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(R9.$$.fragment,Yl),_Rr=i(Yl),Qc=n(Yl,"P",{});var ree=s(Qc);bRr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yY=n(ree,"A",{href:!0});var oAt=s(yY);vRr=r(oAt,"from_pretrained()"),oAt.forEach(t),FRr=r(ree," class method or the "),LY=n(ree,"A",{href:!0});var rAt=s(LY);TRr=r(rAt,"from_config()"),rAt.forEach(t),MRr=r(ree,` class
method.`),ree.forEach(t),ERr=i(Yl),P9=n(Yl,"P",{});var uDe=s(P9);CRr=r(uDe,"This class cannot be instantiated directly using "),kMe=n(uDe,"CODE",{});var tAt=s(kMe);wRr=r(tAt,"__init__()"),tAt.forEach(t),ARr=r(uDe," (throws an error)."),uDe.forEach(t),yRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var OA=s(Qt);T(B9.$$.fragment,OA),LRr=i(OA),SMe=n(OA,"P",{});var aAt=s(SMe);xRr=r(aAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aAt.forEach(t),$Rr=i(OA),Hc=n(OA,"P",{});var tee=s(Hc);kRr=r(tee,`Note:
Loading a model from its configuration file does `),RMe=n(tee,"STRONG",{});var nAt=s(RMe);SRr=r(nAt,"not"),nAt.forEach(t),RRr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(tee,"A",{href:!0});var sAt=s(xY);PRr=r(sAt,"from_pretrained()"),sAt.forEach(t),BRr=r(tee," to load the model weights."),tee.forEach(t),IRr=i(OA),T(z5.$$.fragment,OA),OA.forEach(t),qRr=i(Yl),zr=n(Yl,"DIV",{class:!0});var Kl=s(zr);T(I9.$$.fragment,Kl),NRr=i(Kl),PMe=n(Kl,"P",{});var lAt=s(PMe);jRr=r(lAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lAt.forEach(t),DRr=i(Kl),vn=n(Kl,"P",{});var VA=s(vn);GRr=r(VA,"The model class to instantiate is selected based on the "),BMe=n(VA,"CODE",{});var iAt=s(BMe);ORr=r(iAt,"model_type"),iAt.forEach(t),VRr=r(VA,` property of the config object (either
passed as an argument or loaded from `),IMe=n(VA,"CODE",{});var dAt=s(IMe);XRr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),zRr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(VA,"CODE",{});var cAt=s(qMe);WRr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),QRr=r(VA,":"),VA.forEach(t),HRr=i(Kl),$e=n(Kl,"UL",{});var Ne=s($e);W5=n(Ne,"LI",{});var GBe=s(W5);NMe=n(GBe,"STRONG",{});var fAt=s(NMe);URr=r(fAt,"albert"),fAt.forEach(t),JRr=r(GBe," \u2014 "),$Y=n(GBe,"A",{href:!0});var mAt=s($Y);YRr=r(mAt,"FlaxAlbertForQuestionAnswering"),mAt.forEach(t),KRr=r(GBe," (ALBERT model)"),GBe.forEach(t),ZRr=i(Ne),Q5=n(Ne,"LI",{});var OBe=s(Q5);jMe=n(OBe,"STRONG",{});var gAt=s(jMe);ePr=r(gAt,"bart"),gAt.forEach(t),oPr=r(OBe," \u2014 "),kY=n(OBe,"A",{href:!0});var hAt=s(kY);rPr=r(hAt,"FlaxBartForQuestionAnswering"),hAt.forEach(t),tPr=r(OBe," (BART model)"),OBe.forEach(t),aPr=i(Ne),H5=n(Ne,"LI",{});var VBe=s(H5);DMe=n(VBe,"STRONG",{});var pAt=s(DMe);nPr=r(pAt,"bert"),pAt.forEach(t),sPr=r(VBe," \u2014 "),SY=n(VBe,"A",{href:!0});var uAt=s(SY);lPr=r(uAt,"FlaxBertForQuestionAnswering"),uAt.forEach(t),iPr=r(VBe," (BERT model)"),VBe.forEach(t),dPr=i(Ne),U5=n(Ne,"LI",{});var XBe=s(U5);GMe=n(XBe,"STRONG",{});var _At=s(GMe);cPr=r(_At,"big_bird"),_At.forEach(t),fPr=r(XBe," \u2014 "),RY=n(XBe,"A",{href:!0});var bAt=s(RY);mPr=r(bAt,"FlaxBigBirdForQuestionAnswering"),bAt.forEach(t),gPr=r(XBe," (BigBird model)"),XBe.forEach(t),hPr=i(Ne),J5=n(Ne,"LI",{});var zBe=s(J5);OMe=n(zBe,"STRONG",{});var vAt=s(OMe);pPr=r(vAt,"distilbert"),vAt.forEach(t),uPr=r(zBe," \u2014 "),PY=n(zBe,"A",{href:!0});var FAt=s(PY);_Pr=r(FAt,"FlaxDistilBertForQuestionAnswering"),FAt.forEach(t),bPr=r(zBe," (DistilBERT model)"),zBe.forEach(t),vPr=i(Ne),Y5=n(Ne,"LI",{});var WBe=s(Y5);VMe=n(WBe,"STRONG",{});var TAt=s(VMe);FPr=r(TAt,"electra"),TAt.forEach(t),TPr=r(WBe," \u2014 "),BY=n(WBe,"A",{href:!0});var MAt=s(BY);MPr=r(MAt,"FlaxElectraForQuestionAnswering"),MAt.forEach(t),EPr=r(WBe," (ELECTRA model)"),WBe.forEach(t),CPr=i(Ne),K5=n(Ne,"LI",{});var QBe=s(K5);XMe=n(QBe,"STRONG",{});var EAt=s(XMe);wPr=r(EAt,"mbart"),EAt.forEach(t),APr=r(QBe," \u2014 "),IY=n(QBe,"A",{href:!0});var CAt=s(IY);yPr=r(CAt,"FlaxMBartForQuestionAnswering"),CAt.forEach(t),LPr=r(QBe," (mBART model)"),QBe.forEach(t),xPr=i(Ne),Z5=n(Ne,"LI",{});var HBe=s(Z5);zMe=n(HBe,"STRONG",{});var wAt=s(zMe);$Pr=r(wAt,"roberta"),wAt.forEach(t),kPr=r(HBe," \u2014 "),qY=n(HBe,"A",{href:!0});var AAt=s(qY);SPr=r(AAt,"FlaxRobertaForQuestionAnswering"),AAt.forEach(t),RPr=r(HBe," (RoBERTa model)"),HBe.forEach(t),PPr=i(Ne),e3=n(Ne,"LI",{});var UBe=s(e3);WMe=n(UBe,"STRONG",{});var yAt=s(WMe);BPr=r(yAt,"roformer"),yAt.forEach(t),IPr=r(UBe," \u2014 "),NY=n(UBe,"A",{href:!0});var LAt=s(NY);qPr=r(LAt,"FlaxRoFormerForQuestionAnswering"),LAt.forEach(t),NPr=r(UBe," (RoFormer model)"),UBe.forEach(t),jPr=i(Ne),o3=n(Ne,"LI",{});var JBe=s(o3);QMe=n(JBe,"STRONG",{});var xAt=s(QMe);DPr=r(xAt,"xlm-roberta"),xAt.forEach(t),GPr=r(JBe," \u2014 "),jY=n(JBe,"A",{href:!0});var $At=s(jY);OPr=r($At,"FlaxXLMRobertaForQuestionAnswering"),$At.forEach(t),VPr=r(JBe," (XLM-RoBERTa model)"),JBe.forEach(t),Ne.forEach(t),XPr=i(Kl),T(r3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),cNe=i(f),Uc=n(f,"H2",{class:!0});var _De=s(Uc);t3=n(_De,"A",{id:!0,class:!0,href:!0});var kAt=s(t3);HMe=n(kAt,"SPAN",{});var SAt=s(HMe);T(q9.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),zPr=i(_De),UMe=n(_De,"SPAN",{});var RAt=s(UMe);WPr=r(RAt,"FlaxAutoModelForTokenClassification"),RAt.forEach(t),_De.forEach(t),fNe=i(f),br=n(f,"DIV",{class:!0});var Zl=s(br);T(N9.$$.fragment,Zl),QPr=i(Zl),Jc=n(Zl,"P",{});var aee=s(Jc);HPr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DY=n(aee,"A",{href:!0});var PAt=s(DY);UPr=r(PAt,"from_pretrained()"),PAt.forEach(t),JPr=r(aee," class method or the "),GY=n(aee,"A",{href:!0});var BAt=s(GY);YPr=r(BAt,"from_config()"),BAt.forEach(t),KPr=r(aee,` class
method.`),aee.forEach(t),ZPr=i(Zl),j9=n(Zl,"P",{});var bDe=s(j9);eBr=r(bDe,"This class cannot be instantiated directly using "),JMe=n(bDe,"CODE",{});var IAt=s(JMe);oBr=r(IAt,"__init__()"),IAt.forEach(t),rBr=r(bDe," (throws an error)."),bDe.forEach(t),tBr=i(Zl),Ht=n(Zl,"DIV",{class:!0});var XA=s(Ht);T(D9.$$.fragment,XA),aBr=i(XA),YMe=n(XA,"P",{});var qAt=s(YMe);nBr=r(qAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qAt.forEach(t),sBr=i(XA),Yc=n(XA,"P",{});var nee=s(Yc);lBr=r(nee,`Note:
Loading a model from its configuration file does `),KMe=n(nee,"STRONG",{});var NAt=s(KMe);iBr=r(NAt,"not"),NAt.forEach(t),dBr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(nee,"A",{href:!0});var jAt=s(OY);cBr=r(jAt,"from_pretrained()"),jAt.forEach(t),fBr=r(nee," to load the model weights."),nee.forEach(t),mBr=i(XA),T(a3.$$.fragment,XA),XA.forEach(t),gBr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(G9.$$.fragment,ei),hBr=i(ei),ZMe=n(ei,"P",{});var DAt=s(ZMe);pBr=r(DAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DAt.forEach(t),uBr=i(ei),Fn=n(ei,"P",{});var zA=s(Fn);_Br=r(zA,"The model class to instantiate is selected based on the "),e4e=n(zA,"CODE",{});var GAt=s(e4e);bBr=r(GAt,"model_type"),GAt.forEach(t),vBr=r(zA,` property of the config object (either
passed as an argument or loaded from `),o4e=n(zA,"CODE",{});var OAt=s(o4e);FBr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),TBr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(zA,"CODE",{});var VAt=s(r4e);MBr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),EBr=r(zA,":"),zA.forEach(t),CBr=i(ei),De=n(ei,"UL",{});var Fo=s(De);n3=n(Fo,"LI",{});var YBe=s(n3);t4e=n(YBe,"STRONG",{});var XAt=s(t4e);wBr=r(XAt,"albert"),XAt.forEach(t),ABr=r(YBe," \u2014 "),VY=n(YBe,"A",{href:!0});var zAt=s(VY);yBr=r(zAt,"FlaxAlbertForTokenClassification"),zAt.forEach(t),LBr=r(YBe," (ALBERT model)"),YBe.forEach(t),xBr=i(Fo),s3=n(Fo,"LI",{});var KBe=s(s3);a4e=n(KBe,"STRONG",{});var WAt=s(a4e);$Br=r(WAt,"bert"),WAt.forEach(t),kBr=r(KBe," \u2014 "),XY=n(KBe,"A",{href:!0});var QAt=s(XY);SBr=r(QAt,"FlaxBertForTokenClassification"),QAt.forEach(t),RBr=r(KBe," (BERT model)"),KBe.forEach(t),PBr=i(Fo),l3=n(Fo,"LI",{});var ZBe=s(l3);n4e=n(ZBe,"STRONG",{});var HAt=s(n4e);BBr=r(HAt,"big_bird"),HAt.forEach(t),IBr=r(ZBe," \u2014 "),zY=n(ZBe,"A",{href:!0});var UAt=s(zY);qBr=r(UAt,"FlaxBigBirdForTokenClassification"),UAt.forEach(t),NBr=r(ZBe," (BigBird model)"),ZBe.forEach(t),jBr=i(Fo),i3=n(Fo,"LI",{});var eIe=s(i3);s4e=n(eIe,"STRONG",{});var JAt=s(s4e);DBr=r(JAt,"distilbert"),JAt.forEach(t),GBr=r(eIe," \u2014 "),WY=n(eIe,"A",{href:!0});var YAt=s(WY);OBr=r(YAt,"FlaxDistilBertForTokenClassification"),YAt.forEach(t),VBr=r(eIe," (DistilBERT model)"),eIe.forEach(t),XBr=i(Fo),d3=n(Fo,"LI",{});var oIe=s(d3);l4e=n(oIe,"STRONG",{});var KAt=s(l4e);zBr=r(KAt,"electra"),KAt.forEach(t),WBr=r(oIe," \u2014 "),QY=n(oIe,"A",{href:!0});var ZAt=s(QY);QBr=r(ZAt,"FlaxElectraForTokenClassification"),ZAt.forEach(t),HBr=r(oIe," (ELECTRA model)"),oIe.forEach(t),UBr=i(Fo),c3=n(Fo,"LI",{});var rIe=s(c3);i4e=n(rIe,"STRONG",{});var e0t=s(i4e);JBr=r(e0t,"roberta"),e0t.forEach(t),YBr=r(rIe," \u2014 "),HY=n(rIe,"A",{href:!0});var o0t=s(HY);KBr=r(o0t,"FlaxRobertaForTokenClassification"),o0t.forEach(t),ZBr=r(rIe," (RoBERTa model)"),rIe.forEach(t),eIr=i(Fo),f3=n(Fo,"LI",{});var tIe=s(f3);d4e=n(tIe,"STRONG",{});var r0t=s(d4e);oIr=r(r0t,"roformer"),r0t.forEach(t),rIr=r(tIe," \u2014 "),UY=n(tIe,"A",{href:!0});var t0t=s(UY);tIr=r(t0t,"FlaxRoFormerForTokenClassification"),t0t.forEach(t),aIr=r(tIe," (RoFormer model)"),tIe.forEach(t),nIr=i(Fo),m3=n(Fo,"LI",{});var aIe=s(m3);c4e=n(aIe,"STRONG",{});var a0t=s(c4e);sIr=r(a0t,"xlm-roberta"),a0t.forEach(t),lIr=r(aIe," \u2014 "),JY=n(aIe,"A",{href:!0});var n0t=s(JY);iIr=r(n0t,"FlaxXLMRobertaForTokenClassification"),n0t.forEach(t),dIr=r(aIe," (XLM-RoBERTa model)"),aIe.forEach(t),Fo.forEach(t),cIr=i(ei),T(g3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),mNe=i(f),Kc=n(f,"H2",{class:!0});var vDe=s(Kc);h3=n(vDe,"A",{id:!0,class:!0,href:!0});var s0t=s(h3);f4e=n(s0t,"SPAN",{});var l0t=s(f4e);T(O9.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),fIr=i(vDe),m4e=n(vDe,"SPAN",{});var i0t=s(m4e);mIr=r(i0t,"FlaxAutoModelForMultipleChoice"),i0t.forEach(t),vDe.forEach(t),gNe=i(f),vr=n(f,"DIV",{class:!0});var oi=s(vr);T(V9.$$.fragment,oi),gIr=i(oi),Zc=n(oi,"P",{});var see=s(Zc);hIr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YY=n(see,"A",{href:!0});var d0t=s(YY);pIr=r(d0t,"from_pretrained()"),d0t.forEach(t),uIr=r(see," class method or the "),KY=n(see,"A",{href:!0});var c0t=s(KY);_Ir=r(c0t,"from_config()"),c0t.forEach(t),bIr=r(see,` class
method.`),see.forEach(t),vIr=i(oi),X9=n(oi,"P",{});var FDe=s(X9);FIr=r(FDe,"This class cannot be instantiated directly using "),g4e=n(FDe,"CODE",{});var f0t=s(g4e);TIr=r(f0t,"__init__()"),f0t.forEach(t),MIr=r(FDe," (throws an error)."),FDe.forEach(t),EIr=i(oi),Ut=n(oi,"DIV",{class:!0});var WA=s(Ut);T(z9.$$.fragment,WA),CIr=i(WA),h4e=n(WA,"P",{});var m0t=s(h4e);wIr=r(m0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),m0t.forEach(t),AIr=i(WA),ef=n(WA,"P",{});var lee=s(ef);yIr=r(lee,`Note:
Loading a model from its configuration file does `),p4e=n(lee,"STRONG",{});var g0t=s(p4e);LIr=r(g0t,"not"),g0t.forEach(t),xIr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(lee,"A",{href:!0});var h0t=s(ZY);$Ir=r(h0t,"from_pretrained()"),h0t.forEach(t),kIr=r(lee," to load the model weights."),lee.forEach(t),SIr=i(WA),T(p3.$$.fragment,WA),WA.forEach(t),RIr=i(oi),Qr=n(oi,"DIV",{class:!0});var ri=s(Qr);T(W9.$$.fragment,ri),PIr=i(ri),u4e=n(ri,"P",{});var p0t=s(u4e);BIr=r(p0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),p0t.forEach(t),IIr=i(ri),Tn=n(ri,"P",{});var QA=s(Tn);qIr=r(QA,"The model class to instantiate is selected based on the "),_4e=n(QA,"CODE",{});var u0t=s(_4e);NIr=r(u0t,"model_type"),u0t.forEach(t),jIr=r(QA,` property of the config object (either
passed as an argument or loaded from `),b4e=n(QA,"CODE",{});var _0t=s(b4e);DIr=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),GIr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(QA,"CODE",{});var b0t=s(v4e);OIr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),VIr=r(QA,":"),QA.forEach(t),XIr=i(ri),Ge=n(ri,"UL",{});var To=s(Ge);u3=n(To,"LI",{});var nIe=s(u3);F4e=n(nIe,"STRONG",{});var v0t=s(F4e);zIr=r(v0t,"albert"),v0t.forEach(t),WIr=r(nIe," \u2014 "),eK=n(nIe,"A",{href:!0});var F0t=s(eK);QIr=r(F0t,"FlaxAlbertForMultipleChoice"),F0t.forEach(t),HIr=r(nIe," (ALBERT model)"),nIe.forEach(t),UIr=i(To),_3=n(To,"LI",{});var sIe=s(_3);T4e=n(sIe,"STRONG",{});var T0t=s(T4e);JIr=r(T0t,"bert"),T0t.forEach(t),YIr=r(sIe," \u2014 "),oK=n(sIe,"A",{href:!0});var M0t=s(oK);KIr=r(M0t,"FlaxBertForMultipleChoice"),M0t.forEach(t),ZIr=r(sIe," (BERT model)"),sIe.forEach(t),eqr=i(To),b3=n(To,"LI",{});var lIe=s(b3);M4e=n(lIe,"STRONG",{});var E0t=s(M4e);oqr=r(E0t,"big_bird"),E0t.forEach(t),rqr=r(lIe," \u2014 "),rK=n(lIe,"A",{href:!0});var C0t=s(rK);tqr=r(C0t,"FlaxBigBirdForMultipleChoice"),C0t.forEach(t),aqr=r(lIe," (BigBird model)"),lIe.forEach(t),nqr=i(To),v3=n(To,"LI",{});var iIe=s(v3);E4e=n(iIe,"STRONG",{});var w0t=s(E4e);sqr=r(w0t,"distilbert"),w0t.forEach(t),lqr=r(iIe," \u2014 "),tK=n(iIe,"A",{href:!0});var A0t=s(tK);iqr=r(A0t,"FlaxDistilBertForMultipleChoice"),A0t.forEach(t),dqr=r(iIe," (DistilBERT model)"),iIe.forEach(t),cqr=i(To),F3=n(To,"LI",{});var dIe=s(F3);C4e=n(dIe,"STRONG",{});var y0t=s(C4e);fqr=r(y0t,"electra"),y0t.forEach(t),mqr=r(dIe," \u2014 "),aK=n(dIe,"A",{href:!0});var L0t=s(aK);gqr=r(L0t,"FlaxElectraForMultipleChoice"),L0t.forEach(t),hqr=r(dIe," (ELECTRA model)"),dIe.forEach(t),pqr=i(To),T3=n(To,"LI",{});var cIe=s(T3);w4e=n(cIe,"STRONG",{});var x0t=s(w4e);uqr=r(x0t,"roberta"),x0t.forEach(t),_qr=r(cIe," \u2014 "),nK=n(cIe,"A",{href:!0});var $0t=s(nK);bqr=r($0t,"FlaxRobertaForMultipleChoice"),$0t.forEach(t),vqr=r(cIe," (RoBERTa model)"),cIe.forEach(t),Fqr=i(To),M3=n(To,"LI",{});var fIe=s(M3);A4e=n(fIe,"STRONG",{});var k0t=s(A4e);Tqr=r(k0t,"roformer"),k0t.forEach(t),Mqr=r(fIe," \u2014 "),sK=n(fIe,"A",{href:!0});var S0t=s(sK);Eqr=r(S0t,"FlaxRoFormerForMultipleChoice"),S0t.forEach(t),Cqr=r(fIe," (RoFormer model)"),fIe.forEach(t),wqr=i(To),E3=n(To,"LI",{});var mIe=s(E3);y4e=n(mIe,"STRONG",{});var R0t=s(y4e);Aqr=r(R0t,"xlm-roberta"),R0t.forEach(t),yqr=r(mIe," \u2014 "),lK=n(mIe,"A",{href:!0});var P0t=s(lK);Lqr=r(P0t,"FlaxXLMRobertaForMultipleChoice"),P0t.forEach(t),xqr=r(mIe," (XLM-RoBERTa model)"),mIe.forEach(t),To.forEach(t),$qr=i(ri),T(C3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),hNe=i(f),of=n(f,"H2",{class:!0});var TDe=s(of);w3=n(TDe,"A",{id:!0,class:!0,href:!0});var B0t=s(w3);L4e=n(B0t,"SPAN",{});var I0t=s(L4e);T(Q9.$$.fragment,I0t),I0t.forEach(t),B0t.forEach(t),kqr=i(TDe),x4e=n(TDe,"SPAN",{});var q0t=s(x4e);Sqr=r(q0t,"FlaxAutoModelForNextSentencePrediction"),q0t.forEach(t),TDe.forEach(t),pNe=i(f),Fr=n(f,"DIV",{class:!0});var ti=s(Fr);T(H9.$$.fragment,ti),Rqr=i(ti),rf=n(ti,"P",{});var iee=s(rf);Pqr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iK=n(iee,"A",{href:!0});var N0t=s(iK);Bqr=r(N0t,"from_pretrained()"),N0t.forEach(t),Iqr=r(iee," class method or the "),dK=n(iee,"A",{href:!0});var j0t=s(dK);qqr=r(j0t,"from_config()"),j0t.forEach(t),Nqr=r(iee,` class
method.`),iee.forEach(t),jqr=i(ti),U9=n(ti,"P",{});var MDe=s(U9);Dqr=r(MDe,"This class cannot be instantiated directly using "),$4e=n(MDe,"CODE",{});var D0t=s($4e);Gqr=r(D0t,"__init__()"),D0t.forEach(t),Oqr=r(MDe," (throws an error)."),MDe.forEach(t),Vqr=i(ti),Jt=n(ti,"DIV",{class:!0});var HA=s(Jt);T(J9.$$.fragment,HA),Xqr=i(HA),k4e=n(HA,"P",{});var G0t=s(k4e);zqr=r(G0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),G0t.forEach(t),Wqr=i(HA),tf=n(HA,"P",{});var dee=s(tf);Qqr=r(dee,`Note:
Loading a model from its configuration file does `),S4e=n(dee,"STRONG",{});var O0t=s(S4e);Hqr=r(O0t,"not"),O0t.forEach(t),Uqr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(dee,"A",{href:!0});var V0t=s(cK);Jqr=r(V0t,"from_pretrained()"),V0t.forEach(t),Yqr=r(dee," to load the model weights."),dee.forEach(t),Kqr=i(HA),T(A3.$$.fragment,HA),HA.forEach(t),Zqr=i(ti),Hr=n(ti,"DIV",{class:!0});var ai=s(Hr);T(Y9.$$.fragment,ai),eNr=i(ai),R4e=n(ai,"P",{});var X0t=s(R4e);oNr=r(X0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),X0t.forEach(t),rNr=i(ai),Mn=n(ai,"P",{});var UA=s(Mn);tNr=r(UA,"The model class to instantiate is selected based on the "),P4e=n(UA,"CODE",{});var z0t=s(P4e);aNr=r(z0t,"model_type"),z0t.forEach(t),nNr=r(UA,` property of the config object (either
passed as an argument or loaded from `),B4e=n(UA,"CODE",{});var W0t=s(B4e);sNr=r(W0t,"pretrained_model_name_or_path"),W0t.forEach(t),lNr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=n(UA,"CODE",{});var Q0t=s(I4e);iNr=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),dNr=r(UA,":"),UA.forEach(t),cNr=i(ai),q4e=n(ai,"UL",{});var H0t=s(q4e);y3=n(H0t,"LI",{});var gIe=s(y3);N4e=n(gIe,"STRONG",{});var U0t=s(N4e);fNr=r(U0t,"bert"),U0t.forEach(t),mNr=r(gIe," \u2014 "),fK=n(gIe,"A",{href:!0});var J0t=s(fK);gNr=r(J0t,"FlaxBertForNextSentencePrediction"),J0t.forEach(t),hNr=r(gIe," (BERT model)"),gIe.forEach(t),H0t.forEach(t),pNr=i(ai),T(L3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),uNe=i(f),af=n(f,"H2",{class:!0});var EDe=s(af);x3=n(EDe,"A",{id:!0,class:!0,href:!0});var Y0t=s(x3);j4e=n(Y0t,"SPAN",{});var K0t=s(j4e);T(K9.$$.fragment,K0t),K0t.forEach(t),Y0t.forEach(t),uNr=i(EDe),D4e=n(EDe,"SPAN",{});var Z0t=s(D4e);_Nr=r(Z0t,"FlaxAutoModelForImageClassification"),Z0t.forEach(t),EDe.forEach(t),_Ne=i(f),Tr=n(f,"DIV",{class:!0});var ni=s(Tr);T(Z9.$$.fragment,ni),bNr=i(ni),nf=n(ni,"P",{});var cee=s(nf);vNr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mK=n(cee,"A",{href:!0});var eyt=s(mK);FNr=r(eyt,"from_pretrained()"),eyt.forEach(t),TNr=r(cee," class method or the "),gK=n(cee,"A",{href:!0});var oyt=s(gK);MNr=r(oyt,"from_config()"),oyt.forEach(t),ENr=r(cee,` class
method.`),cee.forEach(t),CNr=i(ni),e7=n(ni,"P",{});var CDe=s(e7);wNr=r(CDe,"This class cannot be instantiated directly using "),G4e=n(CDe,"CODE",{});var ryt=s(G4e);ANr=r(ryt,"__init__()"),ryt.forEach(t),yNr=r(CDe," (throws an error)."),CDe.forEach(t),LNr=i(ni),Yt=n(ni,"DIV",{class:!0});var JA=s(Yt);T(o7.$$.fragment,JA),xNr=i(JA),O4e=n(JA,"P",{});var tyt=s(O4e);$Nr=r(tyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tyt.forEach(t),kNr=i(JA),sf=n(JA,"P",{});var fee=s(sf);SNr=r(fee,`Note:
Loading a model from its configuration file does `),V4e=n(fee,"STRONG",{});var ayt=s(V4e);RNr=r(ayt,"not"),ayt.forEach(t),PNr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(fee,"A",{href:!0});var nyt=s(hK);BNr=r(nyt,"from_pretrained()"),nyt.forEach(t),INr=r(fee," to load the model weights."),fee.forEach(t),qNr=i(JA),T($3.$$.fragment,JA),JA.forEach(t),NNr=i(ni),Ur=n(ni,"DIV",{class:!0});var si=s(Ur);T(r7.$$.fragment,si),jNr=i(si),X4e=n(si,"P",{});var syt=s(X4e);DNr=r(syt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),syt.forEach(t),GNr=i(si),En=n(si,"P",{});var YA=s(En);ONr=r(YA,"The model class to instantiate is selected based on the "),z4e=n(YA,"CODE",{});var lyt=s(z4e);VNr=r(lyt,"model_type"),lyt.forEach(t),XNr=r(YA,` property of the config object (either
passed as an argument or loaded from `),W4e=n(YA,"CODE",{});var iyt=s(W4e);zNr=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),WNr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(YA,"CODE",{});var dyt=s(Q4e);QNr=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),HNr=r(YA,":"),YA.forEach(t),UNr=i(si),t7=n(si,"UL",{});var wDe=s(t7);k3=n(wDe,"LI",{});var hIe=s(k3);H4e=n(hIe,"STRONG",{});var cyt=s(H4e);JNr=r(cyt,"beit"),cyt.forEach(t),YNr=r(hIe," \u2014 "),pK=n(hIe,"A",{href:!0});var fyt=s(pK);KNr=r(fyt,"FlaxBeitForImageClassification"),fyt.forEach(t),ZNr=r(hIe," (BEiT model)"),hIe.forEach(t),ejr=i(wDe),S3=n(wDe,"LI",{});var pIe=s(S3);U4e=n(pIe,"STRONG",{});var myt=s(U4e);ojr=r(myt,"vit"),myt.forEach(t),rjr=r(pIe," \u2014 "),uK=n(pIe,"A",{href:!0});var gyt=s(uK);tjr=r(gyt,"FlaxViTForImageClassification"),gyt.forEach(t),ajr=r(pIe," (ViT model)"),pIe.forEach(t),wDe.forEach(t),njr=i(si),T(R3.$$.fragment,si),si.forEach(t),ni.forEach(t),bNe=i(f),lf=n(f,"H2",{class:!0});var ADe=s(lf);P3=n(ADe,"A",{id:!0,class:!0,href:!0});var hyt=s(P3);J4e=n(hyt,"SPAN",{});var pyt=s(J4e);T(a7.$$.fragment,pyt),pyt.forEach(t),hyt.forEach(t),sjr=i(ADe),Y4e=n(ADe,"SPAN",{});var uyt=s(Y4e);ljr=r(uyt,"FlaxAutoModelForVision2Seq"),uyt.forEach(t),ADe.forEach(t),vNe=i(f),Mr=n(f,"DIV",{class:!0});var li=s(Mr);T(n7.$$.fragment,li),ijr=i(li),df=n(li,"P",{});var mee=s(df);djr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_K=n(mee,"A",{href:!0});var _yt=s(_K);cjr=r(_yt,"from_pretrained()"),_yt.forEach(t),fjr=r(mee," class method or the "),bK=n(mee,"A",{href:!0});var byt=s(bK);mjr=r(byt,"from_config()"),byt.forEach(t),gjr=r(mee,` class
method.`),mee.forEach(t),hjr=i(li),s7=n(li,"P",{});var yDe=s(s7);pjr=r(yDe,"This class cannot be instantiated directly using "),K4e=n(yDe,"CODE",{});var vyt=s(K4e);ujr=r(vyt,"__init__()"),vyt.forEach(t),_jr=r(yDe," (throws an error)."),yDe.forEach(t),bjr=i(li),Kt=n(li,"DIV",{class:!0});var KA=s(Kt);T(l7.$$.fragment,KA),vjr=i(KA),Z4e=n(KA,"P",{});var Fyt=s(Z4e);Fjr=r(Fyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fyt.forEach(t),Tjr=i(KA),cf=n(KA,"P",{});var gee=s(cf);Mjr=r(gee,`Note:
Loading a model from its configuration file does `),eEe=n(gee,"STRONG",{});var Tyt=s(eEe);Ejr=r(Tyt,"not"),Tyt.forEach(t),Cjr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(gee,"A",{href:!0});var Myt=s(vK);wjr=r(Myt,"from_pretrained()"),Myt.forEach(t),Ajr=r(gee," to load the model weights."),gee.forEach(t),yjr=i(KA),T(B3.$$.fragment,KA),KA.forEach(t),Ljr=i(li),Jr=n(li,"DIV",{class:!0});var ii=s(Jr);T(i7.$$.fragment,ii),xjr=i(ii),oEe=n(ii,"P",{});var Eyt=s(oEe);$jr=r(Eyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Eyt.forEach(t),kjr=i(ii),Cn=n(ii,"P",{});var ZA=s(Cn);Sjr=r(ZA,"The model class to instantiate is selected based on the "),rEe=n(ZA,"CODE",{});var Cyt=s(rEe);Rjr=r(Cyt,"model_type"),Cyt.forEach(t),Pjr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),tEe=n(ZA,"CODE",{});var wyt=s(tEe);Bjr=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),Ijr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(ZA,"CODE",{});var Ayt=s(aEe);qjr=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),Njr=r(ZA,":"),ZA.forEach(t),jjr=i(ii),nEe=n(ii,"UL",{});var yyt=s(nEe);I3=n(yyt,"LI",{});var uIe=s(I3);sEe=n(uIe,"STRONG",{});var Lyt=s(sEe);Djr=r(Lyt,"vision-encoder-decoder"),Lyt.forEach(t),Gjr=r(uIe," \u2014 "),FK=n(uIe,"A",{href:!0});var xyt=s(FK);Ojr=r(xyt,"FlaxVisionEncoderDecoderModel"),xyt.forEach(t),Vjr=r(uIe," (Vision Encoder decoder model)"),uIe.forEach(t),yyt.forEach(t),Xjr=i(ii),T(q3.$$.fragment,ii),ii.forEach(t),li.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Rxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoTokenizer"),c(pi,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(_i,"class","relative group"),c(y$,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(L$,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig"),c(x$,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig"),c($$,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig"),c(k$,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig"),c(S$,"href","/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(R$,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig"),c(P$,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(B$,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(I$,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(q$,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig"),c(N$,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig"),c(j$,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPConfig"),c(D$,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig"),c(G$,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig"),c(O$,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig"),c(V$,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(X$,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(z$,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(W$,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig"),c(Q$,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(H$,"href","/docs/transformers/pr_16812/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(U$,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTConfig"),c(J$,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrConfig"),c(Y$,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig"),c(K$,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRConfig"),c(Z$,"href","/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTConfig"),c(ek,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig"),c(ok,"href","/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(rk,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig"),c(tk,"href","/docs/transformers/pr_16812/en/model_doc/flava#transformers.FlavaConfig"),c(ak,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig"),c(nk,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTConfig"),c(sk,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig"),c(lk,"href","/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNConfig"),c(ik,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config"),c(dk,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ck,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig"),c(fk,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig"),c(mk,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig"),c(gk,"href","/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(hk,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(pk,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(uk,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig"),c(_k,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig"),c(bk,"href","/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeConfig"),c(vk,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig"),c(Fk,"href","/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Config"),c(Tk,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig"),c(Mk,"href","/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Ek,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig"),c(Ck,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(wk,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Ak,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig"),c(yk,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config"),c(Lk,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(xk,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c($k,"href","/docs/transformers/pr_16812/en/model_doc/opt#transformers.OPTConfig"),c(kk,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig"),c(Sk,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Rk,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig"),c(Pk,"href","/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Bk,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ik,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(qk,"href","/docs/transformers/pr_16812/en/model_doc/rag#transformers.RagConfig"),c(Nk,"href","/docs/transformers/pr_16812/en/model_doc/realm#transformers.RealmConfig"),c(jk,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig"),c(Dk,"href","/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetConfig"),c(Gk,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig"),c(Ok,"href","/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetConfig"),c(Vk,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertConfig"),c(Xk,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig"),c(zk,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig"),c(Wk,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerConfig"),c(Qk,"href","/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWConfig"),c(Hk,"href","/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDConfig"),c(Uk,"href","/docs/transformers/pr_16812/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Jk,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Yk,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Kk,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterConfig"),c(Zk,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(eS,"href","/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinConfig"),c(oS,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config"),c(rS,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig"),c(tS,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(aS,"href","/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRConfig"),c(nS,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(sS,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(lS,"href","/docs/transformers/pr_16812/en/model_doc/van#transformers.VanConfig"),c(iS,"href","/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltConfig"),c(dS,"href","/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(cS,"href","/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(fS,"href","/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(mS,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig"),c(gS,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(hS,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(pS,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(uS,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig"),c(_S,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig"),c(bS,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig"),c(vS,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(FS,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(TS,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(MS,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig"),c(ES,"href","/docs/transformers/pr_16812/en/model_doc/yolos#transformers.YolosConfig"),c(CS,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"id","transformers.AutoTokenizer"),c(Fg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fg,"href","#transformers.AutoTokenizer"),c(vi,"class","relative group"),c(wS,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(AS,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizer"),c(yS,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(LS,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartTokenizer"),c(xS,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartTokenizerFast"),c($S,"href","/docs/transformers/pr_16812/en/model_doc/barthez#transformers.BarthezTokenizer"),c(kS,"href","/docs/transformers/pr_16812/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(SS,"href","/docs/transformers/pr_16812/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(RS,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizer"),c(PS,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizerFast"),c(BS,"href","/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(IS,"href","/docs/transformers/pr_16812/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(qS,"href","/docs/transformers/pr_16812/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(NS,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(jS,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(DS,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(GS,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(OS,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(VS,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(XS,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(zS,"href","/docs/transformers/pr_16812/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(WS,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertTokenizer"),c(QS,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(HS,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineTokenizer"),c(US,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPTokenizer"),c(JS,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(YS,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(KS,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16812/en/model_doc/cpm#transformers.CpmTokenizer"),c(eR,"href","/docs/transformers/pr_16812/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(oR,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(rR,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tR,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aR,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaTokenizer"),c(nR,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(sR,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(lR,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(iR,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(dR,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(cR,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(fR,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(mR,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraTokenizer"),c(gR,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(hR,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(pR,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetTokenizer"),c(uR,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(_R,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(bR,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelTokenizer"),c(vR,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(FR,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TR,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MR,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ER,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CR,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wR,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AR,"href","/docs/transformers/pr_16812/en/model_doc/herbert#transformers.HerbertTokenizer"),c(yR,"href","/docs/transformers/pr_16812/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(LR,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xR,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizer"),c($R,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kR,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SR,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RR,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PR,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BR,"href","/docs/transformers/pr_16812/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(IR,"href","/docs/transformers/pr_16812/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(qR,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDTokenizer"),c(NR,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDTokenizerFast"),c(jR,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerTokenizer"),c(DR,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(GR,"href","/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeTokenizer"),c(OR,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(VR,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(XR,"href","/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(zR,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianTokenizer"),c(WR,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartTokenizer"),c(QR,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(HR,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(UR,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(JR,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizer"),c(YR,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizerFast"),c(KR,"href","/docs/transformers/pr_16812/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ZR,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(eP,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(oP,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rP,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tP,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.T5Tokenizer"),c(aP,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.T5TokenizerFast"),c(nP,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizer"),c(sP,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lP,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(iP,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(dP,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cP,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fP,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mP,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(gP,"href","/docs/transformers/pr_16812/en/model_doc/phobert#transformers.PhobertTokenizer"),c(hP,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartTokenizer"),c(pP,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(uP,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizer"),c(_P,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizerFast"),c(bP,"href","/docs/transformers/pr_16812/en/model_doc/rag#transformers.RagTokenizer"),c(vP,"href","/docs/transformers/pr_16812/en/model_doc/realm#transformers.RealmTokenizer"),c(FP,"href","/docs/transformers/pr_16812/en/model_doc/realm#transformers.RealmTokenizerFast"),c(TP,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerTokenizer"),c(MP,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(EP,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertTokenizer"),c(CP,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(wP,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(AP,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(yP,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LP,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xP,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerTokenizer"),c($P,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(kP,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(SP,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(RP,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterTokenizer"),c(PP,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(BP,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(IP,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(qP,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.T5Tokenizer"),c(NP,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.T5TokenizerFast"),c(jP,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasTokenizer"),c(DP,"href","/docs/transformers/pr_16812/en/model_doc/tapex#transformers.TapexTokenizer"),c(GP,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(OP,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizer"),c(VP,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizerFast"),c(XP,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zP,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WP,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(QP,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMTokenizer"),c(HP,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(UP,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMTokenizer"),c(JP,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(YP,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(KP,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ZP,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eB,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oB,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(rB,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(tB,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizer"),c(aB,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoFeatureExtractor"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoFeatureExtractor"),c(Fi,"class","relative group"),c(nB,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(sB,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lB,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iB,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cB,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fB,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(gB,"href","/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(hB,"href","/docs/transformers/pr_16812/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(pB,"href","/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_B,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(bB,"href","/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($B,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kB,"href","/docs/transformers/pr_16812/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoProcessor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoProcessor"),c(Ti,"class","relative group"),c(SB,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(RB,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPProcessor"),c(PB,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(BB,"href","/docs/transformers/pr_16812/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(IB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NB,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jB,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(DB,"href","/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRProcessor"),c(GB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VB,"href","/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltProcessor"),c(XB,"href","/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"id","transformers.AutoModel"),c(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jh,"href","#transformers.AutoModel"),c(Ei,"class","relative group"),c(HB,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UB,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JB,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YB,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertModel"),c(KB,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartModel"),c(ZB,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitModel"),c(eI,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertModel"),c(oI,"href","/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(rI,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdModel"),c(tI,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(aI,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nI,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sI,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertModel"),c(lI,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineModel"),c(iI,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPModel"),c(dI,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertModel"),c(cI,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextModel"),c(fI,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLModel"),c(mI,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(gI,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(hI,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(pI,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaModel"),c(uI,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(_I,"href","/docs/transformers/pr_16812/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(bI,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTModel"),c(vI,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrModel"),c(FI,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertModel"),c(TI,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(MI,"href","/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTModel"),c(EI,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraModel"),c(CI,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertModel"),c(wI,"href","/docs/transformers/pr_16812/en/model_doc/flava#transformers.FlavaModel"),c(AI,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetModel"),c(yI,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTModel"),c(LI,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelModel"),c(xI,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelBaseModel"),c($I,"href","/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNModel"),c(kI,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Model"),c(SI,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(RI,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJModel"),c(PI,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertModel"),c(BI,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertModel"),c(II,"href","/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qI,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(NI,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(jI,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDModel"),c(DI,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerModel"),c(GI,"href","/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeModel"),c(OI,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertModel"),c(VI,"href","/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Model"),c(XI,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianModel"),c(zI,"href","/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerModel"),c(WI,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartModel"),c(QI,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(HI,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertModel"),c(UI,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetModel"),c(JI,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Model"),c(YI,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerModel"),c(KI,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ZI,"href","/docs/transformers/pr_16812/en/model_doc/opt#transformers.OPTModel"),c(eq,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusModel"),c(oq,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverModel"),c(rq,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartModel"),c(tq,"href","/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerModel"),c(aq,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(nq,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertModel"),c(sq,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerModel"),c(lq,"href","/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetModel"),c(iq,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertModel"),c(dq,"href","/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetModel"),c(cq,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertModel"),c(fq,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaModel"),c(mq,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerModel"),c(gq,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerModel"),c(hq,"href","/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWModel"),c(pq,"href","/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDModel"),c(uq,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(_q,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterModel"),c(bq,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(vq,"href","/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinModel"),c(Fq,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Model"),c(Tq,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasModel"),c(Mq,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Eq,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Cq,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(wq,"href","/docs/transformers/pr_16812/en/model_doc/van#transformers.VanModel"),c(Aq,"href","/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltModel"),c(yq,"href","/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Lq,"href","/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertModel"),c(xq,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTModel"),c($q,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(kq,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Sq,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Rq,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMModel"),c(Pq,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMModel"),c(Bq,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMModel"),c(Iq,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(qq,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Nq,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(jq,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetModel"),c(Dq,"href","/docs/transformers/pr_16812/en/model_doc/yolos#transformers.YolosModel"),c(Gq,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vu,"id","transformers.AutoModelForPreTraining"),c(Vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vu,"href","#transformers.AutoModelForPreTraining"),c(Ai,"class","relative group"),c(Oq,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vq,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xq,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zq,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Wq,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Qq,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForPreTraining"),c(Hq,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Uq,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Jq,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Yq,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Kq,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Zq,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eN,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oN,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rN,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tN,"href","/docs/transformers/pr_16812/en/model_doc/flava#transformers.FlavaForPreTraining"),c(aN,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nN,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sN,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lN,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iN,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dN,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cN,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fN,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(mN,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gN,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hN,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pN,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uN,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertModel"),c(_N,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bN,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vN,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(FN,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TN,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(MN,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(EN,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(CN,"href","/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(wN,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(AN,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(yN,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(LN,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xN,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($N,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(kN,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P_,"id","transformers.AutoModelForCausalLM"),c(P_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P_,"href","#transformers.AutoModelForCausalLM"),c(xi,"class","relative group"),c(SN,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RN,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PN,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BN,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForCausalLM"),c(IN,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertLMHeadModel"),c(qN,"href","/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(NN,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(jN,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(DN,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(GN,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ON,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(VN,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(XN,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zN,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForCausalLM"),c(WN,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(QN,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(HN,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(UN,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianForCausalLM"),c(JN,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForCausalLM"),c(YN,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(KN,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(ZN,"href","/docs/transformers/pr_16812/en/model_doc/opt#transformers.OPTForCausalLM"),c(ej,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(oj,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(rj,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(tj,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(aj,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(nj,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(sj,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(lj,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ij,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(dj,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cj,"href","/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(fj,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(mj,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gj,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(hj,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(pj,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(uj,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F1,"id","transformers.AutoModelForMaskedLM"),c(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F1,"href","#transformers.AutoModelForMaskedLM"),c(Si,"class","relative group"),c(_j,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bj,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vj,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fj,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(wj,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(yj,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(xj,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c($j,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(kj,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Sj,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Rj,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Pj,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Ij,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qj,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Oj,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Vj,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(zj,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Wj,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Qj,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Hj,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Jj,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Yj,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Kj,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n2,"id","transformers.AutoModelForSeq2SeqLM"),c(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(eD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tD,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(iD,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianMTModel"),c(mD,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForSequenceClassification"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForSequenceClassification"),c(Ni,"class","relative group"),c(vD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MD,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(dG,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForMultipleChoice"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForMultipleChoice"),c(Gi,"class","relative group"),c(hG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_G,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(FG,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(MG,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(CG,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(wG,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(yG,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(xG,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c($G,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(SG,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(BG,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(IG,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(jG,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(DG,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(OG,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(VG,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(XG,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(zG,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForNextSentencePrediction"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForNextSentencePrediction"),c(Xi,"class","relative group"),c(WG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(JG,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(YG,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(KG,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(ZG,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForTokenClassification"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(eO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tO,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(aO,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForTokenClassification"),c(nO,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(sO,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(lO,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForTokenClassification"),c(iO,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(dO,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(cO,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(fO,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(mO,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hO,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(pO,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(uO,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(_O,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(bO,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(vO,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(FO,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(TO,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(MO,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(EO,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(CO,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(wO,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AO,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(yO,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xO,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($O,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kO,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SO,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RO,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(PO,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(BO,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForQuestionAnswering"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ji,"class","relative group"),c(IO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(ZO,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(FV,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(EV,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForTableQuestionAnswering"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Zi,"class","relative group"),c(CV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForImageClassification"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForImageClassification"),c(rd,"class","relative group"),c(LV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($V,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kV,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitForImageClassification"),c(SV,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(RV,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(PV,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForImageClassification"),c(BV,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(IV,"href","/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(qV,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(NV,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jV,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DV,"href","/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GV,"href","/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OV,"href","/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VV,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XV,"href","/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinForImageClassification"),c(zV,"href","/docs/transformers/pr_16812/en/model_doc/van#transformers.VanForImageClassification"),c(WV,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.AutoModelForVision2Seq"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.AutoModelForVision2Seq"),c(nd,"class","relative group"),c(QV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.AutoModelForAudioClassification"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.AutoModelForAudioClassification"),c(id,"class","relative group"),c(YV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oX,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tX,"href","/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(aX,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nX,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sX,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lX,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(iX,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForAudioFrameClassification"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForAudioFrameClassification"),c(fd,"class","relative group"),c(dX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(gX,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(hX,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pX,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(uX,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.AutoModelForCTC"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.AutoModelForCTC"),c(hd,"class","relative group"),c(_X,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(TX,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertForCTC"),c(MX,"href","/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWForCTC"),c(EX,"href","/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDForCTC"),c(CX,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wX,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(AX,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(yX,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(LX,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(_d,"class","relative group"),c(xX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_16812/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(RX,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q6,"id","transformers.AutoModelForAudioXVector"),c(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q6,"href","#transformers.AutoModelForAudioXVector"),c(Fd,"class","relative group"),c(PX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(NX,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(jX,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(DX,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(GX,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.AutoModelForMaskedImageModeling"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ed,"class","relative group"),c(OX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(WX,"href","/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(QX,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForObjectDetection"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForObjectDetection"),c(yd,"class","relative group"),c(HX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KX,"href","/docs/transformers/pr_16812/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForImageSegmentation"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForImageSegmentation"),c($d,"class","relative group"),c(ZX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForSemanticSegmentation"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Rd,"class","relative group"),c(tz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lz,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iz,"href","/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dz,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForInstanceSegmentation"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Id,"class","relative group"),c(cz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.TFAutoModel"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.TFAutoModel"),c(jd,"class","relative group"),c(hz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertModel"),c(bz,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartModel"),c(vz,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertModel"),c(Fz,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Tz,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Mz,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertModel"),c(Ez,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.TFCLIPModel"),c(Cz,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertModel"),c(wz,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.TFConvNextModel"),c(Az,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLModel"),c(yz,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Lz,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaModel"),c(xz,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c($z,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(kz,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Sz,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraModel"),c(Rz,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Pz,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelModel"),c(Bz,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Iz,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2Model"),c(qz,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJModel"),c(Nz,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.TFHubertModel"),c(jz,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Dz,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.TFLEDModel"),c(Gz,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerModel"),c(Oz,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Vz,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.TFMarianModel"),c(Xz,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.TFMBartModel"),c(zz,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Wz,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Qz,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.TFMT5Model"),c(Hz,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Uz,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Jz,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertModel"),c(Yz,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaModel"),c(Kz,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Zz,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(eW,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5Model"),c(oW,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasModel"),c(rW,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(tW,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.TFViTModel"),c(aW,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(nW,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(sW,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMModel"),c(lW,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(iW,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A8,"id","transformers.TFAutoModelForPreTraining"),c(A8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A8,"href","#transformers.TFAutoModelForPreTraining"),c(Od,"class","relative group"),c(dW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(gW,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForPreTraining"),c(pW,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uW,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_W,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bW,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(vW,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FW,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(TW,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(MW,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EW,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(CW,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(wW,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AW,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yW,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LW,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($W,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kW,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(SW,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RW,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(PW,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K8,"id","transformers.TFAutoModelForCausalLM"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.TFAutoModelForCausalLM"),c(zd,"class","relative group"),c(BW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(jW,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(DW,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GW,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OW,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(VW,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(XW,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(zW,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(WW,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(QW,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(HW,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UW,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForImageClassification"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForImageClassification"),c(Hd,"class","relative group"),c(JW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(eQ,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(oQ,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForMaskedLM"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(lQ,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(dQ,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(fQ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hQ,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uQ,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(_Q,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vQ,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CQ,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(wQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xQ,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c($Q,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(kQ,"href","/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(SQ,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(RQ,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.TFMarianMTModel"),c(PQ,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(BQ,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.TFAutoModelForSequenceClassification"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(NQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(eH,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(oH,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(rH,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(tH,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(aH,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(nH,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(sH,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(lH,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(iH,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(dH,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(cH,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(fH,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(mH,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.TFAutoModelForMultipleChoice"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(gH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(_H,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(bH,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(vH,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(FH,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(TH,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(MH,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(EH,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(CH,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(wH,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(yH,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(LH,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(xH,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c($H,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(kH,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(SH,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(RH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(qH,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(NH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.TFAutoModelForTokenClassification"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(OH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(WH,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(QH,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(HH,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(UH,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(JH,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(YH,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(KH,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(ZH,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(eU,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(oU,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(rU,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(tU,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(nU,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(lU,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(iU,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(dU,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(cU,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForQuestionAnswering"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(fU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(EU,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c($U,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(SU,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForVision2Seq"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(PU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(NU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GU,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.FlaxAutoModel"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(OU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertModel"),c(WU,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartModel"),c(QU,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.FlaxBeitModel"),c(HU,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertModel"),c(UU,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(JU,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(YU,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(KU,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.FlaxCLIPModel"),c(ZU,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(eJ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraModel"),c(oJ,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(rJ,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(tJ,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(aJ,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.FlaxMarianModel"),c(nJ,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartModel"),c(sJ,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5Model"),c(lJ,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(iJ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(dJ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(cJ,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5Model"),c(fJ,"href","/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(mJ,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.FlaxViTModel"),c(gJ,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(hJ,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(pJ,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModelForCausalLM"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(FJ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(TJ,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(MJ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(EJ,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(CJ,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(wJ,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(AJ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(yJ,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForPreTraining"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(SJ,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(PJ,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(BJ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(IJ,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(DJ,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(OJ,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForMaskedLM"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(QJ,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(UJ,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(JJ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(YJ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(KJ,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(eY,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(oY,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(rY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(lY,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(dY,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(cY,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fY,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(hY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(bY,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(vY,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(FY,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(TY,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(MY,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(EY,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(CY,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(wY,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(AY,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(yY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(kY,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(SY,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(RY,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(PY,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(BY,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(IY,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(qY,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.FlaxAutoModelForTokenClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(DY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(XY,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(zY,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(WY,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(QY,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(HY,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(UY,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(JY,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(YY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(oK,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(rK,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(tK,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(aK,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(nK,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(sK,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(lK,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(iK,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForImageClassification"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(mK,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(uK,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.FlaxAutoModelForVision2Seq"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(_K,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,di),b(f,hf,_),b(f,rt,_),e(rt,ci),e(rt,fi),e(fi,e0),e(rt,pf),b(f,je,_),b(f,We,_),e(We,mi),e(We,An),e(An,o0),e(We,yn),e(We,Ln),e(Ln,r0),e(We,gi),e(We,xn),e(xn,t0),e(We,hi),b(f,uf,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,T$),e(Ae,pi),e(pi,M$),e(Ae,E$),b(f,Eo,_),b(f,wa,_),e(wa,C$),e(wa,_f),e(_f,w$),e(wa,LDe),b(f,_Ie,_),b(f,ui,_),e(ui,bf),e(bf,hee),M(a0,hee,null),e(ui,xDe),e(ui,pee),e(pee,$De),b(f,bIe,_),b(f,$n,_),e($n,kDe),e($n,uee),e(uee,SDe),e($n,RDe),e($n,_ee),e(_ee,PDe),e($n,BDe),b(f,vIe,_),M(n0,f,_),b(f,FIe,_),b(f,A$,_),e(A$,IDe),b(f,TIe,_),M(vf,f,_),b(f,MIe,_),b(f,_i,_),e(_i,Ff),e(Ff,bee),M(s0,bee,null),e(_i,qDe),e(_i,vee),e(vee,NDe),b(f,EIe,_),b(f,Co,_),M(l0,Co,null),e(Co,jDe),e(Co,i0),e(i0,DDe),e(i0,y$),e(y$,GDe),e(i0,ODe),e(Co,VDe),e(Co,d0),e(d0,XDe),e(d0,Fee),e(Fee,zDe),e(d0,WDe),e(Co,QDe),e(Co,Er),M(c0,Er,null),e(Er,HDe),e(Er,Tee),e(Tee,UDe),e(Er,JDe),e(Er,bi),e(bi,YDe),e(bi,Mee),e(Mee,KDe),e(bi,ZDe),e(bi,Eee),e(Eee,eGe),e(bi,oGe),e(Er,rGe),e(Er,A),e(A,Tf),e(Tf,Cee),e(Cee,tGe),e(Tf,aGe),e(Tf,L$),e(L$,nGe),e(Tf,sGe),e(A,lGe),e(A,Mf),e(Mf,wee),e(wee,iGe),e(Mf,dGe),e(Mf,x$),e(x$,cGe),e(Mf,fGe),e(A,mGe),e(A,Ef),e(Ef,Aee),e(Aee,gGe),e(Ef,hGe),e(Ef,$$),e($$,pGe),e(Ef,uGe),e(A,_Ge),e(A,Cf),e(Cf,yee),e(yee,bGe),e(Cf,vGe),e(Cf,k$),e(k$,FGe),e(Cf,TGe),e(A,MGe),e(A,wf),e(wf,Lee),e(Lee,EGe),e(wf,CGe),e(wf,S$),e(S$,wGe),e(wf,AGe),e(A,yGe),e(A,Af),e(Af,xee),e(xee,LGe),e(Af,xGe),e(Af,R$),e(R$,$Ge),e(Af,kGe),e(A,SGe),e(A,yf),e(yf,$ee),e($ee,RGe),e(yf,PGe),e(yf,P$),e(P$,BGe),e(yf,IGe),e(A,qGe),e(A,Lf),e(Lf,kee),e(kee,NGe),e(Lf,jGe),e(Lf,B$),e(B$,DGe),e(Lf,GGe),e(A,OGe),e(A,xf),e(xf,See),e(See,VGe),e(xf,XGe),e(xf,I$),e(I$,zGe),e(xf,WGe),e(A,QGe),e(A,$f),e($f,Ree),e(Ree,HGe),e($f,UGe),e($f,q$),e(q$,JGe),e($f,YGe),e(A,KGe),e(A,kf),e(kf,Pee),e(Pee,ZGe),e(kf,eOe),e(kf,N$),e(N$,oOe),e(kf,rOe),e(A,tOe),e(A,Sf),e(Sf,Bee),e(Bee,aOe),e(Sf,nOe),e(Sf,j$),e(j$,sOe),e(Sf,lOe),e(A,iOe),e(A,Rf),e(Rf,Iee),e(Iee,dOe),e(Rf,cOe),e(Rf,D$),e(D$,fOe),e(Rf,mOe),e(A,gOe),e(A,Pf),e(Pf,qee),e(qee,hOe),e(Pf,pOe),e(Pf,G$),e(G$,uOe),e(Pf,_Oe),e(A,bOe),e(A,Bf),e(Bf,Nee),e(Nee,vOe),e(Bf,FOe),e(Bf,O$),e(O$,TOe),e(Bf,MOe),e(A,EOe),e(A,If),e(If,jee),e(jee,COe),e(If,wOe),e(If,V$),e(V$,AOe),e(If,yOe),e(A,LOe),e(A,qf),e(qf,Dee),e(Dee,xOe),e(qf,$Oe),e(qf,X$),e(X$,kOe),e(qf,SOe),e(A,ROe),e(A,Nf),e(Nf,Gee),e(Gee,POe),e(Nf,BOe),e(Nf,z$),e(z$,IOe),e(Nf,qOe),e(A,NOe),e(A,jf),e(jf,Oee),e(Oee,jOe),e(jf,DOe),e(jf,W$),e(W$,GOe),e(jf,OOe),e(A,VOe),e(A,Df),e(Df,Vee),e(Vee,XOe),e(Df,zOe),e(Df,Q$),e(Q$,WOe),e(Df,QOe),e(A,HOe),e(A,Gf),e(Gf,Xee),e(Xee,UOe),e(Gf,JOe),e(Gf,H$),e(H$,YOe),e(Gf,KOe),e(A,ZOe),e(A,Of),e(Of,zee),e(zee,eVe),e(Of,oVe),e(Of,U$),e(U$,rVe),e(Of,tVe),e(A,aVe),e(A,Vf),e(Vf,Wee),e(Wee,nVe),e(Vf,sVe),e(Vf,J$),e(J$,lVe),e(Vf,iVe),e(A,dVe),e(A,Xf),e(Xf,Qee),e(Qee,cVe),e(Xf,fVe),e(Xf,Y$),e(Y$,mVe),e(Xf,gVe),e(A,hVe),e(A,zf),e(zf,Hee),e(Hee,pVe),e(zf,uVe),e(zf,K$),e(K$,_Ve),e(zf,bVe),e(A,vVe),e(A,Wf),e(Wf,Uee),e(Uee,FVe),e(Wf,TVe),e(Wf,Z$),e(Z$,MVe),e(Wf,EVe),e(A,CVe),e(A,Qf),e(Qf,Jee),e(Jee,wVe),e(Qf,AVe),e(Qf,ek),e(ek,yVe),e(Qf,LVe),e(A,xVe),e(A,Hf),e(Hf,Yee),e(Yee,$Ve),e(Hf,kVe),e(Hf,ok),e(ok,SVe),e(Hf,RVe),e(A,PVe),e(A,Uf),e(Uf,Kee),e(Kee,BVe),e(Uf,IVe),e(Uf,rk),e(rk,qVe),e(Uf,NVe),e(A,jVe),e(A,Jf),e(Jf,Zee),e(Zee,DVe),e(Jf,GVe),e(Jf,tk),e(tk,OVe),e(Jf,VVe),e(A,XVe),e(A,Yf),e(Yf,eoe),e(eoe,zVe),e(Yf,WVe),e(Yf,ak),e(ak,QVe),e(Yf,HVe),e(A,UVe),e(A,Kf),e(Kf,ooe),e(ooe,JVe),e(Kf,YVe),e(Kf,nk),e(nk,KVe),e(Kf,ZVe),e(A,eXe),e(A,Zf),e(Zf,roe),e(roe,oXe),e(Zf,rXe),e(Zf,sk),e(sk,tXe),e(Zf,aXe),e(A,nXe),e(A,em),e(em,toe),e(toe,sXe),e(em,lXe),e(em,lk),e(lk,iXe),e(em,dXe),e(A,cXe),e(A,om),e(om,aoe),e(aoe,fXe),e(om,mXe),e(om,ik),e(ik,gXe),e(om,hXe),e(A,pXe),e(A,rm),e(rm,noe),e(noe,uXe),e(rm,_Xe),e(rm,dk),e(dk,bXe),e(rm,vXe),e(A,FXe),e(A,tm),e(tm,soe),e(soe,TXe),e(tm,MXe),e(tm,ck),e(ck,EXe),e(tm,CXe),e(A,wXe),e(A,am),e(am,loe),e(loe,AXe),e(am,yXe),e(am,fk),e(fk,LXe),e(am,xXe),e(A,$Xe),e(A,nm),e(nm,ioe),e(ioe,kXe),e(nm,SXe),e(nm,mk),e(mk,RXe),e(nm,PXe),e(A,BXe),e(A,sm),e(sm,doe),e(doe,IXe),e(sm,qXe),e(sm,gk),e(gk,NXe),e(sm,jXe),e(A,DXe),e(A,lm),e(lm,coe),e(coe,GXe),e(lm,OXe),e(lm,hk),e(hk,VXe),e(lm,XXe),e(A,zXe),e(A,im),e(im,foe),e(foe,WXe),e(im,QXe),e(im,pk),e(pk,HXe),e(im,UXe),e(A,JXe),e(A,dm),e(dm,moe),e(moe,YXe),e(dm,KXe),e(dm,uk),e(uk,ZXe),e(dm,eze),e(A,oze),e(A,cm),e(cm,goe),e(goe,rze),e(cm,tze),e(cm,_k),e(_k,aze),e(cm,nze),e(A,sze),e(A,fm),e(fm,hoe),e(hoe,lze),e(fm,ize),e(fm,bk),e(bk,dze),e(fm,cze),e(A,fze),e(A,mm),e(mm,poe),e(poe,mze),e(mm,gze),e(mm,vk),e(vk,hze),e(mm,pze),e(A,uze),e(A,gm),e(gm,uoe),e(uoe,_ze),e(gm,bze),e(gm,Fk),e(Fk,vze),e(gm,Fze),e(A,Tze),e(A,hm),e(hm,_oe),e(_oe,Mze),e(hm,Eze),e(hm,Tk),e(Tk,Cze),e(hm,wze),e(A,Aze),e(A,pm),e(pm,boe),e(boe,yze),e(pm,Lze),e(pm,Mk),e(Mk,xze),e(pm,$ze),e(A,kze),e(A,um),e(um,voe),e(voe,Sze),e(um,Rze),e(um,Ek),e(Ek,Pze),e(um,Bze),e(A,Ize),e(A,_m),e(_m,Foe),e(Foe,qze),e(_m,Nze),e(_m,Ck),e(Ck,jze),e(_m,Dze),e(A,Gze),e(A,bm),e(bm,Toe),e(Toe,Oze),e(bm,Vze),e(bm,wk),e(wk,Xze),e(bm,zze),e(A,Wze),e(A,vm),e(vm,Moe),e(Moe,Qze),e(vm,Hze),e(vm,Ak),e(Ak,Uze),e(vm,Jze),e(A,Yze),e(A,Fm),e(Fm,Eoe),e(Eoe,Kze),e(Fm,Zze),e(Fm,yk),e(yk,eWe),e(Fm,oWe),e(A,rWe),e(A,Tm),e(Tm,Coe),e(Coe,tWe),e(Tm,aWe),e(Tm,Lk),e(Lk,nWe),e(Tm,sWe),e(A,lWe),e(A,Mm),e(Mm,woe),e(woe,iWe),e(Mm,dWe),e(Mm,xk),e(xk,cWe),e(Mm,fWe),e(A,mWe),e(A,Em),e(Em,Aoe),e(Aoe,gWe),e(Em,hWe),e(Em,$k),e($k,pWe),e(Em,uWe),e(A,_We),e(A,Cm),e(Cm,yoe),e(yoe,bWe),e(Cm,vWe),e(Cm,kk),e(kk,FWe),e(Cm,TWe),e(A,MWe),e(A,wm),e(wm,Loe),e(Loe,EWe),e(wm,CWe),e(wm,Sk),e(Sk,wWe),e(wm,AWe),e(A,yWe),e(A,Am),e(Am,xoe),e(xoe,LWe),e(Am,xWe),e(Am,Rk),e(Rk,$We),e(Am,kWe),e(A,SWe),e(A,ym),e(ym,$oe),e($oe,RWe),e(ym,PWe),e(ym,Pk),e(Pk,BWe),e(ym,IWe),e(A,qWe),e(A,Lm),e(Lm,koe),e(koe,NWe),e(Lm,jWe),e(Lm,Bk),e(Bk,DWe),e(Lm,GWe),e(A,OWe),e(A,xm),e(xm,Soe),e(Soe,VWe),e(xm,XWe),e(xm,Ik),e(Ik,zWe),e(xm,WWe),e(A,QWe),e(A,$m),e($m,Roe),e(Roe,HWe),e($m,UWe),e($m,qk),e(qk,JWe),e($m,YWe),e(A,KWe),e(A,km),e(km,Poe),e(Poe,ZWe),e(km,eQe),e(km,Nk),e(Nk,oQe),e(km,rQe),e(A,tQe),e(A,Sm),e(Sm,Boe),e(Boe,aQe),e(Sm,nQe),e(Sm,jk),e(jk,sQe),e(Sm,lQe),e(A,iQe),e(A,Rm),e(Rm,Ioe),e(Ioe,dQe),e(Rm,cQe),e(Rm,Dk),e(Dk,fQe),e(Rm,mQe),e(A,gQe),e(A,Pm),e(Pm,qoe),e(qoe,hQe),e(Pm,pQe),e(Pm,Gk),e(Gk,uQe),e(Pm,_Qe),e(A,bQe),e(A,Bm),e(Bm,Noe),e(Noe,vQe),e(Bm,FQe),e(Bm,Ok),e(Ok,TQe),e(Bm,MQe),e(A,EQe),e(A,Im),e(Im,joe),e(joe,CQe),e(Im,wQe),e(Im,Vk),e(Vk,AQe),e(Im,yQe),e(A,LQe),e(A,qm),e(qm,Doe),e(Doe,xQe),e(qm,$Qe),e(qm,Xk),e(Xk,kQe),e(qm,SQe),e(A,RQe),e(A,Nm),e(Nm,Goe),e(Goe,PQe),e(Nm,BQe),e(Nm,zk),e(zk,IQe),e(Nm,qQe),e(A,NQe),e(A,jm),e(jm,Ooe),e(Ooe,jQe),e(jm,DQe),e(jm,Wk),e(Wk,GQe),e(jm,OQe),e(A,VQe),e(A,Dm),e(Dm,Voe),e(Voe,XQe),e(Dm,zQe),e(Dm,Qk),e(Qk,WQe),e(Dm,QQe),e(A,HQe),e(A,Gm),e(Gm,Xoe),e(Xoe,UQe),e(Gm,JQe),e(Gm,Hk),e(Hk,YQe),e(Gm,KQe),e(A,ZQe),e(A,Om),e(Om,zoe),e(zoe,eHe),e(Om,oHe),e(Om,Uk),e(Uk,rHe),e(Om,tHe),e(A,aHe),e(A,Vm),e(Vm,Woe),e(Woe,nHe),e(Vm,sHe),e(Vm,Jk),e(Jk,lHe),e(Vm,iHe),e(A,dHe),e(A,Xm),e(Xm,Qoe),e(Qoe,cHe),e(Xm,fHe),e(Xm,Yk),e(Yk,mHe),e(Xm,gHe),e(A,hHe),e(A,zm),e(zm,Hoe),e(Hoe,pHe),e(zm,uHe),e(zm,Kk),e(Kk,_He),e(zm,bHe),e(A,vHe),e(A,Wm),e(Wm,Uoe),e(Uoe,FHe),e(Wm,THe),e(Wm,Zk),e(Zk,MHe),e(Wm,EHe),e(A,CHe),e(A,Qm),e(Qm,Joe),e(Joe,wHe),e(Qm,AHe),e(Qm,eS),e(eS,yHe),e(Qm,LHe),e(A,xHe),e(A,Hm),e(Hm,Yoe),e(Yoe,$He),e(Hm,kHe),e(Hm,oS),e(oS,SHe),e(Hm,RHe),e(A,PHe),e(A,Um),e(Um,Koe),e(Koe,BHe),e(Um,IHe),e(Um,rS),e(rS,qHe),e(Um,NHe),e(A,jHe),e(A,Jm),e(Jm,Zoe),e(Zoe,DHe),e(Jm,GHe),e(Jm,tS),e(tS,OHe),e(Jm,VHe),e(A,XHe),e(A,Ym),e(Ym,ere),e(ere,zHe),e(Ym,WHe),e(Ym,aS),e(aS,QHe),e(Ym,HHe),e(A,UHe),e(A,Km),e(Km,ore),e(ore,JHe),e(Km,YHe),e(Km,nS),e(nS,KHe),e(Km,ZHe),e(A,eUe),e(A,Zm),e(Zm,rre),e(rre,oUe),e(Zm,rUe),e(Zm,sS),e(sS,tUe),e(Zm,aUe),e(A,nUe),e(A,eg),e(eg,tre),e(tre,sUe),e(eg,lUe),e(eg,lS),e(lS,iUe),e(eg,dUe),e(A,cUe),e(A,og),e(og,are),e(are,fUe),e(og,mUe),e(og,iS),e(iS,gUe),e(og,hUe),e(A,pUe),e(A,rg),e(rg,nre),e(nre,uUe),e(rg,_Ue),e(rg,dS),e(dS,bUe),e(rg,vUe),e(A,FUe),e(A,tg),e(tg,sre),e(sre,TUe),e(tg,MUe),e(tg,cS),e(cS,EUe),e(tg,CUe),e(A,wUe),e(A,ag),e(ag,lre),e(lre,AUe),e(ag,yUe),e(ag,fS),e(fS,LUe),e(ag,xUe),e(A,$Ue),e(A,ng),e(ng,ire),e(ire,kUe),e(ng,SUe),e(ng,mS),e(mS,RUe),e(ng,PUe),e(A,BUe),e(A,sg),e(sg,dre),e(dre,IUe),e(sg,qUe),e(sg,gS),e(gS,NUe),e(sg,jUe),e(A,DUe),e(A,lg),e(lg,cre),e(cre,GUe),e(lg,OUe),e(lg,hS),e(hS,VUe),e(lg,XUe),e(A,zUe),e(A,ig),e(ig,fre),e(fre,WUe),e(ig,QUe),e(ig,pS),e(pS,HUe),e(ig,UUe),e(A,JUe),e(A,dg),e(dg,mre),e(mre,YUe),e(dg,KUe),e(dg,uS),e(uS,ZUe),e(dg,eJe),e(A,oJe),e(A,cg),e(cg,gre),e(gre,rJe),e(cg,tJe),e(cg,_S),e(_S,aJe),e(cg,nJe),e(A,sJe),e(A,fg),e(fg,hre),e(hre,lJe),e(fg,iJe),e(fg,bS),e(bS,dJe),e(fg,cJe),e(A,fJe),e(A,mg),e(mg,pre),e(pre,mJe),e(mg,gJe),e(mg,vS),e(vS,hJe),e(mg,pJe),e(A,uJe),e(A,gg),e(gg,ure),e(ure,_Je),e(gg,bJe),e(gg,FS),e(FS,vJe),e(gg,FJe),e(A,TJe),e(A,hg),e(hg,_re),e(_re,MJe),e(hg,EJe),e(hg,TS),e(TS,CJe),e(hg,wJe),e(A,AJe),e(A,pg),e(pg,bre),e(bre,yJe),e(pg,LJe),e(pg,MS),e(MS,xJe),e(pg,$Je),e(A,kJe),e(A,ug),e(ug,vre),e(vre,SJe),e(ug,RJe),e(ug,ES),e(ES,PJe),e(ug,BJe),e(A,IJe),e(A,_g),e(_g,Fre),e(Fre,qJe),e(_g,NJe),e(_g,CS),e(CS,jJe),e(_g,DJe),e(Er,GJe),M(bg,Er,null),e(Co,OJe),e(Co,vg),M(f0,vg,null),e(vg,VJe),e(vg,Tre),e(Tre,XJe),b(f,CIe,_),b(f,vi,_),e(vi,Fg),e(Fg,Mre),M(m0,Mre,null),e(vi,zJe),e(vi,Ere),e(Ere,WJe),b(f,wIe,_),b(f,wo,_),M(g0,wo,null),e(wo,QJe),e(wo,h0),e(h0,HJe),e(h0,wS),e(wS,UJe),e(h0,JJe),e(wo,YJe),e(wo,p0),e(p0,KJe),e(p0,Cre),e(Cre,ZJe),e(p0,eYe),e(wo,oYe),e(wo,Cr),M(u0,Cr,null),e(Cr,rYe),e(Cr,wre),e(wre,tYe),e(Cr,aYe),e(Cr,Aa),e(Aa,nYe),e(Aa,Are),e(Are,sYe),e(Aa,lYe),e(Aa,yre),e(yre,iYe),e(Aa,dYe),e(Aa,Lre),e(Lre,cYe),e(Aa,fYe),e(Cr,mYe),e(Cr,k),e(k,kn),e(kn,xre),e(xre,gYe),e(kn,hYe),e(kn,AS),e(AS,pYe),e(kn,uYe),e(kn,yS),e(yS,_Ye),e(kn,bYe),e(k,vYe),e(k,Sn),e(Sn,$re),e($re,FYe),e(Sn,TYe),e(Sn,LS),e(LS,MYe),e(Sn,EYe),e(Sn,xS),e(xS,CYe),e(Sn,wYe),e(k,AYe),e(k,Rn),e(Rn,kre),e(kre,yYe),e(Rn,LYe),e(Rn,$S),e($S,xYe),e(Rn,$Ye),e(Rn,kS),e(kS,kYe),e(Rn,SYe),e(k,RYe),e(k,Tg),e(Tg,Sre),e(Sre,PYe),e(Tg,BYe),e(Tg,SS),e(SS,IYe),e(Tg,qYe),e(k,NYe),e(k,Pn),e(Pn,Rre),e(Rre,jYe),e(Pn,DYe),e(Pn,RS),e(RS,GYe),e(Pn,OYe),e(Pn,PS),e(PS,VYe),e(Pn,XYe),e(k,zYe),e(k,Mg),e(Mg,Pre),e(Pre,WYe),e(Mg,QYe),e(Mg,BS),e(BS,HYe),e(Mg,UYe),e(k,JYe),e(k,Eg),e(Eg,Bre),e(Bre,YYe),e(Eg,KYe),e(Eg,IS),e(IS,ZYe),e(Eg,eKe),e(k,oKe),e(k,Cg),e(Cg,Ire),e(Ire,rKe),e(Cg,tKe),e(Cg,qS),e(qS,aKe),e(Cg,nKe),e(k,sKe),e(k,Bn),e(Bn,qre),e(qre,lKe),e(Bn,iKe),e(Bn,NS),e(NS,dKe),e(Bn,cKe),e(Bn,jS),e(jS,fKe),e(Bn,mKe),e(k,gKe),e(k,In),e(In,Nre),e(Nre,hKe),e(In,pKe),e(In,DS),e(DS,uKe),e(In,_Ke),e(In,GS),e(GS,bKe),e(In,vKe),e(k,FKe),e(k,qn),e(qn,jre),e(jre,TKe),e(qn,MKe),e(qn,OS),e(OS,EKe),e(qn,CKe),e(qn,VS),e(VS,wKe),e(qn,AKe),e(k,yKe),e(k,wg),e(wg,Dre),e(Dre,LKe),e(wg,xKe),e(wg,XS),e(XS,$Ke),e(wg,kKe),e(k,SKe),e(k,Ag),e(Ag,Gre),e(Gre,RKe),e(Ag,PKe),e(Ag,zS),e(zS,BKe),e(Ag,IKe),e(k,qKe),e(k,Nn),e(Nn,Ore),e(Ore,NKe),e(Nn,jKe),e(Nn,WS),e(WS,DKe),e(Nn,GKe),e(Nn,QS),e(QS,OKe),e(Nn,VKe),e(k,XKe),e(k,yg),e(yg,Vre),e(Vre,zKe),e(yg,WKe),e(yg,HS),e(HS,QKe),e(yg,HKe),e(k,UKe),e(k,jn),e(jn,Xre),e(Xre,JKe),e(jn,YKe),e(jn,US),e(US,KKe),e(jn,ZKe),e(jn,JS),e(JS,eZe),e(jn,oZe),e(k,rZe),e(k,Dn),e(Dn,zre),e(zre,tZe),e(Dn,aZe),e(Dn,YS),e(YS,nZe),e(Dn,sZe),e(Dn,KS),e(KS,lZe),e(Dn,iZe),e(k,dZe),e(k,Gn),e(Gn,Wre),e(Wre,cZe),e(Gn,fZe),e(Gn,ZS),e(ZS,mZe),e(Gn,gZe),e(Gn,eR),e(eR,hZe),e(Gn,pZe),e(k,uZe),e(k,Lg),e(Lg,Qre),e(Qre,_Ze),e(Lg,bZe),e(Lg,oR),e(oR,vZe),e(Lg,FZe),e(k,TZe),e(k,On),e(On,Hre),e(Hre,MZe),e(On,EZe),e(On,rR),e(rR,CZe),e(On,wZe),e(On,tR),e(tR,AZe),e(On,yZe),e(k,LZe),e(k,Vn),e(Vn,Ure),e(Ure,xZe),e(Vn,$Ze),e(Vn,aR),e(aR,kZe),e(Vn,SZe),e(Vn,nR),e(nR,RZe),e(Vn,PZe),e(k,BZe),e(k,Xn),e(Xn,Jre),e(Jre,IZe),e(Xn,qZe),e(Xn,sR),e(sR,NZe),e(Xn,jZe),e(Xn,lR),e(lR,DZe),e(Xn,GZe),e(k,OZe),e(k,zn),e(zn,Yre),e(Yre,VZe),e(zn,XZe),e(zn,iR),e(iR,zZe),e(zn,WZe),e(zn,dR),e(dR,QZe),e(zn,HZe),e(k,UZe),e(k,Wn),e(Wn,Kre),e(Kre,JZe),e(Wn,YZe),e(Wn,cR),e(cR,KZe),e(Wn,ZZe),e(Wn,fR),e(fR,eeo),e(Wn,oeo),e(k,reo),e(k,Qn),e(Qn,Zre),e(Zre,teo),e(Qn,aeo),e(Qn,mR),e(mR,neo),e(Qn,seo),e(Qn,gR),e(gR,leo),e(Qn,ieo),e(k,deo),e(k,xg),e(xg,ete),e(ete,ceo),e(xg,feo),e(xg,hR),e(hR,meo),e(xg,geo),e(k,heo),e(k,Hn),e(Hn,ote),e(ote,peo),e(Hn,ueo),e(Hn,pR),e(pR,_eo),e(Hn,beo),e(Hn,uR),e(uR,veo),e(Hn,Feo),e(k,Teo),e(k,$g),e($g,rte),e(rte,Meo),e($g,Eeo),e($g,_R),e(_R,Ceo),e($g,weo),e(k,Aeo),e(k,Un),e(Un,tte),e(tte,yeo),e(Un,Leo),e(Un,bR),e(bR,xeo),e(Un,$eo),e(Un,vR),e(vR,keo),e(Un,Seo),e(k,Reo),e(k,Jn),e(Jn,ate),e(ate,Peo),e(Jn,Beo),e(Jn,FR),e(FR,Ieo),e(Jn,qeo),e(Jn,TR),e(TR,Neo),e(Jn,jeo),e(k,Deo),e(k,Yn),e(Yn,nte),e(nte,Geo),e(Yn,Oeo),e(Yn,MR),e(MR,Veo),e(Yn,Xeo),e(Yn,ER),e(ER,zeo),e(Yn,Weo),e(k,Qeo),e(k,Kn),e(Kn,ste),e(ste,Heo),e(Kn,Ueo),e(Kn,CR),e(CR,Jeo),e(Kn,Yeo),e(Kn,wR),e(wR,Keo),e(Kn,Zeo),e(k,eoo),e(k,Zn),e(Zn,lte),e(lte,ooo),e(Zn,roo),e(Zn,AR),e(AR,too),e(Zn,aoo),e(Zn,yR),e(yR,noo),e(Zn,soo),e(k,loo),e(k,kg),e(kg,ite),e(ite,ioo),e(kg,doo),e(kg,LR),e(LR,coo),e(kg,foo),e(k,moo),e(k,es),e(es,dte),e(dte,goo),e(es,hoo),e(es,xR),e(xR,poo),e(es,uoo),e(es,$R),e($R,_oo),e(es,boo),e(k,voo),e(k,os),e(os,cte),e(cte,Foo),e(os,Too),e(os,kR),e(kR,Moo),e(os,Eoo),e(os,SR),e(SR,Coo),e(os,woo),e(k,Aoo),e(k,rs),e(rs,fte),e(fte,yoo),e(rs,Loo),e(rs,RR),e(RR,xoo),e(rs,$oo),e(rs,PR),e(PR,koo),e(rs,Soo),e(k,Roo),e(k,ts),e(ts,mte),e(mte,Poo),e(ts,Boo),e(ts,BR),e(BR,Ioo),e(ts,qoo),e(ts,IR),e(IR,Noo),e(ts,joo),e(k,Doo),e(k,as),e(as,gte),e(gte,Goo),e(as,Ooo),e(as,qR),e(qR,Voo),e(as,Xoo),e(as,NR),e(NR,zoo),e(as,Woo),e(k,Qoo),e(k,ns),e(ns,hte),e(hte,Hoo),e(ns,Uoo),e(ns,jR),e(jR,Joo),e(ns,Yoo),e(ns,DR),e(DR,Koo),e(ns,Zoo),e(k,ero),e(k,Sg),e(Sg,pte),e(pte,oro),e(Sg,rro),e(Sg,GR),e(GR,tro),e(Sg,aro),e(k,nro),e(k,ss),e(ss,ute),e(ute,sro),e(ss,lro),e(ss,OR),e(OR,iro),e(ss,dro),e(ss,VR),e(VR,cro),e(ss,fro),e(k,mro),e(k,Rg),e(Rg,_te),e(_te,gro),e(Rg,hro),e(Rg,XR),e(XR,pro),e(Rg,uro),e(k,_ro),e(k,Pg),e(Pg,bte),e(bte,bro),e(Pg,vro),e(Pg,zR),e(zR,Fro),e(Pg,Tro),e(k,Mro),e(k,ls),e(ls,vte),e(vte,Ero),e(ls,Cro),e(ls,WR),e(WR,wro),e(ls,Aro),e(ls,QR),e(QR,yro),e(ls,Lro),e(k,xro),e(k,is),e(is,Fte),e(Fte,$ro),e(is,kro),e(is,HR),e(HR,Sro),e(is,Rro),e(is,UR),e(UR,Pro),e(is,Bro),e(k,Iro),e(k,ds),e(ds,Tte),e(Tte,qro),e(ds,Nro),e(ds,JR),e(JR,jro),e(ds,Dro),e(ds,YR),e(YR,Gro),e(ds,Oro),e(k,Vro),e(k,Bg),e(Bg,Mte),e(Mte,Xro),e(Bg,zro),e(Bg,KR),e(KR,Wro),e(Bg,Qro),e(k,Hro),e(k,cs),e(cs,Ete),e(Ete,Uro),e(cs,Jro),e(cs,ZR),e(ZR,Yro),e(cs,Kro),e(cs,eP),e(eP,Zro),e(cs,eto),e(k,oto),e(k,fs),e(fs,Cte),e(Cte,rto),e(fs,tto),e(fs,oP),e(oP,ato),e(fs,nto),e(fs,rP),e(rP,sto),e(fs,lto),e(k,ito),e(k,ms),e(ms,wte),e(wte,dto),e(ms,cto),e(ms,tP),e(tP,fto),e(ms,mto),e(ms,aP),e(aP,gto),e(ms,hto),e(k,pto),e(k,gs),e(gs,Ate),e(Ate,uto),e(gs,_to),e(gs,nP),e(nP,bto),e(gs,vto),e(gs,sP),e(sP,Fto),e(gs,Tto),e(k,Mto),e(k,hs),e(hs,yte),e(yte,Eto),e(hs,Cto),e(hs,lP),e(lP,wto),e(hs,Ato),e(hs,iP),e(iP,yto),e(hs,Lto),e(k,xto),e(k,Ig),e(Ig,Lte),e(Lte,$to),e(Ig,kto),e(Ig,dP),e(dP,Sto),e(Ig,Rto),e(k,Pto),e(k,ps),e(ps,xte),e(xte,Bto),e(ps,Ito),e(ps,cP),e(cP,qto),e(ps,Nto),e(ps,fP),e(fP,jto),e(ps,Dto),e(k,Gto),e(k,qg),e(qg,$te),e($te,Oto),e(qg,Vto),e(qg,mP),e(mP,Xto),e(qg,zto),e(k,Wto),e(k,Ng),e(Ng,kte),e(kte,Qto),e(Ng,Hto),e(Ng,gP),e(gP,Uto),e(Ng,Jto),e(k,Yto),e(k,jg),e(jg,Ste),e(Ste,Kto),e(jg,Zto),e(jg,hP),e(hP,eao),e(jg,oao),e(k,rao),e(k,Dg),e(Dg,Rte),e(Rte,tao),e(Dg,aao),e(Dg,pP),e(pP,nao),e(Dg,sao),e(k,lao),e(k,us),e(us,Pte),e(Pte,iao),e(us,dao),e(us,uP),e(uP,cao),e(us,fao),e(us,_P),e(_P,mao),e(us,gao),e(k,hao),e(k,Gg),e(Gg,Bte),e(Bte,pao),e(Gg,uao),e(Gg,bP),e(bP,_ao),e(Gg,bao),e(k,vao),e(k,_s),e(_s,Ite),e(Ite,Fao),e(_s,Tao),e(_s,vP),e(vP,Mao),e(_s,Eao),e(_s,FP),e(FP,Cao),e(_s,wao),e(k,Aao),e(k,bs),e(bs,qte),e(qte,yao),e(bs,Lao),e(bs,TP),e(TP,xao),e(bs,$ao),e(bs,MP),e(MP,kao),e(bs,Sao),e(k,Rao),e(k,vs),e(vs,Nte),e(Nte,Pao),e(vs,Bao),e(vs,EP),e(EP,Iao),e(vs,qao),e(vs,CP),e(CP,Nao),e(vs,jao),e(k,Dao),e(k,Fs),e(Fs,jte),e(jte,Gao),e(Fs,Oao),e(Fs,wP),e(wP,Vao),e(Fs,Xao),e(Fs,AP),e(AP,zao),e(Fs,Wao),e(k,Qao),e(k,Ts),e(Ts,Dte),e(Dte,Hao),e(Ts,Uao),e(Ts,yP),e(yP,Jao),e(Ts,Yao),e(Ts,LP),e(LP,Kao),e(Ts,Zao),e(k,eno),e(k,Ms),e(Ms,Gte),e(Gte,ono),e(Ms,rno),e(Ms,xP),e(xP,tno),e(Ms,ano),e(Ms,$P),e($P,nno),e(Ms,sno),e(k,lno),e(k,Og),e(Og,Ote),e(Ote,ino),e(Og,dno),e(Og,kP),e(kP,cno),e(Og,fno),e(k,mno),e(k,Vg),e(Vg,Vte),e(Vte,gno),e(Vg,hno),e(Vg,SP),e(SP,pno),e(Vg,uno),e(k,_no),e(k,Es),e(Es,Xte),e(Xte,bno),e(Es,vno),e(Es,RP),e(RP,Fno),e(Es,Tno),e(Es,PP),e(PP,Mno),e(Es,Eno),e(k,Cno),e(k,Cs),e(Cs,zte),e(zte,wno),e(Cs,Ano),e(Cs,BP),e(BP,yno),e(Cs,Lno),e(Cs,IP),e(IP,xno),e(Cs,$no),e(k,kno),e(k,ws),e(ws,Wte),e(Wte,Sno),e(ws,Rno),e(ws,qP),e(qP,Pno),e(ws,Bno),e(ws,NP),e(NP,Ino),e(ws,qno),e(k,Nno),e(k,Xg),e(Xg,Qte),e(Qte,jno),e(Xg,Dno),e(Xg,jP),e(jP,Gno),e(Xg,Ono),e(k,Vno),e(k,zg),e(zg,Hte),e(Hte,Xno),e(zg,zno),e(zg,DP),e(DP,Wno),e(zg,Qno),e(k,Hno),e(k,Wg),e(Wg,Ute),e(Ute,Uno),e(Wg,Jno),e(Wg,GP),e(GP,Yno),e(Wg,Kno),e(k,Zno),e(k,As),e(As,Jte),e(Jte,eso),e(As,oso),e(As,OP),e(OP,rso),e(As,tso),e(As,VP),e(VP,aso),e(As,nso),e(k,sso),e(k,Qg),e(Qg,Yte),e(Yte,lso),e(Qg,iso),e(Qg,XP),e(XP,dso),e(Qg,cso),e(k,fso),e(k,Hg),e(Hg,Kte),e(Kte,mso),e(Hg,gso),e(Hg,zP),e(zP,hso),e(Hg,pso),e(k,uso),e(k,Ug),e(Ug,Zte),e(Zte,_so),e(Ug,bso),e(Ug,WP),e(WP,vso),e(Ug,Fso),e(k,Tso),e(k,ys),e(ys,eae),e(eae,Mso),e(ys,Eso),e(ys,QP),e(QP,Cso),e(ys,wso),e(ys,HP),e(HP,Aso),e(ys,yso),e(k,Lso),e(k,Jg),e(Jg,oae),e(oae,xso),e(Jg,$so),e(Jg,UP),e(UP,kso),e(Jg,Sso),e(k,Rso),e(k,Yg),e(Yg,rae),e(rae,Pso),e(Yg,Bso),e(Yg,JP),e(JP,Iso),e(Yg,qso),e(k,Nso),e(k,Ls),e(Ls,tae),e(tae,jso),e(Ls,Dso),e(Ls,YP),e(YP,Gso),e(Ls,Oso),e(Ls,KP),e(KP,Vso),e(Ls,Xso),e(k,zso),e(k,xs),e(xs,aae),e(aae,Wso),e(xs,Qso),e(xs,ZP),e(ZP,Hso),e(xs,Uso),e(xs,eB),e(eB,Jso),e(xs,Yso),e(k,Kso),e(k,$s),e($s,nae),e(nae,Zso),e($s,elo),e($s,oB),e(oB,olo),e($s,rlo),e($s,rB),e(rB,tlo),e($s,alo),e(k,nlo),e(k,ks),e(ks,sae),e(sae,slo),e(ks,llo),e(ks,tB),e(tB,ilo),e(ks,dlo),e(ks,aB),e(aB,clo),e(ks,flo),e(Cr,mlo),M(Kg,Cr,null),e(wo,glo),e(wo,Zg),M(_0,Zg,null),e(Zg,hlo),e(Zg,lae),e(lae,plo),b(f,AIe,_),b(f,Fi,_),e(Fi,eh),e(eh,iae),M(b0,iae,null),e(Fi,ulo),e(Fi,dae),e(dae,_lo),b(f,yIe,_),b(f,Ao,_),M(v0,Ao,null),e(Ao,blo),e(Ao,F0),e(F0,vlo),e(F0,nB),e(nB,Flo),e(F0,Tlo),e(Ao,Mlo),e(Ao,T0),e(T0,Elo),e(T0,cae),e(cae,Clo),e(T0,wlo),e(Ao,Alo),e(Ao,He),M(M0,He,null),e(He,ylo),e(He,fae),e(fae,Llo),e(He,xlo),e(He,ya),e(ya,$lo),e(ya,mae),e(mae,klo),e(ya,Slo),e(ya,gae),e(gae,Rlo),e(ya,Plo),e(ya,hae),e(hae,Blo),e(ya,Ilo),e(He,qlo),e(He,Z),e(Z,oh),e(oh,pae),e(pae,Nlo),e(oh,jlo),e(oh,sB),e(sB,Dlo),e(oh,Glo),e(Z,Olo),e(Z,rh),e(rh,uae),e(uae,Vlo),e(rh,Xlo),e(rh,lB),e(lB,zlo),e(rh,Wlo),e(Z,Qlo),e(Z,th),e(th,_ae),e(_ae,Hlo),e(th,Ulo),e(th,iB),e(iB,Jlo),e(th,Ylo),e(Z,Klo),e(Z,ah),e(ah,bae),e(bae,Zlo),e(ah,eio),e(ah,dB),e(dB,oio),e(ah,rio),e(Z,tio),e(Z,nh),e(nh,vae),e(vae,aio),e(nh,nio),e(nh,cB),e(cB,sio),e(nh,lio),e(Z,iio),e(Z,sh),e(sh,Fae),e(Fae,dio),e(sh,cio),e(sh,fB),e(fB,fio),e(sh,mio),e(Z,gio),e(Z,lh),e(lh,Tae),e(Tae,hio),e(lh,pio),e(lh,mB),e(mB,uio),e(lh,_io),e(Z,bio),e(Z,ih),e(ih,Mae),e(Mae,vio),e(ih,Fio),e(ih,gB),e(gB,Tio),e(ih,Mio),e(Z,Eio),e(Z,dh),e(dh,Eae),e(Eae,Cio),e(dh,wio),e(dh,hB),e(hB,Aio),e(dh,yio),e(Z,Lio),e(Z,ch),e(ch,Cae),e(Cae,xio),e(ch,$io),e(ch,pB),e(pB,kio),e(ch,Sio),e(Z,Rio),e(Z,fh),e(fh,wae),e(wae,Pio),e(fh,Bio),e(fh,uB),e(uB,Iio),e(fh,qio),e(Z,Nio),e(Z,mh),e(mh,Aae),e(Aae,jio),e(mh,Dio),e(mh,_B),e(_B,Gio),e(mh,Oio),e(Z,Vio),e(Z,gh),e(gh,yae),e(yae,Xio),e(gh,zio),e(gh,bB),e(bB,Wio),e(gh,Qio),e(Z,Hio),e(Z,hh),e(hh,Lae),e(Lae,Uio),e(hh,Jio),e(hh,vB),e(vB,Yio),e(hh,Kio),e(Z,Zio),e(Z,ph),e(ph,xae),e(xae,edo),e(ph,odo),e(ph,FB),e(FB,rdo),e(ph,tdo),e(Z,ado),e(Z,uh),e(uh,$ae),e($ae,ndo),e(uh,sdo),e(uh,TB),e(TB,ldo),e(uh,ido),e(Z,ddo),e(Z,_h),e(_h,kae),e(kae,cdo),e(_h,fdo),e(_h,MB),e(MB,mdo),e(_h,gdo),e(Z,hdo),e(Z,bh),e(bh,Sae),e(Sae,pdo),e(bh,udo),e(bh,EB),e(EB,_do),e(bh,bdo),e(Z,vdo),e(Z,vh),e(vh,Rae),e(Rae,Fdo),e(vh,Tdo),e(vh,CB),e(CB,Mdo),e(vh,Edo),e(Z,Cdo),e(Z,Fh),e(Fh,Pae),e(Pae,wdo),e(Fh,Ado),e(Fh,wB),e(wB,ydo),e(Fh,Ldo),e(Z,xdo),e(Z,Th),e(Th,Bae),e(Bae,$do),e(Th,kdo),e(Th,AB),e(AB,Sdo),e(Th,Rdo),e(Z,Pdo),e(Z,Mh),e(Mh,Iae),e(Iae,Bdo),e(Mh,Ido),e(Mh,yB),e(yB,qdo),e(Mh,Ndo),e(Z,jdo),e(Z,Eh),e(Eh,qae),e(qae,Ddo),e(Eh,Gdo),e(Eh,LB),e(LB,Odo),e(Eh,Vdo),e(Z,Xdo),e(Z,Ch),e(Ch,Nae),e(Nae,zdo),e(Ch,Wdo),e(Ch,xB),e(xB,Qdo),e(Ch,Hdo),e(Z,Udo),e(Z,wh),e(wh,jae),e(jae,Jdo),e(wh,Ydo),e(wh,$B),e($B,Kdo),e(wh,Zdo),e(Z,eco),e(Z,Ah),e(Ah,Dae),e(Dae,oco),e(Ah,rco),e(Ah,kB),e(kB,tco),e(Ah,aco),e(He,nco),M(yh,He,null),e(He,sco),M(Lh,He,null),e(Ao,lco),e(Ao,xh),M(E0,xh,null),e(xh,ico),e(xh,Gae),e(Gae,dco),b(f,LIe,_),b(f,Ti,_),e(Ti,$h),e($h,Oae),M(C0,Oae,null),e(Ti,cco),e(Ti,Vae),e(Vae,fco),b(f,xIe,_),b(f,yo,_),M(w0,yo,null),e(yo,mco),e(yo,A0),e(A0,gco),e(A0,SB),e(SB,hco),e(A0,pco),e(yo,uco),e(yo,y0),e(y0,_co),e(y0,Xae),e(Xae,bco),e(y0,vco),e(yo,Fco),e(yo,Ue),M(L0,Ue,null),e(Ue,Tco),e(Ue,zae),e(zae,Mco),e(Ue,Eco),e(Ue,Mi),e(Mi,Cco),e(Mi,Wae),e(Wae,wco),e(Mi,Aco),e(Mi,Qae),e(Qae,yco),e(Mi,Lco),e(Ue,xco),e(Ue,pe),e(pe,kh),e(kh,Hae),e(Hae,$co),e(kh,kco),e(kh,RB),e(RB,Sco),e(kh,Rco),e(pe,Pco),e(pe,Sh),e(Sh,Uae),e(Uae,Bco),e(Sh,Ico),e(Sh,Jae),e(Jae,qco),e(Sh,Nco),e(pe,jco),e(pe,Rh),e(Rh,Yae),e(Yae,Dco),e(Rh,Gco),e(Rh,PB),e(PB,Oco),e(Rh,Vco),e(pe,Xco),e(pe,Ph),e(Ph,Kae),e(Kae,zco),e(Ph,Wco),e(Ph,BB),e(BB,Qco),e(Ph,Hco),e(pe,Uco),e(pe,Bh),e(Bh,Zae),e(Zae,Jco),e(Bh,Yco),e(Bh,IB),e(IB,Kco),e(Bh,Zco),e(pe,efo),e(pe,Ih),e(Ih,ene),e(ene,ofo),e(Ih,rfo),e(Ih,qB),e(qB,tfo),e(Ih,afo),e(pe,nfo),e(pe,qh),e(qh,one),e(one,sfo),e(qh,lfo),e(qh,NB),e(NB,ifo),e(qh,dfo),e(pe,cfo),e(pe,Nh),e(Nh,rne),e(rne,ffo),e(Nh,mfo),e(Nh,jB),e(jB,gfo),e(Nh,hfo),e(pe,pfo),e(pe,jh),e(jh,tne),e(tne,ufo),e(jh,_fo),e(jh,DB),e(DB,bfo),e(jh,vfo),e(pe,Ffo),e(pe,Dh),e(Dh,ane),e(ane,Tfo),e(Dh,Mfo),e(Dh,GB),e(GB,Efo),e(Dh,Cfo),e(pe,wfo),e(pe,Gh),e(Gh,nne),e(nne,Afo),e(Gh,yfo),e(Gh,OB),e(OB,Lfo),e(Gh,xfo),e(pe,$fo),e(pe,Oh),e(Oh,sne),e(sne,kfo),e(Oh,Sfo),e(Oh,VB),e(VB,Rfo),e(Oh,Pfo),e(pe,Bfo),e(pe,Vh),e(Vh,lne),e(lne,Ifo),e(Vh,qfo),e(Vh,XB),e(XB,Nfo),e(Vh,jfo),e(pe,Dfo),e(pe,Xh),e(Xh,ine),e(ine,Gfo),e(Xh,Ofo),e(Xh,zB),e(zB,Vfo),e(Xh,Xfo),e(pe,zfo),e(pe,zh),e(zh,dne),e(dne,Wfo),e(zh,Qfo),e(zh,WB),e(WB,Hfo),e(zh,Ufo),e(pe,Jfo),e(pe,Wh),e(Wh,cne),e(cne,Yfo),e(Wh,Kfo),e(Wh,QB),e(QB,Zfo),e(Wh,emo),e(Ue,omo),M(Qh,Ue,null),e(Ue,rmo),M(Hh,Ue,null),e(yo,tmo),e(yo,Uh),M(x0,Uh,null),e(Uh,amo),e(Uh,fne),e(fne,nmo),b(f,$Ie,_),b(f,Ei,_),e(Ei,Jh),e(Jh,mne),M($0,mne,null),e(Ei,smo),e(Ei,gne),e(gne,lmo),b(f,kIe,_),b(f,Lo,_),M(k0,Lo,null),e(Lo,imo),e(Lo,Ci),e(Ci,dmo),e(Ci,HB),e(HB,cmo),e(Ci,fmo),e(Ci,UB),e(UB,mmo),e(Ci,gmo),e(Lo,hmo),e(Lo,S0),e(S0,pmo),e(S0,hne),e(hne,umo),e(S0,_mo),e(Lo,bmo),e(Lo,tt),M(R0,tt,null),e(tt,vmo),e(tt,pne),e(pne,Fmo),e(tt,Tmo),e(tt,wi),e(wi,Mmo),e(wi,une),e(une,Emo),e(wi,Cmo),e(wi,JB),e(JB,wmo),e(wi,Amo),e(tt,ymo),M(Yh,tt,null),e(Lo,Lmo),e(Lo,Je),M(P0,Je,null),e(Je,xmo),e(Je,_ne),e(_ne,$mo),e(Je,kmo),e(Je,La),e(La,Smo),e(La,bne),e(bne,Rmo),e(La,Pmo),e(La,vne),e(vne,Bmo),e(La,Imo),e(La,Fne),e(Fne,qmo),e(La,Nmo),e(Je,jmo),e(Je,x),e(x,Kh),e(Kh,Tne),e(Tne,Dmo),e(Kh,Gmo),e(Kh,YB),e(YB,Omo),e(Kh,Vmo),e(x,Xmo),e(x,Zh),e(Zh,Mne),e(Mne,zmo),e(Zh,Wmo),e(Zh,KB),e(KB,Qmo),e(Zh,Hmo),e(x,Umo),e(x,ep),e(ep,Ene),e(Ene,Jmo),e(ep,Ymo),e(ep,ZB),e(ZB,Kmo),e(ep,Zmo),e(x,ego),e(x,op),e(op,Cne),e(Cne,ogo),e(op,rgo),e(op,eI),e(eI,tgo),e(op,ago),e(x,ngo),e(x,rp),e(rp,wne),e(wne,sgo),e(rp,lgo),e(rp,oI),e(oI,igo),e(rp,dgo),e(x,cgo),e(x,tp),e(tp,Ane),e(Ane,fgo),e(tp,mgo),e(tp,rI),e(rI,ggo),e(tp,hgo),e(x,pgo),e(x,ap),e(ap,yne),e(yne,ugo),e(ap,_go),e(ap,tI),e(tI,bgo),e(ap,vgo),e(x,Fgo),e(x,np),e(np,Lne),e(Lne,Tgo),e(np,Mgo),e(np,aI),e(aI,Ego),e(np,Cgo),e(x,wgo),e(x,sp),e(sp,xne),e(xne,Ago),e(sp,ygo),e(sp,nI),e(nI,Lgo),e(sp,xgo),e(x,$go),e(x,lp),e(lp,$ne),e($ne,kgo),e(lp,Sgo),e(lp,sI),e(sI,Rgo),e(lp,Pgo),e(x,Bgo),e(x,ip),e(ip,kne),e(kne,Igo),e(ip,qgo),e(ip,lI),e(lI,Ngo),e(ip,jgo),e(x,Dgo),e(x,dp),e(dp,Sne),e(Sne,Ggo),e(dp,Ogo),e(dp,iI),e(iI,Vgo),e(dp,Xgo),e(x,zgo),e(x,cp),e(cp,Rne),e(Rne,Wgo),e(cp,Qgo),e(cp,dI),e(dI,Hgo),e(cp,Ugo),e(x,Jgo),e(x,fp),e(fp,Pne),e(Pne,Ygo),e(fp,Kgo),e(fp,cI),e(cI,Zgo),e(fp,eho),e(x,oho),e(x,mp),e(mp,Bne),e(Bne,rho),e(mp,tho),e(mp,fI),e(fI,aho),e(mp,nho),e(x,sho),e(x,gp),e(gp,Ine),e(Ine,lho),e(gp,iho),e(gp,mI),e(mI,dho),e(gp,cho),e(x,fho),e(x,hp),e(hp,qne),e(qne,mho),e(hp,gho),e(hp,gI),e(gI,hho),e(hp,pho),e(x,uho),e(x,pp),e(pp,Nne),e(Nne,_ho),e(pp,bho),e(pp,hI),e(hI,vho),e(pp,Fho),e(x,Tho),e(x,up),e(up,jne),e(jne,Mho),e(up,Eho),e(up,pI),e(pI,Cho),e(up,who),e(x,Aho),e(x,_p),e(_p,Dne),e(Dne,yho),e(_p,Lho),e(_p,uI),e(uI,xho),e(_p,$ho),e(x,kho),e(x,bp),e(bp,Gne),e(Gne,Sho),e(bp,Rho),e(bp,_I),e(_I,Pho),e(bp,Bho),e(x,Iho),e(x,vp),e(vp,One),e(One,qho),e(vp,Nho),e(vp,bI),e(bI,jho),e(vp,Dho),e(x,Gho),e(x,Fp),e(Fp,Vne),e(Vne,Oho),e(Fp,Vho),e(Fp,vI),e(vI,Xho),e(Fp,zho),e(x,Who),e(x,Tp),e(Tp,Xne),e(Xne,Qho),e(Tp,Hho),e(Tp,FI),e(FI,Uho),e(Tp,Jho),e(x,Yho),e(x,Mp),e(Mp,zne),e(zne,Kho),e(Mp,Zho),e(Mp,TI),e(TI,epo),e(Mp,opo),e(x,rpo),e(x,Ep),e(Ep,Wne),e(Wne,tpo),e(Ep,apo),e(Ep,MI),e(MI,npo),e(Ep,spo),e(x,lpo),e(x,Cp),e(Cp,Qne),e(Qne,ipo),e(Cp,dpo),e(Cp,EI),e(EI,cpo),e(Cp,fpo),e(x,mpo),e(x,wp),e(wp,Hne),e(Hne,gpo),e(wp,hpo),e(wp,CI),e(CI,ppo),e(wp,upo),e(x,_po),e(x,Ap),e(Ap,Une),e(Une,bpo),e(Ap,vpo),e(Ap,wI),e(wI,Fpo),e(Ap,Tpo),e(x,Mpo),e(x,yp),e(yp,Jne),e(Jne,Epo),e(yp,Cpo),e(yp,AI),e(AI,wpo),e(yp,Apo),e(x,ypo),e(x,Lp),e(Lp,Yne),e(Yne,Lpo),e(Lp,xpo),e(Lp,yI),e(yI,$po),e(Lp,kpo),e(x,Spo),e(x,Ss),e(Ss,Kne),e(Kne,Rpo),e(Ss,Ppo),e(Ss,LI),e(LI,Bpo),e(Ss,Ipo),e(Ss,xI),e(xI,qpo),e(Ss,Npo),e(x,jpo),e(x,xp),e(xp,Zne),e(Zne,Dpo),e(xp,Gpo),e(xp,$I),e($I,Opo),e(xp,Vpo),e(x,Xpo),e(x,$p),e($p,ese),e(ese,zpo),e($p,Wpo),e($p,kI),e(kI,Qpo),e($p,Hpo),e(x,Upo),e(x,kp),e(kp,ose),e(ose,Jpo),e(kp,Ypo),e(kp,SI),e(SI,Kpo),e(kp,Zpo),e(x,euo),e(x,Sp),e(Sp,rse),e(rse,ouo),e(Sp,ruo),e(Sp,RI),e(RI,tuo),e(Sp,auo),e(x,nuo),e(x,Rp),e(Rp,tse),e(tse,suo),e(Rp,luo),e(Rp,PI),e(PI,iuo),e(Rp,duo),e(x,cuo),e(x,Pp),e(Pp,ase),e(ase,fuo),e(Pp,muo),e(Pp,BI),e(BI,guo),e(Pp,huo),e(x,puo),e(x,Bp),e(Bp,nse),e(nse,uuo),e(Bp,_uo),e(Bp,II),e(II,buo),e(Bp,vuo),e(x,Fuo),e(x,Ip),e(Ip,sse),e(sse,Tuo),e(Ip,Muo),e(Ip,qI),e(qI,Euo),e(Ip,Cuo),e(x,wuo),e(x,qp),e(qp,lse),e(lse,Auo),e(qp,yuo),e(qp,NI),e(NI,Luo),e(qp,xuo),e(x,$uo),e(x,Np),e(Np,ise),e(ise,kuo),e(Np,Suo),e(Np,jI),e(jI,Ruo),e(Np,Puo),e(x,Buo),e(x,jp),e(jp,dse),e(dse,Iuo),e(jp,quo),e(jp,DI),e(DI,Nuo),e(jp,juo),e(x,Duo),e(x,Dp),e(Dp,cse),e(cse,Guo),e(Dp,Ouo),e(Dp,GI),e(GI,Vuo),e(Dp,Xuo),e(x,zuo),e(x,Gp),e(Gp,fse),e(fse,Wuo),e(Gp,Quo),e(Gp,OI),e(OI,Huo),e(Gp,Uuo),e(x,Juo),e(x,Op),e(Op,mse),e(mse,Yuo),e(Op,Kuo),e(Op,VI),e(VI,Zuo),e(Op,e_o),e(x,o_o),e(x,Vp),e(Vp,gse),e(gse,r_o),e(Vp,t_o),e(Vp,XI),e(XI,a_o),e(Vp,n_o),e(x,s_o),e(x,Xp),e(Xp,hse),e(hse,l_o),e(Xp,i_o),e(Xp,zI),e(zI,d_o),e(Xp,c_o),e(x,f_o),e(x,zp),e(zp,pse),e(pse,m_o),e(zp,g_o),e(zp,WI),e(WI,h_o),e(zp,p_o),e(x,u_o),e(x,Wp),e(Wp,use),e(use,__o),e(Wp,b_o),e(Wp,QI),e(QI,v_o),e(Wp,F_o),e(x,T_o),e(x,Qp),e(Qp,_se),e(_se,M_o),e(Qp,E_o),e(Qp,HI),e(HI,C_o),e(Qp,w_o),e(x,A_o),e(x,Hp),e(Hp,bse),e(bse,y_o),e(Hp,L_o),e(Hp,UI),e(UI,x_o),e(Hp,$_o),e(x,k_o),e(x,Up),e(Up,vse),e(vse,S_o),e(Up,R_o),e(Up,JI),e(JI,P_o),e(Up,B_o),e(x,I_o),e(x,Jp),e(Jp,Fse),e(Fse,q_o),e(Jp,N_o),e(Jp,YI),e(YI,j_o),e(Jp,D_o),e(x,G_o),e(x,Yp),e(Yp,Tse),e(Tse,O_o),e(Yp,V_o),e(Yp,KI),e(KI,X_o),e(Yp,z_o),e(x,W_o),e(x,Kp),e(Kp,Mse),e(Mse,Q_o),e(Kp,H_o),e(Kp,ZI),e(ZI,U_o),e(Kp,J_o),e(x,Y_o),e(x,Zp),e(Zp,Ese),e(Ese,K_o),e(Zp,Z_o),e(Zp,eq),e(eq,e1o),e(Zp,o1o),e(x,r1o),e(x,eu),e(eu,Cse),e(Cse,t1o),e(eu,a1o),e(eu,oq),e(oq,n1o),e(eu,s1o),e(x,l1o),e(x,ou),e(ou,wse),e(wse,i1o),e(ou,d1o),e(ou,rq),e(rq,c1o),e(ou,f1o),e(x,m1o),e(x,ru),e(ru,Ase),e(Ase,g1o),e(ru,h1o),e(ru,tq),e(tq,p1o),e(ru,u1o),e(x,_1o),e(x,tu),e(tu,yse),e(yse,b1o),e(tu,v1o),e(tu,aq),e(aq,F1o),e(tu,T1o),e(x,M1o),e(x,au),e(au,Lse),e(Lse,E1o),e(au,C1o),e(au,nq),e(nq,w1o),e(au,A1o),e(x,y1o),e(x,nu),e(nu,xse),e(xse,L1o),e(nu,x1o),e(nu,sq),e(sq,$1o),e(nu,k1o),e(x,S1o),e(x,su),e(su,$se),e($se,R1o),e(su,P1o),e(su,lq),e(lq,B1o),e(su,I1o),e(x,q1o),e(x,lu),e(lu,kse),e(kse,N1o),e(lu,j1o),e(lu,iq),e(iq,D1o),e(lu,G1o),e(x,O1o),e(x,iu),e(iu,Sse),e(Sse,V1o),e(iu,X1o),e(iu,dq),e(dq,z1o),e(iu,W1o),e(x,Q1o),e(x,du),e(du,Rse),e(Rse,H1o),e(du,U1o),e(du,cq),e(cq,J1o),e(du,Y1o),e(x,K1o),e(x,cu),e(cu,Pse),e(Pse,Z1o),e(cu,e2o),e(cu,fq),e(fq,o2o),e(cu,r2o),e(x,t2o),e(x,fu),e(fu,Bse),e(Bse,a2o),e(fu,n2o),e(fu,mq),e(mq,s2o),e(fu,l2o),e(x,i2o),e(x,mu),e(mu,Ise),e(Ise,d2o),e(mu,c2o),e(mu,gq),e(gq,f2o),e(mu,m2o),e(x,g2o),e(x,gu),e(gu,qse),e(qse,h2o),e(gu,p2o),e(gu,hq),e(hq,u2o),e(gu,_2o),e(x,b2o),e(x,hu),e(hu,Nse),e(Nse,v2o),e(hu,F2o),e(hu,pq),e(pq,T2o),e(hu,M2o),e(x,E2o),e(x,pu),e(pu,jse),e(jse,C2o),e(pu,w2o),e(pu,uq),e(uq,A2o),e(pu,y2o),e(x,L2o),e(x,uu),e(uu,Dse),e(Dse,x2o),e(uu,$2o),e(uu,_q),e(_q,k2o),e(uu,S2o),e(x,R2o),e(x,_u),e(_u,Gse),e(Gse,P2o),e(_u,B2o),e(_u,bq),e(bq,I2o),e(_u,q2o),e(x,N2o),e(x,bu),e(bu,Ose),e(Ose,j2o),e(bu,D2o),e(bu,vq),e(vq,G2o),e(bu,O2o),e(x,V2o),e(x,vu),e(vu,Vse),e(Vse,X2o),e(vu,z2o),e(vu,Fq),e(Fq,W2o),e(vu,Q2o),e(x,H2o),e(x,Fu),e(Fu,Xse),e(Xse,U2o),e(Fu,J2o),e(Fu,Tq),e(Tq,Y2o),e(Fu,K2o),e(x,Z2o),e(x,Tu),e(Tu,zse),e(zse,ebo),e(Tu,obo),e(Tu,Mq),e(Mq,rbo),e(Tu,tbo),e(x,abo),e(x,Mu),e(Mu,Wse),e(Wse,nbo),e(Mu,sbo),e(Mu,Eq),e(Eq,lbo),e(Mu,ibo),e(x,dbo),e(x,Eu),e(Eu,Qse),e(Qse,cbo),e(Eu,fbo),e(Eu,Cq),e(Cq,mbo),e(Eu,gbo),e(x,hbo),e(x,Cu),e(Cu,Hse),e(Hse,pbo),e(Cu,ubo),e(Cu,wq),e(wq,_bo),e(Cu,bbo),e(x,vbo),e(x,wu),e(wu,Use),e(Use,Fbo),e(wu,Tbo),e(wu,Aq),e(Aq,Mbo),e(wu,Ebo),e(x,Cbo),e(x,Au),e(Au,Jse),e(Jse,wbo),e(Au,Abo),e(Au,yq),e(yq,ybo),e(Au,Lbo),e(x,xbo),e(x,yu),e(yu,Yse),e(Yse,$bo),e(yu,kbo),e(yu,Lq),e(Lq,Sbo),e(yu,Rbo),e(x,Pbo),e(x,Lu),e(Lu,Kse),e(Kse,Bbo),e(Lu,Ibo),e(Lu,xq),e(xq,qbo),e(Lu,Nbo),e(x,jbo),e(x,xu),e(xu,Zse),e(Zse,Dbo),e(xu,Gbo),e(xu,$q),e($q,Obo),e(xu,Vbo),e(x,Xbo),e(x,$u),e($u,ele),e(ele,zbo),e($u,Wbo),e($u,kq),e(kq,Qbo),e($u,Hbo),e(x,Ubo),e(x,ku),e(ku,ole),e(ole,Jbo),e(ku,Ybo),e(ku,Sq),e(Sq,Kbo),e(ku,Zbo),e(x,evo),e(x,Su),e(Su,rle),e(rle,ovo),e(Su,rvo),e(Su,Rq),e(Rq,tvo),e(Su,avo),e(x,nvo),e(x,Ru),e(Ru,tle),e(tle,svo),e(Ru,lvo),e(Ru,Pq),e(Pq,ivo),e(Ru,dvo),e(x,cvo),e(x,Pu),e(Pu,ale),e(ale,fvo),e(Pu,mvo),e(Pu,Bq),e(Bq,gvo),e(Pu,hvo),e(x,pvo),e(x,Bu),e(Bu,nle),e(nle,uvo),e(Bu,_vo),e(Bu,Iq),e(Iq,bvo),e(Bu,vvo),e(x,Fvo),e(x,Iu),e(Iu,sle),e(sle,Tvo),e(Iu,Mvo),e(Iu,qq),e(qq,Evo),e(Iu,Cvo),e(x,wvo),e(x,qu),e(qu,lle),e(lle,Avo),e(qu,yvo),e(qu,Nq),e(Nq,Lvo),e(qu,xvo),e(x,$vo),e(x,Nu),e(Nu,ile),e(ile,kvo),e(Nu,Svo),e(Nu,jq),e(jq,Rvo),e(Nu,Pvo),e(x,Bvo),e(x,ju),e(ju,dle),e(dle,Ivo),e(ju,qvo),e(ju,Dq),e(Dq,Nvo),e(ju,jvo),e(x,Dvo),e(x,Du),e(Du,cle),e(cle,Gvo),e(Du,Ovo),e(Du,Gq),e(Gq,Vvo),e(Du,Xvo),e(Je,zvo),e(Je,Gu),e(Gu,Wvo),e(Gu,fle),e(fle,Qvo),e(Gu,Hvo),e(Gu,mle),e(mle,Uvo),e(Je,Jvo),M(Ou,Je,null),b(f,SIe,_),b(f,Ai,_),e(Ai,Vu),e(Vu,gle),M(B0,gle,null),e(Ai,Yvo),e(Ai,hle),e(hle,Kvo),b(f,RIe,_),b(f,xo,_),M(I0,xo,null),e(xo,Zvo),e(xo,yi),e(yi,eFo),e(yi,Oq),e(Oq,oFo),e(yi,rFo),e(yi,Vq),e(Vq,tFo),e(yi,aFo),e(xo,nFo),e(xo,q0),e(q0,sFo),e(q0,ple),e(ple,lFo),e(q0,iFo),e(xo,dFo),e(xo,at),M(N0,at,null),e(at,cFo),e(at,ule),e(ule,fFo),e(at,mFo),e(at,Li),e(Li,gFo),e(Li,_le),e(_le,hFo),e(Li,pFo),e(Li,Xq),e(Xq,uFo),e(Li,_Fo),e(at,bFo),M(Xu,at,null),e(xo,vFo),e(xo,Ye),M(j0,Ye,null),e(Ye,FFo),e(Ye,ble),e(ble,TFo),e(Ye,MFo),e(Ye,xa),e(xa,EFo),e(xa,vle),e(vle,CFo),e(xa,wFo),e(xa,Fle),e(Fle,AFo),e(xa,yFo),e(xa,Tle),e(Tle,LFo),e(xa,xFo),e(Ye,$Fo),e(Ye,G),e(G,zu),e(zu,Mle),e(Mle,kFo),e(zu,SFo),e(zu,zq),e(zq,RFo),e(zu,PFo),e(G,BFo),e(G,Wu),e(Wu,Ele),e(Ele,IFo),e(Wu,qFo),e(Wu,Wq),e(Wq,NFo),e(Wu,jFo),e(G,DFo),e(G,Qu),e(Qu,Cle),e(Cle,GFo),e(Qu,OFo),e(Qu,Qq),e(Qq,VFo),e(Qu,XFo),e(G,zFo),e(G,Hu),e(Hu,wle),e(wle,WFo),e(Hu,QFo),e(Hu,Hq),e(Hq,HFo),e(Hu,UFo),e(G,JFo),e(G,Uu),e(Uu,Ale),e(Ale,YFo),e(Uu,KFo),e(Uu,Uq),e(Uq,ZFo),e(Uu,e6o),e(G,o6o),e(G,Ju),e(Ju,yle),e(yle,r6o),e(Ju,t6o),e(Ju,Jq),e(Jq,a6o),e(Ju,n6o),e(G,s6o),e(G,Yu),e(Yu,Lle),e(Lle,l6o),e(Yu,i6o),e(Yu,Yq),e(Yq,d6o),e(Yu,c6o),e(G,f6o),e(G,Ku),e(Ku,xle),e(xle,m6o),e(Ku,g6o),e(Ku,Kq),e(Kq,h6o),e(Ku,p6o),e(G,u6o),e(G,Zu),e(Zu,$le),e($le,_6o),e(Zu,b6o),e(Zu,Zq),e(Zq,v6o),e(Zu,F6o),e(G,T6o),e(G,e_),e(e_,kle),e(kle,M6o),e(e_,E6o),e(e_,eN),e(eN,C6o),e(e_,w6o),e(G,A6o),e(G,o_),e(o_,Sle),e(Sle,y6o),e(o_,L6o),e(o_,oN),e(oN,x6o),e(o_,$6o),e(G,k6o),e(G,r_),e(r_,Rle),e(Rle,S6o),e(r_,R6o),e(r_,rN),e(rN,P6o),e(r_,B6o),e(G,I6o),e(G,t_),e(t_,Ple),e(Ple,q6o),e(t_,N6o),e(t_,tN),e(tN,j6o),e(t_,D6o),e(G,G6o),e(G,a_),e(a_,Ble),e(Ble,O6o),e(a_,V6o),e(a_,aN),e(aN,X6o),e(a_,z6o),e(G,W6o),e(G,n_),e(n_,Ile),e(Ile,Q6o),e(n_,H6o),e(n_,nN),e(nN,U6o),e(n_,J6o),e(G,Y6o),e(G,s_),e(s_,qle),e(qle,K6o),e(s_,Z6o),e(s_,sN),e(sN,eTo),e(s_,oTo),e(G,rTo),e(G,l_),e(l_,Nle),e(Nle,tTo),e(l_,aTo),e(l_,lN),e(lN,nTo),e(l_,sTo),e(G,lTo),e(G,i_),e(i_,jle),e(jle,iTo),e(i_,dTo),e(i_,iN),e(iN,cTo),e(i_,fTo),e(G,mTo),e(G,d_),e(d_,Dle),e(Dle,gTo),e(d_,hTo),e(d_,dN),e(dN,pTo),e(d_,uTo),e(G,_To),e(G,c_),e(c_,Gle),e(Gle,bTo),e(c_,vTo),e(c_,cN),e(cN,FTo),e(c_,TTo),e(G,MTo),e(G,f_),e(f_,Ole),e(Ole,ETo),e(f_,CTo),e(f_,fN),e(fN,wTo),e(f_,ATo),e(G,yTo),e(G,m_),e(m_,Vle),e(Vle,LTo),e(m_,xTo),e(m_,mN),e(mN,$To),e(m_,kTo),e(G,STo),e(G,g_),e(g_,Xle),e(Xle,RTo),e(g_,PTo),e(g_,gN),e(gN,BTo),e(g_,ITo),e(G,qTo),e(G,h_),e(h_,zle),e(zle,NTo),e(h_,jTo),e(h_,hN),e(hN,DTo),e(h_,GTo),e(G,OTo),e(G,p_),e(p_,Wle),e(Wle,VTo),e(p_,XTo),e(p_,pN),e(pN,zTo),e(p_,WTo),e(G,QTo),e(G,u_),e(u_,Qle),e(Qle,HTo),e(u_,UTo),e(u_,uN),e(uN,JTo),e(u_,YTo),e(G,KTo),e(G,__),e(__,Hle),e(Hle,ZTo),e(__,e8o),e(__,_N),e(_N,o8o),e(__,r8o),e(G,t8o),e(G,b_),e(b_,Ule),e(Ule,a8o),e(b_,n8o),e(b_,bN),e(bN,s8o),e(b_,l8o),e(G,i8o),e(G,v_),e(v_,Jle),e(Jle,d8o),e(v_,c8o),e(v_,vN),e(vN,f8o),e(v_,m8o),e(G,g8o),e(G,F_),e(F_,Yle),e(Yle,h8o),e(F_,p8o),e(F_,FN),e(FN,u8o),e(F_,_8o),e(G,b8o),e(G,T_),e(T_,Kle),e(Kle,v8o),e(T_,F8o),e(T_,TN),e(TN,T8o),e(T_,M8o),e(G,E8o),e(G,M_),e(M_,Zle),e(Zle,C8o),e(M_,w8o),e(M_,MN),e(MN,A8o),e(M_,y8o),e(G,L8o),e(G,E_),e(E_,eie),e(eie,x8o),e(E_,$8o),e(E_,EN),e(EN,k8o),e(E_,S8o),e(G,R8o),e(G,C_),e(C_,oie),e(oie,P8o),e(C_,B8o),e(C_,CN),e(CN,I8o),e(C_,q8o),e(G,N8o),e(G,w_),e(w_,rie),e(rie,j8o),e(w_,D8o),e(w_,wN),e(wN,G8o),e(w_,O8o),e(G,V8o),e(G,A_),e(A_,tie),e(tie,X8o),e(A_,z8o),e(A_,AN),e(AN,W8o),e(A_,Q8o),e(G,H8o),e(G,y_),e(y_,aie),e(aie,U8o),e(y_,J8o),e(y_,yN),e(yN,Y8o),e(y_,K8o),e(G,Z8o),e(G,L_),e(L_,nie),e(nie,eMo),e(L_,oMo),e(L_,LN),e(LN,rMo),e(L_,tMo),e(G,aMo),e(G,x_),e(x_,sie),e(sie,nMo),e(x_,sMo),e(x_,xN),e(xN,lMo),e(x_,iMo),e(G,dMo),e(G,$_),e($_,lie),e(lie,cMo),e($_,fMo),e($_,$N),e($N,mMo),e($_,gMo),e(G,hMo),e(G,k_),e(k_,iie),e(iie,pMo),e(k_,uMo),e(k_,kN),e(kN,_Mo),e(k_,bMo),e(Ye,vMo),e(Ye,S_),e(S_,FMo),e(S_,die),e(die,TMo),e(S_,MMo),e(S_,cie),e(cie,EMo),e(Ye,CMo),M(R_,Ye,null),b(f,PIe,_),b(f,xi,_),e(xi,P_),e(P_,fie),M(D0,fie,null),e(xi,wMo),e(xi,mie),e(mie,AMo),b(f,BIe,_),b(f,$o,_),M(G0,$o,null),e($o,yMo),e($o,$i),e($i,LMo),e($i,SN),e(SN,xMo),e($i,$Mo),e($i,RN),e(RN,kMo),e($i,SMo),e($o,RMo),e($o,O0),e(O0,PMo),e(O0,gie),e(gie,BMo),e(O0,IMo),e($o,qMo),e($o,nt),M(V0,nt,null),e(nt,NMo),e(nt,hie),e(hie,jMo),e(nt,DMo),e(nt,ki),e(ki,GMo),e(ki,pie),e(pie,OMo),e(ki,VMo),e(ki,PN),e(PN,XMo),e(ki,zMo),e(nt,WMo),M(B_,nt,null),e($o,QMo),e($o,Ke),M(X0,Ke,null),e(Ke,HMo),e(Ke,uie),e(uie,UMo),e(Ke,JMo),e(Ke,$a),e($a,YMo),e($a,_ie),e(_ie,KMo),e($a,ZMo),e($a,bie),e(bie,e4o),e($a,o4o),e($a,vie),e(vie,r4o),e($a,t4o),e(Ke,a4o),e(Ke,z),e(z,I_),e(I_,Fie),e(Fie,n4o),e(I_,s4o),e(I_,BN),e(BN,l4o),e(I_,i4o),e(z,d4o),e(z,q_),e(q_,Tie),e(Tie,c4o),e(q_,f4o),e(q_,IN),e(IN,m4o),e(q_,g4o),e(z,h4o),e(z,N_),e(N_,Mie),e(Mie,p4o),e(N_,u4o),e(N_,qN),e(qN,_4o),e(N_,b4o),e(z,v4o),e(z,j_),e(j_,Eie),e(Eie,F4o),e(j_,T4o),e(j_,NN),e(NN,M4o),e(j_,E4o),e(z,C4o),e(z,D_),e(D_,Cie),e(Cie,w4o),e(D_,A4o),e(D_,jN),e(jN,y4o),e(D_,L4o),e(z,x4o),e(z,G_),e(G_,wie),e(wie,$4o),e(G_,k4o),e(G_,DN),e(DN,S4o),e(G_,R4o),e(z,P4o),e(z,O_),e(O_,Aie),e(Aie,B4o),e(O_,I4o),e(O_,GN),e(GN,q4o),e(O_,N4o),e(z,j4o),e(z,V_),e(V_,yie),e(yie,D4o),e(V_,G4o),e(V_,ON),e(ON,O4o),e(V_,V4o),e(z,X4o),e(z,X_),e(X_,Lie),e(Lie,z4o),e(X_,W4o),e(X_,VN),e(VN,Q4o),e(X_,H4o),e(z,U4o),e(z,z_),e(z_,xie),e(xie,J4o),e(z_,Y4o),e(z_,XN),e(XN,K4o),e(z_,Z4o),e(z,eEo),e(z,W_),e(W_,$ie),e($ie,oEo),e(W_,rEo),e(W_,zN),e(zN,tEo),e(W_,aEo),e(z,nEo),e(z,Q_),e(Q_,kie),e(kie,sEo),e(Q_,lEo),e(Q_,WN),e(WN,iEo),e(Q_,dEo),e(z,cEo),e(z,H_),e(H_,Sie),e(Sie,fEo),e(H_,mEo),e(H_,QN),e(QN,gEo),e(H_,hEo),e(z,pEo),e(z,U_),e(U_,Rie),e(Rie,uEo),e(U_,_Eo),e(U_,HN),e(HN,bEo),e(U_,vEo),e(z,FEo),e(z,J_),e(J_,Pie),e(Pie,TEo),e(J_,MEo),e(J_,UN),e(UN,EEo),e(J_,CEo),e(z,wEo),e(z,Y_),e(Y_,Bie),e(Bie,AEo),e(Y_,yEo),e(Y_,JN),e(JN,LEo),e(Y_,xEo),e(z,$Eo),e(z,K_),e(K_,Iie),e(Iie,kEo),e(K_,SEo),e(K_,YN),e(YN,REo),e(K_,PEo),e(z,BEo),e(z,Z_),e(Z_,qie),e(qie,IEo),e(Z_,qEo),e(Z_,KN),e(KN,NEo),e(Z_,jEo),e(z,DEo),e(z,e1),e(e1,Nie),e(Nie,GEo),e(e1,OEo),e(e1,ZN),e(ZN,VEo),e(e1,XEo),e(z,zEo),e(z,o1),e(o1,jie),e(jie,WEo),e(o1,QEo),e(o1,ej),e(ej,HEo),e(o1,UEo),e(z,JEo),e(z,r1),e(r1,Die),e(Die,YEo),e(r1,KEo),e(r1,oj),e(oj,ZEo),e(r1,eCo),e(z,oCo),e(z,t1),e(t1,Gie),e(Gie,rCo),e(t1,tCo),e(t1,rj),e(rj,aCo),e(t1,nCo),e(z,sCo),e(z,a1),e(a1,Oie),e(Oie,lCo),e(a1,iCo),e(a1,tj),e(tj,dCo),e(a1,cCo),e(z,fCo),e(z,n1),e(n1,Vie),e(Vie,mCo),e(n1,gCo),e(n1,aj),e(aj,hCo),e(n1,pCo),e(z,uCo),e(z,s1),e(s1,Xie),e(Xie,_Co),e(s1,bCo),e(s1,nj),e(nj,vCo),e(s1,FCo),e(z,TCo),e(z,l1),e(l1,zie),e(zie,MCo),e(l1,ECo),e(l1,sj),e(sj,CCo),e(l1,wCo),e(z,ACo),e(z,i1),e(i1,Wie),e(Wie,yCo),e(i1,LCo),e(i1,lj),e(lj,xCo),e(i1,$Co),e(z,kCo),e(z,d1),e(d1,Qie),e(Qie,SCo),e(d1,RCo),e(d1,ij),e(ij,PCo),e(d1,BCo),e(z,ICo),e(z,c1),e(c1,Hie),e(Hie,qCo),e(c1,NCo),e(c1,dj),e(dj,jCo),e(c1,DCo),e(z,GCo),e(z,f1),e(f1,Uie),e(Uie,OCo),e(f1,VCo),e(f1,cj),e(cj,XCo),e(f1,zCo),e(z,WCo),e(z,m1),e(m1,Jie),e(Jie,QCo),e(m1,HCo),e(m1,fj),e(fj,UCo),e(m1,JCo),e(z,YCo),e(z,g1),e(g1,Yie),e(Yie,KCo),e(g1,ZCo),e(g1,mj),e(mj,e5o),e(g1,o5o),e(z,r5o),e(z,h1),e(h1,Kie),e(Kie,t5o),e(h1,a5o),e(h1,gj),e(gj,n5o),e(h1,s5o),e(z,l5o),e(z,p1),e(p1,Zie),e(Zie,i5o),e(p1,d5o),e(p1,hj),e(hj,c5o),e(p1,f5o),e(z,m5o),e(z,u1),e(u1,ede),e(ede,g5o),e(u1,h5o),e(u1,pj),e(pj,p5o),e(u1,u5o),e(z,_5o),e(z,_1),e(_1,ode),e(ode,b5o),e(_1,v5o),e(_1,uj),e(uj,F5o),e(_1,T5o),e(Ke,M5o),e(Ke,b1),e(b1,E5o),e(b1,rde),e(rde,C5o),e(b1,w5o),e(b1,tde),e(tde,A5o),e(Ke,y5o),M(v1,Ke,null),b(f,IIe,_),b(f,Si,_),e(Si,F1),e(F1,ade),M(z0,ade,null),e(Si,L5o),e(Si,nde),e(nde,x5o),b(f,qIe,_),b(f,ko,_),M(W0,ko,null),e(ko,$5o),e(ko,Ri),e(Ri,k5o),e(Ri,_j),e(_j,S5o),e(Ri,R5o),e(Ri,bj),e(bj,P5o),e(Ri,B5o),e(ko,I5o),e(ko,Q0),e(Q0,q5o),e(Q0,sde),e(sde,N5o),e(Q0,j5o),e(ko,D5o),e(ko,st),M(H0,st,null),e(st,G5o),e(st,lde),e(lde,O5o),e(st,V5o),e(st,Pi),e(Pi,X5o),e(Pi,ide),e(ide,z5o),e(Pi,W5o),e(Pi,vj),e(vj,Q5o),e(Pi,H5o),e(st,U5o),M(T1,st,null),e(ko,J5o),e(ko,Ze),M(U0,Ze,null),e(Ze,Y5o),e(Ze,dde),e(dde,K5o),e(Ze,Z5o),e(Ze,ka),e(ka,e3o),e(ka,cde),e(cde,o3o),e(ka,r3o),e(ka,fde),e(fde,t3o),e(ka,a3o),e(ka,mde),e(mde,n3o),e(ka,s3o),e(Ze,l3o),e(Ze,W),e(W,M1),e(M1,gde),e(gde,i3o),e(M1,d3o),e(M1,Fj),e(Fj,c3o),e(M1,f3o),e(W,m3o),e(W,E1),e(E1,hde),e(hde,g3o),e(E1,h3o),e(E1,Tj),e(Tj,p3o),e(E1,u3o),e(W,_3o),e(W,C1),e(C1,pde),e(pde,b3o),e(C1,v3o),e(C1,Mj),e(Mj,F3o),e(C1,T3o),e(W,M3o),e(W,w1),e(w1,ude),e(ude,E3o),e(w1,C3o),e(w1,Ej),e(Ej,w3o),e(w1,A3o),e(W,y3o),e(W,A1),e(A1,_de),e(_de,L3o),e(A1,x3o),e(A1,Cj),e(Cj,$3o),e(A1,k3o),e(W,S3o),e(W,y1),e(y1,bde),e(bde,R3o),e(y1,P3o),e(y1,wj),e(wj,B3o),e(y1,I3o),e(W,q3o),e(W,L1),e(L1,vde),e(vde,N3o),e(L1,j3o),e(L1,Aj),e(Aj,D3o),e(L1,G3o),e(W,O3o),e(W,x1),e(x1,Fde),e(Fde,V3o),e(x1,X3o),e(x1,yj),e(yj,z3o),e(x1,W3o),e(W,Q3o),e(W,$1),e($1,Tde),e(Tde,H3o),e($1,U3o),e($1,Lj),e(Lj,J3o),e($1,Y3o),e(W,K3o),e(W,k1),e(k1,Mde),e(Mde,Z3o),e(k1,ewo),e(k1,xj),e(xj,owo),e(k1,rwo),e(W,two),e(W,S1),e(S1,Ede),e(Ede,awo),e(S1,nwo),e(S1,$j),e($j,swo),e(S1,lwo),e(W,iwo),e(W,R1),e(R1,Cde),e(Cde,dwo),e(R1,cwo),e(R1,kj),e(kj,fwo),e(R1,mwo),e(W,gwo),e(W,P1),e(P1,wde),e(wde,hwo),e(P1,pwo),e(P1,Sj),e(Sj,uwo),e(P1,_wo),e(W,bwo),e(W,B1),e(B1,Ade),e(Ade,vwo),e(B1,Fwo),e(B1,Rj),e(Rj,Two),e(B1,Mwo),e(W,Ewo),e(W,I1),e(I1,yde),e(yde,Cwo),e(I1,wwo),e(I1,Pj),e(Pj,Awo),e(I1,ywo),e(W,Lwo),e(W,q1),e(q1,Lde),e(Lde,xwo),e(q1,$wo),e(q1,Bj),e(Bj,kwo),e(q1,Swo),e(W,Rwo),e(W,N1),e(N1,xde),e(xde,Pwo),e(N1,Bwo),e(N1,Ij),e(Ij,Iwo),e(N1,qwo),e(W,Nwo),e(W,j1),e(j1,$de),e($de,jwo),e(j1,Dwo),e(j1,qj),e(qj,Gwo),e(j1,Owo),e(W,Vwo),e(W,D1),e(D1,kde),e(kde,Xwo),e(D1,zwo),e(D1,Nj),e(Nj,Wwo),e(D1,Qwo),e(W,Hwo),e(W,G1),e(G1,Sde),e(Sde,Uwo),e(G1,Jwo),e(G1,jj),e(jj,Ywo),e(G1,Kwo),e(W,Zwo),e(W,O1),e(O1,Rde),e(Rde,eAo),e(O1,oAo),e(O1,Dj),e(Dj,rAo),e(O1,tAo),e(W,aAo),e(W,V1),e(V1,Pde),e(Pde,nAo),e(V1,sAo),e(V1,Gj),e(Gj,lAo),e(V1,iAo),e(W,dAo),e(W,X1),e(X1,Bde),e(Bde,cAo),e(X1,fAo),e(X1,Oj),e(Oj,mAo),e(X1,gAo),e(W,hAo),e(W,z1),e(z1,Ide),e(Ide,pAo),e(z1,uAo),e(z1,Vj),e(Vj,_Ao),e(z1,bAo),e(W,vAo),e(W,W1),e(W1,qde),e(qde,FAo),e(W1,TAo),e(W1,Xj),e(Xj,MAo),e(W1,EAo),e(W,CAo),e(W,Q1),e(Q1,Nde),e(Nde,wAo),e(Q1,AAo),e(Q1,zj),e(zj,yAo),e(Q1,LAo),e(W,xAo),e(W,H1),e(H1,jde),e(jde,$Ao),e(H1,kAo),e(H1,Wj),e(Wj,SAo),e(H1,RAo),e(W,PAo),e(W,U1),e(U1,Dde),e(Dde,BAo),e(U1,IAo),e(U1,Qj),e(Qj,qAo),e(U1,NAo),e(W,jAo),e(W,J1),e(J1,Gde),e(Gde,DAo),e(J1,GAo),e(J1,Hj),e(Hj,OAo),e(J1,VAo),e(W,XAo),e(W,Y1),e(Y1,Ode),e(Ode,zAo),e(Y1,WAo),e(Y1,Uj),e(Uj,QAo),e(Y1,HAo),e(W,UAo),e(W,K1),e(K1,Vde),e(Vde,JAo),e(K1,YAo),e(K1,Xde),e(Xde,KAo),e(K1,ZAo),e(W,e0o),e(W,Z1),e(Z1,zde),e(zde,o0o),e(Z1,r0o),e(Z1,Jj),e(Jj,t0o),e(Z1,a0o),e(W,n0o),e(W,e2),e(e2,Wde),e(Wde,s0o),e(e2,l0o),e(e2,Yj),e(Yj,i0o),e(e2,d0o),e(W,c0o),e(W,o2),e(o2,Qde),e(Qde,f0o),e(o2,m0o),e(o2,Kj),e(Kj,g0o),e(o2,h0o),e(W,p0o),e(W,r2),e(r2,Hde),e(Hde,u0o),e(r2,_0o),e(r2,Zj),e(Zj,b0o),e(r2,v0o),e(Ze,F0o),e(Ze,t2),e(t2,T0o),e(t2,Ude),e(Ude,M0o),e(t2,E0o),e(t2,Jde),e(Jde,C0o),e(Ze,w0o),M(a2,Ze,null),b(f,NIe,_),b(f,Bi,_),e(Bi,n2),e(n2,Yde),M(J0,Yde,null),e(Bi,A0o),e(Bi,Kde),e(Kde,y0o),b(f,jIe,_),b(f,So,_),M(Y0,So,null),e(So,L0o),e(So,Ii),e(Ii,x0o),e(Ii,eD),e(eD,$0o),e(Ii,k0o),e(Ii,oD),e(oD,S0o),e(Ii,R0o),e(So,P0o),e(So,K0),e(K0,B0o),e(K0,Zde),e(Zde,I0o),e(K0,q0o),e(So,N0o),e(So,lt),M(Z0,lt,null),e(lt,j0o),e(lt,ece),e(ece,D0o),e(lt,G0o),e(lt,qi),e(qi,O0o),e(qi,oce),e(oce,V0o),e(qi,X0o),e(qi,rD),e(rD,z0o),e(qi,W0o),e(lt,Q0o),M(s2,lt,null),e(So,H0o),e(So,eo),M(ey,eo,null),e(eo,U0o),e(eo,rce),e(rce,J0o),e(eo,Y0o),e(eo,Sa),e(Sa,K0o),e(Sa,tce),e(tce,Z0o),e(Sa,eyo),e(Sa,ace),e(ace,oyo),e(Sa,ryo),e(Sa,nce),e(nce,tyo),e(Sa,ayo),e(eo,nyo),e(eo,ue),e(ue,l2),e(l2,sce),e(sce,syo),e(l2,lyo),e(l2,tD),e(tD,iyo),e(l2,dyo),e(ue,cyo),e(ue,i2),e(i2,lce),e(lce,fyo),e(i2,myo),e(i2,aD),e(aD,gyo),e(i2,hyo),e(ue,pyo),e(ue,d2),e(d2,ice),e(ice,uyo),e(d2,_yo),e(d2,nD),e(nD,byo),e(d2,vyo),e(ue,Fyo),e(ue,c2),e(c2,dce),e(dce,Tyo),e(c2,Myo),e(c2,sD),e(sD,Eyo),e(c2,Cyo),e(ue,wyo),e(ue,f2),e(f2,cce),e(cce,Ayo),e(f2,yyo),e(f2,lD),e(lD,Lyo),e(f2,xyo),e(ue,$yo),e(ue,m2),e(m2,fce),e(fce,kyo),e(m2,Syo),e(m2,iD),e(iD,Ryo),e(m2,Pyo),e(ue,Byo),e(ue,g2),e(g2,mce),e(mce,Iyo),e(g2,qyo),e(g2,dD),e(dD,Nyo),e(g2,jyo),e(ue,Dyo),e(ue,h2),e(h2,gce),e(gce,Gyo),e(h2,Oyo),e(h2,cD),e(cD,Vyo),e(h2,Xyo),e(ue,zyo),e(ue,p2),e(p2,hce),e(hce,Wyo),e(p2,Qyo),e(p2,fD),e(fD,Hyo),e(p2,Uyo),e(ue,Jyo),e(ue,u2),e(u2,pce),e(pce,Yyo),e(u2,Kyo),e(u2,mD),e(mD,Zyo),e(u2,eLo),e(ue,oLo),e(ue,_2),e(_2,uce),e(uce,rLo),e(_2,tLo),e(_2,gD),e(gD,aLo),e(_2,nLo),e(ue,sLo),e(ue,b2),e(b2,_ce),e(_ce,lLo),e(b2,iLo),e(b2,hD),e(hD,dLo),e(b2,cLo),e(ue,fLo),e(ue,v2),e(v2,bce),e(bce,mLo),e(v2,gLo),e(v2,pD),e(pD,hLo),e(v2,pLo),e(ue,uLo),e(ue,F2),e(F2,vce),e(vce,_Lo),e(F2,bLo),e(F2,uD),e(uD,vLo),e(F2,FLo),e(ue,TLo),e(ue,T2),e(T2,Fce),e(Fce,MLo),e(T2,ELo),e(T2,_D),e(_D,CLo),e(T2,wLo),e(ue,ALo),e(ue,M2),e(M2,Tce),e(Tce,yLo),e(M2,LLo),e(M2,bD),e(bD,xLo),e(M2,$Lo),e(eo,kLo),e(eo,E2),e(E2,SLo),e(E2,Mce),e(Mce,RLo),e(E2,PLo),e(E2,Ece),e(Ece,BLo),e(eo,ILo),M(C2,eo,null),b(f,DIe,_),b(f,Ni,_),e(Ni,w2),e(w2,Cce),M(oy,Cce,null),e(Ni,qLo),e(Ni,wce),e(wce,NLo),b(f,GIe,_),b(f,Ro,_),M(ry,Ro,null),e(Ro,jLo),e(Ro,ji),e(ji,DLo),e(ji,vD),e(vD,GLo),e(ji,OLo),e(ji,FD),e(FD,VLo),e(ji,XLo),e(Ro,zLo),e(Ro,ty),e(ty,WLo),e(ty,Ace),e(Ace,QLo),e(ty,HLo),e(Ro,ULo),e(Ro,it),M(ay,it,null),e(it,JLo),e(it,yce),e(yce,YLo),e(it,KLo),e(it,Di),e(Di,ZLo),e(Di,Lce),e(Lce,exo),e(Di,oxo),e(Di,TD),e(TD,rxo),e(Di,txo),e(it,axo),M(A2,it,null),e(Ro,nxo),e(Ro,oo),M(ny,oo,null),e(oo,sxo),e(oo,xce),e(xce,lxo),e(oo,ixo),e(oo,Ra),e(Ra,dxo),e(Ra,$ce),e($ce,cxo),e(Ra,fxo),e(Ra,kce),e(kce,mxo),e(Ra,gxo),e(Ra,Sce),e(Sce,hxo),e(Ra,pxo),e(oo,uxo),e(oo,q),e(q,y2),e(y2,Rce),e(Rce,_xo),e(y2,bxo),e(y2,MD),e(MD,vxo),e(y2,Fxo),e(q,Txo),e(q,L2),e(L2,Pce),e(Pce,Mxo),e(L2,Exo),e(L2,ED),e(ED,Cxo),e(L2,wxo),e(q,Axo),e(q,x2),e(x2,Bce),e(Bce,yxo),e(x2,Lxo),e(x2,CD),e(CD,xxo),e(x2,$xo),e(q,kxo),e(q,$2),e($2,Ice),e(Ice,Sxo),e($2,Rxo),e($2,wD),e(wD,Pxo),e($2,Bxo),e(q,Ixo),e(q,k2),e(k2,qce),e(qce,qxo),e(k2,Nxo),e(k2,AD),e(AD,jxo),e(k2,Dxo),e(q,Gxo),e(q,S2),e(S2,Nce),e(Nce,Oxo),e(S2,Vxo),e(S2,yD),e(yD,Xxo),e(S2,zxo),e(q,Wxo),e(q,R2),e(R2,jce),e(jce,Qxo),e(R2,Hxo),e(R2,LD),e(LD,Uxo),e(R2,Jxo),e(q,Yxo),e(q,P2),e(P2,Dce),e(Dce,Kxo),e(P2,Zxo),e(P2,xD),e(xD,e9o),e(P2,o9o),e(q,r9o),e(q,B2),e(B2,Gce),e(Gce,t9o),e(B2,a9o),e(B2,$D),e($D,n9o),e(B2,s9o),e(q,l9o),e(q,I2),e(I2,Oce),e(Oce,i9o),e(I2,d9o),e(I2,kD),e(kD,c9o),e(I2,f9o),e(q,m9o),e(q,q2),e(q2,Vce),e(Vce,g9o),e(q2,h9o),e(q2,SD),e(SD,p9o),e(q2,u9o),e(q,_9o),e(q,N2),e(N2,Xce),e(Xce,b9o),e(N2,v9o),e(N2,RD),e(RD,F9o),e(N2,T9o),e(q,M9o),e(q,j2),e(j2,zce),e(zce,E9o),e(j2,C9o),e(j2,PD),e(PD,w9o),e(j2,A9o),e(q,y9o),e(q,D2),e(D2,Wce),e(Wce,L9o),e(D2,x9o),e(D2,BD),e(BD,$9o),e(D2,k9o),e(q,S9o),e(q,G2),e(G2,Qce),e(Qce,R9o),e(G2,P9o),e(G2,ID),e(ID,B9o),e(G2,I9o),e(q,q9o),e(q,O2),e(O2,Hce),e(Hce,N9o),e(O2,j9o),e(O2,qD),e(qD,D9o),e(O2,G9o),e(q,O9o),e(q,V2),e(V2,Uce),e(Uce,V9o),e(V2,X9o),e(V2,ND),e(ND,z9o),e(V2,W9o),e(q,Q9o),e(q,X2),e(X2,Jce),e(Jce,H9o),e(X2,U9o),e(X2,jD),e(jD,J9o),e(X2,Y9o),e(q,K9o),e(q,z2),e(z2,Yce),e(Yce,Z9o),e(z2,e7o),e(z2,DD),e(DD,o7o),e(z2,r7o),e(q,t7o),e(q,W2),e(W2,Kce),e(Kce,a7o),e(W2,n7o),e(W2,GD),e(GD,s7o),e(W2,l7o),e(q,i7o),e(q,Q2),e(Q2,Zce),e(Zce,d7o),e(Q2,c7o),e(Q2,OD),e(OD,f7o),e(Q2,m7o),e(q,g7o),e(q,H2),e(H2,efe),e(efe,h7o),e(H2,p7o),e(H2,VD),e(VD,u7o),e(H2,_7o),e(q,b7o),e(q,U2),e(U2,ofe),e(ofe,v7o),e(U2,F7o),e(U2,XD),e(XD,T7o),e(U2,M7o),e(q,E7o),e(q,J2),e(J2,rfe),e(rfe,C7o),e(J2,w7o),e(J2,zD),e(zD,A7o),e(J2,y7o),e(q,L7o),e(q,Y2),e(Y2,tfe),e(tfe,x7o),e(Y2,$7o),e(Y2,WD),e(WD,k7o),e(Y2,S7o),e(q,R7o),e(q,K2),e(K2,afe),e(afe,P7o),e(K2,B7o),e(K2,QD),e(QD,I7o),e(K2,q7o),e(q,N7o),e(q,Z2),e(Z2,nfe),e(nfe,j7o),e(Z2,D7o),e(Z2,HD),e(HD,G7o),e(Z2,O7o),e(q,V7o),e(q,eb),e(eb,sfe),e(sfe,X7o),e(eb,z7o),e(eb,UD),e(UD,W7o),e(eb,Q7o),e(q,H7o),e(q,ob),e(ob,lfe),e(lfe,U7o),e(ob,J7o),e(ob,JD),e(JD,Y7o),e(ob,K7o),e(q,Z7o),e(q,rb),e(rb,ife),e(ife,e$o),e(rb,o$o),e(rb,YD),e(YD,r$o),e(rb,t$o),e(q,a$o),e(q,tb),e(tb,dfe),e(dfe,n$o),e(tb,s$o),e(tb,KD),e(KD,l$o),e(tb,i$o),e(q,d$o),e(q,ab),e(ab,cfe),e(cfe,c$o),e(ab,f$o),e(ab,ZD),e(ZD,m$o),e(ab,g$o),e(q,h$o),e(q,nb),e(nb,ffe),e(ffe,p$o),e(nb,u$o),e(nb,eG),e(eG,_$o),e(nb,b$o),e(q,v$o),e(q,sb),e(sb,mfe),e(mfe,F$o),e(sb,T$o),e(sb,oG),e(oG,M$o),e(sb,E$o),e(q,C$o),e(q,lb),e(lb,gfe),e(gfe,w$o),e(lb,A$o),e(lb,rG),e(rG,y$o),e(lb,L$o),e(q,x$o),e(q,ib),e(ib,hfe),e(hfe,$$o),e(ib,k$o),e(ib,tG),e(tG,S$o),e(ib,R$o),e(q,P$o),e(q,db),e(db,pfe),e(pfe,B$o),e(db,I$o),e(db,aG),e(aG,q$o),e(db,N$o),e(q,j$o),e(q,cb),e(cb,ufe),e(ufe,D$o),e(cb,G$o),e(cb,nG),e(nG,O$o),e(cb,V$o),e(q,X$o),e(q,fb),e(fb,_fe),e(_fe,z$o),e(fb,W$o),e(fb,sG),e(sG,Q$o),e(fb,H$o),e(q,U$o),e(q,mb),e(mb,bfe),e(bfe,J$o),e(mb,Y$o),e(mb,lG),e(lG,K$o),e(mb,Z$o),e(q,eko),e(q,gb),e(gb,vfe),e(vfe,oko),e(gb,rko),e(gb,iG),e(iG,tko),e(gb,ako),e(q,nko),e(q,hb),e(hb,Ffe),e(Ffe,sko),e(hb,lko),e(hb,dG),e(dG,iko),e(hb,dko),e(q,cko),e(q,pb),e(pb,Tfe),e(Tfe,fko),e(pb,mko),e(pb,cG),e(cG,gko),e(pb,hko),e(q,pko),e(q,ub),e(ub,Mfe),e(Mfe,uko),e(ub,_ko),e(ub,fG),e(fG,bko),e(ub,vko),e(q,Fko),e(q,_b),e(_b,Efe),e(Efe,Tko),e(_b,Mko),e(_b,mG),e(mG,Eko),e(_b,Cko),e(q,wko),e(q,bb),e(bb,Cfe),e(Cfe,Ako),e(bb,yko),e(bb,gG),e(gG,Lko),e(bb,xko),e(oo,$ko),e(oo,vb),e(vb,kko),e(vb,wfe),e(wfe,Sko),e(vb,Rko),e(vb,Afe),e(Afe,Pko),e(oo,Bko),M(Fb,oo,null),b(f,OIe,_),b(f,Gi,_),e(Gi,Tb),e(Tb,yfe),M(sy,yfe,null),e(Gi,Iko),e(Gi,Lfe),e(Lfe,qko),b(f,VIe,_),b(f,Po,_),M(ly,Po,null),e(Po,Nko),e(Po,Oi),e(Oi,jko),e(Oi,hG),e(hG,Dko),e(Oi,Gko),e(Oi,pG),e(pG,Oko),e(Oi,Vko),e(Po,Xko),e(Po,iy),e(iy,zko),e(iy,xfe),e(xfe,Wko),e(iy,Qko),e(Po,Hko),e(Po,dt),M(dy,dt,null),e(dt,Uko),e(dt,$fe),e($fe,Jko),e(dt,Yko),e(dt,Vi),e(Vi,Kko),e(Vi,kfe),e(kfe,Zko),e(Vi,eSo),e(Vi,uG),e(uG,oSo),e(Vi,rSo),e(dt,tSo),M(Mb,dt,null),e(Po,aSo),e(Po,ro),M(cy,ro,null),e(ro,nSo),e(ro,Sfe),e(Sfe,sSo),e(ro,lSo),e(ro,Pa),e(Pa,iSo),e(Pa,Rfe),e(Rfe,dSo),e(Pa,cSo),e(Pa,Pfe),e(Pfe,fSo),e(Pa,mSo),e(Pa,Bfe),e(Bfe,gSo),e(Pa,hSo),e(ro,pSo),e(ro,Y),e(Y,Eb),e(Eb,Ife),e(Ife,uSo),e(Eb,_So),e(Eb,_G),e(_G,bSo),e(Eb,vSo),e(Y,FSo),e(Y,Cb),e(Cb,qfe),e(qfe,TSo),e(Cb,MSo),e(Cb,bG),e(bG,ESo),e(Cb,CSo),e(Y,wSo),e(Y,wb),e(wb,Nfe),e(Nfe,ASo),e(wb,ySo),e(wb,vG),e(vG,LSo),e(wb,xSo),e(Y,$So),e(Y,Ab),e(Ab,jfe),e(jfe,kSo),e(Ab,SSo),e(Ab,FG),e(FG,RSo),e(Ab,PSo),e(Y,BSo),e(Y,yb),e(yb,Dfe),e(Dfe,ISo),e(yb,qSo),e(yb,TG),e(TG,NSo),e(yb,jSo),e(Y,DSo),e(Y,Lb),e(Lb,Gfe),e(Gfe,GSo),e(Lb,OSo),e(Lb,MG),e(MG,VSo),e(Lb,XSo),e(Y,zSo),e(Y,xb),e(xb,Ofe),e(Ofe,WSo),e(xb,QSo),e(xb,EG),e(EG,HSo),e(xb,USo),e(Y,JSo),e(Y,$b),e($b,Vfe),e(Vfe,YSo),e($b,KSo),e($b,CG),e(CG,ZSo),e($b,eRo),e(Y,oRo),e(Y,kb),e(kb,Xfe),e(Xfe,rRo),e(kb,tRo),e(kb,wG),e(wG,aRo),e(kb,nRo),e(Y,sRo),e(Y,Sb),e(Sb,zfe),e(zfe,lRo),e(Sb,iRo),e(Sb,AG),e(AG,dRo),e(Sb,cRo),e(Y,fRo),e(Y,Rb),e(Rb,Wfe),e(Wfe,mRo),e(Rb,gRo),e(Rb,yG),e(yG,hRo),e(Rb,pRo),e(Y,uRo),e(Y,Pb),e(Pb,Qfe),e(Qfe,_Ro),e(Pb,bRo),e(Pb,LG),e(LG,vRo),e(Pb,FRo),e(Y,TRo),e(Y,Bb),e(Bb,Hfe),e(Hfe,MRo),e(Bb,ERo),e(Bb,xG),e(xG,CRo),e(Bb,wRo),e(Y,ARo),e(Y,Ib),e(Ib,Ufe),e(Ufe,yRo),e(Ib,LRo),e(Ib,$G),e($G,xRo),e(Ib,$Ro),e(Y,kRo),e(Y,qb),e(qb,Jfe),e(Jfe,SRo),e(qb,RRo),e(qb,kG),e(kG,PRo),e(qb,BRo),e(Y,IRo),e(Y,Nb),e(Nb,Yfe),e(Yfe,qRo),e(Nb,NRo),e(Nb,SG),e(SG,jRo),e(Nb,DRo),e(Y,GRo),e(Y,jb),e(jb,Kfe),e(Kfe,ORo),e(jb,VRo),e(jb,RG),e(RG,XRo),e(jb,zRo),e(Y,WRo),e(Y,Db),e(Db,Zfe),e(Zfe,QRo),e(Db,HRo),e(Db,PG),e(PG,URo),e(Db,JRo),e(Y,YRo),e(Y,Gb),e(Gb,eme),e(eme,KRo),e(Gb,ZRo),e(Gb,BG),e(BG,ePo),e(Gb,oPo),e(Y,rPo),e(Y,Ob),e(Ob,ome),e(ome,tPo),e(Ob,aPo),e(Ob,IG),e(IG,nPo),e(Ob,sPo),e(Y,lPo),e(Y,Vb),e(Vb,rme),e(rme,iPo),e(Vb,dPo),e(Vb,qG),e(qG,cPo),e(Vb,fPo),e(Y,mPo),e(Y,Xb),e(Xb,tme),e(tme,gPo),e(Xb,hPo),e(Xb,NG),e(NG,pPo),e(Xb,uPo),e(Y,_Po),e(Y,zb),e(zb,ame),e(ame,bPo),e(zb,vPo),e(zb,jG),e(jG,FPo),e(zb,TPo),e(Y,MPo),e(Y,Wb),e(Wb,nme),e(nme,EPo),e(Wb,CPo),e(Wb,DG),e(DG,wPo),e(Wb,APo),e(Y,yPo),e(Y,Qb),e(Qb,sme),e(sme,LPo),e(Qb,xPo),e(Qb,GG),e(GG,$Po),e(Qb,kPo),e(Y,SPo),e(Y,Hb),e(Hb,lme),e(lme,RPo),e(Hb,PPo),e(Hb,OG),e(OG,BPo),e(Hb,IPo),e(Y,qPo),e(Y,Ub),e(Ub,ime),e(ime,NPo),e(Ub,jPo),e(Ub,VG),e(VG,DPo),e(Ub,GPo),e(Y,OPo),e(Y,Jb),e(Jb,dme),e(dme,VPo),e(Jb,XPo),e(Jb,XG),e(XG,zPo),e(Jb,WPo),e(Y,QPo),e(Y,Yb),e(Yb,cme),e(cme,HPo),e(Yb,UPo),e(Yb,zG),e(zG,JPo),e(Yb,YPo),e(ro,KPo),e(ro,Kb),e(Kb,ZPo),e(Kb,fme),e(fme,eBo),e(Kb,oBo),e(Kb,mme),e(mme,rBo),e(ro,tBo),M(Zb,ro,null),b(f,XIe,_),b(f,Xi,_),e(Xi,ev),e(ev,gme),M(fy,gme,null),e(Xi,aBo),e(Xi,hme),e(hme,nBo),b(f,zIe,_),b(f,Bo,_),M(my,Bo,null),e(Bo,sBo),e(Bo,zi),e(zi,lBo),e(zi,WG),e(WG,iBo),e(zi,dBo),e(zi,QG),e(QG,cBo),e(zi,fBo),e(Bo,mBo),e(Bo,gy),e(gy,gBo),e(gy,pme),e(pme,hBo),e(gy,pBo),e(Bo,uBo),e(Bo,ct),M(hy,ct,null),e(ct,_Bo),e(ct,ume),e(ume,bBo),e(ct,vBo),e(ct,Wi),e(Wi,FBo),e(Wi,_me),e(_me,TBo),e(Wi,MBo),e(Wi,HG),e(HG,EBo),e(Wi,CBo),e(ct,wBo),M(ov,ct,null),e(Bo,ABo),e(Bo,to),M(py,to,null),e(to,yBo),e(to,bme),e(bme,LBo),e(to,xBo),e(to,Ba),e(Ba,$Bo),e(Ba,vme),e(vme,kBo),e(Ba,SBo),e(Ba,Fme),e(Fme,RBo),e(Ba,PBo),e(Ba,Tme),e(Tme,BBo),e(Ba,IBo),e(to,qBo),e(to,Yr),e(Yr,rv),e(rv,Mme),e(Mme,NBo),e(rv,jBo),e(rv,UG),e(UG,DBo),e(rv,GBo),e(Yr,OBo),e(Yr,tv),e(tv,Eme),e(Eme,VBo),e(tv,XBo),e(tv,JG),e(JG,zBo),e(tv,WBo),e(Yr,QBo),e(Yr,av),e(av,Cme),e(Cme,HBo),e(av,UBo),e(av,YG),e(YG,JBo),e(av,YBo),e(Yr,KBo),e(Yr,nv),e(nv,wme),e(wme,ZBo),e(nv,eIo),e(nv,KG),e(KG,oIo),e(nv,rIo),e(Yr,tIo),e(Yr,sv),e(sv,Ame),e(Ame,aIo),e(sv,nIo),e(sv,ZG),e(ZG,sIo),e(sv,lIo),e(to,iIo),e(to,lv),e(lv,dIo),e(lv,yme),e(yme,cIo),e(lv,fIo),e(lv,Lme),e(Lme,mIo),e(to,gIo),M(iv,to,null),b(f,WIe,_),b(f,Qi,_),e(Qi,dv),e(dv,xme),M(uy,xme,null),e(Qi,hIo),e(Qi,$me),e($me,pIo),b(f,QIe,_),b(f,Io,_),M(_y,Io,null),e(Io,uIo),e(Io,Hi),e(Hi,_Io),e(Hi,eO),e(eO,bIo),e(Hi,vIo),e(Hi,oO),e(oO,FIo),e(Hi,TIo),e(Io,MIo),e(Io,by),e(by,EIo),e(by,kme),e(kme,CIo),e(by,wIo),e(Io,AIo),e(Io,ft),M(vy,ft,null),e(ft,yIo),e(ft,Sme),e(Sme,LIo),e(ft,xIo),e(ft,Ui),e(Ui,$Io),e(Ui,Rme),e(Rme,kIo),e(Ui,SIo),e(Ui,rO),e(rO,RIo),e(Ui,PIo),e(ft,BIo),M(cv,ft,null),e(Io,IIo),e(Io,ao),M(Fy,ao,null),e(ao,qIo),e(ao,Pme),e(Pme,NIo),e(ao,jIo),e(ao,Ia),e(Ia,DIo),e(Ia,Bme),e(Bme,GIo),e(Ia,OIo),e(Ia,Ime),e(Ime,VIo),e(Ia,XIo),e(Ia,qme),e(qme,zIo),e(Ia,WIo),e(ao,QIo),e(ao,U),e(U,fv),e(fv,Nme),e(Nme,HIo),e(fv,UIo),e(fv,tO),e(tO,JIo),e(fv,YIo),e(U,KIo),e(U,mv),e(mv,jme),e(jme,ZIo),e(mv,eqo),e(mv,aO),e(aO,oqo),e(mv,rqo),e(U,tqo),e(U,gv),e(gv,Dme),e(Dme,aqo),e(gv,nqo),e(gv,nO),e(nO,sqo),e(gv,lqo),e(U,iqo),e(U,hv),e(hv,Gme),e(Gme,dqo),e(hv,cqo),e(hv,sO),e(sO,fqo),e(hv,mqo),e(U,gqo),e(U,pv),e(pv,Ome),e(Ome,hqo),e(pv,pqo),e(pv,lO),e(lO,uqo),e(pv,_qo),e(U,bqo),e(U,uv),e(uv,Vme),e(Vme,vqo),e(uv,Fqo),e(uv,iO),e(iO,Tqo),e(uv,Mqo),e(U,Eqo),e(U,_v),e(_v,Xme),e(Xme,Cqo),e(_v,wqo),e(_v,dO),e(dO,Aqo),e(_v,yqo),e(U,Lqo),e(U,bv),e(bv,zme),e(zme,xqo),e(bv,$qo),e(bv,cO),e(cO,kqo),e(bv,Sqo),e(U,Rqo),e(U,vv),e(vv,Wme),e(Wme,Pqo),e(vv,Bqo),e(vv,fO),e(fO,Iqo),e(vv,qqo),e(U,Nqo),e(U,Fv),e(Fv,Qme),e(Qme,jqo),e(Fv,Dqo),e(Fv,mO),e(mO,Gqo),e(Fv,Oqo),e(U,Vqo),e(U,Tv),e(Tv,Hme),e(Hme,Xqo),e(Tv,zqo),e(Tv,gO),e(gO,Wqo),e(Tv,Qqo),e(U,Hqo),e(U,Mv),e(Mv,Ume),e(Ume,Uqo),e(Mv,Jqo),e(Mv,hO),e(hO,Yqo),e(Mv,Kqo),e(U,Zqo),e(U,Ev),e(Ev,Jme),e(Jme,eNo),e(Ev,oNo),e(Ev,pO),e(pO,rNo),e(Ev,tNo),e(U,aNo),e(U,Cv),e(Cv,Yme),e(Yme,nNo),e(Cv,sNo),e(Cv,uO),e(uO,lNo),e(Cv,iNo),e(U,dNo),e(U,wv),e(wv,Kme),e(Kme,cNo),e(wv,fNo),e(wv,_O),e(_O,mNo),e(wv,gNo),e(U,hNo),e(U,Av),e(Av,Zme),e(Zme,pNo),e(Av,uNo),e(Av,bO),e(bO,_No),e(Av,bNo),e(U,vNo),e(U,yv),e(yv,ege),e(ege,FNo),e(yv,TNo),e(yv,vO),e(vO,MNo),e(yv,ENo),e(U,CNo),e(U,Lv),e(Lv,oge),e(oge,wNo),e(Lv,ANo),e(Lv,FO),e(FO,yNo),e(Lv,LNo),e(U,xNo),e(U,xv),e(xv,rge),e(rge,$No),e(xv,kNo),e(xv,TO),e(TO,SNo),e(xv,RNo),e(U,PNo),e(U,$v),e($v,tge),e(tge,BNo),e($v,INo),e($v,MO),e(MO,qNo),e($v,NNo),e(U,jNo),e(U,kv),e(kv,age),e(age,DNo),e(kv,GNo),e(kv,EO),e(EO,ONo),e(kv,VNo),e(U,XNo),e(U,Sv),e(Sv,nge),e(nge,zNo),e(Sv,WNo),e(Sv,CO),e(CO,QNo),e(Sv,HNo),e(U,UNo),e(U,Rv),e(Rv,sge),e(sge,JNo),e(Rv,YNo),e(Rv,wO),e(wO,KNo),e(Rv,ZNo),e(U,ejo),e(U,Pv),e(Pv,lge),e(lge,ojo),e(Pv,rjo),e(Pv,AO),e(AO,tjo),e(Pv,ajo),e(U,njo),e(U,Bv),e(Bv,ige),e(ige,sjo),e(Bv,ljo),e(Bv,yO),e(yO,ijo),e(Bv,djo),e(U,cjo),e(U,Iv),e(Iv,dge),e(dge,fjo),e(Iv,mjo),e(Iv,LO),e(LO,gjo),e(Iv,hjo),e(U,pjo),e(U,qv),e(qv,cge),e(cge,ujo),e(qv,_jo),e(qv,xO),e(xO,bjo),e(qv,vjo),e(U,Fjo),e(U,Nv),e(Nv,fge),e(fge,Tjo),e(Nv,Mjo),e(Nv,$O),e($O,Ejo),e(Nv,Cjo),e(U,wjo),e(U,jv),e(jv,mge),e(mge,Ajo),e(jv,yjo),e(jv,kO),e(kO,Ljo),e(jv,xjo),e(U,$jo),e(U,Dv),e(Dv,gge),e(gge,kjo),e(Dv,Sjo),e(Dv,SO),e(SO,Rjo),e(Dv,Pjo),e(U,Bjo),e(U,Gv),e(Gv,hge),e(hge,Ijo),e(Gv,qjo),e(Gv,RO),e(RO,Njo),e(Gv,jjo),e(U,Djo),e(U,Ov),e(Ov,pge),e(pge,Gjo),e(Ov,Ojo),e(Ov,PO),e(PO,Vjo),e(Ov,Xjo),e(U,zjo),e(U,Vv),e(Vv,uge),e(uge,Wjo),e(Vv,Qjo),e(Vv,BO),e(BO,Hjo),e(Vv,Ujo),e(ao,Jjo),e(ao,Xv),e(Xv,Yjo),e(Xv,_ge),e(_ge,Kjo),e(Xv,Zjo),e(Xv,bge),e(bge,eDo),e(ao,oDo),M(zv,ao,null),b(f,HIe,_),b(f,Ji,_),e(Ji,Wv),e(Wv,vge),M(Ty,vge,null),e(Ji,rDo),e(Ji,Fge),e(Fge,tDo),b(f,UIe,_),b(f,qo,_),M(My,qo,null),e(qo,aDo),e(qo,Yi),e(Yi,nDo),e(Yi,IO),e(IO,sDo),e(Yi,lDo),e(Yi,qO),e(qO,iDo),e(Yi,dDo),e(qo,cDo),e(qo,Ey),e(Ey,fDo),e(Ey,Tge),e(Tge,mDo),e(Ey,gDo),e(qo,hDo),e(qo,mt),M(Cy,mt,null),e(mt,pDo),e(mt,Mge),e(Mge,uDo),e(mt,_Do),e(mt,Ki),e(Ki,bDo),e(Ki,Ege),e(Ege,vDo),e(Ki,FDo),e(Ki,NO),e(NO,TDo),e(Ki,MDo),e(mt,EDo),M(Qv,mt,null),e(qo,CDo),e(qo,no),M(wy,no,null),e(no,wDo),e(no,Cge),e(Cge,ADo),e(no,yDo),e(no,qa),e(qa,LDo),e(qa,wge),e(wge,xDo),e(qa,$Do),e(qa,Age),e(Age,kDo),e(qa,SDo),e(qa,yge),e(yge,RDo),e(qa,PDo),e(no,BDo),e(no,V),e(V,Hv),e(Hv,Lge),e(Lge,IDo),e(Hv,qDo),e(Hv,jO),e(jO,NDo),e(Hv,jDo),e(V,DDo),e(V,Uv),e(Uv,xge),e(xge,GDo),e(Uv,ODo),e(Uv,DO),e(DO,VDo),e(Uv,XDo),e(V,zDo),e(V,Jv),e(Jv,$ge),e($ge,WDo),e(Jv,QDo),e(Jv,GO),e(GO,HDo),e(Jv,UDo),e(V,JDo),e(V,Yv),e(Yv,kge),e(kge,YDo),e(Yv,KDo),e(Yv,OO),e(OO,ZDo),e(Yv,eGo),e(V,oGo),e(V,Kv),e(Kv,Sge),e(Sge,rGo),e(Kv,tGo),e(Kv,VO),e(VO,aGo),e(Kv,nGo),e(V,sGo),e(V,Zv),e(Zv,Rge),e(Rge,lGo),e(Zv,iGo),e(Zv,XO),e(XO,dGo),e(Zv,cGo),e(V,fGo),e(V,eF),e(eF,Pge),e(Pge,mGo),e(eF,gGo),e(eF,zO),e(zO,hGo),e(eF,pGo),e(V,uGo),e(V,oF),e(oF,Bge),e(Bge,_Go),e(oF,bGo),e(oF,WO),e(WO,vGo),e(oF,FGo),e(V,TGo),e(V,rF),e(rF,Ige),e(Ige,MGo),e(rF,EGo),e(rF,QO),e(QO,CGo),e(rF,wGo),e(V,AGo),e(V,tF),e(tF,qge),e(qge,yGo),e(tF,LGo),e(tF,HO),e(HO,xGo),e(tF,$Go),e(V,kGo),e(V,aF),e(aF,Nge),e(Nge,SGo),e(aF,RGo),e(aF,UO),e(UO,PGo),e(aF,BGo),e(V,IGo),e(V,nF),e(nF,jge),e(jge,qGo),e(nF,NGo),e(nF,JO),e(JO,jGo),e(nF,DGo),e(V,GGo),e(V,sF),e(sF,Dge),e(Dge,OGo),e(sF,VGo),e(sF,YO),e(YO,XGo),e(sF,zGo),e(V,WGo),e(V,lF),e(lF,Gge),e(Gge,QGo),e(lF,HGo),e(lF,KO),e(KO,UGo),e(lF,JGo),e(V,YGo),e(V,iF),e(iF,Oge),e(Oge,KGo),e(iF,ZGo),e(iF,ZO),e(ZO,eOo),e(iF,oOo),e(V,rOo),e(V,dF),e(dF,Vge),e(Vge,tOo),e(dF,aOo),e(dF,eV),e(eV,nOo),e(dF,sOo),e(V,lOo),e(V,cF),e(cF,Xge),e(Xge,iOo),e(cF,dOo),e(cF,oV),e(oV,cOo),e(cF,fOo),e(V,mOo),e(V,fF),e(fF,zge),e(zge,gOo),e(fF,hOo),e(fF,rV),e(rV,pOo),e(fF,uOo),e(V,_Oo),e(V,mF),e(mF,Wge),e(Wge,bOo),e(mF,vOo),e(mF,tV),e(tV,FOo),e(mF,TOo),e(V,MOo),e(V,gF),e(gF,Qge),e(Qge,EOo),e(gF,COo),e(gF,aV),e(aV,wOo),e(gF,AOo),e(V,yOo),e(V,hF),e(hF,Hge),e(Hge,LOo),e(hF,xOo),e(hF,nV),e(nV,$Oo),e(hF,kOo),e(V,SOo),e(V,pF),e(pF,Uge),e(Uge,ROo),e(pF,POo),e(pF,sV),e(sV,BOo),e(pF,IOo),e(V,qOo),e(V,uF),e(uF,Jge),e(Jge,NOo),e(uF,jOo),e(uF,lV),e(lV,DOo),e(uF,GOo),e(V,OOo),e(V,_F),e(_F,Yge),e(Yge,VOo),e(_F,XOo),e(_F,iV),e(iV,zOo),e(_F,WOo),e(V,QOo),e(V,bF),e(bF,Kge),e(Kge,HOo),e(bF,UOo),e(bF,dV),e(dV,JOo),e(bF,YOo),e(V,KOo),e(V,vF),e(vF,Zge),e(Zge,ZOo),e(vF,eVo),e(vF,cV),e(cV,oVo),e(vF,rVo),e(V,tVo),e(V,FF),e(FF,ehe),e(ehe,aVo),e(FF,nVo),e(FF,fV),e(fV,sVo),e(FF,lVo),e(V,iVo),e(V,TF),e(TF,ohe),e(ohe,dVo),e(TF,cVo),e(TF,mV),e(mV,fVo),e(TF,mVo),e(V,gVo),e(V,MF),e(MF,rhe),e(rhe,hVo),e(MF,pVo),e(MF,gV),e(gV,uVo),e(MF,_Vo),e(V,bVo),e(V,EF),e(EF,the),e(the,vVo),e(EF,FVo),e(EF,hV),e(hV,TVo),e(EF,MVo),e(V,EVo),e(V,CF),e(CF,ahe),e(ahe,CVo),e(CF,wVo),e(CF,pV),e(pV,AVo),e(CF,yVo),e(V,LVo),e(V,wF),e(wF,nhe),e(nhe,xVo),e(wF,$Vo),e(wF,uV),e(uV,kVo),e(wF,SVo),e(V,RVo),e(V,AF),e(AF,she),e(she,PVo),e(AF,BVo),e(AF,_V),e(_V,IVo),e(AF,qVo),e(V,NVo),e(V,yF),e(yF,lhe),e(lhe,jVo),e(yF,DVo),e(yF,bV),e(bV,GVo),e(yF,OVo),e(V,VVo),e(V,LF),e(LF,ihe),e(ihe,XVo),e(LF,zVo),e(LF,vV),e(vV,WVo),e(LF,QVo),e(V,HVo),e(V,xF),e(xF,dhe),e(dhe,UVo),e(xF,JVo),e(xF,FV),e(FV,YVo),e(xF,KVo),e(V,ZVo),e(V,$F),e($F,che),e(che,eXo),e($F,oXo),e($F,TV),e(TV,rXo),e($F,tXo),e(V,aXo),e(V,kF),e(kF,fhe),e(fhe,nXo),e(kF,sXo),e(kF,MV),e(MV,lXo),e(kF,iXo),e(V,dXo),e(V,SF),e(SF,mhe),e(mhe,cXo),e(SF,fXo),e(SF,EV),e(EV,mXo),e(SF,gXo),e(no,hXo),e(no,RF),e(RF,pXo),e(RF,ghe),e(ghe,uXo),e(RF,_Xo),e(RF,hhe),e(hhe,bXo),e(no,vXo),M(PF,no,null),b(f,JIe,_),b(f,Zi,_),e(Zi,BF),e(BF,phe),M(Ay,phe,null),e(Zi,FXo),e(Zi,uhe),e(uhe,TXo),b(f,YIe,_),b(f,No,_),M(yy,No,null),e(No,MXo),e(No,ed),e(ed,EXo),e(ed,CV),e(CV,CXo),e(ed,wXo),e(ed,wV),e(wV,AXo),e(ed,yXo),e(No,LXo),e(No,Ly),e(Ly,xXo),e(Ly,_he),e(_he,$Xo),e(Ly,kXo),e(No,SXo),e(No,gt),M(xy,gt,null),e(gt,RXo),e(gt,bhe),e(bhe,PXo),e(gt,BXo),e(gt,od),e(od,IXo),e(od,vhe),e(vhe,qXo),e(od,NXo),e(od,AV),e(AV,jXo),e(od,DXo),e(gt,GXo),M(IF,gt,null),e(No,OXo),e(No,so),M($y,so,null),e(so,VXo),e(so,Fhe),e(Fhe,XXo),e(so,zXo),e(so,Na),e(Na,WXo),e(Na,The),e(The,QXo),e(Na,HXo),e(Na,Mhe),e(Mhe,UXo),e(Na,JXo),e(Na,Ehe),e(Ehe,YXo),e(Na,KXo),e(so,ZXo),e(so,Che),e(Che,qF),e(qF,whe),e(whe,ezo),e(qF,ozo),e(qF,yV),e(yV,rzo),e(qF,tzo),e(so,azo),e(so,NF),e(NF,nzo),e(NF,Ahe),e(Ahe,szo),e(NF,lzo),e(NF,yhe),e(yhe,izo),e(so,dzo),M(jF,so,null),b(f,KIe,_),b(f,rd,_),e(rd,DF),e(DF,Lhe),M(ky,Lhe,null),e(rd,czo),e(rd,xhe),e(xhe,fzo),b(f,ZIe,_),b(f,jo,_),M(Sy,jo,null),e(jo,mzo),e(jo,td),e(td,gzo),e(td,LV),e(LV,hzo),e(td,pzo),e(td,xV),e(xV,uzo),e(td,_zo),e(jo,bzo),e(jo,Ry),e(Ry,vzo),e(Ry,$he),e($he,Fzo),e(Ry,Tzo),e(jo,Mzo),e(jo,ht),M(Py,ht,null),e(ht,Ezo),e(ht,khe),e(khe,Czo),e(ht,wzo),e(ht,ad),e(ad,Azo),e(ad,She),e(She,yzo),e(ad,Lzo),e(ad,$V),e($V,xzo),e(ad,$zo),e(ht,kzo),M(GF,ht,null),e(jo,Szo),e(jo,lo),M(By,lo,null),e(lo,Rzo),e(lo,Rhe),e(Rhe,Pzo),e(lo,Bzo),e(lo,ja),e(ja,Izo),e(ja,Phe),e(Phe,qzo),e(ja,Nzo),e(ja,Bhe),e(Bhe,jzo),e(ja,Dzo),e(ja,Ihe),e(Ihe,Gzo),e(ja,Ozo),e(lo,Vzo),e(lo,Fe),e(Fe,OF),e(OF,qhe),e(qhe,Xzo),e(OF,zzo),e(OF,kV),e(kV,Wzo),e(OF,Qzo),e(Fe,Hzo),e(Fe,VF),e(VF,Nhe),e(Nhe,Uzo),e(VF,Jzo),e(VF,SV),e(SV,Yzo),e(VF,Kzo),e(Fe,Zzo),e(Fe,XF),e(XF,jhe),e(jhe,eWo),e(XF,oWo),e(XF,RV),e(RV,rWo),e(XF,tWo),e(Fe,aWo),e(Fe,Rs),e(Rs,Dhe),e(Dhe,nWo),e(Rs,sWo),e(Rs,PV),e(PV,lWo),e(Rs,iWo),e(Rs,BV),e(BV,dWo),e(Rs,cWo),e(Fe,fWo),e(Fe,zF),e(zF,Ghe),e(Ghe,mWo),e(zF,gWo),e(zF,IV),e(IV,hWo),e(zF,pWo),e(Fe,uWo),e(Fe,pt),e(pt,Ohe),e(Ohe,_Wo),e(pt,bWo),e(pt,qV),e(qV,vWo),e(pt,FWo),e(pt,NV),e(NV,TWo),e(pt,MWo),e(pt,jV),e(jV,EWo),e(pt,CWo),e(Fe,wWo),e(Fe,WF),e(WF,Vhe),e(Vhe,AWo),e(WF,yWo),e(WF,DV),e(DV,LWo),e(WF,xWo),e(Fe,$Wo),e(Fe,QF),e(QF,Xhe),e(Xhe,kWo),e(QF,SWo),e(QF,GV),e(GV,RWo),e(QF,PWo),e(Fe,BWo),e(Fe,HF),e(HF,zhe),e(zhe,IWo),e(HF,qWo),e(HF,OV),e(OV,NWo),e(HF,jWo),e(Fe,DWo),e(Fe,UF),e(UF,Whe),e(Whe,GWo),e(UF,OWo),e(UF,VV),e(VV,VWo),e(UF,XWo),e(Fe,zWo),e(Fe,JF),e(JF,Qhe),e(Qhe,WWo),e(JF,QWo),e(JF,XV),e(XV,HWo),e(JF,UWo),e(Fe,JWo),e(Fe,YF),e(YF,Hhe),e(Hhe,YWo),e(YF,KWo),e(YF,zV),e(zV,ZWo),e(YF,eQo),e(Fe,oQo),e(Fe,KF),e(KF,Uhe),e(Uhe,rQo),e(KF,tQo),e(KF,WV),e(WV,aQo),e(KF,nQo),e(lo,sQo),e(lo,ZF),e(ZF,lQo),e(ZF,Jhe),e(Jhe,iQo),e(ZF,dQo),e(ZF,Yhe),e(Yhe,cQo),e(lo,fQo),M(e6,lo,null),b(f,eqe,_),b(f,nd,_),e(nd,o6),e(o6,Khe),M(Iy,Khe,null),e(nd,mQo),e(nd,Zhe),e(Zhe,gQo),b(f,oqe,_),b(f,Do,_),M(qy,Do,null),e(Do,hQo),e(Do,sd),e(sd,pQo),e(sd,QV),e(QV,uQo),e(sd,_Qo),e(sd,HV),e(HV,bQo),e(sd,vQo),e(Do,FQo),e(Do,Ny),e(Ny,TQo),e(Ny,epe),e(epe,MQo),e(Ny,EQo),e(Do,CQo),e(Do,ut),M(jy,ut,null),e(ut,wQo),e(ut,ope),e(ope,AQo),e(ut,yQo),e(ut,ld),e(ld,LQo),e(ld,rpe),e(rpe,xQo),e(ld,$Qo),e(ld,UV),e(UV,kQo),e(ld,SQo),e(ut,RQo),M(r6,ut,null),e(Do,PQo),e(Do,io),M(Dy,io,null),e(io,BQo),e(io,tpe),e(tpe,IQo),e(io,qQo),e(io,Da),e(Da,NQo),e(Da,ape),e(ape,jQo),e(Da,DQo),e(Da,npe),e(npe,GQo),e(Da,OQo),e(Da,spe),e(spe,VQo),e(Da,XQo),e(io,zQo),e(io,lpe),e(lpe,t6),e(t6,ipe),e(ipe,WQo),e(t6,QQo),e(t6,JV),e(JV,HQo),e(t6,UQo),e(io,JQo),e(io,a6),e(a6,YQo),e(a6,dpe),e(dpe,KQo),e(a6,ZQo),e(a6,cpe),e(cpe,eHo),e(io,oHo),M(n6,io,null),b(f,rqe,_),b(f,id,_),e(id,s6),e(s6,fpe),M(Gy,fpe,null),e(id,rHo),e(id,mpe),e(mpe,tHo),b(f,tqe,_),b(f,Go,_),M(Oy,Go,null),e(Go,aHo),e(Go,dd),e(dd,nHo),e(dd,YV),e(YV,sHo),e(dd,lHo),e(dd,KV),e(KV,iHo),e(dd,dHo),e(Go,cHo),e(Go,Vy),e(Vy,fHo),e(Vy,gpe),e(gpe,mHo),e(Vy,gHo),e(Go,hHo),e(Go,_t),M(Xy,_t,null),e(_t,pHo),e(_t,hpe),e(hpe,uHo),e(_t,_Ho),e(_t,cd),e(cd,bHo),e(cd,ppe),e(ppe,vHo),e(cd,FHo),e(cd,ZV),e(ZV,THo),e(cd,MHo),e(_t,EHo),M(l6,_t,null),e(Go,CHo),e(Go,co),M(zy,co,null),e(co,wHo),e(co,upe),e(upe,AHo),e(co,yHo),e(co,Ga),e(Ga,LHo),e(Ga,_pe),e(_pe,xHo),e(Ga,$Ho),e(Ga,bpe),e(bpe,kHo),e(Ga,SHo),e(Ga,vpe),e(vpe,RHo),e(Ga,PHo),e(co,BHo),e(co,ke),e(ke,i6),e(i6,Fpe),e(Fpe,IHo),e(i6,qHo),e(i6,eX),e(eX,NHo),e(i6,jHo),e(ke,DHo),e(ke,d6),e(d6,Tpe),e(Tpe,GHo),e(d6,OHo),e(d6,oX),e(oX,VHo),e(d6,XHo),e(ke,zHo),e(ke,c6),e(c6,Mpe),e(Mpe,WHo),e(c6,QHo),e(c6,rX),e(rX,HHo),e(c6,UHo),e(ke,JHo),e(ke,f6),e(f6,Epe),e(Epe,YHo),e(f6,KHo),e(f6,tX),e(tX,ZHo),e(f6,eUo),e(ke,oUo),e(ke,m6),e(m6,Cpe),e(Cpe,rUo),e(m6,tUo),e(m6,aX),e(aX,aUo),e(m6,nUo),e(ke,sUo),e(ke,g6),e(g6,wpe),e(wpe,lUo),e(g6,iUo),e(g6,nX),e(nX,dUo),e(g6,cUo),e(ke,fUo),e(ke,h6),e(h6,Ape),e(Ape,mUo),e(h6,gUo),e(h6,sX),e(sX,hUo),e(h6,pUo),e(ke,uUo),e(ke,p6),e(p6,ype),e(ype,_Uo),e(p6,bUo),e(p6,lX),e(lX,vUo),e(p6,FUo),e(ke,TUo),e(ke,u6),e(u6,Lpe),e(Lpe,MUo),e(u6,EUo),e(u6,iX),e(iX,CUo),e(u6,wUo),e(co,AUo),e(co,_6),e(_6,yUo),e(_6,xpe),e(xpe,LUo),e(_6,xUo),e(_6,$pe),e($pe,$Uo),e(co,kUo),M(b6,co,null),b(f,aqe,_),b(f,fd,_),e(fd,v6),e(v6,kpe),M(Wy,kpe,null),e(fd,SUo),e(fd,Spe),e(Spe,RUo),b(f,nqe,_),b(f,Oo,_),M(Qy,Oo,null),e(Oo,PUo),e(Oo,md),e(md,BUo),e(md,dX),e(dX,IUo),e(md,qUo),e(md,cX),e(cX,NUo),e(md,jUo),e(Oo,DUo),e(Oo,Hy),e(Hy,GUo),e(Hy,Rpe),e(Rpe,OUo),e(Hy,VUo),e(Oo,XUo),e(Oo,bt),M(Uy,bt,null),e(bt,zUo),e(bt,Ppe),e(Ppe,WUo),e(bt,QUo),e(bt,gd),e(gd,HUo),e(gd,Bpe),e(Bpe,UUo),e(gd,JUo),e(gd,fX),e(fX,YUo),e(gd,KUo),e(bt,ZUo),M(F6,bt,null),e(Oo,eJo),e(Oo,fo),M(Jy,fo,null),e(fo,oJo),e(fo,Ipe),e(Ipe,rJo),e(fo,tJo),e(fo,Oa),e(Oa,aJo),e(Oa,qpe),e(qpe,nJo),e(Oa,sJo),e(Oa,Npe),e(Npe,lJo),e(Oa,iJo),e(Oa,jpe),e(jpe,dJo),e(Oa,cJo),e(fo,fJo),e(fo,Kr),e(Kr,T6),e(T6,Dpe),e(Dpe,mJo),e(T6,gJo),e(T6,mX),e(mX,hJo),e(T6,pJo),e(Kr,uJo),e(Kr,M6),e(M6,Gpe),e(Gpe,_Jo),e(M6,bJo),e(M6,gX),e(gX,vJo),e(M6,FJo),e(Kr,TJo),e(Kr,E6),e(E6,Ope),e(Ope,MJo),e(E6,EJo),e(E6,hX),e(hX,CJo),e(E6,wJo),e(Kr,AJo),e(Kr,C6),e(C6,Vpe),e(Vpe,yJo),e(C6,LJo),e(C6,pX),e(pX,xJo),e(C6,$Jo),e(Kr,kJo),e(Kr,w6),e(w6,Xpe),e(Xpe,SJo),e(w6,RJo),e(w6,uX),e(uX,PJo),e(w6,BJo),e(fo,IJo),e(fo,A6),e(A6,qJo),e(A6,zpe),e(zpe,NJo),e(A6,jJo),e(A6,Wpe),e(Wpe,DJo),e(fo,GJo),M(y6,fo,null),b(f,sqe,_),b(f,hd,_),e(hd,L6),e(L6,Qpe),M(Yy,Qpe,null),e(hd,OJo),e(hd,Hpe),e(Hpe,VJo),b(f,lqe,_),b(f,Vo,_),M(Ky,Vo,null),e(Vo,XJo),e(Vo,pd),e(pd,zJo),e(pd,_X),e(_X,WJo),e(pd,QJo),e(pd,bX),e(bX,HJo),e(pd,UJo),e(Vo,JJo),e(Vo,Zy),e(Zy,YJo),e(Zy,Upe),e(Upe,KJo),e(Zy,ZJo),e(Vo,eYo),e(Vo,vt),M(eL,vt,null),e(vt,oYo),e(vt,Jpe),e(Jpe,rYo),e(vt,tYo),e(vt,ud),e(ud,aYo),e(ud,Ype),e(Ype,nYo),e(ud,sYo),e(ud,vX),e(vX,lYo),e(ud,iYo),e(vt,dYo),M(x6,vt,null),e(Vo,cYo),e(Vo,mo),M(oL,mo,null),e(mo,fYo),e(mo,Kpe),e(Kpe,mYo),e(mo,gYo),e(mo,Va),e(Va,hYo),e(Va,Zpe),e(Zpe,pYo),e(Va,uYo),e(Va,eue),e(eue,_Yo),e(Va,bYo),e(Va,oue),e(oue,vYo),e(Va,FYo),e(mo,TYo),e(mo,Se),e(Se,$6),e($6,rue),e(rue,MYo),e($6,EYo),e($6,FX),e(FX,CYo),e($6,wYo),e(Se,AYo),e(Se,k6),e(k6,tue),e(tue,yYo),e(k6,LYo),e(k6,TX),e(TX,xYo),e(k6,$Yo),e(Se,kYo),e(Se,S6),e(S6,aue),e(aue,SYo),e(S6,RYo),e(S6,MX),e(MX,PYo),e(S6,BYo),e(Se,IYo),e(Se,R6),e(R6,nue),e(nue,qYo),e(R6,NYo),e(R6,EX),e(EX,jYo),e(R6,DYo),e(Se,GYo),e(Se,P6),e(P6,sue),e(sue,OYo),e(P6,VYo),e(P6,CX),e(CX,XYo),e(P6,zYo),e(Se,WYo),e(Se,B6),e(B6,lue),e(lue,QYo),e(B6,HYo),e(B6,wX),e(wX,UYo),e(B6,JYo),e(Se,YYo),e(Se,I6),e(I6,iue),e(iue,KYo),e(I6,ZYo),e(I6,AX),e(AX,eKo),e(I6,oKo),e(Se,rKo),e(Se,q6),e(q6,due),e(due,tKo),e(q6,aKo),e(q6,yX),e(yX,nKo),e(q6,sKo),e(Se,lKo),e(Se,N6),e(N6,cue),e(cue,iKo),e(N6,dKo),e(N6,LX),e(LX,cKo),e(N6,fKo),e(mo,mKo),e(mo,j6),e(j6,gKo),e(j6,fue),e(fue,hKo),e(j6,pKo),e(j6,mue),e(mue,uKo),e(mo,_Ko),M(D6,mo,null),b(f,iqe,_),b(f,_d,_),e(_d,G6),e(G6,gue),M(rL,gue,null),e(_d,bKo),e(_d,hue),e(hue,vKo),b(f,dqe,_),b(f,Xo,_),M(tL,Xo,null),e(Xo,FKo),e(Xo,bd),e(bd,TKo),e(bd,xX),e(xX,MKo),e(bd,EKo),e(bd,$X),e($X,CKo),e(bd,wKo),e(Xo,AKo),e(Xo,aL),e(aL,yKo),e(aL,pue),e(pue,LKo),e(aL,xKo),e(Xo,$Ko),e(Xo,Ft),M(nL,Ft,null),e(Ft,kKo),e(Ft,uue),e(uue,SKo),e(Ft,RKo),e(Ft,vd),e(vd,PKo),e(vd,_ue),e(_ue,BKo),e(vd,IKo),e(vd,kX),e(kX,qKo),e(vd,NKo),e(Ft,jKo),M(O6,Ft,null),e(Xo,DKo),e(Xo,go),M(sL,go,null),e(go,GKo),e(go,bue),e(bue,OKo),e(go,VKo),e(go,Xa),e(Xa,XKo),e(Xa,vue),e(vue,zKo),e(Xa,WKo),e(Xa,Fue),e(Fue,QKo),e(Xa,HKo),e(Xa,Tue),e(Tue,UKo),e(Xa,JKo),e(go,YKo),e(go,lL),e(lL,V6),e(V6,Mue),e(Mue,KKo),e(V6,ZKo),e(V6,SX),e(SX,eZo),e(V6,oZo),e(lL,rZo),e(lL,X6),e(X6,Eue),e(Eue,tZo),e(X6,aZo),e(X6,RX),e(RX,nZo),e(X6,sZo),e(go,lZo),e(go,z6),e(z6,iZo),e(z6,Cue),e(Cue,dZo),e(z6,cZo),e(z6,wue),e(wue,fZo),e(go,mZo),M(W6,go,null),b(f,cqe,_),b(f,Fd,_),e(Fd,Q6),e(Q6,Aue),M(iL,Aue,null),e(Fd,gZo),e(Fd,yue),e(yue,hZo),b(f,fqe,_),b(f,zo,_),M(dL,zo,null),e(zo,pZo),e(zo,Td),e(Td,uZo),e(Td,PX),e(PX,_Zo),e(Td,bZo),e(Td,BX),e(BX,vZo),e(Td,FZo),e(zo,TZo),e(zo,cL),e(cL,MZo),e(cL,Lue),e(Lue,EZo),e(cL,CZo),e(zo,wZo),e(zo,Tt),M(fL,Tt,null),e(Tt,AZo),e(Tt,xue),e(xue,yZo),e(Tt,LZo),e(Tt,Md),e(Md,xZo),e(Md,$ue),e($ue,$Zo),e(Md,kZo),e(Md,IX),e(IX,SZo),e(Md,RZo),e(Tt,PZo),M(H6,Tt,null),e(zo,BZo),e(zo,ho),M(mL,ho,null),e(ho,IZo),e(ho,kue),e(kue,qZo),e(ho,NZo),e(ho,za),e(za,jZo),e(za,Sue),e(Sue,DZo),e(za,GZo),e(za,Rue),e(Rue,OZo),e(za,VZo),e(za,Pue),e(Pue,XZo),e(za,zZo),e(ho,WZo),e(ho,Zr),e(Zr,U6),e(U6,Bue),e(Bue,QZo),e(U6,HZo),e(U6,qX),e(qX,UZo),e(U6,JZo),e(Zr,YZo),e(Zr,J6),e(J6,Iue),e(Iue,KZo),e(J6,ZZo),e(J6,NX),e(NX,eer),e(J6,oer),e(Zr,rer),e(Zr,Y6),e(Y6,que),e(que,ter),e(Y6,aer),e(Y6,jX),e(jX,ner),e(Y6,ser),e(Zr,ler),e(Zr,K6),e(K6,Nue),e(Nue,ier),e(K6,der),e(K6,DX),e(DX,cer),e(K6,fer),e(Zr,mer),e(Zr,Z6),e(Z6,jue),e(jue,ger),e(Z6,her),e(Z6,GX),e(GX,per),e(Z6,uer),e(ho,_er),e(ho,eT),e(eT,ber),e(eT,Due),e(Due,ver),e(eT,Fer),e(eT,Gue),e(Gue,Ter),e(ho,Mer),M(oT,ho,null),b(f,mqe,_),b(f,Ed,_),e(Ed,rT),e(rT,Oue),M(gL,Oue,null),e(Ed,Eer),e(Ed,Vue),e(Vue,Cer),b(f,gqe,_),b(f,Wo,_),M(hL,Wo,null),e(Wo,wer),e(Wo,Cd),e(Cd,Aer),e(Cd,OX),e(OX,yer),e(Cd,Ler),e(Cd,VX),e(VX,xer),e(Cd,$er),e(Wo,ker),e(Wo,pL),e(pL,Ser),e(pL,Xue),e(Xue,Rer),e(pL,Per),e(Wo,Ber),e(Wo,Mt),M(uL,Mt,null),e(Mt,Ier),e(Mt,zue),e(zue,qer),e(Mt,Ner),e(Mt,wd),e(wd,jer),e(wd,Wue),e(Wue,Der),e(wd,Ger),e(wd,XX),e(XX,Oer),e(wd,Ver),e(Mt,Xer),M(tT,Mt,null),e(Wo,zer),e(Wo,po),M(_L,po,null),e(po,Wer),e(po,Que),e(Que,Qer),e(po,Her),e(po,Wa),e(Wa,Uer),e(Wa,Hue),e(Hue,Jer),e(Wa,Yer),e(Wa,Uue),e(Uue,Ker),e(Wa,Zer),e(Wa,Jue),e(Jue,eor),e(Wa,oor),e(po,ror),e(po,Ad),e(Ad,aT),e(aT,Yue),e(Yue,tor),e(aT,aor),e(aT,zX),e(zX,nor),e(aT,sor),e(Ad,lor),e(Ad,nT),e(nT,Kue),e(Kue,ior),e(nT,dor),e(nT,WX),e(WX,cor),e(nT,mor),e(Ad,gor),e(Ad,sT),e(sT,Zue),e(Zue,hor),e(sT,por),e(sT,QX),e(QX,uor),e(sT,_or),e(po,bor),e(po,lT),e(lT,vor),e(lT,e_e),e(e_e,For),e(lT,Tor),e(lT,o_e),e(o_e,Mor),e(po,Eor),M(iT,po,null),b(f,hqe,_),b(f,yd,_),e(yd,dT),e(dT,r_e),M(bL,r_e,null),e(yd,Cor),e(yd,t_e),e(t_e,wor),b(f,pqe,_),b(f,Qo,_),M(vL,Qo,null),e(Qo,Aor),e(Qo,Ld),e(Ld,yor),e(Ld,HX),e(HX,Lor),e(Ld,xor),e(Ld,UX),e(UX,$or),e(Ld,kor),e(Qo,Sor),e(Qo,FL),e(FL,Ror),e(FL,a_e),e(a_e,Por),e(FL,Bor),e(Qo,Ior),e(Qo,Et),M(TL,Et,null),e(Et,qor),e(Et,n_e),e(n_e,Nor),e(Et,jor),e(Et,xd),e(xd,Dor),e(xd,s_e),e(s_e,Gor),e(xd,Oor),e(xd,JX),e(JX,Vor),e(xd,Xor),e(Et,zor),M(cT,Et,null),e(Qo,Wor),e(Qo,uo),M(ML,uo,null),e(uo,Qor),e(uo,l_e),e(l_e,Hor),e(uo,Uor),e(uo,Qa),e(Qa,Jor),e(Qa,i_e),e(i_e,Yor),e(Qa,Kor),e(Qa,d_e),e(d_e,Zor),e(Qa,err),e(Qa,c_e),e(c_e,orr),e(Qa,rrr),e(uo,trr),e(uo,EL),e(EL,fT),e(fT,f_e),e(f_e,arr),e(fT,nrr),e(fT,YX),e(YX,srr),e(fT,lrr),e(EL,irr),e(EL,mT),e(mT,m_e),e(m_e,drr),e(mT,crr),e(mT,KX),e(KX,frr),e(mT,mrr),e(uo,grr),e(uo,gT),e(gT,hrr),e(gT,g_e),e(g_e,prr),e(gT,urr),e(gT,h_e),e(h_e,_rr),e(uo,brr),M(hT,uo,null),b(f,uqe,_),b(f,$d,_),e($d,pT),e(pT,p_e),M(CL,p_e,null),e($d,vrr),e($d,u_e),e(u_e,Frr),b(f,_qe,_),b(f,Ho,_),M(wL,Ho,null),e(Ho,Trr),e(Ho,kd),e(kd,Mrr),e(kd,ZX),e(ZX,Err),e(kd,Crr),e(kd,ez),e(ez,wrr),e(kd,Arr),e(Ho,yrr),e(Ho,AL),e(AL,Lrr),e(AL,__e),e(__e,xrr),e(AL,$rr),e(Ho,krr),e(Ho,Ct),M(yL,Ct,null),e(Ct,Srr),e(Ct,b_e),e(b_e,Rrr),e(Ct,Prr),e(Ct,Sd),e(Sd,Brr),e(Sd,v_e),e(v_e,Irr),e(Sd,qrr),e(Sd,oz),e(oz,Nrr),e(Sd,jrr),e(Ct,Drr),M(uT,Ct,null),e(Ho,Grr),e(Ho,_o),M(LL,_o,null),e(_o,Orr),e(_o,F_e),e(F_e,Vrr),e(_o,Xrr),e(_o,Ha),e(Ha,zrr),e(Ha,T_e),e(T_e,Wrr),e(Ha,Qrr),e(Ha,M_e),e(M_e,Hrr),e(Ha,Urr),e(Ha,E_e),e(E_e,Jrr),e(Ha,Yrr),e(_o,Krr),e(_o,C_e),e(C_e,_T),e(_T,w_e),e(w_e,Zrr),e(_T,etr),e(_T,rz),e(rz,otr),e(_T,rtr),e(_o,ttr),e(_o,bT),e(bT,atr),e(bT,A_e),e(A_e,ntr),e(bT,str),e(bT,y_e),e(y_e,ltr),e(_o,itr),M(vT,_o,null),b(f,bqe,_),b(f,Rd,_),e(Rd,FT),e(FT,L_e),M(xL,L_e,null),e(Rd,dtr),e(Rd,x_e),e(x_e,ctr),b(f,vqe,_),b(f,Uo,_),M($L,Uo,null),e(Uo,ftr),e(Uo,Pd),e(Pd,mtr),e(Pd,tz),e(tz,gtr),e(Pd,htr),e(Pd,az),e(az,ptr),e(Pd,utr),e(Uo,_tr),e(Uo,kL),e(kL,btr),e(kL,$_e),e($_e,vtr),e(kL,Ftr),e(Uo,Ttr),e(Uo,wt),M(SL,wt,null),e(wt,Mtr),e(wt,k_e),e(k_e,Etr),e(wt,Ctr),e(wt,Bd),e(Bd,wtr),e(Bd,S_e),e(S_e,Atr),e(Bd,ytr),e(Bd,nz),e(nz,Ltr),e(Bd,xtr),e(wt,$tr),M(TT,wt,null),e(Uo,ktr),e(Uo,bo),M(RL,bo,null),e(bo,Str),e(bo,R_e),e(R_e,Rtr),e(bo,Ptr),e(bo,Ua),e(Ua,Btr),e(Ua,P_e),e(P_e,Itr),e(Ua,qtr),e(Ua,B_e),e(B_e,Ntr),e(Ua,jtr),e(Ua,I_e),e(I_e,Dtr),e(Ua,Gtr),e(bo,Otr),e(bo,Ja),e(Ja,MT),e(MT,q_e),e(q_e,Vtr),e(MT,Xtr),e(MT,sz),e(sz,ztr),e(MT,Wtr),e(Ja,Qtr),e(Ja,ET),e(ET,N_e),e(N_e,Htr),e(ET,Utr),e(ET,lz),e(lz,Jtr),e(ET,Ytr),e(Ja,Ktr),e(Ja,CT),e(CT,j_e),e(j_e,Ztr),e(CT,ear),e(CT,iz),e(iz,oar),e(CT,rar),e(Ja,tar),e(Ja,wT),e(wT,D_e),e(D_e,aar),e(wT,nar),e(wT,dz),e(dz,sar),e(wT,lar),e(bo,iar),e(bo,AT),e(AT,dar),e(AT,G_e),e(G_e,car),e(AT,far),e(AT,O_e),e(O_e,mar),e(bo,gar),M(yT,bo,null),b(f,Fqe,_),b(f,Id,_),e(Id,LT),e(LT,V_e),M(PL,V_e,null),e(Id,har),e(Id,X_e),e(X_e,par),b(f,Tqe,_),b(f,Jo,_),M(BL,Jo,null),e(Jo,uar),e(Jo,qd),e(qd,_ar),e(qd,cz),e(cz,bar),e(qd,Far),e(qd,fz),e(fz,Tar),e(qd,Mar),e(Jo,Ear),e(Jo,IL),e(IL,Car),e(IL,z_e),e(z_e,war),e(IL,Aar),e(Jo,yar),e(Jo,At),M(qL,At,null),e(At,Lar),e(At,W_e),e(W_e,xar),e(At,$ar),e(At,Nd),e(Nd,kar),e(Nd,Q_e),e(Q_e,Sar),e(Nd,Rar),e(Nd,mz),e(mz,Par),e(Nd,Bar),e(At,Iar),M(xT,At,null),e(Jo,qar),e(Jo,vo),M(NL,vo,null),e(vo,Nar),e(vo,H_e),e(H_e,jar),e(vo,Dar),e(vo,Ya),e(Ya,Gar),e(Ya,U_e),e(U_e,Oar),e(Ya,Var),e(Ya,J_e),e(J_e,Xar),e(Ya,zar),e(Ya,Y_e),e(Y_e,War),e(Ya,Qar),e(vo,Har),e(vo,K_e),e(K_e,$T),e($T,Z_e),e(Z_e,Uar),e($T,Jar),e($T,gz),e(gz,Yar),e($T,Kar),e(vo,Zar),e(vo,kT),e(kT,enr),e(kT,e1e),e(e1e,onr),e(kT,rnr),e(kT,o1e),e(o1e,tnr),e(vo,anr),M(ST,vo,null),b(f,Mqe,_),b(f,jd,_),e(jd,RT),e(RT,r1e),M(jL,r1e,null),e(jd,nnr),e(jd,t1e),e(t1e,snr),b(f,Eqe,_),b(f,Yo,_),M(DL,Yo,null),e(Yo,lnr),e(Yo,Dd),e(Dd,inr),e(Dd,hz),e(hz,dnr),e(Dd,cnr),e(Dd,pz),e(pz,fnr),e(Dd,mnr),e(Yo,gnr),e(Yo,GL),e(GL,hnr),e(GL,a1e),e(a1e,pnr),e(GL,unr),e(Yo,_nr),e(Yo,yt),M(OL,yt,null),e(yt,bnr),e(yt,n1e),e(n1e,vnr),e(yt,Fnr),e(yt,Gd),e(Gd,Tnr),e(Gd,s1e),e(s1e,Mnr),e(Gd,Enr),e(Gd,uz),e(uz,Cnr),e(Gd,wnr),e(yt,Anr),M(PT,yt,null),e(Yo,ynr),e(Yo,wr),M(VL,wr,null),e(wr,Lnr),e(wr,l1e),e(l1e,xnr),e(wr,$nr),e(wr,Ka),e(Ka,knr),e(Ka,i1e),e(i1e,Snr),e(Ka,Rnr),e(Ka,d1e),e(d1e,Pnr),e(Ka,Bnr),e(Ka,c1e),e(c1e,Inr),e(Ka,qnr),e(wr,Nnr),e(wr,N),e(N,BT),e(BT,f1e),e(f1e,jnr),e(BT,Dnr),e(BT,_z),e(_z,Gnr),e(BT,Onr),e(N,Vnr),e(N,IT),e(IT,m1e),e(m1e,Xnr),e(IT,znr),e(IT,bz),e(bz,Wnr),e(IT,Qnr),e(N,Hnr),e(N,qT),e(qT,g1e),e(g1e,Unr),e(qT,Jnr),e(qT,vz),e(vz,Ynr),e(qT,Knr),e(N,Znr),e(N,NT),e(NT,h1e),e(h1e,esr),e(NT,osr),e(NT,Fz),e(Fz,rsr),e(NT,tsr),e(N,asr),e(N,jT),e(jT,p1e),e(p1e,nsr),e(jT,ssr),e(jT,Tz),e(Tz,lsr),e(jT,isr),e(N,dsr),e(N,DT),e(DT,u1e),e(u1e,csr),e(DT,fsr),e(DT,Mz),e(Mz,msr),e(DT,gsr),e(N,hsr),e(N,GT),e(GT,_1e),e(_1e,psr),e(GT,usr),e(GT,Ez),e(Ez,_sr),e(GT,bsr),e(N,vsr),e(N,OT),e(OT,b1e),e(b1e,Fsr),e(OT,Tsr),e(OT,Cz),e(Cz,Msr),e(OT,Esr),e(N,Csr),e(N,VT),e(VT,v1e),e(v1e,wsr),e(VT,Asr),e(VT,wz),e(wz,ysr),e(VT,Lsr),e(N,xsr),e(N,XT),e(XT,F1e),e(F1e,$sr),e(XT,ksr),e(XT,Az),e(Az,Ssr),e(XT,Rsr),e(N,Psr),e(N,zT),e(zT,T1e),e(T1e,Bsr),e(zT,Isr),e(zT,yz),e(yz,qsr),e(zT,Nsr),e(N,jsr),e(N,WT),e(WT,M1e),e(M1e,Dsr),e(WT,Gsr),e(WT,Lz),e(Lz,Osr),e(WT,Vsr),e(N,Xsr),e(N,QT),e(QT,E1e),e(E1e,zsr),e(QT,Wsr),e(QT,xz),e(xz,Qsr),e(QT,Hsr),e(N,Usr),e(N,HT),e(HT,C1e),e(C1e,Jsr),e(HT,Ysr),e(HT,$z),e($z,Ksr),e(HT,Zsr),e(N,elr),e(N,UT),e(UT,w1e),e(w1e,olr),e(UT,rlr),e(UT,kz),e(kz,tlr),e(UT,alr),e(N,nlr),e(N,JT),e(JT,A1e),e(A1e,slr),e(JT,llr),e(JT,Sz),e(Sz,ilr),e(JT,dlr),e(N,clr),e(N,YT),e(YT,y1e),e(y1e,flr),e(YT,mlr),e(YT,Rz),e(Rz,glr),e(YT,hlr),e(N,plr),e(N,Ps),e(Ps,L1e),e(L1e,ulr),e(Ps,_lr),e(Ps,Pz),e(Pz,blr),e(Ps,vlr),e(Ps,Bz),e(Bz,Flr),e(Ps,Tlr),e(N,Mlr),e(N,KT),e(KT,x1e),e(x1e,Elr),e(KT,Clr),e(KT,Iz),e(Iz,wlr),e(KT,Alr),e(N,ylr),e(N,ZT),e(ZT,$1e),e($1e,Llr),e(ZT,xlr),e(ZT,qz),e(qz,$lr),e(ZT,klr),e(N,Slr),e(N,e8),e(e8,k1e),e(k1e,Rlr),e(e8,Plr),e(e8,Nz),e(Nz,Blr),e(e8,Ilr),e(N,qlr),e(N,o8),e(o8,S1e),e(S1e,Nlr),e(o8,jlr),e(o8,jz),e(jz,Dlr),e(o8,Glr),e(N,Olr),e(N,r8),e(r8,R1e),e(R1e,Vlr),e(r8,Xlr),e(r8,Dz),e(Dz,zlr),e(r8,Wlr),e(N,Qlr),e(N,t8),e(t8,P1e),e(P1e,Hlr),e(t8,Ulr),e(t8,Gz),e(Gz,Jlr),e(t8,Ylr),e(N,Klr),e(N,a8),e(a8,B1e),e(B1e,Zlr),e(a8,eir),e(a8,Oz),e(Oz,oir),e(a8,rir),e(N,tir),e(N,n8),e(n8,I1e),e(I1e,air),e(n8,nir),e(n8,Vz),e(Vz,sir),e(n8,lir),e(N,iir),e(N,s8),e(s8,q1e),e(q1e,dir),e(s8,cir),e(s8,Xz),e(Xz,fir),e(s8,mir),e(N,gir),e(N,l8),e(l8,N1e),e(N1e,hir),e(l8,pir),e(l8,zz),e(zz,uir),e(l8,_ir),e(N,bir),e(N,i8),e(i8,j1e),e(j1e,vir),e(i8,Fir),e(i8,Wz),e(Wz,Tir),e(i8,Mir),e(N,Eir),e(N,d8),e(d8,D1e),e(D1e,Cir),e(d8,wir),e(d8,Qz),e(Qz,Air),e(d8,yir),e(N,Lir),e(N,c8),e(c8,G1e),e(G1e,xir),e(c8,$ir),e(c8,Hz),e(Hz,kir),e(c8,Sir),e(N,Rir),e(N,f8),e(f8,O1e),e(O1e,Pir),e(f8,Bir),e(f8,Uz),e(Uz,Iir),e(f8,qir),e(N,Nir),e(N,m8),e(m8,V1e),e(V1e,jir),e(m8,Dir),e(m8,Jz),e(Jz,Gir),e(m8,Oir),e(N,Vir),e(N,g8),e(g8,X1e),e(X1e,Xir),e(g8,zir),e(g8,Yz),e(Yz,Wir),e(g8,Qir),e(N,Hir),e(N,h8),e(h8,z1e),e(z1e,Uir),e(h8,Jir),e(h8,Kz),e(Kz,Yir),e(h8,Kir),e(N,Zir),e(N,p8),e(p8,W1e),e(W1e,edr),e(p8,odr),e(p8,Zz),e(Zz,rdr),e(p8,tdr),e(N,adr),e(N,u8),e(u8,Q1e),e(Q1e,ndr),e(u8,sdr),e(u8,eW),e(eW,ldr),e(u8,idr),e(N,ddr),e(N,_8),e(_8,H1e),e(H1e,cdr),e(_8,fdr),e(_8,oW),e(oW,mdr),e(_8,gdr),e(N,hdr),e(N,b8),e(b8,U1e),e(U1e,pdr),e(b8,udr),e(b8,rW),e(rW,_dr),e(b8,bdr),e(N,vdr),e(N,v8),e(v8,J1e),e(J1e,Fdr),e(v8,Tdr),e(v8,tW),e(tW,Mdr),e(v8,Edr),e(N,Cdr),e(N,F8),e(F8,Y1e),e(Y1e,wdr),e(F8,Adr),e(F8,aW),e(aW,ydr),e(F8,Ldr),e(N,xdr),e(N,T8),e(T8,K1e),e(K1e,$dr),e(T8,kdr),e(T8,nW),e(nW,Sdr),e(T8,Rdr),e(N,Pdr),e(N,M8),e(M8,Z1e),e(Z1e,Bdr),e(M8,Idr),e(M8,sW),e(sW,qdr),e(M8,Ndr),e(N,jdr),e(N,E8),e(E8,e2e),e(e2e,Ddr),e(E8,Gdr),e(E8,lW),e(lW,Odr),e(E8,Vdr),e(N,Xdr),e(N,C8),e(C8,o2e),e(o2e,zdr),e(C8,Wdr),e(C8,iW),e(iW,Qdr),e(C8,Hdr),e(wr,Udr),M(w8,wr,null),b(f,Cqe,_),b(f,Od,_),e(Od,A8),e(A8,r2e),M(XL,r2e,null),e(Od,Jdr),e(Od,t2e),e(t2e,Ydr),b(f,wqe,_),b(f,Ko,_),M(zL,Ko,null),e(Ko,Kdr),e(Ko,Vd),e(Vd,Zdr),e(Vd,dW),e(dW,ecr),e(Vd,ocr),e(Vd,cW),e(cW,rcr),e(Vd,tcr),e(Ko,acr),e(Ko,WL),e(WL,ncr),e(WL,a2e),e(a2e,scr),e(WL,lcr),e(Ko,icr),e(Ko,Lt),M(QL,Lt,null),e(Lt,dcr),e(Lt,n2e),e(n2e,ccr),e(Lt,fcr),e(Lt,Xd),e(Xd,mcr),e(Xd,s2e),e(s2e,gcr),e(Xd,hcr),e(Xd,fW),e(fW,pcr),e(Xd,ucr),e(Lt,_cr),M(y8,Lt,null),e(Ko,bcr),e(Ko,Ar),M(HL,Ar,null),e(Ar,vcr),e(Ar,l2e),e(l2e,Fcr),e(Ar,Tcr),e(Ar,Za),e(Za,Mcr),e(Za,i2e),e(i2e,Ecr),e(Za,Ccr),e(Za,d2e),e(d2e,wcr),e(Za,Acr),e(Za,c2e),e(c2e,ycr),e(Za,Lcr),e(Ar,xcr),e(Ar,se),e(se,L8),e(L8,f2e),e(f2e,$cr),e(L8,kcr),e(L8,mW),e(mW,Scr),e(L8,Rcr),e(se,Pcr),e(se,x8),e(x8,m2e),e(m2e,Bcr),e(x8,Icr),e(x8,gW),e(gW,qcr),e(x8,Ncr),e(se,jcr),e(se,$8),e($8,g2e),e(g2e,Dcr),e($8,Gcr),e($8,hW),e(hW,Ocr),e($8,Vcr),e(se,Xcr),e(se,k8),e(k8,h2e),e(h2e,zcr),e(k8,Wcr),e(k8,pW),e(pW,Qcr),e(k8,Hcr),e(se,Ucr),e(se,S8),e(S8,p2e),e(p2e,Jcr),e(S8,Ycr),e(S8,uW),e(uW,Kcr),e(S8,Zcr),e(se,efr),e(se,R8),e(R8,u2e),e(u2e,ofr),e(R8,rfr),e(R8,_W),e(_W,tfr),e(R8,afr),e(se,nfr),e(se,P8),e(P8,_2e),e(_2e,sfr),e(P8,lfr),e(P8,bW),e(bW,ifr),e(P8,dfr),e(se,cfr),e(se,B8),e(B8,b2e),e(b2e,ffr),e(B8,mfr),e(B8,vW),e(vW,gfr),e(B8,hfr),e(se,pfr),e(se,I8),e(I8,v2e),e(v2e,ufr),e(I8,_fr),e(I8,FW),e(FW,bfr),e(I8,vfr),e(se,Ffr),e(se,q8),e(q8,F2e),e(F2e,Tfr),e(q8,Mfr),e(q8,TW),e(TW,Efr),e(q8,Cfr),e(se,wfr),e(se,N8),e(N8,T2e),e(T2e,Afr),e(N8,yfr),e(N8,MW),e(MW,Lfr),e(N8,xfr),e(se,$fr),e(se,j8),e(j8,M2e),e(M2e,kfr),e(j8,Sfr),e(j8,EW),e(EW,Rfr),e(j8,Pfr),e(se,Bfr),e(se,D8),e(D8,E2e),e(E2e,Ifr),e(D8,qfr),e(D8,CW),e(CW,Nfr),e(D8,jfr),e(se,Dfr),e(se,G8),e(G8,C2e),e(C2e,Gfr),e(G8,Ofr),e(G8,wW),e(wW,Vfr),e(G8,Xfr),e(se,zfr),e(se,O8),e(O8,w2e),e(w2e,Wfr),e(O8,Qfr),e(O8,AW),e(AW,Hfr),e(O8,Ufr),e(se,Jfr),e(se,V8),e(V8,A2e),e(A2e,Yfr),e(V8,Kfr),e(V8,yW),e(yW,Zfr),e(V8,emr),e(se,omr),e(se,X8),e(X8,y2e),e(y2e,rmr),e(X8,tmr),e(X8,LW),e(LW,amr),e(X8,nmr),e(se,smr),e(se,z8),e(z8,L2e),e(L2e,lmr),e(z8,imr),e(z8,xW),e(xW,dmr),e(z8,cmr),e(se,fmr),e(se,W8),e(W8,x2e),e(x2e,mmr),e(W8,gmr),e(W8,$W),e($W,hmr),e(W8,pmr),e(se,umr),e(se,Q8),e(Q8,$2e),e($2e,_mr),e(Q8,bmr),e(Q8,kW),e(kW,vmr),e(Q8,Fmr),e(se,Tmr),e(se,H8),e(H8,k2e),e(k2e,Mmr),e(H8,Emr),e(H8,SW),e(SW,Cmr),e(H8,wmr),e(se,Amr),e(se,U8),e(U8,S2e),e(S2e,ymr),e(U8,Lmr),e(U8,RW),e(RW,xmr),e(U8,$mr),e(se,kmr),e(se,J8),e(J8,R2e),e(R2e,Smr),e(J8,Rmr),e(J8,PW),e(PW,Pmr),e(J8,Bmr),e(Ar,Imr),M(Y8,Ar,null),b(f,Aqe,_),b(f,zd,_),e(zd,K8),e(K8,P2e),M(UL,P2e,null),e(zd,qmr),e(zd,B2e),e(B2e,Nmr),b(f,yqe,_),b(f,Zo,_),M(JL,Zo,null),e(Zo,jmr),e(Zo,Wd),e(Wd,Dmr),e(Wd,BW),e(BW,Gmr),e(Wd,Omr),e(Wd,IW),e(IW,Vmr),e(Wd,Xmr),e(Zo,zmr),e(Zo,YL),e(YL,Wmr),e(YL,I2e),e(I2e,Qmr),e(YL,Hmr),e(Zo,Umr),e(Zo,xt),M(KL,xt,null),e(xt,Jmr),e(xt,q2e),e(q2e,Ymr),e(xt,Kmr),e(xt,Qd),e(Qd,Zmr),e(Qd,N2e),e(N2e,egr),e(Qd,ogr),e(Qd,qW),e(qW,rgr),e(Qd,tgr),e(xt,agr),M(Z8,xt,null),e(Zo,ngr),e(Zo,yr),M(ZL,yr,null),e(yr,sgr),e(yr,j2e),e(j2e,lgr),e(yr,igr),e(yr,en),e(en,dgr),e(en,D2e),e(D2e,cgr),e(en,fgr),e(en,G2e),e(G2e,mgr),e(en,ggr),e(en,O2e),e(O2e,hgr),e(en,pgr),e(yr,ugr),e(yr,Te),e(Te,eM),e(eM,V2e),e(V2e,_gr),e(eM,bgr),e(eM,NW),e(NW,vgr),e(eM,Fgr),e(Te,Tgr),e(Te,oM),e(oM,X2e),e(X2e,Mgr),e(oM,Egr),e(oM,jW),e(jW,Cgr),e(oM,wgr),e(Te,Agr),e(Te,rM),e(rM,z2e),e(z2e,ygr),e(rM,Lgr),e(rM,DW),e(DW,xgr),e(rM,$gr),e(Te,kgr),e(Te,tM),e(tM,W2e),e(W2e,Sgr),e(tM,Rgr),e(tM,GW),e(GW,Pgr),e(tM,Bgr),e(Te,Igr),e(Te,aM),e(aM,Q2e),e(Q2e,qgr),e(aM,Ngr),e(aM,OW),e(OW,jgr),e(aM,Dgr),e(Te,Ggr),e(Te,nM),e(nM,H2e),e(H2e,Ogr),e(nM,Vgr),e(nM,VW),e(VW,Xgr),e(nM,zgr),e(Te,Wgr),e(Te,sM),e(sM,U2e),e(U2e,Qgr),e(sM,Hgr),e(sM,XW),e(XW,Ugr),e(sM,Jgr),e(Te,Ygr),e(Te,lM),e(lM,J2e),e(J2e,Kgr),e(lM,Zgr),e(lM,zW),e(zW,ehr),e(lM,ohr),e(Te,rhr),e(Te,iM),e(iM,Y2e),e(Y2e,thr),e(iM,ahr),e(iM,WW),e(WW,nhr),e(iM,shr),e(Te,lhr),e(Te,dM),e(dM,K2e),e(K2e,ihr),e(dM,dhr),e(dM,QW),e(QW,chr),e(dM,fhr),e(Te,mhr),e(Te,cM),e(cM,Z2e),e(Z2e,ghr),e(cM,hhr),e(cM,HW),e(HW,phr),e(cM,uhr),e(Te,_hr),e(Te,fM),e(fM,ebe),e(ebe,bhr),e(fM,vhr),e(fM,UW),e(UW,Fhr),e(fM,Thr),e(yr,Mhr),M(mM,yr,null),b(f,Lqe,_),b(f,Hd,_),e(Hd,gM),e(gM,obe),M(ex,obe,null),e(Hd,Ehr),e(Hd,rbe),e(rbe,Chr),b(f,xqe,_),b(f,er,_),M(ox,er,null),e(er,whr),e(er,Ud),e(Ud,Ahr),e(Ud,JW),e(JW,yhr),e(Ud,Lhr),e(Ud,YW),e(YW,xhr),e(Ud,$hr),e(er,khr),e(er,rx),e(rx,Shr),e(rx,tbe),e(tbe,Rhr),e(rx,Phr),e(er,Bhr),e(er,$t),M(tx,$t,null),e($t,Ihr),e($t,abe),e(abe,qhr),e($t,Nhr),e($t,Jd),e(Jd,jhr),e(Jd,nbe),e(nbe,Dhr),e(Jd,Ghr),e(Jd,KW),e(KW,Ohr),e(Jd,Vhr),e($t,Xhr),M(hM,$t,null),e(er,zhr),e(er,Lr),M(ax,Lr,null),e(Lr,Whr),e(Lr,sbe),e(sbe,Qhr),e(Lr,Hhr),e(Lr,on),e(on,Uhr),e(on,lbe),e(lbe,Jhr),e(on,Yhr),e(on,ibe),e(ibe,Khr),e(on,Zhr),e(on,dbe),e(dbe,epr),e(on,opr),e(Lr,rpr),e(Lr,Yd),e(Yd,pM),e(pM,cbe),e(cbe,tpr),e(pM,apr),e(pM,ZW),e(ZW,npr),e(pM,spr),e(Yd,lpr),e(Yd,uM),e(uM,fbe),e(fbe,ipr),e(uM,dpr),e(uM,eQ),e(eQ,cpr),e(uM,fpr),e(Yd,mpr),e(Yd,_M),e(_M,mbe),e(mbe,gpr),e(_M,hpr),e(_M,oQ),e(oQ,ppr),e(_M,upr),e(Lr,_pr),M(bM,Lr,null),b(f,$qe,_),b(f,Kd,_),e(Kd,vM),e(vM,gbe),M(nx,gbe,null),e(Kd,bpr),e(Kd,hbe),e(hbe,vpr),b(f,kqe,_),b(f,or,_),M(sx,or,null),e(or,Fpr),e(or,Zd),e(Zd,Tpr),e(Zd,rQ),e(rQ,Mpr),e(Zd,Epr),e(Zd,tQ),e(tQ,Cpr),e(Zd,wpr),e(or,Apr),e(or,lx),e(lx,ypr),e(lx,pbe),e(pbe,Lpr),e(lx,xpr),e(or,$pr),e(or,kt),M(ix,kt,null),e(kt,kpr),e(kt,ube),e(ube,Spr),e(kt,Rpr),e(kt,ec),e(ec,Ppr),e(ec,_be),e(_be,Bpr),e(ec,Ipr),e(ec,aQ),e(aQ,qpr),e(ec,Npr),e(kt,jpr),M(FM,kt,null),e(or,Dpr),e(or,xr),M(dx,xr,null),e(xr,Gpr),e(xr,bbe),e(bbe,Opr),e(xr,Vpr),e(xr,rn),e(rn,Xpr),e(rn,vbe),e(vbe,zpr),e(rn,Wpr),e(rn,Fbe),e(Fbe,Qpr),e(rn,Hpr),e(rn,Tbe),e(Tbe,Upr),e(rn,Jpr),e(xr,Ypr),e(xr,ie),e(ie,TM),e(TM,Mbe),e(Mbe,Kpr),e(TM,Zpr),e(TM,nQ),e(nQ,eur),e(TM,our),e(ie,rur),e(ie,MM),e(MM,Ebe),e(Ebe,tur),e(MM,aur),e(MM,sQ),e(sQ,nur),e(MM,sur),e(ie,lur),e(ie,EM),e(EM,Cbe),e(Cbe,iur),e(EM,dur),e(EM,lQ),e(lQ,cur),e(EM,fur),e(ie,mur),e(ie,CM),e(CM,wbe),e(wbe,gur),e(CM,hur),e(CM,iQ),e(iQ,pur),e(CM,uur),e(ie,_ur),e(ie,wM),e(wM,Abe),e(Abe,bur),e(wM,vur),e(wM,dQ),e(dQ,Fur),e(wM,Tur),e(ie,Mur),e(ie,AM),e(AM,ybe),e(ybe,Eur),e(AM,Cur),e(AM,cQ),e(cQ,wur),e(AM,Aur),e(ie,yur),e(ie,yM),e(yM,Lbe),e(Lbe,Lur),e(yM,xur),e(yM,fQ),e(fQ,$ur),e(yM,kur),e(ie,Sur),e(ie,LM),e(LM,xbe),e(xbe,Rur),e(LM,Pur),e(LM,mQ),e(mQ,Bur),e(LM,Iur),e(ie,qur),e(ie,xM),e(xM,$be),e($be,Nur),e(xM,jur),e(xM,gQ),e(gQ,Dur),e(xM,Gur),e(ie,Our),e(ie,$M),e($M,kbe),e(kbe,Vur),e($M,Xur),e($M,hQ),e(hQ,zur),e($M,Wur),e(ie,Qur),e(ie,kM),e(kM,Sbe),e(Sbe,Hur),e(kM,Uur),e(kM,pQ),e(pQ,Jur),e(kM,Yur),e(ie,Kur),e(ie,SM),e(SM,Rbe),e(Rbe,Zur),e(SM,e_r),e(SM,uQ),e(uQ,o_r),e(SM,r_r),e(ie,t_r),e(ie,RM),e(RM,Pbe),e(Pbe,a_r),e(RM,n_r),e(RM,_Q),e(_Q,s_r),e(RM,l_r),e(ie,i_r),e(ie,PM),e(PM,Bbe),e(Bbe,d_r),e(PM,c_r),e(PM,bQ),e(bQ,f_r),e(PM,m_r),e(ie,g_r),e(ie,BM),e(BM,Ibe),e(Ibe,h_r),e(BM,p_r),e(BM,vQ),e(vQ,u_r),e(BM,__r),e(ie,b_r),e(ie,IM),e(IM,qbe),e(qbe,v_r),e(IM,F_r),e(IM,FQ),e(FQ,T_r),e(IM,M_r),e(ie,E_r),e(ie,qM),e(qM,Nbe),e(Nbe,C_r),e(qM,w_r),e(qM,TQ),e(TQ,A_r),e(qM,y_r),e(ie,L_r),e(ie,NM),e(NM,jbe),e(jbe,x_r),e(NM,$_r),e(NM,MQ),e(MQ,k_r),e(NM,S_r),e(ie,R_r),e(ie,jM),e(jM,Dbe),e(Dbe,P_r),e(jM,B_r),e(jM,EQ),e(EQ,I_r),e(jM,q_r),e(ie,N_r),e(ie,DM),e(DM,Gbe),e(Gbe,j_r),e(DM,D_r),e(DM,CQ),e(CQ,G_r),e(DM,O_r),e(xr,V_r),M(GM,xr,null),b(f,Sqe,_),b(f,oc,_),e(oc,OM),e(OM,Obe),M(cx,Obe,null),e(oc,X_r),e(oc,Vbe),e(Vbe,z_r),b(f,Rqe,_),b(f,rr,_),M(fx,rr,null),e(rr,W_r),e(rr,rc),e(rc,Q_r),e(rc,wQ),e(wQ,H_r),e(rc,U_r),e(rc,AQ),e(AQ,J_r),e(rc,Y_r),e(rr,K_r),e(rr,mx),e(mx,Z_r),e(mx,Xbe),e(Xbe,e1r),e(mx,o1r),e(rr,r1r),e(rr,St),M(gx,St,null),e(St,t1r),e(St,zbe),e(zbe,a1r),e(St,n1r),e(St,tc),e(tc,s1r),e(tc,Wbe),e(Wbe,l1r),e(tc,i1r),e(tc,yQ),e(yQ,d1r),e(tc,c1r),e(St,f1r),M(VM,St,null),e(rr,m1r),e(rr,$r),M(hx,$r,null),e($r,g1r),e($r,Qbe),e(Qbe,h1r),e($r,p1r),e($r,tn),e(tn,u1r),e(tn,Hbe),e(Hbe,_1r),e(tn,b1r),e(tn,Ube),e(Ube,v1r),e(tn,F1r),e(tn,Jbe),e(Jbe,T1r),e(tn,M1r),e($r,E1r),e($r,ye),e(ye,XM),e(XM,Ybe),e(Ybe,C1r),e(XM,w1r),e(XM,LQ),e(LQ,A1r),e(XM,y1r),e(ye,L1r),e(ye,zM),e(zM,Kbe),e(Kbe,x1r),e(zM,$1r),e(zM,xQ),e(xQ,k1r),e(zM,S1r),e(ye,R1r),e(ye,WM),e(WM,Zbe),e(Zbe,P1r),e(WM,B1r),e(WM,$Q),e($Q,I1r),e(WM,q1r),e(ye,N1r),e(ye,QM),e(QM,eve),e(eve,j1r),e(QM,D1r),e(QM,kQ),e(kQ,G1r),e(QM,O1r),e(ye,V1r),e(ye,HM),e(HM,ove),e(ove,X1r),e(HM,z1r),e(HM,SQ),e(SQ,W1r),e(HM,Q1r),e(ye,H1r),e(ye,UM),e(UM,rve),e(rve,U1r),e(UM,J1r),e(UM,RQ),e(RQ,Y1r),e(UM,K1r),e(ye,Z1r),e(ye,JM),e(JM,tve),e(tve,e2r),e(JM,o2r),e(JM,PQ),e(PQ,r2r),e(JM,t2r),e(ye,a2r),e(ye,YM),e(YM,ave),e(ave,n2r),e(YM,s2r),e(YM,BQ),e(BQ,l2r),e(YM,i2r),e(ye,d2r),e(ye,KM),e(KM,nve),e(nve,c2r),e(KM,f2r),e(KM,IQ),e(IQ,m2r),e(KM,g2r),e(ye,h2r),e(ye,ZM),e(ZM,sve),e(sve,p2r),e(ZM,u2r),e(ZM,qQ),e(qQ,_2r),e(ZM,b2r),e($r,v2r),M(e4,$r,null),b(f,Pqe,_),b(f,ac,_),e(ac,o4),e(o4,lve),M(px,lve,null),e(ac,F2r),e(ac,ive),e(ive,T2r),b(f,Bqe,_),b(f,tr,_),M(ux,tr,null),e(tr,M2r),e(tr,nc),e(nc,E2r),e(nc,NQ),e(NQ,C2r),e(nc,w2r),e(nc,jQ),e(jQ,A2r),e(nc,y2r),e(tr,L2r),e(tr,_x),e(_x,x2r),e(_x,dve),e(dve,$2r),e(_x,k2r),e(tr,S2r),e(tr,Rt),M(bx,Rt,null),e(Rt,R2r),e(Rt,cve),e(cve,P2r),e(Rt,B2r),e(Rt,sc),e(sc,I2r),e(sc,fve),e(fve,q2r),e(sc,N2r),e(sc,DQ),e(DQ,j2r),e(sc,D2r),e(Rt,G2r),M(r4,Rt,null),e(tr,O2r),e(tr,kr),M(vx,kr,null),e(kr,V2r),e(kr,mve),e(mve,X2r),e(kr,z2r),e(kr,an),e(an,W2r),e(an,gve),e(gve,Q2r),e(an,H2r),e(an,hve),e(hve,U2r),e(an,J2r),e(an,pve),e(pve,Y2r),e(an,K2r),e(kr,Z2r),e(kr,ee),e(ee,t4),e(t4,uve),e(uve,ebr),e(t4,obr),e(t4,GQ),e(GQ,rbr),e(t4,tbr),e(ee,abr),e(ee,a4),e(a4,_ve),e(_ve,nbr),e(a4,sbr),e(a4,OQ),e(OQ,lbr),e(a4,ibr),e(ee,dbr),e(ee,n4),e(n4,bve),e(bve,cbr),e(n4,fbr),e(n4,VQ),e(VQ,mbr),e(n4,gbr),e(ee,hbr),e(ee,s4),e(s4,vve),e(vve,pbr),e(s4,ubr),e(s4,XQ),e(XQ,_br),e(s4,bbr),e(ee,vbr),e(ee,l4),e(l4,Fve),e(Fve,Fbr),e(l4,Tbr),e(l4,zQ),e(zQ,Mbr),e(l4,Ebr),e(ee,Cbr),e(ee,i4),e(i4,Tve),e(Tve,wbr),e(i4,Abr),e(i4,WQ),e(WQ,ybr),e(i4,Lbr),e(ee,xbr),e(ee,d4),e(d4,Mve),e(Mve,$br),e(d4,kbr),e(d4,QQ),e(QQ,Sbr),e(d4,Rbr),e(ee,Pbr),e(ee,c4),e(c4,Eve),e(Eve,Bbr),e(c4,Ibr),e(c4,HQ),e(HQ,qbr),e(c4,Nbr),e(ee,jbr),e(ee,f4),e(f4,Cve),e(Cve,Dbr),e(f4,Gbr),e(f4,UQ),e(UQ,Obr),e(f4,Vbr),e(ee,Xbr),e(ee,m4),e(m4,wve),e(wve,zbr),e(m4,Wbr),e(m4,JQ),e(JQ,Qbr),e(m4,Hbr),e(ee,Ubr),e(ee,g4),e(g4,Ave),e(Ave,Jbr),e(g4,Ybr),e(g4,YQ),e(YQ,Kbr),e(g4,Zbr),e(ee,evr),e(ee,h4),e(h4,yve),e(yve,ovr),e(h4,rvr),e(h4,KQ),e(KQ,tvr),e(h4,avr),e(ee,nvr),e(ee,p4),e(p4,Lve),e(Lve,svr),e(p4,lvr),e(p4,ZQ),e(ZQ,ivr),e(p4,dvr),e(ee,cvr),e(ee,u4),e(u4,xve),e(xve,fvr),e(u4,mvr),e(u4,eH),e(eH,gvr),e(u4,hvr),e(ee,pvr),e(ee,_4),e(_4,$ve),e($ve,uvr),e(_4,_vr),e(_4,oH),e(oH,bvr),e(_4,vvr),e(ee,Fvr),e(ee,b4),e(b4,kve),e(kve,Tvr),e(b4,Mvr),e(b4,rH),e(rH,Evr),e(b4,Cvr),e(ee,wvr),e(ee,v4),e(v4,Sve),e(Sve,Avr),e(v4,yvr),e(v4,tH),e(tH,Lvr),e(v4,xvr),e(ee,$vr),e(ee,F4),e(F4,Rve),e(Rve,kvr),e(F4,Svr),e(F4,aH),e(aH,Rvr),e(F4,Pvr),e(ee,Bvr),e(ee,T4),e(T4,Pve),e(Pve,Ivr),e(T4,qvr),e(T4,nH),e(nH,Nvr),e(T4,jvr),e(ee,Dvr),e(ee,M4),e(M4,Bve),e(Bve,Gvr),e(M4,Ovr),e(M4,sH),e(sH,Vvr),e(M4,Xvr),e(ee,zvr),e(ee,E4),e(E4,Ive),e(Ive,Wvr),e(E4,Qvr),e(E4,lH),e(lH,Hvr),e(E4,Uvr),e(ee,Jvr),e(ee,C4),e(C4,qve),e(qve,Yvr),e(C4,Kvr),e(C4,iH),e(iH,Zvr),e(C4,eFr),e(ee,oFr),e(ee,w4),e(w4,Nve),e(Nve,rFr),e(w4,tFr),e(w4,dH),e(dH,aFr),e(w4,nFr),e(ee,sFr),e(ee,A4),e(A4,jve),e(jve,lFr),e(A4,iFr),e(A4,cH),e(cH,dFr),e(A4,cFr),e(ee,fFr),e(ee,y4),e(y4,Dve),e(Dve,mFr),e(y4,gFr),e(y4,fH),e(fH,hFr),e(y4,pFr),e(ee,uFr),e(ee,L4),e(L4,Gve),e(Gve,_Fr),e(L4,bFr),e(L4,mH),e(mH,vFr),e(L4,FFr),e(kr,TFr),M(x4,kr,null),b(f,Iqe,_),b(f,lc,_),e(lc,$4),e($4,Ove),M(Fx,Ove,null),e(lc,MFr),e(lc,Vve),e(Vve,EFr),b(f,qqe,_),b(f,ar,_),M(Tx,ar,null),e(ar,CFr),e(ar,ic),e(ic,wFr),e(ic,gH),e(gH,AFr),e(ic,yFr),e(ic,hH),e(hH,LFr),e(ic,xFr),e(ar,$Fr),e(ar,Mx),e(Mx,kFr),e(Mx,Xve),e(Xve,SFr),e(Mx,RFr),e(ar,PFr),e(ar,Pt),M(Ex,Pt,null),e(Pt,BFr),e(Pt,zve),e(zve,IFr),e(Pt,qFr),e(Pt,dc),e(dc,NFr),e(dc,Wve),e(Wve,jFr),e(dc,DFr),e(dc,pH),e(pH,GFr),e(dc,OFr),e(Pt,VFr),M(k4,Pt,null),e(ar,XFr),e(ar,Sr),M(Cx,Sr,null),e(Sr,zFr),e(Sr,Qve),e(Qve,WFr),e(Sr,QFr),e(Sr,nn),e(nn,HFr),e(nn,Hve),e(Hve,UFr),e(nn,JFr),e(nn,Uve),e(Uve,YFr),e(nn,KFr),e(nn,Jve),e(Jve,ZFr),e(nn,e6r),e(Sr,o6r),e(Sr,he),e(he,S4),e(S4,Yve),e(Yve,r6r),e(S4,t6r),e(S4,uH),e(uH,a6r),e(S4,n6r),e(he,s6r),e(he,R4),e(R4,Kve),e(Kve,l6r),e(R4,i6r),e(R4,_H),e(_H,d6r),e(R4,c6r),e(he,f6r),e(he,P4),e(P4,Zve),e(Zve,m6r),e(P4,g6r),e(P4,bH),e(bH,h6r),e(P4,p6r),e(he,u6r),e(he,B4),e(B4,eFe),e(eFe,_6r),e(B4,b6r),e(B4,vH),e(vH,v6r),e(B4,F6r),e(he,T6r),e(he,I4),e(I4,oFe),e(oFe,M6r),e(I4,E6r),e(I4,FH),e(FH,C6r),e(I4,w6r),e(he,A6r),e(he,q4),e(q4,rFe),e(rFe,y6r),e(q4,L6r),e(q4,TH),e(TH,x6r),e(q4,$6r),e(he,k6r),e(he,N4),e(N4,tFe),e(tFe,S6r),e(N4,R6r),e(N4,MH),e(MH,P6r),e(N4,B6r),e(he,I6r),e(he,j4),e(j4,aFe),e(aFe,q6r),e(j4,N6r),e(j4,EH),e(EH,j6r),e(j4,D6r),e(he,G6r),e(he,D4),e(D4,nFe),e(nFe,O6r),e(D4,V6r),e(D4,CH),e(CH,X6r),e(D4,z6r),e(he,W6r),e(he,G4),e(G4,sFe),e(sFe,Q6r),e(G4,H6r),e(G4,wH),e(wH,U6r),e(G4,J6r),e(he,Y6r),e(he,O4),e(O4,lFe),e(lFe,K6r),e(O4,Z6r),e(O4,AH),e(AH,eTr),e(O4,oTr),e(he,rTr),e(he,V4),e(V4,iFe),e(iFe,tTr),e(V4,aTr),e(V4,yH),e(yH,nTr),e(V4,sTr),e(he,lTr),e(he,X4),e(X4,dFe),e(dFe,iTr),e(X4,dTr),e(X4,LH),e(LH,cTr),e(X4,fTr),e(he,mTr),e(he,z4),e(z4,cFe),e(cFe,gTr),e(z4,hTr),e(z4,xH),e(xH,pTr),e(z4,uTr),e(he,_Tr),e(he,W4),e(W4,fFe),e(fFe,bTr),e(W4,vTr),e(W4,$H),e($H,FTr),e(W4,TTr),e(he,MTr),e(he,Q4),e(Q4,mFe),e(mFe,ETr),e(Q4,CTr),e(Q4,kH),e(kH,wTr),e(Q4,ATr),e(he,yTr),e(he,H4),e(H4,gFe),e(gFe,LTr),e(H4,xTr),e(H4,SH),e(SH,$Tr),e(H4,kTr),e(Sr,STr),M(U4,Sr,null),b(f,Nqe,_),b(f,cc,_),e(cc,J4),e(J4,hFe),M(wx,hFe,null),e(cc,RTr),e(cc,pFe),e(pFe,PTr),b(f,jqe,_),b(f,nr,_),M(Ax,nr,null),e(nr,BTr),e(nr,fc),e(fc,ITr),e(fc,RH),e(RH,qTr),e(fc,NTr),e(fc,PH),e(PH,jTr),e(fc,DTr),e(nr,GTr),e(nr,yx),e(yx,OTr),e(yx,uFe),e(uFe,VTr),e(yx,XTr),e(nr,zTr),e(nr,Bt),M(Lx,Bt,null),e(Bt,WTr),e(Bt,_Fe),e(_Fe,QTr),e(Bt,HTr),e(Bt,mc),e(mc,UTr),e(mc,bFe),e(bFe,JTr),e(mc,YTr),e(mc,BH),e(BH,KTr),e(mc,ZTr),e(Bt,e8r),M(Y4,Bt,null),e(nr,o8r),e(nr,Rr),M(xx,Rr,null),e(Rr,r8r),e(Rr,vFe),e(vFe,t8r),e(Rr,a8r),e(Rr,sn),e(sn,n8r),e(sn,FFe),e(FFe,s8r),e(sn,l8r),e(sn,TFe),e(TFe,i8r),e(sn,d8r),e(sn,MFe),e(MFe,c8r),e(sn,f8r),e(Rr,m8r),e(Rr,$x),e($x,K4),e(K4,EFe),e(EFe,g8r),e(K4,h8r),e(K4,IH),e(IH,p8r),e(K4,u8r),e($x,_8r),e($x,Z4),e(Z4,CFe),e(CFe,b8r),e(Z4,v8r),e(Z4,qH),e(qH,F8r),e(Z4,T8r),e(Rr,M8r),M(eE,Rr,null),b(f,Dqe,_),b(f,gc,_),e(gc,oE),e(oE,wFe),M(kx,wFe,null),e(gc,E8r),e(gc,AFe),e(AFe,C8r),b(f,Gqe,_),b(f,sr,_),M(Sx,sr,null),e(sr,w8r),e(sr,hc),e(hc,A8r),e(hc,NH),e(NH,y8r),e(hc,L8r),e(hc,jH),e(jH,x8r),e(hc,$8r),e(sr,k8r),e(sr,Rx),e(Rx,S8r),e(Rx,yFe),e(yFe,R8r),e(Rx,P8r),e(sr,B8r),e(sr,It),M(Px,It,null),e(It,I8r),e(It,LFe),e(LFe,q8r),e(It,N8r),e(It,pc),e(pc,j8r),e(pc,xFe),e(xFe,D8r),e(pc,G8r),e(pc,DH),e(DH,O8r),e(pc,V8r),e(It,X8r),M(rE,It,null),e(sr,z8r),e(sr,Pr),M(Bx,Pr,null),e(Pr,W8r),e(Pr,$Fe),e($Fe,Q8r),e(Pr,H8r),e(Pr,ln),e(ln,U8r),e(ln,kFe),e(kFe,J8r),e(ln,Y8r),e(ln,SFe),e(SFe,K8r),e(ln,Z8r),e(ln,RFe),e(RFe,eMr),e(ln,oMr),e(Pr,rMr),e(Pr,PFe),e(PFe,tE),e(tE,BFe),e(BFe,tMr),e(tE,aMr),e(tE,GH),e(GH,nMr),e(tE,sMr),e(Pr,lMr),M(aE,Pr,null),b(f,Oqe,_),b(f,uc,_),e(uc,nE),e(nE,IFe),M(Ix,IFe,null),e(uc,iMr),e(uc,qFe),e(qFe,dMr),b(f,Vqe,_),b(f,lr,_),M(qx,lr,null),e(lr,cMr),e(lr,_c),e(_c,fMr),e(_c,OH),e(OH,mMr),e(_c,gMr),e(_c,VH),e(VH,hMr),e(_c,pMr),e(lr,uMr),e(lr,Nx),e(Nx,_Mr),e(Nx,NFe),e(NFe,bMr),e(Nx,vMr),e(lr,FMr),e(lr,qt),M(jx,qt,null),e(qt,TMr),e(qt,jFe),e(jFe,MMr),e(qt,EMr),e(qt,bc),e(bc,CMr),e(bc,DFe),e(DFe,wMr),e(bc,AMr),e(bc,XH),e(XH,yMr),e(bc,LMr),e(qt,xMr),M(sE,qt,null),e(lr,$Mr),e(lr,Br),M(Dx,Br,null),e(Br,kMr),e(Br,GFe),e(GFe,SMr),e(Br,RMr),e(Br,dn),e(dn,PMr),e(dn,OFe),e(OFe,BMr),e(dn,IMr),e(dn,VFe),e(VFe,qMr),e(dn,NMr),e(dn,XFe),e(XFe,jMr),e(dn,DMr),e(Br,GMr),e(Br,de),e(de,lE),e(lE,zFe),e(zFe,OMr),e(lE,VMr),e(lE,zH),e(zH,XMr),e(lE,zMr),e(de,WMr),e(de,iE),e(iE,WFe),e(WFe,QMr),e(iE,HMr),e(iE,WH),e(WH,UMr),e(iE,JMr),e(de,YMr),e(de,dE),e(dE,QFe),e(QFe,KMr),e(dE,ZMr),e(dE,QH),e(QH,e4r),e(dE,o4r),e(de,r4r),e(de,cE),e(cE,HFe),e(HFe,t4r),e(cE,a4r),e(cE,HH),e(HH,n4r),e(cE,s4r),e(de,l4r),e(de,fE),e(fE,UFe),e(UFe,i4r),e(fE,d4r),e(fE,UH),e(UH,c4r),e(fE,f4r),e(de,m4r),e(de,mE),e(mE,JFe),e(JFe,g4r),e(mE,h4r),e(mE,JH),e(JH,p4r),e(mE,u4r),e(de,_4r),e(de,gE),e(gE,YFe),e(YFe,b4r),e(gE,v4r),e(gE,YH),e(YH,F4r),e(gE,T4r),e(de,M4r),e(de,hE),e(hE,KFe),e(KFe,E4r),e(hE,C4r),e(hE,KH),e(KH,w4r),e(hE,A4r),e(de,y4r),e(de,pE),e(pE,ZFe),e(ZFe,L4r),e(pE,x4r),e(pE,ZH),e(ZH,$4r),e(pE,k4r),e(de,S4r),e(de,uE),e(uE,e6e),e(e6e,R4r),e(uE,P4r),e(uE,eU),e(eU,B4r),e(uE,I4r),e(de,q4r),e(de,_E),e(_E,o6e),e(o6e,N4r),e(_E,j4r),e(_E,oU),e(oU,D4r),e(_E,G4r),e(de,O4r),e(de,bE),e(bE,r6e),e(r6e,V4r),e(bE,X4r),e(bE,rU),e(rU,z4r),e(bE,W4r),e(de,Q4r),e(de,vE),e(vE,t6e),e(t6e,H4r),e(vE,U4r),e(vE,tU),e(tU,J4r),e(vE,Y4r),e(de,K4r),e(de,FE),e(FE,a6e),e(a6e,Z4r),e(FE,eEr),e(FE,aU),e(aU,oEr),e(FE,rEr),e(de,tEr),e(de,TE),e(TE,n6e),e(n6e,aEr),e(TE,nEr),e(TE,nU),e(nU,sEr),e(TE,lEr),e(de,iEr),e(de,ME),e(ME,s6e),e(s6e,dEr),e(ME,cEr),e(ME,sU),e(sU,fEr),e(ME,mEr),e(de,gEr),e(de,EE),e(EE,l6e),e(l6e,hEr),e(EE,pEr),e(EE,lU),e(lU,uEr),e(EE,_Er),e(de,bEr),e(de,CE),e(CE,i6e),e(i6e,vEr),e(CE,FEr),e(CE,iU),e(iU,TEr),e(CE,MEr),e(de,EEr),e(de,wE),e(wE,d6e),e(d6e,CEr),e(wE,wEr),e(wE,dU),e(dU,AEr),e(wE,yEr),e(de,LEr),e(de,AE),e(AE,c6e),e(c6e,xEr),e(AE,$Er),e(AE,cU),e(cU,kEr),e(AE,SEr),e(Br,REr),M(yE,Br,null),b(f,Xqe,_),b(f,vc,_),e(vc,LE),e(LE,f6e),M(Gx,f6e,null),e(vc,PEr),e(vc,m6e),e(m6e,BEr),b(f,zqe,_),b(f,ir,_),M(Ox,ir,null),e(ir,IEr),e(ir,Fc),e(Fc,qEr),e(Fc,fU),e(fU,NEr),e(Fc,jEr),e(Fc,mU),e(mU,DEr),e(Fc,GEr),e(ir,OEr),e(ir,Vx),e(Vx,VEr),e(Vx,g6e),e(g6e,XEr),e(Vx,zEr),e(ir,WEr),e(ir,Nt),M(Xx,Nt,null),e(Nt,QEr),e(Nt,h6e),e(h6e,HEr),e(Nt,UEr),e(Nt,Tc),e(Tc,JEr),e(Tc,p6e),e(p6e,YEr),e(Tc,KEr),e(Tc,gU),e(gU,ZEr),e(Tc,eCr),e(Nt,oCr),M(xE,Nt,null),e(ir,rCr),e(ir,Ir),M(zx,Ir,null),e(Ir,tCr),e(Ir,u6e),e(u6e,aCr),e(Ir,nCr),e(Ir,cn),e(cn,sCr),e(cn,_6e),e(_6e,lCr),e(cn,iCr),e(cn,b6e),e(b6e,dCr),e(cn,cCr),e(cn,v6e),e(v6e,fCr),e(cn,mCr),e(Ir,gCr),e(Ir,ce),e(ce,$E),e($E,F6e),e(F6e,hCr),e($E,pCr),e($E,hU),e(hU,uCr),e($E,_Cr),e(ce,bCr),e(ce,kE),e(kE,T6e),e(T6e,vCr),e(kE,FCr),e(kE,pU),e(pU,TCr),e(kE,MCr),e(ce,ECr),e(ce,SE),e(SE,M6e),e(M6e,CCr),e(SE,wCr),e(SE,uU),e(uU,ACr),e(SE,yCr),e(ce,LCr),e(ce,RE),e(RE,E6e),e(E6e,xCr),e(RE,$Cr),e(RE,_U),e(_U,kCr),e(RE,SCr),e(ce,RCr),e(ce,PE),e(PE,C6e),e(C6e,PCr),e(PE,BCr),e(PE,bU),e(bU,ICr),e(PE,qCr),e(ce,NCr),e(ce,BE),e(BE,w6e),e(w6e,jCr),e(BE,DCr),e(BE,vU),e(vU,GCr),e(BE,OCr),e(ce,VCr),e(ce,IE),e(IE,A6e),e(A6e,XCr),e(IE,zCr),e(IE,FU),e(FU,WCr),e(IE,QCr),e(ce,HCr),e(ce,qE),e(qE,y6e),e(y6e,UCr),e(qE,JCr),e(qE,TU),e(TU,YCr),e(qE,KCr),e(ce,ZCr),e(ce,NE),e(NE,L6e),e(L6e,e5r),e(NE,o5r),e(NE,MU),e(MU,r5r),e(NE,t5r),e(ce,a5r),e(ce,jE),e(jE,x6e),e(x6e,n5r),e(jE,s5r),e(jE,EU),e(EU,l5r),e(jE,i5r),e(ce,d5r),e(ce,DE),e(DE,$6e),e($6e,c5r),e(DE,f5r),e(DE,CU),e(CU,m5r),e(DE,g5r),e(ce,h5r),e(ce,GE),e(GE,k6e),e(k6e,p5r),e(GE,u5r),e(GE,wU),e(wU,_5r),e(GE,b5r),e(ce,v5r),e(ce,OE),e(OE,S6e),e(S6e,F5r),e(OE,T5r),e(OE,AU),e(AU,M5r),e(OE,E5r),e(ce,C5r),e(ce,VE),e(VE,R6e),e(R6e,w5r),e(VE,A5r),e(VE,yU),e(yU,y5r),e(VE,L5r),e(ce,x5r),e(ce,XE),e(XE,P6e),e(P6e,$5r),e(XE,k5r),e(XE,LU),e(LU,S5r),e(XE,R5r),e(ce,P5r),e(ce,zE),e(zE,B6e),e(B6e,B5r),e(zE,I5r),e(zE,xU),e(xU,q5r),e(zE,N5r),e(ce,j5r),e(ce,WE),e(WE,I6e),e(I6e,D5r),e(WE,G5r),e(WE,$U),e($U,O5r),e(WE,V5r),e(ce,X5r),e(ce,QE),e(QE,q6e),e(q6e,z5r),e(QE,W5r),e(QE,kU),e(kU,Q5r),e(QE,H5r),e(ce,U5r),e(ce,HE),e(HE,N6e),e(N6e,J5r),e(HE,Y5r),e(HE,SU),e(SU,K5r),e(HE,Z5r),e(ce,e3r),e(ce,UE),e(UE,j6e),e(j6e,o3r),e(UE,r3r),e(UE,RU),e(RU,t3r),e(UE,a3r),e(Ir,n3r),M(JE,Ir,null),b(f,Wqe,_),b(f,Mc,_),e(Mc,YE),e(YE,D6e),M(Wx,D6e,null),e(Mc,s3r),e(Mc,G6e),e(G6e,l3r),b(f,Qqe,_),b(f,dr,_),M(Qx,dr,null),e(dr,i3r),e(dr,Ec),e(Ec,d3r),e(Ec,PU),e(PU,c3r),e(Ec,f3r),e(Ec,BU),e(BU,m3r),e(Ec,g3r),e(dr,h3r),e(dr,Hx),e(Hx,p3r),e(Hx,O6e),e(O6e,u3r),e(Hx,_3r),e(dr,b3r),e(dr,jt),M(Ux,jt,null),e(jt,v3r),e(jt,V6e),e(V6e,F3r),e(jt,T3r),e(jt,Cc),e(Cc,M3r),e(Cc,X6e),e(X6e,E3r),e(Cc,C3r),e(Cc,IU),e(IU,w3r),e(Cc,A3r),e(jt,y3r),M(KE,jt,null),e(dr,L3r),e(dr,qr),M(Jx,qr,null),e(qr,x3r),e(qr,z6e),e(z6e,$3r),e(qr,k3r),e(qr,fn),e(fn,S3r),e(fn,W6e),e(W6e,R3r),e(fn,P3r),e(fn,Q6e),e(Q6e,B3r),e(fn,I3r),e(fn,H6e),e(H6e,q3r),e(fn,N3r),e(qr,j3r),e(qr,U6e),e(U6e,ZE),e(ZE,J6e),e(J6e,D3r),e(ZE,G3r),e(ZE,qU),e(qU,O3r),e(ZE,V3r),e(qr,X3r),M(eC,qr,null),b(f,Hqe,_),b(f,wc,_),e(wc,oC),e(oC,Y6e),M(Yx,Y6e,null),e(wc,z3r),e(wc,K6e),e(K6e,W3r),b(f,Uqe,_),b(f,cr,_),M(Kx,cr,null),e(cr,Q3r),e(cr,Ac),e(Ac,H3r),e(Ac,NU),e(NU,U3r),e(Ac,J3r),e(Ac,jU),e(jU,Y3r),e(Ac,K3r),e(cr,Z3r),e(cr,Zx),e(Zx,ewr),e(Zx,Z6e),e(Z6e,owr),e(Zx,rwr),e(cr,twr),e(cr,Dt),M(e9,Dt,null),e(Dt,awr),e(Dt,eTe),e(eTe,nwr),e(Dt,swr),e(Dt,yc),e(yc,lwr),e(yc,oTe),e(oTe,iwr),e(yc,dwr),e(yc,DU),e(DU,cwr),e(yc,fwr),e(Dt,mwr),M(rC,Dt,null),e(cr,gwr),e(cr,Nr),M(o9,Nr,null),e(Nr,hwr),e(Nr,rTe),e(rTe,pwr),e(Nr,uwr),e(Nr,mn),e(mn,_wr),e(mn,tTe),e(tTe,bwr),e(mn,vwr),e(mn,aTe),e(aTe,Fwr),e(mn,Twr),e(mn,nTe),e(nTe,Mwr),e(mn,Ewr),e(Nr,Cwr),e(Nr,sTe),e(sTe,tC),e(tC,lTe),e(lTe,wwr),e(tC,Awr),e(tC,GU),e(GU,ywr),e(tC,Lwr),e(Nr,xwr),M(aC,Nr,null),b(f,Jqe,_),b(f,Lc,_),e(Lc,nC),e(nC,iTe),M(r9,iTe,null),e(Lc,$wr),e(Lc,dTe),e(dTe,kwr),b(f,Yqe,_),b(f,fr,_),M(t9,fr,null),e(fr,Swr),e(fr,xc),e(xc,Rwr),e(xc,OU),e(OU,Pwr),e(xc,Bwr),e(xc,VU),e(VU,Iwr),e(xc,qwr),e(fr,Nwr),e(fr,a9),e(a9,jwr),e(a9,cTe),e(cTe,Dwr),e(a9,Gwr),e(fr,Owr),e(fr,Gt),M(n9,Gt,null),e(Gt,Vwr),e(Gt,fTe),e(fTe,Xwr),e(Gt,zwr),e(Gt,$c),e($c,Wwr),e($c,mTe),e(mTe,Qwr),e($c,Hwr),e($c,XU),e(XU,Uwr),e($c,Jwr),e(Gt,Ywr),M(sC,Gt,null),e(fr,Kwr),e(fr,jr),M(s9,jr,null),e(jr,Zwr),e(jr,gTe),e(gTe,eAr),e(jr,oAr),e(jr,gn),e(gn,rAr),e(gn,hTe),e(hTe,tAr),e(gn,aAr),e(gn,pTe),e(pTe,nAr),e(gn,sAr),e(gn,uTe),e(uTe,lAr),e(gn,iAr),e(jr,dAr),e(jr,re),e(re,lC),e(lC,_Te),e(_Te,cAr),e(lC,fAr),e(lC,zU),e(zU,mAr),e(lC,gAr),e(re,hAr),e(re,iC),e(iC,bTe),e(bTe,pAr),e(iC,uAr),e(iC,WU),e(WU,_Ar),e(iC,bAr),e(re,vAr),e(re,dC),e(dC,vTe),e(vTe,FAr),e(dC,TAr),e(dC,QU),e(QU,MAr),e(dC,EAr),e(re,CAr),e(re,cC),e(cC,FTe),e(FTe,wAr),e(cC,AAr),e(cC,HU),e(HU,yAr),e(cC,LAr),e(re,xAr),e(re,fC),e(fC,TTe),e(TTe,$Ar),e(fC,kAr),e(fC,UU),e(UU,SAr),e(fC,RAr),e(re,PAr),e(re,mC),e(mC,MTe),e(MTe,BAr),e(mC,IAr),e(mC,JU),e(JU,qAr),e(mC,NAr),e(re,jAr),e(re,gC),e(gC,ETe),e(ETe,DAr),e(gC,GAr),e(gC,YU),e(YU,OAr),e(gC,VAr),e(re,XAr),e(re,hC),e(hC,CTe),e(CTe,zAr),e(hC,WAr),e(hC,KU),e(KU,QAr),e(hC,HAr),e(re,UAr),e(re,pC),e(pC,wTe),e(wTe,JAr),e(pC,YAr),e(pC,ZU),e(ZU,KAr),e(pC,ZAr),e(re,e0r),e(re,uC),e(uC,ATe),e(ATe,o0r),e(uC,r0r),e(uC,eJ),e(eJ,t0r),e(uC,a0r),e(re,n0r),e(re,_C),e(_C,yTe),e(yTe,s0r),e(_C,l0r),e(_C,oJ),e(oJ,i0r),e(_C,d0r),e(re,c0r),e(re,bC),e(bC,LTe),e(LTe,f0r),e(bC,m0r),e(bC,rJ),e(rJ,g0r),e(bC,h0r),e(re,p0r),e(re,vC),e(vC,xTe),e(xTe,u0r),e(vC,_0r),e(vC,tJ),e(tJ,b0r),e(vC,v0r),e(re,F0r),e(re,FC),e(FC,$Te),e($Te,T0r),e(FC,M0r),e(FC,aJ),e(aJ,E0r),e(FC,C0r),e(re,w0r),e(re,TC),e(TC,kTe),e(kTe,A0r),e(TC,y0r),e(TC,nJ),e(nJ,L0r),e(TC,x0r),e(re,$0r),e(re,MC),e(MC,STe),e(STe,k0r),e(MC,S0r),e(MC,sJ),e(sJ,R0r),e(MC,P0r),e(re,B0r),e(re,EC),e(EC,RTe),e(RTe,I0r),e(EC,q0r),e(EC,lJ),e(lJ,N0r),e(EC,j0r),e(re,D0r),e(re,CC),e(CC,PTe),e(PTe,G0r),e(CC,O0r),e(CC,iJ),e(iJ,V0r),e(CC,X0r),e(re,z0r),e(re,wC),e(wC,BTe),e(BTe,W0r),e(wC,Q0r),e(wC,dJ),e(dJ,H0r),e(wC,U0r),e(re,J0r),e(re,AC),e(AC,ITe),e(ITe,Y0r),e(AC,K0r),e(AC,cJ),e(cJ,Z0r),e(AC,eyr),e(re,oyr),e(re,yC),e(yC,qTe),e(qTe,ryr),e(yC,tyr),e(yC,fJ),e(fJ,ayr),e(yC,nyr),e(re,syr),e(re,LC),e(LC,NTe),e(NTe,lyr),e(LC,iyr),e(LC,mJ),e(mJ,dyr),e(LC,cyr),e(re,fyr),e(re,xC),e(xC,jTe),e(jTe,myr),e(xC,gyr),e(xC,gJ),e(gJ,hyr),e(xC,pyr),e(re,uyr),e(re,$C),e($C,DTe),e(DTe,_yr),e($C,byr),e($C,hJ),e(hJ,vyr),e($C,Fyr),e(re,Tyr),e(re,kC),e(kC,GTe),e(GTe,Myr),e(kC,Eyr),e(kC,pJ),e(pJ,Cyr),e(kC,wyr),e(jr,Ayr),M(SC,jr,null),b(f,Kqe,_),b(f,kc,_),e(kc,RC),e(RC,OTe),M(l9,OTe,null),e(kc,yyr),e(kc,VTe),e(VTe,Lyr),b(f,Zqe,_),b(f,mr,_),M(i9,mr,null),e(mr,xyr),e(mr,Sc),e(Sc,$yr),e(Sc,uJ),e(uJ,kyr),e(Sc,Syr),e(Sc,_J),e(_J,Ryr),e(Sc,Pyr),e(mr,Byr),e(mr,d9),e(d9,Iyr),e(d9,XTe),e(XTe,qyr),e(d9,Nyr),e(mr,jyr),e(mr,Ot),M(c9,Ot,null),e(Ot,Dyr),e(Ot,zTe),e(zTe,Gyr),e(Ot,Oyr),e(Ot,Rc),e(Rc,Vyr),e(Rc,WTe),e(WTe,Xyr),e(Rc,zyr),e(Rc,bJ),e(bJ,Wyr),e(Rc,Qyr),e(Ot,Hyr),M(PC,Ot,null),e(mr,Uyr),e(mr,Dr),M(f9,Dr,null),e(Dr,Jyr),e(Dr,QTe),e(QTe,Yyr),e(Dr,Kyr),e(Dr,hn),e(hn,Zyr),e(hn,HTe),e(HTe,eLr),e(hn,oLr),e(hn,UTe),e(UTe,rLr),e(hn,tLr),e(hn,JTe),e(JTe,aLr),e(hn,nLr),e(Dr,sLr),e(Dr,Re),e(Re,BC),e(BC,YTe),e(YTe,lLr),e(BC,iLr),e(BC,vJ),e(vJ,dLr),e(BC,cLr),e(Re,fLr),e(Re,IC),e(IC,KTe),e(KTe,mLr),e(IC,gLr),e(IC,FJ),e(FJ,hLr),e(IC,pLr),e(Re,uLr),e(Re,qC),e(qC,ZTe),e(ZTe,_Lr),e(qC,bLr),e(qC,TJ),e(TJ,vLr),e(qC,FLr),e(Re,TLr),e(Re,NC),e(NC,e8e),e(e8e,MLr),e(NC,ELr),e(NC,MJ),e(MJ,CLr),e(NC,wLr),e(Re,ALr),e(Re,jC),e(jC,o8e),e(o8e,yLr),e(jC,LLr),e(jC,EJ),e(EJ,xLr),e(jC,$Lr),e(Re,kLr),e(Re,DC),e(DC,r8e),e(r8e,SLr),e(DC,RLr),e(DC,CJ),e(CJ,PLr),e(DC,BLr),e(Re,ILr),e(Re,GC),e(GC,t8e),e(t8e,qLr),e(GC,NLr),e(GC,wJ),e(wJ,jLr),e(GC,DLr),e(Re,GLr),e(Re,OC),e(OC,a8e),e(a8e,OLr),e(OC,VLr),e(OC,AJ),e(AJ,XLr),e(OC,zLr),e(Re,WLr),e(Re,VC),e(VC,n8e),e(n8e,QLr),e(VC,HLr),e(VC,yJ),e(yJ,ULr),e(VC,JLr),e(Dr,YLr),M(XC,Dr,null),b(f,eNe,_),b(f,Pc,_),e(Pc,zC),e(zC,s8e),M(m9,s8e,null),e(Pc,KLr),e(Pc,l8e),e(l8e,ZLr),b(f,oNe,_),b(f,gr,_),M(g9,gr,null),e(gr,exr),e(gr,Bc),e(Bc,oxr),e(Bc,LJ),e(LJ,rxr),e(Bc,txr),e(Bc,xJ),e(xJ,axr),e(Bc,nxr),e(gr,sxr),e(gr,h9),e(h9,lxr),e(h9,i8e),e(i8e,ixr),e(h9,dxr),e(gr,cxr),e(gr,Vt),M(p9,Vt,null),e(Vt,fxr),e(Vt,d8e),e(d8e,mxr),e(Vt,gxr),e(Vt,Ic),e(Ic,hxr),e(Ic,c8e),e(c8e,pxr),e(Ic,uxr),e(Ic,$J),e($J,_xr),e(Ic,bxr),e(Vt,vxr),M(WC,Vt,null),e(gr,Fxr),e(gr,Gr),M(u9,Gr,null),e(Gr,Txr),e(Gr,f8e),e(f8e,Mxr),e(Gr,Exr),e(Gr,pn),e(pn,Cxr),e(pn,m8e),e(m8e,wxr),e(pn,Axr),e(pn,g8e),e(g8e,yxr),e(pn,Lxr),e(pn,h8e),e(h8e,xxr),e(pn,$xr),e(Gr,kxr),e(Gr,Me),e(Me,QC),e(QC,p8e),e(p8e,Sxr),e(QC,Rxr),e(QC,kJ),e(kJ,Pxr),e(QC,Bxr),e(Me,Ixr),e(Me,HC),e(HC,u8e),e(u8e,qxr),e(HC,Nxr),e(HC,SJ),e(SJ,jxr),e(HC,Dxr),e(Me,Gxr),e(Me,UC),e(UC,_8e),e(_8e,Oxr),e(UC,Vxr),e(UC,RJ),e(RJ,Xxr),e(UC,zxr),e(Me,Wxr),e(Me,JC),e(JC,b8e),e(b8e,Qxr),e(JC,Hxr),e(JC,PJ),e(PJ,Uxr),e(JC,Jxr),e(Me,Yxr),e(Me,YC),e(YC,v8e),e(v8e,Kxr),e(YC,Zxr),e(YC,BJ),e(BJ,e9r),e(YC,o9r),e(Me,r9r),e(Me,KC),e(KC,F8e),e(F8e,t9r),e(KC,a9r),e(KC,IJ),e(IJ,n9r),e(KC,s9r),e(Me,l9r),e(Me,ZC),e(ZC,T8e),e(T8e,i9r),e(ZC,d9r),e(ZC,qJ),e(qJ,c9r),e(ZC,f9r),e(Me,m9r),e(Me,e5),e(e5,M8e),e(M8e,g9r),e(e5,h9r),e(e5,NJ),e(NJ,p9r),e(e5,u9r),e(Me,_9r),e(Me,o5),e(o5,E8e),e(E8e,b9r),e(o5,v9r),e(o5,jJ),e(jJ,F9r),e(o5,T9r),e(Me,M9r),e(Me,r5),e(r5,C8e),e(C8e,E9r),e(r5,C9r),e(r5,DJ),e(DJ,w9r),e(r5,A9r),e(Me,y9r),e(Me,t5),e(t5,w8e),e(w8e,L9r),e(t5,x9r),e(t5,GJ),e(GJ,$9r),e(t5,k9r),e(Me,S9r),e(Me,a5),e(a5,A8e),e(A8e,R9r),e(a5,P9r),e(a5,OJ),e(OJ,B9r),e(a5,I9r),e(Gr,q9r),M(n5,Gr,null),b(f,rNe,_),b(f,qc,_),e(qc,s5),e(s5,y8e),M(_9,y8e,null),e(qc,N9r),e(qc,L8e),e(L8e,j9r),b(f,tNe,_),b(f,hr,_),M(b9,hr,null),e(hr,D9r),e(hr,Nc),e(Nc,G9r),e(Nc,VJ),e(VJ,O9r),e(Nc,V9r),e(Nc,XJ),e(XJ,X9r),e(Nc,z9r),e(hr,W9r),e(hr,v9),e(v9,Q9r),e(v9,x8e),e(x8e,H9r),e(v9,U9r),e(hr,J9r),e(hr,Xt),M(F9,Xt,null),e(Xt,Y9r),e(Xt,$8e),e($8e,K9r),e(Xt,Z9r),e(Xt,jc),e(jc,e7r),e(jc,k8e),e(k8e,o7r),e(jc,r7r),e(jc,zJ),e(zJ,t7r),e(jc,a7r),e(Xt,n7r),M(l5,Xt,null),e(hr,s7r),e(hr,Or),M(T9,Or,null),e(Or,l7r),e(Or,S8e),e(S8e,i7r),e(Or,d7r),e(Or,un),e(un,c7r),e(un,R8e),e(R8e,f7r),e(un,m7r),e(un,P8e),e(P8e,g7r),e(un,h7r),e(un,B8e),e(B8e,p7r),e(un,u7r),e(Or,_7r),e(Or,Le),e(Le,i5),e(i5,I8e),e(I8e,b7r),e(i5,v7r),e(i5,WJ),e(WJ,F7r),e(i5,T7r),e(Le,M7r),e(Le,d5),e(d5,q8e),e(q8e,E7r),e(d5,C7r),e(d5,QJ),e(QJ,w7r),e(d5,A7r),e(Le,y7r),e(Le,c5),e(c5,N8e),e(N8e,L7r),e(c5,x7r),e(c5,HJ),e(HJ,$7r),e(c5,k7r),e(Le,S7r),e(Le,f5),e(f5,j8e),e(j8e,R7r),e(f5,P7r),e(f5,UJ),e(UJ,B7r),e(f5,I7r),e(Le,q7r),e(Le,m5),e(m5,D8e),e(D8e,N7r),e(m5,j7r),e(m5,JJ),e(JJ,D7r),e(m5,G7r),e(Le,O7r),e(Le,g5),e(g5,G8e),e(G8e,V7r),e(g5,X7r),e(g5,YJ),e(YJ,z7r),e(g5,W7r),e(Le,Q7r),e(Le,h5),e(h5,O8e),e(O8e,H7r),e(h5,U7r),e(h5,KJ),e(KJ,J7r),e(h5,Y7r),e(Le,K7r),e(Le,p5),e(p5,V8e),e(V8e,Z7r),e(p5,e$r),e(p5,ZJ),e(ZJ,o$r),e(p5,r$r),e(Le,t$r),e(Le,u5),e(u5,X8e),e(X8e,a$r),e(u5,n$r),e(u5,eY),e(eY,s$r),e(u5,l$r),e(Le,i$r),e(Le,_5),e(_5,z8e),e(z8e,d$r),e(_5,c$r),e(_5,oY),e(oY,f$r),e(_5,m$r),e(Or,g$r),M(b5,Or,null),b(f,aNe,_),b(f,Dc,_),e(Dc,v5),e(v5,W8e),M(M9,W8e,null),e(Dc,h$r),e(Dc,Q8e),e(Q8e,p$r),b(f,nNe,_),b(f,pr,_),M(E9,pr,null),e(pr,u$r),e(pr,Gc),e(Gc,_$r),e(Gc,rY),e(rY,b$r),e(Gc,v$r),e(Gc,tY),e(tY,F$r),e(Gc,T$r),e(pr,M$r),e(pr,C9),e(C9,E$r),e(C9,H8e),e(H8e,C$r),e(C9,w$r),e(pr,A$r),e(pr,zt),M(w9,zt,null),e(zt,y$r),e(zt,U8e),e(U8e,L$r),e(zt,x$r),e(zt,Oc),e(Oc,$$r),e(Oc,J8e),e(J8e,k$r),e(Oc,S$r),e(Oc,aY),e(aY,R$r),e(Oc,P$r),e(zt,B$r),M(F5,zt,null),e(pr,I$r),e(pr,Vr),M(A9,Vr,null),e(Vr,q$r),e(Vr,Y8e),e(Y8e,N$r),e(Vr,j$r),e(Vr,_n),e(_n,D$r),e(_n,K8e),e(K8e,G$r),e(_n,O$r),e(_n,Z8e),e(Z8e,V$r),e(_n,X$r),e(_n,eMe),e(eMe,z$r),e(_n,W$r),e(Vr,Q$r),e(Vr,Pe),e(Pe,T5),e(T5,oMe),e(oMe,H$r),e(T5,U$r),e(T5,nY),e(nY,J$r),e(T5,Y$r),e(Pe,K$r),e(Pe,M5),e(M5,rMe),e(rMe,Z$r),e(M5,ekr),e(M5,sY),e(sY,okr),e(M5,rkr),e(Pe,tkr),e(Pe,E5),e(E5,tMe),e(tMe,akr),e(E5,nkr),e(E5,lY),e(lY,skr),e(E5,lkr),e(Pe,ikr),e(Pe,C5),e(C5,aMe),e(aMe,dkr),e(C5,ckr),e(C5,iY),e(iY,fkr),e(C5,mkr),e(Pe,gkr),e(Pe,w5),e(w5,nMe),e(nMe,hkr),e(w5,pkr),e(w5,dY),e(dY,ukr),e(w5,_kr),e(Pe,bkr),e(Pe,A5),e(A5,sMe),e(sMe,vkr),e(A5,Fkr),e(A5,cY),e(cY,Tkr),e(A5,Mkr),e(Pe,Ekr),e(Pe,y5),e(y5,lMe),e(lMe,Ckr),e(y5,wkr),e(y5,fY),e(fY,Akr),e(y5,ykr),e(Pe,Lkr),e(Pe,L5),e(L5,iMe),e(iMe,xkr),e(L5,$kr),e(L5,mY),e(mY,kkr),e(L5,Skr),e(Pe,Rkr),e(Pe,x5),e(x5,dMe),e(dMe,Pkr),e(x5,Bkr),e(x5,gY),e(gY,Ikr),e(x5,qkr),e(Vr,Nkr),M($5,Vr,null),b(f,sNe,_),b(f,Vc,_),e(Vc,k5),e(k5,cMe),M(y9,cMe,null),e(Vc,jkr),e(Vc,fMe),e(fMe,Dkr),b(f,lNe,_),b(f,ur,_),M(L9,ur,null),e(ur,Gkr),e(ur,Xc),e(Xc,Okr),e(Xc,hY),e(hY,Vkr),e(Xc,Xkr),e(Xc,pY),e(pY,zkr),e(Xc,Wkr),e(ur,Qkr),e(ur,x9),e(x9,Hkr),e(x9,mMe),e(mMe,Ukr),e(x9,Jkr),e(ur,Ykr),e(ur,Wt),M($9,Wt,null),e(Wt,Kkr),e(Wt,gMe),e(gMe,Zkr),e(Wt,eSr),e(Wt,zc),e(zc,oSr),e(zc,hMe),e(hMe,rSr),e(zc,tSr),e(zc,uY),e(uY,aSr),e(zc,nSr),e(Wt,sSr),M(S5,Wt,null),e(ur,lSr),e(ur,Xr),M(k9,Xr,null),e(Xr,iSr),e(Xr,pMe),e(pMe,dSr),e(Xr,cSr),e(Xr,bn),e(bn,fSr),e(bn,uMe),e(uMe,mSr),e(bn,gSr),e(bn,_Me),e(_Me,hSr),e(bn,pSr),e(bn,bMe),e(bMe,uSr),e(bn,_Sr),e(Xr,bSr),e(Xr,xe),e(xe,R5),e(R5,vMe),e(vMe,vSr),e(R5,FSr),e(R5,_Y),e(_Y,TSr),e(R5,MSr),e(xe,ESr),e(xe,P5),e(P5,FMe),e(FMe,CSr),e(P5,wSr),e(P5,bY),e(bY,ASr),e(P5,ySr),e(xe,LSr),e(xe,B5),e(B5,TMe),e(TMe,xSr),e(B5,$Sr),e(B5,vY),e(vY,kSr),e(B5,SSr),e(xe,RSr),e(xe,I5),e(I5,MMe),e(MMe,PSr),e(I5,BSr),e(I5,FY),e(FY,ISr),e(I5,qSr),e(xe,NSr),e(xe,q5),e(q5,EMe),e(EMe,jSr),e(q5,DSr),e(q5,TY),e(TY,GSr),e(q5,OSr),e(xe,VSr),e(xe,N5),e(N5,CMe),e(CMe,XSr),e(N5,zSr),e(N5,MY),e(MY,WSr),e(N5,QSr),e(xe,HSr),e(xe,j5),e(j5,wMe),e(wMe,USr),e(j5,JSr),e(j5,EY),e(EY,YSr),e(j5,KSr),e(xe,ZSr),e(xe,D5),e(D5,AMe),e(AMe,eRr),e(D5,oRr),e(D5,CY),e(CY,rRr),e(D5,tRr),e(xe,aRr),e(xe,G5),e(G5,yMe),e(yMe,nRr),e(G5,sRr),e(G5,wY),e(wY,lRr),e(G5,iRr),e(xe,dRr),e(xe,O5),e(O5,LMe),e(LMe,cRr),e(O5,fRr),e(O5,AY),e(AY,mRr),e(O5,gRr),e(Xr,hRr),M(V5,Xr,null),b(f,iNe,_),b(f,Wc,_),e(Wc,X5),e(X5,xMe),M(S9,xMe,null),e(Wc,pRr),e(Wc,$Me),e($Me,uRr),b(f,dNe,_),b(f,_r,_),M(R9,_r,null),e(_r,_Rr),e(_r,Qc),e(Qc,bRr),e(Qc,yY),e(yY,vRr),e(Qc,FRr),e(Qc,LY),e(LY,TRr),e(Qc,MRr),e(_r,ERr),e(_r,P9),e(P9,CRr),e(P9,kMe),e(kMe,wRr),e(P9,ARr),e(_r,yRr),e(_r,Qt),M(B9,Qt,null),e(Qt,LRr),e(Qt,SMe),e(SMe,xRr),e(Qt,$Rr),e(Qt,Hc),e(Hc,kRr),e(Hc,RMe),e(RMe,SRr),e(Hc,RRr),e(Hc,xY),e(xY,PRr),e(Hc,BRr),e(Qt,IRr),M(z5,Qt,null),e(_r,qRr),e(_r,zr),M(I9,zr,null),e(zr,NRr),e(zr,PMe),e(PMe,jRr),e(zr,DRr),e(zr,vn),e(vn,GRr),e(vn,BMe),e(BMe,ORr),e(vn,VRr),e(vn,IMe),e(IMe,XRr),e(vn,zRr),e(vn,qMe),e(qMe,WRr),e(vn,QRr),e(zr,HRr),e(zr,$e),e($e,W5),e(W5,NMe),e(NMe,URr),e(W5,JRr),e(W5,$Y),e($Y,YRr),e(W5,KRr),e($e,ZRr),e($e,Q5),e(Q5,jMe),e(jMe,ePr),e(Q5,oPr),e(Q5,kY),e(kY,rPr),e(Q5,tPr),e($e,aPr),e($e,H5),e(H5,DMe),e(DMe,nPr),e(H5,sPr),e(H5,SY),e(SY,lPr),e(H5,iPr),e($e,dPr),e($e,U5),e(U5,GMe),e(GMe,cPr),e(U5,fPr),e(U5,RY),e(RY,mPr),e(U5,gPr),e($e,hPr),e($e,J5),e(J5,OMe),e(OMe,pPr),e(J5,uPr),e(J5,PY),e(PY,_Pr),e(J5,bPr),e($e,vPr),e($e,Y5),e(Y5,VMe),e(VMe,FPr),e(Y5,TPr),e(Y5,BY),e(BY,MPr),e(Y5,EPr),e($e,CPr),e($e,K5),e(K5,XMe),e(XMe,wPr),e(K5,APr),e(K5,IY),e(IY,yPr),e(K5,LPr),e($e,xPr),e($e,Z5),e(Z5,zMe),e(zMe,$Pr),e(Z5,kPr),e(Z5,qY),e(qY,SPr),e(Z5,RPr),e($e,PPr),e($e,e3),e(e3,WMe),e(WMe,BPr),e(e3,IPr),e(e3,NY),e(NY,qPr),e(e3,NPr),e($e,jPr),e($e,o3),e(o3,QMe),e(QMe,DPr),e(o3,GPr),e(o3,jY),e(jY,OPr),e(o3,VPr),e(zr,XPr),M(r3,zr,null),b(f,cNe,_),b(f,Uc,_),e(Uc,t3),e(t3,HMe),M(q9,HMe,null),e(Uc,zPr),e(Uc,UMe),e(UMe,WPr),b(f,fNe,_),b(f,br,_),M(N9,br,null),e(br,QPr),e(br,Jc),e(Jc,HPr),e(Jc,DY),e(DY,UPr),e(Jc,JPr),e(Jc,GY),e(GY,YPr),e(Jc,KPr),e(br,ZPr),e(br,j9),e(j9,eBr),e(j9,JMe),e(JMe,oBr),e(j9,rBr),e(br,tBr),e(br,Ht),M(D9,Ht,null),e(Ht,aBr),e(Ht,YMe),e(YMe,nBr),e(Ht,sBr),e(Ht,Yc),e(Yc,lBr),e(Yc,KMe),e(KMe,iBr),e(Yc,dBr),e(Yc,OY),e(OY,cBr),e(Yc,fBr),e(Ht,mBr),M(a3,Ht,null),e(br,gBr),e(br,Wr),M(G9,Wr,null),e(Wr,hBr),e(Wr,ZMe),e(ZMe,pBr),e(Wr,uBr),e(Wr,Fn),e(Fn,_Br),e(Fn,e4e),e(e4e,bBr),e(Fn,vBr),e(Fn,o4e),e(o4e,FBr),e(Fn,TBr),e(Fn,r4e),e(r4e,MBr),e(Fn,EBr),e(Wr,CBr),e(Wr,De),e(De,n3),e(n3,t4e),e(t4e,wBr),e(n3,ABr),e(n3,VY),e(VY,yBr),e(n3,LBr),e(De,xBr),e(De,s3),e(s3,a4e),e(a4e,$Br),e(s3,kBr),e(s3,XY),e(XY,SBr),e(s3,RBr),e(De,PBr),e(De,l3),e(l3,n4e),e(n4e,BBr),e(l3,IBr),e(l3,zY),e(zY,qBr),e(l3,NBr),e(De,jBr),e(De,i3),e(i3,s4e),e(s4e,DBr),e(i3,GBr),e(i3,WY),e(WY,OBr),e(i3,VBr),e(De,XBr),e(De,d3),e(d3,l4e),e(l4e,zBr),e(d3,WBr),e(d3,QY),e(QY,QBr),e(d3,HBr),e(De,UBr),e(De,c3),e(c3,i4e),e(i4e,JBr),e(c3,YBr),e(c3,HY),e(HY,KBr),e(c3,ZBr),e(De,eIr),e(De,f3),e(f3,d4e),e(d4e,oIr),e(f3,rIr),e(f3,UY),e(UY,tIr),e(f3,aIr),e(De,nIr),e(De,m3),e(m3,c4e),e(c4e,sIr),e(m3,lIr),e(m3,JY),e(JY,iIr),e(m3,dIr),e(Wr,cIr),M(g3,Wr,null),b(f,mNe,_),b(f,Kc,_),e(Kc,h3),e(h3,f4e),M(O9,f4e,null),e(Kc,fIr),e(Kc,m4e),e(m4e,mIr),b(f,gNe,_),b(f,vr,_),M(V9,vr,null),e(vr,gIr),e(vr,Zc),e(Zc,hIr),e(Zc,YY),e(YY,pIr),e(Zc,uIr),e(Zc,KY),e(KY,_Ir),e(Zc,bIr),e(vr,vIr),e(vr,X9),e(X9,FIr),e(X9,g4e),e(g4e,TIr),e(X9,MIr),e(vr,EIr),e(vr,Ut),M(z9,Ut,null),e(Ut,CIr),e(Ut,h4e),e(h4e,wIr),e(Ut,AIr),e(Ut,ef),e(ef,yIr),e(ef,p4e),e(p4e,LIr),e(ef,xIr),e(ef,ZY),e(ZY,$Ir),e(ef,kIr),e(Ut,SIr),M(p3,Ut,null),e(vr,RIr),e(vr,Qr),M(W9,Qr,null),e(Qr,PIr),e(Qr,u4e),e(u4e,BIr),e(Qr,IIr),e(Qr,Tn),e(Tn,qIr),e(Tn,_4e),e(_4e,NIr),e(Tn,jIr),e(Tn,b4e),e(b4e,DIr),e(Tn,GIr),e(Tn,v4e),e(v4e,OIr),e(Tn,VIr),e(Qr,XIr),e(Qr,Ge),e(Ge,u3),e(u3,F4e),e(F4e,zIr),e(u3,WIr),e(u3,eK),e(eK,QIr),e(u3,HIr),e(Ge,UIr),e(Ge,_3),e(_3,T4e),e(T4e,JIr),e(_3,YIr),e(_3,oK),e(oK,KIr),e(_3,ZIr),e(Ge,eqr),e(Ge,b3),e(b3,M4e),e(M4e,oqr),e(b3,rqr),e(b3,rK),e(rK,tqr),e(b3,aqr),e(Ge,nqr),e(Ge,v3),e(v3,E4e),e(E4e,sqr),e(v3,lqr),e(v3,tK),e(tK,iqr),e(v3,dqr),e(Ge,cqr),e(Ge,F3),e(F3,C4e),e(C4e,fqr),e(F3,mqr),e(F3,aK),e(aK,gqr),e(F3,hqr),e(Ge,pqr),e(Ge,T3),e(T3,w4e),e(w4e,uqr),e(T3,_qr),e(T3,nK),e(nK,bqr),e(T3,vqr),e(Ge,Fqr),e(Ge,M3),e(M3,A4e),e(A4e,Tqr),e(M3,Mqr),e(M3,sK),e(sK,Eqr),e(M3,Cqr),e(Ge,wqr),e(Ge,E3),e(E3,y4e),e(y4e,Aqr),e(E3,yqr),e(E3,lK),e(lK,Lqr),e(E3,xqr),e(Qr,$qr),M(C3,Qr,null),b(f,hNe,_),b(f,of,_),e(of,w3),e(w3,L4e),M(Q9,L4e,null),e(of,kqr),e(of,x4e),e(x4e,Sqr),b(f,pNe,_),b(f,Fr,_),M(H9,Fr,null),e(Fr,Rqr),e(Fr,rf),e(rf,Pqr),e(rf,iK),e(iK,Bqr),e(rf,Iqr),e(rf,dK),e(dK,qqr),e(rf,Nqr),e(Fr,jqr),e(Fr,U9),e(U9,Dqr),e(U9,$4e),e($4e,Gqr),e(U9,Oqr),e(Fr,Vqr),e(Fr,Jt),M(J9,Jt,null),e(Jt,Xqr),e(Jt,k4e),e(k4e,zqr),e(Jt,Wqr),e(Jt,tf),e(tf,Qqr),e(tf,S4e),e(S4e,Hqr),e(tf,Uqr),e(tf,cK),e(cK,Jqr),e(tf,Yqr),e(Jt,Kqr),M(A3,Jt,null),e(Fr,Zqr),e(Fr,Hr),M(Y9,Hr,null),e(Hr,eNr),e(Hr,R4e),e(R4e,oNr),e(Hr,rNr),e(Hr,Mn),e(Mn,tNr),e(Mn,P4e),e(P4e,aNr),e(Mn,nNr),e(Mn,B4e),e(B4e,sNr),e(Mn,lNr),e(Mn,I4e),e(I4e,iNr),e(Mn,dNr),e(Hr,cNr),e(Hr,q4e),e(q4e,y3),e(y3,N4e),e(N4e,fNr),e(y3,mNr),e(y3,fK),e(fK,gNr),e(y3,hNr),e(Hr,pNr),M(L3,Hr,null),b(f,uNe,_),b(f,af,_),e(af,x3),e(x3,j4e),M(K9,j4e,null),e(af,uNr),e(af,D4e),e(D4e,_Nr),b(f,_Ne,_),b(f,Tr,_),M(Z9,Tr,null),e(Tr,bNr),e(Tr,nf),e(nf,vNr),e(nf,mK),e(mK,FNr),e(nf,TNr),e(nf,gK),e(gK,MNr),e(nf,ENr),e(Tr,CNr),e(Tr,e7),e(e7,wNr),e(e7,G4e),e(G4e,ANr),e(e7,yNr),e(Tr,LNr),e(Tr,Yt),M(o7,Yt,null),e(Yt,xNr),e(Yt,O4e),e(O4e,$Nr),e(Yt,kNr),e(Yt,sf),e(sf,SNr),e(sf,V4e),e(V4e,RNr),e(sf,PNr),e(sf,hK),e(hK,BNr),e(sf,INr),e(Yt,qNr),M($3,Yt,null),e(Tr,NNr),e(Tr,Ur),M(r7,Ur,null),e(Ur,jNr),e(Ur,X4e),e(X4e,DNr),e(Ur,GNr),e(Ur,En),e(En,ONr),e(En,z4e),e(z4e,VNr),e(En,XNr),e(En,W4e),e(W4e,zNr),e(En,WNr),e(En,Q4e),e(Q4e,QNr),e(En,HNr),e(Ur,UNr),e(Ur,t7),e(t7,k3),e(k3,H4e),e(H4e,JNr),e(k3,YNr),e(k3,pK),e(pK,KNr),e(k3,ZNr),e(t7,ejr),e(t7,S3),e(S3,U4e),e(U4e,ojr),e(S3,rjr),e(S3,uK),e(uK,tjr),e(S3,ajr),e(Ur,njr),M(R3,Ur,null),b(f,bNe,_),b(f,lf,_),e(lf,P3),e(P3,J4e),M(a7,J4e,null),e(lf,sjr),e(lf,Y4e),e(Y4e,ljr),b(f,vNe,_),b(f,Mr,_),M(n7,Mr,null),e(Mr,ijr),e(Mr,df),e(df,djr),e(df,_K),e(_K,cjr),e(df,fjr),e(df,bK),e(bK,mjr),e(df,gjr),e(Mr,hjr),e(Mr,s7),e(s7,pjr),e(s7,K4e),e(K4e,ujr),e(s7,_jr),e(Mr,bjr),e(Mr,Kt),M(l7,Kt,null),e(Kt,vjr),e(Kt,Z4e),e(Z4e,Fjr),e(Kt,Tjr),e(Kt,cf),e(cf,Mjr),e(cf,eEe),e(eEe,Ejr),e(cf,Cjr),e(cf,vK),e(vK,wjr),e(cf,Ajr),e(Kt,yjr),M(B3,Kt,null),e(Mr,Ljr),e(Mr,Jr),M(i7,Jr,null),e(Jr,xjr),e(Jr,oEe),e(oEe,$jr),e(Jr,kjr),e(Jr,Cn),e(Cn,Sjr),e(Cn,rEe),e(rEe,Rjr),e(Cn,Pjr),e(Cn,tEe),e(tEe,Bjr),e(Cn,Ijr),e(Cn,aEe),e(aEe,qjr),e(Cn,Njr),e(Jr,jjr),e(Jr,nEe),e(nEe,I3),e(I3,sEe),e(sEe,Djr),e(I3,Gjr),e(I3,FK),e(FK,Ojr),e(I3,Vjr),e(Jr,Xjr),M(q3,Jr,null),FNe=!0},p(f,[_]){const d7={};_&2&&(d7.$$scope={dirty:_,ctx:f}),vf.$set(d7);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),bg.$set(lEe);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),Kg.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),yh.$set(dEe);const c7={};_&2&&(c7.$$scope={dirty:_,ctx:f}),Lh.$set(c7);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),Qh.$set(cEe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Hh.$set(wn);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),Yh.$set(fEe);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),Ou.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),Xu.$set(gEe);const f7={};_&2&&(f7.$$scope={dirty:_,ctx:f}),R_.$set(f7);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),B_.$set(hEe);const m7={};_&2&&(m7.$$scope={dirty:_,ctx:f}),v1.$set(m7);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),T1.$set(pEe);const g7={};_&2&&(g7.$$scope={dirty:_,ctx:f}),a2.$set(g7);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),s2.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),C2.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),A2.$set(bEe);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),Fb.$set(ff);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),Mb.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),Zb.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),ov.$set(TEe);const h7={};_&2&&(h7.$$scope={dirty:_,ctx:f}),iv.$set(h7);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),cv.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),zv.$set(EEe);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),Qv.$set(CEe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),PF.$set(et);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:f}),IF.$set(p7);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),jF.$set(wEe);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:f}),GF.$set(u7);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),e6.$set(AEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),r6.$set(ot);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),n6.$set(yEe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),l6.$set(mf);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),b6.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),F6.$set(xEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),y6.$set(y);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),x6.$set(N3);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),D6.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),O6.$set(kEe);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),W6.$set(j3);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),H6.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),oT.$set(REe);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),tT.$set(D3);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),iT.$set(PEe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),cT.$set(BEe);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),hT.$set(G3);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),uT.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),vT.$set(qEe);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),TT.$set(O3);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),yT.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),xT.$set(jEe);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),ST.$set(V3);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),PT.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),w8.$set(GEe);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),y8.$set(X3);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),Y8.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),Z8.$set(VEe);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),mM.$set(z3);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),hM.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),bM.$set(zEe);const W3={};_&2&&(W3.$$scope={dirty:_,ctx:f}),FM.$set(W3);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),GM.$set(WEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),VM.$set(QEe);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),e4.$set(Q3);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),r4.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),x4.$set(UEe);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),k4.$set(H3);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),U4.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),Y4.$set(YEe);const U3={};_&2&&(U3.$$scope={dirty:_,ctx:f}),eE.$set(U3);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),rE.$set(KEe);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),aE.$set(ZEe);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),sE.$set(J3);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),yE.$set(eCe);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),xE.$set(oCe);const Y3={};_&2&&(Y3.$$scope={dirty:_,ctx:f}),JE.$set(Y3);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),KE.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),eC.$set(tCe);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),rC.$set(K3);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),aC.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),sC.$set(nCe);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),SC.$set(Z3);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),PC.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),XC.$set(lCe);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),WC.$set(ew);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),n5.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),l5.$set(dCe);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),b5.$set(ow);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),F5.$set(cCe);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),$5.$set(fCe);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),S5.$set(rw);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),V5.$set(mCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),z5.$set(gCe);const tw={};_&2&&(tw.$$scope={dirty:_,ctx:f}),r3.$set(tw);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),a3.$set(hCe);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),g3.$set(pCe);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),p3.$set(aw);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),C3.$set(uCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),A3.$set(_Ce);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),L3.$set(nw);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),$3.$set(bCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),R3.$set(vCe);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),B3.$set(sw);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),q3.$set(FCe)},i(f){FNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(a0.$$.fragment,f),E(n0.$$.fragment,f),E(vf.$$.fragment,f),E(s0.$$.fragment,f),E(l0.$$.fragment,f),E(c0.$$.fragment,f),E(bg.$$.fragment,f),E(f0.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(u0.$$.fragment,f),E(Kg.$$.fragment,f),E(_0.$$.fragment,f),E(b0.$$.fragment,f),E(v0.$$.fragment,f),E(M0.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(E0.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(L0.$$.fragment,f),E(Qh.$$.fragment,f),E(Hh.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(k0.$$.fragment,f),E(R0.$$.fragment,f),E(Yh.$$.fragment,f),E(P0.$$.fragment,f),E(Ou.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(N0.$$.fragment,f),E(Xu.$$.fragment,f),E(j0.$$.fragment,f),E(R_.$$.fragment,f),E(D0.$$.fragment,f),E(G0.$$.fragment,f),E(V0.$$.fragment,f),E(B_.$$.fragment,f),E(X0.$$.fragment,f),E(v1.$$.fragment,f),E(z0.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(T1.$$.fragment,f),E(U0.$$.fragment,f),E(a2.$$.fragment,f),E(J0.$$.fragment,f),E(Y0.$$.fragment,f),E(Z0.$$.fragment,f),E(s2.$$.fragment,f),E(ey.$$.fragment,f),E(C2.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(A2.$$.fragment,f),E(ny.$$.fragment,f),E(Fb.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(Mb.$$.fragment,f),E(cy.$$.fragment,f),E(Zb.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(ov.$$.fragment,f),E(py.$$.fragment,f),E(iv.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(cv.$$.fragment,f),E(Fy.$$.fragment,f),E(zv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Qv.$$.fragment,f),E(wy.$$.fragment,f),E(PF.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(IF.$$.fragment,f),E($y.$$.fragment,f),E(jF.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(GF.$$.fragment,f),E(By.$$.fragment,f),E(e6.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(r6.$$.fragment,f),E(Dy.$$.fragment,f),E(n6.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(l6.$$.fragment,f),E(zy.$$.fragment,f),E(b6.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(F6.$$.fragment,f),E(Jy.$$.fragment,f),E(y6.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(x6.$$.fragment,f),E(oL.$$.fragment,f),E(D6.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(O6.$$.fragment,f),E(sL.$$.fragment,f),E(W6.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(H6.$$.fragment,f),E(mL.$$.fragment,f),E(oT.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(tT.$$.fragment,f),E(_L.$$.fragment,f),E(iT.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(cT.$$.fragment,f),E(ML.$$.fragment,f),E(hT.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(uT.$$.fragment,f),E(LL.$$.fragment,f),E(vT.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(TT.$$.fragment,f),E(RL.$$.fragment,f),E(yT.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(xT.$$.fragment,f),E(NL.$$.fragment,f),E(ST.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(PT.$$.fragment,f),E(VL.$$.fragment,f),E(w8.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(y8.$$.fragment,f),E(HL.$$.fragment,f),E(Y8.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(Z8.$$.fragment,f),E(ZL.$$.fragment,f),E(mM.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(hM.$$.fragment,f),E(ax.$$.fragment,f),E(bM.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(FM.$$.fragment,f),E(dx.$$.fragment,f),E(GM.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(VM.$$.fragment,f),E(hx.$$.fragment,f),E(e4.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(r4.$$.fragment,f),E(vx.$$.fragment,f),E(x4.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(k4.$$.fragment,f),E(Cx.$$.fragment,f),E(U4.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(Y4.$$.fragment,f),E(xx.$$.fragment,f),E(eE.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(rE.$$.fragment,f),E(Bx.$$.fragment,f),E(aE.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(sE.$$.fragment,f),E(Dx.$$.fragment,f),E(yE.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(xE.$$.fragment,f),E(zx.$$.fragment,f),E(JE.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(KE.$$.fragment,f),E(Jx.$$.fragment,f),E(eC.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e9.$$.fragment,f),E(rC.$$.fragment,f),E(o9.$$.fragment,f),E(aC.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(sC.$$.fragment,f),E(s9.$$.fragment,f),E(SC.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(PC.$$.fragment,f),E(f9.$$.fragment,f),E(XC.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(WC.$$.fragment,f),E(u9.$$.fragment,f),E(n5.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(l5.$$.fragment,f),E(T9.$$.fragment,f),E(b5.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(F5.$$.fragment,f),E(A9.$$.fragment,f),E($5.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(S5.$$.fragment,f),E(k9.$$.fragment,f),E(V5.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(z5.$$.fragment,f),E(I9.$$.fragment,f),E(r3.$$.fragment,f),E(q9.$$.fragment,f),E(N9.$$.fragment,f),E(D9.$$.fragment,f),E(a3.$$.fragment,f),E(G9.$$.fragment,f),E(g3.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(p3.$$.fragment,f),E(W9.$$.fragment,f),E(C3.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(A3.$$.fragment,f),E(Y9.$$.fragment,f),E(L3.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(o7.$$.fragment,f),E($3.$$.fragment,f),E(r7.$$.fragment,f),E(R3.$$.fragment,f),E(a7.$$.fragment,f),E(n7.$$.fragment,f),E(l7.$$.fragment,f),E(B3.$$.fragment,f),E(i7.$$.fragment,f),E(q3.$$.fragment,f),FNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(a0.$$.fragment,f),C(n0.$$.fragment,f),C(vf.$$.fragment,f),C(s0.$$.fragment,f),C(l0.$$.fragment,f),C(c0.$$.fragment,f),C(bg.$$.fragment,f),C(f0.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(u0.$$.fragment,f),C(Kg.$$.fragment,f),C(_0.$$.fragment,f),C(b0.$$.fragment,f),C(v0.$$.fragment,f),C(M0.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(E0.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(L0.$$.fragment,f),C(Qh.$$.fragment,f),C(Hh.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(k0.$$.fragment,f),C(R0.$$.fragment,f),C(Yh.$$.fragment,f),C(P0.$$.fragment,f),C(Ou.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(N0.$$.fragment,f),C(Xu.$$.fragment,f),C(j0.$$.fragment,f),C(R_.$$.fragment,f),C(D0.$$.fragment,f),C(G0.$$.fragment,f),C(V0.$$.fragment,f),C(B_.$$.fragment,f),C(X0.$$.fragment,f),C(v1.$$.fragment,f),C(z0.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(T1.$$.fragment,f),C(U0.$$.fragment,f),C(a2.$$.fragment,f),C(J0.$$.fragment,f),C(Y0.$$.fragment,f),C(Z0.$$.fragment,f),C(s2.$$.fragment,f),C(ey.$$.fragment,f),C(C2.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(A2.$$.fragment,f),C(ny.$$.fragment,f),C(Fb.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(Mb.$$.fragment,f),C(cy.$$.fragment,f),C(Zb.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(ov.$$.fragment,f),C(py.$$.fragment,f),C(iv.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(cv.$$.fragment,f),C(Fy.$$.fragment,f),C(zv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Qv.$$.fragment,f),C(wy.$$.fragment,f),C(PF.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(IF.$$.fragment,f),C($y.$$.fragment,f),C(jF.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(GF.$$.fragment,f),C(By.$$.fragment,f),C(e6.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(r6.$$.fragment,f),C(Dy.$$.fragment,f),C(n6.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(l6.$$.fragment,f),C(zy.$$.fragment,f),C(b6.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(F6.$$.fragment,f),C(Jy.$$.fragment,f),C(y6.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(x6.$$.fragment,f),C(oL.$$.fragment,f),C(D6.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(O6.$$.fragment,f),C(sL.$$.fragment,f),C(W6.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(H6.$$.fragment,f),C(mL.$$.fragment,f),C(oT.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(tT.$$.fragment,f),C(_L.$$.fragment,f),C(iT.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(cT.$$.fragment,f),C(ML.$$.fragment,f),C(hT.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(uT.$$.fragment,f),C(LL.$$.fragment,f),C(vT.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(TT.$$.fragment,f),C(RL.$$.fragment,f),C(yT.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(xT.$$.fragment,f),C(NL.$$.fragment,f),C(ST.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(PT.$$.fragment,f),C(VL.$$.fragment,f),C(w8.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(y8.$$.fragment,f),C(HL.$$.fragment,f),C(Y8.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(Z8.$$.fragment,f),C(ZL.$$.fragment,f),C(mM.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(hM.$$.fragment,f),C(ax.$$.fragment,f),C(bM.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(FM.$$.fragment,f),C(dx.$$.fragment,f),C(GM.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(VM.$$.fragment,f),C(hx.$$.fragment,f),C(e4.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(r4.$$.fragment,f),C(vx.$$.fragment,f),C(x4.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(k4.$$.fragment,f),C(Cx.$$.fragment,f),C(U4.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(Y4.$$.fragment,f),C(xx.$$.fragment,f),C(eE.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(rE.$$.fragment,f),C(Bx.$$.fragment,f),C(aE.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(sE.$$.fragment,f),C(Dx.$$.fragment,f),C(yE.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(xE.$$.fragment,f),C(zx.$$.fragment,f),C(JE.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(KE.$$.fragment,f),C(Jx.$$.fragment,f),C(eC.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e9.$$.fragment,f),C(rC.$$.fragment,f),C(o9.$$.fragment,f),C(aC.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(sC.$$.fragment,f),C(s9.$$.fragment,f),C(SC.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(PC.$$.fragment,f),C(f9.$$.fragment,f),C(XC.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(WC.$$.fragment,f),C(u9.$$.fragment,f),C(n5.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(l5.$$.fragment,f),C(T9.$$.fragment,f),C(b5.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(F5.$$.fragment,f),C(A9.$$.fragment,f),C($5.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(S5.$$.fragment,f),C(k9.$$.fragment,f),C(V5.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(z5.$$.fragment,f),C(I9.$$.fragment,f),C(r3.$$.fragment,f),C(q9.$$.fragment,f),C(N9.$$.fragment,f),C(D9.$$.fragment,f),C(a3.$$.fragment,f),C(G9.$$.fragment,f),C(g3.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(p3.$$.fragment,f),C(W9.$$.fragment,f),C(C3.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(A3.$$.fragment,f),C(Y9.$$.fragment,f),C(L3.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(o7.$$.fragment,f),C($3.$$.fragment,f),C(r7.$$.fragment,f),C(R3.$$.fragment,f),C(a7.$$.fragment,f),C(n7.$$.fragment,f),C(l7.$$.fragment,f),C(B3.$$.fragment,f),C(i7.$$.fragment,f),C(q3.$$.fragment,f),FNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(_Ie),f&&t(ui),w(a0),f&&t(bIe),f&&t($n),f&&t(vIe),w(n0,f),f&&t(FIe),f&&t(A$),f&&t(TIe),w(vf,f),f&&t(MIe),f&&t(_i),w(s0),f&&t(EIe),f&&t(Co),w(l0),w(c0),w(bg),w(f0),f&&t(CIe),f&&t(vi),w(m0),f&&t(wIe),f&&t(wo),w(g0),w(u0),w(Kg),w(_0),f&&t(AIe),f&&t(Fi),w(b0),f&&t(yIe),f&&t(Ao),w(v0),w(M0),w(yh),w(Lh),w(E0),f&&t(LIe),f&&t(Ti),w(C0),f&&t(xIe),f&&t(yo),w(w0),w(L0),w(Qh),w(Hh),w(x0),f&&t($Ie),f&&t(Ei),w($0),f&&t(kIe),f&&t(Lo),w(k0),w(R0),w(Yh),w(P0),w(Ou),f&&t(SIe),f&&t(Ai),w(B0),f&&t(RIe),f&&t(xo),w(I0),w(N0),w(Xu),w(j0),w(R_),f&&t(PIe),f&&t(xi),w(D0),f&&t(BIe),f&&t($o),w(G0),w(V0),w(B_),w(X0),w(v1),f&&t(IIe),f&&t(Si),w(z0),f&&t(qIe),f&&t(ko),w(W0),w(H0),w(T1),w(U0),w(a2),f&&t(NIe),f&&t(Bi),w(J0),f&&t(jIe),f&&t(So),w(Y0),w(Z0),w(s2),w(ey),w(C2),f&&t(DIe),f&&t(Ni),w(oy),f&&t(GIe),f&&t(Ro),w(ry),w(ay),w(A2),w(ny),w(Fb),f&&t(OIe),f&&t(Gi),w(sy),f&&t(VIe),f&&t(Po),w(ly),w(dy),w(Mb),w(cy),w(Zb),f&&t(XIe),f&&t(Xi),w(fy),f&&t(zIe),f&&t(Bo),w(my),w(hy),w(ov),w(py),w(iv),f&&t(WIe),f&&t(Qi),w(uy),f&&t(QIe),f&&t(Io),w(_y),w(vy),w(cv),w(Fy),w(zv),f&&t(HIe),f&&t(Ji),w(Ty),f&&t(UIe),f&&t(qo),w(My),w(Cy),w(Qv),w(wy),w(PF),f&&t(JIe),f&&t(Zi),w(Ay),f&&t(YIe),f&&t(No),w(yy),w(xy),w(IF),w($y),w(jF),f&&t(KIe),f&&t(rd),w(ky),f&&t(ZIe),f&&t(jo),w(Sy),w(Py),w(GF),w(By),w(e6),f&&t(eqe),f&&t(nd),w(Iy),f&&t(oqe),f&&t(Do),w(qy),w(jy),w(r6),w(Dy),w(n6),f&&t(rqe),f&&t(id),w(Gy),f&&t(tqe),f&&t(Go),w(Oy),w(Xy),w(l6),w(zy),w(b6),f&&t(aqe),f&&t(fd),w(Wy),f&&t(nqe),f&&t(Oo),w(Qy),w(Uy),w(F6),w(Jy),w(y6),f&&t(sqe),f&&t(hd),w(Yy),f&&t(lqe),f&&t(Vo),w(Ky),w(eL),w(x6),w(oL),w(D6),f&&t(iqe),f&&t(_d),w(rL),f&&t(dqe),f&&t(Xo),w(tL),w(nL),w(O6),w(sL),w(W6),f&&t(cqe),f&&t(Fd),w(iL),f&&t(fqe),f&&t(zo),w(dL),w(fL),w(H6),w(mL),w(oT),f&&t(mqe),f&&t(Ed),w(gL),f&&t(gqe),f&&t(Wo),w(hL),w(uL),w(tT),w(_L),w(iT),f&&t(hqe),f&&t(yd),w(bL),f&&t(pqe),f&&t(Qo),w(vL),w(TL),w(cT),w(ML),w(hT),f&&t(uqe),f&&t($d),w(CL),f&&t(_qe),f&&t(Ho),w(wL),w(yL),w(uT),w(LL),w(vT),f&&t(bqe),f&&t(Rd),w(xL),f&&t(vqe),f&&t(Uo),w($L),w(SL),w(TT),w(RL),w(yT),f&&t(Fqe),f&&t(Id),w(PL),f&&t(Tqe),f&&t(Jo),w(BL),w(qL),w(xT),w(NL),w(ST),f&&t(Mqe),f&&t(jd),w(jL),f&&t(Eqe),f&&t(Yo),w(DL),w(OL),w(PT),w(VL),w(w8),f&&t(Cqe),f&&t(Od),w(XL),f&&t(wqe),f&&t(Ko),w(zL),w(QL),w(y8),w(HL),w(Y8),f&&t(Aqe),f&&t(zd),w(UL),f&&t(yqe),f&&t(Zo),w(JL),w(KL),w(Z8),w(ZL),w(mM),f&&t(Lqe),f&&t(Hd),w(ex),f&&t(xqe),f&&t(er),w(ox),w(tx),w(hM),w(ax),w(bM),f&&t($qe),f&&t(Kd),w(nx),f&&t(kqe),f&&t(or),w(sx),w(ix),w(FM),w(dx),w(GM),f&&t(Sqe),f&&t(oc),w(cx),f&&t(Rqe),f&&t(rr),w(fx),w(gx),w(VM),w(hx),w(e4),f&&t(Pqe),f&&t(ac),w(px),f&&t(Bqe),f&&t(tr),w(ux),w(bx),w(r4),w(vx),w(x4),f&&t(Iqe),f&&t(lc),w(Fx),f&&t(qqe),f&&t(ar),w(Tx),w(Ex),w(k4),w(Cx),w(U4),f&&t(Nqe),f&&t(cc),w(wx),f&&t(jqe),f&&t(nr),w(Ax),w(Lx),w(Y4),w(xx),w(eE),f&&t(Dqe),f&&t(gc),w(kx),f&&t(Gqe),f&&t(sr),w(Sx),w(Px),w(rE),w(Bx),w(aE),f&&t(Oqe),f&&t(uc),w(Ix),f&&t(Vqe),f&&t(lr),w(qx),w(jx),w(sE),w(Dx),w(yE),f&&t(Xqe),f&&t(vc),w(Gx),f&&t(zqe),f&&t(ir),w(Ox),w(Xx),w(xE),w(zx),w(JE),f&&t(Wqe),f&&t(Mc),w(Wx),f&&t(Qqe),f&&t(dr),w(Qx),w(Ux),w(KE),w(Jx),w(eC),f&&t(Hqe),f&&t(wc),w(Yx),f&&t(Uqe),f&&t(cr),w(Kx),w(e9),w(rC),w(o9),w(aC),f&&t(Jqe),f&&t(Lc),w(r9),f&&t(Yqe),f&&t(fr),w(t9),w(n9),w(sC),w(s9),w(SC),f&&t(Kqe),f&&t(kc),w(l9),f&&t(Zqe),f&&t(mr),w(i9),w(c9),w(PC),w(f9),w(XC),f&&t(eNe),f&&t(Pc),w(m9),f&&t(oNe),f&&t(gr),w(g9),w(p9),w(WC),w(u9),w(n5),f&&t(rNe),f&&t(qc),w(_9),f&&t(tNe),f&&t(hr),w(b9),w(F9),w(l5),w(T9),w(b5),f&&t(aNe),f&&t(Dc),w(M9),f&&t(nNe),f&&t(pr),w(E9),w(w9),w(F5),w(A9),w($5),f&&t(sNe),f&&t(Vc),w(y9),f&&t(lNe),f&&t(ur),w(L9),w($9),w(S5),w(k9),w(V5),f&&t(iNe),f&&t(Wc),w(S9),f&&t(dNe),f&&t(_r),w(R9),w(B9),w(z5),w(I9),w(r3),f&&t(cNe),f&&t(Uc),w(q9),f&&t(fNe),f&&t(br),w(N9),w(D9),w(a3),w(G9),w(g3),f&&t(mNe),f&&t(Kc),w(O9),f&&t(gNe),f&&t(vr),w(V9),w(z9),w(p3),w(W9),w(C3),f&&t(hNe),f&&t(of),w(Q9),f&&t(pNe),f&&t(Fr),w(H9),w(J9),w(A3),w(Y9),w(L3),f&&t(uNe),f&&t(af),w(K9),f&&t(_Ne),f&&t(Tr),w(Z9),w(o7),w($3),w(r7),w(R3),f&&t(bNe),f&&t(lf),w(a7),f&&t(vNe),f&&t(Mr),w(n7),w(l7),w(B3),w(i7),w(q3)}}}const Rxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Pxt(L){return Pyt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gxt extends $yt{constructor(g){super();kyt(this,g,Pxt,Sxt,Syt,{})}}export{Gxt as default,Rxt as metadata};
