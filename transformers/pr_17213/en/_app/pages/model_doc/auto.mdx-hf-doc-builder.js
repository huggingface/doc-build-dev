import{S as s$t,i as l$t,s as i$t,e as a,k as l,w as F,t as o,M as d$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as c$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as $Vr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function f$t(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,E6,uf,je,We,hi,yn,C6,Ln,xn,w6,pi,$n,A6,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),E6=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),C6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),w6=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),A6=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var z$=s(p);m=r(z$,"NewModelConfig"),z$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var W$=s(fi);pf=r(W$,"model_type"),W$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var Q$=s(mi);gi=r(Q$,'"new-model"'),Q$.forEach(t),E6=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),C6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var H$=s(Ln);xn=r(H$,"PreTrainedModel"),H$.forEach(t),w6=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),A6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var U$=s(ui);_f=r(U$,"NewModelConfig"),U$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,E6),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,C6),e(je,Ln),e(Ln,xn),e(je,w6),e(je,pi),e(pi,$n),e(je,A6),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,E6,uf,je,We,hi,yn,C6,Ln,xn,w6,pi,$n,A6,ui,_f,Ca,Qe,Ae,z$,_i,W$,Q$,Eo,wa,H$,bf,U$,dOe,Kqe,bi,vf,soe,y6,cOe,loe,fOe,Zqe,kn,mOe,ioe,gOe,hOe,doe,pOe,uOe,eNe,L6,oNe,J$,_Oe,rNe,Ff,tNe,vi,Tf,coe,x6,bOe,foe,vOe,aNe,Co,$6,FOe,k6,TOe,Y$,MOe,EOe,COe,S6,wOe,moe,AOe,yOe,LOe,Er,R6,xOe,goe,$Oe,kOe,Fi,SOe,hoe,ROe,POe,poe,BOe,IOe,qOe,A,Mf,uoe,NOe,jOe,K$,DOe,GOe,OOe,Ef,_oe,VOe,XOe,Z$,zOe,WOe,QOe,Cf,boe,HOe,UOe,ek,JOe,YOe,KOe,wf,voe,ZOe,eVe,ok,oVe,rVe,tVe,Af,Foe,aVe,nVe,rk,sVe,lVe,iVe,yf,Toe,dVe,cVe,tk,fVe,mVe,gVe,Lf,Moe,hVe,pVe,ak,uVe,_Ve,bVe,xf,Eoe,vVe,FVe,nk,TVe,MVe,EVe,$f,Coe,CVe,wVe,sk,AVe,yVe,LVe,kf,woe,xVe,$Ve,lk,kVe,SVe,RVe,Sf,Aoe,PVe,BVe,ik,IVe,qVe,NVe,Rf,yoe,jVe,DVe,dk,GVe,OVe,VVe,Pf,Loe,XVe,zVe,ck,WVe,QVe,HVe,Bf,xoe,UVe,JVe,fk,YVe,KVe,ZVe,If,$oe,eXe,oXe,mk,rXe,tXe,aXe,qf,koe,nXe,sXe,gk,lXe,iXe,dXe,Nf,Soe,cXe,fXe,hk,mXe,gXe,hXe,jf,Roe,pXe,uXe,pk,_Xe,bXe,vXe,Df,Poe,FXe,TXe,uk,MXe,EXe,CXe,Gf,Boe,wXe,AXe,_k,yXe,LXe,xXe,Of,Ioe,$Xe,kXe,bk,SXe,RXe,PXe,Vf,qoe,BXe,IXe,vk,qXe,NXe,jXe,Xf,Noe,DXe,GXe,Fk,OXe,VXe,XXe,zf,joe,zXe,WXe,Tk,QXe,HXe,UXe,Wf,Doe,JXe,YXe,Mk,KXe,ZXe,eze,Qf,Goe,oze,rze,Ek,tze,aze,nze,Hf,Ooe,sze,lze,Ck,ize,dze,cze,Uf,Voe,fze,mze,wk,gze,hze,pze,Jf,Xoe,uze,_ze,Ak,bze,vze,Fze,Yf,zoe,Tze,Mze,yk,Eze,Cze,wze,Kf,Woe,Aze,yze,Lk,Lze,xze,$ze,Zf,Qoe,kze,Sze,xk,Rze,Pze,Bze,em,Hoe,Ize,qze,$k,Nze,jze,Dze,om,Uoe,Gze,Oze,kk,Vze,Xze,zze,rm,Joe,Wze,Qze,Sk,Hze,Uze,Jze,tm,Yoe,Yze,Kze,Rk,Zze,eWe,oWe,am,Koe,rWe,tWe,Pk,aWe,nWe,sWe,nm,Zoe,lWe,iWe,Bk,dWe,cWe,fWe,sm,ere,mWe,gWe,Ik,hWe,pWe,uWe,lm,ore,_We,bWe,qk,vWe,FWe,TWe,im,rre,MWe,EWe,Nk,CWe,wWe,AWe,dm,tre,yWe,LWe,jk,xWe,$We,kWe,cm,are,SWe,RWe,Dk,PWe,BWe,IWe,fm,nre,qWe,NWe,Gk,jWe,DWe,GWe,mm,sre,OWe,VWe,Ok,XWe,zWe,WWe,gm,lre,QWe,HWe,Vk,UWe,JWe,YWe,hm,ire,KWe,ZWe,Xk,eQe,oQe,rQe,pm,dre,tQe,aQe,zk,nQe,sQe,lQe,um,cre,iQe,dQe,Wk,cQe,fQe,mQe,_m,fre,gQe,hQe,Qk,pQe,uQe,_Qe,bm,mre,bQe,vQe,Hk,FQe,TQe,MQe,vm,gre,EQe,CQe,Uk,wQe,AQe,yQe,Fm,hre,LQe,xQe,Jk,$Qe,kQe,SQe,Tm,pre,RQe,PQe,Yk,BQe,IQe,qQe,Mm,ure,NQe,jQe,Kk,DQe,GQe,OQe,Em,_re,VQe,XQe,Zk,zQe,WQe,QQe,Cm,bre,HQe,UQe,eS,JQe,YQe,KQe,wm,vre,ZQe,eHe,oS,oHe,rHe,tHe,Am,Fre,aHe,nHe,rS,sHe,lHe,iHe,ym,Tre,dHe,cHe,tS,fHe,mHe,gHe,Lm,Mre,hHe,pHe,aS,uHe,_He,bHe,xm,Ere,vHe,FHe,nS,THe,MHe,EHe,$m,Cre,CHe,wHe,sS,AHe,yHe,LHe,km,wre,xHe,$He,lS,kHe,SHe,RHe,Sm,Are,PHe,BHe,iS,IHe,qHe,NHe,Rm,yre,jHe,DHe,dS,GHe,OHe,VHe,Pm,Lre,XHe,zHe,cS,WHe,QHe,HHe,Bm,xre,UHe,JHe,fS,YHe,KHe,ZHe,Im,$re,eUe,oUe,mS,rUe,tUe,aUe,qm,kre,nUe,sUe,gS,lUe,iUe,dUe,Nm,Sre,cUe,fUe,hS,mUe,gUe,hUe,jm,Rre,pUe,uUe,pS,_Ue,bUe,vUe,Dm,Pre,FUe,TUe,uS,MUe,EUe,CUe,Gm,Bre,wUe,AUe,_S,yUe,LUe,xUe,Om,Ire,$Ue,kUe,bS,SUe,RUe,PUe,Vm,qre,BUe,IUe,vS,qUe,NUe,jUe,Xm,Nre,DUe,GUe,FS,OUe,VUe,XUe,zm,jre,zUe,WUe,TS,QUe,HUe,UUe,Wm,Dre,JUe,YUe,MS,KUe,ZUe,eJe,Qm,Gre,oJe,rJe,ES,tJe,aJe,nJe,Hm,Ore,sJe,lJe,CS,iJe,dJe,cJe,Um,Vre,fJe,mJe,wS,gJe,hJe,pJe,Jm,Xre,uJe,_Je,AS,bJe,vJe,FJe,Ym,zre,TJe,MJe,yS,EJe,CJe,wJe,Km,Wre,AJe,yJe,LS,LJe,xJe,$Je,Zm,Qre,kJe,SJe,xS,RJe,PJe,BJe,eg,Hre,IJe,qJe,$S,NJe,jJe,DJe,og,Ure,GJe,OJe,kS,VJe,XJe,zJe,rg,Jre,WJe,QJe,SS,HJe,UJe,JJe,tg,Yre,YJe,KJe,RS,ZJe,eYe,oYe,ag,Kre,rYe,tYe,PS,aYe,nYe,sYe,ng,Zre,lYe,iYe,BS,dYe,cYe,fYe,sg,ete,mYe,gYe,IS,hYe,pYe,uYe,lg,ote,_Ye,bYe,qS,vYe,FYe,TYe,ig,rte,MYe,EYe,NS,CYe,wYe,AYe,dg,tte,yYe,LYe,jS,xYe,$Ye,kYe,cg,ate,SYe,RYe,DS,PYe,BYe,IYe,fg,nte,qYe,NYe,GS,jYe,DYe,GYe,mg,ste,OYe,VYe,OS,XYe,zYe,WYe,gg,lte,QYe,HYe,VS,UYe,JYe,YYe,hg,ite,KYe,ZYe,XS,eKe,oKe,rKe,pg,dte,tKe,aKe,zS,nKe,sKe,lKe,ug,cte,iKe,dKe,WS,cKe,fKe,mKe,_g,fte,gKe,hKe,QS,pKe,uKe,_Ke,bg,mte,bKe,vKe,HS,FKe,TKe,MKe,vg,gte,EKe,CKe,US,wKe,AKe,yKe,Fg,hte,LKe,xKe,JS,$Ke,kKe,SKe,Tg,pte,RKe,PKe,YS,BKe,IKe,qKe,Mg,ute,NKe,jKe,KS,DKe,GKe,OKe,Eg,VKe,Cg,P6,XKe,_te,zKe,nNe,Ti,wg,bte,B6,WKe,vte,QKe,sNe,wo,I6,HKe,q6,UKe,ZS,JKe,YKe,KKe,N6,ZKe,Fte,eZe,oZe,rZe,Cr,j6,tZe,Tte,aZe,nZe,Aa,sZe,Mte,lZe,iZe,Ete,dZe,cZe,Cte,fZe,mZe,gZe,k,Sn,wte,hZe,pZe,eR,uZe,_Ze,oR,bZe,vZe,FZe,Rn,Ate,TZe,MZe,rR,EZe,CZe,tR,wZe,AZe,yZe,Pn,yte,LZe,xZe,aR,$Ze,kZe,nR,SZe,RZe,PZe,Ag,Lte,BZe,IZe,sR,qZe,NZe,jZe,Bn,xte,DZe,GZe,lR,OZe,VZe,iR,XZe,zZe,WZe,yg,$te,QZe,HZe,dR,UZe,JZe,YZe,Lg,kte,KZe,ZZe,cR,eeo,oeo,reo,xg,Ste,teo,aeo,fR,neo,seo,leo,In,Rte,ieo,deo,mR,ceo,feo,gR,meo,geo,heo,qn,Pte,peo,ueo,hR,_eo,beo,pR,veo,Feo,Teo,Nn,Bte,Meo,Eeo,uR,Ceo,weo,_R,Aeo,yeo,Leo,$g,Ite,xeo,$eo,bR,keo,Seo,Reo,kg,qte,Peo,Beo,vR,Ieo,qeo,Neo,jn,Nte,jeo,Deo,FR,Geo,Oeo,TR,Veo,Xeo,zeo,Sg,jte,Weo,Qeo,MR,Heo,Ueo,Jeo,Dn,Dte,Yeo,Keo,ER,Zeo,eoo,CR,ooo,roo,too,Gn,Gte,aoo,noo,wR,soo,loo,AR,ioo,doo,coo,On,Ote,foo,moo,yR,goo,hoo,LR,poo,uoo,_oo,Rg,Vte,boo,voo,xR,Foo,Too,Moo,Vn,Xte,Eoo,Coo,$R,woo,Aoo,kR,yoo,Loo,xoo,Xn,zte,$oo,koo,SR,Soo,Roo,RR,Poo,Boo,Ioo,zn,Wte,qoo,Noo,PR,joo,Doo,BR,Goo,Ooo,Voo,Wn,Qte,Xoo,zoo,IR,Woo,Qoo,qR,Hoo,Uoo,Joo,Qn,Hte,Yoo,Koo,NR,Zoo,ero,jR,oro,rro,tro,Hn,Ute,aro,nro,DR,sro,lro,GR,iro,dro,cro,Pg,Jte,fro,mro,OR,gro,hro,pro,Un,Yte,uro,_ro,VR,bro,vro,XR,Fro,Tro,Mro,Bg,Kte,Ero,Cro,zR,wro,Aro,yro,Jn,Zte,Lro,xro,WR,$ro,kro,QR,Sro,Rro,Pro,Yn,eae,Bro,Iro,HR,qro,Nro,UR,jro,Dro,Gro,Kn,oae,Oro,Vro,JR,Xro,zro,YR,Wro,Qro,Hro,Ig,rae,Uro,Jro,KR,Yro,Kro,Zro,Zn,tae,eto,oto,ZR,rto,tto,eP,ato,nto,sto,es,aae,lto,ito,oP,dto,cto,rP,fto,mto,gto,qg,nae,hto,pto,tP,uto,_to,bto,os,sae,vto,Fto,aP,Tto,Mto,nP,Eto,Cto,wto,rs,lae,Ato,yto,sP,Lto,xto,lP,$to,kto,Sto,ts,iae,Rto,Pto,iP,Bto,Ito,dP,qto,Nto,jto,as,dae,Dto,Gto,cP,Oto,Vto,fP,Xto,zto,Wto,ns,cae,Qto,Hto,mP,Uto,Jto,gP,Yto,Kto,Zto,ss,fae,eao,oao,hP,rao,tao,pP,aao,nao,sao,ls,mae,lao,iao,uP,dao,cao,_P,fao,mao,gao,Ng,gae,hao,pao,bP,uao,_ao,bao,is,hae,vao,Fao,vP,Tao,Mao,FP,Eao,Cao,wao,jg,pae,Aao,yao,TP,Lao,xao,$ao,Dg,uae,kao,Sao,MP,Rao,Pao,Bao,ds,_ae,Iao,qao,EP,Nao,jao,CP,Dao,Gao,Oao,cs,bae,Vao,Xao,wP,zao,Wao,AP,Qao,Hao,Uao,fs,vae,Jao,Yao,yP,Kao,Zao,LP,eno,ono,rno,Gg,Fae,tno,ano,xP,nno,sno,lno,ms,Tae,ino,dno,$P,cno,fno,kP,mno,gno,hno,gs,Mae,pno,uno,SP,_no,bno,RP,vno,Fno,Tno,hs,Eae,Mno,Eno,PP,Cno,wno,BP,Ano,yno,Lno,ps,Cae,xno,$no,IP,kno,Sno,qP,Rno,Pno,Bno,us,wae,Ino,qno,NP,Nno,jno,jP,Dno,Gno,Ono,Og,Aae,Vno,Xno,DP,zno,Wno,Qno,_s,yae,Hno,Uno,GP,Jno,Yno,OP,Kno,Zno,eso,Vg,Lae,oso,rso,VP,tso,aso,nso,Xg,xae,sso,lso,XP,iso,dso,cso,zg,$ae,fso,mso,zP,gso,hso,pso,Wg,kae,uso,_so,WP,bso,vso,Fso,bs,Sae,Tso,Mso,QP,Eso,Cso,HP,wso,Aso,yso,Qg,Rae,Lso,xso,UP,$so,kso,Sso,vs,Pae,Rso,Pso,JP,Bso,Iso,YP,qso,Nso,jso,Fs,Bae,Dso,Gso,KP,Oso,Vso,ZP,Xso,zso,Wso,Ts,Iae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,Ms,qae,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,Es,Nae,llo,ilo,aB,dlo,clo,nB,flo,mlo,glo,Cs,jae,hlo,plo,sB,ulo,_lo,lB,blo,vlo,Flo,Hg,Dae,Tlo,Mlo,iB,Elo,Clo,wlo,Ug,Gae,Alo,ylo,dB,Llo,xlo,$lo,ws,Oae,klo,Slo,cB,Rlo,Plo,fB,Blo,Ilo,qlo,As,Vae,Nlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,ys,Xae,zlo,Wlo,hB,Qlo,Hlo,pB,Ulo,Jlo,Ylo,Jg,zae,Klo,Zlo,uB,eio,oio,rio,Yg,Wae,tio,aio,_B,nio,sio,lio,Kg,Qae,iio,dio,bB,cio,fio,mio,Ls,Hae,gio,hio,vB,pio,uio,FB,_io,bio,vio,Zg,Uae,Fio,Tio,TB,Mio,Eio,Cio,eh,Jae,wio,Aio,MB,yio,Lio,xio,oh,Yae,$io,kio,EB,Sio,Rio,Pio,xs,Kae,Bio,Iio,CB,qio,Nio,wB,jio,Dio,Gio,rh,Zae,Oio,Vio,AB,Xio,zio,Wio,th,ene,Qio,Hio,yB,Uio,Jio,Yio,$s,one,Kio,Zio,LB,edo,odo,xB,rdo,tdo,ado,ks,rne,ndo,sdo,$B,ldo,ido,kB,ddo,cdo,fdo,Ss,tne,mdo,gdo,SB,hdo,pdo,RB,udo,_do,bdo,Rs,ane,vdo,Fdo,PB,Tdo,Mdo,BB,Edo,Cdo,wdo,ah,Ado,nh,D6,ydo,nne,Ldo,lNe,Mi,sh,sne,G6,xdo,lne,$do,iNe,Ao,O6,kdo,V6,Sdo,IB,Rdo,Pdo,Bdo,X6,Ido,ine,qdo,Ndo,jdo,He,z6,Ddo,dne,Gdo,Odo,ya,Vdo,cne,Xdo,zdo,fne,Wdo,Qdo,mne,Hdo,Udo,Jdo,Y,lh,gne,Ydo,Kdo,qB,Zdo,eco,oco,ih,hne,rco,tco,NB,aco,nco,sco,dh,pne,lco,ico,jB,dco,cco,fco,ch,une,mco,gco,DB,hco,pco,uco,fh,_ne,_co,bco,GB,vco,Fco,Tco,mh,bne,Mco,Eco,OB,Cco,wco,Aco,gh,vne,yco,Lco,VB,xco,$co,kco,hh,Fne,Sco,Rco,XB,Pco,Bco,Ico,ph,Tne,qco,Nco,zB,jco,Dco,Gco,uh,Mne,Oco,Vco,WB,Xco,zco,Wco,_h,Ene,Qco,Hco,QB,Uco,Jco,Yco,bh,Cne,Kco,Zco,HB,efo,ofo,rfo,vh,wne,tfo,afo,UB,nfo,sfo,lfo,Fh,Ane,ifo,dfo,JB,cfo,ffo,mfo,Th,yne,gfo,hfo,YB,pfo,ufo,_fo,Mh,Lne,bfo,vfo,KB,Ffo,Tfo,Mfo,Eh,xne,Efo,Cfo,ZB,wfo,Afo,yfo,Ch,$ne,Lfo,xfo,eI,$fo,kfo,Sfo,wh,kne,Rfo,Pfo,oI,Bfo,Ifo,qfo,Ah,Sne,Nfo,jfo,rI,Dfo,Gfo,Ofo,yh,Rne,Vfo,Xfo,tI,zfo,Wfo,Qfo,Lh,Pne,Hfo,Ufo,aI,Jfo,Yfo,Kfo,xh,Bne,Zfo,emo,nI,omo,rmo,tmo,$h,Ine,amo,nmo,sI,smo,lmo,imo,kh,qne,dmo,cmo,lI,fmo,mmo,gmo,Sh,Nne,hmo,pmo,iI,umo,_mo,bmo,Rh,jne,vmo,Fmo,dI,Tmo,Mmo,Emo,Ph,Dne,Cmo,wmo,cI,Amo,ymo,Lmo,Bh,Gne,xmo,$mo,fI,kmo,Smo,Rmo,Ih,Pmo,qh,Bmo,Nh,W6,Imo,One,qmo,dNe,Ei,jh,Vne,Q6,Nmo,Xne,jmo,cNe,yo,H6,Dmo,U6,Gmo,mI,Omo,Vmo,Xmo,J6,zmo,zne,Wmo,Qmo,Hmo,Ue,Y6,Umo,Wne,Jmo,Ymo,Ci,Kmo,Qne,Zmo,ego,Hne,ogo,rgo,tgo,he,Dh,Une,ago,ngo,gI,sgo,lgo,igo,Gh,Jne,dgo,cgo,Yne,fgo,mgo,ggo,Oh,Kne,hgo,pgo,hI,ugo,_go,bgo,Vh,Zne,vgo,Fgo,pI,Tgo,Mgo,Ego,Xh,ese,Cgo,wgo,uI,Ago,ygo,Lgo,zh,ose,xgo,$go,_I,kgo,Sgo,Rgo,Wh,rse,Pgo,Bgo,bI,Igo,qgo,Ngo,Qh,tse,jgo,Dgo,vI,Ggo,Ogo,Vgo,Hh,ase,Xgo,zgo,FI,Wgo,Qgo,Hgo,Uh,nse,Ugo,Jgo,TI,Ygo,Kgo,Zgo,Jh,sse,eho,oho,MI,rho,tho,aho,Yh,lse,nho,sho,EI,lho,iho,dho,Kh,ise,cho,fho,CI,mho,gho,hho,Zh,dse,pho,uho,wI,_ho,bho,vho,ep,cse,Fho,Tho,AI,Mho,Eho,Cho,op,fse,who,Aho,yI,yho,Lho,xho,rp,mse,$ho,kho,LI,Sho,Rho,Pho,tp,Bho,ap,Iho,np,K6,qho,gse,Nho,fNe,wi,sp,hse,Z6,jho,pse,Dho,mNe,Lo,ey,Gho,Ai,Oho,xI,Vho,Xho,$I,zho,Who,Qho,oy,Hho,use,Uho,Jho,Yho,tt,ry,Kho,_se,Zho,epo,yi,opo,bse,rpo,tpo,kI,apo,npo,spo,lp,lpo,Je,ty,ipo,vse,dpo,cpo,La,fpo,Fse,mpo,gpo,Tse,hpo,ppo,Mse,upo,_po,bpo,x,ip,Ese,vpo,Fpo,SI,Tpo,Mpo,Epo,dp,Cse,Cpo,wpo,RI,Apo,ypo,Lpo,cp,wse,xpo,$po,PI,kpo,Spo,Rpo,fp,Ase,Ppo,Bpo,BI,Ipo,qpo,Npo,mp,yse,jpo,Dpo,II,Gpo,Opo,Vpo,gp,Lse,Xpo,zpo,qI,Wpo,Qpo,Hpo,hp,xse,Upo,Jpo,NI,Ypo,Kpo,Zpo,pp,$se,euo,ouo,jI,ruo,tuo,auo,up,kse,nuo,suo,DI,luo,iuo,duo,_p,Sse,cuo,fuo,GI,muo,guo,huo,bp,Rse,puo,uuo,OI,_uo,buo,vuo,vp,Pse,Fuo,Tuo,VI,Muo,Euo,Cuo,Fp,Bse,wuo,Auo,XI,yuo,Luo,xuo,Tp,Ise,$uo,kuo,zI,Suo,Ruo,Puo,Mp,qse,Buo,Iuo,WI,quo,Nuo,juo,Ep,Nse,Duo,Guo,QI,Ouo,Vuo,Xuo,Cp,jse,zuo,Wuo,HI,Quo,Huo,Uuo,wp,Dse,Juo,Yuo,UI,Kuo,Zuo,e_o,Ap,Gse,o_o,r_o,JI,t_o,a_o,n_o,yp,Ose,s_o,l_o,YI,i_o,d_o,c_o,Lp,Vse,f_o,m_o,KI,g_o,h_o,p_o,xp,Xse,u_o,__o,ZI,b_o,v_o,F_o,$p,zse,T_o,M_o,eq,E_o,C_o,w_o,kp,Wse,A_o,y_o,oq,L_o,x_o,$_o,Sp,Qse,k_o,S_o,rq,R_o,P_o,B_o,Rp,Hse,I_o,q_o,tq,N_o,j_o,D_o,Pp,Use,G_o,O_o,aq,V_o,X_o,z_o,Bp,Jse,W_o,Q_o,nq,H_o,U_o,J_o,Ip,Yse,Y_o,K_o,sq,Z_o,e1o,o1o,qp,Kse,r1o,t1o,lq,a1o,n1o,s1o,Np,Zse,l1o,i1o,iq,d1o,c1o,f1o,jp,ele,m1o,g1o,dq,h1o,p1o,u1o,Ps,ole,_1o,b1o,cq,v1o,F1o,fq,T1o,M1o,E1o,Dp,rle,C1o,w1o,mq,A1o,y1o,L1o,Gp,tle,x1o,$1o,gq,k1o,S1o,R1o,Op,ale,P1o,B1o,hq,I1o,q1o,N1o,Vp,nle,j1o,D1o,pq,G1o,O1o,V1o,Xp,sle,X1o,z1o,uq,W1o,Q1o,H1o,zp,lle,U1o,J1o,_q,Y1o,K1o,Z1o,Wp,ile,e2o,o2o,bq,r2o,t2o,a2o,Qp,dle,n2o,s2o,vq,l2o,i2o,d2o,Hp,cle,c2o,f2o,Fq,m2o,g2o,h2o,Up,fle,p2o,u2o,Tq,_2o,b2o,v2o,Jp,mle,F2o,T2o,Mq,M2o,E2o,C2o,Yp,gle,w2o,A2o,Eq,y2o,L2o,x2o,Kp,hle,$2o,k2o,Cq,S2o,R2o,P2o,Zp,ple,B2o,I2o,wq,q2o,N2o,j2o,eu,ule,D2o,G2o,Aq,O2o,V2o,X2o,ou,_le,z2o,W2o,yq,Q2o,H2o,U2o,ru,ble,J2o,Y2o,Lq,K2o,Z2o,ebo,tu,vle,obo,rbo,xq,tbo,abo,nbo,au,Fle,sbo,lbo,$q,ibo,dbo,cbo,nu,Tle,fbo,mbo,kq,gbo,hbo,pbo,su,Mle,ubo,_bo,Sq,bbo,vbo,Fbo,lu,Ele,Tbo,Mbo,Rq,Ebo,Cbo,wbo,iu,Cle,Abo,ybo,Pq,Lbo,xbo,$bo,du,wle,kbo,Sbo,Bq,Rbo,Pbo,Bbo,cu,Ale,Ibo,qbo,Iq,Nbo,jbo,Dbo,fu,yle,Gbo,Obo,qq,Vbo,Xbo,zbo,mu,Lle,Wbo,Qbo,Nq,Hbo,Ubo,Jbo,gu,xle,Ybo,Kbo,jq,Zbo,evo,ovo,hu,$le,rvo,tvo,Dq,avo,nvo,svo,pu,kle,lvo,ivo,Gq,dvo,cvo,fvo,uu,Sle,mvo,gvo,Oq,hvo,pvo,uvo,_u,Rle,_vo,bvo,Vq,vvo,Fvo,Tvo,bu,Ple,Mvo,Evo,Xq,Cvo,wvo,Avo,vu,Ble,yvo,Lvo,zq,xvo,$vo,kvo,Fu,Ile,Svo,Rvo,Wq,Pvo,Bvo,Ivo,Tu,qle,qvo,Nvo,Qq,jvo,Dvo,Gvo,Mu,Nle,Ovo,Vvo,Hq,Xvo,zvo,Wvo,Eu,jle,Qvo,Hvo,Uq,Uvo,Jvo,Yvo,Cu,Dle,Kvo,Zvo,Jq,e3o,o3o,r3o,wu,Gle,t3o,a3o,Yq,n3o,s3o,l3o,Au,Ole,i3o,d3o,Kq,c3o,f3o,m3o,yu,Vle,g3o,h3o,Zq,p3o,u3o,_3o,Lu,Xle,b3o,v3o,eN,F3o,T3o,M3o,xu,zle,E3o,C3o,oN,w3o,A3o,y3o,$u,Wle,L3o,x3o,rN,$3o,k3o,S3o,ku,Qle,R3o,P3o,tN,B3o,I3o,q3o,Su,Hle,N3o,j3o,aN,D3o,G3o,O3o,Ru,Ule,V3o,X3o,nN,z3o,W3o,Q3o,Pu,Jle,H3o,U3o,sN,J3o,Y3o,K3o,Bu,Yle,Z3o,eFo,lN,oFo,rFo,tFo,Iu,Kle,aFo,nFo,iN,sFo,lFo,iFo,qu,Zle,dFo,cFo,dN,fFo,mFo,gFo,Nu,eie,hFo,pFo,cN,uFo,_Fo,bFo,ju,oie,vFo,FFo,fN,TFo,MFo,EFo,Du,rie,CFo,wFo,mN,AFo,yFo,LFo,Gu,tie,xFo,$Fo,gN,kFo,SFo,RFo,Ou,aie,PFo,BFo,hN,IFo,qFo,NFo,Vu,nie,jFo,DFo,pN,GFo,OFo,VFo,Xu,sie,XFo,zFo,uN,WFo,QFo,HFo,zu,lie,UFo,JFo,_N,YFo,KFo,ZFo,Wu,iie,eTo,oTo,bN,rTo,tTo,aTo,Qu,die,nTo,sTo,vN,lTo,iTo,dTo,Hu,cie,cTo,fTo,FN,mTo,gTo,hTo,Uu,fie,pTo,uTo,TN,_To,bTo,vTo,Ju,mie,FTo,TTo,MN,MTo,ETo,CTo,Yu,gie,wTo,ATo,EN,yTo,LTo,xTo,Ku,hie,$To,kTo,CN,STo,RTo,PTo,Zu,pie,BTo,ITo,wN,qTo,NTo,jTo,e_,uie,DTo,GTo,AN,OTo,VTo,XTo,o_,zTo,_ie,WTo,QTo,bie,HTo,UTo,r_,gNe,Li,t_,vie,ay,JTo,Fie,YTo,hNe,xo,ny,KTo,xi,ZTo,yN,e7o,o7o,LN,r7o,t7o,a7o,sy,n7o,Tie,s7o,l7o,i7o,at,ly,d7o,Mie,c7o,f7o,$i,m7o,Eie,g7o,h7o,xN,p7o,u7o,_7o,a_,b7o,Ye,iy,v7o,Cie,F7o,T7o,xa,M7o,wie,E7o,C7o,Aie,w7o,A7o,yie,y7o,L7o,x7o,G,n_,Lie,$7o,k7o,$N,S7o,R7o,P7o,s_,xie,B7o,I7o,kN,q7o,N7o,j7o,l_,$ie,D7o,G7o,SN,O7o,V7o,X7o,i_,kie,z7o,W7o,RN,Q7o,H7o,U7o,d_,Sie,J7o,Y7o,PN,K7o,Z7o,eMo,c_,Rie,oMo,rMo,BN,tMo,aMo,nMo,f_,Pie,sMo,lMo,IN,iMo,dMo,cMo,m_,Bie,fMo,mMo,qN,gMo,hMo,pMo,g_,Iie,uMo,_Mo,NN,bMo,vMo,FMo,h_,qie,TMo,MMo,jN,EMo,CMo,wMo,p_,Nie,AMo,yMo,DN,LMo,xMo,$Mo,u_,jie,kMo,SMo,GN,RMo,PMo,BMo,__,Die,IMo,qMo,ON,NMo,jMo,DMo,b_,Gie,GMo,OMo,VN,VMo,XMo,zMo,v_,Oie,WMo,QMo,XN,HMo,UMo,JMo,F_,Vie,YMo,KMo,zN,ZMo,e4o,o4o,T_,Xie,r4o,t4o,WN,a4o,n4o,s4o,M_,zie,l4o,i4o,QN,d4o,c4o,f4o,E_,Wie,m4o,g4o,HN,h4o,p4o,u4o,C_,Qie,_4o,b4o,UN,v4o,F4o,T4o,w_,Hie,M4o,E4o,JN,C4o,w4o,A4o,A_,Uie,y4o,L4o,YN,x4o,$4o,k4o,y_,Jie,S4o,R4o,KN,P4o,B4o,I4o,L_,Yie,q4o,N4o,ZN,j4o,D4o,G4o,x_,Kie,O4o,V4o,ej,X4o,z4o,W4o,$_,Zie,Q4o,H4o,oj,U4o,J4o,Y4o,k_,ede,K4o,Z4o,rj,eEo,oEo,rEo,S_,ode,tEo,aEo,tj,nEo,sEo,lEo,R_,rde,iEo,dEo,aj,cEo,fEo,mEo,P_,tde,gEo,hEo,nj,pEo,uEo,_Eo,B_,ade,bEo,vEo,sj,FEo,TEo,MEo,I_,nde,EEo,CEo,lj,wEo,AEo,yEo,q_,sde,LEo,xEo,ij,$Eo,kEo,SEo,N_,lde,REo,PEo,dj,BEo,IEo,qEo,j_,ide,NEo,jEo,cj,DEo,GEo,OEo,D_,dde,VEo,XEo,fj,zEo,WEo,QEo,G_,cde,HEo,UEo,mj,JEo,YEo,KEo,O_,fde,ZEo,eCo,gj,oCo,rCo,tCo,V_,mde,aCo,nCo,hj,sCo,lCo,iCo,X_,gde,dCo,cCo,pj,fCo,mCo,gCo,z_,hde,hCo,pCo,uj,uCo,_Co,bCo,W_,pde,vCo,FCo,_j,TCo,MCo,ECo,Q_,CCo,ude,wCo,ACo,_de,yCo,LCo,H_,pNe,ki,U_,bde,dy,xCo,vde,$Co,uNe,$o,cy,kCo,Si,SCo,bj,RCo,PCo,vj,BCo,ICo,qCo,fy,NCo,Fde,jCo,DCo,GCo,nt,my,OCo,Tde,VCo,XCo,Ri,zCo,Mde,WCo,QCo,Fj,HCo,UCo,JCo,J_,YCo,Ke,gy,KCo,Ede,ZCo,e5o,$a,o5o,Cde,r5o,t5o,wde,a5o,n5o,Ade,s5o,l5o,i5o,z,Y_,yde,d5o,c5o,Tj,f5o,m5o,g5o,K_,Lde,h5o,p5o,Mj,u5o,_5o,b5o,Z_,xde,v5o,F5o,Ej,T5o,M5o,E5o,e1,$de,C5o,w5o,Cj,A5o,y5o,L5o,o1,kde,x5o,$5o,wj,k5o,S5o,R5o,r1,Sde,P5o,B5o,Aj,I5o,q5o,N5o,t1,Rde,j5o,D5o,yj,G5o,O5o,V5o,a1,Pde,X5o,z5o,Lj,W5o,Q5o,H5o,n1,Bde,U5o,J5o,xj,Y5o,K5o,Z5o,s1,Ide,ewo,owo,$j,rwo,two,awo,l1,qde,nwo,swo,kj,lwo,iwo,dwo,i1,Nde,cwo,fwo,Sj,mwo,gwo,hwo,d1,jde,pwo,uwo,Rj,_wo,bwo,vwo,c1,Dde,Fwo,Two,Pj,Mwo,Ewo,Cwo,f1,Gde,wwo,Awo,Bj,ywo,Lwo,xwo,m1,Ode,$wo,kwo,Ij,Swo,Rwo,Pwo,g1,Vde,Bwo,Iwo,qj,qwo,Nwo,jwo,h1,Xde,Dwo,Gwo,Nj,Owo,Vwo,Xwo,p1,zde,zwo,Wwo,jj,Qwo,Hwo,Uwo,u1,Wde,Jwo,Ywo,Dj,Kwo,Zwo,e0o,_1,Qde,o0o,r0o,Gj,t0o,a0o,n0o,b1,Hde,s0o,l0o,Oj,i0o,d0o,c0o,v1,Ude,f0o,m0o,Vj,g0o,h0o,p0o,F1,Jde,u0o,_0o,Xj,b0o,v0o,F0o,T1,Yde,T0o,M0o,zj,E0o,C0o,w0o,M1,Kde,A0o,y0o,Wj,L0o,x0o,$0o,E1,Zde,k0o,S0o,Qj,R0o,P0o,B0o,C1,ece,I0o,q0o,Hj,N0o,j0o,D0o,w1,oce,G0o,O0o,Uj,V0o,X0o,z0o,A1,rce,W0o,Q0o,Jj,H0o,U0o,J0o,y1,tce,Y0o,K0o,Yj,Z0o,eAo,oAo,L1,ace,rAo,tAo,Kj,aAo,nAo,sAo,x1,nce,lAo,iAo,Zj,dAo,cAo,fAo,$1,sce,mAo,gAo,eD,hAo,pAo,uAo,k1,lce,_Ao,bAo,oD,vAo,FAo,TAo,S1,ice,MAo,EAo,rD,CAo,wAo,AAo,R1,dce,yAo,LAo,tD,xAo,$Ao,kAo,P1,SAo,cce,RAo,PAo,fce,BAo,IAo,B1,_Ne,Pi,I1,mce,hy,qAo,gce,NAo,bNe,ko,py,jAo,Bi,DAo,aD,GAo,OAo,nD,VAo,XAo,zAo,uy,WAo,hce,QAo,HAo,UAo,st,_y,JAo,pce,YAo,KAo,Ii,ZAo,uce,e6o,o6o,sD,r6o,t6o,a6o,q1,n6o,Ze,by,s6o,_ce,l6o,i6o,ka,d6o,bce,c6o,f6o,vce,m6o,g6o,Fce,h6o,p6o,u6o,Q,N1,Tce,_6o,b6o,lD,v6o,F6o,T6o,j1,Mce,M6o,E6o,iD,C6o,w6o,A6o,D1,Ece,y6o,L6o,dD,x6o,$6o,k6o,G1,Cce,S6o,R6o,cD,P6o,B6o,I6o,O1,wce,q6o,N6o,fD,j6o,D6o,G6o,V1,Ace,O6o,V6o,mD,X6o,z6o,W6o,X1,yce,Q6o,H6o,gD,U6o,J6o,Y6o,z1,Lce,K6o,Z6o,hD,eyo,oyo,ryo,W1,xce,tyo,ayo,pD,nyo,syo,lyo,Q1,$ce,iyo,dyo,uD,cyo,fyo,myo,H1,kce,gyo,hyo,_D,pyo,uyo,_yo,U1,Sce,byo,vyo,bD,Fyo,Tyo,Myo,J1,Rce,Eyo,Cyo,vD,wyo,Ayo,yyo,Y1,Pce,Lyo,xyo,FD,$yo,kyo,Syo,K1,Bce,Ryo,Pyo,TD,Byo,Iyo,qyo,Z1,Ice,Nyo,jyo,MD,Dyo,Gyo,Oyo,e2,qce,Vyo,Xyo,ED,zyo,Wyo,Qyo,o2,Nce,Hyo,Uyo,CD,Jyo,Yyo,Kyo,r2,jce,Zyo,eLo,wD,oLo,rLo,tLo,t2,Dce,aLo,nLo,AD,sLo,lLo,iLo,a2,Gce,dLo,cLo,yD,fLo,mLo,gLo,n2,Oce,hLo,pLo,LD,uLo,_Lo,bLo,s2,Vce,vLo,FLo,xD,TLo,MLo,ELo,l2,Xce,CLo,wLo,$D,ALo,yLo,LLo,i2,zce,xLo,$Lo,kD,kLo,SLo,RLo,d2,Wce,PLo,BLo,SD,ILo,qLo,NLo,c2,Qce,jLo,DLo,RD,GLo,OLo,VLo,f2,Hce,XLo,zLo,PD,WLo,QLo,HLo,m2,Uce,ULo,JLo,BD,YLo,KLo,ZLo,g2,Jce,e8o,o8o,ID,r8o,t8o,a8o,h2,Yce,n8o,s8o,Kce,l8o,i8o,d8o,p2,Zce,c8o,f8o,qD,m8o,g8o,h8o,u2,efe,p8o,u8o,ND,_8o,b8o,v8o,_2,ofe,F8o,T8o,jD,M8o,E8o,C8o,b2,rfe,w8o,A8o,DD,y8o,L8o,x8o,v2,$8o,tfe,k8o,S8o,afe,R8o,P8o,F2,vNe,qi,T2,nfe,vy,B8o,sfe,I8o,FNe,So,Fy,q8o,Ni,N8o,GD,j8o,D8o,OD,G8o,O8o,V8o,Ty,X8o,lfe,z8o,W8o,Q8o,lt,My,H8o,ife,U8o,J8o,ji,Y8o,dfe,K8o,Z8o,VD,e9o,o9o,r9o,M2,t9o,eo,Ey,a9o,cfe,n9o,s9o,Sa,l9o,ffe,i9o,d9o,mfe,c9o,f9o,gfe,m9o,g9o,h9o,ue,E2,hfe,p9o,u9o,XD,_9o,b9o,v9o,C2,pfe,F9o,T9o,zD,M9o,E9o,C9o,w2,ufe,w9o,A9o,WD,y9o,L9o,x9o,A2,_fe,$9o,k9o,QD,S9o,R9o,P9o,y2,bfe,B9o,I9o,HD,q9o,N9o,j9o,L2,vfe,D9o,G9o,UD,O9o,V9o,X9o,x2,Ffe,z9o,W9o,JD,Q9o,H9o,U9o,$2,Tfe,J9o,Y9o,YD,K9o,Z9o,exo,k2,Mfe,oxo,rxo,KD,txo,axo,nxo,S2,Efe,sxo,lxo,ZD,ixo,dxo,cxo,R2,Cfe,fxo,mxo,eG,gxo,hxo,pxo,P2,wfe,uxo,_xo,oG,bxo,vxo,Fxo,B2,Afe,Txo,Mxo,rG,Exo,Cxo,wxo,I2,yfe,Axo,yxo,tG,Lxo,xxo,$xo,q2,Lfe,kxo,Sxo,aG,Rxo,Pxo,Bxo,N2,xfe,Ixo,qxo,nG,Nxo,jxo,Dxo,j2,Gxo,$fe,Oxo,Vxo,kfe,Xxo,zxo,D2,TNe,Di,G2,Sfe,Cy,Wxo,Rfe,Qxo,MNe,Ro,wy,Hxo,Gi,Uxo,sG,Jxo,Yxo,lG,Kxo,Zxo,e$o,Ay,o$o,Pfe,r$o,t$o,a$o,it,yy,n$o,Bfe,s$o,l$o,Oi,i$o,Ife,d$o,c$o,iG,f$o,m$o,g$o,O2,h$o,oo,Ly,p$o,qfe,u$o,_$o,Ra,b$o,Nfe,v$o,F$o,jfe,T$o,M$o,Dfe,E$o,C$o,w$o,q,V2,Gfe,A$o,y$o,dG,L$o,x$o,$$o,X2,Ofe,k$o,S$o,cG,R$o,P$o,B$o,z2,Vfe,I$o,q$o,fG,N$o,j$o,D$o,W2,Xfe,G$o,O$o,mG,V$o,X$o,z$o,Q2,zfe,W$o,Q$o,gG,H$o,U$o,J$o,H2,Wfe,Y$o,K$o,hG,Z$o,eko,oko,U2,Qfe,rko,tko,pG,ako,nko,sko,J2,Hfe,lko,iko,uG,dko,cko,fko,Y2,Ufe,mko,gko,_G,hko,pko,uko,K2,Jfe,_ko,bko,bG,vko,Fko,Tko,Z2,Yfe,Mko,Eko,vG,Cko,wko,Ako,eb,Kfe,yko,Lko,FG,xko,$ko,kko,ob,Zfe,Sko,Rko,TG,Pko,Bko,Iko,rb,eme,qko,Nko,MG,jko,Dko,Gko,tb,ome,Oko,Vko,EG,Xko,zko,Wko,ab,rme,Qko,Hko,CG,Uko,Jko,Yko,nb,tme,Kko,Zko,wG,eSo,oSo,rSo,sb,ame,tSo,aSo,AG,nSo,sSo,lSo,lb,nme,iSo,dSo,yG,cSo,fSo,mSo,ib,sme,gSo,hSo,LG,pSo,uSo,_So,db,lme,bSo,vSo,xG,FSo,TSo,MSo,cb,ime,ESo,CSo,$G,wSo,ASo,ySo,fb,dme,LSo,xSo,kG,$So,kSo,SSo,mb,cme,RSo,PSo,SG,BSo,ISo,qSo,gb,fme,NSo,jSo,RG,DSo,GSo,OSo,hb,mme,VSo,XSo,PG,zSo,WSo,QSo,pb,gme,HSo,USo,BG,JSo,YSo,KSo,ub,hme,ZSo,eRo,IG,oRo,rRo,tRo,_b,pme,aRo,nRo,qG,sRo,lRo,iRo,bb,ume,dRo,cRo,NG,fRo,mRo,gRo,vb,_me,hRo,pRo,jG,uRo,_Ro,bRo,Fb,bme,vRo,FRo,DG,TRo,MRo,ERo,Tb,vme,CRo,wRo,GG,ARo,yRo,LRo,Mb,Fme,xRo,$Ro,OG,kRo,SRo,RRo,Eb,Tme,PRo,BRo,VG,IRo,qRo,NRo,Cb,Mme,jRo,DRo,XG,GRo,ORo,VRo,wb,Eme,XRo,zRo,zG,WRo,QRo,HRo,Ab,Cme,URo,JRo,WG,YRo,KRo,ZRo,yb,wme,ePo,oPo,QG,rPo,tPo,aPo,Lb,Ame,nPo,sPo,HG,lPo,iPo,dPo,xb,yme,cPo,fPo,UG,mPo,gPo,hPo,$b,Lme,pPo,uPo,JG,_Po,bPo,vPo,kb,xme,FPo,TPo,YG,MPo,EPo,CPo,Sb,$me,wPo,APo,KG,yPo,LPo,xPo,Rb,kme,$Po,kPo,ZG,SPo,RPo,PPo,Pb,Sme,BPo,IPo,eO,qPo,NPo,jPo,Bb,Rme,DPo,GPo,oO,OPo,VPo,XPo,Ib,zPo,Pme,WPo,QPo,Bme,HPo,UPo,qb,ENe,Vi,Nb,Ime,xy,JPo,qme,YPo,CNe,Po,$y,KPo,Xi,ZPo,rO,eBo,oBo,tO,rBo,tBo,aBo,ky,nBo,Nme,sBo,lBo,iBo,dt,Sy,dBo,jme,cBo,fBo,zi,mBo,Dme,gBo,hBo,aO,pBo,uBo,_Bo,jb,bBo,ro,Ry,vBo,Gme,FBo,TBo,Pa,MBo,Ome,EBo,CBo,Vme,wBo,ABo,Xme,yBo,LBo,xBo,K,Db,zme,$Bo,kBo,nO,SBo,RBo,PBo,Gb,Wme,BBo,IBo,sO,qBo,NBo,jBo,Ob,Qme,DBo,GBo,lO,OBo,VBo,XBo,Vb,Hme,zBo,WBo,iO,QBo,HBo,UBo,Xb,Ume,JBo,YBo,dO,KBo,ZBo,eIo,zb,Jme,oIo,rIo,cO,tIo,aIo,nIo,Wb,Yme,sIo,lIo,fO,iIo,dIo,cIo,Qb,Kme,fIo,mIo,mO,gIo,hIo,pIo,Hb,Zme,uIo,_Io,gO,bIo,vIo,FIo,Ub,ege,TIo,MIo,hO,EIo,CIo,wIo,Jb,oge,AIo,yIo,pO,LIo,xIo,$Io,Yb,rge,kIo,SIo,uO,RIo,PIo,BIo,Kb,tge,IIo,qIo,_O,NIo,jIo,DIo,Zb,age,GIo,OIo,bO,VIo,XIo,zIo,ev,nge,WIo,QIo,vO,HIo,UIo,JIo,ov,sge,YIo,KIo,FO,ZIo,eqo,oqo,rv,lge,rqo,tqo,TO,aqo,nqo,sqo,tv,ige,lqo,iqo,MO,dqo,cqo,fqo,av,dge,mqo,gqo,EO,hqo,pqo,uqo,nv,cge,_qo,bqo,CO,vqo,Fqo,Tqo,sv,fge,Mqo,Eqo,wO,Cqo,wqo,Aqo,lv,mge,yqo,Lqo,AO,xqo,$qo,kqo,iv,gge,Sqo,Rqo,yO,Pqo,Bqo,Iqo,dv,hge,qqo,Nqo,LO,jqo,Dqo,Gqo,cv,pge,Oqo,Vqo,xO,Xqo,zqo,Wqo,fv,uge,Qqo,Hqo,$O,Uqo,Jqo,Yqo,mv,_ge,Kqo,Zqo,kO,eNo,oNo,rNo,gv,bge,tNo,aNo,SO,nNo,sNo,lNo,hv,vge,iNo,dNo,RO,cNo,fNo,mNo,pv,gNo,Fge,hNo,pNo,Tge,uNo,_No,uv,wNe,Wi,_v,Mge,Py,bNo,Ege,vNo,ANe,Bo,By,FNo,Qi,TNo,PO,MNo,ENo,BO,CNo,wNo,ANo,Iy,yNo,Cge,LNo,xNo,$No,ct,qy,kNo,wge,SNo,RNo,Hi,PNo,Age,BNo,INo,IO,qNo,NNo,jNo,bv,DNo,to,Ny,GNo,yge,ONo,VNo,Ba,XNo,Lge,zNo,WNo,xge,QNo,HNo,$ge,UNo,JNo,YNo,Yr,vv,kge,KNo,ZNo,qO,ejo,ojo,rjo,Fv,Sge,tjo,ajo,NO,njo,sjo,ljo,Tv,Rge,ijo,djo,jO,cjo,fjo,mjo,Mv,Pge,gjo,hjo,DO,pjo,ujo,_jo,Ev,Bge,bjo,vjo,GO,Fjo,Tjo,Mjo,Cv,Ejo,Ige,Cjo,wjo,qge,Ajo,yjo,wv,yNe,Ui,Av,Nge,jy,Ljo,jge,xjo,LNe,Io,Dy,$jo,Ji,kjo,OO,Sjo,Rjo,VO,Pjo,Bjo,Ijo,Gy,qjo,Dge,Njo,jjo,Djo,ft,Oy,Gjo,Gge,Ojo,Vjo,Yi,Xjo,Oge,zjo,Wjo,XO,Qjo,Hjo,Ujo,yv,Jjo,ao,Vy,Yjo,Vge,Kjo,Zjo,Ia,eDo,Xge,oDo,rDo,zge,tDo,aDo,Wge,nDo,sDo,lDo,H,Lv,Qge,iDo,dDo,zO,cDo,fDo,mDo,xv,Hge,gDo,hDo,WO,pDo,uDo,_Do,$v,Uge,bDo,vDo,QO,FDo,TDo,MDo,kv,Jge,EDo,CDo,HO,wDo,ADo,yDo,Sv,Yge,LDo,xDo,UO,$Do,kDo,SDo,Rv,Kge,RDo,PDo,JO,BDo,IDo,qDo,Pv,Zge,NDo,jDo,YO,DDo,GDo,ODo,Bv,ehe,VDo,XDo,KO,zDo,WDo,QDo,Iv,ohe,HDo,UDo,ZO,JDo,YDo,KDo,qv,rhe,ZDo,eGo,eV,oGo,rGo,tGo,Nv,the,aGo,nGo,oV,sGo,lGo,iGo,jv,ahe,dGo,cGo,rV,fGo,mGo,gGo,Dv,nhe,hGo,pGo,tV,uGo,_Go,bGo,Gv,she,vGo,FGo,aV,TGo,MGo,EGo,Ov,lhe,CGo,wGo,nV,AGo,yGo,LGo,Vv,ihe,xGo,$Go,sV,kGo,SGo,RGo,Xv,dhe,PGo,BGo,lV,IGo,qGo,NGo,zv,che,jGo,DGo,iV,GGo,OGo,VGo,Wv,fhe,XGo,zGo,dV,WGo,QGo,HGo,Qv,mhe,UGo,JGo,cV,YGo,KGo,ZGo,Hv,ghe,eOo,oOo,fV,rOo,tOo,aOo,Uv,hhe,nOo,sOo,mV,lOo,iOo,dOo,Jv,phe,cOo,fOo,gV,mOo,gOo,hOo,Yv,uhe,pOo,uOo,hV,_Oo,bOo,vOo,Kv,_he,FOo,TOo,pV,MOo,EOo,COo,Zv,bhe,wOo,AOo,uV,yOo,LOo,xOo,e3,vhe,$Oo,kOo,_V,SOo,ROo,POo,o3,Fhe,BOo,IOo,bV,qOo,NOo,jOo,r3,The,DOo,GOo,vV,OOo,VOo,XOo,t3,Mhe,zOo,WOo,FV,QOo,HOo,UOo,a3,Ehe,JOo,YOo,TV,KOo,ZOo,eVo,n3,Che,oVo,rVo,MV,tVo,aVo,nVo,s3,whe,sVo,lVo,EV,iVo,dVo,cVo,l3,Ahe,fVo,mVo,CV,gVo,hVo,pVo,i3,uVo,yhe,_Vo,bVo,Lhe,vVo,FVo,d3,xNe,Ki,c3,xhe,Xy,TVo,$he,MVo,$Ne,qo,zy,EVo,Zi,CVo,wV,wVo,AVo,AV,yVo,LVo,xVo,Wy,$Vo,khe,kVo,SVo,RVo,mt,Qy,PVo,She,BVo,IVo,ed,qVo,Rhe,NVo,jVo,yV,DVo,GVo,OVo,f3,VVo,no,Hy,XVo,Phe,zVo,WVo,qa,QVo,Bhe,HVo,UVo,Ihe,JVo,YVo,qhe,KVo,ZVo,eXo,V,m3,Nhe,oXo,rXo,LV,tXo,aXo,nXo,g3,jhe,sXo,lXo,xV,iXo,dXo,cXo,h3,Dhe,fXo,mXo,$V,gXo,hXo,pXo,p3,Ghe,uXo,_Xo,kV,bXo,vXo,FXo,u3,Ohe,TXo,MXo,SV,EXo,CXo,wXo,_3,Vhe,AXo,yXo,RV,LXo,xXo,$Xo,b3,Xhe,kXo,SXo,PV,RXo,PXo,BXo,v3,zhe,IXo,qXo,BV,NXo,jXo,DXo,F3,Whe,GXo,OXo,IV,VXo,XXo,zXo,T3,Qhe,WXo,QXo,qV,HXo,UXo,JXo,M3,Hhe,YXo,KXo,NV,ZXo,ezo,ozo,E3,Uhe,rzo,tzo,jV,azo,nzo,szo,C3,Jhe,lzo,izo,DV,dzo,czo,fzo,w3,Yhe,mzo,gzo,GV,hzo,pzo,uzo,A3,Khe,_zo,bzo,OV,vzo,Fzo,Tzo,y3,Zhe,Mzo,Ezo,VV,Czo,wzo,Azo,L3,epe,yzo,Lzo,XV,xzo,$zo,kzo,x3,ope,Szo,Rzo,zV,Pzo,Bzo,Izo,$3,rpe,qzo,Nzo,WV,jzo,Dzo,Gzo,k3,tpe,Ozo,Vzo,QV,Xzo,zzo,Wzo,S3,ape,Qzo,Hzo,HV,Uzo,Jzo,Yzo,R3,npe,Kzo,Zzo,UV,eWo,oWo,rWo,P3,spe,tWo,aWo,JV,nWo,sWo,lWo,B3,lpe,iWo,dWo,YV,cWo,fWo,mWo,I3,ipe,gWo,hWo,KV,pWo,uWo,_Wo,q3,dpe,bWo,vWo,ZV,FWo,TWo,MWo,N3,cpe,EWo,CWo,eX,wWo,AWo,yWo,j3,fpe,LWo,xWo,oX,$Wo,kWo,SWo,D3,mpe,RWo,PWo,rX,BWo,IWo,qWo,G3,gpe,NWo,jWo,tX,DWo,GWo,OWo,O3,hpe,VWo,XWo,aX,zWo,WWo,QWo,V3,ppe,HWo,UWo,nX,JWo,YWo,KWo,X3,upe,ZWo,eQo,sX,oQo,rQo,tQo,z3,_pe,aQo,nQo,lX,sQo,lQo,iQo,W3,bpe,dQo,cQo,iX,fQo,mQo,gQo,Q3,vpe,hQo,pQo,dX,uQo,_Qo,bQo,H3,Fpe,vQo,FQo,cX,TQo,MQo,EQo,U3,Tpe,CQo,wQo,fX,AQo,yQo,LQo,J3,Mpe,xQo,$Qo,mX,kQo,SQo,RQo,Y3,Epe,PQo,BQo,gX,IQo,qQo,NQo,K3,jQo,Cpe,DQo,GQo,wpe,OQo,VQo,Z3,kNe,od,eF,Ape,Uy,XQo,ype,zQo,SNe,No,Jy,WQo,rd,QQo,hX,HQo,UQo,pX,JQo,YQo,KQo,Yy,ZQo,Lpe,eHo,oHo,rHo,gt,Ky,tHo,xpe,aHo,nHo,td,sHo,$pe,lHo,iHo,uX,dHo,cHo,fHo,oF,mHo,so,Zy,gHo,kpe,hHo,pHo,Na,uHo,Spe,_Ho,bHo,Rpe,vHo,FHo,Ppe,THo,MHo,EHo,Bpe,rF,Ipe,CHo,wHo,_X,AHo,yHo,LHo,tF,xHo,qpe,$Ho,kHo,Npe,SHo,RHo,aF,RNe,ad,nF,jpe,eL,PHo,Dpe,BHo,PNe,jo,oL,IHo,nd,qHo,bX,NHo,jHo,vX,DHo,GHo,OHo,rL,VHo,Gpe,XHo,zHo,WHo,ht,tL,QHo,Ope,HHo,UHo,sd,JHo,Vpe,YHo,KHo,FX,ZHo,eUo,oUo,sF,rUo,lo,aL,tUo,Xpe,aUo,nUo,ja,sUo,zpe,lUo,iUo,Wpe,dUo,cUo,Qpe,fUo,mUo,gUo,Fe,lF,Hpe,hUo,pUo,TX,uUo,_Uo,bUo,iF,Upe,vUo,FUo,MX,TUo,MUo,EUo,dF,Jpe,CUo,wUo,EX,AUo,yUo,LUo,cF,Ype,xUo,$Uo,CX,kUo,SUo,RUo,Bs,Kpe,PUo,BUo,wX,IUo,qUo,AX,NUo,jUo,DUo,fF,Zpe,GUo,OUo,yX,VUo,XUo,zUo,pt,eue,WUo,QUo,LX,HUo,UUo,xX,JUo,YUo,$X,KUo,ZUo,eJo,mF,oue,oJo,rJo,kX,tJo,aJo,nJo,gF,rue,sJo,lJo,SX,iJo,dJo,cJo,hF,tue,fJo,mJo,RX,gJo,hJo,pJo,pF,aue,uJo,_Jo,PX,bJo,vJo,FJo,uF,nue,TJo,MJo,BX,EJo,CJo,wJo,_F,sue,AJo,yJo,IX,LJo,xJo,$Jo,bF,lue,kJo,SJo,qX,RJo,PJo,BJo,vF,IJo,iue,qJo,NJo,due,jJo,DJo,FF,BNe,ld,TF,cue,nL,GJo,fue,OJo,INe,Do,sL,VJo,id,XJo,NX,zJo,WJo,jX,QJo,HJo,UJo,lL,JJo,mue,YJo,KJo,ZJo,ut,iL,eYo,gue,oYo,rYo,dd,tYo,hue,aYo,nYo,DX,sYo,lYo,iYo,MF,dYo,io,dL,cYo,pue,fYo,mYo,Da,gYo,uue,hYo,pYo,_ue,uYo,_Yo,bue,bYo,vYo,FYo,vue,EF,Fue,TYo,MYo,GX,EYo,CYo,wYo,CF,AYo,Tue,yYo,LYo,Mue,xYo,$Yo,wF,qNe,cd,AF,Eue,cL,kYo,Cue,SYo,NNe,Go,fL,RYo,fd,PYo,OX,BYo,IYo,VX,qYo,NYo,jYo,mL,DYo,wue,GYo,OYo,VYo,_t,gL,XYo,Aue,zYo,WYo,md,QYo,yue,HYo,UYo,XX,JYo,YYo,KYo,yF,ZYo,co,hL,eKo,Lue,oKo,rKo,Ga,tKo,xue,aKo,nKo,$ue,sKo,lKo,kue,iKo,dKo,cKo,ke,LF,Sue,fKo,mKo,zX,gKo,hKo,pKo,xF,Rue,uKo,_Ko,WX,bKo,vKo,FKo,$F,Pue,TKo,MKo,QX,EKo,CKo,wKo,kF,Bue,AKo,yKo,HX,LKo,xKo,$Ko,SF,Iue,kKo,SKo,UX,RKo,PKo,BKo,RF,que,IKo,qKo,JX,NKo,jKo,DKo,PF,Nue,GKo,OKo,YX,VKo,XKo,zKo,BF,jue,WKo,QKo,KX,HKo,UKo,JKo,IF,Due,YKo,KKo,ZX,ZKo,eZo,oZo,qF,rZo,Gue,tZo,aZo,Oue,nZo,sZo,NF,jNe,gd,jF,Vue,pL,lZo,Xue,iZo,DNe,Oo,uL,dZo,hd,cZo,ez,fZo,mZo,oz,gZo,hZo,pZo,_L,uZo,zue,_Zo,bZo,vZo,bt,bL,FZo,Wue,TZo,MZo,pd,EZo,Que,CZo,wZo,rz,AZo,yZo,LZo,DF,xZo,fo,vL,$Zo,Hue,kZo,SZo,Oa,RZo,Uue,PZo,BZo,Jue,IZo,qZo,Yue,NZo,jZo,DZo,Kr,GF,Kue,GZo,OZo,tz,VZo,XZo,zZo,OF,Zue,WZo,QZo,az,HZo,UZo,JZo,VF,e_e,YZo,KZo,nz,ZZo,eer,oer,XF,o_e,rer,ter,sz,aer,ner,ser,zF,r_e,ler,ier,lz,der,cer,fer,WF,mer,t_e,ger,her,a_e,per,uer,QF,GNe,ud,HF,n_e,FL,_er,s_e,ber,ONe,Vo,TL,ver,_d,Fer,iz,Ter,Mer,dz,Eer,Cer,wer,ML,Aer,l_e,yer,Ler,xer,vt,EL,$er,i_e,ker,Ser,bd,Rer,d_e,Per,Ber,cz,Ier,qer,Ner,UF,jer,mo,CL,Der,c_e,Ger,Oer,Va,Ver,f_e,Xer,zer,m_e,Wer,Qer,g_e,Her,Uer,Jer,Se,JF,h_e,Yer,Ker,fz,Zer,eor,oor,YF,p_e,ror,tor,mz,aor,nor,sor,KF,u_e,lor,ior,gz,dor,cor,mor,ZF,__e,gor,hor,hz,por,uor,_or,eT,b_e,bor,vor,pz,For,Tor,Mor,oT,v_e,Eor,Cor,uz,wor,Aor,yor,rT,F_e,Lor,xor,_z,$or,kor,Sor,tT,T_e,Ror,Por,bz,Bor,Ior,qor,aT,M_e,Nor,jor,vz,Dor,Gor,Oor,nT,Vor,E_e,Xor,zor,C_e,Wor,Qor,sT,VNe,vd,lT,w_e,wL,Hor,A_e,Uor,XNe,Xo,AL,Jor,Fd,Yor,Fz,Kor,Zor,Tz,err,orr,rrr,yL,trr,y_e,arr,nrr,srr,Ft,LL,lrr,L_e,irr,drr,Td,crr,x_e,frr,mrr,Mz,grr,hrr,prr,iT,urr,go,xL,_rr,$_e,brr,vrr,Xa,Frr,k_e,Trr,Mrr,S_e,Err,Crr,R_e,wrr,Arr,yrr,$L,dT,P_e,Lrr,xrr,Ez,$rr,krr,Srr,cT,B_e,Rrr,Prr,Cz,Brr,Irr,qrr,fT,Nrr,I_e,jrr,Drr,q_e,Grr,Orr,mT,zNe,Md,gT,N_e,kL,Vrr,j_e,Xrr,WNe,zo,SL,zrr,Ed,Wrr,wz,Qrr,Hrr,Az,Urr,Jrr,Yrr,RL,Krr,D_e,Zrr,etr,otr,Tt,PL,rtr,G_e,ttr,atr,Cd,ntr,O_e,str,ltr,yz,itr,dtr,ctr,hT,ftr,ho,BL,mtr,V_e,gtr,htr,za,ptr,X_e,utr,_tr,z_e,btr,vtr,W_e,Ftr,Ttr,Mtr,Zr,pT,Q_e,Etr,Ctr,Lz,wtr,Atr,ytr,uT,H_e,Ltr,xtr,xz,$tr,ktr,Str,_T,U_e,Rtr,Ptr,$z,Btr,Itr,qtr,bT,J_e,Ntr,jtr,kz,Dtr,Gtr,Otr,vT,Y_e,Vtr,Xtr,Sz,ztr,Wtr,Qtr,FT,Htr,K_e,Utr,Jtr,Z_e,Ytr,Ktr,TT,QNe,wd,MT,e1e,IL,Ztr,o1e,ear,HNe,Wo,qL,oar,Ad,rar,Rz,tar,aar,Pz,nar,sar,lar,NL,iar,r1e,dar,car,far,Mt,jL,mar,t1e,gar,har,yd,par,a1e,uar,_ar,Bz,bar,Far,Tar,ET,Mar,po,DL,Ear,n1e,Car,war,Wa,Aar,s1e,yar,Lar,l1e,xar,$ar,i1e,kar,Sar,Rar,Ld,CT,d1e,Par,Bar,Iz,Iar,qar,Nar,wT,c1e,jar,Dar,qz,Gar,Oar,Var,AT,f1e,Xar,zar,Nz,War,Qar,Har,yT,Uar,m1e,Jar,Yar,g1e,Kar,Zar,LT,UNe,xd,xT,h1e,GL,enr,p1e,onr,JNe,Qo,OL,rnr,$d,tnr,jz,anr,nnr,Dz,snr,lnr,inr,VL,dnr,u1e,cnr,fnr,mnr,Et,XL,gnr,_1e,hnr,pnr,kd,unr,b1e,_nr,bnr,Gz,vnr,Fnr,Tnr,$T,Mnr,uo,zL,Enr,v1e,Cnr,wnr,Qa,Anr,F1e,ynr,Lnr,T1e,xnr,$nr,M1e,knr,Snr,Rnr,WL,kT,E1e,Pnr,Bnr,Oz,Inr,qnr,Nnr,ST,C1e,jnr,Dnr,Vz,Gnr,Onr,Vnr,RT,Xnr,w1e,znr,Wnr,A1e,Qnr,Hnr,PT,YNe,Sd,BT,y1e,QL,Unr,L1e,Jnr,KNe,Ho,HL,Ynr,Rd,Knr,Xz,Znr,esr,zz,osr,rsr,tsr,UL,asr,x1e,nsr,ssr,lsr,Ct,JL,isr,$1e,dsr,csr,Pd,fsr,k1e,msr,gsr,Wz,hsr,psr,usr,IT,_sr,_o,YL,bsr,S1e,vsr,Fsr,Ha,Tsr,R1e,Msr,Esr,P1e,Csr,wsr,B1e,Asr,ysr,Lsr,I1e,qT,q1e,xsr,$sr,Qz,ksr,Ssr,Rsr,NT,Psr,N1e,Bsr,Isr,j1e,qsr,Nsr,jT,ZNe,Bd,DT,D1e,KL,jsr,G1e,Dsr,eje,Uo,ZL,Gsr,Id,Osr,Hz,Vsr,Xsr,Uz,zsr,Wsr,Qsr,e8,Hsr,O1e,Usr,Jsr,Ysr,wt,o8,Ksr,V1e,Zsr,elr,qd,olr,X1e,rlr,tlr,Jz,alr,nlr,slr,GT,llr,bo,r8,ilr,z1e,dlr,clr,Ua,flr,W1e,mlr,glr,Q1e,hlr,plr,H1e,ulr,_lr,blr,Ja,OT,U1e,vlr,Flr,Yz,Tlr,Mlr,Elr,VT,J1e,Clr,wlr,Kz,Alr,ylr,Llr,XT,Y1e,xlr,$lr,Zz,klr,Slr,Rlr,zT,K1e,Plr,Blr,eW,Ilr,qlr,Nlr,WT,jlr,Z1e,Dlr,Glr,e2e,Olr,Vlr,QT,oje,Nd,HT,o2e,t8,Xlr,r2e,zlr,rje,Jo,a8,Wlr,jd,Qlr,oW,Hlr,Ulr,rW,Jlr,Ylr,Klr,n8,Zlr,t2e,eir,oir,rir,At,s8,tir,a2e,air,nir,Dd,sir,n2e,lir,iir,tW,dir,cir,fir,UT,mir,vo,l8,gir,s2e,hir,pir,Ya,uir,l2e,_ir,bir,i2e,vir,Fir,d2e,Tir,Mir,Eir,c2e,JT,f2e,Cir,wir,aW,Air,yir,Lir,YT,xir,m2e,$ir,kir,g2e,Sir,Rir,KT,tje,Gd,ZT,h2e,i8,Pir,p2e,Bir,aje,Yo,d8,Iir,Od,qir,nW,Nir,jir,sW,Dir,Gir,Oir,c8,Vir,u2e,Xir,zir,Wir,yt,f8,Qir,_2e,Hir,Uir,Vd,Jir,b2e,Yir,Kir,lW,Zir,edr,odr,e7,rdr,wr,m8,tdr,v2e,adr,ndr,Ka,sdr,F2e,ldr,idr,T2e,ddr,cdr,M2e,fdr,mdr,gdr,N,o7,E2e,hdr,pdr,iW,udr,_dr,bdr,r7,C2e,vdr,Fdr,dW,Tdr,Mdr,Edr,t7,w2e,Cdr,wdr,cW,Adr,ydr,Ldr,a7,A2e,xdr,$dr,fW,kdr,Sdr,Rdr,n7,y2e,Pdr,Bdr,mW,Idr,qdr,Ndr,s7,L2e,jdr,Ddr,gW,Gdr,Odr,Vdr,l7,x2e,Xdr,zdr,hW,Wdr,Qdr,Hdr,i7,$2e,Udr,Jdr,pW,Ydr,Kdr,Zdr,d7,k2e,ecr,ocr,uW,rcr,tcr,acr,c7,S2e,ncr,scr,_W,lcr,icr,dcr,f7,R2e,ccr,fcr,bW,mcr,gcr,hcr,m7,P2e,pcr,ucr,vW,_cr,bcr,vcr,g7,B2e,Fcr,Tcr,FW,Mcr,Ecr,Ccr,h7,I2e,wcr,Acr,TW,ycr,Lcr,xcr,p7,q2e,$cr,kcr,MW,Scr,Rcr,Pcr,u7,N2e,Bcr,Icr,EW,qcr,Ncr,jcr,_7,j2e,Dcr,Gcr,CW,Ocr,Vcr,Xcr,Is,D2e,zcr,Wcr,wW,Qcr,Hcr,AW,Ucr,Jcr,Ycr,b7,G2e,Kcr,Zcr,yW,efr,ofr,rfr,v7,O2e,tfr,afr,LW,nfr,sfr,lfr,F7,V2e,ifr,dfr,xW,cfr,ffr,mfr,T7,X2e,gfr,hfr,$W,pfr,ufr,_fr,M7,z2e,bfr,vfr,kW,Ffr,Tfr,Mfr,E7,W2e,Efr,Cfr,SW,wfr,Afr,yfr,C7,Q2e,Lfr,xfr,RW,$fr,kfr,Sfr,w7,H2e,Rfr,Pfr,PW,Bfr,Ifr,qfr,A7,U2e,Nfr,jfr,BW,Dfr,Gfr,Ofr,y7,J2e,Vfr,Xfr,IW,zfr,Wfr,Qfr,L7,Y2e,Hfr,Ufr,qW,Jfr,Yfr,Kfr,x7,K2e,Zfr,emr,NW,omr,rmr,tmr,$7,Z2e,amr,nmr,jW,smr,lmr,imr,k7,ebe,dmr,cmr,DW,fmr,mmr,gmr,S7,obe,hmr,pmr,GW,umr,_mr,bmr,R7,rbe,vmr,Fmr,OW,Tmr,Mmr,Emr,P7,tbe,Cmr,wmr,VW,Amr,ymr,Lmr,B7,abe,xmr,$mr,XW,kmr,Smr,Rmr,I7,nbe,Pmr,Bmr,zW,Imr,qmr,Nmr,q7,sbe,jmr,Dmr,WW,Gmr,Omr,Vmr,N7,lbe,Xmr,zmr,QW,Wmr,Qmr,Hmr,j7,ibe,Umr,Jmr,HW,Ymr,Kmr,Zmr,D7,dbe,egr,ogr,UW,rgr,tgr,agr,G7,cbe,ngr,sgr,JW,lgr,igr,dgr,O7,fbe,cgr,fgr,YW,mgr,ggr,hgr,V7,mbe,pgr,ugr,KW,_gr,bgr,vgr,X7,gbe,Fgr,Tgr,ZW,Mgr,Egr,Cgr,z7,hbe,wgr,Agr,eQ,ygr,Lgr,xgr,W7,nje,Xd,Q7,pbe,g8,$gr,ube,kgr,sje,Ko,h8,Sgr,zd,Rgr,oQ,Pgr,Bgr,rQ,Igr,qgr,Ngr,p8,jgr,_be,Dgr,Ggr,Ogr,Lt,u8,Vgr,bbe,Xgr,zgr,Wd,Wgr,vbe,Qgr,Hgr,tQ,Ugr,Jgr,Ygr,H7,Kgr,Ar,_8,Zgr,Fbe,ehr,ohr,Za,rhr,Tbe,thr,ahr,Mbe,nhr,shr,Ebe,lhr,ihr,dhr,se,U7,Cbe,chr,fhr,aQ,mhr,ghr,hhr,J7,wbe,phr,uhr,nQ,_hr,bhr,vhr,Y7,Abe,Fhr,Thr,sQ,Mhr,Ehr,Chr,K7,ybe,whr,Ahr,lQ,yhr,Lhr,xhr,Z7,Lbe,$hr,khr,iQ,Shr,Rhr,Phr,eM,xbe,Bhr,Ihr,dQ,qhr,Nhr,jhr,oM,$be,Dhr,Ghr,cQ,Ohr,Vhr,Xhr,rM,kbe,zhr,Whr,fQ,Qhr,Hhr,Uhr,tM,Sbe,Jhr,Yhr,mQ,Khr,Zhr,epr,aM,Rbe,opr,rpr,gQ,tpr,apr,npr,nM,Pbe,spr,lpr,hQ,ipr,dpr,cpr,sM,Bbe,fpr,mpr,pQ,gpr,hpr,ppr,lM,Ibe,upr,_pr,uQ,bpr,vpr,Fpr,iM,qbe,Tpr,Mpr,_Q,Epr,Cpr,wpr,dM,Nbe,Apr,ypr,bQ,Lpr,xpr,$pr,cM,jbe,kpr,Spr,vQ,Rpr,Ppr,Bpr,fM,Dbe,Ipr,qpr,FQ,Npr,jpr,Dpr,mM,Gbe,Gpr,Opr,TQ,Vpr,Xpr,zpr,gM,Obe,Wpr,Qpr,MQ,Hpr,Upr,Jpr,hM,Vbe,Ypr,Kpr,EQ,Zpr,eur,our,pM,Xbe,rur,tur,CQ,aur,nur,sur,uM,zbe,lur,iur,wQ,dur,cur,fur,_M,Wbe,mur,gur,AQ,hur,pur,uur,bM,lje,Qd,vM,Qbe,b8,_ur,Hbe,bur,ije,Zo,v8,vur,Hd,Fur,yQ,Tur,Mur,LQ,Eur,Cur,wur,F8,Aur,Ube,yur,Lur,xur,xt,T8,$ur,Jbe,kur,Sur,Ud,Rur,Ybe,Pur,Bur,xQ,Iur,qur,Nur,FM,jur,yr,M8,Dur,Kbe,Gur,Our,en,Vur,Zbe,Xur,zur,eve,Wur,Qur,ove,Hur,Uur,Jur,Me,TM,rve,Yur,Kur,$Q,Zur,e_r,o_r,MM,tve,r_r,t_r,kQ,a_r,n_r,s_r,EM,ave,l_r,i_r,SQ,d_r,c_r,f_r,CM,nve,m_r,g_r,RQ,h_r,p_r,u_r,wM,sve,__r,b_r,PQ,v_r,F_r,T_r,AM,lve,M_r,E_r,BQ,C_r,w_r,A_r,yM,ive,y_r,L_r,IQ,x_r,$_r,k_r,LM,dve,S_r,R_r,qQ,P_r,B_r,I_r,xM,cve,q_r,N_r,NQ,j_r,D_r,G_r,$M,fve,O_r,V_r,jQ,X_r,z_r,W_r,kM,mve,Q_r,H_r,DQ,U_r,J_r,Y_r,SM,gve,K_r,Z_r,GQ,e1r,o1r,r1r,RM,dje,Jd,PM,hve,E8,t1r,pve,a1r,cje,er,C8,n1r,Yd,s1r,OQ,l1r,i1r,VQ,d1r,c1r,f1r,w8,m1r,uve,g1r,h1r,p1r,$t,A8,u1r,_ve,_1r,b1r,Kd,v1r,bve,F1r,T1r,XQ,M1r,E1r,C1r,BM,w1r,Lr,y8,A1r,vve,y1r,L1r,on,x1r,Fve,$1r,k1r,Tve,S1r,R1r,Mve,P1r,B1r,I1r,rn,IM,Eve,q1r,N1r,zQ,j1r,D1r,G1r,qM,Cve,O1r,V1r,WQ,X1r,z1r,W1r,NM,wve,Q1r,H1r,QQ,U1r,J1r,Y1r,jM,Ave,K1r,Z1r,HQ,e2r,o2r,r2r,DM,fje,Zd,GM,yve,L8,t2r,Lve,a2r,mje,or,x8,n2r,ec,s2r,UQ,l2r,i2r,JQ,d2r,c2r,f2r,$8,m2r,xve,g2r,h2r,p2r,kt,k8,u2r,$ve,_2r,b2r,oc,v2r,kve,F2r,T2r,YQ,M2r,E2r,C2r,OM,w2r,xr,S8,A2r,Sve,y2r,L2r,tn,x2r,Rve,$2r,k2r,Pve,S2r,R2r,Bve,P2r,B2r,I2r,ie,VM,Ive,q2r,N2r,KQ,j2r,D2r,G2r,XM,qve,O2r,V2r,ZQ,X2r,z2r,W2r,zM,Nve,Q2r,H2r,eH,U2r,J2r,Y2r,WM,jve,K2r,Z2r,oH,ebr,obr,rbr,QM,Dve,tbr,abr,rH,nbr,sbr,lbr,HM,Gve,ibr,dbr,tH,cbr,fbr,mbr,UM,Ove,gbr,hbr,aH,pbr,ubr,_br,JM,Vve,bbr,vbr,nH,Fbr,Tbr,Mbr,YM,Xve,Ebr,Cbr,sH,wbr,Abr,ybr,KM,zve,Lbr,xbr,lH,$br,kbr,Sbr,ZM,Wve,Rbr,Pbr,iH,Bbr,Ibr,qbr,e4,Qve,Nbr,jbr,dH,Dbr,Gbr,Obr,o4,Hve,Vbr,Xbr,cH,zbr,Wbr,Qbr,r4,Uve,Hbr,Ubr,fH,Jbr,Ybr,Kbr,t4,Jve,Zbr,evr,mH,ovr,rvr,tvr,a4,Yve,avr,nvr,gH,svr,lvr,ivr,n4,Kve,dvr,cvr,hH,fvr,mvr,gvr,s4,Zve,hvr,pvr,pH,uvr,_vr,bvr,l4,e3e,vvr,Fvr,uH,Tvr,Mvr,Evr,i4,o3e,Cvr,wvr,_H,Avr,yvr,Lvr,d4,gje,rc,c4,r3e,R8,xvr,t3e,$vr,hje,rr,P8,kvr,tc,Svr,bH,Rvr,Pvr,vH,Bvr,Ivr,qvr,B8,Nvr,a3e,jvr,Dvr,Gvr,St,I8,Ovr,n3e,Vvr,Xvr,ac,zvr,s3e,Wvr,Qvr,FH,Hvr,Uvr,Jvr,f4,Yvr,$r,q8,Kvr,l3e,Zvr,e3r,an,o3r,i3e,r3r,t3r,d3e,a3r,n3r,c3e,s3r,l3r,i3r,ye,m4,f3e,d3r,c3r,TH,f3r,m3r,g3r,g4,m3e,h3r,p3r,MH,u3r,_3r,b3r,h4,g3e,v3r,F3r,EH,T3r,M3r,E3r,p4,h3e,C3r,w3r,CH,A3r,y3r,L3r,u4,p3e,x3r,$3r,wH,k3r,S3r,R3r,_4,u3e,P3r,B3r,AH,I3r,q3r,N3r,b4,_3e,j3r,D3r,yH,G3r,O3r,V3r,v4,b3e,X3r,z3r,LH,W3r,Q3r,H3r,F4,v3e,U3r,J3r,xH,Y3r,K3r,Z3r,T4,F3e,eFr,oFr,$H,rFr,tFr,aFr,M4,pje,nc,E4,T3e,N8,nFr,M3e,sFr,uje,tr,j8,lFr,sc,iFr,kH,dFr,cFr,SH,fFr,mFr,gFr,D8,hFr,E3e,pFr,uFr,_Fr,Rt,G8,bFr,C3e,vFr,FFr,lc,TFr,w3e,MFr,EFr,RH,CFr,wFr,AFr,C4,yFr,kr,O8,LFr,A3e,xFr,$Fr,nn,kFr,y3e,SFr,RFr,L3e,PFr,BFr,x3e,IFr,qFr,NFr,oe,w4,$3e,jFr,DFr,PH,GFr,OFr,VFr,A4,k3e,XFr,zFr,BH,WFr,QFr,HFr,y4,S3e,UFr,JFr,IH,YFr,KFr,ZFr,L4,R3e,eTr,oTr,qH,rTr,tTr,aTr,x4,P3e,nTr,sTr,NH,lTr,iTr,dTr,$4,B3e,cTr,fTr,jH,mTr,gTr,hTr,k4,I3e,pTr,uTr,DH,_Tr,bTr,vTr,S4,q3e,FTr,TTr,GH,MTr,ETr,CTr,R4,N3e,wTr,ATr,OH,yTr,LTr,xTr,P4,j3e,$Tr,kTr,VH,STr,RTr,PTr,B4,D3e,BTr,ITr,XH,qTr,NTr,jTr,I4,G3e,DTr,GTr,zH,OTr,VTr,XTr,q4,O3e,zTr,WTr,WH,QTr,HTr,UTr,N4,V3e,JTr,YTr,QH,KTr,ZTr,e7r,j4,X3e,o7r,r7r,HH,t7r,a7r,n7r,D4,z3e,s7r,l7r,UH,i7r,d7r,c7r,G4,W3e,f7r,m7r,JH,g7r,h7r,p7r,O4,Q3e,u7r,_7r,YH,b7r,v7r,F7r,V4,H3e,T7r,M7r,KH,E7r,C7r,w7r,X4,U3e,A7r,y7r,ZH,L7r,x7r,$7r,z4,J3e,k7r,S7r,eU,R7r,P7r,B7r,W4,Y3e,I7r,q7r,oU,N7r,j7r,D7r,Q4,K3e,G7r,O7r,rU,V7r,X7r,z7r,H4,Z3e,W7r,Q7r,tU,H7r,U7r,J7r,U4,eFe,Y7r,K7r,aU,Z7r,eMr,oMr,J4,oFe,rMr,tMr,nU,aMr,nMr,sMr,Y4,_je,ic,K4,rFe,V8,lMr,tFe,iMr,bje,ar,X8,dMr,dc,cMr,sU,fMr,mMr,lU,gMr,hMr,pMr,z8,uMr,aFe,_Mr,bMr,vMr,Pt,W8,FMr,nFe,TMr,MMr,cc,EMr,sFe,CMr,wMr,iU,AMr,yMr,LMr,Z4,xMr,Sr,Q8,$Mr,lFe,kMr,SMr,sn,RMr,iFe,PMr,BMr,dFe,IMr,qMr,cFe,NMr,jMr,DMr,pe,eE,fFe,GMr,OMr,dU,VMr,XMr,zMr,oE,mFe,WMr,QMr,cU,HMr,UMr,JMr,rE,gFe,YMr,KMr,fU,ZMr,e4r,o4r,tE,hFe,r4r,t4r,mU,a4r,n4r,s4r,aE,pFe,l4r,i4r,gU,d4r,c4r,f4r,nE,uFe,m4r,g4r,hU,h4r,p4r,u4r,sE,_Fe,_4r,b4r,pU,v4r,F4r,T4r,lE,bFe,M4r,E4r,uU,C4r,w4r,A4r,iE,vFe,y4r,L4r,_U,x4r,$4r,k4r,dE,FFe,S4r,R4r,bU,P4r,B4r,I4r,cE,TFe,q4r,N4r,vU,j4r,D4r,G4r,fE,MFe,O4r,V4r,FU,X4r,z4r,W4r,mE,EFe,Q4r,H4r,TU,U4r,J4r,Y4r,gE,CFe,K4r,Z4r,MU,eEr,oEr,rEr,hE,wFe,tEr,aEr,EU,nEr,sEr,lEr,pE,AFe,iEr,dEr,CU,cEr,fEr,mEr,uE,yFe,gEr,hEr,wU,pEr,uEr,_Er,_E,vje,fc,bE,LFe,H8,bEr,xFe,vEr,Fje,nr,U8,FEr,mc,TEr,AU,MEr,EEr,yU,CEr,wEr,AEr,J8,yEr,$Fe,LEr,xEr,$Er,Bt,Y8,kEr,kFe,SEr,REr,gc,PEr,SFe,BEr,IEr,LU,qEr,NEr,jEr,vE,DEr,Rr,K8,GEr,RFe,OEr,VEr,ln,XEr,PFe,zEr,WEr,BFe,QEr,HEr,IFe,UEr,JEr,YEr,Z8,FE,qFe,KEr,ZEr,xU,eCr,oCr,rCr,TE,NFe,tCr,aCr,$U,nCr,sCr,lCr,ME,Tje,hc,EE,jFe,e9,iCr,DFe,dCr,Mje,sr,o9,cCr,pc,fCr,kU,mCr,gCr,SU,hCr,pCr,uCr,r9,_Cr,GFe,bCr,vCr,FCr,It,t9,TCr,OFe,MCr,ECr,uc,CCr,VFe,wCr,ACr,RU,yCr,LCr,xCr,CE,$Cr,Pr,a9,kCr,XFe,SCr,RCr,dn,PCr,zFe,BCr,ICr,WFe,qCr,NCr,QFe,jCr,DCr,GCr,HFe,wE,UFe,OCr,VCr,PU,XCr,zCr,WCr,AE,Eje,_c,yE,JFe,n9,QCr,YFe,HCr,Cje,lr,s9,UCr,bc,JCr,BU,YCr,KCr,IU,ZCr,e5r,o5r,l9,r5r,KFe,t5r,a5r,n5r,qt,i9,s5r,ZFe,l5r,i5r,vc,d5r,eTe,c5r,f5r,qU,m5r,g5r,h5r,LE,p5r,Br,d9,u5r,oTe,_5r,b5r,cn,v5r,rTe,F5r,T5r,tTe,M5r,E5r,aTe,C5r,w5r,A5r,de,xE,nTe,y5r,L5r,NU,x5r,$5r,k5r,$E,sTe,S5r,R5r,jU,P5r,B5r,I5r,kE,lTe,q5r,N5r,DU,j5r,D5r,G5r,SE,iTe,O5r,V5r,GU,X5r,z5r,W5r,RE,dTe,Q5r,H5r,OU,U5r,J5r,Y5r,PE,cTe,K5r,Z5r,VU,ewr,owr,rwr,BE,fTe,twr,awr,XU,nwr,swr,lwr,IE,mTe,iwr,dwr,zU,cwr,fwr,mwr,qE,gTe,gwr,hwr,WU,pwr,uwr,_wr,NE,hTe,bwr,vwr,QU,Fwr,Twr,Mwr,jE,pTe,Ewr,Cwr,HU,wwr,Awr,ywr,DE,uTe,Lwr,xwr,UU,$wr,kwr,Swr,GE,_Te,Rwr,Pwr,JU,Bwr,Iwr,qwr,OE,bTe,Nwr,jwr,YU,Dwr,Gwr,Owr,VE,vTe,Vwr,Xwr,KU,zwr,Wwr,Qwr,XE,FTe,Hwr,Uwr,ZU,Jwr,Ywr,Kwr,zE,TTe,Zwr,e0r,eJ,o0r,r0r,t0r,WE,MTe,a0r,n0r,oJ,s0r,l0r,i0r,QE,ETe,d0r,c0r,rJ,f0r,m0r,g0r,HE,CTe,h0r,p0r,tJ,u0r,_0r,b0r,UE,wje,Fc,JE,wTe,c9,v0r,ATe,F0r,Aje,ir,f9,T0r,Tc,M0r,aJ,E0r,C0r,nJ,w0r,A0r,y0r,m9,L0r,yTe,x0r,$0r,k0r,Nt,g9,S0r,LTe,R0r,P0r,Mc,B0r,xTe,I0r,q0r,sJ,N0r,j0r,D0r,YE,G0r,Ir,h9,O0r,$Te,V0r,X0r,fn,z0r,kTe,W0r,Q0r,STe,H0r,U0r,RTe,J0r,Y0r,K0r,ce,KE,PTe,Z0r,eAr,lJ,oAr,rAr,tAr,ZE,BTe,aAr,nAr,iJ,sAr,lAr,iAr,eC,ITe,dAr,cAr,dJ,fAr,mAr,gAr,oC,qTe,hAr,pAr,cJ,uAr,_Ar,bAr,rC,NTe,vAr,FAr,fJ,TAr,MAr,EAr,tC,jTe,CAr,wAr,mJ,AAr,yAr,LAr,aC,DTe,xAr,$Ar,gJ,kAr,SAr,RAr,nC,GTe,PAr,BAr,hJ,IAr,qAr,NAr,sC,OTe,jAr,DAr,pJ,GAr,OAr,VAr,lC,VTe,XAr,zAr,uJ,WAr,QAr,HAr,iC,XTe,UAr,JAr,_J,YAr,KAr,ZAr,dC,zTe,e6r,o6r,bJ,r6r,t6r,a6r,cC,WTe,n6r,s6r,vJ,l6r,i6r,d6r,fC,QTe,c6r,f6r,FJ,m6r,g6r,h6r,mC,HTe,p6r,u6r,TJ,_6r,b6r,v6r,gC,UTe,F6r,T6r,MJ,M6r,E6r,C6r,hC,JTe,w6r,A6r,EJ,y6r,L6r,x6r,pC,YTe,$6r,k6r,CJ,S6r,R6r,P6r,uC,KTe,B6r,I6r,wJ,q6r,N6r,j6r,_C,ZTe,D6r,G6r,AJ,O6r,V6r,X6r,bC,yje,Ec,vC,e7e,p9,z6r,o7e,W6r,Lje,dr,u9,Q6r,Cc,H6r,yJ,U6r,J6r,LJ,Y6r,K6r,Z6r,_9,eyr,r7e,oyr,ryr,tyr,jt,b9,ayr,t7e,nyr,syr,wc,lyr,a7e,iyr,dyr,xJ,cyr,fyr,myr,FC,gyr,qr,v9,hyr,n7e,pyr,uyr,mn,_yr,s7e,byr,vyr,l7e,Fyr,Tyr,i7e,Myr,Eyr,Cyr,d7e,TC,c7e,wyr,Ayr,$J,yyr,Lyr,xyr,MC,xje,Ac,EC,f7e,F9,$yr,m7e,kyr,$je,cr,T9,Syr,yc,Ryr,kJ,Pyr,Byr,SJ,Iyr,qyr,Nyr,M9,jyr,g7e,Dyr,Gyr,Oyr,Dt,E9,Vyr,h7e,Xyr,zyr,Lc,Wyr,p7e,Qyr,Hyr,RJ,Uyr,Jyr,Yyr,CC,Kyr,Nr,C9,Zyr,u7e,eLr,oLr,gn,rLr,_7e,tLr,aLr,b7e,nLr,sLr,v7e,lLr,iLr,dLr,F7e,wC,T7e,cLr,fLr,PJ,mLr,gLr,hLr,AC,kje,xc,yC,M7e,w9,pLr,E7e,uLr,Sje,fr,A9,_Lr,$c,bLr,BJ,vLr,FLr,IJ,TLr,MLr,ELr,y9,CLr,C7e,wLr,ALr,yLr,Gt,L9,LLr,w7e,xLr,$Lr,kc,kLr,A7e,SLr,RLr,qJ,PLr,BLr,ILr,LC,qLr,jr,x9,NLr,y7e,jLr,DLr,hn,GLr,L7e,OLr,VLr,x7e,XLr,zLr,$7e,WLr,QLr,HLr,te,xC,k7e,ULr,JLr,NJ,YLr,KLr,ZLr,$C,S7e,e8r,o8r,jJ,r8r,t8r,a8r,kC,R7e,n8r,s8r,DJ,l8r,i8r,d8r,SC,P7e,c8r,f8r,GJ,m8r,g8r,h8r,RC,B7e,p8r,u8r,OJ,_8r,b8r,v8r,PC,I7e,F8r,T8r,VJ,M8r,E8r,C8r,BC,q7e,w8r,A8r,XJ,y8r,L8r,x8r,IC,N7e,$8r,k8r,zJ,S8r,R8r,P8r,qC,j7e,B8r,I8r,WJ,q8r,N8r,j8r,NC,D7e,D8r,G8r,QJ,O8r,V8r,X8r,jC,G7e,z8r,W8r,HJ,Q8r,H8r,U8r,DC,O7e,J8r,Y8r,UJ,K8r,Z8r,e9r,GC,V7e,o9r,r9r,JJ,t9r,a9r,n9r,OC,X7e,s9r,l9r,YJ,i9r,d9r,c9r,VC,z7e,f9r,m9r,KJ,g9r,h9r,p9r,XC,W7e,u9r,_9r,ZJ,b9r,v9r,F9r,zC,Q7e,T9r,M9r,eY,E9r,C9r,w9r,WC,H7e,A9r,y9r,oY,L9r,x9r,$9r,QC,U7e,k9r,S9r,rY,R9r,P9r,B9r,HC,J7e,I9r,q9r,tY,N9r,j9r,D9r,UC,Y7e,G9r,O9r,aY,V9r,X9r,z9r,JC,K7e,W9r,Q9r,nY,H9r,U9r,J9r,YC,Z7e,Y9r,K9r,sY,Z9r,exr,oxr,KC,eMe,rxr,txr,lY,axr,nxr,sxr,ZC,oMe,lxr,ixr,iY,dxr,cxr,fxr,e5,Rje,Sc,o5,rMe,$9,mxr,tMe,gxr,Pje,mr,k9,hxr,Rc,pxr,dY,uxr,_xr,cY,bxr,vxr,Fxr,S9,Txr,aMe,Mxr,Exr,Cxr,Ot,R9,wxr,nMe,Axr,yxr,Pc,Lxr,sMe,xxr,$xr,fY,kxr,Sxr,Rxr,r5,Pxr,Dr,P9,Bxr,lMe,Ixr,qxr,pn,Nxr,iMe,jxr,Dxr,dMe,Gxr,Oxr,cMe,Vxr,Xxr,zxr,Re,t5,fMe,Wxr,Qxr,mY,Hxr,Uxr,Jxr,a5,mMe,Yxr,Kxr,gY,Zxr,e$r,o$r,n5,gMe,r$r,t$r,hY,a$r,n$r,s$r,s5,hMe,l$r,i$r,pY,d$r,c$r,f$r,l5,pMe,m$r,g$r,uY,h$r,p$r,u$r,i5,uMe,_$r,b$r,_Y,v$r,F$r,T$r,d5,_Me,M$r,E$r,bY,C$r,w$r,A$r,c5,bMe,y$r,L$r,vY,x$r,$$r,k$r,f5,vMe,S$r,R$r,FY,P$r,B$r,I$r,m5,Bje,Bc,g5,FMe,B9,q$r,TMe,N$r,Ije,gr,I9,j$r,Ic,D$r,TY,G$r,O$r,MY,V$r,X$r,z$r,q9,W$r,MMe,Q$r,H$r,U$r,Vt,N9,J$r,EMe,Y$r,K$r,qc,Z$r,CMe,ekr,okr,EY,rkr,tkr,akr,h5,nkr,Gr,j9,skr,wMe,lkr,ikr,un,dkr,AMe,ckr,fkr,yMe,mkr,gkr,LMe,hkr,pkr,ukr,Ee,p5,xMe,_kr,bkr,CY,vkr,Fkr,Tkr,u5,$Me,Mkr,Ekr,wY,Ckr,wkr,Akr,_5,kMe,ykr,Lkr,AY,xkr,$kr,kkr,b5,SMe,Skr,Rkr,yY,Pkr,Bkr,Ikr,v5,RMe,qkr,Nkr,LY,jkr,Dkr,Gkr,F5,PMe,Okr,Vkr,xY,Xkr,zkr,Wkr,T5,BMe,Qkr,Hkr,$Y,Ukr,Jkr,Ykr,M5,IMe,Kkr,Zkr,kY,eSr,oSr,rSr,E5,qMe,tSr,aSr,SY,nSr,sSr,lSr,C5,NMe,iSr,dSr,RY,cSr,fSr,mSr,w5,jMe,gSr,hSr,PY,pSr,uSr,_Sr,A5,DMe,bSr,vSr,BY,FSr,TSr,MSr,y5,qje,Nc,L5,GMe,D9,ESr,OMe,CSr,Nje,hr,G9,wSr,jc,ASr,IY,ySr,LSr,qY,xSr,$Sr,kSr,O9,SSr,VMe,RSr,PSr,BSr,Xt,V9,ISr,XMe,qSr,NSr,Dc,jSr,zMe,DSr,GSr,NY,OSr,VSr,XSr,x5,zSr,Or,X9,WSr,WMe,QSr,HSr,_n,USr,QMe,JSr,YSr,HMe,KSr,ZSr,UMe,eRr,oRr,rRr,Le,$5,JMe,tRr,aRr,jY,nRr,sRr,lRr,k5,YMe,iRr,dRr,DY,cRr,fRr,mRr,S5,KMe,gRr,hRr,GY,pRr,uRr,_Rr,R5,ZMe,bRr,vRr,OY,FRr,TRr,MRr,P5,e4e,ERr,CRr,VY,wRr,ARr,yRr,B5,o4e,LRr,xRr,XY,$Rr,kRr,SRr,I5,r4e,RRr,PRr,zY,BRr,IRr,qRr,q5,t4e,NRr,jRr,WY,DRr,GRr,ORr,N5,a4e,VRr,XRr,QY,zRr,WRr,QRr,j5,n4e,HRr,URr,HY,JRr,YRr,KRr,D5,jje,Gc,G5,s4e,z9,ZRr,l4e,ePr,Dje,pr,W9,oPr,Oc,rPr,UY,tPr,aPr,JY,nPr,sPr,lPr,Q9,iPr,i4e,dPr,cPr,fPr,zt,H9,mPr,d4e,gPr,hPr,Vc,pPr,c4e,uPr,_Pr,YY,bPr,vPr,FPr,O5,TPr,Vr,U9,MPr,f4e,EPr,CPr,bn,wPr,m4e,APr,yPr,g4e,LPr,xPr,h4e,$Pr,kPr,SPr,Pe,V5,p4e,RPr,PPr,KY,BPr,IPr,qPr,X5,u4e,NPr,jPr,ZY,DPr,GPr,OPr,z5,_4e,VPr,XPr,eK,zPr,WPr,QPr,W5,b4e,HPr,UPr,oK,JPr,YPr,KPr,Q5,v4e,ZPr,eBr,rK,oBr,rBr,tBr,H5,F4e,aBr,nBr,tK,sBr,lBr,iBr,U5,T4e,dBr,cBr,aK,fBr,mBr,gBr,J5,M4e,hBr,pBr,nK,uBr,_Br,bBr,Y5,E4e,vBr,FBr,sK,TBr,MBr,EBr,K5,Gje,Xc,Z5,C4e,J9,CBr,w4e,wBr,Oje,ur,Y9,ABr,zc,yBr,lK,LBr,xBr,iK,$Br,kBr,SBr,K9,RBr,A4e,PBr,BBr,IBr,Wt,Z9,qBr,y4e,NBr,jBr,Wc,DBr,L4e,GBr,OBr,dK,VBr,XBr,zBr,ew,WBr,Xr,ex,QBr,x4e,HBr,UBr,vn,JBr,$4e,YBr,KBr,k4e,ZBr,eIr,S4e,oIr,rIr,tIr,xe,ow,R4e,aIr,nIr,cK,sIr,lIr,iIr,rw,P4e,dIr,cIr,fK,fIr,mIr,gIr,tw,B4e,hIr,pIr,mK,uIr,_Ir,bIr,aw,I4e,vIr,FIr,gK,TIr,MIr,EIr,nw,q4e,CIr,wIr,hK,AIr,yIr,LIr,sw,N4e,xIr,$Ir,pK,kIr,SIr,RIr,lw,j4e,PIr,BIr,uK,IIr,qIr,NIr,iw,D4e,jIr,DIr,_K,GIr,OIr,VIr,dw,G4e,XIr,zIr,bK,WIr,QIr,HIr,cw,O4e,UIr,JIr,vK,YIr,KIr,ZIr,fw,Vje,Qc,mw,V4e,ox,eqr,X4e,oqr,Xje,_r,rx,rqr,Hc,tqr,FK,aqr,nqr,TK,sqr,lqr,iqr,tx,dqr,z4e,cqr,fqr,mqr,Qt,ax,gqr,W4e,hqr,pqr,Uc,uqr,Q4e,_qr,bqr,MK,vqr,Fqr,Tqr,gw,Mqr,zr,nx,Eqr,H4e,Cqr,wqr,Fn,Aqr,U4e,yqr,Lqr,J4e,xqr,$qr,Y4e,kqr,Sqr,Rqr,$e,hw,K4e,Pqr,Bqr,EK,Iqr,qqr,Nqr,pw,Z4e,jqr,Dqr,CK,Gqr,Oqr,Vqr,uw,eEe,Xqr,zqr,wK,Wqr,Qqr,Hqr,_w,oEe,Uqr,Jqr,AK,Yqr,Kqr,Zqr,bw,rEe,eNr,oNr,yK,rNr,tNr,aNr,vw,tEe,nNr,sNr,LK,lNr,iNr,dNr,Fw,aEe,cNr,fNr,xK,mNr,gNr,hNr,Tw,nEe,pNr,uNr,$K,_Nr,bNr,vNr,Mw,sEe,FNr,TNr,kK,MNr,ENr,CNr,Ew,lEe,wNr,ANr,SK,yNr,LNr,xNr,Cw,zje,Jc,ww,iEe,sx,$Nr,dEe,kNr,Wje,br,lx,SNr,Yc,RNr,RK,PNr,BNr,PK,INr,qNr,NNr,ix,jNr,cEe,DNr,GNr,ONr,Ht,dx,VNr,fEe,XNr,zNr,Kc,WNr,mEe,QNr,HNr,BK,UNr,JNr,YNr,Aw,KNr,Wr,cx,ZNr,gEe,ejr,ojr,Tn,rjr,hEe,tjr,ajr,pEe,njr,sjr,uEe,ljr,ijr,djr,De,yw,_Ee,cjr,fjr,IK,mjr,gjr,hjr,Lw,bEe,pjr,ujr,qK,_jr,bjr,vjr,xw,vEe,Fjr,Tjr,NK,Mjr,Ejr,Cjr,$w,FEe,wjr,Ajr,jK,yjr,Ljr,xjr,kw,TEe,$jr,kjr,DK,Sjr,Rjr,Pjr,Sw,MEe,Bjr,Ijr,GK,qjr,Njr,jjr,Rw,EEe,Djr,Gjr,OK,Ojr,Vjr,Xjr,Pw,CEe,zjr,Wjr,VK,Qjr,Hjr,Ujr,Bw,Qje,Zc,Iw,wEe,fx,Jjr,AEe,Yjr,Hje,vr,mx,Kjr,ef,Zjr,XK,eDr,oDr,zK,rDr,tDr,aDr,gx,nDr,yEe,sDr,lDr,iDr,Ut,hx,dDr,LEe,cDr,fDr,of,mDr,xEe,gDr,hDr,WK,pDr,uDr,_Dr,qw,bDr,Qr,px,vDr,$Ee,FDr,TDr,Mn,MDr,kEe,EDr,CDr,SEe,wDr,ADr,REe,yDr,LDr,xDr,Ge,Nw,PEe,$Dr,kDr,QK,SDr,RDr,PDr,jw,BEe,BDr,IDr,HK,qDr,NDr,jDr,Dw,IEe,DDr,GDr,UK,ODr,VDr,XDr,Gw,qEe,zDr,WDr,JK,QDr,HDr,UDr,Ow,NEe,JDr,YDr,YK,KDr,ZDr,eGr,Vw,jEe,oGr,rGr,KK,tGr,aGr,nGr,Xw,DEe,sGr,lGr,ZK,iGr,dGr,cGr,zw,GEe,fGr,mGr,eZ,gGr,hGr,pGr,Ww,Uje,rf,Qw,OEe,ux,uGr,VEe,_Gr,Jje,Fr,_x,bGr,tf,vGr,oZ,FGr,TGr,rZ,MGr,EGr,CGr,bx,wGr,XEe,AGr,yGr,LGr,Jt,vx,xGr,zEe,$Gr,kGr,af,SGr,WEe,RGr,PGr,tZ,BGr,IGr,qGr,Hw,NGr,Hr,Fx,jGr,QEe,DGr,GGr,En,OGr,HEe,VGr,XGr,UEe,zGr,WGr,JEe,QGr,HGr,UGr,YEe,Uw,KEe,JGr,YGr,aZ,KGr,ZGr,eOr,Jw,Yje,nf,Yw,ZEe,Tx,oOr,eCe,rOr,Kje,Tr,Mx,tOr,sf,aOr,nZ,nOr,sOr,sZ,lOr,iOr,dOr,Ex,cOr,oCe,fOr,mOr,gOr,Yt,Cx,hOr,rCe,pOr,uOr,lf,_Or,tCe,bOr,vOr,lZ,FOr,TOr,MOr,Kw,EOr,Ur,wx,COr,aCe,wOr,AOr,Cn,yOr,nCe,LOr,xOr,sCe,$Or,kOr,lCe,SOr,ROr,POr,Ax,Zw,iCe,BOr,IOr,iZ,qOr,NOr,jOr,e0,dCe,DOr,GOr,dZ,OOr,VOr,XOr,o0,Zje,df,r0,cCe,yx,zOr,fCe,WOr,eDe,Mr,Lx,QOr,cf,HOr,cZ,UOr,JOr,fZ,YOr,KOr,ZOr,xx,eVr,mCe,oVr,rVr,tVr,Kt,$x,aVr,gCe,nVr,sVr,ff,lVr,hCe,iVr,dVr,mZ,cVr,fVr,mVr,t0,gVr,Jr,kx,hVr,pCe,pVr,uVr,wn,_Vr,uCe,bVr,vVr,_Ce,FVr,TVr,bCe,MVr,EVr,CVr,vCe,a0,FCe,wVr,AVr,gZ,yVr,LVr,xVr,n0,oDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),y6=new re({}),L6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new $Vr({props:{warning:!0,$$slots:{default:[f$t]},$$scope:{ctx:L}}}),x6=new re({}),$6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/configuration_auto.py#L584"}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),P6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/configuration_auto.py#L730"}}),B6=new re({}),I6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/tokenization_auto.py#L390"}}),j6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17213/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),D6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/tokenization_auto.py#L603"}}),G6=new re({}),O6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17213/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new $Vr({props:{$$slots:{default:[h$t]},$$scope:{ctx:L}}}),qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),W6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),Q6=new re({}),H6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/processing_auto.py#L88"}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/processing_auto.py#L102"}}),tp=new $Vr({props:{$$slots:{default:[u$t]},$$scope:{ctx:L}}}),ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),K6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/processing_auto.py#L255"}}),Z6=new re({}),ey=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L736"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),r_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L743"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L758"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L765"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L772"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L781"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L815"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),uv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L822"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),bv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L808"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L790"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L797"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L831"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L870"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L877"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),pL=new re({}),uL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L900"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L884"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L891"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L909"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),IL=new re({}),qL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L916"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L863"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),QL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L838"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L845"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_auto.py#L854"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),N8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),e9=new re({}),o9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),ux=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),yx=new re({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17213/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17213/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17213/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),E6=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),C6=o("AutoConfig"),Ln=o(", "),xn=a("a"),w6=o("AutoModel"),pi=o(`, and
`),$n=a("a"),A6=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),z$=o("will create a model that is an instance of "),_i=a("a"),W$=o("BertModel"),Q$=o("."),Eo=l(),wa=a("p"),H$=o("There is one class of "),bf=a("code"),U$=o("AutoModel"),dOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Kqe=l(),bi=a("h2"),vf=a("a"),soe=a("span"),F(y6.$$.fragment),cOe=l(),loe=a("span"),fOe=o("Extending the Auto Classes"),Zqe=l(),kn=a("p"),mOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ioe=a("code"),gOe=o("NewModel"),hOe=o(", make sure you have a "),doe=a("code"),pOe=o("NewModelConfig"),uOe=o(` then you can add those to the auto
classes like this:`),eNe=l(),F(L6.$$.fragment),oNe=l(),J$=a("p"),_Oe=o("You will then be able to use the auto classes like you would usually do!"),rNe=l(),F(Ff.$$.fragment),tNe=l(),vi=a("h2"),Tf=a("a"),coe=a("span"),F(x6.$$.fragment),bOe=l(),foe=a("span"),vOe=o("AutoConfig"),aNe=l(),Co=a("div"),F($6.$$.fragment),FOe=l(),k6=a("p"),TOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y$=a("a"),MOe=o("from_pretrained()"),EOe=o(" class method."),COe=l(),S6=a("p"),wOe=o("This class cannot be instantiated directly using "),moe=a("code"),AOe=o("__init__()"),yOe=o(" (throws an error)."),LOe=l(),Er=a("div"),F(R6.$$.fragment),xOe=l(),goe=a("p"),$Oe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),kOe=l(),Fi=a("p"),SOe=o("The configuration class to instantiate is selected based on the "),hoe=a("code"),ROe=o("model_type"),POe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),poe=a("code"),BOe=o("pretrained_model_name_or_path"),IOe=o(":"),qOe=l(),A=a("ul"),Mf=a("li"),uoe=a("strong"),NOe=o("albert"),jOe=o(" \u2014 "),K$=a("a"),DOe=o("AlbertConfig"),GOe=o(" (ALBERT model)"),OOe=l(),Ef=a("li"),_oe=a("strong"),VOe=o("bart"),XOe=o(" \u2014 "),Z$=a("a"),zOe=o("BartConfig"),WOe=o(" (BART model)"),QOe=l(),Cf=a("li"),boe=a("strong"),HOe=o("beit"),UOe=o(" \u2014 "),ek=a("a"),JOe=o("BeitConfig"),YOe=o(" (BEiT model)"),KOe=l(),wf=a("li"),voe=a("strong"),ZOe=o("bert"),eVe=o(" \u2014 "),ok=a("a"),oVe=o("BertConfig"),rVe=o(" (BERT model)"),tVe=l(),Af=a("li"),Foe=a("strong"),aVe=o("bert-generation"),nVe=o(" \u2014 "),rk=a("a"),sVe=o("BertGenerationConfig"),lVe=o(" (Bert Generation model)"),iVe=l(),yf=a("li"),Toe=a("strong"),dVe=o("big_bird"),cVe=o(" \u2014 "),tk=a("a"),fVe=o("BigBirdConfig"),mVe=o(" (BigBird model)"),gVe=l(),Lf=a("li"),Moe=a("strong"),hVe=o("bigbird_pegasus"),pVe=o(" \u2014 "),ak=a("a"),uVe=o("BigBirdPegasusConfig"),_Ve=o(" (BigBirdPegasus model)"),bVe=l(),xf=a("li"),Eoe=a("strong"),vVe=o("blenderbot"),FVe=o(" \u2014 "),nk=a("a"),TVe=o("BlenderbotConfig"),MVe=o(" (Blenderbot model)"),EVe=l(),$f=a("li"),Coe=a("strong"),CVe=o("blenderbot-small"),wVe=o(" \u2014 "),sk=a("a"),AVe=o("BlenderbotSmallConfig"),yVe=o(" (BlenderbotSmall model)"),LVe=l(),kf=a("li"),woe=a("strong"),xVe=o("camembert"),$Ve=o(" \u2014 "),lk=a("a"),kVe=o("CamembertConfig"),SVe=o(" (CamemBERT model)"),RVe=l(),Sf=a("li"),Aoe=a("strong"),PVe=o("canine"),BVe=o(" \u2014 "),ik=a("a"),IVe=o("CanineConfig"),qVe=o(" (Canine model)"),NVe=l(),Rf=a("li"),yoe=a("strong"),jVe=o("clip"),DVe=o(" \u2014 "),dk=a("a"),GVe=o("CLIPConfig"),OVe=o(" (CLIP model)"),VVe=l(),Pf=a("li"),Loe=a("strong"),XVe=o("convbert"),zVe=o(" \u2014 "),ck=a("a"),WVe=o("ConvBertConfig"),QVe=o(" (ConvBERT model)"),HVe=l(),Bf=a("li"),xoe=a("strong"),UVe=o("convnext"),JVe=o(" \u2014 "),fk=a("a"),YVe=o("ConvNextConfig"),KVe=o(" (ConvNext model)"),ZVe=l(),If=a("li"),$oe=a("strong"),eXe=o("ctrl"),oXe=o(" \u2014 "),mk=a("a"),rXe=o("CTRLConfig"),tXe=o(" (CTRL model)"),aXe=l(),qf=a("li"),koe=a("strong"),nXe=o("cvt"),sXe=o(" \u2014 "),gk=a("a"),lXe=o("CvtConfig"),iXe=o(" (CvT model)"),dXe=l(),Nf=a("li"),Soe=a("strong"),cXe=o("data2vec-audio"),fXe=o(" \u2014 "),hk=a("a"),mXe=o("Data2VecAudioConfig"),gXe=o(" (Data2VecAudio model)"),hXe=l(),jf=a("li"),Roe=a("strong"),pXe=o("data2vec-text"),uXe=o(" \u2014 "),pk=a("a"),_Xe=o("Data2VecTextConfig"),bXe=o(" (Data2VecText model)"),vXe=l(),Df=a("li"),Poe=a("strong"),FXe=o("data2vec-vision"),TXe=o(" \u2014 "),uk=a("a"),MXe=o("Data2VecVisionConfig"),EXe=o(" (Data2VecVision model)"),CXe=l(),Gf=a("li"),Boe=a("strong"),wXe=o("deberta"),AXe=o(" \u2014 "),_k=a("a"),yXe=o("DebertaConfig"),LXe=o(" (DeBERTa model)"),xXe=l(),Of=a("li"),Ioe=a("strong"),$Xe=o("deberta-v2"),kXe=o(" \u2014 "),bk=a("a"),SXe=o("DebertaV2Config"),RXe=o(" (DeBERTa-v2 model)"),PXe=l(),Vf=a("li"),qoe=a("strong"),BXe=o("decision_transformer"),IXe=o(" \u2014 "),vk=a("a"),qXe=o("DecisionTransformerConfig"),NXe=o(" (Decision Transformer model)"),jXe=l(),Xf=a("li"),Noe=a("strong"),DXe=o("deit"),GXe=o(" \u2014 "),Fk=a("a"),OXe=o("DeiTConfig"),VXe=o(" (DeiT model)"),XXe=l(),zf=a("li"),joe=a("strong"),zXe=o("detr"),WXe=o(" \u2014 "),Tk=a("a"),QXe=o("DetrConfig"),HXe=o(" (DETR model)"),UXe=l(),Wf=a("li"),Doe=a("strong"),JXe=o("distilbert"),YXe=o(" \u2014 "),Mk=a("a"),KXe=o("DistilBertConfig"),ZXe=o(" (DistilBERT model)"),eze=l(),Qf=a("li"),Goe=a("strong"),oze=o("dpr"),rze=o(" \u2014 "),Ek=a("a"),tze=o("DPRConfig"),aze=o(" (DPR model)"),nze=l(),Hf=a("li"),Ooe=a("strong"),sze=o("dpt"),lze=o(" \u2014 "),Ck=a("a"),ize=o("DPTConfig"),dze=o(" (DPT model)"),cze=l(),Uf=a("li"),Voe=a("strong"),fze=o("electra"),mze=o(" \u2014 "),wk=a("a"),gze=o("ElectraConfig"),hze=o(" (ELECTRA model)"),pze=l(),Jf=a("li"),Xoe=a("strong"),uze=o("encoder-decoder"),_ze=o(" \u2014 "),Ak=a("a"),bze=o("EncoderDecoderConfig"),vze=o(" (Encoder decoder model)"),Fze=l(),Yf=a("li"),zoe=a("strong"),Tze=o("flaubert"),Mze=o(" \u2014 "),yk=a("a"),Eze=o("FlaubertConfig"),Cze=o(" (FlauBERT model)"),wze=l(),Kf=a("li"),Woe=a("strong"),Aze=o("flava"),yze=o(" \u2014 "),Lk=a("a"),Lze=o("FlavaConfig"),xze=o(" (Flava model)"),$ze=l(),Zf=a("li"),Qoe=a("strong"),kze=o("fnet"),Sze=o(" \u2014 "),xk=a("a"),Rze=o("FNetConfig"),Pze=o(" (FNet model)"),Bze=l(),em=a("li"),Hoe=a("strong"),Ize=o("fsmt"),qze=o(" \u2014 "),$k=a("a"),Nze=o("FSMTConfig"),jze=o(" (FairSeq Machine-Translation model)"),Dze=l(),om=a("li"),Uoe=a("strong"),Gze=o("funnel"),Oze=o(" \u2014 "),kk=a("a"),Vze=o("FunnelConfig"),Xze=o(" (Funnel Transformer model)"),zze=l(),rm=a("li"),Joe=a("strong"),Wze=o("glpn"),Qze=o(" \u2014 "),Sk=a("a"),Hze=o("GLPNConfig"),Uze=o(" (GLPN model)"),Jze=l(),tm=a("li"),Yoe=a("strong"),Yze=o("gpt2"),Kze=o(" \u2014 "),Rk=a("a"),Zze=o("GPT2Config"),eWe=o(" (OpenAI GPT-2 model)"),oWe=l(),am=a("li"),Koe=a("strong"),rWe=o("gpt_neo"),tWe=o(" \u2014 "),Pk=a("a"),aWe=o("GPTNeoConfig"),nWe=o(" (GPT Neo model)"),sWe=l(),nm=a("li"),Zoe=a("strong"),lWe=o("gpt_neox"),iWe=o(" \u2014 "),Bk=a("a"),dWe=o("GPTNeoXConfig"),cWe=o(" (GPT NeoX model)"),fWe=l(),sm=a("li"),ere=a("strong"),mWe=o("gptj"),gWe=o(" \u2014 "),Ik=a("a"),hWe=o("GPTJConfig"),pWe=o(" (GPT-J model)"),uWe=l(),lm=a("li"),ore=a("strong"),_We=o("hubert"),bWe=o(" \u2014 "),qk=a("a"),vWe=o("HubertConfig"),FWe=o(" (Hubert model)"),TWe=l(),im=a("li"),rre=a("strong"),MWe=o("ibert"),EWe=o(" \u2014 "),Nk=a("a"),CWe=o("IBertConfig"),wWe=o(" (I-BERT model)"),AWe=l(),dm=a("li"),tre=a("strong"),yWe=o("imagegpt"),LWe=o(" \u2014 "),jk=a("a"),xWe=o("ImageGPTConfig"),$We=o(" (ImageGPT model)"),kWe=l(),cm=a("li"),are=a("strong"),SWe=o("layoutlm"),RWe=o(" \u2014 "),Dk=a("a"),PWe=o("LayoutLMConfig"),BWe=o(" (LayoutLM model)"),IWe=l(),fm=a("li"),nre=a("strong"),qWe=o("layoutlmv2"),NWe=o(" \u2014 "),Gk=a("a"),jWe=o("LayoutLMv2Config"),DWe=o(" (LayoutLMv2 model)"),GWe=l(),mm=a("li"),sre=a("strong"),OWe=o("layoutlmv3"),VWe=o(" \u2014 "),Ok=a("a"),XWe=o("LayoutLMv3Config"),zWe=o(" (LayoutLMv3 model)"),WWe=l(),gm=a("li"),lre=a("strong"),QWe=o("led"),HWe=o(" \u2014 "),Vk=a("a"),UWe=o("LEDConfig"),JWe=o(" (LED model)"),YWe=l(),hm=a("li"),ire=a("strong"),KWe=o("longformer"),ZWe=o(" \u2014 "),Xk=a("a"),eQe=o("LongformerConfig"),oQe=o(" (Longformer model)"),rQe=l(),pm=a("li"),dre=a("strong"),tQe=o("luke"),aQe=o(" \u2014 "),zk=a("a"),nQe=o("LukeConfig"),sQe=o(" (LUKE model)"),lQe=l(),um=a("li"),cre=a("strong"),iQe=o("lxmert"),dQe=o(" \u2014 "),Wk=a("a"),cQe=o("LxmertConfig"),fQe=o(" (LXMERT model)"),mQe=l(),_m=a("li"),fre=a("strong"),gQe=o("m2m_100"),hQe=o(" \u2014 "),Qk=a("a"),pQe=o("M2M100Config"),uQe=o(" (M2M100 model)"),_Qe=l(),bm=a("li"),mre=a("strong"),bQe=o("marian"),vQe=o(" \u2014 "),Hk=a("a"),FQe=o("MarianConfig"),TQe=o(" (Marian model)"),MQe=l(),vm=a("li"),gre=a("strong"),EQe=o("maskformer"),CQe=o(" \u2014 "),Uk=a("a"),wQe=o("MaskFormerConfig"),AQe=o(" (MaskFormer model)"),yQe=l(),Fm=a("li"),hre=a("strong"),LQe=o("mbart"),xQe=o(" \u2014 "),Jk=a("a"),$Qe=o("MBartConfig"),kQe=o(" (mBART model)"),SQe=l(),Tm=a("li"),pre=a("strong"),RQe=o("megatron-bert"),PQe=o(" \u2014 "),Yk=a("a"),BQe=o("MegatronBertConfig"),IQe=o(" (MegatronBert model)"),qQe=l(),Mm=a("li"),ure=a("strong"),NQe=o("mobilebert"),jQe=o(" \u2014 "),Kk=a("a"),DQe=o("MobileBertConfig"),GQe=o(" (MobileBERT model)"),OQe=l(),Em=a("li"),_re=a("strong"),VQe=o("mpnet"),XQe=o(" \u2014 "),Zk=a("a"),zQe=o("MPNetConfig"),WQe=o(" (MPNet model)"),QQe=l(),Cm=a("li"),bre=a("strong"),HQe=o("mt5"),UQe=o(" \u2014 "),eS=a("a"),JQe=o("MT5Config"),YQe=o(" (mT5 model)"),KQe=l(),wm=a("li"),vre=a("strong"),ZQe=o("nystromformer"),eHe=o(" \u2014 "),oS=a("a"),oHe=o("NystromformerConfig"),rHe=o(" (Nystromformer model)"),tHe=l(),Am=a("li"),Fre=a("strong"),aHe=o("openai-gpt"),nHe=o(" \u2014 "),rS=a("a"),sHe=o("OpenAIGPTConfig"),lHe=o(" (OpenAI GPT model)"),iHe=l(),ym=a("li"),Tre=a("strong"),dHe=o("opt"),cHe=o(" \u2014 "),tS=a("a"),fHe=o("OPTConfig"),mHe=o(" (OPT model)"),gHe=l(),Lm=a("li"),Mre=a("strong"),hHe=o("pegasus"),pHe=o(" \u2014 "),aS=a("a"),uHe=o("PegasusConfig"),_He=o(" (Pegasus model)"),bHe=l(),xm=a("li"),Ere=a("strong"),vHe=o("perceiver"),FHe=o(" \u2014 "),nS=a("a"),THe=o("PerceiverConfig"),MHe=o(" (Perceiver model)"),EHe=l(),$m=a("li"),Cre=a("strong"),CHe=o("plbart"),wHe=o(" \u2014 "),sS=a("a"),AHe=o("PLBartConfig"),yHe=o(" (PLBart model)"),LHe=l(),km=a("li"),wre=a("strong"),xHe=o("poolformer"),$He=o(" \u2014 "),lS=a("a"),kHe=o("PoolFormerConfig"),SHe=o(" (PoolFormer model)"),RHe=l(),Sm=a("li"),Are=a("strong"),PHe=o("prophetnet"),BHe=o(" \u2014 "),iS=a("a"),IHe=o("ProphetNetConfig"),qHe=o(" (ProphetNet model)"),NHe=l(),Rm=a("li"),yre=a("strong"),jHe=o("qdqbert"),DHe=o(" \u2014 "),dS=a("a"),GHe=o("QDQBertConfig"),OHe=o(" (QDQBert model)"),VHe=l(),Pm=a("li"),Lre=a("strong"),XHe=o("rag"),zHe=o(" \u2014 "),cS=a("a"),WHe=o("RagConfig"),QHe=o(" (RAG model)"),HHe=l(),Bm=a("li"),xre=a("strong"),UHe=o("realm"),JHe=o(" \u2014 "),fS=a("a"),YHe=o("RealmConfig"),KHe=o(" (Realm model)"),ZHe=l(),Im=a("li"),$re=a("strong"),eUe=o("reformer"),oUe=o(" \u2014 "),mS=a("a"),rUe=o("ReformerConfig"),tUe=o(" (Reformer model)"),aUe=l(),qm=a("li"),kre=a("strong"),nUe=o("regnet"),sUe=o(" \u2014 "),gS=a("a"),lUe=o("RegNetConfig"),iUe=o(" (RegNet model)"),dUe=l(),Nm=a("li"),Sre=a("strong"),cUe=o("rembert"),fUe=o(" \u2014 "),hS=a("a"),mUe=o("RemBertConfig"),gUe=o(" (RemBERT model)"),hUe=l(),jm=a("li"),Rre=a("strong"),pUe=o("resnet"),uUe=o(" \u2014 "),pS=a("a"),_Ue=o("ResNetConfig"),bUe=o(" (ResNet model)"),vUe=l(),Dm=a("li"),Pre=a("strong"),FUe=o("retribert"),TUe=o(" \u2014 "),uS=a("a"),MUe=o("RetriBertConfig"),EUe=o(" (RetriBERT model)"),CUe=l(),Gm=a("li"),Bre=a("strong"),wUe=o("roberta"),AUe=o(" \u2014 "),_S=a("a"),yUe=o("RobertaConfig"),LUe=o(" (RoBERTa model)"),xUe=l(),Om=a("li"),Ire=a("strong"),$Ue=o("roformer"),kUe=o(" \u2014 "),bS=a("a"),SUe=o("RoFormerConfig"),RUe=o(" (RoFormer model)"),PUe=l(),Vm=a("li"),qre=a("strong"),BUe=o("segformer"),IUe=o(" \u2014 "),vS=a("a"),qUe=o("SegformerConfig"),NUe=o(" (SegFormer model)"),jUe=l(),Xm=a("li"),Nre=a("strong"),DUe=o("sew"),GUe=o(" \u2014 "),FS=a("a"),OUe=o("SEWConfig"),VUe=o(" (SEW model)"),XUe=l(),zm=a("li"),jre=a("strong"),zUe=o("sew-d"),WUe=o(" \u2014 "),TS=a("a"),QUe=o("SEWDConfig"),HUe=o(" (SEW-D model)"),UUe=l(),Wm=a("li"),Dre=a("strong"),JUe=o("speech-encoder-decoder"),YUe=o(" \u2014 "),MS=a("a"),KUe=o("SpeechEncoderDecoderConfig"),ZUe=o(" (Speech Encoder decoder model)"),eJe=l(),Qm=a("li"),Gre=a("strong"),oJe=o("speech_to_text"),rJe=o(" \u2014 "),ES=a("a"),tJe=o("Speech2TextConfig"),aJe=o(" (Speech2Text model)"),nJe=l(),Hm=a("li"),Ore=a("strong"),sJe=o("speech_to_text_2"),lJe=o(" \u2014 "),CS=a("a"),iJe=o("Speech2Text2Config"),dJe=o(" (Speech2Text2 model)"),cJe=l(),Um=a("li"),Vre=a("strong"),fJe=o("splinter"),mJe=o(" \u2014 "),wS=a("a"),gJe=o("SplinterConfig"),hJe=o(" (Splinter model)"),pJe=l(),Jm=a("li"),Xre=a("strong"),uJe=o("squeezebert"),_Je=o(" \u2014 "),AS=a("a"),bJe=o("SqueezeBertConfig"),vJe=o(" (SqueezeBERT model)"),FJe=l(),Ym=a("li"),zre=a("strong"),TJe=o("swin"),MJe=o(" \u2014 "),yS=a("a"),EJe=o("SwinConfig"),CJe=o(" (Swin model)"),wJe=l(),Km=a("li"),Wre=a("strong"),AJe=o("t5"),yJe=o(" \u2014 "),LS=a("a"),LJe=o("T5Config"),xJe=o(" (T5 model)"),$Je=l(),Zm=a("li"),Qre=a("strong"),kJe=o("tapas"),SJe=o(" \u2014 "),xS=a("a"),RJe=o("TapasConfig"),PJe=o(" (TAPAS model)"),BJe=l(),eg=a("li"),Hre=a("strong"),IJe=o("trajectory_transformer"),qJe=o(" \u2014 "),$S=a("a"),NJe=o("TrajectoryTransformerConfig"),jJe=o(" (Trajectory Transformer model)"),DJe=l(),og=a("li"),Ure=a("strong"),GJe=o("transfo-xl"),OJe=o(" \u2014 "),kS=a("a"),VJe=o("TransfoXLConfig"),XJe=o(" (Transformer-XL model)"),zJe=l(),rg=a("li"),Jre=a("strong"),WJe=o("trocr"),QJe=o(" \u2014 "),SS=a("a"),HJe=o("TrOCRConfig"),UJe=o(" (TrOCR model)"),JJe=l(),tg=a("li"),Yre=a("strong"),YJe=o("unispeech"),KJe=o(" \u2014 "),RS=a("a"),ZJe=o("UniSpeechConfig"),eYe=o(" (UniSpeech model)"),oYe=l(),ag=a("li"),Kre=a("strong"),rYe=o("unispeech-sat"),tYe=o(" \u2014 "),PS=a("a"),aYe=o("UniSpeechSatConfig"),nYe=o(" (UniSpeechSat model)"),sYe=l(),ng=a("li"),Zre=a("strong"),lYe=o("van"),iYe=o(" \u2014 "),BS=a("a"),dYe=o("VanConfig"),cYe=o(" (VAN model)"),fYe=l(),sg=a("li"),ete=a("strong"),mYe=o("vilt"),gYe=o(" \u2014 "),IS=a("a"),hYe=o("ViltConfig"),pYe=o(" (ViLT model)"),uYe=l(),lg=a("li"),ote=a("strong"),_Ye=o("vision-encoder-decoder"),bYe=o(" \u2014 "),qS=a("a"),vYe=o("VisionEncoderDecoderConfig"),FYe=o(" (Vision Encoder decoder model)"),TYe=l(),ig=a("li"),rte=a("strong"),MYe=o("vision-text-dual-encoder"),EYe=o(" \u2014 "),NS=a("a"),CYe=o("VisionTextDualEncoderConfig"),wYe=o(" (VisionTextDualEncoder model)"),AYe=l(),dg=a("li"),tte=a("strong"),yYe=o("visual_bert"),LYe=o(" \u2014 "),jS=a("a"),xYe=o("VisualBertConfig"),$Ye=o(" (VisualBert model)"),kYe=l(),cg=a("li"),ate=a("strong"),SYe=o("vit"),RYe=o(" \u2014 "),DS=a("a"),PYe=o("ViTConfig"),BYe=o(" (ViT model)"),IYe=l(),fg=a("li"),nte=a("strong"),qYe=o("vit_mae"),NYe=o(" \u2014 "),GS=a("a"),jYe=o("ViTMAEConfig"),DYe=o(" (ViTMAE model)"),GYe=l(),mg=a("li"),ste=a("strong"),OYe=o("wav2vec2"),VYe=o(" \u2014 "),OS=a("a"),XYe=o("Wav2Vec2Config"),zYe=o(" (Wav2Vec2 model)"),WYe=l(),gg=a("li"),lte=a("strong"),QYe=o("wav2vec2-conformer"),HYe=o(" \u2014 "),VS=a("a"),UYe=o("Wav2Vec2ConformerConfig"),JYe=o(" (Wav2Vec2-Conformer model)"),YYe=l(),hg=a("li"),ite=a("strong"),KYe=o("wavlm"),ZYe=o(" \u2014 "),XS=a("a"),eKe=o("WavLMConfig"),oKe=o(" (WavLM model)"),rKe=l(),pg=a("li"),dte=a("strong"),tKe=o("xglm"),aKe=o(" \u2014 "),zS=a("a"),nKe=o("XGLMConfig"),sKe=o(" (XGLM model)"),lKe=l(),ug=a("li"),cte=a("strong"),iKe=o("xlm"),dKe=o(" \u2014 "),WS=a("a"),cKe=o("XLMConfig"),fKe=o(" (XLM model)"),mKe=l(),_g=a("li"),fte=a("strong"),gKe=o("xlm-prophetnet"),hKe=o(" \u2014 "),QS=a("a"),pKe=o("XLMProphetNetConfig"),uKe=o(" (XLMProphetNet model)"),_Ke=l(),bg=a("li"),mte=a("strong"),bKe=o("xlm-roberta"),vKe=o(" \u2014 "),HS=a("a"),FKe=o("XLMRobertaConfig"),TKe=o(" (XLM-RoBERTa model)"),MKe=l(),vg=a("li"),gte=a("strong"),EKe=o("xlm-roberta-xl"),CKe=o(" \u2014 "),US=a("a"),wKe=o("XLMRobertaXLConfig"),AKe=o(" (XLM-RoBERTa-XL model)"),yKe=l(),Fg=a("li"),hte=a("strong"),LKe=o("xlnet"),xKe=o(" \u2014 "),JS=a("a"),$Ke=o("XLNetConfig"),kKe=o(" (XLNet model)"),SKe=l(),Tg=a("li"),pte=a("strong"),RKe=o("yolos"),PKe=o(" \u2014 "),YS=a("a"),BKe=o("YolosConfig"),IKe=o(" (YOLOS model)"),qKe=l(),Mg=a("li"),ute=a("strong"),NKe=o("yoso"),jKe=o(" \u2014 "),KS=a("a"),DKe=o("YosoConfig"),GKe=o(" (YOSO model)"),OKe=l(),F(Eg.$$.fragment),VKe=l(),Cg=a("div"),F(P6.$$.fragment),XKe=l(),_te=a("p"),zKe=o("Register a new configuration for this class."),nNe=l(),Ti=a("h2"),wg=a("a"),bte=a("span"),F(B6.$$.fragment),WKe=l(),vte=a("span"),QKe=o("AutoTokenizer"),sNe=l(),wo=a("div"),F(I6.$$.fragment),HKe=l(),q6=a("p"),UKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=a("a"),JKe=o("AutoTokenizer.from_pretrained()"),YKe=o(" class method."),KKe=l(),N6=a("p"),ZKe=o("This class cannot be instantiated directly using "),Fte=a("code"),eZe=o("__init__()"),oZe=o(" (throws an error)."),rZe=l(),Cr=a("div"),F(j6.$$.fragment),tZe=l(),Tte=a("p"),aZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nZe=l(),Aa=a("p"),sZe=o("The tokenizer class to instantiate is selected based on the "),Mte=a("code"),lZe=o("model_type"),iZe=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),dZe=o("pretrained_model_name_or_path"),cZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=a("code"),fZe=o("pretrained_model_name_or_path"),mZe=o(":"),gZe=l(),k=a("ul"),Sn=a("li"),wte=a("strong"),hZe=o("albert"),pZe=o(" \u2014 "),eR=a("a"),uZe=o("AlbertTokenizer"),_Ze=o(" or "),oR=a("a"),bZe=o("AlbertTokenizerFast"),vZe=o(" (ALBERT model)"),FZe=l(),Rn=a("li"),Ate=a("strong"),TZe=o("bart"),MZe=o(" \u2014 "),rR=a("a"),EZe=o("BartTokenizer"),CZe=o(" or "),tR=a("a"),wZe=o("BartTokenizerFast"),AZe=o(" (BART model)"),yZe=l(),Pn=a("li"),yte=a("strong"),LZe=o("barthez"),xZe=o(" \u2014 "),aR=a("a"),$Ze=o("BarthezTokenizer"),kZe=o(" or "),nR=a("a"),SZe=o("BarthezTokenizerFast"),RZe=o(" (BARThez model)"),PZe=l(),Ag=a("li"),Lte=a("strong"),BZe=o("bartpho"),IZe=o(" \u2014 "),sR=a("a"),qZe=o("BartphoTokenizer"),NZe=o(" (BARTpho model)"),jZe=l(),Bn=a("li"),xte=a("strong"),DZe=o("bert"),GZe=o(" \u2014 "),lR=a("a"),OZe=o("BertTokenizer"),VZe=o(" or "),iR=a("a"),XZe=o("BertTokenizerFast"),zZe=o(" (BERT model)"),WZe=l(),yg=a("li"),$te=a("strong"),QZe=o("bert-generation"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("BertGenerationTokenizer"),JZe=o(" (Bert Generation model)"),YZe=l(),Lg=a("li"),kte=a("strong"),KZe=o("bert-japanese"),ZZe=o(" \u2014 "),cR=a("a"),eeo=o("BertJapaneseTokenizer"),oeo=o(" (BertJapanese model)"),reo=l(),xg=a("li"),Ste=a("strong"),teo=o("bertweet"),aeo=o(" \u2014 "),fR=a("a"),neo=o("BertweetTokenizer"),seo=o(" (Bertweet model)"),leo=l(),In=a("li"),Rte=a("strong"),ieo=o("big_bird"),deo=o(" \u2014 "),mR=a("a"),ceo=o("BigBirdTokenizer"),feo=o(" or "),gR=a("a"),meo=o("BigBirdTokenizerFast"),geo=o(" (BigBird model)"),heo=l(),qn=a("li"),Pte=a("strong"),peo=o("bigbird_pegasus"),ueo=o(" \u2014 "),hR=a("a"),_eo=o("PegasusTokenizer"),beo=o(" or "),pR=a("a"),veo=o("PegasusTokenizerFast"),Feo=o(" (BigBirdPegasus model)"),Teo=l(),Nn=a("li"),Bte=a("strong"),Meo=o("blenderbot"),Eeo=o(" \u2014 "),uR=a("a"),Ceo=o("BlenderbotTokenizer"),weo=o(" or "),_R=a("a"),Aeo=o("BlenderbotTokenizerFast"),yeo=o(" (Blenderbot model)"),Leo=l(),$g=a("li"),Ite=a("strong"),xeo=o("blenderbot-small"),$eo=o(" \u2014 "),bR=a("a"),keo=o("BlenderbotSmallTokenizer"),Seo=o(" (BlenderbotSmall model)"),Reo=l(),kg=a("li"),qte=a("strong"),Peo=o("byt5"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("ByT5Tokenizer"),qeo=o(" (ByT5 model)"),Neo=l(),jn=a("li"),Nte=a("strong"),jeo=o("camembert"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("CamembertTokenizer"),Oeo=o(" or "),TR=a("a"),Veo=o("CamembertTokenizerFast"),Xeo=o(" (CamemBERT model)"),zeo=l(),Sg=a("li"),jte=a("strong"),Weo=o("canine"),Qeo=o(" \u2014 "),MR=a("a"),Heo=o("CanineTokenizer"),Ueo=o(" (Canine model)"),Jeo=l(),Dn=a("li"),Dte=a("strong"),Yeo=o("clip"),Keo=o(" \u2014 "),ER=a("a"),Zeo=o("CLIPTokenizer"),eoo=o(" or "),CR=a("a"),ooo=o("CLIPTokenizerFast"),roo=o(" (CLIP model)"),too=l(),Gn=a("li"),Gte=a("strong"),aoo=o("convbert"),noo=o(" \u2014 "),wR=a("a"),soo=o("ConvBertTokenizer"),loo=o(" or "),AR=a("a"),ioo=o("ConvBertTokenizerFast"),doo=o(" (ConvBERT model)"),coo=l(),On=a("li"),Ote=a("strong"),foo=o("cpm"),moo=o(" \u2014 "),yR=a("a"),goo=o("CpmTokenizer"),hoo=o(" or "),LR=a("a"),poo=o("CpmTokenizerFast"),uoo=o(" (CPM model)"),_oo=l(),Rg=a("li"),Vte=a("strong"),boo=o("ctrl"),voo=o(" \u2014 "),xR=a("a"),Foo=o("CTRLTokenizer"),Too=o(" (CTRL model)"),Moo=l(),Vn=a("li"),Xte=a("strong"),Eoo=o("data2vec-text"),Coo=o(" \u2014 "),$R=a("a"),woo=o("RobertaTokenizer"),Aoo=o(" or "),kR=a("a"),yoo=o("RobertaTokenizerFast"),Loo=o(" (Data2VecText model)"),xoo=l(),Xn=a("li"),zte=a("strong"),$oo=o("deberta"),koo=o(" \u2014 "),SR=a("a"),Soo=o("DebertaTokenizer"),Roo=o(" or "),RR=a("a"),Poo=o("DebertaTokenizerFast"),Boo=o(" (DeBERTa model)"),Ioo=l(),zn=a("li"),Wte=a("strong"),qoo=o("deberta-v2"),Noo=o(" \u2014 "),PR=a("a"),joo=o("DebertaV2Tokenizer"),Doo=o(" or "),BR=a("a"),Goo=o("DebertaV2TokenizerFast"),Ooo=o(" (DeBERTa-v2 model)"),Voo=l(),Wn=a("li"),Qte=a("strong"),Xoo=o("distilbert"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("DistilBertTokenizer"),Qoo=o(" or "),qR=a("a"),Hoo=o("DistilBertTokenizerFast"),Uoo=o(" (DistilBERT model)"),Joo=l(),Qn=a("li"),Hte=a("strong"),Yoo=o("dpr"),Koo=o(" \u2014 "),NR=a("a"),Zoo=o("DPRQuestionEncoderTokenizer"),ero=o(" or "),jR=a("a"),oro=o("DPRQuestionEncoderTokenizerFast"),rro=o(" (DPR model)"),tro=l(),Hn=a("li"),Ute=a("strong"),aro=o("electra"),nro=o(" \u2014 "),DR=a("a"),sro=o("ElectraTokenizer"),lro=o(" or "),GR=a("a"),iro=o("ElectraTokenizerFast"),dro=o(" (ELECTRA model)"),cro=l(),Pg=a("li"),Jte=a("strong"),fro=o("flaubert"),mro=o(" \u2014 "),OR=a("a"),gro=o("FlaubertTokenizer"),hro=o(" (FlauBERT model)"),pro=l(),Un=a("li"),Yte=a("strong"),uro=o("fnet"),_ro=o(" \u2014 "),VR=a("a"),bro=o("FNetTokenizer"),vro=o(" or "),XR=a("a"),Fro=o("FNetTokenizerFast"),Tro=o(" (FNet model)"),Mro=l(),Bg=a("li"),Kte=a("strong"),Ero=o("fsmt"),Cro=o(" \u2014 "),zR=a("a"),wro=o("FSMTTokenizer"),Aro=o(" (FairSeq Machine-Translation model)"),yro=l(),Jn=a("li"),Zte=a("strong"),Lro=o("funnel"),xro=o(" \u2014 "),WR=a("a"),$ro=o("FunnelTokenizer"),kro=o(" or "),QR=a("a"),Sro=o("FunnelTokenizerFast"),Rro=o(" (Funnel Transformer model)"),Pro=l(),Yn=a("li"),eae=a("strong"),Bro=o("gpt2"),Iro=o(" \u2014 "),HR=a("a"),qro=o("GPT2Tokenizer"),Nro=o(" or "),UR=a("a"),jro=o("GPT2TokenizerFast"),Dro=o(" (OpenAI GPT-2 model)"),Gro=l(),Kn=a("li"),oae=a("strong"),Oro=o("gpt_neo"),Vro=o(" \u2014 "),JR=a("a"),Xro=o("GPT2Tokenizer"),zro=o(" or "),YR=a("a"),Wro=o("GPT2TokenizerFast"),Qro=o(" (GPT Neo model)"),Hro=l(),Ig=a("li"),rae=a("strong"),Uro=o("gpt_neox"),Jro=o(" \u2014 "),KR=a("a"),Yro=o("GPTNeoXTokenizerFast"),Kro=o(" (GPT NeoX model)"),Zro=l(),Zn=a("li"),tae=a("strong"),eto=o("gptj"),oto=o(" \u2014 "),ZR=a("a"),rto=o("GPT2Tokenizer"),tto=o(" or "),eP=a("a"),ato=o("GPT2TokenizerFast"),nto=o(" (GPT-J model)"),sto=l(),es=a("li"),aae=a("strong"),lto=o("herbert"),ito=o(" \u2014 "),oP=a("a"),dto=o("HerbertTokenizer"),cto=o(" or "),rP=a("a"),fto=o("HerbertTokenizerFast"),mto=o(" (HerBERT model)"),gto=l(),qg=a("li"),nae=a("strong"),hto=o("hubert"),pto=o(" \u2014 "),tP=a("a"),uto=o("Wav2Vec2CTCTokenizer"),_to=o(" (Hubert model)"),bto=l(),os=a("li"),sae=a("strong"),vto=o("ibert"),Fto=o(" \u2014 "),aP=a("a"),Tto=o("RobertaTokenizer"),Mto=o(" or "),nP=a("a"),Eto=o("RobertaTokenizerFast"),Cto=o(" (I-BERT model)"),wto=l(),rs=a("li"),lae=a("strong"),Ato=o("layoutlm"),yto=o(" \u2014 "),sP=a("a"),Lto=o("LayoutLMTokenizer"),xto=o(" or "),lP=a("a"),$to=o("LayoutLMTokenizerFast"),kto=o(" (LayoutLM model)"),Sto=l(),ts=a("li"),iae=a("strong"),Rto=o("layoutlmv2"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("LayoutLMv2Tokenizer"),Ito=o(" or "),dP=a("a"),qto=o("LayoutLMv2TokenizerFast"),Nto=o(" (LayoutLMv2 model)"),jto=l(),as=a("li"),dae=a("strong"),Dto=o("layoutlmv3"),Gto=o(" \u2014 "),cP=a("a"),Oto=o("LayoutLMv3Tokenizer"),Vto=o(" or "),fP=a("a"),Xto=o("LayoutLMv3TokenizerFast"),zto=o(" (LayoutLMv3 model)"),Wto=l(),ns=a("li"),cae=a("strong"),Qto=o("layoutxlm"),Hto=o(" \u2014 "),mP=a("a"),Uto=o("LayoutXLMTokenizer"),Jto=o(" or "),gP=a("a"),Yto=o("LayoutXLMTokenizerFast"),Kto=o(" (LayoutXLM model)"),Zto=l(),ss=a("li"),fae=a("strong"),eao=o("led"),oao=o(" \u2014 "),hP=a("a"),rao=o("LEDTokenizer"),tao=o(" or "),pP=a("a"),aao=o("LEDTokenizerFast"),nao=o(" (LED model)"),sao=l(),ls=a("li"),mae=a("strong"),lao=o("longformer"),iao=o(" \u2014 "),uP=a("a"),dao=o("LongformerTokenizer"),cao=o(" or "),_P=a("a"),fao=o("LongformerTokenizerFast"),mao=o(" (Longformer model)"),gao=l(),Ng=a("li"),gae=a("strong"),hao=o("luke"),pao=o(" \u2014 "),bP=a("a"),uao=o("LukeTokenizer"),_ao=o(" (LUKE model)"),bao=l(),is=a("li"),hae=a("strong"),vao=o("lxmert"),Fao=o(" \u2014 "),vP=a("a"),Tao=o("LxmertTokenizer"),Mao=o(" or "),FP=a("a"),Eao=o("LxmertTokenizerFast"),Cao=o(" (LXMERT model)"),wao=l(),jg=a("li"),pae=a("strong"),Aao=o("m2m_100"),yao=o(" \u2014 "),TP=a("a"),Lao=o("M2M100Tokenizer"),xao=o(" (M2M100 model)"),$ao=l(),Dg=a("li"),uae=a("strong"),kao=o("marian"),Sao=o(" \u2014 "),MP=a("a"),Rao=o("MarianTokenizer"),Pao=o(" (Marian model)"),Bao=l(),ds=a("li"),_ae=a("strong"),Iao=o("mbart"),qao=o(" \u2014 "),EP=a("a"),Nao=o("MBartTokenizer"),jao=o(" or "),CP=a("a"),Dao=o("MBartTokenizerFast"),Gao=o(" (mBART model)"),Oao=l(),cs=a("li"),bae=a("strong"),Vao=o("mbart50"),Xao=o(" \u2014 "),wP=a("a"),zao=o("MBart50Tokenizer"),Wao=o(" or "),AP=a("a"),Qao=o("MBart50TokenizerFast"),Hao=o(" (mBART-50 model)"),Uao=l(),fs=a("li"),vae=a("strong"),Jao=o("megatron-bert"),Yao=o(" \u2014 "),yP=a("a"),Kao=o("BertTokenizer"),Zao=o(" or "),LP=a("a"),eno=o("BertTokenizerFast"),ono=o(" (MegatronBert model)"),rno=l(),Gg=a("li"),Fae=a("strong"),tno=o("mluke"),ano=o(" \u2014 "),xP=a("a"),nno=o("MLukeTokenizer"),sno=o(" (mLUKE model)"),lno=l(),ms=a("li"),Tae=a("strong"),ino=o("mobilebert"),dno=o(" \u2014 "),$P=a("a"),cno=o("MobileBertTokenizer"),fno=o(" or "),kP=a("a"),mno=o("MobileBertTokenizerFast"),gno=o(" (MobileBERT model)"),hno=l(),gs=a("li"),Mae=a("strong"),pno=o("mpnet"),uno=o(" \u2014 "),SP=a("a"),_no=o("MPNetTokenizer"),bno=o(" or "),RP=a("a"),vno=o("MPNetTokenizerFast"),Fno=o(" (MPNet model)"),Tno=l(),hs=a("li"),Eae=a("strong"),Mno=o("mt5"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("MT5Tokenizer"),wno=o(" or "),BP=a("a"),Ano=o("MT5TokenizerFast"),yno=o(" (mT5 model)"),Lno=l(),ps=a("li"),Cae=a("strong"),xno=o("nystromformer"),$no=o(" \u2014 "),IP=a("a"),kno=o("AlbertTokenizer"),Sno=o(" or "),qP=a("a"),Rno=o("AlbertTokenizerFast"),Pno=o(" (Nystromformer model)"),Bno=l(),us=a("li"),wae=a("strong"),Ino=o("openai-gpt"),qno=o(" \u2014 "),NP=a("a"),Nno=o("OpenAIGPTTokenizer"),jno=o(" or "),jP=a("a"),Dno=o("OpenAIGPTTokenizerFast"),Gno=o(" (OpenAI GPT model)"),Ono=l(),Og=a("li"),Aae=a("strong"),Vno=o("opt"),Xno=o(" \u2014 "),DP=a("a"),zno=o("GPT2Tokenizer"),Wno=o(" (OPT model)"),Qno=l(),_s=a("li"),yae=a("strong"),Hno=o("pegasus"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("PegasusTokenizer"),Yno=o(" or "),OP=a("a"),Kno=o("PegasusTokenizerFast"),Zno=o(" (Pegasus model)"),eso=l(),Vg=a("li"),Lae=a("strong"),oso=o("perceiver"),rso=o(" \u2014 "),VP=a("a"),tso=o("PerceiverTokenizer"),aso=o(" (Perceiver model)"),nso=l(),Xg=a("li"),xae=a("strong"),sso=o("phobert"),lso=o(" \u2014 "),XP=a("a"),iso=o("PhobertTokenizer"),dso=o(" (PhoBERT model)"),cso=l(),zg=a("li"),$ae=a("strong"),fso=o("plbart"),mso=o(" \u2014 "),zP=a("a"),gso=o("PLBartTokenizer"),hso=o(" (PLBart model)"),pso=l(),Wg=a("li"),kae=a("strong"),uso=o("prophetnet"),_so=o(" \u2014 "),WP=a("a"),bso=o("ProphetNetTokenizer"),vso=o(" (ProphetNet model)"),Fso=l(),bs=a("li"),Sae=a("strong"),Tso=o("qdqbert"),Mso=o(" \u2014 "),QP=a("a"),Eso=o("BertTokenizer"),Cso=o(" or "),HP=a("a"),wso=o("BertTokenizerFast"),Aso=o(" (QDQBert model)"),yso=l(),Qg=a("li"),Rae=a("strong"),Lso=o("rag"),xso=o(" \u2014 "),UP=a("a"),$so=o("RagTokenizer"),kso=o(" (RAG model)"),Sso=l(),vs=a("li"),Pae=a("strong"),Rso=o("realm"),Pso=o(" \u2014 "),JP=a("a"),Bso=o("RealmTokenizer"),Iso=o(" or "),YP=a("a"),qso=o("RealmTokenizerFast"),Nso=o(" (Realm model)"),jso=l(),Fs=a("li"),Bae=a("strong"),Dso=o("reformer"),Gso=o(" \u2014 "),KP=a("a"),Oso=o("ReformerTokenizer"),Vso=o(" or "),ZP=a("a"),Xso=o("ReformerTokenizerFast"),zso=o(" (Reformer model)"),Wso=l(),Ts=a("li"),Iae=a("strong"),Qso=o("rembert"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("RemBertTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("RemBertTokenizerFast"),Kso=o(" (RemBERT model)"),Zso=l(),Ms=a("li"),qae=a("strong"),elo=o("retribert"),olo=o(" \u2014 "),rB=a("a"),rlo=o("RetriBertTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("RetriBertTokenizerFast"),nlo=o(" (RetriBERT model)"),slo=l(),Es=a("li"),Nae=a("strong"),llo=o("roberta"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("RobertaTokenizer"),clo=o(" or "),nB=a("a"),flo=o("RobertaTokenizerFast"),mlo=o(" (RoBERTa model)"),glo=l(),Cs=a("li"),jae=a("strong"),hlo=o("roformer"),plo=o(" \u2014 "),sB=a("a"),ulo=o("RoFormerTokenizer"),_lo=o(" or "),lB=a("a"),blo=o("RoFormerTokenizerFast"),vlo=o(" (RoFormer model)"),Flo=l(),Hg=a("li"),Dae=a("strong"),Tlo=o("speech_to_text"),Mlo=o(" \u2014 "),iB=a("a"),Elo=o("Speech2TextTokenizer"),Clo=o(" (Speech2Text model)"),wlo=l(),Ug=a("li"),Gae=a("strong"),Alo=o("speech_to_text_2"),ylo=o(" \u2014 "),dB=a("a"),Llo=o("Speech2Text2Tokenizer"),xlo=o(" (Speech2Text2 model)"),$lo=l(),ws=a("li"),Oae=a("strong"),klo=o("splinter"),Slo=o(" \u2014 "),cB=a("a"),Rlo=o("SplinterTokenizer"),Plo=o(" or "),fB=a("a"),Blo=o("SplinterTokenizerFast"),Ilo=o(" (Splinter model)"),qlo=l(),As=a("li"),Vae=a("strong"),Nlo=o("squeezebert"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("SqueezeBertTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("SqueezeBertTokenizerFast"),Vlo=o(" (SqueezeBERT model)"),Xlo=l(),ys=a("li"),Xae=a("strong"),zlo=o("t5"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("T5Tokenizer"),Hlo=o(" or "),pB=a("a"),Ulo=o("T5TokenizerFast"),Jlo=o(" (T5 model)"),Ylo=l(),Jg=a("li"),zae=a("strong"),Klo=o("tapas"),Zlo=o(" \u2014 "),uB=a("a"),eio=o("TapasTokenizer"),oio=o(" (TAPAS model)"),rio=l(),Yg=a("li"),Wae=a("strong"),tio=o("tapex"),aio=o(" \u2014 "),_B=a("a"),nio=o("TapexTokenizer"),sio=o(" (TAPEX model)"),lio=l(),Kg=a("li"),Qae=a("strong"),iio=o("transfo-xl"),dio=o(" \u2014 "),bB=a("a"),cio=o("TransfoXLTokenizer"),fio=o(" (Transformer-XL model)"),mio=l(),Ls=a("li"),Hae=a("strong"),gio=o("visual_bert"),hio=o(" \u2014 "),vB=a("a"),pio=o("BertTokenizer"),uio=o(" or "),FB=a("a"),_io=o("BertTokenizerFast"),bio=o(" (VisualBert model)"),vio=l(),Zg=a("li"),Uae=a("strong"),Fio=o("wav2vec2"),Tio=o(" \u2014 "),TB=a("a"),Mio=o("Wav2Vec2CTCTokenizer"),Eio=o(" (Wav2Vec2 model)"),Cio=l(),eh=a("li"),Jae=a("strong"),wio=o("wav2vec2-conformer"),Aio=o(" \u2014 "),MB=a("a"),yio=o("Wav2Vec2CTCTokenizer"),Lio=o(" (Wav2Vec2-Conformer model)"),xio=l(),oh=a("li"),Yae=a("strong"),$io=o("wav2vec2_phoneme"),kio=o(" \u2014 "),EB=a("a"),Sio=o("Wav2Vec2PhonemeCTCTokenizer"),Rio=o(" (Wav2Vec2Phoneme model)"),Pio=l(),xs=a("li"),Kae=a("strong"),Bio=o("xglm"),Iio=o(" \u2014 "),CB=a("a"),qio=o("XGLMTokenizer"),Nio=o(" or "),wB=a("a"),jio=o("XGLMTokenizerFast"),Dio=o(" (XGLM model)"),Gio=l(),rh=a("li"),Zae=a("strong"),Oio=o("xlm"),Vio=o(" \u2014 "),AB=a("a"),Xio=o("XLMTokenizer"),zio=o(" (XLM model)"),Wio=l(),th=a("li"),ene=a("strong"),Qio=o("xlm-prophetnet"),Hio=o(" \u2014 "),yB=a("a"),Uio=o("XLMProphetNetTokenizer"),Jio=o(" (XLMProphetNet model)"),Yio=l(),$s=a("li"),one=a("strong"),Kio=o("xlm-roberta"),Zio=o(" \u2014 "),LB=a("a"),edo=o("XLMRobertaTokenizer"),odo=o(" or "),xB=a("a"),rdo=o("XLMRobertaTokenizerFast"),tdo=o(" (XLM-RoBERTa model)"),ado=l(),ks=a("li"),rne=a("strong"),ndo=o("xlm-roberta-xl"),sdo=o(" \u2014 "),$B=a("a"),ldo=o("RobertaTokenizer"),ido=o(" or "),kB=a("a"),ddo=o("RobertaTokenizerFast"),cdo=o(" (XLM-RoBERTa-XL model)"),fdo=l(),Ss=a("li"),tne=a("strong"),mdo=o("xlnet"),gdo=o(" \u2014 "),SB=a("a"),hdo=o("XLNetTokenizer"),pdo=o(" or "),RB=a("a"),udo=o("XLNetTokenizerFast"),_do=o(" (XLNet model)"),bdo=l(),Rs=a("li"),ane=a("strong"),vdo=o("yoso"),Fdo=o(" \u2014 "),PB=a("a"),Tdo=o("AlbertTokenizer"),Mdo=o(" or "),BB=a("a"),Edo=o("AlbertTokenizerFast"),Cdo=o(" (YOSO model)"),wdo=l(),F(ah.$$.fragment),Ado=l(),nh=a("div"),F(D6.$$.fragment),ydo=l(),nne=a("p"),Ldo=o("Register a new tokenizer in this mapping."),lNe=l(),Mi=a("h2"),sh=a("a"),sne=a("span"),F(G6.$$.fragment),xdo=l(),lne=a("span"),$do=o("AutoFeatureExtractor"),iNe=l(),Ao=a("div"),F(O6.$$.fragment),kdo=l(),V6=a("p"),Sdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=a("a"),Rdo=o("AutoFeatureExtractor.from_pretrained()"),Pdo=o(" class method."),Bdo=l(),X6=a("p"),Ido=o("This class cannot be instantiated directly using "),ine=a("code"),qdo=o("__init__()"),Ndo=o(" (throws an error)."),jdo=l(),He=a("div"),F(z6.$$.fragment),Ddo=l(),dne=a("p"),Gdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Odo=l(),ya=a("p"),Vdo=o("The feature extractor class to instantiate is selected based on the "),cne=a("code"),Xdo=o("model_type"),zdo=o(` property of the config object
(either passed as an argument or loaded from `),fne=a("code"),Wdo=o("pretrained_model_name_or_path"),Qdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mne=a("code"),Hdo=o("pretrained_model_name_or_path"),Udo=o(":"),Jdo=l(),Y=a("ul"),lh=a("li"),gne=a("strong"),Ydo=o("beit"),Kdo=o(" \u2014 "),qB=a("a"),Zdo=o("BeitFeatureExtractor"),eco=o(" (BEiT model)"),oco=l(),ih=a("li"),hne=a("strong"),rco=o("clip"),tco=o(" \u2014 "),NB=a("a"),aco=o("CLIPFeatureExtractor"),nco=o(" (CLIP model)"),sco=l(),dh=a("li"),pne=a("strong"),lco=o("convnext"),ico=o(" \u2014 "),jB=a("a"),dco=o("ConvNextFeatureExtractor"),cco=o(" (ConvNext model)"),fco=l(),ch=a("li"),une=a("strong"),mco=o("cvt"),gco=o(" \u2014 "),DB=a("a"),hco=o("ConvNextFeatureExtractor"),pco=o(" (CvT model)"),uco=l(),fh=a("li"),_ne=a("strong"),_co=o("data2vec-audio"),bco=o(" \u2014 "),GB=a("a"),vco=o("Wav2Vec2FeatureExtractor"),Fco=o(" (Data2VecAudio model)"),Tco=l(),mh=a("li"),bne=a("strong"),Mco=o("data2vec-vision"),Eco=o(" \u2014 "),OB=a("a"),Cco=o("BeitFeatureExtractor"),wco=o(" (Data2VecVision model)"),Aco=l(),gh=a("li"),vne=a("strong"),yco=o("deit"),Lco=o(" \u2014 "),VB=a("a"),xco=o("DeiTFeatureExtractor"),$co=o(" (DeiT model)"),kco=l(),hh=a("li"),Fne=a("strong"),Sco=o("detr"),Rco=o(" \u2014 "),XB=a("a"),Pco=o("DetrFeatureExtractor"),Bco=o(" (DETR model)"),Ico=l(),ph=a("li"),Tne=a("strong"),qco=o("dpt"),Nco=o(" \u2014 "),zB=a("a"),jco=o("DPTFeatureExtractor"),Dco=o(" (DPT model)"),Gco=l(),uh=a("li"),Mne=a("strong"),Oco=o("flava"),Vco=o(" \u2014 "),WB=a("a"),Xco=o("FlavaFeatureExtractor"),zco=o(" (Flava model)"),Wco=l(),_h=a("li"),Ene=a("strong"),Qco=o("glpn"),Hco=o(" \u2014 "),QB=a("a"),Uco=o("GLPNFeatureExtractor"),Jco=o(" (GLPN model)"),Yco=l(),bh=a("li"),Cne=a("strong"),Kco=o("hubert"),Zco=o(" \u2014 "),HB=a("a"),efo=o("Wav2Vec2FeatureExtractor"),ofo=o(" (Hubert model)"),rfo=l(),vh=a("li"),wne=a("strong"),tfo=o("imagegpt"),afo=o(" \u2014 "),UB=a("a"),nfo=o("ImageGPTFeatureExtractor"),sfo=o(" (ImageGPT model)"),lfo=l(),Fh=a("li"),Ane=a("strong"),ifo=o("layoutlmv2"),dfo=o(" \u2014 "),JB=a("a"),cfo=o("LayoutLMv2FeatureExtractor"),ffo=o(" (LayoutLMv2 model)"),mfo=l(),Th=a("li"),yne=a("strong"),gfo=o("layoutlmv3"),hfo=o(" \u2014 "),YB=a("a"),pfo=o("LayoutLMv3FeatureExtractor"),ufo=o(" (LayoutLMv3 model)"),_fo=l(),Mh=a("li"),Lne=a("strong"),bfo=o("maskformer"),vfo=o(" \u2014 "),KB=a("a"),Ffo=o("MaskFormerFeatureExtractor"),Tfo=o(" (MaskFormer model)"),Mfo=l(),Eh=a("li"),xne=a("strong"),Efo=o("perceiver"),Cfo=o(" \u2014 "),ZB=a("a"),wfo=o("PerceiverFeatureExtractor"),Afo=o(" (Perceiver model)"),yfo=l(),Ch=a("li"),$ne=a("strong"),Lfo=o("poolformer"),xfo=o(" \u2014 "),eI=a("a"),$fo=o("PoolFormerFeatureExtractor"),kfo=o(" (PoolFormer model)"),Sfo=l(),wh=a("li"),kne=a("strong"),Rfo=o("regnet"),Pfo=o(" \u2014 "),oI=a("a"),Bfo=o("ConvNextFeatureExtractor"),Ifo=o(" (RegNet model)"),qfo=l(),Ah=a("li"),Sne=a("strong"),Nfo=o("resnet"),jfo=o(" \u2014 "),rI=a("a"),Dfo=o("ConvNextFeatureExtractor"),Gfo=o(" (ResNet model)"),Ofo=l(),yh=a("li"),Rne=a("strong"),Vfo=o("segformer"),Xfo=o(" \u2014 "),tI=a("a"),zfo=o("SegformerFeatureExtractor"),Wfo=o(" (SegFormer model)"),Qfo=l(),Lh=a("li"),Pne=a("strong"),Hfo=o("speech_to_text"),Ufo=o(" \u2014 "),aI=a("a"),Jfo=o("Speech2TextFeatureExtractor"),Yfo=o(" (Speech2Text model)"),Kfo=l(),xh=a("li"),Bne=a("strong"),Zfo=o("swin"),emo=o(" \u2014 "),nI=a("a"),omo=o("ViTFeatureExtractor"),rmo=o(" (Swin model)"),tmo=l(),$h=a("li"),Ine=a("strong"),amo=o("van"),nmo=o(" \u2014 "),sI=a("a"),smo=o("ConvNextFeatureExtractor"),lmo=o(" (VAN model)"),imo=l(),kh=a("li"),qne=a("strong"),dmo=o("vit"),cmo=o(" \u2014 "),lI=a("a"),fmo=o("ViTFeatureExtractor"),mmo=o(" (ViT model)"),gmo=l(),Sh=a("li"),Nne=a("strong"),hmo=o("vit_mae"),pmo=o(" \u2014 "),iI=a("a"),umo=o("ViTFeatureExtractor"),_mo=o(" (ViTMAE model)"),bmo=l(),Rh=a("li"),jne=a("strong"),vmo=o("wav2vec2"),Fmo=o(" \u2014 "),dI=a("a"),Tmo=o("Wav2Vec2FeatureExtractor"),Mmo=o(" (Wav2Vec2 model)"),Emo=l(),Ph=a("li"),Dne=a("strong"),Cmo=o("wav2vec2-conformer"),wmo=o(" \u2014 "),cI=a("a"),Amo=o("Wav2Vec2FeatureExtractor"),ymo=o(" (Wav2Vec2-Conformer model)"),Lmo=l(),Bh=a("li"),Gne=a("strong"),xmo=o("yolos"),$mo=o(" \u2014 "),fI=a("a"),kmo=o("YolosFeatureExtractor"),Smo=o(" (YOLOS model)"),Rmo=l(),F(Ih.$$.fragment),Pmo=l(),F(qh.$$.fragment),Bmo=l(),Nh=a("div"),F(W6.$$.fragment),Imo=l(),One=a("p"),qmo=o("Register a new feature extractor for this class."),dNe=l(),Ei=a("h2"),jh=a("a"),Vne=a("span"),F(Q6.$$.fragment),Nmo=l(),Xne=a("span"),jmo=o("AutoProcessor"),cNe=l(),yo=a("div"),F(H6.$$.fragment),Dmo=l(),U6=a("p"),Gmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mI=a("a"),Omo=o("AutoProcessor.from_pretrained()"),Vmo=o(" class method."),Xmo=l(),J6=a("p"),zmo=o("This class cannot be instantiated directly using "),zne=a("code"),Wmo=o("__init__()"),Qmo=o(" (throws an error)."),Hmo=l(),Ue=a("div"),F(Y6.$$.fragment),Umo=l(),Wne=a("p"),Jmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ymo=l(),Ci=a("p"),Kmo=o("The processor class to instantiate is selected based on the "),Qne=a("code"),Zmo=o("model_type"),ego=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),ogo=o("pretrained_model_name_or_path"),rgo=o(" if possible):"),tgo=l(),he=a("ul"),Dh=a("li"),Une=a("strong"),ago=o("clip"),ngo=o(" \u2014 "),gI=a("a"),sgo=o("CLIPProcessor"),lgo=o(" (CLIP model)"),igo=l(),Gh=a("li"),Jne=a("strong"),dgo=o("flava"),cgo=o(" \u2014 "),Yne=a("code"),fgo=o("FLAVAProcessor"),mgo=o(" (Flava model)"),ggo=l(),Oh=a("li"),Kne=a("strong"),hgo=o("layoutlmv2"),pgo=o(" \u2014 "),hI=a("a"),ugo=o("LayoutLMv2Processor"),_go=o(" (LayoutLMv2 model)"),bgo=l(),Vh=a("li"),Zne=a("strong"),vgo=o("layoutlmv3"),Fgo=o(" \u2014 "),pI=a("a"),Tgo=o("LayoutLMv3Processor"),Mgo=o(" (LayoutLMv3 model)"),Ego=l(),Xh=a("li"),ese=a("strong"),Cgo=o("layoutxlm"),wgo=o(" \u2014 "),uI=a("a"),Ago=o("LayoutXLMProcessor"),ygo=o(" (LayoutXLM model)"),Lgo=l(),zh=a("li"),ose=a("strong"),xgo=o("sew"),$go=o(" \u2014 "),_I=a("a"),kgo=o("Wav2Vec2Processor"),Sgo=o(" (SEW model)"),Rgo=l(),Wh=a("li"),rse=a("strong"),Pgo=o("sew-d"),Bgo=o(" \u2014 "),bI=a("a"),Igo=o("Wav2Vec2Processor"),qgo=o(" (SEW-D model)"),Ngo=l(),Qh=a("li"),tse=a("strong"),jgo=o("speech_to_text"),Dgo=o(" \u2014 "),vI=a("a"),Ggo=o("Speech2TextProcessor"),Ogo=o(" (Speech2Text model)"),Vgo=l(),Hh=a("li"),ase=a("strong"),Xgo=o("speech_to_text_2"),zgo=o(" \u2014 "),FI=a("a"),Wgo=o("Speech2Text2Processor"),Qgo=o(" (Speech2Text2 model)"),Hgo=l(),Uh=a("li"),nse=a("strong"),Ugo=o("trocr"),Jgo=o(" \u2014 "),TI=a("a"),Ygo=o("TrOCRProcessor"),Kgo=o(" (TrOCR model)"),Zgo=l(),Jh=a("li"),sse=a("strong"),eho=o("unispeech"),oho=o(" \u2014 "),MI=a("a"),rho=o("Wav2Vec2Processor"),tho=o(" (UniSpeech model)"),aho=l(),Yh=a("li"),lse=a("strong"),nho=o("unispeech-sat"),sho=o(" \u2014 "),EI=a("a"),lho=o("Wav2Vec2Processor"),iho=o(" (UniSpeechSat model)"),dho=l(),Kh=a("li"),ise=a("strong"),cho=o("vilt"),fho=o(" \u2014 "),CI=a("a"),mho=o("ViltProcessor"),gho=o(" (ViLT model)"),hho=l(),Zh=a("li"),dse=a("strong"),pho=o("vision-text-dual-encoder"),uho=o(" \u2014 "),wI=a("a"),_ho=o("VisionTextDualEncoderProcessor"),bho=o(" (VisionTextDualEncoder model)"),vho=l(),ep=a("li"),cse=a("strong"),Fho=o("wav2vec2"),Tho=o(" \u2014 "),AI=a("a"),Mho=o("Wav2Vec2Processor"),Eho=o(" (Wav2Vec2 model)"),Cho=l(),op=a("li"),fse=a("strong"),who=o("wav2vec2-conformer"),Aho=o(" \u2014 "),yI=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (Wav2Vec2-Conformer model)"),xho=l(),rp=a("li"),mse=a("strong"),$ho=o("wavlm"),kho=o(" \u2014 "),LI=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (WavLM model)"),Pho=l(),F(tp.$$.fragment),Bho=l(),F(ap.$$.fragment),Iho=l(),np=a("div"),F(K6.$$.fragment),qho=l(),gse=a("p"),Nho=o("Register a new processor for this class."),fNe=l(),wi=a("h2"),sp=a("a"),hse=a("span"),F(Z6.$$.fragment),jho=l(),pse=a("span"),Dho=o("AutoModel"),mNe=l(),Lo=a("div"),F(ey.$$.fragment),Gho=l(),Ai=a("p"),Oho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xI=a("a"),Vho=o("from_pretrained()"),Xho=o(" class method or the "),$I=a("a"),zho=o("from_config()"),Who=o(` class
method.`),Qho=l(),oy=a("p"),Hho=o("This class cannot be instantiated directly using "),use=a("code"),Uho=o("__init__()"),Jho=o(" (throws an error)."),Yho=l(),tt=a("div"),F(ry.$$.fragment),Kho=l(),_se=a("p"),Zho=o("Instantiates one of the base model classes of the library from a configuration."),epo=l(),yi=a("p"),opo=o(`Note:
Loading a model from its configuration file does `),bse=a("strong"),rpo=o("not"),tpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=a("a"),apo=o("from_pretrained()"),npo=o(" to load the model weights."),spo=l(),F(lp.$$.fragment),lpo=l(),Je=a("div"),F(ty.$$.fragment),ipo=l(),vse=a("p"),dpo=o("Instantiate one of the base model classes of the library from a pretrained model."),cpo=l(),La=a("p"),fpo=o("The model class to instantiate is selected based on the "),Fse=a("code"),mpo=o("model_type"),gpo=o(` property of the config object (either
passed as an argument or loaded from `),Tse=a("code"),hpo=o("pretrained_model_name_or_path"),ppo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=a("code"),upo=o("pretrained_model_name_or_path"),_po=o(":"),bpo=l(),x=a("ul"),ip=a("li"),Ese=a("strong"),vpo=o("albert"),Fpo=o(" \u2014 "),SI=a("a"),Tpo=o("AlbertModel"),Mpo=o(" (ALBERT model)"),Epo=l(),dp=a("li"),Cse=a("strong"),Cpo=o("bart"),wpo=o(" \u2014 "),RI=a("a"),Apo=o("BartModel"),ypo=o(" (BART model)"),Lpo=l(),cp=a("li"),wse=a("strong"),xpo=o("beit"),$po=o(" \u2014 "),PI=a("a"),kpo=o("BeitModel"),Spo=o(" (BEiT model)"),Rpo=l(),fp=a("li"),Ase=a("strong"),Ppo=o("bert"),Bpo=o(" \u2014 "),BI=a("a"),Ipo=o("BertModel"),qpo=o(" (BERT model)"),Npo=l(),mp=a("li"),yse=a("strong"),jpo=o("bert-generation"),Dpo=o(" \u2014 "),II=a("a"),Gpo=o("BertGenerationEncoder"),Opo=o(" (Bert Generation model)"),Vpo=l(),gp=a("li"),Lse=a("strong"),Xpo=o("big_bird"),zpo=o(" \u2014 "),qI=a("a"),Wpo=o("BigBirdModel"),Qpo=o(" (BigBird model)"),Hpo=l(),hp=a("li"),xse=a("strong"),Upo=o("bigbird_pegasus"),Jpo=o(" \u2014 "),NI=a("a"),Ypo=o("BigBirdPegasusModel"),Kpo=o(" (BigBirdPegasus model)"),Zpo=l(),pp=a("li"),$se=a("strong"),euo=o("blenderbot"),ouo=o(" \u2014 "),jI=a("a"),ruo=o("BlenderbotModel"),tuo=o(" (Blenderbot model)"),auo=l(),up=a("li"),kse=a("strong"),nuo=o("blenderbot-small"),suo=o(" \u2014 "),DI=a("a"),luo=o("BlenderbotSmallModel"),iuo=o(" (BlenderbotSmall model)"),duo=l(),_p=a("li"),Sse=a("strong"),cuo=o("camembert"),fuo=o(" \u2014 "),GI=a("a"),muo=o("CamembertModel"),guo=o(" (CamemBERT model)"),huo=l(),bp=a("li"),Rse=a("strong"),puo=o("canine"),uuo=o(" \u2014 "),OI=a("a"),_uo=o("CanineModel"),buo=o(" (Canine model)"),vuo=l(),vp=a("li"),Pse=a("strong"),Fuo=o("clip"),Tuo=o(" \u2014 "),VI=a("a"),Muo=o("CLIPModel"),Euo=o(" (CLIP model)"),Cuo=l(),Fp=a("li"),Bse=a("strong"),wuo=o("convbert"),Auo=o(" \u2014 "),XI=a("a"),yuo=o("ConvBertModel"),Luo=o(" (ConvBERT model)"),xuo=l(),Tp=a("li"),Ise=a("strong"),$uo=o("convnext"),kuo=o(" \u2014 "),zI=a("a"),Suo=o("ConvNextModel"),Ruo=o(" (ConvNext model)"),Puo=l(),Mp=a("li"),qse=a("strong"),Buo=o("ctrl"),Iuo=o(" \u2014 "),WI=a("a"),quo=o("CTRLModel"),Nuo=o(" (CTRL model)"),juo=l(),Ep=a("li"),Nse=a("strong"),Duo=o("cvt"),Guo=o(" \u2014 "),QI=a("a"),Ouo=o("CvtModel"),Vuo=o(" (CvT model)"),Xuo=l(),Cp=a("li"),jse=a("strong"),zuo=o("data2vec-audio"),Wuo=o(" \u2014 "),HI=a("a"),Quo=o("Data2VecAudioModel"),Huo=o(" (Data2VecAudio model)"),Uuo=l(),wp=a("li"),Dse=a("strong"),Juo=o("data2vec-text"),Yuo=o(" \u2014 "),UI=a("a"),Kuo=o("Data2VecTextModel"),Zuo=o(" (Data2VecText model)"),e_o=l(),Ap=a("li"),Gse=a("strong"),o_o=o("data2vec-vision"),r_o=o(" \u2014 "),JI=a("a"),t_o=o("Data2VecVisionModel"),a_o=o(" (Data2VecVision model)"),n_o=l(),yp=a("li"),Ose=a("strong"),s_o=o("deberta"),l_o=o(" \u2014 "),YI=a("a"),i_o=o("DebertaModel"),d_o=o(" (DeBERTa model)"),c_o=l(),Lp=a("li"),Vse=a("strong"),f_o=o("deberta-v2"),m_o=o(" \u2014 "),KI=a("a"),g_o=o("DebertaV2Model"),h_o=o(" (DeBERTa-v2 model)"),p_o=l(),xp=a("li"),Xse=a("strong"),u_o=o("decision_transformer"),__o=o(" \u2014 "),ZI=a("a"),b_o=o("DecisionTransformerModel"),v_o=o(" (Decision Transformer model)"),F_o=l(),$p=a("li"),zse=a("strong"),T_o=o("deit"),M_o=o(" \u2014 "),eq=a("a"),E_o=o("DeiTModel"),C_o=o(" (DeiT model)"),w_o=l(),kp=a("li"),Wse=a("strong"),A_o=o("detr"),y_o=o(" \u2014 "),oq=a("a"),L_o=o("DetrModel"),x_o=o(" (DETR model)"),$_o=l(),Sp=a("li"),Qse=a("strong"),k_o=o("distilbert"),S_o=o(" \u2014 "),rq=a("a"),R_o=o("DistilBertModel"),P_o=o(" (DistilBERT model)"),B_o=l(),Rp=a("li"),Hse=a("strong"),I_o=o("dpr"),q_o=o(" \u2014 "),tq=a("a"),N_o=o("DPRQuestionEncoder"),j_o=o(" (DPR model)"),D_o=l(),Pp=a("li"),Use=a("strong"),G_o=o("dpt"),O_o=o(" \u2014 "),aq=a("a"),V_o=o("DPTModel"),X_o=o(" (DPT model)"),z_o=l(),Bp=a("li"),Jse=a("strong"),W_o=o("electra"),Q_o=o(" \u2014 "),nq=a("a"),H_o=o("ElectraModel"),U_o=o(" (ELECTRA model)"),J_o=l(),Ip=a("li"),Yse=a("strong"),Y_o=o("flaubert"),K_o=o(" \u2014 "),sq=a("a"),Z_o=o("FlaubertModel"),e1o=o(" (FlauBERT model)"),o1o=l(),qp=a("li"),Kse=a("strong"),r1o=o("flava"),t1o=o(" \u2014 "),lq=a("a"),a1o=o("FlavaModel"),n1o=o(" (Flava model)"),s1o=l(),Np=a("li"),Zse=a("strong"),l1o=o("fnet"),i1o=o(" \u2014 "),iq=a("a"),d1o=o("FNetModel"),c1o=o(" (FNet model)"),f1o=l(),jp=a("li"),ele=a("strong"),m1o=o("fsmt"),g1o=o(" \u2014 "),dq=a("a"),h1o=o("FSMTModel"),p1o=o(" (FairSeq Machine-Translation model)"),u1o=l(),Ps=a("li"),ole=a("strong"),_1o=o("funnel"),b1o=o(" \u2014 "),cq=a("a"),v1o=o("FunnelModel"),F1o=o(" or "),fq=a("a"),T1o=o("FunnelBaseModel"),M1o=o(" (Funnel Transformer model)"),E1o=l(),Dp=a("li"),rle=a("strong"),C1o=o("glpn"),w1o=o(" \u2014 "),mq=a("a"),A1o=o("GLPNModel"),y1o=o(" (GLPN model)"),L1o=l(),Gp=a("li"),tle=a("strong"),x1o=o("gpt2"),$1o=o(" \u2014 "),gq=a("a"),k1o=o("GPT2Model"),S1o=o(" (OpenAI GPT-2 model)"),R1o=l(),Op=a("li"),ale=a("strong"),P1o=o("gpt_neo"),B1o=o(" \u2014 "),hq=a("a"),I1o=o("GPTNeoModel"),q1o=o(" (GPT Neo model)"),N1o=l(),Vp=a("li"),nle=a("strong"),j1o=o("gpt_neox"),D1o=o(" \u2014 "),pq=a("a"),G1o=o("GPTNeoXModel"),O1o=o(" (GPT NeoX model)"),V1o=l(),Xp=a("li"),sle=a("strong"),X1o=o("gptj"),z1o=o(" \u2014 "),uq=a("a"),W1o=o("GPTJModel"),Q1o=o(" (GPT-J model)"),H1o=l(),zp=a("li"),lle=a("strong"),U1o=o("hubert"),J1o=o(" \u2014 "),_q=a("a"),Y1o=o("HubertModel"),K1o=o(" (Hubert model)"),Z1o=l(),Wp=a("li"),ile=a("strong"),e2o=o("ibert"),o2o=o(" \u2014 "),bq=a("a"),r2o=o("IBertModel"),t2o=o(" (I-BERT model)"),a2o=l(),Qp=a("li"),dle=a("strong"),n2o=o("imagegpt"),s2o=o(" \u2014 "),vq=a("a"),l2o=o("ImageGPTModel"),i2o=o(" (ImageGPT model)"),d2o=l(),Hp=a("li"),cle=a("strong"),c2o=o("layoutlm"),f2o=o(" \u2014 "),Fq=a("a"),m2o=o("LayoutLMModel"),g2o=o(" (LayoutLM model)"),h2o=l(),Up=a("li"),fle=a("strong"),p2o=o("layoutlmv2"),u2o=o(" \u2014 "),Tq=a("a"),_2o=o("LayoutLMv2Model"),b2o=o(" (LayoutLMv2 model)"),v2o=l(),Jp=a("li"),mle=a("strong"),F2o=o("layoutlmv3"),T2o=o(" \u2014 "),Mq=a("a"),M2o=o("LayoutLMv3Model"),E2o=o(" (LayoutLMv3 model)"),C2o=l(),Yp=a("li"),gle=a("strong"),w2o=o("led"),A2o=o(" \u2014 "),Eq=a("a"),y2o=o("LEDModel"),L2o=o(" (LED model)"),x2o=l(),Kp=a("li"),hle=a("strong"),$2o=o("longformer"),k2o=o(" \u2014 "),Cq=a("a"),S2o=o("LongformerModel"),R2o=o(" (Longformer model)"),P2o=l(),Zp=a("li"),ple=a("strong"),B2o=o("luke"),I2o=o(" \u2014 "),wq=a("a"),q2o=o("LukeModel"),N2o=o(" (LUKE model)"),j2o=l(),eu=a("li"),ule=a("strong"),D2o=o("lxmert"),G2o=o(" \u2014 "),Aq=a("a"),O2o=o("LxmertModel"),V2o=o(" (LXMERT model)"),X2o=l(),ou=a("li"),_le=a("strong"),z2o=o("m2m_100"),W2o=o(" \u2014 "),yq=a("a"),Q2o=o("M2M100Model"),H2o=o(" (M2M100 model)"),U2o=l(),ru=a("li"),ble=a("strong"),J2o=o("marian"),Y2o=o(" \u2014 "),Lq=a("a"),K2o=o("MarianModel"),Z2o=o(" (Marian model)"),ebo=l(),tu=a("li"),vle=a("strong"),obo=o("maskformer"),rbo=o(" \u2014 "),xq=a("a"),tbo=o("MaskFormerModel"),abo=o(" (MaskFormer model)"),nbo=l(),au=a("li"),Fle=a("strong"),sbo=o("mbart"),lbo=o(" \u2014 "),$q=a("a"),ibo=o("MBartModel"),dbo=o(" (mBART model)"),cbo=l(),nu=a("li"),Tle=a("strong"),fbo=o("megatron-bert"),mbo=o(" \u2014 "),kq=a("a"),gbo=o("MegatronBertModel"),hbo=o(" (MegatronBert model)"),pbo=l(),su=a("li"),Mle=a("strong"),ubo=o("mobilebert"),_bo=o(" \u2014 "),Sq=a("a"),bbo=o("MobileBertModel"),vbo=o(" (MobileBERT model)"),Fbo=l(),lu=a("li"),Ele=a("strong"),Tbo=o("mpnet"),Mbo=o(" \u2014 "),Rq=a("a"),Ebo=o("MPNetModel"),Cbo=o(" (MPNet model)"),wbo=l(),iu=a("li"),Cle=a("strong"),Abo=o("mt5"),ybo=o(" \u2014 "),Pq=a("a"),Lbo=o("MT5Model"),xbo=o(" (mT5 model)"),$bo=l(),du=a("li"),wle=a("strong"),kbo=o("nystromformer"),Sbo=o(" \u2014 "),Bq=a("a"),Rbo=o("NystromformerModel"),Pbo=o(" (Nystromformer model)"),Bbo=l(),cu=a("li"),Ale=a("strong"),Ibo=o("openai-gpt"),qbo=o(" \u2014 "),Iq=a("a"),Nbo=o("OpenAIGPTModel"),jbo=o(" (OpenAI GPT model)"),Dbo=l(),fu=a("li"),yle=a("strong"),Gbo=o("opt"),Obo=o(" \u2014 "),qq=a("a"),Vbo=o("OPTModel"),Xbo=o(" (OPT model)"),zbo=l(),mu=a("li"),Lle=a("strong"),Wbo=o("pegasus"),Qbo=o(" \u2014 "),Nq=a("a"),Hbo=o("PegasusModel"),Ubo=o(" (Pegasus model)"),Jbo=l(),gu=a("li"),xle=a("strong"),Ybo=o("perceiver"),Kbo=o(" \u2014 "),jq=a("a"),Zbo=o("PerceiverModel"),evo=o(" (Perceiver model)"),ovo=l(),hu=a("li"),$le=a("strong"),rvo=o("plbart"),tvo=o(" \u2014 "),Dq=a("a"),avo=o("PLBartModel"),nvo=o(" (PLBart model)"),svo=l(),pu=a("li"),kle=a("strong"),lvo=o("poolformer"),ivo=o(" \u2014 "),Gq=a("a"),dvo=o("PoolFormerModel"),cvo=o(" (PoolFormer model)"),fvo=l(),uu=a("li"),Sle=a("strong"),mvo=o("prophetnet"),gvo=o(" \u2014 "),Oq=a("a"),hvo=o("ProphetNetModel"),pvo=o(" (ProphetNet model)"),uvo=l(),_u=a("li"),Rle=a("strong"),_vo=o("qdqbert"),bvo=o(" \u2014 "),Vq=a("a"),vvo=o("QDQBertModel"),Fvo=o(" (QDQBert model)"),Tvo=l(),bu=a("li"),Ple=a("strong"),Mvo=o("reformer"),Evo=o(" \u2014 "),Xq=a("a"),Cvo=o("ReformerModel"),wvo=o(" (Reformer model)"),Avo=l(),vu=a("li"),Ble=a("strong"),yvo=o("regnet"),Lvo=o(" \u2014 "),zq=a("a"),xvo=o("RegNetModel"),$vo=o(" (RegNet model)"),kvo=l(),Fu=a("li"),Ile=a("strong"),Svo=o("rembert"),Rvo=o(" \u2014 "),Wq=a("a"),Pvo=o("RemBertModel"),Bvo=o(" (RemBERT model)"),Ivo=l(),Tu=a("li"),qle=a("strong"),qvo=o("resnet"),Nvo=o(" \u2014 "),Qq=a("a"),jvo=o("ResNetModel"),Dvo=o(" (ResNet model)"),Gvo=l(),Mu=a("li"),Nle=a("strong"),Ovo=o("retribert"),Vvo=o(" \u2014 "),Hq=a("a"),Xvo=o("RetriBertModel"),zvo=o(" (RetriBERT model)"),Wvo=l(),Eu=a("li"),jle=a("strong"),Qvo=o("roberta"),Hvo=o(" \u2014 "),Uq=a("a"),Uvo=o("RobertaModel"),Jvo=o(" (RoBERTa model)"),Yvo=l(),Cu=a("li"),Dle=a("strong"),Kvo=o("roformer"),Zvo=o(" \u2014 "),Jq=a("a"),e3o=o("RoFormerModel"),o3o=o(" (RoFormer model)"),r3o=l(),wu=a("li"),Gle=a("strong"),t3o=o("segformer"),a3o=o(" \u2014 "),Yq=a("a"),n3o=o("SegformerModel"),s3o=o(" (SegFormer model)"),l3o=l(),Au=a("li"),Ole=a("strong"),i3o=o("sew"),d3o=o(" \u2014 "),Kq=a("a"),c3o=o("SEWModel"),f3o=o(" (SEW model)"),m3o=l(),yu=a("li"),Vle=a("strong"),g3o=o("sew-d"),h3o=o(" \u2014 "),Zq=a("a"),p3o=o("SEWDModel"),u3o=o(" (SEW-D model)"),_3o=l(),Lu=a("li"),Xle=a("strong"),b3o=o("speech_to_text"),v3o=o(" \u2014 "),eN=a("a"),F3o=o("Speech2TextModel"),T3o=o(" (Speech2Text model)"),M3o=l(),xu=a("li"),zle=a("strong"),E3o=o("splinter"),C3o=o(" \u2014 "),oN=a("a"),w3o=o("SplinterModel"),A3o=o(" (Splinter model)"),y3o=l(),$u=a("li"),Wle=a("strong"),L3o=o("squeezebert"),x3o=o(" \u2014 "),rN=a("a"),$3o=o("SqueezeBertModel"),k3o=o(" (SqueezeBERT model)"),S3o=l(),ku=a("li"),Qle=a("strong"),R3o=o("swin"),P3o=o(" \u2014 "),tN=a("a"),B3o=o("SwinModel"),I3o=o(" (Swin model)"),q3o=l(),Su=a("li"),Hle=a("strong"),N3o=o("t5"),j3o=o(" \u2014 "),aN=a("a"),D3o=o("T5Model"),G3o=o(" (T5 model)"),O3o=l(),Ru=a("li"),Ule=a("strong"),V3o=o("tapas"),X3o=o(" \u2014 "),nN=a("a"),z3o=o("TapasModel"),W3o=o(" (TAPAS model)"),Q3o=l(),Pu=a("li"),Jle=a("strong"),H3o=o("trajectory_transformer"),U3o=o(" \u2014 "),sN=a("a"),J3o=o("TrajectoryTransformerModel"),Y3o=o(" (Trajectory Transformer model)"),K3o=l(),Bu=a("li"),Yle=a("strong"),Z3o=o("transfo-xl"),eFo=o(" \u2014 "),lN=a("a"),oFo=o("TransfoXLModel"),rFo=o(" (Transformer-XL model)"),tFo=l(),Iu=a("li"),Kle=a("strong"),aFo=o("unispeech"),nFo=o(" \u2014 "),iN=a("a"),sFo=o("UniSpeechModel"),lFo=o(" (UniSpeech model)"),iFo=l(),qu=a("li"),Zle=a("strong"),dFo=o("unispeech-sat"),cFo=o(" \u2014 "),dN=a("a"),fFo=o("UniSpeechSatModel"),mFo=o(" (UniSpeechSat model)"),gFo=l(),Nu=a("li"),eie=a("strong"),hFo=o("van"),pFo=o(" \u2014 "),cN=a("a"),uFo=o("VanModel"),_Fo=o(" (VAN model)"),bFo=l(),ju=a("li"),oie=a("strong"),vFo=o("vilt"),FFo=o(" \u2014 "),fN=a("a"),TFo=o("ViltModel"),MFo=o(" (ViLT model)"),EFo=l(),Du=a("li"),rie=a("strong"),CFo=o("vision-text-dual-encoder"),wFo=o(" \u2014 "),mN=a("a"),AFo=o("VisionTextDualEncoderModel"),yFo=o(" (VisionTextDualEncoder model)"),LFo=l(),Gu=a("li"),tie=a("strong"),xFo=o("visual_bert"),$Fo=o(" \u2014 "),gN=a("a"),kFo=o("VisualBertModel"),SFo=o(" (VisualBert model)"),RFo=l(),Ou=a("li"),aie=a("strong"),PFo=o("vit"),BFo=o(" \u2014 "),hN=a("a"),IFo=o("ViTModel"),qFo=o(" (ViT model)"),NFo=l(),Vu=a("li"),nie=a("strong"),jFo=o("vit_mae"),DFo=o(" \u2014 "),pN=a("a"),GFo=o("ViTMAEModel"),OFo=o(" (ViTMAE model)"),VFo=l(),Xu=a("li"),sie=a("strong"),XFo=o("wav2vec2"),zFo=o(" \u2014 "),uN=a("a"),WFo=o("Wav2Vec2Model"),QFo=o(" (Wav2Vec2 model)"),HFo=l(),zu=a("li"),lie=a("strong"),UFo=o("wav2vec2-conformer"),JFo=o(" \u2014 "),_N=a("a"),YFo=o("Wav2Vec2ConformerModel"),KFo=o(" (Wav2Vec2-Conformer model)"),ZFo=l(),Wu=a("li"),iie=a("strong"),eTo=o("wavlm"),oTo=o(" \u2014 "),bN=a("a"),rTo=o("WavLMModel"),tTo=o(" (WavLM model)"),aTo=l(),Qu=a("li"),die=a("strong"),nTo=o("xglm"),sTo=o(" \u2014 "),vN=a("a"),lTo=o("XGLMModel"),iTo=o(" (XGLM model)"),dTo=l(),Hu=a("li"),cie=a("strong"),cTo=o("xlm"),fTo=o(" \u2014 "),FN=a("a"),mTo=o("XLMModel"),gTo=o(" (XLM model)"),hTo=l(),Uu=a("li"),fie=a("strong"),pTo=o("xlm-prophetnet"),uTo=o(" \u2014 "),TN=a("a"),_To=o("XLMProphetNetModel"),bTo=o(" (XLMProphetNet model)"),vTo=l(),Ju=a("li"),mie=a("strong"),FTo=o("xlm-roberta"),TTo=o(" \u2014 "),MN=a("a"),MTo=o("XLMRobertaModel"),ETo=o(" (XLM-RoBERTa model)"),CTo=l(),Yu=a("li"),gie=a("strong"),wTo=o("xlm-roberta-xl"),ATo=o(" \u2014 "),EN=a("a"),yTo=o("XLMRobertaXLModel"),LTo=o(" (XLM-RoBERTa-XL model)"),xTo=l(),Ku=a("li"),hie=a("strong"),$To=o("xlnet"),kTo=o(" \u2014 "),CN=a("a"),STo=o("XLNetModel"),RTo=o(" (XLNet model)"),PTo=l(),Zu=a("li"),pie=a("strong"),BTo=o("yolos"),ITo=o(" \u2014 "),wN=a("a"),qTo=o("YolosModel"),NTo=o(" (YOLOS model)"),jTo=l(),e_=a("li"),uie=a("strong"),DTo=o("yoso"),GTo=o(" \u2014 "),AN=a("a"),OTo=o("YosoModel"),VTo=o(" (YOSO model)"),XTo=l(),o_=a("p"),zTo=o("The model is set in evaluation mode by default using "),_ie=a("code"),WTo=o("model.eval()"),QTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=a("code"),HTo=o("model.train()"),UTo=l(),F(r_.$$.fragment),gNe=l(),Li=a("h2"),t_=a("a"),vie=a("span"),F(ay.$$.fragment),JTo=l(),Fie=a("span"),YTo=o("AutoModelForPreTraining"),hNe=l(),xo=a("div"),F(ny.$$.fragment),KTo=l(),xi=a("p"),ZTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yN=a("a"),e7o=o("from_pretrained()"),o7o=o(" class method or the "),LN=a("a"),r7o=o("from_config()"),t7o=o(` class
method.`),a7o=l(),sy=a("p"),n7o=o("This class cannot be instantiated directly using "),Tie=a("code"),s7o=o("__init__()"),l7o=o(" (throws an error)."),i7o=l(),at=a("div"),F(ly.$$.fragment),d7o=l(),Mie=a("p"),c7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f7o=l(),$i=a("p"),m7o=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),g7o=o("not"),h7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=a("a"),p7o=o("from_pretrained()"),u7o=o(" to load the model weights."),_7o=l(),F(a_.$$.fragment),b7o=l(),Ye=a("div"),F(iy.$$.fragment),v7o=l(),Cie=a("p"),F7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T7o=l(),xa=a("p"),M7o=o("The model class to instantiate is selected based on the "),wie=a("code"),E7o=o("model_type"),C7o=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),w7o=o("pretrained_model_name_or_path"),A7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),y7o=o("pretrained_model_name_or_path"),L7o=o(":"),x7o=l(),G=a("ul"),n_=a("li"),Lie=a("strong"),$7o=o("albert"),k7o=o(" \u2014 "),$N=a("a"),S7o=o("AlbertForPreTraining"),R7o=o(" (ALBERT model)"),P7o=l(),s_=a("li"),xie=a("strong"),B7o=o("bart"),I7o=o(" \u2014 "),kN=a("a"),q7o=o("BartForConditionalGeneration"),N7o=o(" (BART model)"),j7o=l(),l_=a("li"),$ie=a("strong"),D7o=o("bert"),G7o=o(" \u2014 "),SN=a("a"),O7o=o("BertForPreTraining"),V7o=o(" (BERT model)"),X7o=l(),i_=a("li"),kie=a("strong"),z7o=o("big_bird"),W7o=o(" \u2014 "),RN=a("a"),Q7o=o("BigBirdForPreTraining"),H7o=o(" (BigBird model)"),U7o=l(),d_=a("li"),Sie=a("strong"),J7o=o("camembert"),Y7o=o(" \u2014 "),PN=a("a"),K7o=o("CamembertForMaskedLM"),Z7o=o(" (CamemBERT model)"),eMo=l(),c_=a("li"),Rie=a("strong"),oMo=o("ctrl"),rMo=o(" \u2014 "),BN=a("a"),tMo=o("CTRLLMHeadModel"),aMo=o(" (CTRL model)"),nMo=l(),f_=a("li"),Pie=a("strong"),sMo=o("data2vec-text"),lMo=o(" \u2014 "),IN=a("a"),iMo=o("Data2VecTextForMaskedLM"),dMo=o(" (Data2VecText model)"),cMo=l(),m_=a("li"),Bie=a("strong"),fMo=o("deberta"),mMo=o(" \u2014 "),qN=a("a"),gMo=o("DebertaForMaskedLM"),hMo=o(" (DeBERTa model)"),pMo=l(),g_=a("li"),Iie=a("strong"),uMo=o("deberta-v2"),_Mo=o(" \u2014 "),NN=a("a"),bMo=o("DebertaV2ForMaskedLM"),vMo=o(" (DeBERTa-v2 model)"),FMo=l(),h_=a("li"),qie=a("strong"),TMo=o("distilbert"),MMo=o(" \u2014 "),jN=a("a"),EMo=o("DistilBertForMaskedLM"),CMo=o(" (DistilBERT model)"),wMo=l(),p_=a("li"),Nie=a("strong"),AMo=o("electra"),yMo=o(" \u2014 "),DN=a("a"),LMo=o("ElectraForPreTraining"),xMo=o(" (ELECTRA model)"),$Mo=l(),u_=a("li"),jie=a("strong"),kMo=o("flaubert"),SMo=o(" \u2014 "),GN=a("a"),RMo=o("FlaubertWithLMHeadModel"),PMo=o(" (FlauBERT model)"),BMo=l(),__=a("li"),Die=a("strong"),IMo=o("flava"),qMo=o(" \u2014 "),ON=a("a"),NMo=o("FlavaForPreTraining"),jMo=o(" (Flava model)"),DMo=l(),b_=a("li"),Gie=a("strong"),GMo=o("fnet"),OMo=o(" \u2014 "),VN=a("a"),VMo=o("FNetForPreTraining"),XMo=o(" (FNet model)"),zMo=l(),v_=a("li"),Oie=a("strong"),WMo=o("fsmt"),QMo=o(" \u2014 "),XN=a("a"),HMo=o("FSMTForConditionalGeneration"),UMo=o(" (FairSeq Machine-Translation model)"),JMo=l(),F_=a("li"),Vie=a("strong"),YMo=o("funnel"),KMo=o(" \u2014 "),zN=a("a"),ZMo=o("FunnelForPreTraining"),e4o=o(" (Funnel Transformer model)"),o4o=l(),T_=a("li"),Xie=a("strong"),r4o=o("gpt2"),t4o=o(" \u2014 "),WN=a("a"),a4o=o("GPT2LMHeadModel"),n4o=o(" (OpenAI GPT-2 model)"),s4o=l(),M_=a("li"),zie=a("strong"),l4o=o("ibert"),i4o=o(" \u2014 "),QN=a("a"),d4o=o("IBertForMaskedLM"),c4o=o(" (I-BERT model)"),f4o=l(),E_=a("li"),Wie=a("strong"),m4o=o("layoutlm"),g4o=o(" \u2014 "),HN=a("a"),h4o=o("LayoutLMForMaskedLM"),p4o=o(" (LayoutLM model)"),u4o=l(),C_=a("li"),Qie=a("strong"),_4o=o("longformer"),b4o=o(" \u2014 "),UN=a("a"),v4o=o("LongformerForMaskedLM"),F4o=o(" (Longformer model)"),T4o=l(),w_=a("li"),Hie=a("strong"),M4o=o("lxmert"),E4o=o(" \u2014 "),JN=a("a"),C4o=o("LxmertForPreTraining"),w4o=o(" (LXMERT model)"),A4o=l(),A_=a("li"),Uie=a("strong"),y4o=o("megatron-bert"),L4o=o(" \u2014 "),YN=a("a"),x4o=o("MegatronBertForPreTraining"),$4o=o(" (MegatronBert model)"),k4o=l(),y_=a("li"),Jie=a("strong"),S4o=o("mobilebert"),R4o=o(" \u2014 "),KN=a("a"),P4o=o("MobileBertForPreTraining"),B4o=o(" (MobileBERT model)"),I4o=l(),L_=a("li"),Yie=a("strong"),q4o=o("mpnet"),N4o=o(" \u2014 "),ZN=a("a"),j4o=o("MPNetForMaskedLM"),D4o=o(" (MPNet model)"),G4o=l(),x_=a("li"),Kie=a("strong"),O4o=o("openai-gpt"),V4o=o(" \u2014 "),ej=a("a"),X4o=o("OpenAIGPTLMHeadModel"),z4o=o(" (OpenAI GPT model)"),W4o=l(),$_=a("li"),Zie=a("strong"),Q4o=o("retribert"),H4o=o(" \u2014 "),oj=a("a"),U4o=o("RetriBertModel"),J4o=o(" (RetriBERT model)"),Y4o=l(),k_=a("li"),ede=a("strong"),K4o=o("roberta"),Z4o=o(" \u2014 "),rj=a("a"),eEo=o("RobertaForMaskedLM"),oEo=o(" (RoBERTa model)"),rEo=l(),S_=a("li"),ode=a("strong"),tEo=o("splinter"),aEo=o(" \u2014 "),tj=a("a"),nEo=o("SplinterForPreTraining"),sEo=o(" (Splinter model)"),lEo=l(),R_=a("li"),rde=a("strong"),iEo=o("squeezebert"),dEo=o(" \u2014 "),aj=a("a"),cEo=o("SqueezeBertForMaskedLM"),fEo=o(" (SqueezeBERT model)"),mEo=l(),P_=a("li"),tde=a("strong"),gEo=o("t5"),hEo=o(" \u2014 "),nj=a("a"),pEo=o("T5ForConditionalGeneration"),uEo=o(" (T5 model)"),_Eo=l(),B_=a("li"),ade=a("strong"),bEo=o("tapas"),vEo=o(" \u2014 "),sj=a("a"),FEo=o("TapasForMaskedLM"),TEo=o(" (TAPAS model)"),MEo=l(),I_=a("li"),nde=a("strong"),EEo=o("transfo-xl"),CEo=o(" \u2014 "),lj=a("a"),wEo=o("TransfoXLLMHeadModel"),AEo=o(" (Transformer-XL model)"),yEo=l(),q_=a("li"),sde=a("strong"),LEo=o("unispeech"),xEo=o(" \u2014 "),ij=a("a"),$Eo=o("UniSpeechForPreTraining"),kEo=o(" (UniSpeech model)"),SEo=l(),N_=a("li"),lde=a("strong"),REo=o("unispeech-sat"),PEo=o(" \u2014 "),dj=a("a"),BEo=o("UniSpeechSatForPreTraining"),IEo=o(" (UniSpeechSat model)"),qEo=l(),j_=a("li"),ide=a("strong"),NEo=o("visual_bert"),jEo=o(" \u2014 "),cj=a("a"),DEo=o("VisualBertForPreTraining"),GEo=o(" (VisualBert model)"),OEo=l(),D_=a("li"),dde=a("strong"),VEo=o("vit_mae"),XEo=o(" \u2014 "),fj=a("a"),zEo=o("ViTMAEForPreTraining"),WEo=o(" (ViTMAE model)"),QEo=l(),G_=a("li"),cde=a("strong"),HEo=o("wav2vec2"),UEo=o(" \u2014 "),mj=a("a"),JEo=o("Wav2Vec2ForPreTraining"),YEo=o(" (Wav2Vec2 model)"),KEo=l(),O_=a("li"),fde=a("strong"),ZEo=o("wav2vec2-conformer"),eCo=o(" \u2014 "),gj=a("a"),oCo=o("Wav2Vec2ConformerForPreTraining"),rCo=o(" (Wav2Vec2-Conformer model)"),tCo=l(),V_=a("li"),mde=a("strong"),aCo=o("xlm"),nCo=o(" \u2014 "),hj=a("a"),sCo=o("XLMWithLMHeadModel"),lCo=o(" (XLM model)"),iCo=l(),X_=a("li"),gde=a("strong"),dCo=o("xlm-roberta"),cCo=o(" \u2014 "),pj=a("a"),fCo=o("XLMRobertaForMaskedLM"),mCo=o(" (XLM-RoBERTa model)"),gCo=l(),z_=a("li"),hde=a("strong"),hCo=o("xlm-roberta-xl"),pCo=o(" \u2014 "),uj=a("a"),uCo=o("XLMRobertaXLForMaskedLM"),_Co=o(" (XLM-RoBERTa-XL model)"),bCo=l(),W_=a("li"),pde=a("strong"),vCo=o("xlnet"),FCo=o(" \u2014 "),_j=a("a"),TCo=o("XLNetLMHeadModel"),MCo=o(" (XLNet model)"),ECo=l(),Q_=a("p"),CCo=o("The model is set in evaluation mode by default using "),ude=a("code"),wCo=o("model.eval()"),ACo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),yCo=o("model.train()"),LCo=l(),F(H_.$$.fragment),pNe=l(),ki=a("h2"),U_=a("a"),bde=a("span"),F(dy.$$.fragment),xCo=l(),vde=a("span"),$Co=o("AutoModelForCausalLM"),uNe=l(),$o=a("div"),F(cy.$$.fragment),kCo=l(),Si=a("p"),SCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bj=a("a"),RCo=o("from_pretrained()"),PCo=o(" class method or the "),vj=a("a"),BCo=o("from_config()"),ICo=o(` class
method.`),qCo=l(),fy=a("p"),NCo=o("This class cannot be instantiated directly using "),Fde=a("code"),jCo=o("__init__()"),DCo=o(" (throws an error)."),GCo=l(),nt=a("div"),F(my.$$.fragment),OCo=l(),Tde=a("p"),VCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XCo=l(),Ri=a("p"),zCo=o(`Note:
Loading a model from its configuration file does `),Mde=a("strong"),WCo=o("not"),QCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),HCo=o("from_pretrained()"),UCo=o(" to load the model weights."),JCo=l(),F(J_.$$.fragment),YCo=l(),Ke=a("div"),F(gy.$$.fragment),KCo=l(),Ede=a("p"),ZCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e5o=l(),$a=a("p"),o5o=o("The model class to instantiate is selected based on the "),Cde=a("code"),r5o=o("model_type"),t5o=o(` property of the config object (either
passed as an argument or loaded from `),wde=a("code"),a5o=o("pretrained_model_name_or_path"),n5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=a("code"),s5o=o("pretrained_model_name_or_path"),l5o=o(":"),i5o=l(),z=a("ul"),Y_=a("li"),yde=a("strong"),d5o=o("bart"),c5o=o(" \u2014 "),Tj=a("a"),f5o=o("BartForCausalLM"),m5o=o(" (BART model)"),g5o=l(),K_=a("li"),Lde=a("strong"),h5o=o("bert"),p5o=o(" \u2014 "),Mj=a("a"),u5o=o("BertLMHeadModel"),_5o=o(" (BERT model)"),b5o=l(),Z_=a("li"),xde=a("strong"),v5o=o("bert-generation"),F5o=o(" \u2014 "),Ej=a("a"),T5o=o("BertGenerationDecoder"),M5o=o(" (Bert Generation model)"),E5o=l(),e1=a("li"),$de=a("strong"),C5o=o("big_bird"),w5o=o(" \u2014 "),Cj=a("a"),A5o=o("BigBirdForCausalLM"),y5o=o(" (BigBird model)"),L5o=l(),o1=a("li"),kde=a("strong"),x5o=o("bigbird_pegasus"),$5o=o(" \u2014 "),wj=a("a"),k5o=o("BigBirdPegasusForCausalLM"),S5o=o(" (BigBirdPegasus model)"),R5o=l(),r1=a("li"),Sde=a("strong"),P5o=o("blenderbot"),B5o=o(" \u2014 "),Aj=a("a"),I5o=o("BlenderbotForCausalLM"),q5o=o(" (Blenderbot model)"),N5o=l(),t1=a("li"),Rde=a("strong"),j5o=o("blenderbot-small"),D5o=o(" \u2014 "),yj=a("a"),G5o=o("BlenderbotSmallForCausalLM"),O5o=o(" (BlenderbotSmall model)"),V5o=l(),a1=a("li"),Pde=a("strong"),X5o=o("camembert"),z5o=o(" \u2014 "),Lj=a("a"),W5o=o("CamembertForCausalLM"),Q5o=o(" (CamemBERT model)"),H5o=l(),n1=a("li"),Bde=a("strong"),U5o=o("ctrl"),J5o=o(" \u2014 "),xj=a("a"),Y5o=o("CTRLLMHeadModel"),K5o=o(" (CTRL model)"),Z5o=l(),s1=a("li"),Ide=a("strong"),ewo=o("data2vec-text"),owo=o(" \u2014 "),$j=a("a"),rwo=o("Data2VecTextForCausalLM"),two=o(" (Data2VecText model)"),awo=l(),l1=a("li"),qde=a("strong"),nwo=o("electra"),swo=o(" \u2014 "),kj=a("a"),lwo=o("ElectraForCausalLM"),iwo=o(" (ELECTRA model)"),dwo=l(),i1=a("li"),Nde=a("strong"),cwo=o("gpt2"),fwo=o(" \u2014 "),Sj=a("a"),mwo=o("GPT2LMHeadModel"),gwo=o(" (OpenAI GPT-2 model)"),hwo=l(),d1=a("li"),jde=a("strong"),pwo=o("gpt_neo"),uwo=o(" \u2014 "),Rj=a("a"),_wo=o("GPTNeoForCausalLM"),bwo=o(" (GPT Neo model)"),vwo=l(),c1=a("li"),Dde=a("strong"),Fwo=o("gpt_neox"),Two=o(" \u2014 "),Pj=a("a"),Mwo=o("GPTNeoXForCausalLM"),Ewo=o(" (GPT NeoX model)"),Cwo=l(),f1=a("li"),Gde=a("strong"),wwo=o("gptj"),Awo=o(" \u2014 "),Bj=a("a"),ywo=o("GPTJForCausalLM"),Lwo=o(" (GPT-J model)"),xwo=l(),m1=a("li"),Ode=a("strong"),$wo=o("marian"),kwo=o(" \u2014 "),Ij=a("a"),Swo=o("MarianForCausalLM"),Rwo=o(" (Marian model)"),Pwo=l(),g1=a("li"),Vde=a("strong"),Bwo=o("mbart"),Iwo=o(" \u2014 "),qj=a("a"),qwo=o("MBartForCausalLM"),Nwo=o(" (mBART model)"),jwo=l(),h1=a("li"),Xde=a("strong"),Dwo=o("megatron-bert"),Gwo=o(" \u2014 "),Nj=a("a"),Owo=o("MegatronBertForCausalLM"),Vwo=o(" (MegatronBert model)"),Xwo=l(),p1=a("li"),zde=a("strong"),zwo=o("openai-gpt"),Wwo=o(" \u2014 "),jj=a("a"),Qwo=o("OpenAIGPTLMHeadModel"),Hwo=o(" (OpenAI GPT model)"),Uwo=l(),u1=a("li"),Wde=a("strong"),Jwo=o("opt"),Ywo=o(" \u2014 "),Dj=a("a"),Kwo=o("OPTForCausalLM"),Zwo=o(" (OPT model)"),e0o=l(),_1=a("li"),Qde=a("strong"),o0o=o("pegasus"),r0o=o(" \u2014 "),Gj=a("a"),t0o=o("PegasusForCausalLM"),a0o=o(" (Pegasus model)"),n0o=l(),b1=a("li"),Hde=a("strong"),s0o=o("plbart"),l0o=o(" \u2014 "),Oj=a("a"),i0o=o("PLBartForCausalLM"),d0o=o(" (PLBart model)"),c0o=l(),v1=a("li"),Ude=a("strong"),f0o=o("prophetnet"),m0o=o(" \u2014 "),Vj=a("a"),g0o=o("ProphetNetForCausalLM"),h0o=o(" (ProphetNet model)"),p0o=l(),F1=a("li"),Jde=a("strong"),u0o=o("qdqbert"),_0o=o(" \u2014 "),Xj=a("a"),b0o=o("QDQBertLMHeadModel"),v0o=o(" (QDQBert model)"),F0o=l(),T1=a("li"),Yde=a("strong"),T0o=o("reformer"),M0o=o(" \u2014 "),zj=a("a"),E0o=o("ReformerModelWithLMHead"),C0o=o(" (Reformer model)"),w0o=l(),M1=a("li"),Kde=a("strong"),A0o=o("rembert"),y0o=o(" \u2014 "),Wj=a("a"),L0o=o("RemBertForCausalLM"),x0o=o(" (RemBERT model)"),$0o=l(),E1=a("li"),Zde=a("strong"),k0o=o("roberta"),S0o=o(" \u2014 "),Qj=a("a"),R0o=o("RobertaForCausalLM"),P0o=o(" (RoBERTa model)"),B0o=l(),C1=a("li"),ece=a("strong"),I0o=o("roformer"),q0o=o(" \u2014 "),Hj=a("a"),N0o=o("RoFormerForCausalLM"),j0o=o(" (RoFormer model)"),D0o=l(),w1=a("li"),oce=a("strong"),G0o=o("speech_to_text_2"),O0o=o(" \u2014 "),Uj=a("a"),V0o=o("Speech2Text2ForCausalLM"),X0o=o(" (Speech2Text2 model)"),z0o=l(),A1=a("li"),rce=a("strong"),W0o=o("transfo-xl"),Q0o=o(" \u2014 "),Jj=a("a"),H0o=o("TransfoXLLMHeadModel"),U0o=o(" (Transformer-XL model)"),J0o=l(),y1=a("li"),tce=a("strong"),Y0o=o("trocr"),K0o=o(" \u2014 "),Yj=a("a"),Z0o=o("TrOCRForCausalLM"),eAo=o(" (TrOCR model)"),oAo=l(),L1=a("li"),ace=a("strong"),rAo=o("xglm"),tAo=o(" \u2014 "),Kj=a("a"),aAo=o("XGLMForCausalLM"),nAo=o(" (XGLM model)"),sAo=l(),x1=a("li"),nce=a("strong"),lAo=o("xlm"),iAo=o(" \u2014 "),Zj=a("a"),dAo=o("XLMWithLMHeadModel"),cAo=o(" (XLM model)"),fAo=l(),$1=a("li"),sce=a("strong"),mAo=o("xlm-prophetnet"),gAo=o(" \u2014 "),eD=a("a"),hAo=o("XLMProphetNetForCausalLM"),pAo=o(" (XLMProphetNet model)"),uAo=l(),k1=a("li"),lce=a("strong"),_Ao=o("xlm-roberta"),bAo=o(" \u2014 "),oD=a("a"),vAo=o("XLMRobertaForCausalLM"),FAo=o(" (XLM-RoBERTa model)"),TAo=l(),S1=a("li"),ice=a("strong"),MAo=o("xlm-roberta-xl"),EAo=o(" \u2014 "),rD=a("a"),CAo=o("XLMRobertaXLForCausalLM"),wAo=o(" (XLM-RoBERTa-XL model)"),AAo=l(),R1=a("li"),dce=a("strong"),yAo=o("xlnet"),LAo=o(" \u2014 "),tD=a("a"),xAo=o("XLNetLMHeadModel"),$Ao=o(" (XLNet model)"),kAo=l(),P1=a("p"),SAo=o("The model is set in evaluation mode by default using "),cce=a("code"),RAo=o("model.eval()"),PAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),BAo=o("model.train()"),IAo=l(),F(B1.$$.fragment),_Ne=l(),Pi=a("h2"),I1=a("a"),mce=a("span"),F(hy.$$.fragment),qAo=l(),gce=a("span"),NAo=o("AutoModelForMaskedLM"),bNe=l(),ko=a("div"),F(py.$$.fragment),jAo=l(),Bi=a("p"),DAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aD=a("a"),GAo=o("from_pretrained()"),OAo=o(" class method or the "),nD=a("a"),VAo=o("from_config()"),XAo=o(` class
method.`),zAo=l(),uy=a("p"),WAo=o("This class cannot be instantiated directly using "),hce=a("code"),QAo=o("__init__()"),HAo=o(" (throws an error)."),UAo=l(),st=a("div"),F(_y.$$.fragment),JAo=l(),pce=a("p"),YAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KAo=l(),Ii=a("p"),ZAo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),e6o=o("not"),o6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=a("a"),r6o=o("from_pretrained()"),t6o=o(" to load the model weights."),a6o=l(),F(q1.$$.fragment),n6o=l(),Ze=a("div"),F(by.$$.fragment),s6o=l(),_ce=a("p"),l6o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i6o=l(),ka=a("p"),d6o=o("The model class to instantiate is selected based on the "),bce=a("code"),c6o=o("model_type"),f6o=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),m6o=o("pretrained_model_name_or_path"),g6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),h6o=o("pretrained_model_name_or_path"),p6o=o(":"),u6o=l(),Q=a("ul"),N1=a("li"),Tce=a("strong"),_6o=o("albert"),b6o=o(" \u2014 "),lD=a("a"),v6o=o("AlbertForMaskedLM"),F6o=o(" (ALBERT model)"),T6o=l(),j1=a("li"),Mce=a("strong"),M6o=o("bart"),E6o=o(" \u2014 "),iD=a("a"),C6o=o("BartForConditionalGeneration"),w6o=o(" (BART model)"),A6o=l(),D1=a("li"),Ece=a("strong"),y6o=o("bert"),L6o=o(" \u2014 "),dD=a("a"),x6o=o("BertForMaskedLM"),$6o=o(" (BERT model)"),k6o=l(),G1=a("li"),Cce=a("strong"),S6o=o("big_bird"),R6o=o(" \u2014 "),cD=a("a"),P6o=o("BigBirdForMaskedLM"),B6o=o(" (BigBird model)"),I6o=l(),O1=a("li"),wce=a("strong"),q6o=o("camembert"),N6o=o(" \u2014 "),fD=a("a"),j6o=o("CamembertForMaskedLM"),D6o=o(" (CamemBERT model)"),G6o=l(),V1=a("li"),Ace=a("strong"),O6o=o("convbert"),V6o=o(" \u2014 "),mD=a("a"),X6o=o("ConvBertForMaskedLM"),z6o=o(" (ConvBERT model)"),W6o=l(),X1=a("li"),yce=a("strong"),Q6o=o("data2vec-text"),H6o=o(" \u2014 "),gD=a("a"),U6o=o("Data2VecTextForMaskedLM"),J6o=o(" (Data2VecText model)"),Y6o=l(),z1=a("li"),Lce=a("strong"),K6o=o("deberta"),Z6o=o(" \u2014 "),hD=a("a"),eyo=o("DebertaForMaskedLM"),oyo=o(" (DeBERTa model)"),ryo=l(),W1=a("li"),xce=a("strong"),tyo=o("deberta-v2"),ayo=o(" \u2014 "),pD=a("a"),nyo=o("DebertaV2ForMaskedLM"),syo=o(" (DeBERTa-v2 model)"),lyo=l(),Q1=a("li"),$ce=a("strong"),iyo=o("distilbert"),dyo=o(" \u2014 "),uD=a("a"),cyo=o("DistilBertForMaskedLM"),fyo=o(" (DistilBERT model)"),myo=l(),H1=a("li"),kce=a("strong"),gyo=o("electra"),hyo=o(" \u2014 "),_D=a("a"),pyo=o("ElectraForMaskedLM"),uyo=o(" (ELECTRA model)"),_yo=l(),U1=a("li"),Sce=a("strong"),byo=o("flaubert"),vyo=o(" \u2014 "),bD=a("a"),Fyo=o("FlaubertWithLMHeadModel"),Tyo=o(" (FlauBERT model)"),Myo=l(),J1=a("li"),Rce=a("strong"),Eyo=o("fnet"),Cyo=o(" \u2014 "),vD=a("a"),wyo=o("FNetForMaskedLM"),Ayo=o(" (FNet model)"),yyo=l(),Y1=a("li"),Pce=a("strong"),Lyo=o("funnel"),xyo=o(" \u2014 "),FD=a("a"),$yo=o("FunnelForMaskedLM"),kyo=o(" (Funnel Transformer model)"),Syo=l(),K1=a("li"),Bce=a("strong"),Ryo=o("ibert"),Pyo=o(" \u2014 "),TD=a("a"),Byo=o("IBertForMaskedLM"),Iyo=o(" (I-BERT model)"),qyo=l(),Z1=a("li"),Ice=a("strong"),Nyo=o("layoutlm"),jyo=o(" \u2014 "),MD=a("a"),Dyo=o("LayoutLMForMaskedLM"),Gyo=o(" (LayoutLM model)"),Oyo=l(),e2=a("li"),qce=a("strong"),Vyo=o("longformer"),Xyo=o(" \u2014 "),ED=a("a"),zyo=o("LongformerForMaskedLM"),Wyo=o(" (Longformer model)"),Qyo=l(),o2=a("li"),Nce=a("strong"),Hyo=o("mbart"),Uyo=o(" \u2014 "),CD=a("a"),Jyo=o("MBartForConditionalGeneration"),Yyo=o(" (mBART model)"),Kyo=l(),r2=a("li"),jce=a("strong"),Zyo=o("megatron-bert"),eLo=o(" \u2014 "),wD=a("a"),oLo=o("MegatronBertForMaskedLM"),rLo=o(" (MegatronBert model)"),tLo=l(),t2=a("li"),Dce=a("strong"),aLo=o("mobilebert"),nLo=o(" \u2014 "),AD=a("a"),sLo=o("MobileBertForMaskedLM"),lLo=o(" (MobileBERT model)"),iLo=l(),a2=a("li"),Gce=a("strong"),dLo=o("mpnet"),cLo=o(" \u2014 "),yD=a("a"),fLo=o("MPNetForMaskedLM"),mLo=o(" (MPNet model)"),gLo=l(),n2=a("li"),Oce=a("strong"),hLo=o("nystromformer"),pLo=o(" \u2014 "),LD=a("a"),uLo=o("NystromformerForMaskedLM"),_Lo=o(" (Nystromformer model)"),bLo=l(),s2=a("li"),Vce=a("strong"),vLo=o("perceiver"),FLo=o(" \u2014 "),xD=a("a"),TLo=o("PerceiverForMaskedLM"),MLo=o(" (Perceiver model)"),ELo=l(),l2=a("li"),Xce=a("strong"),CLo=o("qdqbert"),wLo=o(" \u2014 "),$D=a("a"),ALo=o("QDQBertForMaskedLM"),yLo=o(" (QDQBert model)"),LLo=l(),i2=a("li"),zce=a("strong"),xLo=o("reformer"),$Lo=o(" \u2014 "),kD=a("a"),kLo=o("ReformerForMaskedLM"),SLo=o(" (Reformer model)"),RLo=l(),d2=a("li"),Wce=a("strong"),PLo=o("rembert"),BLo=o(" \u2014 "),SD=a("a"),ILo=o("RemBertForMaskedLM"),qLo=o(" (RemBERT model)"),NLo=l(),c2=a("li"),Qce=a("strong"),jLo=o("roberta"),DLo=o(" \u2014 "),RD=a("a"),GLo=o("RobertaForMaskedLM"),OLo=o(" (RoBERTa model)"),VLo=l(),f2=a("li"),Hce=a("strong"),XLo=o("roformer"),zLo=o(" \u2014 "),PD=a("a"),WLo=o("RoFormerForMaskedLM"),QLo=o(" (RoFormer model)"),HLo=l(),m2=a("li"),Uce=a("strong"),ULo=o("squeezebert"),JLo=o(" \u2014 "),BD=a("a"),YLo=o("SqueezeBertForMaskedLM"),KLo=o(" (SqueezeBERT model)"),ZLo=l(),g2=a("li"),Jce=a("strong"),e8o=o("tapas"),o8o=o(" \u2014 "),ID=a("a"),r8o=o("TapasForMaskedLM"),t8o=o(" (TAPAS model)"),a8o=l(),h2=a("li"),Yce=a("strong"),n8o=o("wav2vec2"),s8o=o(" \u2014 "),Kce=a("code"),l8o=o("Wav2Vec2ForMaskedLM"),i8o=o(" (Wav2Vec2 model)"),d8o=l(),p2=a("li"),Zce=a("strong"),c8o=o("xlm"),f8o=o(" \u2014 "),qD=a("a"),m8o=o("XLMWithLMHeadModel"),g8o=o(" (XLM model)"),h8o=l(),u2=a("li"),efe=a("strong"),p8o=o("xlm-roberta"),u8o=o(" \u2014 "),ND=a("a"),_8o=o("XLMRobertaForMaskedLM"),b8o=o(" (XLM-RoBERTa model)"),v8o=l(),_2=a("li"),ofe=a("strong"),F8o=o("xlm-roberta-xl"),T8o=o(" \u2014 "),jD=a("a"),M8o=o("XLMRobertaXLForMaskedLM"),E8o=o(" (XLM-RoBERTa-XL model)"),C8o=l(),b2=a("li"),rfe=a("strong"),w8o=o("yoso"),A8o=o(" \u2014 "),DD=a("a"),y8o=o("YosoForMaskedLM"),L8o=o(" (YOSO model)"),x8o=l(),v2=a("p"),$8o=o("The model is set in evaluation mode by default using "),tfe=a("code"),k8o=o("model.eval()"),S8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),R8o=o("model.train()"),P8o=l(),F(F2.$$.fragment),vNe=l(),qi=a("h2"),T2=a("a"),nfe=a("span"),F(vy.$$.fragment),B8o=l(),sfe=a("span"),I8o=o("AutoModelForSeq2SeqLM"),FNe=l(),So=a("div"),F(Fy.$$.fragment),q8o=l(),Ni=a("p"),N8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GD=a("a"),j8o=o("from_pretrained()"),D8o=o(" class method or the "),OD=a("a"),G8o=o("from_config()"),O8o=o(` class
method.`),V8o=l(),Ty=a("p"),X8o=o("This class cannot be instantiated directly using "),lfe=a("code"),z8o=o("__init__()"),W8o=o(" (throws an error)."),Q8o=l(),lt=a("div"),F(My.$$.fragment),H8o=l(),ife=a("p"),U8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J8o=l(),ji=a("p"),Y8o=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),K8o=o("not"),Z8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),e9o=o("from_pretrained()"),o9o=o(" to load the model weights."),r9o=l(),F(M2.$$.fragment),t9o=l(),eo=a("div"),F(Ey.$$.fragment),a9o=l(),cfe=a("p"),n9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s9o=l(),Sa=a("p"),l9o=o("The model class to instantiate is selected based on the "),ffe=a("code"),i9o=o("model_type"),d9o=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),c9o=o("pretrained_model_name_or_path"),f9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),m9o=o("pretrained_model_name_or_path"),g9o=o(":"),h9o=l(),ue=a("ul"),E2=a("li"),hfe=a("strong"),p9o=o("bart"),u9o=o(" \u2014 "),XD=a("a"),_9o=o("BartForConditionalGeneration"),b9o=o(" (BART model)"),v9o=l(),C2=a("li"),pfe=a("strong"),F9o=o("bigbird_pegasus"),T9o=o(" \u2014 "),zD=a("a"),M9o=o("BigBirdPegasusForConditionalGeneration"),E9o=o(" (BigBirdPegasus model)"),C9o=l(),w2=a("li"),ufe=a("strong"),w9o=o("blenderbot"),A9o=o(" \u2014 "),WD=a("a"),y9o=o("BlenderbotForConditionalGeneration"),L9o=o(" (Blenderbot model)"),x9o=l(),A2=a("li"),_fe=a("strong"),$9o=o("blenderbot-small"),k9o=o(" \u2014 "),QD=a("a"),S9o=o("BlenderbotSmallForConditionalGeneration"),R9o=o(" (BlenderbotSmall model)"),P9o=l(),y2=a("li"),bfe=a("strong"),B9o=o("encoder-decoder"),I9o=o(" \u2014 "),HD=a("a"),q9o=o("EncoderDecoderModel"),N9o=o(" (Encoder decoder model)"),j9o=l(),L2=a("li"),vfe=a("strong"),D9o=o("fsmt"),G9o=o(" \u2014 "),UD=a("a"),O9o=o("FSMTForConditionalGeneration"),V9o=o(" (FairSeq Machine-Translation model)"),X9o=l(),x2=a("li"),Ffe=a("strong"),z9o=o("led"),W9o=o(" \u2014 "),JD=a("a"),Q9o=o("LEDForConditionalGeneration"),H9o=o(" (LED model)"),U9o=l(),$2=a("li"),Tfe=a("strong"),J9o=o("m2m_100"),Y9o=o(" \u2014 "),YD=a("a"),K9o=o("M2M100ForConditionalGeneration"),Z9o=o(" (M2M100 model)"),exo=l(),k2=a("li"),Mfe=a("strong"),oxo=o("marian"),rxo=o(" \u2014 "),KD=a("a"),txo=o("MarianMTModel"),axo=o(" (Marian model)"),nxo=l(),S2=a("li"),Efe=a("strong"),sxo=o("mbart"),lxo=o(" \u2014 "),ZD=a("a"),ixo=o("MBartForConditionalGeneration"),dxo=o(" (mBART model)"),cxo=l(),R2=a("li"),Cfe=a("strong"),fxo=o("mt5"),mxo=o(" \u2014 "),eG=a("a"),gxo=o("MT5ForConditionalGeneration"),hxo=o(" (mT5 model)"),pxo=l(),P2=a("li"),wfe=a("strong"),uxo=o("pegasus"),_xo=o(" \u2014 "),oG=a("a"),bxo=o("PegasusForConditionalGeneration"),vxo=o(" (Pegasus model)"),Fxo=l(),B2=a("li"),Afe=a("strong"),Txo=o("plbart"),Mxo=o(" \u2014 "),rG=a("a"),Exo=o("PLBartForConditionalGeneration"),Cxo=o(" (PLBart model)"),wxo=l(),I2=a("li"),yfe=a("strong"),Axo=o("prophetnet"),yxo=o(" \u2014 "),tG=a("a"),Lxo=o("ProphetNetForConditionalGeneration"),xxo=o(" (ProphetNet model)"),$xo=l(),q2=a("li"),Lfe=a("strong"),kxo=o("t5"),Sxo=o(" \u2014 "),aG=a("a"),Rxo=o("T5ForConditionalGeneration"),Pxo=o(" (T5 model)"),Bxo=l(),N2=a("li"),xfe=a("strong"),Ixo=o("xlm-prophetnet"),qxo=o(" \u2014 "),nG=a("a"),Nxo=o("XLMProphetNetForConditionalGeneration"),jxo=o(" (XLMProphetNet model)"),Dxo=l(),j2=a("p"),Gxo=o("The model is set in evaluation mode by default using "),$fe=a("code"),Oxo=o("model.eval()"),Vxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),Xxo=o("model.train()"),zxo=l(),F(D2.$$.fragment),TNe=l(),Di=a("h2"),G2=a("a"),Sfe=a("span"),F(Cy.$$.fragment),Wxo=l(),Rfe=a("span"),Qxo=o("AutoModelForSequenceClassification"),MNe=l(),Ro=a("div"),F(wy.$$.fragment),Hxo=l(),Gi=a("p"),Uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sG=a("a"),Jxo=o("from_pretrained()"),Yxo=o(" class method or the "),lG=a("a"),Kxo=o("from_config()"),Zxo=o(` class
method.`),e$o=l(),Ay=a("p"),o$o=o("This class cannot be instantiated directly using "),Pfe=a("code"),r$o=o("__init__()"),t$o=o(" (throws an error)."),a$o=l(),it=a("div"),F(yy.$$.fragment),n$o=l(),Bfe=a("p"),s$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l$o=l(),Oi=a("p"),i$o=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),d$o=o("not"),c$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),f$o=o("from_pretrained()"),m$o=o(" to load the model weights."),g$o=l(),F(O2.$$.fragment),h$o=l(),oo=a("div"),F(Ly.$$.fragment),p$o=l(),qfe=a("p"),u$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_$o=l(),Ra=a("p"),b$o=o("The model class to instantiate is selected based on the "),Nfe=a("code"),v$o=o("model_type"),F$o=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),T$o=o("pretrained_model_name_or_path"),M$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),E$o=o("pretrained_model_name_or_path"),C$o=o(":"),w$o=l(),q=a("ul"),V2=a("li"),Gfe=a("strong"),A$o=o("albert"),y$o=o(" \u2014 "),dG=a("a"),L$o=o("AlbertForSequenceClassification"),x$o=o(" (ALBERT model)"),$$o=l(),X2=a("li"),Ofe=a("strong"),k$o=o("bart"),S$o=o(" \u2014 "),cG=a("a"),R$o=o("BartForSequenceClassification"),P$o=o(" (BART model)"),B$o=l(),z2=a("li"),Vfe=a("strong"),I$o=o("bert"),q$o=o(" \u2014 "),fG=a("a"),N$o=o("BertForSequenceClassification"),j$o=o(" (BERT model)"),D$o=l(),W2=a("li"),Xfe=a("strong"),G$o=o("big_bird"),O$o=o(" \u2014 "),mG=a("a"),V$o=o("BigBirdForSequenceClassification"),X$o=o(" (BigBird model)"),z$o=l(),Q2=a("li"),zfe=a("strong"),W$o=o("bigbird_pegasus"),Q$o=o(" \u2014 "),gG=a("a"),H$o=o("BigBirdPegasusForSequenceClassification"),U$o=o(" (BigBirdPegasus model)"),J$o=l(),H2=a("li"),Wfe=a("strong"),Y$o=o("camembert"),K$o=o(" \u2014 "),hG=a("a"),Z$o=o("CamembertForSequenceClassification"),eko=o(" (CamemBERT model)"),oko=l(),U2=a("li"),Qfe=a("strong"),rko=o("canine"),tko=o(" \u2014 "),pG=a("a"),ako=o("CanineForSequenceClassification"),nko=o(" (Canine model)"),sko=l(),J2=a("li"),Hfe=a("strong"),lko=o("convbert"),iko=o(" \u2014 "),uG=a("a"),dko=o("ConvBertForSequenceClassification"),cko=o(" (ConvBERT model)"),fko=l(),Y2=a("li"),Ufe=a("strong"),mko=o("ctrl"),gko=o(" \u2014 "),_G=a("a"),hko=o("CTRLForSequenceClassification"),pko=o(" (CTRL model)"),uko=l(),K2=a("li"),Jfe=a("strong"),_ko=o("data2vec-text"),bko=o(" \u2014 "),bG=a("a"),vko=o("Data2VecTextForSequenceClassification"),Fko=o(" (Data2VecText model)"),Tko=l(),Z2=a("li"),Yfe=a("strong"),Mko=o("deberta"),Eko=o(" \u2014 "),vG=a("a"),Cko=o("DebertaForSequenceClassification"),wko=o(" (DeBERTa model)"),Ako=l(),eb=a("li"),Kfe=a("strong"),yko=o("deberta-v2"),Lko=o(" \u2014 "),FG=a("a"),xko=o("DebertaV2ForSequenceClassification"),$ko=o(" (DeBERTa-v2 model)"),kko=l(),ob=a("li"),Zfe=a("strong"),Sko=o("distilbert"),Rko=o(" \u2014 "),TG=a("a"),Pko=o("DistilBertForSequenceClassification"),Bko=o(" (DistilBERT model)"),Iko=l(),rb=a("li"),eme=a("strong"),qko=o("electra"),Nko=o(" \u2014 "),MG=a("a"),jko=o("ElectraForSequenceClassification"),Dko=o(" (ELECTRA model)"),Gko=l(),tb=a("li"),ome=a("strong"),Oko=o("flaubert"),Vko=o(" \u2014 "),EG=a("a"),Xko=o("FlaubertForSequenceClassification"),zko=o(" (FlauBERT model)"),Wko=l(),ab=a("li"),rme=a("strong"),Qko=o("fnet"),Hko=o(" \u2014 "),CG=a("a"),Uko=o("FNetForSequenceClassification"),Jko=o(" (FNet model)"),Yko=l(),nb=a("li"),tme=a("strong"),Kko=o("funnel"),Zko=o(" \u2014 "),wG=a("a"),eSo=o("FunnelForSequenceClassification"),oSo=o(" (Funnel Transformer model)"),rSo=l(),sb=a("li"),ame=a("strong"),tSo=o("gpt2"),aSo=o(" \u2014 "),AG=a("a"),nSo=o("GPT2ForSequenceClassification"),sSo=o(" (OpenAI GPT-2 model)"),lSo=l(),lb=a("li"),nme=a("strong"),iSo=o("gpt_neo"),dSo=o(" \u2014 "),yG=a("a"),cSo=o("GPTNeoForSequenceClassification"),fSo=o(" (GPT Neo model)"),mSo=l(),ib=a("li"),sme=a("strong"),gSo=o("gptj"),hSo=o(" \u2014 "),LG=a("a"),pSo=o("GPTJForSequenceClassification"),uSo=o(" (GPT-J model)"),_So=l(),db=a("li"),lme=a("strong"),bSo=o("ibert"),vSo=o(" \u2014 "),xG=a("a"),FSo=o("IBertForSequenceClassification"),TSo=o(" (I-BERT model)"),MSo=l(),cb=a("li"),ime=a("strong"),ESo=o("layoutlm"),CSo=o(" \u2014 "),$G=a("a"),wSo=o("LayoutLMForSequenceClassification"),ASo=o(" (LayoutLM model)"),ySo=l(),fb=a("li"),dme=a("strong"),LSo=o("layoutlmv2"),xSo=o(" \u2014 "),kG=a("a"),$So=o("LayoutLMv2ForSequenceClassification"),kSo=o(" (LayoutLMv2 model)"),SSo=l(),mb=a("li"),cme=a("strong"),RSo=o("layoutlmv3"),PSo=o(" \u2014 "),SG=a("a"),BSo=o("LayoutLMv3ForSequenceClassification"),ISo=o(" (LayoutLMv3 model)"),qSo=l(),gb=a("li"),fme=a("strong"),NSo=o("led"),jSo=o(" \u2014 "),RG=a("a"),DSo=o("LEDForSequenceClassification"),GSo=o(" (LED model)"),OSo=l(),hb=a("li"),mme=a("strong"),VSo=o("longformer"),XSo=o(" \u2014 "),PG=a("a"),zSo=o("LongformerForSequenceClassification"),WSo=o(" (Longformer model)"),QSo=l(),pb=a("li"),gme=a("strong"),HSo=o("mbart"),USo=o(" \u2014 "),BG=a("a"),JSo=o("MBartForSequenceClassification"),YSo=o(" (mBART model)"),KSo=l(),ub=a("li"),hme=a("strong"),ZSo=o("megatron-bert"),eRo=o(" \u2014 "),IG=a("a"),oRo=o("MegatronBertForSequenceClassification"),rRo=o(" (MegatronBert model)"),tRo=l(),_b=a("li"),pme=a("strong"),aRo=o("mobilebert"),nRo=o(" \u2014 "),qG=a("a"),sRo=o("MobileBertForSequenceClassification"),lRo=o(" (MobileBERT model)"),iRo=l(),bb=a("li"),ume=a("strong"),dRo=o("mpnet"),cRo=o(" \u2014 "),NG=a("a"),fRo=o("MPNetForSequenceClassification"),mRo=o(" (MPNet model)"),gRo=l(),vb=a("li"),_me=a("strong"),hRo=o("nystromformer"),pRo=o(" \u2014 "),jG=a("a"),uRo=o("NystromformerForSequenceClassification"),_Ro=o(" (Nystromformer model)"),bRo=l(),Fb=a("li"),bme=a("strong"),vRo=o("openai-gpt"),FRo=o(" \u2014 "),DG=a("a"),TRo=o("OpenAIGPTForSequenceClassification"),MRo=o(" (OpenAI GPT model)"),ERo=l(),Tb=a("li"),vme=a("strong"),CRo=o("perceiver"),wRo=o(" \u2014 "),GG=a("a"),ARo=o("PerceiverForSequenceClassification"),yRo=o(" (Perceiver model)"),LRo=l(),Mb=a("li"),Fme=a("strong"),xRo=o("plbart"),$Ro=o(" \u2014 "),OG=a("a"),kRo=o("PLBartForSequenceClassification"),SRo=o(" (PLBart model)"),RRo=l(),Eb=a("li"),Tme=a("strong"),PRo=o("qdqbert"),BRo=o(" \u2014 "),VG=a("a"),IRo=o("QDQBertForSequenceClassification"),qRo=o(" (QDQBert model)"),NRo=l(),Cb=a("li"),Mme=a("strong"),jRo=o("reformer"),DRo=o(" \u2014 "),XG=a("a"),GRo=o("ReformerForSequenceClassification"),ORo=o(" (Reformer model)"),VRo=l(),wb=a("li"),Eme=a("strong"),XRo=o("rembert"),zRo=o(" \u2014 "),zG=a("a"),WRo=o("RemBertForSequenceClassification"),QRo=o(" (RemBERT model)"),HRo=l(),Ab=a("li"),Cme=a("strong"),URo=o("roberta"),JRo=o(" \u2014 "),WG=a("a"),YRo=o("RobertaForSequenceClassification"),KRo=o(" (RoBERTa model)"),ZRo=l(),yb=a("li"),wme=a("strong"),ePo=o("roformer"),oPo=o(" \u2014 "),QG=a("a"),rPo=o("RoFormerForSequenceClassification"),tPo=o(" (RoFormer model)"),aPo=l(),Lb=a("li"),Ame=a("strong"),nPo=o("squeezebert"),sPo=o(" \u2014 "),HG=a("a"),lPo=o("SqueezeBertForSequenceClassification"),iPo=o(" (SqueezeBERT model)"),dPo=l(),xb=a("li"),yme=a("strong"),cPo=o("tapas"),fPo=o(" \u2014 "),UG=a("a"),mPo=o("TapasForSequenceClassification"),gPo=o(" (TAPAS model)"),hPo=l(),$b=a("li"),Lme=a("strong"),pPo=o("transfo-xl"),uPo=o(" \u2014 "),JG=a("a"),_Po=o("TransfoXLForSequenceClassification"),bPo=o(" (Transformer-XL model)"),vPo=l(),kb=a("li"),xme=a("strong"),FPo=o("xlm"),TPo=o(" \u2014 "),YG=a("a"),MPo=o("XLMForSequenceClassification"),EPo=o(" (XLM model)"),CPo=l(),Sb=a("li"),$me=a("strong"),wPo=o("xlm-roberta"),APo=o(" \u2014 "),KG=a("a"),yPo=o("XLMRobertaForSequenceClassification"),LPo=o(" (XLM-RoBERTa model)"),xPo=l(),Rb=a("li"),kme=a("strong"),$Po=o("xlm-roberta-xl"),kPo=o(" \u2014 "),ZG=a("a"),SPo=o("XLMRobertaXLForSequenceClassification"),RPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),Pb=a("li"),Sme=a("strong"),BPo=o("xlnet"),IPo=o(" \u2014 "),eO=a("a"),qPo=o("XLNetForSequenceClassification"),NPo=o(" (XLNet model)"),jPo=l(),Bb=a("li"),Rme=a("strong"),DPo=o("yoso"),GPo=o(" \u2014 "),oO=a("a"),OPo=o("YosoForSequenceClassification"),VPo=o(" (YOSO model)"),XPo=l(),Ib=a("p"),zPo=o("The model is set in evaluation mode by default using "),Pme=a("code"),WPo=o("model.eval()"),QPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),HPo=o("model.train()"),UPo=l(),F(qb.$$.fragment),ENe=l(),Vi=a("h2"),Nb=a("a"),Ime=a("span"),F(xy.$$.fragment),JPo=l(),qme=a("span"),YPo=o("AutoModelForMultipleChoice"),CNe=l(),Po=a("div"),F($y.$$.fragment),KPo=l(),Xi=a("p"),ZPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rO=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),tO=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),ky=a("p"),nBo=o("This class cannot be instantiated directly using "),Nme=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),dt=a("div"),F(Sy.$$.fragment),dBo=l(),jme=a("p"),cBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fBo=l(),zi=a("p"),mBo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),pBo=o("from_pretrained()"),uBo=o(" to load the model weights."),_Bo=l(),F(jb.$$.fragment),bBo=l(),ro=a("div"),F(Ry.$$.fragment),vBo=l(),Gme=a("p"),FBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TBo=l(),Pa=a("p"),MBo=o("The model class to instantiate is selected based on the "),Ome=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(":"),xBo=l(),K=a("ul"),Db=a("li"),zme=a("strong"),$Bo=o("albert"),kBo=o(" \u2014 "),nO=a("a"),SBo=o("AlbertForMultipleChoice"),RBo=o(" (ALBERT model)"),PBo=l(),Gb=a("li"),Wme=a("strong"),BBo=o("bert"),IBo=o(" \u2014 "),sO=a("a"),qBo=o("BertForMultipleChoice"),NBo=o(" (BERT model)"),jBo=l(),Ob=a("li"),Qme=a("strong"),DBo=o("big_bird"),GBo=o(" \u2014 "),lO=a("a"),OBo=o("BigBirdForMultipleChoice"),VBo=o(" (BigBird model)"),XBo=l(),Vb=a("li"),Hme=a("strong"),zBo=o("camembert"),WBo=o(" \u2014 "),iO=a("a"),QBo=o("CamembertForMultipleChoice"),HBo=o(" (CamemBERT model)"),UBo=l(),Xb=a("li"),Ume=a("strong"),JBo=o("canine"),YBo=o(" \u2014 "),dO=a("a"),KBo=o("CanineForMultipleChoice"),ZBo=o(" (Canine model)"),eIo=l(),zb=a("li"),Jme=a("strong"),oIo=o("convbert"),rIo=o(" \u2014 "),cO=a("a"),tIo=o("ConvBertForMultipleChoice"),aIo=o(" (ConvBERT model)"),nIo=l(),Wb=a("li"),Yme=a("strong"),sIo=o("data2vec-text"),lIo=o(" \u2014 "),fO=a("a"),iIo=o("Data2VecTextForMultipleChoice"),dIo=o(" (Data2VecText model)"),cIo=l(),Qb=a("li"),Kme=a("strong"),fIo=o("deberta-v2"),mIo=o(" \u2014 "),mO=a("a"),gIo=o("DebertaV2ForMultipleChoice"),hIo=o(" (DeBERTa-v2 model)"),pIo=l(),Hb=a("li"),Zme=a("strong"),uIo=o("distilbert"),_Io=o(" \u2014 "),gO=a("a"),bIo=o("DistilBertForMultipleChoice"),vIo=o(" (DistilBERT model)"),FIo=l(),Ub=a("li"),ege=a("strong"),TIo=o("electra"),MIo=o(" \u2014 "),hO=a("a"),EIo=o("ElectraForMultipleChoice"),CIo=o(" (ELECTRA model)"),wIo=l(),Jb=a("li"),oge=a("strong"),AIo=o("flaubert"),yIo=o(" \u2014 "),pO=a("a"),LIo=o("FlaubertForMultipleChoice"),xIo=o(" (FlauBERT model)"),$Io=l(),Yb=a("li"),rge=a("strong"),kIo=o("fnet"),SIo=o(" \u2014 "),uO=a("a"),RIo=o("FNetForMultipleChoice"),PIo=o(" (FNet model)"),BIo=l(),Kb=a("li"),tge=a("strong"),IIo=o("funnel"),qIo=o(" \u2014 "),_O=a("a"),NIo=o("FunnelForMultipleChoice"),jIo=o(" (Funnel Transformer model)"),DIo=l(),Zb=a("li"),age=a("strong"),GIo=o("ibert"),OIo=o(" \u2014 "),bO=a("a"),VIo=o("IBertForMultipleChoice"),XIo=o(" (I-BERT model)"),zIo=l(),ev=a("li"),nge=a("strong"),WIo=o("longformer"),QIo=o(" \u2014 "),vO=a("a"),HIo=o("LongformerForMultipleChoice"),UIo=o(" (Longformer model)"),JIo=l(),ov=a("li"),sge=a("strong"),YIo=o("megatron-bert"),KIo=o(" \u2014 "),FO=a("a"),ZIo=o("MegatronBertForMultipleChoice"),eqo=o(" (MegatronBert model)"),oqo=l(),rv=a("li"),lge=a("strong"),rqo=o("mobilebert"),tqo=o(" \u2014 "),TO=a("a"),aqo=o("MobileBertForMultipleChoice"),nqo=o(" (MobileBERT model)"),sqo=l(),tv=a("li"),ige=a("strong"),lqo=o("mpnet"),iqo=o(" \u2014 "),MO=a("a"),dqo=o("MPNetForMultipleChoice"),cqo=o(" (MPNet model)"),fqo=l(),av=a("li"),dge=a("strong"),mqo=o("nystromformer"),gqo=o(" \u2014 "),EO=a("a"),hqo=o("NystromformerForMultipleChoice"),pqo=o(" (Nystromformer model)"),uqo=l(),nv=a("li"),cge=a("strong"),_qo=o("qdqbert"),bqo=o(" \u2014 "),CO=a("a"),vqo=o("QDQBertForMultipleChoice"),Fqo=o(" (QDQBert model)"),Tqo=l(),sv=a("li"),fge=a("strong"),Mqo=o("rembert"),Eqo=o(" \u2014 "),wO=a("a"),Cqo=o("RemBertForMultipleChoice"),wqo=o(" (RemBERT model)"),Aqo=l(),lv=a("li"),mge=a("strong"),yqo=o("roberta"),Lqo=o(" \u2014 "),AO=a("a"),xqo=o("RobertaForMultipleChoice"),$qo=o(" (RoBERTa model)"),kqo=l(),iv=a("li"),gge=a("strong"),Sqo=o("roformer"),Rqo=o(" \u2014 "),yO=a("a"),Pqo=o("RoFormerForMultipleChoice"),Bqo=o(" (RoFormer model)"),Iqo=l(),dv=a("li"),hge=a("strong"),qqo=o("squeezebert"),Nqo=o(" \u2014 "),LO=a("a"),jqo=o("SqueezeBertForMultipleChoice"),Dqo=o(" (SqueezeBERT model)"),Gqo=l(),cv=a("li"),pge=a("strong"),Oqo=o("xlm"),Vqo=o(" \u2014 "),xO=a("a"),Xqo=o("XLMForMultipleChoice"),zqo=o(" (XLM model)"),Wqo=l(),fv=a("li"),uge=a("strong"),Qqo=o("xlm-roberta"),Hqo=o(" \u2014 "),$O=a("a"),Uqo=o("XLMRobertaForMultipleChoice"),Jqo=o(" (XLM-RoBERTa model)"),Yqo=l(),mv=a("li"),_ge=a("strong"),Kqo=o("xlm-roberta-xl"),Zqo=o(" \u2014 "),kO=a("a"),eNo=o("XLMRobertaXLForMultipleChoice"),oNo=o(" (XLM-RoBERTa-XL model)"),rNo=l(),gv=a("li"),bge=a("strong"),tNo=o("xlnet"),aNo=o(" \u2014 "),SO=a("a"),nNo=o("XLNetForMultipleChoice"),sNo=o(" (XLNet model)"),lNo=l(),hv=a("li"),vge=a("strong"),iNo=o("yoso"),dNo=o(" \u2014 "),RO=a("a"),cNo=o("YosoForMultipleChoice"),fNo=o(" (YOSO model)"),mNo=l(),pv=a("p"),gNo=o("The model is set in evaluation mode by default using "),Fge=a("code"),hNo=o("model.eval()"),pNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),uNo=o("model.train()"),_No=l(),F(uv.$$.fragment),wNe=l(),Wi=a("h2"),_v=a("a"),Mge=a("span"),F(Py.$$.fragment),bNo=l(),Ege=a("span"),vNo=o("AutoModelForNextSentencePrediction"),ANe=l(),Bo=a("div"),F(By.$$.fragment),FNo=l(),Qi=a("p"),TNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PO=a("a"),MNo=o("from_pretrained()"),ENo=o(" class method or the "),BO=a("a"),CNo=o("from_config()"),wNo=o(` class
method.`),ANo=l(),Iy=a("p"),yNo=o("This class cannot be instantiated directly using "),Cge=a("code"),LNo=o("__init__()"),xNo=o(" (throws an error)."),$No=l(),ct=a("div"),F(qy.$$.fragment),kNo=l(),wge=a("p"),SNo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RNo=l(),Hi=a("p"),PNo=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),BNo=o("not"),INo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),qNo=o("from_pretrained()"),NNo=o(" to load the model weights."),jNo=l(),F(bv.$$.fragment),DNo=l(),to=a("div"),F(Ny.$$.fragment),GNo=l(),yge=a("p"),ONo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VNo=l(),Ba=a("p"),XNo=o("The model class to instantiate is selected based on the "),Lge=a("code"),zNo=o("model_type"),WNo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),QNo=o("pretrained_model_name_or_path"),HNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),UNo=o("pretrained_model_name_or_path"),JNo=o(":"),YNo=l(),Yr=a("ul"),vv=a("li"),kge=a("strong"),KNo=o("bert"),ZNo=o(" \u2014 "),qO=a("a"),ejo=o("BertForNextSentencePrediction"),ojo=o(" (BERT model)"),rjo=l(),Fv=a("li"),Sge=a("strong"),tjo=o("fnet"),ajo=o(" \u2014 "),NO=a("a"),njo=o("FNetForNextSentencePrediction"),sjo=o(" (FNet model)"),ljo=l(),Tv=a("li"),Rge=a("strong"),ijo=o("megatron-bert"),djo=o(" \u2014 "),jO=a("a"),cjo=o("MegatronBertForNextSentencePrediction"),fjo=o(" (MegatronBert model)"),mjo=l(),Mv=a("li"),Pge=a("strong"),gjo=o("mobilebert"),hjo=o(" \u2014 "),DO=a("a"),pjo=o("MobileBertForNextSentencePrediction"),ujo=o(" (MobileBERT model)"),_jo=l(),Ev=a("li"),Bge=a("strong"),bjo=o("qdqbert"),vjo=o(" \u2014 "),GO=a("a"),Fjo=o("QDQBertForNextSentencePrediction"),Tjo=o(" (QDQBert model)"),Mjo=l(),Cv=a("p"),Ejo=o("The model is set in evaluation mode by default using "),Ige=a("code"),Cjo=o("model.eval()"),wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),Ajo=o("model.train()"),yjo=l(),F(wv.$$.fragment),yNe=l(),Ui=a("h2"),Av=a("a"),Nge=a("span"),F(jy.$$.fragment),Ljo=l(),jge=a("span"),xjo=o("AutoModelForTokenClassification"),LNe=l(),Io=a("div"),F(Dy.$$.fragment),$jo=l(),Ji=a("p"),kjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OO=a("a"),Sjo=o("from_pretrained()"),Rjo=o(" class method or the "),VO=a("a"),Pjo=o("from_config()"),Bjo=o(` class
method.`),Ijo=l(),Gy=a("p"),qjo=o("This class cannot be instantiated directly using "),Dge=a("code"),Njo=o("__init__()"),jjo=o(" (throws an error)."),Djo=l(),ft=a("div"),F(Oy.$$.fragment),Gjo=l(),Gge=a("p"),Ojo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vjo=l(),Yi=a("p"),Xjo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),zjo=o("not"),Wjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),Qjo=o("from_pretrained()"),Hjo=o(" to load the model weights."),Ujo=l(),F(yv.$$.fragment),Jjo=l(),ao=a("div"),F(Vy.$$.fragment),Yjo=l(),Vge=a("p"),Kjo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zjo=l(),Ia=a("p"),eDo=o("The model class to instantiate is selected based on the "),Xge=a("code"),oDo=o("model_type"),rDo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),tDo=o("pretrained_model_name_or_path"),aDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),nDo=o("pretrained_model_name_or_path"),sDo=o(":"),lDo=l(),H=a("ul"),Lv=a("li"),Qge=a("strong"),iDo=o("albert"),dDo=o(" \u2014 "),zO=a("a"),cDo=o("AlbertForTokenClassification"),fDo=o(" (ALBERT model)"),mDo=l(),xv=a("li"),Hge=a("strong"),gDo=o("bert"),hDo=o(" \u2014 "),WO=a("a"),pDo=o("BertForTokenClassification"),uDo=o(" (BERT model)"),_Do=l(),$v=a("li"),Uge=a("strong"),bDo=o("big_bird"),vDo=o(" \u2014 "),QO=a("a"),FDo=o("BigBirdForTokenClassification"),TDo=o(" (BigBird model)"),MDo=l(),kv=a("li"),Jge=a("strong"),EDo=o("camembert"),CDo=o(" \u2014 "),HO=a("a"),wDo=o("CamembertForTokenClassification"),ADo=o(" (CamemBERT model)"),yDo=l(),Sv=a("li"),Yge=a("strong"),LDo=o("canine"),xDo=o(" \u2014 "),UO=a("a"),$Do=o("CanineForTokenClassification"),kDo=o(" (Canine model)"),SDo=l(),Rv=a("li"),Kge=a("strong"),RDo=o("convbert"),PDo=o(" \u2014 "),JO=a("a"),BDo=o("ConvBertForTokenClassification"),IDo=o(" (ConvBERT model)"),qDo=l(),Pv=a("li"),Zge=a("strong"),NDo=o("data2vec-text"),jDo=o(" \u2014 "),YO=a("a"),DDo=o("Data2VecTextForTokenClassification"),GDo=o(" (Data2VecText model)"),ODo=l(),Bv=a("li"),ehe=a("strong"),VDo=o("deberta"),XDo=o(" \u2014 "),KO=a("a"),zDo=o("DebertaForTokenClassification"),WDo=o(" (DeBERTa model)"),QDo=l(),Iv=a("li"),ohe=a("strong"),HDo=o("deberta-v2"),UDo=o(" \u2014 "),ZO=a("a"),JDo=o("DebertaV2ForTokenClassification"),YDo=o(" (DeBERTa-v2 model)"),KDo=l(),qv=a("li"),rhe=a("strong"),ZDo=o("distilbert"),eGo=o(" \u2014 "),eV=a("a"),oGo=o("DistilBertForTokenClassification"),rGo=o(" (DistilBERT model)"),tGo=l(),Nv=a("li"),the=a("strong"),aGo=o("electra"),nGo=o(" \u2014 "),oV=a("a"),sGo=o("ElectraForTokenClassification"),lGo=o(" (ELECTRA model)"),iGo=l(),jv=a("li"),ahe=a("strong"),dGo=o("flaubert"),cGo=o(" \u2014 "),rV=a("a"),fGo=o("FlaubertForTokenClassification"),mGo=o(" (FlauBERT model)"),gGo=l(),Dv=a("li"),nhe=a("strong"),hGo=o("fnet"),pGo=o(" \u2014 "),tV=a("a"),uGo=o("FNetForTokenClassification"),_Go=o(" (FNet model)"),bGo=l(),Gv=a("li"),she=a("strong"),vGo=o("funnel"),FGo=o(" \u2014 "),aV=a("a"),TGo=o("FunnelForTokenClassification"),MGo=o(" (Funnel Transformer model)"),EGo=l(),Ov=a("li"),lhe=a("strong"),CGo=o("gpt2"),wGo=o(" \u2014 "),nV=a("a"),AGo=o("GPT2ForTokenClassification"),yGo=o(" (OpenAI GPT-2 model)"),LGo=l(),Vv=a("li"),ihe=a("strong"),xGo=o("ibert"),$Go=o(" \u2014 "),sV=a("a"),kGo=o("IBertForTokenClassification"),SGo=o(" (I-BERT model)"),RGo=l(),Xv=a("li"),dhe=a("strong"),PGo=o("layoutlm"),BGo=o(" \u2014 "),lV=a("a"),IGo=o("LayoutLMForTokenClassification"),qGo=o(" (LayoutLM model)"),NGo=l(),zv=a("li"),che=a("strong"),jGo=o("layoutlmv2"),DGo=o(" \u2014 "),iV=a("a"),GGo=o("LayoutLMv2ForTokenClassification"),OGo=o(" (LayoutLMv2 model)"),VGo=l(),Wv=a("li"),fhe=a("strong"),XGo=o("layoutlmv3"),zGo=o(" \u2014 "),dV=a("a"),WGo=o("LayoutLMv3ForTokenClassification"),QGo=o(" (LayoutLMv3 model)"),HGo=l(),Qv=a("li"),mhe=a("strong"),UGo=o("longformer"),JGo=o(" \u2014 "),cV=a("a"),YGo=o("LongformerForTokenClassification"),KGo=o(" (Longformer model)"),ZGo=l(),Hv=a("li"),ghe=a("strong"),eOo=o("megatron-bert"),oOo=o(" \u2014 "),fV=a("a"),rOo=o("MegatronBertForTokenClassification"),tOo=o(" (MegatronBert model)"),aOo=l(),Uv=a("li"),hhe=a("strong"),nOo=o("mobilebert"),sOo=o(" \u2014 "),mV=a("a"),lOo=o("MobileBertForTokenClassification"),iOo=o(" (MobileBERT model)"),dOo=l(),Jv=a("li"),phe=a("strong"),cOo=o("mpnet"),fOo=o(" \u2014 "),gV=a("a"),mOo=o("MPNetForTokenClassification"),gOo=o(" (MPNet model)"),hOo=l(),Yv=a("li"),uhe=a("strong"),pOo=o("nystromformer"),uOo=o(" \u2014 "),hV=a("a"),_Oo=o("NystromformerForTokenClassification"),bOo=o(" (Nystromformer model)"),vOo=l(),Kv=a("li"),_he=a("strong"),FOo=o("qdqbert"),TOo=o(" \u2014 "),pV=a("a"),MOo=o("QDQBertForTokenClassification"),EOo=o(" (QDQBert model)"),COo=l(),Zv=a("li"),bhe=a("strong"),wOo=o("rembert"),AOo=o(" \u2014 "),uV=a("a"),yOo=o("RemBertForTokenClassification"),LOo=o(" (RemBERT model)"),xOo=l(),e3=a("li"),vhe=a("strong"),$Oo=o("roberta"),kOo=o(" \u2014 "),_V=a("a"),SOo=o("RobertaForTokenClassification"),ROo=o(" (RoBERTa model)"),POo=l(),o3=a("li"),Fhe=a("strong"),BOo=o("roformer"),IOo=o(" \u2014 "),bV=a("a"),qOo=o("RoFormerForTokenClassification"),NOo=o(" (RoFormer model)"),jOo=l(),r3=a("li"),The=a("strong"),DOo=o("squeezebert"),GOo=o(" \u2014 "),vV=a("a"),OOo=o("SqueezeBertForTokenClassification"),VOo=o(" (SqueezeBERT model)"),XOo=l(),t3=a("li"),Mhe=a("strong"),zOo=o("xlm"),WOo=o(" \u2014 "),FV=a("a"),QOo=o("XLMForTokenClassification"),HOo=o(" (XLM model)"),UOo=l(),a3=a("li"),Ehe=a("strong"),JOo=o("xlm-roberta"),YOo=o(" \u2014 "),TV=a("a"),KOo=o("XLMRobertaForTokenClassification"),ZOo=o(" (XLM-RoBERTa model)"),eVo=l(),n3=a("li"),Che=a("strong"),oVo=o("xlm-roberta-xl"),rVo=o(" \u2014 "),MV=a("a"),tVo=o("XLMRobertaXLForTokenClassification"),aVo=o(" (XLM-RoBERTa-XL model)"),nVo=l(),s3=a("li"),whe=a("strong"),sVo=o("xlnet"),lVo=o(" \u2014 "),EV=a("a"),iVo=o("XLNetForTokenClassification"),dVo=o(" (XLNet model)"),cVo=l(),l3=a("li"),Ahe=a("strong"),fVo=o("yoso"),mVo=o(" \u2014 "),CV=a("a"),gVo=o("YosoForTokenClassification"),hVo=o(" (YOSO model)"),pVo=l(),i3=a("p"),uVo=o("The model is set in evaluation mode by default using "),yhe=a("code"),_Vo=o("model.eval()"),bVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),vVo=o("model.train()"),FVo=l(),F(d3.$$.fragment),xNe=l(),Ki=a("h2"),c3=a("a"),xhe=a("span"),F(Xy.$$.fragment),TVo=l(),$he=a("span"),MVo=o("AutoModelForQuestionAnswering"),$Ne=l(),qo=a("div"),F(zy.$$.fragment),EVo=l(),Zi=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wV=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),AV=a("a"),yVo=o("from_config()"),LVo=o(` class
method.`),xVo=l(),Wy=a("p"),$Vo=o("This class cannot be instantiated directly using "),khe=a("code"),kVo=o("__init__()"),SVo=o(" (throws an error)."),RVo=l(),mt=a("div"),F(Qy.$$.fragment),PVo=l(),She=a("p"),BVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IVo=l(),ed=a("p"),qVo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),NVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),F(f3.$$.fragment),VVo=l(),no=a("div"),F(Hy.$$.fragment),XVo=l(),Phe=a("p"),zVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WVo=l(),qa=a("p"),QVo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),HVo=o("model_type"),UVo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(":"),eXo=l(),V=a("ul"),m3=a("li"),Nhe=a("strong"),oXo=o("albert"),rXo=o(" \u2014 "),LV=a("a"),tXo=o("AlbertForQuestionAnswering"),aXo=o(" (ALBERT model)"),nXo=l(),g3=a("li"),jhe=a("strong"),sXo=o("bart"),lXo=o(" \u2014 "),xV=a("a"),iXo=o("BartForQuestionAnswering"),dXo=o(" (BART model)"),cXo=l(),h3=a("li"),Dhe=a("strong"),fXo=o("bert"),mXo=o(" \u2014 "),$V=a("a"),gXo=o("BertForQuestionAnswering"),hXo=o(" (BERT model)"),pXo=l(),p3=a("li"),Ghe=a("strong"),uXo=o("big_bird"),_Xo=o(" \u2014 "),kV=a("a"),bXo=o("BigBirdForQuestionAnswering"),vXo=o(" (BigBird model)"),FXo=l(),u3=a("li"),Ohe=a("strong"),TXo=o("bigbird_pegasus"),MXo=o(" \u2014 "),SV=a("a"),EXo=o("BigBirdPegasusForQuestionAnswering"),CXo=o(" (BigBirdPegasus model)"),wXo=l(),_3=a("li"),Vhe=a("strong"),AXo=o("camembert"),yXo=o(" \u2014 "),RV=a("a"),LXo=o("CamembertForQuestionAnswering"),xXo=o(" (CamemBERT model)"),$Xo=l(),b3=a("li"),Xhe=a("strong"),kXo=o("canine"),SXo=o(" \u2014 "),PV=a("a"),RXo=o("CanineForQuestionAnswering"),PXo=o(" (Canine model)"),BXo=l(),v3=a("li"),zhe=a("strong"),IXo=o("convbert"),qXo=o(" \u2014 "),BV=a("a"),NXo=o("ConvBertForQuestionAnswering"),jXo=o(" (ConvBERT model)"),DXo=l(),F3=a("li"),Whe=a("strong"),GXo=o("data2vec-text"),OXo=o(" \u2014 "),IV=a("a"),VXo=o("Data2VecTextForQuestionAnswering"),XXo=o(" (Data2VecText model)"),zXo=l(),T3=a("li"),Qhe=a("strong"),WXo=o("deberta"),QXo=o(" \u2014 "),qV=a("a"),HXo=o("DebertaForQuestionAnswering"),UXo=o(" (DeBERTa model)"),JXo=l(),M3=a("li"),Hhe=a("strong"),YXo=o("deberta-v2"),KXo=o(" \u2014 "),NV=a("a"),ZXo=o("DebertaV2ForQuestionAnswering"),ezo=o(" (DeBERTa-v2 model)"),ozo=l(),E3=a("li"),Uhe=a("strong"),rzo=o("distilbert"),tzo=o(" \u2014 "),jV=a("a"),azo=o("DistilBertForQuestionAnswering"),nzo=o(" (DistilBERT model)"),szo=l(),C3=a("li"),Jhe=a("strong"),lzo=o("electra"),izo=o(" \u2014 "),DV=a("a"),dzo=o("ElectraForQuestionAnswering"),czo=o(" (ELECTRA model)"),fzo=l(),w3=a("li"),Yhe=a("strong"),mzo=o("flaubert"),gzo=o(" \u2014 "),GV=a("a"),hzo=o("FlaubertForQuestionAnsweringSimple"),pzo=o(" (FlauBERT model)"),uzo=l(),A3=a("li"),Khe=a("strong"),_zo=o("fnet"),bzo=o(" \u2014 "),OV=a("a"),vzo=o("FNetForQuestionAnswering"),Fzo=o(" (FNet model)"),Tzo=l(),y3=a("li"),Zhe=a("strong"),Mzo=o("funnel"),Ezo=o(" \u2014 "),VV=a("a"),Czo=o("FunnelForQuestionAnswering"),wzo=o(" (Funnel Transformer model)"),Azo=l(),L3=a("li"),epe=a("strong"),yzo=o("gptj"),Lzo=o(" \u2014 "),XV=a("a"),xzo=o("GPTJForQuestionAnswering"),$zo=o(" (GPT-J model)"),kzo=l(),x3=a("li"),ope=a("strong"),Szo=o("ibert"),Rzo=o(" \u2014 "),zV=a("a"),Pzo=o("IBertForQuestionAnswering"),Bzo=o(" (I-BERT model)"),Izo=l(),$3=a("li"),rpe=a("strong"),qzo=o("layoutlmv2"),Nzo=o(" \u2014 "),WV=a("a"),jzo=o("LayoutLMv2ForQuestionAnswering"),Dzo=o(" (LayoutLMv2 model)"),Gzo=l(),k3=a("li"),tpe=a("strong"),Ozo=o("layoutlmv3"),Vzo=o(" \u2014 "),QV=a("a"),Xzo=o("LayoutLMv3ForQuestionAnswering"),zzo=o(" (LayoutLMv3 model)"),Wzo=l(),S3=a("li"),ape=a("strong"),Qzo=o("led"),Hzo=o(" \u2014 "),HV=a("a"),Uzo=o("LEDForQuestionAnswering"),Jzo=o(" (LED model)"),Yzo=l(),R3=a("li"),npe=a("strong"),Kzo=o("longformer"),Zzo=o(" \u2014 "),UV=a("a"),eWo=o("LongformerForQuestionAnswering"),oWo=o(" (Longformer model)"),rWo=l(),P3=a("li"),spe=a("strong"),tWo=o("lxmert"),aWo=o(" \u2014 "),JV=a("a"),nWo=o("LxmertForQuestionAnswering"),sWo=o(" (LXMERT model)"),lWo=l(),B3=a("li"),lpe=a("strong"),iWo=o("mbart"),dWo=o(" \u2014 "),YV=a("a"),cWo=o("MBartForQuestionAnswering"),fWo=o(" (mBART model)"),mWo=l(),I3=a("li"),ipe=a("strong"),gWo=o("megatron-bert"),hWo=o(" \u2014 "),KV=a("a"),pWo=o("MegatronBertForQuestionAnswering"),uWo=o(" (MegatronBert model)"),_Wo=l(),q3=a("li"),dpe=a("strong"),bWo=o("mobilebert"),vWo=o(" \u2014 "),ZV=a("a"),FWo=o("MobileBertForQuestionAnswering"),TWo=o(" (MobileBERT model)"),MWo=l(),N3=a("li"),cpe=a("strong"),EWo=o("mpnet"),CWo=o(" \u2014 "),eX=a("a"),wWo=o("MPNetForQuestionAnswering"),AWo=o(" (MPNet model)"),yWo=l(),j3=a("li"),fpe=a("strong"),LWo=o("nystromformer"),xWo=o(" \u2014 "),oX=a("a"),$Wo=o("NystromformerForQuestionAnswering"),kWo=o(" (Nystromformer model)"),SWo=l(),D3=a("li"),mpe=a("strong"),RWo=o("qdqbert"),PWo=o(" \u2014 "),rX=a("a"),BWo=o("QDQBertForQuestionAnswering"),IWo=o(" (QDQBert model)"),qWo=l(),G3=a("li"),gpe=a("strong"),NWo=o("reformer"),jWo=o(" \u2014 "),tX=a("a"),DWo=o("ReformerForQuestionAnswering"),GWo=o(" (Reformer model)"),OWo=l(),O3=a("li"),hpe=a("strong"),VWo=o("rembert"),XWo=o(" \u2014 "),aX=a("a"),zWo=o("RemBertForQuestionAnswering"),WWo=o(" (RemBERT model)"),QWo=l(),V3=a("li"),ppe=a("strong"),HWo=o("roberta"),UWo=o(" \u2014 "),nX=a("a"),JWo=o("RobertaForQuestionAnswering"),YWo=o(" (RoBERTa model)"),KWo=l(),X3=a("li"),upe=a("strong"),ZWo=o("roformer"),eQo=o(" \u2014 "),sX=a("a"),oQo=o("RoFormerForQuestionAnswering"),rQo=o(" (RoFormer model)"),tQo=l(),z3=a("li"),_pe=a("strong"),aQo=o("splinter"),nQo=o(" \u2014 "),lX=a("a"),sQo=o("SplinterForQuestionAnswering"),lQo=o(" (Splinter model)"),iQo=l(),W3=a("li"),bpe=a("strong"),dQo=o("squeezebert"),cQo=o(" \u2014 "),iX=a("a"),fQo=o("SqueezeBertForQuestionAnswering"),mQo=o(" (SqueezeBERT model)"),gQo=l(),Q3=a("li"),vpe=a("strong"),hQo=o("xlm"),pQo=o(" \u2014 "),dX=a("a"),uQo=o("XLMForQuestionAnsweringSimple"),_Qo=o(" (XLM model)"),bQo=l(),H3=a("li"),Fpe=a("strong"),vQo=o("xlm-roberta"),FQo=o(" \u2014 "),cX=a("a"),TQo=o("XLMRobertaForQuestionAnswering"),MQo=o(" (XLM-RoBERTa model)"),EQo=l(),U3=a("li"),Tpe=a("strong"),CQo=o("xlm-roberta-xl"),wQo=o(" \u2014 "),fX=a("a"),AQo=o("XLMRobertaXLForQuestionAnswering"),yQo=o(" (XLM-RoBERTa-XL model)"),LQo=l(),J3=a("li"),Mpe=a("strong"),xQo=o("xlnet"),$Qo=o(" \u2014 "),mX=a("a"),kQo=o("XLNetForQuestionAnsweringSimple"),SQo=o(" (XLNet model)"),RQo=l(),Y3=a("li"),Epe=a("strong"),PQo=o("yoso"),BQo=o(" \u2014 "),gX=a("a"),IQo=o("YosoForQuestionAnswering"),qQo=o(" (YOSO model)"),NQo=l(),K3=a("p"),jQo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),DQo=o("model.eval()"),GQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),OQo=o("model.train()"),VQo=l(),F(Z3.$$.fragment),kNe=l(),od=a("h2"),eF=a("a"),Ape=a("span"),F(Uy.$$.fragment),XQo=l(),ype=a("span"),zQo=o("AutoModelForTableQuestionAnswering"),SNe=l(),No=a("div"),F(Jy.$$.fragment),WQo=l(),rd=a("p"),QQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=a("a"),HQo=o("from_pretrained()"),UQo=o(" class method or the "),pX=a("a"),JQo=o("from_config()"),YQo=o(` class
method.`),KQo=l(),Yy=a("p"),ZQo=o("This class cannot be instantiated directly using "),Lpe=a("code"),eHo=o("__init__()"),oHo=o(" (throws an error)."),rHo=l(),gt=a("div"),F(Ky.$$.fragment),tHo=l(),xpe=a("p"),aHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nHo=l(),td=a("p"),sHo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),lHo=o("not"),iHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),dHo=o("from_pretrained()"),cHo=o(" to load the model weights."),fHo=l(),F(oF.$$.fragment),mHo=l(),so=a("div"),F(Zy.$$.fragment),gHo=l(),kpe=a("p"),hHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pHo=l(),Na=a("p"),uHo=o("The model class to instantiate is selected based on the "),Spe=a("code"),_Ho=o("model_type"),bHo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),vHo=o("pretrained_model_name_or_path"),FHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),THo=o("pretrained_model_name_or_path"),MHo=o(":"),EHo=l(),Bpe=a("ul"),rF=a("li"),Ipe=a("strong"),CHo=o("tapas"),wHo=o(" \u2014 "),_X=a("a"),AHo=o("TapasForQuestionAnswering"),yHo=o(" (TAPAS model)"),LHo=l(),tF=a("p"),xHo=o("The model is set in evaluation mode by default using "),qpe=a("code"),$Ho=o("model.eval()"),kHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),SHo=o("model.train()"),RHo=l(),F(aF.$$.fragment),RNe=l(),ad=a("h2"),nF=a("a"),jpe=a("span"),F(eL.$$.fragment),PHo=l(),Dpe=a("span"),BHo=o("AutoModelForImageClassification"),PNe=l(),jo=a("div"),F(oL.$$.fragment),IHo=l(),nd=a("p"),qHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=a("a"),NHo=o("from_pretrained()"),jHo=o(" class method or the "),vX=a("a"),DHo=o("from_config()"),GHo=o(` class
method.`),OHo=l(),rL=a("p"),VHo=o("This class cannot be instantiated directly using "),Gpe=a("code"),XHo=o("__init__()"),zHo=o(" (throws an error)."),WHo=l(),ht=a("div"),F(tL.$$.fragment),QHo=l(),Ope=a("p"),HHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UHo=l(),sd=a("p"),JHo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),YHo=o("not"),KHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),ZHo=o("from_pretrained()"),eUo=o(" to load the model weights."),oUo=l(),F(sF.$$.fragment),rUo=l(),lo=a("div"),F(aL.$$.fragment),tUo=l(),Xpe=a("p"),aUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nUo=l(),ja=a("p"),sUo=o("The model class to instantiate is selected based on the "),zpe=a("code"),lUo=o("model_type"),iUo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),fUo=o("pretrained_model_name_or_path"),mUo=o(":"),gUo=l(),Fe=a("ul"),lF=a("li"),Hpe=a("strong"),hUo=o("beit"),pUo=o(" \u2014 "),TX=a("a"),uUo=o("BeitForImageClassification"),_Uo=o(" (BEiT model)"),bUo=l(),iF=a("li"),Upe=a("strong"),vUo=o("convnext"),FUo=o(" \u2014 "),MX=a("a"),TUo=o("ConvNextForImageClassification"),MUo=o(" (ConvNext model)"),EUo=l(),dF=a("li"),Jpe=a("strong"),CUo=o("cvt"),wUo=o(" \u2014 "),EX=a("a"),AUo=o("CvtForImageClassification"),yUo=o(" (CvT model)"),LUo=l(),cF=a("li"),Ype=a("strong"),xUo=o("data2vec-vision"),$Uo=o(" \u2014 "),CX=a("a"),kUo=o("Data2VecVisionForImageClassification"),SUo=o(" (Data2VecVision model)"),RUo=l(),Bs=a("li"),Kpe=a("strong"),PUo=o("deit"),BUo=o(" \u2014 "),wX=a("a"),IUo=o("DeiTForImageClassification"),qUo=o(" or "),AX=a("a"),NUo=o("DeiTForImageClassificationWithTeacher"),jUo=o(" (DeiT model)"),DUo=l(),fF=a("li"),Zpe=a("strong"),GUo=o("imagegpt"),OUo=o(" \u2014 "),yX=a("a"),VUo=o("ImageGPTForImageClassification"),XUo=o(" (ImageGPT model)"),zUo=l(),pt=a("li"),eue=a("strong"),WUo=o("perceiver"),QUo=o(" \u2014 "),LX=a("a"),HUo=o("PerceiverForImageClassificationLearned"),UUo=o(" or "),xX=a("a"),JUo=o("PerceiverForImageClassificationFourier"),YUo=o(" or "),$X=a("a"),KUo=o("PerceiverForImageClassificationConvProcessing"),ZUo=o(" (Perceiver model)"),eJo=l(),mF=a("li"),oue=a("strong"),oJo=o("poolformer"),rJo=o(" \u2014 "),kX=a("a"),tJo=o("PoolFormerForImageClassification"),aJo=o(" (PoolFormer model)"),nJo=l(),gF=a("li"),rue=a("strong"),sJo=o("regnet"),lJo=o(" \u2014 "),SX=a("a"),iJo=o("RegNetForImageClassification"),dJo=o(" (RegNet model)"),cJo=l(),hF=a("li"),tue=a("strong"),fJo=o("resnet"),mJo=o(" \u2014 "),RX=a("a"),gJo=o("ResNetForImageClassification"),hJo=o(" (ResNet model)"),pJo=l(),pF=a("li"),aue=a("strong"),uJo=o("segformer"),_Jo=o(" \u2014 "),PX=a("a"),bJo=o("SegformerForImageClassification"),vJo=o(" (SegFormer model)"),FJo=l(),uF=a("li"),nue=a("strong"),TJo=o("swin"),MJo=o(" \u2014 "),BX=a("a"),EJo=o("SwinForImageClassification"),CJo=o(" (Swin model)"),wJo=l(),_F=a("li"),sue=a("strong"),AJo=o("van"),yJo=o(" \u2014 "),IX=a("a"),LJo=o("VanForImageClassification"),xJo=o(" (VAN model)"),$Jo=l(),bF=a("li"),lue=a("strong"),kJo=o("vit"),SJo=o(" \u2014 "),qX=a("a"),RJo=o("ViTForImageClassification"),PJo=o(" (ViT model)"),BJo=l(),vF=a("p"),IJo=o("The model is set in evaluation mode by default using "),iue=a("code"),qJo=o("model.eval()"),NJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=a("code"),jJo=o("model.train()"),DJo=l(),F(FF.$$.fragment),BNe=l(),ld=a("h2"),TF=a("a"),cue=a("span"),F(nL.$$.fragment),GJo=l(),fue=a("span"),OJo=o("AutoModelForVision2Seq"),INe=l(),Do=a("div"),F(sL.$$.fragment),VJo=l(),id=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NX=a("a"),zJo=o("from_pretrained()"),WJo=o(" class method or the "),jX=a("a"),QJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),lL=a("p"),JJo=o("This class cannot be instantiated directly using "),mue=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),ut=a("div"),F(iL.$$.fragment),eYo=l(),gue=a("p"),oYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rYo=l(),dd=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),F(MF.$$.fragment),dYo=l(),io=a("div"),F(dL.$$.fragment),cYo=l(),pue=a("p"),fYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mYo=l(),Da=a("p"),gYo=o("The model class to instantiate is selected based on the "),uue=a("code"),hYo=o("model_type"),pYo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),uYo=o("pretrained_model_name_or_path"),_Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),bYo=o("pretrained_model_name_or_path"),vYo=o(":"),FYo=l(),vue=a("ul"),EF=a("li"),Fue=a("strong"),TYo=o("vision-encoder-decoder"),MYo=o(" \u2014 "),GX=a("a"),EYo=o("VisionEncoderDecoderModel"),CYo=o(" (Vision Encoder decoder model)"),wYo=l(),CF=a("p"),AYo=o("The model is set in evaluation mode by default using "),Tue=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),xYo=o("model.train()"),$Yo=l(),F(wF.$$.fragment),qNe=l(),cd=a("h2"),AF=a("a"),Eue=a("span"),F(cL.$$.fragment),kYo=l(),Cue=a("span"),SYo=o("AutoModelForAudioClassification"),NNe=l(),Go=a("div"),F(fL.$$.fragment),RYo=l(),fd=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OX=a("a"),BYo=o("from_pretrained()"),IYo=o(" class method or the "),VX=a("a"),qYo=o("from_config()"),NYo=o(` class
method.`),jYo=l(),mL=a("p"),DYo=o("This class cannot be instantiated directly using "),wue=a("code"),GYo=o("__init__()"),OYo=o(" (throws an error)."),VYo=l(),_t=a("div"),F(gL.$$.fragment),XYo=l(),Aue=a("p"),zYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),WYo=l(),md=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),HYo=o("not"),UYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),JYo=o("from_pretrained()"),YYo=o(" to load the model weights."),KYo=l(),F(yF.$$.fragment),ZYo=l(),co=a("div"),F(hL.$$.fragment),eKo=l(),Lue=a("p"),oKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rKo=l(),Ga=a("p"),tKo=o("The model class to instantiate is selected based on the "),xue=a("code"),aKo=o("model_type"),nKo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(":"),cKo=l(),ke=a("ul"),LF=a("li"),Sue=a("strong"),fKo=o("data2vec-audio"),mKo=o(" \u2014 "),zX=a("a"),gKo=o("Data2VecAudioForSequenceClassification"),hKo=o(" (Data2VecAudio model)"),pKo=l(),xF=a("li"),Rue=a("strong"),uKo=o("hubert"),_Ko=o(" \u2014 "),WX=a("a"),bKo=o("HubertForSequenceClassification"),vKo=o(" (Hubert model)"),FKo=l(),$F=a("li"),Pue=a("strong"),TKo=o("sew"),MKo=o(" \u2014 "),QX=a("a"),EKo=o("SEWForSequenceClassification"),CKo=o(" (SEW model)"),wKo=l(),kF=a("li"),Bue=a("strong"),AKo=o("sew-d"),yKo=o(" \u2014 "),HX=a("a"),LKo=o("SEWDForSequenceClassification"),xKo=o(" (SEW-D model)"),$Ko=l(),SF=a("li"),Iue=a("strong"),kKo=o("unispeech"),SKo=o(" \u2014 "),UX=a("a"),RKo=o("UniSpeechForSequenceClassification"),PKo=o(" (UniSpeech model)"),BKo=l(),RF=a("li"),que=a("strong"),IKo=o("unispeech-sat"),qKo=o(" \u2014 "),JX=a("a"),NKo=o("UniSpeechSatForSequenceClassification"),jKo=o(" (UniSpeechSat model)"),DKo=l(),PF=a("li"),Nue=a("strong"),GKo=o("wav2vec2"),OKo=o(" \u2014 "),YX=a("a"),VKo=o("Wav2Vec2ForSequenceClassification"),XKo=o(" (Wav2Vec2 model)"),zKo=l(),BF=a("li"),jue=a("strong"),WKo=o("wav2vec2-conformer"),QKo=o(" \u2014 "),KX=a("a"),HKo=o("Wav2Vec2ConformerForSequenceClassification"),UKo=o(" (Wav2Vec2-Conformer model)"),JKo=l(),IF=a("li"),Due=a("strong"),YKo=o("wavlm"),KKo=o(" \u2014 "),ZX=a("a"),ZKo=o("WavLMForSequenceClassification"),eZo=o(" (WavLM model)"),oZo=l(),qF=a("p"),rZo=o("The model is set in evaluation mode by default using "),Gue=a("code"),tZo=o("model.eval()"),aZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),nZo=o("model.train()"),sZo=l(),F(NF.$$.fragment),jNe=l(),gd=a("h2"),jF=a("a"),Vue=a("span"),F(pL.$$.fragment),lZo=l(),Xue=a("span"),iZo=o("AutoModelForAudioFrameClassification"),DNe=l(),Oo=a("div"),F(uL.$$.fragment),dZo=l(),hd=a("p"),cZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ez=a("a"),fZo=o("from_pretrained()"),mZo=o(" class method or the "),oz=a("a"),gZo=o("from_config()"),hZo=o(` class
method.`),pZo=l(),_L=a("p"),uZo=o("This class cannot be instantiated directly using "),zue=a("code"),_Zo=o("__init__()"),bZo=o(" (throws an error)."),vZo=l(),bt=a("div"),F(bL.$$.fragment),FZo=l(),Wue=a("p"),TZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MZo=l(),pd=a("p"),EZo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),CZo=o("not"),wZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),AZo=o("from_pretrained()"),yZo=o(" to load the model weights."),LZo=l(),F(DF.$$.fragment),xZo=l(),fo=a("div"),F(vL.$$.fragment),$Zo=l(),Hue=a("p"),kZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SZo=l(),Oa=a("p"),RZo=o("The model class to instantiate is selected based on the "),Uue=a("code"),PZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),IZo=o("pretrained_model_name_or_path"),qZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),NZo=o("pretrained_model_name_or_path"),jZo=o(":"),DZo=l(),Kr=a("ul"),GF=a("li"),Kue=a("strong"),GZo=o("data2vec-audio"),OZo=o(" \u2014 "),tz=a("a"),VZo=o("Data2VecAudioForAudioFrameClassification"),XZo=o(" (Data2VecAudio model)"),zZo=l(),OF=a("li"),Zue=a("strong"),WZo=o("unispeech-sat"),QZo=o(" \u2014 "),az=a("a"),HZo=o("UniSpeechSatForAudioFrameClassification"),UZo=o(" (UniSpeechSat model)"),JZo=l(),VF=a("li"),e_e=a("strong"),YZo=o("wav2vec2"),KZo=o(" \u2014 "),nz=a("a"),ZZo=o("Wav2Vec2ForAudioFrameClassification"),eer=o(" (Wav2Vec2 model)"),oer=l(),XF=a("li"),o_e=a("strong"),rer=o("wav2vec2-conformer"),ter=o(" \u2014 "),sz=a("a"),aer=o("Wav2Vec2ConformerForAudioFrameClassification"),ner=o(" (Wav2Vec2-Conformer model)"),ser=l(),zF=a("li"),r_e=a("strong"),ler=o("wavlm"),ier=o(" \u2014 "),lz=a("a"),der=o("WavLMForAudioFrameClassification"),cer=o(" (WavLM model)"),fer=l(),WF=a("p"),mer=o("The model is set in evaluation mode by default using "),t_e=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),per=o("model.train()"),uer=l(),F(QF.$$.fragment),GNe=l(),ud=a("h2"),HF=a("a"),n_e=a("span"),F(FL.$$.fragment),_er=l(),s_e=a("span"),ber=o("AutoModelForCTC"),ONe=l(),Vo=a("div"),F(TL.$$.fragment),ver=l(),_d=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iz=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),dz=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),ML=a("p"),Aer=o("This class cannot be instantiated directly using "),l_e=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),vt=a("div"),F(EL.$$.fragment),$er=l(),i_e=a("p"),ker=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ser=l(),bd=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),Ier=o("from_pretrained()"),qer=o(" to load the model weights."),Ner=l(),F(UF.$$.fragment),jer=l(),mo=a("div"),F(CL.$$.fragment),Der=l(),c_e=a("p"),Ger=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Oer=l(),Va=a("p"),Ver=o("The model class to instantiate is selected based on the "),f_e=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Se=a("ul"),JF=a("li"),h_e=a("strong"),Yer=o("data2vec-audio"),Ker=o(" \u2014 "),fz=a("a"),Zer=o("Data2VecAudioForCTC"),eor=o(" (Data2VecAudio model)"),oor=l(),YF=a("li"),p_e=a("strong"),ror=o("hubert"),tor=o(" \u2014 "),mz=a("a"),aor=o("HubertForCTC"),nor=o(" (Hubert model)"),sor=l(),KF=a("li"),u_e=a("strong"),lor=o("sew"),ior=o(" \u2014 "),gz=a("a"),dor=o("SEWForCTC"),cor=o(" (SEW model)"),mor=l(),ZF=a("li"),__e=a("strong"),gor=o("sew-d"),hor=o(" \u2014 "),hz=a("a"),por=o("SEWDForCTC"),uor=o(" (SEW-D model)"),_or=l(),eT=a("li"),b_e=a("strong"),bor=o("unispeech"),vor=o(" \u2014 "),pz=a("a"),For=o("UniSpeechForCTC"),Tor=o(" (UniSpeech model)"),Mor=l(),oT=a("li"),v_e=a("strong"),Eor=o("unispeech-sat"),Cor=o(" \u2014 "),uz=a("a"),wor=o("UniSpeechSatForCTC"),Aor=o(" (UniSpeechSat model)"),yor=l(),rT=a("li"),F_e=a("strong"),Lor=o("wav2vec2"),xor=o(" \u2014 "),_z=a("a"),$or=o("Wav2Vec2ForCTC"),kor=o(" (Wav2Vec2 model)"),Sor=l(),tT=a("li"),T_e=a("strong"),Ror=o("wav2vec2-conformer"),Por=o(" \u2014 "),bz=a("a"),Bor=o("Wav2Vec2ConformerForCTC"),Ior=o(" (Wav2Vec2-Conformer model)"),qor=l(),aT=a("li"),M_e=a("strong"),Nor=o("wavlm"),jor=o(" \u2014 "),vz=a("a"),Dor=o("WavLMForCTC"),Gor=o(" (WavLM model)"),Oor=l(),nT=a("p"),Vor=o("The model is set in evaluation mode by default using "),E_e=a("code"),Xor=o("model.eval()"),zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),Wor=o("model.train()"),Qor=l(),F(sT.$$.fragment),VNe=l(),vd=a("h2"),lT=a("a"),w_e=a("span"),F(wL.$$.fragment),Hor=l(),A_e=a("span"),Uor=o("AutoModelForSpeechSeq2Seq"),XNe=l(),Xo=a("div"),F(AL.$$.fragment),Jor=l(),Fd=a("p"),Yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fz=a("a"),Kor=o("from_pretrained()"),Zor=o(" class method or the "),Tz=a("a"),err=o("from_config()"),orr=o(` class
method.`),rrr=l(),yL=a("p"),trr=o("This class cannot be instantiated directly using "),y_e=a("code"),arr=o("__init__()"),nrr=o(" (throws an error)."),srr=l(),Ft=a("div"),F(LL.$$.fragment),lrr=l(),L_e=a("p"),irr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),drr=l(),Td=a("p"),crr=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),frr=o("not"),mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),grr=o("from_pretrained()"),hrr=o(" to load the model weights."),prr=l(),F(iT.$$.fragment),urr=l(),go=a("div"),F(xL.$$.fragment),_rr=l(),$_e=a("p"),brr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vrr=l(),Xa=a("p"),Frr=o("The model class to instantiate is selected based on the "),k_e=a("code"),Trr=o("model_type"),Mrr=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(":"),yrr=l(),$L=a("ul"),dT=a("li"),P_e=a("strong"),Lrr=o("speech-encoder-decoder"),xrr=o(" \u2014 "),Ez=a("a"),$rr=o("SpeechEncoderDecoderModel"),krr=o(" (Speech Encoder decoder model)"),Srr=l(),cT=a("li"),B_e=a("strong"),Rrr=o("speech_to_text"),Prr=o(" \u2014 "),Cz=a("a"),Brr=o("Speech2TextForConditionalGeneration"),Irr=o(" (Speech2Text model)"),qrr=l(),fT=a("p"),Nrr=o("The model is set in evaluation mode by default using "),I_e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),Grr=o("model.train()"),Orr=l(),F(mT.$$.fragment),zNe=l(),Md=a("h2"),gT=a("a"),N_e=a("span"),F(kL.$$.fragment),Vrr=l(),j_e=a("span"),Xrr=o("AutoModelForAudioXVector"),WNe=l(),zo=a("div"),F(SL.$$.fragment),zrr=l(),Ed=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wz=a("a"),Qrr=o("from_pretrained()"),Hrr=o(" class method or the "),Az=a("a"),Urr=o("from_config()"),Jrr=o(` class
method.`),Yrr=l(),RL=a("p"),Krr=o("This class cannot be instantiated directly using "),D_e=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),Tt=a("div"),F(PL.$$.fragment),rtr=l(),G_e=a("p"),ttr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),atr=l(),Cd=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),itr=o("from_pretrained()"),dtr=o(" to load the model weights."),ctr=l(),F(hT.$$.fragment),ftr=l(),ho=a("div"),F(BL.$$.fragment),mtr=l(),V_e=a("p"),gtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),htr=l(),za=a("p"),ptr=o("The model class to instantiate is selected based on the "),X_e=a("code"),utr=o("model_type"),_tr=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(":"),Mtr=l(),Zr=a("ul"),pT=a("li"),Q_e=a("strong"),Etr=o("data2vec-audio"),Ctr=o(" \u2014 "),Lz=a("a"),wtr=o("Data2VecAudioForXVector"),Atr=o(" (Data2VecAudio model)"),ytr=l(),uT=a("li"),H_e=a("strong"),Ltr=o("unispeech-sat"),xtr=o(" \u2014 "),xz=a("a"),$tr=o("UniSpeechSatForXVector"),ktr=o(" (UniSpeechSat model)"),Str=l(),_T=a("li"),U_e=a("strong"),Rtr=o("wav2vec2"),Ptr=o(" \u2014 "),$z=a("a"),Btr=o("Wav2Vec2ForXVector"),Itr=o(" (Wav2Vec2 model)"),qtr=l(),bT=a("li"),J_e=a("strong"),Ntr=o("wav2vec2-conformer"),jtr=o(" \u2014 "),kz=a("a"),Dtr=o("Wav2Vec2ConformerForXVector"),Gtr=o(" (Wav2Vec2-Conformer model)"),Otr=l(),vT=a("li"),Y_e=a("strong"),Vtr=o("wavlm"),Xtr=o(" \u2014 "),Sz=a("a"),ztr=o("WavLMForXVector"),Wtr=o(" (WavLM model)"),Qtr=l(),FT=a("p"),Htr=o("The model is set in evaluation mode by default using "),K_e=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),Ytr=o("model.train()"),Ktr=l(),F(TT.$$.fragment),QNe=l(),wd=a("h2"),MT=a("a"),e1e=a("span"),F(IL.$$.fragment),Ztr=l(),o1e=a("span"),ear=o("AutoModelForMaskedImageModeling"),HNe=l(),Wo=a("div"),F(qL.$$.fragment),oar=l(),Ad=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),Pz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),NL=a("p"),iar=o("This class cannot be instantiated directly using "),r1e=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),Mt=a("div"),F(jL.$$.fragment),mar=l(),t1e=a("p"),gar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),har=l(),yd=a("p"),par=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),uar=o("not"),_ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(ET.$$.fragment),Mar=l(),po=a("div"),F(DL.$$.fragment),Ear=l(),n1e=a("p"),Car=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),war=l(),Wa=a("p"),Aar=o("The model class to instantiate is selected based on the "),s1e=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Ld=a("ul"),CT=a("li"),d1e=a("strong"),Par=o("deit"),Bar=o(" \u2014 "),Iz=a("a"),Iar=o("DeiTForMaskedImageModeling"),qar=o(" (DeiT model)"),Nar=l(),wT=a("li"),c1e=a("strong"),jar=o("swin"),Dar=o(" \u2014 "),qz=a("a"),Gar=o("SwinForMaskedImageModeling"),Oar=o(" (Swin model)"),Var=l(),AT=a("li"),f1e=a("strong"),Xar=o("vit"),zar=o(" \u2014 "),Nz=a("a"),War=o("ViTForMaskedImageModeling"),Qar=o(" (ViT model)"),Har=l(),yT=a("p"),Uar=o("The model is set in evaluation mode by default using "),m1e=a("code"),Jar=o("model.eval()"),Yar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=a("code"),Kar=o("model.train()"),Zar=l(),F(LT.$$.fragment),UNe=l(),xd=a("h2"),xT=a("a"),h1e=a("span"),F(GL.$$.fragment),enr=l(),p1e=a("span"),onr=o("AutoModelForObjectDetection"),JNe=l(),Qo=a("div"),F(OL.$$.fragment),rnr=l(),$d=a("p"),tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jz=a("a"),anr=o("from_pretrained()"),nnr=o(" class method or the "),Dz=a("a"),snr=o("from_config()"),lnr=o(` class
method.`),inr=l(),VL=a("p"),dnr=o("This class cannot be instantiated directly using "),u1e=a("code"),cnr=o("__init__()"),fnr=o(" (throws an error)."),mnr=l(),Et=a("div"),F(XL.$$.fragment),gnr=l(),_1e=a("p"),hnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pnr=l(),kd=a("p"),unr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),_nr=o("not"),bnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),vnr=o("from_pretrained()"),Fnr=o(" to load the model weights."),Tnr=l(),F($T.$$.fragment),Mnr=l(),uo=a("div"),F(zL.$$.fragment),Enr=l(),v1e=a("p"),Cnr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wnr=l(),Qa=a("p"),Anr=o("The model class to instantiate is selected based on the "),F1e=a("code"),ynr=o("model_type"),Lnr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),xnr=o("pretrained_model_name_or_path"),$nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(":"),Rnr=l(),WL=a("ul"),kT=a("li"),E1e=a("strong"),Pnr=o("detr"),Bnr=o(" \u2014 "),Oz=a("a"),Inr=o("DetrForObjectDetection"),qnr=o(" (DETR model)"),Nnr=l(),ST=a("li"),C1e=a("strong"),jnr=o("yolos"),Dnr=o(" \u2014 "),Vz=a("a"),Gnr=o("YolosForObjectDetection"),Onr=o(" (YOLOS model)"),Vnr=l(),RT=a("p"),Xnr=o("The model is set in evaluation mode by default using "),w1e=a("code"),znr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=a("code"),Qnr=o("model.train()"),Hnr=l(),F(PT.$$.fragment),YNe=l(),Sd=a("h2"),BT=a("a"),y1e=a("span"),F(QL.$$.fragment),Unr=l(),L1e=a("span"),Jnr=o("AutoModelForImageSegmentation"),KNe=l(),Ho=a("div"),F(HL.$$.fragment),Ynr=l(),Rd=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xz=a("a"),Znr=o("from_pretrained()"),esr=o(" class method or the "),zz=a("a"),osr=o("from_config()"),rsr=o(` class
method.`),tsr=l(),UL=a("p"),asr=o("This class cannot be instantiated directly using "),x1e=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),Ct=a("div"),F(JL.$$.fragment),isr=l(),$1e=a("p"),dsr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),csr=l(),Pd=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),hsr=o("from_pretrained()"),psr=o(" to load the model weights."),usr=l(),F(IT.$$.fragment),_sr=l(),_o=a("div"),F(YL.$$.fragment),bsr=l(),S1e=a("p"),vsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Fsr=l(),Ha=a("p"),Tsr=o("The model class to instantiate is selected based on the "),R1e=a("code"),Msr=o("model_type"),Esr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),Csr=o("pretrained_model_name_or_path"),wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=a("code"),Asr=o("pretrained_model_name_or_path"),ysr=o(":"),Lsr=l(),I1e=a("ul"),qT=a("li"),q1e=a("strong"),xsr=o("detr"),$sr=o(" \u2014 "),Qz=a("a"),ksr=o("DetrForSegmentation"),Ssr=o(" (DETR model)"),Rsr=l(),NT=a("p"),Psr=o("The model is set in evaluation mode by default using "),N1e=a("code"),Bsr=o("model.eval()"),Isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=a("code"),qsr=o("model.train()"),Nsr=l(),F(jT.$$.fragment),ZNe=l(),Bd=a("h2"),DT=a("a"),D1e=a("span"),F(KL.$$.fragment),jsr=l(),G1e=a("span"),Dsr=o("AutoModelForSemanticSegmentation"),eje=l(),Uo=a("div"),F(ZL.$$.fragment),Gsr=l(),Id=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Hz=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" class method or the "),Uz=a("a"),zsr=o("from_config()"),Wsr=o(` class
method.`),Qsr=l(),e8=a("p"),Hsr=o("This class cannot be instantiated directly using "),O1e=a("code"),Usr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),wt=a("div"),F(o8.$$.fragment),Ksr=l(),V1e=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),elr=l(),qd=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),alr=o("from_pretrained()"),nlr=o(" to load the model weights."),slr=l(),F(GT.$$.fragment),llr=l(),bo=a("div"),F(r8.$$.fragment),ilr=l(),z1e=a("p"),dlr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),clr=l(),Ua=a("p"),flr=o("The model class to instantiate is selected based on the "),W1e=a("code"),mlr=o("model_type"),glr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),hlr=o("pretrained_model_name_or_path"),plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),ulr=o("pretrained_model_name_or_path"),_lr=o(":"),blr=l(),Ja=a("ul"),OT=a("li"),U1e=a("strong"),vlr=o("beit"),Flr=o(" \u2014 "),Yz=a("a"),Tlr=o("BeitForSemanticSegmentation"),Mlr=o(" (BEiT model)"),Elr=l(),VT=a("li"),J1e=a("strong"),Clr=o("data2vec-vision"),wlr=o(" \u2014 "),Kz=a("a"),Alr=o("Data2VecVisionForSemanticSegmentation"),ylr=o(" (Data2VecVision model)"),Llr=l(),XT=a("li"),Y1e=a("strong"),xlr=o("dpt"),$lr=o(" \u2014 "),Zz=a("a"),klr=o("DPTForSemanticSegmentation"),Slr=o(" (DPT model)"),Rlr=l(),zT=a("li"),K1e=a("strong"),Plr=o("segformer"),Blr=o(" \u2014 "),eW=a("a"),Ilr=o("SegformerForSemanticSegmentation"),qlr=o(" (SegFormer model)"),Nlr=l(),WT=a("p"),jlr=o("The model is set in evaluation mode by default using "),Z1e=a("code"),Dlr=o("model.eval()"),Glr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),Olr=o("model.train()"),Vlr=l(),F(QT.$$.fragment),oje=l(),Nd=a("h2"),HT=a("a"),o2e=a("span"),F(t8.$$.fragment),Xlr=l(),r2e=a("span"),zlr=o("AutoModelForInstanceSegmentation"),rje=l(),Jo=a("div"),F(a8.$$.fragment),Wlr=l(),jd=a("p"),Qlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oW=a("a"),Hlr=o("from_pretrained()"),Ulr=o(" class method or the "),rW=a("a"),Jlr=o("from_config()"),Ylr=o(` class
method.`),Klr=l(),n8=a("p"),Zlr=o("This class cannot be instantiated directly using "),t2e=a("code"),eir=o("__init__()"),oir=o(" (throws an error)."),rir=l(),At=a("div"),F(s8.$$.fragment),tir=l(),a2e=a("p"),air=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),nir=l(),Dd=a("p"),sir=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),lir=o("not"),iir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),dir=o("from_pretrained()"),cir=o(" to load the model weights."),fir=l(),F(UT.$$.fragment),mir=l(),vo=a("div"),F(l8.$$.fragment),gir=l(),s2e=a("p"),hir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pir=l(),Ya=a("p"),uir=o("The model class to instantiate is selected based on the "),l2e=a("code"),_ir=o("model_type"),bir=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(":"),Eir=l(),c2e=a("ul"),JT=a("li"),f2e=a("strong"),Cir=o("maskformer"),wir=o(" \u2014 "),aW=a("a"),Air=o("MaskFormerForInstanceSegmentation"),yir=o(" (MaskFormer model)"),Lir=l(),YT=a("p"),xir=o("The model is set in evaluation mode by default using "),m2e=a("code"),$ir=o("model.eval()"),kir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=a("code"),Sir=o("model.train()"),Rir=l(),F(KT.$$.fragment),tje=l(),Gd=a("h2"),ZT=a("a"),h2e=a("span"),F(i8.$$.fragment),Pir=l(),p2e=a("span"),Bir=o("TFAutoModel"),aje=l(),Yo=a("div"),F(d8.$$.fragment),Iir=l(),Od=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=a("a"),Nir=o("from_pretrained()"),jir=o(" class method or the "),sW=a("a"),Dir=o("from_config()"),Gir=o(` class
method.`),Oir=l(),c8=a("p"),Vir=o("This class cannot be instantiated directly using "),u2e=a("code"),Xir=o("__init__()"),zir=o(" (throws an error)."),Wir=l(),yt=a("div"),F(f8.$$.fragment),Qir=l(),_2e=a("p"),Hir=o("Instantiates one of the base model classes of the library from a configuration."),Uir=l(),Vd=a("p"),Jir=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),Yir=o("not"),Kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Zir=o("from_pretrained()"),edr=o(" to load the model weights."),odr=l(),F(e7.$$.fragment),rdr=l(),wr=a("div"),F(m8.$$.fragment),tdr=l(),v2e=a("p"),adr=o("Instantiate one of the base model classes of the library from a pretrained model."),ndr=l(),Ka=a("p"),sdr=o("The model class to instantiate is selected based on the "),F2e=a("code"),ldr=o("model_type"),idr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(":"),gdr=l(),N=a("ul"),o7=a("li"),E2e=a("strong"),hdr=o("albert"),pdr=o(" \u2014 "),iW=a("a"),udr=o("TFAlbertModel"),_dr=o(" (ALBERT model)"),bdr=l(),r7=a("li"),C2e=a("strong"),vdr=o("bart"),Fdr=o(" \u2014 "),dW=a("a"),Tdr=o("TFBartModel"),Mdr=o(" (BART model)"),Edr=l(),t7=a("li"),w2e=a("strong"),Cdr=o("bert"),wdr=o(" \u2014 "),cW=a("a"),Adr=o("TFBertModel"),ydr=o(" (BERT model)"),Ldr=l(),a7=a("li"),A2e=a("strong"),xdr=o("blenderbot"),$dr=o(" \u2014 "),fW=a("a"),kdr=o("TFBlenderbotModel"),Sdr=o(" (Blenderbot model)"),Rdr=l(),n7=a("li"),y2e=a("strong"),Pdr=o("blenderbot-small"),Bdr=o(" \u2014 "),mW=a("a"),Idr=o("TFBlenderbotSmallModel"),qdr=o(" (BlenderbotSmall model)"),Ndr=l(),s7=a("li"),L2e=a("strong"),jdr=o("camembert"),Ddr=o(" \u2014 "),gW=a("a"),Gdr=o("TFCamembertModel"),Odr=o(" (CamemBERT model)"),Vdr=l(),l7=a("li"),x2e=a("strong"),Xdr=o("clip"),zdr=o(" \u2014 "),hW=a("a"),Wdr=o("TFCLIPModel"),Qdr=o(" (CLIP model)"),Hdr=l(),i7=a("li"),$2e=a("strong"),Udr=o("convbert"),Jdr=o(" \u2014 "),pW=a("a"),Ydr=o("TFConvBertModel"),Kdr=o(" (ConvBERT model)"),Zdr=l(),d7=a("li"),k2e=a("strong"),ecr=o("convnext"),ocr=o(" \u2014 "),uW=a("a"),rcr=o("TFConvNextModel"),tcr=o(" (ConvNext model)"),acr=l(),c7=a("li"),S2e=a("strong"),ncr=o("ctrl"),scr=o(" \u2014 "),_W=a("a"),lcr=o("TFCTRLModel"),icr=o(" (CTRL model)"),dcr=l(),f7=a("li"),R2e=a("strong"),ccr=o("data2vec-vision"),fcr=o(" \u2014 "),bW=a("a"),mcr=o("TFData2VecVisionModel"),gcr=o(" (Data2VecVision model)"),hcr=l(),m7=a("li"),P2e=a("strong"),pcr=o("deberta"),ucr=o(" \u2014 "),vW=a("a"),_cr=o("TFDebertaModel"),bcr=o(" (DeBERTa model)"),vcr=l(),g7=a("li"),B2e=a("strong"),Fcr=o("deberta-v2"),Tcr=o(" \u2014 "),FW=a("a"),Mcr=o("TFDebertaV2Model"),Ecr=o(" (DeBERTa-v2 model)"),Ccr=l(),h7=a("li"),I2e=a("strong"),wcr=o("distilbert"),Acr=o(" \u2014 "),TW=a("a"),ycr=o("TFDistilBertModel"),Lcr=o(" (DistilBERT model)"),xcr=l(),p7=a("li"),q2e=a("strong"),$cr=o("dpr"),kcr=o(" \u2014 "),MW=a("a"),Scr=o("TFDPRQuestionEncoder"),Rcr=o(" (DPR model)"),Pcr=l(),u7=a("li"),N2e=a("strong"),Bcr=o("electra"),Icr=o(" \u2014 "),EW=a("a"),qcr=o("TFElectraModel"),Ncr=o(" (ELECTRA model)"),jcr=l(),_7=a("li"),j2e=a("strong"),Dcr=o("flaubert"),Gcr=o(" \u2014 "),CW=a("a"),Ocr=o("TFFlaubertModel"),Vcr=o(" (FlauBERT model)"),Xcr=l(),Is=a("li"),D2e=a("strong"),zcr=o("funnel"),Wcr=o(" \u2014 "),wW=a("a"),Qcr=o("TFFunnelModel"),Hcr=o(" or "),AW=a("a"),Ucr=o("TFFunnelBaseModel"),Jcr=o(" (Funnel Transformer model)"),Ycr=l(),b7=a("li"),G2e=a("strong"),Kcr=o("gpt2"),Zcr=o(" \u2014 "),yW=a("a"),efr=o("TFGPT2Model"),ofr=o(" (OpenAI GPT-2 model)"),rfr=l(),v7=a("li"),O2e=a("strong"),tfr=o("gptj"),afr=o(" \u2014 "),LW=a("a"),nfr=o("TFGPTJModel"),sfr=o(" (GPT-J model)"),lfr=l(),F7=a("li"),V2e=a("strong"),ifr=o("hubert"),dfr=o(" \u2014 "),xW=a("a"),cfr=o("TFHubertModel"),ffr=o(" (Hubert model)"),mfr=l(),T7=a("li"),X2e=a("strong"),gfr=o("layoutlm"),hfr=o(" \u2014 "),$W=a("a"),pfr=o("TFLayoutLMModel"),ufr=o(" (LayoutLM model)"),_fr=l(),M7=a("li"),z2e=a("strong"),bfr=o("led"),vfr=o(" \u2014 "),kW=a("a"),Ffr=o("TFLEDModel"),Tfr=o(" (LED model)"),Mfr=l(),E7=a("li"),W2e=a("strong"),Efr=o("longformer"),Cfr=o(" \u2014 "),SW=a("a"),wfr=o("TFLongformerModel"),Afr=o(" (Longformer model)"),yfr=l(),C7=a("li"),Q2e=a("strong"),Lfr=o("lxmert"),xfr=o(" \u2014 "),RW=a("a"),$fr=o("TFLxmertModel"),kfr=o(" (LXMERT model)"),Sfr=l(),w7=a("li"),H2e=a("strong"),Rfr=o("marian"),Pfr=o(" \u2014 "),PW=a("a"),Bfr=o("TFMarianModel"),Ifr=o(" (Marian model)"),qfr=l(),A7=a("li"),U2e=a("strong"),Nfr=o("mbart"),jfr=o(" \u2014 "),BW=a("a"),Dfr=o("TFMBartModel"),Gfr=o(" (mBART model)"),Ofr=l(),y7=a("li"),J2e=a("strong"),Vfr=o("mobilebert"),Xfr=o(" \u2014 "),IW=a("a"),zfr=o("TFMobileBertModel"),Wfr=o(" (MobileBERT model)"),Qfr=l(),L7=a("li"),Y2e=a("strong"),Hfr=o("mpnet"),Ufr=o(" \u2014 "),qW=a("a"),Jfr=o("TFMPNetModel"),Yfr=o(" (MPNet model)"),Kfr=l(),x7=a("li"),K2e=a("strong"),Zfr=o("mt5"),emr=o(" \u2014 "),NW=a("a"),omr=o("TFMT5Model"),rmr=o(" (mT5 model)"),tmr=l(),$7=a("li"),Z2e=a("strong"),amr=o("openai-gpt"),nmr=o(" \u2014 "),jW=a("a"),smr=o("TFOpenAIGPTModel"),lmr=o(" (OpenAI GPT model)"),imr=l(),k7=a("li"),ebe=a("strong"),dmr=o("pegasus"),cmr=o(" \u2014 "),DW=a("a"),fmr=o("TFPegasusModel"),mmr=o(" (Pegasus model)"),gmr=l(),S7=a("li"),obe=a("strong"),hmr=o("rembert"),pmr=o(" \u2014 "),GW=a("a"),umr=o("TFRemBertModel"),_mr=o(" (RemBERT model)"),bmr=l(),R7=a("li"),rbe=a("strong"),vmr=o("roberta"),Fmr=o(" \u2014 "),OW=a("a"),Tmr=o("TFRobertaModel"),Mmr=o(" (RoBERTa model)"),Emr=l(),P7=a("li"),tbe=a("strong"),Cmr=o("roformer"),wmr=o(" \u2014 "),VW=a("a"),Amr=o("TFRoFormerModel"),ymr=o(" (RoFormer model)"),Lmr=l(),B7=a("li"),abe=a("strong"),xmr=o("speech_to_text"),$mr=o(" \u2014 "),XW=a("a"),kmr=o("TFSpeech2TextModel"),Smr=o(" (Speech2Text model)"),Rmr=l(),I7=a("li"),nbe=a("strong"),Pmr=o("swin"),Bmr=o(" \u2014 "),zW=a("a"),Imr=o("TFSwinModel"),qmr=o(" (Swin model)"),Nmr=l(),q7=a("li"),sbe=a("strong"),jmr=o("t5"),Dmr=o(" \u2014 "),WW=a("a"),Gmr=o("TFT5Model"),Omr=o(" (T5 model)"),Vmr=l(),N7=a("li"),lbe=a("strong"),Xmr=o("tapas"),zmr=o(" \u2014 "),QW=a("a"),Wmr=o("TFTapasModel"),Qmr=o(" (TAPAS model)"),Hmr=l(),j7=a("li"),ibe=a("strong"),Umr=o("transfo-xl"),Jmr=o(" \u2014 "),HW=a("a"),Ymr=o("TFTransfoXLModel"),Kmr=o(" (Transformer-XL model)"),Zmr=l(),D7=a("li"),dbe=a("strong"),egr=o("vit"),ogr=o(" \u2014 "),UW=a("a"),rgr=o("TFViTModel"),tgr=o(" (ViT model)"),agr=l(),G7=a("li"),cbe=a("strong"),ngr=o("vit_mae"),sgr=o(" \u2014 "),JW=a("a"),lgr=o("TFViTMAEModel"),igr=o(" (ViTMAE model)"),dgr=l(),O7=a("li"),fbe=a("strong"),cgr=o("wav2vec2"),fgr=o(" \u2014 "),YW=a("a"),mgr=o("TFWav2Vec2Model"),ggr=o(" (Wav2Vec2 model)"),hgr=l(),V7=a("li"),mbe=a("strong"),pgr=o("xlm"),ugr=o(" \u2014 "),KW=a("a"),_gr=o("TFXLMModel"),bgr=o(" (XLM model)"),vgr=l(),X7=a("li"),gbe=a("strong"),Fgr=o("xlm-roberta"),Tgr=o(" \u2014 "),ZW=a("a"),Mgr=o("TFXLMRobertaModel"),Egr=o(" (XLM-RoBERTa model)"),Cgr=l(),z7=a("li"),hbe=a("strong"),wgr=o("xlnet"),Agr=o(" \u2014 "),eQ=a("a"),ygr=o("TFXLNetModel"),Lgr=o(" (XLNet model)"),xgr=l(),F(W7.$$.fragment),nje=l(),Xd=a("h2"),Q7=a("a"),pbe=a("span"),F(g8.$$.fragment),$gr=l(),ube=a("span"),kgr=o("TFAutoModelForPreTraining"),sje=l(),Ko=a("div"),F(h8.$$.fragment),Sgr=l(),zd=a("p"),Rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=a("a"),Pgr=o("from_pretrained()"),Bgr=o(" class method or the "),rQ=a("a"),Igr=o("from_config()"),qgr=o(` class
method.`),Ngr=l(),p8=a("p"),jgr=o("This class cannot be instantiated directly using "),_be=a("code"),Dgr=o("__init__()"),Ggr=o(" (throws an error)."),Ogr=l(),Lt=a("div"),F(u8.$$.fragment),Vgr=l(),bbe=a("p"),Xgr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zgr=l(),Wd=a("p"),Wgr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),Qgr=o("not"),Hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),Ugr=o("from_pretrained()"),Jgr=o(" to load the model weights."),Ygr=l(),F(H7.$$.fragment),Kgr=l(),Ar=a("div"),F(_8.$$.fragment),Zgr=l(),Fbe=a("p"),ehr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ohr=l(),Za=a("p"),rhr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),thr=o("model_type"),ahr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(":"),dhr=l(),se=a("ul"),U7=a("li"),Cbe=a("strong"),chr=o("albert"),fhr=o(" \u2014 "),aQ=a("a"),mhr=o("TFAlbertForPreTraining"),ghr=o(" (ALBERT model)"),hhr=l(),J7=a("li"),wbe=a("strong"),phr=o("bart"),uhr=o(" \u2014 "),nQ=a("a"),_hr=o("TFBartForConditionalGeneration"),bhr=o(" (BART model)"),vhr=l(),Y7=a("li"),Abe=a("strong"),Fhr=o("bert"),Thr=o(" \u2014 "),sQ=a("a"),Mhr=o("TFBertForPreTraining"),Ehr=o(" (BERT model)"),Chr=l(),K7=a("li"),ybe=a("strong"),whr=o("camembert"),Ahr=o(" \u2014 "),lQ=a("a"),yhr=o("TFCamembertForMaskedLM"),Lhr=o(" (CamemBERT model)"),xhr=l(),Z7=a("li"),Lbe=a("strong"),$hr=o("ctrl"),khr=o(" \u2014 "),iQ=a("a"),Shr=o("TFCTRLLMHeadModel"),Rhr=o(" (CTRL model)"),Phr=l(),eM=a("li"),xbe=a("strong"),Bhr=o("distilbert"),Ihr=o(" \u2014 "),dQ=a("a"),qhr=o("TFDistilBertForMaskedLM"),Nhr=o(" (DistilBERT model)"),jhr=l(),oM=a("li"),$be=a("strong"),Dhr=o("electra"),Ghr=o(" \u2014 "),cQ=a("a"),Ohr=o("TFElectraForPreTraining"),Vhr=o(" (ELECTRA model)"),Xhr=l(),rM=a("li"),kbe=a("strong"),zhr=o("flaubert"),Whr=o(" \u2014 "),fQ=a("a"),Qhr=o("TFFlaubertWithLMHeadModel"),Hhr=o(" (FlauBERT model)"),Uhr=l(),tM=a("li"),Sbe=a("strong"),Jhr=o("funnel"),Yhr=o(" \u2014 "),mQ=a("a"),Khr=o("TFFunnelForPreTraining"),Zhr=o(" (Funnel Transformer model)"),epr=l(),aM=a("li"),Rbe=a("strong"),opr=o("gpt2"),rpr=o(" \u2014 "),gQ=a("a"),tpr=o("TFGPT2LMHeadModel"),apr=o(" (OpenAI GPT-2 model)"),npr=l(),nM=a("li"),Pbe=a("strong"),spr=o("layoutlm"),lpr=o(" \u2014 "),hQ=a("a"),ipr=o("TFLayoutLMForMaskedLM"),dpr=o(" (LayoutLM model)"),cpr=l(),sM=a("li"),Bbe=a("strong"),fpr=o("lxmert"),mpr=o(" \u2014 "),pQ=a("a"),gpr=o("TFLxmertForPreTraining"),hpr=o(" (LXMERT model)"),ppr=l(),lM=a("li"),Ibe=a("strong"),upr=o("mobilebert"),_pr=o(" \u2014 "),uQ=a("a"),bpr=o("TFMobileBertForPreTraining"),vpr=o(" (MobileBERT model)"),Fpr=l(),iM=a("li"),qbe=a("strong"),Tpr=o("mpnet"),Mpr=o(" \u2014 "),_Q=a("a"),Epr=o("TFMPNetForMaskedLM"),Cpr=o(" (MPNet model)"),wpr=l(),dM=a("li"),Nbe=a("strong"),Apr=o("openai-gpt"),ypr=o(" \u2014 "),bQ=a("a"),Lpr=o("TFOpenAIGPTLMHeadModel"),xpr=o(" (OpenAI GPT model)"),$pr=l(),cM=a("li"),jbe=a("strong"),kpr=o("roberta"),Spr=o(" \u2014 "),vQ=a("a"),Rpr=o("TFRobertaForMaskedLM"),Ppr=o(" (RoBERTa model)"),Bpr=l(),fM=a("li"),Dbe=a("strong"),Ipr=o("t5"),qpr=o(" \u2014 "),FQ=a("a"),Npr=o("TFT5ForConditionalGeneration"),jpr=o(" (T5 model)"),Dpr=l(),mM=a("li"),Gbe=a("strong"),Gpr=o("tapas"),Opr=o(" \u2014 "),TQ=a("a"),Vpr=o("TFTapasForMaskedLM"),Xpr=o(" (TAPAS model)"),zpr=l(),gM=a("li"),Obe=a("strong"),Wpr=o("transfo-xl"),Qpr=o(" \u2014 "),MQ=a("a"),Hpr=o("TFTransfoXLLMHeadModel"),Upr=o(" (Transformer-XL model)"),Jpr=l(),hM=a("li"),Vbe=a("strong"),Ypr=o("vit_mae"),Kpr=o(" \u2014 "),EQ=a("a"),Zpr=o("TFViTMAEForPreTraining"),eur=o(" (ViTMAE model)"),our=l(),pM=a("li"),Xbe=a("strong"),rur=o("xlm"),tur=o(" \u2014 "),CQ=a("a"),aur=o("TFXLMWithLMHeadModel"),nur=o(" (XLM model)"),sur=l(),uM=a("li"),zbe=a("strong"),lur=o("xlm-roberta"),iur=o(" \u2014 "),wQ=a("a"),dur=o("TFXLMRobertaForMaskedLM"),cur=o(" (XLM-RoBERTa model)"),fur=l(),_M=a("li"),Wbe=a("strong"),mur=o("xlnet"),gur=o(" \u2014 "),AQ=a("a"),hur=o("TFXLNetLMHeadModel"),pur=o(" (XLNet model)"),uur=l(),F(bM.$$.fragment),lje=l(),Qd=a("h2"),vM=a("a"),Qbe=a("span"),F(b8.$$.fragment),_ur=l(),Hbe=a("span"),bur=o("TFAutoModelForCausalLM"),ije=l(),Zo=a("div"),F(v8.$$.fragment),vur=l(),Hd=a("p"),Fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=a("a"),Tur=o("from_pretrained()"),Mur=o(" class method or the "),LQ=a("a"),Eur=o("from_config()"),Cur=o(` class
method.`),wur=l(),F8=a("p"),Aur=o("This class cannot be instantiated directly using "),Ube=a("code"),yur=o("__init__()"),Lur=o(" (throws an error)."),xur=l(),xt=a("div"),F(T8.$$.fragment),$ur=l(),Jbe=a("p"),kur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Sur=l(),Ud=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),Pur=o("not"),Bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Iur=o("from_pretrained()"),qur=o(" to load the model weights."),Nur=l(),F(FM.$$.fragment),jur=l(),yr=a("div"),F(M8.$$.fragment),Dur=l(),Kbe=a("p"),Gur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Our=l(),en=a("p"),Vur=o("The model class to instantiate is selected based on the "),Zbe=a("code"),Xur=o("model_type"),zur=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),Wur=o("pretrained_model_name_or_path"),Qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(":"),Jur=l(),Me=a("ul"),TM=a("li"),rve=a("strong"),Yur=o("bert"),Kur=o(" \u2014 "),$Q=a("a"),Zur=o("TFBertLMHeadModel"),e_r=o(" (BERT model)"),o_r=l(),MM=a("li"),tve=a("strong"),r_r=o("camembert"),t_r=o(" \u2014 "),kQ=a("a"),a_r=o("TFCamembertForCausalLM"),n_r=o(" (CamemBERT model)"),s_r=l(),EM=a("li"),ave=a("strong"),l_r=o("ctrl"),i_r=o(" \u2014 "),SQ=a("a"),d_r=o("TFCTRLLMHeadModel"),c_r=o(" (CTRL model)"),f_r=l(),CM=a("li"),nve=a("strong"),m_r=o("gpt2"),g_r=o(" \u2014 "),RQ=a("a"),h_r=o("TFGPT2LMHeadModel"),p_r=o(" (OpenAI GPT-2 model)"),u_r=l(),wM=a("li"),sve=a("strong"),__r=o("gptj"),b_r=o(" \u2014 "),PQ=a("a"),v_r=o("TFGPTJForCausalLM"),F_r=o(" (GPT-J model)"),T_r=l(),AM=a("li"),lve=a("strong"),M_r=o("openai-gpt"),E_r=o(" \u2014 "),BQ=a("a"),C_r=o("TFOpenAIGPTLMHeadModel"),w_r=o(" (OpenAI GPT model)"),A_r=l(),yM=a("li"),ive=a("strong"),y_r=o("rembert"),L_r=o(" \u2014 "),IQ=a("a"),x_r=o("TFRemBertForCausalLM"),$_r=o(" (RemBERT model)"),k_r=l(),LM=a("li"),dve=a("strong"),S_r=o("roberta"),R_r=o(" \u2014 "),qQ=a("a"),P_r=o("TFRobertaForCausalLM"),B_r=o(" (RoBERTa model)"),I_r=l(),xM=a("li"),cve=a("strong"),q_r=o("roformer"),N_r=o(" \u2014 "),NQ=a("a"),j_r=o("TFRoFormerForCausalLM"),D_r=o(" (RoFormer model)"),G_r=l(),$M=a("li"),fve=a("strong"),O_r=o("transfo-xl"),V_r=o(" \u2014 "),jQ=a("a"),X_r=o("TFTransfoXLLMHeadModel"),z_r=o(" (Transformer-XL model)"),W_r=l(),kM=a("li"),mve=a("strong"),Q_r=o("xlm"),H_r=o(" \u2014 "),DQ=a("a"),U_r=o("TFXLMWithLMHeadModel"),J_r=o(" (XLM model)"),Y_r=l(),SM=a("li"),gve=a("strong"),K_r=o("xlnet"),Z_r=o(" \u2014 "),GQ=a("a"),e1r=o("TFXLNetLMHeadModel"),o1r=o(" (XLNet model)"),r1r=l(),F(RM.$$.fragment),dje=l(),Jd=a("h2"),PM=a("a"),hve=a("span"),F(E8.$$.fragment),t1r=l(),pve=a("span"),a1r=o("TFAutoModelForImageClassification"),cje=l(),er=a("div"),F(C8.$$.fragment),n1r=l(),Yd=a("p"),s1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=a("a"),l1r=o("from_pretrained()"),i1r=o(" class method or the "),VQ=a("a"),d1r=o("from_config()"),c1r=o(` class
method.`),f1r=l(),w8=a("p"),m1r=o("This class cannot be instantiated directly using "),uve=a("code"),g1r=o("__init__()"),h1r=o(" (throws an error)."),p1r=l(),$t=a("div"),F(A8.$$.fragment),u1r=l(),_ve=a("p"),_1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b1r=l(),Kd=a("p"),v1r=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),F1r=o("not"),T1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),M1r=o("from_pretrained()"),E1r=o(" to load the model weights."),C1r=l(),F(BM.$$.fragment),w1r=l(),Lr=a("div"),F(y8.$$.fragment),A1r=l(),vve=a("p"),y1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),L1r=l(),on=a("p"),x1r=o("The model class to instantiate is selected based on the "),Fve=a("code"),$1r=o("model_type"),k1r=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),S1r=o("pretrained_model_name_or_path"),R1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),P1r=o("pretrained_model_name_or_path"),B1r=o(":"),I1r=l(),rn=a("ul"),IM=a("li"),Eve=a("strong"),q1r=o("convnext"),N1r=o(" \u2014 "),zQ=a("a"),j1r=o("TFConvNextForImageClassification"),D1r=o(" (ConvNext model)"),G1r=l(),qM=a("li"),Cve=a("strong"),O1r=o("data2vec-vision"),V1r=o(" \u2014 "),WQ=a("a"),X1r=o("TFData2VecVisionForImageClassification"),z1r=o(" (Data2VecVision model)"),W1r=l(),NM=a("li"),wve=a("strong"),Q1r=o("swin"),H1r=o(" \u2014 "),QQ=a("a"),U1r=o("TFSwinForImageClassification"),J1r=o(" (Swin model)"),Y1r=l(),jM=a("li"),Ave=a("strong"),K1r=o("vit"),Z1r=o(" \u2014 "),HQ=a("a"),e2r=o("TFViTForImageClassification"),o2r=o(" (ViT model)"),r2r=l(),F(DM.$$.fragment),fje=l(),Zd=a("h2"),GM=a("a"),yve=a("span"),F(L8.$$.fragment),t2r=l(),Lve=a("span"),a2r=o("TFAutoModelForMaskedLM"),mje=l(),or=a("div"),F(x8.$$.fragment),n2r=l(),ec=a("p"),s2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UQ=a("a"),l2r=o("from_pretrained()"),i2r=o(" class method or the "),JQ=a("a"),d2r=o("from_config()"),c2r=o(` class
method.`),f2r=l(),$8=a("p"),m2r=o("This class cannot be instantiated directly using "),xve=a("code"),g2r=o("__init__()"),h2r=o(" (throws an error)."),p2r=l(),kt=a("div"),F(k8.$$.fragment),u2r=l(),$ve=a("p"),_2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b2r=l(),oc=a("p"),v2r=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),F2r=o("not"),T2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),M2r=o("from_pretrained()"),E2r=o(" to load the model weights."),C2r=l(),F(OM.$$.fragment),w2r=l(),xr=a("div"),F(S8.$$.fragment),A2r=l(),Sve=a("p"),y2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L2r=l(),tn=a("p"),x2r=o("The model class to instantiate is selected based on the "),Rve=a("code"),$2r=o("model_type"),k2r=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),S2r=o("pretrained_model_name_or_path"),R2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),P2r=o("pretrained_model_name_or_path"),B2r=o(":"),I2r=l(),ie=a("ul"),VM=a("li"),Ive=a("strong"),q2r=o("albert"),N2r=o(" \u2014 "),KQ=a("a"),j2r=o("TFAlbertForMaskedLM"),D2r=o(" (ALBERT model)"),G2r=l(),XM=a("li"),qve=a("strong"),O2r=o("bert"),V2r=o(" \u2014 "),ZQ=a("a"),X2r=o("TFBertForMaskedLM"),z2r=o(" (BERT model)"),W2r=l(),zM=a("li"),Nve=a("strong"),Q2r=o("camembert"),H2r=o(" \u2014 "),eH=a("a"),U2r=o("TFCamembertForMaskedLM"),J2r=o(" (CamemBERT model)"),Y2r=l(),WM=a("li"),jve=a("strong"),K2r=o("convbert"),Z2r=o(" \u2014 "),oH=a("a"),ebr=o("TFConvBertForMaskedLM"),obr=o(" (ConvBERT model)"),rbr=l(),QM=a("li"),Dve=a("strong"),tbr=o("deberta"),abr=o(" \u2014 "),rH=a("a"),nbr=o("TFDebertaForMaskedLM"),sbr=o(" (DeBERTa model)"),lbr=l(),HM=a("li"),Gve=a("strong"),ibr=o("deberta-v2"),dbr=o(" \u2014 "),tH=a("a"),cbr=o("TFDebertaV2ForMaskedLM"),fbr=o(" (DeBERTa-v2 model)"),mbr=l(),UM=a("li"),Ove=a("strong"),gbr=o("distilbert"),hbr=o(" \u2014 "),aH=a("a"),pbr=o("TFDistilBertForMaskedLM"),ubr=o(" (DistilBERT model)"),_br=l(),JM=a("li"),Vve=a("strong"),bbr=o("electra"),vbr=o(" \u2014 "),nH=a("a"),Fbr=o("TFElectraForMaskedLM"),Tbr=o(" (ELECTRA model)"),Mbr=l(),YM=a("li"),Xve=a("strong"),Ebr=o("flaubert"),Cbr=o(" \u2014 "),sH=a("a"),wbr=o("TFFlaubertWithLMHeadModel"),Abr=o(" (FlauBERT model)"),ybr=l(),KM=a("li"),zve=a("strong"),Lbr=o("funnel"),xbr=o(" \u2014 "),lH=a("a"),$br=o("TFFunnelForMaskedLM"),kbr=o(" (Funnel Transformer model)"),Sbr=l(),ZM=a("li"),Wve=a("strong"),Rbr=o("layoutlm"),Pbr=o(" \u2014 "),iH=a("a"),Bbr=o("TFLayoutLMForMaskedLM"),Ibr=o(" (LayoutLM model)"),qbr=l(),e4=a("li"),Qve=a("strong"),Nbr=o("longformer"),jbr=o(" \u2014 "),dH=a("a"),Dbr=o("TFLongformerForMaskedLM"),Gbr=o(" (Longformer model)"),Obr=l(),o4=a("li"),Hve=a("strong"),Vbr=o("mobilebert"),Xbr=o(" \u2014 "),cH=a("a"),zbr=o("TFMobileBertForMaskedLM"),Wbr=o(" (MobileBERT model)"),Qbr=l(),r4=a("li"),Uve=a("strong"),Hbr=o("mpnet"),Ubr=o(" \u2014 "),fH=a("a"),Jbr=o("TFMPNetForMaskedLM"),Ybr=o(" (MPNet model)"),Kbr=l(),t4=a("li"),Jve=a("strong"),Zbr=o("rembert"),evr=o(" \u2014 "),mH=a("a"),ovr=o("TFRemBertForMaskedLM"),rvr=o(" (RemBERT model)"),tvr=l(),a4=a("li"),Yve=a("strong"),avr=o("roberta"),nvr=o(" \u2014 "),gH=a("a"),svr=o("TFRobertaForMaskedLM"),lvr=o(" (RoBERTa model)"),ivr=l(),n4=a("li"),Kve=a("strong"),dvr=o("roformer"),cvr=o(" \u2014 "),hH=a("a"),fvr=o("TFRoFormerForMaskedLM"),mvr=o(" (RoFormer model)"),gvr=l(),s4=a("li"),Zve=a("strong"),hvr=o("tapas"),pvr=o(" \u2014 "),pH=a("a"),uvr=o("TFTapasForMaskedLM"),_vr=o(" (TAPAS model)"),bvr=l(),l4=a("li"),e3e=a("strong"),vvr=o("xlm"),Fvr=o(" \u2014 "),uH=a("a"),Tvr=o("TFXLMWithLMHeadModel"),Mvr=o(" (XLM model)"),Evr=l(),i4=a("li"),o3e=a("strong"),Cvr=o("xlm-roberta"),wvr=o(" \u2014 "),_H=a("a"),Avr=o("TFXLMRobertaForMaskedLM"),yvr=o(" (XLM-RoBERTa model)"),Lvr=l(),F(d4.$$.fragment),gje=l(),rc=a("h2"),c4=a("a"),r3e=a("span"),F(R8.$$.fragment),xvr=l(),t3e=a("span"),$vr=o("TFAutoModelForSeq2SeqLM"),hje=l(),rr=a("div"),F(P8.$$.fragment),kvr=l(),tc=a("p"),Svr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bH=a("a"),Rvr=o("from_pretrained()"),Pvr=o(" class method or the "),vH=a("a"),Bvr=o("from_config()"),Ivr=o(` class
method.`),qvr=l(),B8=a("p"),Nvr=o("This class cannot be instantiated directly using "),a3e=a("code"),jvr=o("__init__()"),Dvr=o(" (throws an error)."),Gvr=l(),St=a("div"),F(I8.$$.fragment),Ovr=l(),n3e=a("p"),Vvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xvr=l(),ac=a("p"),zvr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),Wvr=o("not"),Qvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),Hvr=o("from_pretrained()"),Uvr=o(" to load the model weights."),Jvr=l(),F(f4.$$.fragment),Yvr=l(),$r=a("div"),F(q8.$$.fragment),Kvr=l(),l3e=a("p"),Zvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e3r=l(),an=a("p"),o3r=o("The model class to instantiate is selected based on the "),i3e=a("code"),r3r=o("model_type"),t3r=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),a3r=o("pretrained_model_name_or_path"),n3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(":"),i3r=l(),ye=a("ul"),m4=a("li"),f3e=a("strong"),d3r=o("bart"),c3r=o(" \u2014 "),TH=a("a"),f3r=o("TFBartForConditionalGeneration"),m3r=o(" (BART model)"),g3r=l(),g4=a("li"),m3e=a("strong"),h3r=o("blenderbot"),p3r=o(" \u2014 "),MH=a("a"),u3r=o("TFBlenderbotForConditionalGeneration"),_3r=o(" (Blenderbot model)"),b3r=l(),h4=a("li"),g3e=a("strong"),v3r=o("blenderbot-small"),F3r=o(" \u2014 "),EH=a("a"),T3r=o("TFBlenderbotSmallForConditionalGeneration"),M3r=o(" (BlenderbotSmall model)"),E3r=l(),p4=a("li"),h3e=a("strong"),C3r=o("encoder-decoder"),w3r=o(" \u2014 "),CH=a("a"),A3r=o("TFEncoderDecoderModel"),y3r=o(" (Encoder decoder model)"),L3r=l(),u4=a("li"),p3e=a("strong"),x3r=o("led"),$3r=o(" \u2014 "),wH=a("a"),k3r=o("TFLEDForConditionalGeneration"),S3r=o(" (LED model)"),R3r=l(),_4=a("li"),u3e=a("strong"),P3r=o("marian"),B3r=o(" \u2014 "),AH=a("a"),I3r=o("TFMarianMTModel"),q3r=o(" (Marian model)"),N3r=l(),b4=a("li"),_3e=a("strong"),j3r=o("mbart"),D3r=o(" \u2014 "),yH=a("a"),G3r=o("TFMBartForConditionalGeneration"),O3r=o(" (mBART model)"),V3r=l(),v4=a("li"),b3e=a("strong"),X3r=o("mt5"),z3r=o(" \u2014 "),LH=a("a"),W3r=o("TFMT5ForConditionalGeneration"),Q3r=o(" (mT5 model)"),H3r=l(),F4=a("li"),v3e=a("strong"),U3r=o("pegasus"),J3r=o(" \u2014 "),xH=a("a"),Y3r=o("TFPegasusForConditionalGeneration"),K3r=o(" (Pegasus model)"),Z3r=l(),T4=a("li"),F3e=a("strong"),eFr=o("t5"),oFr=o(" \u2014 "),$H=a("a"),rFr=o("TFT5ForConditionalGeneration"),tFr=o(" (T5 model)"),aFr=l(),F(M4.$$.fragment),pje=l(),nc=a("h2"),E4=a("a"),T3e=a("span"),F(N8.$$.fragment),nFr=l(),M3e=a("span"),sFr=o("TFAutoModelForSequenceClassification"),uje=l(),tr=a("div"),F(j8.$$.fragment),lFr=l(),sc=a("p"),iFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=a("a"),dFr=o("from_pretrained()"),cFr=o(" class method or the "),SH=a("a"),fFr=o("from_config()"),mFr=o(` class
method.`),gFr=l(),D8=a("p"),hFr=o("This class cannot be instantiated directly using "),E3e=a("code"),pFr=o("__init__()"),uFr=o(" (throws an error)."),_Fr=l(),Rt=a("div"),F(G8.$$.fragment),bFr=l(),C3e=a("p"),vFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FFr=l(),lc=a("p"),TFr=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),MFr=o("not"),EFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),CFr=o("from_pretrained()"),wFr=o(" to load the model weights."),AFr=l(),F(C4.$$.fragment),yFr=l(),kr=a("div"),F(O8.$$.fragment),LFr=l(),A3e=a("p"),xFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Fr=l(),nn=a("p"),kFr=o("The model class to instantiate is selected based on the "),y3e=a("code"),SFr=o("model_type"),RFr=o(` property of the config object (either
passed as an argument or loaded from `),L3e=a("code"),PFr=o("pretrained_model_name_or_path"),BFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),IFr=o("pretrained_model_name_or_path"),qFr=o(":"),NFr=l(),oe=a("ul"),w4=a("li"),$3e=a("strong"),jFr=o("albert"),DFr=o(" \u2014 "),PH=a("a"),GFr=o("TFAlbertForSequenceClassification"),OFr=o(" (ALBERT model)"),VFr=l(),A4=a("li"),k3e=a("strong"),XFr=o("bert"),zFr=o(" \u2014 "),BH=a("a"),WFr=o("TFBertForSequenceClassification"),QFr=o(" (BERT model)"),HFr=l(),y4=a("li"),S3e=a("strong"),UFr=o("camembert"),JFr=o(" \u2014 "),IH=a("a"),YFr=o("TFCamembertForSequenceClassification"),KFr=o(" (CamemBERT model)"),ZFr=l(),L4=a("li"),R3e=a("strong"),eTr=o("convbert"),oTr=o(" \u2014 "),qH=a("a"),rTr=o("TFConvBertForSequenceClassification"),tTr=o(" (ConvBERT model)"),aTr=l(),x4=a("li"),P3e=a("strong"),nTr=o("ctrl"),sTr=o(" \u2014 "),NH=a("a"),lTr=o("TFCTRLForSequenceClassification"),iTr=o(" (CTRL model)"),dTr=l(),$4=a("li"),B3e=a("strong"),cTr=o("deberta"),fTr=o(" \u2014 "),jH=a("a"),mTr=o("TFDebertaForSequenceClassification"),gTr=o(" (DeBERTa model)"),hTr=l(),k4=a("li"),I3e=a("strong"),pTr=o("deberta-v2"),uTr=o(" \u2014 "),DH=a("a"),_Tr=o("TFDebertaV2ForSequenceClassification"),bTr=o(" (DeBERTa-v2 model)"),vTr=l(),S4=a("li"),q3e=a("strong"),FTr=o("distilbert"),TTr=o(" \u2014 "),GH=a("a"),MTr=o("TFDistilBertForSequenceClassification"),ETr=o(" (DistilBERT model)"),CTr=l(),R4=a("li"),N3e=a("strong"),wTr=o("electra"),ATr=o(" \u2014 "),OH=a("a"),yTr=o("TFElectraForSequenceClassification"),LTr=o(" (ELECTRA model)"),xTr=l(),P4=a("li"),j3e=a("strong"),$Tr=o("flaubert"),kTr=o(" \u2014 "),VH=a("a"),STr=o("TFFlaubertForSequenceClassification"),RTr=o(" (FlauBERT model)"),PTr=l(),B4=a("li"),D3e=a("strong"),BTr=o("funnel"),ITr=o(" \u2014 "),XH=a("a"),qTr=o("TFFunnelForSequenceClassification"),NTr=o(" (Funnel Transformer model)"),jTr=l(),I4=a("li"),G3e=a("strong"),DTr=o("gpt2"),GTr=o(" \u2014 "),zH=a("a"),OTr=o("TFGPT2ForSequenceClassification"),VTr=o(" (OpenAI GPT-2 model)"),XTr=l(),q4=a("li"),O3e=a("strong"),zTr=o("gptj"),WTr=o(" \u2014 "),WH=a("a"),QTr=o("TFGPTJForSequenceClassification"),HTr=o(" (GPT-J model)"),UTr=l(),N4=a("li"),V3e=a("strong"),JTr=o("layoutlm"),YTr=o(" \u2014 "),QH=a("a"),KTr=o("TFLayoutLMForSequenceClassification"),ZTr=o(" (LayoutLM model)"),e7r=l(),j4=a("li"),X3e=a("strong"),o7r=o("longformer"),r7r=o(" \u2014 "),HH=a("a"),t7r=o("TFLongformerForSequenceClassification"),a7r=o(" (Longformer model)"),n7r=l(),D4=a("li"),z3e=a("strong"),s7r=o("mobilebert"),l7r=o(" \u2014 "),UH=a("a"),i7r=o("TFMobileBertForSequenceClassification"),d7r=o(" (MobileBERT model)"),c7r=l(),G4=a("li"),W3e=a("strong"),f7r=o("mpnet"),m7r=o(" \u2014 "),JH=a("a"),g7r=o("TFMPNetForSequenceClassification"),h7r=o(" (MPNet model)"),p7r=l(),O4=a("li"),Q3e=a("strong"),u7r=o("openai-gpt"),_7r=o(" \u2014 "),YH=a("a"),b7r=o("TFOpenAIGPTForSequenceClassification"),v7r=o(" (OpenAI GPT model)"),F7r=l(),V4=a("li"),H3e=a("strong"),T7r=o("rembert"),M7r=o(" \u2014 "),KH=a("a"),E7r=o("TFRemBertForSequenceClassification"),C7r=o(" (RemBERT model)"),w7r=l(),X4=a("li"),U3e=a("strong"),A7r=o("roberta"),y7r=o(" \u2014 "),ZH=a("a"),L7r=o("TFRobertaForSequenceClassification"),x7r=o(" (RoBERTa model)"),$7r=l(),z4=a("li"),J3e=a("strong"),k7r=o("roformer"),S7r=o(" \u2014 "),eU=a("a"),R7r=o("TFRoFormerForSequenceClassification"),P7r=o(" (RoFormer model)"),B7r=l(),W4=a("li"),Y3e=a("strong"),I7r=o("tapas"),q7r=o(" \u2014 "),oU=a("a"),N7r=o("TFTapasForSequenceClassification"),j7r=o(" (TAPAS model)"),D7r=l(),Q4=a("li"),K3e=a("strong"),G7r=o("transfo-xl"),O7r=o(" \u2014 "),rU=a("a"),V7r=o("TFTransfoXLForSequenceClassification"),X7r=o(" (Transformer-XL model)"),z7r=l(),H4=a("li"),Z3e=a("strong"),W7r=o("xlm"),Q7r=o(" \u2014 "),tU=a("a"),H7r=o("TFXLMForSequenceClassification"),U7r=o(" (XLM model)"),J7r=l(),U4=a("li"),eFe=a("strong"),Y7r=o("xlm-roberta"),K7r=o(" \u2014 "),aU=a("a"),Z7r=o("TFXLMRobertaForSequenceClassification"),eMr=o(" (XLM-RoBERTa model)"),oMr=l(),J4=a("li"),oFe=a("strong"),rMr=o("xlnet"),tMr=o(" \u2014 "),nU=a("a"),aMr=o("TFXLNetForSequenceClassification"),nMr=o(" (XLNet model)"),sMr=l(),F(Y4.$$.fragment),_je=l(),ic=a("h2"),K4=a("a"),rFe=a("span"),F(V8.$$.fragment),lMr=l(),tFe=a("span"),iMr=o("TFAutoModelForMultipleChoice"),bje=l(),ar=a("div"),F(X8.$$.fragment),dMr=l(),dc=a("p"),cMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sU=a("a"),fMr=o("from_pretrained()"),mMr=o(" class method or the "),lU=a("a"),gMr=o("from_config()"),hMr=o(` class
method.`),pMr=l(),z8=a("p"),uMr=o("This class cannot be instantiated directly using "),aFe=a("code"),_Mr=o("__init__()"),bMr=o(" (throws an error)."),vMr=l(),Pt=a("div"),F(W8.$$.fragment),FMr=l(),nFe=a("p"),TMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MMr=l(),cc=a("p"),EMr=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),CMr=o("not"),wMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),AMr=o("from_pretrained()"),yMr=o(" to load the model weights."),LMr=l(),F(Z4.$$.fragment),xMr=l(),Sr=a("div"),F(Q8.$$.fragment),$Mr=l(),lFe=a("p"),kMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SMr=l(),sn=a("p"),RMr=o("The model class to instantiate is selected based on the "),iFe=a("code"),PMr=o("model_type"),BMr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),IMr=o("pretrained_model_name_or_path"),qMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),NMr=o("pretrained_model_name_or_path"),jMr=o(":"),DMr=l(),pe=a("ul"),eE=a("li"),fFe=a("strong"),GMr=o("albert"),OMr=o(" \u2014 "),dU=a("a"),VMr=o("TFAlbertForMultipleChoice"),XMr=o(" (ALBERT model)"),zMr=l(),oE=a("li"),mFe=a("strong"),WMr=o("bert"),QMr=o(" \u2014 "),cU=a("a"),HMr=o("TFBertForMultipleChoice"),UMr=o(" (BERT model)"),JMr=l(),rE=a("li"),gFe=a("strong"),YMr=o("camembert"),KMr=o(" \u2014 "),fU=a("a"),ZMr=o("TFCamembertForMultipleChoice"),e4r=o(" (CamemBERT model)"),o4r=l(),tE=a("li"),hFe=a("strong"),r4r=o("convbert"),t4r=o(" \u2014 "),mU=a("a"),a4r=o("TFConvBertForMultipleChoice"),n4r=o(" (ConvBERT model)"),s4r=l(),aE=a("li"),pFe=a("strong"),l4r=o("distilbert"),i4r=o(" \u2014 "),gU=a("a"),d4r=o("TFDistilBertForMultipleChoice"),c4r=o(" (DistilBERT model)"),f4r=l(),nE=a("li"),uFe=a("strong"),m4r=o("electra"),g4r=o(" \u2014 "),hU=a("a"),h4r=o("TFElectraForMultipleChoice"),p4r=o(" (ELECTRA model)"),u4r=l(),sE=a("li"),_Fe=a("strong"),_4r=o("flaubert"),b4r=o(" \u2014 "),pU=a("a"),v4r=o("TFFlaubertForMultipleChoice"),F4r=o(" (FlauBERT model)"),T4r=l(),lE=a("li"),bFe=a("strong"),M4r=o("funnel"),E4r=o(" \u2014 "),uU=a("a"),C4r=o("TFFunnelForMultipleChoice"),w4r=o(" (Funnel Transformer model)"),A4r=l(),iE=a("li"),vFe=a("strong"),y4r=o("longformer"),L4r=o(" \u2014 "),_U=a("a"),x4r=o("TFLongformerForMultipleChoice"),$4r=o(" (Longformer model)"),k4r=l(),dE=a("li"),FFe=a("strong"),S4r=o("mobilebert"),R4r=o(" \u2014 "),bU=a("a"),P4r=o("TFMobileBertForMultipleChoice"),B4r=o(" (MobileBERT model)"),I4r=l(),cE=a("li"),TFe=a("strong"),q4r=o("mpnet"),N4r=o(" \u2014 "),vU=a("a"),j4r=o("TFMPNetForMultipleChoice"),D4r=o(" (MPNet model)"),G4r=l(),fE=a("li"),MFe=a("strong"),O4r=o("rembert"),V4r=o(" \u2014 "),FU=a("a"),X4r=o("TFRemBertForMultipleChoice"),z4r=o(" (RemBERT model)"),W4r=l(),mE=a("li"),EFe=a("strong"),Q4r=o("roberta"),H4r=o(" \u2014 "),TU=a("a"),U4r=o("TFRobertaForMultipleChoice"),J4r=o(" (RoBERTa model)"),Y4r=l(),gE=a("li"),CFe=a("strong"),K4r=o("roformer"),Z4r=o(" \u2014 "),MU=a("a"),eEr=o("TFRoFormerForMultipleChoice"),oEr=o(" (RoFormer model)"),rEr=l(),hE=a("li"),wFe=a("strong"),tEr=o("xlm"),aEr=o(" \u2014 "),EU=a("a"),nEr=o("TFXLMForMultipleChoice"),sEr=o(" (XLM model)"),lEr=l(),pE=a("li"),AFe=a("strong"),iEr=o("xlm-roberta"),dEr=o(" \u2014 "),CU=a("a"),cEr=o("TFXLMRobertaForMultipleChoice"),fEr=o(" (XLM-RoBERTa model)"),mEr=l(),uE=a("li"),yFe=a("strong"),gEr=o("xlnet"),hEr=o(" \u2014 "),wU=a("a"),pEr=o("TFXLNetForMultipleChoice"),uEr=o(" (XLNet model)"),_Er=l(),F(_E.$$.fragment),vje=l(),fc=a("h2"),bE=a("a"),LFe=a("span"),F(H8.$$.fragment),bEr=l(),xFe=a("span"),vEr=o("TFAutoModelForNextSentencePrediction"),Fje=l(),nr=a("div"),F(U8.$$.fragment),FEr=l(),mc=a("p"),TEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AU=a("a"),MEr=o("from_pretrained()"),EEr=o(" class method or the "),yU=a("a"),CEr=o("from_config()"),wEr=o(` class
method.`),AEr=l(),J8=a("p"),yEr=o("This class cannot be instantiated directly using "),$Fe=a("code"),LEr=o("__init__()"),xEr=o(" (throws an error)."),$Er=l(),Bt=a("div"),F(Y8.$$.fragment),kEr=l(),kFe=a("p"),SEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),REr=l(),gc=a("p"),PEr=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),BEr=o("not"),IEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),qEr=o("from_pretrained()"),NEr=o(" to load the model weights."),jEr=l(),F(vE.$$.fragment),DEr=l(),Rr=a("div"),F(K8.$$.fragment),GEr=l(),RFe=a("p"),OEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VEr=l(),ln=a("p"),XEr=o("The model class to instantiate is selected based on the "),PFe=a("code"),zEr=o("model_type"),WEr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),QEr=o("pretrained_model_name_or_path"),HEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),UEr=o("pretrained_model_name_or_path"),JEr=o(":"),YEr=l(),Z8=a("ul"),FE=a("li"),qFe=a("strong"),KEr=o("bert"),ZEr=o(" \u2014 "),xU=a("a"),eCr=o("TFBertForNextSentencePrediction"),oCr=o(" (BERT model)"),rCr=l(),TE=a("li"),NFe=a("strong"),tCr=o("mobilebert"),aCr=o(" \u2014 "),$U=a("a"),nCr=o("TFMobileBertForNextSentencePrediction"),sCr=o(" (MobileBERT model)"),lCr=l(),F(ME.$$.fragment),Tje=l(),hc=a("h2"),EE=a("a"),jFe=a("span"),F(e9.$$.fragment),iCr=l(),DFe=a("span"),dCr=o("TFAutoModelForTableQuestionAnswering"),Mje=l(),sr=a("div"),F(o9.$$.fragment),cCr=l(),pc=a("p"),fCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kU=a("a"),mCr=o("from_pretrained()"),gCr=o(" class method or the "),SU=a("a"),hCr=o("from_config()"),pCr=o(` class
method.`),uCr=l(),r9=a("p"),_Cr=o("This class cannot be instantiated directly using "),GFe=a("code"),bCr=o("__init__()"),vCr=o(" (throws an error)."),FCr=l(),It=a("div"),F(t9.$$.fragment),TCr=l(),OFe=a("p"),MCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ECr=l(),uc=a("p"),CCr=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),wCr=o("not"),ACr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),yCr=o("from_pretrained()"),LCr=o(" to load the model weights."),xCr=l(),F(CE.$$.fragment),$Cr=l(),Pr=a("div"),F(a9.$$.fragment),kCr=l(),XFe=a("p"),SCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RCr=l(),dn=a("p"),PCr=o("The model class to instantiate is selected based on the "),zFe=a("code"),BCr=o("model_type"),ICr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),qCr=o("pretrained_model_name_or_path"),NCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),jCr=o("pretrained_model_name_or_path"),DCr=o(":"),GCr=l(),HFe=a("ul"),wE=a("li"),UFe=a("strong"),OCr=o("tapas"),VCr=o(" \u2014 "),PU=a("a"),XCr=o("TFTapasForQuestionAnswering"),zCr=o(" (TAPAS model)"),WCr=l(),F(AE.$$.fragment),Eje=l(),_c=a("h2"),yE=a("a"),JFe=a("span"),F(n9.$$.fragment),QCr=l(),YFe=a("span"),HCr=o("TFAutoModelForTokenClassification"),Cje=l(),lr=a("div"),F(s9.$$.fragment),UCr=l(),bc=a("p"),JCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BU=a("a"),YCr=o("from_pretrained()"),KCr=o(" class method or the "),IU=a("a"),ZCr=o("from_config()"),e5r=o(` class
method.`),o5r=l(),l9=a("p"),r5r=o("This class cannot be instantiated directly using "),KFe=a("code"),t5r=o("__init__()"),a5r=o(" (throws an error)."),n5r=l(),qt=a("div"),F(i9.$$.fragment),s5r=l(),ZFe=a("p"),l5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),i5r=l(),vc=a("p"),d5r=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),c5r=o("not"),f5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),m5r=o("from_pretrained()"),g5r=o(" to load the model weights."),h5r=l(),F(LE.$$.fragment),p5r=l(),Br=a("div"),F(d9.$$.fragment),u5r=l(),oTe=a("p"),_5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b5r=l(),cn=a("p"),v5r=o("The model class to instantiate is selected based on the "),rTe=a("code"),F5r=o("model_type"),T5r=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(":"),A5r=l(),de=a("ul"),xE=a("li"),nTe=a("strong"),y5r=o("albert"),L5r=o(" \u2014 "),NU=a("a"),x5r=o("TFAlbertForTokenClassification"),$5r=o(" (ALBERT model)"),k5r=l(),$E=a("li"),sTe=a("strong"),S5r=o("bert"),R5r=o(" \u2014 "),jU=a("a"),P5r=o("TFBertForTokenClassification"),B5r=o(" (BERT model)"),I5r=l(),kE=a("li"),lTe=a("strong"),q5r=o("camembert"),N5r=o(" \u2014 "),DU=a("a"),j5r=o("TFCamembertForTokenClassification"),D5r=o(" (CamemBERT model)"),G5r=l(),SE=a("li"),iTe=a("strong"),O5r=o("convbert"),V5r=o(" \u2014 "),GU=a("a"),X5r=o("TFConvBertForTokenClassification"),z5r=o(" (ConvBERT model)"),W5r=l(),RE=a("li"),dTe=a("strong"),Q5r=o("deberta"),H5r=o(" \u2014 "),OU=a("a"),U5r=o("TFDebertaForTokenClassification"),J5r=o(" (DeBERTa model)"),Y5r=l(),PE=a("li"),cTe=a("strong"),K5r=o("deberta-v2"),Z5r=o(" \u2014 "),VU=a("a"),ewr=o("TFDebertaV2ForTokenClassification"),owr=o(" (DeBERTa-v2 model)"),rwr=l(),BE=a("li"),fTe=a("strong"),twr=o("distilbert"),awr=o(" \u2014 "),XU=a("a"),nwr=o("TFDistilBertForTokenClassification"),swr=o(" (DistilBERT model)"),lwr=l(),IE=a("li"),mTe=a("strong"),iwr=o("electra"),dwr=o(" \u2014 "),zU=a("a"),cwr=o("TFElectraForTokenClassification"),fwr=o(" (ELECTRA model)"),mwr=l(),qE=a("li"),gTe=a("strong"),gwr=o("flaubert"),hwr=o(" \u2014 "),WU=a("a"),pwr=o("TFFlaubertForTokenClassification"),uwr=o(" (FlauBERT model)"),_wr=l(),NE=a("li"),hTe=a("strong"),bwr=o("funnel"),vwr=o(" \u2014 "),QU=a("a"),Fwr=o("TFFunnelForTokenClassification"),Twr=o(" (Funnel Transformer model)"),Mwr=l(),jE=a("li"),pTe=a("strong"),Ewr=o("layoutlm"),Cwr=o(" \u2014 "),HU=a("a"),wwr=o("TFLayoutLMForTokenClassification"),Awr=o(" (LayoutLM model)"),ywr=l(),DE=a("li"),uTe=a("strong"),Lwr=o("longformer"),xwr=o(" \u2014 "),UU=a("a"),$wr=o("TFLongformerForTokenClassification"),kwr=o(" (Longformer model)"),Swr=l(),GE=a("li"),_Te=a("strong"),Rwr=o("mobilebert"),Pwr=o(" \u2014 "),JU=a("a"),Bwr=o("TFMobileBertForTokenClassification"),Iwr=o(" (MobileBERT model)"),qwr=l(),OE=a("li"),bTe=a("strong"),Nwr=o("mpnet"),jwr=o(" \u2014 "),YU=a("a"),Dwr=o("TFMPNetForTokenClassification"),Gwr=o(" (MPNet model)"),Owr=l(),VE=a("li"),vTe=a("strong"),Vwr=o("rembert"),Xwr=o(" \u2014 "),KU=a("a"),zwr=o("TFRemBertForTokenClassification"),Wwr=o(" (RemBERT model)"),Qwr=l(),XE=a("li"),FTe=a("strong"),Hwr=o("roberta"),Uwr=o(" \u2014 "),ZU=a("a"),Jwr=o("TFRobertaForTokenClassification"),Ywr=o(" (RoBERTa model)"),Kwr=l(),zE=a("li"),TTe=a("strong"),Zwr=o("roformer"),e0r=o(" \u2014 "),eJ=a("a"),o0r=o("TFRoFormerForTokenClassification"),r0r=o(" (RoFormer model)"),t0r=l(),WE=a("li"),MTe=a("strong"),a0r=o("xlm"),n0r=o(" \u2014 "),oJ=a("a"),s0r=o("TFXLMForTokenClassification"),l0r=o(" (XLM model)"),i0r=l(),QE=a("li"),ETe=a("strong"),d0r=o("xlm-roberta"),c0r=o(" \u2014 "),rJ=a("a"),f0r=o("TFXLMRobertaForTokenClassification"),m0r=o(" (XLM-RoBERTa model)"),g0r=l(),HE=a("li"),CTe=a("strong"),h0r=o("xlnet"),p0r=o(" \u2014 "),tJ=a("a"),u0r=o("TFXLNetForTokenClassification"),_0r=o(" (XLNet model)"),b0r=l(),F(UE.$$.fragment),wje=l(),Fc=a("h2"),JE=a("a"),wTe=a("span"),F(c9.$$.fragment),v0r=l(),ATe=a("span"),F0r=o("TFAutoModelForQuestionAnswering"),Aje=l(),ir=a("div"),F(f9.$$.fragment),T0r=l(),Tc=a("p"),M0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aJ=a("a"),E0r=o("from_pretrained()"),C0r=o(" class method or the "),nJ=a("a"),w0r=o("from_config()"),A0r=o(` class
method.`),y0r=l(),m9=a("p"),L0r=o("This class cannot be instantiated directly using "),yTe=a("code"),x0r=o("__init__()"),$0r=o(" (throws an error)."),k0r=l(),Nt=a("div"),F(g9.$$.fragment),S0r=l(),LTe=a("p"),R0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P0r=l(),Mc=a("p"),B0r=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),I0r=o("not"),q0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),N0r=o("from_pretrained()"),j0r=o(" to load the model weights."),D0r=l(),F(YE.$$.fragment),G0r=l(),Ir=a("div"),F(h9.$$.fragment),O0r=l(),$Te=a("p"),V0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X0r=l(),fn=a("p"),z0r=o("The model class to instantiate is selected based on the "),kTe=a("code"),W0r=o("model_type"),Q0r=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),ce=a("ul"),KE=a("li"),PTe=a("strong"),Z0r=o("albert"),eAr=o(" \u2014 "),lJ=a("a"),oAr=o("TFAlbertForQuestionAnswering"),rAr=o(" (ALBERT model)"),tAr=l(),ZE=a("li"),BTe=a("strong"),aAr=o("bert"),nAr=o(" \u2014 "),iJ=a("a"),sAr=o("TFBertForQuestionAnswering"),lAr=o(" (BERT model)"),iAr=l(),eC=a("li"),ITe=a("strong"),dAr=o("camembert"),cAr=o(" \u2014 "),dJ=a("a"),fAr=o("TFCamembertForQuestionAnswering"),mAr=o(" (CamemBERT model)"),gAr=l(),oC=a("li"),qTe=a("strong"),hAr=o("convbert"),pAr=o(" \u2014 "),cJ=a("a"),uAr=o("TFConvBertForQuestionAnswering"),_Ar=o(" (ConvBERT model)"),bAr=l(),rC=a("li"),NTe=a("strong"),vAr=o("deberta"),FAr=o(" \u2014 "),fJ=a("a"),TAr=o("TFDebertaForQuestionAnswering"),MAr=o(" (DeBERTa model)"),EAr=l(),tC=a("li"),jTe=a("strong"),CAr=o("deberta-v2"),wAr=o(" \u2014 "),mJ=a("a"),AAr=o("TFDebertaV2ForQuestionAnswering"),yAr=o(" (DeBERTa-v2 model)"),LAr=l(),aC=a("li"),DTe=a("strong"),xAr=o("distilbert"),$Ar=o(" \u2014 "),gJ=a("a"),kAr=o("TFDistilBertForQuestionAnswering"),SAr=o(" (DistilBERT model)"),RAr=l(),nC=a("li"),GTe=a("strong"),PAr=o("electra"),BAr=o(" \u2014 "),hJ=a("a"),IAr=o("TFElectraForQuestionAnswering"),qAr=o(" (ELECTRA model)"),NAr=l(),sC=a("li"),OTe=a("strong"),jAr=o("flaubert"),DAr=o(" \u2014 "),pJ=a("a"),GAr=o("TFFlaubertForQuestionAnsweringSimple"),OAr=o(" (FlauBERT model)"),VAr=l(),lC=a("li"),VTe=a("strong"),XAr=o("funnel"),zAr=o(" \u2014 "),uJ=a("a"),WAr=o("TFFunnelForQuestionAnswering"),QAr=o(" (Funnel Transformer model)"),HAr=l(),iC=a("li"),XTe=a("strong"),UAr=o("gptj"),JAr=o(" \u2014 "),_J=a("a"),YAr=o("TFGPTJForQuestionAnswering"),KAr=o(" (GPT-J model)"),ZAr=l(),dC=a("li"),zTe=a("strong"),e6r=o("longformer"),o6r=o(" \u2014 "),bJ=a("a"),r6r=o("TFLongformerForQuestionAnswering"),t6r=o(" (Longformer model)"),a6r=l(),cC=a("li"),WTe=a("strong"),n6r=o("mobilebert"),s6r=o(" \u2014 "),vJ=a("a"),l6r=o("TFMobileBertForQuestionAnswering"),i6r=o(" (MobileBERT model)"),d6r=l(),fC=a("li"),QTe=a("strong"),c6r=o("mpnet"),f6r=o(" \u2014 "),FJ=a("a"),m6r=o("TFMPNetForQuestionAnswering"),g6r=o(" (MPNet model)"),h6r=l(),mC=a("li"),HTe=a("strong"),p6r=o("rembert"),u6r=o(" \u2014 "),TJ=a("a"),_6r=o("TFRemBertForQuestionAnswering"),b6r=o(" (RemBERT model)"),v6r=l(),gC=a("li"),UTe=a("strong"),F6r=o("roberta"),T6r=o(" \u2014 "),MJ=a("a"),M6r=o("TFRobertaForQuestionAnswering"),E6r=o(" (RoBERTa model)"),C6r=l(),hC=a("li"),JTe=a("strong"),w6r=o("roformer"),A6r=o(" \u2014 "),EJ=a("a"),y6r=o("TFRoFormerForQuestionAnswering"),L6r=o(" (RoFormer model)"),x6r=l(),pC=a("li"),YTe=a("strong"),$6r=o("xlm"),k6r=o(" \u2014 "),CJ=a("a"),S6r=o("TFXLMForQuestionAnsweringSimple"),R6r=o(" (XLM model)"),P6r=l(),uC=a("li"),KTe=a("strong"),B6r=o("xlm-roberta"),I6r=o(" \u2014 "),wJ=a("a"),q6r=o("TFXLMRobertaForQuestionAnswering"),N6r=o(" (XLM-RoBERTa model)"),j6r=l(),_C=a("li"),ZTe=a("strong"),D6r=o("xlnet"),G6r=o(" \u2014 "),AJ=a("a"),O6r=o("TFXLNetForQuestionAnsweringSimple"),V6r=o(" (XLNet model)"),X6r=l(),F(bC.$$.fragment),yje=l(),Ec=a("h2"),vC=a("a"),e7e=a("span"),F(p9.$$.fragment),z6r=l(),o7e=a("span"),W6r=o("TFAutoModelForVision2Seq"),Lje=l(),dr=a("div"),F(u9.$$.fragment),Q6r=l(),Cc=a("p"),H6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yJ=a("a"),U6r=o("from_pretrained()"),J6r=o(" class method or the "),LJ=a("a"),Y6r=o("from_config()"),K6r=o(` class
method.`),Z6r=l(),_9=a("p"),eyr=o("This class cannot be instantiated directly using "),r7e=a("code"),oyr=o("__init__()"),ryr=o(" (throws an error)."),tyr=l(),jt=a("div"),F(b9.$$.fragment),ayr=l(),t7e=a("p"),nyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),syr=l(),wc=a("p"),lyr=o(`Note:
Loading a model from its configuration file does `),a7e=a("strong"),iyr=o("not"),dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),cyr=o("from_pretrained()"),fyr=o(" to load the model weights."),myr=l(),F(FC.$$.fragment),gyr=l(),qr=a("div"),F(v9.$$.fragment),hyr=l(),n7e=a("p"),pyr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uyr=l(),mn=a("p"),_yr=o("The model class to instantiate is selected based on the "),s7e=a("code"),byr=o("model_type"),vyr=o(` property of the config object (either
passed as an argument or loaded from `),l7e=a("code"),Fyr=o("pretrained_model_name_or_path"),Tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(":"),Cyr=l(),d7e=a("ul"),TC=a("li"),c7e=a("strong"),wyr=o("vision-encoder-decoder"),Ayr=o(" \u2014 "),$J=a("a"),yyr=o("TFVisionEncoderDecoderModel"),Lyr=o(" (Vision Encoder decoder model)"),xyr=l(),F(MC.$$.fragment),xje=l(),Ac=a("h2"),EC=a("a"),f7e=a("span"),F(F9.$$.fragment),$yr=l(),m7e=a("span"),kyr=o("TFAutoModelForSpeechSeq2Seq"),$je=l(),cr=a("div"),F(T9.$$.fragment),Syr=l(),yc=a("p"),Ryr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=a("a"),Pyr=o("from_pretrained()"),Byr=o(" class method or the "),SJ=a("a"),Iyr=o("from_config()"),qyr=o(` class
method.`),Nyr=l(),M9=a("p"),jyr=o("This class cannot be instantiated directly using "),g7e=a("code"),Dyr=o("__init__()"),Gyr=o(" (throws an error)."),Oyr=l(),Dt=a("div"),F(E9.$$.fragment),Vyr=l(),h7e=a("p"),Xyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zyr=l(),Lc=a("p"),Wyr=o(`Note:
Loading a model from its configuration file does `),p7e=a("strong"),Qyr=o("not"),Hyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" to load the model weights."),Yyr=l(),F(CC.$$.fragment),Kyr=l(),Nr=a("div"),F(C9.$$.fragment),Zyr=l(),u7e=a("p"),eLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oLr=l(),gn=a("p"),rLr=o("The model class to instantiate is selected based on the "),_7e=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),b7e=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v7e=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),F7e=a("ul"),wC=a("li"),T7e=a("strong"),cLr=o("speech_to_text"),fLr=o(" \u2014 "),PJ=a("a"),mLr=o("TFSpeech2TextForConditionalGeneration"),gLr=o(" (Speech2Text model)"),hLr=l(),F(AC.$$.fragment),kje=l(),xc=a("h2"),yC=a("a"),M7e=a("span"),F(w9.$$.fragment),pLr=l(),E7e=a("span"),uLr=o("FlaxAutoModel"),Sje=l(),fr=a("div"),F(A9.$$.fragment),_Lr=l(),$c=a("p"),bLr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BJ=a("a"),vLr=o("from_pretrained()"),FLr=o(" class method or the "),IJ=a("a"),TLr=o("from_config()"),MLr=o(` class
method.`),ELr=l(),y9=a("p"),CLr=o("This class cannot be instantiated directly using "),C7e=a("code"),wLr=o("__init__()"),ALr=o(" (throws an error)."),yLr=l(),Gt=a("div"),F(L9.$$.fragment),LLr=l(),w7e=a("p"),xLr=o("Instantiates one of the base model classes of the library from a configuration."),$Lr=l(),kc=a("p"),kLr=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),SLr=o("not"),RLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),PLr=o("from_pretrained()"),BLr=o(" to load the model weights."),ILr=l(),F(LC.$$.fragment),qLr=l(),jr=a("div"),F(x9.$$.fragment),NLr=l(),y7e=a("p"),jLr=o("Instantiate one of the base model classes of the library from a pretrained model."),DLr=l(),hn=a("p"),GLr=o("The model class to instantiate is selected based on the "),L7e=a("code"),OLr=o("model_type"),VLr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),XLr=o("pretrained_model_name_or_path"),zLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),WLr=o("pretrained_model_name_or_path"),QLr=o(":"),HLr=l(),te=a("ul"),xC=a("li"),k7e=a("strong"),ULr=o("albert"),JLr=o(" \u2014 "),NJ=a("a"),YLr=o("FlaxAlbertModel"),KLr=o(" (ALBERT model)"),ZLr=l(),$C=a("li"),S7e=a("strong"),e8r=o("bart"),o8r=o(" \u2014 "),jJ=a("a"),r8r=o("FlaxBartModel"),t8r=o(" (BART model)"),a8r=l(),kC=a("li"),R7e=a("strong"),n8r=o("beit"),s8r=o(" \u2014 "),DJ=a("a"),l8r=o("FlaxBeitModel"),i8r=o(" (BEiT model)"),d8r=l(),SC=a("li"),P7e=a("strong"),c8r=o("bert"),f8r=o(" \u2014 "),GJ=a("a"),m8r=o("FlaxBertModel"),g8r=o(" (BERT model)"),h8r=l(),RC=a("li"),B7e=a("strong"),p8r=o("big_bird"),u8r=o(" \u2014 "),OJ=a("a"),_8r=o("FlaxBigBirdModel"),b8r=o(" (BigBird model)"),v8r=l(),PC=a("li"),I7e=a("strong"),F8r=o("blenderbot"),T8r=o(" \u2014 "),VJ=a("a"),M8r=o("FlaxBlenderbotModel"),E8r=o(" (Blenderbot model)"),C8r=l(),BC=a("li"),q7e=a("strong"),w8r=o("blenderbot-small"),A8r=o(" \u2014 "),XJ=a("a"),y8r=o("FlaxBlenderbotSmallModel"),L8r=o(" (BlenderbotSmall model)"),x8r=l(),IC=a("li"),N7e=a("strong"),$8r=o("clip"),k8r=o(" \u2014 "),zJ=a("a"),S8r=o("FlaxCLIPModel"),R8r=o(" (CLIP model)"),P8r=l(),qC=a("li"),j7e=a("strong"),B8r=o("distilbert"),I8r=o(" \u2014 "),WJ=a("a"),q8r=o("FlaxDistilBertModel"),N8r=o(" (DistilBERT model)"),j8r=l(),NC=a("li"),D7e=a("strong"),D8r=o("electra"),G8r=o(" \u2014 "),QJ=a("a"),O8r=o("FlaxElectraModel"),V8r=o(" (ELECTRA model)"),X8r=l(),jC=a("li"),G7e=a("strong"),z8r=o("gpt2"),W8r=o(" \u2014 "),HJ=a("a"),Q8r=o("FlaxGPT2Model"),H8r=o(" (OpenAI GPT-2 model)"),U8r=l(),DC=a("li"),O7e=a("strong"),J8r=o("gpt_neo"),Y8r=o(" \u2014 "),UJ=a("a"),K8r=o("FlaxGPTNeoModel"),Z8r=o(" (GPT Neo model)"),e9r=l(),GC=a("li"),V7e=a("strong"),o9r=o("gptj"),r9r=o(" \u2014 "),JJ=a("a"),t9r=o("FlaxGPTJModel"),a9r=o(" (GPT-J model)"),n9r=l(),OC=a("li"),X7e=a("strong"),s9r=o("marian"),l9r=o(" \u2014 "),YJ=a("a"),i9r=o("FlaxMarianModel"),d9r=o(" (Marian model)"),c9r=l(),VC=a("li"),z7e=a("strong"),f9r=o("mbart"),m9r=o(" \u2014 "),KJ=a("a"),g9r=o("FlaxMBartModel"),h9r=o(" (mBART model)"),p9r=l(),XC=a("li"),W7e=a("strong"),u9r=o("mt5"),_9r=o(" \u2014 "),ZJ=a("a"),b9r=o("FlaxMT5Model"),v9r=o(" (mT5 model)"),F9r=l(),zC=a("li"),Q7e=a("strong"),T9r=o("pegasus"),M9r=o(" \u2014 "),eY=a("a"),E9r=o("FlaxPegasusModel"),C9r=o(" (Pegasus model)"),w9r=l(),WC=a("li"),H7e=a("strong"),A9r=o("roberta"),y9r=o(" \u2014 "),oY=a("a"),L9r=o("FlaxRobertaModel"),x9r=o(" (RoBERTa model)"),$9r=l(),QC=a("li"),U7e=a("strong"),k9r=o("roformer"),S9r=o(" \u2014 "),rY=a("a"),R9r=o("FlaxRoFormerModel"),P9r=o(" (RoFormer model)"),B9r=l(),HC=a("li"),J7e=a("strong"),I9r=o("t5"),q9r=o(" \u2014 "),tY=a("a"),N9r=o("FlaxT5Model"),j9r=o(" (T5 model)"),D9r=l(),UC=a("li"),Y7e=a("strong"),G9r=o("vision-text-dual-encoder"),O9r=o(" \u2014 "),aY=a("a"),V9r=o("FlaxVisionTextDualEncoderModel"),X9r=o(" (VisionTextDualEncoder model)"),z9r=l(),JC=a("li"),K7e=a("strong"),W9r=o("vit"),Q9r=o(" \u2014 "),nY=a("a"),H9r=o("FlaxViTModel"),U9r=o(" (ViT model)"),J9r=l(),YC=a("li"),Z7e=a("strong"),Y9r=o("wav2vec2"),K9r=o(" \u2014 "),sY=a("a"),Z9r=o("FlaxWav2Vec2Model"),exr=o(" (Wav2Vec2 model)"),oxr=l(),KC=a("li"),eMe=a("strong"),rxr=o("xglm"),txr=o(" \u2014 "),lY=a("a"),axr=o("FlaxXGLMModel"),nxr=o(" (XGLM model)"),sxr=l(),ZC=a("li"),oMe=a("strong"),lxr=o("xlm-roberta"),ixr=o(" \u2014 "),iY=a("a"),dxr=o("FlaxXLMRobertaModel"),cxr=o(" (XLM-RoBERTa model)"),fxr=l(),F(e5.$$.fragment),Rje=l(),Sc=a("h2"),o5=a("a"),rMe=a("span"),F($9.$$.fragment),mxr=l(),tMe=a("span"),gxr=o("FlaxAutoModelForCausalLM"),Pje=l(),mr=a("div"),F(k9.$$.fragment),hxr=l(),Rc=a("p"),pxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=a("a"),uxr=o("from_pretrained()"),_xr=o(" class method or the "),cY=a("a"),bxr=o("from_config()"),vxr=o(` class
method.`),Fxr=l(),S9=a("p"),Txr=o("This class cannot be instantiated directly using "),aMe=a("code"),Mxr=o("__init__()"),Exr=o(" (throws an error)."),Cxr=l(),Ot=a("div"),F(R9.$$.fragment),wxr=l(),nMe=a("p"),Axr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yxr=l(),Pc=a("p"),Lxr=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),xxr=o("not"),$xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),kxr=o("from_pretrained()"),Sxr=o(" to load the model weights."),Rxr=l(),F(r5.$$.fragment),Pxr=l(),Dr=a("div"),F(P9.$$.fragment),Bxr=l(),lMe=a("p"),Ixr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qxr=l(),pn=a("p"),Nxr=o("The model class to instantiate is selected based on the "),iMe=a("code"),jxr=o("model_type"),Dxr=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),Gxr=o("pretrained_model_name_or_path"),Oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(":"),zxr=l(),Re=a("ul"),t5=a("li"),fMe=a("strong"),Wxr=o("bart"),Qxr=o(" \u2014 "),mY=a("a"),Hxr=o("FlaxBartForCausalLM"),Uxr=o(" (BART model)"),Jxr=l(),a5=a("li"),mMe=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),gY=a("a"),Zxr=o("FlaxBertForCausalLM"),e$r=o(" (BERT model)"),o$r=l(),n5=a("li"),gMe=a("strong"),r$r=o("big_bird"),t$r=o(" \u2014 "),hY=a("a"),a$r=o("FlaxBigBirdForCausalLM"),n$r=o(" (BigBird model)"),s$r=l(),s5=a("li"),hMe=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),pY=a("a"),d$r=o("FlaxElectraForCausalLM"),c$r=o(" (ELECTRA model)"),f$r=l(),l5=a("li"),pMe=a("strong"),m$r=o("gpt2"),g$r=o(" \u2014 "),uY=a("a"),h$r=o("FlaxGPT2LMHeadModel"),p$r=o(" (OpenAI GPT-2 model)"),u$r=l(),i5=a("li"),uMe=a("strong"),_$r=o("gpt_neo"),b$r=o(" \u2014 "),_Y=a("a"),v$r=o("FlaxGPTNeoForCausalLM"),F$r=o(" (GPT Neo model)"),T$r=l(),d5=a("li"),_Me=a("strong"),M$r=o("gptj"),E$r=o(" \u2014 "),bY=a("a"),C$r=o("FlaxGPTJForCausalLM"),w$r=o(" (GPT-J model)"),A$r=l(),c5=a("li"),bMe=a("strong"),y$r=o("roberta"),L$r=o(" \u2014 "),vY=a("a"),x$r=o("FlaxRobertaForCausalLM"),$$r=o(" (RoBERTa model)"),k$r=l(),f5=a("li"),vMe=a("strong"),S$r=o("xglm"),R$r=o(" \u2014 "),FY=a("a"),P$r=o("FlaxXGLMForCausalLM"),B$r=o(" (XGLM model)"),I$r=l(),F(m5.$$.fragment),Bje=l(),Bc=a("h2"),g5=a("a"),FMe=a("span"),F(B9.$$.fragment),q$r=l(),TMe=a("span"),N$r=o("FlaxAutoModelForPreTraining"),Ije=l(),gr=a("div"),F(I9.$$.fragment),j$r=l(),Ic=a("p"),D$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TY=a("a"),G$r=o("from_pretrained()"),O$r=o(" class method or the "),MY=a("a"),V$r=o("from_config()"),X$r=o(` class
method.`),z$r=l(),q9=a("p"),W$r=o("This class cannot be instantiated directly using "),MMe=a("code"),Q$r=o("__init__()"),H$r=o(" (throws an error)."),U$r=l(),Vt=a("div"),F(N9.$$.fragment),J$r=l(),EMe=a("p"),Y$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K$r=l(),qc=a("p"),Z$r=o(`Note:
Loading a model from its configuration file does `),CMe=a("strong"),ekr=o("not"),okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),rkr=o("from_pretrained()"),tkr=o(" to load the model weights."),akr=l(),F(h5.$$.fragment),nkr=l(),Gr=a("div"),F(j9.$$.fragment),skr=l(),wMe=a("p"),lkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ikr=l(),un=a("p"),dkr=o("The model class to instantiate is selected based on the "),AMe=a("code"),ckr=o("model_type"),fkr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(":"),ukr=l(),Ee=a("ul"),p5=a("li"),xMe=a("strong"),_kr=o("albert"),bkr=o(" \u2014 "),CY=a("a"),vkr=o("FlaxAlbertForPreTraining"),Fkr=o(" (ALBERT model)"),Tkr=l(),u5=a("li"),$Me=a("strong"),Mkr=o("bart"),Ekr=o(" \u2014 "),wY=a("a"),Ckr=o("FlaxBartForConditionalGeneration"),wkr=o(" (BART model)"),Akr=l(),_5=a("li"),kMe=a("strong"),ykr=o("bert"),Lkr=o(" \u2014 "),AY=a("a"),xkr=o("FlaxBertForPreTraining"),$kr=o(" (BERT model)"),kkr=l(),b5=a("li"),SMe=a("strong"),Skr=o("big_bird"),Rkr=o(" \u2014 "),yY=a("a"),Pkr=o("FlaxBigBirdForPreTraining"),Bkr=o(" (BigBird model)"),Ikr=l(),v5=a("li"),RMe=a("strong"),qkr=o("electra"),Nkr=o(" \u2014 "),LY=a("a"),jkr=o("FlaxElectraForPreTraining"),Dkr=o(" (ELECTRA model)"),Gkr=l(),F5=a("li"),PMe=a("strong"),Okr=o("mbart"),Vkr=o(" \u2014 "),xY=a("a"),Xkr=o("FlaxMBartForConditionalGeneration"),zkr=o(" (mBART model)"),Wkr=l(),T5=a("li"),BMe=a("strong"),Qkr=o("mt5"),Hkr=o(" \u2014 "),$Y=a("a"),Ukr=o("FlaxMT5ForConditionalGeneration"),Jkr=o(" (mT5 model)"),Ykr=l(),M5=a("li"),IMe=a("strong"),Kkr=o("roberta"),Zkr=o(" \u2014 "),kY=a("a"),eSr=o("FlaxRobertaForMaskedLM"),oSr=o(" (RoBERTa model)"),rSr=l(),E5=a("li"),qMe=a("strong"),tSr=o("roformer"),aSr=o(" \u2014 "),SY=a("a"),nSr=o("FlaxRoFormerForMaskedLM"),sSr=o(" (RoFormer model)"),lSr=l(),C5=a("li"),NMe=a("strong"),iSr=o("t5"),dSr=o(" \u2014 "),RY=a("a"),cSr=o("FlaxT5ForConditionalGeneration"),fSr=o(" (T5 model)"),mSr=l(),w5=a("li"),jMe=a("strong"),gSr=o("wav2vec2"),hSr=o(" \u2014 "),PY=a("a"),pSr=o("FlaxWav2Vec2ForPreTraining"),uSr=o(" (Wav2Vec2 model)"),_Sr=l(),A5=a("li"),DMe=a("strong"),bSr=o("xlm-roberta"),vSr=o(" \u2014 "),BY=a("a"),FSr=o("FlaxXLMRobertaForMaskedLM"),TSr=o(" (XLM-RoBERTa model)"),MSr=l(),F(y5.$$.fragment),qje=l(),Nc=a("h2"),L5=a("a"),GMe=a("span"),F(D9.$$.fragment),ESr=l(),OMe=a("span"),CSr=o("FlaxAutoModelForMaskedLM"),Nje=l(),hr=a("div"),F(G9.$$.fragment),wSr=l(),jc=a("p"),ASr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IY=a("a"),ySr=o("from_pretrained()"),LSr=o(" class method or the "),qY=a("a"),xSr=o("from_config()"),$Sr=o(` class
method.`),kSr=l(),O9=a("p"),SSr=o("This class cannot be instantiated directly using "),VMe=a("code"),RSr=o("__init__()"),PSr=o(" (throws an error)."),BSr=l(),Xt=a("div"),F(V9.$$.fragment),ISr=l(),XMe=a("p"),qSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NSr=l(),Dc=a("p"),jSr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),DSr=o("not"),GSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),OSr=o("from_pretrained()"),VSr=o(" to load the model weights."),XSr=l(),F(x5.$$.fragment),zSr=l(),Or=a("div"),F(X9.$$.fragment),WSr=l(),WMe=a("p"),QSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSr=l(),_n=a("p"),USr=o("The model class to instantiate is selected based on the "),QMe=a("code"),JSr=o("model_type"),YSr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),eRr=o("pretrained_model_name_or_path"),oRr=o(":"),rRr=l(),Le=a("ul"),$5=a("li"),JMe=a("strong"),tRr=o("albert"),aRr=o(" \u2014 "),jY=a("a"),nRr=o("FlaxAlbertForMaskedLM"),sRr=o(" (ALBERT model)"),lRr=l(),k5=a("li"),YMe=a("strong"),iRr=o("bart"),dRr=o(" \u2014 "),DY=a("a"),cRr=o("FlaxBartForConditionalGeneration"),fRr=o(" (BART model)"),mRr=l(),S5=a("li"),KMe=a("strong"),gRr=o("bert"),hRr=o(" \u2014 "),GY=a("a"),pRr=o("FlaxBertForMaskedLM"),uRr=o(" (BERT model)"),_Rr=l(),R5=a("li"),ZMe=a("strong"),bRr=o("big_bird"),vRr=o(" \u2014 "),OY=a("a"),FRr=o("FlaxBigBirdForMaskedLM"),TRr=o(" (BigBird model)"),MRr=l(),P5=a("li"),e4e=a("strong"),ERr=o("distilbert"),CRr=o(" \u2014 "),VY=a("a"),wRr=o("FlaxDistilBertForMaskedLM"),ARr=o(" (DistilBERT model)"),yRr=l(),B5=a("li"),o4e=a("strong"),LRr=o("electra"),xRr=o(" \u2014 "),XY=a("a"),$Rr=o("FlaxElectraForMaskedLM"),kRr=o(" (ELECTRA model)"),SRr=l(),I5=a("li"),r4e=a("strong"),RRr=o("mbart"),PRr=o(" \u2014 "),zY=a("a"),BRr=o("FlaxMBartForConditionalGeneration"),IRr=o(" (mBART model)"),qRr=l(),q5=a("li"),t4e=a("strong"),NRr=o("roberta"),jRr=o(" \u2014 "),WY=a("a"),DRr=o("FlaxRobertaForMaskedLM"),GRr=o(" (RoBERTa model)"),ORr=l(),N5=a("li"),a4e=a("strong"),VRr=o("roformer"),XRr=o(" \u2014 "),QY=a("a"),zRr=o("FlaxRoFormerForMaskedLM"),WRr=o(" (RoFormer model)"),QRr=l(),j5=a("li"),n4e=a("strong"),HRr=o("xlm-roberta"),URr=o(" \u2014 "),HY=a("a"),JRr=o("FlaxXLMRobertaForMaskedLM"),YRr=o(" (XLM-RoBERTa model)"),KRr=l(),F(D5.$$.fragment),jje=l(),Gc=a("h2"),G5=a("a"),s4e=a("span"),F(z9.$$.fragment),ZRr=l(),l4e=a("span"),ePr=o("FlaxAutoModelForSeq2SeqLM"),Dje=l(),pr=a("div"),F(W9.$$.fragment),oPr=l(),Oc=a("p"),rPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=a("a"),tPr=o("from_pretrained()"),aPr=o(" class method or the "),JY=a("a"),nPr=o("from_config()"),sPr=o(` class
method.`),lPr=l(),Q9=a("p"),iPr=o("This class cannot be instantiated directly using "),i4e=a("code"),dPr=o("__init__()"),cPr=o(" (throws an error)."),fPr=l(),zt=a("div"),F(H9.$$.fragment),mPr=l(),d4e=a("p"),gPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hPr=l(),Vc=a("p"),pPr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),uPr=o("not"),_Pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),bPr=o("from_pretrained()"),vPr=o(" to load the model weights."),FPr=l(),F(O5.$$.fragment),TPr=l(),Vr=a("div"),F(U9.$$.fragment),MPr=l(),f4e=a("p"),EPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CPr=l(),bn=a("p"),wPr=o("The model class to instantiate is selected based on the "),m4e=a("code"),APr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),$Pr=o("pretrained_model_name_or_path"),kPr=o(":"),SPr=l(),Pe=a("ul"),V5=a("li"),p4e=a("strong"),RPr=o("bart"),PPr=o(" \u2014 "),KY=a("a"),BPr=o("FlaxBartForConditionalGeneration"),IPr=o(" (BART model)"),qPr=l(),X5=a("li"),u4e=a("strong"),NPr=o("blenderbot"),jPr=o(" \u2014 "),ZY=a("a"),DPr=o("FlaxBlenderbotForConditionalGeneration"),GPr=o(" (Blenderbot model)"),OPr=l(),z5=a("li"),_4e=a("strong"),VPr=o("blenderbot-small"),XPr=o(" \u2014 "),eK=a("a"),zPr=o("FlaxBlenderbotSmallForConditionalGeneration"),WPr=o(" (BlenderbotSmall model)"),QPr=l(),W5=a("li"),b4e=a("strong"),HPr=o("encoder-decoder"),UPr=o(" \u2014 "),oK=a("a"),JPr=o("FlaxEncoderDecoderModel"),YPr=o(" (Encoder decoder model)"),KPr=l(),Q5=a("li"),v4e=a("strong"),ZPr=o("marian"),eBr=o(" \u2014 "),rK=a("a"),oBr=o("FlaxMarianMTModel"),rBr=o(" (Marian model)"),tBr=l(),H5=a("li"),F4e=a("strong"),aBr=o("mbart"),nBr=o(" \u2014 "),tK=a("a"),sBr=o("FlaxMBartForConditionalGeneration"),lBr=o(" (mBART model)"),iBr=l(),U5=a("li"),T4e=a("strong"),dBr=o("mt5"),cBr=o(" \u2014 "),aK=a("a"),fBr=o("FlaxMT5ForConditionalGeneration"),mBr=o(" (mT5 model)"),gBr=l(),J5=a("li"),M4e=a("strong"),hBr=o("pegasus"),pBr=o(" \u2014 "),nK=a("a"),uBr=o("FlaxPegasusForConditionalGeneration"),_Br=o(" (Pegasus model)"),bBr=l(),Y5=a("li"),E4e=a("strong"),vBr=o("t5"),FBr=o(" \u2014 "),sK=a("a"),TBr=o("FlaxT5ForConditionalGeneration"),MBr=o(" (T5 model)"),EBr=l(),F(K5.$$.fragment),Gje=l(),Xc=a("h2"),Z5=a("a"),C4e=a("span"),F(J9.$$.fragment),CBr=l(),w4e=a("span"),wBr=o("FlaxAutoModelForSequenceClassification"),Oje=l(),ur=a("div"),F(Y9.$$.fragment),ABr=l(),zc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lK=a("a"),LBr=o("from_pretrained()"),xBr=o(" class method or the "),iK=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),K9=a("p"),RBr=o("This class cannot be instantiated directly using "),A4e=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Wt=a("div"),F(Z9.$$.fragment),qBr=l(),y4e=a("p"),NBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jBr=l(),Wc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(ew.$$.fragment),WBr=l(),Xr=a("div"),F(ex.$$.fragment),QBr=l(),x4e=a("p"),HBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UBr=l(),vn=a("p"),JBr=o("The model class to instantiate is selected based on the "),$4e=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),xe=a("ul"),ow=a("li"),R4e=a("strong"),aIr=o("albert"),nIr=o(" \u2014 "),cK=a("a"),sIr=o("FlaxAlbertForSequenceClassification"),lIr=o(" (ALBERT model)"),iIr=l(),rw=a("li"),P4e=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),fK=a("a"),fIr=o("FlaxBartForSequenceClassification"),mIr=o(" (BART model)"),gIr=l(),tw=a("li"),B4e=a("strong"),hIr=o("bert"),pIr=o(" \u2014 "),mK=a("a"),uIr=o("FlaxBertForSequenceClassification"),_Ir=o(" (BERT model)"),bIr=l(),aw=a("li"),I4e=a("strong"),vIr=o("big_bird"),FIr=o(" \u2014 "),gK=a("a"),TIr=o("FlaxBigBirdForSequenceClassification"),MIr=o(" (BigBird model)"),EIr=l(),nw=a("li"),q4e=a("strong"),CIr=o("distilbert"),wIr=o(" \u2014 "),hK=a("a"),AIr=o("FlaxDistilBertForSequenceClassification"),yIr=o(" (DistilBERT model)"),LIr=l(),sw=a("li"),N4e=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),pK=a("a"),kIr=o("FlaxElectraForSequenceClassification"),SIr=o(" (ELECTRA model)"),RIr=l(),lw=a("li"),j4e=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),uK=a("a"),IIr=o("FlaxMBartForSequenceClassification"),qIr=o(" (mBART model)"),NIr=l(),iw=a("li"),D4e=a("strong"),jIr=o("roberta"),DIr=o(" \u2014 "),_K=a("a"),GIr=o("FlaxRobertaForSequenceClassification"),OIr=o(" (RoBERTa model)"),VIr=l(),dw=a("li"),G4e=a("strong"),XIr=o("roformer"),zIr=o(" \u2014 "),bK=a("a"),WIr=o("FlaxRoFormerForSequenceClassification"),QIr=o(" (RoFormer model)"),HIr=l(),cw=a("li"),O4e=a("strong"),UIr=o("xlm-roberta"),JIr=o(" \u2014 "),vK=a("a"),YIr=o("FlaxXLMRobertaForSequenceClassification"),KIr=o(" (XLM-RoBERTa model)"),ZIr=l(),F(fw.$$.fragment),Vje=l(),Qc=a("h2"),mw=a("a"),V4e=a("span"),F(ox.$$.fragment),eqr=l(),X4e=a("span"),oqr=o("FlaxAutoModelForQuestionAnswering"),Xje=l(),_r=a("div"),F(rx.$$.fragment),rqr=l(),Hc=a("p"),tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FK=a("a"),aqr=o("from_pretrained()"),nqr=o(" class method or the "),TK=a("a"),sqr=o("from_config()"),lqr=o(` class
method.`),iqr=l(),tx=a("p"),dqr=o("This class cannot be instantiated directly using "),z4e=a("code"),cqr=o("__init__()"),fqr=o(" (throws an error)."),mqr=l(),Qt=a("div"),F(ax.$$.fragment),gqr=l(),W4e=a("p"),hqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pqr=l(),Uc=a("p"),uqr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),_qr=o("not"),bqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),vqr=o("from_pretrained()"),Fqr=o(" to load the model weights."),Tqr=l(),F(gw.$$.fragment),Mqr=l(),zr=a("div"),F(nx.$$.fragment),Eqr=l(),H4e=a("p"),Cqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wqr=l(),Fn=a("p"),Aqr=o("The model class to instantiate is selected based on the "),U4e=a("code"),yqr=o("model_type"),Lqr=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),kqr=o("pretrained_model_name_or_path"),Sqr=o(":"),Rqr=l(),$e=a("ul"),hw=a("li"),K4e=a("strong"),Pqr=o("albert"),Bqr=o(" \u2014 "),EK=a("a"),Iqr=o("FlaxAlbertForQuestionAnswering"),qqr=o(" (ALBERT model)"),Nqr=l(),pw=a("li"),Z4e=a("strong"),jqr=o("bart"),Dqr=o(" \u2014 "),CK=a("a"),Gqr=o("FlaxBartForQuestionAnswering"),Oqr=o(" (BART model)"),Vqr=l(),uw=a("li"),eEe=a("strong"),Xqr=o("bert"),zqr=o(" \u2014 "),wK=a("a"),Wqr=o("FlaxBertForQuestionAnswering"),Qqr=o(" (BERT model)"),Hqr=l(),_w=a("li"),oEe=a("strong"),Uqr=o("big_bird"),Jqr=o(" \u2014 "),AK=a("a"),Yqr=o("FlaxBigBirdForQuestionAnswering"),Kqr=o(" (BigBird model)"),Zqr=l(),bw=a("li"),rEe=a("strong"),eNr=o("distilbert"),oNr=o(" \u2014 "),yK=a("a"),rNr=o("FlaxDistilBertForQuestionAnswering"),tNr=o(" (DistilBERT model)"),aNr=l(),vw=a("li"),tEe=a("strong"),nNr=o("electra"),sNr=o(" \u2014 "),LK=a("a"),lNr=o("FlaxElectraForQuestionAnswering"),iNr=o(" (ELECTRA model)"),dNr=l(),Fw=a("li"),aEe=a("strong"),cNr=o("mbart"),fNr=o(" \u2014 "),xK=a("a"),mNr=o("FlaxMBartForQuestionAnswering"),gNr=o(" (mBART model)"),hNr=l(),Tw=a("li"),nEe=a("strong"),pNr=o("roberta"),uNr=o(" \u2014 "),$K=a("a"),_Nr=o("FlaxRobertaForQuestionAnswering"),bNr=o(" (RoBERTa model)"),vNr=l(),Mw=a("li"),sEe=a("strong"),FNr=o("roformer"),TNr=o(" \u2014 "),kK=a("a"),MNr=o("FlaxRoFormerForQuestionAnswering"),ENr=o(" (RoFormer model)"),CNr=l(),Ew=a("li"),lEe=a("strong"),wNr=o("xlm-roberta"),ANr=o(" \u2014 "),SK=a("a"),yNr=o("FlaxXLMRobertaForQuestionAnswering"),LNr=o(" (XLM-RoBERTa model)"),xNr=l(),F(Cw.$$.fragment),zje=l(),Jc=a("h2"),ww=a("a"),iEe=a("span"),F(sx.$$.fragment),$Nr=l(),dEe=a("span"),kNr=o("FlaxAutoModelForTokenClassification"),Wje=l(),br=a("div"),F(lx.$$.fragment),SNr=l(),Yc=a("p"),RNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RK=a("a"),PNr=o("from_pretrained()"),BNr=o(" class method or the "),PK=a("a"),INr=o("from_config()"),qNr=o(` class
method.`),NNr=l(),ix=a("p"),jNr=o("This class cannot be instantiated directly using "),cEe=a("code"),DNr=o("__init__()"),GNr=o(" (throws an error)."),ONr=l(),Ht=a("div"),F(dx.$$.fragment),VNr=l(),fEe=a("p"),XNr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zNr=l(),Kc=a("p"),WNr=o(`Note:
Loading a model from its configuration file does `),mEe=a("strong"),QNr=o("not"),HNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),UNr=o("from_pretrained()"),JNr=o(" to load the model weights."),YNr=l(),F(Aw.$$.fragment),KNr=l(),Wr=a("div"),F(cx.$$.fragment),ZNr=l(),gEe=a("p"),ejr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ojr=l(),Tn=a("p"),rjr=o("The model class to instantiate is selected based on the "),hEe=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),pEe=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),De=a("ul"),yw=a("li"),_Ee=a("strong"),cjr=o("albert"),fjr=o(" \u2014 "),IK=a("a"),mjr=o("FlaxAlbertForTokenClassification"),gjr=o(" (ALBERT model)"),hjr=l(),Lw=a("li"),bEe=a("strong"),pjr=o("bert"),ujr=o(" \u2014 "),qK=a("a"),_jr=o("FlaxBertForTokenClassification"),bjr=o(" (BERT model)"),vjr=l(),xw=a("li"),vEe=a("strong"),Fjr=o("big_bird"),Tjr=o(" \u2014 "),NK=a("a"),Mjr=o("FlaxBigBirdForTokenClassification"),Ejr=o(" (BigBird model)"),Cjr=l(),$w=a("li"),FEe=a("strong"),wjr=o("distilbert"),Ajr=o(" \u2014 "),jK=a("a"),yjr=o("FlaxDistilBertForTokenClassification"),Ljr=o(" (DistilBERT model)"),xjr=l(),kw=a("li"),TEe=a("strong"),$jr=o("electra"),kjr=o(" \u2014 "),DK=a("a"),Sjr=o("FlaxElectraForTokenClassification"),Rjr=o(" (ELECTRA model)"),Pjr=l(),Sw=a("li"),MEe=a("strong"),Bjr=o("roberta"),Ijr=o(" \u2014 "),GK=a("a"),qjr=o("FlaxRobertaForTokenClassification"),Njr=o(" (RoBERTa model)"),jjr=l(),Rw=a("li"),EEe=a("strong"),Djr=o("roformer"),Gjr=o(" \u2014 "),OK=a("a"),Ojr=o("FlaxRoFormerForTokenClassification"),Vjr=o(" (RoFormer model)"),Xjr=l(),Pw=a("li"),CEe=a("strong"),zjr=o("xlm-roberta"),Wjr=o(" \u2014 "),VK=a("a"),Qjr=o("FlaxXLMRobertaForTokenClassification"),Hjr=o(" (XLM-RoBERTa model)"),Ujr=l(),F(Bw.$$.fragment),Qje=l(),Zc=a("h2"),Iw=a("a"),wEe=a("span"),F(fx.$$.fragment),Jjr=l(),AEe=a("span"),Yjr=o("FlaxAutoModelForMultipleChoice"),Hje=l(),vr=a("div"),F(mx.$$.fragment),Kjr=l(),ef=a("p"),Zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=a("a"),eDr=o("from_pretrained()"),oDr=o(" class method or the "),zK=a("a"),rDr=o("from_config()"),tDr=o(` class
method.`),aDr=l(),gx=a("p"),nDr=o("This class cannot be instantiated directly using "),yEe=a("code"),sDr=o("__init__()"),lDr=o(" (throws an error)."),iDr=l(),Ut=a("div"),F(hx.$$.fragment),dDr=l(),LEe=a("p"),cDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fDr=l(),of=a("p"),mDr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),gDr=o("not"),hDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),pDr=o("from_pretrained()"),uDr=o(" to load the model weights."),_Dr=l(),F(qw.$$.fragment),bDr=l(),Qr=a("div"),F(px.$$.fragment),vDr=l(),$Ee=a("p"),FDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TDr=l(),Mn=a("p"),MDr=o("The model class to instantiate is selected based on the "),kEe=a("code"),EDr=o("model_type"),CDr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),wDr=o("pretrained_model_name_or_path"),ADr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),yDr=o("pretrained_model_name_or_path"),LDr=o(":"),xDr=l(),Ge=a("ul"),Nw=a("li"),PEe=a("strong"),$Dr=o("albert"),kDr=o(" \u2014 "),QK=a("a"),SDr=o("FlaxAlbertForMultipleChoice"),RDr=o(" (ALBERT model)"),PDr=l(),jw=a("li"),BEe=a("strong"),BDr=o("bert"),IDr=o(" \u2014 "),HK=a("a"),qDr=o("FlaxBertForMultipleChoice"),NDr=o(" (BERT model)"),jDr=l(),Dw=a("li"),IEe=a("strong"),DDr=o("big_bird"),GDr=o(" \u2014 "),UK=a("a"),ODr=o("FlaxBigBirdForMultipleChoice"),VDr=o(" (BigBird model)"),XDr=l(),Gw=a("li"),qEe=a("strong"),zDr=o("distilbert"),WDr=o(" \u2014 "),JK=a("a"),QDr=o("FlaxDistilBertForMultipleChoice"),HDr=o(" (DistilBERT model)"),UDr=l(),Ow=a("li"),NEe=a("strong"),JDr=o("electra"),YDr=o(" \u2014 "),YK=a("a"),KDr=o("FlaxElectraForMultipleChoice"),ZDr=o(" (ELECTRA model)"),eGr=l(),Vw=a("li"),jEe=a("strong"),oGr=o("roberta"),rGr=o(" \u2014 "),KK=a("a"),tGr=o("FlaxRobertaForMultipleChoice"),aGr=o(" (RoBERTa model)"),nGr=l(),Xw=a("li"),DEe=a("strong"),sGr=o("roformer"),lGr=o(" \u2014 "),ZK=a("a"),iGr=o("FlaxRoFormerForMultipleChoice"),dGr=o(" (RoFormer model)"),cGr=l(),zw=a("li"),GEe=a("strong"),fGr=o("xlm-roberta"),mGr=o(" \u2014 "),eZ=a("a"),gGr=o("FlaxXLMRobertaForMultipleChoice"),hGr=o(" (XLM-RoBERTa model)"),pGr=l(),F(Ww.$$.fragment),Uje=l(),rf=a("h2"),Qw=a("a"),OEe=a("span"),F(ux.$$.fragment),uGr=l(),VEe=a("span"),_Gr=o("FlaxAutoModelForNextSentencePrediction"),Jje=l(),Fr=a("div"),F(_x.$$.fragment),bGr=l(),tf=a("p"),vGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oZ=a("a"),FGr=o("from_pretrained()"),TGr=o(" class method or the "),rZ=a("a"),MGr=o("from_config()"),EGr=o(` class
method.`),CGr=l(),bx=a("p"),wGr=o("This class cannot be instantiated directly using "),XEe=a("code"),AGr=o("__init__()"),yGr=o(" (throws an error)."),LGr=l(),Jt=a("div"),F(vx.$$.fragment),xGr=l(),zEe=a("p"),$Gr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kGr=l(),af=a("p"),SGr=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),RGr=o("not"),PGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),BGr=o("from_pretrained()"),IGr=o(" to load the model weights."),qGr=l(),F(Hw.$$.fragment),NGr=l(),Hr=a("div"),F(Fx.$$.fragment),jGr=l(),QEe=a("p"),DGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GGr=l(),En=a("p"),OGr=o("The model class to instantiate is selected based on the "),HEe=a("code"),VGr=o("model_type"),XGr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),zGr=o("pretrained_model_name_or_path"),WGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(":"),UGr=l(),YEe=a("ul"),Uw=a("li"),KEe=a("strong"),JGr=o("bert"),YGr=o(" \u2014 "),aZ=a("a"),KGr=o("FlaxBertForNextSentencePrediction"),ZGr=o(" (BERT model)"),eOr=l(),F(Jw.$$.fragment),Yje=l(),nf=a("h2"),Yw=a("a"),ZEe=a("span"),F(Tx.$$.fragment),oOr=l(),eCe=a("span"),rOr=o("FlaxAutoModelForImageClassification"),Kje=l(),Tr=a("div"),F(Mx.$$.fragment),tOr=l(),sf=a("p"),aOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nZ=a("a"),nOr=o("from_pretrained()"),sOr=o(" class method or the "),sZ=a("a"),lOr=o("from_config()"),iOr=o(` class
method.`),dOr=l(),Ex=a("p"),cOr=o("This class cannot be instantiated directly using "),oCe=a("code"),fOr=o("__init__()"),mOr=o(" (throws an error)."),gOr=l(),Yt=a("div"),F(Cx.$$.fragment),hOr=l(),rCe=a("p"),pOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uOr=l(),lf=a("p"),_Or=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),bOr=o("not"),vOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),FOr=o("from_pretrained()"),TOr=o(" to load the model weights."),MOr=l(),F(Kw.$$.fragment),EOr=l(),Ur=a("div"),F(wx.$$.fragment),COr=l(),aCe=a("p"),wOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AOr=l(),Cn=a("p"),yOr=o("The model class to instantiate is selected based on the "),nCe=a("code"),LOr=o("model_type"),xOr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),$Or=o("pretrained_model_name_or_path"),kOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(":"),POr=l(),Ax=a("ul"),Zw=a("li"),iCe=a("strong"),BOr=o("beit"),IOr=o(" \u2014 "),iZ=a("a"),qOr=o("FlaxBeitForImageClassification"),NOr=o(" (BEiT model)"),jOr=l(),e0=a("li"),dCe=a("strong"),DOr=o("vit"),GOr=o(" \u2014 "),dZ=a("a"),OOr=o("FlaxViTForImageClassification"),VOr=o(" (ViT model)"),XOr=l(),F(o0.$$.fragment),Zje=l(),df=a("h2"),r0=a("a"),cCe=a("span"),F(yx.$$.fragment),zOr=l(),fCe=a("span"),WOr=o("FlaxAutoModelForVision2Seq"),eDe=l(),Mr=a("div"),F(Lx.$$.fragment),QOr=l(),cf=a("p"),HOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cZ=a("a"),UOr=o("from_pretrained()"),JOr=o(" class method or the "),fZ=a("a"),YOr=o("from_config()"),KOr=o(` class
method.`),ZOr=l(),xx=a("p"),eVr=o("This class cannot be instantiated directly using "),mCe=a("code"),oVr=o("__init__()"),rVr=o(" (throws an error)."),tVr=l(),Kt=a("div"),F($x.$$.fragment),aVr=l(),gCe=a("p"),nVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sVr=l(),ff=a("p"),lVr=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),iVr=o("not"),dVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),cVr=o("from_pretrained()"),fVr=o(" to load the model weights."),mVr=l(),F(t0.$$.fragment),gVr=l(),Jr=a("div"),F(kx.$$.fragment),hVr=l(),pCe=a("p"),pVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uVr=l(),wn=a("p"),_Vr=o("The model class to instantiate is selected based on the "),uCe=a("code"),bVr=o("model_type"),vVr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),MVr=o("pretrained_model_name_or_path"),EVr=o(":"),CVr=l(),vCe=a("ul"),a0=a("li"),FCe=a("strong"),wVr=o("vision-encoder-decoder"),AVr=o(" \u2014 "),gZ=a("a"),yVr=o("FlaxVisionEncoderDecoderModel"),LVr=o(" (Vision Encoder decoder model)"),xVr=l(),F(n0.$$.fragment),this.h()},l(f){const _=d$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Sx=s(p);m=n(Sx,"A",{id:!0,class:!0,href:!0});var TCe=s(m);u=n(TCe,"SPAN",{});var MCe=s(u);T(d.$$.fragment,MCe),MCe.forEach(t),TCe.forEach(t),h=i(Sx),Mo=n(Sx,"SPAN",{});var ECe=s(Mo);fi=r(ECe,"Auto Classes"),ECe.forEach(t),Sx.forEach(t),pf=i(f),rt=n(f,"P",{});var Rx=s(rt);mi=r(Rx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Rx,"CODE",{});var CCe=s(gi);E6=r(CCe,"from_pretrained()"),CCe.forEach(t),uf=r(Rx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Rx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var wCe=s(yn);C6=r(wCe,"AutoConfig"),wCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var ACe=s(xn);w6=r(ACe,"AutoModel"),ACe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var yCe=s($n);A6=r(yCe,"AutoTokenizer"),yCe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Px=s(Ae);z$=r(Px,"will create a model that is an instance of "),_i=n(Px,"A",{href:!0});var LCe=s(_i);W$=r(LCe,"BertModel"),LCe.forEach(t),Q$=r(Px,"."),Px.forEach(t),Eo=i(f),wa=n(f,"P",{});var Bx=s(wa);H$=r(Bx,"There is one class of "),bf=n(Bx,"CODE",{});var xCe=s(bf);U$=r(xCe,"AutoModel"),xCe.forEach(t),dOe=r(Bx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bx.forEach(t),Kqe=i(f),bi=n(f,"H2",{class:!0});var Ix=s(bi);vf=n(Ix,"A",{id:!0,class:!0,href:!0});var $Ce=s(vf);soe=n($Ce,"SPAN",{});var kCe=s(soe);T(y6.$$.fragment,kCe),kCe.forEach(t),$Ce.forEach(t),cOe=i(Ix),loe=n(Ix,"SPAN",{});var SCe=s(loe);fOe=r(SCe,"Extending the Auto Classes"),SCe.forEach(t),Ix.forEach(t),Zqe=i(f),kn=n(f,"P",{});var mf=s(kn);mOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ioe=n(mf,"CODE",{});var RCe=s(ioe);gOe=r(RCe,"NewModel"),RCe.forEach(t),hOe=r(mf,", make sure you have a "),doe=n(mf,"CODE",{});var PCe=s(doe);pOe=r(PCe,"NewModelConfig"),PCe.forEach(t),uOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),eNe=i(f),T(L6.$$.fragment,f),oNe=i(f),J$=n(f,"P",{});var BCe=s(J$);_Oe=r(BCe,"You will then be able to use the auto classes like you would usually do!"),BCe.forEach(t),rNe=i(f),T(Ff.$$.fragment,f),tNe=i(f),vi=n(f,"H2",{class:!0});var qx=s(vi);Tf=n(qx,"A",{id:!0,class:!0,href:!0});var ICe=s(Tf);coe=n(ICe,"SPAN",{});var qCe=s(coe);T(x6.$$.fragment,qCe),qCe.forEach(t),ICe.forEach(t),bOe=i(qx),foe=n(qx,"SPAN",{});var NCe=s(foe);vOe=r(NCe,"AutoConfig"),NCe.forEach(t),qx.forEach(t),aNe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T($6.$$.fragment,et),FOe=i(et),k6=n(et,"P",{});var Nx=s(k6);TOe=r(Nx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y$=n(Nx,"A",{href:!0});var jCe=s(Y$);MOe=r(jCe,"from_pretrained()"),jCe.forEach(t),EOe=r(Nx," class method."),Nx.forEach(t),COe=i(et),S6=n(et,"P",{});var jx=s(S6);wOe=r(jx,"This class cannot be instantiated directly using "),moe=n(jx,"CODE",{});var DCe=s(moe);AOe=r(DCe,"__init__()"),DCe.forEach(t),yOe=r(jx," (throws an error)."),jx.forEach(t),LOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(R6.$$.fragment,ot),xOe=i(ot),goe=n(ot,"P",{});var GCe=s(goe);$Oe=r(GCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),GCe.forEach(t),kOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);SOe=r(gf,"The configuration class to instantiate is selected based on the "),hoe=n(gf,"CODE",{});var OCe=s(hoe);ROe=r(OCe,"model_type"),OCe.forEach(t),POe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),poe=n(gf,"CODE",{});var VCe=s(poe);BOe=r(VCe,"pretrained_model_name_or_path"),VCe.forEach(t),IOe=r(gf,":"),gf.forEach(t),qOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var s0=s(Mf);uoe=n(s0,"STRONG",{});var XCe=s(uoe);NOe=r(XCe,"albert"),XCe.forEach(t),jOe=r(s0," \u2014 "),K$=n(s0,"A",{href:!0});var zCe=s(K$);DOe=r(zCe,"AlbertConfig"),zCe.forEach(t),GOe=r(s0," (ALBERT model)"),s0.forEach(t),OOe=i(y),Ef=n(y,"LI",{});var l0=s(Ef);_oe=n(l0,"STRONG",{});var WCe=s(_oe);VOe=r(WCe,"bart"),WCe.forEach(t),XOe=r(l0," \u2014 "),Z$=n(l0,"A",{href:!0});var QCe=s(Z$);zOe=r(QCe,"BartConfig"),QCe.forEach(t),WOe=r(l0," (BART model)"),l0.forEach(t),QOe=i(y),Cf=n(y,"LI",{});var i0=s(Cf);boe=n(i0,"STRONG",{});var HCe=s(boe);HOe=r(HCe,"beit"),HCe.forEach(t),UOe=r(i0," \u2014 "),ek=n(i0,"A",{href:!0});var UCe=s(ek);JOe=r(UCe,"BeitConfig"),UCe.forEach(t),YOe=r(i0," (BEiT model)"),i0.forEach(t),KOe=i(y),wf=n(y,"LI",{});var d0=s(wf);voe=n(d0,"STRONG",{});var JCe=s(voe);ZOe=r(JCe,"bert"),JCe.forEach(t),eVe=r(d0," \u2014 "),ok=n(d0,"A",{href:!0});var YCe=s(ok);oVe=r(YCe,"BertConfig"),YCe.forEach(t),rVe=r(d0," (BERT model)"),d0.forEach(t),tVe=i(y),Af=n(y,"LI",{});var c0=s(Af);Foe=n(c0,"STRONG",{});var KCe=s(Foe);aVe=r(KCe,"bert-generation"),KCe.forEach(t),nVe=r(c0," \u2014 "),rk=n(c0,"A",{href:!0});var ZCe=s(rk);sVe=r(ZCe,"BertGenerationConfig"),ZCe.forEach(t),lVe=r(c0," (Bert Generation model)"),c0.forEach(t),iVe=i(y),yf=n(y,"LI",{});var f0=s(yf);Toe=n(f0,"STRONG",{});var e5e=s(Toe);dVe=r(e5e,"big_bird"),e5e.forEach(t),cVe=r(f0," \u2014 "),tk=n(f0,"A",{href:!0});var o5e=s(tk);fVe=r(o5e,"BigBirdConfig"),o5e.forEach(t),mVe=r(f0," (BigBird model)"),f0.forEach(t),gVe=i(y),Lf=n(y,"LI",{});var m0=s(Lf);Moe=n(m0,"STRONG",{});var r5e=s(Moe);hVe=r(r5e,"bigbird_pegasus"),r5e.forEach(t),pVe=r(m0," \u2014 "),ak=n(m0,"A",{href:!0});var t5e=s(ak);uVe=r(t5e,"BigBirdPegasusConfig"),t5e.forEach(t),_Ve=r(m0," (BigBirdPegasus model)"),m0.forEach(t),bVe=i(y),xf=n(y,"LI",{});var g0=s(xf);Eoe=n(g0,"STRONG",{});var a5e=s(Eoe);vVe=r(a5e,"blenderbot"),a5e.forEach(t),FVe=r(g0," \u2014 "),nk=n(g0,"A",{href:!0});var n5e=s(nk);TVe=r(n5e,"BlenderbotConfig"),n5e.forEach(t),MVe=r(g0," (Blenderbot model)"),g0.forEach(t),EVe=i(y),$f=n(y,"LI",{});var h0=s($f);Coe=n(h0,"STRONG",{});var s5e=s(Coe);CVe=r(s5e,"blenderbot-small"),s5e.forEach(t),wVe=r(h0," \u2014 "),sk=n(h0,"A",{href:!0});var l5e=s(sk);AVe=r(l5e,"BlenderbotSmallConfig"),l5e.forEach(t),yVe=r(h0," (BlenderbotSmall model)"),h0.forEach(t),LVe=i(y),kf=n(y,"LI",{});var p0=s(kf);woe=n(p0,"STRONG",{});var i5e=s(woe);xVe=r(i5e,"camembert"),i5e.forEach(t),$Ve=r(p0," \u2014 "),lk=n(p0,"A",{href:!0});var d5e=s(lk);kVe=r(d5e,"CamembertConfig"),d5e.forEach(t),SVe=r(p0," (CamemBERT model)"),p0.forEach(t),RVe=i(y),Sf=n(y,"LI",{});var u0=s(Sf);Aoe=n(u0,"STRONG",{});var c5e=s(Aoe);PVe=r(c5e,"canine"),c5e.forEach(t),BVe=r(u0," \u2014 "),ik=n(u0,"A",{href:!0});var f5e=s(ik);IVe=r(f5e,"CanineConfig"),f5e.forEach(t),qVe=r(u0," (Canine model)"),u0.forEach(t),NVe=i(y),Rf=n(y,"LI",{});var _0=s(Rf);yoe=n(_0,"STRONG",{});var m5e=s(yoe);jVe=r(m5e,"clip"),m5e.forEach(t),DVe=r(_0," \u2014 "),dk=n(_0,"A",{href:!0});var g5e=s(dk);GVe=r(g5e,"CLIPConfig"),g5e.forEach(t),OVe=r(_0," (CLIP model)"),_0.forEach(t),VVe=i(y),Pf=n(y,"LI",{});var b0=s(Pf);Loe=n(b0,"STRONG",{});var h5e=s(Loe);XVe=r(h5e,"convbert"),h5e.forEach(t),zVe=r(b0," \u2014 "),ck=n(b0,"A",{href:!0});var p5e=s(ck);WVe=r(p5e,"ConvBertConfig"),p5e.forEach(t),QVe=r(b0," (ConvBERT model)"),b0.forEach(t),HVe=i(y),Bf=n(y,"LI",{});var v0=s(Bf);xoe=n(v0,"STRONG",{});var u5e=s(xoe);UVe=r(u5e,"convnext"),u5e.forEach(t),JVe=r(v0," \u2014 "),fk=n(v0,"A",{href:!0});var _5e=s(fk);YVe=r(_5e,"ConvNextConfig"),_5e.forEach(t),KVe=r(v0," (ConvNext model)"),v0.forEach(t),ZVe=i(y),If=n(y,"LI",{});var F0=s(If);$oe=n(F0,"STRONG",{});var b5e=s($oe);eXe=r(b5e,"ctrl"),b5e.forEach(t),oXe=r(F0," \u2014 "),mk=n(F0,"A",{href:!0});var v5e=s(mk);rXe=r(v5e,"CTRLConfig"),v5e.forEach(t),tXe=r(F0," (CTRL model)"),F0.forEach(t),aXe=i(y),qf=n(y,"LI",{});var T0=s(qf);koe=n(T0,"STRONG",{});var F5e=s(koe);nXe=r(F5e,"cvt"),F5e.forEach(t),sXe=r(T0," \u2014 "),gk=n(T0,"A",{href:!0});var T5e=s(gk);lXe=r(T5e,"CvtConfig"),T5e.forEach(t),iXe=r(T0," (CvT model)"),T0.forEach(t),dXe=i(y),Nf=n(y,"LI",{});var M0=s(Nf);Soe=n(M0,"STRONG",{});var M5e=s(Soe);cXe=r(M5e,"data2vec-audio"),M5e.forEach(t),fXe=r(M0," \u2014 "),hk=n(M0,"A",{href:!0});var E5e=s(hk);mXe=r(E5e,"Data2VecAudioConfig"),E5e.forEach(t),gXe=r(M0," (Data2VecAudio model)"),M0.forEach(t),hXe=i(y),jf=n(y,"LI",{});var E0=s(jf);Roe=n(E0,"STRONG",{});var C5e=s(Roe);pXe=r(C5e,"data2vec-text"),C5e.forEach(t),uXe=r(E0," \u2014 "),pk=n(E0,"A",{href:!0});var w5e=s(pk);_Xe=r(w5e,"Data2VecTextConfig"),w5e.forEach(t),bXe=r(E0," (Data2VecText model)"),E0.forEach(t),vXe=i(y),Df=n(y,"LI",{});var C0=s(Df);Poe=n(C0,"STRONG",{});var A5e=s(Poe);FXe=r(A5e,"data2vec-vision"),A5e.forEach(t),TXe=r(C0," \u2014 "),uk=n(C0,"A",{href:!0});var y5e=s(uk);MXe=r(y5e,"Data2VecVisionConfig"),y5e.forEach(t),EXe=r(C0," (Data2VecVision model)"),C0.forEach(t),CXe=i(y),Gf=n(y,"LI",{});var w0=s(Gf);Boe=n(w0,"STRONG",{});var L5e=s(Boe);wXe=r(L5e,"deberta"),L5e.forEach(t),AXe=r(w0," \u2014 "),_k=n(w0,"A",{href:!0});var x5e=s(_k);yXe=r(x5e,"DebertaConfig"),x5e.forEach(t),LXe=r(w0," (DeBERTa model)"),w0.forEach(t),xXe=i(y),Of=n(y,"LI",{});var A0=s(Of);Ioe=n(A0,"STRONG",{});var $5e=s(Ioe);$Xe=r($5e,"deberta-v2"),$5e.forEach(t),kXe=r(A0," \u2014 "),bk=n(A0,"A",{href:!0});var k5e=s(bk);SXe=r(k5e,"DebertaV2Config"),k5e.forEach(t),RXe=r(A0," (DeBERTa-v2 model)"),A0.forEach(t),PXe=i(y),Vf=n(y,"LI",{});var y0=s(Vf);qoe=n(y0,"STRONG",{});var S5e=s(qoe);BXe=r(S5e,"decision_transformer"),S5e.forEach(t),IXe=r(y0," \u2014 "),vk=n(y0,"A",{href:!0});var R5e=s(vk);qXe=r(R5e,"DecisionTransformerConfig"),R5e.forEach(t),NXe=r(y0," (Decision Transformer model)"),y0.forEach(t),jXe=i(y),Xf=n(y,"LI",{});var L0=s(Xf);Noe=n(L0,"STRONG",{});var P5e=s(Noe);DXe=r(P5e,"deit"),P5e.forEach(t),GXe=r(L0," \u2014 "),Fk=n(L0,"A",{href:!0});var kVr=s(Fk);OXe=r(kVr,"DeiTConfig"),kVr.forEach(t),VXe=r(L0," (DeiT model)"),L0.forEach(t),XXe=i(y),zf=n(y,"LI",{});var B5e=s(zf);joe=n(B5e,"STRONG",{});var SVr=s(joe);zXe=r(SVr,"detr"),SVr.forEach(t),WXe=r(B5e," \u2014 "),Tk=n(B5e,"A",{href:!0});var RVr=s(Tk);QXe=r(RVr,"DetrConfig"),RVr.forEach(t),HXe=r(B5e," (DETR model)"),B5e.forEach(t),UXe=i(y),Wf=n(y,"LI",{});var I5e=s(Wf);Doe=n(I5e,"STRONG",{});var PVr=s(Doe);JXe=r(PVr,"distilbert"),PVr.forEach(t),YXe=r(I5e," \u2014 "),Mk=n(I5e,"A",{href:!0});var BVr=s(Mk);KXe=r(BVr,"DistilBertConfig"),BVr.forEach(t),ZXe=r(I5e," (DistilBERT model)"),I5e.forEach(t),eze=i(y),Qf=n(y,"LI",{});var q5e=s(Qf);Goe=n(q5e,"STRONG",{});var IVr=s(Goe);oze=r(IVr,"dpr"),IVr.forEach(t),rze=r(q5e," \u2014 "),Ek=n(q5e,"A",{href:!0});var qVr=s(Ek);tze=r(qVr,"DPRConfig"),qVr.forEach(t),aze=r(q5e," (DPR model)"),q5e.forEach(t),nze=i(y),Hf=n(y,"LI",{});var N5e=s(Hf);Ooe=n(N5e,"STRONG",{});var NVr=s(Ooe);sze=r(NVr,"dpt"),NVr.forEach(t),lze=r(N5e," \u2014 "),Ck=n(N5e,"A",{href:!0});var jVr=s(Ck);ize=r(jVr,"DPTConfig"),jVr.forEach(t),dze=r(N5e," (DPT model)"),N5e.forEach(t),cze=i(y),Uf=n(y,"LI",{});var j5e=s(Uf);Voe=n(j5e,"STRONG",{});var DVr=s(Voe);fze=r(DVr,"electra"),DVr.forEach(t),mze=r(j5e," \u2014 "),wk=n(j5e,"A",{href:!0});var GVr=s(wk);gze=r(GVr,"ElectraConfig"),GVr.forEach(t),hze=r(j5e," (ELECTRA model)"),j5e.forEach(t),pze=i(y),Jf=n(y,"LI",{});var D5e=s(Jf);Xoe=n(D5e,"STRONG",{});var OVr=s(Xoe);uze=r(OVr,"encoder-decoder"),OVr.forEach(t),_ze=r(D5e," \u2014 "),Ak=n(D5e,"A",{href:!0});var VVr=s(Ak);bze=r(VVr,"EncoderDecoderConfig"),VVr.forEach(t),vze=r(D5e," (Encoder decoder model)"),D5e.forEach(t),Fze=i(y),Yf=n(y,"LI",{});var G5e=s(Yf);zoe=n(G5e,"STRONG",{});var XVr=s(zoe);Tze=r(XVr,"flaubert"),XVr.forEach(t),Mze=r(G5e," \u2014 "),yk=n(G5e,"A",{href:!0});var zVr=s(yk);Eze=r(zVr,"FlaubertConfig"),zVr.forEach(t),Cze=r(G5e," (FlauBERT model)"),G5e.forEach(t),wze=i(y),Kf=n(y,"LI",{});var O5e=s(Kf);Woe=n(O5e,"STRONG",{});var WVr=s(Woe);Aze=r(WVr,"flava"),WVr.forEach(t),yze=r(O5e," \u2014 "),Lk=n(O5e,"A",{href:!0});var QVr=s(Lk);Lze=r(QVr,"FlavaConfig"),QVr.forEach(t),xze=r(O5e," (Flava model)"),O5e.forEach(t),$ze=i(y),Zf=n(y,"LI",{});var V5e=s(Zf);Qoe=n(V5e,"STRONG",{});var HVr=s(Qoe);kze=r(HVr,"fnet"),HVr.forEach(t),Sze=r(V5e," \u2014 "),xk=n(V5e,"A",{href:!0});var UVr=s(xk);Rze=r(UVr,"FNetConfig"),UVr.forEach(t),Pze=r(V5e," (FNet model)"),V5e.forEach(t),Bze=i(y),em=n(y,"LI",{});var X5e=s(em);Hoe=n(X5e,"STRONG",{});var JVr=s(Hoe);Ize=r(JVr,"fsmt"),JVr.forEach(t),qze=r(X5e," \u2014 "),$k=n(X5e,"A",{href:!0});var YVr=s($k);Nze=r(YVr,"FSMTConfig"),YVr.forEach(t),jze=r(X5e," (FairSeq Machine-Translation model)"),X5e.forEach(t),Dze=i(y),om=n(y,"LI",{});var z5e=s(om);Uoe=n(z5e,"STRONG",{});var KVr=s(Uoe);Gze=r(KVr,"funnel"),KVr.forEach(t),Oze=r(z5e," \u2014 "),kk=n(z5e,"A",{href:!0});var ZVr=s(kk);Vze=r(ZVr,"FunnelConfig"),ZVr.forEach(t),Xze=r(z5e," (Funnel Transformer model)"),z5e.forEach(t),zze=i(y),rm=n(y,"LI",{});var W5e=s(rm);Joe=n(W5e,"STRONG",{});var eXr=s(Joe);Wze=r(eXr,"glpn"),eXr.forEach(t),Qze=r(W5e," \u2014 "),Sk=n(W5e,"A",{href:!0});var oXr=s(Sk);Hze=r(oXr,"GLPNConfig"),oXr.forEach(t),Uze=r(W5e," (GLPN model)"),W5e.forEach(t),Jze=i(y),tm=n(y,"LI",{});var Q5e=s(tm);Yoe=n(Q5e,"STRONG",{});var rXr=s(Yoe);Yze=r(rXr,"gpt2"),rXr.forEach(t),Kze=r(Q5e," \u2014 "),Rk=n(Q5e,"A",{href:!0});var tXr=s(Rk);Zze=r(tXr,"GPT2Config"),tXr.forEach(t),eWe=r(Q5e," (OpenAI GPT-2 model)"),Q5e.forEach(t),oWe=i(y),am=n(y,"LI",{});var H5e=s(am);Koe=n(H5e,"STRONG",{});var aXr=s(Koe);rWe=r(aXr,"gpt_neo"),aXr.forEach(t),tWe=r(H5e," \u2014 "),Pk=n(H5e,"A",{href:!0});var nXr=s(Pk);aWe=r(nXr,"GPTNeoConfig"),nXr.forEach(t),nWe=r(H5e," (GPT Neo model)"),H5e.forEach(t),sWe=i(y),nm=n(y,"LI",{});var U5e=s(nm);Zoe=n(U5e,"STRONG",{});var sXr=s(Zoe);lWe=r(sXr,"gpt_neox"),sXr.forEach(t),iWe=r(U5e," \u2014 "),Bk=n(U5e,"A",{href:!0});var lXr=s(Bk);dWe=r(lXr,"GPTNeoXConfig"),lXr.forEach(t),cWe=r(U5e," (GPT NeoX model)"),U5e.forEach(t),fWe=i(y),sm=n(y,"LI",{});var J5e=s(sm);ere=n(J5e,"STRONG",{});var iXr=s(ere);mWe=r(iXr,"gptj"),iXr.forEach(t),gWe=r(J5e," \u2014 "),Ik=n(J5e,"A",{href:!0});var dXr=s(Ik);hWe=r(dXr,"GPTJConfig"),dXr.forEach(t),pWe=r(J5e," (GPT-J model)"),J5e.forEach(t),uWe=i(y),lm=n(y,"LI",{});var Y5e=s(lm);ore=n(Y5e,"STRONG",{});var cXr=s(ore);_We=r(cXr,"hubert"),cXr.forEach(t),bWe=r(Y5e," \u2014 "),qk=n(Y5e,"A",{href:!0});var fXr=s(qk);vWe=r(fXr,"HubertConfig"),fXr.forEach(t),FWe=r(Y5e," (Hubert model)"),Y5e.forEach(t),TWe=i(y),im=n(y,"LI",{});var K5e=s(im);rre=n(K5e,"STRONG",{});var mXr=s(rre);MWe=r(mXr,"ibert"),mXr.forEach(t),EWe=r(K5e," \u2014 "),Nk=n(K5e,"A",{href:!0});var gXr=s(Nk);CWe=r(gXr,"IBertConfig"),gXr.forEach(t),wWe=r(K5e," (I-BERT model)"),K5e.forEach(t),AWe=i(y),dm=n(y,"LI",{});var Z5e=s(dm);tre=n(Z5e,"STRONG",{});var hXr=s(tre);yWe=r(hXr,"imagegpt"),hXr.forEach(t),LWe=r(Z5e," \u2014 "),jk=n(Z5e,"A",{href:!0});var pXr=s(jk);xWe=r(pXr,"ImageGPTConfig"),pXr.forEach(t),$We=r(Z5e," (ImageGPT model)"),Z5e.forEach(t),kWe=i(y),cm=n(y,"LI",{});var ewe=s(cm);are=n(ewe,"STRONG",{});var uXr=s(are);SWe=r(uXr,"layoutlm"),uXr.forEach(t),RWe=r(ewe," \u2014 "),Dk=n(ewe,"A",{href:!0});var _Xr=s(Dk);PWe=r(_Xr,"LayoutLMConfig"),_Xr.forEach(t),BWe=r(ewe," (LayoutLM model)"),ewe.forEach(t),IWe=i(y),fm=n(y,"LI",{});var owe=s(fm);nre=n(owe,"STRONG",{});var bXr=s(nre);qWe=r(bXr,"layoutlmv2"),bXr.forEach(t),NWe=r(owe," \u2014 "),Gk=n(owe,"A",{href:!0});var vXr=s(Gk);jWe=r(vXr,"LayoutLMv2Config"),vXr.forEach(t),DWe=r(owe," (LayoutLMv2 model)"),owe.forEach(t),GWe=i(y),mm=n(y,"LI",{});var rwe=s(mm);sre=n(rwe,"STRONG",{});var FXr=s(sre);OWe=r(FXr,"layoutlmv3"),FXr.forEach(t),VWe=r(rwe," \u2014 "),Ok=n(rwe,"A",{href:!0});var TXr=s(Ok);XWe=r(TXr,"LayoutLMv3Config"),TXr.forEach(t),zWe=r(rwe," (LayoutLMv3 model)"),rwe.forEach(t),WWe=i(y),gm=n(y,"LI",{});var twe=s(gm);lre=n(twe,"STRONG",{});var MXr=s(lre);QWe=r(MXr,"led"),MXr.forEach(t),HWe=r(twe," \u2014 "),Vk=n(twe,"A",{href:!0});var EXr=s(Vk);UWe=r(EXr,"LEDConfig"),EXr.forEach(t),JWe=r(twe," (LED model)"),twe.forEach(t),YWe=i(y),hm=n(y,"LI",{});var awe=s(hm);ire=n(awe,"STRONG",{});var CXr=s(ire);KWe=r(CXr,"longformer"),CXr.forEach(t),ZWe=r(awe," \u2014 "),Xk=n(awe,"A",{href:!0});var wXr=s(Xk);eQe=r(wXr,"LongformerConfig"),wXr.forEach(t),oQe=r(awe," (Longformer model)"),awe.forEach(t),rQe=i(y),pm=n(y,"LI",{});var nwe=s(pm);dre=n(nwe,"STRONG",{});var AXr=s(dre);tQe=r(AXr,"luke"),AXr.forEach(t),aQe=r(nwe," \u2014 "),zk=n(nwe,"A",{href:!0});var yXr=s(zk);nQe=r(yXr,"LukeConfig"),yXr.forEach(t),sQe=r(nwe," (LUKE model)"),nwe.forEach(t),lQe=i(y),um=n(y,"LI",{});var swe=s(um);cre=n(swe,"STRONG",{});var LXr=s(cre);iQe=r(LXr,"lxmert"),LXr.forEach(t),dQe=r(swe," \u2014 "),Wk=n(swe,"A",{href:!0});var xXr=s(Wk);cQe=r(xXr,"LxmertConfig"),xXr.forEach(t),fQe=r(swe," (LXMERT model)"),swe.forEach(t),mQe=i(y),_m=n(y,"LI",{});var lwe=s(_m);fre=n(lwe,"STRONG",{});var $Xr=s(fre);gQe=r($Xr,"m2m_100"),$Xr.forEach(t),hQe=r(lwe," \u2014 "),Qk=n(lwe,"A",{href:!0});var kXr=s(Qk);pQe=r(kXr,"M2M100Config"),kXr.forEach(t),uQe=r(lwe," (M2M100 model)"),lwe.forEach(t),_Qe=i(y),bm=n(y,"LI",{});var iwe=s(bm);mre=n(iwe,"STRONG",{});var SXr=s(mre);bQe=r(SXr,"marian"),SXr.forEach(t),vQe=r(iwe," \u2014 "),Hk=n(iwe,"A",{href:!0});var RXr=s(Hk);FQe=r(RXr,"MarianConfig"),RXr.forEach(t),TQe=r(iwe," (Marian model)"),iwe.forEach(t),MQe=i(y),vm=n(y,"LI",{});var dwe=s(vm);gre=n(dwe,"STRONG",{});var PXr=s(gre);EQe=r(PXr,"maskformer"),PXr.forEach(t),CQe=r(dwe," \u2014 "),Uk=n(dwe,"A",{href:!0});var BXr=s(Uk);wQe=r(BXr,"MaskFormerConfig"),BXr.forEach(t),AQe=r(dwe," (MaskFormer model)"),dwe.forEach(t),yQe=i(y),Fm=n(y,"LI",{});var cwe=s(Fm);hre=n(cwe,"STRONG",{});var IXr=s(hre);LQe=r(IXr,"mbart"),IXr.forEach(t),xQe=r(cwe," \u2014 "),Jk=n(cwe,"A",{href:!0});var qXr=s(Jk);$Qe=r(qXr,"MBartConfig"),qXr.forEach(t),kQe=r(cwe," (mBART model)"),cwe.forEach(t),SQe=i(y),Tm=n(y,"LI",{});var fwe=s(Tm);pre=n(fwe,"STRONG",{});var NXr=s(pre);RQe=r(NXr,"megatron-bert"),NXr.forEach(t),PQe=r(fwe," \u2014 "),Yk=n(fwe,"A",{href:!0});var jXr=s(Yk);BQe=r(jXr,"MegatronBertConfig"),jXr.forEach(t),IQe=r(fwe," (MegatronBert model)"),fwe.forEach(t),qQe=i(y),Mm=n(y,"LI",{});var mwe=s(Mm);ure=n(mwe,"STRONG",{});var DXr=s(ure);NQe=r(DXr,"mobilebert"),DXr.forEach(t),jQe=r(mwe," \u2014 "),Kk=n(mwe,"A",{href:!0});var GXr=s(Kk);DQe=r(GXr,"MobileBertConfig"),GXr.forEach(t),GQe=r(mwe," (MobileBERT model)"),mwe.forEach(t),OQe=i(y),Em=n(y,"LI",{});var gwe=s(Em);_re=n(gwe,"STRONG",{});var OXr=s(_re);VQe=r(OXr,"mpnet"),OXr.forEach(t),XQe=r(gwe," \u2014 "),Zk=n(gwe,"A",{href:!0});var VXr=s(Zk);zQe=r(VXr,"MPNetConfig"),VXr.forEach(t),WQe=r(gwe," (MPNet model)"),gwe.forEach(t),QQe=i(y),Cm=n(y,"LI",{});var hwe=s(Cm);bre=n(hwe,"STRONG",{});var XXr=s(bre);HQe=r(XXr,"mt5"),XXr.forEach(t),UQe=r(hwe," \u2014 "),eS=n(hwe,"A",{href:!0});var zXr=s(eS);JQe=r(zXr,"MT5Config"),zXr.forEach(t),YQe=r(hwe," (mT5 model)"),hwe.forEach(t),KQe=i(y),wm=n(y,"LI",{});var pwe=s(wm);vre=n(pwe,"STRONG",{});var WXr=s(vre);ZQe=r(WXr,"nystromformer"),WXr.forEach(t),eHe=r(pwe," \u2014 "),oS=n(pwe,"A",{href:!0});var QXr=s(oS);oHe=r(QXr,"NystromformerConfig"),QXr.forEach(t),rHe=r(pwe," (Nystromformer model)"),pwe.forEach(t),tHe=i(y),Am=n(y,"LI",{});var uwe=s(Am);Fre=n(uwe,"STRONG",{});var HXr=s(Fre);aHe=r(HXr,"openai-gpt"),HXr.forEach(t),nHe=r(uwe," \u2014 "),rS=n(uwe,"A",{href:!0});var UXr=s(rS);sHe=r(UXr,"OpenAIGPTConfig"),UXr.forEach(t),lHe=r(uwe," (OpenAI GPT model)"),uwe.forEach(t),iHe=i(y),ym=n(y,"LI",{});var _we=s(ym);Tre=n(_we,"STRONG",{});var JXr=s(Tre);dHe=r(JXr,"opt"),JXr.forEach(t),cHe=r(_we," \u2014 "),tS=n(_we,"A",{href:!0});var YXr=s(tS);fHe=r(YXr,"OPTConfig"),YXr.forEach(t),mHe=r(_we," (OPT model)"),_we.forEach(t),gHe=i(y),Lm=n(y,"LI",{});var bwe=s(Lm);Mre=n(bwe,"STRONG",{});var KXr=s(Mre);hHe=r(KXr,"pegasus"),KXr.forEach(t),pHe=r(bwe," \u2014 "),aS=n(bwe,"A",{href:!0});var ZXr=s(aS);uHe=r(ZXr,"PegasusConfig"),ZXr.forEach(t),_He=r(bwe," (Pegasus model)"),bwe.forEach(t),bHe=i(y),xm=n(y,"LI",{});var vwe=s(xm);Ere=n(vwe,"STRONG",{});var ezr=s(Ere);vHe=r(ezr,"perceiver"),ezr.forEach(t),FHe=r(vwe," \u2014 "),nS=n(vwe,"A",{href:!0});var ozr=s(nS);THe=r(ozr,"PerceiverConfig"),ozr.forEach(t),MHe=r(vwe," (Perceiver model)"),vwe.forEach(t),EHe=i(y),$m=n(y,"LI",{});var Fwe=s($m);Cre=n(Fwe,"STRONG",{});var rzr=s(Cre);CHe=r(rzr,"plbart"),rzr.forEach(t),wHe=r(Fwe," \u2014 "),sS=n(Fwe,"A",{href:!0});var tzr=s(sS);AHe=r(tzr,"PLBartConfig"),tzr.forEach(t),yHe=r(Fwe," (PLBart model)"),Fwe.forEach(t),LHe=i(y),km=n(y,"LI",{});var Twe=s(km);wre=n(Twe,"STRONG",{});var azr=s(wre);xHe=r(azr,"poolformer"),azr.forEach(t),$He=r(Twe," \u2014 "),lS=n(Twe,"A",{href:!0});var nzr=s(lS);kHe=r(nzr,"PoolFormerConfig"),nzr.forEach(t),SHe=r(Twe," (PoolFormer model)"),Twe.forEach(t),RHe=i(y),Sm=n(y,"LI",{});var Mwe=s(Sm);Are=n(Mwe,"STRONG",{});var szr=s(Are);PHe=r(szr,"prophetnet"),szr.forEach(t),BHe=r(Mwe," \u2014 "),iS=n(Mwe,"A",{href:!0});var lzr=s(iS);IHe=r(lzr,"ProphetNetConfig"),lzr.forEach(t),qHe=r(Mwe," (ProphetNet model)"),Mwe.forEach(t),NHe=i(y),Rm=n(y,"LI",{});var Ewe=s(Rm);yre=n(Ewe,"STRONG",{});var izr=s(yre);jHe=r(izr,"qdqbert"),izr.forEach(t),DHe=r(Ewe," \u2014 "),dS=n(Ewe,"A",{href:!0});var dzr=s(dS);GHe=r(dzr,"QDQBertConfig"),dzr.forEach(t),OHe=r(Ewe," (QDQBert model)"),Ewe.forEach(t),VHe=i(y),Pm=n(y,"LI",{});var Cwe=s(Pm);Lre=n(Cwe,"STRONG",{});var czr=s(Lre);XHe=r(czr,"rag"),czr.forEach(t),zHe=r(Cwe," \u2014 "),cS=n(Cwe,"A",{href:!0});var fzr=s(cS);WHe=r(fzr,"RagConfig"),fzr.forEach(t),QHe=r(Cwe," (RAG model)"),Cwe.forEach(t),HHe=i(y),Bm=n(y,"LI",{});var wwe=s(Bm);xre=n(wwe,"STRONG",{});var mzr=s(xre);UHe=r(mzr,"realm"),mzr.forEach(t),JHe=r(wwe," \u2014 "),fS=n(wwe,"A",{href:!0});var gzr=s(fS);YHe=r(gzr,"RealmConfig"),gzr.forEach(t),KHe=r(wwe," (Realm model)"),wwe.forEach(t),ZHe=i(y),Im=n(y,"LI",{});var Awe=s(Im);$re=n(Awe,"STRONG",{});var hzr=s($re);eUe=r(hzr,"reformer"),hzr.forEach(t),oUe=r(Awe," \u2014 "),mS=n(Awe,"A",{href:!0});var pzr=s(mS);rUe=r(pzr,"ReformerConfig"),pzr.forEach(t),tUe=r(Awe," (Reformer model)"),Awe.forEach(t),aUe=i(y),qm=n(y,"LI",{});var ywe=s(qm);kre=n(ywe,"STRONG",{});var uzr=s(kre);nUe=r(uzr,"regnet"),uzr.forEach(t),sUe=r(ywe," \u2014 "),gS=n(ywe,"A",{href:!0});var _zr=s(gS);lUe=r(_zr,"RegNetConfig"),_zr.forEach(t),iUe=r(ywe," (RegNet model)"),ywe.forEach(t),dUe=i(y),Nm=n(y,"LI",{});var Lwe=s(Nm);Sre=n(Lwe,"STRONG",{});var bzr=s(Sre);cUe=r(bzr,"rembert"),bzr.forEach(t),fUe=r(Lwe," \u2014 "),hS=n(Lwe,"A",{href:!0});var vzr=s(hS);mUe=r(vzr,"RemBertConfig"),vzr.forEach(t),gUe=r(Lwe," (RemBERT model)"),Lwe.forEach(t),hUe=i(y),jm=n(y,"LI",{});var xwe=s(jm);Rre=n(xwe,"STRONG",{});var Fzr=s(Rre);pUe=r(Fzr,"resnet"),Fzr.forEach(t),uUe=r(xwe," \u2014 "),pS=n(xwe,"A",{href:!0});var Tzr=s(pS);_Ue=r(Tzr,"ResNetConfig"),Tzr.forEach(t),bUe=r(xwe," (ResNet model)"),xwe.forEach(t),vUe=i(y),Dm=n(y,"LI",{});var $we=s(Dm);Pre=n($we,"STRONG",{});var Mzr=s(Pre);FUe=r(Mzr,"retribert"),Mzr.forEach(t),TUe=r($we," \u2014 "),uS=n($we,"A",{href:!0});var Ezr=s(uS);MUe=r(Ezr,"RetriBertConfig"),Ezr.forEach(t),EUe=r($we," (RetriBERT model)"),$we.forEach(t),CUe=i(y),Gm=n(y,"LI",{});var kwe=s(Gm);Bre=n(kwe,"STRONG",{});var Czr=s(Bre);wUe=r(Czr,"roberta"),Czr.forEach(t),AUe=r(kwe," \u2014 "),_S=n(kwe,"A",{href:!0});var wzr=s(_S);yUe=r(wzr,"RobertaConfig"),wzr.forEach(t),LUe=r(kwe," (RoBERTa model)"),kwe.forEach(t),xUe=i(y),Om=n(y,"LI",{});var Swe=s(Om);Ire=n(Swe,"STRONG",{});var Azr=s(Ire);$Ue=r(Azr,"roformer"),Azr.forEach(t),kUe=r(Swe," \u2014 "),bS=n(Swe,"A",{href:!0});var yzr=s(bS);SUe=r(yzr,"RoFormerConfig"),yzr.forEach(t),RUe=r(Swe," (RoFormer model)"),Swe.forEach(t),PUe=i(y),Vm=n(y,"LI",{});var Rwe=s(Vm);qre=n(Rwe,"STRONG",{});var Lzr=s(qre);BUe=r(Lzr,"segformer"),Lzr.forEach(t),IUe=r(Rwe," \u2014 "),vS=n(Rwe,"A",{href:!0});var xzr=s(vS);qUe=r(xzr,"SegformerConfig"),xzr.forEach(t),NUe=r(Rwe," (SegFormer model)"),Rwe.forEach(t),jUe=i(y),Xm=n(y,"LI",{});var Pwe=s(Xm);Nre=n(Pwe,"STRONG",{});var $zr=s(Nre);DUe=r($zr,"sew"),$zr.forEach(t),GUe=r(Pwe," \u2014 "),FS=n(Pwe,"A",{href:!0});var kzr=s(FS);OUe=r(kzr,"SEWConfig"),kzr.forEach(t),VUe=r(Pwe," (SEW model)"),Pwe.forEach(t),XUe=i(y),zm=n(y,"LI",{});var Bwe=s(zm);jre=n(Bwe,"STRONG",{});var Szr=s(jre);zUe=r(Szr,"sew-d"),Szr.forEach(t),WUe=r(Bwe," \u2014 "),TS=n(Bwe,"A",{href:!0});var Rzr=s(TS);QUe=r(Rzr,"SEWDConfig"),Rzr.forEach(t),HUe=r(Bwe," (SEW-D model)"),Bwe.forEach(t),UUe=i(y),Wm=n(y,"LI",{});var Iwe=s(Wm);Dre=n(Iwe,"STRONG",{});var Pzr=s(Dre);JUe=r(Pzr,"speech-encoder-decoder"),Pzr.forEach(t),YUe=r(Iwe," \u2014 "),MS=n(Iwe,"A",{href:!0});var Bzr=s(MS);KUe=r(Bzr,"SpeechEncoderDecoderConfig"),Bzr.forEach(t),ZUe=r(Iwe," (Speech Encoder decoder model)"),Iwe.forEach(t),eJe=i(y),Qm=n(y,"LI",{});var qwe=s(Qm);Gre=n(qwe,"STRONG",{});var Izr=s(Gre);oJe=r(Izr,"speech_to_text"),Izr.forEach(t),rJe=r(qwe," \u2014 "),ES=n(qwe,"A",{href:!0});var qzr=s(ES);tJe=r(qzr,"Speech2TextConfig"),qzr.forEach(t),aJe=r(qwe," (Speech2Text model)"),qwe.forEach(t),nJe=i(y),Hm=n(y,"LI",{});var Nwe=s(Hm);Ore=n(Nwe,"STRONG",{});var Nzr=s(Ore);sJe=r(Nzr,"speech_to_text_2"),Nzr.forEach(t),lJe=r(Nwe," \u2014 "),CS=n(Nwe,"A",{href:!0});var jzr=s(CS);iJe=r(jzr,"Speech2Text2Config"),jzr.forEach(t),dJe=r(Nwe," (Speech2Text2 model)"),Nwe.forEach(t),cJe=i(y),Um=n(y,"LI",{});var jwe=s(Um);Vre=n(jwe,"STRONG",{});var Dzr=s(Vre);fJe=r(Dzr,"splinter"),Dzr.forEach(t),mJe=r(jwe," \u2014 "),wS=n(jwe,"A",{href:!0});var Gzr=s(wS);gJe=r(Gzr,"SplinterConfig"),Gzr.forEach(t),hJe=r(jwe," (Splinter model)"),jwe.forEach(t),pJe=i(y),Jm=n(y,"LI",{});var Dwe=s(Jm);Xre=n(Dwe,"STRONG",{});var Ozr=s(Xre);uJe=r(Ozr,"squeezebert"),Ozr.forEach(t),_Je=r(Dwe," \u2014 "),AS=n(Dwe,"A",{href:!0});var Vzr=s(AS);bJe=r(Vzr,"SqueezeBertConfig"),Vzr.forEach(t),vJe=r(Dwe," (SqueezeBERT model)"),Dwe.forEach(t),FJe=i(y),Ym=n(y,"LI",{});var Gwe=s(Ym);zre=n(Gwe,"STRONG",{});var Xzr=s(zre);TJe=r(Xzr,"swin"),Xzr.forEach(t),MJe=r(Gwe," \u2014 "),yS=n(Gwe,"A",{href:!0});var zzr=s(yS);EJe=r(zzr,"SwinConfig"),zzr.forEach(t),CJe=r(Gwe," (Swin model)"),Gwe.forEach(t),wJe=i(y),Km=n(y,"LI",{});var Owe=s(Km);Wre=n(Owe,"STRONG",{});var Wzr=s(Wre);AJe=r(Wzr,"t5"),Wzr.forEach(t),yJe=r(Owe," \u2014 "),LS=n(Owe,"A",{href:!0});var Qzr=s(LS);LJe=r(Qzr,"T5Config"),Qzr.forEach(t),xJe=r(Owe," (T5 model)"),Owe.forEach(t),$Je=i(y),Zm=n(y,"LI",{});var Vwe=s(Zm);Qre=n(Vwe,"STRONG",{});var Hzr=s(Qre);kJe=r(Hzr,"tapas"),Hzr.forEach(t),SJe=r(Vwe," \u2014 "),xS=n(Vwe,"A",{href:!0});var Uzr=s(xS);RJe=r(Uzr,"TapasConfig"),Uzr.forEach(t),PJe=r(Vwe," (TAPAS model)"),Vwe.forEach(t),BJe=i(y),eg=n(y,"LI",{});var Xwe=s(eg);Hre=n(Xwe,"STRONG",{});var Jzr=s(Hre);IJe=r(Jzr,"trajectory_transformer"),Jzr.forEach(t),qJe=r(Xwe," \u2014 "),$S=n(Xwe,"A",{href:!0});var Yzr=s($S);NJe=r(Yzr,"TrajectoryTransformerConfig"),Yzr.forEach(t),jJe=r(Xwe," (Trajectory Transformer model)"),Xwe.forEach(t),DJe=i(y),og=n(y,"LI",{});var zwe=s(og);Ure=n(zwe,"STRONG",{});var Kzr=s(Ure);GJe=r(Kzr,"transfo-xl"),Kzr.forEach(t),OJe=r(zwe," \u2014 "),kS=n(zwe,"A",{href:!0});var Zzr=s(kS);VJe=r(Zzr,"TransfoXLConfig"),Zzr.forEach(t),XJe=r(zwe," (Transformer-XL model)"),zwe.forEach(t),zJe=i(y),rg=n(y,"LI",{});var Wwe=s(rg);Jre=n(Wwe,"STRONG",{});var eWr=s(Jre);WJe=r(eWr,"trocr"),eWr.forEach(t),QJe=r(Wwe," \u2014 "),SS=n(Wwe,"A",{href:!0});var oWr=s(SS);HJe=r(oWr,"TrOCRConfig"),oWr.forEach(t),UJe=r(Wwe," (TrOCR model)"),Wwe.forEach(t),JJe=i(y),tg=n(y,"LI",{});var Qwe=s(tg);Yre=n(Qwe,"STRONG",{});var rWr=s(Yre);YJe=r(rWr,"unispeech"),rWr.forEach(t),KJe=r(Qwe," \u2014 "),RS=n(Qwe,"A",{href:!0});var tWr=s(RS);ZJe=r(tWr,"UniSpeechConfig"),tWr.forEach(t),eYe=r(Qwe," (UniSpeech model)"),Qwe.forEach(t),oYe=i(y),ag=n(y,"LI",{});var Hwe=s(ag);Kre=n(Hwe,"STRONG",{});var aWr=s(Kre);rYe=r(aWr,"unispeech-sat"),aWr.forEach(t),tYe=r(Hwe," \u2014 "),PS=n(Hwe,"A",{href:!0});var nWr=s(PS);aYe=r(nWr,"UniSpeechSatConfig"),nWr.forEach(t),nYe=r(Hwe," (UniSpeechSat model)"),Hwe.forEach(t),sYe=i(y),ng=n(y,"LI",{});var Uwe=s(ng);Zre=n(Uwe,"STRONG",{});var sWr=s(Zre);lYe=r(sWr,"van"),sWr.forEach(t),iYe=r(Uwe," \u2014 "),BS=n(Uwe,"A",{href:!0});var lWr=s(BS);dYe=r(lWr,"VanConfig"),lWr.forEach(t),cYe=r(Uwe," (VAN model)"),Uwe.forEach(t),fYe=i(y),sg=n(y,"LI",{});var Jwe=s(sg);ete=n(Jwe,"STRONG",{});var iWr=s(ete);mYe=r(iWr,"vilt"),iWr.forEach(t),gYe=r(Jwe," \u2014 "),IS=n(Jwe,"A",{href:!0});var dWr=s(IS);hYe=r(dWr,"ViltConfig"),dWr.forEach(t),pYe=r(Jwe," (ViLT model)"),Jwe.forEach(t),uYe=i(y),lg=n(y,"LI",{});var Ywe=s(lg);ote=n(Ywe,"STRONG",{});var cWr=s(ote);_Ye=r(cWr,"vision-encoder-decoder"),cWr.forEach(t),bYe=r(Ywe," \u2014 "),qS=n(Ywe,"A",{href:!0});var fWr=s(qS);vYe=r(fWr,"VisionEncoderDecoderConfig"),fWr.forEach(t),FYe=r(Ywe," (Vision Encoder decoder model)"),Ywe.forEach(t),TYe=i(y),ig=n(y,"LI",{});var Kwe=s(ig);rte=n(Kwe,"STRONG",{});var mWr=s(rte);MYe=r(mWr,"vision-text-dual-encoder"),mWr.forEach(t),EYe=r(Kwe," \u2014 "),NS=n(Kwe,"A",{href:!0});var gWr=s(NS);CYe=r(gWr,"VisionTextDualEncoderConfig"),gWr.forEach(t),wYe=r(Kwe," (VisionTextDualEncoder model)"),Kwe.forEach(t),AYe=i(y),dg=n(y,"LI",{});var Zwe=s(dg);tte=n(Zwe,"STRONG",{});var hWr=s(tte);yYe=r(hWr,"visual_bert"),hWr.forEach(t),LYe=r(Zwe," \u2014 "),jS=n(Zwe,"A",{href:!0});var pWr=s(jS);xYe=r(pWr,"VisualBertConfig"),pWr.forEach(t),$Ye=r(Zwe," (VisualBert model)"),Zwe.forEach(t),kYe=i(y),cg=n(y,"LI",{});var e0e=s(cg);ate=n(e0e,"STRONG",{});var uWr=s(ate);SYe=r(uWr,"vit"),uWr.forEach(t),RYe=r(e0e," \u2014 "),DS=n(e0e,"A",{href:!0});var _Wr=s(DS);PYe=r(_Wr,"ViTConfig"),_Wr.forEach(t),BYe=r(e0e," (ViT model)"),e0e.forEach(t),IYe=i(y),fg=n(y,"LI",{});var o0e=s(fg);nte=n(o0e,"STRONG",{});var bWr=s(nte);qYe=r(bWr,"vit_mae"),bWr.forEach(t),NYe=r(o0e," \u2014 "),GS=n(o0e,"A",{href:!0});var vWr=s(GS);jYe=r(vWr,"ViTMAEConfig"),vWr.forEach(t),DYe=r(o0e," (ViTMAE model)"),o0e.forEach(t),GYe=i(y),mg=n(y,"LI",{});var r0e=s(mg);ste=n(r0e,"STRONG",{});var FWr=s(ste);OYe=r(FWr,"wav2vec2"),FWr.forEach(t),VYe=r(r0e," \u2014 "),OS=n(r0e,"A",{href:!0});var TWr=s(OS);XYe=r(TWr,"Wav2Vec2Config"),TWr.forEach(t),zYe=r(r0e," (Wav2Vec2 model)"),r0e.forEach(t),WYe=i(y),gg=n(y,"LI",{});var t0e=s(gg);lte=n(t0e,"STRONG",{});var MWr=s(lte);QYe=r(MWr,"wav2vec2-conformer"),MWr.forEach(t),HYe=r(t0e," \u2014 "),VS=n(t0e,"A",{href:!0});var EWr=s(VS);UYe=r(EWr,"Wav2Vec2ConformerConfig"),EWr.forEach(t),JYe=r(t0e," (Wav2Vec2-Conformer model)"),t0e.forEach(t),YYe=i(y),hg=n(y,"LI",{});var a0e=s(hg);ite=n(a0e,"STRONG",{});var CWr=s(ite);KYe=r(CWr,"wavlm"),CWr.forEach(t),ZYe=r(a0e," \u2014 "),XS=n(a0e,"A",{href:!0});var wWr=s(XS);eKe=r(wWr,"WavLMConfig"),wWr.forEach(t),oKe=r(a0e," (WavLM model)"),a0e.forEach(t),rKe=i(y),pg=n(y,"LI",{});var n0e=s(pg);dte=n(n0e,"STRONG",{});var AWr=s(dte);tKe=r(AWr,"xglm"),AWr.forEach(t),aKe=r(n0e," \u2014 "),zS=n(n0e,"A",{href:!0});var yWr=s(zS);nKe=r(yWr,"XGLMConfig"),yWr.forEach(t),sKe=r(n0e," (XGLM model)"),n0e.forEach(t),lKe=i(y),ug=n(y,"LI",{});var s0e=s(ug);cte=n(s0e,"STRONG",{});var LWr=s(cte);iKe=r(LWr,"xlm"),LWr.forEach(t),dKe=r(s0e," \u2014 "),WS=n(s0e,"A",{href:!0});var xWr=s(WS);cKe=r(xWr,"XLMConfig"),xWr.forEach(t),fKe=r(s0e," (XLM model)"),s0e.forEach(t),mKe=i(y),_g=n(y,"LI",{});var l0e=s(_g);fte=n(l0e,"STRONG",{});var $Wr=s(fte);gKe=r($Wr,"xlm-prophetnet"),$Wr.forEach(t),hKe=r(l0e," \u2014 "),QS=n(l0e,"A",{href:!0});var kWr=s(QS);pKe=r(kWr,"XLMProphetNetConfig"),kWr.forEach(t),uKe=r(l0e," (XLMProphetNet model)"),l0e.forEach(t),_Ke=i(y),bg=n(y,"LI",{});var i0e=s(bg);mte=n(i0e,"STRONG",{});var SWr=s(mte);bKe=r(SWr,"xlm-roberta"),SWr.forEach(t),vKe=r(i0e," \u2014 "),HS=n(i0e,"A",{href:!0});var RWr=s(HS);FKe=r(RWr,"XLMRobertaConfig"),RWr.forEach(t),TKe=r(i0e," (XLM-RoBERTa model)"),i0e.forEach(t),MKe=i(y),vg=n(y,"LI",{});var d0e=s(vg);gte=n(d0e,"STRONG",{});var PWr=s(gte);EKe=r(PWr,"xlm-roberta-xl"),PWr.forEach(t),CKe=r(d0e," \u2014 "),US=n(d0e,"A",{href:!0});var BWr=s(US);wKe=r(BWr,"XLMRobertaXLConfig"),BWr.forEach(t),AKe=r(d0e," (XLM-RoBERTa-XL model)"),d0e.forEach(t),yKe=i(y),Fg=n(y,"LI",{});var c0e=s(Fg);hte=n(c0e,"STRONG",{});var IWr=s(hte);LKe=r(IWr,"xlnet"),IWr.forEach(t),xKe=r(c0e," \u2014 "),JS=n(c0e,"A",{href:!0});var qWr=s(JS);$Ke=r(qWr,"XLNetConfig"),qWr.forEach(t),kKe=r(c0e," (XLNet model)"),c0e.forEach(t),SKe=i(y),Tg=n(y,"LI",{});var f0e=s(Tg);pte=n(f0e,"STRONG",{});var NWr=s(pte);RKe=r(NWr,"yolos"),NWr.forEach(t),PKe=r(f0e," \u2014 "),YS=n(f0e,"A",{href:!0});var jWr=s(YS);BKe=r(jWr,"YolosConfig"),jWr.forEach(t),IKe=r(f0e," (YOLOS model)"),f0e.forEach(t),qKe=i(y),Mg=n(y,"LI",{});var m0e=s(Mg);ute=n(m0e,"STRONG",{});var DWr=s(ute);NKe=r(DWr,"yoso"),DWr.forEach(t),jKe=r(m0e," \u2014 "),KS=n(m0e,"A",{href:!0});var GWr=s(KS);DKe=r(GWr,"YosoConfig"),GWr.forEach(t),GKe=r(m0e," (YOSO model)"),m0e.forEach(t),y.forEach(t),OKe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),VKe=i(et),Cg=n(et,"DIV",{class:!0});var rDe=s(Cg);T(P6.$$.fragment,rDe),XKe=i(rDe),_te=n(rDe,"P",{});var OWr=s(_te);zKe=r(OWr,"Register a new configuration for this class."),OWr.forEach(t),rDe.forEach(t),et.forEach(t),nNe=i(f),Ti=n(f,"H2",{class:!0});var tDe=s(Ti);wg=n(tDe,"A",{id:!0,class:!0,href:!0});var VWr=s(wg);bte=n(VWr,"SPAN",{});var XWr=s(bte);T(B6.$$.fragment,XWr),XWr.forEach(t),VWr.forEach(t),WKe=i(tDe),vte=n(tDe,"SPAN",{});var zWr=s(vte);QKe=r(zWr,"AutoTokenizer"),zWr.forEach(t),tDe.forEach(t),sNe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(I6.$$.fragment,qs),HKe=i(qs),q6=n(qs,"P",{});var aDe=s(q6);UKe=r(aDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=n(aDe,"A",{href:!0});var WWr=s(ZS);JKe=r(WWr,"AutoTokenizer.from_pretrained()"),WWr.forEach(t),YKe=r(aDe," class method."),aDe.forEach(t),KKe=i(qs),N6=n(qs,"P",{});var nDe=s(N6);ZKe=r(nDe,"This class cannot be instantiated directly using "),Fte=n(nDe,"CODE",{});var QWr=s(Fte);eZe=r(QWr,"__init__()"),QWr.forEach(t),oZe=r(nDe," (throws an error)."),nDe.forEach(t),rZe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(j6.$$.fragment,Ns),tZe=i(Ns),Tte=n(Ns,"P",{});var HWr=s(Tte);aZe=r(HWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HWr.forEach(t),nZe=i(Ns),Aa=n(Ns,"P",{});var x0=s(Aa);sZe=r(x0,"The tokenizer class to instantiate is selected based on the "),Mte=n(x0,"CODE",{});var UWr=s(Mte);lZe=r(UWr,"model_type"),UWr.forEach(t),iZe=r(x0,` property of the config object (either
passed as an argument or loaded from `),Ete=n(x0,"CODE",{});var JWr=s(Ete);dZe=r(JWr,"pretrained_model_name_or_path"),JWr.forEach(t),cZe=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=n(x0,"CODE",{});var YWr=s(Cte);fZe=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),mZe=r(x0,":"),x0.forEach(t),gZe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Dx=s(Sn);wte=n(Dx,"STRONG",{});var KWr=s(wte);hZe=r(KWr,"albert"),KWr.forEach(t),pZe=r(Dx," \u2014 "),eR=n(Dx,"A",{href:!0});var ZWr=s(eR);uZe=r(ZWr,"AlbertTokenizer"),ZWr.forEach(t),_Ze=r(Dx," or "),oR=n(Dx,"A",{href:!0});var eQr=s(oR);bZe=r(eQr,"AlbertTokenizerFast"),eQr.forEach(t),vZe=r(Dx," (ALBERT model)"),Dx.forEach(t),FZe=i(S),Rn=n(S,"LI",{});var Gx=s(Rn);Ate=n(Gx,"STRONG",{});var oQr=s(Ate);TZe=r(oQr,"bart"),oQr.forEach(t),MZe=r(Gx," \u2014 "),rR=n(Gx,"A",{href:!0});var rQr=s(rR);EZe=r(rQr,"BartTokenizer"),rQr.forEach(t),CZe=r(Gx," or "),tR=n(Gx,"A",{href:!0});var tQr=s(tR);wZe=r(tQr,"BartTokenizerFast"),tQr.forEach(t),AZe=r(Gx," (BART model)"),Gx.forEach(t),yZe=i(S),Pn=n(S,"LI",{});var Ox=s(Pn);yte=n(Ox,"STRONG",{});var aQr=s(yte);LZe=r(aQr,"barthez"),aQr.forEach(t),xZe=r(Ox," \u2014 "),aR=n(Ox,"A",{href:!0});var nQr=s(aR);$Ze=r(nQr,"BarthezTokenizer"),nQr.forEach(t),kZe=r(Ox," or "),nR=n(Ox,"A",{href:!0});var sQr=s(nR);SZe=r(sQr,"BarthezTokenizerFast"),sQr.forEach(t),RZe=r(Ox," (BARThez model)"),Ox.forEach(t),PZe=i(S),Ag=n(S,"LI",{});var g0e=s(Ag);Lte=n(g0e,"STRONG",{});var lQr=s(Lte);BZe=r(lQr,"bartpho"),lQr.forEach(t),IZe=r(g0e," \u2014 "),sR=n(g0e,"A",{href:!0});var iQr=s(sR);qZe=r(iQr,"BartphoTokenizer"),iQr.forEach(t),NZe=r(g0e," (BARTpho model)"),g0e.forEach(t),jZe=i(S),Bn=n(S,"LI",{});var Vx=s(Bn);xte=n(Vx,"STRONG",{});var dQr=s(xte);DZe=r(dQr,"bert"),dQr.forEach(t),GZe=r(Vx," \u2014 "),lR=n(Vx,"A",{href:!0});var cQr=s(lR);OZe=r(cQr,"BertTokenizer"),cQr.forEach(t),VZe=r(Vx," or "),iR=n(Vx,"A",{href:!0});var fQr=s(iR);XZe=r(fQr,"BertTokenizerFast"),fQr.forEach(t),zZe=r(Vx," (BERT model)"),Vx.forEach(t),WZe=i(S),yg=n(S,"LI",{});var h0e=s(yg);$te=n(h0e,"STRONG",{});var mQr=s($te);QZe=r(mQr,"bert-generation"),mQr.forEach(t),HZe=r(h0e," \u2014 "),dR=n(h0e,"A",{href:!0});var gQr=s(dR);UZe=r(gQr,"BertGenerationTokenizer"),gQr.forEach(t),JZe=r(h0e," (Bert Generation model)"),h0e.forEach(t),YZe=i(S),Lg=n(S,"LI",{});var p0e=s(Lg);kte=n(p0e,"STRONG",{});var hQr=s(kte);KZe=r(hQr,"bert-japanese"),hQr.forEach(t),ZZe=r(p0e," \u2014 "),cR=n(p0e,"A",{href:!0});var pQr=s(cR);eeo=r(pQr,"BertJapaneseTokenizer"),pQr.forEach(t),oeo=r(p0e," (BertJapanese model)"),p0e.forEach(t),reo=i(S),xg=n(S,"LI",{});var u0e=s(xg);Ste=n(u0e,"STRONG",{});var uQr=s(Ste);teo=r(uQr,"bertweet"),uQr.forEach(t),aeo=r(u0e," \u2014 "),fR=n(u0e,"A",{href:!0});var _Qr=s(fR);neo=r(_Qr,"BertweetTokenizer"),_Qr.forEach(t),seo=r(u0e," (Bertweet model)"),u0e.forEach(t),leo=i(S),In=n(S,"LI",{});var Xx=s(In);Rte=n(Xx,"STRONG",{});var bQr=s(Rte);ieo=r(bQr,"big_bird"),bQr.forEach(t),deo=r(Xx," \u2014 "),mR=n(Xx,"A",{href:!0});var vQr=s(mR);ceo=r(vQr,"BigBirdTokenizer"),vQr.forEach(t),feo=r(Xx," or "),gR=n(Xx,"A",{href:!0});var FQr=s(gR);meo=r(FQr,"BigBirdTokenizerFast"),FQr.forEach(t),geo=r(Xx," (BigBird model)"),Xx.forEach(t),heo=i(S),qn=n(S,"LI",{});var zx=s(qn);Pte=n(zx,"STRONG",{});var TQr=s(Pte);peo=r(TQr,"bigbird_pegasus"),TQr.forEach(t),ueo=r(zx," \u2014 "),hR=n(zx,"A",{href:!0});var MQr=s(hR);_eo=r(MQr,"PegasusTokenizer"),MQr.forEach(t),beo=r(zx," or "),pR=n(zx,"A",{href:!0});var EQr=s(pR);veo=r(EQr,"PegasusTokenizerFast"),EQr.forEach(t),Feo=r(zx," (BigBirdPegasus model)"),zx.forEach(t),Teo=i(S),Nn=n(S,"LI",{});var Wx=s(Nn);Bte=n(Wx,"STRONG",{});var CQr=s(Bte);Meo=r(CQr,"blenderbot"),CQr.forEach(t),Eeo=r(Wx," \u2014 "),uR=n(Wx,"A",{href:!0});var wQr=s(uR);Ceo=r(wQr,"BlenderbotTokenizer"),wQr.forEach(t),weo=r(Wx," or "),_R=n(Wx,"A",{href:!0});var AQr=s(_R);Aeo=r(AQr,"BlenderbotTokenizerFast"),AQr.forEach(t),yeo=r(Wx," (Blenderbot model)"),Wx.forEach(t),Leo=i(S),$g=n(S,"LI",{});var _0e=s($g);Ite=n(_0e,"STRONG",{});var yQr=s(Ite);xeo=r(yQr,"blenderbot-small"),yQr.forEach(t),$eo=r(_0e," \u2014 "),bR=n(_0e,"A",{href:!0});var LQr=s(bR);keo=r(LQr,"BlenderbotSmallTokenizer"),LQr.forEach(t),Seo=r(_0e," (BlenderbotSmall model)"),_0e.forEach(t),Reo=i(S),kg=n(S,"LI",{});var b0e=s(kg);qte=n(b0e,"STRONG",{});var xQr=s(qte);Peo=r(xQr,"byt5"),xQr.forEach(t),Beo=r(b0e," \u2014 "),vR=n(b0e,"A",{href:!0});var $Qr=s(vR);Ieo=r($Qr,"ByT5Tokenizer"),$Qr.forEach(t),qeo=r(b0e," (ByT5 model)"),b0e.forEach(t),Neo=i(S),jn=n(S,"LI",{});var Qx=s(jn);Nte=n(Qx,"STRONG",{});var kQr=s(Nte);jeo=r(kQr,"camembert"),kQr.forEach(t),Deo=r(Qx," \u2014 "),FR=n(Qx,"A",{href:!0});var SQr=s(FR);Geo=r(SQr,"CamembertTokenizer"),SQr.forEach(t),Oeo=r(Qx," or "),TR=n(Qx,"A",{href:!0});var RQr=s(TR);Veo=r(RQr,"CamembertTokenizerFast"),RQr.forEach(t),Xeo=r(Qx," (CamemBERT model)"),Qx.forEach(t),zeo=i(S),Sg=n(S,"LI",{});var v0e=s(Sg);jte=n(v0e,"STRONG",{});var PQr=s(jte);Weo=r(PQr,"canine"),PQr.forEach(t),Qeo=r(v0e," \u2014 "),MR=n(v0e,"A",{href:!0});var BQr=s(MR);Heo=r(BQr,"CanineTokenizer"),BQr.forEach(t),Ueo=r(v0e," (Canine model)"),v0e.forEach(t),Jeo=i(S),Dn=n(S,"LI",{});var Hx=s(Dn);Dte=n(Hx,"STRONG",{});var IQr=s(Dte);Yeo=r(IQr,"clip"),IQr.forEach(t),Keo=r(Hx," \u2014 "),ER=n(Hx,"A",{href:!0});var qQr=s(ER);Zeo=r(qQr,"CLIPTokenizer"),qQr.forEach(t),eoo=r(Hx," or "),CR=n(Hx,"A",{href:!0});var NQr=s(CR);ooo=r(NQr,"CLIPTokenizerFast"),NQr.forEach(t),roo=r(Hx," (CLIP model)"),Hx.forEach(t),too=i(S),Gn=n(S,"LI",{});var Ux=s(Gn);Gte=n(Ux,"STRONG",{});var jQr=s(Gte);aoo=r(jQr,"convbert"),jQr.forEach(t),noo=r(Ux," \u2014 "),wR=n(Ux,"A",{href:!0});var DQr=s(wR);soo=r(DQr,"ConvBertTokenizer"),DQr.forEach(t),loo=r(Ux," or "),AR=n(Ux,"A",{href:!0});var GQr=s(AR);ioo=r(GQr,"ConvBertTokenizerFast"),GQr.forEach(t),doo=r(Ux," (ConvBERT model)"),Ux.forEach(t),coo=i(S),On=n(S,"LI",{});var Jx=s(On);Ote=n(Jx,"STRONG",{});var OQr=s(Ote);foo=r(OQr,"cpm"),OQr.forEach(t),moo=r(Jx," \u2014 "),yR=n(Jx,"A",{href:!0});var VQr=s(yR);goo=r(VQr,"CpmTokenizer"),VQr.forEach(t),hoo=r(Jx," or "),LR=n(Jx,"A",{href:!0});var XQr=s(LR);poo=r(XQr,"CpmTokenizerFast"),XQr.forEach(t),uoo=r(Jx," (CPM model)"),Jx.forEach(t),_oo=i(S),Rg=n(S,"LI",{});var F0e=s(Rg);Vte=n(F0e,"STRONG",{});var zQr=s(Vte);boo=r(zQr,"ctrl"),zQr.forEach(t),voo=r(F0e," \u2014 "),xR=n(F0e,"A",{href:!0});var WQr=s(xR);Foo=r(WQr,"CTRLTokenizer"),WQr.forEach(t),Too=r(F0e," (CTRL model)"),F0e.forEach(t),Moo=i(S),Vn=n(S,"LI",{});var Yx=s(Vn);Xte=n(Yx,"STRONG",{});var QQr=s(Xte);Eoo=r(QQr,"data2vec-text"),QQr.forEach(t),Coo=r(Yx," \u2014 "),$R=n(Yx,"A",{href:!0});var HQr=s($R);woo=r(HQr,"RobertaTokenizer"),HQr.forEach(t),Aoo=r(Yx," or "),kR=n(Yx,"A",{href:!0});var UQr=s(kR);yoo=r(UQr,"RobertaTokenizerFast"),UQr.forEach(t),Loo=r(Yx," (Data2VecText model)"),Yx.forEach(t),xoo=i(S),Xn=n(S,"LI",{});var Kx=s(Xn);zte=n(Kx,"STRONG",{});var JQr=s(zte);$oo=r(JQr,"deberta"),JQr.forEach(t),koo=r(Kx," \u2014 "),SR=n(Kx,"A",{href:!0});var YQr=s(SR);Soo=r(YQr,"DebertaTokenizer"),YQr.forEach(t),Roo=r(Kx," or "),RR=n(Kx,"A",{href:!0});var KQr=s(RR);Poo=r(KQr,"DebertaTokenizerFast"),KQr.forEach(t),Boo=r(Kx," (DeBERTa model)"),Kx.forEach(t),Ioo=i(S),zn=n(S,"LI",{});var Zx=s(zn);Wte=n(Zx,"STRONG",{});var ZQr=s(Wte);qoo=r(ZQr,"deberta-v2"),ZQr.forEach(t),Noo=r(Zx," \u2014 "),PR=n(Zx,"A",{href:!0});var eHr=s(PR);joo=r(eHr,"DebertaV2Tokenizer"),eHr.forEach(t),Doo=r(Zx," or "),BR=n(Zx,"A",{href:!0});var oHr=s(BR);Goo=r(oHr,"DebertaV2TokenizerFast"),oHr.forEach(t),Ooo=r(Zx," (DeBERTa-v2 model)"),Zx.forEach(t),Voo=i(S),Wn=n(S,"LI",{});var e$=s(Wn);Qte=n(e$,"STRONG",{});var rHr=s(Qte);Xoo=r(rHr,"distilbert"),rHr.forEach(t),zoo=r(e$," \u2014 "),IR=n(e$,"A",{href:!0});var tHr=s(IR);Woo=r(tHr,"DistilBertTokenizer"),tHr.forEach(t),Qoo=r(e$," or "),qR=n(e$,"A",{href:!0});var aHr=s(qR);Hoo=r(aHr,"DistilBertTokenizerFast"),aHr.forEach(t),Uoo=r(e$," (DistilBERT model)"),e$.forEach(t),Joo=i(S),Qn=n(S,"LI",{});var o$=s(Qn);Hte=n(o$,"STRONG",{});var nHr=s(Hte);Yoo=r(nHr,"dpr"),nHr.forEach(t),Koo=r(o$," \u2014 "),NR=n(o$,"A",{href:!0});var sHr=s(NR);Zoo=r(sHr,"DPRQuestionEncoderTokenizer"),sHr.forEach(t),ero=r(o$," or "),jR=n(o$,"A",{href:!0});var lHr=s(jR);oro=r(lHr,"DPRQuestionEncoderTokenizerFast"),lHr.forEach(t),rro=r(o$," (DPR model)"),o$.forEach(t),tro=i(S),Hn=n(S,"LI",{});var r$=s(Hn);Ute=n(r$,"STRONG",{});var iHr=s(Ute);aro=r(iHr,"electra"),iHr.forEach(t),nro=r(r$," \u2014 "),DR=n(r$,"A",{href:!0});var dHr=s(DR);sro=r(dHr,"ElectraTokenizer"),dHr.forEach(t),lro=r(r$," or "),GR=n(r$,"A",{href:!0});var cHr=s(GR);iro=r(cHr,"ElectraTokenizerFast"),cHr.forEach(t),dro=r(r$," (ELECTRA model)"),r$.forEach(t),cro=i(S),Pg=n(S,"LI",{});var T0e=s(Pg);Jte=n(T0e,"STRONG",{});var fHr=s(Jte);fro=r(fHr,"flaubert"),fHr.forEach(t),mro=r(T0e," \u2014 "),OR=n(T0e,"A",{href:!0});var mHr=s(OR);gro=r(mHr,"FlaubertTokenizer"),mHr.forEach(t),hro=r(T0e," (FlauBERT model)"),T0e.forEach(t),pro=i(S),Un=n(S,"LI",{});var t$=s(Un);Yte=n(t$,"STRONG",{});var gHr=s(Yte);uro=r(gHr,"fnet"),gHr.forEach(t),_ro=r(t$," \u2014 "),VR=n(t$,"A",{href:!0});var hHr=s(VR);bro=r(hHr,"FNetTokenizer"),hHr.forEach(t),vro=r(t$," or "),XR=n(t$,"A",{href:!0});var pHr=s(XR);Fro=r(pHr,"FNetTokenizerFast"),pHr.forEach(t),Tro=r(t$," (FNet model)"),t$.forEach(t),Mro=i(S),Bg=n(S,"LI",{});var M0e=s(Bg);Kte=n(M0e,"STRONG",{});var uHr=s(Kte);Ero=r(uHr,"fsmt"),uHr.forEach(t),Cro=r(M0e," \u2014 "),zR=n(M0e,"A",{href:!0});var _Hr=s(zR);wro=r(_Hr,"FSMTTokenizer"),_Hr.forEach(t),Aro=r(M0e," (FairSeq Machine-Translation model)"),M0e.forEach(t),yro=i(S),Jn=n(S,"LI",{});var a$=s(Jn);Zte=n(a$,"STRONG",{});var bHr=s(Zte);Lro=r(bHr,"funnel"),bHr.forEach(t),xro=r(a$," \u2014 "),WR=n(a$,"A",{href:!0});var vHr=s(WR);$ro=r(vHr,"FunnelTokenizer"),vHr.forEach(t),kro=r(a$," or "),QR=n(a$,"A",{href:!0});var FHr=s(QR);Sro=r(FHr,"FunnelTokenizerFast"),FHr.forEach(t),Rro=r(a$," (Funnel Transformer model)"),a$.forEach(t),Pro=i(S),Yn=n(S,"LI",{});var n$=s(Yn);eae=n(n$,"STRONG",{});var THr=s(eae);Bro=r(THr,"gpt2"),THr.forEach(t),Iro=r(n$," \u2014 "),HR=n(n$,"A",{href:!0});var MHr=s(HR);qro=r(MHr,"GPT2Tokenizer"),MHr.forEach(t),Nro=r(n$," or "),UR=n(n$,"A",{href:!0});var EHr=s(UR);jro=r(EHr,"GPT2TokenizerFast"),EHr.forEach(t),Dro=r(n$," (OpenAI GPT-2 model)"),n$.forEach(t),Gro=i(S),Kn=n(S,"LI",{});var s$=s(Kn);oae=n(s$,"STRONG",{});var CHr=s(oae);Oro=r(CHr,"gpt_neo"),CHr.forEach(t),Vro=r(s$," \u2014 "),JR=n(s$,"A",{href:!0});var wHr=s(JR);Xro=r(wHr,"GPT2Tokenizer"),wHr.forEach(t),zro=r(s$," or "),YR=n(s$,"A",{href:!0});var AHr=s(YR);Wro=r(AHr,"GPT2TokenizerFast"),AHr.forEach(t),Qro=r(s$," (GPT Neo model)"),s$.forEach(t),Hro=i(S),Ig=n(S,"LI",{});var E0e=s(Ig);rae=n(E0e,"STRONG",{});var yHr=s(rae);Uro=r(yHr,"gpt_neox"),yHr.forEach(t),Jro=r(E0e," \u2014 "),KR=n(E0e,"A",{href:!0});var LHr=s(KR);Yro=r(LHr,"GPTNeoXTokenizerFast"),LHr.forEach(t),Kro=r(E0e," (GPT NeoX model)"),E0e.forEach(t),Zro=i(S),Zn=n(S,"LI",{});var l$=s(Zn);tae=n(l$,"STRONG",{});var xHr=s(tae);eto=r(xHr,"gptj"),xHr.forEach(t),oto=r(l$," \u2014 "),ZR=n(l$,"A",{href:!0});var $Hr=s(ZR);rto=r($Hr,"GPT2Tokenizer"),$Hr.forEach(t),tto=r(l$," or "),eP=n(l$,"A",{href:!0});var kHr=s(eP);ato=r(kHr,"GPT2TokenizerFast"),kHr.forEach(t),nto=r(l$," (GPT-J model)"),l$.forEach(t),sto=i(S),es=n(S,"LI",{});var i$=s(es);aae=n(i$,"STRONG",{});var SHr=s(aae);lto=r(SHr,"herbert"),SHr.forEach(t),ito=r(i$," \u2014 "),oP=n(i$,"A",{href:!0});var RHr=s(oP);dto=r(RHr,"HerbertTokenizer"),RHr.forEach(t),cto=r(i$," or "),rP=n(i$,"A",{href:!0});var PHr=s(rP);fto=r(PHr,"HerbertTokenizerFast"),PHr.forEach(t),mto=r(i$," (HerBERT model)"),i$.forEach(t),gto=i(S),qg=n(S,"LI",{});var C0e=s(qg);nae=n(C0e,"STRONG",{});var BHr=s(nae);hto=r(BHr,"hubert"),BHr.forEach(t),pto=r(C0e," \u2014 "),tP=n(C0e,"A",{href:!0});var IHr=s(tP);uto=r(IHr,"Wav2Vec2CTCTokenizer"),IHr.forEach(t),_to=r(C0e," (Hubert model)"),C0e.forEach(t),bto=i(S),os=n(S,"LI",{});var d$=s(os);sae=n(d$,"STRONG",{});var qHr=s(sae);vto=r(qHr,"ibert"),qHr.forEach(t),Fto=r(d$," \u2014 "),aP=n(d$,"A",{href:!0});var NHr=s(aP);Tto=r(NHr,"RobertaTokenizer"),NHr.forEach(t),Mto=r(d$," or "),nP=n(d$,"A",{href:!0});var jHr=s(nP);Eto=r(jHr,"RobertaTokenizerFast"),jHr.forEach(t),Cto=r(d$," (I-BERT model)"),d$.forEach(t),wto=i(S),rs=n(S,"LI",{});var c$=s(rs);lae=n(c$,"STRONG",{});var DHr=s(lae);Ato=r(DHr,"layoutlm"),DHr.forEach(t),yto=r(c$," \u2014 "),sP=n(c$,"A",{href:!0});var GHr=s(sP);Lto=r(GHr,"LayoutLMTokenizer"),GHr.forEach(t),xto=r(c$," or "),lP=n(c$,"A",{href:!0});var OHr=s(lP);$to=r(OHr,"LayoutLMTokenizerFast"),OHr.forEach(t),kto=r(c$," (LayoutLM model)"),c$.forEach(t),Sto=i(S),ts=n(S,"LI",{});var f$=s(ts);iae=n(f$,"STRONG",{});var VHr=s(iae);Rto=r(VHr,"layoutlmv2"),VHr.forEach(t),Pto=r(f$," \u2014 "),iP=n(f$,"A",{href:!0});var XHr=s(iP);Bto=r(XHr,"LayoutLMv2Tokenizer"),XHr.forEach(t),Ito=r(f$," or "),dP=n(f$,"A",{href:!0});var zHr=s(dP);qto=r(zHr,"LayoutLMv2TokenizerFast"),zHr.forEach(t),Nto=r(f$," (LayoutLMv2 model)"),f$.forEach(t),jto=i(S),as=n(S,"LI",{});var m$=s(as);dae=n(m$,"STRONG",{});var WHr=s(dae);Dto=r(WHr,"layoutlmv3"),WHr.forEach(t),Gto=r(m$," \u2014 "),cP=n(m$,"A",{href:!0});var QHr=s(cP);Oto=r(QHr,"LayoutLMv3Tokenizer"),QHr.forEach(t),Vto=r(m$," or "),fP=n(m$,"A",{href:!0});var HHr=s(fP);Xto=r(HHr,"LayoutLMv3TokenizerFast"),HHr.forEach(t),zto=r(m$," (LayoutLMv3 model)"),m$.forEach(t),Wto=i(S),ns=n(S,"LI",{});var g$=s(ns);cae=n(g$,"STRONG",{});var UHr=s(cae);Qto=r(UHr,"layoutxlm"),UHr.forEach(t),Hto=r(g$," \u2014 "),mP=n(g$,"A",{href:!0});var JHr=s(mP);Uto=r(JHr,"LayoutXLMTokenizer"),JHr.forEach(t),Jto=r(g$," or "),gP=n(g$,"A",{href:!0});var YHr=s(gP);Yto=r(YHr,"LayoutXLMTokenizerFast"),YHr.forEach(t),Kto=r(g$," (LayoutXLM model)"),g$.forEach(t),Zto=i(S),ss=n(S,"LI",{});var h$=s(ss);fae=n(h$,"STRONG",{});var KHr=s(fae);eao=r(KHr,"led"),KHr.forEach(t),oao=r(h$," \u2014 "),hP=n(h$,"A",{href:!0});var ZHr=s(hP);rao=r(ZHr,"LEDTokenizer"),ZHr.forEach(t),tao=r(h$," or "),pP=n(h$,"A",{href:!0});var eUr=s(pP);aao=r(eUr,"LEDTokenizerFast"),eUr.forEach(t),nao=r(h$," (LED model)"),h$.forEach(t),sao=i(S),ls=n(S,"LI",{});var p$=s(ls);mae=n(p$,"STRONG",{});var oUr=s(mae);lao=r(oUr,"longformer"),oUr.forEach(t),iao=r(p$," \u2014 "),uP=n(p$,"A",{href:!0});var rUr=s(uP);dao=r(rUr,"LongformerTokenizer"),rUr.forEach(t),cao=r(p$," or "),_P=n(p$,"A",{href:!0});var tUr=s(_P);fao=r(tUr,"LongformerTokenizerFast"),tUr.forEach(t),mao=r(p$," (Longformer model)"),p$.forEach(t),gao=i(S),Ng=n(S,"LI",{});var w0e=s(Ng);gae=n(w0e,"STRONG",{});var aUr=s(gae);hao=r(aUr,"luke"),aUr.forEach(t),pao=r(w0e," \u2014 "),bP=n(w0e,"A",{href:!0});var nUr=s(bP);uao=r(nUr,"LukeTokenizer"),nUr.forEach(t),_ao=r(w0e," (LUKE model)"),w0e.forEach(t),bao=i(S),is=n(S,"LI",{});var u$=s(is);hae=n(u$,"STRONG",{});var sUr=s(hae);vao=r(sUr,"lxmert"),sUr.forEach(t),Fao=r(u$," \u2014 "),vP=n(u$,"A",{href:!0});var lUr=s(vP);Tao=r(lUr,"LxmertTokenizer"),lUr.forEach(t),Mao=r(u$," or "),FP=n(u$,"A",{href:!0});var iUr=s(FP);Eao=r(iUr,"LxmertTokenizerFast"),iUr.forEach(t),Cao=r(u$," (LXMERT model)"),u$.forEach(t),wao=i(S),jg=n(S,"LI",{});var A0e=s(jg);pae=n(A0e,"STRONG",{});var dUr=s(pae);Aao=r(dUr,"m2m_100"),dUr.forEach(t),yao=r(A0e," \u2014 "),TP=n(A0e,"A",{href:!0});var cUr=s(TP);Lao=r(cUr,"M2M100Tokenizer"),cUr.forEach(t),xao=r(A0e," (M2M100 model)"),A0e.forEach(t),$ao=i(S),Dg=n(S,"LI",{});var y0e=s(Dg);uae=n(y0e,"STRONG",{});var fUr=s(uae);kao=r(fUr,"marian"),fUr.forEach(t),Sao=r(y0e," \u2014 "),MP=n(y0e,"A",{href:!0});var mUr=s(MP);Rao=r(mUr,"MarianTokenizer"),mUr.forEach(t),Pao=r(y0e," (Marian model)"),y0e.forEach(t),Bao=i(S),ds=n(S,"LI",{});var _$=s(ds);_ae=n(_$,"STRONG",{});var gUr=s(_ae);Iao=r(gUr,"mbart"),gUr.forEach(t),qao=r(_$," \u2014 "),EP=n(_$,"A",{href:!0});var hUr=s(EP);Nao=r(hUr,"MBartTokenizer"),hUr.forEach(t),jao=r(_$," or "),CP=n(_$,"A",{href:!0});var pUr=s(CP);Dao=r(pUr,"MBartTokenizerFast"),pUr.forEach(t),Gao=r(_$," (mBART model)"),_$.forEach(t),Oao=i(S),cs=n(S,"LI",{});var b$=s(cs);bae=n(b$,"STRONG",{});var uUr=s(bae);Vao=r(uUr,"mbart50"),uUr.forEach(t),Xao=r(b$," \u2014 "),wP=n(b$,"A",{href:!0});var _Ur=s(wP);zao=r(_Ur,"MBart50Tokenizer"),_Ur.forEach(t),Wao=r(b$," or "),AP=n(b$,"A",{href:!0});var bUr=s(AP);Qao=r(bUr,"MBart50TokenizerFast"),bUr.forEach(t),Hao=r(b$," (mBART-50 model)"),b$.forEach(t),Uao=i(S),fs=n(S,"LI",{});var v$=s(fs);vae=n(v$,"STRONG",{});var vUr=s(vae);Jao=r(vUr,"megatron-bert"),vUr.forEach(t),Yao=r(v$," \u2014 "),yP=n(v$,"A",{href:!0});var FUr=s(yP);Kao=r(FUr,"BertTokenizer"),FUr.forEach(t),Zao=r(v$," or "),LP=n(v$,"A",{href:!0});var TUr=s(LP);eno=r(TUr,"BertTokenizerFast"),TUr.forEach(t),ono=r(v$," (MegatronBert model)"),v$.forEach(t),rno=i(S),Gg=n(S,"LI",{});var L0e=s(Gg);Fae=n(L0e,"STRONG",{});var MUr=s(Fae);tno=r(MUr,"mluke"),MUr.forEach(t),ano=r(L0e," \u2014 "),xP=n(L0e,"A",{href:!0});var EUr=s(xP);nno=r(EUr,"MLukeTokenizer"),EUr.forEach(t),sno=r(L0e," (mLUKE model)"),L0e.forEach(t),lno=i(S),ms=n(S,"LI",{});var F$=s(ms);Tae=n(F$,"STRONG",{});var CUr=s(Tae);ino=r(CUr,"mobilebert"),CUr.forEach(t),dno=r(F$," \u2014 "),$P=n(F$,"A",{href:!0});var wUr=s($P);cno=r(wUr,"MobileBertTokenizer"),wUr.forEach(t),fno=r(F$," or "),kP=n(F$,"A",{href:!0});var AUr=s(kP);mno=r(AUr,"MobileBertTokenizerFast"),AUr.forEach(t),gno=r(F$," (MobileBERT model)"),F$.forEach(t),hno=i(S),gs=n(S,"LI",{});var T$=s(gs);Mae=n(T$,"STRONG",{});var yUr=s(Mae);pno=r(yUr,"mpnet"),yUr.forEach(t),uno=r(T$," \u2014 "),SP=n(T$,"A",{href:!0});var LUr=s(SP);_no=r(LUr,"MPNetTokenizer"),LUr.forEach(t),bno=r(T$," or "),RP=n(T$,"A",{href:!0});var xUr=s(RP);vno=r(xUr,"MPNetTokenizerFast"),xUr.forEach(t),Fno=r(T$," (MPNet model)"),T$.forEach(t),Tno=i(S),hs=n(S,"LI",{});var M$=s(hs);Eae=n(M$,"STRONG",{});var $Ur=s(Eae);Mno=r($Ur,"mt5"),$Ur.forEach(t),Eno=r(M$," \u2014 "),PP=n(M$,"A",{href:!0});var kUr=s(PP);Cno=r(kUr,"MT5Tokenizer"),kUr.forEach(t),wno=r(M$," or "),BP=n(M$,"A",{href:!0});var SUr=s(BP);Ano=r(SUr,"MT5TokenizerFast"),SUr.forEach(t),yno=r(M$," (mT5 model)"),M$.forEach(t),Lno=i(S),ps=n(S,"LI",{});var E$=s(ps);Cae=n(E$,"STRONG",{});var RUr=s(Cae);xno=r(RUr,"nystromformer"),RUr.forEach(t),$no=r(E$," \u2014 "),IP=n(E$,"A",{href:!0});var PUr=s(IP);kno=r(PUr,"AlbertTokenizer"),PUr.forEach(t),Sno=r(E$," or "),qP=n(E$,"A",{href:!0});var BUr=s(qP);Rno=r(BUr,"AlbertTokenizerFast"),BUr.forEach(t),Pno=r(E$," (Nystromformer model)"),E$.forEach(t),Bno=i(S),us=n(S,"LI",{});var C$=s(us);wae=n(C$,"STRONG",{});var IUr=s(wae);Ino=r(IUr,"openai-gpt"),IUr.forEach(t),qno=r(C$," \u2014 "),NP=n(C$,"A",{href:!0});var qUr=s(NP);Nno=r(qUr,"OpenAIGPTTokenizer"),qUr.forEach(t),jno=r(C$," or "),jP=n(C$,"A",{href:!0});var NUr=s(jP);Dno=r(NUr,"OpenAIGPTTokenizerFast"),NUr.forEach(t),Gno=r(C$," (OpenAI GPT model)"),C$.forEach(t),Ono=i(S),Og=n(S,"LI",{});var x0e=s(Og);Aae=n(x0e,"STRONG",{});var jUr=s(Aae);Vno=r(jUr,"opt"),jUr.forEach(t),Xno=r(x0e," \u2014 "),DP=n(x0e,"A",{href:!0});var DUr=s(DP);zno=r(DUr,"GPT2Tokenizer"),DUr.forEach(t),Wno=r(x0e," (OPT model)"),x0e.forEach(t),Qno=i(S),_s=n(S,"LI",{});var w$=s(_s);yae=n(w$,"STRONG",{});var GUr=s(yae);Hno=r(GUr,"pegasus"),GUr.forEach(t),Uno=r(w$," \u2014 "),GP=n(w$,"A",{href:!0});var OUr=s(GP);Jno=r(OUr,"PegasusTokenizer"),OUr.forEach(t),Yno=r(w$," or "),OP=n(w$,"A",{href:!0});var VUr=s(OP);Kno=r(VUr,"PegasusTokenizerFast"),VUr.forEach(t),Zno=r(w$," (Pegasus model)"),w$.forEach(t),eso=i(S),Vg=n(S,"LI",{});var $0e=s(Vg);Lae=n($0e,"STRONG",{});var XUr=s(Lae);oso=r(XUr,"perceiver"),XUr.forEach(t),rso=r($0e," \u2014 "),VP=n($0e,"A",{href:!0});var zUr=s(VP);tso=r(zUr,"PerceiverTokenizer"),zUr.forEach(t),aso=r($0e," (Perceiver model)"),$0e.forEach(t),nso=i(S),Xg=n(S,"LI",{});var k0e=s(Xg);xae=n(k0e,"STRONG",{});var WUr=s(xae);sso=r(WUr,"phobert"),WUr.forEach(t),lso=r(k0e," \u2014 "),XP=n(k0e,"A",{href:!0});var QUr=s(XP);iso=r(QUr,"PhobertTokenizer"),QUr.forEach(t),dso=r(k0e," (PhoBERT model)"),k0e.forEach(t),cso=i(S),zg=n(S,"LI",{});var S0e=s(zg);$ae=n(S0e,"STRONG",{});var HUr=s($ae);fso=r(HUr,"plbart"),HUr.forEach(t),mso=r(S0e," \u2014 "),zP=n(S0e,"A",{href:!0});var UUr=s(zP);gso=r(UUr,"PLBartTokenizer"),UUr.forEach(t),hso=r(S0e," (PLBart model)"),S0e.forEach(t),pso=i(S),Wg=n(S,"LI",{});var R0e=s(Wg);kae=n(R0e,"STRONG",{});var JUr=s(kae);uso=r(JUr,"prophetnet"),JUr.forEach(t),_so=r(R0e," \u2014 "),WP=n(R0e,"A",{href:!0});var YUr=s(WP);bso=r(YUr,"ProphetNetTokenizer"),YUr.forEach(t),vso=r(R0e," (ProphetNet model)"),R0e.forEach(t),Fso=i(S),bs=n(S,"LI",{});var A$=s(bs);Sae=n(A$,"STRONG",{});var KUr=s(Sae);Tso=r(KUr,"qdqbert"),KUr.forEach(t),Mso=r(A$," \u2014 "),QP=n(A$,"A",{href:!0});var ZUr=s(QP);Eso=r(ZUr,"BertTokenizer"),ZUr.forEach(t),Cso=r(A$," or "),HP=n(A$,"A",{href:!0});var eJr=s(HP);wso=r(eJr,"BertTokenizerFast"),eJr.forEach(t),Aso=r(A$," (QDQBert model)"),A$.forEach(t),yso=i(S),Qg=n(S,"LI",{});var P0e=s(Qg);Rae=n(P0e,"STRONG",{});var oJr=s(Rae);Lso=r(oJr,"rag"),oJr.forEach(t),xso=r(P0e," \u2014 "),UP=n(P0e,"A",{href:!0});var rJr=s(UP);$so=r(rJr,"RagTokenizer"),rJr.forEach(t),kso=r(P0e," (RAG model)"),P0e.forEach(t),Sso=i(S),vs=n(S,"LI",{});var y$=s(vs);Pae=n(y$,"STRONG",{});var tJr=s(Pae);Rso=r(tJr,"realm"),tJr.forEach(t),Pso=r(y$," \u2014 "),JP=n(y$,"A",{href:!0});var aJr=s(JP);Bso=r(aJr,"RealmTokenizer"),aJr.forEach(t),Iso=r(y$," or "),YP=n(y$,"A",{href:!0});var nJr=s(YP);qso=r(nJr,"RealmTokenizerFast"),nJr.forEach(t),Nso=r(y$," (Realm model)"),y$.forEach(t),jso=i(S),Fs=n(S,"LI",{});var L$=s(Fs);Bae=n(L$,"STRONG",{});var sJr=s(Bae);Dso=r(sJr,"reformer"),sJr.forEach(t),Gso=r(L$," \u2014 "),KP=n(L$,"A",{href:!0});var lJr=s(KP);Oso=r(lJr,"ReformerTokenizer"),lJr.forEach(t),Vso=r(L$," or "),ZP=n(L$,"A",{href:!0});var iJr=s(ZP);Xso=r(iJr,"ReformerTokenizerFast"),iJr.forEach(t),zso=r(L$," (Reformer model)"),L$.forEach(t),Wso=i(S),Ts=n(S,"LI",{});var x$=s(Ts);Iae=n(x$,"STRONG",{});var dJr=s(Iae);Qso=r(dJr,"rembert"),dJr.forEach(t),Hso=r(x$," \u2014 "),eB=n(x$,"A",{href:!0});var cJr=s(eB);Uso=r(cJr,"RemBertTokenizer"),cJr.forEach(t),Jso=r(x$," or "),oB=n(x$,"A",{href:!0});var fJr=s(oB);Yso=r(fJr,"RemBertTokenizerFast"),fJr.forEach(t),Kso=r(x$," (RemBERT model)"),x$.forEach(t),Zso=i(S),Ms=n(S,"LI",{});var $$=s(Ms);qae=n($$,"STRONG",{});var mJr=s(qae);elo=r(mJr,"retribert"),mJr.forEach(t),olo=r($$," \u2014 "),rB=n($$,"A",{href:!0});var gJr=s(rB);rlo=r(gJr,"RetriBertTokenizer"),gJr.forEach(t),tlo=r($$," or "),tB=n($$,"A",{href:!0});var hJr=s(tB);alo=r(hJr,"RetriBertTokenizerFast"),hJr.forEach(t),nlo=r($$," (RetriBERT model)"),$$.forEach(t),slo=i(S),Es=n(S,"LI",{});var k$=s(Es);Nae=n(k$,"STRONG",{});var pJr=s(Nae);llo=r(pJr,"roberta"),pJr.forEach(t),ilo=r(k$," \u2014 "),aB=n(k$,"A",{href:!0});var uJr=s(aB);dlo=r(uJr,"RobertaTokenizer"),uJr.forEach(t),clo=r(k$," or "),nB=n(k$,"A",{href:!0});var _Jr=s(nB);flo=r(_Jr,"RobertaTokenizerFast"),_Jr.forEach(t),mlo=r(k$," (RoBERTa model)"),k$.forEach(t),glo=i(S),Cs=n(S,"LI",{});var S$=s(Cs);jae=n(S$,"STRONG",{});var bJr=s(jae);hlo=r(bJr,"roformer"),bJr.forEach(t),plo=r(S$," \u2014 "),sB=n(S$,"A",{href:!0});var vJr=s(sB);ulo=r(vJr,"RoFormerTokenizer"),vJr.forEach(t),_lo=r(S$," or "),lB=n(S$,"A",{href:!0});var FJr=s(lB);blo=r(FJr,"RoFormerTokenizerFast"),FJr.forEach(t),vlo=r(S$," (RoFormer model)"),S$.forEach(t),Flo=i(S),Hg=n(S,"LI",{});var B0e=s(Hg);Dae=n(B0e,"STRONG",{});var TJr=s(Dae);Tlo=r(TJr,"speech_to_text"),TJr.forEach(t),Mlo=r(B0e," \u2014 "),iB=n(B0e,"A",{href:!0});var MJr=s(iB);Elo=r(MJr,"Speech2TextTokenizer"),MJr.forEach(t),Clo=r(B0e," (Speech2Text model)"),B0e.forEach(t),wlo=i(S),Ug=n(S,"LI",{});var I0e=s(Ug);Gae=n(I0e,"STRONG",{});var EJr=s(Gae);Alo=r(EJr,"speech_to_text_2"),EJr.forEach(t),ylo=r(I0e," \u2014 "),dB=n(I0e,"A",{href:!0});var CJr=s(dB);Llo=r(CJr,"Speech2Text2Tokenizer"),CJr.forEach(t),xlo=r(I0e," (Speech2Text2 model)"),I0e.forEach(t),$lo=i(S),ws=n(S,"LI",{});var R$=s(ws);Oae=n(R$,"STRONG",{});var wJr=s(Oae);klo=r(wJr,"splinter"),wJr.forEach(t),Slo=r(R$," \u2014 "),cB=n(R$,"A",{href:!0});var AJr=s(cB);Rlo=r(AJr,"SplinterTokenizer"),AJr.forEach(t),Plo=r(R$," or "),fB=n(R$,"A",{href:!0});var yJr=s(fB);Blo=r(yJr,"SplinterTokenizerFast"),yJr.forEach(t),Ilo=r(R$," (Splinter model)"),R$.forEach(t),qlo=i(S),As=n(S,"LI",{});var P$=s(As);Vae=n(P$,"STRONG",{});var LJr=s(Vae);Nlo=r(LJr,"squeezebert"),LJr.forEach(t),jlo=r(P$," \u2014 "),mB=n(P$,"A",{href:!0});var xJr=s(mB);Dlo=r(xJr,"SqueezeBertTokenizer"),xJr.forEach(t),Glo=r(P$," or "),gB=n(P$,"A",{href:!0});var $Jr=s(gB);Olo=r($Jr,"SqueezeBertTokenizerFast"),$Jr.forEach(t),Vlo=r(P$," (SqueezeBERT model)"),P$.forEach(t),Xlo=i(S),ys=n(S,"LI",{});var B$=s(ys);Xae=n(B$,"STRONG",{});var kJr=s(Xae);zlo=r(kJr,"t5"),kJr.forEach(t),Wlo=r(B$," \u2014 "),hB=n(B$,"A",{href:!0});var SJr=s(hB);Qlo=r(SJr,"T5Tokenizer"),SJr.forEach(t),Hlo=r(B$," or "),pB=n(B$,"A",{href:!0});var RJr=s(pB);Ulo=r(RJr,"T5TokenizerFast"),RJr.forEach(t),Jlo=r(B$," (T5 model)"),B$.forEach(t),Ylo=i(S),Jg=n(S,"LI",{});var q0e=s(Jg);zae=n(q0e,"STRONG",{});var PJr=s(zae);Klo=r(PJr,"tapas"),PJr.forEach(t),Zlo=r(q0e," \u2014 "),uB=n(q0e,"A",{href:!0});var BJr=s(uB);eio=r(BJr,"TapasTokenizer"),BJr.forEach(t),oio=r(q0e," (TAPAS model)"),q0e.forEach(t),rio=i(S),Yg=n(S,"LI",{});var N0e=s(Yg);Wae=n(N0e,"STRONG",{});var IJr=s(Wae);tio=r(IJr,"tapex"),IJr.forEach(t),aio=r(N0e," \u2014 "),_B=n(N0e,"A",{href:!0});var qJr=s(_B);nio=r(qJr,"TapexTokenizer"),qJr.forEach(t),sio=r(N0e," (TAPEX model)"),N0e.forEach(t),lio=i(S),Kg=n(S,"LI",{});var j0e=s(Kg);Qae=n(j0e,"STRONG",{});var NJr=s(Qae);iio=r(NJr,"transfo-xl"),NJr.forEach(t),dio=r(j0e," \u2014 "),bB=n(j0e,"A",{href:!0});var jJr=s(bB);cio=r(jJr,"TransfoXLTokenizer"),jJr.forEach(t),fio=r(j0e," (Transformer-XL model)"),j0e.forEach(t),mio=i(S),Ls=n(S,"LI",{});var I$=s(Ls);Hae=n(I$,"STRONG",{});var DJr=s(Hae);gio=r(DJr,"visual_bert"),DJr.forEach(t),hio=r(I$," \u2014 "),vB=n(I$,"A",{href:!0});var GJr=s(vB);pio=r(GJr,"BertTokenizer"),GJr.forEach(t),uio=r(I$," or "),FB=n(I$,"A",{href:!0});var OJr=s(FB);_io=r(OJr,"BertTokenizerFast"),OJr.forEach(t),bio=r(I$," (VisualBert model)"),I$.forEach(t),vio=i(S),Zg=n(S,"LI",{});var D0e=s(Zg);Uae=n(D0e,"STRONG",{});var VJr=s(Uae);Fio=r(VJr,"wav2vec2"),VJr.forEach(t),Tio=r(D0e," \u2014 "),TB=n(D0e,"A",{href:!0});var XJr=s(TB);Mio=r(XJr,"Wav2Vec2CTCTokenizer"),XJr.forEach(t),Eio=r(D0e," (Wav2Vec2 model)"),D0e.forEach(t),Cio=i(S),eh=n(S,"LI",{});var G0e=s(eh);Jae=n(G0e,"STRONG",{});var zJr=s(Jae);wio=r(zJr,"wav2vec2-conformer"),zJr.forEach(t),Aio=r(G0e," \u2014 "),MB=n(G0e,"A",{href:!0});var WJr=s(MB);yio=r(WJr,"Wav2Vec2CTCTokenizer"),WJr.forEach(t),Lio=r(G0e," (Wav2Vec2-Conformer model)"),G0e.forEach(t),xio=i(S),oh=n(S,"LI",{});var O0e=s(oh);Yae=n(O0e,"STRONG",{});var QJr=s(Yae);$io=r(QJr,"wav2vec2_phoneme"),QJr.forEach(t),kio=r(O0e," \u2014 "),EB=n(O0e,"A",{href:!0});var HJr=s(EB);Sio=r(HJr,"Wav2Vec2PhonemeCTCTokenizer"),HJr.forEach(t),Rio=r(O0e," (Wav2Vec2Phoneme model)"),O0e.forEach(t),Pio=i(S),xs=n(S,"LI",{});var q$=s(xs);Kae=n(q$,"STRONG",{});var UJr=s(Kae);Bio=r(UJr,"xglm"),UJr.forEach(t),Iio=r(q$," \u2014 "),CB=n(q$,"A",{href:!0});var JJr=s(CB);qio=r(JJr,"XGLMTokenizer"),JJr.forEach(t),Nio=r(q$," or "),wB=n(q$,"A",{href:!0});var YJr=s(wB);jio=r(YJr,"XGLMTokenizerFast"),YJr.forEach(t),Dio=r(q$," (XGLM model)"),q$.forEach(t),Gio=i(S),rh=n(S,"LI",{});var V0e=s(rh);Zae=n(V0e,"STRONG",{});var KJr=s(Zae);Oio=r(KJr,"xlm"),KJr.forEach(t),Vio=r(V0e," \u2014 "),AB=n(V0e,"A",{href:!0});var ZJr=s(AB);Xio=r(ZJr,"XLMTokenizer"),ZJr.forEach(t),zio=r(V0e," (XLM model)"),V0e.forEach(t),Wio=i(S),th=n(S,"LI",{});var X0e=s(th);ene=n(X0e,"STRONG",{});var eYr=s(ene);Qio=r(eYr,"xlm-prophetnet"),eYr.forEach(t),Hio=r(X0e," \u2014 "),yB=n(X0e,"A",{href:!0});var oYr=s(yB);Uio=r(oYr,"XLMProphetNetTokenizer"),oYr.forEach(t),Jio=r(X0e," (XLMProphetNet model)"),X0e.forEach(t),Yio=i(S),$s=n(S,"LI",{});var N$=s($s);one=n(N$,"STRONG",{});var rYr=s(one);Kio=r(rYr,"xlm-roberta"),rYr.forEach(t),Zio=r(N$," \u2014 "),LB=n(N$,"A",{href:!0});var tYr=s(LB);edo=r(tYr,"XLMRobertaTokenizer"),tYr.forEach(t),odo=r(N$," or "),xB=n(N$,"A",{href:!0});var aYr=s(xB);rdo=r(aYr,"XLMRobertaTokenizerFast"),aYr.forEach(t),tdo=r(N$," (XLM-RoBERTa model)"),N$.forEach(t),ado=i(S),ks=n(S,"LI",{});var j$=s(ks);rne=n(j$,"STRONG",{});var nYr=s(rne);ndo=r(nYr,"xlm-roberta-xl"),nYr.forEach(t),sdo=r(j$," \u2014 "),$B=n(j$,"A",{href:!0});var sYr=s($B);ldo=r(sYr,"RobertaTokenizer"),sYr.forEach(t),ido=r(j$," or "),kB=n(j$,"A",{href:!0});var lYr=s(kB);ddo=r(lYr,"RobertaTokenizerFast"),lYr.forEach(t),cdo=r(j$," (XLM-RoBERTa-XL model)"),j$.forEach(t),fdo=i(S),Ss=n(S,"LI",{});var D$=s(Ss);tne=n(D$,"STRONG",{});var iYr=s(tne);mdo=r(iYr,"xlnet"),iYr.forEach(t),gdo=r(D$," \u2014 "),SB=n(D$,"A",{href:!0});var dYr=s(SB);hdo=r(dYr,"XLNetTokenizer"),dYr.forEach(t),pdo=r(D$," or "),RB=n(D$,"A",{href:!0});var cYr=s(RB);udo=r(cYr,"XLNetTokenizerFast"),cYr.forEach(t),_do=r(D$," (XLNet model)"),D$.forEach(t),bdo=i(S),Rs=n(S,"LI",{});var G$=s(Rs);ane=n(G$,"STRONG",{});var fYr=s(ane);vdo=r(fYr,"yoso"),fYr.forEach(t),Fdo=r(G$," \u2014 "),PB=n(G$,"A",{href:!0});var mYr=s(PB);Tdo=r(mYr,"AlbertTokenizer"),mYr.forEach(t),Mdo=r(G$," or "),BB=n(G$,"A",{href:!0});var gYr=s(BB);Edo=r(gYr,"AlbertTokenizerFast"),gYr.forEach(t),Cdo=r(G$," (YOSO model)"),G$.forEach(t),S.forEach(t),wdo=i(Ns),T(ah.$$.fragment,Ns),Ns.forEach(t),Ado=i(qs),nh=n(qs,"DIV",{class:!0});var sDe=s(nh);T(D6.$$.fragment,sDe),ydo=i(sDe),nne=n(sDe,"P",{});var hYr=s(nne);Ldo=r(hYr,"Register a new tokenizer in this mapping."),hYr.forEach(t),sDe.forEach(t),qs.forEach(t),lNe=i(f),Mi=n(f,"H2",{class:!0});var lDe=s(Mi);sh=n(lDe,"A",{id:!0,class:!0,href:!0});var pYr=s(sh);sne=n(pYr,"SPAN",{});var uYr=s(sne);T(G6.$$.fragment,uYr),uYr.forEach(t),pYr.forEach(t),xdo=i(lDe),lne=n(lDe,"SPAN",{});var _Yr=s(lne);$do=r(_Yr,"AutoFeatureExtractor"),_Yr.forEach(t),lDe.forEach(t),iNe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(O6.$$.fragment,js),kdo=i(js),V6=n(js,"P",{});var iDe=s(V6);Sdo=r(iDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=n(iDe,"A",{href:!0});var bYr=s(IB);Rdo=r(bYr,"AutoFeatureExtractor.from_pretrained()"),bYr.forEach(t),Pdo=r(iDe," class method."),iDe.forEach(t),Bdo=i(js),X6=n(js,"P",{});var dDe=s(X6);Ido=r(dDe,"This class cannot be instantiated directly using "),ine=n(dDe,"CODE",{});var vYr=s(ine);qdo=r(vYr,"__init__()"),vYr.forEach(t),Ndo=r(dDe," (throws an error)."),dDe.forEach(t),jdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(z6.$$.fragment,Zt),Ddo=i(Zt),dne=n(Zt,"P",{});var FYr=s(dne);Gdo=r(FYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),FYr.forEach(t),Odo=i(Zt),ya=n(Zt,"P",{});var $0=s(ya);Vdo=r($0,"The feature extractor class to instantiate is selected based on the "),cne=n($0,"CODE",{});var TYr=s(cne);Xdo=r(TYr,"model_type"),TYr.forEach(t),zdo=r($0,` property of the config object
(either passed as an argument or loaded from `),fne=n($0,"CODE",{});var MYr=s(fne);Wdo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),Qdo=r($0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mne=n($0,"CODE",{});var EYr=s(mne);Hdo=r(EYr,"pretrained_model_name_or_path"),EYr.forEach(t),Udo=r($0,":"),$0.forEach(t),Jdo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var z0e=s(lh);gne=n(z0e,"STRONG",{});var CYr=s(gne);Ydo=r(CYr,"beit"),CYr.forEach(t),Kdo=r(z0e," \u2014 "),qB=n(z0e,"A",{href:!0});var wYr=s(qB);Zdo=r(wYr,"BeitFeatureExtractor"),wYr.forEach(t),eco=r(z0e," (BEiT model)"),z0e.forEach(t),oco=i(Z),ih=n(Z,"LI",{});var W0e=s(ih);hne=n(W0e,"STRONG",{});var AYr=s(hne);rco=r(AYr,"clip"),AYr.forEach(t),tco=r(W0e," \u2014 "),NB=n(W0e,"A",{href:!0});var yYr=s(NB);aco=r(yYr,"CLIPFeatureExtractor"),yYr.forEach(t),nco=r(W0e," (CLIP model)"),W0e.forEach(t),sco=i(Z),dh=n(Z,"LI",{});var Q0e=s(dh);pne=n(Q0e,"STRONG",{});var LYr=s(pne);lco=r(LYr,"convnext"),LYr.forEach(t),ico=r(Q0e," \u2014 "),jB=n(Q0e,"A",{href:!0});var xYr=s(jB);dco=r(xYr,"ConvNextFeatureExtractor"),xYr.forEach(t),cco=r(Q0e," (ConvNext model)"),Q0e.forEach(t),fco=i(Z),ch=n(Z,"LI",{});var H0e=s(ch);une=n(H0e,"STRONG",{});var $Yr=s(une);mco=r($Yr,"cvt"),$Yr.forEach(t),gco=r(H0e," \u2014 "),DB=n(H0e,"A",{href:!0});var kYr=s(DB);hco=r(kYr,"ConvNextFeatureExtractor"),kYr.forEach(t),pco=r(H0e," (CvT model)"),H0e.forEach(t),uco=i(Z),fh=n(Z,"LI",{});var U0e=s(fh);_ne=n(U0e,"STRONG",{});var SYr=s(_ne);_co=r(SYr,"data2vec-audio"),SYr.forEach(t),bco=r(U0e," \u2014 "),GB=n(U0e,"A",{href:!0});var RYr=s(GB);vco=r(RYr,"Wav2Vec2FeatureExtractor"),RYr.forEach(t),Fco=r(U0e," (Data2VecAudio model)"),U0e.forEach(t),Tco=i(Z),mh=n(Z,"LI",{});var J0e=s(mh);bne=n(J0e,"STRONG",{});var PYr=s(bne);Mco=r(PYr,"data2vec-vision"),PYr.forEach(t),Eco=r(J0e," \u2014 "),OB=n(J0e,"A",{href:!0});var BYr=s(OB);Cco=r(BYr,"BeitFeatureExtractor"),BYr.forEach(t),wco=r(J0e," (Data2VecVision model)"),J0e.forEach(t),Aco=i(Z),gh=n(Z,"LI",{});var Y0e=s(gh);vne=n(Y0e,"STRONG",{});var IYr=s(vne);yco=r(IYr,"deit"),IYr.forEach(t),Lco=r(Y0e," \u2014 "),VB=n(Y0e,"A",{href:!0});var qYr=s(VB);xco=r(qYr,"DeiTFeatureExtractor"),qYr.forEach(t),$co=r(Y0e," (DeiT model)"),Y0e.forEach(t),kco=i(Z),hh=n(Z,"LI",{});var K0e=s(hh);Fne=n(K0e,"STRONG",{});var NYr=s(Fne);Sco=r(NYr,"detr"),NYr.forEach(t),Rco=r(K0e," \u2014 "),XB=n(K0e,"A",{href:!0});var jYr=s(XB);Pco=r(jYr,"DetrFeatureExtractor"),jYr.forEach(t),Bco=r(K0e," (DETR model)"),K0e.forEach(t),Ico=i(Z),ph=n(Z,"LI",{});var Z0e=s(ph);Tne=n(Z0e,"STRONG",{});var DYr=s(Tne);qco=r(DYr,"dpt"),DYr.forEach(t),Nco=r(Z0e," \u2014 "),zB=n(Z0e,"A",{href:!0});var GYr=s(zB);jco=r(GYr,"DPTFeatureExtractor"),GYr.forEach(t),Dco=r(Z0e," (DPT model)"),Z0e.forEach(t),Gco=i(Z),uh=n(Z,"LI",{});var eAe=s(uh);Mne=n(eAe,"STRONG",{});var OYr=s(Mne);Oco=r(OYr,"flava"),OYr.forEach(t),Vco=r(eAe," \u2014 "),WB=n(eAe,"A",{href:!0});var VYr=s(WB);Xco=r(VYr,"FlavaFeatureExtractor"),VYr.forEach(t),zco=r(eAe," (Flava model)"),eAe.forEach(t),Wco=i(Z),_h=n(Z,"LI",{});var oAe=s(_h);Ene=n(oAe,"STRONG",{});var XYr=s(Ene);Qco=r(XYr,"glpn"),XYr.forEach(t),Hco=r(oAe," \u2014 "),QB=n(oAe,"A",{href:!0});var zYr=s(QB);Uco=r(zYr,"GLPNFeatureExtractor"),zYr.forEach(t),Jco=r(oAe," (GLPN model)"),oAe.forEach(t),Yco=i(Z),bh=n(Z,"LI",{});var rAe=s(bh);Cne=n(rAe,"STRONG",{});var WYr=s(Cne);Kco=r(WYr,"hubert"),WYr.forEach(t),Zco=r(rAe," \u2014 "),HB=n(rAe,"A",{href:!0});var QYr=s(HB);efo=r(QYr,"Wav2Vec2FeatureExtractor"),QYr.forEach(t),ofo=r(rAe," (Hubert model)"),rAe.forEach(t),rfo=i(Z),vh=n(Z,"LI",{});var tAe=s(vh);wne=n(tAe,"STRONG",{});var HYr=s(wne);tfo=r(HYr,"imagegpt"),HYr.forEach(t),afo=r(tAe," \u2014 "),UB=n(tAe,"A",{href:!0});var UYr=s(UB);nfo=r(UYr,"ImageGPTFeatureExtractor"),UYr.forEach(t),sfo=r(tAe," (ImageGPT model)"),tAe.forEach(t),lfo=i(Z),Fh=n(Z,"LI",{});var aAe=s(Fh);Ane=n(aAe,"STRONG",{});var JYr=s(Ane);ifo=r(JYr,"layoutlmv2"),JYr.forEach(t),dfo=r(aAe," \u2014 "),JB=n(aAe,"A",{href:!0});var YYr=s(JB);cfo=r(YYr,"LayoutLMv2FeatureExtractor"),YYr.forEach(t),ffo=r(aAe," (LayoutLMv2 model)"),aAe.forEach(t),mfo=i(Z),Th=n(Z,"LI",{});var nAe=s(Th);yne=n(nAe,"STRONG",{});var KYr=s(yne);gfo=r(KYr,"layoutlmv3"),KYr.forEach(t),hfo=r(nAe," \u2014 "),YB=n(nAe,"A",{href:!0});var ZYr=s(YB);pfo=r(ZYr,"LayoutLMv3FeatureExtractor"),ZYr.forEach(t),ufo=r(nAe," (LayoutLMv3 model)"),nAe.forEach(t),_fo=i(Z),Mh=n(Z,"LI",{});var sAe=s(Mh);Lne=n(sAe,"STRONG",{});var eKr=s(Lne);bfo=r(eKr,"maskformer"),eKr.forEach(t),vfo=r(sAe," \u2014 "),KB=n(sAe,"A",{href:!0});var oKr=s(KB);Ffo=r(oKr,"MaskFormerFeatureExtractor"),oKr.forEach(t),Tfo=r(sAe," (MaskFormer model)"),sAe.forEach(t),Mfo=i(Z),Eh=n(Z,"LI",{});var lAe=s(Eh);xne=n(lAe,"STRONG",{});var rKr=s(xne);Efo=r(rKr,"perceiver"),rKr.forEach(t),Cfo=r(lAe," \u2014 "),ZB=n(lAe,"A",{href:!0});var tKr=s(ZB);wfo=r(tKr,"PerceiverFeatureExtractor"),tKr.forEach(t),Afo=r(lAe," (Perceiver model)"),lAe.forEach(t),yfo=i(Z),Ch=n(Z,"LI",{});var iAe=s(Ch);$ne=n(iAe,"STRONG",{});var aKr=s($ne);Lfo=r(aKr,"poolformer"),aKr.forEach(t),xfo=r(iAe," \u2014 "),eI=n(iAe,"A",{href:!0});var nKr=s(eI);$fo=r(nKr,"PoolFormerFeatureExtractor"),nKr.forEach(t),kfo=r(iAe," (PoolFormer model)"),iAe.forEach(t),Sfo=i(Z),wh=n(Z,"LI",{});var dAe=s(wh);kne=n(dAe,"STRONG",{});var sKr=s(kne);Rfo=r(sKr,"regnet"),sKr.forEach(t),Pfo=r(dAe," \u2014 "),oI=n(dAe,"A",{href:!0});var lKr=s(oI);Bfo=r(lKr,"ConvNextFeatureExtractor"),lKr.forEach(t),Ifo=r(dAe," (RegNet model)"),dAe.forEach(t),qfo=i(Z),Ah=n(Z,"LI",{});var cAe=s(Ah);Sne=n(cAe,"STRONG",{});var iKr=s(Sne);Nfo=r(iKr,"resnet"),iKr.forEach(t),jfo=r(cAe," \u2014 "),rI=n(cAe,"A",{href:!0});var dKr=s(rI);Dfo=r(dKr,"ConvNextFeatureExtractor"),dKr.forEach(t),Gfo=r(cAe," (ResNet model)"),cAe.forEach(t),Ofo=i(Z),yh=n(Z,"LI",{});var fAe=s(yh);Rne=n(fAe,"STRONG",{});var cKr=s(Rne);Vfo=r(cKr,"segformer"),cKr.forEach(t),Xfo=r(fAe," \u2014 "),tI=n(fAe,"A",{href:!0});var fKr=s(tI);zfo=r(fKr,"SegformerFeatureExtractor"),fKr.forEach(t),Wfo=r(fAe," (SegFormer model)"),fAe.forEach(t),Qfo=i(Z),Lh=n(Z,"LI",{});var mAe=s(Lh);Pne=n(mAe,"STRONG",{});var mKr=s(Pne);Hfo=r(mKr,"speech_to_text"),mKr.forEach(t),Ufo=r(mAe," \u2014 "),aI=n(mAe,"A",{href:!0});var gKr=s(aI);Jfo=r(gKr,"Speech2TextFeatureExtractor"),gKr.forEach(t),Yfo=r(mAe," (Speech2Text model)"),mAe.forEach(t),Kfo=i(Z),xh=n(Z,"LI",{});var gAe=s(xh);Bne=n(gAe,"STRONG",{});var hKr=s(Bne);Zfo=r(hKr,"swin"),hKr.forEach(t),emo=r(gAe," \u2014 "),nI=n(gAe,"A",{href:!0});var pKr=s(nI);omo=r(pKr,"ViTFeatureExtractor"),pKr.forEach(t),rmo=r(gAe," (Swin model)"),gAe.forEach(t),tmo=i(Z),$h=n(Z,"LI",{});var hAe=s($h);Ine=n(hAe,"STRONG",{});var uKr=s(Ine);amo=r(uKr,"van"),uKr.forEach(t),nmo=r(hAe," \u2014 "),sI=n(hAe,"A",{href:!0});var _Kr=s(sI);smo=r(_Kr,"ConvNextFeatureExtractor"),_Kr.forEach(t),lmo=r(hAe," (VAN model)"),hAe.forEach(t),imo=i(Z),kh=n(Z,"LI",{});var pAe=s(kh);qne=n(pAe,"STRONG",{});var bKr=s(qne);dmo=r(bKr,"vit"),bKr.forEach(t),cmo=r(pAe," \u2014 "),lI=n(pAe,"A",{href:!0});var vKr=s(lI);fmo=r(vKr,"ViTFeatureExtractor"),vKr.forEach(t),mmo=r(pAe," (ViT model)"),pAe.forEach(t),gmo=i(Z),Sh=n(Z,"LI",{});var uAe=s(Sh);Nne=n(uAe,"STRONG",{});var FKr=s(Nne);hmo=r(FKr,"vit_mae"),FKr.forEach(t),pmo=r(uAe," \u2014 "),iI=n(uAe,"A",{href:!0});var TKr=s(iI);umo=r(TKr,"ViTFeatureExtractor"),TKr.forEach(t),_mo=r(uAe," (ViTMAE model)"),uAe.forEach(t),bmo=i(Z),Rh=n(Z,"LI",{});var _Ae=s(Rh);jne=n(_Ae,"STRONG",{});var MKr=s(jne);vmo=r(MKr,"wav2vec2"),MKr.forEach(t),Fmo=r(_Ae," \u2014 "),dI=n(_Ae,"A",{href:!0});var EKr=s(dI);Tmo=r(EKr,"Wav2Vec2FeatureExtractor"),EKr.forEach(t),Mmo=r(_Ae," (Wav2Vec2 model)"),_Ae.forEach(t),Emo=i(Z),Ph=n(Z,"LI",{});var bAe=s(Ph);Dne=n(bAe,"STRONG",{});var CKr=s(Dne);Cmo=r(CKr,"wav2vec2-conformer"),CKr.forEach(t),wmo=r(bAe," \u2014 "),cI=n(bAe,"A",{href:!0});var wKr=s(cI);Amo=r(wKr,"Wav2Vec2FeatureExtractor"),wKr.forEach(t),ymo=r(bAe," (Wav2Vec2-Conformer model)"),bAe.forEach(t),Lmo=i(Z),Bh=n(Z,"LI",{});var vAe=s(Bh);Gne=n(vAe,"STRONG",{});var AKr=s(Gne);xmo=r(AKr,"yolos"),AKr.forEach(t),$mo=r(vAe," \u2014 "),fI=n(vAe,"A",{href:!0});var yKr=s(fI);kmo=r(yKr,"YolosFeatureExtractor"),yKr.forEach(t),Smo=r(vAe," (YOLOS model)"),vAe.forEach(t),Z.forEach(t),Rmo=i(Zt),T(Ih.$$.fragment,Zt),Pmo=i(Zt),T(qh.$$.fragment,Zt),Zt.forEach(t),Bmo=i(js),Nh=n(js,"DIV",{class:!0});var cDe=s(Nh);T(W6.$$.fragment,cDe),Imo=i(cDe),One=n(cDe,"P",{});var LKr=s(One);qmo=r(LKr,"Register a new feature extractor for this class."),LKr.forEach(t),cDe.forEach(t),js.forEach(t),dNe=i(f),Ei=n(f,"H2",{class:!0});var fDe=s(Ei);jh=n(fDe,"A",{id:!0,class:!0,href:!0});var xKr=s(jh);Vne=n(xKr,"SPAN",{});var $Kr=s(Vne);T(Q6.$$.fragment,$Kr),$Kr.forEach(t),xKr.forEach(t),Nmo=i(fDe),Xne=n(fDe,"SPAN",{});var kKr=s(Xne);jmo=r(kKr,"AutoProcessor"),kKr.forEach(t),fDe.forEach(t),cNe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(H6.$$.fragment,Ds),Dmo=i(Ds),U6=n(Ds,"P",{});var mDe=s(U6);Gmo=r(mDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mI=n(mDe,"A",{href:!0});var SKr=s(mI);Omo=r(SKr,"AutoProcessor.from_pretrained()"),SKr.forEach(t),Vmo=r(mDe," class method."),mDe.forEach(t),Xmo=i(Ds),J6=n(Ds,"P",{});var gDe=s(J6);zmo=r(gDe,"This class cannot be instantiated directly using "),zne=n(gDe,"CODE",{});var RKr=s(zne);Wmo=r(RKr,"__init__()"),RKr.forEach(t),Qmo=r(gDe," (throws an error)."),gDe.forEach(t),Hmo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Y6.$$.fragment,ea),Umo=i(ea),Wne=n(ea,"P",{});var PKr=s(Wne);Jmo=r(PKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PKr.forEach(t),Ymo=i(ea),Ci=n(ea,"P",{});var hZ=s(Ci);Kmo=r(hZ,"The processor class to instantiate is selected based on the "),Qne=n(hZ,"CODE",{});var BKr=s(Qne);Zmo=r(BKr,"model_type"),BKr.forEach(t),ego=r(hZ,` property of the config object (either
passed as an argument or loaded from `),Hne=n(hZ,"CODE",{});var IKr=s(Hne);ogo=r(IKr,"pretrained_model_name_or_path"),IKr.forEach(t),rgo=r(hZ," if possible):"),hZ.forEach(t),tgo=i(ea),he=n(ea,"UL",{});var _e=s(he);Dh=n(_e,"LI",{});var FAe=s(Dh);Une=n(FAe,"STRONG",{});var qKr=s(Une);ago=r(qKr,"clip"),qKr.forEach(t),ngo=r(FAe," \u2014 "),gI=n(FAe,"A",{href:!0});var NKr=s(gI);sgo=r(NKr,"CLIPProcessor"),NKr.forEach(t),lgo=r(FAe," (CLIP model)"),FAe.forEach(t),igo=i(_e),Gh=n(_e,"LI",{});var TAe=s(Gh);Jne=n(TAe,"STRONG",{});var jKr=s(Jne);dgo=r(jKr,"flava"),jKr.forEach(t),cgo=r(TAe," \u2014 "),Yne=n(TAe,"CODE",{});var DKr=s(Yne);fgo=r(DKr,"FLAVAProcessor"),DKr.forEach(t),mgo=r(TAe," (Flava model)"),TAe.forEach(t),ggo=i(_e),Oh=n(_e,"LI",{});var MAe=s(Oh);Kne=n(MAe,"STRONG",{});var GKr=s(Kne);hgo=r(GKr,"layoutlmv2"),GKr.forEach(t),pgo=r(MAe," \u2014 "),hI=n(MAe,"A",{href:!0});var OKr=s(hI);ugo=r(OKr,"LayoutLMv2Processor"),OKr.forEach(t),_go=r(MAe," (LayoutLMv2 model)"),MAe.forEach(t),bgo=i(_e),Vh=n(_e,"LI",{});var EAe=s(Vh);Zne=n(EAe,"STRONG",{});var VKr=s(Zne);vgo=r(VKr,"layoutlmv3"),VKr.forEach(t),Fgo=r(EAe," \u2014 "),pI=n(EAe,"A",{href:!0});var XKr=s(pI);Tgo=r(XKr,"LayoutLMv3Processor"),XKr.forEach(t),Mgo=r(EAe," (LayoutLMv3 model)"),EAe.forEach(t),Ego=i(_e),Xh=n(_e,"LI",{});var CAe=s(Xh);ese=n(CAe,"STRONG",{});var zKr=s(ese);Cgo=r(zKr,"layoutxlm"),zKr.forEach(t),wgo=r(CAe," \u2014 "),uI=n(CAe,"A",{href:!0});var WKr=s(uI);Ago=r(WKr,"LayoutXLMProcessor"),WKr.forEach(t),ygo=r(CAe," (LayoutXLM model)"),CAe.forEach(t),Lgo=i(_e),zh=n(_e,"LI",{});var wAe=s(zh);ose=n(wAe,"STRONG",{});var QKr=s(ose);xgo=r(QKr,"sew"),QKr.forEach(t),$go=r(wAe," \u2014 "),_I=n(wAe,"A",{href:!0});var HKr=s(_I);kgo=r(HKr,"Wav2Vec2Processor"),HKr.forEach(t),Sgo=r(wAe," (SEW model)"),wAe.forEach(t),Rgo=i(_e),Wh=n(_e,"LI",{});var AAe=s(Wh);rse=n(AAe,"STRONG",{});var UKr=s(rse);Pgo=r(UKr,"sew-d"),UKr.forEach(t),Bgo=r(AAe," \u2014 "),bI=n(AAe,"A",{href:!0});var JKr=s(bI);Igo=r(JKr,"Wav2Vec2Processor"),JKr.forEach(t),qgo=r(AAe," (SEW-D model)"),AAe.forEach(t),Ngo=i(_e),Qh=n(_e,"LI",{});var yAe=s(Qh);tse=n(yAe,"STRONG",{});var YKr=s(tse);jgo=r(YKr,"speech_to_text"),YKr.forEach(t),Dgo=r(yAe," \u2014 "),vI=n(yAe,"A",{href:!0});var KKr=s(vI);Ggo=r(KKr,"Speech2TextProcessor"),KKr.forEach(t),Ogo=r(yAe," (Speech2Text model)"),yAe.forEach(t),Vgo=i(_e),Hh=n(_e,"LI",{});var LAe=s(Hh);ase=n(LAe,"STRONG",{});var ZKr=s(ase);Xgo=r(ZKr,"speech_to_text_2"),ZKr.forEach(t),zgo=r(LAe," \u2014 "),FI=n(LAe,"A",{href:!0});var eZr=s(FI);Wgo=r(eZr,"Speech2Text2Processor"),eZr.forEach(t),Qgo=r(LAe," (Speech2Text2 model)"),LAe.forEach(t),Hgo=i(_e),Uh=n(_e,"LI",{});var xAe=s(Uh);nse=n(xAe,"STRONG",{});var oZr=s(nse);Ugo=r(oZr,"trocr"),oZr.forEach(t),Jgo=r(xAe," \u2014 "),TI=n(xAe,"A",{href:!0});var rZr=s(TI);Ygo=r(rZr,"TrOCRProcessor"),rZr.forEach(t),Kgo=r(xAe," (TrOCR model)"),xAe.forEach(t),Zgo=i(_e),Jh=n(_e,"LI",{});var $Ae=s(Jh);sse=n($Ae,"STRONG",{});var tZr=s(sse);eho=r(tZr,"unispeech"),tZr.forEach(t),oho=r($Ae," \u2014 "),MI=n($Ae,"A",{href:!0});var aZr=s(MI);rho=r(aZr,"Wav2Vec2Processor"),aZr.forEach(t),tho=r($Ae," (UniSpeech model)"),$Ae.forEach(t),aho=i(_e),Yh=n(_e,"LI",{});var kAe=s(Yh);lse=n(kAe,"STRONG",{});var nZr=s(lse);nho=r(nZr,"unispeech-sat"),nZr.forEach(t),sho=r(kAe," \u2014 "),EI=n(kAe,"A",{href:!0});var sZr=s(EI);lho=r(sZr,"Wav2Vec2Processor"),sZr.forEach(t),iho=r(kAe," (UniSpeechSat model)"),kAe.forEach(t),dho=i(_e),Kh=n(_e,"LI",{});var SAe=s(Kh);ise=n(SAe,"STRONG",{});var lZr=s(ise);cho=r(lZr,"vilt"),lZr.forEach(t),fho=r(SAe," \u2014 "),CI=n(SAe,"A",{href:!0});var iZr=s(CI);mho=r(iZr,"ViltProcessor"),iZr.forEach(t),gho=r(SAe," (ViLT model)"),SAe.forEach(t),hho=i(_e),Zh=n(_e,"LI",{});var RAe=s(Zh);dse=n(RAe,"STRONG",{});var dZr=s(dse);pho=r(dZr,"vision-text-dual-encoder"),dZr.forEach(t),uho=r(RAe," \u2014 "),wI=n(RAe,"A",{href:!0});var cZr=s(wI);_ho=r(cZr,"VisionTextDualEncoderProcessor"),cZr.forEach(t),bho=r(RAe," (VisionTextDualEncoder model)"),RAe.forEach(t),vho=i(_e),ep=n(_e,"LI",{});var PAe=s(ep);cse=n(PAe,"STRONG",{});var fZr=s(cse);Fho=r(fZr,"wav2vec2"),fZr.forEach(t),Tho=r(PAe," \u2014 "),AI=n(PAe,"A",{href:!0});var mZr=s(AI);Mho=r(mZr,"Wav2Vec2Processor"),mZr.forEach(t),Eho=r(PAe," (Wav2Vec2 model)"),PAe.forEach(t),Cho=i(_e),op=n(_e,"LI",{});var BAe=s(op);fse=n(BAe,"STRONG",{});var gZr=s(fse);who=r(gZr,"wav2vec2-conformer"),gZr.forEach(t),Aho=r(BAe," \u2014 "),yI=n(BAe,"A",{href:!0});var hZr=s(yI);yho=r(hZr,"Wav2Vec2Processor"),hZr.forEach(t),Lho=r(BAe," (Wav2Vec2-Conformer model)"),BAe.forEach(t),xho=i(_e),rp=n(_e,"LI",{});var IAe=s(rp);mse=n(IAe,"STRONG",{});var pZr=s(mse);$ho=r(pZr,"wavlm"),pZr.forEach(t),kho=r(IAe," \u2014 "),LI=n(IAe,"A",{href:!0});var uZr=s(LI);Sho=r(uZr,"Wav2Vec2Processor"),uZr.forEach(t),Rho=r(IAe," (WavLM model)"),IAe.forEach(t),_e.forEach(t),Pho=i(ea),T(tp.$$.fragment,ea),Bho=i(ea),T(ap.$$.fragment,ea),ea.forEach(t),Iho=i(Ds),np=n(Ds,"DIV",{class:!0});var hDe=s(np);T(K6.$$.fragment,hDe),qho=i(hDe),gse=n(hDe,"P",{});var _Zr=s(gse);Nho=r(_Zr,"Register a new processor for this class."),_Zr.forEach(t),hDe.forEach(t),Ds.forEach(t),fNe=i(f),wi=n(f,"H2",{class:!0});var pDe=s(wi);sp=n(pDe,"A",{id:!0,class:!0,href:!0});var bZr=s(sp);hse=n(bZr,"SPAN",{});var vZr=s(hse);T(Z6.$$.fragment,vZr),vZr.forEach(t),bZr.forEach(t),jho=i(pDe),pse=n(pDe,"SPAN",{});var FZr=s(pse);Dho=r(FZr,"AutoModel"),FZr.forEach(t),pDe.forEach(t),mNe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ey.$$.fragment,Gs),Gho=i(Gs),Ai=n(Gs,"P",{});var pZ=s(Ai);Oho=r(pZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xI=n(pZ,"A",{href:!0});var TZr=s(xI);Vho=r(TZr,"from_pretrained()"),TZr.forEach(t),Xho=r(pZ," class method or the "),$I=n(pZ,"A",{href:!0});var MZr=s($I);zho=r(MZr,"from_config()"),MZr.forEach(t),Who=r(pZ,` class
method.`),pZ.forEach(t),Qho=i(Gs),oy=n(Gs,"P",{});var uDe=s(oy);Hho=r(uDe,"This class cannot be instantiated directly using "),use=n(uDe,"CODE",{});var EZr=s(use);Uho=r(EZr,"__init__()"),EZr.forEach(t),Jho=r(uDe," (throws an error)."),uDe.forEach(t),Yho=i(Gs),tt=n(Gs,"DIV",{class:!0});var k0=s(tt);T(ry.$$.fragment,k0),Kho=i(k0),_se=n(k0,"P",{});var CZr=s(_se);Zho=r(CZr,"Instantiates one of the base model classes of the library from a configuration."),CZr.forEach(t),epo=i(k0),yi=n(k0,"P",{});var uZ=s(yi);opo=r(uZ,`Note:
Loading a model from its configuration file does `),bse=n(uZ,"STRONG",{});var wZr=s(bse);rpo=r(wZr,"not"),wZr.forEach(t),tpo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=n(uZ,"A",{href:!0});var AZr=s(kI);apo=r(AZr,"from_pretrained()"),AZr.forEach(t),npo=r(uZ," to load the model weights."),uZ.forEach(t),spo=i(k0),T(lp.$$.fragment,k0),k0.forEach(t),lpo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(ty.$$.fragment,oa),ipo=i(oa),vse=n(oa,"P",{});var yZr=s(vse);dpo=r(yZr,"Instantiate one of the base model classes of the library from a pretrained model."),yZr.forEach(t),cpo=i(oa),La=n(oa,"P",{});var S0=s(La);fpo=r(S0,"The model class to instantiate is selected based on the "),Fse=n(S0,"CODE",{});var LZr=s(Fse);mpo=r(LZr,"model_type"),LZr.forEach(t),gpo=r(S0,` property of the config object (either
passed as an argument or loaded from `),Tse=n(S0,"CODE",{});var xZr=s(Tse);hpo=r(xZr,"pretrained_model_name_or_path"),xZr.forEach(t),ppo=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=n(S0,"CODE",{});var $Zr=s(Mse);upo=r($Zr,"pretrained_model_name_or_path"),$Zr.forEach(t),_po=r(S0,":"),S0.forEach(t),bpo=i(oa),x=n(oa,"UL",{});var $=s(x);ip=n($,"LI",{});var qAe=s(ip);Ese=n(qAe,"STRONG",{});var kZr=s(Ese);vpo=r(kZr,"albert"),kZr.forEach(t),Fpo=r(qAe," \u2014 "),SI=n(qAe,"A",{href:!0});var SZr=s(SI);Tpo=r(SZr,"AlbertModel"),SZr.forEach(t),Mpo=r(qAe," (ALBERT model)"),qAe.forEach(t),Epo=i($),dp=n($,"LI",{});var NAe=s(dp);Cse=n(NAe,"STRONG",{});var RZr=s(Cse);Cpo=r(RZr,"bart"),RZr.forEach(t),wpo=r(NAe," \u2014 "),RI=n(NAe,"A",{href:!0});var PZr=s(RI);Apo=r(PZr,"BartModel"),PZr.forEach(t),ypo=r(NAe," (BART model)"),NAe.forEach(t),Lpo=i($),cp=n($,"LI",{});var jAe=s(cp);wse=n(jAe,"STRONG",{});var BZr=s(wse);xpo=r(BZr,"beit"),BZr.forEach(t),$po=r(jAe," \u2014 "),PI=n(jAe,"A",{href:!0});var IZr=s(PI);kpo=r(IZr,"BeitModel"),IZr.forEach(t),Spo=r(jAe," (BEiT model)"),jAe.forEach(t),Rpo=i($),fp=n($,"LI",{});var DAe=s(fp);Ase=n(DAe,"STRONG",{});var qZr=s(Ase);Ppo=r(qZr,"bert"),qZr.forEach(t),Bpo=r(DAe," \u2014 "),BI=n(DAe,"A",{href:!0});var NZr=s(BI);Ipo=r(NZr,"BertModel"),NZr.forEach(t),qpo=r(DAe," (BERT model)"),DAe.forEach(t),Npo=i($),mp=n($,"LI",{});var GAe=s(mp);yse=n(GAe,"STRONG",{});var jZr=s(yse);jpo=r(jZr,"bert-generation"),jZr.forEach(t),Dpo=r(GAe," \u2014 "),II=n(GAe,"A",{href:!0});var DZr=s(II);Gpo=r(DZr,"BertGenerationEncoder"),DZr.forEach(t),Opo=r(GAe," (Bert Generation model)"),GAe.forEach(t),Vpo=i($),gp=n($,"LI",{});var OAe=s(gp);Lse=n(OAe,"STRONG",{});var GZr=s(Lse);Xpo=r(GZr,"big_bird"),GZr.forEach(t),zpo=r(OAe," \u2014 "),qI=n(OAe,"A",{href:!0});var OZr=s(qI);Wpo=r(OZr,"BigBirdModel"),OZr.forEach(t),Qpo=r(OAe," (BigBird model)"),OAe.forEach(t),Hpo=i($),hp=n($,"LI",{});var VAe=s(hp);xse=n(VAe,"STRONG",{});var VZr=s(xse);Upo=r(VZr,"bigbird_pegasus"),VZr.forEach(t),Jpo=r(VAe," \u2014 "),NI=n(VAe,"A",{href:!0});var XZr=s(NI);Ypo=r(XZr,"BigBirdPegasusModel"),XZr.forEach(t),Kpo=r(VAe," (BigBirdPegasus model)"),VAe.forEach(t),Zpo=i($),pp=n($,"LI",{});var XAe=s(pp);$se=n(XAe,"STRONG",{});var zZr=s($se);euo=r(zZr,"blenderbot"),zZr.forEach(t),ouo=r(XAe," \u2014 "),jI=n(XAe,"A",{href:!0});var WZr=s(jI);ruo=r(WZr,"BlenderbotModel"),WZr.forEach(t),tuo=r(XAe," (Blenderbot model)"),XAe.forEach(t),auo=i($),up=n($,"LI",{});var zAe=s(up);kse=n(zAe,"STRONG",{});var QZr=s(kse);nuo=r(QZr,"blenderbot-small"),QZr.forEach(t),suo=r(zAe," \u2014 "),DI=n(zAe,"A",{href:!0});var HZr=s(DI);luo=r(HZr,"BlenderbotSmallModel"),HZr.forEach(t),iuo=r(zAe," (BlenderbotSmall model)"),zAe.forEach(t),duo=i($),_p=n($,"LI",{});var WAe=s(_p);Sse=n(WAe,"STRONG",{});var UZr=s(Sse);cuo=r(UZr,"camembert"),UZr.forEach(t),fuo=r(WAe," \u2014 "),GI=n(WAe,"A",{href:!0});var JZr=s(GI);muo=r(JZr,"CamembertModel"),JZr.forEach(t),guo=r(WAe," (CamemBERT model)"),WAe.forEach(t),huo=i($),bp=n($,"LI",{});var QAe=s(bp);Rse=n(QAe,"STRONG",{});var YZr=s(Rse);puo=r(YZr,"canine"),YZr.forEach(t),uuo=r(QAe," \u2014 "),OI=n(QAe,"A",{href:!0});var KZr=s(OI);_uo=r(KZr,"CanineModel"),KZr.forEach(t),buo=r(QAe," (Canine model)"),QAe.forEach(t),vuo=i($),vp=n($,"LI",{});var HAe=s(vp);Pse=n(HAe,"STRONG",{});var ZZr=s(Pse);Fuo=r(ZZr,"clip"),ZZr.forEach(t),Tuo=r(HAe," \u2014 "),VI=n(HAe,"A",{href:!0});var eet=s(VI);Muo=r(eet,"CLIPModel"),eet.forEach(t),Euo=r(HAe," (CLIP model)"),HAe.forEach(t),Cuo=i($),Fp=n($,"LI",{});var UAe=s(Fp);Bse=n(UAe,"STRONG",{});var oet=s(Bse);wuo=r(oet,"convbert"),oet.forEach(t),Auo=r(UAe," \u2014 "),XI=n(UAe,"A",{href:!0});var ret=s(XI);yuo=r(ret,"ConvBertModel"),ret.forEach(t),Luo=r(UAe," (ConvBERT model)"),UAe.forEach(t),xuo=i($),Tp=n($,"LI",{});var JAe=s(Tp);Ise=n(JAe,"STRONG",{});var tet=s(Ise);$uo=r(tet,"convnext"),tet.forEach(t),kuo=r(JAe," \u2014 "),zI=n(JAe,"A",{href:!0});var aet=s(zI);Suo=r(aet,"ConvNextModel"),aet.forEach(t),Ruo=r(JAe," (ConvNext model)"),JAe.forEach(t),Puo=i($),Mp=n($,"LI",{});var YAe=s(Mp);qse=n(YAe,"STRONG",{});var net=s(qse);Buo=r(net,"ctrl"),net.forEach(t),Iuo=r(YAe," \u2014 "),WI=n(YAe,"A",{href:!0});var set=s(WI);quo=r(set,"CTRLModel"),set.forEach(t),Nuo=r(YAe," (CTRL model)"),YAe.forEach(t),juo=i($),Ep=n($,"LI",{});var KAe=s(Ep);Nse=n(KAe,"STRONG",{});var iet=s(Nse);Duo=r(iet,"cvt"),iet.forEach(t),Guo=r(KAe," \u2014 "),QI=n(KAe,"A",{href:!0});var det=s(QI);Ouo=r(det,"CvtModel"),det.forEach(t),Vuo=r(KAe," (CvT model)"),KAe.forEach(t),Xuo=i($),Cp=n($,"LI",{});var ZAe=s(Cp);jse=n(ZAe,"STRONG",{});var cet=s(jse);zuo=r(cet,"data2vec-audio"),cet.forEach(t),Wuo=r(ZAe," \u2014 "),HI=n(ZAe,"A",{href:!0});var fet=s(HI);Quo=r(fet,"Data2VecAudioModel"),fet.forEach(t),Huo=r(ZAe," (Data2VecAudio model)"),ZAe.forEach(t),Uuo=i($),wp=n($,"LI",{});var e6e=s(wp);Dse=n(e6e,"STRONG",{});var met=s(Dse);Juo=r(met,"data2vec-text"),met.forEach(t),Yuo=r(e6e," \u2014 "),UI=n(e6e,"A",{href:!0});var get=s(UI);Kuo=r(get,"Data2VecTextModel"),get.forEach(t),Zuo=r(e6e," (Data2VecText model)"),e6e.forEach(t),e_o=i($),Ap=n($,"LI",{});var o6e=s(Ap);Gse=n(o6e,"STRONG",{});var het=s(Gse);o_o=r(het,"data2vec-vision"),het.forEach(t),r_o=r(o6e," \u2014 "),JI=n(o6e,"A",{href:!0});var pet=s(JI);t_o=r(pet,"Data2VecVisionModel"),pet.forEach(t),a_o=r(o6e," (Data2VecVision model)"),o6e.forEach(t),n_o=i($),yp=n($,"LI",{});var r6e=s(yp);Ose=n(r6e,"STRONG",{});var uet=s(Ose);s_o=r(uet,"deberta"),uet.forEach(t),l_o=r(r6e," \u2014 "),YI=n(r6e,"A",{href:!0});var _et=s(YI);i_o=r(_et,"DebertaModel"),_et.forEach(t),d_o=r(r6e," (DeBERTa model)"),r6e.forEach(t),c_o=i($),Lp=n($,"LI",{});var t6e=s(Lp);Vse=n(t6e,"STRONG",{});var bet=s(Vse);f_o=r(bet,"deberta-v2"),bet.forEach(t),m_o=r(t6e," \u2014 "),KI=n(t6e,"A",{href:!0});var vet=s(KI);g_o=r(vet,"DebertaV2Model"),vet.forEach(t),h_o=r(t6e," (DeBERTa-v2 model)"),t6e.forEach(t),p_o=i($),xp=n($,"LI",{});var a6e=s(xp);Xse=n(a6e,"STRONG",{});var Fet=s(Xse);u_o=r(Fet,"decision_transformer"),Fet.forEach(t),__o=r(a6e," \u2014 "),ZI=n(a6e,"A",{href:!0});var Tet=s(ZI);b_o=r(Tet,"DecisionTransformerModel"),Tet.forEach(t),v_o=r(a6e," (Decision Transformer model)"),a6e.forEach(t),F_o=i($),$p=n($,"LI",{});var n6e=s($p);zse=n(n6e,"STRONG",{});var Met=s(zse);T_o=r(Met,"deit"),Met.forEach(t),M_o=r(n6e," \u2014 "),eq=n(n6e,"A",{href:!0});var Eet=s(eq);E_o=r(Eet,"DeiTModel"),Eet.forEach(t),C_o=r(n6e," (DeiT model)"),n6e.forEach(t),w_o=i($),kp=n($,"LI",{});var s6e=s(kp);Wse=n(s6e,"STRONG",{});var Cet=s(Wse);A_o=r(Cet,"detr"),Cet.forEach(t),y_o=r(s6e," \u2014 "),oq=n(s6e,"A",{href:!0});var wet=s(oq);L_o=r(wet,"DetrModel"),wet.forEach(t),x_o=r(s6e," (DETR model)"),s6e.forEach(t),$_o=i($),Sp=n($,"LI",{});var l6e=s(Sp);Qse=n(l6e,"STRONG",{});var Aet=s(Qse);k_o=r(Aet,"distilbert"),Aet.forEach(t),S_o=r(l6e," \u2014 "),rq=n(l6e,"A",{href:!0});var yet=s(rq);R_o=r(yet,"DistilBertModel"),yet.forEach(t),P_o=r(l6e," (DistilBERT model)"),l6e.forEach(t),B_o=i($),Rp=n($,"LI",{});var i6e=s(Rp);Hse=n(i6e,"STRONG",{});var Let=s(Hse);I_o=r(Let,"dpr"),Let.forEach(t),q_o=r(i6e," \u2014 "),tq=n(i6e,"A",{href:!0});var xet=s(tq);N_o=r(xet,"DPRQuestionEncoder"),xet.forEach(t),j_o=r(i6e," (DPR model)"),i6e.forEach(t),D_o=i($),Pp=n($,"LI",{});var d6e=s(Pp);Use=n(d6e,"STRONG",{});var $et=s(Use);G_o=r($et,"dpt"),$et.forEach(t),O_o=r(d6e," \u2014 "),aq=n(d6e,"A",{href:!0});var ket=s(aq);V_o=r(ket,"DPTModel"),ket.forEach(t),X_o=r(d6e," (DPT model)"),d6e.forEach(t),z_o=i($),Bp=n($,"LI",{});var c6e=s(Bp);Jse=n(c6e,"STRONG",{});var Set=s(Jse);W_o=r(Set,"electra"),Set.forEach(t),Q_o=r(c6e," \u2014 "),nq=n(c6e,"A",{href:!0});var Ret=s(nq);H_o=r(Ret,"ElectraModel"),Ret.forEach(t),U_o=r(c6e," (ELECTRA model)"),c6e.forEach(t),J_o=i($),Ip=n($,"LI",{});var f6e=s(Ip);Yse=n(f6e,"STRONG",{});var Pet=s(Yse);Y_o=r(Pet,"flaubert"),Pet.forEach(t),K_o=r(f6e," \u2014 "),sq=n(f6e,"A",{href:!0});var Bet=s(sq);Z_o=r(Bet,"FlaubertModel"),Bet.forEach(t),e1o=r(f6e," (FlauBERT model)"),f6e.forEach(t),o1o=i($),qp=n($,"LI",{});var m6e=s(qp);Kse=n(m6e,"STRONG",{});var Iet=s(Kse);r1o=r(Iet,"flava"),Iet.forEach(t),t1o=r(m6e," \u2014 "),lq=n(m6e,"A",{href:!0});var qet=s(lq);a1o=r(qet,"FlavaModel"),qet.forEach(t),n1o=r(m6e," (Flava model)"),m6e.forEach(t),s1o=i($),Np=n($,"LI",{});var g6e=s(Np);Zse=n(g6e,"STRONG",{});var Net=s(Zse);l1o=r(Net,"fnet"),Net.forEach(t),i1o=r(g6e," \u2014 "),iq=n(g6e,"A",{href:!0});var jet=s(iq);d1o=r(jet,"FNetModel"),jet.forEach(t),c1o=r(g6e," (FNet model)"),g6e.forEach(t),f1o=i($),jp=n($,"LI",{});var h6e=s(jp);ele=n(h6e,"STRONG",{});var Det=s(ele);m1o=r(Det,"fsmt"),Det.forEach(t),g1o=r(h6e," \u2014 "),dq=n(h6e,"A",{href:!0});var Get=s(dq);h1o=r(Get,"FSMTModel"),Get.forEach(t),p1o=r(h6e," (FairSeq Machine-Translation model)"),h6e.forEach(t),u1o=i($),Ps=n($,"LI",{});var O$=s(Ps);ole=n(O$,"STRONG",{});var Oet=s(ole);_1o=r(Oet,"funnel"),Oet.forEach(t),b1o=r(O$," \u2014 "),cq=n(O$,"A",{href:!0});var Vet=s(cq);v1o=r(Vet,"FunnelModel"),Vet.forEach(t),F1o=r(O$," or "),fq=n(O$,"A",{href:!0});var Xet=s(fq);T1o=r(Xet,"FunnelBaseModel"),Xet.forEach(t),M1o=r(O$," (Funnel Transformer model)"),O$.forEach(t),E1o=i($),Dp=n($,"LI",{});var p6e=s(Dp);rle=n(p6e,"STRONG",{});var zet=s(rle);C1o=r(zet,"glpn"),zet.forEach(t),w1o=r(p6e," \u2014 "),mq=n(p6e,"A",{href:!0});var Wet=s(mq);A1o=r(Wet,"GLPNModel"),Wet.forEach(t),y1o=r(p6e," (GLPN model)"),p6e.forEach(t),L1o=i($),Gp=n($,"LI",{});var u6e=s(Gp);tle=n(u6e,"STRONG",{});var Qet=s(tle);x1o=r(Qet,"gpt2"),Qet.forEach(t),$1o=r(u6e," \u2014 "),gq=n(u6e,"A",{href:!0});var Het=s(gq);k1o=r(Het,"GPT2Model"),Het.forEach(t),S1o=r(u6e," (OpenAI GPT-2 model)"),u6e.forEach(t),R1o=i($),Op=n($,"LI",{});var _6e=s(Op);ale=n(_6e,"STRONG",{});var Uet=s(ale);P1o=r(Uet,"gpt_neo"),Uet.forEach(t),B1o=r(_6e," \u2014 "),hq=n(_6e,"A",{href:!0});var Jet=s(hq);I1o=r(Jet,"GPTNeoModel"),Jet.forEach(t),q1o=r(_6e," (GPT Neo model)"),_6e.forEach(t),N1o=i($),Vp=n($,"LI",{});var b6e=s(Vp);nle=n(b6e,"STRONG",{});var Yet=s(nle);j1o=r(Yet,"gpt_neox"),Yet.forEach(t),D1o=r(b6e," \u2014 "),pq=n(b6e,"A",{href:!0});var Ket=s(pq);G1o=r(Ket,"GPTNeoXModel"),Ket.forEach(t),O1o=r(b6e," (GPT NeoX model)"),b6e.forEach(t),V1o=i($),Xp=n($,"LI",{});var v6e=s(Xp);sle=n(v6e,"STRONG",{});var Zet=s(sle);X1o=r(Zet,"gptj"),Zet.forEach(t),z1o=r(v6e," \u2014 "),uq=n(v6e,"A",{href:!0});var eot=s(uq);W1o=r(eot,"GPTJModel"),eot.forEach(t),Q1o=r(v6e," (GPT-J model)"),v6e.forEach(t),H1o=i($),zp=n($,"LI",{});var F6e=s(zp);lle=n(F6e,"STRONG",{});var oot=s(lle);U1o=r(oot,"hubert"),oot.forEach(t),J1o=r(F6e," \u2014 "),_q=n(F6e,"A",{href:!0});var rot=s(_q);Y1o=r(rot,"HubertModel"),rot.forEach(t),K1o=r(F6e," (Hubert model)"),F6e.forEach(t),Z1o=i($),Wp=n($,"LI",{});var T6e=s(Wp);ile=n(T6e,"STRONG",{});var tot=s(ile);e2o=r(tot,"ibert"),tot.forEach(t),o2o=r(T6e," \u2014 "),bq=n(T6e,"A",{href:!0});var aot=s(bq);r2o=r(aot,"IBertModel"),aot.forEach(t),t2o=r(T6e," (I-BERT model)"),T6e.forEach(t),a2o=i($),Qp=n($,"LI",{});var M6e=s(Qp);dle=n(M6e,"STRONG",{});var not=s(dle);n2o=r(not,"imagegpt"),not.forEach(t),s2o=r(M6e," \u2014 "),vq=n(M6e,"A",{href:!0});var sot=s(vq);l2o=r(sot,"ImageGPTModel"),sot.forEach(t),i2o=r(M6e," (ImageGPT model)"),M6e.forEach(t),d2o=i($),Hp=n($,"LI",{});var E6e=s(Hp);cle=n(E6e,"STRONG",{});var lot=s(cle);c2o=r(lot,"layoutlm"),lot.forEach(t),f2o=r(E6e," \u2014 "),Fq=n(E6e,"A",{href:!0});var iot=s(Fq);m2o=r(iot,"LayoutLMModel"),iot.forEach(t),g2o=r(E6e," (LayoutLM model)"),E6e.forEach(t),h2o=i($),Up=n($,"LI",{});var C6e=s(Up);fle=n(C6e,"STRONG",{});var dot=s(fle);p2o=r(dot,"layoutlmv2"),dot.forEach(t),u2o=r(C6e," \u2014 "),Tq=n(C6e,"A",{href:!0});var cot=s(Tq);_2o=r(cot,"LayoutLMv2Model"),cot.forEach(t),b2o=r(C6e," (LayoutLMv2 model)"),C6e.forEach(t),v2o=i($),Jp=n($,"LI",{});var w6e=s(Jp);mle=n(w6e,"STRONG",{});var fot=s(mle);F2o=r(fot,"layoutlmv3"),fot.forEach(t),T2o=r(w6e," \u2014 "),Mq=n(w6e,"A",{href:!0});var mot=s(Mq);M2o=r(mot,"LayoutLMv3Model"),mot.forEach(t),E2o=r(w6e," (LayoutLMv3 model)"),w6e.forEach(t),C2o=i($),Yp=n($,"LI",{});var A6e=s(Yp);gle=n(A6e,"STRONG",{});var got=s(gle);w2o=r(got,"led"),got.forEach(t),A2o=r(A6e," \u2014 "),Eq=n(A6e,"A",{href:!0});var hot=s(Eq);y2o=r(hot,"LEDModel"),hot.forEach(t),L2o=r(A6e," (LED model)"),A6e.forEach(t),x2o=i($),Kp=n($,"LI",{});var y6e=s(Kp);hle=n(y6e,"STRONG",{});var pot=s(hle);$2o=r(pot,"longformer"),pot.forEach(t),k2o=r(y6e," \u2014 "),Cq=n(y6e,"A",{href:!0});var uot=s(Cq);S2o=r(uot,"LongformerModel"),uot.forEach(t),R2o=r(y6e," (Longformer model)"),y6e.forEach(t),P2o=i($),Zp=n($,"LI",{});var L6e=s(Zp);ple=n(L6e,"STRONG",{});var _ot=s(ple);B2o=r(_ot,"luke"),_ot.forEach(t),I2o=r(L6e," \u2014 "),wq=n(L6e,"A",{href:!0});var bot=s(wq);q2o=r(bot,"LukeModel"),bot.forEach(t),N2o=r(L6e," (LUKE model)"),L6e.forEach(t),j2o=i($),eu=n($,"LI",{});var x6e=s(eu);ule=n(x6e,"STRONG",{});var vot=s(ule);D2o=r(vot,"lxmert"),vot.forEach(t),G2o=r(x6e," \u2014 "),Aq=n(x6e,"A",{href:!0});var Fot=s(Aq);O2o=r(Fot,"LxmertModel"),Fot.forEach(t),V2o=r(x6e," (LXMERT model)"),x6e.forEach(t),X2o=i($),ou=n($,"LI",{});var $6e=s(ou);_le=n($6e,"STRONG",{});var Tot=s(_le);z2o=r(Tot,"m2m_100"),Tot.forEach(t),W2o=r($6e," \u2014 "),yq=n($6e,"A",{href:!0});var Mot=s(yq);Q2o=r(Mot,"M2M100Model"),Mot.forEach(t),H2o=r($6e," (M2M100 model)"),$6e.forEach(t),U2o=i($),ru=n($,"LI",{});var k6e=s(ru);ble=n(k6e,"STRONG",{});var Eot=s(ble);J2o=r(Eot,"marian"),Eot.forEach(t),Y2o=r(k6e," \u2014 "),Lq=n(k6e,"A",{href:!0});var Cot=s(Lq);K2o=r(Cot,"MarianModel"),Cot.forEach(t),Z2o=r(k6e," (Marian model)"),k6e.forEach(t),ebo=i($),tu=n($,"LI",{});var S6e=s(tu);vle=n(S6e,"STRONG",{});var wot=s(vle);obo=r(wot,"maskformer"),wot.forEach(t),rbo=r(S6e," \u2014 "),xq=n(S6e,"A",{href:!0});var Aot=s(xq);tbo=r(Aot,"MaskFormerModel"),Aot.forEach(t),abo=r(S6e," (MaskFormer model)"),S6e.forEach(t),nbo=i($),au=n($,"LI",{});var R6e=s(au);Fle=n(R6e,"STRONG",{});var yot=s(Fle);sbo=r(yot,"mbart"),yot.forEach(t),lbo=r(R6e," \u2014 "),$q=n(R6e,"A",{href:!0});var Lot=s($q);ibo=r(Lot,"MBartModel"),Lot.forEach(t),dbo=r(R6e," (mBART model)"),R6e.forEach(t),cbo=i($),nu=n($,"LI",{});var P6e=s(nu);Tle=n(P6e,"STRONG",{});var xot=s(Tle);fbo=r(xot,"megatron-bert"),xot.forEach(t),mbo=r(P6e," \u2014 "),kq=n(P6e,"A",{href:!0});var $ot=s(kq);gbo=r($ot,"MegatronBertModel"),$ot.forEach(t),hbo=r(P6e," (MegatronBert model)"),P6e.forEach(t),pbo=i($),su=n($,"LI",{});var B6e=s(su);Mle=n(B6e,"STRONG",{});var kot=s(Mle);ubo=r(kot,"mobilebert"),kot.forEach(t),_bo=r(B6e," \u2014 "),Sq=n(B6e,"A",{href:!0});var Sot=s(Sq);bbo=r(Sot,"MobileBertModel"),Sot.forEach(t),vbo=r(B6e," (MobileBERT model)"),B6e.forEach(t),Fbo=i($),lu=n($,"LI",{});var I6e=s(lu);Ele=n(I6e,"STRONG",{});var Rot=s(Ele);Tbo=r(Rot,"mpnet"),Rot.forEach(t),Mbo=r(I6e," \u2014 "),Rq=n(I6e,"A",{href:!0});var Pot=s(Rq);Ebo=r(Pot,"MPNetModel"),Pot.forEach(t),Cbo=r(I6e," (MPNet model)"),I6e.forEach(t),wbo=i($),iu=n($,"LI",{});var q6e=s(iu);Cle=n(q6e,"STRONG",{});var Bot=s(Cle);Abo=r(Bot,"mt5"),Bot.forEach(t),ybo=r(q6e," \u2014 "),Pq=n(q6e,"A",{href:!0});var Iot=s(Pq);Lbo=r(Iot,"MT5Model"),Iot.forEach(t),xbo=r(q6e," (mT5 model)"),q6e.forEach(t),$bo=i($),du=n($,"LI",{});var N6e=s(du);wle=n(N6e,"STRONG",{});var qot=s(wle);kbo=r(qot,"nystromformer"),qot.forEach(t),Sbo=r(N6e," \u2014 "),Bq=n(N6e,"A",{href:!0});var Not=s(Bq);Rbo=r(Not,"NystromformerModel"),Not.forEach(t),Pbo=r(N6e," (Nystromformer model)"),N6e.forEach(t),Bbo=i($),cu=n($,"LI",{});var j6e=s(cu);Ale=n(j6e,"STRONG",{});var jot=s(Ale);Ibo=r(jot,"openai-gpt"),jot.forEach(t),qbo=r(j6e," \u2014 "),Iq=n(j6e,"A",{href:!0});var Dot=s(Iq);Nbo=r(Dot,"OpenAIGPTModel"),Dot.forEach(t),jbo=r(j6e," (OpenAI GPT model)"),j6e.forEach(t),Dbo=i($),fu=n($,"LI",{});var D6e=s(fu);yle=n(D6e,"STRONG",{});var Got=s(yle);Gbo=r(Got,"opt"),Got.forEach(t),Obo=r(D6e," \u2014 "),qq=n(D6e,"A",{href:!0});var Oot=s(qq);Vbo=r(Oot,"OPTModel"),Oot.forEach(t),Xbo=r(D6e," (OPT model)"),D6e.forEach(t),zbo=i($),mu=n($,"LI",{});var G6e=s(mu);Lle=n(G6e,"STRONG",{});var Vot=s(Lle);Wbo=r(Vot,"pegasus"),Vot.forEach(t),Qbo=r(G6e," \u2014 "),Nq=n(G6e,"A",{href:!0});var Xot=s(Nq);Hbo=r(Xot,"PegasusModel"),Xot.forEach(t),Ubo=r(G6e," (Pegasus model)"),G6e.forEach(t),Jbo=i($),gu=n($,"LI",{});var O6e=s(gu);xle=n(O6e,"STRONG",{});var zot=s(xle);Ybo=r(zot,"perceiver"),zot.forEach(t),Kbo=r(O6e," \u2014 "),jq=n(O6e,"A",{href:!0});var Wot=s(jq);Zbo=r(Wot,"PerceiverModel"),Wot.forEach(t),evo=r(O6e," (Perceiver model)"),O6e.forEach(t),ovo=i($),hu=n($,"LI",{});var V6e=s(hu);$le=n(V6e,"STRONG",{});var Qot=s($le);rvo=r(Qot,"plbart"),Qot.forEach(t),tvo=r(V6e," \u2014 "),Dq=n(V6e,"A",{href:!0});var Hot=s(Dq);avo=r(Hot,"PLBartModel"),Hot.forEach(t),nvo=r(V6e," (PLBart model)"),V6e.forEach(t),svo=i($),pu=n($,"LI",{});var X6e=s(pu);kle=n(X6e,"STRONG",{});var Uot=s(kle);lvo=r(Uot,"poolformer"),Uot.forEach(t),ivo=r(X6e," \u2014 "),Gq=n(X6e,"A",{href:!0});var Jot=s(Gq);dvo=r(Jot,"PoolFormerModel"),Jot.forEach(t),cvo=r(X6e," (PoolFormer model)"),X6e.forEach(t),fvo=i($),uu=n($,"LI",{});var z6e=s(uu);Sle=n(z6e,"STRONG",{});var Yot=s(Sle);mvo=r(Yot,"prophetnet"),Yot.forEach(t),gvo=r(z6e," \u2014 "),Oq=n(z6e,"A",{href:!0});var Kot=s(Oq);hvo=r(Kot,"ProphetNetModel"),Kot.forEach(t),pvo=r(z6e," (ProphetNet model)"),z6e.forEach(t),uvo=i($),_u=n($,"LI",{});var W6e=s(_u);Rle=n(W6e,"STRONG",{});var Zot=s(Rle);_vo=r(Zot,"qdqbert"),Zot.forEach(t),bvo=r(W6e," \u2014 "),Vq=n(W6e,"A",{href:!0});var ert=s(Vq);vvo=r(ert,"QDQBertModel"),ert.forEach(t),Fvo=r(W6e," (QDQBert model)"),W6e.forEach(t),Tvo=i($),bu=n($,"LI",{});var Q6e=s(bu);Ple=n(Q6e,"STRONG",{});var ort=s(Ple);Mvo=r(ort,"reformer"),ort.forEach(t),Evo=r(Q6e," \u2014 "),Xq=n(Q6e,"A",{href:!0});var rrt=s(Xq);Cvo=r(rrt,"ReformerModel"),rrt.forEach(t),wvo=r(Q6e," (Reformer model)"),Q6e.forEach(t),Avo=i($),vu=n($,"LI",{});var H6e=s(vu);Ble=n(H6e,"STRONG",{});var trt=s(Ble);yvo=r(trt,"regnet"),trt.forEach(t),Lvo=r(H6e," \u2014 "),zq=n(H6e,"A",{href:!0});var art=s(zq);xvo=r(art,"RegNetModel"),art.forEach(t),$vo=r(H6e," (RegNet model)"),H6e.forEach(t),kvo=i($),Fu=n($,"LI",{});var U6e=s(Fu);Ile=n(U6e,"STRONG",{});var nrt=s(Ile);Svo=r(nrt,"rembert"),nrt.forEach(t),Rvo=r(U6e," \u2014 "),Wq=n(U6e,"A",{href:!0});var srt=s(Wq);Pvo=r(srt,"RemBertModel"),srt.forEach(t),Bvo=r(U6e," (RemBERT model)"),U6e.forEach(t),Ivo=i($),Tu=n($,"LI",{});var J6e=s(Tu);qle=n(J6e,"STRONG",{});var lrt=s(qle);qvo=r(lrt,"resnet"),lrt.forEach(t),Nvo=r(J6e," \u2014 "),Qq=n(J6e,"A",{href:!0});var irt=s(Qq);jvo=r(irt,"ResNetModel"),irt.forEach(t),Dvo=r(J6e," (ResNet model)"),J6e.forEach(t),Gvo=i($),Mu=n($,"LI",{});var Y6e=s(Mu);Nle=n(Y6e,"STRONG",{});var drt=s(Nle);Ovo=r(drt,"retribert"),drt.forEach(t),Vvo=r(Y6e," \u2014 "),Hq=n(Y6e,"A",{href:!0});var crt=s(Hq);Xvo=r(crt,"RetriBertModel"),crt.forEach(t),zvo=r(Y6e," (RetriBERT model)"),Y6e.forEach(t),Wvo=i($),Eu=n($,"LI",{});var K6e=s(Eu);jle=n(K6e,"STRONG",{});var frt=s(jle);Qvo=r(frt,"roberta"),frt.forEach(t),Hvo=r(K6e," \u2014 "),Uq=n(K6e,"A",{href:!0});var mrt=s(Uq);Uvo=r(mrt,"RobertaModel"),mrt.forEach(t),Jvo=r(K6e," (RoBERTa model)"),K6e.forEach(t),Yvo=i($),Cu=n($,"LI",{});var Z6e=s(Cu);Dle=n(Z6e,"STRONG",{});var grt=s(Dle);Kvo=r(grt,"roformer"),grt.forEach(t),Zvo=r(Z6e," \u2014 "),Jq=n(Z6e,"A",{href:!0});var hrt=s(Jq);e3o=r(hrt,"RoFormerModel"),hrt.forEach(t),o3o=r(Z6e," (RoFormer model)"),Z6e.forEach(t),r3o=i($),wu=n($,"LI",{});var eye=s(wu);Gle=n(eye,"STRONG",{});var prt=s(Gle);t3o=r(prt,"segformer"),prt.forEach(t),a3o=r(eye," \u2014 "),Yq=n(eye,"A",{href:!0});var urt=s(Yq);n3o=r(urt,"SegformerModel"),urt.forEach(t),s3o=r(eye," (SegFormer model)"),eye.forEach(t),l3o=i($),Au=n($,"LI",{});var oye=s(Au);Ole=n(oye,"STRONG",{});var _rt=s(Ole);i3o=r(_rt,"sew"),_rt.forEach(t),d3o=r(oye," \u2014 "),Kq=n(oye,"A",{href:!0});var brt=s(Kq);c3o=r(brt,"SEWModel"),brt.forEach(t),f3o=r(oye," (SEW model)"),oye.forEach(t),m3o=i($),yu=n($,"LI",{});var rye=s(yu);Vle=n(rye,"STRONG",{});var vrt=s(Vle);g3o=r(vrt,"sew-d"),vrt.forEach(t),h3o=r(rye," \u2014 "),Zq=n(rye,"A",{href:!0});var Frt=s(Zq);p3o=r(Frt,"SEWDModel"),Frt.forEach(t),u3o=r(rye," (SEW-D model)"),rye.forEach(t),_3o=i($),Lu=n($,"LI",{});var tye=s(Lu);Xle=n(tye,"STRONG",{});var Trt=s(Xle);b3o=r(Trt,"speech_to_text"),Trt.forEach(t),v3o=r(tye," \u2014 "),eN=n(tye,"A",{href:!0});var Mrt=s(eN);F3o=r(Mrt,"Speech2TextModel"),Mrt.forEach(t),T3o=r(tye," (Speech2Text model)"),tye.forEach(t),M3o=i($),xu=n($,"LI",{});var aye=s(xu);zle=n(aye,"STRONG",{});var Ert=s(zle);E3o=r(Ert,"splinter"),Ert.forEach(t),C3o=r(aye," \u2014 "),oN=n(aye,"A",{href:!0});var Crt=s(oN);w3o=r(Crt,"SplinterModel"),Crt.forEach(t),A3o=r(aye," (Splinter model)"),aye.forEach(t),y3o=i($),$u=n($,"LI",{});var nye=s($u);Wle=n(nye,"STRONG",{});var wrt=s(Wle);L3o=r(wrt,"squeezebert"),wrt.forEach(t),x3o=r(nye," \u2014 "),rN=n(nye,"A",{href:!0});var Art=s(rN);$3o=r(Art,"SqueezeBertModel"),Art.forEach(t),k3o=r(nye," (SqueezeBERT model)"),nye.forEach(t),S3o=i($),ku=n($,"LI",{});var sye=s(ku);Qle=n(sye,"STRONG",{});var yrt=s(Qle);R3o=r(yrt,"swin"),yrt.forEach(t),P3o=r(sye," \u2014 "),tN=n(sye,"A",{href:!0});var Lrt=s(tN);B3o=r(Lrt,"SwinModel"),Lrt.forEach(t),I3o=r(sye," (Swin model)"),sye.forEach(t),q3o=i($),Su=n($,"LI",{});var lye=s(Su);Hle=n(lye,"STRONG",{});var xrt=s(Hle);N3o=r(xrt,"t5"),xrt.forEach(t),j3o=r(lye," \u2014 "),aN=n(lye,"A",{href:!0});var $rt=s(aN);D3o=r($rt,"T5Model"),$rt.forEach(t),G3o=r(lye," (T5 model)"),lye.forEach(t),O3o=i($),Ru=n($,"LI",{});var iye=s(Ru);Ule=n(iye,"STRONG",{});var krt=s(Ule);V3o=r(krt,"tapas"),krt.forEach(t),X3o=r(iye," \u2014 "),nN=n(iye,"A",{href:!0});var Srt=s(nN);z3o=r(Srt,"TapasModel"),Srt.forEach(t),W3o=r(iye," (TAPAS model)"),iye.forEach(t),Q3o=i($),Pu=n($,"LI",{});var dye=s(Pu);Jle=n(dye,"STRONG",{});var Rrt=s(Jle);H3o=r(Rrt,"trajectory_transformer"),Rrt.forEach(t),U3o=r(dye," \u2014 "),sN=n(dye,"A",{href:!0});var Prt=s(sN);J3o=r(Prt,"TrajectoryTransformerModel"),Prt.forEach(t),Y3o=r(dye," (Trajectory Transformer model)"),dye.forEach(t),K3o=i($),Bu=n($,"LI",{});var cye=s(Bu);Yle=n(cye,"STRONG",{});var Brt=s(Yle);Z3o=r(Brt,"transfo-xl"),Brt.forEach(t),eFo=r(cye," \u2014 "),lN=n(cye,"A",{href:!0});var Irt=s(lN);oFo=r(Irt,"TransfoXLModel"),Irt.forEach(t),rFo=r(cye," (Transformer-XL model)"),cye.forEach(t),tFo=i($),Iu=n($,"LI",{});var fye=s(Iu);Kle=n(fye,"STRONG",{});var qrt=s(Kle);aFo=r(qrt,"unispeech"),qrt.forEach(t),nFo=r(fye," \u2014 "),iN=n(fye,"A",{href:!0});var Nrt=s(iN);sFo=r(Nrt,"UniSpeechModel"),Nrt.forEach(t),lFo=r(fye," (UniSpeech model)"),fye.forEach(t),iFo=i($),qu=n($,"LI",{});var mye=s(qu);Zle=n(mye,"STRONG",{});var jrt=s(Zle);dFo=r(jrt,"unispeech-sat"),jrt.forEach(t),cFo=r(mye," \u2014 "),dN=n(mye,"A",{href:!0});var Drt=s(dN);fFo=r(Drt,"UniSpeechSatModel"),Drt.forEach(t),mFo=r(mye," (UniSpeechSat model)"),mye.forEach(t),gFo=i($),Nu=n($,"LI",{});var gye=s(Nu);eie=n(gye,"STRONG",{});var Grt=s(eie);hFo=r(Grt,"van"),Grt.forEach(t),pFo=r(gye," \u2014 "),cN=n(gye,"A",{href:!0});var Ort=s(cN);uFo=r(Ort,"VanModel"),Ort.forEach(t),_Fo=r(gye," (VAN model)"),gye.forEach(t),bFo=i($),ju=n($,"LI",{});var hye=s(ju);oie=n(hye,"STRONG",{});var Vrt=s(oie);vFo=r(Vrt,"vilt"),Vrt.forEach(t),FFo=r(hye," \u2014 "),fN=n(hye,"A",{href:!0});var Xrt=s(fN);TFo=r(Xrt,"ViltModel"),Xrt.forEach(t),MFo=r(hye," (ViLT model)"),hye.forEach(t),EFo=i($),Du=n($,"LI",{});var pye=s(Du);rie=n(pye,"STRONG",{});var zrt=s(rie);CFo=r(zrt,"vision-text-dual-encoder"),zrt.forEach(t),wFo=r(pye," \u2014 "),mN=n(pye,"A",{href:!0});var Wrt=s(mN);AFo=r(Wrt,"VisionTextDualEncoderModel"),Wrt.forEach(t),yFo=r(pye," (VisionTextDualEncoder model)"),pye.forEach(t),LFo=i($),Gu=n($,"LI",{});var uye=s(Gu);tie=n(uye,"STRONG",{});var Qrt=s(tie);xFo=r(Qrt,"visual_bert"),Qrt.forEach(t),$Fo=r(uye," \u2014 "),gN=n(uye,"A",{href:!0});var Hrt=s(gN);kFo=r(Hrt,"VisualBertModel"),Hrt.forEach(t),SFo=r(uye," (VisualBert model)"),uye.forEach(t),RFo=i($),Ou=n($,"LI",{});var _ye=s(Ou);aie=n(_ye,"STRONG",{});var Urt=s(aie);PFo=r(Urt,"vit"),Urt.forEach(t),BFo=r(_ye," \u2014 "),hN=n(_ye,"A",{href:!0});var Jrt=s(hN);IFo=r(Jrt,"ViTModel"),Jrt.forEach(t),qFo=r(_ye," (ViT model)"),_ye.forEach(t),NFo=i($),Vu=n($,"LI",{});var bye=s(Vu);nie=n(bye,"STRONG",{});var Yrt=s(nie);jFo=r(Yrt,"vit_mae"),Yrt.forEach(t),DFo=r(bye," \u2014 "),pN=n(bye,"A",{href:!0});var Krt=s(pN);GFo=r(Krt,"ViTMAEModel"),Krt.forEach(t),OFo=r(bye," (ViTMAE model)"),bye.forEach(t),VFo=i($),Xu=n($,"LI",{});var vye=s(Xu);sie=n(vye,"STRONG",{});var Zrt=s(sie);XFo=r(Zrt,"wav2vec2"),Zrt.forEach(t),zFo=r(vye," \u2014 "),uN=n(vye,"A",{href:!0});var ett=s(uN);WFo=r(ett,"Wav2Vec2Model"),ett.forEach(t),QFo=r(vye," (Wav2Vec2 model)"),vye.forEach(t),HFo=i($),zu=n($,"LI",{});var Fye=s(zu);lie=n(Fye,"STRONG",{});var ott=s(lie);UFo=r(ott,"wav2vec2-conformer"),ott.forEach(t),JFo=r(Fye," \u2014 "),_N=n(Fye,"A",{href:!0});var rtt=s(_N);YFo=r(rtt,"Wav2Vec2ConformerModel"),rtt.forEach(t),KFo=r(Fye," (Wav2Vec2-Conformer model)"),Fye.forEach(t),ZFo=i($),Wu=n($,"LI",{});var Tye=s(Wu);iie=n(Tye,"STRONG",{});var ttt=s(iie);eTo=r(ttt,"wavlm"),ttt.forEach(t),oTo=r(Tye," \u2014 "),bN=n(Tye,"A",{href:!0});var att=s(bN);rTo=r(att,"WavLMModel"),att.forEach(t),tTo=r(Tye," (WavLM model)"),Tye.forEach(t),aTo=i($),Qu=n($,"LI",{});var Mye=s(Qu);die=n(Mye,"STRONG",{});var ntt=s(die);nTo=r(ntt,"xglm"),ntt.forEach(t),sTo=r(Mye," \u2014 "),vN=n(Mye,"A",{href:!0});var stt=s(vN);lTo=r(stt,"XGLMModel"),stt.forEach(t),iTo=r(Mye," (XGLM model)"),Mye.forEach(t),dTo=i($),Hu=n($,"LI",{});var Eye=s(Hu);cie=n(Eye,"STRONG",{});var ltt=s(cie);cTo=r(ltt,"xlm"),ltt.forEach(t),fTo=r(Eye," \u2014 "),FN=n(Eye,"A",{href:!0});var itt=s(FN);mTo=r(itt,"XLMModel"),itt.forEach(t),gTo=r(Eye," (XLM model)"),Eye.forEach(t),hTo=i($),Uu=n($,"LI",{});var Cye=s(Uu);fie=n(Cye,"STRONG",{});var dtt=s(fie);pTo=r(dtt,"xlm-prophetnet"),dtt.forEach(t),uTo=r(Cye," \u2014 "),TN=n(Cye,"A",{href:!0});var ctt=s(TN);_To=r(ctt,"XLMProphetNetModel"),ctt.forEach(t),bTo=r(Cye," (XLMProphetNet model)"),Cye.forEach(t),vTo=i($),Ju=n($,"LI",{});var wye=s(Ju);mie=n(wye,"STRONG",{});var ftt=s(mie);FTo=r(ftt,"xlm-roberta"),ftt.forEach(t),TTo=r(wye," \u2014 "),MN=n(wye,"A",{href:!0});var mtt=s(MN);MTo=r(mtt,"XLMRobertaModel"),mtt.forEach(t),ETo=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),CTo=i($),Yu=n($,"LI",{});var Aye=s(Yu);gie=n(Aye,"STRONG",{});var gtt=s(gie);wTo=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),ATo=r(Aye," \u2014 "),EN=n(Aye,"A",{href:!0});var htt=s(EN);yTo=r(htt,"XLMRobertaXLModel"),htt.forEach(t),LTo=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),xTo=i($),Ku=n($,"LI",{});var yye=s(Ku);hie=n(yye,"STRONG",{});var ptt=s(hie);$To=r(ptt,"xlnet"),ptt.forEach(t),kTo=r(yye," \u2014 "),CN=n(yye,"A",{href:!0});var utt=s(CN);STo=r(utt,"XLNetModel"),utt.forEach(t),RTo=r(yye," (XLNet model)"),yye.forEach(t),PTo=i($),Zu=n($,"LI",{});var Lye=s(Zu);pie=n(Lye,"STRONG",{});var _tt=s(pie);BTo=r(_tt,"yolos"),_tt.forEach(t),ITo=r(Lye," \u2014 "),wN=n(Lye,"A",{href:!0});var btt=s(wN);qTo=r(btt,"YolosModel"),btt.forEach(t),NTo=r(Lye," (YOLOS model)"),Lye.forEach(t),jTo=i($),e_=n($,"LI",{});var xye=s(e_);uie=n(xye,"STRONG",{});var vtt=s(uie);DTo=r(vtt,"yoso"),vtt.forEach(t),GTo=r(xye," \u2014 "),AN=n(xye,"A",{href:!0});var Ftt=s(AN);OTo=r(Ftt,"YosoModel"),Ftt.forEach(t),VTo=r(xye," (YOSO model)"),xye.forEach(t),$.forEach(t),XTo=i(oa),o_=n(oa,"P",{});var $ye=s(o_);zTo=r($ye,"The model is set in evaluation mode by default using "),_ie=n($ye,"CODE",{});var Ttt=s(_ie);WTo=r(Ttt,"model.eval()"),Ttt.forEach(t),QTo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=n($ye,"CODE",{});var Mtt=s(bie);HTo=r(Mtt,"model.train()"),Mtt.forEach(t),$ye.forEach(t),UTo=i(oa),T(r_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),gNe=i(f),Li=n(f,"H2",{class:!0});var _De=s(Li);t_=n(_De,"A",{id:!0,class:!0,href:!0});var Ett=s(t_);vie=n(Ett,"SPAN",{});var Ctt=s(vie);T(ay.$$.fragment,Ctt),Ctt.forEach(t),Ett.forEach(t),JTo=i(_De),Fie=n(_De,"SPAN",{});var wtt=s(Fie);YTo=r(wtt,"AutoModelForPreTraining"),wtt.forEach(t),_De.forEach(t),hNe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(ny.$$.fragment,Os),KTo=i(Os),xi=n(Os,"P",{});var _Z=s(xi);ZTo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yN=n(_Z,"A",{href:!0});var Att=s(yN);e7o=r(Att,"from_pretrained()"),Att.forEach(t),o7o=r(_Z," class method or the "),LN=n(_Z,"A",{href:!0});var ytt=s(LN);r7o=r(ytt,"from_config()"),ytt.forEach(t),t7o=r(_Z,` class
method.`),_Z.forEach(t),a7o=i(Os),sy=n(Os,"P",{});var bDe=s(sy);n7o=r(bDe,"This class cannot be instantiated directly using "),Tie=n(bDe,"CODE",{});var Ltt=s(Tie);s7o=r(Ltt,"__init__()"),Ltt.forEach(t),l7o=r(bDe," (throws an error)."),bDe.forEach(t),i7o=i(Os),at=n(Os,"DIV",{class:!0});var R0=s(at);T(ly.$$.fragment,R0),d7o=i(R0),Mie=n(R0,"P",{});var xtt=s(Mie);c7o=r(xtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xtt.forEach(t),f7o=i(R0),$i=n(R0,"P",{});var bZ=s($i);m7o=r(bZ,`Note:
Loading a model from its configuration file does `),Eie=n(bZ,"STRONG",{});var $tt=s(Eie);g7o=r($tt,"not"),$tt.forEach(t),h7o=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=n(bZ,"A",{href:!0});var ktt=s(xN);p7o=r(ktt,"from_pretrained()"),ktt.forEach(t),u7o=r(bZ," to load the model weights."),bZ.forEach(t),_7o=i(R0),T(a_.$$.fragment,R0),R0.forEach(t),b7o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(iy.$$.fragment,ra),v7o=i(ra),Cie=n(ra,"P",{});var Stt=s(Cie);F7o=r(Stt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Stt.forEach(t),T7o=i(ra),xa=n(ra,"P",{});var P0=s(xa);M7o=r(P0,"The model class to instantiate is selected based on the "),wie=n(P0,"CODE",{});var Rtt=s(wie);E7o=r(Rtt,"model_type"),Rtt.forEach(t),C7o=r(P0,` property of the config object (either
passed as an argument or loaded from `),Aie=n(P0,"CODE",{});var Ptt=s(Aie);w7o=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),A7o=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(P0,"CODE",{});var Btt=s(yie);y7o=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),L7o=r(P0,":"),P0.forEach(t),x7o=i(ra),G=n(ra,"UL",{});var O=s(G);n_=n(O,"LI",{});var kye=s(n_);Lie=n(kye,"STRONG",{});var Itt=s(Lie);$7o=r(Itt,"albert"),Itt.forEach(t),k7o=r(kye," \u2014 "),$N=n(kye,"A",{href:!0});var qtt=s($N);S7o=r(qtt,"AlbertForPreTraining"),qtt.forEach(t),R7o=r(kye," (ALBERT model)"),kye.forEach(t),P7o=i(O),s_=n(O,"LI",{});var Sye=s(s_);xie=n(Sye,"STRONG",{});var Ntt=s(xie);B7o=r(Ntt,"bart"),Ntt.forEach(t),I7o=r(Sye," \u2014 "),kN=n(Sye,"A",{href:!0});var jtt=s(kN);q7o=r(jtt,"BartForConditionalGeneration"),jtt.forEach(t),N7o=r(Sye," (BART model)"),Sye.forEach(t),j7o=i(O),l_=n(O,"LI",{});var Rye=s(l_);$ie=n(Rye,"STRONG",{});var Dtt=s($ie);D7o=r(Dtt,"bert"),Dtt.forEach(t),G7o=r(Rye," \u2014 "),SN=n(Rye,"A",{href:!0});var Gtt=s(SN);O7o=r(Gtt,"BertForPreTraining"),Gtt.forEach(t),V7o=r(Rye," (BERT model)"),Rye.forEach(t),X7o=i(O),i_=n(O,"LI",{});var Pye=s(i_);kie=n(Pye,"STRONG",{});var Ott=s(kie);z7o=r(Ott,"big_bird"),Ott.forEach(t),W7o=r(Pye," \u2014 "),RN=n(Pye,"A",{href:!0});var Vtt=s(RN);Q7o=r(Vtt,"BigBirdForPreTraining"),Vtt.forEach(t),H7o=r(Pye," (BigBird model)"),Pye.forEach(t),U7o=i(O),d_=n(O,"LI",{});var Bye=s(d_);Sie=n(Bye,"STRONG",{});var Xtt=s(Sie);J7o=r(Xtt,"camembert"),Xtt.forEach(t),Y7o=r(Bye," \u2014 "),PN=n(Bye,"A",{href:!0});var ztt=s(PN);K7o=r(ztt,"CamembertForMaskedLM"),ztt.forEach(t),Z7o=r(Bye," (CamemBERT model)"),Bye.forEach(t),eMo=i(O),c_=n(O,"LI",{});var Iye=s(c_);Rie=n(Iye,"STRONG",{});var Wtt=s(Rie);oMo=r(Wtt,"ctrl"),Wtt.forEach(t),rMo=r(Iye," \u2014 "),BN=n(Iye,"A",{href:!0});var Qtt=s(BN);tMo=r(Qtt,"CTRLLMHeadModel"),Qtt.forEach(t),aMo=r(Iye," (CTRL model)"),Iye.forEach(t),nMo=i(O),f_=n(O,"LI",{});var qye=s(f_);Pie=n(qye,"STRONG",{});var Htt=s(Pie);sMo=r(Htt,"data2vec-text"),Htt.forEach(t),lMo=r(qye," \u2014 "),IN=n(qye,"A",{href:!0});var Utt=s(IN);iMo=r(Utt,"Data2VecTextForMaskedLM"),Utt.forEach(t),dMo=r(qye," (Data2VecText model)"),qye.forEach(t),cMo=i(O),m_=n(O,"LI",{});var Nye=s(m_);Bie=n(Nye,"STRONG",{});var Jtt=s(Bie);fMo=r(Jtt,"deberta"),Jtt.forEach(t),mMo=r(Nye," \u2014 "),qN=n(Nye,"A",{href:!0});var Ytt=s(qN);gMo=r(Ytt,"DebertaForMaskedLM"),Ytt.forEach(t),hMo=r(Nye," (DeBERTa model)"),Nye.forEach(t),pMo=i(O),g_=n(O,"LI",{});var jye=s(g_);Iie=n(jye,"STRONG",{});var Ktt=s(Iie);uMo=r(Ktt,"deberta-v2"),Ktt.forEach(t),_Mo=r(jye," \u2014 "),NN=n(jye,"A",{href:!0});var Ztt=s(NN);bMo=r(Ztt,"DebertaV2ForMaskedLM"),Ztt.forEach(t),vMo=r(jye," (DeBERTa-v2 model)"),jye.forEach(t),FMo=i(O),h_=n(O,"LI",{});var Dye=s(h_);qie=n(Dye,"STRONG",{});var eat=s(qie);TMo=r(eat,"distilbert"),eat.forEach(t),MMo=r(Dye," \u2014 "),jN=n(Dye,"A",{href:!0});var oat=s(jN);EMo=r(oat,"DistilBertForMaskedLM"),oat.forEach(t),CMo=r(Dye," (DistilBERT model)"),Dye.forEach(t),wMo=i(O),p_=n(O,"LI",{});var Gye=s(p_);Nie=n(Gye,"STRONG",{});var rat=s(Nie);AMo=r(rat,"electra"),rat.forEach(t),yMo=r(Gye," \u2014 "),DN=n(Gye,"A",{href:!0});var tat=s(DN);LMo=r(tat,"ElectraForPreTraining"),tat.forEach(t),xMo=r(Gye," (ELECTRA model)"),Gye.forEach(t),$Mo=i(O),u_=n(O,"LI",{});var Oye=s(u_);jie=n(Oye,"STRONG",{});var aat=s(jie);kMo=r(aat,"flaubert"),aat.forEach(t),SMo=r(Oye," \u2014 "),GN=n(Oye,"A",{href:!0});var nat=s(GN);RMo=r(nat,"FlaubertWithLMHeadModel"),nat.forEach(t),PMo=r(Oye," (FlauBERT model)"),Oye.forEach(t),BMo=i(O),__=n(O,"LI",{});var Vye=s(__);Die=n(Vye,"STRONG",{});var sat=s(Die);IMo=r(sat,"flava"),sat.forEach(t),qMo=r(Vye," \u2014 "),ON=n(Vye,"A",{href:!0});var lat=s(ON);NMo=r(lat,"FlavaForPreTraining"),lat.forEach(t),jMo=r(Vye," (Flava model)"),Vye.forEach(t),DMo=i(O),b_=n(O,"LI",{});var Xye=s(b_);Gie=n(Xye,"STRONG",{});var iat=s(Gie);GMo=r(iat,"fnet"),iat.forEach(t),OMo=r(Xye," \u2014 "),VN=n(Xye,"A",{href:!0});var dat=s(VN);VMo=r(dat,"FNetForPreTraining"),dat.forEach(t),XMo=r(Xye," (FNet model)"),Xye.forEach(t),zMo=i(O),v_=n(O,"LI",{});var zye=s(v_);Oie=n(zye,"STRONG",{});var cat=s(Oie);WMo=r(cat,"fsmt"),cat.forEach(t),QMo=r(zye," \u2014 "),XN=n(zye,"A",{href:!0});var fat=s(XN);HMo=r(fat,"FSMTForConditionalGeneration"),fat.forEach(t),UMo=r(zye," (FairSeq Machine-Translation model)"),zye.forEach(t),JMo=i(O),F_=n(O,"LI",{});var Wye=s(F_);Vie=n(Wye,"STRONG",{});var mat=s(Vie);YMo=r(mat,"funnel"),mat.forEach(t),KMo=r(Wye," \u2014 "),zN=n(Wye,"A",{href:!0});var gat=s(zN);ZMo=r(gat,"FunnelForPreTraining"),gat.forEach(t),e4o=r(Wye," (Funnel Transformer model)"),Wye.forEach(t),o4o=i(O),T_=n(O,"LI",{});var Qye=s(T_);Xie=n(Qye,"STRONG",{});var hat=s(Xie);r4o=r(hat,"gpt2"),hat.forEach(t),t4o=r(Qye," \u2014 "),WN=n(Qye,"A",{href:!0});var pat=s(WN);a4o=r(pat,"GPT2LMHeadModel"),pat.forEach(t),n4o=r(Qye," (OpenAI GPT-2 model)"),Qye.forEach(t),s4o=i(O),M_=n(O,"LI",{});var Hye=s(M_);zie=n(Hye,"STRONG",{});var uat=s(zie);l4o=r(uat,"ibert"),uat.forEach(t),i4o=r(Hye," \u2014 "),QN=n(Hye,"A",{href:!0});var _at=s(QN);d4o=r(_at,"IBertForMaskedLM"),_at.forEach(t),c4o=r(Hye," (I-BERT model)"),Hye.forEach(t),f4o=i(O),E_=n(O,"LI",{});var Uye=s(E_);Wie=n(Uye,"STRONG",{});var bat=s(Wie);m4o=r(bat,"layoutlm"),bat.forEach(t),g4o=r(Uye," \u2014 "),HN=n(Uye,"A",{href:!0});var vat=s(HN);h4o=r(vat,"LayoutLMForMaskedLM"),vat.forEach(t),p4o=r(Uye," (LayoutLM model)"),Uye.forEach(t),u4o=i(O),C_=n(O,"LI",{});var Jye=s(C_);Qie=n(Jye,"STRONG",{});var Fat=s(Qie);_4o=r(Fat,"longformer"),Fat.forEach(t),b4o=r(Jye," \u2014 "),UN=n(Jye,"A",{href:!0});var Tat=s(UN);v4o=r(Tat,"LongformerForMaskedLM"),Tat.forEach(t),F4o=r(Jye," (Longformer model)"),Jye.forEach(t),T4o=i(O),w_=n(O,"LI",{});var Yye=s(w_);Hie=n(Yye,"STRONG",{});var Mat=s(Hie);M4o=r(Mat,"lxmert"),Mat.forEach(t),E4o=r(Yye," \u2014 "),JN=n(Yye,"A",{href:!0});var Eat=s(JN);C4o=r(Eat,"LxmertForPreTraining"),Eat.forEach(t),w4o=r(Yye," (LXMERT model)"),Yye.forEach(t),A4o=i(O),A_=n(O,"LI",{});var Kye=s(A_);Uie=n(Kye,"STRONG",{});var Cat=s(Uie);y4o=r(Cat,"megatron-bert"),Cat.forEach(t),L4o=r(Kye," \u2014 "),YN=n(Kye,"A",{href:!0});var wat=s(YN);x4o=r(wat,"MegatronBertForPreTraining"),wat.forEach(t),$4o=r(Kye," (MegatronBert model)"),Kye.forEach(t),k4o=i(O),y_=n(O,"LI",{});var Zye=s(y_);Jie=n(Zye,"STRONG",{});var Aat=s(Jie);S4o=r(Aat,"mobilebert"),Aat.forEach(t),R4o=r(Zye," \u2014 "),KN=n(Zye,"A",{href:!0});var yat=s(KN);P4o=r(yat,"MobileBertForPreTraining"),yat.forEach(t),B4o=r(Zye," (MobileBERT model)"),Zye.forEach(t),I4o=i(O),L_=n(O,"LI",{});var eLe=s(L_);Yie=n(eLe,"STRONG",{});var Lat=s(Yie);q4o=r(Lat,"mpnet"),Lat.forEach(t),N4o=r(eLe," \u2014 "),ZN=n(eLe,"A",{href:!0});var xat=s(ZN);j4o=r(xat,"MPNetForMaskedLM"),xat.forEach(t),D4o=r(eLe," (MPNet model)"),eLe.forEach(t),G4o=i(O),x_=n(O,"LI",{});var oLe=s(x_);Kie=n(oLe,"STRONG",{});var $at=s(Kie);O4o=r($at,"openai-gpt"),$at.forEach(t),V4o=r(oLe," \u2014 "),ej=n(oLe,"A",{href:!0});var kat=s(ej);X4o=r(kat,"OpenAIGPTLMHeadModel"),kat.forEach(t),z4o=r(oLe," (OpenAI GPT model)"),oLe.forEach(t),W4o=i(O),$_=n(O,"LI",{});var rLe=s($_);Zie=n(rLe,"STRONG",{});var Sat=s(Zie);Q4o=r(Sat,"retribert"),Sat.forEach(t),H4o=r(rLe," \u2014 "),oj=n(rLe,"A",{href:!0});var Rat=s(oj);U4o=r(Rat,"RetriBertModel"),Rat.forEach(t),J4o=r(rLe," (RetriBERT model)"),rLe.forEach(t),Y4o=i(O),k_=n(O,"LI",{});var tLe=s(k_);ede=n(tLe,"STRONG",{});var Pat=s(ede);K4o=r(Pat,"roberta"),Pat.forEach(t),Z4o=r(tLe," \u2014 "),rj=n(tLe,"A",{href:!0});var Bat=s(rj);eEo=r(Bat,"RobertaForMaskedLM"),Bat.forEach(t),oEo=r(tLe," (RoBERTa model)"),tLe.forEach(t),rEo=i(O),S_=n(O,"LI",{});var aLe=s(S_);ode=n(aLe,"STRONG",{});var Iat=s(ode);tEo=r(Iat,"splinter"),Iat.forEach(t),aEo=r(aLe," \u2014 "),tj=n(aLe,"A",{href:!0});var qat=s(tj);nEo=r(qat,"SplinterForPreTraining"),qat.forEach(t),sEo=r(aLe," (Splinter model)"),aLe.forEach(t),lEo=i(O),R_=n(O,"LI",{});var nLe=s(R_);rde=n(nLe,"STRONG",{});var Nat=s(rde);iEo=r(Nat,"squeezebert"),Nat.forEach(t),dEo=r(nLe," \u2014 "),aj=n(nLe,"A",{href:!0});var jat=s(aj);cEo=r(jat,"SqueezeBertForMaskedLM"),jat.forEach(t),fEo=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),mEo=i(O),P_=n(O,"LI",{});var sLe=s(P_);tde=n(sLe,"STRONG",{});var Dat=s(tde);gEo=r(Dat,"t5"),Dat.forEach(t),hEo=r(sLe," \u2014 "),nj=n(sLe,"A",{href:!0});var Gat=s(nj);pEo=r(Gat,"T5ForConditionalGeneration"),Gat.forEach(t),uEo=r(sLe," (T5 model)"),sLe.forEach(t),_Eo=i(O),B_=n(O,"LI",{});var lLe=s(B_);ade=n(lLe,"STRONG",{});var Oat=s(ade);bEo=r(Oat,"tapas"),Oat.forEach(t),vEo=r(lLe," \u2014 "),sj=n(lLe,"A",{href:!0});var Vat=s(sj);FEo=r(Vat,"TapasForMaskedLM"),Vat.forEach(t),TEo=r(lLe," (TAPAS model)"),lLe.forEach(t),MEo=i(O),I_=n(O,"LI",{});var iLe=s(I_);nde=n(iLe,"STRONG",{});var Xat=s(nde);EEo=r(Xat,"transfo-xl"),Xat.forEach(t),CEo=r(iLe," \u2014 "),lj=n(iLe,"A",{href:!0});var zat=s(lj);wEo=r(zat,"TransfoXLLMHeadModel"),zat.forEach(t),AEo=r(iLe," (Transformer-XL model)"),iLe.forEach(t),yEo=i(O),q_=n(O,"LI",{});var dLe=s(q_);sde=n(dLe,"STRONG",{});var Wat=s(sde);LEo=r(Wat,"unispeech"),Wat.forEach(t),xEo=r(dLe," \u2014 "),ij=n(dLe,"A",{href:!0});var Qat=s(ij);$Eo=r(Qat,"UniSpeechForPreTraining"),Qat.forEach(t),kEo=r(dLe," (UniSpeech model)"),dLe.forEach(t),SEo=i(O),N_=n(O,"LI",{});var cLe=s(N_);lde=n(cLe,"STRONG",{});var Hat=s(lde);REo=r(Hat,"unispeech-sat"),Hat.forEach(t),PEo=r(cLe," \u2014 "),dj=n(cLe,"A",{href:!0});var Uat=s(dj);BEo=r(Uat,"UniSpeechSatForPreTraining"),Uat.forEach(t),IEo=r(cLe," (UniSpeechSat model)"),cLe.forEach(t),qEo=i(O),j_=n(O,"LI",{});var fLe=s(j_);ide=n(fLe,"STRONG",{});var Jat=s(ide);NEo=r(Jat,"visual_bert"),Jat.forEach(t),jEo=r(fLe," \u2014 "),cj=n(fLe,"A",{href:!0});var Yat=s(cj);DEo=r(Yat,"VisualBertForPreTraining"),Yat.forEach(t),GEo=r(fLe," (VisualBert model)"),fLe.forEach(t),OEo=i(O),D_=n(O,"LI",{});var mLe=s(D_);dde=n(mLe,"STRONG",{});var Kat=s(dde);VEo=r(Kat,"vit_mae"),Kat.forEach(t),XEo=r(mLe," \u2014 "),fj=n(mLe,"A",{href:!0});var Zat=s(fj);zEo=r(Zat,"ViTMAEForPreTraining"),Zat.forEach(t),WEo=r(mLe," (ViTMAE model)"),mLe.forEach(t),QEo=i(O),G_=n(O,"LI",{});var gLe=s(G_);cde=n(gLe,"STRONG",{});var ent=s(cde);HEo=r(ent,"wav2vec2"),ent.forEach(t),UEo=r(gLe," \u2014 "),mj=n(gLe,"A",{href:!0});var ont=s(mj);JEo=r(ont,"Wav2Vec2ForPreTraining"),ont.forEach(t),YEo=r(gLe," (Wav2Vec2 model)"),gLe.forEach(t),KEo=i(O),O_=n(O,"LI",{});var hLe=s(O_);fde=n(hLe,"STRONG",{});var rnt=s(fde);ZEo=r(rnt,"wav2vec2-conformer"),rnt.forEach(t),eCo=r(hLe," \u2014 "),gj=n(hLe,"A",{href:!0});var tnt=s(gj);oCo=r(tnt,"Wav2Vec2ConformerForPreTraining"),tnt.forEach(t),rCo=r(hLe," (Wav2Vec2-Conformer model)"),hLe.forEach(t),tCo=i(O),V_=n(O,"LI",{});var pLe=s(V_);mde=n(pLe,"STRONG",{});var ant=s(mde);aCo=r(ant,"xlm"),ant.forEach(t),nCo=r(pLe," \u2014 "),hj=n(pLe,"A",{href:!0});var nnt=s(hj);sCo=r(nnt,"XLMWithLMHeadModel"),nnt.forEach(t),lCo=r(pLe," (XLM model)"),pLe.forEach(t),iCo=i(O),X_=n(O,"LI",{});var uLe=s(X_);gde=n(uLe,"STRONG",{});var snt=s(gde);dCo=r(snt,"xlm-roberta"),snt.forEach(t),cCo=r(uLe," \u2014 "),pj=n(uLe,"A",{href:!0});var lnt=s(pj);fCo=r(lnt,"XLMRobertaForMaskedLM"),lnt.forEach(t),mCo=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),gCo=i(O),z_=n(O,"LI",{});var _Le=s(z_);hde=n(_Le,"STRONG",{});var int=s(hde);hCo=r(int,"xlm-roberta-xl"),int.forEach(t),pCo=r(_Le," \u2014 "),uj=n(_Le,"A",{href:!0});var dnt=s(uj);uCo=r(dnt,"XLMRobertaXLForMaskedLM"),dnt.forEach(t),_Co=r(_Le," (XLM-RoBERTa-XL model)"),_Le.forEach(t),bCo=i(O),W_=n(O,"LI",{});var bLe=s(W_);pde=n(bLe,"STRONG",{});var cnt=s(pde);vCo=r(cnt,"xlnet"),cnt.forEach(t),FCo=r(bLe," \u2014 "),_j=n(bLe,"A",{href:!0});var fnt=s(_j);TCo=r(fnt,"XLNetLMHeadModel"),fnt.forEach(t),MCo=r(bLe," (XLNet model)"),bLe.forEach(t),O.forEach(t),ECo=i(ra),Q_=n(ra,"P",{});var vLe=s(Q_);CCo=r(vLe,"The model is set in evaluation mode by default using "),ude=n(vLe,"CODE",{});var mnt=s(ude);wCo=r(mnt,"model.eval()"),mnt.forEach(t),ACo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(vLe,"CODE",{});var gnt=s(_de);yCo=r(gnt,"model.train()"),gnt.forEach(t),vLe.forEach(t),LCo=i(ra),T(H_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),pNe=i(f),ki=n(f,"H2",{class:!0});var vDe=s(ki);U_=n(vDe,"A",{id:!0,class:!0,href:!0});var hnt=s(U_);bde=n(hnt,"SPAN",{});var pnt=s(bde);T(dy.$$.fragment,pnt),pnt.forEach(t),hnt.forEach(t),xCo=i(vDe),vde=n(vDe,"SPAN",{});var unt=s(vde);$Co=r(unt,"AutoModelForCausalLM"),unt.forEach(t),vDe.forEach(t),uNe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(cy.$$.fragment,Vs),kCo=i(Vs),Si=n(Vs,"P",{});var vZ=s(Si);SCo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bj=n(vZ,"A",{href:!0});var _nt=s(bj);RCo=r(_nt,"from_pretrained()"),_nt.forEach(t),PCo=r(vZ," class method or the "),vj=n(vZ,"A",{href:!0});var bnt=s(vj);BCo=r(bnt,"from_config()"),bnt.forEach(t),ICo=r(vZ,` class
method.`),vZ.forEach(t),qCo=i(Vs),fy=n(Vs,"P",{});var FDe=s(fy);NCo=r(FDe,"This class cannot be instantiated directly using "),Fde=n(FDe,"CODE",{});var vnt=s(Fde);jCo=r(vnt,"__init__()"),vnt.forEach(t),DCo=r(FDe," (throws an error)."),FDe.forEach(t),GCo=i(Vs),nt=n(Vs,"DIV",{class:!0});var B0=s(nt);T(my.$$.fragment,B0),OCo=i(B0),Tde=n(B0,"P",{});var Fnt=s(Tde);VCo=r(Fnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fnt.forEach(t),XCo=i(B0),Ri=n(B0,"P",{});var FZ=s(Ri);zCo=r(FZ,`Note:
Loading a model from its configuration file does `),Mde=n(FZ,"STRONG",{});var Tnt=s(Mde);WCo=r(Tnt,"not"),Tnt.forEach(t),QCo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(FZ,"A",{href:!0});var Mnt=s(Fj);HCo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),UCo=r(FZ," to load the model weights."),FZ.forEach(t),JCo=i(B0),T(J_.$$.fragment,B0),B0.forEach(t),YCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(gy.$$.fragment,ta),KCo=i(ta),Ede=n(ta,"P",{});var Ent=s(Ede);ZCo=r(Ent,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ent.forEach(t),e5o=i(ta),$a=n(ta,"P",{});var I0=s($a);o5o=r(I0,"The model class to instantiate is selected based on the "),Cde=n(I0,"CODE",{});var Cnt=s(Cde);r5o=r(Cnt,"model_type"),Cnt.forEach(t),t5o=r(I0,` property of the config object (either
passed as an argument or loaded from `),wde=n(I0,"CODE",{});var wnt=s(wde);a5o=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),n5o=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=n(I0,"CODE",{});var Ant=s(Ade);s5o=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),l5o=r(I0,":"),I0.forEach(t),i5o=i(ta),z=n(ta,"UL",{});var W=s(z);Y_=n(W,"LI",{});var FLe=s(Y_);yde=n(FLe,"STRONG",{});var ynt=s(yde);d5o=r(ynt,"bart"),ynt.forEach(t),c5o=r(FLe," \u2014 "),Tj=n(FLe,"A",{href:!0});var Lnt=s(Tj);f5o=r(Lnt,"BartForCausalLM"),Lnt.forEach(t),m5o=r(FLe," (BART model)"),FLe.forEach(t),g5o=i(W),K_=n(W,"LI",{});var TLe=s(K_);Lde=n(TLe,"STRONG",{});var xnt=s(Lde);h5o=r(xnt,"bert"),xnt.forEach(t),p5o=r(TLe," \u2014 "),Mj=n(TLe,"A",{href:!0});var $nt=s(Mj);u5o=r($nt,"BertLMHeadModel"),$nt.forEach(t),_5o=r(TLe," (BERT model)"),TLe.forEach(t),b5o=i(W),Z_=n(W,"LI",{});var MLe=s(Z_);xde=n(MLe,"STRONG",{});var knt=s(xde);v5o=r(knt,"bert-generation"),knt.forEach(t),F5o=r(MLe," \u2014 "),Ej=n(MLe,"A",{href:!0});var Snt=s(Ej);T5o=r(Snt,"BertGenerationDecoder"),Snt.forEach(t),M5o=r(MLe," (Bert Generation model)"),MLe.forEach(t),E5o=i(W),e1=n(W,"LI",{});var ELe=s(e1);$de=n(ELe,"STRONG",{});var Rnt=s($de);C5o=r(Rnt,"big_bird"),Rnt.forEach(t),w5o=r(ELe," \u2014 "),Cj=n(ELe,"A",{href:!0});var Pnt=s(Cj);A5o=r(Pnt,"BigBirdForCausalLM"),Pnt.forEach(t),y5o=r(ELe," (BigBird model)"),ELe.forEach(t),L5o=i(W),o1=n(W,"LI",{});var CLe=s(o1);kde=n(CLe,"STRONG",{});var Bnt=s(kde);x5o=r(Bnt,"bigbird_pegasus"),Bnt.forEach(t),$5o=r(CLe," \u2014 "),wj=n(CLe,"A",{href:!0});var Int=s(wj);k5o=r(Int,"BigBirdPegasusForCausalLM"),Int.forEach(t),S5o=r(CLe," (BigBirdPegasus model)"),CLe.forEach(t),R5o=i(W),r1=n(W,"LI",{});var wLe=s(r1);Sde=n(wLe,"STRONG",{});var qnt=s(Sde);P5o=r(qnt,"blenderbot"),qnt.forEach(t),B5o=r(wLe," \u2014 "),Aj=n(wLe,"A",{href:!0});var Nnt=s(Aj);I5o=r(Nnt,"BlenderbotForCausalLM"),Nnt.forEach(t),q5o=r(wLe," (Blenderbot model)"),wLe.forEach(t),N5o=i(W),t1=n(W,"LI",{});var ALe=s(t1);Rde=n(ALe,"STRONG",{});var jnt=s(Rde);j5o=r(jnt,"blenderbot-small"),jnt.forEach(t),D5o=r(ALe," \u2014 "),yj=n(ALe,"A",{href:!0});var Dnt=s(yj);G5o=r(Dnt,"BlenderbotSmallForCausalLM"),Dnt.forEach(t),O5o=r(ALe," (BlenderbotSmall model)"),ALe.forEach(t),V5o=i(W),a1=n(W,"LI",{});var yLe=s(a1);Pde=n(yLe,"STRONG",{});var Gnt=s(Pde);X5o=r(Gnt,"camembert"),Gnt.forEach(t),z5o=r(yLe," \u2014 "),Lj=n(yLe,"A",{href:!0});var Ont=s(Lj);W5o=r(Ont,"CamembertForCausalLM"),Ont.forEach(t),Q5o=r(yLe," (CamemBERT model)"),yLe.forEach(t),H5o=i(W),n1=n(W,"LI",{});var LLe=s(n1);Bde=n(LLe,"STRONG",{});var Vnt=s(Bde);U5o=r(Vnt,"ctrl"),Vnt.forEach(t),J5o=r(LLe," \u2014 "),xj=n(LLe,"A",{href:!0});var Xnt=s(xj);Y5o=r(Xnt,"CTRLLMHeadModel"),Xnt.forEach(t),K5o=r(LLe," (CTRL model)"),LLe.forEach(t),Z5o=i(W),s1=n(W,"LI",{});var xLe=s(s1);Ide=n(xLe,"STRONG",{});var znt=s(Ide);ewo=r(znt,"data2vec-text"),znt.forEach(t),owo=r(xLe," \u2014 "),$j=n(xLe,"A",{href:!0});var Wnt=s($j);rwo=r(Wnt,"Data2VecTextForCausalLM"),Wnt.forEach(t),two=r(xLe," (Data2VecText model)"),xLe.forEach(t),awo=i(W),l1=n(W,"LI",{});var $Le=s(l1);qde=n($Le,"STRONG",{});var Qnt=s(qde);nwo=r(Qnt,"electra"),Qnt.forEach(t),swo=r($Le," \u2014 "),kj=n($Le,"A",{href:!0});var Hnt=s(kj);lwo=r(Hnt,"ElectraForCausalLM"),Hnt.forEach(t),iwo=r($Le," (ELECTRA model)"),$Le.forEach(t),dwo=i(W),i1=n(W,"LI",{});var kLe=s(i1);Nde=n(kLe,"STRONG",{});var Unt=s(Nde);cwo=r(Unt,"gpt2"),Unt.forEach(t),fwo=r(kLe," \u2014 "),Sj=n(kLe,"A",{href:!0});var Jnt=s(Sj);mwo=r(Jnt,"GPT2LMHeadModel"),Jnt.forEach(t),gwo=r(kLe," (OpenAI GPT-2 model)"),kLe.forEach(t),hwo=i(W),d1=n(W,"LI",{});var SLe=s(d1);jde=n(SLe,"STRONG",{});var Ynt=s(jde);pwo=r(Ynt,"gpt_neo"),Ynt.forEach(t),uwo=r(SLe," \u2014 "),Rj=n(SLe,"A",{href:!0});var Knt=s(Rj);_wo=r(Knt,"GPTNeoForCausalLM"),Knt.forEach(t),bwo=r(SLe," (GPT Neo model)"),SLe.forEach(t),vwo=i(W),c1=n(W,"LI",{});var RLe=s(c1);Dde=n(RLe,"STRONG",{});var Znt=s(Dde);Fwo=r(Znt,"gpt_neox"),Znt.forEach(t),Two=r(RLe," \u2014 "),Pj=n(RLe,"A",{href:!0});var est=s(Pj);Mwo=r(est,"GPTNeoXForCausalLM"),est.forEach(t),Ewo=r(RLe," (GPT NeoX model)"),RLe.forEach(t),Cwo=i(W),f1=n(W,"LI",{});var PLe=s(f1);Gde=n(PLe,"STRONG",{});var ost=s(Gde);wwo=r(ost,"gptj"),ost.forEach(t),Awo=r(PLe," \u2014 "),Bj=n(PLe,"A",{href:!0});var rst=s(Bj);ywo=r(rst,"GPTJForCausalLM"),rst.forEach(t),Lwo=r(PLe," (GPT-J model)"),PLe.forEach(t),xwo=i(W),m1=n(W,"LI",{});var BLe=s(m1);Ode=n(BLe,"STRONG",{});var tst=s(Ode);$wo=r(tst,"marian"),tst.forEach(t),kwo=r(BLe," \u2014 "),Ij=n(BLe,"A",{href:!0});var ast=s(Ij);Swo=r(ast,"MarianForCausalLM"),ast.forEach(t),Rwo=r(BLe," (Marian model)"),BLe.forEach(t),Pwo=i(W),g1=n(W,"LI",{});var ILe=s(g1);Vde=n(ILe,"STRONG",{});var nst=s(Vde);Bwo=r(nst,"mbart"),nst.forEach(t),Iwo=r(ILe," \u2014 "),qj=n(ILe,"A",{href:!0});var sst=s(qj);qwo=r(sst,"MBartForCausalLM"),sst.forEach(t),Nwo=r(ILe," (mBART model)"),ILe.forEach(t),jwo=i(W),h1=n(W,"LI",{});var qLe=s(h1);Xde=n(qLe,"STRONG",{});var lst=s(Xde);Dwo=r(lst,"megatron-bert"),lst.forEach(t),Gwo=r(qLe," \u2014 "),Nj=n(qLe,"A",{href:!0});var ist=s(Nj);Owo=r(ist,"MegatronBertForCausalLM"),ist.forEach(t),Vwo=r(qLe," (MegatronBert model)"),qLe.forEach(t),Xwo=i(W),p1=n(W,"LI",{});var NLe=s(p1);zde=n(NLe,"STRONG",{});var dst=s(zde);zwo=r(dst,"openai-gpt"),dst.forEach(t),Wwo=r(NLe," \u2014 "),jj=n(NLe,"A",{href:!0});var cst=s(jj);Qwo=r(cst,"OpenAIGPTLMHeadModel"),cst.forEach(t),Hwo=r(NLe," (OpenAI GPT model)"),NLe.forEach(t),Uwo=i(W),u1=n(W,"LI",{});var jLe=s(u1);Wde=n(jLe,"STRONG",{});var fst=s(Wde);Jwo=r(fst,"opt"),fst.forEach(t),Ywo=r(jLe," \u2014 "),Dj=n(jLe,"A",{href:!0});var mst=s(Dj);Kwo=r(mst,"OPTForCausalLM"),mst.forEach(t),Zwo=r(jLe," (OPT model)"),jLe.forEach(t),e0o=i(W),_1=n(W,"LI",{});var DLe=s(_1);Qde=n(DLe,"STRONG",{});var gst=s(Qde);o0o=r(gst,"pegasus"),gst.forEach(t),r0o=r(DLe," \u2014 "),Gj=n(DLe,"A",{href:!0});var hst=s(Gj);t0o=r(hst,"PegasusForCausalLM"),hst.forEach(t),a0o=r(DLe," (Pegasus model)"),DLe.forEach(t),n0o=i(W),b1=n(W,"LI",{});var GLe=s(b1);Hde=n(GLe,"STRONG",{});var pst=s(Hde);s0o=r(pst,"plbart"),pst.forEach(t),l0o=r(GLe," \u2014 "),Oj=n(GLe,"A",{href:!0});var ust=s(Oj);i0o=r(ust,"PLBartForCausalLM"),ust.forEach(t),d0o=r(GLe," (PLBart model)"),GLe.forEach(t),c0o=i(W),v1=n(W,"LI",{});var OLe=s(v1);Ude=n(OLe,"STRONG",{});var _st=s(Ude);f0o=r(_st,"prophetnet"),_st.forEach(t),m0o=r(OLe," \u2014 "),Vj=n(OLe,"A",{href:!0});var bst=s(Vj);g0o=r(bst,"ProphetNetForCausalLM"),bst.forEach(t),h0o=r(OLe," (ProphetNet model)"),OLe.forEach(t),p0o=i(W),F1=n(W,"LI",{});var VLe=s(F1);Jde=n(VLe,"STRONG",{});var vst=s(Jde);u0o=r(vst,"qdqbert"),vst.forEach(t),_0o=r(VLe," \u2014 "),Xj=n(VLe,"A",{href:!0});var Fst=s(Xj);b0o=r(Fst,"QDQBertLMHeadModel"),Fst.forEach(t),v0o=r(VLe," (QDQBert model)"),VLe.forEach(t),F0o=i(W),T1=n(W,"LI",{});var XLe=s(T1);Yde=n(XLe,"STRONG",{});var Tst=s(Yde);T0o=r(Tst,"reformer"),Tst.forEach(t),M0o=r(XLe," \u2014 "),zj=n(XLe,"A",{href:!0});var Mst=s(zj);E0o=r(Mst,"ReformerModelWithLMHead"),Mst.forEach(t),C0o=r(XLe," (Reformer model)"),XLe.forEach(t),w0o=i(W),M1=n(W,"LI",{});var zLe=s(M1);Kde=n(zLe,"STRONG",{});var Est=s(Kde);A0o=r(Est,"rembert"),Est.forEach(t),y0o=r(zLe," \u2014 "),Wj=n(zLe,"A",{href:!0});var Cst=s(Wj);L0o=r(Cst,"RemBertForCausalLM"),Cst.forEach(t),x0o=r(zLe," (RemBERT model)"),zLe.forEach(t),$0o=i(W),E1=n(W,"LI",{});var WLe=s(E1);Zde=n(WLe,"STRONG",{});var wst=s(Zde);k0o=r(wst,"roberta"),wst.forEach(t),S0o=r(WLe," \u2014 "),Qj=n(WLe,"A",{href:!0});var Ast=s(Qj);R0o=r(Ast,"RobertaForCausalLM"),Ast.forEach(t),P0o=r(WLe," (RoBERTa model)"),WLe.forEach(t),B0o=i(W),C1=n(W,"LI",{});var QLe=s(C1);ece=n(QLe,"STRONG",{});var yst=s(ece);I0o=r(yst,"roformer"),yst.forEach(t),q0o=r(QLe," \u2014 "),Hj=n(QLe,"A",{href:!0});var Lst=s(Hj);N0o=r(Lst,"RoFormerForCausalLM"),Lst.forEach(t),j0o=r(QLe," (RoFormer model)"),QLe.forEach(t),D0o=i(W),w1=n(W,"LI",{});var HLe=s(w1);oce=n(HLe,"STRONG",{});var xst=s(oce);G0o=r(xst,"speech_to_text_2"),xst.forEach(t),O0o=r(HLe," \u2014 "),Uj=n(HLe,"A",{href:!0});var $st=s(Uj);V0o=r($st,"Speech2Text2ForCausalLM"),$st.forEach(t),X0o=r(HLe," (Speech2Text2 model)"),HLe.forEach(t),z0o=i(W),A1=n(W,"LI",{});var ULe=s(A1);rce=n(ULe,"STRONG",{});var kst=s(rce);W0o=r(kst,"transfo-xl"),kst.forEach(t),Q0o=r(ULe," \u2014 "),Jj=n(ULe,"A",{href:!0});var Sst=s(Jj);H0o=r(Sst,"TransfoXLLMHeadModel"),Sst.forEach(t),U0o=r(ULe," (Transformer-XL model)"),ULe.forEach(t),J0o=i(W),y1=n(W,"LI",{});var JLe=s(y1);tce=n(JLe,"STRONG",{});var Rst=s(tce);Y0o=r(Rst,"trocr"),Rst.forEach(t),K0o=r(JLe," \u2014 "),Yj=n(JLe,"A",{href:!0});var Pst=s(Yj);Z0o=r(Pst,"TrOCRForCausalLM"),Pst.forEach(t),eAo=r(JLe," (TrOCR model)"),JLe.forEach(t),oAo=i(W),L1=n(W,"LI",{});var YLe=s(L1);ace=n(YLe,"STRONG",{});var Bst=s(ace);rAo=r(Bst,"xglm"),Bst.forEach(t),tAo=r(YLe," \u2014 "),Kj=n(YLe,"A",{href:!0});var Ist=s(Kj);aAo=r(Ist,"XGLMForCausalLM"),Ist.forEach(t),nAo=r(YLe," (XGLM model)"),YLe.forEach(t),sAo=i(W),x1=n(W,"LI",{});var KLe=s(x1);nce=n(KLe,"STRONG",{});var qst=s(nce);lAo=r(qst,"xlm"),qst.forEach(t),iAo=r(KLe," \u2014 "),Zj=n(KLe,"A",{href:!0});var Nst=s(Zj);dAo=r(Nst,"XLMWithLMHeadModel"),Nst.forEach(t),cAo=r(KLe," (XLM model)"),KLe.forEach(t),fAo=i(W),$1=n(W,"LI",{});var ZLe=s($1);sce=n(ZLe,"STRONG",{});var jst=s(sce);mAo=r(jst,"xlm-prophetnet"),jst.forEach(t),gAo=r(ZLe," \u2014 "),eD=n(ZLe,"A",{href:!0});var Dst=s(eD);hAo=r(Dst,"XLMProphetNetForCausalLM"),Dst.forEach(t),pAo=r(ZLe," (XLMProphetNet model)"),ZLe.forEach(t),uAo=i(W),k1=n(W,"LI",{});var e8e=s(k1);lce=n(e8e,"STRONG",{});var Gst=s(lce);_Ao=r(Gst,"xlm-roberta"),Gst.forEach(t),bAo=r(e8e," \u2014 "),oD=n(e8e,"A",{href:!0});var Ost=s(oD);vAo=r(Ost,"XLMRobertaForCausalLM"),Ost.forEach(t),FAo=r(e8e," (XLM-RoBERTa model)"),e8e.forEach(t),TAo=i(W),S1=n(W,"LI",{});var o8e=s(S1);ice=n(o8e,"STRONG",{});var Vst=s(ice);MAo=r(Vst,"xlm-roberta-xl"),Vst.forEach(t),EAo=r(o8e," \u2014 "),rD=n(o8e,"A",{href:!0});var Xst=s(rD);CAo=r(Xst,"XLMRobertaXLForCausalLM"),Xst.forEach(t),wAo=r(o8e," (XLM-RoBERTa-XL model)"),o8e.forEach(t),AAo=i(W),R1=n(W,"LI",{});var r8e=s(R1);dce=n(r8e,"STRONG",{});var zst=s(dce);yAo=r(zst,"xlnet"),zst.forEach(t),LAo=r(r8e," \u2014 "),tD=n(r8e,"A",{href:!0});var Wst=s(tD);xAo=r(Wst,"XLNetLMHeadModel"),Wst.forEach(t),$Ao=r(r8e," (XLNet model)"),r8e.forEach(t),W.forEach(t),kAo=i(ta),P1=n(ta,"P",{});var t8e=s(P1);SAo=r(t8e,"The model is set in evaluation mode by default using "),cce=n(t8e,"CODE",{});var Qst=s(cce);RAo=r(Qst,"model.eval()"),Qst.forEach(t),PAo=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(t8e,"CODE",{});var Hst=s(fce);BAo=r(Hst,"model.train()"),Hst.forEach(t),t8e.forEach(t),IAo=i(ta),T(B1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),_Ne=i(f),Pi=n(f,"H2",{class:!0});var TDe=s(Pi);I1=n(TDe,"A",{id:!0,class:!0,href:!0});var Ust=s(I1);mce=n(Ust,"SPAN",{});var Jst=s(mce);T(hy.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),qAo=i(TDe),gce=n(TDe,"SPAN",{});var Yst=s(gce);NAo=r(Yst,"AutoModelForMaskedLM"),Yst.forEach(t),TDe.forEach(t),bNe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(py.$$.fragment,Xs),jAo=i(Xs),Bi=n(Xs,"P",{});var TZ=s(Bi);DAo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aD=n(TZ,"A",{href:!0});var Kst=s(aD);GAo=r(Kst,"from_pretrained()"),Kst.forEach(t),OAo=r(TZ," class method or the "),nD=n(TZ,"A",{href:!0});var Zst=s(nD);VAo=r(Zst,"from_config()"),Zst.forEach(t),XAo=r(TZ,` class
method.`),TZ.forEach(t),zAo=i(Xs),uy=n(Xs,"P",{});var MDe=s(uy);WAo=r(MDe,"This class cannot be instantiated directly using "),hce=n(MDe,"CODE",{});var elt=s(hce);QAo=r(elt,"__init__()"),elt.forEach(t),HAo=r(MDe," (throws an error)."),MDe.forEach(t),UAo=i(Xs),st=n(Xs,"DIV",{class:!0});var q0=s(st);T(_y.$$.fragment,q0),JAo=i(q0),pce=n(q0,"P",{});var olt=s(pce);YAo=r(olt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),olt.forEach(t),KAo=i(q0),Ii=n(q0,"P",{});var MZ=s(Ii);ZAo=r(MZ,`Note:
Loading a model from its configuration file does `),uce=n(MZ,"STRONG",{});var rlt=s(uce);e6o=r(rlt,"not"),rlt.forEach(t),o6o=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=n(MZ,"A",{href:!0});var tlt=s(sD);r6o=r(tlt,"from_pretrained()"),tlt.forEach(t),t6o=r(MZ," to load the model weights."),MZ.forEach(t),a6o=i(q0),T(q1.$$.fragment,q0),q0.forEach(t),n6o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(by.$$.fragment,aa),s6o=i(aa),_ce=n(aa,"P",{});var alt=s(_ce);l6o=r(alt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),alt.forEach(t),i6o=i(aa),ka=n(aa,"P",{});var N0=s(ka);d6o=r(N0,"The model class to instantiate is selected based on the "),bce=n(N0,"CODE",{});var nlt=s(bce);c6o=r(nlt,"model_type"),nlt.forEach(t),f6o=r(N0,` property of the config object (either
passed as an argument or loaded from `),vce=n(N0,"CODE",{});var slt=s(vce);m6o=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),g6o=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(N0,"CODE",{});var llt=s(Fce);h6o=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),p6o=r(N0,":"),N0.forEach(t),u6o=i(aa),Q=n(aa,"UL",{});var U=s(Q);N1=n(U,"LI",{});var a8e=s(N1);Tce=n(a8e,"STRONG",{});var ilt=s(Tce);_6o=r(ilt,"albert"),ilt.forEach(t),b6o=r(a8e," \u2014 "),lD=n(a8e,"A",{href:!0});var dlt=s(lD);v6o=r(dlt,"AlbertForMaskedLM"),dlt.forEach(t),F6o=r(a8e," (ALBERT model)"),a8e.forEach(t),T6o=i(U),j1=n(U,"LI",{});var n8e=s(j1);Mce=n(n8e,"STRONG",{});var clt=s(Mce);M6o=r(clt,"bart"),clt.forEach(t),E6o=r(n8e," \u2014 "),iD=n(n8e,"A",{href:!0});var flt=s(iD);C6o=r(flt,"BartForConditionalGeneration"),flt.forEach(t),w6o=r(n8e," (BART model)"),n8e.forEach(t),A6o=i(U),D1=n(U,"LI",{});var s8e=s(D1);Ece=n(s8e,"STRONG",{});var mlt=s(Ece);y6o=r(mlt,"bert"),mlt.forEach(t),L6o=r(s8e," \u2014 "),dD=n(s8e,"A",{href:!0});var glt=s(dD);x6o=r(glt,"BertForMaskedLM"),glt.forEach(t),$6o=r(s8e," (BERT model)"),s8e.forEach(t),k6o=i(U),G1=n(U,"LI",{});var l8e=s(G1);Cce=n(l8e,"STRONG",{});var hlt=s(Cce);S6o=r(hlt,"big_bird"),hlt.forEach(t),R6o=r(l8e," \u2014 "),cD=n(l8e,"A",{href:!0});var plt=s(cD);P6o=r(plt,"BigBirdForMaskedLM"),plt.forEach(t),B6o=r(l8e," (BigBird model)"),l8e.forEach(t),I6o=i(U),O1=n(U,"LI",{});var i8e=s(O1);wce=n(i8e,"STRONG",{});var ult=s(wce);q6o=r(ult,"camembert"),ult.forEach(t),N6o=r(i8e," \u2014 "),fD=n(i8e,"A",{href:!0});var _lt=s(fD);j6o=r(_lt,"CamembertForMaskedLM"),_lt.forEach(t),D6o=r(i8e," (CamemBERT model)"),i8e.forEach(t),G6o=i(U),V1=n(U,"LI",{});var d8e=s(V1);Ace=n(d8e,"STRONG",{});var blt=s(Ace);O6o=r(blt,"convbert"),blt.forEach(t),V6o=r(d8e," \u2014 "),mD=n(d8e,"A",{href:!0});var vlt=s(mD);X6o=r(vlt,"ConvBertForMaskedLM"),vlt.forEach(t),z6o=r(d8e," (ConvBERT model)"),d8e.forEach(t),W6o=i(U),X1=n(U,"LI",{});var c8e=s(X1);yce=n(c8e,"STRONG",{});var Flt=s(yce);Q6o=r(Flt,"data2vec-text"),Flt.forEach(t),H6o=r(c8e," \u2014 "),gD=n(c8e,"A",{href:!0});var Tlt=s(gD);U6o=r(Tlt,"Data2VecTextForMaskedLM"),Tlt.forEach(t),J6o=r(c8e," (Data2VecText model)"),c8e.forEach(t),Y6o=i(U),z1=n(U,"LI",{});var f8e=s(z1);Lce=n(f8e,"STRONG",{});var Mlt=s(Lce);K6o=r(Mlt,"deberta"),Mlt.forEach(t),Z6o=r(f8e," \u2014 "),hD=n(f8e,"A",{href:!0});var Elt=s(hD);eyo=r(Elt,"DebertaForMaskedLM"),Elt.forEach(t),oyo=r(f8e," (DeBERTa model)"),f8e.forEach(t),ryo=i(U),W1=n(U,"LI",{});var m8e=s(W1);xce=n(m8e,"STRONG",{});var Clt=s(xce);tyo=r(Clt,"deberta-v2"),Clt.forEach(t),ayo=r(m8e," \u2014 "),pD=n(m8e,"A",{href:!0});var wlt=s(pD);nyo=r(wlt,"DebertaV2ForMaskedLM"),wlt.forEach(t),syo=r(m8e," (DeBERTa-v2 model)"),m8e.forEach(t),lyo=i(U),Q1=n(U,"LI",{});var g8e=s(Q1);$ce=n(g8e,"STRONG",{});var Alt=s($ce);iyo=r(Alt,"distilbert"),Alt.forEach(t),dyo=r(g8e," \u2014 "),uD=n(g8e,"A",{href:!0});var ylt=s(uD);cyo=r(ylt,"DistilBertForMaskedLM"),ylt.forEach(t),fyo=r(g8e," (DistilBERT model)"),g8e.forEach(t),myo=i(U),H1=n(U,"LI",{});var h8e=s(H1);kce=n(h8e,"STRONG",{});var Llt=s(kce);gyo=r(Llt,"electra"),Llt.forEach(t),hyo=r(h8e," \u2014 "),_D=n(h8e,"A",{href:!0});var xlt=s(_D);pyo=r(xlt,"ElectraForMaskedLM"),xlt.forEach(t),uyo=r(h8e," (ELECTRA model)"),h8e.forEach(t),_yo=i(U),U1=n(U,"LI",{});var p8e=s(U1);Sce=n(p8e,"STRONG",{});var $lt=s(Sce);byo=r($lt,"flaubert"),$lt.forEach(t),vyo=r(p8e," \u2014 "),bD=n(p8e,"A",{href:!0});var klt=s(bD);Fyo=r(klt,"FlaubertWithLMHeadModel"),klt.forEach(t),Tyo=r(p8e," (FlauBERT model)"),p8e.forEach(t),Myo=i(U),J1=n(U,"LI",{});var u8e=s(J1);Rce=n(u8e,"STRONG",{});var Slt=s(Rce);Eyo=r(Slt,"fnet"),Slt.forEach(t),Cyo=r(u8e," \u2014 "),vD=n(u8e,"A",{href:!0});var Rlt=s(vD);wyo=r(Rlt,"FNetForMaskedLM"),Rlt.forEach(t),Ayo=r(u8e," (FNet model)"),u8e.forEach(t),yyo=i(U),Y1=n(U,"LI",{});var _8e=s(Y1);Pce=n(_8e,"STRONG",{});var Plt=s(Pce);Lyo=r(Plt,"funnel"),Plt.forEach(t),xyo=r(_8e," \u2014 "),FD=n(_8e,"A",{href:!0});var Blt=s(FD);$yo=r(Blt,"FunnelForMaskedLM"),Blt.forEach(t),kyo=r(_8e," (Funnel Transformer model)"),_8e.forEach(t),Syo=i(U),K1=n(U,"LI",{});var b8e=s(K1);Bce=n(b8e,"STRONG",{});var Ilt=s(Bce);Ryo=r(Ilt,"ibert"),Ilt.forEach(t),Pyo=r(b8e," \u2014 "),TD=n(b8e,"A",{href:!0});var qlt=s(TD);Byo=r(qlt,"IBertForMaskedLM"),qlt.forEach(t),Iyo=r(b8e," (I-BERT model)"),b8e.forEach(t),qyo=i(U),Z1=n(U,"LI",{});var v8e=s(Z1);Ice=n(v8e,"STRONG",{});var Nlt=s(Ice);Nyo=r(Nlt,"layoutlm"),Nlt.forEach(t),jyo=r(v8e," \u2014 "),MD=n(v8e,"A",{href:!0});var jlt=s(MD);Dyo=r(jlt,"LayoutLMForMaskedLM"),jlt.forEach(t),Gyo=r(v8e," (LayoutLM model)"),v8e.forEach(t),Oyo=i(U),e2=n(U,"LI",{});var F8e=s(e2);qce=n(F8e,"STRONG",{});var Dlt=s(qce);Vyo=r(Dlt,"longformer"),Dlt.forEach(t),Xyo=r(F8e," \u2014 "),ED=n(F8e,"A",{href:!0});var Glt=s(ED);zyo=r(Glt,"LongformerForMaskedLM"),Glt.forEach(t),Wyo=r(F8e," (Longformer model)"),F8e.forEach(t),Qyo=i(U),o2=n(U,"LI",{});var T8e=s(o2);Nce=n(T8e,"STRONG",{});var Olt=s(Nce);Hyo=r(Olt,"mbart"),Olt.forEach(t),Uyo=r(T8e," \u2014 "),CD=n(T8e,"A",{href:!0});var Vlt=s(CD);Jyo=r(Vlt,"MBartForConditionalGeneration"),Vlt.forEach(t),Yyo=r(T8e," (mBART model)"),T8e.forEach(t),Kyo=i(U),r2=n(U,"LI",{});var M8e=s(r2);jce=n(M8e,"STRONG",{});var Xlt=s(jce);Zyo=r(Xlt,"megatron-bert"),Xlt.forEach(t),eLo=r(M8e," \u2014 "),wD=n(M8e,"A",{href:!0});var zlt=s(wD);oLo=r(zlt,"MegatronBertForMaskedLM"),zlt.forEach(t),rLo=r(M8e," (MegatronBert model)"),M8e.forEach(t),tLo=i(U),t2=n(U,"LI",{});var E8e=s(t2);Dce=n(E8e,"STRONG",{});var Wlt=s(Dce);aLo=r(Wlt,"mobilebert"),Wlt.forEach(t),nLo=r(E8e," \u2014 "),AD=n(E8e,"A",{href:!0});var Qlt=s(AD);sLo=r(Qlt,"MobileBertForMaskedLM"),Qlt.forEach(t),lLo=r(E8e," (MobileBERT model)"),E8e.forEach(t),iLo=i(U),a2=n(U,"LI",{});var C8e=s(a2);Gce=n(C8e,"STRONG",{});var Hlt=s(Gce);dLo=r(Hlt,"mpnet"),Hlt.forEach(t),cLo=r(C8e," \u2014 "),yD=n(C8e,"A",{href:!0});var Ult=s(yD);fLo=r(Ult,"MPNetForMaskedLM"),Ult.forEach(t),mLo=r(C8e," (MPNet model)"),C8e.forEach(t),gLo=i(U),n2=n(U,"LI",{});var w8e=s(n2);Oce=n(w8e,"STRONG",{});var Jlt=s(Oce);hLo=r(Jlt,"nystromformer"),Jlt.forEach(t),pLo=r(w8e," \u2014 "),LD=n(w8e,"A",{href:!0});var Ylt=s(LD);uLo=r(Ylt,"NystromformerForMaskedLM"),Ylt.forEach(t),_Lo=r(w8e," (Nystromformer model)"),w8e.forEach(t),bLo=i(U),s2=n(U,"LI",{});var A8e=s(s2);Vce=n(A8e,"STRONG",{});var Klt=s(Vce);vLo=r(Klt,"perceiver"),Klt.forEach(t),FLo=r(A8e," \u2014 "),xD=n(A8e,"A",{href:!0});var Zlt=s(xD);TLo=r(Zlt,"PerceiverForMaskedLM"),Zlt.forEach(t),MLo=r(A8e," (Perceiver model)"),A8e.forEach(t),ELo=i(U),l2=n(U,"LI",{});var y8e=s(l2);Xce=n(y8e,"STRONG",{});var eit=s(Xce);CLo=r(eit,"qdqbert"),eit.forEach(t),wLo=r(y8e," \u2014 "),$D=n(y8e,"A",{href:!0});var oit=s($D);ALo=r(oit,"QDQBertForMaskedLM"),oit.forEach(t),yLo=r(y8e," (QDQBert model)"),y8e.forEach(t),LLo=i(U),i2=n(U,"LI",{});var L8e=s(i2);zce=n(L8e,"STRONG",{});var rit=s(zce);xLo=r(rit,"reformer"),rit.forEach(t),$Lo=r(L8e," \u2014 "),kD=n(L8e,"A",{href:!0});var tit=s(kD);kLo=r(tit,"ReformerForMaskedLM"),tit.forEach(t),SLo=r(L8e," (Reformer model)"),L8e.forEach(t),RLo=i(U),d2=n(U,"LI",{});var x8e=s(d2);Wce=n(x8e,"STRONG",{});var ait=s(Wce);PLo=r(ait,"rembert"),ait.forEach(t),BLo=r(x8e," \u2014 "),SD=n(x8e,"A",{href:!0});var nit=s(SD);ILo=r(nit,"RemBertForMaskedLM"),nit.forEach(t),qLo=r(x8e," (RemBERT model)"),x8e.forEach(t),NLo=i(U),c2=n(U,"LI",{});var $8e=s(c2);Qce=n($8e,"STRONG",{});var sit=s(Qce);jLo=r(sit,"roberta"),sit.forEach(t),DLo=r($8e," \u2014 "),RD=n($8e,"A",{href:!0});var lit=s(RD);GLo=r(lit,"RobertaForMaskedLM"),lit.forEach(t),OLo=r($8e," (RoBERTa model)"),$8e.forEach(t),VLo=i(U),f2=n(U,"LI",{});var k8e=s(f2);Hce=n(k8e,"STRONG",{});var iit=s(Hce);XLo=r(iit,"roformer"),iit.forEach(t),zLo=r(k8e," \u2014 "),PD=n(k8e,"A",{href:!0});var dit=s(PD);WLo=r(dit,"RoFormerForMaskedLM"),dit.forEach(t),QLo=r(k8e," (RoFormer model)"),k8e.forEach(t),HLo=i(U),m2=n(U,"LI",{});var S8e=s(m2);Uce=n(S8e,"STRONG",{});var cit=s(Uce);ULo=r(cit,"squeezebert"),cit.forEach(t),JLo=r(S8e," \u2014 "),BD=n(S8e,"A",{href:!0});var fit=s(BD);YLo=r(fit,"SqueezeBertForMaskedLM"),fit.forEach(t),KLo=r(S8e," (SqueezeBERT model)"),S8e.forEach(t),ZLo=i(U),g2=n(U,"LI",{});var R8e=s(g2);Jce=n(R8e,"STRONG",{});var mit=s(Jce);e8o=r(mit,"tapas"),mit.forEach(t),o8o=r(R8e," \u2014 "),ID=n(R8e,"A",{href:!0});var git=s(ID);r8o=r(git,"TapasForMaskedLM"),git.forEach(t),t8o=r(R8e," (TAPAS model)"),R8e.forEach(t),a8o=i(U),h2=n(U,"LI",{});var P8e=s(h2);Yce=n(P8e,"STRONG",{});var hit=s(Yce);n8o=r(hit,"wav2vec2"),hit.forEach(t),s8o=r(P8e," \u2014 "),Kce=n(P8e,"CODE",{});var pit=s(Kce);l8o=r(pit,"Wav2Vec2ForMaskedLM"),pit.forEach(t),i8o=r(P8e," (Wav2Vec2 model)"),P8e.forEach(t),d8o=i(U),p2=n(U,"LI",{});var B8e=s(p2);Zce=n(B8e,"STRONG",{});var uit=s(Zce);c8o=r(uit,"xlm"),uit.forEach(t),f8o=r(B8e," \u2014 "),qD=n(B8e,"A",{href:!0});var _it=s(qD);m8o=r(_it,"XLMWithLMHeadModel"),_it.forEach(t),g8o=r(B8e," (XLM model)"),B8e.forEach(t),h8o=i(U),u2=n(U,"LI",{});var I8e=s(u2);efe=n(I8e,"STRONG",{});var bit=s(efe);p8o=r(bit,"xlm-roberta"),bit.forEach(t),u8o=r(I8e," \u2014 "),ND=n(I8e,"A",{href:!0});var vit=s(ND);_8o=r(vit,"XLMRobertaForMaskedLM"),vit.forEach(t),b8o=r(I8e," (XLM-RoBERTa model)"),I8e.forEach(t),v8o=i(U),_2=n(U,"LI",{});var q8e=s(_2);ofe=n(q8e,"STRONG",{});var Fit=s(ofe);F8o=r(Fit,"xlm-roberta-xl"),Fit.forEach(t),T8o=r(q8e," \u2014 "),jD=n(q8e,"A",{href:!0});var Tit=s(jD);M8o=r(Tit,"XLMRobertaXLForMaskedLM"),Tit.forEach(t),E8o=r(q8e," (XLM-RoBERTa-XL model)"),q8e.forEach(t),C8o=i(U),b2=n(U,"LI",{});var N8e=s(b2);rfe=n(N8e,"STRONG",{});var Mit=s(rfe);w8o=r(Mit,"yoso"),Mit.forEach(t),A8o=r(N8e," \u2014 "),DD=n(N8e,"A",{href:!0});var Eit=s(DD);y8o=r(Eit,"YosoForMaskedLM"),Eit.forEach(t),L8o=r(N8e," (YOSO model)"),N8e.forEach(t),U.forEach(t),x8o=i(aa),v2=n(aa,"P",{});var j8e=s(v2);$8o=r(j8e,"The model is set in evaluation mode by default using "),tfe=n(j8e,"CODE",{});var Cit=s(tfe);k8o=r(Cit,"model.eval()"),Cit.forEach(t),S8o=r(j8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(j8e,"CODE",{});var wit=s(afe);R8o=r(wit,"model.train()"),wit.forEach(t),j8e.forEach(t),P8o=i(aa),T(F2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),vNe=i(f),qi=n(f,"H2",{class:!0});var EDe=s(qi);T2=n(EDe,"A",{id:!0,class:!0,href:!0});var Ait=s(T2);nfe=n(Ait,"SPAN",{});var yit=s(nfe);T(vy.$$.fragment,yit),yit.forEach(t),Ait.forEach(t),B8o=i(EDe),sfe=n(EDe,"SPAN",{});var Lit=s(sfe);I8o=r(Lit,"AutoModelForSeq2SeqLM"),Lit.forEach(t),EDe.forEach(t),FNe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(Fy.$$.fragment,zs),q8o=i(zs),Ni=n(zs,"P",{});var EZ=s(Ni);N8o=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GD=n(EZ,"A",{href:!0});var xit=s(GD);j8o=r(xit,"from_pretrained()"),xit.forEach(t),D8o=r(EZ," class method or the "),OD=n(EZ,"A",{href:!0});var $it=s(OD);G8o=r($it,"from_config()"),$it.forEach(t),O8o=r(EZ,` class
method.`),EZ.forEach(t),V8o=i(zs),Ty=n(zs,"P",{});var CDe=s(Ty);X8o=r(CDe,"This class cannot be instantiated directly using "),lfe=n(CDe,"CODE",{});var kit=s(lfe);z8o=r(kit,"__init__()"),kit.forEach(t),W8o=r(CDe," (throws an error)."),CDe.forEach(t),Q8o=i(zs),lt=n(zs,"DIV",{class:!0});var j0=s(lt);T(My.$$.fragment,j0),H8o=i(j0),ife=n(j0,"P",{});var Sit=s(ife);U8o=r(Sit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sit.forEach(t),J8o=i(j0),ji=n(j0,"P",{});var CZ=s(ji);Y8o=r(CZ,`Note:
Loading a model from its configuration file does `),dfe=n(CZ,"STRONG",{});var Rit=s(dfe);K8o=r(Rit,"not"),Rit.forEach(t),Z8o=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(CZ,"A",{href:!0});var Pit=s(VD);e9o=r(Pit,"from_pretrained()"),Pit.forEach(t),o9o=r(CZ," to load the model weights."),CZ.forEach(t),r9o=i(j0),T(M2.$$.fragment,j0),j0.forEach(t),t9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Ey.$$.fragment,na),a9o=i(na),cfe=n(na,"P",{});var Bit=s(cfe);n9o=r(Bit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bit.forEach(t),s9o=i(na),Sa=n(na,"P",{});var D0=s(Sa);l9o=r(D0,"The model class to instantiate is selected based on the "),ffe=n(D0,"CODE",{});var Iit=s(ffe);i9o=r(Iit,"model_type"),Iit.forEach(t),d9o=r(D0,` property of the config object (either
passed as an argument or loaded from `),mfe=n(D0,"CODE",{});var qit=s(mfe);c9o=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),f9o=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(D0,"CODE",{});var Nit=s(gfe);m9o=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),g9o=r(D0,":"),D0.forEach(t),h9o=i(na),ue=n(na,"UL",{});var ve=s(ue);E2=n(ve,"LI",{});var D8e=s(E2);hfe=n(D8e,"STRONG",{});var jit=s(hfe);p9o=r(jit,"bart"),jit.forEach(t),u9o=r(D8e," \u2014 "),XD=n(D8e,"A",{href:!0});var Dit=s(XD);_9o=r(Dit,"BartForConditionalGeneration"),Dit.forEach(t),b9o=r(D8e," (BART model)"),D8e.forEach(t),v9o=i(ve),C2=n(ve,"LI",{});var G8e=s(C2);pfe=n(G8e,"STRONG",{});var Git=s(pfe);F9o=r(Git,"bigbird_pegasus"),Git.forEach(t),T9o=r(G8e," \u2014 "),zD=n(G8e,"A",{href:!0});var Oit=s(zD);M9o=r(Oit,"BigBirdPegasusForConditionalGeneration"),Oit.forEach(t),E9o=r(G8e," (BigBirdPegasus model)"),G8e.forEach(t),C9o=i(ve),w2=n(ve,"LI",{});var O8e=s(w2);ufe=n(O8e,"STRONG",{});var Vit=s(ufe);w9o=r(Vit,"blenderbot"),Vit.forEach(t),A9o=r(O8e," \u2014 "),WD=n(O8e,"A",{href:!0});var Xit=s(WD);y9o=r(Xit,"BlenderbotForConditionalGeneration"),Xit.forEach(t),L9o=r(O8e," (Blenderbot model)"),O8e.forEach(t),x9o=i(ve),A2=n(ve,"LI",{});var V8e=s(A2);_fe=n(V8e,"STRONG",{});var zit=s(_fe);$9o=r(zit,"blenderbot-small"),zit.forEach(t),k9o=r(V8e," \u2014 "),QD=n(V8e,"A",{href:!0});var Wit=s(QD);S9o=r(Wit,"BlenderbotSmallForConditionalGeneration"),Wit.forEach(t),R9o=r(V8e," (BlenderbotSmall model)"),V8e.forEach(t),P9o=i(ve),y2=n(ve,"LI",{});var X8e=s(y2);bfe=n(X8e,"STRONG",{});var Qit=s(bfe);B9o=r(Qit,"encoder-decoder"),Qit.forEach(t),I9o=r(X8e," \u2014 "),HD=n(X8e,"A",{href:!0});var Hit=s(HD);q9o=r(Hit,"EncoderDecoderModel"),Hit.forEach(t),N9o=r(X8e," (Encoder decoder model)"),X8e.forEach(t),j9o=i(ve),L2=n(ve,"LI",{});var z8e=s(L2);vfe=n(z8e,"STRONG",{});var Uit=s(vfe);D9o=r(Uit,"fsmt"),Uit.forEach(t),G9o=r(z8e," \u2014 "),UD=n(z8e,"A",{href:!0});var Jit=s(UD);O9o=r(Jit,"FSMTForConditionalGeneration"),Jit.forEach(t),V9o=r(z8e," (FairSeq Machine-Translation model)"),z8e.forEach(t),X9o=i(ve),x2=n(ve,"LI",{});var W8e=s(x2);Ffe=n(W8e,"STRONG",{});var Yit=s(Ffe);z9o=r(Yit,"led"),Yit.forEach(t),W9o=r(W8e," \u2014 "),JD=n(W8e,"A",{href:!0});var Kit=s(JD);Q9o=r(Kit,"LEDForConditionalGeneration"),Kit.forEach(t),H9o=r(W8e," (LED model)"),W8e.forEach(t),U9o=i(ve),$2=n(ve,"LI",{});var Q8e=s($2);Tfe=n(Q8e,"STRONG",{});var Zit=s(Tfe);J9o=r(Zit,"m2m_100"),Zit.forEach(t),Y9o=r(Q8e," \u2014 "),YD=n(Q8e,"A",{href:!0});var edt=s(YD);K9o=r(edt,"M2M100ForConditionalGeneration"),edt.forEach(t),Z9o=r(Q8e," (M2M100 model)"),Q8e.forEach(t),exo=i(ve),k2=n(ve,"LI",{});var H8e=s(k2);Mfe=n(H8e,"STRONG",{});var odt=s(Mfe);oxo=r(odt,"marian"),odt.forEach(t),rxo=r(H8e," \u2014 "),KD=n(H8e,"A",{href:!0});var rdt=s(KD);txo=r(rdt,"MarianMTModel"),rdt.forEach(t),axo=r(H8e," (Marian model)"),H8e.forEach(t),nxo=i(ve),S2=n(ve,"LI",{});var U8e=s(S2);Efe=n(U8e,"STRONG",{});var tdt=s(Efe);sxo=r(tdt,"mbart"),tdt.forEach(t),lxo=r(U8e," \u2014 "),ZD=n(U8e,"A",{href:!0});var adt=s(ZD);ixo=r(adt,"MBartForConditionalGeneration"),adt.forEach(t),dxo=r(U8e," (mBART model)"),U8e.forEach(t),cxo=i(ve),R2=n(ve,"LI",{});var J8e=s(R2);Cfe=n(J8e,"STRONG",{});var ndt=s(Cfe);fxo=r(ndt,"mt5"),ndt.forEach(t),mxo=r(J8e," \u2014 "),eG=n(J8e,"A",{href:!0});var sdt=s(eG);gxo=r(sdt,"MT5ForConditionalGeneration"),sdt.forEach(t),hxo=r(J8e," (mT5 model)"),J8e.forEach(t),pxo=i(ve),P2=n(ve,"LI",{});var Y8e=s(P2);wfe=n(Y8e,"STRONG",{});var ldt=s(wfe);uxo=r(ldt,"pegasus"),ldt.forEach(t),_xo=r(Y8e," \u2014 "),oG=n(Y8e,"A",{href:!0});var idt=s(oG);bxo=r(idt,"PegasusForConditionalGeneration"),idt.forEach(t),vxo=r(Y8e," (Pegasus model)"),Y8e.forEach(t),Fxo=i(ve),B2=n(ve,"LI",{});var K8e=s(B2);Afe=n(K8e,"STRONG",{});var ddt=s(Afe);Txo=r(ddt,"plbart"),ddt.forEach(t),Mxo=r(K8e," \u2014 "),rG=n(K8e,"A",{href:!0});var cdt=s(rG);Exo=r(cdt,"PLBartForConditionalGeneration"),cdt.forEach(t),Cxo=r(K8e," (PLBart model)"),K8e.forEach(t),wxo=i(ve),I2=n(ve,"LI",{});var Z8e=s(I2);yfe=n(Z8e,"STRONG",{});var fdt=s(yfe);Axo=r(fdt,"prophetnet"),fdt.forEach(t),yxo=r(Z8e," \u2014 "),tG=n(Z8e,"A",{href:!0});var mdt=s(tG);Lxo=r(mdt,"ProphetNetForConditionalGeneration"),mdt.forEach(t),xxo=r(Z8e," (ProphetNet model)"),Z8e.forEach(t),$xo=i(ve),q2=n(ve,"LI",{});var e9e=s(q2);Lfe=n(e9e,"STRONG",{});var gdt=s(Lfe);kxo=r(gdt,"t5"),gdt.forEach(t),Sxo=r(e9e," \u2014 "),aG=n(e9e,"A",{href:!0});var hdt=s(aG);Rxo=r(hdt,"T5ForConditionalGeneration"),hdt.forEach(t),Pxo=r(e9e," (T5 model)"),e9e.forEach(t),Bxo=i(ve),N2=n(ve,"LI",{});var o9e=s(N2);xfe=n(o9e,"STRONG",{});var pdt=s(xfe);Ixo=r(pdt,"xlm-prophetnet"),pdt.forEach(t),qxo=r(o9e," \u2014 "),nG=n(o9e,"A",{href:!0});var udt=s(nG);Nxo=r(udt,"XLMProphetNetForConditionalGeneration"),udt.forEach(t),jxo=r(o9e," (XLMProphetNet model)"),o9e.forEach(t),ve.forEach(t),Dxo=i(na),j2=n(na,"P",{});var r9e=s(j2);Gxo=r(r9e,"The model is set in evaluation mode by default using "),$fe=n(r9e,"CODE",{});var _dt=s($fe);Oxo=r(_dt,"model.eval()"),_dt.forEach(t),Vxo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(r9e,"CODE",{});var bdt=s(kfe);Xxo=r(bdt,"model.train()"),bdt.forEach(t),r9e.forEach(t),zxo=i(na),T(D2.$$.fragment,na),na.forEach(t),zs.forEach(t),TNe=i(f),Di=n(f,"H2",{class:!0});var wDe=s(Di);G2=n(wDe,"A",{id:!0,class:!0,href:!0});var vdt=s(G2);Sfe=n(vdt,"SPAN",{});var Fdt=s(Sfe);T(Cy.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),Wxo=i(wDe),Rfe=n(wDe,"SPAN",{});var Tdt=s(Rfe);Qxo=r(Tdt,"AutoModelForSequenceClassification"),Tdt.forEach(t),wDe.forEach(t),MNe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(wy.$$.fragment,Ws),Hxo=i(Ws),Gi=n(Ws,"P",{});var wZ=s(Gi);Uxo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sG=n(wZ,"A",{href:!0});var Mdt=s(sG);Jxo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),Yxo=r(wZ," class method or the "),lG=n(wZ,"A",{href:!0});var Edt=s(lG);Kxo=r(Edt,"from_config()"),Edt.forEach(t),Zxo=r(wZ,` class
method.`),wZ.forEach(t),e$o=i(Ws),Ay=n(Ws,"P",{});var ADe=s(Ay);o$o=r(ADe,"This class cannot be instantiated directly using "),Pfe=n(ADe,"CODE",{});var Cdt=s(Pfe);r$o=r(Cdt,"__init__()"),Cdt.forEach(t),t$o=r(ADe," (throws an error)."),ADe.forEach(t),a$o=i(Ws),it=n(Ws,"DIV",{class:!0});var G0=s(it);T(yy.$$.fragment,G0),n$o=i(G0),Bfe=n(G0,"P",{});var wdt=s(Bfe);s$o=r(wdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wdt.forEach(t),l$o=i(G0),Oi=n(G0,"P",{});var AZ=s(Oi);i$o=r(AZ,`Note:
Loading a model from its configuration file does `),Ife=n(AZ,"STRONG",{});var Adt=s(Ife);d$o=r(Adt,"not"),Adt.forEach(t),c$o=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(AZ,"A",{href:!0});var ydt=s(iG);f$o=r(ydt,"from_pretrained()"),ydt.forEach(t),m$o=r(AZ," to load the model weights."),AZ.forEach(t),g$o=i(G0),T(O2.$$.fragment,G0),G0.forEach(t),h$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(Ly.$$.fragment,sa),p$o=i(sa),qfe=n(sa,"P",{});var Ldt=s(qfe);u$o=r(Ldt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ldt.forEach(t),_$o=i(sa),Ra=n(sa,"P",{});var O0=s(Ra);b$o=r(O0,"The model class to instantiate is selected based on the "),Nfe=n(O0,"CODE",{});var xdt=s(Nfe);v$o=r(xdt,"model_type"),xdt.forEach(t),F$o=r(O0,` property of the config object (either
passed as an argument or loaded from `),jfe=n(O0,"CODE",{});var $dt=s(jfe);T$o=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),M$o=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(O0,"CODE",{});var kdt=s(Dfe);E$o=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),C$o=r(O0,":"),O0.forEach(t),w$o=i(sa),q=n(sa,"UL",{});var j=s(q);V2=n(j,"LI",{});var t9e=s(V2);Gfe=n(t9e,"STRONG",{});var Sdt=s(Gfe);A$o=r(Sdt,"albert"),Sdt.forEach(t),y$o=r(t9e," \u2014 "),dG=n(t9e,"A",{href:!0});var Rdt=s(dG);L$o=r(Rdt,"AlbertForSequenceClassification"),Rdt.forEach(t),x$o=r(t9e," (ALBERT model)"),t9e.forEach(t),$$o=i(j),X2=n(j,"LI",{});var a9e=s(X2);Ofe=n(a9e,"STRONG",{});var Pdt=s(Ofe);k$o=r(Pdt,"bart"),Pdt.forEach(t),S$o=r(a9e," \u2014 "),cG=n(a9e,"A",{href:!0});var Bdt=s(cG);R$o=r(Bdt,"BartForSequenceClassification"),Bdt.forEach(t),P$o=r(a9e," (BART model)"),a9e.forEach(t),B$o=i(j),z2=n(j,"LI",{});var n9e=s(z2);Vfe=n(n9e,"STRONG",{});var Idt=s(Vfe);I$o=r(Idt,"bert"),Idt.forEach(t),q$o=r(n9e," \u2014 "),fG=n(n9e,"A",{href:!0});var qdt=s(fG);N$o=r(qdt,"BertForSequenceClassification"),qdt.forEach(t),j$o=r(n9e," (BERT model)"),n9e.forEach(t),D$o=i(j),W2=n(j,"LI",{});var s9e=s(W2);Xfe=n(s9e,"STRONG",{});var Ndt=s(Xfe);G$o=r(Ndt,"big_bird"),Ndt.forEach(t),O$o=r(s9e," \u2014 "),mG=n(s9e,"A",{href:!0});var jdt=s(mG);V$o=r(jdt,"BigBirdForSequenceClassification"),jdt.forEach(t),X$o=r(s9e," (BigBird model)"),s9e.forEach(t),z$o=i(j),Q2=n(j,"LI",{});var l9e=s(Q2);zfe=n(l9e,"STRONG",{});var Ddt=s(zfe);W$o=r(Ddt,"bigbird_pegasus"),Ddt.forEach(t),Q$o=r(l9e," \u2014 "),gG=n(l9e,"A",{href:!0});var Gdt=s(gG);H$o=r(Gdt,"BigBirdPegasusForSequenceClassification"),Gdt.forEach(t),U$o=r(l9e," (BigBirdPegasus model)"),l9e.forEach(t),J$o=i(j),H2=n(j,"LI",{});var i9e=s(H2);Wfe=n(i9e,"STRONG",{});var Odt=s(Wfe);Y$o=r(Odt,"camembert"),Odt.forEach(t),K$o=r(i9e," \u2014 "),hG=n(i9e,"A",{href:!0});var Vdt=s(hG);Z$o=r(Vdt,"CamembertForSequenceClassification"),Vdt.forEach(t),eko=r(i9e," (CamemBERT model)"),i9e.forEach(t),oko=i(j),U2=n(j,"LI",{});var d9e=s(U2);Qfe=n(d9e,"STRONG",{});var Xdt=s(Qfe);rko=r(Xdt,"canine"),Xdt.forEach(t),tko=r(d9e," \u2014 "),pG=n(d9e,"A",{href:!0});var zdt=s(pG);ako=r(zdt,"CanineForSequenceClassification"),zdt.forEach(t),nko=r(d9e," (Canine model)"),d9e.forEach(t),sko=i(j),J2=n(j,"LI",{});var c9e=s(J2);Hfe=n(c9e,"STRONG",{});var Wdt=s(Hfe);lko=r(Wdt,"convbert"),Wdt.forEach(t),iko=r(c9e," \u2014 "),uG=n(c9e,"A",{href:!0});var Qdt=s(uG);dko=r(Qdt,"ConvBertForSequenceClassification"),Qdt.forEach(t),cko=r(c9e," (ConvBERT model)"),c9e.forEach(t),fko=i(j),Y2=n(j,"LI",{});var f9e=s(Y2);Ufe=n(f9e,"STRONG",{});var Hdt=s(Ufe);mko=r(Hdt,"ctrl"),Hdt.forEach(t),gko=r(f9e," \u2014 "),_G=n(f9e,"A",{href:!0});var Udt=s(_G);hko=r(Udt,"CTRLForSequenceClassification"),Udt.forEach(t),pko=r(f9e," (CTRL model)"),f9e.forEach(t),uko=i(j),K2=n(j,"LI",{});var m9e=s(K2);Jfe=n(m9e,"STRONG",{});var Jdt=s(Jfe);_ko=r(Jdt,"data2vec-text"),Jdt.forEach(t),bko=r(m9e," \u2014 "),bG=n(m9e,"A",{href:!0});var Ydt=s(bG);vko=r(Ydt,"Data2VecTextForSequenceClassification"),Ydt.forEach(t),Fko=r(m9e," (Data2VecText model)"),m9e.forEach(t),Tko=i(j),Z2=n(j,"LI",{});var g9e=s(Z2);Yfe=n(g9e,"STRONG",{});var Kdt=s(Yfe);Mko=r(Kdt,"deberta"),Kdt.forEach(t),Eko=r(g9e," \u2014 "),vG=n(g9e,"A",{href:!0});var Zdt=s(vG);Cko=r(Zdt,"DebertaForSequenceClassification"),Zdt.forEach(t),wko=r(g9e," (DeBERTa model)"),g9e.forEach(t),Ako=i(j),eb=n(j,"LI",{});var h9e=s(eb);Kfe=n(h9e,"STRONG",{});var ect=s(Kfe);yko=r(ect,"deberta-v2"),ect.forEach(t),Lko=r(h9e," \u2014 "),FG=n(h9e,"A",{href:!0});var oct=s(FG);xko=r(oct,"DebertaV2ForSequenceClassification"),oct.forEach(t),$ko=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),kko=i(j),ob=n(j,"LI",{});var p9e=s(ob);Zfe=n(p9e,"STRONG",{});var rct=s(Zfe);Sko=r(rct,"distilbert"),rct.forEach(t),Rko=r(p9e," \u2014 "),TG=n(p9e,"A",{href:!0});var tct=s(TG);Pko=r(tct,"DistilBertForSequenceClassification"),tct.forEach(t),Bko=r(p9e," (DistilBERT model)"),p9e.forEach(t),Iko=i(j),rb=n(j,"LI",{});var u9e=s(rb);eme=n(u9e,"STRONG",{});var act=s(eme);qko=r(act,"electra"),act.forEach(t),Nko=r(u9e," \u2014 "),MG=n(u9e,"A",{href:!0});var nct=s(MG);jko=r(nct,"ElectraForSequenceClassification"),nct.forEach(t),Dko=r(u9e," (ELECTRA model)"),u9e.forEach(t),Gko=i(j),tb=n(j,"LI",{});var _9e=s(tb);ome=n(_9e,"STRONG",{});var sct=s(ome);Oko=r(sct,"flaubert"),sct.forEach(t),Vko=r(_9e," \u2014 "),EG=n(_9e,"A",{href:!0});var lct=s(EG);Xko=r(lct,"FlaubertForSequenceClassification"),lct.forEach(t),zko=r(_9e," (FlauBERT model)"),_9e.forEach(t),Wko=i(j),ab=n(j,"LI",{});var b9e=s(ab);rme=n(b9e,"STRONG",{});var ict=s(rme);Qko=r(ict,"fnet"),ict.forEach(t),Hko=r(b9e," \u2014 "),CG=n(b9e,"A",{href:!0});var dct=s(CG);Uko=r(dct,"FNetForSequenceClassification"),dct.forEach(t),Jko=r(b9e," (FNet model)"),b9e.forEach(t),Yko=i(j),nb=n(j,"LI",{});var v9e=s(nb);tme=n(v9e,"STRONG",{});var cct=s(tme);Kko=r(cct,"funnel"),cct.forEach(t),Zko=r(v9e," \u2014 "),wG=n(v9e,"A",{href:!0});var fct=s(wG);eSo=r(fct,"FunnelForSequenceClassification"),fct.forEach(t),oSo=r(v9e," (Funnel Transformer model)"),v9e.forEach(t),rSo=i(j),sb=n(j,"LI",{});var F9e=s(sb);ame=n(F9e,"STRONG",{});var mct=s(ame);tSo=r(mct,"gpt2"),mct.forEach(t),aSo=r(F9e," \u2014 "),AG=n(F9e,"A",{href:!0});var gct=s(AG);nSo=r(gct,"GPT2ForSequenceClassification"),gct.forEach(t),sSo=r(F9e," (OpenAI GPT-2 model)"),F9e.forEach(t),lSo=i(j),lb=n(j,"LI",{});var T9e=s(lb);nme=n(T9e,"STRONG",{});var hct=s(nme);iSo=r(hct,"gpt_neo"),hct.forEach(t),dSo=r(T9e," \u2014 "),yG=n(T9e,"A",{href:!0});var pct=s(yG);cSo=r(pct,"GPTNeoForSequenceClassification"),pct.forEach(t),fSo=r(T9e," (GPT Neo model)"),T9e.forEach(t),mSo=i(j),ib=n(j,"LI",{});var M9e=s(ib);sme=n(M9e,"STRONG",{});var uct=s(sme);gSo=r(uct,"gptj"),uct.forEach(t),hSo=r(M9e," \u2014 "),LG=n(M9e,"A",{href:!0});var _ct=s(LG);pSo=r(_ct,"GPTJForSequenceClassification"),_ct.forEach(t),uSo=r(M9e," (GPT-J model)"),M9e.forEach(t),_So=i(j),db=n(j,"LI",{});var E9e=s(db);lme=n(E9e,"STRONG",{});var bct=s(lme);bSo=r(bct,"ibert"),bct.forEach(t),vSo=r(E9e," \u2014 "),xG=n(E9e,"A",{href:!0});var vct=s(xG);FSo=r(vct,"IBertForSequenceClassification"),vct.forEach(t),TSo=r(E9e," (I-BERT model)"),E9e.forEach(t),MSo=i(j),cb=n(j,"LI",{});var C9e=s(cb);ime=n(C9e,"STRONG",{});var Fct=s(ime);ESo=r(Fct,"layoutlm"),Fct.forEach(t),CSo=r(C9e," \u2014 "),$G=n(C9e,"A",{href:!0});var Tct=s($G);wSo=r(Tct,"LayoutLMForSequenceClassification"),Tct.forEach(t),ASo=r(C9e," (LayoutLM model)"),C9e.forEach(t),ySo=i(j),fb=n(j,"LI",{});var w9e=s(fb);dme=n(w9e,"STRONG",{});var Mct=s(dme);LSo=r(Mct,"layoutlmv2"),Mct.forEach(t),xSo=r(w9e," \u2014 "),kG=n(w9e,"A",{href:!0});var Ect=s(kG);$So=r(Ect,"LayoutLMv2ForSequenceClassification"),Ect.forEach(t),kSo=r(w9e," (LayoutLMv2 model)"),w9e.forEach(t),SSo=i(j),mb=n(j,"LI",{});var A9e=s(mb);cme=n(A9e,"STRONG",{});var Cct=s(cme);RSo=r(Cct,"layoutlmv3"),Cct.forEach(t),PSo=r(A9e," \u2014 "),SG=n(A9e,"A",{href:!0});var wct=s(SG);BSo=r(wct,"LayoutLMv3ForSequenceClassification"),wct.forEach(t),ISo=r(A9e," (LayoutLMv3 model)"),A9e.forEach(t),qSo=i(j),gb=n(j,"LI",{});var y9e=s(gb);fme=n(y9e,"STRONG",{});var Act=s(fme);NSo=r(Act,"led"),Act.forEach(t),jSo=r(y9e," \u2014 "),RG=n(y9e,"A",{href:!0});var yct=s(RG);DSo=r(yct,"LEDForSequenceClassification"),yct.forEach(t),GSo=r(y9e," (LED model)"),y9e.forEach(t),OSo=i(j),hb=n(j,"LI",{});var L9e=s(hb);mme=n(L9e,"STRONG",{});var Lct=s(mme);VSo=r(Lct,"longformer"),Lct.forEach(t),XSo=r(L9e," \u2014 "),PG=n(L9e,"A",{href:!0});var xct=s(PG);zSo=r(xct,"LongformerForSequenceClassification"),xct.forEach(t),WSo=r(L9e," (Longformer model)"),L9e.forEach(t),QSo=i(j),pb=n(j,"LI",{});var x9e=s(pb);gme=n(x9e,"STRONG",{});var $ct=s(gme);HSo=r($ct,"mbart"),$ct.forEach(t),USo=r(x9e," \u2014 "),BG=n(x9e,"A",{href:!0});var kct=s(BG);JSo=r(kct,"MBartForSequenceClassification"),kct.forEach(t),YSo=r(x9e," (mBART model)"),x9e.forEach(t),KSo=i(j),ub=n(j,"LI",{});var $9e=s(ub);hme=n($9e,"STRONG",{});var Sct=s(hme);ZSo=r(Sct,"megatron-bert"),Sct.forEach(t),eRo=r($9e," \u2014 "),IG=n($9e,"A",{href:!0});var Rct=s(IG);oRo=r(Rct,"MegatronBertForSequenceClassification"),Rct.forEach(t),rRo=r($9e," (MegatronBert model)"),$9e.forEach(t),tRo=i(j),_b=n(j,"LI",{});var k9e=s(_b);pme=n(k9e,"STRONG",{});var Pct=s(pme);aRo=r(Pct,"mobilebert"),Pct.forEach(t),nRo=r(k9e," \u2014 "),qG=n(k9e,"A",{href:!0});var Bct=s(qG);sRo=r(Bct,"MobileBertForSequenceClassification"),Bct.forEach(t),lRo=r(k9e," (MobileBERT model)"),k9e.forEach(t),iRo=i(j),bb=n(j,"LI",{});var S9e=s(bb);ume=n(S9e,"STRONG",{});var Ict=s(ume);dRo=r(Ict,"mpnet"),Ict.forEach(t),cRo=r(S9e," \u2014 "),NG=n(S9e,"A",{href:!0});var qct=s(NG);fRo=r(qct,"MPNetForSequenceClassification"),qct.forEach(t),mRo=r(S9e," (MPNet model)"),S9e.forEach(t),gRo=i(j),vb=n(j,"LI",{});var R9e=s(vb);_me=n(R9e,"STRONG",{});var Nct=s(_me);hRo=r(Nct,"nystromformer"),Nct.forEach(t),pRo=r(R9e," \u2014 "),jG=n(R9e,"A",{href:!0});var jct=s(jG);uRo=r(jct,"NystromformerForSequenceClassification"),jct.forEach(t),_Ro=r(R9e," (Nystromformer model)"),R9e.forEach(t),bRo=i(j),Fb=n(j,"LI",{});var P9e=s(Fb);bme=n(P9e,"STRONG",{});var Dct=s(bme);vRo=r(Dct,"openai-gpt"),Dct.forEach(t),FRo=r(P9e," \u2014 "),DG=n(P9e,"A",{href:!0});var Gct=s(DG);TRo=r(Gct,"OpenAIGPTForSequenceClassification"),Gct.forEach(t),MRo=r(P9e," (OpenAI GPT model)"),P9e.forEach(t),ERo=i(j),Tb=n(j,"LI",{});var B9e=s(Tb);vme=n(B9e,"STRONG",{});var Oct=s(vme);CRo=r(Oct,"perceiver"),Oct.forEach(t),wRo=r(B9e," \u2014 "),GG=n(B9e,"A",{href:!0});var Vct=s(GG);ARo=r(Vct,"PerceiverForSequenceClassification"),Vct.forEach(t),yRo=r(B9e," (Perceiver model)"),B9e.forEach(t),LRo=i(j),Mb=n(j,"LI",{});var I9e=s(Mb);Fme=n(I9e,"STRONG",{});var Xct=s(Fme);xRo=r(Xct,"plbart"),Xct.forEach(t),$Ro=r(I9e," \u2014 "),OG=n(I9e,"A",{href:!0});var zct=s(OG);kRo=r(zct,"PLBartForSequenceClassification"),zct.forEach(t),SRo=r(I9e," (PLBart model)"),I9e.forEach(t),RRo=i(j),Eb=n(j,"LI",{});var q9e=s(Eb);Tme=n(q9e,"STRONG",{});var Wct=s(Tme);PRo=r(Wct,"qdqbert"),Wct.forEach(t),BRo=r(q9e," \u2014 "),VG=n(q9e,"A",{href:!0});var Qct=s(VG);IRo=r(Qct,"QDQBertForSequenceClassification"),Qct.forEach(t),qRo=r(q9e," (QDQBert model)"),q9e.forEach(t),NRo=i(j),Cb=n(j,"LI",{});var N9e=s(Cb);Mme=n(N9e,"STRONG",{});var Hct=s(Mme);jRo=r(Hct,"reformer"),Hct.forEach(t),DRo=r(N9e," \u2014 "),XG=n(N9e,"A",{href:!0});var Uct=s(XG);GRo=r(Uct,"ReformerForSequenceClassification"),Uct.forEach(t),ORo=r(N9e," (Reformer model)"),N9e.forEach(t),VRo=i(j),wb=n(j,"LI",{});var j9e=s(wb);Eme=n(j9e,"STRONG",{});var Jct=s(Eme);XRo=r(Jct,"rembert"),Jct.forEach(t),zRo=r(j9e," \u2014 "),zG=n(j9e,"A",{href:!0});var Yct=s(zG);WRo=r(Yct,"RemBertForSequenceClassification"),Yct.forEach(t),QRo=r(j9e," (RemBERT model)"),j9e.forEach(t),HRo=i(j),Ab=n(j,"LI",{});var D9e=s(Ab);Cme=n(D9e,"STRONG",{});var Kct=s(Cme);URo=r(Kct,"roberta"),Kct.forEach(t),JRo=r(D9e," \u2014 "),WG=n(D9e,"A",{href:!0});var Zct=s(WG);YRo=r(Zct,"RobertaForSequenceClassification"),Zct.forEach(t),KRo=r(D9e," (RoBERTa model)"),D9e.forEach(t),ZRo=i(j),yb=n(j,"LI",{});var G9e=s(yb);wme=n(G9e,"STRONG",{});var eft=s(wme);ePo=r(eft,"roformer"),eft.forEach(t),oPo=r(G9e," \u2014 "),QG=n(G9e,"A",{href:!0});var oft=s(QG);rPo=r(oft,"RoFormerForSequenceClassification"),oft.forEach(t),tPo=r(G9e," (RoFormer model)"),G9e.forEach(t),aPo=i(j),Lb=n(j,"LI",{});var O9e=s(Lb);Ame=n(O9e,"STRONG",{});var rft=s(Ame);nPo=r(rft,"squeezebert"),rft.forEach(t),sPo=r(O9e," \u2014 "),HG=n(O9e,"A",{href:!0});var tft=s(HG);lPo=r(tft,"SqueezeBertForSequenceClassification"),tft.forEach(t),iPo=r(O9e," (SqueezeBERT model)"),O9e.forEach(t),dPo=i(j),xb=n(j,"LI",{});var V9e=s(xb);yme=n(V9e,"STRONG",{});var aft=s(yme);cPo=r(aft,"tapas"),aft.forEach(t),fPo=r(V9e," \u2014 "),UG=n(V9e,"A",{href:!0});var nft=s(UG);mPo=r(nft,"TapasForSequenceClassification"),nft.forEach(t),gPo=r(V9e," (TAPAS model)"),V9e.forEach(t),hPo=i(j),$b=n(j,"LI",{});var X9e=s($b);Lme=n(X9e,"STRONG",{});var sft=s(Lme);pPo=r(sft,"transfo-xl"),sft.forEach(t),uPo=r(X9e," \u2014 "),JG=n(X9e,"A",{href:!0});var lft=s(JG);_Po=r(lft,"TransfoXLForSequenceClassification"),lft.forEach(t),bPo=r(X9e," (Transformer-XL model)"),X9e.forEach(t),vPo=i(j),kb=n(j,"LI",{});var z9e=s(kb);xme=n(z9e,"STRONG",{});var ift=s(xme);FPo=r(ift,"xlm"),ift.forEach(t),TPo=r(z9e," \u2014 "),YG=n(z9e,"A",{href:!0});var dft=s(YG);MPo=r(dft,"XLMForSequenceClassification"),dft.forEach(t),EPo=r(z9e," (XLM model)"),z9e.forEach(t),CPo=i(j),Sb=n(j,"LI",{});var W9e=s(Sb);$me=n(W9e,"STRONG",{});var cft=s($me);wPo=r(cft,"xlm-roberta"),cft.forEach(t),APo=r(W9e," \u2014 "),KG=n(W9e,"A",{href:!0});var fft=s(KG);yPo=r(fft,"XLMRobertaForSequenceClassification"),fft.forEach(t),LPo=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),xPo=i(j),Rb=n(j,"LI",{});var Q9e=s(Rb);kme=n(Q9e,"STRONG",{});var mft=s(kme);$Po=r(mft,"xlm-roberta-xl"),mft.forEach(t),kPo=r(Q9e," \u2014 "),ZG=n(Q9e,"A",{href:!0});var gft=s(ZG);SPo=r(gft,"XLMRobertaXLForSequenceClassification"),gft.forEach(t),RPo=r(Q9e," (XLM-RoBERTa-XL model)"),Q9e.forEach(t),PPo=i(j),Pb=n(j,"LI",{});var H9e=s(Pb);Sme=n(H9e,"STRONG",{});var hft=s(Sme);BPo=r(hft,"xlnet"),hft.forEach(t),IPo=r(H9e," \u2014 "),eO=n(H9e,"A",{href:!0});var pft=s(eO);qPo=r(pft,"XLNetForSequenceClassification"),pft.forEach(t),NPo=r(H9e," (XLNet model)"),H9e.forEach(t),jPo=i(j),Bb=n(j,"LI",{});var U9e=s(Bb);Rme=n(U9e,"STRONG",{});var uft=s(Rme);DPo=r(uft,"yoso"),uft.forEach(t),GPo=r(U9e," \u2014 "),oO=n(U9e,"A",{href:!0});var _ft=s(oO);OPo=r(_ft,"YosoForSequenceClassification"),_ft.forEach(t),VPo=r(U9e," (YOSO model)"),U9e.forEach(t),j.forEach(t),XPo=i(sa),Ib=n(sa,"P",{});var J9e=s(Ib);zPo=r(J9e,"The model is set in evaluation mode by default using "),Pme=n(J9e,"CODE",{});var bft=s(Pme);WPo=r(bft,"model.eval()"),bft.forEach(t),QPo=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(J9e,"CODE",{});var vft=s(Bme);HPo=r(vft,"model.train()"),vft.forEach(t),J9e.forEach(t),UPo=i(sa),T(qb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),ENe=i(f),Vi=n(f,"H2",{class:!0});var yDe=s(Vi);Nb=n(yDe,"A",{id:!0,class:!0,href:!0});var Fft=s(Nb);Ime=n(Fft,"SPAN",{});var Tft=s(Ime);T(xy.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),JPo=i(yDe),qme=n(yDe,"SPAN",{});var Mft=s(qme);YPo=r(Mft,"AutoModelForMultipleChoice"),Mft.forEach(t),yDe.forEach(t),CNe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T($y.$$.fragment,Qs),KPo=i(Qs),Xi=n(Qs,"P",{});var yZ=s(Xi);ZPo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rO=n(yZ,"A",{href:!0});var Eft=s(rO);eBo=r(Eft,"from_pretrained()"),Eft.forEach(t),oBo=r(yZ," class method or the "),tO=n(yZ,"A",{href:!0});var Cft=s(tO);rBo=r(Cft,"from_config()"),Cft.forEach(t),tBo=r(yZ,` class
method.`),yZ.forEach(t),aBo=i(Qs),ky=n(Qs,"P",{});var LDe=s(ky);nBo=r(LDe,"This class cannot be instantiated directly using "),Nme=n(LDe,"CODE",{});var wft=s(Nme);sBo=r(wft,"__init__()"),wft.forEach(t),lBo=r(LDe," (throws an error)."),LDe.forEach(t),iBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var V0=s(dt);T(Sy.$$.fragment,V0),dBo=i(V0),jme=n(V0,"P",{});var Aft=s(jme);cBo=r(Aft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Aft.forEach(t),fBo=i(V0),zi=n(V0,"P",{});var LZ=s(zi);mBo=r(LZ,`Note:
Loading a model from its configuration file does `),Dme=n(LZ,"STRONG",{});var yft=s(Dme);gBo=r(yft,"not"),yft.forEach(t),hBo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(LZ,"A",{href:!0});var Lft=s(aO);pBo=r(Lft,"from_pretrained()"),Lft.forEach(t),uBo=r(LZ," to load the model weights."),LZ.forEach(t),_Bo=i(V0),T(jb.$$.fragment,V0),V0.forEach(t),bBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(Ry.$$.fragment,la),vBo=i(la),Gme=n(la,"P",{});var xft=s(Gme);FBo=r(xft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xft.forEach(t),TBo=i(la),Pa=n(la,"P",{});var X0=s(Pa);MBo=r(X0,"The model class to instantiate is selected based on the "),Ome=n(X0,"CODE",{});var $ft=s(Ome);EBo=r($ft,"model_type"),$ft.forEach(t),CBo=r(X0,` property of the config object (either
passed as an argument or loaded from `),Vme=n(X0,"CODE",{});var kft=s(Vme);wBo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),ABo=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(X0,"CODE",{});var Sft=s(Xme);yBo=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),LBo=r(X0,":"),X0.forEach(t),xBo=i(la),K=n(la,"UL",{});var ee=s(K);Db=n(ee,"LI",{});var Y9e=s(Db);zme=n(Y9e,"STRONG",{});var Rft=s(zme);$Bo=r(Rft,"albert"),Rft.forEach(t),kBo=r(Y9e," \u2014 "),nO=n(Y9e,"A",{href:!0});var Pft=s(nO);SBo=r(Pft,"AlbertForMultipleChoice"),Pft.forEach(t),RBo=r(Y9e," (ALBERT model)"),Y9e.forEach(t),PBo=i(ee),Gb=n(ee,"LI",{});var K9e=s(Gb);Wme=n(K9e,"STRONG",{});var Bft=s(Wme);BBo=r(Bft,"bert"),Bft.forEach(t),IBo=r(K9e," \u2014 "),sO=n(K9e,"A",{href:!0});var Ift=s(sO);qBo=r(Ift,"BertForMultipleChoice"),Ift.forEach(t),NBo=r(K9e," (BERT model)"),K9e.forEach(t),jBo=i(ee),Ob=n(ee,"LI",{});var Z9e=s(Ob);Qme=n(Z9e,"STRONG",{});var qft=s(Qme);DBo=r(qft,"big_bird"),qft.forEach(t),GBo=r(Z9e," \u2014 "),lO=n(Z9e,"A",{href:!0});var Nft=s(lO);OBo=r(Nft,"BigBirdForMultipleChoice"),Nft.forEach(t),VBo=r(Z9e," (BigBird model)"),Z9e.forEach(t),XBo=i(ee),Vb=n(ee,"LI",{});var exe=s(Vb);Hme=n(exe,"STRONG",{});var jft=s(Hme);zBo=r(jft,"camembert"),jft.forEach(t),WBo=r(exe," \u2014 "),iO=n(exe,"A",{href:!0});var Dft=s(iO);QBo=r(Dft,"CamembertForMultipleChoice"),Dft.forEach(t),HBo=r(exe," (CamemBERT model)"),exe.forEach(t),UBo=i(ee),Xb=n(ee,"LI",{});var oxe=s(Xb);Ume=n(oxe,"STRONG",{});var Gft=s(Ume);JBo=r(Gft,"canine"),Gft.forEach(t),YBo=r(oxe," \u2014 "),dO=n(oxe,"A",{href:!0});var Oft=s(dO);KBo=r(Oft,"CanineForMultipleChoice"),Oft.forEach(t),ZBo=r(oxe," (Canine model)"),oxe.forEach(t),eIo=i(ee),zb=n(ee,"LI",{});var rxe=s(zb);Jme=n(rxe,"STRONG",{});var Vft=s(Jme);oIo=r(Vft,"convbert"),Vft.forEach(t),rIo=r(rxe," \u2014 "),cO=n(rxe,"A",{href:!0});var Xft=s(cO);tIo=r(Xft,"ConvBertForMultipleChoice"),Xft.forEach(t),aIo=r(rxe," (ConvBERT model)"),rxe.forEach(t),nIo=i(ee),Wb=n(ee,"LI",{});var txe=s(Wb);Yme=n(txe,"STRONG",{});var zft=s(Yme);sIo=r(zft,"data2vec-text"),zft.forEach(t),lIo=r(txe," \u2014 "),fO=n(txe,"A",{href:!0});var Wft=s(fO);iIo=r(Wft,"Data2VecTextForMultipleChoice"),Wft.forEach(t),dIo=r(txe," (Data2VecText model)"),txe.forEach(t),cIo=i(ee),Qb=n(ee,"LI",{});var axe=s(Qb);Kme=n(axe,"STRONG",{});var Qft=s(Kme);fIo=r(Qft,"deberta-v2"),Qft.forEach(t),mIo=r(axe," \u2014 "),mO=n(axe,"A",{href:!0});var Hft=s(mO);gIo=r(Hft,"DebertaV2ForMultipleChoice"),Hft.forEach(t),hIo=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),pIo=i(ee),Hb=n(ee,"LI",{});var nxe=s(Hb);Zme=n(nxe,"STRONG",{});var Uft=s(Zme);uIo=r(Uft,"distilbert"),Uft.forEach(t),_Io=r(nxe," \u2014 "),gO=n(nxe,"A",{href:!0});var Jft=s(gO);bIo=r(Jft,"DistilBertForMultipleChoice"),Jft.forEach(t),vIo=r(nxe," (DistilBERT model)"),nxe.forEach(t),FIo=i(ee),Ub=n(ee,"LI",{});var sxe=s(Ub);ege=n(sxe,"STRONG",{});var Yft=s(ege);TIo=r(Yft,"electra"),Yft.forEach(t),MIo=r(sxe," \u2014 "),hO=n(sxe,"A",{href:!0});var Kft=s(hO);EIo=r(Kft,"ElectraForMultipleChoice"),Kft.forEach(t),CIo=r(sxe," (ELECTRA model)"),sxe.forEach(t),wIo=i(ee),Jb=n(ee,"LI",{});var lxe=s(Jb);oge=n(lxe,"STRONG",{});var Zft=s(oge);AIo=r(Zft,"flaubert"),Zft.forEach(t),yIo=r(lxe," \u2014 "),pO=n(lxe,"A",{href:!0});var emt=s(pO);LIo=r(emt,"FlaubertForMultipleChoice"),emt.forEach(t),xIo=r(lxe," (FlauBERT model)"),lxe.forEach(t),$Io=i(ee),Yb=n(ee,"LI",{});var ixe=s(Yb);rge=n(ixe,"STRONG",{});var omt=s(rge);kIo=r(omt,"fnet"),omt.forEach(t),SIo=r(ixe," \u2014 "),uO=n(ixe,"A",{href:!0});var rmt=s(uO);RIo=r(rmt,"FNetForMultipleChoice"),rmt.forEach(t),PIo=r(ixe," (FNet model)"),ixe.forEach(t),BIo=i(ee),Kb=n(ee,"LI",{});var dxe=s(Kb);tge=n(dxe,"STRONG",{});var tmt=s(tge);IIo=r(tmt,"funnel"),tmt.forEach(t),qIo=r(dxe," \u2014 "),_O=n(dxe,"A",{href:!0});var amt=s(_O);NIo=r(amt,"FunnelForMultipleChoice"),amt.forEach(t),jIo=r(dxe," (Funnel Transformer model)"),dxe.forEach(t),DIo=i(ee),Zb=n(ee,"LI",{});var cxe=s(Zb);age=n(cxe,"STRONG",{});var nmt=s(age);GIo=r(nmt,"ibert"),nmt.forEach(t),OIo=r(cxe," \u2014 "),bO=n(cxe,"A",{href:!0});var smt=s(bO);VIo=r(smt,"IBertForMultipleChoice"),smt.forEach(t),XIo=r(cxe," (I-BERT model)"),cxe.forEach(t),zIo=i(ee),ev=n(ee,"LI",{});var fxe=s(ev);nge=n(fxe,"STRONG",{});var lmt=s(nge);WIo=r(lmt,"longformer"),lmt.forEach(t),QIo=r(fxe," \u2014 "),vO=n(fxe,"A",{href:!0});var imt=s(vO);HIo=r(imt,"LongformerForMultipleChoice"),imt.forEach(t),UIo=r(fxe," (Longformer model)"),fxe.forEach(t),JIo=i(ee),ov=n(ee,"LI",{});var mxe=s(ov);sge=n(mxe,"STRONG",{});var dmt=s(sge);YIo=r(dmt,"megatron-bert"),dmt.forEach(t),KIo=r(mxe," \u2014 "),FO=n(mxe,"A",{href:!0});var cmt=s(FO);ZIo=r(cmt,"MegatronBertForMultipleChoice"),cmt.forEach(t),eqo=r(mxe," (MegatronBert model)"),mxe.forEach(t),oqo=i(ee),rv=n(ee,"LI",{});var gxe=s(rv);lge=n(gxe,"STRONG",{});var fmt=s(lge);rqo=r(fmt,"mobilebert"),fmt.forEach(t),tqo=r(gxe," \u2014 "),TO=n(gxe,"A",{href:!0});var mmt=s(TO);aqo=r(mmt,"MobileBertForMultipleChoice"),mmt.forEach(t),nqo=r(gxe," (MobileBERT model)"),gxe.forEach(t),sqo=i(ee),tv=n(ee,"LI",{});var hxe=s(tv);ige=n(hxe,"STRONG",{});var gmt=s(ige);lqo=r(gmt,"mpnet"),gmt.forEach(t),iqo=r(hxe," \u2014 "),MO=n(hxe,"A",{href:!0});var hmt=s(MO);dqo=r(hmt,"MPNetForMultipleChoice"),hmt.forEach(t),cqo=r(hxe," (MPNet model)"),hxe.forEach(t),fqo=i(ee),av=n(ee,"LI",{});var pxe=s(av);dge=n(pxe,"STRONG",{});var pmt=s(dge);mqo=r(pmt,"nystromformer"),pmt.forEach(t),gqo=r(pxe," \u2014 "),EO=n(pxe,"A",{href:!0});var umt=s(EO);hqo=r(umt,"NystromformerForMultipleChoice"),umt.forEach(t),pqo=r(pxe," (Nystromformer model)"),pxe.forEach(t),uqo=i(ee),nv=n(ee,"LI",{});var uxe=s(nv);cge=n(uxe,"STRONG",{});var _mt=s(cge);_qo=r(_mt,"qdqbert"),_mt.forEach(t),bqo=r(uxe," \u2014 "),CO=n(uxe,"A",{href:!0});var bmt=s(CO);vqo=r(bmt,"QDQBertForMultipleChoice"),bmt.forEach(t),Fqo=r(uxe," (QDQBert model)"),uxe.forEach(t),Tqo=i(ee),sv=n(ee,"LI",{});var _xe=s(sv);fge=n(_xe,"STRONG",{});var vmt=s(fge);Mqo=r(vmt,"rembert"),vmt.forEach(t),Eqo=r(_xe," \u2014 "),wO=n(_xe,"A",{href:!0});var Fmt=s(wO);Cqo=r(Fmt,"RemBertForMultipleChoice"),Fmt.forEach(t),wqo=r(_xe," (RemBERT model)"),_xe.forEach(t),Aqo=i(ee),lv=n(ee,"LI",{});var bxe=s(lv);mge=n(bxe,"STRONG",{});var Tmt=s(mge);yqo=r(Tmt,"roberta"),Tmt.forEach(t),Lqo=r(bxe," \u2014 "),AO=n(bxe,"A",{href:!0});var Mmt=s(AO);xqo=r(Mmt,"RobertaForMultipleChoice"),Mmt.forEach(t),$qo=r(bxe," (RoBERTa model)"),bxe.forEach(t),kqo=i(ee),iv=n(ee,"LI",{});var vxe=s(iv);gge=n(vxe,"STRONG",{});var Emt=s(gge);Sqo=r(Emt,"roformer"),Emt.forEach(t),Rqo=r(vxe," \u2014 "),yO=n(vxe,"A",{href:!0});var Cmt=s(yO);Pqo=r(Cmt,"RoFormerForMultipleChoice"),Cmt.forEach(t),Bqo=r(vxe," (RoFormer model)"),vxe.forEach(t),Iqo=i(ee),dv=n(ee,"LI",{});var Fxe=s(dv);hge=n(Fxe,"STRONG",{});var wmt=s(hge);qqo=r(wmt,"squeezebert"),wmt.forEach(t),Nqo=r(Fxe," \u2014 "),LO=n(Fxe,"A",{href:!0});var Amt=s(LO);jqo=r(Amt,"SqueezeBertForMultipleChoice"),Amt.forEach(t),Dqo=r(Fxe," (SqueezeBERT model)"),Fxe.forEach(t),Gqo=i(ee),cv=n(ee,"LI",{});var Txe=s(cv);pge=n(Txe,"STRONG",{});var ymt=s(pge);Oqo=r(ymt,"xlm"),ymt.forEach(t),Vqo=r(Txe," \u2014 "),xO=n(Txe,"A",{href:!0});var Lmt=s(xO);Xqo=r(Lmt,"XLMForMultipleChoice"),Lmt.forEach(t),zqo=r(Txe," (XLM model)"),Txe.forEach(t),Wqo=i(ee),fv=n(ee,"LI",{});var Mxe=s(fv);uge=n(Mxe,"STRONG",{});var xmt=s(uge);Qqo=r(xmt,"xlm-roberta"),xmt.forEach(t),Hqo=r(Mxe," \u2014 "),$O=n(Mxe,"A",{href:!0});var $mt=s($O);Uqo=r($mt,"XLMRobertaForMultipleChoice"),$mt.forEach(t),Jqo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),Yqo=i(ee),mv=n(ee,"LI",{});var Exe=s(mv);_ge=n(Exe,"STRONG",{});var kmt=s(_ge);Kqo=r(kmt,"xlm-roberta-xl"),kmt.forEach(t),Zqo=r(Exe," \u2014 "),kO=n(Exe,"A",{href:!0});var Smt=s(kO);eNo=r(Smt,"XLMRobertaXLForMultipleChoice"),Smt.forEach(t),oNo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),rNo=i(ee),gv=n(ee,"LI",{});var Cxe=s(gv);bge=n(Cxe,"STRONG",{});var Rmt=s(bge);tNo=r(Rmt,"xlnet"),Rmt.forEach(t),aNo=r(Cxe," \u2014 "),SO=n(Cxe,"A",{href:!0});var Pmt=s(SO);nNo=r(Pmt,"XLNetForMultipleChoice"),Pmt.forEach(t),sNo=r(Cxe," (XLNet model)"),Cxe.forEach(t),lNo=i(ee),hv=n(ee,"LI",{});var wxe=s(hv);vge=n(wxe,"STRONG",{});var Bmt=s(vge);iNo=r(Bmt,"yoso"),Bmt.forEach(t),dNo=r(wxe," \u2014 "),RO=n(wxe,"A",{href:!0});var Imt=s(RO);cNo=r(Imt,"YosoForMultipleChoice"),Imt.forEach(t),fNo=r(wxe," (YOSO model)"),wxe.forEach(t),ee.forEach(t),mNo=i(la),pv=n(la,"P",{});var Axe=s(pv);gNo=r(Axe,"The model is set in evaluation mode by default using "),Fge=n(Axe,"CODE",{});var qmt=s(Fge);hNo=r(qmt,"model.eval()"),qmt.forEach(t),pNo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(Axe,"CODE",{});var Nmt=s(Tge);uNo=r(Nmt,"model.train()"),Nmt.forEach(t),Axe.forEach(t),_No=i(la),T(uv.$$.fragment,la),la.forEach(t),Qs.forEach(t),wNe=i(f),Wi=n(f,"H2",{class:!0});var xDe=s(Wi);_v=n(xDe,"A",{id:!0,class:!0,href:!0});var jmt=s(_v);Mge=n(jmt,"SPAN",{});var Dmt=s(Mge);T(Py.$$.fragment,Dmt),Dmt.forEach(t),jmt.forEach(t),bNo=i(xDe),Ege=n(xDe,"SPAN",{});var Gmt=s(Ege);vNo=r(Gmt,"AutoModelForNextSentencePrediction"),Gmt.forEach(t),xDe.forEach(t),ANe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(By.$$.fragment,Hs),FNo=i(Hs),Qi=n(Hs,"P",{});var xZ=s(Qi);TNo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PO=n(xZ,"A",{href:!0});var Omt=s(PO);MNo=r(Omt,"from_pretrained()"),Omt.forEach(t),ENo=r(xZ," class method or the "),BO=n(xZ,"A",{href:!0});var Vmt=s(BO);CNo=r(Vmt,"from_config()"),Vmt.forEach(t),wNo=r(xZ,` class
method.`),xZ.forEach(t),ANo=i(Hs),Iy=n(Hs,"P",{});var $De=s(Iy);yNo=r($De,"This class cannot be instantiated directly using "),Cge=n($De,"CODE",{});var Xmt=s(Cge);LNo=r(Xmt,"__init__()"),Xmt.forEach(t),xNo=r($De," (throws an error)."),$De.forEach(t),$No=i(Hs),ct=n(Hs,"DIV",{class:!0});var z0=s(ct);T(qy.$$.fragment,z0),kNo=i(z0),wge=n(z0,"P",{});var zmt=s(wge);SNo=r(zmt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zmt.forEach(t),RNo=i(z0),Hi=n(z0,"P",{});var $Z=s(Hi);PNo=r($Z,`Note:
Loading a model from its configuration file does `),Age=n($Z,"STRONG",{});var Wmt=s(Age);BNo=r(Wmt,"not"),Wmt.forEach(t),INo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n($Z,"A",{href:!0});var Qmt=s(IO);qNo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),NNo=r($Z," to load the model weights."),$Z.forEach(t),jNo=i(z0),T(bv.$$.fragment,z0),z0.forEach(t),DNo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(Ny.$$.fragment,ia),GNo=i(ia),yge=n(ia,"P",{});var Hmt=s(yge);ONo=r(Hmt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hmt.forEach(t),VNo=i(ia),Ba=n(ia,"P",{});var W0=s(Ba);XNo=r(W0,"The model class to instantiate is selected based on the "),Lge=n(W0,"CODE",{});var Umt=s(Lge);zNo=r(Umt,"model_type"),Umt.forEach(t),WNo=r(W0,` property of the config object (either
passed as an argument or loaded from `),xge=n(W0,"CODE",{});var Jmt=s(xge);QNo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),HNo=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(W0,"CODE",{});var Ymt=s($ge);UNo=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),JNo=r(W0,":"),W0.forEach(t),YNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);vv=n(Us,"LI",{});var yxe=s(vv);kge=n(yxe,"STRONG",{});var Kmt=s(kge);KNo=r(Kmt,"bert"),Kmt.forEach(t),ZNo=r(yxe," \u2014 "),qO=n(yxe,"A",{href:!0});var Zmt=s(qO);ejo=r(Zmt,"BertForNextSentencePrediction"),Zmt.forEach(t),ojo=r(yxe," (BERT model)"),yxe.forEach(t),rjo=i(Us),Fv=n(Us,"LI",{});var Lxe=s(Fv);Sge=n(Lxe,"STRONG",{});var egt=s(Sge);tjo=r(egt,"fnet"),egt.forEach(t),ajo=r(Lxe," \u2014 "),NO=n(Lxe,"A",{href:!0});var ogt=s(NO);njo=r(ogt,"FNetForNextSentencePrediction"),ogt.forEach(t),sjo=r(Lxe," (FNet model)"),Lxe.forEach(t),ljo=i(Us),Tv=n(Us,"LI",{});var xxe=s(Tv);Rge=n(xxe,"STRONG",{});var rgt=s(Rge);ijo=r(rgt,"megatron-bert"),rgt.forEach(t),djo=r(xxe," \u2014 "),jO=n(xxe,"A",{href:!0});var tgt=s(jO);cjo=r(tgt,"MegatronBertForNextSentencePrediction"),tgt.forEach(t),fjo=r(xxe," (MegatronBert model)"),xxe.forEach(t),mjo=i(Us),Mv=n(Us,"LI",{});var $xe=s(Mv);Pge=n($xe,"STRONG",{});var agt=s(Pge);gjo=r(agt,"mobilebert"),agt.forEach(t),hjo=r($xe," \u2014 "),DO=n($xe,"A",{href:!0});var ngt=s(DO);pjo=r(ngt,"MobileBertForNextSentencePrediction"),ngt.forEach(t),ujo=r($xe," (MobileBERT model)"),$xe.forEach(t),_jo=i(Us),Ev=n(Us,"LI",{});var kxe=s(Ev);Bge=n(kxe,"STRONG",{});var sgt=s(Bge);bjo=r(sgt,"qdqbert"),sgt.forEach(t),vjo=r(kxe," \u2014 "),GO=n(kxe,"A",{href:!0});var lgt=s(GO);Fjo=r(lgt,"QDQBertForNextSentencePrediction"),lgt.forEach(t),Tjo=r(kxe," (QDQBert model)"),kxe.forEach(t),Us.forEach(t),Mjo=i(ia),Cv=n(ia,"P",{});var Sxe=s(Cv);Ejo=r(Sxe,"The model is set in evaluation mode by default using "),Ige=n(Sxe,"CODE",{});var igt=s(Ige);Cjo=r(igt,"model.eval()"),igt.forEach(t),wjo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(Sxe,"CODE",{});var dgt=s(qge);Ajo=r(dgt,"model.train()"),dgt.forEach(t),Sxe.forEach(t),yjo=i(ia),T(wv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),yNe=i(f),Ui=n(f,"H2",{class:!0});var kDe=s(Ui);Av=n(kDe,"A",{id:!0,class:!0,href:!0});var cgt=s(Av);Nge=n(cgt,"SPAN",{});var fgt=s(Nge);T(jy.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),Ljo=i(kDe),jge=n(kDe,"SPAN",{});var mgt=s(jge);xjo=r(mgt,"AutoModelForTokenClassification"),mgt.forEach(t),kDe.forEach(t),LNe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Dy.$$.fragment,Js),$jo=i(Js),Ji=n(Js,"P",{});var kZ=s(Ji);kjo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OO=n(kZ,"A",{href:!0});var ggt=s(OO);Sjo=r(ggt,"from_pretrained()"),ggt.forEach(t),Rjo=r(kZ," class method or the "),VO=n(kZ,"A",{href:!0});var hgt=s(VO);Pjo=r(hgt,"from_config()"),hgt.forEach(t),Bjo=r(kZ,` class
method.`),kZ.forEach(t),Ijo=i(Js),Gy=n(Js,"P",{});var SDe=s(Gy);qjo=r(SDe,"This class cannot be instantiated directly using "),Dge=n(SDe,"CODE",{});var pgt=s(Dge);Njo=r(pgt,"__init__()"),pgt.forEach(t),jjo=r(SDe," (throws an error)."),SDe.forEach(t),Djo=i(Js),ft=n(Js,"DIV",{class:!0});var Q0=s(ft);T(Oy.$$.fragment,Q0),Gjo=i(Q0),Gge=n(Q0,"P",{});var ugt=s(Gge);Ojo=r(ugt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ugt.forEach(t),Vjo=i(Q0),Yi=n(Q0,"P",{});var SZ=s(Yi);Xjo=r(SZ,`Note:
Loading a model from its configuration file does `),Oge=n(SZ,"STRONG",{});var _gt=s(Oge);zjo=r(_gt,"not"),_gt.forEach(t),Wjo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(SZ,"A",{href:!0});var bgt=s(XO);Qjo=r(bgt,"from_pretrained()"),bgt.forEach(t),Hjo=r(SZ," to load the model weights."),SZ.forEach(t),Ujo=i(Q0),T(yv.$$.fragment,Q0),Q0.forEach(t),Jjo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Vy.$$.fragment,da),Yjo=i(da),Vge=n(da,"P",{});var vgt=s(Vge);Kjo=r(vgt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vgt.forEach(t),Zjo=i(da),Ia=n(da,"P",{});var H0=s(Ia);eDo=r(H0,"The model class to instantiate is selected based on the "),Xge=n(H0,"CODE",{});var Fgt=s(Xge);oDo=r(Fgt,"model_type"),Fgt.forEach(t),rDo=r(H0,` property of the config object (either
passed as an argument or loaded from `),zge=n(H0,"CODE",{});var Tgt=s(zge);tDo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),aDo=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(H0,"CODE",{});var Mgt=s(Wge);nDo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),sDo=r(H0,":"),H0.forEach(t),lDo=i(da),H=n(da,"UL",{});var J=s(H);Lv=n(J,"LI",{});var Rxe=s(Lv);Qge=n(Rxe,"STRONG",{});var Egt=s(Qge);iDo=r(Egt,"albert"),Egt.forEach(t),dDo=r(Rxe," \u2014 "),zO=n(Rxe,"A",{href:!0});var Cgt=s(zO);cDo=r(Cgt,"AlbertForTokenClassification"),Cgt.forEach(t),fDo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),mDo=i(J),xv=n(J,"LI",{});var Pxe=s(xv);Hge=n(Pxe,"STRONG",{});var wgt=s(Hge);gDo=r(wgt,"bert"),wgt.forEach(t),hDo=r(Pxe," \u2014 "),WO=n(Pxe,"A",{href:!0});var Agt=s(WO);pDo=r(Agt,"BertForTokenClassification"),Agt.forEach(t),uDo=r(Pxe," (BERT model)"),Pxe.forEach(t),_Do=i(J),$v=n(J,"LI",{});var Bxe=s($v);Uge=n(Bxe,"STRONG",{});var ygt=s(Uge);bDo=r(ygt,"big_bird"),ygt.forEach(t),vDo=r(Bxe," \u2014 "),QO=n(Bxe,"A",{href:!0});var Lgt=s(QO);FDo=r(Lgt,"BigBirdForTokenClassification"),Lgt.forEach(t),TDo=r(Bxe," (BigBird model)"),Bxe.forEach(t),MDo=i(J),kv=n(J,"LI",{});var Ixe=s(kv);Jge=n(Ixe,"STRONG",{});var xgt=s(Jge);EDo=r(xgt,"camembert"),xgt.forEach(t),CDo=r(Ixe," \u2014 "),HO=n(Ixe,"A",{href:!0});var $gt=s(HO);wDo=r($gt,"CamembertForTokenClassification"),$gt.forEach(t),ADo=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),yDo=i(J),Sv=n(J,"LI",{});var qxe=s(Sv);Yge=n(qxe,"STRONG",{});var kgt=s(Yge);LDo=r(kgt,"canine"),kgt.forEach(t),xDo=r(qxe," \u2014 "),UO=n(qxe,"A",{href:!0});var Sgt=s(UO);$Do=r(Sgt,"CanineForTokenClassification"),Sgt.forEach(t),kDo=r(qxe," (Canine model)"),qxe.forEach(t),SDo=i(J),Rv=n(J,"LI",{});var Nxe=s(Rv);Kge=n(Nxe,"STRONG",{});var Rgt=s(Kge);RDo=r(Rgt,"convbert"),Rgt.forEach(t),PDo=r(Nxe," \u2014 "),JO=n(Nxe,"A",{href:!0});var Pgt=s(JO);BDo=r(Pgt,"ConvBertForTokenClassification"),Pgt.forEach(t),IDo=r(Nxe," (ConvBERT model)"),Nxe.forEach(t),qDo=i(J),Pv=n(J,"LI",{});var jxe=s(Pv);Zge=n(jxe,"STRONG",{});var Bgt=s(Zge);NDo=r(Bgt,"data2vec-text"),Bgt.forEach(t),jDo=r(jxe," \u2014 "),YO=n(jxe,"A",{href:!0});var Igt=s(YO);DDo=r(Igt,"Data2VecTextForTokenClassification"),Igt.forEach(t),GDo=r(jxe," (Data2VecText model)"),jxe.forEach(t),ODo=i(J),Bv=n(J,"LI",{});var Dxe=s(Bv);ehe=n(Dxe,"STRONG",{});var qgt=s(ehe);VDo=r(qgt,"deberta"),qgt.forEach(t),XDo=r(Dxe," \u2014 "),KO=n(Dxe,"A",{href:!0});var Ngt=s(KO);zDo=r(Ngt,"DebertaForTokenClassification"),Ngt.forEach(t),WDo=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),QDo=i(J),Iv=n(J,"LI",{});var Gxe=s(Iv);ohe=n(Gxe,"STRONG",{});var jgt=s(ohe);HDo=r(jgt,"deberta-v2"),jgt.forEach(t),UDo=r(Gxe," \u2014 "),ZO=n(Gxe,"A",{href:!0});var Dgt=s(ZO);JDo=r(Dgt,"DebertaV2ForTokenClassification"),Dgt.forEach(t),YDo=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),KDo=i(J),qv=n(J,"LI",{});var Oxe=s(qv);rhe=n(Oxe,"STRONG",{});var Ggt=s(rhe);ZDo=r(Ggt,"distilbert"),Ggt.forEach(t),eGo=r(Oxe," \u2014 "),eV=n(Oxe,"A",{href:!0});var Ogt=s(eV);oGo=r(Ogt,"DistilBertForTokenClassification"),Ogt.forEach(t),rGo=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),tGo=i(J),Nv=n(J,"LI",{});var Vxe=s(Nv);the=n(Vxe,"STRONG",{});var Vgt=s(the);aGo=r(Vgt,"electra"),Vgt.forEach(t),nGo=r(Vxe," \u2014 "),oV=n(Vxe,"A",{href:!0});var Xgt=s(oV);sGo=r(Xgt,"ElectraForTokenClassification"),Xgt.forEach(t),lGo=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),iGo=i(J),jv=n(J,"LI",{});var Xxe=s(jv);ahe=n(Xxe,"STRONG",{});var zgt=s(ahe);dGo=r(zgt,"flaubert"),zgt.forEach(t),cGo=r(Xxe," \u2014 "),rV=n(Xxe,"A",{href:!0});var Wgt=s(rV);fGo=r(Wgt,"FlaubertForTokenClassification"),Wgt.forEach(t),mGo=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),gGo=i(J),Dv=n(J,"LI",{});var zxe=s(Dv);nhe=n(zxe,"STRONG",{});var Qgt=s(nhe);hGo=r(Qgt,"fnet"),Qgt.forEach(t),pGo=r(zxe," \u2014 "),tV=n(zxe,"A",{href:!0});var Hgt=s(tV);uGo=r(Hgt,"FNetForTokenClassification"),Hgt.forEach(t),_Go=r(zxe," (FNet model)"),zxe.forEach(t),bGo=i(J),Gv=n(J,"LI",{});var Wxe=s(Gv);she=n(Wxe,"STRONG",{});var Ugt=s(she);vGo=r(Ugt,"funnel"),Ugt.forEach(t),FGo=r(Wxe," \u2014 "),aV=n(Wxe,"A",{href:!0});var Jgt=s(aV);TGo=r(Jgt,"FunnelForTokenClassification"),Jgt.forEach(t),MGo=r(Wxe," (Funnel Transformer model)"),Wxe.forEach(t),EGo=i(J),Ov=n(J,"LI",{});var Qxe=s(Ov);lhe=n(Qxe,"STRONG",{});var Ygt=s(lhe);CGo=r(Ygt,"gpt2"),Ygt.forEach(t),wGo=r(Qxe," \u2014 "),nV=n(Qxe,"A",{href:!0});var Kgt=s(nV);AGo=r(Kgt,"GPT2ForTokenClassification"),Kgt.forEach(t),yGo=r(Qxe," (OpenAI GPT-2 model)"),Qxe.forEach(t),LGo=i(J),Vv=n(J,"LI",{});var Hxe=s(Vv);ihe=n(Hxe,"STRONG",{});var Zgt=s(ihe);xGo=r(Zgt,"ibert"),Zgt.forEach(t),$Go=r(Hxe," \u2014 "),sV=n(Hxe,"A",{href:!0});var eht=s(sV);kGo=r(eht,"IBertForTokenClassification"),eht.forEach(t),SGo=r(Hxe," (I-BERT model)"),Hxe.forEach(t),RGo=i(J),Xv=n(J,"LI",{});var Uxe=s(Xv);dhe=n(Uxe,"STRONG",{});var oht=s(dhe);PGo=r(oht,"layoutlm"),oht.forEach(t),BGo=r(Uxe," \u2014 "),lV=n(Uxe,"A",{href:!0});var rht=s(lV);IGo=r(rht,"LayoutLMForTokenClassification"),rht.forEach(t),qGo=r(Uxe," (LayoutLM model)"),Uxe.forEach(t),NGo=i(J),zv=n(J,"LI",{});var Jxe=s(zv);che=n(Jxe,"STRONG",{});var tht=s(che);jGo=r(tht,"layoutlmv2"),tht.forEach(t),DGo=r(Jxe," \u2014 "),iV=n(Jxe,"A",{href:!0});var aht=s(iV);GGo=r(aht,"LayoutLMv2ForTokenClassification"),aht.forEach(t),OGo=r(Jxe," (LayoutLMv2 model)"),Jxe.forEach(t),VGo=i(J),Wv=n(J,"LI",{});var Yxe=s(Wv);fhe=n(Yxe,"STRONG",{});var nht=s(fhe);XGo=r(nht,"layoutlmv3"),nht.forEach(t),zGo=r(Yxe," \u2014 "),dV=n(Yxe,"A",{href:!0});var sht=s(dV);WGo=r(sht,"LayoutLMv3ForTokenClassification"),sht.forEach(t),QGo=r(Yxe," (LayoutLMv3 model)"),Yxe.forEach(t),HGo=i(J),Qv=n(J,"LI",{});var Kxe=s(Qv);mhe=n(Kxe,"STRONG",{});var lht=s(mhe);UGo=r(lht,"longformer"),lht.forEach(t),JGo=r(Kxe," \u2014 "),cV=n(Kxe,"A",{href:!0});var iht=s(cV);YGo=r(iht,"LongformerForTokenClassification"),iht.forEach(t),KGo=r(Kxe," (Longformer model)"),Kxe.forEach(t),ZGo=i(J),Hv=n(J,"LI",{});var Zxe=s(Hv);ghe=n(Zxe,"STRONG",{});var dht=s(ghe);eOo=r(dht,"megatron-bert"),dht.forEach(t),oOo=r(Zxe," \u2014 "),fV=n(Zxe,"A",{href:!0});var cht=s(fV);rOo=r(cht,"MegatronBertForTokenClassification"),cht.forEach(t),tOo=r(Zxe," (MegatronBert model)"),Zxe.forEach(t),aOo=i(J),Uv=n(J,"LI",{});var e$e=s(Uv);hhe=n(e$e,"STRONG",{});var fht=s(hhe);nOo=r(fht,"mobilebert"),fht.forEach(t),sOo=r(e$e," \u2014 "),mV=n(e$e,"A",{href:!0});var mht=s(mV);lOo=r(mht,"MobileBertForTokenClassification"),mht.forEach(t),iOo=r(e$e," (MobileBERT model)"),e$e.forEach(t),dOo=i(J),Jv=n(J,"LI",{});var o$e=s(Jv);phe=n(o$e,"STRONG",{});var ght=s(phe);cOo=r(ght,"mpnet"),ght.forEach(t),fOo=r(o$e," \u2014 "),gV=n(o$e,"A",{href:!0});var hht=s(gV);mOo=r(hht,"MPNetForTokenClassification"),hht.forEach(t),gOo=r(o$e," (MPNet model)"),o$e.forEach(t),hOo=i(J),Yv=n(J,"LI",{});var r$e=s(Yv);uhe=n(r$e,"STRONG",{});var pht=s(uhe);pOo=r(pht,"nystromformer"),pht.forEach(t),uOo=r(r$e," \u2014 "),hV=n(r$e,"A",{href:!0});var uht=s(hV);_Oo=r(uht,"NystromformerForTokenClassification"),uht.forEach(t),bOo=r(r$e," (Nystromformer model)"),r$e.forEach(t),vOo=i(J),Kv=n(J,"LI",{});var t$e=s(Kv);_he=n(t$e,"STRONG",{});var _ht=s(_he);FOo=r(_ht,"qdqbert"),_ht.forEach(t),TOo=r(t$e," \u2014 "),pV=n(t$e,"A",{href:!0});var bht=s(pV);MOo=r(bht,"QDQBertForTokenClassification"),bht.forEach(t),EOo=r(t$e," (QDQBert model)"),t$e.forEach(t),COo=i(J),Zv=n(J,"LI",{});var a$e=s(Zv);bhe=n(a$e,"STRONG",{});var vht=s(bhe);wOo=r(vht,"rembert"),vht.forEach(t),AOo=r(a$e," \u2014 "),uV=n(a$e,"A",{href:!0});var Fht=s(uV);yOo=r(Fht,"RemBertForTokenClassification"),Fht.forEach(t),LOo=r(a$e," (RemBERT model)"),a$e.forEach(t),xOo=i(J),e3=n(J,"LI",{});var n$e=s(e3);vhe=n(n$e,"STRONG",{});var Tht=s(vhe);$Oo=r(Tht,"roberta"),Tht.forEach(t),kOo=r(n$e," \u2014 "),_V=n(n$e,"A",{href:!0});var Mht=s(_V);SOo=r(Mht,"RobertaForTokenClassification"),Mht.forEach(t),ROo=r(n$e," (RoBERTa model)"),n$e.forEach(t),POo=i(J),o3=n(J,"LI",{});var s$e=s(o3);Fhe=n(s$e,"STRONG",{});var Eht=s(Fhe);BOo=r(Eht,"roformer"),Eht.forEach(t),IOo=r(s$e," \u2014 "),bV=n(s$e,"A",{href:!0});var Cht=s(bV);qOo=r(Cht,"RoFormerForTokenClassification"),Cht.forEach(t),NOo=r(s$e," (RoFormer model)"),s$e.forEach(t),jOo=i(J),r3=n(J,"LI",{});var l$e=s(r3);The=n(l$e,"STRONG",{});var wht=s(The);DOo=r(wht,"squeezebert"),wht.forEach(t),GOo=r(l$e," \u2014 "),vV=n(l$e,"A",{href:!0});var Aht=s(vV);OOo=r(Aht,"SqueezeBertForTokenClassification"),Aht.forEach(t),VOo=r(l$e," (SqueezeBERT model)"),l$e.forEach(t),XOo=i(J),t3=n(J,"LI",{});var i$e=s(t3);Mhe=n(i$e,"STRONG",{});var yht=s(Mhe);zOo=r(yht,"xlm"),yht.forEach(t),WOo=r(i$e," \u2014 "),FV=n(i$e,"A",{href:!0});var Lht=s(FV);QOo=r(Lht,"XLMForTokenClassification"),Lht.forEach(t),HOo=r(i$e," (XLM model)"),i$e.forEach(t),UOo=i(J),a3=n(J,"LI",{});var d$e=s(a3);Ehe=n(d$e,"STRONG",{});var xht=s(Ehe);JOo=r(xht,"xlm-roberta"),xht.forEach(t),YOo=r(d$e," \u2014 "),TV=n(d$e,"A",{href:!0});var $ht=s(TV);KOo=r($ht,"XLMRobertaForTokenClassification"),$ht.forEach(t),ZOo=r(d$e," (XLM-RoBERTa model)"),d$e.forEach(t),eVo=i(J),n3=n(J,"LI",{});var c$e=s(n3);Che=n(c$e,"STRONG",{});var kht=s(Che);oVo=r(kht,"xlm-roberta-xl"),kht.forEach(t),rVo=r(c$e," \u2014 "),MV=n(c$e,"A",{href:!0});var Sht=s(MV);tVo=r(Sht,"XLMRobertaXLForTokenClassification"),Sht.forEach(t),aVo=r(c$e," (XLM-RoBERTa-XL model)"),c$e.forEach(t),nVo=i(J),s3=n(J,"LI",{});var f$e=s(s3);whe=n(f$e,"STRONG",{});var Rht=s(whe);sVo=r(Rht,"xlnet"),Rht.forEach(t),lVo=r(f$e," \u2014 "),EV=n(f$e,"A",{href:!0});var Pht=s(EV);iVo=r(Pht,"XLNetForTokenClassification"),Pht.forEach(t),dVo=r(f$e," (XLNet model)"),f$e.forEach(t),cVo=i(J),l3=n(J,"LI",{});var m$e=s(l3);Ahe=n(m$e,"STRONG",{});var Bht=s(Ahe);fVo=r(Bht,"yoso"),Bht.forEach(t),mVo=r(m$e," \u2014 "),CV=n(m$e,"A",{href:!0});var Iht=s(CV);gVo=r(Iht,"YosoForTokenClassification"),Iht.forEach(t),hVo=r(m$e," (YOSO model)"),m$e.forEach(t),J.forEach(t),pVo=i(da),i3=n(da,"P",{});var g$e=s(i3);uVo=r(g$e,"The model is set in evaluation mode by default using "),yhe=n(g$e,"CODE",{});var qht=s(yhe);_Vo=r(qht,"model.eval()"),qht.forEach(t),bVo=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(g$e,"CODE",{});var Nht=s(Lhe);vVo=r(Nht,"model.train()"),Nht.forEach(t),g$e.forEach(t),FVo=i(da),T(d3.$$.fragment,da),da.forEach(t),Js.forEach(t),xNe=i(f),Ki=n(f,"H2",{class:!0});var RDe=s(Ki);c3=n(RDe,"A",{id:!0,class:!0,href:!0});var jht=s(c3);xhe=n(jht,"SPAN",{});var Dht=s(xhe);T(Xy.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),TVo=i(RDe),$he=n(RDe,"SPAN",{});var Ght=s($he);MVo=r(Ght,"AutoModelForQuestionAnswering"),Ght.forEach(t),RDe.forEach(t),$Ne=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(zy.$$.fragment,Ys),EVo=i(Ys),Zi=n(Ys,"P",{});var RZ=s(Zi);CVo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wV=n(RZ,"A",{href:!0});var Oht=s(wV);wVo=r(Oht,"from_pretrained()"),Oht.forEach(t),AVo=r(RZ," class method or the "),AV=n(RZ,"A",{href:!0});var Vht=s(AV);yVo=r(Vht,"from_config()"),Vht.forEach(t),LVo=r(RZ,` class
method.`),RZ.forEach(t),xVo=i(Ys),Wy=n(Ys,"P",{});var PDe=s(Wy);$Vo=r(PDe,"This class cannot be instantiated directly using "),khe=n(PDe,"CODE",{});var Xht=s(khe);kVo=r(Xht,"__init__()"),Xht.forEach(t),SVo=r(PDe," (throws an error)."),PDe.forEach(t),RVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var U0=s(mt);T(Qy.$$.fragment,U0),PVo=i(U0),She=n(U0,"P",{});var zht=s(She);BVo=r(zht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zht.forEach(t),IVo=i(U0),ed=n(U0,"P",{});var PZ=s(ed);qVo=r(PZ,`Note:
Loading a model from its configuration file does `),Rhe=n(PZ,"STRONG",{});var Wht=s(Rhe);NVo=r(Wht,"not"),Wht.forEach(t),jVo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(PZ,"A",{href:!0});var Qht=s(yV);DVo=r(Qht,"from_pretrained()"),Qht.forEach(t),GVo=r(PZ," to load the model weights."),PZ.forEach(t),OVo=i(U0),T(f3.$$.fragment,U0),U0.forEach(t),VVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Hy.$$.fragment,ca),XVo=i(ca),Phe=n(ca,"P",{});var Hht=s(Phe);zVo=r(Hht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hht.forEach(t),WVo=i(ca),qa=n(ca,"P",{});var J0=s(qa);QVo=r(J0,"The model class to instantiate is selected based on the "),Bhe=n(J0,"CODE",{});var Uht=s(Bhe);HVo=r(Uht,"model_type"),Uht.forEach(t),UVo=r(J0,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(J0,"CODE",{});var Jht=s(Ihe);JVo=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),YVo=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(J0,"CODE",{});var Yht=s(qhe);KVo=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),ZVo=r(J0,":"),J0.forEach(t),eXo=i(ca),V=n(ca,"UL",{});var X=s(V);m3=n(X,"LI",{});var h$e=s(m3);Nhe=n(h$e,"STRONG",{});var Kht=s(Nhe);oXo=r(Kht,"albert"),Kht.forEach(t),rXo=r(h$e," \u2014 "),LV=n(h$e,"A",{href:!0});var Zht=s(LV);tXo=r(Zht,"AlbertForQuestionAnswering"),Zht.forEach(t),aXo=r(h$e," (ALBERT model)"),h$e.forEach(t),nXo=i(X),g3=n(X,"LI",{});var p$e=s(g3);jhe=n(p$e,"STRONG",{});var ept=s(jhe);sXo=r(ept,"bart"),ept.forEach(t),lXo=r(p$e," \u2014 "),xV=n(p$e,"A",{href:!0});var opt=s(xV);iXo=r(opt,"BartForQuestionAnswering"),opt.forEach(t),dXo=r(p$e," (BART model)"),p$e.forEach(t),cXo=i(X),h3=n(X,"LI",{});var u$e=s(h3);Dhe=n(u$e,"STRONG",{});var rpt=s(Dhe);fXo=r(rpt,"bert"),rpt.forEach(t),mXo=r(u$e," \u2014 "),$V=n(u$e,"A",{href:!0});var tpt=s($V);gXo=r(tpt,"BertForQuestionAnswering"),tpt.forEach(t),hXo=r(u$e," (BERT model)"),u$e.forEach(t),pXo=i(X),p3=n(X,"LI",{});var _$e=s(p3);Ghe=n(_$e,"STRONG",{});var apt=s(Ghe);uXo=r(apt,"big_bird"),apt.forEach(t),_Xo=r(_$e," \u2014 "),kV=n(_$e,"A",{href:!0});var npt=s(kV);bXo=r(npt,"BigBirdForQuestionAnswering"),npt.forEach(t),vXo=r(_$e," (BigBird model)"),_$e.forEach(t),FXo=i(X),u3=n(X,"LI",{});var b$e=s(u3);Ohe=n(b$e,"STRONG",{});var spt=s(Ohe);TXo=r(spt,"bigbird_pegasus"),spt.forEach(t),MXo=r(b$e," \u2014 "),SV=n(b$e,"A",{href:!0});var lpt=s(SV);EXo=r(lpt,"BigBirdPegasusForQuestionAnswering"),lpt.forEach(t),CXo=r(b$e," (BigBirdPegasus model)"),b$e.forEach(t),wXo=i(X),_3=n(X,"LI",{});var v$e=s(_3);Vhe=n(v$e,"STRONG",{});var ipt=s(Vhe);AXo=r(ipt,"camembert"),ipt.forEach(t),yXo=r(v$e," \u2014 "),RV=n(v$e,"A",{href:!0});var dpt=s(RV);LXo=r(dpt,"CamembertForQuestionAnswering"),dpt.forEach(t),xXo=r(v$e," (CamemBERT model)"),v$e.forEach(t),$Xo=i(X),b3=n(X,"LI",{});var F$e=s(b3);Xhe=n(F$e,"STRONG",{});var cpt=s(Xhe);kXo=r(cpt,"canine"),cpt.forEach(t),SXo=r(F$e," \u2014 "),PV=n(F$e,"A",{href:!0});var fpt=s(PV);RXo=r(fpt,"CanineForQuestionAnswering"),fpt.forEach(t),PXo=r(F$e," (Canine model)"),F$e.forEach(t),BXo=i(X),v3=n(X,"LI",{});var T$e=s(v3);zhe=n(T$e,"STRONG",{});var mpt=s(zhe);IXo=r(mpt,"convbert"),mpt.forEach(t),qXo=r(T$e," \u2014 "),BV=n(T$e,"A",{href:!0});var gpt=s(BV);NXo=r(gpt,"ConvBertForQuestionAnswering"),gpt.forEach(t),jXo=r(T$e," (ConvBERT model)"),T$e.forEach(t),DXo=i(X),F3=n(X,"LI",{});var M$e=s(F3);Whe=n(M$e,"STRONG",{});var hpt=s(Whe);GXo=r(hpt,"data2vec-text"),hpt.forEach(t),OXo=r(M$e," \u2014 "),IV=n(M$e,"A",{href:!0});var ppt=s(IV);VXo=r(ppt,"Data2VecTextForQuestionAnswering"),ppt.forEach(t),XXo=r(M$e," (Data2VecText model)"),M$e.forEach(t),zXo=i(X),T3=n(X,"LI",{});var E$e=s(T3);Qhe=n(E$e,"STRONG",{});var upt=s(Qhe);WXo=r(upt,"deberta"),upt.forEach(t),QXo=r(E$e," \u2014 "),qV=n(E$e,"A",{href:!0});var _pt=s(qV);HXo=r(_pt,"DebertaForQuestionAnswering"),_pt.forEach(t),UXo=r(E$e," (DeBERTa model)"),E$e.forEach(t),JXo=i(X),M3=n(X,"LI",{});var C$e=s(M3);Hhe=n(C$e,"STRONG",{});var bpt=s(Hhe);YXo=r(bpt,"deberta-v2"),bpt.forEach(t),KXo=r(C$e," \u2014 "),NV=n(C$e,"A",{href:!0});var vpt=s(NV);ZXo=r(vpt,"DebertaV2ForQuestionAnswering"),vpt.forEach(t),ezo=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),ozo=i(X),E3=n(X,"LI",{});var w$e=s(E3);Uhe=n(w$e,"STRONG",{});var Fpt=s(Uhe);rzo=r(Fpt,"distilbert"),Fpt.forEach(t),tzo=r(w$e," \u2014 "),jV=n(w$e,"A",{href:!0});var Tpt=s(jV);azo=r(Tpt,"DistilBertForQuestionAnswering"),Tpt.forEach(t),nzo=r(w$e," (DistilBERT model)"),w$e.forEach(t),szo=i(X),C3=n(X,"LI",{});var A$e=s(C3);Jhe=n(A$e,"STRONG",{});var Mpt=s(Jhe);lzo=r(Mpt,"electra"),Mpt.forEach(t),izo=r(A$e," \u2014 "),DV=n(A$e,"A",{href:!0});var Ept=s(DV);dzo=r(Ept,"ElectraForQuestionAnswering"),Ept.forEach(t),czo=r(A$e," (ELECTRA model)"),A$e.forEach(t),fzo=i(X),w3=n(X,"LI",{});var y$e=s(w3);Yhe=n(y$e,"STRONG",{});var Cpt=s(Yhe);mzo=r(Cpt,"flaubert"),Cpt.forEach(t),gzo=r(y$e," \u2014 "),GV=n(y$e,"A",{href:!0});var wpt=s(GV);hzo=r(wpt,"FlaubertForQuestionAnsweringSimple"),wpt.forEach(t),pzo=r(y$e," (FlauBERT model)"),y$e.forEach(t),uzo=i(X),A3=n(X,"LI",{});var L$e=s(A3);Khe=n(L$e,"STRONG",{});var Apt=s(Khe);_zo=r(Apt,"fnet"),Apt.forEach(t),bzo=r(L$e," \u2014 "),OV=n(L$e,"A",{href:!0});var ypt=s(OV);vzo=r(ypt,"FNetForQuestionAnswering"),ypt.forEach(t),Fzo=r(L$e," (FNet model)"),L$e.forEach(t),Tzo=i(X),y3=n(X,"LI",{});var x$e=s(y3);Zhe=n(x$e,"STRONG",{});var Lpt=s(Zhe);Mzo=r(Lpt,"funnel"),Lpt.forEach(t),Ezo=r(x$e," \u2014 "),VV=n(x$e,"A",{href:!0});var xpt=s(VV);Czo=r(xpt,"FunnelForQuestionAnswering"),xpt.forEach(t),wzo=r(x$e," (Funnel Transformer model)"),x$e.forEach(t),Azo=i(X),L3=n(X,"LI",{});var $$e=s(L3);epe=n($$e,"STRONG",{});var $pt=s(epe);yzo=r($pt,"gptj"),$pt.forEach(t),Lzo=r($$e," \u2014 "),XV=n($$e,"A",{href:!0});var kpt=s(XV);xzo=r(kpt,"GPTJForQuestionAnswering"),kpt.forEach(t),$zo=r($$e," (GPT-J model)"),$$e.forEach(t),kzo=i(X),x3=n(X,"LI",{});var k$e=s(x3);ope=n(k$e,"STRONG",{});var Spt=s(ope);Szo=r(Spt,"ibert"),Spt.forEach(t),Rzo=r(k$e," \u2014 "),zV=n(k$e,"A",{href:!0});var Rpt=s(zV);Pzo=r(Rpt,"IBertForQuestionAnswering"),Rpt.forEach(t),Bzo=r(k$e," (I-BERT model)"),k$e.forEach(t),Izo=i(X),$3=n(X,"LI",{});var S$e=s($3);rpe=n(S$e,"STRONG",{});var Ppt=s(rpe);qzo=r(Ppt,"layoutlmv2"),Ppt.forEach(t),Nzo=r(S$e," \u2014 "),WV=n(S$e,"A",{href:!0});var Bpt=s(WV);jzo=r(Bpt,"LayoutLMv2ForQuestionAnswering"),Bpt.forEach(t),Dzo=r(S$e," (LayoutLMv2 model)"),S$e.forEach(t),Gzo=i(X),k3=n(X,"LI",{});var R$e=s(k3);tpe=n(R$e,"STRONG",{});var Ipt=s(tpe);Ozo=r(Ipt,"layoutlmv3"),Ipt.forEach(t),Vzo=r(R$e," \u2014 "),QV=n(R$e,"A",{href:!0});var qpt=s(QV);Xzo=r(qpt,"LayoutLMv3ForQuestionAnswering"),qpt.forEach(t),zzo=r(R$e," (LayoutLMv3 model)"),R$e.forEach(t),Wzo=i(X),S3=n(X,"LI",{});var P$e=s(S3);ape=n(P$e,"STRONG",{});var Npt=s(ape);Qzo=r(Npt,"led"),Npt.forEach(t),Hzo=r(P$e," \u2014 "),HV=n(P$e,"A",{href:!0});var jpt=s(HV);Uzo=r(jpt,"LEDForQuestionAnswering"),jpt.forEach(t),Jzo=r(P$e," (LED model)"),P$e.forEach(t),Yzo=i(X),R3=n(X,"LI",{});var B$e=s(R3);npe=n(B$e,"STRONG",{});var Dpt=s(npe);Kzo=r(Dpt,"longformer"),Dpt.forEach(t),Zzo=r(B$e," \u2014 "),UV=n(B$e,"A",{href:!0});var Gpt=s(UV);eWo=r(Gpt,"LongformerForQuestionAnswering"),Gpt.forEach(t),oWo=r(B$e," (Longformer model)"),B$e.forEach(t),rWo=i(X),P3=n(X,"LI",{});var I$e=s(P3);spe=n(I$e,"STRONG",{});var Opt=s(spe);tWo=r(Opt,"lxmert"),Opt.forEach(t),aWo=r(I$e," \u2014 "),JV=n(I$e,"A",{href:!0});var Vpt=s(JV);nWo=r(Vpt,"LxmertForQuestionAnswering"),Vpt.forEach(t),sWo=r(I$e," (LXMERT model)"),I$e.forEach(t),lWo=i(X),B3=n(X,"LI",{});var q$e=s(B3);lpe=n(q$e,"STRONG",{});var Xpt=s(lpe);iWo=r(Xpt,"mbart"),Xpt.forEach(t),dWo=r(q$e," \u2014 "),YV=n(q$e,"A",{href:!0});var zpt=s(YV);cWo=r(zpt,"MBartForQuestionAnswering"),zpt.forEach(t),fWo=r(q$e," (mBART model)"),q$e.forEach(t),mWo=i(X),I3=n(X,"LI",{});var N$e=s(I3);ipe=n(N$e,"STRONG",{});var Wpt=s(ipe);gWo=r(Wpt,"megatron-bert"),Wpt.forEach(t),hWo=r(N$e," \u2014 "),KV=n(N$e,"A",{href:!0});var Qpt=s(KV);pWo=r(Qpt,"MegatronBertForQuestionAnswering"),Qpt.forEach(t),uWo=r(N$e," (MegatronBert model)"),N$e.forEach(t),_Wo=i(X),q3=n(X,"LI",{});var j$e=s(q3);dpe=n(j$e,"STRONG",{});var Hpt=s(dpe);bWo=r(Hpt,"mobilebert"),Hpt.forEach(t),vWo=r(j$e," \u2014 "),ZV=n(j$e,"A",{href:!0});var Upt=s(ZV);FWo=r(Upt,"MobileBertForQuestionAnswering"),Upt.forEach(t),TWo=r(j$e," (MobileBERT model)"),j$e.forEach(t),MWo=i(X),N3=n(X,"LI",{});var D$e=s(N3);cpe=n(D$e,"STRONG",{});var Jpt=s(cpe);EWo=r(Jpt,"mpnet"),Jpt.forEach(t),CWo=r(D$e," \u2014 "),eX=n(D$e,"A",{href:!0});var Ypt=s(eX);wWo=r(Ypt,"MPNetForQuestionAnswering"),Ypt.forEach(t),AWo=r(D$e," (MPNet model)"),D$e.forEach(t),yWo=i(X),j3=n(X,"LI",{});var G$e=s(j3);fpe=n(G$e,"STRONG",{});var Kpt=s(fpe);LWo=r(Kpt,"nystromformer"),Kpt.forEach(t),xWo=r(G$e," \u2014 "),oX=n(G$e,"A",{href:!0});var Zpt=s(oX);$Wo=r(Zpt,"NystromformerForQuestionAnswering"),Zpt.forEach(t),kWo=r(G$e," (Nystromformer model)"),G$e.forEach(t),SWo=i(X),D3=n(X,"LI",{});var O$e=s(D3);mpe=n(O$e,"STRONG",{});var eut=s(mpe);RWo=r(eut,"qdqbert"),eut.forEach(t),PWo=r(O$e," \u2014 "),rX=n(O$e,"A",{href:!0});var out=s(rX);BWo=r(out,"QDQBertForQuestionAnswering"),out.forEach(t),IWo=r(O$e," (QDQBert model)"),O$e.forEach(t),qWo=i(X),G3=n(X,"LI",{});var V$e=s(G3);gpe=n(V$e,"STRONG",{});var rut=s(gpe);NWo=r(rut,"reformer"),rut.forEach(t),jWo=r(V$e," \u2014 "),tX=n(V$e,"A",{href:!0});var tut=s(tX);DWo=r(tut,"ReformerForQuestionAnswering"),tut.forEach(t),GWo=r(V$e," (Reformer model)"),V$e.forEach(t),OWo=i(X),O3=n(X,"LI",{});var X$e=s(O3);hpe=n(X$e,"STRONG",{});var aut=s(hpe);VWo=r(aut,"rembert"),aut.forEach(t),XWo=r(X$e," \u2014 "),aX=n(X$e,"A",{href:!0});var nut=s(aX);zWo=r(nut,"RemBertForQuestionAnswering"),nut.forEach(t),WWo=r(X$e," (RemBERT model)"),X$e.forEach(t),QWo=i(X),V3=n(X,"LI",{});var z$e=s(V3);ppe=n(z$e,"STRONG",{});var sut=s(ppe);HWo=r(sut,"roberta"),sut.forEach(t),UWo=r(z$e," \u2014 "),nX=n(z$e,"A",{href:!0});var lut=s(nX);JWo=r(lut,"RobertaForQuestionAnswering"),lut.forEach(t),YWo=r(z$e," (RoBERTa model)"),z$e.forEach(t),KWo=i(X),X3=n(X,"LI",{});var W$e=s(X3);upe=n(W$e,"STRONG",{});var iut=s(upe);ZWo=r(iut,"roformer"),iut.forEach(t),eQo=r(W$e," \u2014 "),sX=n(W$e,"A",{href:!0});var dut=s(sX);oQo=r(dut,"RoFormerForQuestionAnswering"),dut.forEach(t),rQo=r(W$e," (RoFormer model)"),W$e.forEach(t),tQo=i(X),z3=n(X,"LI",{});var Q$e=s(z3);_pe=n(Q$e,"STRONG",{});var cut=s(_pe);aQo=r(cut,"splinter"),cut.forEach(t),nQo=r(Q$e," \u2014 "),lX=n(Q$e,"A",{href:!0});var fut=s(lX);sQo=r(fut,"SplinterForQuestionAnswering"),fut.forEach(t),lQo=r(Q$e," (Splinter model)"),Q$e.forEach(t),iQo=i(X),W3=n(X,"LI",{});var H$e=s(W3);bpe=n(H$e,"STRONG",{});var mut=s(bpe);dQo=r(mut,"squeezebert"),mut.forEach(t),cQo=r(H$e," \u2014 "),iX=n(H$e,"A",{href:!0});var gut=s(iX);fQo=r(gut,"SqueezeBertForQuestionAnswering"),gut.forEach(t),mQo=r(H$e," (SqueezeBERT model)"),H$e.forEach(t),gQo=i(X),Q3=n(X,"LI",{});var U$e=s(Q3);vpe=n(U$e,"STRONG",{});var hut=s(vpe);hQo=r(hut,"xlm"),hut.forEach(t),pQo=r(U$e," \u2014 "),dX=n(U$e,"A",{href:!0});var put=s(dX);uQo=r(put,"XLMForQuestionAnsweringSimple"),put.forEach(t),_Qo=r(U$e," (XLM model)"),U$e.forEach(t),bQo=i(X),H3=n(X,"LI",{});var J$e=s(H3);Fpe=n(J$e,"STRONG",{});var uut=s(Fpe);vQo=r(uut,"xlm-roberta"),uut.forEach(t),FQo=r(J$e," \u2014 "),cX=n(J$e,"A",{href:!0});var _ut=s(cX);TQo=r(_ut,"XLMRobertaForQuestionAnswering"),_ut.forEach(t),MQo=r(J$e," (XLM-RoBERTa model)"),J$e.forEach(t),EQo=i(X),U3=n(X,"LI",{});var Y$e=s(U3);Tpe=n(Y$e,"STRONG",{});var but=s(Tpe);CQo=r(but,"xlm-roberta-xl"),but.forEach(t),wQo=r(Y$e," \u2014 "),fX=n(Y$e,"A",{href:!0});var vut=s(fX);AQo=r(vut,"XLMRobertaXLForQuestionAnswering"),vut.forEach(t),yQo=r(Y$e," (XLM-RoBERTa-XL model)"),Y$e.forEach(t),LQo=i(X),J3=n(X,"LI",{});var K$e=s(J3);Mpe=n(K$e,"STRONG",{});var Fut=s(Mpe);xQo=r(Fut,"xlnet"),Fut.forEach(t),$Qo=r(K$e," \u2014 "),mX=n(K$e,"A",{href:!0});var Tut=s(mX);kQo=r(Tut,"XLNetForQuestionAnsweringSimple"),Tut.forEach(t),SQo=r(K$e," (XLNet model)"),K$e.forEach(t),RQo=i(X),Y3=n(X,"LI",{});var Z$e=s(Y3);Epe=n(Z$e,"STRONG",{});var Mut=s(Epe);PQo=r(Mut,"yoso"),Mut.forEach(t),BQo=r(Z$e," \u2014 "),gX=n(Z$e,"A",{href:!0});var Eut=s(gX);IQo=r(Eut,"YosoForQuestionAnswering"),Eut.forEach(t),qQo=r(Z$e," (YOSO model)"),Z$e.forEach(t),X.forEach(t),NQo=i(ca),K3=n(ca,"P",{});var eke=s(K3);jQo=r(eke,"The model is set in evaluation mode by default using "),Cpe=n(eke,"CODE",{});var Cut=s(Cpe);DQo=r(Cut,"model.eval()"),Cut.forEach(t),GQo=r(eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(eke,"CODE",{});var wut=s(wpe);OQo=r(wut,"model.train()"),wut.forEach(t),eke.forEach(t),VQo=i(ca),T(Z3.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),kNe=i(f),od=n(f,"H2",{class:!0});var BDe=s(od);eF=n(BDe,"A",{id:!0,class:!0,href:!0});var Aut=s(eF);Ape=n(Aut,"SPAN",{});var yut=s(Ape);T(Uy.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),XQo=i(BDe),ype=n(BDe,"SPAN",{});var Lut=s(ype);zQo=r(Lut,"AutoModelForTableQuestionAnswering"),Lut.forEach(t),BDe.forEach(t),SNe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(Jy.$$.fragment,Ks),WQo=i(Ks),rd=n(Ks,"P",{});var BZ=s(rd);QQo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=n(BZ,"A",{href:!0});var xut=s(hX);HQo=r(xut,"from_pretrained()"),xut.forEach(t),UQo=r(BZ," class method or the "),pX=n(BZ,"A",{href:!0});var $ut=s(pX);JQo=r($ut,"from_config()"),$ut.forEach(t),YQo=r(BZ,` class
method.`),BZ.forEach(t),KQo=i(Ks),Yy=n(Ks,"P",{});var IDe=s(Yy);ZQo=r(IDe,"This class cannot be instantiated directly using "),Lpe=n(IDe,"CODE",{});var kut=s(Lpe);eHo=r(kut,"__init__()"),kut.forEach(t),oHo=r(IDe," (throws an error)."),IDe.forEach(t),rHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Y0=s(gt);T(Ky.$$.fragment,Y0),tHo=i(Y0),xpe=n(Y0,"P",{});var Sut=s(xpe);aHo=r(Sut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Sut.forEach(t),nHo=i(Y0),td=n(Y0,"P",{});var IZ=s(td);sHo=r(IZ,`Note:
Loading a model from its configuration file does `),$pe=n(IZ,"STRONG",{});var Rut=s($pe);lHo=r(Rut,"not"),Rut.forEach(t),iHo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(IZ,"A",{href:!0});var Put=s(uX);dHo=r(Put,"from_pretrained()"),Put.forEach(t),cHo=r(IZ," to load the model weights."),IZ.forEach(t),fHo=i(Y0),T(oF.$$.fragment,Y0),Y0.forEach(t),mHo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Zy.$$.fragment,fa),gHo=i(fa),kpe=n(fa,"P",{});var But=s(kpe);hHo=r(But,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),But.forEach(t),pHo=i(fa),Na=n(fa,"P",{});var K0=s(Na);uHo=r(K0,"The model class to instantiate is selected based on the "),Spe=n(K0,"CODE",{});var Iut=s(Spe);_Ho=r(Iut,"model_type"),Iut.forEach(t),bHo=r(K0,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(K0,"CODE",{});var qut=s(Rpe);vHo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),FHo=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(K0,"CODE",{});var Nut=s(Ppe);THo=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),MHo=r(K0,":"),K0.forEach(t),EHo=i(fa),Bpe=n(fa,"UL",{});var jut=s(Bpe);rF=n(jut,"LI",{});var oke=s(rF);Ipe=n(oke,"STRONG",{});var Dut=s(Ipe);CHo=r(Dut,"tapas"),Dut.forEach(t),wHo=r(oke," \u2014 "),_X=n(oke,"A",{href:!0});var Gut=s(_X);AHo=r(Gut,"TapasForQuestionAnswering"),Gut.forEach(t),yHo=r(oke," (TAPAS model)"),oke.forEach(t),jut.forEach(t),LHo=i(fa),tF=n(fa,"P",{});var rke=s(tF);xHo=r(rke,"The model is set in evaluation mode by default using "),qpe=n(rke,"CODE",{});var Out=s(qpe);$Ho=r(Out,"model.eval()"),Out.forEach(t),kHo=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(rke,"CODE",{});var Vut=s(Npe);SHo=r(Vut,"model.train()"),Vut.forEach(t),rke.forEach(t),RHo=i(fa),T(aF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),RNe=i(f),ad=n(f,"H2",{class:!0});var qDe=s(ad);nF=n(qDe,"A",{id:!0,class:!0,href:!0});var Xut=s(nF);jpe=n(Xut,"SPAN",{});var zut=s(jpe);T(eL.$$.fragment,zut),zut.forEach(t),Xut.forEach(t),PHo=i(qDe),Dpe=n(qDe,"SPAN",{});var Wut=s(Dpe);BHo=r(Wut,"AutoModelForImageClassification"),Wut.forEach(t),qDe.forEach(t),PNe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(oL.$$.fragment,Zs),IHo=i(Zs),nd=n(Zs,"P",{});var qZ=s(nd);qHo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=n(qZ,"A",{href:!0});var Qut=s(bX);NHo=r(Qut,"from_pretrained()"),Qut.forEach(t),jHo=r(qZ," class method or the "),vX=n(qZ,"A",{href:!0});var Hut=s(vX);DHo=r(Hut,"from_config()"),Hut.forEach(t),GHo=r(qZ,` class
method.`),qZ.forEach(t),OHo=i(Zs),rL=n(Zs,"P",{});var NDe=s(rL);VHo=r(NDe,"This class cannot be instantiated directly using "),Gpe=n(NDe,"CODE",{});var Uut=s(Gpe);XHo=r(Uut,"__init__()"),Uut.forEach(t),zHo=r(NDe," (throws an error)."),NDe.forEach(t),WHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var Z0=s(ht);T(tL.$$.fragment,Z0),QHo=i(Z0),Ope=n(Z0,"P",{});var Jut=s(Ope);HHo=r(Jut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jut.forEach(t),UHo=i(Z0),sd=n(Z0,"P",{});var NZ=s(sd);JHo=r(NZ,`Note:
Loading a model from its configuration file does `),Vpe=n(NZ,"STRONG",{});var Yut=s(Vpe);YHo=r(Yut,"not"),Yut.forEach(t),KHo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(NZ,"A",{href:!0});var Kut=s(FX);ZHo=r(Kut,"from_pretrained()"),Kut.forEach(t),eUo=r(NZ," to load the model weights."),NZ.forEach(t),oUo=i(Z0),T(sF.$$.fragment,Z0),Z0.forEach(t),rUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(aL.$$.fragment,ma),tUo=i(ma),Xpe=n(ma,"P",{});var Zut=s(Xpe);aUo=r(Zut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zut.forEach(t),nUo=i(ma),ja=n(ma,"P",{});var eA=s(ja);sUo=r(eA,"The model class to instantiate is selected based on the "),zpe=n(eA,"CODE",{});var e_t=s(zpe);lUo=r(e_t,"model_type"),e_t.forEach(t),iUo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(eA,"CODE",{});var o_t=s(Wpe);dUo=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),cUo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(eA,"CODE",{});var r_t=s(Qpe);fUo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),mUo=r(eA,":"),eA.forEach(t),gUo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);lF=n(Te,"LI",{});var tke=s(lF);Hpe=n(tke,"STRONG",{});var t_t=s(Hpe);hUo=r(t_t,"beit"),t_t.forEach(t),pUo=r(tke," \u2014 "),TX=n(tke,"A",{href:!0});var a_t=s(TX);uUo=r(a_t,"BeitForImageClassification"),a_t.forEach(t),_Uo=r(tke," (BEiT model)"),tke.forEach(t),bUo=i(Te),iF=n(Te,"LI",{});var ake=s(iF);Upe=n(ake,"STRONG",{});var n_t=s(Upe);vUo=r(n_t,"convnext"),n_t.forEach(t),FUo=r(ake," \u2014 "),MX=n(ake,"A",{href:!0});var s_t=s(MX);TUo=r(s_t,"ConvNextForImageClassification"),s_t.forEach(t),MUo=r(ake," (ConvNext model)"),ake.forEach(t),EUo=i(Te),dF=n(Te,"LI",{});var nke=s(dF);Jpe=n(nke,"STRONG",{});var l_t=s(Jpe);CUo=r(l_t,"cvt"),l_t.forEach(t),wUo=r(nke," \u2014 "),EX=n(nke,"A",{href:!0});var i_t=s(EX);AUo=r(i_t,"CvtForImageClassification"),i_t.forEach(t),yUo=r(nke," (CvT model)"),nke.forEach(t),LUo=i(Te),cF=n(Te,"LI",{});var ske=s(cF);Ype=n(ske,"STRONG",{});var d_t=s(Ype);xUo=r(d_t,"data2vec-vision"),d_t.forEach(t),$Uo=r(ske," \u2014 "),CX=n(ske,"A",{href:!0});var c_t=s(CX);kUo=r(c_t,"Data2VecVisionForImageClassification"),c_t.forEach(t),SUo=r(ske," (Data2VecVision model)"),ske.forEach(t),RUo=i(Te),Bs=n(Te,"LI",{});var V$=s(Bs);Kpe=n(V$,"STRONG",{});var f_t=s(Kpe);PUo=r(f_t,"deit"),f_t.forEach(t),BUo=r(V$," \u2014 "),wX=n(V$,"A",{href:!0});var m_t=s(wX);IUo=r(m_t,"DeiTForImageClassification"),m_t.forEach(t),qUo=r(V$," or "),AX=n(V$,"A",{href:!0});var g_t=s(AX);NUo=r(g_t,"DeiTForImageClassificationWithTeacher"),g_t.forEach(t),jUo=r(V$," (DeiT model)"),V$.forEach(t),DUo=i(Te),fF=n(Te,"LI",{});var lke=s(fF);Zpe=n(lke,"STRONG",{});var h_t=s(Zpe);GUo=r(h_t,"imagegpt"),h_t.forEach(t),OUo=r(lke," \u2014 "),yX=n(lke,"A",{href:!0});var p_t=s(yX);VUo=r(p_t,"ImageGPTForImageClassification"),p_t.forEach(t),XUo=r(lke," (ImageGPT model)"),lke.forEach(t),zUo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);eue=n(hf,"STRONG",{});var u_t=s(eue);WUo=r(u_t,"perceiver"),u_t.forEach(t),QUo=r(hf," \u2014 "),LX=n(hf,"A",{href:!0});var __t=s(LX);HUo=r(__t,"PerceiverForImageClassificationLearned"),__t.forEach(t),UUo=r(hf," or "),xX=n(hf,"A",{href:!0});var b_t=s(xX);JUo=r(b_t,"PerceiverForImageClassificationFourier"),b_t.forEach(t),YUo=r(hf," or "),$X=n(hf,"A",{href:!0});var v_t=s($X);KUo=r(v_t,"PerceiverForImageClassificationConvProcessing"),v_t.forEach(t),ZUo=r(hf," (Perceiver model)"),hf.forEach(t),eJo=i(Te),mF=n(Te,"LI",{});var ike=s(mF);oue=n(ike,"STRONG",{});var F_t=s(oue);oJo=r(F_t,"poolformer"),F_t.forEach(t),rJo=r(ike," \u2014 "),kX=n(ike,"A",{href:!0});var T_t=s(kX);tJo=r(T_t,"PoolFormerForImageClassification"),T_t.forEach(t),aJo=r(ike," (PoolFormer model)"),ike.forEach(t),nJo=i(Te),gF=n(Te,"LI",{});var dke=s(gF);rue=n(dke,"STRONG",{});var M_t=s(rue);sJo=r(M_t,"regnet"),M_t.forEach(t),lJo=r(dke," \u2014 "),SX=n(dke,"A",{href:!0});var E_t=s(SX);iJo=r(E_t,"RegNetForImageClassification"),E_t.forEach(t),dJo=r(dke," (RegNet model)"),dke.forEach(t),cJo=i(Te),hF=n(Te,"LI",{});var cke=s(hF);tue=n(cke,"STRONG",{});var C_t=s(tue);fJo=r(C_t,"resnet"),C_t.forEach(t),mJo=r(cke," \u2014 "),RX=n(cke,"A",{href:!0});var w_t=s(RX);gJo=r(w_t,"ResNetForImageClassification"),w_t.forEach(t),hJo=r(cke," (ResNet model)"),cke.forEach(t),pJo=i(Te),pF=n(Te,"LI",{});var fke=s(pF);aue=n(fke,"STRONG",{});var A_t=s(aue);uJo=r(A_t,"segformer"),A_t.forEach(t),_Jo=r(fke," \u2014 "),PX=n(fke,"A",{href:!0});var y_t=s(PX);bJo=r(y_t,"SegformerForImageClassification"),y_t.forEach(t),vJo=r(fke," (SegFormer model)"),fke.forEach(t),FJo=i(Te),uF=n(Te,"LI",{});var mke=s(uF);nue=n(mke,"STRONG",{});var L_t=s(nue);TJo=r(L_t,"swin"),L_t.forEach(t),MJo=r(mke," \u2014 "),BX=n(mke,"A",{href:!0});var x_t=s(BX);EJo=r(x_t,"SwinForImageClassification"),x_t.forEach(t),CJo=r(mke," (Swin model)"),mke.forEach(t),wJo=i(Te),_F=n(Te,"LI",{});var gke=s(_F);sue=n(gke,"STRONG",{});var $_t=s(sue);AJo=r($_t,"van"),$_t.forEach(t),yJo=r(gke," \u2014 "),IX=n(gke,"A",{href:!0});var k_t=s(IX);LJo=r(k_t,"VanForImageClassification"),k_t.forEach(t),xJo=r(gke," (VAN model)"),gke.forEach(t),$Jo=i(Te),bF=n(Te,"LI",{});var hke=s(bF);lue=n(hke,"STRONG",{});var S_t=s(lue);kJo=r(S_t,"vit"),S_t.forEach(t),SJo=r(hke," \u2014 "),qX=n(hke,"A",{href:!0});var R_t=s(qX);RJo=r(R_t,"ViTForImageClassification"),R_t.forEach(t),PJo=r(hke," (ViT model)"),hke.forEach(t),Te.forEach(t),BJo=i(ma),vF=n(ma,"P",{});var pke=s(vF);IJo=r(pke,"The model is set in evaluation mode by default using "),iue=n(pke,"CODE",{});var P_t=s(iue);qJo=r(P_t,"model.eval()"),P_t.forEach(t),NJo=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=n(pke,"CODE",{});var B_t=s(due);jJo=r(B_t,"model.train()"),B_t.forEach(t),pke.forEach(t),DJo=i(ma),T(FF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),BNe=i(f),ld=n(f,"H2",{class:!0});var jDe=s(ld);TF=n(jDe,"A",{id:!0,class:!0,href:!0});var I_t=s(TF);cue=n(I_t,"SPAN",{});var q_t=s(cue);T(nL.$$.fragment,q_t),q_t.forEach(t),I_t.forEach(t),GJo=i(jDe),fue=n(jDe,"SPAN",{});var N_t=s(fue);OJo=r(N_t,"AutoModelForVision2Seq"),N_t.forEach(t),jDe.forEach(t),INe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(sL.$$.fragment,el),VJo=i(el),id=n(el,"P",{});var jZ=s(id);XJo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NX=n(jZ,"A",{href:!0});var j_t=s(NX);zJo=r(j_t,"from_pretrained()"),j_t.forEach(t),WJo=r(jZ," class method or the "),jX=n(jZ,"A",{href:!0});var D_t=s(jX);QJo=r(D_t,"from_config()"),D_t.forEach(t),HJo=r(jZ,` class
method.`),jZ.forEach(t),UJo=i(el),lL=n(el,"P",{});var DDe=s(lL);JJo=r(DDe,"This class cannot be instantiated directly using "),mue=n(DDe,"CODE",{});var G_t=s(mue);YJo=r(G_t,"__init__()"),G_t.forEach(t),KJo=r(DDe," (throws an error)."),DDe.forEach(t),ZJo=i(el),ut=n(el,"DIV",{class:!0});var oA=s(ut);T(iL.$$.fragment,oA),eYo=i(oA),gue=n(oA,"P",{});var O_t=s(gue);oYo=r(O_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),O_t.forEach(t),rYo=i(oA),dd=n(oA,"P",{});var DZ=s(dd);tYo=r(DZ,`Note:
Loading a model from its configuration file does `),hue=n(DZ,"STRONG",{});var V_t=s(hue);aYo=r(V_t,"not"),V_t.forEach(t),nYo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(DZ,"A",{href:!0});var X_t=s(DX);sYo=r(X_t,"from_pretrained()"),X_t.forEach(t),lYo=r(DZ," to load the model weights."),DZ.forEach(t),iYo=i(oA),T(MF.$$.fragment,oA),oA.forEach(t),dYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(dL.$$.fragment,ga),cYo=i(ga),pue=n(ga,"P",{});var z_t=s(pue);fYo=r(z_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),z_t.forEach(t),mYo=i(ga),Da=n(ga,"P",{});var rA=s(Da);gYo=r(rA,"The model class to instantiate is selected based on the "),uue=n(rA,"CODE",{});var W_t=s(uue);hYo=r(W_t,"model_type"),W_t.forEach(t),pYo=r(rA,` property of the config object (either
passed as an argument or loaded from `),_ue=n(rA,"CODE",{});var Q_t=s(_ue);uYo=r(Q_t,"pretrained_model_name_or_path"),Q_t.forEach(t),_Yo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(rA,"CODE",{});var H_t=s(bue);bYo=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),vYo=r(rA,":"),rA.forEach(t),FYo=i(ga),vue=n(ga,"UL",{});var U_t=s(vue);EF=n(U_t,"LI",{});var uke=s(EF);Fue=n(uke,"STRONG",{});var J_t=s(Fue);TYo=r(J_t,"vision-encoder-decoder"),J_t.forEach(t),MYo=r(uke," \u2014 "),GX=n(uke,"A",{href:!0});var Y_t=s(GX);EYo=r(Y_t,"VisionEncoderDecoderModel"),Y_t.forEach(t),CYo=r(uke," (Vision Encoder decoder model)"),uke.forEach(t),U_t.forEach(t),wYo=i(ga),CF=n(ga,"P",{});var _ke=s(CF);AYo=r(_ke,"The model is set in evaluation mode by default using "),Tue=n(_ke,"CODE",{});var K_t=s(Tue);yYo=r(K_t,"model.eval()"),K_t.forEach(t),LYo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(_ke,"CODE",{});var Z_t=s(Mue);xYo=r(Z_t,"model.train()"),Z_t.forEach(t),_ke.forEach(t),$Yo=i(ga),T(wF.$$.fragment,ga),ga.forEach(t),el.forEach(t),qNe=i(f),cd=n(f,"H2",{class:!0});var GDe=s(cd);AF=n(GDe,"A",{id:!0,class:!0,href:!0});var e1t=s(AF);Eue=n(e1t,"SPAN",{});var o1t=s(Eue);T(cL.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),kYo=i(GDe),Cue=n(GDe,"SPAN",{});var r1t=s(Cue);SYo=r(r1t,"AutoModelForAudioClassification"),r1t.forEach(t),GDe.forEach(t),NNe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(fL.$$.fragment,ol),RYo=i(ol),fd=n(ol,"P",{});var GZ=s(fd);PYo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OX=n(GZ,"A",{href:!0});var t1t=s(OX);BYo=r(t1t,"from_pretrained()"),t1t.forEach(t),IYo=r(GZ," class method or the "),VX=n(GZ,"A",{href:!0});var a1t=s(VX);qYo=r(a1t,"from_config()"),a1t.forEach(t),NYo=r(GZ,` class
method.`),GZ.forEach(t),jYo=i(ol),mL=n(ol,"P",{});var ODe=s(mL);DYo=r(ODe,"This class cannot be instantiated directly using "),wue=n(ODe,"CODE",{});var n1t=s(wue);GYo=r(n1t,"__init__()"),n1t.forEach(t),OYo=r(ODe," (throws an error)."),ODe.forEach(t),VYo=i(ol),_t=n(ol,"DIV",{class:!0});var tA=s(_t);T(gL.$$.fragment,tA),XYo=i(tA),Aue=n(tA,"P",{});var s1t=s(Aue);zYo=r(s1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),s1t.forEach(t),WYo=i(tA),md=n(tA,"P",{});var OZ=s(md);QYo=r(OZ,`Note:
Loading a model from its configuration file does `),yue=n(OZ,"STRONG",{});var l1t=s(yue);HYo=r(l1t,"not"),l1t.forEach(t),UYo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(OZ,"A",{href:!0});var i1t=s(XX);JYo=r(i1t,"from_pretrained()"),i1t.forEach(t),YYo=r(OZ," to load the model weights."),OZ.forEach(t),KYo=i(tA),T(yF.$$.fragment,tA),tA.forEach(t),ZYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(hL.$$.fragment,ha),eKo=i(ha),Lue=n(ha,"P",{});var d1t=s(Lue);oKo=r(d1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),d1t.forEach(t),rKo=i(ha),Ga=n(ha,"P",{});var aA=s(Ga);tKo=r(aA,"The model class to instantiate is selected based on the "),xue=n(aA,"CODE",{});var c1t=s(xue);aKo=r(c1t,"model_type"),c1t.forEach(t),nKo=r(aA,` property of the config object (either
passed as an argument or loaded from `),$ue=n(aA,"CODE",{});var f1t=s($ue);sKo=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),lKo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(aA,"CODE",{});var m1t=s(kue);iKo=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),dKo=r(aA,":"),aA.forEach(t),cKo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);LF=n(Oe,"LI",{});var bke=s(LF);Sue=n(bke,"STRONG",{});var g1t=s(Sue);fKo=r(g1t,"data2vec-audio"),g1t.forEach(t),mKo=r(bke," \u2014 "),zX=n(bke,"A",{href:!0});var h1t=s(zX);gKo=r(h1t,"Data2VecAudioForSequenceClassification"),h1t.forEach(t),hKo=r(bke," (Data2VecAudio model)"),bke.forEach(t),pKo=i(Oe),xF=n(Oe,"LI",{});var vke=s(xF);Rue=n(vke,"STRONG",{});var p1t=s(Rue);uKo=r(p1t,"hubert"),p1t.forEach(t),_Ko=r(vke," \u2014 "),WX=n(vke,"A",{href:!0});var u1t=s(WX);bKo=r(u1t,"HubertForSequenceClassification"),u1t.forEach(t),vKo=r(vke," (Hubert model)"),vke.forEach(t),FKo=i(Oe),$F=n(Oe,"LI",{});var Fke=s($F);Pue=n(Fke,"STRONG",{});var _1t=s(Pue);TKo=r(_1t,"sew"),_1t.forEach(t),MKo=r(Fke," \u2014 "),QX=n(Fke,"A",{href:!0});var b1t=s(QX);EKo=r(b1t,"SEWForSequenceClassification"),b1t.forEach(t),CKo=r(Fke," (SEW model)"),Fke.forEach(t),wKo=i(Oe),kF=n(Oe,"LI",{});var Tke=s(kF);Bue=n(Tke,"STRONG",{});var v1t=s(Bue);AKo=r(v1t,"sew-d"),v1t.forEach(t),yKo=r(Tke," \u2014 "),HX=n(Tke,"A",{href:!0});var F1t=s(HX);LKo=r(F1t,"SEWDForSequenceClassification"),F1t.forEach(t),xKo=r(Tke," (SEW-D model)"),Tke.forEach(t),$Ko=i(Oe),SF=n(Oe,"LI",{});var Mke=s(SF);Iue=n(Mke,"STRONG",{});var T1t=s(Iue);kKo=r(T1t,"unispeech"),T1t.forEach(t),SKo=r(Mke," \u2014 "),UX=n(Mke,"A",{href:!0});var M1t=s(UX);RKo=r(M1t,"UniSpeechForSequenceClassification"),M1t.forEach(t),PKo=r(Mke," (UniSpeech model)"),Mke.forEach(t),BKo=i(Oe),RF=n(Oe,"LI",{});var Eke=s(RF);que=n(Eke,"STRONG",{});var E1t=s(que);IKo=r(E1t,"unispeech-sat"),E1t.forEach(t),qKo=r(Eke," \u2014 "),JX=n(Eke,"A",{href:!0});var C1t=s(JX);NKo=r(C1t,"UniSpeechSatForSequenceClassification"),C1t.forEach(t),jKo=r(Eke," (UniSpeechSat model)"),Eke.forEach(t),DKo=i(Oe),PF=n(Oe,"LI",{});var Cke=s(PF);Nue=n(Cke,"STRONG",{});var w1t=s(Nue);GKo=r(w1t,"wav2vec2"),w1t.forEach(t),OKo=r(Cke," \u2014 "),YX=n(Cke,"A",{href:!0});var A1t=s(YX);VKo=r(A1t,"Wav2Vec2ForSequenceClassification"),A1t.forEach(t),XKo=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),zKo=i(Oe),BF=n(Oe,"LI",{});var wke=s(BF);jue=n(wke,"STRONG",{});var y1t=s(jue);WKo=r(y1t,"wav2vec2-conformer"),y1t.forEach(t),QKo=r(wke," \u2014 "),KX=n(wke,"A",{href:!0});var L1t=s(KX);HKo=r(L1t,"Wav2Vec2ConformerForSequenceClassification"),L1t.forEach(t),UKo=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),JKo=i(Oe),IF=n(Oe,"LI",{});var Ake=s(IF);Due=n(Ake,"STRONG",{});var x1t=s(Due);YKo=r(x1t,"wavlm"),x1t.forEach(t),KKo=r(Ake," \u2014 "),ZX=n(Ake,"A",{href:!0});var $1t=s(ZX);ZKo=r($1t,"WavLMForSequenceClassification"),$1t.forEach(t),eZo=r(Ake," (WavLM model)"),Ake.forEach(t),Oe.forEach(t),oZo=i(ha),qF=n(ha,"P",{});var yke=s(qF);rZo=r(yke,"The model is set in evaluation mode by default using "),Gue=n(yke,"CODE",{});var k1t=s(Gue);tZo=r(k1t,"model.eval()"),k1t.forEach(t),aZo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(yke,"CODE",{});var S1t=s(Oue);nZo=r(S1t,"model.train()"),S1t.forEach(t),yke.forEach(t),sZo=i(ha),T(NF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),jNe=i(f),gd=n(f,"H2",{class:!0});var VDe=s(gd);jF=n(VDe,"A",{id:!0,class:!0,href:!0});var R1t=s(jF);Vue=n(R1t,"SPAN",{});var P1t=s(Vue);T(pL.$$.fragment,P1t),P1t.forEach(t),R1t.forEach(t),lZo=i(VDe),Xue=n(VDe,"SPAN",{});var B1t=s(Xue);iZo=r(B1t,"AutoModelForAudioFrameClassification"),B1t.forEach(t),VDe.forEach(t),DNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(uL.$$.fragment,rl),dZo=i(rl),hd=n(rl,"P",{});var VZ=s(hd);cZo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ez=n(VZ,"A",{href:!0});var I1t=s(ez);fZo=r(I1t,"from_pretrained()"),I1t.forEach(t),mZo=r(VZ," class method or the "),oz=n(VZ,"A",{href:!0});var q1t=s(oz);gZo=r(q1t,"from_config()"),q1t.forEach(t),hZo=r(VZ,` class
method.`),VZ.forEach(t),pZo=i(rl),_L=n(rl,"P",{});var XDe=s(_L);uZo=r(XDe,"This class cannot be instantiated directly using "),zue=n(XDe,"CODE",{});var N1t=s(zue);_Zo=r(N1t,"__init__()"),N1t.forEach(t),bZo=r(XDe," (throws an error)."),XDe.forEach(t),vZo=i(rl),bt=n(rl,"DIV",{class:!0});var nA=s(bt);T(bL.$$.fragment,nA),FZo=i(nA),Wue=n(nA,"P",{});var j1t=s(Wue);TZo=r(j1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),j1t.forEach(t),MZo=i(nA),pd=n(nA,"P",{});var XZ=s(pd);EZo=r(XZ,`Note:
Loading a model from its configuration file does `),Que=n(XZ,"STRONG",{});var D1t=s(Que);CZo=r(D1t,"not"),D1t.forEach(t),wZo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(XZ,"A",{href:!0});var G1t=s(rz);AZo=r(G1t,"from_pretrained()"),G1t.forEach(t),yZo=r(XZ," to load the model weights."),XZ.forEach(t),LZo=i(nA),T(DF.$$.fragment,nA),nA.forEach(t),xZo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(vL.$$.fragment,pa),$Zo=i(pa),Hue=n(pa,"P",{});var O1t=s(Hue);kZo=r(O1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),O1t.forEach(t),SZo=i(pa),Oa=n(pa,"P",{});var sA=s(Oa);RZo=r(sA,"The model class to instantiate is selected based on the "),Uue=n(sA,"CODE",{});var V1t=s(Uue);PZo=r(V1t,"model_type"),V1t.forEach(t),BZo=r(sA,` property of the config object (either
passed as an argument or loaded from `),Jue=n(sA,"CODE",{});var X1t=s(Jue);IZo=r(X1t,"pretrained_model_name_or_path"),X1t.forEach(t),qZo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(sA,"CODE",{});var z1t=s(Yue);NZo=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),jZo=r(sA,":"),sA.forEach(t),DZo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);GF=n(tl,"LI",{});var Lke=s(GF);Kue=n(Lke,"STRONG",{});var W1t=s(Kue);GZo=r(W1t,"data2vec-audio"),W1t.forEach(t),OZo=r(Lke," \u2014 "),tz=n(Lke,"A",{href:!0});var Q1t=s(tz);VZo=r(Q1t,"Data2VecAudioForAudioFrameClassification"),Q1t.forEach(t),XZo=r(Lke," (Data2VecAudio model)"),Lke.forEach(t),zZo=i(tl),OF=n(tl,"LI",{});var xke=s(OF);Zue=n(xke,"STRONG",{});var H1t=s(Zue);WZo=r(H1t,"unispeech-sat"),H1t.forEach(t),QZo=r(xke," \u2014 "),az=n(xke,"A",{href:!0});var U1t=s(az);HZo=r(U1t,"UniSpeechSatForAudioFrameClassification"),U1t.forEach(t),UZo=r(xke," (UniSpeechSat model)"),xke.forEach(t),JZo=i(tl),VF=n(tl,"LI",{});var $ke=s(VF);e_e=n($ke,"STRONG",{});var J1t=s(e_e);YZo=r(J1t,"wav2vec2"),J1t.forEach(t),KZo=r($ke," \u2014 "),nz=n($ke,"A",{href:!0});var Y1t=s(nz);ZZo=r(Y1t,"Wav2Vec2ForAudioFrameClassification"),Y1t.forEach(t),eer=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),oer=i(tl),XF=n(tl,"LI",{});var kke=s(XF);o_e=n(kke,"STRONG",{});var K1t=s(o_e);rer=r(K1t,"wav2vec2-conformer"),K1t.forEach(t),ter=r(kke," \u2014 "),sz=n(kke,"A",{href:!0});var Z1t=s(sz);aer=r(Z1t,"Wav2Vec2ConformerForAudioFrameClassification"),Z1t.forEach(t),ner=r(kke," (Wav2Vec2-Conformer model)"),kke.forEach(t),ser=i(tl),zF=n(tl,"LI",{});var Ske=s(zF);r_e=n(Ske,"STRONG",{});var e2t=s(r_e);ler=r(e2t,"wavlm"),e2t.forEach(t),ier=r(Ske," \u2014 "),lz=n(Ske,"A",{href:!0});var o2t=s(lz);der=r(o2t,"WavLMForAudioFrameClassification"),o2t.forEach(t),cer=r(Ske," (WavLM model)"),Ske.forEach(t),tl.forEach(t),fer=i(pa),WF=n(pa,"P",{});var Rke=s(WF);mer=r(Rke,"The model is set in evaluation mode by default using "),t_e=n(Rke,"CODE",{});var r2t=s(t_e);ger=r(r2t,"model.eval()"),r2t.forEach(t),her=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(Rke,"CODE",{});var t2t=s(a_e);per=r(t2t,"model.train()"),t2t.forEach(t),Rke.forEach(t),uer=i(pa),T(QF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),GNe=i(f),ud=n(f,"H2",{class:!0});var zDe=s(ud);HF=n(zDe,"A",{id:!0,class:!0,href:!0});var a2t=s(HF);n_e=n(a2t,"SPAN",{});var n2t=s(n_e);T(FL.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),_er=i(zDe),s_e=n(zDe,"SPAN",{});var s2t=s(s_e);ber=r(s2t,"AutoModelForCTC"),s2t.forEach(t),zDe.forEach(t),ONe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(TL.$$.fragment,al),ver=i(al),_d=n(al,"P",{});var zZ=s(_d);Fer=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iz=n(zZ,"A",{href:!0});var l2t=s(iz);Ter=r(l2t,"from_pretrained()"),l2t.forEach(t),Mer=r(zZ," class method or the "),dz=n(zZ,"A",{href:!0});var i2t=s(dz);Eer=r(i2t,"from_config()"),i2t.forEach(t),Cer=r(zZ,` class
method.`),zZ.forEach(t),wer=i(al),ML=n(al,"P",{});var WDe=s(ML);Aer=r(WDe,"This class cannot be instantiated directly using "),l_e=n(WDe,"CODE",{});var d2t=s(l_e);yer=r(d2t,"__init__()"),d2t.forEach(t),Ler=r(WDe," (throws an error)."),WDe.forEach(t),xer=i(al),vt=n(al,"DIV",{class:!0});var lA=s(vt);T(EL.$$.fragment,lA),$er=i(lA),i_e=n(lA,"P",{});var c2t=s(i_e);ker=r(c2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),c2t.forEach(t),Ser=i(lA),bd=n(lA,"P",{});var WZ=s(bd);Rer=r(WZ,`Note:
Loading a model from its configuration file does `),d_e=n(WZ,"STRONG",{});var f2t=s(d_e);Per=r(f2t,"not"),f2t.forEach(t),Ber=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(WZ,"A",{href:!0});var m2t=s(cz);Ier=r(m2t,"from_pretrained()"),m2t.forEach(t),qer=r(WZ," to load the model weights."),WZ.forEach(t),Ner=i(lA),T(UF.$$.fragment,lA),lA.forEach(t),jer=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(CL.$$.fragment,ua),Der=i(ua),c_e=n(ua,"P",{});var g2t=s(c_e);Ger=r(g2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),g2t.forEach(t),Oer=i(ua),Va=n(ua,"P",{});var iA=s(Va);Ver=r(iA,"The model class to instantiate is selected based on the "),f_e=n(iA,"CODE",{});var h2t=s(f_e);Xer=r(h2t,"model_type"),h2t.forEach(t),zer=r(iA,` property of the config object (either
passed as an argument or loaded from `),m_e=n(iA,"CODE",{});var p2t=s(m_e);Wer=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),Qer=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(iA,"CODE",{});var u2t=s(g_e);Her=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),Uer=r(iA,":"),iA.forEach(t),Jer=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);JF=n(Ve,"LI",{});var Pke=s(JF);h_e=n(Pke,"STRONG",{});var _2t=s(h_e);Yer=r(_2t,"data2vec-audio"),_2t.forEach(t),Ker=r(Pke," \u2014 "),fz=n(Pke,"A",{href:!0});var b2t=s(fz);Zer=r(b2t,"Data2VecAudioForCTC"),b2t.forEach(t),eor=r(Pke," (Data2VecAudio model)"),Pke.forEach(t),oor=i(Ve),YF=n(Ve,"LI",{});var Bke=s(YF);p_e=n(Bke,"STRONG",{});var v2t=s(p_e);ror=r(v2t,"hubert"),v2t.forEach(t),tor=r(Bke," \u2014 "),mz=n(Bke,"A",{href:!0});var F2t=s(mz);aor=r(F2t,"HubertForCTC"),F2t.forEach(t),nor=r(Bke," (Hubert model)"),Bke.forEach(t),sor=i(Ve),KF=n(Ve,"LI",{});var Ike=s(KF);u_e=n(Ike,"STRONG",{});var T2t=s(u_e);lor=r(T2t,"sew"),T2t.forEach(t),ior=r(Ike," \u2014 "),gz=n(Ike,"A",{href:!0});var M2t=s(gz);dor=r(M2t,"SEWForCTC"),M2t.forEach(t),cor=r(Ike," (SEW model)"),Ike.forEach(t),mor=i(Ve),ZF=n(Ve,"LI",{});var qke=s(ZF);__e=n(qke,"STRONG",{});var E2t=s(__e);gor=r(E2t,"sew-d"),E2t.forEach(t),hor=r(qke," \u2014 "),hz=n(qke,"A",{href:!0});var C2t=s(hz);por=r(C2t,"SEWDForCTC"),C2t.forEach(t),uor=r(qke," (SEW-D model)"),qke.forEach(t),_or=i(Ve),eT=n(Ve,"LI",{});var Nke=s(eT);b_e=n(Nke,"STRONG",{});var w2t=s(b_e);bor=r(w2t,"unispeech"),w2t.forEach(t),vor=r(Nke," \u2014 "),pz=n(Nke,"A",{href:!0});var A2t=s(pz);For=r(A2t,"UniSpeechForCTC"),A2t.forEach(t),Tor=r(Nke," (UniSpeech model)"),Nke.forEach(t),Mor=i(Ve),oT=n(Ve,"LI",{});var jke=s(oT);v_e=n(jke,"STRONG",{});var y2t=s(v_e);Eor=r(y2t,"unispeech-sat"),y2t.forEach(t),Cor=r(jke," \u2014 "),uz=n(jke,"A",{href:!0});var L2t=s(uz);wor=r(L2t,"UniSpeechSatForCTC"),L2t.forEach(t),Aor=r(jke," (UniSpeechSat model)"),jke.forEach(t),yor=i(Ve),rT=n(Ve,"LI",{});var Dke=s(rT);F_e=n(Dke,"STRONG",{});var x2t=s(F_e);Lor=r(x2t,"wav2vec2"),x2t.forEach(t),xor=r(Dke," \u2014 "),_z=n(Dke,"A",{href:!0});var $2t=s(_z);$or=r($2t,"Wav2Vec2ForCTC"),$2t.forEach(t),kor=r(Dke," (Wav2Vec2 model)"),Dke.forEach(t),Sor=i(Ve),tT=n(Ve,"LI",{});var Gke=s(tT);T_e=n(Gke,"STRONG",{});var k2t=s(T_e);Ror=r(k2t,"wav2vec2-conformer"),k2t.forEach(t),Por=r(Gke," \u2014 "),bz=n(Gke,"A",{href:!0});var S2t=s(bz);Bor=r(S2t,"Wav2Vec2ConformerForCTC"),S2t.forEach(t),Ior=r(Gke," (Wav2Vec2-Conformer model)"),Gke.forEach(t),qor=i(Ve),aT=n(Ve,"LI",{});var Oke=s(aT);M_e=n(Oke,"STRONG",{});var R2t=s(M_e);Nor=r(R2t,"wavlm"),R2t.forEach(t),jor=r(Oke," \u2014 "),vz=n(Oke,"A",{href:!0});var P2t=s(vz);Dor=r(P2t,"WavLMForCTC"),P2t.forEach(t),Gor=r(Oke," (WavLM model)"),Oke.forEach(t),Ve.forEach(t),Oor=i(ua),nT=n(ua,"P",{});var Vke=s(nT);Vor=r(Vke,"The model is set in evaluation mode by default using "),E_e=n(Vke,"CODE",{});var B2t=s(E_e);Xor=r(B2t,"model.eval()"),B2t.forEach(t),zor=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(Vke,"CODE",{});var I2t=s(C_e);Wor=r(I2t,"model.train()"),I2t.forEach(t),Vke.forEach(t),Qor=i(ua),T(sT.$$.fragment,ua),ua.forEach(t),al.forEach(t),VNe=i(f),vd=n(f,"H2",{class:!0});var QDe=s(vd);lT=n(QDe,"A",{id:!0,class:!0,href:!0});var q2t=s(lT);w_e=n(q2t,"SPAN",{});var N2t=s(w_e);T(wL.$$.fragment,N2t),N2t.forEach(t),q2t.forEach(t),Hor=i(QDe),A_e=n(QDe,"SPAN",{});var j2t=s(A_e);Uor=r(j2t,"AutoModelForSpeechSeq2Seq"),j2t.forEach(t),QDe.forEach(t),XNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(AL.$$.fragment,nl),Jor=i(nl),Fd=n(nl,"P",{});var QZ=s(Fd);Yor=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fz=n(QZ,"A",{href:!0});var D2t=s(Fz);Kor=r(D2t,"from_pretrained()"),D2t.forEach(t),Zor=r(QZ," class method or the "),Tz=n(QZ,"A",{href:!0});var G2t=s(Tz);err=r(G2t,"from_config()"),G2t.forEach(t),orr=r(QZ,` class
method.`),QZ.forEach(t),rrr=i(nl),yL=n(nl,"P",{});var HDe=s(yL);trr=r(HDe,"This class cannot be instantiated directly using "),y_e=n(HDe,"CODE",{});var O2t=s(y_e);arr=r(O2t,"__init__()"),O2t.forEach(t),nrr=r(HDe," (throws an error)."),HDe.forEach(t),srr=i(nl),Ft=n(nl,"DIV",{class:!0});var dA=s(Ft);T(LL.$$.fragment,dA),lrr=i(dA),L_e=n(dA,"P",{});var V2t=s(L_e);irr=r(V2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),V2t.forEach(t),drr=i(dA),Td=n(dA,"P",{});var HZ=s(Td);crr=r(HZ,`Note:
Loading a model from its configuration file does `),x_e=n(HZ,"STRONG",{});var X2t=s(x_e);frr=r(X2t,"not"),X2t.forEach(t),mrr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(HZ,"A",{href:!0});var z2t=s(Mz);grr=r(z2t,"from_pretrained()"),z2t.forEach(t),hrr=r(HZ," to load the model weights."),HZ.forEach(t),prr=i(dA),T(iT.$$.fragment,dA),dA.forEach(t),urr=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(xL.$$.fragment,_a),_rr=i(_a),$_e=n(_a,"P",{});var W2t=s($_e);brr=r(W2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W2t.forEach(t),vrr=i(_a),Xa=n(_a,"P",{});var cA=s(Xa);Frr=r(cA,"The model class to instantiate is selected based on the "),k_e=n(cA,"CODE",{});var Q2t=s(k_e);Trr=r(Q2t,"model_type"),Q2t.forEach(t),Mrr=r(cA,` property of the config object (either
passed as an argument or loaded from `),S_e=n(cA,"CODE",{});var H2t=s(S_e);Err=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),Crr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(cA,"CODE",{});var U2t=s(R_e);wrr=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),Arr=r(cA,":"),cA.forEach(t),yrr=i(_a),$L=n(_a,"UL",{});var UDe=s($L);dT=n(UDe,"LI",{});var Xke=s(dT);P_e=n(Xke,"STRONG",{});var J2t=s(P_e);Lrr=r(J2t,"speech-encoder-decoder"),J2t.forEach(t),xrr=r(Xke," \u2014 "),Ez=n(Xke,"A",{href:!0});var Y2t=s(Ez);$rr=r(Y2t,"SpeechEncoderDecoderModel"),Y2t.forEach(t),krr=r(Xke," (Speech Encoder decoder model)"),Xke.forEach(t),Srr=i(UDe),cT=n(UDe,"LI",{});var zke=s(cT);B_e=n(zke,"STRONG",{});var K2t=s(B_e);Rrr=r(K2t,"speech_to_text"),K2t.forEach(t),Prr=r(zke," \u2014 "),Cz=n(zke,"A",{href:!0});var Z2t=s(Cz);Brr=r(Z2t,"Speech2TextForConditionalGeneration"),Z2t.forEach(t),Irr=r(zke," (Speech2Text model)"),zke.forEach(t),UDe.forEach(t),qrr=i(_a),fT=n(_a,"P",{});var Wke=s(fT);Nrr=r(Wke,"The model is set in evaluation mode by default using "),I_e=n(Wke,"CODE",{});var ebt=s(I_e);jrr=r(ebt,"model.eval()"),ebt.forEach(t),Drr=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(Wke,"CODE",{});var obt=s(q_e);Grr=r(obt,"model.train()"),obt.forEach(t),Wke.forEach(t),Orr=i(_a),T(mT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),zNe=i(f),Md=n(f,"H2",{class:!0});var JDe=s(Md);gT=n(JDe,"A",{id:!0,class:!0,href:!0});var rbt=s(gT);N_e=n(rbt,"SPAN",{});var tbt=s(N_e);T(kL.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),Vrr=i(JDe),j_e=n(JDe,"SPAN",{});var abt=s(j_e);Xrr=r(abt,"AutoModelForAudioXVector"),abt.forEach(t),JDe.forEach(t),WNe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(SL.$$.fragment,sl),zrr=i(sl),Ed=n(sl,"P",{});var UZ=s(Ed);Wrr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wz=n(UZ,"A",{href:!0});var nbt=s(wz);Qrr=r(nbt,"from_pretrained()"),nbt.forEach(t),Hrr=r(UZ," class method or the "),Az=n(UZ,"A",{href:!0});var sbt=s(Az);Urr=r(sbt,"from_config()"),sbt.forEach(t),Jrr=r(UZ,` class
method.`),UZ.forEach(t),Yrr=i(sl),RL=n(sl,"P",{});var YDe=s(RL);Krr=r(YDe,"This class cannot be instantiated directly using "),D_e=n(YDe,"CODE",{});var lbt=s(D_e);Zrr=r(lbt,"__init__()"),lbt.forEach(t),etr=r(YDe," (throws an error)."),YDe.forEach(t),otr=i(sl),Tt=n(sl,"DIV",{class:!0});var fA=s(Tt);T(PL.$$.fragment,fA),rtr=i(fA),G_e=n(fA,"P",{});var ibt=s(G_e);ttr=r(ibt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ibt.forEach(t),atr=i(fA),Cd=n(fA,"P",{});var JZ=s(Cd);ntr=r(JZ,`Note:
Loading a model from its configuration file does `),O_e=n(JZ,"STRONG",{});var dbt=s(O_e);str=r(dbt,"not"),dbt.forEach(t),ltr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(JZ,"A",{href:!0});var cbt=s(yz);itr=r(cbt,"from_pretrained()"),cbt.forEach(t),dtr=r(JZ," to load the model weights."),JZ.forEach(t),ctr=i(fA),T(hT.$$.fragment,fA),fA.forEach(t),ftr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(BL.$$.fragment,ba),mtr=i(ba),V_e=n(ba,"P",{});var fbt=s(V_e);gtr=r(fbt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fbt.forEach(t),htr=i(ba),za=n(ba,"P",{});var mA=s(za);ptr=r(mA,"The model class to instantiate is selected based on the "),X_e=n(mA,"CODE",{});var mbt=s(X_e);utr=r(mbt,"model_type"),mbt.forEach(t),_tr=r(mA,` property of the config object (either
passed as an argument or loaded from `),z_e=n(mA,"CODE",{});var gbt=s(z_e);btr=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),vtr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(mA,"CODE",{});var hbt=s(W_e);Ftr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),Ttr=r(mA,":"),mA.forEach(t),Mtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);pT=n(ll,"LI",{});var Qke=s(pT);Q_e=n(Qke,"STRONG",{});var pbt=s(Q_e);Etr=r(pbt,"data2vec-audio"),pbt.forEach(t),Ctr=r(Qke," \u2014 "),Lz=n(Qke,"A",{href:!0});var ubt=s(Lz);wtr=r(ubt,"Data2VecAudioForXVector"),ubt.forEach(t),Atr=r(Qke," (Data2VecAudio model)"),Qke.forEach(t),ytr=i(ll),uT=n(ll,"LI",{});var Hke=s(uT);H_e=n(Hke,"STRONG",{});var _bt=s(H_e);Ltr=r(_bt,"unispeech-sat"),_bt.forEach(t),xtr=r(Hke," \u2014 "),xz=n(Hke,"A",{href:!0});var bbt=s(xz);$tr=r(bbt,"UniSpeechSatForXVector"),bbt.forEach(t),ktr=r(Hke," (UniSpeechSat model)"),Hke.forEach(t),Str=i(ll),_T=n(ll,"LI",{});var Uke=s(_T);U_e=n(Uke,"STRONG",{});var vbt=s(U_e);Rtr=r(vbt,"wav2vec2"),vbt.forEach(t),Ptr=r(Uke," \u2014 "),$z=n(Uke,"A",{href:!0});var Fbt=s($z);Btr=r(Fbt,"Wav2Vec2ForXVector"),Fbt.forEach(t),Itr=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),qtr=i(ll),bT=n(ll,"LI",{});var Jke=s(bT);J_e=n(Jke,"STRONG",{});var Tbt=s(J_e);Ntr=r(Tbt,"wav2vec2-conformer"),Tbt.forEach(t),jtr=r(Jke," \u2014 "),kz=n(Jke,"A",{href:!0});var Mbt=s(kz);Dtr=r(Mbt,"Wav2Vec2ConformerForXVector"),Mbt.forEach(t),Gtr=r(Jke," (Wav2Vec2-Conformer model)"),Jke.forEach(t),Otr=i(ll),vT=n(ll,"LI",{});var Yke=s(vT);Y_e=n(Yke,"STRONG",{});var Ebt=s(Y_e);Vtr=r(Ebt,"wavlm"),Ebt.forEach(t),Xtr=r(Yke," \u2014 "),Sz=n(Yke,"A",{href:!0});var Cbt=s(Sz);ztr=r(Cbt,"WavLMForXVector"),Cbt.forEach(t),Wtr=r(Yke," (WavLM model)"),Yke.forEach(t),ll.forEach(t),Qtr=i(ba),FT=n(ba,"P",{});var Kke=s(FT);Htr=r(Kke,"The model is set in evaluation mode by default using "),K_e=n(Kke,"CODE",{});var wbt=s(K_e);Utr=r(wbt,"model.eval()"),wbt.forEach(t),Jtr=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Kke,"CODE",{});var Abt=s(Z_e);Ytr=r(Abt,"model.train()"),Abt.forEach(t),Kke.forEach(t),Ktr=i(ba),T(TT.$$.fragment,ba),ba.forEach(t),sl.forEach(t),QNe=i(f),wd=n(f,"H2",{class:!0});var KDe=s(wd);MT=n(KDe,"A",{id:!0,class:!0,href:!0});var ybt=s(MT);e1e=n(ybt,"SPAN",{});var Lbt=s(e1e);T(IL.$$.fragment,Lbt),Lbt.forEach(t),ybt.forEach(t),Ztr=i(KDe),o1e=n(KDe,"SPAN",{});var xbt=s(o1e);ear=r(xbt,"AutoModelForMaskedImageModeling"),xbt.forEach(t),KDe.forEach(t),HNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(qL.$$.fragment,il),oar=i(il),Ad=n(il,"P",{});var YZ=s(Ad);rar=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rz=n(YZ,"A",{href:!0});var $bt=s(Rz);tar=r($bt,"from_pretrained()"),$bt.forEach(t),aar=r(YZ," class method or the "),Pz=n(YZ,"A",{href:!0});var kbt=s(Pz);nar=r(kbt,"from_config()"),kbt.forEach(t),sar=r(YZ,` class
method.`),YZ.forEach(t),lar=i(il),NL=n(il,"P",{});var ZDe=s(NL);iar=r(ZDe,"This class cannot be instantiated directly using "),r1e=n(ZDe,"CODE",{});var Sbt=s(r1e);dar=r(Sbt,"__init__()"),Sbt.forEach(t),car=r(ZDe," (throws an error)."),ZDe.forEach(t),far=i(il),Mt=n(il,"DIV",{class:!0});var gA=s(Mt);T(jL.$$.fragment,gA),mar=i(gA),t1e=n(gA,"P",{});var Rbt=s(t1e);gar=r(Rbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rbt.forEach(t),har=i(gA),yd=n(gA,"P",{});var KZ=s(yd);par=r(KZ,`Note:
Loading a model from its configuration file does `),a1e=n(KZ,"STRONG",{});var Pbt=s(a1e);uar=r(Pbt,"not"),Pbt.forEach(t),_ar=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(KZ,"A",{href:!0});var Bbt=s(Bz);bar=r(Bbt,"from_pretrained()"),Bbt.forEach(t),Far=r(KZ," to load the model weights."),KZ.forEach(t),Tar=i(gA),T(ET.$$.fragment,gA),gA.forEach(t),Mar=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(DL.$$.fragment,va),Ear=i(va),n1e=n(va,"P",{});var Ibt=s(n1e);Car=r(Ibt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ibt.forEach(t),war=i(va),Wa=n(va,"P",{});var hA=s(Wa);Aar=r(hA,"The model class to instantiate is selected based on the "),s1e=n(hA,"CODE",{});var qbt=s(s1e);yar=r(qbt,"model_type"),qbt.forEach(t),Lar=r(hA,` property of the config object (either
passed as an argument or loaded from `),l1e=n(hA,"CODE",{});var Nbt=s(l1e);xar=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),$ar=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(hA,"CODE",{});var jbt=s(i1e);kar=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),Sar=r(hA,":"),hA.forEach(t),Rar=i(va),Ld=n(va,"UL",{});var ZZ=s(Ld);CT=n(ZZ,"LI",{});var Zke=s(CT);d1e=n(Zke,"STRONG",{});var Dbt=s(d1e);Par=r(Dbt,"deit"),Dbt.forEach(t),Bar=r(Zke," \u2014 "),Iz=n(Zke,"A",{href:!0});var Gbt=s(Iz);Iar=r(Gbt,"DeiTForMaskedImageModeling"),Gbt.forEach(t),qar=r(Zke," (DeiT model)"),Zke.forEach(t),Nar=i(ZZ),wT=n(ZZ,"LI",{});var eSe=s(wT);c1e=n(eSe,"STRONG",{});var Obt=s(c1e);jar=r(Obt,"swin"),Obt.forEach(t),Dar=r(eSe," \u2014 "),qz=n(eSe,"A",{href:!0});var Vbt=s(qz);Gar=r(Vbt,"SwinForMaskedImageModeling"),Vbt.forEach(t),Oar=r(eSe," (Swin model)"),eSe.forEach(t),Var=i(ZZ),AT=n(ZZ,"LI",{});var oSe=s(AT);f1e=n(oSe,"STRONG",{});var Xbt=s(f1e);Xar=r(Xbt,"vit"),Xbt.forEach(t),zar=r(oSe," \u2014 "),Nz=n(oSe,"A",{href:!0});var zbt=s(Nz);War=r(zbt,"ViTForMaskedImageModeling"),zbt.forEach(t),Qar=r(oSe," (ViT model)"),oSe.forEach(t),ZZ.forEach(t),Har=i(va),yT=n(va,"P",{});var rSe=s(yT);Uar=r(rSe,"The model is set in evaluation mode by default using "),m1e=n(rSe,"CODE",{});var Wbt=s(m1e);Jar=r(Wbt,"model.eval()"),Wbt.forEach(t),Yar=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=n(rSe,"CODE",{});var Qbt=s(g1e);Kar=r(Qbt,"model.train()"),Qbt.forEach(t),rSe.forEach(t),Zar=i(va),T(LT.$$.fragment,va),va.forEach(t),il.forEach(t),UNe=i(f),xd=n(f,"H2",{class:!0});var eGe=s(xd);xT=n(eGe,"A",{id:!0,class:!0,href:!0});var Hbt=s(xT);h1e=n(Hbt,"SPAN",{});var Ubt=s(h1e);T(GL.$$.fragment,Ubt),Ubt.forEach(t),Hbt.forEach(t),enr=i(eGe),p1e=n(eGe,"SPAN",{});var Jbt=s(p1e);onr=r(Jbt,"AutoModelForObjectDetection"),Jbt.forEach(t),eGe.forEach(t),JNe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(OL.$$.fragment,dl),rnr=i(dl),$d=n(dl,"P",{});var eee=s($d);tnr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jz=n(eee,"A",{href:!0});var Ybt=s(jz);anr=r(Ybt,"from_pretrained()"),Ybt.forEach(t),nnr=r(eee," class method or the "),Dz=n(eee,"A",{href:!0});var Kbt=s(Dz);snr=r(Kbt,"from_config()"),Kbt.forEach(t),lnr=r(eee,` class
method.`),eee.forEach(t),inr=i(dl),VL=n(dl,"P",{});var oGe=s(VL);dnr=r(oGe,"This class cannot be instantiated directly using "),u1e=n(oGe,"CODE",{});var Zbt=s(u1e);cnr=r(Zbt,"__init__()"),Zbt.forEach(t),fnr=r(oGe," (throws an error)."),oGe.forEach(t),mnr=i(dl),Et=n(dl,"DIV",{class:!0});var pA=s(Et);T(XL.$$.fragment,pA),gnr=i(pA),_1e=n(pA,"P",{});var evt=s(_1e);hnr=r(evt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),evt.forEach(t),pnr=i(pA),kd=n(pA,"P",{});var oee=s(kd);unr=r(oee,`Note:
Loading a model from its configuration file does `),b1e=n(oee,"STRONG",{});var ovt=s(b1e);_nr=r(ovt,"not"),ovt.forEach(t),bnr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(oee,"A",{href:!0});var rvt=s(Gz);vnr=r(rvt,"from_pretrained()"),rvt.forEach(t),Fnr=r(oee," to load the model weights."),oee.forEach(t),Tnr=i(pA),T($T.$$.fragment,pA),pA.forEach(t),Mnr=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(zL.$$.fragment,Fa),Enr=i(Fa),v1e=n(Fa,"P",{});var tvt=s(v1e);Cnr=r(tvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tvt.forEach(t),wnr=i(Fa),Qa=n(Fa,"P",{});var uA=s(Qa);Anr=r(uA,"The model class to instantiate is selected based on the "),F1e=n(uA,"CODE",{});var avt=s(F1e);ynr=r(avt,"model_type"),avt.forEach(t),Lnr=r(uA,` property of the config object (either
passed as an argument or loaded from `),T1e=n(uA,"CODE",{});var nvt=s(T1e);xnr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),$nr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(uA,"CODE",{});var svt=s(M1e);knr=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),Snr=r(uA,":"),uA.forEach(t),Rnr=i(Fa),WL=n(Fa,"UL",{});var rGe=s(WL);kT=n(rGe,"LI",{});var tSe=s(kT);E1e=n(tSe,"STRONG",{});var lvt=s(E1e);Pnr=r(lvt,"detr"),lvt.forEach(t),Bnr=r(tSe," \u2014 "),Oz=n(tSe,"A",{href:!0});var ivt=s(Oz);Inr=r(ivt,"DetrForObjectDetection"),ivt.forEach(t),qnr=r(tSe," (DETR model)"),tSe.forEach(t),Nnr=i(rGe),ST=n(rGe,"LI",{});var aSe=s(ST);C1e=n(aSe,"STRONG",{});var dvt=s(C1e);jnr=r(dvt,"yolos"),dvt.forEach(t),Dnr=r(aSe," \u2014 "),Vz=n(aSe,"A",{href:!0});var cvt=s(Vz);Gnr=r(cvt,"YolosForObjectDetection"),cvt.forEach(t),Onr=r(aSe," (YOLOS model)"),aSe.forEach(t),rGe.forEach(t),Vnr=i(Fa),RT=n(Fa,"P",{});var nSe=s(RT);Xnr=r(nSe,"The model is set in evaluation mode by default using "),w1e=n(nSe,"CODE",{});var fvt=s(w1e);znr=r(fvt,"model.eval()"),fvt.forEach(t),Wnr=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=n(nSe,"CODE",{});var mvt=s(A1e);Qnr=r(mvt,"model.train()"),mvt.forEach(t),nSe.forEach(t),Hnr=i(Fa),T(PT.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),YNe=i(f),Sd=n(f,"H2",{class:!0});var tGe=s(Sd);BT=n(tGe,"A",{id:!0,class:!0,href:!0});var gvt=s(BT);y1e=n(gvt,"SPAN",{});var hvt=s(y1e);T(QL.$$.fragment,hvt),hvt.forEach(t),gvt.forEach(t),Unr=i(tGe),L1e=n(tGe,"SPAN",{});var pvt=s(L1e);Jnr=r(pvt,"AutoModelForImageSegmentation"),pvt.forEach(t),tGe.forEach(t),KNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(HL.$$.fragment,cl),Ynr=i(cl),Rd=n(cl,"P",{});var ree=s(Rd);Knr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xz=n(ree,"A",{href:!0});var uvt=s(Xz);Znr=r(uvt,"from_pretrained()"),uvt.forEach(t),esr=r(ree," class method or the "),zz=n(ree,"A",{href:!0});var _vt=s(zz);osr=r(_vt,"from_config()"),_vt.forEach(t),rsr=r(ree,` class
method.`),ree.forEach(t),tsr=i(cl),UL=n(cl,"P",{});var aGe=s(UL);asr=r(aGe,"This class cannot be instantiated directly using "),x1e=n(aGe,"CODE",{});var bvt=s(x1e);nsr=r(bvt,"__init__()"),bvt.forEach(t),ssr=r(aGe," (throws an error)."),aGe.forEach(t),lsr=i(cl),Ct=n(cl,"DIV",{class:!0});var _A=s(Ct);T(JL.$$.fragment,_A),isr=i(_A),$1e=n(_A,"P",{});var vvt=s($1e);dsr=r(vvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vvt.forEach(t),csr=i(_A),Pd=n(_A,"P",{});var tee=s(Pd);fsr=r(tee,`Note:
Loading a model from its configuration file does `),k1e=n(tee,"STRONG",{});var Fvt=s(k1e);msr=r(Fvt,"not"),Fvt.forEach(t),gsr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(tee,"A",{href:!0});var Tvt=s(Wz);hsr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),psr=r(tee," to load the model weights."),tee.forEach(t),usr=i(_A),T(IT.$$.fragment,_A),_A.forEach(t),_sr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(YL.$$.fragment,Ta),bsr=i(Ta),S1e=n(Ta,"P",{});var Mvt=s(S1e);vsr=r(Mvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Mvt.forEach(t),Fsr=i(Ta),Ha=n(Ta,"P",{});var bA=s(Ha);Tsr=r(bA,"The model class to instantiate is selected based on the "),R1e=n(bA,"CODE",{});var Evt=s(R1e);Msr=r(Evt,"model_type"),Evt.forEach(t),Esr=r(bA,` property of the config object (either
passed as an argument or loaded from `),P1e=n(bA,"CODE",{});var Cvt=s(P1e);Csr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),wsr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=n(bA,"CODE",{});var wvt=s(B1e);Asr=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),ysr=r(bA,":"),bA.forEach(t),Lsr=i(Ta),I1e=n(Ta,"UL",{});var Avt=s(I1e);qT=n(Avt,"LI",{});var sSe=s(qT);q1e=n(sSe,"STRONG",{});var yvt=s(q1e);xsr=r(yvt,"detr"),yvt.forEach(t),$sr=r(sSe," \u2014 "),Qz=n(sSe,"A",{href:!0});var Lvt=s(Qz);ksr=r(Lvt,"DetrForSegmentation"),Lvt.forEach(t),Ssr=r(sSe," (DETR model)"),sSe.forEach(t),Avt.forEach(t),Rsr=i(Ta),NT=n(Ta,"P",{});var lSe=s(NT);Psr=r(lSe,"The model is set in evaluation mode by default using "),N1e=n(lSe,"CODE",{});var xvt=s(N1e);Bsr=r(xvt,"model.eval()"),xvt.forEach(t),Isr=r(lSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=n(lSe,"CODE",{});var $vt=s(j1e);qsr=r($vt,"model.train()"),$vt.forEach(t),lSe.forEach(t),Nsr=i(Ta),T(jT.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),ZNe=i(f),Bd=n(f,"H2",{class:!0});var nGe=s(Bd);DT=n(nGe,"A",{id:!0,class:!0,href:!0});var kvt=s(DT);D1e=n(kvt,"SPAN",{});var Svt=s(D1e);T(KL.$$.fragment,Svt),Svt.forEach(t),kvt.forEach(t),jsr=i(nGe),G1e=n(nGe,"SPAN",{});var Rvt=s(G1e);Dsr=r(Rvt,"AutoModelForSemanticSegmentation"),Rvt.forEach(t),nGe.forEach(t),eje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(ZL.$$.fragment,fl),Gsr=i(fl),Id=n(fl,"P",{});var aee=s(Id);Osr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Hz=n(aee,"A",{href:!0});var Pvt=s(Hz);Vsr=r(Pvt,"from_pretrained()"),Pvt.forEach(t),Xsr=r(aee," class method or the "),Uz=n(aee,"A",{href:!0});var Bvt=s(Uz);zsr=r(Bvt,"from_config()"),Bvt.forEach(t),Wsr=r(aee,` class
method.`),aee.forEach(t),Qsr=i(fl),e8=n(fl,"P",{});var sGe=s(e8);Hsr=r(sGe,"This class cannot be instantiated directly using "),O1e=n(sGe,"CODE",{});var Ivt=s(O1e);Usr=r(Ivt,"__init__()"),Ivt.forEach(t),Jsr=r(sGe," (throws an error)."),sGe.forEach(t),Ysr=i(fl),wt=n(fl,"DIV",{class:!0});var vA=s(wt);T(o8.$$.fragment,vA),Ksr=i(vA),V1e=n(vA,"P",{});var qvt=s(V1e);Zsr=r(qvt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qvt.forEach(t),elr=i(vA),qd=n(vA,"P",{});var nee=s(qd);olr=r(nee,`Note:
Loading a model from its configuration file does `),X1e=n(nee,"STRONG",{});var Nvt=s(X1e);rlr=r(Nvt,"not"),Nvt.forEach(t),tlr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(nee,"A",{href:!0});var jvt=s(Jz);alr=r(jvt,"from_pretrained()"),jvt.forEach(t),nlr=r(nee," to load the model weights."),nee.forEach(t),slr=i(vA),T(GT.$$.fragment,vA),vA.forEach(t),llr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(r8.$$.fragment,Ma),ilr=i(Ma),z1e=n(Ma,"P",{});var Dvt=s(z1e);dlr=r(Dvt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dvt.forEach(t),clr=i(Ma),Ua=n(Ma,"P",{});var FA=s(Ua);flr=r(FA,"The model class to instantiate is selected based on the "),W1e=n(FA,"CODE",{});var Gvt=s(W1e);mlr=r(Gvt,"model_type"),Gvt.forEach(t),glr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(FA,"CODE",{});var Ovt=s(Q1e);hlr=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),plr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(FA,"CODE",{});var Vvt=s(H1e);ulr=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),_lr=r(FA,":"),FA.forEach(t),blr=i(Ma),Ja=n(Ma,"UL",{});var TA=s(Ja);OT=n(TA,"LI",{});var iSe=s(OT);U1e=n(iSe,"STRONG",{});var Xvt=s(U1e);vlr=r(Xvt,"beit"),Xvt.forEach(t),Flr=r(iSe," \u2014 "),Yz=n(iSe,"A",{href:!0});var zvt=s(Yz);Tlr=r(zvt,"BeitForSemanticSegmentation"),zvt.forEach(t),Mlr=r(iSe," (BEiT model)"),iSe.forEach(t),Elr=i(TA),VT=n(TA,"LI",{});var dSe=s(VT);J1e=n(dSe,"STRONG",{});var Wvt=s(J1e);Clr=r(Wvt,"data2vec-vision"),Wvt.forEach(t),wlr=r(dSe," \u2014 "),Kz=n(dSe,"A",{href:!0});var Qvt=s(Kz);Alr=r(Qvt,"Data2VecVisionForSemanticSegmentation"),Qvt.forEach(t),ylr=r(dSe," (Data2VecVision model)"),dSe.forEach(t),Llr=i(TA),XT=n(TA,"LI",{});var cSe=s(XT);Y1e=n(cSe,"STRONG",{});var Hvt=s(Y1e);xlr=r(Hvt,"dpt"),Hvt.forEach(t),$lr=r(cSe," \u2014 "),Zz=n(cSe,"A",{href:!0});var Uvt=s(Zz);klr=r(Uvt,"DPTForSemanticSegmentation"),Uvt.forEach(t),Slr=r(cSe," (DPT model)"),cSe.forEach(t),Rlr=i(TA),zT=n(TA,"LI",{});var fSe=s(zT);K1e=n(fSe,"STRONG",{});var Jvt=s(K1e);Plr=r(Jvt,"segformer"),Jvt.forEach(t),Blr=r(fSe," \u2014 "),eW=n(fSe,"A",{href:!0});var Yvt=s(eW);Ilr=r(Yvt,"SegformerForSemanticSegmentation"),Yvt.forEach(t),qlr=r(fSe," (SegFormer model)"),fSe.forEach(t),TA.forEach(t),Nlr=i(Ma),WT=n(Ma,"P",{});var mSe=s(WT);jlr=r(mSe,"The model is set in evaluation mode by default using "),Z1e=n(mSe,"CODE",{});var Kvt=s(Z1e);Dlr=r(Kvt,"model.eval()"),Kvt.forEach(t),Glr=r(mSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(mSe,"CODE",{});var Zvt=s(e2e);Olr=r(Zvt,"model.train()"),Zvt.forEach(t),mSe.forEach(t),Vlr=i(Ma),T(QT.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),oje=i(f),Nd=n(f,"H2",{class:!0});var lGe=s(Nd);HT=n(lGe,"A",{id:!0,class:!0,href:!0});var e3t=s(HT);o2e=n(e3t,"SPAN",{});var o3t=s(o2e);T(t8.$$.fragment,o3t),o3t.forEach(t),e3t.forEach(t),Xlr=i(lGe),r2e=n(lGe,"SPAN",{});var r3t=s(r2e);zlr=r(r3t,"AutoModelForInstanceSegmentation"),r3t.forEach(t),lGe.forEach(t),rje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(a8.$$.fragment,ml),Wlr=i(ml),jd=n(ml,"P",{});var see=s(jd);Qlr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oW=n(see,"A",{href:!0});var t3t=s(oW);Hlr=r(t3t,"from_pretrained()"),t3t.forEach(t),Ulr=r(see," class method or the "),rW=n(see,"A",{href:!0});var a3t=s(rW);Jlr=r(a3t,"from_config()"),a3t.forEach(t),Ylr=r(see,` class
method.`),see.forEach(t),Klr=i(ml),n8=n(ml,"P",{});var iGe=s(n8);Zlr=r(iGe,"This class cannot be instantiated directly using "),t2e=n(iGe,"CODE",{});var n3t=s(t2e);eir=r(n3t,"__init__()"),n3t.forEach(t),oir=r(iGe," (throws an error)."),iGe.forEach(t),rir=i(ml),At=n(ml,"DIV",{class:!0});var MA=s(At);T(s8.$$.fragment,MA),tir=i(MA),a2e=n(MA,"P",{});var s3t=s(a2e);air=r(s3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),s3t.forEach(t),nir=i(MA),Dd=n(MA,"P",{});var lee=s(Dd);sir=r(lee,`Note:
Loading a model from its configuration file does `),n2e=n(lee,"STRONG",{});var l3t=s(n2e);lir=r(l3t,"not"),l3t.forEach(t),iir=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(lee,"A",{href:!0});var i3t=s(tW);dir=r(i3t,"from_pretrained()"),i3t.forEach(t),cir=r(lee," to load the model weights."),lee.forEach(t),fir=i(MA),T(UT.$$.fragment,MA),MA.forEach(t),mir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(l8.$$.fragment,Ea),gir=i(Ea),s2e=n(Ea,"P",{});var d3t=s(s2e);hir=r(d3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),d3t.forEach(t),pir=i(Ea),Ya=n(Ea,"P",{});var EA=s(Ya);uir=r(EA,"The model class to instantiate is selected based on the "),l2e=n(EA,"CODE",{});var c3t=s(l2e);_ir=r(c3t,"model_type"),c3t.forEach(t),bir=r(EA,` property of the config object (either
passed as an argument or loaded from `),i2e=n(EA,"CODE",{});var f3t=s(i2e);vir=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),Fir=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(EA,"CODE",{});var m3t=s(d2e);Tir=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),Mir=r(EA,":"),EA.forEach(t),Eir=i(Ea),c2e=n(Ea,"UL",{});var g3t=s(c2e);JT=n(g3t,"LI",{});var gSe=s(JT);f2e=n(gSe,"STRONG",{});var h3t=s(f2e);Cir=r(h3t,"maskformer"),h3t.forEach(t),wir=r(gSe," \u2014 "),aW=n(gSe,"A",{href:!0});var p3t=s(aW);Air=r(p3t,"MaskFormerForInstanceSegmentation"),p3t.forEach(t),yir=r(gSe," (MaskFormer model)"),gSe.forEach(t),g3t.forEach(t),Lir=i(Ea),YT=n(Ea,"P",{});var hSe=s(YT);xir=r(hSe,"The model is set in evaluation mode by default using "),m2e=n(hSe,"CODE",{});var u3t=s(m2e);$ir=r(u3t,"model.eval()"),u3t.forEach(t),kir=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=n(hSe,"CODE",{});var _3t=s(g2e);Sir=r(_3t,"model.train()"),_3t.forEach(t),hSe.forEach(t),Rir=i(Ea),T(KT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),tje=i(f),Gd=n(f,"H2",{class:!0});var dGe=s(Gd);ZT=n(dGe,"A",{id:!0,class:!0,href:!0});var b3t=s(ZT);h2e=n(b3t,"SPAN",{});var v3t=s(h2e);T(i8.$$.fragment,v3t),v3t.forEach(t),b3t.forEach(t),Pir=i(dGe),p2e=n(dGe,"SPAN",{});var F3t=s(p2e);Bir=r(F3t,"TFAutoModel"),F3t.forEach(t),dGe.forEach(t),aje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(d8.$$.fragment,gl),Iir=i(gl),Od=n(gl,"P",{});var iee=s(Od);qir=r(iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=n(iee,"A",{href:!0});var T3t=s(nW);Nir=r(T3t,"from_pretrained()"),T3t.forEach(t),jir=r(iee," class method or the "),sW=n(iee,"A",{href:!0});var M3t=s(sW);Dir=r(M3t,"from_config()"),M3t.forEach(t),Gir=r(iee,` class
method.`),iee.forEach(t),Oir=i(gl),c8=n(gl,"P",{});var cGe=s(c8);Vir=r(cGe,"This class cannot be instantiated directly using "),u2e=n(cGe,"CODE",{});var E3t=s(u2e);Xir=r(E3t,"__init__()"),E3t.forEach(t),zir=r(cGe," (throws an error)."),cGe.forEach(t),Wir=i(gl),yt=n(gl,"DIV",{class:!0});var CA=s(yt);T(f8.$$.fragment,CA),Qir=i(CA),_2e=n(CA,"P",{});var C3t=s(_2e);Hir=r(C3t,"Instantiates one of the base model classes of the library from a configuration."),C3t.forEach(t),Uir=i(CA),Vd=n(CA,"P",{});var dee=s(Vd);Jir=r(dee,`Note:
Loading a model from its configuration file does `),b2e=n(dee,"STRONG",{});var w3t=s(b2e);Yir=r(w3t,"not"),w3t.forEach(t),Kir=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(dee,"A",{href:!0});var A3t=s(lW);Zir=r(A3t,"from_pretrained()"),A3t.forEach(t),edr=r(dee," to load the model weights."),dee.forEach(t),odr=i(CA),T(e7.$$.fragment,CA),CA.forEach(t),rdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(m8.$$.fragment,hl),tdr=i(hl),v2e=n(hl,"P",{});var y3t=s(v2e);adr=r(y3t,"Instantiate one of the base model classes of the library from a pretrained model."),y3t.forEach(t),ndr=i(hl),Ka=n(hl,"P",{});var wA=s(Ka);sdr=r(wA,"The model class to instantiate is selected based on the "),F2e=n(wA,"CODE",{});var L3t=s(F2e);ldr=r(L3t,"model_type"),L3t.forEach(t),idr=r(wA,` property of the config object (either
passed as an argument or loaded from `),T2e=n(wA,"CODE",{});var x3t=s(T2e);ddr=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),cdr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(wA,"CODE",{});var $3t=s(M2e);fdr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),mdr=r(wA,":"),wA.forEach(t),gdr=i(hl),N=n(hl,"UL",{});var D=s(N);o7=n(D,"LI",{});var pSe=s(o7);E2e=n(pSe,"STRONG",{});var k3t=s(E2e);hdr=r(k3t,"albert"),k3t.forEach(t),pdr=r(pSe," \u2014 "),iW=n(pSe,"A",{href:!0});var S3t=s(iW);udr=r(S3t,"TFAlbertModel"),S3t.forEach(t),_dr=r(pSe," (ALBERT model)"),pSe.forEach(t),bdr=i(D),r7=n(D,"LI",{});var uSe=s(r7);C2e=n(uSe,"STRONG",{});var R3t=s(C2e);vdr=r(R3t,"bart"),R3t.forEach(t),Fdr=r(uSe," \u2014 "),dW=n(uSe,"A",{href:!0});var P3t=s(dW);Tdr=r(P3t,"TFBartModel"),P3t.forEach(t),Mdr=r(uSe," (BART model)"),uSe.forEach(t),Edr=i(D),t7=n(D,"LI",{});var _Se=s(t7);w2e=n(_Se,"STRONG",{});var B3t=s(w2e);Cdr=r(B3t,"bert"),B3t.forEach(t),wdr=r(_Se," \u2014 "),cW=n(_Se,"A",{href:!0});var I3t=s(cW);Adr=r(I3t,"TFBertModel"),I3t.forEach(t),ydr=r(_Se," (BERT model)"),_Se.forEach(t),Ldr=i(D),a7=n(D,"LI",{});var bSe=s(a7);A2e=n(bSe,"STRONG",{});var q3t=s(A2e);xdr=r(q3t,"blenderbot"),q3t.forEach(t),$dr=r(bSe," \u2014 "),fW=n(bSe,"A",{href:!0});var N3t=s(fW);kdr=r(N3t,"TFBlenderbotModel"),N3t.forEach(t),Sdr=r(bSe," (Blenderbot model)"),bSe.forEach(t),Rdr=i(D),n7=n(D,"LI",{});var vSe=s(n7);y2e=n(vSe,"STRONG",{});var j3t=s(y2e);Pdr=r(j3t,"blenderbot-small"),j3t.forEach(t),Bdr=r(vSe," \u2014 "),mW=n(vSe,"A",{href:!0});var D3t=s(mW);Idr=r(D3t,"TFBlenderbotSmallModel"),D3t.forEach(t),qdr=r(vSe," (BlenderbotSmall model)"),vSe.forEach(t),Ndr=i(D),s7=n(D,"LI",{});var FSe=s(s7);L2e=n(FSe,"STRONG",{});var G3t=s(L2e);jdr=r(G3t,"camembert"),G3t.forEach(t),Ddr=r(FSe," \u2014 "),gW=n(FSe,"A",{href:!0});var O3t=s(gW);Gdr=r(O3t,"TFCamembertModel"),O3t.forEach(t),Odr=r(FSe," (CamemBERT model)"),FSe.forEach(t),Vdr=i(D),l7=n(D,"LI",{});var TSe=s(l7);x2e=n(TSe,"STRONG",{});var V3t=s(x2e);Xdr=r(V3t,"clip"),V3t.forEach(t),zdr=r(TSe," \u2014 "),hW=n(TSe,"A",{href:!0});var X3t=s(hW);Wdr=r(X3t,"TFCLIPModel"),X3t.forEach(t),Qdr=r(TSe," (CLIP model)"),TSe.forEach(t),Hdr=i(D),i7=n(D,"LI",{});var MSe=s(i7);$2e=n(MSe,"STRONG",{});var z3t=s($2e);Udr=r(z3t,"convbert"),z3t.forEach(t),Jdr=r(MSe," \u2014 "),pW=n(MSe,"A",{href:!0});var W3t=s(pW);Ydr=r(W3t,"TFConvBertModel"),W3t.forEach(t),Kdr=r(MSe," (ConvBERT model)"),MSe.forEach(t),Zdr=i(D),d7=n(D,"LI",{});var ESe=s(d7);k2e=n(ESe,"STRONG",{});var Q3t=s(k2e);ecr=r(Q3t,"convnext"),Q3t.forEach(t),ocr=r(ESe," \u2014 "),uW=n(ESe,"A",{href:!0});var H3t=s(uW);rcr=r(H3t,"TFConvNextModel"),H3t.forEach(t),tcr=r(ESe," (ConvNext model)"),ESe.forEach(t),acr=i(D),c7=n(D,"LI",{});var CSe=s(c7);S2e=n(CSe,"STRONG",{});var U3t=s(S2e);ncr=r(U3t,"ctrl"),U3t.forEach(t),scr=r(CSe," \u2014 "),_W=n(CSe,"A",{href:!0});var J3t=s(_W);lcr=r(J3t,"TFCTRLModel"),J3t.forEach(t),icr=r(CSe," (CTRL model)"),CSe.forEach(t),dcr=i(D),f7=n(D,"LI",{});var wSe=s(f7);R2e=n(wSe,"STRONG",{});var Y3t=s(R2e);ccr=r(Y3t,"data2vec-vision"),Y3t.forEach(t),fcr=r(wSe," \u2014 "),bW=n(wSe,"A",{href:!0});var K3t=s(bW);mcr=r(K3t,"TFData2VecVisionModel"),K3t.forEach(t),gcr=r(wSe," (Data2VecVision model)"),wSe.forEach(t),hcr=i(D),m7=n(D,"LI",{});var ASe=s(m7);P2e=n(ASe,"STRONG",{});var Z3t=s(P2e);pcr=r(Z3t,"deberta"),Z3t.forEach(t),ucr=r(ASe," \u2014 "),vW=n(ASe,"A",{href:!0});var eFt=s(vW);_cr=r(eFt,"TFDebertaModel"),eFt.forEach(t),bcr=r(ASe," (DeBERTa model)"),ASe.forEach(t),vcr=i(D),g7=n(D,"LI",{});var ySe=s(g7);B2e=n(ySe,"STRONG",{});var oFt=s(B2e);Fcr=r(oFt,"deberta-v2"),oFt.forEach(t),Tcr=r(ySe," \u2014 "),FW=n(ySe,"A",{href:!0});var rFt=s(FW);Mcr=r(rFt,"TFDebertaV2Model"),rFt.forEach(t),Ecr=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),Ccr=i(D),h7=n(D,"LI",{});var LSe=s(h7);I2e=n(LSe,"STRONG",{});var tFt=s(I2e);wcr=r(tFt,"distilbert"),tFt.forEach(t),Acr=r(LSe," \u2014 "),TW=n(LSe,"A",{href:!0});var aFt=s(TW);ycr=r(aFt,"TFDistilBertModel"),aFt.forEach(t),Lcr=r(LSe," (DistilBERT model)"),LSe.forEach(t),xcr=i(D),p7=n(D,"LI",{});var xSe=s(p7);q2e=n(xSe,"STRONG",{});var nFt=s(q2e);$cr=r(nFt,"dpr"),nFt.forEach(t),kcr=r(xSe," \u2014 "),MW=n(xSe,"A",{href:!0});var sFt=s(MW);Scr=r(sFt,"TFDPRQuestionEncoder"),sFt.forEach(t),Rcr=r(xSe," (DPR model)"),xSe.forEach(t),Pcr=i(D),u7=n(D,"LI",{});var $Se=s(u7);N2e=n($Se,"STRONG",{});var lFt=s(N2e);Bcr=r(lFt,"electra"),lFt.forEach(t),Icr=r($Se," \u2014 "),EW=n($Se,"A",{href:!0});var iFt=s(EW);qcr=r(iFt,"TFElectraModel"),iFt.forEach(t),Ncr=r($Se," (ELECTRA model)"),$Se.forEach(t),jcr=i(D),_7=n(D,"LI",{});var kSe=s(_7);j2e=n(kSe,"STRONG",{});var dFt=s(j2e);Dcr=r(dFt,"flaubert"),dFt.forEach(t),Gcr=r(kSe," \u2014 "),CW=n(kSe,"A",{href:!0});var cFt=s(CW);Ocr=r(cFt,"TFFlaubertModel"),cFt.forEach(t),Vcr=r(kSe," (FlauBERT model)"),kSe.forEach(t),Xcr=i(D),Is=n(D,"LI",{});var X$=s(Is);D2e=n(X$,"STRONG",{});var fFt=s(D2e);zcr=r(fFt,"funnel"),fFt.forEach(t),Wcr=r(X$," \u2014 "),wW=n(X$,"A",{href:!0});var mFt=s(wW);Qcr=r(mFt,"TFFunnelModel"),mFt.forEach(t),Hcr=r(X$," or "),AW=n(X$,"A",{href:!0});var gFt=s(AW);Ucr=r(gFt,"TFFunnelBaseModel"),gFt.forEach(t),Jcr=r(X$," (Funnel Transformer model)"),X$.forEach(t),Ycr=i(D),b7=n(D,"LI",{});var SSe=s(b7);G2e=n(SSe,"STRONG",{});var hFt=s(G2e);Kcr=r(hFt,"gpt2"),hFt.forEach(t),Zcr=r(SSe," \u2014 "),yW=n(SSe,"A",{href:!0});var pFt=s(yW);efr=r(pFt,"TFGPT2Model"),pFt.forEach(t),ofr=r(SSe," (OpenAI GPT-2 model)"),SSe.forEach(t),rfr=i(D),v7=n(D,"LI",{});var RSe=s(v7);O2e=n(RSe,"STRONG",{});var uFt=s(O2e);tfr=r(uFt,"gptj"),uFt.forEach(t),afr=r(RSe," \u2014 "),LW=n(RSe,"A",{href:!0});var _Ft=s(LW);nfr=r(_Ft,"TFGPTJModel"),_Ft.forEach(t),sfr=r(RSe," (GPT-J model)"),RSe.forEach(t),lfr=i(D),F7=n(D,"LI",{});var PSe=s(F7);V2e=n(PSe,"STRONG",{});var bFt=s(V2e);ifr=r(bFt,"hubert"),bFt.forEach(t),dfr=r(PSe," \u2014 "),xW=n(PSe,"A",{href:!0});var vFt=s(xW);cfr=r(vFt,"TFHubertModel"),vFt.forEach(t),ffr=r(PSe," (Hubert model)"),PSe.forEach(t),mfr=i(D),T7=n(D,"LI",{});var BSe=s(T7);X2e=n(BSe,"STRONG",{});var FFt=s(X2e);gfr=r(FFt,"layoutlm"),FFt.forEach(t),hfr=r(BSe," \u2014 "),$W=n(BSe,"A",{href:!0});var TFt=s($W);pfr=r(TFt,"TFLayoutLMModel"),TFt.forEach(t),ufr=r(BSe," (LayoutLM model)"),BSe.forEach(t),_fr=i(D),M7=n(D,"LI",{});var ISe=s(M7);z2e=n(ISe,"STRONG",{});var MFt=s(z2e);bfr=r(MFt,"led"),MFt.forEach(t),vfr=r(ISe," \u2014 "),kW=n(ISe,"A",{href:!0});var EFt=s(kW);Ffr=r(EFt,"TFLEDModel"),EFt.forEach(t),Tfr=r(ISe," (LED model)"),ISe.forEach(t),Mfr=i(D),E7=n(D,"LI",{});var qSe=s(E7);W2e=n(qSe,"STRONG",{});var CFt=s(W2e);Efr=r(CFt,"longformer"),CFt.forEach(t),Cfr=r(qSe," \u2014 "),SW=n(qSe,"A",{href:!0});var wFt=s(SW);wfr=r(wFt,"TFLongformerModel"),wFt.forEach(t),Afr=r(qSe," (Longformer model)"),qSe.forEach(t),yfr=i(D),C7=n(D,"LI",{});var NSe=s(C7);Q2e=n(NSe,"STRONG",{});var AFt=s(Q2e);Lfr=r(AFt,"lxmert"),AFt.forEach(t),xfr=r(NSe," \u2014 "),RW=n(NSe,"A",{href:!0});var yFt=s(RW);$fr=r(yFt,"TFLxmertModel"),yFt.forEach(t),kfr=r(NSe," (LXMERT model)"),NSe.forEach(t),Sfr=i(D),w7=n(D,"LI",{});var jSe=s(w7);H2e=n(jSe,"STRONG",{});var LFt=s(H2e);Rfr=r(LFt,"marian"),LFt.forEach(t),Pfr=r(jSe," \u2014 "),PW=n(jSe,"A",{href:!0});var xFt=s(PW);Bfr=r(xFt,"TFMarianModel"),xFt.forEach(t),Ifr=r(jSe," (Marian model)"),jSe.forEach(t),qfr=i(D),A7=n(D,"LI",{});var DSe=s(A7);U2e=n(DSe,"STRONG",{});var $Ft=s(U2e);Nfr=r($Ft,"mbart"),$Ft.forEach(t),jfr=r(DSe," \u2014 "),BW=n(DSe,"A",{href:!0});var kFt=s(BW);Dfr=r(kFt,"TFMBartModel"),kFt.forEach(t),Gfr=r(DSe," (mBART model)"),DSe.forEach(t),Ofr=i(D),y7=n(D,"LI",{});var GSe=s(y7);J2e=n(GSe,"STRONG",{});var SFt=s(J2e);Vfr=r(SFt,"mobilebert"),SFt.forEach(t),Xfr=r(GSe," \u2014 "),IW=n(GSe,"A",{href:!0});var RFt=s(IW);zfr=r(RFt,"TFMobileBertModel"),RFt.forEach(t),Wfr=r(GSe," (MobileBERT model)"),GSe.forEach(t),Qfr=i(D),L7=n(D,"LI",{});var OSe=s(L7);Y2e=n(OSe,"STRONG",{});var PFt=s(Y2e);Hfr=r(PFt,"mpnet"),PFt.forEach(t),Ufr=r(OSe," \u2014 "),qW=n(OSe,"A",{href:!0});var BFt=s(qW);Jfr=r(BFt,"TFMPNetModel"),BFt.forEach(t),Yfr=r(OSe," (MPNet model)"),OSe.forEach(t),Kfr=i(D),x7=n(D,"LI",{});var VSe=s(x7);K2e=n(VSe,"STRONG",{});var IFt=s(K2e);Zfr=r(IFt,"mt5"),IFt.forEach(t),emr=r(VSe," \u2014 "),NW=n(VSe,"A",{href:!0});var qFt=s(NW);omr=r(qFt,"TFMT5Model"),qFt.forEach(t),rmr=r(VSe," (mT5 model)"),VSe.forEach(t),tmr=i(D),$7=n(D,"LI",{});var XSe=s($7);Z2e=n(XSe,"STRONG",{});var NFt=s(Z2e);amr=r(NFt,"openai-gpt"),NFt.forEach(t),nmr=r(XSe," \u2014 "),jW=n(XSe,"A",{href:!0});var jFt=s(jW);smr=r(jFt,"TFOpenAIGPTModel"),jFt.forEach(t),lmr=r(XSe," (OpenAI GPT model)"),XSe.forEach(t),imr=i(D),k7=n(D,"LI",{});var zSe=s(k7);ebe=n(zSe,"STRONG",{});var DFt=s(ebe);dmr=r(DFt,"pegasus"),DFt.forEach(t),cmr=r(zSe," \u2014 "),DW=n(zSe,"A",{href:!0});var GFt=s(DW);fmr=r(GFt,"TFPegasusModel"),GFt.forEach(t),mmr=r(zSe," (Pegasus model)"),zSe.forEach(t),gmr=i(D),S7=n(D,"LI",{});var WSe=s(S7);obe=n(WSe,"STRONG",{});var OFt=s(obe);hmr=r(OFt,"rembert"),OFt.forEach(t),pmr=r(WSe," \u2014 "),GW=n(WSe,"A",{href:!0});var VFt=s(GW);umr=r(VFt,"TFRemBertModel"),VFt.forEach(t),_mr=r(WSe," (RemBERT model)"),WSe.forEach(t),bmr=i(D),R7=n(D,"LI",{});var QSe=s(R7);rbe=n(QSe,"STRONG",{});var XFt=s(rbe);vmr=r(XFt,"roberta"),XFt.forEach(t),Fmr=r(QSe," \u2014 "),OW=n(QSe,"A",{href:!0});var zFt=s(OW);Tmr=r(zFt,"TFRobertaModel"),zFt.forEach(t),Mmr=r(QSe," (RoBERTa model)"),QSe.forEach(t),Emr=i(D),P7=n(D,"LI",{});var HSe=s(P7);tbe=n(HSe,"STRONG",{});var WFt=s(tbe);Cmr=r(WFt,"roformer"),WFt.forEach(t),wmr=r(HSe," \u2014 "),VW=n(HSe,"A",{href:!0});var QFt=s(VW);Amr=r(QFt,"TFRoFormerModel"),QFt.forEach(t),ymr=r(HSe," (RoFormer model)"),HSe.forEach(t),Lmr=i(D),B7=n(D,"LI",{});var USe=s(B7);abe=n(USe,"STRONG",{});var HFt=s(abe);xmr=r(HFt,"speech_to_text"),HFt.forEach(t),$mr=r(USe," \u2014 "),XW=n(USe,"A",{href:!0});var UFt=s(XW);kmr=r(UFt,"TFSpeech2TextModel"),UFt.forEach(t),Smr=r(USe," (Speech2Text model)"),USe.forEach(t),Rmr=i(D),I7=n(D,"LI",{});var JSe=s(I7);nbe=n(JSe,"STRONG",{});var JFt=s(nbe);Pmr=r(JFt,"swin"),JFt.forEach(t),Bmr=r(JSe," \u2014 "),zW=n(JSe,"A",{href:!0});var YFt=s(zW);Imr=r(YFt,"TFSwinModel"),YFt.forEach(t),qmr=r(JSe," (Swin model)"),JSe.forEach(t),Nmr=i(D),q7=n(D,"LI",{});var YSe=s(q7);sbe=n(YSe,"STRONG",{});var KFt=s(sbe);jmr=r(KFt,"t5"),KFt.forEach(t),Dmr=r(YSe," \u2014 "),WW=n(YSe,"A",{href:!0});var ZFt=s(WW);Gmr=r(ZFt,"TFT5Model"),ZFt.forEach(t),Omr=r(YSe," (T5 model)"),YSe.forEach(t),Vmr=i(D),N7=n(D,"LI",{});var KSe=s(N7);lbe=n(KSe,"STRONG",{});var eTt=s(lbe);Xmr=r(eTt,"tapas"),eTt.forEach(t),zmr=r(KSe," \u2014 "),QW=n(KSe,"A",{href:!0});var oTt=s(QW);Wmr=r(oTt,"TFTapasModel"),oTt.forEach(t),Qmr=r(KSe," (TAPAS model)"),KSe.forEach(t),Hmr=i(D),j7=n(D,"LI",{});var ZSe=s(j7);ibe=n(ZSe,"STRONG",{});var rTt=s(ibe);Umr=r(rTt,"transfo-xl"),rTt.forEach(t),Jmr=r(ZSe," \u2014 "),HW=n(ZSe,"A",{href:!0});var tTt=s(HW);Ymr=r(tTt,"TFTransfoXLModel"),tTt.forEach(t),Kmr=r(ZSe," (Transformer-XL model)"),ZSe.forEach(t),Zmr=i(D),D7=n(D,"LI",{});var eRe=s(D7);dbe=n(eRe,"STRONG",{});var aTt=s(dbe);egr=r(aTt,"vit"),aTt.forEach(t),ogr=r(eRe," \u2014 "),UW=n(eRe,"A",{href:!0});var nTt=s(UW);rgr=r(nTt,"TFViTModel"),nTt.forEach(t),tgr=r(eRe," (ViT model)"),eRe.forEach(t),agr=i(D),G7=n(D,"LI",{});var oRe=s(G7);cbe=n(oRe,"STRONG",{});var sTt=s(cbe);ngr=r(sTt,"vit_mae"),sTt.forEach(t),sgr=r(oRe," \u2014 "),JW=n(oRe,"A",{href:!0});var lTt=s(JW);lgr=r(lTt,"TFViTMAEModel"),lTt.forEach(t),igr=r(oRe," (ViTMAE model)"),oRe.forEach(t),dgr=i(D),O7=n(D,"LI",{});var rRe=s(O7);fbe=n(rRe,"STRONG",{});var iTt=s(fbe);cgr=r(iTt,"wav2vec2"),iTt.forEach(t),fgr=r(rRe," \u2014 "),YW=n(rRe,"A",{href:!0});var dTt=s(YW);mgr=r(dTt,"TFWav2Vec2Model"),dTt.forEach(t),ggr=r(rRe," (Wav2Vec2 model)"),rRe.forEach(t),hgr=i(D),V7=n(D,"LI",{});var tRe=s(V7);mbe=n(tRe,"STRONG",{});var cTt=s(mbe);pgr=r(cTt,"xlm"),cTt.forEach(t),ugr=r(tRe," \u2014 "),KW=n(tRe,"A",{href:!0});var fTt=s(KW);_gr=r(fTt,"TFXLMModel"),fTt.forEach(t),bgr=r(tRe," (XLM model)"),tRe.forEach(t),vgr=i(D),X7=n(D,"LI",{});var aRe=s(X7);gbe=n(aRe,"STRONG",{});var mTt=s(gbe);Fgr=r(mTt,"xlm-roberta"),mTt.forEach(t),Tgr=r(aRe," \u2014 "),ZW=n(aRe,"A",{href:!0});var gTt=s(ZW);Mgr=r(gTt,"TFXLMRobertaModel"),gTt.forEach(t),Egr=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),Cgr=i(D),z7=n(D,"LI",{});var nRe=s(z7);hbe=n(nRe,"STRONG",{});var hTt=s(hbe);wgr=r(hTt,"xlnet"),hTt.forEach(t),Agr=r(nRe," \u2014 "),eQ=n(nRe,"A",{href:!0});var pTt=s(eQ);ygr=r(pTt,"TFXLNetModel"),pTt.forEach(t),Lgr=r(nRe," (XLNet model)"),nRe.forEach(t),D.forEach(t),xgr=i(hl),T(W7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),nje=i(f),Xd=n(f,"H2",{class:!0});var fGe=s(Xd);Q7=n(fGe,"A",{id:!0,class:!0,href:!0});var uTt=s(Q7);pbe=n(uTt,"SPAN",{});var _Tt=s(pbe);T(g8.$$.fragment,_Tt),_Tt.forEach(t),uTt.forEach(t),$gr=i(fGe),ube=n(fGe,"SPAN",{});var bTt=s(ube);kgr=r(bTt,"TFAutoModelForPreTraining"),bTt.forEach(t),fGe.forEach(t),sje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(h8.$$.fragment,pl),Sgr=i(pl),zd=n(pl,"P",{});var cee=s(zd);Rgr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=n(cee,"A",{href:!0});var vTt=s(oQ);Pgr=r(vTt,"from_pretrained()"),vTt.forEach(t),Bgr=r(cee," class method or the "),rQ=n(cee,"A",{href:!0});var FTt=s(rQ);Igr=r(FTt,"from_config()"),FTt.forEach(t),qgr=r(cee,` class
method.`),cee.forEach(t),Ngr=i(pl),p8=n(pl,"P",{});var mGe=s(p8);jgr=r(mGe,"This class cannot be instantiated directly using "),_be=n(mGe,"CODE",{});var TTt=s(_be);Dgr=r(TTt,"__init__()"),TTt.forEach(t),Ggr=r(mGe," (throws an error)."),mGe.forEach(t),Ogr=i(pl),Lt=n(pl,"DIV",{class:!0});var AA=s(Lt);T(u8.$$.fragment,AA),Vgr=i(AA),bbe=n(AA,"P",{});var MTt=s(bbe);Xgr=r(MTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MTt.forEach(t),zgr=i(AA),Wd=n(AA,"P",{});var fee=s(Wd);Wgr=r(fee,`Note:
Loading a model from its configuration file does `),vbe=n(fee,"STRONG",{});var ETt=s(vbe);Qgr=r(ETt,"not"),ETt.forEach(t),Hgr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(fee,"A",{href:!0});var CTt=s(tQ);Ugr=r(CTt,"from_pretrained()"),CTt.forEach(t),Jgr=r(fee," to load the model weights."),fee.forEach(t),Ygr=i(AA),T(H7.$$.fragment,AA),AA.forEach(t),Kgr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(_8.$$.fragment,ul),Zgr=i(ul),Fbe=n(ul,"P",{});var wTt=s(Fbe);ehr=r(wTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wTt.forEach(t),ohr=i(ul),Za=n(ul,"P",{});var yA=s(Za);rhr=r(yA,"The model class to instantiate is selected based on the "),Tbe=n(yA,"CODE",{});var ATt=s(Tbe);thr=r(ATt,"model_type"),ATt.forEach(t),ahr=r(yA,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(yA,"CODE",{});var yTt=s(Mbe);nhr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),shr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(yA,"CODE",{});var LTt=s(Ebe);lhr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),ihr=r(yA,":"),yA.forEach(t),dhr=i(ul),se=n(ul,"UL",{});var le=s(se);U7=n(le,"LI",{});var sRe=s(U7);Cbe=n(sRe,"STRONG",{});var xTt=s(Cbe);chr=r(xTt,"albert"),xTt.forEach(t),fhr=r(sRe," \u2014 "),aQ=n(sRe,"A",{href:!0});var $Tt=s(aQ);mhr=r($Tt,"TFAlbertForPreTraining"),$Tt.forEach(t),ghr=r(sRe," (ALBERT model)"),sRe.forEach(t),hhr=i(le),J7=n(le,"LI",{});var lRe=s(J7);wbe=n(lRe,"STRONG",{});var kTt=s(wbe);phr=r(kTt,"bart"),kTt.forEach(t),uhr=r(lRe," \u2014 "),nQ=n(lRe,"A",{href:!0});var STt=s(nQ);_hr=r(STt,"TFBartForConditionalGeneration"),STt.forEach(t),bhr=r(lRe," (BART model)"),lRe.forEach(t),vhr=i(le),Y7=n(le,"LI",{});var iRe=s(Y7);Abe=n(iRe,"STRONG",{});var RTt=s(Abe);Fhr=r(RTt,"bert"),RTt.forEach(t),Thr=r(iRe," \u2014 "),sQ=n(iRe,"A",{href:!0});var PTt=s(sQ);Mhr=r(PTt,"TFBertForPreTraining"),PTt.forEach(t),Ehr=r(iRe," (BERT model)"),iRe.forEach(t),Chr=i(le),K7=n(le,"LI",{});var dRe=s(K7);ybe=n(dRe,"STRONG",{});var BTt=s(ybe);whr=r(BTt,"camembert"),BTt.forEach(t),Ahr=r(dRe," \u2014 "),lQ=n(dRe,"A",{href:!0});var ITt=s(lQ);yhr=r(ITt,"TFCamembertForMaskedLM"),ITt.forEach(t),Lhr=r(dRe," (CamemBERT model)"),dRe.forEach(t),xhr=i(le),Z7=n(le,"LI",{});var cRe=s(Z7);Lbe=n(cRe,"STRONG",{});var qTt=s(Lbe);$hr=r(qTt,"ctrl"),qTt.forEach(t),khr=r(cRe," \u2014 "),iQ=n(cRe,"A",{href:!0});var NTt=s(iQ);Shr=r(NTt,"TFCTRLLMHeadModel"),NTt.forEach(t),Rhr=r(cRe," (CTRL model)"),cRe.forEach(t),Phr=i(le),eM=n(le,"LI",{});var fRe=s(eM);xbe=n(fRe,"STRONG",{});var jTt=s(xbe);Bhr=r(jTt,"distilbert"),jTt.forEach(t),Ihr=r(fRe," \u2014 "),dQ=n(fRe,"A",{href:!0});var DTt=s(dQ);qhr=r(DTt,"TFDistilBertForMaskedLM"),DTt.forEach(t),Nhr=r(fRe," (DistilBERT model)"),fRe.forEach(t),jhr=i(le),oM=n(le,"LI",{});var mRe=s(oM);$be=n(mRe,"STRONG",{});var GTt=s($be);Dhr=r(GTt,"electra"),GTt.forEach(t),Ghr=r(mRe," \u2014 "),cQ=n(mRe,"A",{href:!0});var OTt=s(cQ);Ohr=r(OTt,"TFElectraForPreTraining"),OTt.forEach(t),Vhr=r(mRe," (ELECTRA model)"),mRe.forEach(t),Xhr=i(le),rM=n(le,"LI",{});var gRe=s(rM);kbe=n(gRe,"STRONG",{});var VTt=s(kbe);zhr=r(VTt,"flaubert"),VTt.forEach(t),Whr=r(gRe," \u2014 "),fQ=n(gRe,"A",{href:!0});var XTt=s(fQ);Qhr=r(XTt,"TFFlaubertWithLMHeadModel"),XTt.forEach(t),Hhr=r(gRe," (FlauBERT model)"),gRe.forEach(t),Uhr=i(le),tM=n(le,"LI",{});var hRe=s(tM);Sbe=n(hRe,"STRONG",{});var zTt=s(Sbe);Jhr=r(zTt,"funnel"),zTt.forEach(t),Yhr=r(hRe," \u2014 "),mQ=n(hRe,"A",{href:!0});var WTt=s(mQ);Khr=r(WTt,"TFFunnelForPreTraining"),WTt.forEach(t),Zhr=r(hRe," (Funnel Transformer model)"),hRe.forEach(t),epr=i(le),aM=n(le,"LI",{});var pRe=s(aM);Rbe=n(pRe,"STRONG",{});var QTt=s(Rbe);opr=r(QTt,"gpt2"),QTt.forEach(t),rpr=r(pRe," \u2014 "),gQ=n(pRe,"A",{href:!0});var HTt=s(gQ);tpr=r(HTt,"TFGPT2LMHeadModel"),HTt.forEach(t),apr=r(pRe," (OpenAI GPT-2 model)"),pRe.forEach(t),npr=i(le),nM=n(le,"LI",{});var uRe=s(nM);Pbe=n(uRe,"STRONG",{});var UTt=s(Pbe);spr=r(UTt,"layoutlm"),UTt.forEach(t),lpr=r(uRe," \u2014 "),hQ=n(uRe,"A",{href:!0});var JTt=s(hQ);ipr=r(JTt,"TFLayoutLMForMaskedLM"),JTt.forEach(t),dpr=r(uRe," (LayoutLM model)"),uRe.forEach(t),cpr=i(le),sM=n(le,"LI",{});var _Re=s(sM);Bbe=n(_Re,"STRONG",{});var YTt=s(Bbe);fpr=r(YTt,"lxmert"),YTt.forEach(t),mpr=r(_Re," \u2014 "),pQ=n(_Re,"A",{href:!0});var KTt=s(pQ);gpr=r(KTt,"TFLxmertForPreTraining"),KTt.forEach(t),hpr=r(_Re," (LXMERT model)"),_Re.forEach(t),ppr=i(le),lM=n(le,"LI",{});var bRe=s(lM);Ibe=n(bRe,"STRONG",{});var ZTt=s(Ibe);upr=r(ZTt,"mobilebert"),ZTt.forEach(t),_pr=r(bRe," \u2014 "),uQ=n(bRe,"A",{href:!0});var e7t=s(uQ);bpr=r(e7t,"TFMobileBertForPreTraining"),e7t.forEach(t),vpr=r(bRe," (MobileBERT model)"),bRe.forEach(t),Fpr=i(le),iM=n(le,"LI",{});var vRe=s(iM);qbe=n(vRe,"STRONG",{});var o7t=s(qbe);Tpr=r(o7t,"mpnet"),o7t.forEach(t),Mpr=r(vRe," \u2014 "),_Q=n(vRe,"A",{href:!0});var r7t=s(_Q);Epr=r(r7t,"TFMPNetForMaskedLM"),r7t.forEach(t),Cpr=r(vRe," (MPNet model)"),vRe.forEach(t),wpr=i(le),dM=n(le,"LI",{});var FRe=s(dM);Nbe=n(FRe,"STRONG",{});var t7t=s(Nbe);Apr=r(t7t,"openai-gpt"),t7t.forEach(t),ypr=r(FRe," \u2014 "),bQ=n(FRe,"A",{href:!0});var a7t=s(bQ);Lpr=r(a7t,"TFOpenAIGPTLMHeadModel"),a7t.forEach(t),xpr=r(FRe," (OpenAI GPT model)"),FRe.forEach(t),$pr=i(le),cM=n(le,"LI",{});var TRe=s(cM);jbe=n(TRe,"STRONG",{});var n7t=s(jbe);kpr=r(n7t,"roberta"),n7t.forEach(t),Spr=r(TRe," \u2014 "),vQ=n(TRe,"A",{href:!0});var s7t=s(vQ);Rpr=r(s7t,"TFRobertaForMaskedLM"),s7t.forEach(t),Ppr=r(TRe," (RoBERTa model)"),TRe.forEach(t),Bpr=i(le),fM=n(le,"LI",{});var MRe=s(fM);Dbe=n(MRe,"STRONG",{});var l7t=s(Dbe);Ipr=r(l7t,"t5"),l7t.forEach(t),qpr=r(MRe," \u2014 "),FQ=n(MRe,"A",{href:!0});var i7t=s(FQ);Npr=r(i7t,"TFT5ForConditionalGeneration"),i7t.forEach(t),jpr=r(MRe," (T5 model)"),MRe.forEach(t),Dpr=i(le),mM=n(le,"LI",{});var ERe=s(mM);Gbe=n(ERe,"STRONG",{});var d7t=s(Gbe);Gpr=r(d7t,"tapas"),d7t.forEach(t),Opr=r(ERe," \u2014 "),TQ=n(ERe,"A",{href:!0});var c7t=s(TQ);Vpr=r(c7t,"TFTapasForMaskedLM"),c7t.forEach(t),Xpr=r(ERe," (TAPAS model)"),ERe.forEach(t),zpr=i(le),gM=n(le,"LI",{});var CRe=s(gM);Obe=n(CRe,"STRONG",{});var f7t=s(Obe);Wpr=r(f7t,"transfo-xl"),f7t.forEach(t),Qpr=r(CRe," \u2014 "),MQ=n(CRe,"A",{href:!0});var m7t=s(MQ);Hpr=r(m7t,"TFTransfoXLLMHeadModel"),m7t.forEach(t),Upr=r(CRe," (Transformer-XL model)"),CRe.forEach(t),Jpr=i(le),hM=n(le,"LI",{});var wRe=s(hM);Vbe=n(wRe,"STRONG",{});var g7t=s(Vbe);Ypr=r(g7t,"vit_mae"),g7t.forEach(t),Kpr=r(wRe," \u2014 "),EQ=n(wRe,"A",{href:!0});var h7t=s(EQ);Zpr=r(h7t,"TFViTMAEForPreTraining"),h7t.forEach(t),eur=r(wRe," (ViTMAE model)"),wRe.forEach(t),our=i(le),pM=n(le,"LI",{});var ARe=s(pM);Xbe=n(ARe,"STRONG",{});var p7t=s(Xbe);rur=r(p7t,"xlm"),p7t.forEach(t),tur=r(ARe," \u2014 "),CQ=n(ARe,"A",{href:!0});var u7t=s(CQ);aur=r(u7t,"TFXLMWithLMHeadModel"),u7t.forEach(t),nur=r(ARe," (XLM model)"),ARe.forEach(t),sur=i(le),uM=n(le,"LI",{});var yRe=s(uM);zbe=n(yRe,"STRONG",{});var _7t=s(zbe);lur=r(_7t,"xlm-roberta"),_7t.forEach(t),iur=r(yRe," \u2014 "),wQ=n(yRe,"A",{href:!0});var b7t=s(wQ);dur=r(b7t,"TFXLMRobertaForMaskedLM"),b7t.forEach(t),cur=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),fur=i(le),_M=n(le,"LI",{});var LRe=s(_M);Wbe=n(LRe,"STRONG",{});var v7t=s(Wbe);mur=r(v7t,"xlnet"),v7t.forEach(t),gur=r(LRe," \u2014 "),AQ=n(LRe,"A",{href:!0});var F7t=s(AQ);hur=r(F7t,"TFXLNetLMHeadModel"),F7t.forEach(t),pur=r(LRe," (XLNet model)"),LRe.forEach(t),le.forEach(t),uur=i(ul),T(bM.$$.fragment,ul),ul.forEach(t),pl.forEach(t),lje=i(f),Qd=n(f,"H2",{class:!0});var gGe=s(Qd);vM=n(gGe,"A",{id:!0,class:!0,href:!0});var T7t=s(vM);Qbe=n(T7t,"SPAN",{});var M7t=s(Qbe);T(b8.$$.fragment,M7t),M7t.forEach(t),T7t.forEach(t),_ur=i(gGe),Hbe=n(gGe,"SPAN",{});var E7t=s(Hbe);bur=r(E7t,"TFAutoModelForCausalLM"),E7t.forEach(t),gGe.forEach(t),ije=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(v8.$$.fragment,_l),vur=i(_l),Hd=n(_l,"P",{});var mee=s(Hd);Fur=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=n(mee,"A",{href:!0});var C7t=s(yQ);Tur=r(C7t,"from_pretrained()"),C7t.forEach(t),Mur=r(mee," class method or the "),LQ=n(mee,"A",{href:!0});var w7t=s(LQ);Eur=r(w7t,"from_config()"),w7t.forEach(t),Cur=r(mee,` class
method.`),mee.forEach(t),wur=i(_l),F8=n(_l,"P",{});var hGe=s(F8);Aur=r(hGe,"This class cannot be instantiated directly using "),Ube=n(hGe,"CODE",{});var A7t=s(Ube);yur=r(A7t,"__init__()"),A7t.forEach(t),Lur=r(hGe," (throws an error)."),hGe.forEach(t),xur=i(_l),xt=n(_l,"DIV",{class:!0});var LA=s(xt);T(T8.$$.fragment,LA),$ur=i(LA),Jbe=n(LA,"P",{});var y7t=s(Jbe);kur=r(y7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y7t.forEach(t),Sur=i(LA),Ud=n(LA,"P",{});var gee=s(Ud);Rur=r(gee,`Note:
Loading a model from its configuration file does `),Ybe=n(gee,"STRONG",{});var L7t=s(Ybe);Pur=r(L7t,"not"),L7t.forEach(t),Bur=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(gee,"A",{href:!0});var x7t=s(xQ);Iur=r(x7t,"from_pretrained()"),x7t.forEach(t),qur=r(gee," to load the model weights."),gee.forEach(t),Nur=i(LA),T(FM.$$.fragment,LA),LA.forEach(t),jur=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(M8.$$.fragment,bl),Dur=i(bl),Kbe=n(bl,"P",{});var $7t=s(Kbe);Gur=r($7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$7t.forEach(t),Our=i(bl),en=n(bl,"P",{});var xA=s(en);Vur=r(xA,"The model class to instantiate is selected based on the "),Zbe=n(xA,"CODE",{});var k7t=s(Zbe);Xur=r(k7t,"model_type"),k7t.forEach(t),zur=r(xA,` property of the config object (either
passed as an argument or loaded from `),eve=n(xA,"CODE",{});var S7t=s(eve);Wur=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),Qur=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(xA,"CODE",{});var R7t=s(ove);Hur=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),Uur=r(xA,":"),xA.forEach(t),Jur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);TM=n(Ce,"LI",{});var xRe=s(TM);rve=n(xRe,"STRONG",{});var P7t=s(rve);Yur=r(P7t,"bert"),P7t.forEach(t),Kur=r(xRe," \u2014 "),$Q=n(xRe,"A",{href:!0});var B7t=s($Q);Zur=r(B7t,"TFBertLMHeadModel"),B7t.forEach(t),e_r=r(xRe," (BERT model)"),xRe.forEach(t),o_r=i(Ce),MM=n(Ce,"LI",{});var $Re=s(MM);tve=n($Re,"STRONG",{});var I7t=s(tve);r_r=r(I7t,"camembert"),I7t.forEach(t),t_r=r($Re," \u2014 "),kQ=n($Re,"A",{href:!0});var q7t=s(kQ);a_r=r(q7t,"TFCamembertForCausalLM"),q7t.forEach(t),n_r=r($Re," (CamemBERT model)"),$Re.forEach(t),s_r=i(Ce),EM=n(Ce,"LI",{});var kRe=s(EM);ave=n(kRe,"STRONG",{});var N7t=s(ave);l_r=r(N7t,"ctrl"),N7t.forEach(t),i_r=r(kRe," \u2014 "),SQ=n(kRe,"A",{href:!0});var j7t=s(SQ);d_r=r(j7t,"TFCTRLLMHeadModel"),j7t.forEach(t),c_r=r(kRe," (CTRL model)"),kRe.forEach(t),f_r=i(Ce),CM=n(Ce,"LI",{});var SRe=s(CM);nve=n(SRe,"STRONG",{});var D7t=s(nve);m_r=r(D7t,"gpt2"),D7t.forEach(t),g_r=r(SRe," \u2014 "),RQ=n(SRe,"A",{href:!0});var G7t=s(RQ);h_r=r(G7t,"TFGPT2LMHeadModel"),G7t.forEach(t),p_r=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),u_r=i(Ce),wM=n(Ce,"LI",{});var RRe=s(wM);sve=n(RRe,"STRONG",{});var O7t=s(sve);__r=r(O7t,"gptj"),O7t.forEach(t),b_r=r(RRe," \u2014 "),PQ=n(RRe,"A",{href:!0});var V7t=s(PQ);v_r=r(V7t,"TFGPTJForCausalLM"),V7t.forEach(t),F_r=r(RRe," (GPT-J model)"),RRe.forEach(t),T_r=i(Ce),AM=n(Ce,"LI",{});var PRe=s(AM);lve=n(PRe,"STRONG",{});var X7t=s(lve);M_r=r(X7t,"openai-gpt"),X7t.forEach(t),E_r=r(PRe," \u2014 "),BQ=n(PRe,"A",{href:!0});var z7t=s(BQ);C_r=r(z7t,"TFOpenAIGPTLMHeadModel"),z7t.forEach(t),w_r=r(PRe," (OpenAI GPT model)"),PRe.forEach(t),A_r=i(Ce),yM=n(Ce,"LI",{});var BRe=s(yM);ive=n(BRe,"STRONG",{});var W7t=s(ive);y_r=r(W7t,"rembert"),W7t.forEach(t),L_r=r(BRe," \u2014 "),IQ=n(BRe,"A",{href:!0});var Q7t=s(IQ);x_r=r(Q7t,"TFRemBertForCausalLM"),Q7t.forEach(t),$_r=r(BRe," (RemBERT model)"),BRe.forEach(t),k_r=i(Ce),LM=n(Ce,"LI",{});var IRe=s(LM);dve=n(IRe,"STRONG",{});var H7t=s(dve);S_r=r(H7t,"roberta"),H7t.forEach(t),R_r=r(IRe," \u2014 "),qQ=n(IRe,"A",{href:!0});var U7t=s(qQ);P_r=r(U7t,"TFRobertaForCausalLM"),U7t.forEach(t),B_r=r(IRe," (RoBERTa model)"),IRe.forEach(t),I_r=i(Ce),xM=n(Ce,"LI",{});var qRe=s(xM);cve=n(qRe,"STRONG",{});var J7t=s(cve);q_r=r(J7t,"roformer"),J7t.forEach(t),N_r=r(qRe," \u2014 "),NQ=n(qRe,"A",{href:!0});var Y7t=s(NQ);j_r=r(Y7t,"TFRoFormerForCausalLM"),Y7t.forEach(t),D_r=r(qRe," (RoFormer model)"),qRe.forEach(t),G_r=i(Ce),$M=n(Ce,"LI",{});var NRe=s($M);fve=n(NRe,"STRONG",{});var K7t=s(fve);O_r=r(K7t,"transfo-xl"),K7t.forEach(t),V_r=r(NRe," \u2014 "),jQ=n(NRe,"A",{href:!0});var Z7t=s(jQ);X_r=r(Z7t,"TFTransfoXLLMHeadModel"),Z7t.forEach(t),z_r=r(NRe," (Transformer-XL model)"),NRe.forEach(t),W_r=i(Ce),kM=n(Ce,"LI",{});var jRe=s(kM);mve=n(jRe,"STRONG",{});var eMt=s(mve);Q_r=r(eMt,"xlm"),eMt.forEach(t),H_r=r(jRe," \u2014 "),DQ=n(jRe,"A",{href:!0});var oMt=s(DQ);U_r=r(oMt,"TFXLMWithLMHeadModel"),oMt.forEach(t),J_r=r(jRe," (XLM model)"),jRe.forEach(t),Y_r=i(Ce),SM=n(Ce,"LI",{});var DRe=s(SM);gve=n(DRe,"STRONG",{});var rMt=s(gve);K_r=r(rMt,"xlnet"),rMt.forEach(t),Z_r=r(DRe," \u2014 "),GQ=n(DRe,"A",{href:!0});var tMt=s(GQ);e1r=r(tMt,"TFXLNetLMHeadModel"),tMt.forEach(t),o1r=r(DRe," (XLNet model)"),DRe.forEach(t),Ce.forEach(t),r1r=i(bl),T(RM.$$.fragment,bl),bl.forEach(t),_l.forEach(t),dje=i(f),Jd=n(f,"H2",{class:!0});var pGe=s(Jd);PM=n(pGe,"A",{id:!0,class:!0,href:!0});var aMt=s(PM);hve=n(aMt,"SPAN",{});var nMt=s(hve);T(E8.$$.fragment,nMt),nMt.forEach(t),aMt.forEach(t),t1r=i(pGe),pve=n(pGe,"SPAN",{});var sMt=s(pve);a1r=r(sMt,"TFAutoModelForImageClassification"),sMt.forEach(t),pGe.forEach(t),cje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(C8.$$.fragment,vl),n1r=i(vl),Yd=n(vl,"P",{});var hee=s(Yd);s1r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=n(hee,"A",{href:!0});var lMt=s(OQ);l1r=r(lMt,"from_pretrained()"),lMt.forEach(t),i1r=r(hee," class method or the "),VQ=n(hee,"A",{href:!0});var iMt=s(VQ);d1r=r(iMt,"from_config()"),iMt.forEach(t),c1r=r(hee,` class
method.`),hee.forEach(t),f1r=i(vl),w8=n(vl,"P",{});var uGe=s(w8);m1r=r(uGe,"This class cannot be instantiated directly using "),uve=n(uGe,"CODE",{});var dMt=s(uve);g1r=r(dMt,"__init__()"),dMt.forEach(t),h1r=r(uGe," (throws an error)."),uGe.forEach(t),p1r=i(vl),$t=n(vl,"DIV",{class:!0});var $A=s($t);T(A8.$$.fragment,$A),u1r=i($A),_ve=n($A,"P",{});var cMt=s(_ve);_1r=r(cMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cMt.forEach(t),b1r=i($A),Kd=n($A,"P",{});var pee=s(Kd);v1r=r(pee,`Note:
Loading a model from its configuration file does `),bve=n(pee,"STRONG",{});var fMt=s(bve);F1r=r(fMt,"not"),fMt.forEach(t),T1r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(pee,"A",{href:!0});var mMt=s(XQ);M1r=r(mMt,"from_pretrained()"),mMt.forEach(t),E1r=r(pee," to load the model weights."),pee.forEach(t),C1r=i($A),T(BM.$$.fragment,$A),$A.forEach(t),w1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(y8.$$.fragment,Fl),A1r=i(Fl),vve=n(Fl,"P",{});var gMt=s(vve);y1r=r(gMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gMt.forEach(t),L1r=i(Fl),on=n(Fl,"P",{});var kA=s(on);x1r=r(kA,"The model class to instantiate is selected based on the "),Fve=n(kA,"CODE",{});var hMt=s(Fve);$1r=r(hMt,"model_type"),hMt.forEach(t),k1r=r(kA,` property of the config object (either
passed as an argument or loaded from `),Tve=n(kA,"CODE",{});var pMt=s(Tve);S1r=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),R1r=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(kA,"CODE",{});var uMt=s(Mve);P1r=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),B1r=r(kA,":"),kA.forEach(t),I1r=i(Fl),rn=n(Fl,"UL",{});var SA=s(rn);IM=n(SA,"LI",{});var GRe=s(IM);Eve=n(GRe,"STRONG",{});var _Mt=s(Eve);q1r=r(_Mt,"convnext"),_Mt.forEach(t),N1r=r(GRe," \u2014 "),zQ=n(GRe,"A",{href:!0});var bMt=s(zQ);j1r=r(bMt,"TFConvNextForImageClassification"),bMt.forEach(t),D1r=r(GRe," (ConvNext model)"),GRe.forEach(t),G1r=i(SA),qM=n(SA,"LI",{});var ORe=s(qM);Cve=n(ORe,"STRONG",{});var vMt=s(Cve);O1r=r(vMt,"data2vec-vision"),vMt.forEach(t),V1r=r(ORe," \u2014 "),WQ=n(ORe,"A",{href:!0});var FMt=s(WQ);X1r=r(FMt,"TFData2VecVisionForImageClassification"),FMt.forEach(t),z1r=r(ORe," (Data2VecVision model)"),ORe.forEach(t),W1r=i(SA),NM=n(SA,"LI",{});var VRe=s(NM);wve=n(VRe,"STRONG",{});var TMt=s(wve);Q1r=r(TMt,"swin"),TMt.forEach(t),H1r=r(VRe," \u2014 "),QQ=n(VRe,"A",{href:!0});var MMt=s(QQ);U1r=r(MMt,"TFSwinForImageClassification"),MMt.forEach(t),J1r=r(VRe," (Swin model)"),VRe.forEach(t),Y1r=i(SA),jM=n(SA,"LI",{});var XRe=s(jM);Ave=n(XRe,"STRONG",{});var EMt=s(Ave);K1r=r(EMt,"vit"),EMt.forEach(t),Z1r=r(XRe," \u2014 "),HQ=n(XRe,"A",{href:!0});var CMt=s(HQ);e2r=r(CMt,"TFViTForImageClassification"),CMt.forEach(t),o2r=r(XRe," (ViT model)"),XRe.forEach(t),SA.forEach(t),r2r=i(Fl),T(DM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),fje=i(f),Zd=n(f,"H2",{class:!0});var _Ge=s(Zd);GM=n(_Ge,"A",{id:!0,class:!0,href:!0});var wMt=s(GM);yve=n(wMt,"SPAN",{});var AMt=s(yve);T(L8.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),t2r=i(_Ge),Lve=n(_Ge,"SPAN",{});var yMt=s(Lve);a2r=r(yMt,"TFAutoModelForMaskedLM"),yMt.forEach(t),_Ge.forEach(t),mje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(x8.$$.fragment,Tl),n2r=i(Tl),ec=n(Tl,"P",{});var uee=s(ec);s2r=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UQ=n(uee,"A",{href:!0});var LMt=s(UQ);l2r=r(LMt,"from_pretrained()"),LMt.forEach(t),i2r=r(uee," class method or the "),JQ=n(uee,"A",{href:!0});var xMt=s(JQ);d2r=r(xMt,"from_config()"),xMt.forEach(t),c2r=r(uee,` class
method.`),uee.forEach(t),f2r=i(Tl),$8=n(Tl,"P",{});var bGe=s($8);m2r=r(bGe,"This class cannot be instantiated directly using "),xve=n(bGe,"CODE",{});var $Mt=s(xve);g2r=r($Mt,"__init__()"),$Mt.forEach(t),h2r=r(bGe," (throws an error)."),bGe.forEach(t),p2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var RA=s(kt);T(k8.$$.fragment,RA),u2r=i(RA),$ve=n(RA,"P",{});var kMt=s($ve);_2r=r(kMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kMt.forEach(t),b2r=i(RA),oc=n(RA,"P",{});var _ee=s(oc);v2r=r(_ee,`Note:
Loading a model from its configuration file does `),kve=n(_ee,"STRONG",{});var SMt=s(kve);F2r=r(SMt,"not"),SMt.forEach(t),T2r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(_ee,"A",{href:!0});var RMt=s(YQ);M2r=r(RMt,"from_pretrained()"),RMt.forEach(t),E2r=r(_ee," to load the model weights."),_ee.forEach(t),C2r=i(RA),T(OM.$$.fragment,RA),RA.forEach(t),w2r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(S8.$$.fragment,Ml),A2r=i(Ml),Sve=n(Ml,"P",{});var PMt=s(Sve);y2r=r(PMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PMt.forEach(t),L2r=i(Ml),tn=n(Ml,"P",{});var PA=s(tn);x2r=r(PA,"The model class to instantiate is selected based on the "),Rve=n(PA,"CODE",{});var BMt=s(Rve);$2r=r(BMt,"model_type"),BMt.forEach(t),k2r=r(PA,` property of the config object (either
passed as an argument or loaded from `),Pve=n(PA,"CODE",{});var IMt=s(Pve);S2r=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),R2r=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(PA,"CODE",{});var qMt=s(Bve);P2r=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),B2r=r(PA,":"),PA.forEach(t),I2r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);VM=n(fe,"LI",{});var zRe=s(VM);Ive=n(zRe,"STRONG",{});var NMt=s(Ive);q2r=r(NMt,"albert"),NMt.forEach(t),N2r=r(zRe," \u2014 "),KQ=n(zRe,"A",{href:!0});var jMt=s(KQ);j2r=r(jMt,"TFAlbertForMaskedLM"),jMt.forEach(t),D2r=r(zRe," (ALBERT model)"),zRe.forEach(t),G2r=i(fe),XM=n(fe,"LI",{});var WRe=s(XM);qve=n(WRe,"STRONG",{});var DMt=s(qve);O2r=r(DMt,"bert"),DMt.forEach(t),V2r=r(WRe," \u2014 "),ZQ=n(WRe,"A",{href:!0});var GMt=s(ZQ);X2r=r(GMt,"TFBertForMaskedLM"),GMt.forEach(t),z2r=r(WRe," (BERT model)"),WRe.forEach(t),W2r=i(fe),zM=n(fe,"LI",{});var QRe=s(zM);Nve=n(QRe,"STRONG",{});var OMt=s(Nve);Q2r=r(OMt,"camembert"),OMt.forEach(t),H2r=r(QRe," \u2014 "),eH=n(QRe,"A",{href:!0});var VMt=s(eH);U2r=r(VMt,"TFCamembertForMaskedLM"),VMt.forEach(t),J2r=r(QRe," (CamemBERT model)"),QRe.forEach(t),Y2r=i(fe),WM=n(fe,"LI",{});var HRe=s(WM);jve=n(HRe,"STRONG",{});var XMt=s(jve);K2r=r(XMt,"convbert"),XMt.forEach(t),Z2r=r(HRe," \u2014 "),oH=n(HRe,"A",{href:!0});var zMt=s(oH);ebr=r(zMt,"TFConvBertForMaskedLM"),zMt.forEach(t),obr=r(HRe," (ConvBERT model)"),HRe.forEach(t),rbr=i(fe),QM=n(fe,"LI",{});var URe=s(QM);Dve=n(URe,"STRONG",{});var WMt=s(Dve);tbr=r(WMt,"deberta"),WMt.forEach(t),abr=r(URe," \u2014 "),rH=n(URe,"A",{href:!0});var QMt=s(rH);nbr=r(QMt,"TFDebertaForMaskedLM"),QMt.forEach(t),sbr=r(URe," (DeBERTa model)"),URe.forEach(t),lbr=i(fe),HM=n(fe,"LI",{});var JRe=s(HM);Gve=n(JRe,"STRONG",{});var HMt=s(Gve);ibr=r(HMt,"deberta-v2"),HMt.forEach(t),dbr=r(JRe," \u2014 "),tH=n(JRe,"A",{href:!0});var UMt=s(tH);cbr=r(UMt,"TFDebertaV2ForMaskedLM"),UMt.forEach(t),fbr=r(JRe," (DeBERTa-v2 model)"),JRe.forEach(t),mbr=i(fe),UM=n(fe,"LI",{});var YRe=s(UM);Ove=n(YRe,"STRONG",{});var JMt=s(Ove);gbr=r(JMt,"distilbert"),JMt.forEach(t),hbr=r(YRe," \u2014 "),aH=n(YRe,"A",{href:!0});var YMt=s(aH);pbr=r(YMt,"TFDistilBertForMaskedLM"),YMt.forEach(t),ubr=r(YRe," (DistilBERT model)"),YRe.forEach(t),_br=i(fe),JM=n(fe,"LI",{});var KRe=s(JM);Vve=n(KRe,"STRONG",{});var KMt=s(Vve);bbr=r(KMt,"electra"),KMt.forEach(t),vbr=r(KRe," \u2014 "),nH=n(KRe,"A",{href:!0});var ZMt=s(nH);Fbr=r(ZMt,"TFElectraForMaskedLM"),ZMt.forEach(t),Tbr=r(KRe," (ELECTRA model)"),KRe.forEach(t),Mbr=i(fe),YM=n(fe,"LI",{});var ZRe=s(YM);Xve=n(ZRe,"STRONG",{});var e4t=s(Xve);Ebr=r(e4t,"flaubert"),e4t.forEach(t),Cbr=r(ZRe," \u2014 "),sH=n(ZRe,"A",{href:!0});var o4t=s(sH);wbr=r(o4t,"TFFlaubertWithLMHeadModel"),o4t.forEach(t),Abr=r(ZRe," (FlauBERT model)"),ZRe.forEach(t),ybr=i(fe),KM=n(fe,"LI",{});var ePe=s(KM);zve=n(ePe,"STRONG",{});var r4t=s(zve);Lbr=r(r4t,"funnel"),r4t.forEach(t),xbr=r(ePe," \u2014 "),lH=n(ePe,"A",{href:!0});var t4t=s(lH);$br=r(t4t,"TFFunnelForMaskedLM"),t4t.forEach(t),kbr=r(ePe," (Funnel Transformer model)"),ePe.forEach(t),Sbr=i(fe),ZM=n(fe,"LI",{});var oPe=s(ZM);Wve=n(oPe,"STRONG",{});var a4t=s(Wve);Rbr=r(a4t,"layoutlm"),a4t.forEach(t),Pbr=r(oPe," \u2014 "),iH=n(oPe,"A",{href:!0});var n4t=s(iH);Bbr=r(n4t,"TFLayoutLMForMaskedLM"),n4t.forEach(t),Ibr=r(oPe," (LayoutLM model)"),oPe.forEach(t),qbr=i(fe),e4=n(fe,"LI",{});var rPe=s(e4);Qve=n(rPe,"STRONG",{});var s4t=s(Qve);Nbr=r(s4t,"longformer"),s4t.forEach(t),jbr=r(rPe," \u2014 "),dH=n(rPe,"A",{href:!0});var l4t=s(dH);Dbr=r(l4t,"TFLongformerForMaskedLM"),l4t.forEach(t),Gbr=r(rPe," (Longformer model)"),rPe.forEach(t),Obr=i(fe),o4=n(fe,"LI",{});var tPe=s(o4);Hve=n(tPe,"STRONG",{});var i4t=s(Hve);Vbr=r(i4t,"mobilebert"),i4t.forEach(t),Xbr=r(tPe," \u2014 "),cH=n(tPe,"A",{href:!0});var d4t=s(cH);zbr=r(d4t,"TFMobileBertForMaskedLM"),d4t.forEach(t),Wbr=r(tPe," (MobileBERT model)"),tPe.forEach(t),Qbr=i(fe),r4=n(fe,"LI",{});var aPe=s(r4);Uve=n(aPe,"STRONG",{});var c4t=s(Uve);Hbr=r(c4t,"mpnet"),c4t.forEach(t),Ubr=r(aPe," \u2014 "),fH=n(aPe,"A",{href:!0});var f4t=s(fH);Jbr=r(f4t,"TFMPNetForMaskedLM"),f4t.forEach(t),Ybr=r(aPe," (MPNet model)"),aPe.forEach(t),Kbr=i(fe),t4=n(fe,"LI",{});var nPe=s(t4);Jve=n(nPe,"STRONG",{});var m4t=s(Jve);Zbr=r(m4t,"rembert"),m4t.forEach(t),evr=r(nPe," \u2014 "),mH=n(nPe,"A",{href:!0});var g4t=s(mH);ovr=r(g4t,"TFRemBertForMaskedLM"),g4t.forEach(t),rvr=r(nPe," (RemBERT model)"),nPe.forEach(t),tvr=i(fe),a4=n(fe,"LI",{});var sPe=s(a4);Yve=n(sPe,"STRONG",{});var h4t=s(Yve);avr=r(h4t,"roberta"),h4t.forEach(t),nvr=r(sPe," \u2014 "),gH=n(sPe,"A",{href:!0});var p4t=s(gH);svr=r(p4t,"TFRobertaForMaskedLM"),p4t.forEach(t),lvr=r(sPe," (RoBERTa model)"),sPe.forEach(t),ivr=i(fe),n4=n(fe,"LI",{});var lPe=s(n4);Kve=n(lPe,"STRONG",{});var u4t=s(Kve);dvr=r(u4t,"roformer"),u4t.forEach(t),cvr=r(lPe," \u2014 "),hH=n(lPe,"A",{href:!0});var _4t=s(hH);fvr=r(_4t,"TFRoFormerForMaskedLM"),_4t.forEach(t),mvr=r(lPe," (RoFormer model)"),lPe.forEach(t),gvr=i(fe),s4=n(fe,"LI",{});var iPe=s(s4);Zve=n(iPe,"STRONG",{});var b4t=s(Zve);hvr=r(b4t,"tapas"),b4t.forEach(t),pvr=r(iPe," \u2014 "),pH=n(iPe,"A",{href:!0});var v4t=s(pH);uvr=r(v4t,"TFTapasForMaskedLM"),v4t.forEach(t),_vr=r(iPe," (TAPAS model)"),iPe.forEach(t),bvr=i(fe),l4=n(fe,"LI",{});var dPe=s(l4);e3e=n(dPe,"STRONG",{});var F4t=s(e3e);vvr=r(F4t,"xlm"),F4t.forEach(t),Fvr=r(dPe," \u2014 "),uH=n(dPe,"A",{href:!0});var T4t=s(uH);Tvr=r(T4t,"TFXLMWithLMHeadModel"),T4t.forEach(t),Mvr=r(dPe," (XLM model)"),dPe.forEach(t),Evr=i(fe),i4=n(fe,"LI",{});var cPe=s(i4);o3e=n(cPe,"STRONG",{});var M4t=s(o3e);Cvr=r(M4t,"xlm-roberta"),M4t.forEach(t),wvr=r(cPe," \u2014 "),_H=n(cPe,"A",{href:!0});var E4t=s(_H);Avr=r(E4t,"TFXLMRobertaForMaskedLM"),E4t.forEach(t),yvr=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),fe.forEach(t),Lvr=i(Ml),T(d4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),gje=i(f),rc=n(f,"H2",{class:!0});var vGe=s(rc);c4=n(vGe,"A",{id:!0,class:!0,href:!0});var C4t=s(c4);r3e=n(C4t,"SPAN",{});var w4t=s(r3e);T(R8.$$.fragment,w4t),w4t.forEach(t),C4t.forEach(t),xvr=i(vGe),t3e=n(vGe,"SPAN",{});var A4t=s(t3e);$vr=r(A4t,"TFAutoModelForSeq2SeqLM"),A4t.forEach(t),vGe.forEach(t),hje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(P8.$$.fragment,El),kvr=i(El),tc=n(El,"P",{});var bee=s(tc);Svr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bH=n(bee,"A",{href:!0});var y4t=s(bH);Rvr=r(y4t,"from_pretrained()"),y4t.forEach(t),Pvr=r(bee," class method or the "),vH=n(bee,"A",{href:!0});var L4t=s(vH);Bvr=r(L4t,"from_config()"),L4t.forEach(t),Ivr=r(bee,` class
method.`),bee.forEach(t),qvr=i(El),B8=n(El,"P",{});var FGe=s(B8);Nvr=r(FGe,"This class cannot be instantiated directly using "),a3e=n(FGe,"CODE",{});var x4t=s(a3e);jvr=r(x4t,"__init__()"),x4t.forEach(t),Dvr=r(FGe," (throws an error)."),FGe.forEach(t),Gvr=i(El),St=n(El,"DIV",{class:!0});var BA=s(St);T(I8.$$.fragment,BA),Ovr=i(BA),n3e=n(BA,"P",{});var $4t=s(n3e);Vvr=r($4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$4t.forEach(t),Xvr=i(BA),ac=n(BA,"P",{});var vee=s(ac);zvr=r(vee,`Note:
Loading a model from its configuration file does `),s3e=n(vee,"STRONG",{});var k4t=s(s3e);Wvr=r(k4t,"not"),k4t.forEach(t),Qvr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(vee,"A",{href:!0});var S4t=s(FH);Hvr=r(S4t,"from_pretrained()"),S4t.forEach(t),Uvr=r(vee," to load the model weights."),vee.forEach(t),Jvr=i(BA),T(f4.$$.fragment,BA),BA.forEach(t),Yvr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(q8.$$.fragment,Cl),Kvr=i(Cl),l3e=n(Cl,"P",{});var R4t=s(l3e);Zvr=r(R4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R4t.forEach(t),e3r=i(Cl),an=n(Cl,"P",{});var IA=s(an);o3r=r(IA,"The model class to instantiate is selected based on the "),i3e=n(IA,"CODE",{});var P4t=s(i3e);r3r=r(P4t,"model_type"),P4t.forEach(t),t3r=r(IA,` property of the config object (either
passed as an argument or loaded from `),d3e=n(IA,"CODE",{});var B4t=s(d3e);a3r=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),n3r=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(IA,"CODE",{});var I4t=s(c3e);s3r=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),l3r=r(IA,":"),IA.forEach(t),i3r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);m4=n(Be,"LI",{});var fPe=s(m4);f3e=n(fPe,"STRONG",{});var q4t=s(f3e);d3r=r(q4t,"bart"),q4t.forEach(t),c3r=r(fPe," \u2014 "),TH=n(fPe,"A",{href:!0});var N4t=s(TH);f3r=r(N4t,"TFBartForConditionalGeneration"),N4t.forEach(t),m3r=r(fPe," (BART model)"),fPe.forEach(t),g3r=i(Be),g4=n(Be,"LI",{});var mPe=s(g4);m3e=n(mPe,"STRONG",{});var j4t=s(m3e);h3r=r(j4t,"blenderbot"),j4t.forEach(t),p3r=r(mPe," \u2014 "),MH=n(mPe,"A",{href:!0});var D4t=s(MH);u3r=r(D4t,"TFBlenderbotForConditionalGeneration"),D4t.forEach(t),_3r=r(mPe," (Blenderbot model)"),mPe.forEach(t),b3r=i(Be),h4=n(Be,"LI",{});var gPe=s(h4);g3e=n(gPe,"STRONG",{});var G4t=s(g3e);v3r=r(G4t,"blenderbot-small"),G4t.forEach(t),F3r=r(gPe," \u2014 "),EH=n(gPe,"A",{href:!0});var O4t=s(EH);T3r=r(O4t,"TFBlenderbotSmallForConditionalGeneration"),O4t.forEach(t),M3r=r(gPe," (BlenderbotSmall model)"),gPe.forEach(t),E3r=i(Be),p4=n(Be,"LI",{});var hPe=s(p4);h3e=n(hPe,"STRONG",{});var V4t=s(h3e);C3r=r(V4t,"encoder-decoder"),V4t.forEach(t),w3r=r(hPe," \u2014 "),CH=n(hPe,"A",{href:!0});var X4t=s(CH);A3r=r(X4t,"TFEncoderDecoderModel"),X4t.forEach(t),y3r=r(hPe," (Encoder decoder model)"),hPe.forEach(t),L3r=i(Be),u4=n(Be,"LI",{});var pPe=s(u4);p3e=n(pPe,"STRONG",{});var z4t=s(p3e);x3r=r(z4t,"led"),z4t.forEach(t),$3r=r(pPe," \u2014 "),wH=n(pPe,"A",{href:!0});var W4t=s(wH);k3r=r(W4t,"TFLEDForConditionalGeneration"),W4t.forEach(t),S3r=r(pPe," (LED model)"),pPe.forEach(t),R3r=i(Be),_4=n(Be,"LI",{});var uPe=s(_4);u3e=n(uPe,"STRONG",{});var Q4t=s(u3e);P3r=r(Q4t,"marian"),Q4t.forEach(t),B3r=r(uPe," \u2014 "),AH=n(uPe,"A",{href:!0});var H4t=s(AH);I3r=r(H4t,"TFMarianMTModel"),H4t.forEach(t),q3r=r(uPe," (Marian model)"),uPe.forEach(t),N3r=i(Be),b4=n(Be,"LI",{});var _Pe=s(b4);_3e=n(_Pe,"STRONG",{});var U4t=s(_3e);j3r=r(U4t,"mbart"),U4t.forEach(t),D3r=r(_Pe," \u2014 "),yH=n(_Pe,"A",{href:!0});var J4t=s(yH);G3r=r(J4t,"TFMBartForConditionalGeneration"),J4t.forEach(t),O3r=r(_Pe," (mBART model)"),_Pe.forEach(t),V3r=i(Be),v4=n(Be,"LI",{});var bPe=s(v4);b3e=n(bPe,"STRONG",{});var Y4t=s(b3e);X3r=r(Y4t,"mt5"),Y4t.forEach(t),z3r=r(bPe," \u2014 "),LH=n(bPe,"A",{href:!0});var K4t=s(LH);W3r=r(K4t,"TFMT5ForConditionalGeneration"),K4t.forEach(t),Q3r=r(bPe," (mT5 model)"),bPe.forEach(t),H3r=i(Be),F4=n(Be,"LI",{});var vPe=s(F4);v3e=n(vPe,"STRONG",{});var Z4t=s(v3e);U3r=r(Z4t,"pegasus"),Z4t.forEach(t),J3r=r(vPe," \u2014 "),xH=n(vPe,"A",{href:!0});var eEt=s(xH);Y3r=r(eEt,"TFPegasusForConditionalGeneration"),eEt.forEach(t),K3r=r(vPe," (Pegasus model)"),vPe.forEach(t),Z3r=i(Be),T4=n(Be,"LI",{});var FPe=s(T4);F3e=n(FPe,"STRONG",{});var oEt=s(F3e);eFr=r(oEt,"t5"),oEt.forEach(t),oFr=r(FPe," \u2014 "),$H=n(FPe,"A",{href:!0});var rEt=s($H);rFr=r(rEt,"TFT5ForConditionalGeneration"),rEt.forEach(t),tFr=r(FPe," (T5 model)"),FPe.forEach(t),Be.forEach(t),aFr=i(Cl),T(M4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),pje=i(f),nc=n(f,"H2",{class:!0});var TGe=s(nc);E4=n(TGe,"A",{id:!0,class:!0,href:!0});var tEt=s(E4);T3e=n(tEt,"SPAN",{});var aEt=s(T3e);T(N8.$$.fragment,aEt),aEt.forEach(t),tEt.forEach(t),nFr=i(TGe),M3e=n(TGe,"SPAN",{});var nEt=s(M3e);sFr=r(nEt,"TFAutoModelForSequenceClassification"),nEt.forEach(t),TGe.forEach(t),uje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(j8.$$.fragment,wl),lFr=i(wl),sc=n(wl,"P",{});var Fee=s(sc);iFr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=n(Fee,"A",{href:!0});var sEt=s(kH);dFr=r(sEt,"from_pretrained()"),sEt.forEach(t),cFr=r(Fee," class method or the "),SH=n(Fee,"A",{href:!0});var lEt=s(SH);fFr=r(lEt,"from_config()"),lEt.forEach(t),mFr=r(Fee,` class
method.`),Fee.forEach(t),gFr=i(wl),D8=n(wl,"P",{});var MGe=s(D8);hFr=r(MGe,"This class cannot be instantiated directly using "),E3e=n(MGe,"CODE",{});var iEt=s(E3e);pFr=r(iEt,"__init__()"),iEt.forEach(t),uFr=r(MGe," (throws an error)."),MGe.forEach(t),_Fr=i(wl),Rt=n(wl,"DIV",{class:!0});var qA=s(Rt);T(G8.$$.fragment,qA),bFr=i(qA),C3e=n(qA,"P",{});var dEt=s(C3e);vFr=r(dEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dEt.forEach(t),FFr=i(qA),lc=n(qA,"P",{});var Tee=s(lc);TFr=r(Tee,`Note:
Loading a model from its configuration file does `),w3e=n(Tee,"STRONG",{});var cEt=s(w3e);MFr=r(cEt,"not"),cEt.forEach(t),EFr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Tee,"A",{href:!0});var fEt=s(RH);CFr=r(fEt,"from_pretrained()"),fEt.forEach(t),wFr=r(Tee," to load the model weights."),Tee.forEach(t),AFr=i(qA),T(C4.$$.fragment,qA),qA.forEach(t),yFr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(O8.$$.fragment,Al),LFr=i(Al),A3e=n(Al,"P",{});var mEt=s(A3e);xFr=r(mEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mEt.forEach(t),$Fr=i(Al),nn=n(Al,"P",{});var NA=s(nn);kFr=r(NA,"The model class to instantiate is selected based on the "),y3e=n(NA,"CODE",{});var gEt=s(y3e);SFr=r(gEt,"model_type"),gEt.forEach(t),RFr=r(NA,` property of the config object (either
passed as an argument or loaded from `),L3e=n(NA,"CODE",{});var hEt=s(L3e);PFr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),BFr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(NA,"CODE",{});var pEt=s(x3e);IFr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),qFr=r(NA,":"),NA.forEach(t),NFr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);w4=n(ae,"LI",{});var TPe=s(w4);$3e=n(TPe,"STRONG",{});var uEt=s($3e);jFr=r(uEt,"albert"),uEt.forEach(t),DFr=r(TPe," \u2014 "),PH=n(TPe,"A",{href:!0});var _Et=s(PH);GFr=r(_Et,"TFAlbertForSequenceClassification"),_Et.forEach(t),OFr=r(TPe," (ALBERT model)"),TPe.forEach(t),VFr=i(ae),A4=n(ae,"LI",{});var MPe=s(A4);k3e=n(MPe,"STRONG",{});var bEt=s(k3e);XFr=r(bEt,"bert"),bEt.forEach(t),zFr=r(MPe," \u2014 "),BH=n(MPe,"A",{href:!0});var vEt=s(BH);WFr=r(vEt,"TFBertForSequenceClassification"),vEt.forEach(t),QFr=r(MPe," (BERT model)"),MPe.forEach(t),HFr=i(ae),y4=n(ae,"LI",{});var EPe=s(y4);S3e=n(EPe,"STRONG",{});var FEt=s(S3e);UFr=r(FEt,"camembert"),FEt.forEach(t),JFr=r(EPe," \u2014 "),IH=n(EPe,"A",{href:!0});var TEt=s(IH);YFr=r(TEt,"TFCamembertForSequenceClassification"),TEt.forEach(t),KFr=r(EPe," (CamemBERT model)"),EPe.forEach(t),ZFr=i(ae),L4=n(ae,"LI",{});var CPe=s(L4);R3e=n(CPe,"STRONG",{});var MEt=s(R3e);eTr=r(MEt,"convbert"),MEt.forEach(t),oTr=r(CPe," \u2014 "),qH=n(CPe,"A",{href:!0});var EEt=s(qH);rTr=r(EEt,"TFConvBertForSequenceClassification"),EEt.forEach(t),tTr=r(CPe," (ConvBERT model)"),CPe.forEach(t),aTr=i(ae),x4=n(ae,"LI",{});var wPe=s(x4);P3e=n(wPe,"STRONG",{});var CEt=s(P3e);nTr=r(CEt,"ctrl"),CEt.forEach(t),sTr=r(wPe," \u2014 "),NH=n(wPe,"A",{href:!0});var wEt=s(NH);lTr=r(wEt,"TFCTRLForSequenceClassification"),wEt.forEach(t),iTr=r(wPe," (CTRL model)"),wPe.forEach(t),dTr=i(ae),$4=n(ae,"LI",{});var APe=s($4);B3e=n(APe,"STRONG",{});var AEt=s(B3e);cTr=r(AEt,"deberta"),AEt.forEach(t),fTr=r(APe," \u2014 "),jH=n(APe,"A",{href:!0});var yEt=s(jH);mTr=r(yEt,"TFDebertaForSequenceClassification"),yEt.forEach(t),gTr=r(APe," (DeBERTa model)"),APe.forEach(t),hTr=i(ae),k4=n(ae,"LI",{});var yPe=s(k4);I3e=n(yPe,"STRONG",{});var LEt=s(I3e);pTr=r(LEt,"deberta-v2"),LEt.forEach(t),uTr=r(yPe," \u2014 "),DH=n(yPe,"A",{href:!0});var xEt=s(DH);_Tr=r(xEt,"TFDebertaV2ForSequenceClassification"),xEt.forEach(t),bTr=r(yPe," (DeBERTa-v2 model)"),yPe.forEach(t),vTr=i(ae),S4=n(ae,"LI",{});var LPe=s(S4);q3e=n(LPe,"STRONG",{});var $Et=s(q3e);FTr=r($Et,"distilbert"),$Et.forEach(t),TTr=r(LPe," \u2014 "),GH=n(LPe,"A",{href:!0});var kEt=s(GH);MTr=r(kEt,"TFDistilBertForSequenceClassification"),kEt.forEach(t),ETr=r(LPe," (DistilBERT model)"),LPe.forEach(t),CTr=i(ae),R4=n(ae,"LI",{});var xPe=s(R4);N3e=n(xPe,"STRONG",{});var SEt=s(N3e);wTr=r(SEt,"electra"),SEt.forEach(t),ATr=r(xPe," \u2014 "),OH=n(xPe,"A",{href:!0});var REt=s(OH);yTr=r(REt,"TFElectraForSequenceClassification"),REt.forEach(t),LTr=r(xPe," (ELECTRA model)"),xPe.forEach(t),xTr=i(ae),P4=n(ae,"LI",{});var $Pe=s(P4);j3e=n($Pe,"STRONG",{});var PEt=s(j3e);$Tr=r(PEt,"flaubert"),PEt.forEach(t),kTr=r($Pe," \u2014 "),VH=n($Pe,"A",{href:!0});var BEt=s(VH);STr=r(BEt,"TFFlaubertForSequenceClassification"),BEt.forEach(t),RTr=r($Pe," (FlauBERT model)"),$Pe.forEach(t),PTr=i(ae),B4=n(ae,"LI",{});var kPe=s(B4);D3e=n(kPe,"STRONG",{});var IEt=s(D3e);BTr=r(IEt,"funnel"),IEt.forEach(t),ITr=r(kPe," \u2014 "),XH=n(kPe,"A",{href:!0});var qEt=s(XH);qTr=r(qEt,"TFFunnelForSequenceClassification"),qEt.forEach(t),NTr=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),jTr=i(ae),I4=n(ae,"LI",{});var SPe=s(I4);G3e=n(SPe,"STRONG",{});var NEt=s(G3e);DTr=r(NEt,"gpt2"),NEt.forEach(t),GTr=r(SPe," \u2014 "),zH=n(SPe,"A",{href:!0});var jEt=s(zH);OTr=r(jEt,"TFGPT2ForSequenceClassification"),jEt.forEach(t),VTr=r(SPe," (OpenAI GPT-2 model)"),SPe.forEach(t),XTr=i(ae),q4=n(ae,"LI",{});var RPe=s(q4);O3e=n(RPe,"STRONG",{});var DEt=s(O3e);zTr=r(DEt,"gptj"),DEt.forEach(t),WTr=r(RPe," \u2014 "),WH=n(RPe,"A",{href:!0});var GEt=s(WH);QTr=r(GEt,"TFGPTJForSequenceClassification"),GEt.forEach(t),HTr=r(RPe," (GPT-J model)"),RPe.forEach(t),UTr=i(ae),N4=n(ae,"LI",{});var PPe=s(N4);V3e=n(PPe,"STRONG",{});var OEt=s(V3e);JTr=r(OEt,"layoutlm"),OEt.forEach(t),YTr=r(PPe," \u2014 "),QH=n(PPe,"A",{href:!0});var VEt=s(QH);KTr=r(VEt,"TFLayoutLMForSequenceClassification"),VEt.forEach(t),ZTr=r(PPe," (LayoutLM model)"),PPe.forEach(t),e7r=i(ae),j4=n(ae,"LI",{});var BPe=s(j4);X3e=n(BPe,"STRONG",{});var XEt=s(X3e);o7r=r(XEt,"longformer"),XEt.forEach(t),r7r=r(BPe," \u2014 "),HH=n(BPe,"A",{href:!0});var zEt=s(HH);t7r=r(zEt,"TFLongformerForSequenceClassification"),zEt.forEach(t),a7r=r(BPe," (Longformer model)"),BPe.forEach(t),n7r=i(ae),D4=n(ae,"LI",{});var IPe=s(D4);z3e=n(IPe,"STRONG",{});var WEt=s(z3e);s7r=r(WEt,"mobilebert"),WEt.forEach(t),l7r=r(IPe," \u2014 "),UH=n(IPe,"A",{href:!0});var QEt=s(UH);i7r=r(QEt,"TFMobileBertForSequenceClassification"),QEt.forEach(t),d7r=r(IPe," (MobileBERT model)"),IPe.forEach(t),c7r=i(ae),G4=n(ae,"LI",{});var qPe=s(G4);W3e=n(qPe,"STRONG",{});var HEt=s(W3e);f7r=r(HEt,"mpnet"),HEt.forEach(t),m7r=r(qPe," \u2014 "),JH=n(qPe,"A",{href:!0});var UEt=s(JH);g7r=r(UEt,"TFMPNetForSequenceClassification"),UEt.forEach(t),h7r=r(qPe," (MPNet model)"),qPe.forEach(t),p7r=i(ae),O4=n(ae,"LI",{});var NPe=s(O4);Q3e=n(NPe,"STRONG",{});var JEt=s(Q3e);u7r=r(JEt,"openai-gpt"),JEt.forEach(t),_7r=r(NPe," \u2014 "),YH=n(NPe,"A",{href:!0});var YEt=s(YH);b7r=r(YEt,"TFOpenAIGPTForSequenceClassification"),YEt.forEach(t),v7r=r(NPe," (OpenAI GPT model)"),NPe.forEach(t),F7r=i(ae),V4=n(ae,"LI",{});var jPe=s(V4);H3e=n(jPe,"STRONG",{});var KEt=s(H3e);T7r=r(KEt,"rembert"),KEt.forEach(t),M7r=r(jPe," \u2014 "),KH=n(jPe,"A",{href:!0});var ZEt=s(KH);E7r=r(ZEt,"TFRemBertForSequenceClassification"),ZEt.forEach(t),C7r=r(jPe," (RemBERT model)"),jPe.forEach(t),w7r=i(ae),X4=n(ae,"LI",{});var DPe=s(X4);U3e=n(DPe,"STRONG",{});var eCt=s(U3e);A7r=r(eCt,"roberta"),eCt.forEach(t),y7r=r(DPe," \u2014 "),ZH=n(DPe,"A",{href:!0});var oCt=s(ZH);L7r=r(oCt,"TFRobertaForSequenceClassification"),oCt.forEach(t),x7r=r(DPe," (RoBERTa model)"),DPe.forEach(t),$7r=i(ae),z4=n(ae,"LI",{});var GPe=s(z4);J3e=n(GPe,"STRONG",{});var rCt=s(J3e);k7r=r(rCt,"roformer"),rCt.forEach(t),S7r=r(GPe," \u2014 "),eU=n(GPe,"A",{href:!0});var tCt=s(eU);R7r=r(tCt,"TFRoFormerForSequenceClassification"),tCt.forEach(t),P7r=r(GPe," (RoFormer model)"),GPe.forEach(t),B7r=i(ae),W4=n(ae,"LI",{});var OPe=s(W4);Y3e=n(OPe,"STRONG",{});var aCt=s(Y3e);I7r=r(aCt,"tapas"),aCt.forEach(t),q7r=r(OPe," \u2014 "),oU=n(OPe,"A",{href:!0});var nCt=s(oU);N7r=r(nCt,"TFTapasForSequenceClassification"),nCt.forEach(t),j7r=r(OPe," (TAPAS model)"),OPe.forEach(t),D7r=i(ae),Q4=n(ae,"LI",{});var VPe=s(Q4);K3e=n(VPe,"STRONG",{});var sCt=s(K3e);G7r=r(sCt,"transfo-xl"),sCt.forEach(t),O7r=r(VPe," \u2014 "),rU=n(VPe,"A",{href:!0});var lCt=s(rU);V7r=r(lCt,"TFTransfoXLForSequenceClassification"),lCt.forEach(t),X7r=r(VPe," (Transformer-XL model)"),VPe.forEach(t),z7r=i(ae),H4=n(ae,"LI",{});var XPe=s(H4);Z3e=n(XPe,"STRONG",{});var iCt=s(Z3e);W7r=r(iCt,"xlm"),iCt.forEach(t),Q7r=r(XPe," \u2014 "),tU=n(XPe,"A",{href:!0});var dCt=s(tU);H7r=r(dCt,"TFXLMForSequenceClassification"),dCt.forEach(t),U7r=r(XPe," (XLM model)"),XPe.forEach(t),J7r=i(ae),U4=n(ae,"LI",{});var zPe=s(U4);eFe=n(zPe,"STRONG",{});var cCt=s(eFe);Y7r=r(cCt,"xlm-roberta"),cCt.forEach(t),K7r=r(zPe," \u2014 "),aU=n(zPe,"A",{href:!0});var fCt=s(aU);Z7r=r(fCt,"TFXLMRobertaForSequenceClassification"),fCt.forEach(t),eMr=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),oMr=i(ae),J4=n(ae,"LI",{});var WPe=s(J4);oFe=n(WPe,"STRONG",{});var mCt=s(oFe);rMr=r(mCt,"xlnet"),mCt.forEach(t),tMr=r(WPe," \u2014 "),nU=n(WPe,"A",{href:!0});var gCt=s(nU);aMr=r(gCt,"TFXLNetForSequenceClassification"),gCt.forEach(t),nMr=r(WPe," (XLNet model)"),WPe.forEach(t),ae.forEach(t),sMr=i(Al),T(Y4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),_je=i(f),ic=n(f,"H2",{class:!0});var EGe=s(ic);K4=n(EGe,"A",{id:!0,class:!0,href:!0});var hCt=s(K4);rFe=n(hCt,"SPAN",{});var pCt=s(rFe);T(V8.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),lMr=i(EGe),tFe=n(EGe,"SPAN",{});var uCt=s(tFe);iMr=r(uCt,"TFAutoModelForMultipleChoice"),uCt.forEach(t),EGe.forEach(t),bje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(X8.$$.fragment,yl),dMr=i(yl),dc=n(yl,"P",{});var Mee=s(dc);cMr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sU=n(Mee,"A",{href:!0});var _Ct=s(sU);fMr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),mMr=r(Mee," class method or the "),lU=n(Mee,"A",{href:!0});var bCt=s(lU);gMr=r(bCt,"from_config()"),bCt.forEach(t),hMr=r(Mee,` class
method.`),Mee.forEach(t),pMr=i(yl),z8=n(yl,"P",{});var CGe=s(z8);uMr=r(CGe,"This class cannot be instantiated directly using "),aFe=n(CGe,"CODE",{});var vCt=s(aFe);_Mr=r(vCt,"__init__()"),vCt.forEach(t),bMr=r(CGe," (throws an error)."),CGe.forEach(t),vMr=i(yl),Pt=n(yl,"DIV",{class:!0});var jA=s(Pt);T(W8.$$.fragment,jA),FMr=i(jA),nFe=n(jA,"P",{});var FCt=s(nFe);TMr=r(FCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FCt.forEach(t),MMr=i(jA),cc=n(jA,"P",{});var Eee=s(cc);EMr=r(Eee,`Note:
Loading a model from its configuration file does `),sFe=n(Eee,"STRONG",{});var TCt=s(sFe);CMr=r(TCt,"not"),TCt.forEach(t),wMr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(Eee,"A",{href:!0});var MCt=s(iU);AMr=r(MCt,"from_pretrained()"),MCt.forEach(t),yMr=r(Eee," to load the model weights."),Eee.forEach(t),LMr=i(jA),T(Z4.$$.fragment,jA),jA.forEach(t),xMr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(Q8.$$.fragment,Ll),$Mr=i(Ll),lFe=n(Ll,"P",{});var ECt=s(lFe);kMr=r(ECt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ECt.forEach(t),SMr=i(Ll),sn=n(Ll,"P",{});var DA=s(sn);RMr=r(DA,"The model class to instantiate is selected based on the "),iFe=n(DA,"CODE",{});var CCt=s(iFe);PMr=r(CCt,"model_type"),CCt.forEach(t),BMr=r(DA,` property of the config object (either
passed as an argument or loaded from `),dFe=n(DA,"CODE",{});var wCt=s(dFe);IMr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),qMr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(DA,"CODE",{});var ACt=s(cFe);NMr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),jMr=r(DA,":"),DA.forEach(t),DMr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);eE=n(be,"LI",{});var QPe=s(eE);fFe=n(QPe,"STRONG",{});var yCt=s(fFe);GMr=r(yCt,"albert"),yCt.forEach(t),OMr=r(QPe," \u2014 "),dU=n(QPe,"A",{href:!0});var LCt=s(dU);VMr=r(LCt,"TFAlbertForMultipleChoice"),LCt.forEach(t),XMr=r(QPe," (ALBERT model)"),QPe.forEach(t),zMr=i(be),oE=n(be,"LI",{});var HPe=s(oE);mFe=n(HPe,"STRONG",{});var xCt=s(mFe);WMr=r(xCt,"bert"),xCt.forEach(t),QMr=r(HPe," \u2014 "),cU=n(HPe,"A",{href:!0});var $Ct=s(cU);HMr=r($Ct,"TFBertForMultipleChoice"),$Ct.forEach(t),UMr=r(HPe," (BERT model)"),HPe.forEach(t),JMr=i(be),rE=n(be,"LI",{});var UPe=s(rE);gFe=n(UPe,"STRONG",{});var kCt=s(gFe);YMr=r(kCt,"camembert"),kCt.forEach(t),KMr=r(UPe," \u2014 "),fU=n(UPe,"A",{href:!0});var SCt=s(fU);ZMr=r(SCt,"TFCamembertForMultipleChoice"),SCt.forEach(t),e4r=r(UPe," (CamemBERT model)"),UPe.forEach(t),o4r=i(be),tE=n(be,"LI",{});var JPe=s(tE);hFe=n(JPe,"STRONG",{});var RCt=s(hFe);r4r=r(RCt,"convbert"),RCt.forEach(t),t4r=r(JPe," \u2014 "),mU=n(JPe,"A",{href:!0});var PCt=s(mU);a4r=r(PCt,"TFConvBertForMultipleChoice"),PCt.forEach(t),n4r=r(JPe," (ConvBERT model)"),JPe.forEach(t),s4r=i(be),aE=n(be,"LI",{});var YPe=s(aE);pFe=n(YPe,"STRONG",{});var BCt=s(pFe);l4r=r(BCt,"distilbert"),BCt.forEach(t),i4r=r(YPe," \u2014 "),gU=n(YPe,"A",{href:!0});var ICt=s(gU);d4r=r(ICt,"TFDistilBertForMultipleChoice"),ICt.forEach(t),c4r=r(YPe," (DistilBERT model)"),YPe.forEach(t),f4r=i(be),nE=n(be,"LI",{});var KPe=s(nE);uFe=n(KPe,"STRONG",{});var qCt=s(uFe);m4r=r(qCt,"electra"),qCt.forEach(t),g4r=r(KPe," \u2014 "),hU=n(KPe,"A",{href:!0});var NCt=s(hU);h4r=r(NCt,"TFElectraForMultipleChoice"),NCt.forEach(t),p4r=r(KPe," (ELECTRA model)"),KPe.forEach(t),u4r=i(be),sE=n(be,"LI",{});var ZPe=s(sE);_Fe=n(ZPe,"STRONG",{});var jCt=s(_Fe);_4r=r(jCt,"flaubert"),jCt.forEach(t),b4r=r(ZPe," \u2014 "),pU=n(ZPe,"A",{href:!0});var DCt=s(pU);v4r=r(DCt,"TFFlaubertForMultipleChoice"),DCt.forEach(t),F4r=r(ZPe," (FlauBERT model)"),ZPe.forEach(t),T4r=i(be),lE=n(be,"LI",{});var eBe=s(lE);bFe=n(eBe,"STRONG",{});var GCt=s(bFe);M4r=r(GCt,"funnel"),GCt.forEach(t),E4r=r(eBe," \u2014 "),uU=n(eBe,"A",{href:!0});var OCt=s(uU);C4r=r(OCt,"TFFunnelForMultipleChoice"),OCt.forEach(t),w4r=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),A4r=i(be),iE=n(be,"LI",{});var oBe=s(iE);vFe=n(oBe,"STRONG",{});var VCt=s(vFe);y4r=r(VCt,"longformer"),VCt.forEach(t),L4r=r(oBe," \u2014 "),_U=n(oBe,"A",{href:!0});var XCt=s(_U);x4r=r(XCt,"TFLongformerForMultipleChoice"),XCt.forEach(t),$4r=r(oBe," (Longformer model)"),oBe.forEach(t),k4r=i(be),dE=n(be,"LI",{});var rBe=s(dE);FFe=n(rBe,"STRONG",{});var zCt=s(FFe);S4r=r(zCt,"mobilebert"),zCt.forEach(t),R4r=r(rBe," \u2014 "),bU=n(rBe,"A",{href:!0});var WCt=s(bU);P4r=r(WCt,"TFMobileBertForMultipleChoice"),WCt.forEach(t),B4r=r(rBe," (MobileBERT model)"),rBe.forEach(t),I4r=i(be),cE=n(be,"LI",{});var tBe=s(cE);TFe=n(tBe,"STRONG",{});var QCt=s(TFe);q4r=r(QCt,"mpnet"),QCt.forEach(t),N4r=r(tBe," \u2014 "),vU=n(tBe,"A",{href:!0});var HCt=s(vU);j4r=r(HCt,"TFMPNetForMultipleChoice"),HCt.forEach(t),D4r=r(tBe," (MPNet model)"),tBe.forEach(t),G4r=i(be),fE=n(be,"LI",{});var aBe=s(fE);MFe=n(aBe,"STRONG",{});var UCt=s(MFe);O4r=r(UCt,"rembert"),UCt.forEach(t),V4r=r(aBe," \u2014 "),FU=n(aBe,"A",{href:!0});var JCt=s(FU);X4r=r(JCt,"TFRemBertForMultipleChoice"),JCt.forEach(t),z4r=r(aBe," (RemBERT model)"),aBe.forEach(t),W4r=i(be),mE=n(be,"LI",{});var nBe=s(mE);EFe=n(nBe,"STRONG",{});var YCt=s(EFe);Q4r=r(YCt,"roberta"),YCt.forEach(t),H4r=r(nBe," \u2014 "),TU=n(nBe,"A",{href:!0});var KCt=s(TU);U4r=r(KCt,"TFRobertaForMultipleChoice"),KCt.forEach(t),J4r=r(nBe," (RoBERTa model)"),nBe.forEach(t),Y4r=i(be),gE=n(be,"LI",{});var sBe=s(gE);CFe=n(sBe,"STRONG",{});var ZCt=s(CFe);K4r=r(ZCt,"roformer"),ZCt.forEach(t),Z4r=r(sBe," \u2014 "),MU=n(sBe,"A",{href:!0});var e5t=s(MU);eEr=r(e5t,"TFRoFormerForMultipleChoice"),e5t.forEach(t),oEr=r(sBe," (RoFormer model)"),sBe.forEach(t),rEr=i(be),hE=n(be,"LI",{});var lBe=s(hE);wFe=n(lBe,"STRONG",{});var o5t=s(wFe);tEr=r(o5t,"xlm"),o5t.forEach(t),aEr=r(lBe," \u2014 "),EU=n(lBe,"A",{href:!0});var r5t=s(EU);nEr=r(r5t,"TFXLMForMultipleChoice"),r5t.forEach(t),sEr=r(lBe," (XLM model)"),lBe.forEach(t),lEr=i(be),pE=n(be,"LI",{});var iBe=s(pE);AFe=n(iBe,"STRONG",{});var t5t=s(AFe);iEr=r(t5t,"xlm-roberta"),t5t.forEach(t),dEr=r(iBe," \u2014 "),CU=n(iBe,"A",{href:!0});var a5t=s(CU);cEr=r(a5t,"TFXLMRobertaForMultipleChoice"),a5t.forEach(t),fEr=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),mEr=i(be),uE=n(be,"LI",{});var dBe=s(uE);yFe=n(dBe,"STRONG",{});var n5t=s(yFe);gEr=r(n5t,"xlnet"),n5t.forEach(t),hEr=r(dBe," \u2014 "),wU=n(dBe,"A",{href:!0});var s5t=s(wU);pEr=r(s5t,"TFXLNetForMultipleChoice"),s5t.forEach(t),uEr=r(dBe," (XLNet model)"),dBe.forEach(t),be.forEach(t),_Er=i(Ll),T(_E.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),vje=i(f),fc=n(f,"H2",{class:!0});var wGe=s(fc);bE=n(wGe,"A",{id:!0,class:!0,href:!0});var l5t=s(bE);LFe=n(l5t,"SPAN",{});var i5t=s(LFe);T(H8.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),bEr=i(wGe),xFe=n(wGe,"SPAN",{});var d5t=s(xFe);vEr=r(d5t,"TFAutoModelForNextSentencePrediction"),d5t.forEach(t),wGe.forEach(t),Fje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(U8.$$.fragment,xl),FEr=i(xl),mc=n(xl,"P",{});var Cee=s(mc);TEr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AU=n(Cee,"A",{href:!0});var c5t=s(AU);MEr=r(c5t,"from_pretrained()"),c5t.forEach(t),EEr=r(Cee," class method or the "),yU=n(Cee,"A",{href:!0});var f5t=s(yU);CEr=r(f5t,"from_config()"),f5t.forEach(t),wEr=r(Cee,` class
method.`),Cee.forEach(t),AEr=i(xl),J8=n(xl,"P",{});var AGe=s(J8);yEr=r(AGe,"This class cannot be instantiated directly using "),$Fe=n(AGe,"CODE",{});var m5t=s($Fe);LEr=r(m5t,"__init__()"),m5t.forEach(t),xEr=r(AGe," (throws an error)."),AGe.forEach(t),$Er=i(xl),Bt=n(xl,"DIV",{class:!0});var GA=s(Bt);T(Y8.$$.fragment,GA),kEr=i(GA),kFe=n(GA,"P",{});var g5t=s(kFe);SEr=r(g5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),g5t.forEach(t),REr=i(GA),gc=n(GA,"P",{});var wee=s(gc);PEr=r(wee,`Note:
Loading a model from its configuration file does `),SFe=n(wee,"STRONG",{});var h5t=s(SFe);BEr=r(h5t,"not"),h5t.forEach(t),IEr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(wee,"A",{href:!0});var p5t=s(LU);qEr=r(p5t,"from_pretrained()"),p5t.forEach(t),NEr=r(wee," to load the model weights."),wee.forEach(t),jEr=i(GA),T(vE.$$.fragment,GA),GA.forEach(t),DEr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(K8.$$.fragment,$l),GEr=i($l),RFe=n($l,"P",{});var u5t=s(RFe);OEr=r(u5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u5t.forEach(t),VEr=i($l),ln=n($l,"P",{});var OA=s(ln);XEr=r(OA,"The model class to instantiate is selected based on the "),PFe=n(OA,"CODE",{});var _5t=s(PFe);zEr=r(_5t,"model_type"),_5t.forEach(t),WEr=r(OA,` property of the config object (either
passed as an argument or loaded from `),BFe=n(OA,"CODE",{});var b5t=s(BFe);QEr=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),HEr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(OA,"CODE",{});var v5t=s(IFe);UEr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),JEr=r(OA,":"),OA.forEach(t),YEr=i($l),Z8=n($l,"UL",{});var yGe=s(Z8);FE=n(yGe,"LI",{});var cBe=s(FE);qFe=n(cBe,"STRONG",{});var F5t=s(qFe);KEr=r(F5t,"bert"),F5t.forEach(t),ZEr=r(cBe," \u2014 "),xU=n(cBe,"A",{href:!0});var T5t=s(xU);eCr=r(T5t,"TFBertForNextSentencePrediction"),T5t.forEach(t),oCr=r(cBe," (BERT model)"),cBe.forEach(t),rCr=i(yGe),TE=n(yGe,"LI",{});var fBe=s(TE);NFe=n(fBe,"STRONG",{});var M5t=s(NFe);tCr=r(M5t,"mobilebert"),M5t.forEach(t),aCr=r(fBe," \u2014 "),$U=n(fBe,"A",{href:!0});var E5t=s($U);nCr=r(E5t,"TFMobileBertForNextSentencePrediction"),E5t.forEach(t),sCr=r(fBe," (MobileBERT model)"),fBe.forEach(t),yGe.forEach(t),lCr=i($l),T(ME.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Tje=i(f),hc=n(f,"H2",{class:!0});var LGe=s(hc);EE=n(LGe,"A",{id:!0,class:!0,href:!0});var C5t=s(EE);jFe=n(C5t,"SPAN",{});var w5t=s(jFe);T(e9.$$.fragment,w5t),w5t.forEach(t),C5t.forEach(t),iCr=i(LGe),DFe=n(LGe,"SPAN",{});var A5t=s(DFe);dCr=r(A5t,"TFAutoModelForTableQuestionAnswering"),A5t.forEach(t),LGe.forEach(t),Mje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(o9.$$.fragment,kl),cCr=i(kl),pc=n(kl,"P",{});var Aee=s(pc);fCr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kU=n(Aee,"A",{href:!0});var y5t=s(kU);mCr=r(y5t,"from_pretrained()"),y5t.forEach(t),gCr=r(Aee," class method or the "),SU=n(Aee,"A",{href:!0});var L5t=s(SU);hCr=r(L5t,"from_config()"),L5t.forEach(t),pCr=r(Aee,` class
method.`),Aee.forEach(t),uCr=i(kl),r9=n(kl,"P",{});var xGe=s(r9);_Cr=r(xGe,"This class cannot be instantiated directly using "),GFe=n(xGe,"CODE",{});var x5t=s(GFe);bCr=r(x5t,"__init__()"),x5t.forEach(t),vCr=r(xGe," (throws an error)."),xGe.forEach(t),FCr=i(kl),It=n(kl,"DIV",{class:!0});var VA=s(It);T(t9.$$.fragment,VA),TCr=i(VA),OFe=n(VA,"P",{});var $5t=s(OFe);MCr=r($5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$5t.forEach(t),ECr=i(VA),uc=n(VA,"P",{});var yee=s(uc);CCr=r(yee,`Note:
Loading a model from its configuration file does `),VFe=n(yee,"STRONG",{});var k5t=s(VFe);wCr=r(k5t,"not"),k5t.forEach(t),ACr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(yee,"A",{href:!0});var S5t=s(RU);yCr=r(S5t,"from_pretrained()"),S5t.forEach(t),LCr=r(yee," to load the model weights."),yee.forEach(t),xCr=i(VA),T(CE.$$.fragment,VA),VA.forEach(t),$Cr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(a9.$$.fragment,Sl),kCr=i(Sl),XFe=n(Sl,"P",{});var R5t=s(XFe);SCr=r(R5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R5t.forEach(t),RCr=i(Sl),dn=n(Sl,"P",{});var XA=s(dn);PCr=r(XA,"The model class to instantiate is selected based on the "),zFe=n(XA,"CODE",{});var P5t=s(zFe);BCr=r(P5t,"model_type"),P5t.forEach(t),ICr=r(XA,` property of the config object (either
passed as an argument or loaded from `),WFe=n(XA,"CODE",{});var B5t=s(WFe);qCr=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),NCr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(XA,"CODE",{});var I5t=s(QFe);jCr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),DCr=r(XA,":"),XA.forEach(t),GCr=i(Sl),HFe=n(Sl,"UL",{});var q5t=s(HFe);wE=n(q5t,"LI",{});var mBe=s(wE);UFe=n(mBe,"STRONG",{});var N5t=s(UFe);OCr=r(N5t,"tapas"),N5t.forEach(t),VCr=r(mBe," \u2014 "),PU=n(mBe,"A",{href:!0});var j5t=s(PU);XCr=r(j5t,"TFTapasForQuestionAnswering"),j5t.forEach(t),zCr=r(mBe," (TAPAS model)"),mBe.forEach(t),q5t.forEach(t),WCr=i(Sl),T(AE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Eje=i(f),_c=n(f,"H2",{class:!0});var $Ge=s(_c);yE=n($Ge,"A",{id:!0,class:!0,href:!0});var D5t=s(yE);JFe=n(D5t,"SPAN",{});var G5t=s(JFe);T(n9.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),QCr=i($Ge),YFe=n($Ge,"SPAN",{});var O5t=s(YFe);HCr=r(O5t,"TFAutoModelForTokenClassification"),O5t.forEach(t),$Ge.forEach(t),Cje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(s9.$$.fragment,Rl),UCr=i(Rl),bc=n(Rl,"P",{});var Lee=s(bc);JCr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BU=n(Lee,"A",{href:!0});var V5t=s(BU);YCr=r(V5t,"from_pretrained()"),V5t.forEach(t),KCr=r(Lee," class method or the "),IU=n(Lee,"A",{href:!0});var X5t=s(IU);ZCr=r(X5t,"from_config()"),X5t.forEach(t),e5r=r(Lee,` class
method.`),Lee.forEach(t),o5r=i(Rl),l9=n(Rl,"P",{});var kGe=s(l9);r5r=r(kGe,"This class cannot be instantiated directly using "),KFe=n(kGe,"CODE",{});var z5t=s(KFe);t5r=r(z5t,"__init__()"),z5t.forEach(t),a5r=r(kGe," (throws an error)."),kGe.forEach(t),n5r=i(Rl),qt=n(Rl,"DIV",{class:!0});var zA=s(qt);T(i9.$$.fragment,zA),s5r=i(zA),ZFe=n(zA,"P",{});var W5t=s(ZFe);l5r=r(W5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W5t.forEach(t),i5r=i(zA),vc=n(zA,"P",{});var xee=s(vc);d5r=r(xee,`Note:
Loading a model from its configuration file does `),eTe=n(xee,"STRONG",{});var Q5t=s(eTe);c5r=r(Q5t,"not"),Q5t.forEach(t),f5r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(xee,"A",{href:!0});var H5t=s(qU);m5r=r(H5t,"from_pretrained()"),H5t.forEach(t),g5r=r(xee," to load the model weights."),xee.forEach(t),h5r=i(zA),T(LE.$$.fragment,zA),zA.forEach(t),p5r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(d9.$$.fragment,Pl),u5r=i(Pl),oTe=n(Pl,"P",{});var U5t=s(oTe);_5r=r(U5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U5t.forEach(t),b5r=i(Pl),cn=n(Pl,"P",{});var WA=s(cn);v5r=r(WA,"The model class to instantiate is selected based on the "),rTe=n(WA,"CODE",{});var J5t=s(rTe);F5r=r(J5t,"model_type"),J5t.forEach(t),T5r=r(WA,` property of the config object (either
passed as an argument or loaded from `),tTe=n(WA,"CODE",{});var Y5t=s(tTe);M5r=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),E5r=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(WA,"CODE",{});var K5t=s(aTe);C5r=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),w5r=r(WA,":"),WA.forEach(t),A5r=i(Pl),de=n(Pl,"UL",{});var me=s(de);xE=n(me,"LI",{});var gBe=s(xE);nTe=n(gBe,"STRONG",{});var Z5t=s(nTe);y5r=r(Z5t,"albert"),Z5t.forEach(t),L5r=r(gBe," \u2014 "),NU=n(gBe,"A",{href:!0});var ewt=s(NU);x5r=r(ewt,"TFAlbertForTokenClassification"),ewt.forEach(t),$5r=r(gBe," (ALBERT model)"),gBe.forEach(t),k5r=i(me),$E=n(me,"LI",{});var hBe=s($E);sTe=n(hBe,"STRONG",{});var owt=s(sTe);S5r=r(owt,"bert"),owt.forEach(t),R5r=r(hBe," \u2014 "),jU=n(hBe,"A",{href:!0});var rwt=s(jU);P5r=r(rwt,"TFBertForTokenClassification"),rwt.forEach(t),B5r=r(hBe," (BERT model)"),hBe.forEach(t),I5r=i(me),kE=n(me,"LI",{});var pBe=s(kE);lTe=n(pBe,"STRONG",{});var twt=s(lTe);q5r=r(twt,"camembert"),twt.forEach(t),N5r=r(pBe," \u2014 "),DU=n(pBe,"A",{href:!0});var awt=s(DU);j5r=r(awt,"TFCamembertForTokenClassification"),awt.forEach(t),D5r=r(pBe," (CamemBERT model)"),pBe.forEach(t),G5r=i(me),SE=n(me,"LI",{});var uBe=s(SE);iTe=n(uBe,"STRONG",{});var nwt=s(iTe);O5r=r(nwt,"convbert"),nwt.forEach(t),V5r=r(uBe," \u2014 "),GU=n(uBe,"A",{href:!0});var swt=s(GU);X5r=r(swt,"TFConvBertForTokenClassification"),swt.forEach(t),z5r=r(uBe," (ConvBERT model)"),uBe.forEach(t),W5r=i(me),RE=n(me,"LI",{});var _Be=s(RE);dTe=n(_Be,"STRONG",{});var lwt=s(dTe);Q5r=r(lwt,"deberta"),lwt.forEach(t),H5r=r(_Be," \u2014 "),OU=n(_Be,"A",{href:!0});var iwt=s(OU);U5r=r(iwt,"TFDebertaForTokenClassification"),iwt.forEach(t),J5r=r(_Be," (DeBERTa model)"),_Be.forEach(t),Y5r=i(me),PE=n(me,"LI",{});var bBe=s(PE);cTe=n(bBe,"STRONG",{});var dwt=s(cTe);K5r=r(dwt,"deberta-v2"),dwt.forEach(t),Z5r=r(bBe," \u2014 "),VU=n(bBe,"A",{href:!0});var cwt=s(VU);ewr=r(cwt,"TFDebertaV2ForTokenClassification"),cwt.forEach(t),owr=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),rwr=i(me),BE=n(me,"LI",{});var vBe=s(BE);fTe=n(vBe,"STRONG",{});var fwt=s(fTe);twr=r(fwt,"distilbert"),fwt.forEach(t),awr=r(vBe," \u2014 "),XU=n(vBe,"A",{href:!0});var mwt=s(XU);nwr=r(mwt,"TFDistilBertForTokenClassification"),mwt.forEach(t),swr=r(vBe," (DistilBERT model)"),vBe.forEach(t),lwr=i(me),IE=n(me,"LI",{});var FBe=s(IE);mTe=n(FBe,"STRONG",{});var gwt=s(mTe);iwr=r(gwt,"electra"),gwt.forEach(t),dwr=r(FBe," \u2014 "),zU=n(FBe,"A",{href:!0});var hwt=s(zU);cwr=r(hwt,"TFElectraForTokenClassification"),hwt.forEach(t),fwr=r(FBe," (ELECTRA model)"),FBe.forEach(t),mwr=i(me),qE=n(me,"LI",{});var TBe=s(qE);gTe=n(TBe,"STRONG",{});var pwt=s(gTe);gwr=r(pwt,"flaubert"),pwt.forEach(t),hwr=r(TBe," \u2014 "),WU=n(TBe,"A",{href:!0});var uwt=s(WU);pwr=r(uwt,"TFFlaubertForTokenClassification"),uwt.forEach(t),uwr=r(TBe," (FlauBERT model)"),TBe.forEach(t),_wr=i(me),NE=n(me,"LI",{});var MBe=s(NE);hTe=n(MBe,"STRONG",{});var _wt=s(hTe);bwr=r(_wt,"funnel"),_wt.forEach(t),vwr=r(MBe," \u2014 "),QU=n(MBe,"A",{href:!0});var bwt=s(QU);Fwr=r(bwt,"TFFunnelForTokenClassification"),bwt.forEach(t),Twr=r(MBe," (Funnel Transformer model)"),MBe.forEach(t),Mwr=i(me),jE=n(me,"LI",{});var EBe=s(jE);pTe=n(EBe,"STRONG",{});var vwt=s(pTe);Ewr=r(vwt,"layoutlm"),vwt.forEach(t),Cwr=r(EBe," \u2014 "),HU=n(EBe,"A",{href:!0});var Fwt=s(HU);wwr=r(Fwt,"TFLayoutLMForTokenClassification"),Fwt.forEach(t),Awr=r(EBe," (LayoutLM model)"),EBe.forEach(t),ywr=i(me),DE=n(me,"LI",{});var CBe=s(DE);uTe=n(CBe,"STRONG",{});var Twt=s(uTe);Lwr=r(Twt,"longformer"),Twt.forEach(t),xwr=r(CBe," \u2014 "),UU=n(CBe,"A",{href:!0});var Mwt=s(UU);$wr=r(Mwt,"TFLongformerForTokenClassification"),Mwt.forEach(t),kwr=r(CBe," (Longformer model)"),CBe.forEach(t),Swr=i(me),GE=n(me,"LI",{});var wBe=s(GE);_Te=n(wBe,"STRONG",{});var Ewt=s(_Te);Rwr=r(Ewt,"mobilebert"),Ewt.forEach(t),Pwr=r(wBe," \u2014 "),JU=n(wBe,"A",{href:!0});var Cwt=s(JU);Bwr=r(Cwt,"TFMobileBertForTokenClassification"),Cwt.forEach(t),Iwr=r(wBe," (MobileBERT model)"),wBe.forEach(t),qwr=i(me),OE=n(me,"LI",{});var ABe=s(OE);bTe=n(ABe,"STRONG",{});var wwt=s(bTe);Nwr=r(wwt,"mpnet"),wwt.forEach(t),jwr=r(ABe," \u2014 "),YU=n(ABe,"A",{href:!0});var Awt=s(YU);Dwr=r(Awt,"TFMPNetForTokenClassification"),Awt.forEach(t),Gwr=r(ABe," (MPNet model)"),ABe.forEach(t),Owr=i(me),VE=n(me,"LI",{});var yBe=s(VE);vTe=n(yBe,"STRONG",{});var ywt=s(vTe);Vwr=r(ywt,"rembert"),ywt.forEach(t),Xwr=r(yBe," \u2014 "),KU=n(yBe,"A",{href:!0});var Lwt=s(KU);zwr=r(Lwt,"TFRemBertForTokenClassification"),Lwt.forEach(t),Wwr=r(yBe," (RemBERT model)"),yBe.forEach(t),Qwr=i(me),XE=n(me,"LI",{});var LBe=s(XE);FTe=n(LBe,"STRONG",{});var xwt=s(FTe);Hwr=r(xwt,"roberta"),xwt.forEach(t),Uwr=r(LBe," \u2014 "),ZU=n(LBe,"A",{href:!0});var $wt=s(ZU);Jwr=r($wt,"TFRobertaForTokenClassification"),$wt.forEach(t),Ywr=r(LBe," (RoBERTa model)"),LBe.forEach(t),Kwr=i(me),zE=n(me,"LI",{});var xBe=s(zE);TTe=n(xBe,"STRONG",{});var kwt=s(TTe);Zwr=r(kwt,"roformer"),kwt.forEach(t),e0r=r(xBe," \u2014 "),eJ=n(xBe,"A",{href:!0});var Swt=s(eJ);o0r=r(Swt,"TFRoFormerForTokenClassification"),Swt.forEach(t),r0r=r(xBe," (RoFormer model)"),xBe.forEach(t),t0r=i(me),WE=n(me,"LI",{});var $Be=s(WE);MTe=n($Be,"STRONG",{});var Rwt=s(MTe);a0r=r(Rwt,"xlm"),Rwt.forEach(t),n0r=r($Be," \u2014 "),oJ=n($Be,"A",{href:!0});var Pwt=s(oJ);s0r=r(Pwt,"TFXLMForTokenClassification"),Pwt.forEach(t),l0r=r($Be," (XLM model)"),$Be.forEach(t),i0r=i(me),QE=n(me,"LI",{});var kBe=s(QE);ETe=n(kBe,"STRONG",{});var Bwt=s(ETe);d0r=r(Bwt,"xlm-roberta"),Bwt.forEach(t),c0r=r(kBe," \u2014 "),rJ=n(kBe,"A",{href:!0});var Iwt=s(rJ);f0r=r(Iwt,"TFXLMRobertaForTokenClassification"),Iwt.forEach(t),m0r=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),g0r=i(me),HE=n(me,"LI",{});var SBe=s(HE);CTe=n(SBe,"STRONG",{});var qwt=s(CTe);h0r=r(qwt,"xlnet"),qwt.forEach(t),p0r=r(SBe," \u2014 "),tJ=n(SBe,"A",{href:!0});var Nwt=s(tJ);u0r=r(Nwt,"TFXLNetForTokenClassification"),Nwt.forEach(t),_0r=r(SBe," (XLNet model)"),SBe.forEach(t),me.forEach(t),b0r=i(Pl),T(UE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),wje=i(f),Fc=n(f,"H2",{class:!0});var SGe=s(Fc);JE=n(SGe,"A",{id:!0,class:!0,href:!0});var jwt=s(JE);wTe=n(jwt,"SPAN",{});var Dwt=s(wTe);T(c9.$$.fragment,Dwt),Dwt.forEach(t),jwt.forEach(t),v0r=i(SGe),ATe=n(SGe,"SPAN",{});var Gwt=s(ATe);F0r=r(Gwt,"TFAutoModelForQuestionAnswering"),Gwt.forEach(t),SGe.forEach(t),Aje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(f9.$$.fragment,Bl),T0r=i(Bl),Tc=n(Bl,"P",{});var $ee=s(Tc);M0r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aJ=n($ee,"A",{href:!0});var Owt=s(aJ);E0r=r(Owt,"from_pretrained()"),Owt.forEach(t),C0r=r($ee," class method or the "),nJ=n($ee,"A",{href:!0});var Vwt=s(nJ);w0r=r(Vwt,"from_config()"),Vwt.forEach(t),A0r=r($ee,` class
method.`),$ee.forEach(t),y0r=i(Bl),m9=n(Bl,"P",{});var RGe=s(m9);L0r=r(RGe,"This class cannot be instantiated directly using "),yTe=n(RGe,"CODE",{});var Xwt=s(yTe);x0r=r(Xwt,"__init__()"),Xwt.forEach(t),$0r=r(RGe," (throws an error)."),RGe.forEach(t),k0r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var QA=s(Nt);T(g9.$$.fragment,QA),S0r=i(QA),LTe=n(QA,"P",{});var zwt=s(LTe);R0r=r(zwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zwt.forEach(t),P0r=i(QA),Mc=n(QA,"P",{});var kee=s(Mc);B0r=r(kee,`Note:
Loading a model from its configuration file does `),xTe=n(kee,"STRONG",{});var Wwt=s(xTe);I0r=r(Wwt,"not"),Wwt.forEach(t),q0r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(kee,"A",{href:!0});var Qwt=s(sJ);N0r=r(Qwt,"from_pretrained()"),Qwt.forEach(t),j0r=r(kee," to load the model weights."),kee.forEach(t),D0r=i(QA),T(YE.$$.fragment,QA),QA.forEach(t),G0r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(h9.$$.fragment,Il),O0r=i(Il),$Te=n(Il,"P",{});var Hwt=s($Te);V0r=r(Hwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hwt.forEach(t),X0r=i(Il),fn=n(Il,"P",{});var HA=s(fn);z0r=r(HA,"The model class to instantiate is selected based on the "),kTe=n(HA,"CODE",{});var Uwt=s(kTe);W0r=r(Uwt,"model_type"),Uwt.forEach(t),Q0r=r(HA,` property of the config object (either
passed as an argument or loaded from `),STe=n(HA,"CODE",{});var Jwt=s(STe);H0r=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),U0r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(HA,"CODE",{});var Ywt=s(RTe);J0r=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),Y0r=r(HA,":"),HA.forEach(t),K0r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);KE=n(ge,"LI",{});var RBe=s(KE);PTe=n(RBe,"STRONG",{});var Kwt=s(PTe);Z0r=r(Kwt,"albert"),Kwt.forEach(t),eAr=r(RBe," \u2014 "),lJ=n(RBe,"A",{href:!0});var Zwt=s(lJ);oAr=r(Zwt,"TFAlbertForQuestionAnswering"),Zwt.forEach(t),rAr=r(RBe," (ALBERT model)"),RBe.forEach(t),tAr=i(ge),ZE=n(ge,"LI",{});var PBe=s(ZE);BTe=n(PBe,"STRONG",{});var e0t=s(BTe);aAr=r(e0t,"bert"),e0t.forEach(t),nAr=r(PBe," \u2014 "),iJ=n(PBe,"A",{href:!0});var o0t=s(iJ);sAr=r(o0t,"TFBertForQuestionAnswering"),o0t.forEach(t),lAr=r(PBe," (BERT model)"),PBe.forEach(t),iAr=i(ge),eC=n(ge,"LI",{});var BBe=s(eC);ITe=n(BBe,"STRONG",{});var r0t=s(ITe);dAr=r(r0t,"camembert"),r0t.forEach(t),cAr=r(BBe," \u2014 "),dJ=n(BBe,"A",{href:!0});var t0t=s(dJ);fAr=r(t0t,"TFCamembertForQuestionAnswering"),t0t.forEach(t),mAr=r(BBe," (CamemBERT model)"),BBe.forEach(t),gAr=i(ge),oC=n(ge,"LI",{});var IBe=s(oC);qTe=n(IBe,"STRONG",{});var a0t=s(qTe);hAr=r(a0t,"convbert"),a0t.forEach(t),pAr=r(IBe," \u2014 "),cJ=n(IBe,"A",{href:!0});var n0t=s(cJ);uAr=r(n0t,"TFConvBertForQuestionAnswering"),n0t.forEach(t),_Ar=r(IBe," (ConvBERT model)"),IBe.forEach(t),bAr=i(ge),rC=n(ge,"LI",{});var qBe=s(rC);NTe=n(qBe,"STRONG",{});var s0t=s(NTe);vAr=r(s0t,"deberta"),s0t.forEach(t),FAr=r(qBe," \u2014 "),fJ=n(qBe,"A",{href:!0});var l0t=s(fJ);TAr=r(l0t,"TFDebertaForQuestionAnswering"),l0t.forEach(t),MAr=r(qBe," (DeBERTa model)"),qBe.forEach(t),EAr=i(ge),tC=n(ge,"LI",{});var NBe=s(tC);jTe=n(NBe,"STRONG",{});var i0t=s(jTe);CAr=r(i0t,"deberta-v2"),i0t.forEach(t),wAr=r(NBe," \u2014 "),mJ=n(NBe,"A",{href:!0});var d0t=s(mJ);AAr=r(d0t,"TFDebertaV2ForQuestionAnswering"),d0t.forEach(t),yAr=r(NBe," (DeBERTa-v2 model)"),NBe.forEach(t),LAr=i(ge),aC=n(ge,"LI",{});var jBe=s(aC);DTe=n(jBe,"STRONG",{});var c0t=s(DTe);xAr=r(c0t,"distilbert"),c0t.forEach(t),$Ar=r(jBe," \u2014 "),gJ=n(jBe,"A",{href:!0});var f0t=s(gJ);kAr=r(f0t,"TFDistilBertForQuestionAnswering"),f0t.forEach(t),SAr=r(jBe," (DistilBERT model)"),jBe.forEach(t),RAr=i(ge),nC=n(ge,"LI",{});var DBe=s(nC);GTe=n(DBe,"STRONG",{});var m0t=s(GTe);PAr=r(m0t,"electra"),m0t.forEach(t),BAr=r(DBe," \u2014 "),hJ=n(DBe,"A",{href:!0});var g0t=s(hJ);IAr=r(g0t,"TFElectraForQuestionAnswering"),g0t.forEach(t),qAr=r(DBe," (ELECTRA model)"),DBe.forEach(t),NAr=i(ge),sC=n(ge,"LI",{});var GBe=s(sC);OTe=n(GBe,"STRONG",{});var h0t=s(OTe);jAr=r(h0t,"flaubert"),h0t.forEach(t),DAr=r(GBe," \u2014 "),pJ=n(GBe,"A",{href:!0});var p0t=s(pJ);GAr=r(p0t,"TFFlaubertForQuestionAnsweringSimple"),p0t.forEach(t),OAr=r(GBe," (FlauBERT model)"),GBe.forEach(t),VAr=i(ge),lC=n(ge,"LI",{});var OBe=s(lC);VTe=n(OBe,"STRONG",{});var u0t=s(VTe);XAr=r(u0t,"funnel"),u0t.forEach(t),zAr=r(OBe," \u2014 "),uJ=n(OBe,"A",{href:!0});var _0t=s(uJ);WAr=r(_0t,"TFFunnelForQuestionAnswering"),_0t.forEach(t),QAr=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),HAr=i(ge),iC=n(ge,"LI",{});var VBe=s(iC);XTe=n(VBe,"STRONG",{});var b0t=s(XTe);UAr=r(b0t,"gptj"),b0t.forEach(t),JAr=r(VBe," \u2014 "),_J=n(VBe,"A",{href:!0});var v0t=s(_J);YAr=r(v0t,"TFGPTJForQuestionAnswering"),v0t.forEach(t),KAr=r(VBe," (GPT-J model)"),VBe.forEach(t),ZAr=i(ge),dC=n(ge,"LI",{});var XBe=s(dC);zTe=n(XBe,"STRONG",{});var F0t=s(zTe);e6r=r(F0t,"longformer"),F0t.forEach(t),o6r=r(XBe," \u2014 "),bJ=n(XBe,"A",{href:!0});var T0t=s(bJ);r6r=r(T0t,"TFLongformerForQuestionAnswering"),T0t.forEach(t),t6r=r(XBe," (Longformer model)"),XBe.forEach(t),a6r=i(ge),cC=n(ge,"LI",{});var zBe=s(cC);WTe=n(zBe,"STRONG",{});var M0t=s(WTe);n6r=r(M0t,"mobilebert"),M0t.forEach(t),s6r=r(zBe," \u2014 "),vJ=n(zBe,"A",{href:!0});var E0t=s(vJ);l6r=r(E0t,"TFMobileBertForQuestionAnswering"),E0t.forEach(t),i6r=r(zBe," (MobileBERT model)"),zBe.forEach(t),d6r=i(ge),fC=n(ge,"LI",{});var WBe=s(fC);QTe=n(WBe,"STRONG",{});var C0t=s(QTe);c6r=r(C0t,"mpnet"),C0t.forEach(t),f6r=r(WBe," \u2014 "),FJ=n(WBe,"A",{href:!0});var w0t=s(FJ);m6r=r(w0t,"TFMPNetForQuestionAnswering"),w0t.forEach(t),g6r=r(WBe," (MPNet model)"),WBe.forEach(t),h6r=i(ge),mC=n(ge,"LI",{});var QBe=s(mC);HTe=n(QBe,"STRONG",{});var A0t=s(HTe);p6r=r(A0t,"rembert"),A0t.forEach(t),u6r=r(QBe," \u2014 "),TJ=n(QBe,"A",{href:!0});var y0t=s(TJ);_6r=r(y0t,"TFRemBertForQuestionAnswering"),y0t.forEach(t),b6r=r(QBe," (RemBERT model)"),QBe.forEach(t),v6r=i(ge),gC=n(ge,"LI",{});var HBe=s(gC);UTe=n(HBe,"STRONG",{});var L0t=s(UTe);F6r=r(L0t,"roberta"),L0t.forEach(t),T6r=r(HBe," \u2014 "),MJ=n(HBe,"A",{href:!0});var x0t=s(MJ);M6r=r(x0t,"TFRobertaForQuestionAnswering"),x0t.forEach(t),E6r=r(HBe," (RoBERTa model)"),HBe.forEach(t),C6r=i(ge),hC=n(ge,"LI",{});var UBe=s(hC);JTe=n(UBe,"STRONG",{});var $0t=s(JTe);w6r=r($0t,"roformer"),$0t.forEach(t),A6r=r(UBe," \u2014 "),EJ=n(UBe,"A",{href:!0});var k0t=s(EJ);y6r=r(k0t,"TFRoFormerForQuestionAnswering"),k0t.forEach(t),L6r=r(UBe," (RoFormer model)"),UBe.forEach(t),x6r=i(ge),pC=n(ge,"LI",{});var JBe=s(pC);YTe=n(JBe,"STRONG",{});var S0t=s(YTe);$6r=r(S0t,"xlm"),S0t.forEach(t),k6r=r(JBe," \u2014 "),CJ=n(JBe,"A",{href:!0});var R0t=s(CJ);S6r=r(R0t,"TFXLMForQuestionAnsweringSimple"),R0t.forEach(t),R6r=r(JBe," (XLM model)"),JBe.forEach(t),P6r=i(ge),uC=n(ge,"LI",{});var YBe=s(uC);KTe=n(YBe,"STRONG",{});var P0t=s(KTe);B6r=r(P0t,"xlm-roberta"),P0t.forEach(t),I6r=r(YBe," \u2014 "),wJ=n(YBe,"A",{href:!0});var B0t=s(wJ);q6r=r(B0t,"TFXLMRobertaForQuestionAnswering"),B0t.forEach(t),N6r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),j6r=i(ge),_C=n(ge,"LI",{});var KBe=s(_C);ZTe=n(KBe,"STRONG",{});var I0t=s(ZTe);D6r=r(I0t,"xlnet"),I0t.forEach(t),G6r=r(KBe," \u2014 "),AJ=n(KBe,"A",{href:!0});var q0t=s(AJ);O6r=r(q0t,"TFXLNetForQuestionAnsweringSimple"),q0t.forEach(t),V6r=r(KBe," (XLNet model)"),KBe.forEach(t),ge.forEach(t),X6r=i(Il),T(bC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),yje=i(f),Ec=n(f,"H2",{class:!0});var PGe=s(Ec);vC=n(PGe,"A",{id:!0,class:!0,href:!0});var N0t=s(vC);e7e=n(N0t,"SPAN",{});var j0t=s(e7e);T(p9.$$.fragment,j0t),j0t.forEach(t),N0t.forEach(t),z6r=i(PGe),o7e=n(PGe,"SPAN",{});var D0t=s(o7e);W6r=r(D0t,"TFAutoModelForVision2Seq"),D0t.forEach(t),PGe.forEach(t),Lje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(u9.$$.fragment,ql),Q6r=i(ql),Cc=n(ql,"P",{});var See=s(Cc);H6r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yJ=n(See,"A",{href:!0});var G0t=s(yJ);U6r=r(G0t,"from_pretrained()"),G0t.forEach(t),J6r=r(See," class method or the "),LJ=n(See,"A",{href:!0});var O0t=s(LJ);Y6r=r(O0t,"from_config()"),O0t.forEach(t),K6r=r(See,` class
method.`),See.forEach(t),Z6r=i(ql),_9=n(ql,"P",{});var BGe=s(_9);eyr=r(BGe,"This class cannot be instantiated directly using "),r7e=n(BGe,"CODE",{});var V0t=s(r7e);oyr=r(V0t,"__init__()"),V0t.forEach(t),ryr=r(BGe," (throws an error)."),BGe.forEach(t),tyr=i(ql),jt=n(ql,"DIV",{class:!0});var UA=s(jt);T(b9.$$.fragment,UA),ayr=i(UA),t7e=n(UA,"P",{});var X0t=s(t7e);nyr=r(X0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),X0t.forEach(t),syr=i(UA),wc=n(UA,"P",{});var Ree=s(wc);lyr=r(Ree,`Note:
Loading a model from its configuration file does `),a7e=n(Ree,"STRONG",{});var z0t=s(a7e);iyr=r(z0t,"not"),z0t.forEach(t),dyr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Ree,"A",{href:!0});var W0t=s(xJ);cyr=r(W0t,"from_pretrained()"),W0t.forEach(t),fyr=r(Ree," to load the model weights."),Ree.forEach(t),myr=i(UA),T(FC.$$.fragment,UA),UA.forEach(t),gyr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(v9.$$.fragment,Nl),hyr=i(Nl),n7e=n(Nl,"P",{});var Q0t=s(n7e);pyr=r(Q0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Q0t.forEach(t),uyr=i(Nl),mn=n(Nl,"P",{});var JA=s(mn);_yr=r(JA,"The model class to instantiate is selected based on the "),s7e=n(JA,"CODE",{});var H0t=s(s7e);byr=r(H0t,"model_type"),H0t.forEach(t),vyr=r(JA,` property of the config object (either
passed as an argument or loaded from `),l7e=n(JA,"CODE",{});var U0t=s(l7e);Fyr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),Tyr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=n(JA,"CODE",{});var J0t=s(i7e);Myr=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),Eyr=r(JA,":"),JA.forEach(t),Cyr=i(Nl),d7e=n(Nl,"UL",{});var Y0t=s(d7e);TC=n(Y0t,"LI",{});var ZBe=s(TC);c7e=n(ZBe,"STRONG",{});var K0t=s(c7e);wyr=r(K0t,"vision-encoder-decoder"),K0t.forEach(t),Ayr=r(ZBe," \u2014 "),$J=n(ZBe,"A",{href:!0});var Z0t=s($J);yyr=r(Z0t,"TFVisionEncoderDecoderModel"),Z0t.forEach(t),Lyr=r(ZBe," (Vision Encoder decoder model)"),ZBe.forEach(t),Y0t.forEach(t),xyr=i(Nl),T(MC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),xje=i(f),Ac=n(f,"H2",{class:!0});var IGe=s(Ac);EC=n(IGe,"A",{id:!0,class:!0,href:!0});var eAt=s(EC);f7e=n(eAt,"SPAN",{});var oAt=s(f7e);T(F9.$$.fragment,oAt),oAt.forEach(t),eAt.forEach(t),$yr=i(IGe),m7e=n(IGe,"SPAN",{});var rAt=s(m7e);kyr=r(rAt,"TFAutoModelForSpeechSeq2Seq"),rAt.forEach(t),IGe.forEach(t),$je=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(T9.$$.fragment,jl),Syr=i(jl),yc=n(jl,"P",{});var Pee=s(yc);Ryr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=n(Pee,"A",{href:!0});var tAt=s(kJ);Pyr=r(tAt,"from_pretrained()"),tAt.forEach(t),Byr=r(Pee," class method or the "),SJ=n(Pee,"A",{href:!0});var aAt=s(SJ);Iyr=r(aAt,"from_config()"),aAt.forEach(t),qyr=r(Pee,` class
method.`),Pee.forEach(t),Nyr=i(jl),M9=n(jl,"P",{});var qGe=s(M9);jyr=r(qGe,"This class cannot be instantiated directly using "),g7e=n(qGe,"CODE",{});var nAt=s(g7e);Dyr=r(nAt,"__init__()"),nAt.forEach(t),Gyr=r(qGe," (throws an error)."),qGe.forEach(t),Oyr=i(jl),Dt=n(jl,"DIV",{class:!0});var YA=s(Dt);T(E9.$$.fragment,YA),Vyr=i(YA),h7e=n(YA,"P",{});var sAt=s(h7e);Xyr=r(sAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sAt.forEach(t),zyr=i(YA),Lc=n(YA,"P",{});var Bee=s(Lc);Wyr=r(Bee,`Note:
Loading a model from its configuration file does `),p7e=n(Bee,"STRONG",{});var lAt=s(p7e);Qyr=r(lAt,"not"),lAt.forEach(t),Hyr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Bee,"A",{href:!0});var iAt=s(RJ);Uyr=r(iAt,"from_pretrained()"),iAt.forEach(t),Jyr=r(Bee," to load the model weights."),Bee.forEach(t),Yyr=i(YA),T(CC.$$.fragment,YA),YA.forEach(t),Kyr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(C9.$$.fragment,Dl),Zyr=i(Dl),u7e=n(Dl,"P",{});var dAt=s(u7e);eLr=r(dAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dAt.forEach(t),oLr=i(Dl),gn=n(Dl,"P",{});var KA=s(gn);rLr=r(KA,"The model class to instantiate is selected based on the "),_7e=n(KA,"CODE",{});var cAt=s(_7e);tLr=r(cAt,"model_type"),cAt.forEach(t),aLr=r(KA,` property of the config object (either
passed as an argument or loaded from `),b7e=n(KA,"CODE",{});var fAt=s(b7e);nLr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),sLr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v7e=n(KA,"CODE",{});var mAt=s(v7e);lLr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),iLr=r(KA,":"),KA.forEach(t),dLr=i(Dl),F7e=n(Dl,"UL",{});var gAt=s(F7e);wC=n(gAt,"LI",{});var eIe=s(wC);T7e=n(eIe,"STRONG",{});var hAt=s(T7e);cLr=r(hAt,"speech_to_text"),hAt.forEach(t),fLr=r(eIe," \u2014 "),PJ=n(eIe,"A",{href:!0});var pAt=s(PJ);mLr=r(pAt,"TFSpeech2TextForConditionalGeneration"),pAt.forEach(t),gLr=r(eIe," (Speech2Text model)"),eIe.forEach(t),gAt.forEach(t),hLr=i(Dl),T(AC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),kje=i(f),xc=n(f,"H2",{class:!0});var NGe=s(xc);yC=n(NGe,"A",{id:!0,class:!0,href:!0});var uAt=s(yC);M7e=n(uAt,"SPAN",{});var _At=s(M7e);T(w9.$$.fragment,_At),_At.forEach(t),uAt.forEach(t),pLr=i(NGe),E7e=n(NGe,"SPAN",{});var bAt=s(E7e);uLr=r(bAt,"FlaxAutoModel"),bAt.forEach(t),NGe.forEach(t),Sje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(A9.$$.fragment,Gl),_Lr=i(Gl),$c=n(Gl,"P",{});var Iee=s($c);bLr=r(Iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BJ=n(Iee,"A",{href:!0});var vAt=s(BJ);vLr=r(vAt,"from_pretrained()"),vAt.forEach(t),FLr=r(Iee," class method or the "),IJ=n(Iee,"A",{href:!0});var FAt=s(IJ);TLr=r(FAt,"from_config()"),FAt.forEach(t),MLr=r(Iee,` class
method.`),Iee.forEach(t),ELr=i(Gl),y9=n(Gl,"P",{});var jGe=s(y9);CLr=r(jGe,"This class cannot be instantiated directly using "),C7e=n(jGe,"CODE",{});var TAt=s(C7e);wLr=r(TAt,"__init__()"),TAt.forEach(t),ALr=r(jGe," (throws an error)."),jGe.forEach(t),yLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var ZA=s(Gt);T(L9.$$.fragment,ZA),LLr=i(ZA),w7e=n(ZA,"P",{});var MAt=s(w7e);xLr=r(MAt,"Instantiates one of the base model classes of the library from a configuration."),MAt.forEach(t),$Lr=i(ZA),kc=n(ZA,"P",{});var qee=s(kc);kLr=r(qee,`Note:
Loading a model from its configuration file does `),A7e=n(qee,"STRONG",{});var EAt=s(A7e);SLr=r(EAt,"not"),EAt.forEach(t),RLr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(qee,"A",{href:!0});var CAt=s(qJ);PLr=r(CAt,"from_pretrained()"),CAt.forEach(t),BLr=r(qee," to load the model weights."),qee.forEach(t),ILr=i(ZA),T(LC.$$.fragment,ZA),ZA.forEach(t),qLr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(x9.$$.fragment,Ol),NLr=i(Ol),y7e=n(Ol,"P",{});var wAt=s(y7e);jLr=r(wAt,"Instantiate one of the base model classes of the library from a pretrained model."),wAt.forEach(t),DLr=i(Ol),hn=n(Ol,"P",{});var e6=s(hn);GLr=r(e6,"The model class to instantiate is selected based on the "),L7e=n(e6,"CODE",{});var AAt=s(L7e);OLr=r(AAt,"model_type"),AAt.forEach(t),VLr=r(e6,` property of the config object (either
passed as an argument or loaded from `),x7e=n(e6,"CODE",{});var yAt=s(x7e);XLr=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),zLr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(e6,"CODE",{});var LAt=s($7e);WLr=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),QLr=r(e6,":"),e6.forEach(t),HLr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);xC=n(ne,"LI",{});var oIe=s(xC);k7e=n(oIe,"STRONG",{});var xAt=s(k7e);ULr=r(xAt,"albert"),xAt.forEach(t),JLr=r(oIe," \u2014 "),NJ=n(oIe,"A",{href:!0});var $At=s(NJ);YLr=r($At,"FlaxAlbertModel"),$At.forEach(t),KLr=r(oIe," (ALBERT model)"),oIe.forEach(t),ZLr=i(ne),$C=n(ne,"LI",{});var rIe=s($C);S7e=n(rIe,"STRONG",{});var kAt=s(S7e);e8r=r(kAt,"bart"),kAt.forEach(t),o8r=r(rIe," \u2014 "),jJ=n(rIe,"A",{href:!0});var SAt=s(jJ);r8r=r(SAt,"FlaxBartModel"),SAt.forEach(t),t8r=r(rIe," (BART model)"),rIe.forEach(t),a8r=i(ne),kC=n(ne,"LI",{});var tIe=s(kC);R7e=n(tIe,"STRONG",{});var RAt=s(R7e);n8r=r(RAt,"beit"),RAt.forEach(t),s8r=r(tIe," \u2014 "),DJ=n(tIe,"A",{href:!0});var PAt=s(DJ);l8r=r(PAt,"FlaxBeitModel"),PAt.forEach(t),i8r=r(tIe," (BEiT model)"),tIe.forEach(t),d8r=i(ne),SC=n(ne,"LI",{});var aIe=s(SC);P7e=n(aIe,"STRONG",{});var BAt=s(P7e);c8r=r(BAt,"bert"),BAt.forEach(t),f8r=r(aIe," \u2014 "),GJ=n(aIe,"A",{href:!0});var IAt=s(GJ);m8r=r(IAt,"FlaxBertModel"),IAt.forEach(t),g8r=r(aIe," (BERT model)"),aIe.forEach(t),h8r=i(ne),RC=n(ne,"LI",{});var nIe=s(RC);B7e=n(nIe,"STRONG",{});var qAt=s(B7e);p8r=r(qAt,"big_bird"),qAt.forEach(t),u8r=r(nIe," \u2014 "),OJ=n(nIe,"A",{href:!0});var NAt=s(OJ);_8r=r(NAt,"FlaxBigBirdModel"),NAt.forEach(t),b8r=r(nIe," (BigBird model)"),nIe.forEach(t),v8r=i(ne),PC=n(ne,"LI",{});var sIe=s(PC);I7e=n(sIe,"STRONG",{});var jAt=s(I7e);F8r=r(jAt,"blenderbot"),jAt.forEach(t),T8r=r(sIe," \u2014 "),VJ=n(sIe,"A",{href:!0});var DAt=s(VJ);M8r=r(DAt,"FlaxBlenderbotModel"),DAt.forEach(t),E8r=r(sIe," (Blenderbot model)"),sIe.forEach(t),C8r=i(ne),BC=n(ne,"LI",{});var lIe=s(BC);q7e=n(lIe,"STRONG",{});var GAt=s(q7e);w8r=r(GAt,"blenderbot-small"),GAt.forEach(t),A8r=r(lIe," \u2014 "),XJ=n(lIe,"A",{href:!0});var OAt=s(XJ);y8r=r(OAt,"FlaxBlenderbotSmallModel"),OAt.forEach(t),L8r=r(lIe," (BlenderbotSmall model)"),lIe.forEach(t),x8r=i(ne),IC=n(ne,"LI",{});var iIe=s(IC);N7e=n(iIe,"STRONG",{});var VAt=s(N7e);$8r=r(VAt,"clip"),VAt.forEach(t),k8r=r(iIe," \u2014 "),zJ=n(iIe,"A",{href:!0});var XAt=s(zJ);S8r=r(XAt,"FlaxCLIPModel"),XAt.forEach(t),R8r=r(iIe," (CLIP model)"),iIe.forEach(t),P8r=i(ne),qC=n(ne,"LI",{});var dIe=s(qC);j7e=n(dIe,"STRONG",{});var zAt=s(j7e);B8r=r(zAt,"distilbert"),zAt.forEach(t),I8r=r(dIe," \u2014 "),WJ=n(dIe,"A",{href:!0});var WAt=s(WJ);q8r=r(WAt,"FlaxDistilBertModel"),WAt.forEach(t),N8r=r(dIe," (DistilBERT model)"),dIe.forEach(t),j8r=i(ne),NC=n(ne,"LI",{});var cIe=s(NC);D7e=n(cIe,"STRONG",{});var QAt=s(D7e);D8r=r(QAt,"electra"),QAt.forEach(t),G8r=r(cIe," \u2014 "),QJ=n(cIe,"A",{href:!0});var HAt=s(QJ);O8r=r(HAt,"FlaxElectraModel"),HAt.forEach(t),V8r=r(cIe," (ELECTRA model)"),cIe.forEach(t),X8r=i(ne),jC=n(ne,"LI",{});var fIe=s(jC);G7e=n(fIe,"STRONG",{});var UAt=s(G7e);z8r=r(UAt,"gpt2"),UAt.forEach(t),W8r=r(fIe," \u2014 "),HJ=n(fIe,"A",{href:!0});var JAt=s(HJ);Q8r=r(JAt,"FlaxGPT2Model"),JAt.forEach(t),H8r=r(fIe," (OpenAI GPT-2 model)"),fIe.forEach(t),U8r=i(ne),DC=n(ne,"LI",{});var mIe=s(DC);O7e=n(mIe,"STRONG",{});var YAt=s(O7e);J8r=r(YAt,"gpt_neo"),YAt.forEach(t),Y8r=r(mIe," \u2014 "),UJ=n(mIe,"A",{href:!0});var KAt=s(UJ);K8r=r(KAt,"FlaxGPTNeoModel"),KAt.forEach(t),Z8r=r(mIe," (GPT Neo model)"),mIe.forEach(t),e9r=i(ne),GC=n(ne,"LI",{});var gIe=s(GC);V7e=n(gIe,"STRONG",{});var ZAt=s(V7e);o9r=r(ZAt,"gptj"),ZAt.forEach(t),r9r=r(gIe," \u2014 "),JJ=n(gIe,"A",{href:!0});var e6t=s(JJ);t9r=r(e6t,"FlaxGPTJModel"),e6t.forEach(t),a9r=r(gIe," (GPT-J model)"),gIe.forEach(t),n9r=i(ne),OC=n(ne,"LI",{});var hIe=s(OC);X7e=n(hIe,"STRONG",{});var o6t=s(X7e);s9r=r(o6t,"marian"),o6t.forEach(t),l9r=r(hIe," \u2014 "),YJ=n(hIe,"A",{href:!0});var r6t=s(YJ);i9r=r(r6t,"FlaxMarianModel"),r6t.forEach(t),d9r=r(hIe," (Marian model)"),hIe.forEach(t),c9r=i(ne),VC=n(ne,"LI",{});var pIe=s(VC);z7e=n(pIe,"STRONG",{});var t6t=s(z7e);f9r=r(t6t,"mbart"),t6t.forEach(t),m9r=r(pIe," \u2014 "),KJ=n(pIe,"A",{href:!0});var a6t=s(KJ);g9r=r(a6t,"FlaxMBartModel"),a6t.forEach(t),h9r=r(pIe," (mBART model)"),pIe.forEach(t),p9r=i(ne),XC=n(ne,"LI",{});var uIe=s(XC);W7e=n(uIe,"STRONG",{});var n6t=s(W7e);u9r=r(n6t,"mt5"),n6t.forEach(t),_9r=r(uIe," \u2014 "),ZJ=n(uIe,"A",{href:!0});var s6t=s(ZJ);b9r=r(s6t,"FlaxMT5Model"),s6t.forEach(t),v9r=r(uIe," (mT5 model)"),uIe.forEach(t),F9r=i(ne),zC=n(ne,"LI",{});var _Ie=s(zC);Q7e=n(_Ie,"STRONG",{});var l6t=s(Q7e);T9r=r(l6t,"pegasus"),l6t.forEach(t),M9r=r(_Ie," \u2014 "),eY=n(_Ie,"A",{href:!0});var i6t=s(eY);E9r=r(i6t,"FlaxPegasusModel"),i6t.forEach(t),C9r=r(_Ie," (Pegasus model)"),_Ie.forEach(t),w9r=i(ne),WC=n(ne,"LI",{});var bIe=s(WC);H7e=n(bIe,"STRONG",{});var d6t=s(H7e);A9r=r(d6t,"roberta"),d6t.forEach(t),y9r=r(bIe," \u2014 "),oY=n(bIe,"A",{href:!0});var c6t=s(oY);L9r=r(c6t,"FlaxRobertaModel"),c6t.forEach(t),x9r=r(bIe," (RoBERTa model)"),bIe.forEach(t),$9r=i(ne),QC=n(ne,"LI",{});var vIe=s(QC);U7e=n(vIe,"STRONG",{});var f6t=s(U7e);k9r=r(f6t,"roformer"),f6t.forEach(t),S9r=r(vIe," \u2014 "),rY=n(vIe,"A",{href:!0});var m6t=s(rY);R9r=r(m6t,"FlaxRoFormerModel"),m6t.forEach(t),P9r=r(vIe," (RoFormer model)"),vIe.forEach(t),B9r=i(ne),HC=n(ne,"LI",{});var FIe=s(HC);J7e=n(FIe,"STRONG",{});var g6t=s(J7e);I9r=r(g6t,"t5"),g6t.forEach(t),q9r=r(FIe," \u2014 "),tY=n(FIe,"A",{href:!0});var h6t=s(tY);N9r=r(h6t,"FlaxT5Model"),h6t.forEach(t),j9r=r(FIe," (T5 model)"),FIe.forEach(t),D9r=i(ne),UC=n(ne,"LI",{});var TIe=s(UC);Y7e=n(TIe,"STRONG",{});var p6t=s(Y7e);G9r=r(p6t,"vision-text-dual-encoder"),p6t.forEach(t),O9r=r(TIe," \u2014 "),aY=n(TIe,"A",{href:!0});var u6t=s(aY);V9r=r(u6t,"FlaxVisionTextDualEncoderModel"),u6t.forEach(t),X9r=r(TIe," (VisionTextDualEncoder model)"),TIe.forEach(t),z9r=i(ne),JC=n(ne,"LI",{});var MIe=s(JC);K7e=n(MIe,"STRONG",{});var _6t=s(K7e);W9r=r(_6t,"vit"),_6t.forEach(t),Q9r=r(MIe," \u2014 "),nY=n(MIe,"A",{href:!0});var b6t=s(nY);H9r=r(b6t,"FlaxViTModel"),b6t.forEach(t),U9r=r(MIe," (ViT model)"),MIe.forEach(t),J9r=i(ne),YC=n(ne,"LI",{});var EIe=s(YC);Z7e=n(EIe,"STRONG",{});var v6t=s(Z7e);Y9r=r(v6t,"wav2vec2"),v6t.forEach(t),K9r=r(EIe," \u2014 "),sY=n(EIe,"A",{href:!0});var F6t=s(sY);Z9r=r(F6t,"FlaxWav2Vec2Model"),F6t.forEach(t),exr=r(EIe," (Wav2Vec2 model)"),EIe.forEach(t),oxr=i(ne),KC=n(ne,"LI",{});var CIe=s(KC);eMe=n(CIe,"STRONG",{});var T6t=s(eMe);rxr=r(T6t,"xglm"),T6t.forEach(t),txr=r(CIe," \u2014 "),lY=n(CIe,"A",{href:!0});var M6t=s(lY);axr=r(M6t,"FlaxXGLMModel"),M6t.forEach(t),nxr=r(CIe," (XGLM model)"),CIe.forEach(t),sxr=i(ne),ZC=n(ne,"LI",{});var wIe=s(ZC);oMe=n(wIe,"STRONG",{});var E6t=s(oMe);lxr=r(E6t,"xlm-roberta"),E6t.forEach(t),ixr=r(wIe," \u2014 "),iY=n(wIe,"A",{href:!0});var C6t=s(iY);dxr=r(C6t,"FlaxXLMRobertaModel"),C6t.forEach(t),cxr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),ne.forEach(t),fxr=i(Ol),T(e5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Rje=i(f),Sc=n(f,"H2",{class:!0});var DGe=s(Sc);o5=n(DGe,"A",{id:!0,class:!0,href:!0});var w6t=s(o5);rMe=n(w6t,"SPAN",{});var A6t=s(rMe);T($9.$$.fragment,A6t),A6t.forEach(t),w6t.forEach(t),mxr=i(DGe),tMe=n(DGe,"SPAN",{});var y6t=s(tMe);gxr=r(y6t,"FlaxAutoModelForCausalLM"),y6t.forEach(t),DGe.forEach(t),Pje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(k9.$$.fragment,Vl),hxr=i(Vl),Rc=n(Vl,"P",{});var Nee=s(Rc);pxr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=n(Nee,"A",{href:!0});var L6t=s(dY);uxr=r(L6t,"from_pretrained()"),L6t.forEach(t),_xr=r(Nee," class method or the "),cY=n(Nee,"A",{href:!0});var x6t=s(cY);bxr=r(x6t,"from_config()"),x6t.forEach(t),vxr=r(Nee,` class
method.`),Nee.forEach(t),Fxr=i(Vl),S9=n(Vl,"P",{});var GGe=s(S9);Txr=r(GGe,"This class cannot be instantiated directly using "),aMe=n(GGe,"CODE",{});var $6t=s(aMe);Mxr=r($6t,"__init__()"),$6t.forEach(t),Exr=r(GGe," (throws an error)."),GGe.forEach(t),Cxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var o6=s(Ot);T(R9.$$.fragment,o6),wxr=i(o6),nMe=n(o6,"P",{});var k6t=s(nMe);Axr=r(k6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),k6t.forEach(t),yxr=i(o6),Pc=n(o6,"P",{});var jee=s(Pc);Lxr=r(jee,`Note:
Loading a model from its configuration file does `),sMe=n(jee,"STRONG",{});var S6t=s(sMe);xxr=r(S6t,"not"),S6t.forEach(t),$xr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(jee,"A",{href:!0});var R6t=s(fY);kxr=r(R6t,"from_pretrained()"),R6t.forEach(t),Sxr=r(jee," to load the model weights."),jee.forEach(t),Rxr=i(o6),T(r5.$$.fragment,o6),o6.forEach(t),Pxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(P9.$$.fragment,Xl),Bxr=i(Xl),lMe=n(Xl,"P",{});var P6t=s(lMe);Ixr=r(P6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P6t.forEach(t),qxr=i(Xl),pn=n(Xl,"P",{});var r6=s(pn);Nxr=r(r6,"The model class to instantiate is selected based on the "),iMe=n(r6,"CODE",{});var B6t=s(iMe);jxr=r(B6t,"model_type"),B6t.forEach(t),Dxr=r(r6,` property of the config object (either
passed as an argument or loaded from `),dMe=n(r6,"CODE",{});var I6t=s(dMe);Gxr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Oxr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(r6,"CODE",{});var q6t=s(cMe);Vxr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),Xxr=r(r6,":"),r6.forEach(t),zxr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);t5=n(Xe,"LI",{});var AIe=s(t5);fMe=n(AIe,"STRONG",{});var N6t=s(fMe);Wxr=r(N6t,"bart"),N6t.forEach(t),Qxr=r(AIe," \u2014 "),mY=n(AIe,"A",{href:!0});var j6t=s(mY);Hxr=r(j6t,"FlaxBartForCausalLM"),j6t.forEach(t),Uxr=r(AIe," (BART model)"),AIe.forEach(t),Jxr=i(Xe),a5=n(Xe,"LI",{});var yIe=s(a5);mMe=n(yIe,"STRONG",{});var D6t=s(mMe);Yxr=r(D6t,"bert"),D6t.forEach(t),Kxr=r(yIe," \u2014 "),gY=n(yIe,"A",{href:!0});var G6t=s(gY);Zxr=r(G6t,"FlaxBertForCausalLM"),G6t.forEach(t),e$r=r(yIe," (BERT model)"),yIe.forEach(t),o$r=i(Xe),n5=n(Xe,"LI",{});var LIe=s(n5);gMe=n(LIe,"STRONG",{});var O6t=s(gMe);r$r=r(O6t,"big_bird"),O6t.forEach(t),t$r=r(LIe," \u2014 "),hY=n(LIe,"A",{href:!0});var V6t=s(hY);a$r=r(V6t,"FlaxBigBirdForCausalLM"),V6t.forEach(t),n$r=r(LIe," (BigBird model)"),LIe.forEach(t),s$r=i(Xe),s5=n(Xe,"LI",{});var xIe=s(s5);hMe=n(xIe,"STRONG",{});var X6t=s(hMe);l$r=r(X6t,"electra"),X6t.forEach(t),i$r=r(xIe," \u2014 "),pY=n(xIe,"A",{href:!0});var z6t=s(pY);d$r=r(z6t,"FlaxElectraForCausalLM"),z6t.forEach(t),c$r=r(xIe," (ELECTRA model)"),xIe.forEach(t),f$r=i(Xe),l5=n(Xe,"LI",{});var $Ie=s(l5);pMe=n($Ie,"STRONG",{});var W6t=s(pMe);m$r=r(W6t,"gpt2"),W6t.forEach(t),g$r=r($Ie," \u2014 "),uY=n($Ie,"A",{href:!0});var Q6t=s(uY);h$r=r(Q6t,"FlaxGPT2LMHeadModel"),Q6t.forEach(t),p$r=r($Ie," (OpenAI GPT-2 model)"),$Ie.forEach(t),u$r=i(Xe),i5=n(Xe,"LI",{});var kIe=s(i5);uMe=n(kIe,"STRONG",{});var H6t=s(uMe);_$r=r(H6t,"gpt_neo"),H6t.forEach(t),b$r=r(kIe," \u2014 "),_Y=n(kIe,"A",{href:!0});var U6t=s(_Y);v$r=r(U6t,"FlaxGPTNeoForCausalLM"),U6t.forEach(t),F$r=r(kIe," (GPT Neo model)"),kIe.forEach(t),T$r=i(Xe),d5=n(Xe,"LI",{});var SIe=s(d5);_Me=n(SIe,"STRONG",{});var J6t=s(_Me);M$r=r(J6t,"gptj"),J6t.forEach(t),E$r=r(SIe," \u2014 "),bY=n(SIe,"A",{href:!0});var Y6t=s(bY);C$r=r(Y6t,"FlaxGPTJForCausalLM"),Y6t.forEach(t),w$r=r(SIe," (GPT-J model)"),SIe.forEach(t),A$r=i(Xe),c5=n(Xe,"LI",{});var RIe=s(c5);bMe=n(RIe,"STRONG",{});var K6t=s(bMe);y$r=r(K6t,"roberta"),K6t.forEach(t),L$r=r(RIe," \u2014 "),vY=n(RIe,"A",{href:!0});var Z6t=s(vY);x$r=r(Z6t,"FlaxRobertaForCausalLM"),Z6t.forEach(t),$$r=r(RIe," (RoBERTa model)"),RIe.forEach(t),k$r=i(Xe),f5=n(Xe,"LI",{});var PIe=s(f5);vMe=n(PIe,"STRONG",{});var eyt=s(vMe);S$r=r(eyt,"xglm"),eyt.forEach(t),R$r=r(PIe," \u2014 "),FY=n(PIe,"A",{href:!0});var oyt=s(FY);P$r=r(oyt,"FlaxXGLMForCausalLM"),oyt.forEach(t),B$r=r(PIe," (XGLM model)"),PIe.forEach(t),Xe.forEach(t),I$r=i(Xl),T(m5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Bje=i(f),Bc=n(f,"H2",{class:!0});var OGe=s(Bc);g5=n(OGe,"A",{id:!0,class:!0,href:!0});var ryt=s(g5);FMe=n(ryt,"SPAN",{});var tyt=s(FMe);T(B9.$$.fragment,tyt),tyt.forEach(t),ryt.forEach(t),q$r=i(OGe),TMe=n(OGe,"SPAN",{});var ayt=s(TMe);N$r=r(ayt,"FlaxAutoModelForPreTraining"),ayt.forEach(t),OGe.forEach(t),Ije=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(I9.$$.fragment,zl),j$r=i(zl),Ic=n(zl,"P",{});var Dee=s(Ic);D$r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TY=n(Dee,"A",{href:!0});var nyt=s(TY);G$r=r(nyt,"from_pretrained()"),nyt.forEach(t),O$r=r(Dee," class method or the "),MY=n(Dee,"A",{href:!0});var syt=s(MY);V$r=r(syt,"from_config()"),syt.forEach(t),X$r=r(Dee,` class
method.`),Dee.forEach(t),z$r=i(zl),q9=n(zl,"P",{});var VGe=s(q9);W$r=r(VGe,"This class cannot be instantiated directly using "),MMe=n(VGe,"CODE",{});var lyt=s(MMe);Q$r=r(lyt,"__init__()"),lyt.forEach(t),H$r=r(VGe," (throws an error)."),VGe.forEach(t),U$r=i(zl),Vt=n(zl,"DIV",{class:!0});var t6=s(Vt);T(N9.$$.fragment,t6),J$r=i(t6),EMe=n(t6,"P",{});var iyt=s(EMe);Y$r=r(iyt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iyt.forEach(t),K$r=i(t6),qc=n(t6,"P",{});var Gee=s(qc);Z$r=r(Gee,`Note:
Loading a model from its configuration file does `),CMe=n(Gee,"STRONG",{});var dyt=s(CMe);ekr=r(dyt,"not"),dyt.forEach(t),okr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Gee,"A",{href:!0});var cyt=s(EY);rkr=r(cyt,"from_pretrained()"),cyt.forEach(t),tkr=r(Gee," to load the model weights."),Gee.forEach(t),akr=i(t6),T(h5.$$.fragment,t6),t6.forEach(t),nkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(j9.$$.fragment,Wl),skr=i(Wl),wMe=n(Wl,"P",{});var fyt=s(wMe);lkr=r(fyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fyt.forEach(t),ikr=i(Wl),un=n(Wl,"P",{});var a6=s(un);dkr=r(a6,"The model class to instantiate is selected based on the "),AMe=n(a6,"CODE",{});var myt=s(AMe);ckr=r(myt,"model_type"),myt.forEach(t),fkr=r(a6,` property of the config object (either
passed as an argument or loaded from `),yMe=n(a6,"CODE",{});var gyt=s(yMe);mkr=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),gkr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(a6,"CODE",{});var hyt=s(LMe);hkr=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),pkr=r(a6,":"),a6.forEach(t),ukr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);p5=n(we,"LI",{});var BIe=s(p5);xMe=n(BIe,"STRONG",{});var pyt=s(xMe);_kr=r(pyt,"albert"),pyt.forEach(t),bkr=r(BIe," \u2014 "),CY=n(BIe,"A",{href:!0});var uyt=s(CY);vkr=r(uyt,"FlaxAlbertForPreTraining"),uyt.forEach(t),Fkr=r(BIe," (ALBERT model)"),BIe.forEach(t),Tkr=i(we),u5=n(we,"LI",{});var IIe=s(u5);$Me=n(IIe,"STRONG",{});var _yt=s($Me);Mkr=r(_yt,"bart"),_yt.forEach(t),Ekr=r(IIe," \u2014 "),wY=n(IIe,"A",{href:!0});var byt=s(wY);Ckr=r(byt,"FlaxBartForConditionalGeneration"),byt.forEach(t),wkr=r(IIe," (BART model)"),IIe.forEach(t),Akr=i(we),_5=n(we,"LI",{});var qIe=s(_5);kMe=n(qIe,"STRONG",{});var vyt=s(kMe);ykr=r(vyt,"bert"),vyt.forEach(t),Lkr=r(qIe," \u2014 "),AY=n(qIe,"A",{href:!0});var Fyt=s(AY);xkr=r(Fyt,"FlaxBertForPreTraining"),Fyt.forEach(t),$kr=r(qIe," (BERT model)"),qIe.forEach(t),kkr=i(we),b5=n(we,"LI",{});var NIe=s(b5);SMe=n(NIe,"STRONG",{});var Tyt=s(SMe);Skr=r(Tyt,"big_bird"),Tyt.forEach(t),Rkr=r(NIe," \u2014 "),yY=n(NIe,"A",{href:!0});var Myt=s(yY);Pkr=r(Myt,"FlaxBigBirdForPreTraining"),Myt.forEach(t),Bkr=r(NIe," (BigBird model)"),NIe.forEach(t),Ikr=i(we),v5=n(we,"LI",{});var jIe=s(v5);RMe=n(jIe,"STRONG",{});var Eyt=s(RMe);qkr=r(Eyt,"electra"),Eyt.forEach(t),Nkr=r(jIe," \u2014 "),LY=n(jIe,"A",{href:!0});var Cyt=s(LY);jkr=r(Cyt,"FlaxElectraForPreTraining"),Cyt.forEach(t),Dkr=r(jIe," (ELECTRA model)"),jIe.forEach(t),Gkr=i(we),F5=n(we,"LI",{});var DIe=s(F5);PMe=n(DIe,"STRONG",{});var wyt=s(PMe);Okr=r(wyt,"mbart"),wyt.forEach(t),Vkr=r(DIe," \u2014 "),xY=n(DIe,"A",{href:!0});var Ayt=s(xY);Xkr=r(Ayt,"FlaxMBartForConditionalGeneration"),Ayt.forEach(t),zkr=r(DIe," (mBART model)"),DIe.forEach(t),Wkr=i(we),T5=n(we,"LI",{});var GIe=s(T5);BMe=n(GIe,"STRONG",{});var yyt=s(BMe);Qkr=r(yyt,"mt5"),yyt.forEach(t),Hkr=r(GIe," \u2014 "),$Y=n(GIe,"A",{href:!0});var Lyt=s($Y);Ukr=r(Lyt,"FlaxMT5ForConditionalGeneration"),Lyt.forEach(t),Jkr=r(GIe," (mT5 model)"),GIe.forEach(t),Ykr=i(we),M5=n(we,"LI",{});var OIe=s(M5);IMe=n(OIe,"STRONG",{});var xyt=s(IMe);Kkr=r(xyt,"roberta"),xyt.forEach(t),Zkr=r(OIe," \u2014 "),kY=n(OIe,"A",{href:!0});var $yt=s(kY);eSr=r($yt,"FlaxRobertaForMaskedLM"),$yt.forEach(t),oSr=r(OIe," (RoBERTa model)"),OIe.forEach(t),rSr=i(we),E5=n(we,"LI",{});var VIe=s(E5);qMe=n(VIe,"STRONG",{});var kyt=s(qMe);tSr=r(kyt,"roformer"),kyt.forEach(t),aSr=r(VIe," \u2014 "),SY=n(VIe,"A",{href:!0});var Syt=s(SY);nSr=r(Syt,"FlaxRoFormerForMaskedLM"),Syt.forEach(t),sSr=r(VIe," (RoFormer model)"),VIe.forEach(t),lSr=i(we),C5=n(we,"LI",{});var XIe=s(C5);NMe=n(XIe,"STRONG",{});var Ryt=s(NMe);iSr=r(Ryt,"t5"),Ryt.forEach(t),dSr=r(XIe," \u2014 "),RY=n(XIe,"A",{href:!0});var Pyt=s(RY);cSr=r(Pyt,"FlaxT5ForConditionalGeneration"),Pyt.forEach(t),fSr=r(XIe," (T5 model)"),XIe.forEach(t),mSr=i(we),w5=n(we,"LI",{});var zIe=s(w5);jMe=n(zIe,"STRONG",{});var Byt=s(jMe);gSr=r(Byt,"wav2vec2"),Byt.forEach(t),hSr=r(zIe," \u2014 "),PY=n(zIe,"A",{href:!0});var Iyt=s(PY);pSr=r(Iyt,"FlaxWav2Vec2ForPreTraining"),Iyt.forEach(t),uSr=r(zIe," (Wav2Vec2 model)"),zIe.forEach(t),_Sr=i(we),A5=n(we,"LI",{});var WIe=s(A5);DMe=n(WIe,"STRONG",{});var qyt=s(DMe);bSr=r(qyt,"xlm-roberta"),qyt.forEach(t),vSr=r(WIe," \u2014 "),BY=n(WIe,"A",{href:!0});var Nyt=s(BY);FSr=r(Nyt,"FlaxXLMRobertaForMaskedLM"),Nyt.forEach(t),TSr=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),we.forEach(t),MSr=i(Wl),T(y5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),qje=i(f),Nc=n(f,"H2",{class:!0});var XGe=s(Nc);L5=n(XGe,"A",{id:!0,class:!0,href:!0});var jyt=s(L5);GMe=n(jyt,"SPAN",{});var Dyt=s(GMe);T(D9.$$.fragment,Dyt),Dyt.forEach(t),jyt.forEach(t),ESr=i(XGe),OMe=n(XGe,"SPAN",{});var Gyt=s(OMe);CSr=r(Gyt,"FlaxAutoModelForMaskedLM"),Gyt.forEach(t),XGe.forEach(t),Nje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(G9.$$.fragment,Ql),wSr=i(Ql),jc=n(Ql,"P",{});var Oee=s(jc);ASr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IY=n(Oee,"A",{href:!0});var Oyt=s(IY);ySr=r(Oyt,"from_pretrained()"),Oyt.forEach(t),LSr=r(Oee," class method or the "),qY=n(Oee,"A",{href:!0});var Vyt=s(qY);xSr=r(Vyt,"from_config()"),Vyt.forEach(t),$Sr=r(Oee,` class
method.`),Oee.forEach(t),kSr=i(Ql),O9=n(Ql,"P",{});var zGe=s(O9);SSr=r(zGe,"This class cannot be instantiated directly using "),VMe=n(zGe,"CODE",{});var Xyt=s(VMe);RSr=r(Xyt,"__init__()"),Xyt.forEach(t),PSr=r(zGe," (throws an error)."),zGe.forEach(t),BSr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var n6=s(Xt);T(V9.$$.fragment,n6),ISr=i(n6),XMe=n(n6,"P",{});var zyt=s(XMe);qSr=r(zyt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zyt.forEach(t),NSr=i(n6),Dc=n(n6,"P",{});var Vee=s(Dc);jSr=r(Vee,`Note:
Loading a model from its configuration file does `),zMe=n(Vee,"STRONG",{});var Wyt=s(zMe);DSr=r(Wyt,"not"),Wyt.forEach(t),GSr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(Vee,"A",{href:!0});var Qyt=s(NY);OSr=r(Qyt,"from_pretrained()"),Qyt.forEach(t),VSr=r(Vee," to load the model weights."),Vee.forEach(t),XSr=i(n6),T(x5.$$.fragment,n6),n6.forEach(t),zSr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(X9.$$.fragment,Hl),WSr=i(Hl),WMe=n(Hl,"P",{});var Hyt=s(WMe);QSr=r(Hyt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hyt.forEach(t),HSr=i(Hl),_n=n(Hl,"P",{});var s6=s(_n);USr=r(s6,"The model class to instantiate is selected based on the "),QMe=n(s6,"CODE",{});var Uyt=s(QMe);JSr=r(Uyt,"model_type"),Uyt.forEach(t),YSr=r(s6,` property of the config object (either
passed as an argument or loaded from `),HMe=n(s6,"CODE",{});var Jyt=s(HMe);KSr=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),ZSr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(s6,"CODE",{});var Yyt=s(UMe);eRr=r(Yyt,"pretrained_model_name_or_path"),Yyt.forEach(t),oRr=r(s6,":"),s6.forEach(t),rRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);$5=n(Ie,"LI",{});var QIe=s($5);JMe=n(QIe,"STRONG",{});var Kyt=s(JMe);tRr=r(Kyt,"albert"),Kyt.forEach(t),aRr=r(QIe," \u2014 "),jY=n(QIe,"A",{href:!0});var Zyt=s(jY);nRr=r(Zyt,"FlaxAlbertForMaskedLM"),Zyt.forEach(t),sRr=r(QIe," (ALBERT model)"),QIe.forEach(t),lRr=i(Ie),k5=n(Ie,"LI",{});var HIe=s(k5);YMe=n(HIe,"STRONG",{});var eLt=s(YMe);iRr=r(eLt,"bart"),eLt.forEach(t),dRr=r(HIe," \u2014 "),DY=n(HIe,"A",{href:!0});var oLt=s(DY);cRr=r(oLt,"FlaxBartForConditionalGeneration"),oLt.forEach(t),fRr=r(HIe," (BART model)"),HIe.forEach(t),mRr=i(Ie),S5=n(Ie,"LI",{});var UIe=s(S5);KMe=n(UIe,"STRONG",{});var rLt=s(KMe);gRr=r(rLt,"bert"),rLt.forEach(t),hRr=r(UIe," \u2014 "),GY=n(UIe,"A",{href:!0});var tLt=s(GY);pRr=r(tLt,"FlaxBertForMaskedLM"),tLt.forEach(t),uRr=r(UIe," (BERT model)"),UIe.forEach(t),_Rr=i(Ie),R5=n(Ie,"LI",{});var JIe=s(R5);ZMe=n(JIe,"STRONG",{});var aLt=s(ZMe);bRr=r(aLt,"big_bird"),aLt.forEach(t),vRr=r(JIe," \u2014 "),OY=n(JIe,"A",{href:!0});var nLt=s(OY);FRr=r(nLt,"FlaxBigBirdForMaskedLM"),nLt.forEach(t),TRr=r(JIe," (BigBird model)"),JIe.forEach(t),MRr=i(Ie),P5=n(Ie,"LI",{});var YIe=s(P5);e4e=n(YIe,"STRONG",{});var sLt=s(e4e);ERr=r(sLt,"distilbert"),sLt.forEach(t),CRr=r(YIe," \u2014 "),VY=n(YIe,"A",{href:!0});var lLt=s(VY);wRr=r(lLt,"FlaxDistilBertForMaskedLM"),lLt.forEach(t),ARr=r(YIe," (DistilBERT model)"),YIe.forEach(t),yRr=i(Ie),B5=n(Ie,"LI",{});var KIe=s(B5);o4e=n(KIe,"STRONG",{});var iLt=s(o4e);LRr=r(iLt,"electra"),iLt.forEach(t),xRr=r(KIe," \u2014 "),XY=n(KIe,"A",{href:!0});var dLt=s(XY);$Rr=r(dLt,"FlaxElectraForMaskedLM"),dLt.forEach(t),kRr=r(KIe," (ELECTRA model)"),KIe.forEach(t),SRr=i(Ie),I5=n(Ie,"LI",{});var ZIe=s(I5);r4e=n(ZIe,"STRONG",{});var cLt=s(r4e);RRr=r(cLt,"mbart"),cLt.forEach(t),PRr=r(ZIe," \u2014 "),zY=n(ZIe,"A",{href:!0});var fLt=s(zY);BRr=r(fLt,"FlaxMBartForConditionalGeneration"),fLt.forEach(t),IRr=r(ZIe," (mBART model)"),ZIe.forEach(t),qRr=i(Ie),q5=n(Ie,"LI",{});var eqe=s(q5);t4e=n(eqe,"STRONG",{});var mLt=s(t4e);NRr=r(mLt,"roberta"),mLt.forEach(t),jRr=r(eqe," \u2014 "),WY=n(eqe,"A",{href:!0});var gLt=s(WY);DRr=r(gLt,"FlaxRobertaForMaskedLM"),gLt.forEach(t),GRr=r(eqe," (RoBERTa model)"),eqe.forEach(t),ORr=i(Ie),N5=n(Ie,"LI",{});var oqe=s(N5);a4e=n(oqe,"STRONG",{});var hLt=s(a4e);VRr=r(hLt,"roformer"),hLt.forEach(t),XRr=r(oqe," \u2014 "),QY=n(oqe,"A",{href:!0});var pLt=s(QY);zRr=r(pLt,"FlaxRoFormerForMaskedLM"),pLt.forEach(t),WRr=r(oqe," (RoFormer model)"),oqe.forEach(t),QRr=i(Ie),j5=n(Ie,"LI",{});var rqe=s(j5);n4e=n(rqe,"STRONG",{});var uLt=s(n4e);HRr=r(uLt,"xlm-roberta"),uLt.forEach(t),URr=r(rqe," \u2014 "),HY=n(rqe,"A",{href:!0});var _Lt=s(HY);JRr=r(_Lt,"FlaxXLMRobertaForMaskedLM"),_Lt.forEach(t),YRr=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),Ie.forEach(t),KRr=i(Hl),T(D5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),jje=i(f),Gc=n(f,"H2",{class:!0});var WGe=s(Gc);G5=n(WGe,"A",{id:!0,class:!0,href:!0});var bLt=s(G5);s4e=n(bLt,"SPAN",{});var vLt=s(s4e);T(z9.$$.fragment,vLt),vLt.forEach(t),bLt.forEach(t),ZRr=i(WGe),l4e=n(WGe,"SPAN",{});var FLt=s(l4e);ePr=r(FLt,"FlaxAutoModelForSeq2SeqLM"),FLt.forEach(t),WGe.forEach(t),Dje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(W9.$$.fragment,Ul),oPr=i(Ul),Oc=n(Ul,"P",{});var Xee=s(Oc);rPr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=n(Xee,"A",{href:!0});var TLt=s(UY);tPr=r(TLt,"from_pretrained()"),TLt.forEach(t),aPr=r(Xee," class method or the "),JY=n(Xee,"A",{href:!0});var MLt=s(JY);nPr=r(MLt,"from_config()"),MLt.forEach(t),sPr=r(Xee,` class
method.`),Xee.forEach(t),lPr=i(Ul),Q9=n(Ul,"P",{});var QGe=s(Q9);iPr=r(QGe,"This class cannot be instantiated directly using "),i4e=n(QGe,"CODE",{});var ELt=s(i4e);dPr=r(ELt,"__init__()"),ELt.forEach(t),cPr=r(QGe," (throws an error)."),QGe.forEach(t),fPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var l6=s(zt);T(H9.$$.fragment,l6),mPr=i(l6),d4e=n(l6,"P",{});var CLt=s(d4e);gPr=r(CLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CLt.forEach(t),hPr=i(l6),Vc=n(l6,"P",{});var zee=s(Vc);pPr=r(zee,`Note:
Loading a model from its configuration file does `),c4e=n(zee,"STRONG",{});var wLt=s(c4e);uPr=r(wLt,"not"),wLt.forEach(t),_Pr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(zee,"A",{href:!0});var ALt=s(YY);bPr=r(ALt,"from_pretrained()"),ALt.forEach(t),vPr=r(zee," to load the model weights."),zee.forEach(t),FPr=i(l6),T(O5.$$.fragment,l6),l6.forEach(t),TPr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(U9.$$.fragment,Jl),MPr=i(Jl),f4e=n(Jl,"P",{});var yLt=s(f4e);EPr=r(yLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yLt.forEach(t),CPr=i(Jl),bn=n(Jl,"P",{});var i6=s(bn);wPr=r(i6,"The model class to instantiate is selected based on the "),m4e=n(i6,"CODE",{});var LLt=s(m4e);APr=r(LLt,"model_type"),LLt.forEach(t),yPr=r(i6,` property of the config object (either
passed as an argument or loaded from `),g4e=n(i6,"CODE",{});var xLt=s(g4e);LPr=r(xLt,"pretrained_model_name_or_path"),xLt.forEach(t),xPr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(i6,"CODE",{});var $Lt=s(h4e);$Pr=r($Lt,"pretrained_model_name_or_path"),$Lt.forEach(t),kPr=r(i6,":"),i6.forEach(t),SPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);V5=n(ze,"LI",{});var tqe=s(V5);p4e=n(tqe,"STRONG",{});var kLt=s(p4e);RPr=r(kLt,"bart"),kLt.forEach(t),PPr=r(tqe," \u2014 "),KY=n(tqe,"A",{href:!0});var SLt=s(KY);BPr=r(SLt,"FlaxBartForConditionalGeneration"),SLt.forEach(t),IPr=r(tqe," (BART model)"),tqe.forEach(t),qPr=i(ze),X5=n(ze,"LI",{});var aqe=s(X5);u4e=n(aqe,"STRONG",{});var RLt=s(u4e);NPr=r(RLt,"blenderbot"),RLt.forEach(t),jPr=r(aqe," \u2014 "),ZY=n(aqe,"A",{href:!0});var PLt=s(ZY);DPr=r(PLt,"FlaxBlenderbotForConditionalGeneration"),PLt.forEach(t),GPr=r(aqe," (Blenderbot model)"),aqe.forEach(t),OPr=i(ze),z5=n(ze,"LI",{});var nqe=s(z5);_4e=n(nqe,"STRONG",{});var BLt=s(_4e);VPr=r(BLt,"blenderbot-small"),BLt.forEach(t),XPr=r(nqe," \u2014 "),eK=n(nqe,"A",{href:!0});var ILt=s(eK);zPr=r(ILt,"FlaxBlenderbotSmallForConditionalGeneration"),ILt.forEach(t),WPr=r(nqe," (BlenderbotSmall model)"),nqe.forEach(t),QPr=i(ze),W5=n(ze,"LI",{});var sqe=s(W5);b4e=n(sqe,"STRONG",{});var qLt=s(b4e);HPr=r(qLt,"encoder-decoder"),qLt.forEach(t),UPr=r(sqe," \u2014 "),oK=n(sqe,"A",{href:!0});var NLt=s(oK);JPr=r(NLt,"FlaxEncoderDecoderModel"),NLt.forEach(t),YPr=r(sqe," (Encoder decoder model)"),sqe.forEach(t),KPr=i(ze),Q5=n(ze,"LI",{});var lqe=s(Q5);v4e=n(lqe,"STRONG",{});var jLt=s(v4e);ZPr=r(jLt,"marian"),jLt.forEach(t),eBr=r(lqe," \u2014 "),rK=n(lqe,"A",{href:!0});var DLt=s(rK);oBr=r(DLt,"FlaxMarianMTModel"),DLt.forEach(t),rBr=r(lqe," (Marian model)"),lqe.forEach(t),tBr=i(ze),H5=n(ze,"LI",{});var iqe=s(H5);F4e=n(iqe,"STRONG",{});var GLt=s(F4e);aBr=r(GLt,"mbart"),GLt.forEach(t),nBr=r(iqe," \u2014 "),tK=n(iqe,"A",{href:!0});var OLt=s(tK);sBr=r(OLt,"FlaxMBartForConditionalGeneration"),OLt.forEach(t),lBr=r(iqe," (mBART model)"),iqe.forEach(t),iBr=i(ze),U5=n(ze,"LI",{});var dqe=s(U5);T4e=n(dqe,"STRONG",{});var VLt=s(T4e);dBr=r(VLt,"mt5"),VLt.forEach(t),cBr=r(dqe," \u2014 "),aK=n(dqe,"A",{href:!0});var XLt=s(aK);fBr=r(XLt,"FlaxMT5ForConditionalGeneration"),XLt.forEach(t),mBr=r(dqe," (mT5 model)"),dqe.forEach(t),gBr=i(ze),J5=n(ze,"LI",{});var cqe=s(J5);M4e=n(cqe,"STRONG",{});var zLt=s(M4e);hBr=r(zLt,"pegasus"),zLt.forEach(t),pBr=r(cqe," \u2014 "),nK=n(cqe,"A",{href:!0});var WLt=s(nK);uBr=r(WLt,"FlaxPegasusForConditionalGeneration"),WLt.forEach(t),_Br=r(cqe," (Pegasus model)"),cqe.forEach(t),bBr=i(ze),Y5=n(ze,"LI",{});var fqe=s(Y5);E4e=n(fqe,"STRONG",{});var QLt=s(E4e);vBr=r(QLt,"t5"),QLt.forEach(t),FBr=r(fqe," \u2014 "),sK=n(fqe,"A",{href:!0});var HLt=s(sK);TBr=r(HLt,"FlaxT5ForConditionalGeneration"),HLt.forEach(t),MBr=r(fqe," (T5 model)"),fqe.forEach(t),ze.forEach(t),EBr=i(Jl),T(K5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Gje=i(f),Xc=n(f,"H2",{class:!0});var HGe=s(Xc);Z5=n(HGe,"A",{id:!0,class:!0,href:!0});var ULt=s(Z5);C4e=n(ULt,"SPAN",{});var JLt=s(C4e);T(J9.$$.fragment,JLt),JLt.forEach(t),ULt.forEach(t),CBr=i(HGe),w4e=n(HGe,"SPAN",{});var YLt=s(w4e);wBr=r(YLt,"FlaxAutoModelForSequenceClassification"),YLt.forEach(t),HGe.forEach(t),Oje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(Y9.$$.fragment,Yl),ABr=i(Yl),zc=n(Yl,"P",{});var Wee=s(zc);yBr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lK=n(Wee,"A",{href:!0});var KLt=s(lK);LBr=r(KLt,"from_pretrained()"),KLt.forEach(t),xBr=r(Wee," class method or the "),iK=n(Wee,"A",{href:!0});var ZLt=s(iK);$Br=r(ZLt,"from_config()"),ZLt.forEach(t),kBr=r(Wee,` class
method.`),Wee.forEach(t),SBr=i(Yl),K9=n(Yl,"P",{});var UGe=s(K9);RBr=r(UGe,"This class cannot be instantiated directly using "),A4e=n(UGe,"CODE",{});var e8t=s(A4e);PBr=r(e8t,"__init__()"),e8t.forEach(t),BBr=r(UGe," (throws an error)."),UGe.forEach(t),IBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var d6=s(Wt);T(Z9.$$.fragment,d6),qBr=i(d6),y4e=n(d6,"P",{});var o8t=s(y4e);NBr=r(o8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o8t.forEach(t),jBr=i(d6),Wc=n(d6,"P",{});var Qee=s(Wc);DBr=r(Qee,`Note:
Loading a model from its configuration file does `),L4e=n(Qee,"STRONG",{});var r8t=s(L4e);GBr=r(r8t,"not"),r8t.forEach(t),OBr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(Qee,"A",{href:!0});var t8t=s(dK);VBr=r(t8t,"from_pretrained()"),t8t.forEach(t),XBr=r(Qee," to load the model weights."),Qee.forEach(t),zBr=i(d6),T(ew.$$.fragment,d6),d6.forEach(t),WBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(ex.$$.fragment,Kl),QBr=i(Kl),x4e=n(Kl,"P",{});var a8t=s(x4e);HBr=r(a8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a8t.forEach(t),UBr=i(Kl),vn=n(Kl,"P",{});var c6=s(vn);JBr=r(c6,"The model class to instantiate is selected based on the "),$4e=n(c6,"CODE",{});var n8t=s($4e);YBr=r(n8t,"model_type"),n8t.forEach(t),KBr=r(c6,` property of the config object (either
passed as an argument or loaded from `),k4e=n(c6,"CODE",{});var s8t=s(k4e);ZBr=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),eIr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(c6,"CODE",{});var l8t=s(S4e);oIr=r(l8t,"pretrained_model_name_or_path"),l8t.forEach(t),rIr=r(c6,":"),c6.forEach(t),tIr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);ow=n(qe,"LI",{});var mqe=s(ow);R4e=n(mqe,"STRONG",{});var i8t=s(R4e);aIr=r(i8t,"albert"),i8t.forEach(t),nIr=r(mqe," \u2014 "),cK=n(mqe,"A",{href:!0});var d8t=s(cK);sIr=r(d8t,"FlaxAlbertForSequenceClassification"),d8t.forEach(t),lIr=r(mqe," (ALBERT model)"),mqe.forEach(t),iIr=i(qe),rw=n(qe,"LI",{});var gqe=s(rw);P4e=n(gqe,"STRONG",{});var c8t=s(P4e);dIr=r(c8t,"bart"),c8t.forEach(t),cIr=r(gqe," \u2014 "),fK=n(gqe,"A",{href:!0});var f8t=s(fK);fIr=r(f8t,"FlaxBartForSequenceClassification"),f8t.forEach(t),mIr=r(gqe," (BART model)"),gqe.forEach(t),gIr=i(qe),tw=n(qe,"LI",{});var hqe=s(tw);B4e=n(hqe,"STRONG",{});var m8t=s(B4e);hIr=r(m8t,"bert"),m8t.forEach(t),pIr=r(hqe," \u2014 "),mK=n(hqe,"A",{href:!0});var g8t=s(mK);uIr=r(g8t,"FlaxBertForSequenceClassification"),g8t.forEach(t),_Ir=r(hqe," (BERT model)"),hqe.forEach(t),bIr=i(qe),aw=n(qe,"LI",{});var pqe=s(aw);I4e=n(pqe,"STRONG",{});var h8t=s(I4e);vIr=r(h8t,"big_bird"),h8t.forEach(t),FIr=r(pqe," \u2014 "),gK=n(pqe,"A",{href:!0});var p8t=s(gK);TIr=r(p8t,"FlaxBigBirdForSequenceClassification"),p8t.forEach(t),MIr=r(pqe," (BigBird model)"),pqe.forEach(t),EIr=i(qe),nw=n(qe,"LI",{});var uqe=s(nw);q4e=n(uqe,"STRONG",{});var u8t=s(q4e);CIr=r(u8t,"distilbert"),u8t.forEach(t),wIr=r(uqe," \u2014 "),hK=n(uqe,"A",{href:!0});var _8t=s(hK);AIr=r(_8t,"FlaxDistilBertForSequenceClassification"),_8t.forEach(t),yIr=r(uqe," (DistilBERT model)"),uqe.forEach(t),LIr=i(qe),sw=n(qe,"LI",{});var _qe=s(sw);N4e=n(_qe,"STRONG",{});var b8t=s(N4e);xIr=r(b8t,"electra"),b8t.forEach(t),$Ir=r(_qe," \u2014 "),pK=n(_qe,"A",{href:!0});var v8t=s(pK);kIr=r(v8t,"FlaxElectraForSequenceClassification"),v8t.forEach(t),SIr=r(_qe," (ELECTRA model)"),_qe.forEach(t),RIr=i(qe),lw=n(qe,"LI",{});var bqe=s(lw);j4e=n(bqe,"STRONG",{});var F8t=s(j4e);PIr=r(F8t,"mbart"),F8t.forEach(t),BIr=r(bqe," \u2014 "),uK=n(bqe,"A",{href:!0});var T8t=s(uK);IIr=r(T8t,"FlaxMBartForSequenceClassification"),T8t.forEach(t),qIr=r(bqe," (mBART model)"),bqe.forEach(t),NIr=i(qe),iw=n(qe,"LI",{});var vqe=s(iw);D4e=n(vqe,"STRONG",{});var M8t=s(D4e);jIr=r(M8t,"roberta"),M8t.forEach(t),DIr=r(vqe," \u2014 "),_K=n(vqe,"A",{href:!0});var E8t=s(_K);GIr=r(E8t,"FlaxRobertaForSequenceClassification"),E8t.forEach(t),OIr=r(vqe," (RoBERTa model)"),vqe.forEach(t),VIr=i(qe),dw=n(qe,"LI",{});var Fqe=s(dw);G4e=n(Fqe,"STRONG",{});var C8t=s(G4e);XIr=r(C8t,"roformer"),C8t.forEach(t),zIr=r(Fqe," \u2014 "),bK=n(Fqe,"A",{href:!0});var w8t=s(bK);WIr=r(w8t,"FlaxRoFormerForSequenceClassification"),w8t.forEach(t),QIr=r(Fqe," (RoFormer model)"),Fqe.forEach(t),HIr=i(qe),cw=n(qe,"LI",{});var Tqe=s(cw);O4e=n(Tqe,"STRONG",{});var A8t=s(O4e);UIr=r(A8t,"xlm-roberta"),A8t.forEach(t),JIr=r(Tqe," \u2014 "),vK=n(Tqe,"A",{href:!0});var y8t=s(vK);YIr=r(y8t,"FlaxXLMRobertaForSequenceClassification"),y8t.forEach(t),KIr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),qe.forEach(t),ZIr=i(Kl),T(fw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Vje=i(f),Qc=n(f,"H2",{class:!0});var JGe=s(Qc);mw=n(JGe,"A",{id:!0,class:!0,href:!0});var L8t=s(mw);V4e=n(L8t,"SPAN",{});var x8t=s(V4e);T(ox.$$.fragment,x8t),x8t.forEach(t),L8t.forEach(t),eqr=i(JGe),X4e=n(JGe,"SPAN",{});var $8t=s(X4e);oqr=r($8t,"FlaxAutoModelForQuestionAnswering"),$8t.forEach(t),JGe.forEach(t),Xje=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(rx.$$.fragment,Zl),rqr=i(Zl),Hc=n(Zl,"P",{});var Hee=s(Hc);tqr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FK=n(Hee,"A",{href:!0});var k8t=s(FK);aqr=r(k8t,"from_pretrained()"),k8t.forEach(t),nqr=r(Hee," class method or the "),TK=n(Hee,"A",{href:!0});var S8t=s(TK);sqr=r(S8t,"from_config()"),S8t.forEach(t),lqr=r(Hee,` class
method.`),Hee.forEach(t),iqr=i(Zl),tx=n(Zl,"P",{});var YGe=s(tx);dqr=r(YGe,"This class cannot be instantiated directly using "),z4e=n(YGe,"CODE",{});var R8t=s(z4e);cqr=r(R8t,"__init__()"),R8t.forEach(t),fqr=r(YGe," (throws an error)."),YGe.forEach(t),mqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var f6=s(Qt);T(ax.$$.fragment,f6),gqr=i(f6),W4e=n(f6,"P",{});var P8t=s(W4e);hqr=r(P8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P8t.forEach(t),pqr=i(f6),Uc=n(f6,"P",{});var Uee=s(Uc);uqr=r(Uee,`Note:
Loading a model from its configuration file does `),Q4e=n(Uee,"STRONG",{});var B8t=s(Q4e);_qr=r(B8t,"not"),B8t.forEach(t),bqr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(Uee,"A",{href:!0});var I8t=s(MK);vqr=r(I8t,"from_pretrained()"),I8t.forEach(t),Fqr=r(Uee," to load the model weights."),Uee.forEach(t),Tqr=i(f6),T(gw.$$.fragment,f6),f6.forEach(t),Mqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(nx.$$.fragment,ei),Eqr=i(ei),H4e=n(ei,"P",{});var q8t=s(H4e);Cqr=r(q8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q8t.forEach(t),wqr=i(ei),Fn=n(ei,"P",{});var m6=s(Fn);Aqr=r(m6,"The model class to instantiate is selected based on the "),U4e=n(m6,"CODE",{});var N8t=s(U4e);yqr=r(N8t,"model_type"),N8t.forEach(t),Lqr=r(m6,` property of the config object (either
passed as an argument or loaded from `),J4e=n(m6,"CODE",{});var j8t=s(J4e);xqr=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),$qr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(m6,"CODE",{});var D8t=s(Y4e);kqr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),Sqr=r(m6,":"),m6.forEach(t),Rqr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);hw=n(Ne,"LI",{});var Mqe=s(hw);K4e=n(Mqe,"STRONG",{});var G8t=s(K4e);Pqr=r(G8t,"albert"),G8t.forEach(t),Bqr=r(Mqe," \u2014 "),EK=n(Mqe,"A",{href:!0});var O8t=s(EK);Iqr=r(O8t,"FlaxAlbertForQuestionAnswering"),O8t.forEach(t),qqr=r(Mqe," (ALBERT model)"),Mqe.forEach(t),Nqr=i(Ne),pw=n(Ne,"LI",{});var Eqe=s(pw);Z4e=n(Eqe,"STRONG",{});var V8t=s(Z4e);jqr=r(V8t,"bart"),V8t.forEach(t),Dqr=r(Eqe," \u2014 "),CK=n(Eqe,"A",{href:!0});var X8t=s(CK);Gqr=r(X8t,"FlaxBartForQuestionAnswering"),X8t.forEach(t),Oqr=r(Eqe," (BART model)"),Eqe.forEach(t),Vqr=i(Ne),uw=n(Ne,"LI",{});var Cqe=s(uw);eEe=n(Cqe,"STRONG",{});var z8t=s(eEe);Xqr=r(z8t,"bert"),z8t.forEach(t),zqr=r(Cqe," \u2014 "),wK=n(Cqe,"A",{href:!0});var W8t=s(wK);Wqr=r(W8t,"FlaxBertForQuestionAnswering"),W8t.forEach(t),Qqr=r(Cqe," (BERT model)"),Cqe.forEach(t),Hqr=i(Ne),_w=n(Ne,"LI",{});var wqe=s(_w);oEe=n(wqe,"STRONG",{});var Q8t=s(oEe);Uqr=r(Q8t,"big_bird"),Q8t.forEach(t),Jqr=r(wqe," \u2014 "),AK=n(wqe,"A",{href:!0});var H8t=s(AK);Yqr=r(H8t,"FlaxBigBirdForQuestionAnswering"),H8t.forEach(t),Kqr=r(wqe," (BigBird model)"),wqe.forEach(t),Zqr=i(Ne),bw=n(Ne,"LI",{});var Aqe=s(bw);rEe=n(Aqe,"STRONG",{});var U8t=s(rEe);eNr=r(U8t,"distilbert"),U8t.forEach(t),oNr=r(Aqe," \u2014 "),yK=n(Aqe,"A",{href:!0});var J8t=s(yK);rNr=r(J8t,"FlaxDistilBertForQuestionAnswering"),J8t.forEach(t),tNr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),aNr=i(Ne),vw=n(Ne,"LI",{});var yqe=s(vw);tEe=n(yqe,"STRONG",{});var Y8t=s(tEe);nNr=r(Y8t,"electra"),Y8t.forEach(t),sNr=r(yqe," \u2014 "),LK=n(yqe,"A",{href:!0});var K8t=s(LK);lNr=r(K8t,"FlaxElectraForQuestionAnswering"),K8t.forEach(t),iNr=r(yqe," (ELECTRA model)"),yqe.forEach(t),dNr=i(Ne),Fw=n(Ne,"LI",{});var Lqe=s(Fw);aEe=n(Lqe,"STRONG",{});var Z8t=s(aEe);cNr=r(Z8t,"mbart"),Z8t.forEach(t),fNr=r(Lqe," \u2014 "),xK=n(Lqe,"A",{href:!0});var e9t=s(xK);mNr=r(e9t,"FlaxMBartForQuestionAnswering"),e9t.forEach(t),gNr=r(Lqe," (mBART model)"),Lqe.forEach(t),hNr=i(Ne),Tw=n(Ne,"LI",{});var xqe=s(Tw);nEe=n(xqe,"STRONG",{});var o9t=s(nEe);pNr=r(o9t,"roberta"),o9t.forEach(t),uNr=r(xqe," \u2014 "),$K=n(xqe,"A",{href:!0});var r9t=s($K);_Nr=r(r9t,"FlaxRobertaForQuestionAnswering"),r9t.forEach(t),bNr=r(xqe," (RoBERTa model)"),xqe.forEach(t),vNr=i(Ne),Mw=n(Ne,"LI",{});var $qe=s(Mw);sEe=n($qe,"STRONG",{});var t9t=s(sEe);FNr=r(t9t,"roformer"),t9t.forEach(t),TNr=r($qe," \u2014 "),kK=n($qe,"A",{href:!0});var a9t=s(kK);MNr=r(a9t,"FlaxRoFormerForQuestionAnswering"),a9t.forEach(t),ENr=r($qe," (RoFormer model)"),$qe.forEach(t),CNr=i(Ne),Ew=n(Ne,"LI",{});var kqe=s(Ew);lEe=n(kqe,"STRONG",{});var n9t=s(lEe);wNr=r(n9t,"xlm-roberta"),n9t.forEach(t),ANr=r(kqe," \u2014 "),SK=n(kqe,"A",{href:!0});var s9t=s(SK);yNr=r(s9t,"FlaxXLMRobertaForQuestionAnswering"),s9t.forEach(t),LNr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),Ne.forEach(t),xNr=i(ei),T(Cw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),zje=i(f),Jc=n(f,"H2",{class:!0});var KGe=s(Jc);ww=n(KGe,"A",{id:!0,class:!0,href:!0});var l9t=s(ww);iEe=n(l9t,"SPAN",{});var i9t=s(iEe);T(sx.$$.fragment,i9t),i9t.forEach(t),l9t.forEach(t),$Nr=i(KGe),dEe=n(KGe,"SPAN",{});var d9t=s(dEe);kNr=r(d9t,"FlaxAutoModelForTokenClassification"),d9t.forEach(t),KGe.forEach(t),Wje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(lx.$$.fragment,oi),SNr=i(oi),Yc=n(oi,"P",{});var Jee=s(Yc);RNr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RK=n(Jee,"A",{href:!0});var c9t=s(RK);PNr=r(c9t,"from_pretrained()"),c9t.forEach(t),BNr=r(Jee," class method or the "),PK=n(Jee,"A",{href:!0});var f9t=s(PK);INr=r(f9t,"from_config()"),f9t.forEach(t),qNr=r(Jee,` class
method.`),Jee.forEach(t),NNr=i(oi),ix=n(oi,"P",{});var ZGe=s(ix);jNr=r(ZGe,"This class cannot be instantiated directly using "),cEe=n(ZGe,"CODE",{});var m9t=s(cEe);DNr=r(m9t,"__init__()"),m9t.forEach(t),GNr=r(ZGe," (throws an error)."),ZGe.forEach(t),ONr=i(oi),Ht=n(oi,"DIV",{class:!0});var g6=s(Ht);T(dx.$$.fragment,g6),VNr=i(g6),fEe=n(g6,"P",{});var g9t=s(fEe);XNr=r(g9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g9t.forEach(t),zNr=i(g6),Kc=n(g6,"P",{});var Yee=s(Kc);WNr=r(Yee,`Note:
Loading a model from its configuration file does `),mEe=n(Yee,"STRONG",{});var h9t=s(mEe);QNr=r(h9t,"not"),h9t.forEach(t),HNr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(Yee,"A",{href:!0});var p9t=s(BK);UNr=r(p9t,"from_pretrained()"),p9t.forEach(t),JNr=r(Yee," to load the model weights."),Yee.forEach(t),YNr=i(g6),T(Aw.$$.fragment,g6),g6.forEach(t),KNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(cx.$$.fragment,ri),ZNr=i(ri),gEe=n(ri,"P",{});var u9t=s(gEe);ejr=r(u9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u9t.forEach(t),ojr=i(ri),Tn=n(ri,"P",{});var h6=s(Tn);rjr=r(h6,"The model class to instantiate is selected based on the "),hEe=n(h6,"CODE",{});var _9t=s(hEe);tjr=r(_9t,"model_type"),_9t.forEach(t),ajr=r(h6,` property of the config object (either
passed as an argument or loaded from `),pEe=n(h6,"CODE",{});var b9t=s(pEe);njr=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),sjr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(h6,"CODE",{});var v9t=s(uEe);ljr=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),ijr=r(h6,":"),h6.forEach(t),djr=i(ri),De=n(ri,"UL",{});var Fo=s(De);yw=n(Fo,"LI",{});var Sqe=s(yw);_Ee=n(Sqe,"STRONG",{});var F9t=s(_Ee);cjr=r(F9t,"albert"),F9t.forEach(t),fjr=r(Sqe," \u2014 "),IK=n(Sqe,"A",{href:!0});var T9t=s(IK);mjr=r(T9t,"FlaxAlbertForTokenClassification"),T9t.forEach(t),gjr=r(Sqe," (ALBERT model)"),Sqe.forEach(t),hjr=i(Fo),Lw=n(Fo,"LI",{});var Rqe=s(Lw);bEe=n(Rqe,"STRONG",{});var M9t=s(bEe);pjr=r(M9t,"bert"),M9t.forEach(t),ujr=r(Rqe," \u2014 "),qK=n(Rqe,"A",{href:!0});var E9t=s(qK);_jr=r(E9t,"FlaxBertForTokenClassification"),E9t.forEach(t),bjr=r(Rqe," (BERT model)"),Rqe.forEach(t),vjr=i(Fo),xw=n(Fo,"LI",{});var Pqe=s(xw);vEe=n(Pqe,"STRONG",{});var C9t=s(vEe);Fjr=r(C9t,"big_bird"),C9t.forEach(t),Tjr=r(Pqe," \u2014 "),NK=n(Pqe,"A",{href:!0});var w9t=s(NK);Mjr=r(w9t,"FlaxBigBirdForTokenClassification"),w9t.forEach(t),Ejr=r(Pqe," (BigBird model)"),Pqe.forEach(t),Cjr=i(Fo),$w=n(Fo,"LI",{});var Bqe=s($w);FEe=n(Bqe,"STRONG",{});var A9t=s(FEe);wjr=r(A9t,"distilbert"),A9t.forEach(t),Ajr=r(Bqe," \u2014 "),jK=n(Bqe,"A",{href:!0});var y9t=s(jK);yjr=r(y9t,"FlaxDistilBertForTokenClassification"),y9t.forEach(t),Ljr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),xjr=i(Fo),kw=n(Fo,"LI",{});var Iqe=s(kw);TEe=n(Iqe,"STRONG",{});var L9t=s(TEe);$jr=r(L9t,"electra"),L9t.forEach(t),kjr=r(Iqe," \u2014 "),DK=n(Iqe,"A",{href:!0});var x9t=s(DK);Sjr=r(x9t,"FlaxElectraForTokenClassification"),x9t.forEach(t),Rjr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),Pjr=i(Fo),Sw=n(Fo,"LI",{});var qqe=s(Sw);MEe=n(qqe,"STRONG",{});var $9t=s(MEe);Bjr=r($9t,"roberta"),$9t.forEach(t),Ijr=r(qqe," \u2014 "),GK=n(qqe,"A",{href:!0});var k9t=s(GK);qjr=r(k9t,"FlaxRobertaForTokenClassification"),k9t.forEach(t),Njr=r(qqe," (RoBERTa model)"),qqe.forEach(t),jjr=i(Fo),Rw=n(Fo,"LI",{});var Nqe=s(Rw);EEe=n(Nqe,"STRONG",{});var S9t=s(EEe);Djr=r(S9t,"roformer"),S9t.forEach(t),Gjr=r(Nqe," \u2014 "),OK=n(Nqe,"A",{href:!0});var R9t=s(OK);Ojr=r(R9t,"FlaxRoFormerForTokenClassification"),R9t.forEach(t),Vjr=r(Nqe," (RoFormer model)"),Nqe.forEach(t),Xjr=i(Fo),Pw=n(Fo,"LI",{});var jqe=s(Pw);CEe=n(jqe,"STRONG",{});var P9t=s(CEe);zjr=r(P9t,"xlm-roberta"),P9t.forEach(t),Wjr=r(jqe," \u2014 "),VK=n(jqe,"A",{href:!0});var B9t=s(VK);Qjr=r(B9t,"FlaxXLMRobertaForTokenClassification"),B9t.forEach(t),Hjr=r(jqe," (XLM-RoBERTa model)"),jqe.forEach(t),Fo.forEach(t),Ujr=i(ri),T(Bw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Qje=i(f),Zc=n(f,"H2",{class:!0});var eOe=s(Zc);Iw=n(eOe,"A",{id:!0,class:!0,href:!0});var I9t=s(Iw);wEe=n(I9t,"SPAN",{});var q9t=s(wEe);T(fx.$$.fragment,q9t),q9t.forEach(t),I9t.forEach(t),Jjr=i(eOe),AEe=n(eOe,"SPAN",{});var N9t=s(AEe);Yjr=r(N9t,"FlaxAutoModelForMultipleChoice"),N9t.forEach(t),eOe.forEach(t),Hje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(mx.$$.fragment,ti),Kjr=i(ti),ef=n(ti,"P",{});var Kee=s(ef);Zjr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=n(Kee,"A",{href:!0});var j9t=s(XK);eDr=r(j9t,"from_pretrained()"),j9t.forEach(t),oDr=r(Kee," class method or the "),zK=n(Kee,"A",{href:!0});var D9t=s(zK);rDr=r(D9t,"from_config()"),D9t.forEach(t),tDr=r(Kee,` class
method.`),Kee.forEach(t),aDr=i(ti),gx=n(ti,"P",{});var oOe=s(gx);nDr=r(oOe,"This class cannot be instantiated directly using "),yEe=n(oOe,"CODE",{});var G9t=s(yEe);sDr=r(G9t,"__init__()"),G9t.forEach(t),lDr=r(oOe," (throws an error)."),oOe.forEach(t),iDr=i(ti),Ut=n(ti,"DIV",{class:!0});var p6=s(Ut);T(hx.$$.fragment,p6),dDr=i(p6),LEe=n(p6,"P",{});var O9t=s(LEe);cDr=r(O9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O9t.forEach(t),fDr=i(p6),of=n(p6,"P",{});var Zee=s(of);mDr=r(Zee,`Note:
Loading a model from its configuration file does `),xEe=n(Zee,"STRONG",{});var V9t=s(xEe);gDr=r(V9t,"not"),V9t.forEach(t),hDr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Zee,"A",{href:!0});var X9t=s(WK);pDr=r(X9t,"from_pretrained()"),X9t.forEach(t),uDr=r(Zee," to load the model weights."),Zee.forEach(t),_Dr=i(p6),T(qw.$$.fragment,p6),p6.forEach(t),bDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(px.$$.fragment,ai),vDr=i(ai),$Ee=n(ai,"P",{});var z9t=s($Ee);FDr=r(z9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z9t.forEach(t),TDr=i(ai),Mn=n(ai,"P",{});var u6=s(Mn);MDr=r(u6,"The model class to instantiate is selected based on the "),kEe=n(u6,"CODE",{});var W9t=s(kEe);EDr=r(W9t,"model_type"),W9t.forEach(t),CDr=r(u6,` property of the config object (either
passed as an argument or loaded from `),SEe=n(u6,"CODE",{});var Q9t=s(SEe);wDr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),ADr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(u6,"CODE",{});var H9t=s(REe);yDr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),LDr=r(u6,":"),u6.forEach(t),xDr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);Nw=n(To,"LI",{});var Dqe=s(Nw);PEe=n(Dqe,"STRONG",{});var U9t=s(PEe);$Dr=r(U9t,"albert"),U9t.forEach(t),kDr=r(Dqe," \u2014 "),QK=n(Dqe,"A",{href:!0});var J9t=s(QK);SDr=r(J9t,"FlaxAlbertForMultipleChoice"),J9t.forEach(t),RDr=r(Dqe," (ALBERT model)"),Dqe.forEach(t),PDr=i(To),jw=n(To,"LI",{});var Gqe=s(jw);BEe=n(Gqe,"STRONG",{});var Y9t=s(BEe);BDr=r(Y9t,"bert"),Y9t.forEach(t),IDr=r(Gqe," \u2014 "),HK=n(Gqe,"A",{href:!0});var K9t=s(HK);qDr=r(K9t,"FlaxBertForMultipleChoice"),K9t.forEach(t),NDr=r(Gqe," (BERT model)"),Gqe.forEach(t),jDr=i(To),Dw=n(To,"LI",{});var Oqe=s(Dw);IEe=n(Oqe,"STRONG",{});var Z9t=s(IEe);DDr=r(Z9t,"big_bird"),Z9t.forEach(t),GDr=r(Oqe," \u2014 "),UK=n(Oqe,"A",{href:!0});var ext=s(UK);ODr=r(ext,"FlaxBigBirdForMultipleChoice"),ext.forEach(t),VDr=r(Oqe," (BigBird model)"),Oqe.forEach(t),XDr=i(To),Gw=n(To,"LI",{});var Vqe=s(Gw);qEe=n(Vqe,"STRONG",{});var oxt=s(qEe);zDr=r(oxt,"distilbert"),oxt.forEach(t),WDr=r(Vqe," \u2014 "),JK=n(Vqe,"A",{href:!0});var rxt=s(JK);QDr=r(rxt,"FlaxDistilBertForMultipleChoice"),rxt.forEach(t),HDr=r(Vqe," (DistilBERT model)"),Vqe.forEach(t),UDr=i(To),Ow=n(To,"LI",{});var Xqe=s(Ow);NEe=n(Xqe,"STRONG",{});var txt=s(NEe);JDr=r(txt,"electra"),txt.forEach(t),YDr=r(Xqe," \u2014 "),YK=n(Xqe,"A",{href:!0});var axt=s(YK);KDr=r(axt,"FlaxElectraForMultipleChoice"),axt.forEach(t),ZDr=r(Xqe," (ELECTRA model)"),Xqe.forEach(t),eGr=i(To),Vw=n(To,"LI",{});var zqe=s(Vw);jEe=n(zqe,"STRONG",{});var nxt=s(jEe);oGr=r(nxt,"roberta"),nxt.forEach(t),rGr=r(zqe," \u2014 "),KK=n(zqe,"A",{href:!0});var sxt=s(KK);tGr=r(sxt,"FlaxRobertaForMultipleChoice"),sxt.forEach(t),aGr=r(zqe," (RoBERTa model)"),zqe.forEach(t),nGr=i(To),Xw=n(To,"LI",{});var Wqe=s(Xw);DEe=n(Wqe,"STRONG",{});var lxt=s(DEe);sGr=r(lxt,"roformer"),lxt.forEach(t),lGr=r(Wqe," \u2014 "),ZK=n(Wqe,"A",{href:!0});var ixt=s(ZK);iGr=r(ixt,"FlaxRoFormerForMultipleChoice"),ixt.forEach(t),dGr=r(Wqe," (RoFormer model)"),Wqe.forEach(t),cGr=i(To),zw=n(To,"LI",{});var Qqe=s(zw);GEe=n(Qqe,"STRONG",{});var dxt=s(GEe);fGr=r(dxt,"xlm-roberta"),dxt.forEach(t),mGr=r(Qqe," \u2014 "),eZ=n(Qqe,"A",{href:!0});var cxt=s(eZ);gGr=r(cxt,"FlaxXLMRobertaForMultipleChoice"),cxt.forEach(t),hGr=r(Qqe," (XLM-RoBERTa model)"),Qqe.forEach(t),To.forEach(t),pGr=i(ai),T(Ww.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Uje=i(f),rf=n(f,"H2",{class:!0});var rOe=s(rf);Qw=n(rOe,"A",{id:!0,class:!0,href:!0});var fxt=s(Qw);OEe=n(fxt,"SPAN",{});var mxt=s(OEe);T(ux.$$.fragment,mxt),mxt.forEach(t),fxt.forEach(t),uGr=i(rOe),VEe=n(rOe,"SPAN",{});var gxt=s(VEe);_Gr=r(gxt,"FlaxAutoModelForNextSentencePrediction"),gxt.forEach(t),rOe.forEach(t),Jje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(_x.$$.fragment,ni),bGr=i(ni),tf=n(ni,"P",{});var eoe=s(tf);vGr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oZ=n(eoe,"A",{href:!0});var hxt=s(oZ);FGr=r(hxt,"from_pretrained()"),hxt.forEach(t),TGr=r(eoe," class method or the "),rZ=n(eoe,"A",{href:!0});var pxt=s(rZ);MGr=r(pxt,"from_config()"),pxt.forEach(t),EGr=r(eoe,` class
method.`),eoe.forEach(t),CGr=i(ni),bx=n(ni,"P",{});var tOe=s(bx);wGr=r(tOe,"This class cannot be instantiated directly using "),XEe=n(tOe,"CODE",{});var uxt=s(XEe);AGr=r(uxt,"__init__()"),uxt.forEach(t),yGr=r(tOe," (throws an error)."),tOe.forEach(t),LGr=i(ni),Jt=n(ni,"DIV",{class:!0});var _6=s(Jt);T(vx.$$.fragment,_6),xGr=i(_6),zEe=n(_6,"P",{});var _xt=s(zEe);$Gr=r(_xt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_xt.forEach(t),kGr=i(_6),af=n(_6,"P",{});var ooe=s(af);SGr=r(ooe,`Note:
Loading a model from its configuration file does `),WEe=n(ooe,"STRONG",{});var bxt=s(WEe);RGr=r(bxt,"not"),bxt.forEach(t),PGr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(ooe,"A",{href:!0});var vxt=s(tZ);BGr=r(vxt,"from_pretrained()"),vxt.forEach(t),IGr=r(ooe," to load the model weights."),ooe.forEach(t),qGr=i(_6),T(Hw.$$.fragment,_6),_6.forEach(t),NGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Fx.$$.fragment,si),jGr=i(si),QEe=n(si,"P",{});var Fxt=s(QEe);DGr=r(Fxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fxt.forEach(t),GGr=i(si),En=n(si,"P",{});var b6=s(En);OGr=r(b6,"The model class to instantiate is selected based on the "),HEe=n(b6,"CODE",{});var Txt=s(HEe);VGr=r(Txt,"model_type"),Txt.forEach(t),XGr=r(b6,` property of the config object (either
passed as an argument or loaded from `),UEe=n(b6,"CODE",{});var Mxt=s(UEe);zGr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),WGr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(b6,"CODE",{});var Ext=s(JEe);QGr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),HGr=r(b6,":"),b6.forEach(t),UGr=i(si),YEe=n(si,"UL",{});var Cxt=s(YEe);Uw=n(Cxt,"LI",{});var Hqe=s(Uw);KEe=n(Hqe,"STRONG",{});var wxt=s(KEe);JGr=r(wxt,"bert"),wxt.forEach(t),YGr=r(Hqe," \u2014 "),aZ=n(Hqe,"A",{href:!0});var Axt=s(aZ);KGr=r(Axt,"FlaxBertForNextSentencePrediction"),Axt.forEach(t),ZGr=r(Hqe," (BERT model)"),Hqe.forEach(t),Cxt.forEach(t),eOr=i(si),T(Jw.$$.fragment,si),si.forEach(t),ni.forEach(t),Yje=i(f),nf=n(f,"H2",{class:!0});var aOe=s(nf);Yw=n(aOe,"A",{id:!0,class:!0,href:!0});var yxt=s(Yw);ZEe=n(yxt,"SPAN",{});var Lxt=s(ZEe);T(Tx.$$.fragment,Lxt),Lxt.forEach(t),yxt.forEach(t),oOr=i(aOe),eCe=n(aOe,"SPAN",{});var xxt=s(eCe);rOr=r(xxt,"FlaxAutoModelForImageClassification"),xxt.forEach(t),aOe.forEach(t),Kje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Mx.$$.fragment,li),tOr=i(li),sf=n(li,"P",{});var roe=s(sf);aOr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nZ=n(roe,"A",{href:!0});var $xt=s(nZ);nOr=r($xt,"from_pretrained()"),$xt.forEach(t),sOr=r(roe," class method or the "),sZ=n(roe,"A",{href:!0});var kxt=s(sZ);lOr=r(kxt,"from_config()"),kxt.forEach(t),iOr=r(roe,` class
method.`),roe.forEach(t),dOr=i(li),Ex=n(li,"P",{});var nOe=s(Ex);cOr=r(nOe,"This class cannot be instantiated directly using "),oCe=n(nOe,"CODE",{});var Sxt=s(oCe);fOr=r(Sxt,"__init__()"),Sxt.forEach(t),mOr=r(nOe," (throws an error)."),nOe.forEach(t),gOr=i(li),Yt=n(li,"DIV",{class:!0});var v6=s(Yt);T(Cx.$$.fragment,v6),hOr=i(v6),rCe=n(v6,"P",{});var Rxt=s(rCe);pOr=r(Rxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rxt.forEach(t),uOr=i(v6),lf=n(v6,"P",{});var toe=s(lf);_Or=r(toe,`Note:
Loading a model from its configuration file does `),tCe=n(toe,"STRONG",{});var Pxt=s(tCe);bOr=r(Pxt,"not"),Pxt.forEach(t),vOr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(toe,"A",{href:!0});var Bxt=s(lZ);FOr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),TOr=r(toe," to load the model weights."),toe.forEach(t),MOr=i(v6),T(Kw.$$.fragment,v6),v6.forEach(t),EOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(wx.$$.fragment,ii),COr=i(ii),aCe=n(ii,"P",{});var Ixt=s(aCe);wOr=r(Ixt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ixt.forEach(t),AOr=i(ii),Cn=n(ii,"P",{});var F6=s(Cn);yOr=r(F6,"The model class to instantiate is selected based on the "),nCe=n(F6,"CODE",{});var qxt=s(nCe);LOr=r(qxt,"model_type"),qxt.forEach(t),xOr=r(F6,` property of the config object (either
passed as an argument or loaded from `),sCe=n(F6,"CODE",{});var Nxt=s(sCe);$Or=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),kOr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(F6,"CODE",{});var jxt=s(lCe);SOr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),ROr=r(F6,":"),F6.forEach(t),POr=i(ii),Ax=n(ii,"UL",{});var sOe=s(Ax);Zw=n(sOe,"LI",{});var Uqe=s(Zw);iCe=n(Uqe,"STRONG",{});var Dxt=s(iCe);BOr=r(Dxt,"beit"),Dxt.forEach(t),IOr=r(Uqe," \u2014 "),iZ=n(Uqe,"A",{href:!0});var Gxt=s(iZ);qOr=r(Gxt,"FlaxBeitForImageClassification"),Gxt.forEach(t),NOr=r(Uqe," (BEiT model)"),Uqe.forEach(t),jOr=i(sOe),e0=n(sOe,"LI",{});var Jqe=s(e0);dCe=n(Jqe,"STRONG",{});var Oxt=s(dCe);DOr=r(Oxt,"vit"),Oxt.forEach(t),GOr=r(Jqe," \u2014 "),dZ=n(Jqe,"A",{href:!0});var Vxt=s(dZ);OOr=r(Vxt,"FlaxViTForImageClassification"),Vxt.forEach(t),VOr=r(Jqe," (ViT model)"),Jqe.forEach(t),sOe.forEach(t),XOr=i(ii),T(o0.$$.fragment,ii),ii.forEach(t),li.forEach(t),Zje=i(f),df=n(f,"H2",{class:!0});var lOe=s(df);r0=n(lOe,"A",{id:!0,class:!0,href:!0});var Xxt=s(r0);cCe=n(Xxt,"SPAN",{});var zxt=s(cCe);T(yx.$$.fragment,zxt),zxt.forEach(t),Xxt.forEach(t),zOr=i(lOe),fCe=n(lOe,"SPAN",{});var Wxt=s(fCe);WOr=r(Wxt,"FlaxAutoModelForVision2Seq"),Wxt.forEach(t),lOe.forEach(t),eDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Lx.$$.fragment,di),QOr=i(di),cf=n(di,"P",{});var aoe=s(cf);HOr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cZ=n(aoe,"A",{href:!0});var Qxt=s(cZ);UOr=r(Qxt,"from_pretrained()"),Qxt.forEach(t),JOr=r(aoe," class method or the "),fZ=n(aoe,"A",{href:!0});var Hxt=s(fZ);YOr=r(Hxt,"from_config()"),Hxt.forEach(t),KOr=r(aoe,` class
method.`),aoe.forEach(t),ZOr=i(di),xx=n(di,"P",{});var iOe=s(xx);eVr=r(iOe,"This class cannot be instantiated directly using "),mCe=n(iOe,"CODE",{});var Uxt=s(mCe);oVr=r(Uxt,"__init__()"),Uxt.forEach(t),rVr=r(iOe," (throws an error)."),iOe.forEach(t),tVr=i(di),Kt=n(di,"DIV",{class:!0});var T6=s(Kt);T($x.$$.fragment,T6),aVr=i(T6),gCe=n(T6,"P",{});var Jxt=s(gCe);nVr=r(Jxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jxt.forEach(t),sVr=i(T6),ff=n(T6,"P",{});var noe=s(ff);lVr=r(noe,`Note:
Loading a model from its configuration file does `),hCe=n(noe,"STRONG",{});var Yxt=s(hCe);iVr=r(Yxt,"not"),Yxt.forEach(t),dVr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(noe,"A",{href:!0});var Kxt=s(mZ);cVr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),fVr=r(noe," to load the model weights."),noe.forEach(t),mVr=i(T6),T(t0.$$.fragment,T6),T6.forEach(t),gVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(kx.$$.fragment,ci),hVr=i(ci),pCe=n(ci,"P",{});var Zxt=s(pCe);pVr=r(Zxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zxt.forEach(t),uVr=i(ci),wn=n(ci,"P",{});var M6=s(wn);_Vr=r(M6,"The model class to instantiate is selected based on the "),uCe=n(M6,"CODE",{});var e$t=s(uCe);bVr=r(e$t,"model_type"),e$t.forEach(t),vVr=r(M6,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(M6,"CODE",{});var o$t=s(_Ce);FVr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),TVr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(M6,"CODE",{});var r$t=s(bCe);MVr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),EVr=r(M6,":"),M6.forEach(t),CVr=i(ci),vCe=n(ci,"UL",{});var t$t=s(vCe);a0=n(t$t,"LI",{});var Yqe=s(a0);FCe=n(Yqe,"STRONG",{});var a$t=s(FCe);wVr=r(a$t,"vision-encoder-decoder"),a$t.forEach(t),AVr=r(Yqe," \u2014 "),gZ=n(Yqe,"A",{href:!0});var n$t=s(gZ);yVr=r(n$t,"FlaxVisionEncoderDecoderModel"),n$t.forEach(t),LVr=r(Yqe," (Vision Encoder decoder model)"),Yqe.forEach(t),t$t.forEach(t),xVr=i(ci),T(n0.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(Y$,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(K$,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertConfig"),c(Z$,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartConfig"),c(ek,"href","/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitConfig"),c(ok,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertConfig"),c(rk,"href","/docs/transformers/pr_17213/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(tk,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ak,"href","/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(nk,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(sk,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(lk,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertConfig"),c(ik,"href","/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineConfig"),c(dk,"href","/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPConfig"),c(ck,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertConfig"),c(fk,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextConfig"),c(mk,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLConfig"),c(gk,"href","/docs/transformers/pr_17213/en/model_doc/cvt#transformers.CvtConfig"),c(hk,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(pk,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(uk,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(_k,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaConfig"),c(bk,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(vk,"href","/docs/transformers/pr_17213/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Fk,"href","/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTConfig"),c(Tk,"href","/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrConfig"),c(Mk,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Ek,"href","/docs/transformers/pr_17213/en/model_doc/dpr#transformers.DPRConfig"),c(Ck,"href","/docs/transformers/pr_17213/en/model_doc/dpt#transformers.DPTConfig"),c(wk,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraConfig"),c(Ak,"href","/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(yk,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Lk,"href","/docs/transformers/pr_17213/en/model_doc/flava#transformers.FlavaConfig"),c(xk,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetConfig"),c($k,"href","/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTConfig"),c(kk,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelConfig"),c(Sk,"href","/docs/transformers/pr_17213/en/model_doc/glpn#transformers.GLPNConfig"),c(Rk,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Config"),c(Pk,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Bk,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Ik,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJConfig"),c(qk,"href","/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertConfig"),c(Nk,"href","/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertConfig"),c(jk,"href","/docs/transformers/pr_17213/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Dk,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Gk,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ok,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Vk,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDConfig"),c(Xk,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerConfig"),c(zk,"href","/docs/transformers/pr_17213/en/model_doc/luke#transformers.LukeConfig"),c(Wk,"href","/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertConfig"),c(Qk,"href","/docs/transformers/pr_17213/en/model_doc/m2m_100#transformers.M2M100Config"),c(Hk,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianConfig"),c(Uk,"href","/docs/transformers/pr_17213/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Jk,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartConfig"),c(Yk,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Kk,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Zk,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetConfig"),c(eS,"href","/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Config"),c(oS,"href","/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rS,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tS,"href","/docs/transformers/pr_17213/en/model_doc/opt#transformers.OPTConfig"),c(aS,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusConfig"),c(nS,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverConfig"),c(sS,"href","/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartConfig"),c(lS,"href","/docs/transformers/pr_17213/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(iS,"href","/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(dS,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(cS,"href","/docs/transformers/pr_17213/en/model_doc/rag#transformers.RagConfig"),c(fS,"href","/docs/transformers/pr_17213/en/model_doc/realm#transformers.RealmConfig"),c(mS,"href","/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerConfig"),c(gS,"href","/docs/transformers/pr_17213/en/model_doc/regnet#transformers.RegNetConfig"),c(hS,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertConfig"),c(pS,"href","/docs/transformers/pr_17213/en/model_doc/resnet#transformers.ResNetConfig"),c(uS,"href","/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertConfig"),c(_S,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaConfig"),c(bS,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerConfig"),c(vS,"href","/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerConfig"),c(FS,"href","/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWConfig"),c(TS,"href","/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDConfig"),c(MS,"href","/docs/transformers/pr_17213/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(ES,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(CS,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(wS,"href","/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterConfig"),c(AS,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(yS,"href","/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinConfig"),c(LS,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Config"),c(xS,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasConfig"),c($S,"href","/docs/transformers/pr_17213/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(kS,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(SS,"href","/docs/transformers/pr_17213/en/model_doc/trocr#transformers.TrOCRConfig"),c(RS,"href","/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(PS,"href","/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(BS,"href","/docs/transformers/pr_17213/en/model_doc/van#transformers.VanConfig"),c(IS,"href","/docs/transformers/pr_17213/en/model_doc/vilt#transformers.ViltConfig"),c(qS,"href","/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NS,"href","/docs/transformers/pr_17213/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(jS,"href","/docs/transformers/pr_17213/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(DS,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTConfig"),c(GS,"href","/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(OS,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VS,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(XS,"href","/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMConfig"),c(zS,"href","/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMConfig"),c(WS,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMConfig"),c(QS,"href","/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HS,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(US,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JS,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetConfig"),c(YS,"href","/docs/transformers/pr_17213/en/model_doc/yolos#transformers.YolosConfig"),c(KS,"href","/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(ZS,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(eR,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertTokenizer"),c(oR,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartTokenizer"),c(tR,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartTokenizerFast"),c(aR,"href","/docs/transformers/pr_17213/en/model_doc/barthez#transformers.BarthezTokenizer"),c(nR,"href","/docs/transformers/pr_17213/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(sR,"href","/docs/transformers/pr_17213/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(lR,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertTokenizer"),c(iR,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertTokenizerFast"),c(dR,"href","/docs/transformers/pr_17213/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(cR,"href","/docs/transformers/pr_17213/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(fR,"href","/docs/transformers/pr_17213/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(mR,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(gR,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(hR,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pR,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uR,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(_R,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(bR,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(vR,"href","/docs/transformers/pr_17213/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(FR,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertTokenizer"),c(TR,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(MR,"href","/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineTokenizer"),c(ER,"href","/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPTokenizer"),c(CR,"href","/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wR,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(AR,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_17213/en/model_doc/cpm#transformers.CpmTokenizer"),c(LR,"href","/docs/transformers/pr_17213/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(xR,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLTokenizer"),c($R,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kR,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SR,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaTokenizer"),c(RR,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(BR,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(IR,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(qR,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(NR,"href","/docs/transformers/pr_17213/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(jR,"href","/docs/transformers/pr_17213/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(DR,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraTokenizer"),c(GR,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(OR,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(VR,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetTokenizer"),c(XR,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(zR,"href","/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WR,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QR,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(HR,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UR,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JR,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/pr_17213/en/model_doc/herbert#transformers.HerbertTokenizer"),c(rP,"href","/docs/transformers/pr_17213/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(tP,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aP,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nP,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sP,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(lP,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(iP,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(dP,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(cP,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(fP,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(mP,"href","/docs/transformers/pr_17213/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(gP,"href","/docs/transformers/pr_17213/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(hP,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDTokenizer"),c(pP,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDTokenizerFast"),c(uP,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerTokenizer"),c(_P,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(bP,"href","/docs/transformers/pr_17213/en/model_doc/luke#transformers.LukeTokenizer"),c(vP,"href","/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(FP,"href","/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(TP,"href","/docs/transformers/pr_17213/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(MP,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianTokenizer"),c(EP,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartTokenizer"),c(CP,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(wP,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(AP,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(yP,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertTokenizer"),c(LP,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertTokenizerFast"),c(xP,"href","/docs/transformers/pr_17213/en/model_doc/mluke#transformers.MLukeTokenizer"),c($P,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(kP,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(RP,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(PP,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Tokenizer"),c(BP,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5TokenizerFast"),c(IP,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertTokenizer"),c(qP,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(jP,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(DP,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GP,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(OP,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(VP,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(XP,"href","/docs/transformers/pr_17213/en/model_doc/phobert#transformers.PhobertTokenizer"),c(zP,"href","/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartTokenizer"),c(WP,"href","/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(QP,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertTokenizer"),c(HP,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17213/en/model_doc/rag#transformers.RagTokenizer"),c(JP,"href","/docs/transformers/pr_17213/en/model_doc/realm#transformers.RealmTokenizer"),c(YP,"href","/docs/transformers/pr_17213/en/model_doc/realm#transformers.RealmTokenizerFast"),c(KP,"href","/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerTokenizer"),c(ZP,"href","/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(eB,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertTokenizer"),c(oB,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(tB,"href","/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nB,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sB,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(lB,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(iB,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(dB,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(cB,"href","/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterTokenizer"),c(fB,"href","/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(mB,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(gB,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Tokenizer"),c(pB,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5TokenizerFast"),c(uB,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasTokenizer"),c(_B,"href","/docs/transformers/pr_17213/en/model_doc/tapex#transformers.TapexTokenizer"),c(bB,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(vB,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertTokenizer"),c(FB,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MB,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EB,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(CB,"href","/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMTokenizer"),c(wB,"href","/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(AB,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMTokenizer"),c(yB,"href","/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(LB,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(xB,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c($B,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(RB,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(PB,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertTokenizer"),c(BB,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(IB,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qB,"href","/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17213/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17213/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17213/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_17213/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17213/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17213/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cI,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fI,"href","/docs/transformers/pr_17213/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(mI,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(gI,"href","/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPProcessor"),c(hI,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(pI,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(uI,"href","/docs/transformers/pr_17213/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(_I,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bI,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(FI,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(TI,"href","/docs/transformers/pr_17213/en/model_doc/trocr#transformers.TrOCRProcessor"),c(MI,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_17213/en/model_doc/vilt#transformers.ViltProcessor"),c(wI,"href","/docs/transformers/pr_17213/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(AI,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yI,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoModel"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(xI,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($I,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kI,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SI,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertModel"),c(RI,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartModel"),c(PI,"href","/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitModel"),c(BI,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertModel"),c(II,"href","/docs/transformers/pr_17213/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(qI,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdModel"),c(NI,"href","/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(jI,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(DI,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(GI,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertModel"),c(OI,"href","/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineModel"),c(VI,"href","/docs/transformers/pr_17213/en/model_doc/clip#transformers.CLIPModel"),c(XI,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertModel"),c(zI,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextModel"),c(WI,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLModel"),c(QI,"href","/docs/transformers/pr_17213/en/model_doc/cvt#transformers.CvtModel"),c(HI,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(UI,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(JI,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(YI,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaModel"),c(KI,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(ZI,"href","/docs/transformers/pr_17213/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(eq,"href","/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTModel"),c(oq,"href","/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrModel"),c(rq,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertModel"),c(tq,"href","/docs/transformers/pr_17213/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(aq,"href","/docs/transformers/pr_17213/en/model_doc/dpt#transformers.DPTModel"),c(nq,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraModel"),c(sq,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertModel"),c(lq,"href","/docs/transformers/pr_17213/en/model_doc/flava#transformers.FlavaModel"),c(iq,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetModel"),c(dq,"href","/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTModel"),c(cq,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelModel"),c(fq,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelBaseModel"),c(mq,"href","/docs/transformers/pr_17213/en/model_doc/glpn#transformers.GLPNModel"),c(gq,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2Model"),c(hq,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(pq,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(uq,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJModel"),c(_q,"href","/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertModel"),c(bq,"href","/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertModel"),c(vq,"href","/docs/transformers/pr_17213/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Fq,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Tq,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Mq,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Eq,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDModel"),c(Cq,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerModel"),c(wq,"href","/docs/transformers/pr_17213/en/model_doc/luke#transformers.LukeModel"),c(Aq,"href","/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertModel"),c(yq,"href","/docs/transformers/pr_17213/en/model_doc/m2m_100#transformers.M2M100Model"),c(Lq,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianModel"),c(xq,"href","/docs/transformers/pr_17213/en/model_doc/maskformer#transformers.MaskFormerModel"),c($q,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartModel"),c(kq,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Sq,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Rq,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetModel"),c(Pq,"href","/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5Model"),c(Bq,"href","/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Iq,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(qq,"href","/docs/transformers/pr_17213/en/model_doc/opt#transformers.OPTModel"),c(Nq,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusModel"),c(jq,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverModel"),c(Dq,"href","/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartModel"),c(Gq,"href","/docs/transformers/pr_17213/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Oq,"href","/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Vq,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Xq,"href","/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerModel"),c(zq,"href","/docs/transformers/pr_17213/en/model_doc/regnet#transformers.RegNetModel"),c(Wq,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertModel"),c(Qq,"href","/docs/transformers/pr_17213/en/model_doc/resnet#transformers.ResNetModel"),c(Hq,"href","/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertModel"),c(Uq,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaModel"),c(Jq,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerModel"),c(Yq,"href","/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerModel"),c(Kq,"href","/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWModel"),c(Zq,"href","/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDModel"),c(eN,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oN,"href","/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterModel"),c(rN,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tN,"href","/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinModel"),c(aN,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5Model"),c(nN,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasModel"),c(sN,"href","/docs/transformers/pr_17213/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(lN,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(iN,"href","/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechModel"),c(dN,"href","/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(cN,"href","/docs/transformers/pr_17213/en/model_doc/van#transformers.VanModel"),c(fN,"href","/docs/transformers/pr_17213/en/model_doc/vilt#transformers.ViltModel"),c(mN,"href","/docs/transformers/pr_17213/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(gN,"href","/docs/transformers/pr_17213/en/model_doc/visual_bert#transformers.VisualBertModel"),c(hN,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTModel"),c(pN,"href","/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(uN,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(_N,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(bN,"href","/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMModel"),c(vN,"href","/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMModel"),c(FN,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMModel"),c(TN,"href","/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(MN,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(EN,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(CN,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetModel"),c(wN,"href","/docs/transformers/pr_17213/en/model_doc/yolos#transformers.YolosModel"),c(AN,"href","/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t_,"id","transformers.AutoModelForPreTraining"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(yN,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LN,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xN,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($N,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kN,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SN,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForPreTraining"),c(RN,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(PN,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BN,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(IN,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qN,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(NN,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jN,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(DN,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForPreTraining"),c(GN,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ON,"href","/docs/transformers/pr_17213/en/model_doc/flava#transformers.FlavaForPreTraining"),c(VN,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForPreTraining"),c(XN,"href","/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zN,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(WN,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(QN,"href","/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(UN,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(JN,"href","/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(YN,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(KN,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(ZN,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ej,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oj,"href","/docs/transformers/pr_17213/en/model_doc/retribert#transformers.RetriBertModel"),c(rj,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tj,"href","/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(aj,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nj,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lj,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ij,"href","/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(dj,"href","/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(cj,"href","/docs/transformers/pr_17213/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(mj,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(gj,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(hj,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pj,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uj,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_j,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForCausalLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(bj,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vj,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fj,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tj,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForCausalLM"),c(Mj,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17213/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Cj,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(wj,"href","/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Aj,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(yj,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Lj,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(xj,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($j,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(kj,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Sj,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Rj,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Pj,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Bj,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Ij,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianForCausalLM"),c(qj,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Nj,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jj,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Dj,"href","/docs/transformers/pr_17213/en/model_doc/opt#transformers.OPTForCausalLM"),c(Gj,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Oj,"href","/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Vj,"href","/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Xj,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(zj,"href","/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Wj,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Qj,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Hj,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Uj,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Jj,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Yj,"href","/docs/transformers/pr_17213/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Kj,"href","/docs/transformers/pr_17213/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Zj,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eD,"href","/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oD,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rD,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tD,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForMaskedLM"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(aD,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nD,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sD,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lD,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(fD,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hD,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pD,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uD,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bD,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vD,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(FD,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(TD,"href","/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ED,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CD,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LD,"href","/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xD,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($D,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SD,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PD,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(BD,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qD,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ND,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jD,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DD,"href","/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForSeq2SeqLM"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(GD,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UD,"href","/docs/transformers/pr_17213/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17213/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.MarianMTModel"),c(ZD,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17213/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17213/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17213/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForSequenceClassification"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(sG,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lG,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iG,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dG,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17213/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForMultipleChoice"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(rO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($O,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_v,"id","transformers.AutoModelForNextSentencePrediction"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(PO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(NO,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jO,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DO,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GO,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForTokenClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(OO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WO,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HO,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JO,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KO,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eV,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rV,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aV,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nV,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sV,"href","/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iV,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dV,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cV,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fV,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mV,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hV,"href","/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pV,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_V,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bV,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vV,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(FV,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(TV,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(MV,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(EV,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(CV,"href","/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.AutoModelForQuestionAnswering"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(wV,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17213/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17213/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(OV,"href","/docs/transformers/pr_17213/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17213/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17213/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17213/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17213/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17213/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17213/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17213/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17213/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cX,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gX,"href","/docs/transformers/pr_17213/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForTableQuestionAnswering"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(hX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForImageClassification"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(bX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitForImageClassification"),c(MX,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EX,"href","/docs/transformers/pr_17213/en/model_doc/cvt#transformers.CvtForImageClassification"),c(CX,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wX,"href","/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AX,"href","/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yX,"href","/docs/transformers/pr_17213/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(LX,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xX,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($X,"href","/docs/transformers/pr_17213/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kX,"href","/docs/transformers/pr_17213/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SX,"href","/docs/transformers/pr_17213/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RX,"href","/docs/transformers/pr_17213/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PX,"href","/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BX,"href","/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinForImageClassification"),c(IX,"href","/docs/transformers/pr_17213/en/model_doc/van#transformers.VanForImageClassification"),c(qX,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForVision2Seq"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(NX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForAudioClassification"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(OX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForAudioFrameClassification"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(ez,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(az,"href","/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(nz,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(sz,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(lz,"href","/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForCTC"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(iz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(mz,"href","/docs/transformers/pr_17213/en/model_doc/hubert#transformers.HubertForCTC"),c(gz,"href","/docs/transformers/pr_17213/en/model_doc/sew#transformers.SEWForCTC"),c(hz,"href","/docs/transformers/pr_17213/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pz,"href","/docs/transformers/pr_17213/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(uz,"href","/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(_z,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bz,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vz,"href","/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_17213/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Cz,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForAudioXVector"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(wz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xz,"href","/docs/transformers/pr_17213/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($z,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kz,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Sz,"href","/docs/transformers/pr_17213/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForMaskedImageModeling"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17213/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qz,"href","/docs/transformers/pr_17213/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Nz,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForObjectDetection"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(jz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Vz,"href","/docs/transformers/pr_17213/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForImageSegmentation"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17213/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForSemanticSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17213/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Kz,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Zz,"href","/docs/transformers/pr_17213/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(eW,"href","/docs/transformers/pr_17213/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.AutoModelForInstanceSegmentation"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(oW,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_17213/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModel"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(nW,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertModel"),c(dW,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.TFBartModel"),c(cW,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertModel"),c(fW,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(mW,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(gW,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertModel"),c(hW,"href","/docs/transformers/pr_17213/en/model_doc/clip#transformers.TFCLIPModel"),c(pW,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertModel"),c(uW,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.TFConvNextModel"),c(_W,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.TFCTRLModel"),c(bW,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(vW,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaModel"),c(FW,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(TW,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(MW,"href","/docs/transformers/pr_17213/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(EW,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraModel"),c(CW,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(wW,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelModel"),c(AW,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yW,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LW,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.TFGPTJModel"),c(xW,"href","/docs/transformers/pr_17213/en/model_doc/hubert#transformers.TFHubertModel"),c($W,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(kW,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.TFLEDModel"),c(SW,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerModel"),c(RW,"href","/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.TFLxmertModel"),c(PW,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.TFMarianModel"),c(BW,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.TFMBartModel"),c(IW,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qW,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetModel"),c(NW,"href","/docs/transformers/pr_17213/en/model_doc/mt5#transformers.TFMT5Model"),c(jW,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(DW,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GW,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertModel"),c(OW,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaModel"),c(VW,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerModel"),c(XW,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(zW,"href","/docs/transformers/pr_17213/en/model_doc/swin#transformers.TFSwinModel"),c(WW,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.TFT5Model"),c(QW,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasModel"),c(HW,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(UW,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.TFViTModel"),c(JW,"href","/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(YW,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(KW,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMModel"),c(ZW,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(eQ,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.TFAutoModelForPreTraining"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(oQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(nQ,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sQ,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(fQ,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(gQ,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hQ,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17213/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(uQ,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(_Q,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17213/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(CQ,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForCausalLM"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(SQ,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PQ,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(BQ,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(qQ,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(NQ,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(jQ,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForImageClassification"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17213/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(WQ,"href","/docs/transformers/pr_17213/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(QQ,"href","/docs/transformers/pr_17213/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(HQ,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForMaskedLM"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(eH,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(oH,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(rH,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(tH,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(aH,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(sH,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lH,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(iH,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dH,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(cH,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(fH,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mH,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hH,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(pH,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(uH,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_H,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(bH,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MH,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(EH,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(CH,"href","/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(wH,"href","/docs/transformers/pr_17213/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.TFMarianMTModel"),c(yH,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_17213/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(xH,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForSequenceClassification"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(kH,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17213/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17213/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17213/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.TFAutoModelForMultipleChoice"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(sU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(cU,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(fU,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(AU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c($U,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(kU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_17213/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForTokenClassification"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(BU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(jU,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(DU,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(GU,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(OU,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(VU,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(XU,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(zU,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(WU,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(QU,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(HU,"href","/docs/transformers/pr_17213/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(UU,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(JU,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(KU,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForQuestionAnswering"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(aJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_17213/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17213/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17213/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17213/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17213/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(uJ,"href","/docs/transformers/pr_17213/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17213/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17213/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17213/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17213/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17213/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(wJ,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17213/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForVision2Seq"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17213/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModel"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertModel"),c(jJ,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartModel"),c(DJ,"href","/docs/transformers/pr_17213/en/model_doc/beit#transformers.FlaxBeitModel"),c(GJ,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertModel"),c(OJ,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(VJ,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(XJ,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(zJ,"href","/docs/transformers/pr_17213/en/model_doc/clip#transformers.FlaxCLIPModel"),c(WJ,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(QJ,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraModel"),c(HJ,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(UJ,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(JJ,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(YJ,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.FlaxMarianModel"),c(KJ,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartModel"),c(ZJ,"href","/docs/transformers/pr_17213/en/model_doc/mt5#transformers.FlaxMT5Model"),c(eY,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(oY,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(rY,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(tY,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.FlaxT5Model"),c(aY,"href","/docs/transformers/pr_17213/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(nY,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.FlaxViTModel"),c(sY,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(lY,"href","/docs/transformers/pr_17213/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(iY,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForCausalLM"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(gY,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(hY,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(pY,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(uY,"href","/docs/transformers/pr_17213/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(_Y,"href","/docs/transformers/pr_17213/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(bY,"href","/docs/transformers/pr_17213/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(vY,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(FY,"href","/docs/transformers/pr_17213/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForPreTraining"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(wY,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(yY,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(LY,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(xY,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17213/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SY,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RY,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17213/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(BY,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForMaskedLM"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(DY,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(OY,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(VY,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(zY,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QY,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HY,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(UY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17213/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17213/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(rK,"href","/docs/transformers/pr_17213/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tK,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17213/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17213/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17213/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(lK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(FK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17213/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17213/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ww,"id","transformers.FlaxAutoModelForTokenClassification"),c(ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ww,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(RK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(qK,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(NK,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(jK,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(DK,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(GK,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(OK,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(VK,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(XK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/pr_17213/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(UK,"href","/docs/transformers/pr_17213/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17213/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(YK,"href","/docs/transformers/pr_17213/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17213/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17213/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17213/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17213/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yw,"id","transformers.FlaxAutoModelForImageClassification"),c(Yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yw,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17213/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(dZ,"href","/docs/transformers/pr_17213/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForVision2Seq"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(cZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_17213/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_17213/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,E6),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,C6),e(We,Ln),e(We,xn),e(xn,w6),e(We,pi),e(We,$n),e($n,A6),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,z$),e(Ae,_i),e(_i,W$),e(Ae,Q$),b(f,Eo,_),b(f,wa,_),e(wa,H$),e(wa,bf),e(bf,U$),e(wa,dOe),b(f,Kqe,_),b(f,bi,_),e(bi,vf),e(vf,soe),M(y6,soe,null),e(bi,cOe),e(bi,loe),e(loe,fOe),b(f,Zqe,_),b(f,kn,_),e(kn,mOe),e(kn,ioe),e(ioe,gOe),e(kn,hOe),e(kn,doe),e(doe,pOe),e(kn,uOe),b(f,eNe,_),M(L6,f,_),b(f,oNe,_),b(f,J$,_),e(J$,_Oe),b(f,rNe,_),M(Ff,f,_),b(f,tNe,_),b(f,vi,_),e(vi,Tf),e(Tf,coe),M(x6,coe,null),e(vi,bOe),e(vi,foe),e(foe,vOe),b(f,aNe,_),b(f,Co,_),M($6,Co,null),e(Co,FOe),e(Co,k6),e(k6,TOe),e(k6,Y$),e(Y$,MOe),e(k6,EOe),e(Co,COe),e(Co,S6),e(S6,wOe),e(S6,moe),e(moe,AOe),e(S6,yOe),e(Co,LOe),e(Co,Er),M(R6,Er,null),e(Er,xOe),e(Er,goe),e(goe,$Oe),e(Er,kOe),e(Er,Fi),e(Fi,SOe),e(Fi,hoe),e(hoe,ROe),e(Fi,POe),e(Fi,poe),e(poe,BOe),e(Fi,IOe),e(Er,qOe),e(Er,A),e(A,Mf),e(Mf,uoe),e(uoe,NOe),e(Mf,jOe),e(Mf,K$),e(K$,DOe),e(Mf,GOe),e(A,OOe),e(A,Ef),e(Ef,_oe),e(_oe,VOe),e(Ef,XOe),e(Ef,Z$),e(Z$,zOe),e(Ef,WOe),e(A,QOe),e(A,Cf),e(Cf,boe),e(boe,HOe),e(Cf,UOe),e(Cf,ek),e(ek,JOe),e(Cf,YOe),e(A,KOe),e(A,wf),e(wf,voe),e(voe,ZOe),e(wf,eVe),e(wf,ok),e(ok,oVe),e(wf,rVe),e(A,tVe),e(A,Af),e(Af,Foe),e(Foe,aVe),e(Af,nVe),e(Af,rk),e(rk,sVe),e(Af,lVe),e(A,iVe),e(A,yf),e(yf,Toe),e(Toe,dVe),e(yf,cVe),e(yf,tk),e(tk,fVe),e(yf,mVe),e(A,gVe),e(A,Lf),e(Lf,Moe),e(Moe,hVe),e(Lf,pVe),e(Lf,ak),e(ak,uVe),e(Lf,_Ve),e(A,bVe),e(A,xf),e(xf,Eoe),e(Eoe,vVe),e(xf,FVe),e(xf,nk),e(nk,TVe),e(xf,MVe),e(A,EVe),e(A,$f),e($f,Coe),e(Coe,CVe),e($f,wVe),e($f,sk),e(sk,AVe),e($f,yVe),e(A,LVe),e(A,kf),e(kf,woe),e(woe,xVe),e(kf,$Ve),e(kf,lk),e(lk,kVe),e(kf,SVe),e(A,RVe),e(A,Sf),e(Sf,Aoe),e(Aoe,PVe),e(Sf,BVe),e(Sf,ik),e(ik,IVe),e(Sf,qVe),e(A,NVe),e(A,Rf),e(Rf,yoe),e(yoe,jVe),e(Rf,DVe),e(Rf,dk),e(dk,GVe),e(Rf,OVe),e(A,VVe),e(A,Pf),e(Pf,Loe),e(Loe,XVe),e(Pf,zVe),e(Pf,ck),e(ck,WVe),e(Pf,QVe),e(A,HVe),e(A,Bf),e(Bf,xoe),e(xoe,UVe),e(Bf,JVe),e(Bf,fk),e(fk,YVe),e(Bf,KVe),e(A,ZVe),e(A,If),e(If,$oe),e($oe,eXe),e(If,oXe),e(If,mk),e(mk,rXe),e(If,tXe),e(A,aXe),e(A,qf),e(qf,koe),e(koe,nXe),e(qf,sXe),e(qf,gk),e(gk,lXe),e(qf,iXe),e(A,dXe),e(A,Nf),e(Nf,Soe),e(Soe,cXe),e(Nf,fXe),e(Nf,hk),e(hk,mXe),e(Nf,gXe),e(A,hXe),e(A,jf),e(jf,Roe),e(Roe,pXe),e(jf,uXe),e(jf,pk),e(pk,_Xe),e(jf,bXe),e(A,vXe),e(A,Df),e(Df,Poe),e(Poe,FXe),e(Df,TXe),e(Df,uk),e(uk,MXe),e(Df,EXe),e(A,CXe),e(A,Gf),e(Gf,Boe),e(Boe,wXe),e(Gf,AXe),e(Gf,_k),e(_k,yXe),e(Gf,LXe),e(A,xXe),e(A,Of),e(Of,Ioe),e(Ioe,$Xe),e(Of,kXe),e(Of,bk),e(bk,SXe),e(Of,RXe),e(A,PXe),e(A,Vf),e(Vf,qoe),e(qoe,BXe),e(Vf,IXe),e(Vf,vk),e(vk,qXe),e(Vf,NXe),e(A,jXe),e(A,Xf),e(Xf,Noe),e(Noe,DXe),e(Xf,GXe),e(Xf,Fk),e(Fk,OXe),e(Xf,VXe),e(A,XXe),e(A,zf),e(zf,joe),e(joe,zXe),e(zf,WXe),e(zf,Tk),e(Tk,QXe),e(zf,HXe),e(A,UXe),e(A,Wf),e(Wf,Doe),e(Doe,JXe),e(Wf,YXe),e(Wf,Mk),e(Mk,KXe),e(Wf,ZXe),e(A,eze),e(A,Qf),e(Qf,Goe),e(Goe,oze),e(Qf,rze),e(Qf,Ek),e(Ek,tze),e(Qf,aze),e(A,nze),e(A,Hf),e(Hf,Ooe),e(Ooe,sze),e(Hf,lze),e(Hf,Ck),e(Ck,ize),e(Hf,dze),e(A,cze),e(A,Uf),e(Uf,Voe),e(Voe,fze),e(Uf,mze),e(Uf,wk),e(wk,gze),e(Uf,hze),e(A,pze),e(A,Jf),e(Jf,Xoe),e(Xoe,uze),e(Jf,_ze),e(Jf,Ak),e(Ak,bze),e(Jf,vze),e(A,Fze),e(A,Yf),e(Yf,zoe),e(zoe,Tze),e(Yf,Mze),e(Yf,yk),e(yk,Eze),e(Yf,Cze),e(A,wze),e(A,Kf),e(Kf,Woe),e(Woe,Aze),e(Kf,yze),e(Kf,Lk),e(Lk,Lze),e(Kf,xze),e(A,$ze),e(A,Zf),e(Zf,Qoe),e(Qoe,kze),e(Zf,Sze),e(Zf,xk),e(xk,Rze),e(Zf,Pze),e(A,Bze),e(A,em),e(em,Hoe),e(Hoe,Ize),e(em,qze),e(em,$k),e($k,Nze),e(em,jze),e(A,Dze),e(A,om),e(om,Uoe),e(Uoe,Gze),e(om,Oze),e(om,kk),e(kk,Vze),e(om,Xze),e(A,zze),e(A,rm),e(rm,Joe),e(Joe,Wze),e(rm,Qze),e(rm,Sk),e(Sk,Hze),e(rm,Uze),e(A,Jze),e(A,tm),e(tm,Yoe),e(Yoe,Yze),e(tm,Kze),e(tm,Rk),e(Rk,Zze),e(tm,eWe),e(A,oWe),e(A,am),e(am,Koe),e(Koe,rWe),e(am,tWe),e(am,Pk),e(Pk,aWe),e(am,nWe),e(A,sWe),e(A,nm),e(nm,Zoe),e(Zoe,lWe),e(nm,iWe),e(nm,Bk),e(Bk,dWe),e(nm,cWe),e(A,fWe),e(A,sm),e(sm,ere),e(ere,mWe),e(sm,gWe),e(sm,Ik),e(Ik,hWe),e(sm,pWe),e(A,uWe),e(A,lm),e(lm,ore),e(ore,_We),e(lm,bWe),e(lm,qk),e(qk,vWe),e(lm,FWe),e(A,TWe),e(A,im),e(im,rre),e(rre,MWe),e(im,EWe),e(im,Nk),e(Nk,CWe),e(im,wWe),e(A,AWe),e(A,dm),e(dm,tre),e(tre,yWe),e(dm,LWe),e(dm,jk),e(jk,xWe),e(dm,$We),e(A,kWe),e(A,cm),e(cm,are),e(are,SWe),e(cm,RWe),e(cm,Dk),e(Dk,PWe),e(cm,BWe),e(A,IWe),e(A,fm),e(fm,nre),e(nre,qWe),e(fm,NWe),e(fm,Gk),e(Gk,jWe),e(fm,DWe),e(A,GWe),e(A,mm),e(mm,sre),e(sre,OWe),e(mm,VWe),e(mm,Ok),e(Ok,XWe),e(mm,zWe),e(A,WWe),e(A,gm),e(gm,lre),e(lre,QWe),e(gm,HWe),e(gm,Vk),e(Vk,UWe),e(gm,JWe),e(A,YWe),e(A,hm),e(hm,ire),e(ire,KWe),e(hm,ZWe),e(hm,Xk),e(Xk,eQe),e(hm,oQe),e(A,rQe),e(A,pm),e(pm,dre),e(dre,tQe),e(pm,aQe),e(pm,zk),e(zk,nQe),e(pm,sQe),e(A,lQe),e(A,um),e(um,cre),e(cre,iQe),e(um,dQe),e(um,Wk),e(Wk,cQe),e(um,fQe),e(A,mQe),e(A,_m),e(_m,fre),e(fre,gQe),e(_m,hQe),e(_m,Qk),e(Qk,pQe),e(_m,uQe),e(A,_Qe),e(A,bm),e(bm,mre),e(mre,bQe),e(bm,vQe),e(bm,Hk),e(Hk,FQe),e(bm,TQe),e(A,MQe),e(A,vm),e(vm,gre),e(gre,EQe),e(vm,CQe),e(vm,Uk),e(Uk,wQe),e(vm,AQe),e(A,yQe),e(A,Fm),e(Fm,hre),e(hre,LQe),e(Fm,xQe),e(Fm,Jk),e(Jk,$Qe),e(Fm,kQe),e(A,SQe),e(A,Tm),e(Tm,pre),e(pre,RQe),e(Tm,PQe),e(Tm,Yk),e(Yk,BQe),e(Tm,IQe),e(A,qQe),e(A,Mm),e(Mm,ure),e(ure,NQe),e(Mm,jQe),e(Mm,Kk),e(Kk,DQe),e(Mm,GQe),e(A,OQe),e(A,Em),e(Em,_re),e(_re,VQe),e(Em,XQe),e(Em,Zk),e(Zk,zQe),e(Em,WQe),e(A,QQe),e(A,Cm),e(Cm,bre),e(bre,HQe),e(Cm,UQe),e(Cm,eS),e(eS,JQe),e(Cm,YQe),e(A,KQe),e(A,wm),e(wm,vre),e(vre,ZQe),e(wm,eHe),e(wm,oS),e(oS,oHe),e(wm,rHe),e(A,tHe),e(A,Am),e(Am,Fre),e(Fre,aHe),e(Am,nHe),e(Am,rS),e(rS,sHe),e(Am,lHe),e(A,iHe),e(A,ym),e(ym,Tre),e(Tre,dHe),e(ym,cHe),e(ym,tS),e(tS,fHe),e(ym,mHe),e(A,gHe),e(A,Lm),e(Lm,Mre),e(Mre,hHe),e(Lm,pHe),e(Lm,aS),e(aS,uHe),e(Lm,_He),e(A,bHe),e(A,xm),e(xm,Ere),e(Ere,vHe),e(xm,FHe),e(xm,nS),e(nS,THe),e(xm,MHe),e(A,EHe),e(A,$m),e($m,Cre),e(Cre,CHe),e($m,wHe),e($m,sS),e(sS,AHe),e($m,yHe),e(A,LHe),e(A,km),e(km,wre),e(wre,xHe),e(km,$He),e(km,lS),e(lS,kHe),e(km,SHe),e(A,RHe),e(A,Sm),e(Sm,Are),e(Are,PHe),e(Sm,BHe),e(Sm,iS),e(iS,IHe),e(Sm,qHe),e(A,NHe),e(A,Rm),e(Rm,yre),e(yre,jHe),e(Rm,DHe),e(Rm,dS),e(dS,GHe),e(Rm,OHe),e(A,VHe),e(A,Pm),e(Pm,Lre),e(Lre,XHe),e(Pm,zHe),e(Pm,cS),e(cS,WHe),e(Pm,QHe),e(A,HHe),e(A,Bm),e(Bm,xre),e(xre,UHe),e(Bm,JHe),e(Bm,fS),e(fS,YHe),e(Bm,KHe),e(A,ZHe),e(A,Im),e(Im,$re),e($re,eUe),e(Im,oUe),e(Im,mS),e(mS,rUe),e(Im,tUe),e(A,aUe),e(A,qm),e(qm,kre),e(kre,nUe),e(qm,sUe),e(qm,gS),e(gS,lUe),e(qm,iUe),e(A,dUe),e(A,Nm),e(Nm,Sre),e(Sre,cUe),e(Nm,fUe),e(Nm,hS),e(hS,mUe),e(Nm,gUe),e(A,hUe),e(A,jm),e(jm,Rre),e(Rre,pUe),e(jm,uUe),e(jm,pS),e(pS,_Ue),e(jm,bUe),e(A,vUe),e(A,Dm),e(Dm,Pre),e(Pre,FUe),e(Dm,TUe),e(Dm,uS),e(uS,MUe),e(Dm,EUe),e(A,CUe),e(A,Gm),e(Gm,Bre),e(Bre,wUe),e(Gm,AUe),e(Gm,_S),e(_S,yUe),e(Gm,LUe),e(A,xUe),e(A,Om),e(Om,Ire),e(Ire,$Ue),e(Om,kUe),e(Om,bS),e(bS,SUe),e(Om,RUe),e(A,PUe),e(A,Vm),e(Vm,qre),e(qre,BUe),e(Vm,IUe),e(Vm,vS),e(vS,qUe),e(Vm,NUe),e(A,jUe),e(A,Xm),e(Xm,Nre),e(Nre,DUe),e(Xm,GUe),e(Xm,FS),e(FS,OUe),e(Xm,VUe),e(A,XUe),e(A,zm),e(zm,jre),e(jre,zUe),e(zm,WUe),e(zm,TS),e(TS,QUe),e(zm,HUe),e(A,UUe),e(A,Wm),e(Wm,Dre),e(Dre,JUe),e(Wm,YUe),e(Wm,MS),e(MS,KUe),e(Wm,ZUe),e(A,eJe),e(A,Qm),e(Qm,Gre),e(Gre,oJe),e(Qm,rJe),e(Qm,ES),e(ES,tJe),e(Qm,aJe),e(A,nJe),e(A,Hm),e(Hm,Ore),e(Ore,sJe),e(Hm,lJe),e(Hm,CS),e(CS,iJe),e(Hm,dJe),e(A,cJe),e(A,Um),e(Um,Vre),e(Vre,fJe),e(Um,mJe),e(Um,wS),e(wS,gJe),e(Um,hJe),e(A,pJe),e(A,Jm),e(Jm,Xre),e(Xre,uJe),e(Jm,_Je),e(Jm,AS),e(AS,bJe),e(Jm,vJe),e(A,FJe),e(A,Ym),e(Ym,zre),e(zre,TJe),e(Ym,MJe),e(Ym,yS),e(yS,EJe),e(Ym,CJe),e(A,wJe),e(A,Km),e(Km,Wre),e(Wre,AJe),e(Km,yJe),e(Km,LS),e(LS,LJe),e(Km,xJe),e(A,$Je),e(A,Zm),e(Zm,Qre),e(Qre,kJe),e(Zm,SJe),e(Zm,xS),e(xS,RJe),e(Zm,PJe),e(A,BJe),e(A,eg),e(eg,Hre),e(Hre,IJe),e(eg,qJe),e(eg,$S),e($S,NJe),e(eg,jJe),e(A,DJe),e(A,og),e(og,Ure),e(Ure,GJe),e(og,OJe),e(og,kS),e(kS,VJe),e(og,XJe),e(A,zJe),e(A,rg),e(rg,Jre),e(Jre,WJe),e(rg,QJe),e(rg,SS),e(SS,HJe),e(rg,UJe),e(A,JJe),e(A,tg),e(tg,Yre),e(Yre,YJe),e(tg,KJe),e(tg,RS),e(RS,ZJe),e(tg,eYe),e(A,oYe),e(A,ag),e(ag,Kre),e(Kre,rYe),e(ag,tYe),e(ag,PS),e(PS,aYe),e(ag,nYe),e(A,sYe),e(A,ng),e(ng,Zre),e(Zre,lYe),e(ng,iYe),e(ng,BS),e(BS,dYe),e(ng,cYe),e(A,fYe),e(A,sg),e(sg,ete),e(ete,mYe),e(sg,gYe),e(sg,IS),e(IS,hYe),e(sg,pYe),e(A,uYe),e(A,lg),e(lg,ote),e(ote,_Ye),e(lg,bYe),e(lg,qS),e(qS,vYe),e(lg,FYe),e(A,TYe),e(A,ig),e(ig,rte),e(rte,MYe),e(ig,EYe),e(ig,NS),e(NS,CYe),e(ig,wYe),e(A,AYe),e(A,dg),e(dg,tte),e(tte,yYe),e(dg,LYe),e(dg,jS),e(jS,xYe),e(dg,$Ye),e(A,kYe),e(A,cg),e(cg,ate),e(ate,SYe),e(cg,RYe),e(cg,DS),e(DS,PYe),e(cg,BYe),e(A,IYe),e(A,fg),e(fg,nte),e(nte,qYe),e(fg,NYe),e(fg,GS),e(GS,jYe),e(fg,DYe),e(A,GYe),e(A,mg),e(mg,ste),e(ste,OYe),e(mg,VYe),e(mg,OS),e(OS,XYe),e(mg,zYe),e(A,WYe),e(A,gg),e(gg,lte),e(lte,QYe),e(gg,HYe),e(gg,VS),e(VS,UYe),e(gg,JYe),e(A,YYe),e(A,hg),e(hg,ite),e(ite,KYe),e(hg,ZYe),e(hg,XS),e(XS,eKe),e(hg,oKe),e(A,rKe),e(A,pg),e(pg,dte),e(dte,tKe),e(pg,aKe),e(pg,zS),e(zS,nKe),e(pg,sKe),e(A,lKe),e(A,ug),e(ug,cte),e(cte,iKe),e(ug,dKe),e(ug,WS),e(WS,cKe),e(ug,fKe),e(A,mKe),e(A,_g),e(_g,fte),e(fte,gKe),e(_g,hKe),e(_g,QS),e(QS,pKe),e(_g,uKe),e(A,_Ke),e(A,bg),e(bg,mte),e(mte,bKe),e(bg,vKe),e(bg,HS),e(HS,FKe),e(bg,TKe),e(A,MKe),e(A,vg),e(vg,gte),e(gte,EKe),e(vg,CKe),e(vg,US),e(US,wKe),e(vg,AKe),e(A,yKe),e(A,Fg),e(Fg,hte),e(hte,LKe),e(Fg,xKe),e(Fg,JS),e(JS,$Ke),e(Fg,kKe),e(A,SKe),e(A,Tg),e(Tg,pte),e(pte,RKe),e(Tg,PKe),e(Tg,YS),e(YS,BKe),e(Tg,IKe),e(A,qKe),e(A,Mg),e(Mg,ute),e(ute,NKe),e(Mg,jKe),e(Mg,KS),e(KS,DKe),e(Mg,GKe),e(Er,OKe),M(Eg,Er,null),e(Co,VKe),e(Co,Cg),M(P6,Cg,null),e(Cg,XKe),e(Cg,_te),e(_te,zKe),b(f,nNe,_),b(f,Ti,_),e(Ti,wg),e(wg,bte),M(B6,bte,null),e(Ti,WKe),e(Ti,vte),e(vte,QKe),b(f,sNe,_),b(f,wo,_),M(I6,wo,null),e(wo,HKe),e(wo,q6),e(q6,UKe),e(q6,ZS),e(ZS,JKe),e(q6,YKe),e(wo,KKe),e(wo,N6),e(N6,ZKe),e(N6,Fte),e(Fte,eZe),e(N6,oZe),e(wo,rZe),e(wo,Cr),M(j6,Cr,null),e(Cr,tZe),e(Cr,Tte),e(Tte,aZe),e(Cr,nZe),e(Cr,Aa),e(Aa,sZe),e(Aa,Mte),e(Mte,lZe),e(Aa,iZe),e(Aa,Ete),e(Ete,dZe),e(Aa,cZe),e(Aa,Cte),e(Cte,fZe),e(Aa,mZe),e(Cr,gZe),e(Cr,k),e(k,Sn),e(Sn,wte),e(wte,hZe),e(Sn,pZe),e(Sn,eR),e(eR,uZe),e(Sn,_Ze),e(Sn,oR),e(oR,bZe),e(Sn,vZe),e(k,FZe),e(k,Rn),e(Rn,Ate),e(Ate,TZe),e(Rn,MZe),e(Rn,rR),e(rR,EZe),e(Rn,CZe),e(Rn,tR),e(tR,wZe),e(Rn,AZe),e(k,yZe),e(k,Pn),e(Pn,yte),e(yte,LZe),e(Pn,xZe),e(Pn,aR),e(aR,$Ze),e(Pn,kZe),e(Pn,nR),e(nR,SZe),e(Pn,RZe),e(k,PZe),e(k,Ag),e(Ag,Lte),e(Lte,BZe),e(Ag,IZe),e(Ag,sR),e(sR,qZe),e(Ag,NZe),e(k,jZe),e(k,Bn),e(Bn,xte),e(xte,DZe),e(Bn,GZe),e(Bn,lR),e(lR,OZe),e(Bn,VZe),e(Bn,iR),e(iR,XZe),e(Bn,zZe),e(k,WZe),e(k,yg),e(yg,$te),e($te,QZe),e(yg,HZe),e(yg,dR),e(dR,UZe),e(yg,JZe),e(k,YZe),e(k,Lg),e(Lg,kte),e(kte,KZe),e(Lg,ZZe),e(Lg,cR),e(cR,eeo),e(Lg,oeo),e(k,reo),e(k,xg),e(xg,Ste),e(Ste,teo),e(xg,aeo),e(xg,fR),e(fR,neo),e(xg,seo),e(k,leo),e(k,In),e(In,Rte),e(Rte,ieo),e(In,deo),e(In,mR),e(mR,ceo),e(In,feo),e(In,gR),e(gR,meo),e(In,geo),e(k,heo),e(k,qn),e(qn,Pte),e(Pte,peo),e(qn,ueo),e(qn,hR),e(hR,_eo),e(qn,beo),e(qn,pR),e(pR,veo),e(qn,Feo),e(k,Teo),e(k,Nn),e(Nn,Bte),e(Bte,Meo),e(Nn,Eeo),e(Nn,uR),e(uR,Ceo),e(Nn,weo),e(Nn,_R),e(_R,Aeo),e(Nn,yeo),e(k,Leo),e(k,$g),e($g,Ite),e(Ite,xeo),e($g,$eo),e($g,bR),e(bR,keo),e($g,Seo),e(k,Reo),e(k,kg),e(kg,qte),e(qte,Peo),e(kg,Beo),e(kg,vR),e(vR,Ieo),e(kg,qeo),e(k,Neo),e(k,jn),e(jn,Nte),e(Nte,jeo),e(jn,Deo),e(jn,FR),e(FR,Geo),e(jn,Oeo),e(jn,TR),e(TR,Veo),e(jn,Xeo),e(k,zeo),e(k,Sg),e(Sg,jte),e(jte,Weo),e(Sg,Qeo),e(Sg,MR),e(MR,Heo),e(Sg,Ueo),e(k,Jeo),e(k,Dn),e(Dn,Dte),e(Dte,Yeo),e(Dn,Keo),e(Dn,ER),e(ER,Zeo),e(Dn,eoo),e(Dn,CR),e(CR,ooo),e(Dn,roo),e(k,too),e(k,Gn),e(Gn,Gte),e(Gte,aoo),e(Gn,noo),e(Gn,wR),e(wR,soo),e(Gn,loo),e(Gn,AR),e(AR,ioo),e(Gn,doo),e(k,coo),e(k,On),e(On,Ote),e(Ote,foo),e(On,moo),e(On,yR),e(yR,goo),e(On,hoo),e(On,LR),e(LR,poo),e(On,uoo),e(k,_oo),e(k,Rg),e(Rg,Vte),e(Vte,boo),e(Rg,voo),e(Rg,xR),e(xR,Foo),e(Rg,Too),e(k,Moo),e(k,Vn),e(Vn,Xte),e(Xte,Eoo),e(Vn,Coo),e(Vn,$R),e($R,woo),e(Vn,Aoo),e(Vn,kR),e(kR,yoo),e(Vn,Loo),e(k,xoo),e(k,Xn),e(Xn,zte),e(zte,$oo),e(Xn,koo),e(Xn,SR),e(SR,Soo),e(Xn,Roo),e(Xn,RR),e(RR,Poo),e(Xn,Boo),e(k,Ioo),e(k,zn),e(zn,Wte),e(Wte,qoo),e(zn,Noo),e(zn,PR),e(PR,joo),e(zn,Doo),e(zn,BR),e(BR,Goo),e(zn,Ooo),e(k,Voo),e(k,Wn),e(Wn,Qte),e(Qte,Xoo),e(Wn,zoo),e(Wn,IR),e(IR,Woo),e(Wn,Qoo),e(Wn,qR),e(qR,Hoo),e(Wn,Uoo),e(k,Joo),e(k,Qn),e(Qn,Hte),e(Hte,Yoo),e(Qn,Koo),e(Qn,NR),e(NR,Zoo),e(Qn,ero),e(Qn,jR),e(jR,oro),e(Qn,rro),e(k,tro),e(k,Hn),e(Hn,Ute),e(Ute,aro),e(Hn,nro),e(Hn,DR),e(DR,sro),e(Hn,lro),e(Hn,GR),e(GR,iro),e(Hn,dro),e(k,cro),e(k,Pg),e(Pg,Jte),e(Jte,fro),e(Pg,mro),e(Pg,OR),e(OR,gro),e(Pg,hro),e(k,pro),e(k,Un),e(Un,Yte),e(Yte,uro),e(Un,_ro),e(Un,VR),e(VR,bro),e(Un,vro),e(Un,XR),e(XR,Fro),e(Un,Tro),e(k,Mro),e(k,Bg),e(Bg,Kte),e(Kte,Ero),e(Bg,Cro),e(Bg,zR),e(zR,wro),e(Bg,Aro),e(k,yro),e(k,Jn),e(Jn,Zte),e(Zte,Lro),e(Jn,xro),e(Jn,WR),e(WR,$ro),e(Jn,kro),e(Jn,QR),e(QR,Sro),e(Jn,Rro),e(k,Pro),e(k,Yn),e(Yn,eae),e(eae,Bro),e(Yn,Iro),e(Yn,HR),e(HR,qro),e(Yn,Nro),e(Yn,UR),e(UR,jro),e(Yn,Dro),e(k,Gro),e(k,Kn),e(Kn,oae),e(oae,Oro),e(Kn,Vro),e(Kn,JR),e(JR,Xro),e(Kn,zro),e(Kn,YR),e(YR,Wro),e(Kn,Qro),e(k,Hro),e(k,Ig),e(Ig,rae),e(rae,Uro),e(Ig,Jro),e(Ig,KR),e(KR,Yro),e(Ig,Kro),e(k,Zro),e(k,Zn),e(Zn,tae),e(tae,eto),e(Zn,oto),e(Zn,ZR),e(ZR,rto),e(Zn,tto),e(Zn,eP),e(eP,ato),e(Zn,nto),e(k,sto),e(k,es),e(es,aae),e(aae,lto),e(es,ito),e(es,oP),e(oP,dto),e(es,cto),e(es,rP),e(rP,fto),e(es,mto),e(k,gto),e(k,qg),e(qg,nae),e(nae,hto),e(qg,pto),e(qg,tP),e(tP,uto),e(qg,_to),e(k,bto),e(k,os),e(os,sae),e(sae,vto),e(os,Fto),e(os,aP),e(aP,Tto),e(os,Mto),e(os,nP),e(nP,Eto),e(os,Cto),e(k,wto),e(k,rs),e(rs,lae),e(lae,Ato),e(rs,yto),e(rs,sP),e(sP,Lto),e(rs,xto),e(rs,lP),e(lP,$to),e(rs,kto),e(k,Sto),e(k,ts),e(ts,iae),e(iae,Rto),e(ts,Pto),e(ts,iP),e(iP,Bto),e(ts,Ito),e(ts,dP),e(dP,qto),e(ts,Nto),e(k,jto),e(k,as),e(as,dae),e(dae,Dto),e(as,Gto),e(as,cP),e(cP,Oto),e(as,Vto),e(as,fP),e(fP,Xto),e(as,zto),e(k,Wto),e(k,ns),e(ns,cae),e(cae,Qto),e(ns,Hto),e(ns,mP),e(mP,Uto),e(ns,Jto),e(ns,gP),e(gP,Yto),e(ns,Kto),e(k,Zto),e(k,ss),e(ss,fae),e(fae,eao),e(ss,oao),e(ss,hP),e(hP,rao),e(ss,tao),e(ss,pP),e(pP,aao),e(ss,nao),e(k,sao),e(k,ls),e(ls,mae),e(mae,lao),e(ls,iao),e(ls,uP),e(uP,dao),e(ls,cao),e(ls,_P),e(_P,fao),e(ls,mao),e(k,gao),e(k,Ng),e(Ng,gae),e(gae,hao),e(Ng,pao),e(Ng,bP),e(bP,uao),e(Ng,_ao),e(k,bao),e(k,is),e(is,hae),e(hae,vao),e(is,Fao),e(is,vP),e(vP,Tao),e(is,Mao),e(is,FP),e(FP,Eao),e(is,Cao),e(k,wao),e(k,jg),e(jg,pae),e(pae,Aao),e(jg,yao),e(jg,TP),e(TP,Lao),e(jg,xao),e(k,$ao),e(k,Dg),e(Dg,uae),e(uae,kao),e(Dg,Sao),e(Dg,MP),e(MP,Rao),e(Dg,Pao),e(k,Bao),e(k,ds),e(ds,_ae),e(_ae,Iao),e(ds,qao),e(ds,EP),e(EP,Nao),e(ds,jao),e(ds,CP),e(CP,Dao),e(ds,Gao),e(k,Oao),e(k,cs),e(cs,bae),e(bae,Vao),e(cs,Xao),e(cs,wP),e(wP,zao),e(cs,Wao),e(cs,AP),e(AP,Qao),e(cs,Hao),e(k,Uao),e(k,fs),e(fs,vae),e(vae,Jao),e(fs,Yao),e(fs,yP),e(yP,Kao),e(fs,Zao),e(fs,LP),e(LP,eno),e(fs,ono),e(k,rno),e(k,Gg),e(Gg,Fae),e(Fae,tno),e(Gg,ano),e(Gg,xP),e(xP,nno),e(Gg,sno),e(k,lno),e(k,ms),e(ms,Tae),e(Tae,ino),e(ms,dno),e(ms,$P),e($P,cno),e(ms,fno),e(ms,kP),e(kP,mno),e(ms,gno),e(k,hno),e(k,gs),e(gs,Mae),e(Mae,pno),e(gs,uno),e(gs,SP),e(SP,_no),e(gs,bno),e(gs,RP),e(RP,vno),e(gs,Fno),e(k,Tno),e(k,hs),e(hs,Eae),e(Eae,Mno),e(hs,Eno),e(hs,PP),e(PP,Cno),e(hs,wno),e(hs,BP),e(BP,Ano),e(hs,yno),e(k,Lno),e(k,ps),e(ps,Cae),e(Cae,xno),e(ps,$no),e(ps,IP),e(IP,kno),e(ps,Sno),e(ps,qP),e(qP,Rno),e(ps,Pno),e(k,Bno),e(k,us),e(us,wae),e(wae,Ino),e(us,qno),e(us,NP),e(NP,Nno),e(us,jno),e(us,jP),e(jP,Dno),e(us,Gno),e(k,Ono),e(k,Og),e(Og,Aae),e(Aae,Vno),e(Og,Xno),e(Og,DP),e(DP,zno),e(Og,Wno),e(k,Qno),e(k,_s),e(_s,yae),e(yae,Hno),e(_s,Uno),e(_s,GP),e(GP,Jno),e(_s,Yno),e(_s,OP),e(OP,Kno),e(_s,Zno),e(k,eso),e(k,Vg),e(Vg,Lae),e(Lae,oso),e(Vg,rso),e(Vg,VP),e(VP,tso),e(Vg,aso),e(k,nso),e(k,Xg),e(Xg,xae),e(xae,sso),e(Xg,lso),e(Xg,XP),e(XP,iso),e(Xg,dso),e(k,cso),e(k,zg),e(zg,$ae),e($ae,fso),e(zg,mso),e(zg,zP),e(zP,gso),e(zg,hso),e(k,pso),e(k,Wg),e(Wg,kae),e(kae,uso),e(Wg,_so),e(Wg,WP),e(WP,bso),e(Wg,vso),e(k,Fso),e(k,bs),e(bs,Sae),e(Sae,Tso),e(bs,Mso),e(bs,QP),e(QP,Eso),e(bs,Cso),e(bs,HP),e(HP,wso),e(bs,Aso),e(k,yso),e(k,Qg),e(Qg,Rae),e(Rae,Lso),e(Qg,xso),e(Qg,UP),e(UP,$so),e(Qg,kso),e(k,Sso),e(k,vs),e(vs,Pae),e(Pae,Rso),e(vs,Pso),e(vs,JP),e(JP,Bso),e(vs,Iso),e(vs,YP),e(YP,qso),e(vs,Nso),e(k,jso),e(k,Fs),e(Fs,Bae),e(Bae,Dso),e(Fs,Gso),e(Fs,KP),e(KP,Oso),e(Fs,Vso),e(Fs,ZP),e(ZP,Xso),e(Fs,zso),e(k,Wso),e(k,Ts),e(Ts,Iae),e(Iae,Qso),e(Ts,Hso),e(Ts,eB),e(eB,Uso),e(Ts,Jso),e(Ts,oB),e(oB,Yso),e(Ts,Kso),e(k,Zso),e(k,Ms),e(Ms,qae),e(qae,elo),e(Ms,olo),e(Ms,rB),e(rB,rlo),e(Ms,tlo),e(Ms,tB),e(tB,alo),e(Ms,nlo),e(k,slo),e(k,Es),e(Es,Nae),e(Nae,llo),e(Es,ilo),e(Es,aB),e(aB,dlo),e(Es,clo),e(Es,nB),e(nB,flo),e(Es,mlo),e(k,glo),e(k,Cs),e(Cs,jae),e(jae,hlo),e(Cs,plo),e(Cs,sB),e(sB,ulo),e(Cs,_lo),e(Cs,lB),e(lB,blo),e(Cs,vlo),e(k,Flo),e(k,Hg),e(Hg,Dae),e(Dae,Tlo),e(Hg,Mlo),e(Hg,iB),e(iB,Elo),e(Hg,Clo),e(k,wlo),e(k,Ug),e(Ug,Gae),e(Gae,Alo),e(Ug,ylo),e(Ug,dB),e(dB,Llo),e(Ug,xlo),e(k,$lo),e(k,ws),e(ws,Oae),e(Oae,klo),e(ws,Slo),e(ws,cB),e(cB,Rlo),e(ws,Plo),e(ws,fB),e(fB,Blo),e(ws,Ilo),e(k,qlo),e(k,As),e(As,Vae),e(Vae,Nlo),e(As,jlo),e(As,mB),e(mB,Dlo),e(As,Glo),e(As,gB),e(gB,Olo),e(As,Vlo),e(k,Xlo),e(k,ys),e(ys,Xae),e(Xae,zlo),e(ys,Wlo),e(ys,hB),e(hB,Qlo),e(ys,Hlo),e(ys,pB),e(pB,Ulo),e(ys,Jlo),e(k,Ylo),e(k,Jg),e(Jg,zae),e(zae,Klo),e(Jg,Zlo),e(Jg,uB),e(uB,eio),e(Jg,oio),e(k,rio),e(k,Yg),e(Yg,Wae),e(Wae,tio),e(Yg,aio),e(Yg,_B),e(_B,nio),e(Yg,sio),e(k,lio),e(k,Kg),e(Kg,Qae),e(Qae,iio),e(Kg,dio),e(Kg,bB),e(bB,cio),e(Kg,fio),e(k,mio),e(k,Ls),e(Ls,Hae),e(Hae,gio),e(Ls,hio),e(Ls,vB),e(vB,pio),e(Ls,uio),e(Ls,FB),e(FB,_io),e(Ls,bio),e(k,vio),e(k,Zg),e(Zg,Uae),e(Uae,Fio),e(Zg,Tio),e(Zg,TB),e(TB,Mio),e(Zg,Eio),e(k,Cio),e(k,eh),e(eh,Jae),e(Jae,wio),e(eh,Aio),e(eh,MB),e(MB,yio),e(eh,Lio),e(k,xio),e(k,oh),e(oh,Yae),e(Yae,$io),e(oh,kio),e(oh,EB),e(EB,Sio),e(oh,Rio),e(k,Pio),e(k,xs),e(xs,Kae),e(Kae,Bio),e(xs,Iio),e(xs,CB),e(CB,qio),e(xs,Nio),e(xs,wB),e(wB,jio),e(xs,Dio),e(k,Gio),e(k,rh),e(rh,Zae),e(Zae,Oio),e(rh,Vio),e(rh,AB),e(AB,Xio),e(rh,zio),e(k,Wio),e(k,th),e(th,ene),e(ene,Qio),e(th,Hio),e(th,yB),e(yB,Uio),e(th,Jio),e(k,Yio),e(k,$s),e($s,one),e(one,Kio),e($s,Zio),e($s,LB),e(LB,edo),e($s,odo),e($s,xB),e(xB,rdo),e($s,tdo),e(k,ado),e(k,ks),e(ks,rne),e(rne,ndo),e(ks,sdo),e(ks,$B),e($B,ldo),e(ks,ido),e(ks,kB),e(kB,ddo),e(ks,cdo),e(k,fdo),e(k,Ss),e(Ss,tne),e(tne,mdo),e(Ss,gdo),e(Ss,SB),e(SB,hdo),e(Ss,pdo),e(Ss,RB),e(RB,udo),e(Ss,_do),e(k,bdo),e(k,Rs),e(Rs,ane),e(ane,vdo),e(Rs,Fdo),e(Rs,PB),e(PB,Tdo),e(Rs,Mdo),e(Rs,BB),e(BB,Edo),e(Rs,Cdo),e(Cr,wdo),M(ah,Cr,null),e(wo,Ado),e(wo,nh),M(D6,nh,null),e(nh,ydo),e(nh,nne),e(nne,Ldo),b(f,lNe,_),b(f,Mi,_),e(Mi,sh),e(sh,sne),M(G6,sne,null),e(Mi,xdo),e(Mi,lne),e(lne,$do),b(f,iNe,_),b(f,Ao,_),M(O6,Ao,null),e(Ao,kdo),e(Ao,V6),e(V6,Sdo),e(V6,IB),e(IB,Rdo),e(V6,Pdo),e(Ao,Bdo),e(Ao,X6),e(X6,Ido),e(X6,ine),e(ine,qdo),e(X6,Ndo),e(Ao,jdo),e(Ao,He),M(z6,He,null),e(He,Ddo),e(He,dne),e(dne,Gdo),e(He,Odo),e(He,ya),e(ya,Vdo),e(ya,cne),e(cne,Xdo),e(ya,zdo),e(ya,fne),e(fne,Wdo),e(ya,Qdo),e(ya,mne),e(mne,Hdo),e(ya,Udo),e(He,Jdo),e(He,Y),e(Y,lh),e(lh,gne),e(gne,Ydo),e(lh,Kdo),e(lh,qB),e(qB,Zdo),e(lh,eco),e(Y,oco),e(Y,ih),e(ih,hne),e(hne,rco),e(ih,tco),e(ih,NB),e(NB,aco),e(ih,nco),e(Y,sco),e(Y,dh),e(dh,pne),e(pne,lco),e(dh,ico),e(dh,jB),e(jB,dco),e(dh,cco),e(Y,fco),e(Y,ch),e(ch,une),e(une,mco),e(ch,gco),e(ch,DB),e(DB,hco),e(ch,pco),e(Y,uco),e(Y,fh),e(fh,_ne),e(_ne,_co),e(fh,bco),e(fh,GB),e(GB,vco),e(fh,Fco),e(Y,Tco),e(Y,mh),e(mh,bne),e(bne,Mco),e(mh,Eco),e(mh,OB),e(OB,Cco),e(mh,wco),e(Y,Aco),e(Y,gh),e(gh,vne),e(vne,yco),e(gh,Lco),e(gh,VB),e(VB,xco),e(gh,$co),e(Y,kco),e(Y,hh),e(hh,Fne),e(Fne,Sco),e(hh,Rco),e(hh,XB),e(XB,Pco),e(hh,Bco),e(Y,Ico),e(Y,ph),e(ph,Tne),e(Tne,qco),e(ph,Nco),e(ph,zB),e(zB,jco),e(ph,Dco),e(Y,Gco),e(Y,uh),e(uh,Mne),e(Mne,Oco),e(uh,Vco),e(uh,WB),e(WB,Xco),e(uh,zco),e(Y,Wco),e(Y,_h),e(_h,Ene),e(Ene,Qco),e(_h,Hco),e(_h,QB),e(QB,Uco),e(_h,Jco),e(Y,Yco),e(Y,bh),e(bh,Cne),e(Cne,Kco),e(bh,Zco),e(bh,HB),e(HB,efo),e(bh,ofo),e(Y,rfo),e(Y,vh),e(vh,wne),e(wne,tfo),e(vh,afo),e(vh,UB),e(UB,nfo),e(vh,sfo),e(Y,lfo),e(Y,Fh),e(Fh,Ane),e(Ane,ifo),e(Fh,dfo),e(Fh,JB),e(JB,cfo),e(Fh,ffo),e(Y,mfo),e(Y,Th),e(Th,yne),e(yne,gfo),e(Th,hfo),e(Th,YB),e(YB,pfo),e(Th,ufo),e(Y,_fo),e(Y,Mh),e(Mh,Lne),e(Lne,bfo),e(Mh,vfo),e(Mh,KB),e(KB,Ffo),e(Mh,Tfo),e(Y,Mfo),e(Y,Eh),e(Eh,xne),e(xne,Efo),e(Eh,Cfo),e(Eh,ZB),e(ZB,wfo),e(Eh,Afo),e(Y,yfo),e(Y,Ch),e(Ch,$ne),e($ne,Lfo),e(Ch,xfo),e(Ch,eI),e(eI,$fo),e(Ch,kfo),e(Y,Sfo),e(Y,wh),e(wh,kne),e(kne,Rfo),e(wh,Pfo),e(wh,oI),e(oI,Bfo),e(wh,Ifo),e(Y,qfo),e(Y,Ah),e(Ah,Sne),e(Sne,Nfo),e(Ah,jfo),e(Ah,rI),e(rI,Dfo),e(Ah,Gfo),e(Y,Ofo),e(Y,yh),e(yh,Rne),e(Rne,Vfo),e(yh,Xfo),e(yh,tI),e(tI,zfo),e(yh,Wfo),e(Y,Qfo),e(Y,Lh),e(Lh,Pne),e(Pne,Hfo),e(Lh,Ufo),e(Lh,aI),e(aI,Jfo),e(Lh,Yfo),e(Y,Kfo),e(Y,xh),e(xh,Bne),e(Bne,Zfo),e(xh,emo),e(xh,nI),e(nI,omo),e(xh,rmo),e(Y,tmo),e(Y,$h),e($h,Ine),e(Ine,amo),e($h,nmo),e($h,sI),e(sI,smo),e($h,lmo),e(Y,imo),e(Y,kh),e(kh,qne),e(qne,dmo),e(kh,cmo),e(kh,lI),e(lI,fmo),e(kh,mmo),e(Y,gmo),e(Y,Sh),e(Sh,Nne),e(Nne,hmo),e(Sh,pmo),e(Sh,iI),e(iI,umo),e(Sh,_mo),e(Y,bmo),e(Y,Rh),e(Rh,jne),e(jne,vmo),e(Rh,Fmo),e(Rh,dI),e(dI,Tmo),e(Rh,Mmo),e(Y,Emo),e(Y,Ph),e(Ph,Dne),e(Dne,Cmo),e(Ph,wmo),e(Ph,cI),e(cI,Amo),e(Ph,ymo),e(Y,Lmo),e(Y,Bh),e(Bh,Gne),e(Gne,xmo),e(Bh,$mo),e(Bh,fI),e(fI,kmo),e(Bh,Smo),e(He,Rmo),M(Ih,He,null),e(He,Pmo),M(qh,He,null),e(Ao,Bmo),e(Ao,Nh),M(W6,Nh,null),e(Nh,Imo),e(Nh,One),e(One,qmo),b(f,dNe,_),b(f,Ei,_),e(Ei,jh),e(jh,Vne),M(Q6,Vne,null),e(Ei,Nmo),e(Ei,Xne),e(Xne,jmo),b(f,cNe,_),b(f,yo,_),M(H6,yo,null),e(yo,Dmo),e(yo,U6),e(U6,Gmo),e(U6,mI),e(mI,Omo),e(U6,Vmo),e(yo,Xmo),e(yo,J6),e(J6,zmo),e(J6,zne),e(zne,Wmo),e(J6,Qmo),e(yo,Hmo),e(yo,Ue),M(Y6,Ue,null),e(Ue,Umo),e(Ue,Wne),e(Wne,Jmo),e(Ue,Ymo),e(Ue,Ci),e(Ci,Kmo),e(Ci,Qne),e(Qne,Zmo),e(Ci,ego),e(Ci,Hne),e(Hne,ogo),e(Ci,rgo),e(Ue,tgo),e(Ue,he),e(he,Dh),e(Dh,Une),e(Une,ago),e(Dh,ngo),e(Dh,gI),e(gI,sgo),e(Dh,lgo),e(he,igo),e(he,Gh),e(Gh,Jne),e(Jne,dgo),e(Gh,cgo),e(Gh,Yne),e(Yne,fgo),e(Gh,mgo),e(he,ggo),e(he,Oh),e(Oh,Kne),e(Kne,hgo),e(Oh,pgo),e(Oh,hI),e(hI,ugo),e(Oh,_go),e(he,bgo),e(he,Vh),e(Vh,Zne),e(Zne,vgo),e(Vh,Fgo),e(Vh,pI),e(pI,Tgo),e(Vh,Mgo),e(he,Ego),e(he,Xh),e(Xh,ese),e(ese,Cgo),e(Xh,wgo),e(Xh,uI),e(uI,Ago),e(Xh,ygo),e(he,Lgo),e(he,zh),e(zh,ose),e(ose,xgo),e(zh,$go),e(zh,_I),e(_I,kgo),e(zh,Sgo),e(he,Rgo),e(he,Wh),e(Wh,rse),e(rse,Pgo),e(Wh,Bgo),e(Wh,bI),e(bI,Igo),e(Wh,qgo),e(he,Ngo),e(he,Qh),e(Qh,tse),e(tse,jgo),e(Qh,Dgo),e(Qh,vI),e(vI,Ggo),e(Qh,Ogo),e(he,Vgo),e(he,Hh),e(Hh,ase),e(ase,Xgo),e(Hh,zgo),e(Hh,FI),e(FI,Wgo),e(Hh,Qgo),e(he,Hgo),e(he,Uh),e(Uh,nse),e(nse,Ugo),e(Uh,Jgo),e(Uh,TI),e(TI,Ygo),e(Uh,Kgo),e(he,Zgo),e(he,Jh),e(Jh,sse),e(sse,eho),e(Jh,oho),e(Jh,MI),e(MI,rho),e(Jh,tho),e(he,aho),e(he,Yh),e(Yh,lse),e(lse,nho),e(Yh,sho),e(Yh,EI),e(EI,lho),e(Yh,iho),e(he,dho),e(he,Kh),e(Kh,ise),e(ise,cho),e(Kh,fho),e(Kh,CI),e(CI,mho),e(Kh,gho),e(he,hho),e(he,Zh),e(Zh,dse),e(dse,pho),e(Zh,uho),e(Zh,wI),e(wI,_ho),e(Zh,bho),e(he,vho),e(he,ep),e(ep,cse),e(cse,Fho),e(ep,Tho),e(ep,AI),e(AI,Mho),e(ep,Eho),e(he,Cho),e(he,op),e(op,fse),e(fse,who),e(op,Aho),e(op,yI),e(yI,yho),e(op,Lho),e(he,xho),e(he,rp),e(rp,mse),e(mse,$ho),e(rp,kho),e(rp,LI),e(LI,Sho),e(rp,Rho),e(Ue,Pho),M(tp,Ue,null),e(Ue,Bho),M(ap,Ue,null),e(yo,Iho),e(yo,np),M(K6,np,null),e(np,qho),e(np,gse),e(gse,Nho),b(f,fNe,_),b(f,wi,_),e(wi,sp),e(sp,hse),M(Z6,hse,null),e(wi,jho),e(wi,pse),e(pse,Dho),b(f,mNe,_),b(f,Lo,_),M(ey,Lo,null),e(Lo,Gho),e(Lo,Ai),e(Ai,Oho),e(Ai,xI),e(xI,Vho),e(Ai,Xho),e(Ai,$I),e($I,zho),e(Ai,Who),e(Lo,Qho),e(Lo,oy),e(oy,Hho),e(oy,use),e(use,Uho),e(oy,Jho),e(Lo,Yho),e(Lo,tt),M(ry,tt,null),e(tt,Kho),e(tt,_se),e(_se,Zho),e(tt,epo),e(tt,yi),e(yi,opo),e(yi,bse),e(bse,rpo),e(yi,tpo),e(yi,kI),e(kI,apo),e(yi,npo),e(tt,spo),M(lp,tt,null),e(Lo,lpo),e(Lo,Je),M(ty,Je,null),e(Je,ipo),e(Je,vse),e(vse,dpo),e(Je,cpo),e(Je,La),e(La,fpo),e(La,Fse),e(Fse,mpo),e(La,gpo),e(La,Tse),e(Tse,hpo),e(La,ppo),e(La,Mse),e(Mse,upo),e(La,_po),e(Je,bpo),e(Je,x),e(x,ip),e(ip,Ese),e(Ese,vpo),e(ip,Fpo),e(ip,SI),e(SI,Tpo),e(ip,Mpo),e(x,Epo),e(x,dp),e(dp,Cse),e(Cse,Cpo),e(dp,wpo),e(dp,RI),e(RI,Apo),e(dp,ypo),e(x,Lpo),e(x,cp),e(cp,wse),e(wse,xpo),e(cp,$po),e(cp,PI),e(PI,kpo),e(cp,Spo),e(x,Rpo),e(x,fp),e(fp,Ase),e(Ase,Ppo),e(fp,Bpo),e(fp,BI),e(BI,Ipo),e(fp,qpo),e(x,Npo),e(x,mp),e(mp,yse),e(yse,jpo),e(mp,Dpo),e(mp,II),e(II,Gpo),e(mp,Opo),e(x,Vpo),e(x,gp),e(gp,Lse),e(Lse,Xpo),e(gp,zpo),e(gp,qI),e(qI,Wpo),e(gp,Qpo),e(x,Hpo),e(x,hp),e(hp,xse),e(xse,Upo),e(hp,Jpo),e(hp,NI),e(NI,Ypo),e(hp,Kpo),e(x,Zpo),e(x,pp),e(pp,$se),e($se,euo),e(pp,ouo),e(pp,jI),e(jI,ruo),e(pp,tuo),e(x,auo),e(x,up),e(up,kse),e(kse,nuo),e(up,suo),e(up,DI),e(DI,luo),e(up,iuo),e(x,duo),e(x,_p),e(_p,Sse),e(Sse,cuo),e(_p,fuo),e(_p,GI),e(GI,muo),e(_p,guo),e(x,huo),e(x,bp),e(bp,Rse),e(Rse,puo),e(bp,uuo),e(bp,OI),e(OI,_uo),e(bp,buo),e(x,vuo),e(x,vp),e(vp,Pse),e(Pse,Fuo),e(vp,Tuo),e(vp,VI),e(VI,Muo),e(vp,Euo),e(x,Cuo),e(x,Fp),e(Fp,Bse),e(Bse,wuo),e(Fp,Auo),e(Fp,XI),e(XI,yuo),e(Fp,Luo),e(x,xuo),e(x,Tp),e(Tp,Ise),e(Ise,$uo),e(Tp,kuo),e(Tp,zI),e(zI,Suo),e(Tp,Ruo),e(x,Puo),e(x,Mp),e(Mp,qse),e(qse,Buo),e(Mp,Iuo),e(Mp,WI),e(WI,quo),e(Mp,Nuo),e(x,juo),e(x,Ep),e(Ep,Nse),e(Nse,Duo),e(Ep,Guo),e(Ep,QI),e(QI,Ouo),e(Ep,Vuo),e(x,Xuo),e(x,Cp),e(Cp,jse),e(jse,zuo),e(Cp,Wuo),e(Cp,HI),e(HI,Quo),e(Cp,Huo),e(x,Uuo),e(x,wp),e(wp,Dse),e(Dse,Juo),e(wp,Yuo),e(wp,UI),e(UI,Kuo),e(wp,Zuo),e(x,e_o),e(x,Ap),e(Ap,Gse),e(Gse,o_o),e(Ap,r_o),e(Ap,JI),e(JI,t_o),e(Ap,a_o),e(x,n_o),e(x,yp),e(yp,Ose),e(Ose,s_o),e(yp,l_o),e(yp,YI),e(YI,i_o),e(yp,d_o),e(x,c_o),e(x,Lp),e(Lp,Vse),e(Vse,f_o),e(Lp,m_o),e(Lp,KI),e(KI,g_o),e(Lp,h_o),e(x,p_o),e(x,xp),e(xp,Xse),e(Xse,u_o),e(xp,__o),e(xp,ZI),e(ZI,b_o),e(xp,v_o),e(x,F_o),e(x,$p),e($p,zse),e(zse,T_o),e($p,M_o),e($p,eq),e(eq,E_o),e($p,C_o),e(x,w_o),e(x,kp),e(kp,Wse),e(Wse,A_o),e(kp,y_o),e(kp,oq),e(oq,L_o),e(kp,x_o),e(x,$_o),e(x,Sp),e(Sp,Qse),e(Qse,k_o),e(Sp,S_o),e(Sp,rq),e(rq,R_o),e(Sp,P_o),e(x,B_o),e(x,Rp),e(Rp,Hse),e(Hse,I_o),e(Rp,q_o),e(Rp,tq),e(tq,N_o),e(Rp,j_o),e(x,D_o),e(x,Pp),e(Pp,Use),e(Use,G_o),e(Pp,O_o),e(Pp,aq),e(aq,V_o),e(Pp,X_o),e(x,z_o),e(x,Bp),e(Bp,Jse),e(Jse,W_o),e(Bp,Q_o),e(Bp,nq),e(nq,H_o),e(Bp,U_o),e(x,J_o),e(x,Ip),e(Ip,Yse),e(Yse,Y_o),e(Ip,K_o),e(Ip,sq),e(sq,Z_o),e(Ip,e1o),e(x,o1o),e(x,qp),e(qp,Kse),e(Kse,r1o),e(qp,t1o),e(qp,lq),e(lq,a1o),e(qp,n1o),e(x,s1o),e(x,Np),e(Np,Zse),e(Zse,l1o),e(Np,i1o),e(Np,iq),e(iq,d1o),e(Np,c1o),e(x,f1o),e(x,jp),e(jp,ele),e(ele,m1o),e(jp,g1o),e(jp,dq),e(dq,h1o),e(jp,p1o),e(x,u1o),e(x,Ps),e(Ps,ole),e(ole,_1o),e(Ps,b1o),e(Ps,cq),e(cq,v1o),e(Ps,F1o),e(Ps,fq),e(fq,T1o),e(Ps,M1o),e(x,E1o),e(x,Dp),e(Dp,rle),e(rle,C1o),e(Dp,w1o),e(Dp,mq),e(mq,A1o),e(Dp,y1o),e(x,L1o),e(x,Gp),e(Gp,tle),e(tle,x1o),e(Gp,$1o),e(Gp,gq),e(gq,k1o),e(Gp,S1o),e(x,R1o),e(x,Op),e(Op,ale),e(ale,P1o),e(Op,B1o),e(Op,hq),e(hq,I1o),e(Op,q1o),e(x,N1o),e(x,Vp),e(Vp,nle),e(nle,j1o),e(Vp,D1o),e(Vp,pq),e(pq,G1o),e(Vp,O1o),e(x,V1o),e(x,Xp),e(Xp,sle),e(sle,X1o),e(Xp,z1o),e(Xp,uq),e(uq,W1o),e(Xp,Q1o),e(x,H1o),e(x,zp),e(zp,lle),e(lle,U1o),e(zp,J1o),e(zp,_q),e(_q,Y1o),e(zp,K1o),e(x,Z1o),e(x,Wp),e(Wp,ile),e(ile,e2o),e(Wp,o2o),e(Wp,bq),e(bq,r2o),e(Wp,t2o),e(x,a2o),e(x,Qp),e(Qp,dle),e(dle,n2o),e(Qp,s2o),e(Qp,vq),e(vq,l2o),e(Qp,i2o),e(x,d2o),e(x,Hp),e(Hp,cle),e(cle,c2o),e(Hp,f2o),e(Hp,Fq),e(Fq,m2o),e(Hp,g2o),e(x,h2o),e(x,Up),e(Up,fle),e(fle,p2o),e(Up,u2o),e(Up,Tq),e(Tq,_2o),e(Up,b2o),e(x,v2o),e(x,Jp),e(Jp,mle),e(mle,F2o),e(Jp,T2o),e(Jp,Mq),e(Mq,M2o),e(Jp,E2o),e(x,C2o),e(x,Yp),e(Yp,gle),e(gle,w2o),e(Yp,A2o),e(Yp,Eq),e(Eq,y2o),e(Yp,L2o),e(x,x2o),e(x,Kp),e(Kp,hle),e(hle,$2o),e(Kp,k2o),e(Kp,Cq),e(Cq,S2o),e(Kp,R2o),e(x,P2o),e(x,Zp),e(Zp,ple),e(ple,B2o),e(Zp,I2o),e(Zp,wq),e(wq,q2o),e(Zp,N2o),e(x,j2o),e(x,eu),e(eu,ule),e(ule,D2o),e(eu,G2o),e(eu,Aq),e(Aq,O2o),e(eu,V2o),e(x,X2o),e(x,ou),e(ou,_le),e(_le,z2o),e(ou,W2o),e(ou,yq),e(yq,Q2o),e(ou,H2o),e(x,U2o),e(x,ru),e(ru,ble),e(ble,J2o),e(ru,Y2o),e(ru,Lq),e(Lq,K2o),e(ru,Z2o),e(x,ebo),e(x,tu),e(tu,vle),e(vle,obo),e(tu,rbo),e(tu,xq),e(xq,tbo),e(tu,abo),e(x,nbo),e(x,au),e(au,Fle),e(Fle,sbo),e(au,lbo),e(au,$q),e($q,ibo),e(au,dbo),e(x,cbo),e(x,nu),e(nu,Tle),e(Tle,fbo),e(nu,mbo),e(nu,kq),e(kq,gbo),e(nu,hbo),e(x,pbo),e(x,su),e(su,Mle),e(Mle,ubo),e(su,_bo),e(su,Sq),e(Sq,bbo),e(su,vbo),e(x,Fbo),e(x,lu),e(lu,Ele),e(Ele,Tbo),e(lu,Mbo),e(lu,Rq),e(Rq,Ebo),e(lu,Cbo),e(x,wbo),e(x,iu),e(iu,Cle),e(Cle,Abo),e(iu,ybo),e(iu,Pq),e(Pq,Lbo),e(iu,xbo),e(x,$bo),e(x,du),e(du,wle),e(wle,kbo),e(du,Sbo),e(du,Bq),e(Bq,Rbo),e(du,Pbo),e(x,Bbo),e(x,cu),e(cu,Ale),e(Ale,Ibo),e(cu,qbo),e(cu,Iq),e(Iq,Nbo),e(cu,jbo),e(x,Dbo),e(x,fu),e(fu,yle),e(yle,Gbo),e(fu,Obo),e(fu,qq),e(qq,Vbo),e(fu,Xbo),e(x,zbo),e(x,mu),e(mu,Lle),e(Lle,Wbo),e(mu,Qbo),e(mu,Nq),e(Nq,Hbo),e(mu,Ubo),e(x,Jbo),e(x,gu),e(gu,xle),e(xle,Ybo),e(gu,Kbo),e(gu,jq),e(jq,Zbo),e(gu,evo),e(x,ovo),e(x,hu),e(hu,$le),e($le,rvo),e(hu,tvo),e(hu,Dq),e(Dq,avo),e(hu,nvo),e(x,svo),e(x,pu),e(pu,kle),e(kle,lvo),e(pu,ivo),e(pu,Gq),e(Gq,dvo),e(pu,cvo),e(x,fvo),e(x,uu),e(uu,Sle),e(Sle,mvo),e(uu,gvo),e(uu,Oq),e(Oq,hvo),e(uu,pvo),e(x,uvo),e(x,_u),e(_u,Rle),e(Rle,_vo),e(_u,bvo),e(_u,Vq),e(Vq,vvo),e(_u,Fvo),e(x,Tvo),e(x,bu),e(bu,Ple),e(Ple,Mvo),e(bu,Evo),e(bu,Xq),e(Xq,Cvo),e(bu,wvo),e(x,Avo),e(x,vu),e(vu,Ble),e(Ble,yvo),e(vu,Lvo),e(vu,zq),e(zq,xvo),e(vu,$vo),e(x,kvo),e(x,Fu),e(Fu,Ile),e(Ile,Svo),e(Fu,Rvo),e(Fu,Wq),e(Wq,Pvo),e(Fu,Bvo),e(x,Ivo),e(x,Tu),e(Tu,qle),e(qle,qvo),e(Tu,Nvo),e(Tu,Qq),e(Qq,jvo),e(Tu,Dvo),e(x,Gvo),e(x,Mu),e(Mu,Nle),e(Nle,Ovo),e(Mu,Vvo),e(Mu,Hq),e(Hq,Xvo),e(Mu,zvo),e(x,Wvo),e(x,Eu),e(Eu,jle),e(jle,Qvo),e(Eu,Hvo),e(Eu,Uq),e(Uq,Uvo),e(Eu,Jvo),e(x,Yvo),e(x,Cu),e(Cu,Dle),e(Dle,Kvo),e(Cu,Zvo),e(Cu,Jq),e(Jq,e3o),e(Cu,o3o),e(x,r3o),e(x,wu),e(wu,Gle),e(Gle,t3o),e(wu,a3o),e(wu,Yq),e(Yq,n3o),e(wu,s3o),e(x,l3o),e(x,Au),e(Au,Ole),e(Ole,i3o),e(Au,d3o),e(Au,Kq),e(Kq,c3o),e(Au,f3o),e(x,m3o),e(x,yu),e(yu,Vle),e(Vle,g3o),e(yu,h3o),e(yu,Zq),e(Zq,p3o),e(yu,u3o),e(x,_3o),e(x,Lu),e(Lu,Xle),e(Xle,b3o),e(Lu,v3o),e(Lu,eN),e(eN,F3o),e(Lu,T3o),e(x,M3o),e(x,xu),e(xu,zle),e(zle,E3o),e(xu,C3o),e(xu,oN),e(oN,w3o),e(xu,A3o),e(x,y3o),e(x,$u),e($u,Wle),e(Wle,L3o),e($u,x3o),e($u,rN),e(rN,$3o),e($u,k3o),e(x,S3o),e(x,ku),e(ku,Qle),e(Qle,R3o),e(ku,P3o),e(ku,tN),e(tN,B3o),e(ku,I3o),e(x,q3o),e(x,Su),e(Su,Hle),e(Hle,N3o),e(Su,j3o),e(Su,aN),e(aN,D3o),e(Su,G3o),e(x,O3o),e(x,Ru),e(Ru,Ule),e(Ule,V3o),e(Ru,X3o),e(Ru,nN),e(nN,z3o),e(Ru,W3o),e(x,Q3o),e(x,Pu),e(Pu,Jle),e(Jle,H3o),e(Pu,U3o),e(Pu,sN),e(sN,J3o),e(Pu,Y3o),e(x,K3o),e(x,Bu),e(Bu,Yle),e(Yle,Z3o),e(Bu,eFo),e(Bu,lN),e(lN,oFo),e(Bu,rFo),e(x,tFo),e(x,Iu),e(Iu,Kle),e(Kle,aFo),e(Iu,nFo),e(Iu,iN),e(iN,sFo),e(Iu,lFo),e(x,iFo),e(x,qu),e(qu,Zle),e(Zle,dFo),e(qu,cFo),e(qu,dN),e(dN,fFo),e(qu,mFo),e(x,gFo),e(x,Nu),e(Nu,eie),e(eie,hFo),e(Nu,pFo),e(Nu,cN),e(cN,uFo),e(Nu,_Fo),e(x,bFo),e(x,ju),e(ju,oie),e(oie,vFo),e(ju,FFo),e(ju,fN),e(fN,TFo),e(ju,MFo),e(x,EFo),e(x,Du),e(Du,rie),e(rie,CFo),e(Du,wFo),e(Du,mN),e(mN,AFo),e(Du,yFo),e(x,LFo),e(x,Gu),e(Gu,tie),e(tie,xFo),e(Gu,$Fo),e(Gu,gN),e(gN,kFo),e(Gu,SFo),e(x,RFo),e(x,Ou),e(Ou,aie),e(aie,PFo),e(Ou,BFo),e(Ou,hN),e(hN,IFo),e(Ou,qFo),e(x,NFo),e(x,Vu),e(Vu,nie),e(nie,jFo),e(Vu,DFo),e(Vu,pN),e(pN,GFo),e(Vu,OFo),e(x,VFo),e(x,Xu),e(Xu,sie),e(sie,XFo),e(Xu,zFo),e(Xu,uN),e(uN,WFo),e(Xu,QFo),e(x,HFo),e(x,zu),e(zu,lie),e(lie,UFo),e(zu,JFo),e(zu,_N),e(_N,YFo),e(zu,KFo),e(x,ZFo),e(x,Wu),e(Wu,iie),e(iie,eTo),e(Wu,oTo),e(Wu,bN),e(bN,rTo),e(Wu,tTo),e(x,aTo),e(x,Qu),e(Qu,die),e(die,nTo),e(Qu,sTo),e(Qu,vN),e(vN,lTo),e(Qu,iTo),e(x,dTo),e(x,Hu),e(Hu,cie),e(cie,cTo),e(Hu,fTo),e(Hu,FN),e(FN,mTo),e(Hu,gTo),e(x,hTo),e(x,Uu),e(Uu,fie),e(fie,pTo),e(Uu,uTo),e(Uu,TN),e(TN,_To),e(Uu,bTo),e(x,vTo),e(x,Ju),e(Ju,mie),e(mie,FTo),e(Ju,TTo),e(Ju,MN),e(MN,MTo),e(Ju,ETo),e(x,CTo),e(x,Yu),e(Yu,gie),e(gie,wTo),e(Yu,ATo),e(Yu,EN),e(EN,yTo),e(Yu,LTo),e(x,xTo),e(x,Ku),e(Ku,hie),e(hie,$To),e(Ku,kTo),e(Ku,CN),e(CN,STo),e(Ku,RTo),e(x,PTo),e(x,Zu),e(Zu,pie),e(pie,BTo),e(Zu,ITo),e(Zu,wN),e(wN,qTo),e(Zu,NTo),e(x,jTo),e(x,e_),e(e_,uie),e(uie,DTo),e(e_,GTo),e(e_,AN),e(AN,OTo),e(e_,VTo),e(Je,XTo),e(Je,o_),e(o_,zTo),e(o_,_ie),e(_ie,WTo),e(o_,QTo),e(o_,bie),e(bie,HTo),e(Je,UTo),M(r_,Je,null),b(f,gNe,_),b(f,Li,_),e(Li,t_),e(t_,vie),M(ay,vie,null),e(Li,JTo),e(Li,Fie),e(Fie,YTo),b(f,hNe,_),b(f,xo,_),M(ny,xo,null),e(xo,KTo),e(xo,xi),e(xi,ZTo),e(xi,yN),e(yN,e7o),e(xi,o7o),e(xi,LN),e(LN,r7o),e(xi,t7o),e(xo,a7o),e(xo,sy),e(sy,n7o),e(sy,Tie),e(Tie,s7o),e(sy,l7o),e(xo,i7o),e(xo,at),M(ly,at,null),e(at,d7o),e(at,Mie),e(Mie,c7o),e(at,f7o),e(at,$i),e($i,m7o),e($i,Eie),e(Eie,g7o),e($i,h7o),e($i,xN),e(xN,p7o),e($i,u7o),e(at,_7o),M(a_,at,null),e(xo,b7o),e(xo,Ye),M(iy,Ye,null),e(Ye,v7o),e(Ye,Cie),e(Cie,F7o),e(Ye,T7o),e(Ye,xa),e(xa,M7o),e(xa,wie),e(wie,E7o),e(xa,C7o),e(xa,Aie),e(Aie,w7o),e(xa,A7o),e(xa,yie),e(yie,y7o),e(xa,L7o),e(Ye,x7o),e(Ye,G),e(G,n_),e(n_,Lie),e(Lie,$7o),e(n_,k7o),e(n_,$N),e($N,S7o),e(n_,R7o),e(G,P7o),e(G,s_),e(s_,xie),e(xie,B7o),e(s_,I7o),e(s_,kN),e(kN,q7o),e(s_,N7o),e(G,j7o),e(G,l_),e(l_,$ie),e($ie,D7o),e(l_,G7o),e(l_,SN),e(SN,O7o),e(l_,V7o),e(G,X7o),e(G,i_),e(i_,kie),e(kie,z7o),e(i_,W7o),e(i_,RN),e(RN,Q7o),e(i_,H7o),e(G,U7o),e(G,d_),e(d_,Sie),e(Sie,J7o),e(d_,Y7o),e(d_,PN),e(PN,K7o),e(d_,Z7o),e(G,eMo),e(G,c_),e(c_,Rie),e(Rie,oMo),e(c_,rMo),e(c_,BN),e(BN,tMo),e(c_,aMo),e(G,nMo),e(G,f_),e(f_,Pie),e(Pie,sMo),e(f_,lMo),e(f_,IN),e(IN,iMo),e(f_,dMo),e(G,cMo),e(G,m_),e(m_,Bie),e(Bie,fMo),e(m_,mMo),e(m_,qN),e(qN,gMo),e(m_,hMo),e(G,pMo),e(G,g_),e(g_,Iie),e(Iie,uMo),e(g_,_Mo),e(g_,NN),e(NN,bMo),e(g_,vMo),e(G,FMo),e(G,h_),e(h_,qie),e(qie,TMo),e(h_,MMo),e(h_,jN),e(jN,EMo),e(h_,CMo),e(G,wMo),e(G,p_),e(p_,Nie),e(Nie,AMo),e(p_,yMo),e(p_,DN),e(DN,LMo),e(p_,xMo),e(G,$Mo),e(G,u_),e(u_,jie),e(jie,kMo),e(u_,SMo),e(u_,GN),e(GN,RMo),e(u_,PMo),e(G,BMo),e(G,__),e(__,Die),e(Die,IMo),e(__,qMo),e(__,ON),e(ON,NMo),e(__,jMo),e(G,DMo),e(G,b_),e(b_,Gie),e(Gie,GMo),e(b_,OMo),e(b_,VN),e(VN,VMo),e(b_,XMo),e(G,zMo),e(G,v_),e(v_,Oie),e(Oie,WMo),e(v_,QMo),e(v_,XN),e(XN,HMo),e(v_,UMo),e(G,JMo),e(G,F_),e(F_,Vie),e(Vie,YMo),e(F_,KMo),e(F_,zN),e(zN,ZMo),e(F_,e4o),e(G,o4o),e(G,T_),e(T_,Xie),e(Xie,r4o),e(T_,t4o),e(T_,WN),e(WN,a4o),e(T_,n4o),e(G,s4o),e(G,M_),e(M_,zie),e(zie,l4o),e(M_,i4o),e(M_,QN),e(QN,d4o),e(M_,c4o),e(G,f4o),e(G,E_),e(E_,Wie),e(Wie,m4o),e(E_,g4o),e(E_,HN),e(HN,h4o),e(E_,p4o),e(G,u4o),e(G,C_),e(C_,Qie),e(Qie,_4o),e(C_,b4o),e(C_,UN),e(UN,v4o),e(C_,F4o),e(G,T4o),e(G,w_),e(w_,Hie),e(Hie,M4o),e(w_,E4o),e(w_,JN),e(JN,C4o),e(w_,w4o),e(G,A4o),e(G,A_),e(A_,Uie),e(Uie,y4o),e(A_,L4o),e(A_,YN),e(YN,x4o),e(A_,$4o),e(G,k4o),e(G,y_),e(y_,Jie),e(Jie,S4o),e(y_,R4o),e(y_,KN),e(KN,P4o),e(y_,B4o),e(G,I4o),e(G,L_),e(L_,Yie),e(Yie,q4o),e(L_,N4o),e(L_,ZN),e(ZN,j4o),e(L_,D4o),e(G,G4o),e(G,x_),e(x_,Kie),e(Kie,O4o),e(x_,V4o),e(x_,ej),e(ej,X4o),e(x_,z4o),e(G,W4o),e(G,$_),e($_,Zie),e(Zie,Q4o),e($_,H4o),e($_,oj),e(oj,U4o),e($_,J4o),e(G,Y4o),e(G,k_),e(k_,ede),e(ede,K4o),e(k_,Z4o),e(k_,rj),e(rj,eEo),e(k_,oEo),e(G,rEo),e(G,S_),e(S_,ode),e(ode,tEo),e(S_,aEo),e(S_,tj),e(tj,nEo),e(S_,sEo),e(G,lEo),e(G,R_),e(R_,rde),e(rde,iEo),e(R_,dEo),e(R_,aj),e(aj,cEo),e(R_,fEo),e(G,mEo),e(G,P_),e(P_,tde),e(tde,gEo),e(P_,hEo),e(P_,nj),e(nj,pEo),e(P_,uEo),e(G,_Eo),e(G,B_),e(B_,ade),e(ade,bEo),e(B_,vEo),e(B_,sj),e(sj,FEo),e(B_,TEo),e(G,MEo),e(G,I_),e(I_,nde),e(nde,EEo),e(I_,CEo),e(I_,lj),e(lj,wEo),e(I_,AEo),e(G,yEo),e(G,q_),e(q_,sde),e(sde,LEo),e(q_,xEo),e(q_,ij),e(ij,$Eo),e(q_,kEo),e(G,SEo),e(G,N_),e(N_,lde),e(lde,REo),e(N_,PEo),e(N_,dj),e(dj,BEo),e(N_,IEo),e(G,qEo),e(G,j_),e(j_,ide),e(ide,NEo),e(j_,jEo),e(j_,cj),e(cj,DEo),e(j_,GEo),e(G,OEo),e(G,D_),e(D_,dde),e(dde,VEo),e(D_,XEo),e(D_,fj),e(fj,zEo),e(D_,WEo),e(G,QEo),e(G,G_),e(G_,cde),e(cde,HEo),e(G_,UEo),e(G_,mj),e(mj,JEo),e(G_,YEo),e(G,KEo),e(G,O_),e(O_,fde),e(fde,ZEo),e(O_,eCo),e(O_,gj),e(gj,oCo),e(O_,rCo),e(G,tCo),e(G,V_),e(V_,mde),e(mde,aCo),e(V_,nCo),e(V_,hj),e(hj,sCo),e(V_,lCo),e(G,iCo),e(G,X_),e(X_,gde),e(gde,dCo),e(X_,cCo),e(X_,pj),e(pj,fCo),e(X_,mCo),e(G,gCo),e(G,z_),e(z_,hde),e(hde,hCo),e(z_,pCo),e(z_,uj),e(uj,uCo),e(z_,_Co),e(G,bCo),e(G,W_),e(W_,pde),e(pde,vCo),e(W_,FCo),e(W_,_j),e(_j,TCo),e(W_,MCo),e(Ye,ECo),e(Ye,Q_),e(Q_,CCo),e(Q_,ude),e(ude,wCo),e(Q_,ACo),e(Q_,_de),e(_de,yCo),e(Ye,LCo),M(H_,Ye,null),b(f,pNe,_),b(f,ki,_),e(ki,U_),e(U_,bde),M(dy,bde,null),e(ki,xCo),e(ki,vde),e(vde,$Co),b(f,uNe,_),b(f,$o,_),M(cy,$o,null),e($o,kCo),e($o,Si),e(Si,SCo),e(Si,bj),e(bj,RCo),e(Si,PCo),e(Si,vj),e(vj,BCo),e(Si,ICo),e($o,qCo),e($o,fy),e(fy,NCo),e(fy,Fde),e(Fde,jCo),e(fy,DCo),e($o,GCo),e($o,nt),M(my,nt,null),e(nt,OCo),e(nt,Tde),e(Tde,VCo),e(nt,XCo),e(nt,Ri),e(Ri,zCo),e(Ri,Mde),e(Mde,WCo),e(Ri,QCo),e(Ri,Fj),e(Fj,HCo),e(Ri,UCo),e(nt,JCo),M(J_,nt,null),e($o,YCo),e($o,Ke),M(gy,Ke,null),e(Ke,KCo),e(Ke,Ede),e(Ede,ZCo),e(Ke,e5o),e(Ke,$a),e($a,o5o),e($a,Cde),e(Cde,r5o),e($a,t5o),e($a,wde),e(wde,a5o),e($a,n5o),e($a,Ade),e(Ade,s5o),e($a,l5o),e(Ke,i5o),e(Ke,z),e(z,Y_),e(Y_,yde),e(yde,d5o),e(Y_,c5o),e(Y_,Tj),e(Tj,f5o),e(Y_,m5o),e(z,g5o),e(z,K_),e(K_,Lde),e(Lde,h5o),e(K_,p5o),e(K_,Mj),e(Mj,u5o),e(K_,_5o),e(z,b5o),e(z,Z_),e(Z_,xde),e(xde,v5o),e(Z_,F5o),e(Z_,Ej),e(Ej,T5o),e(Z_,M5o),e(z,E5o),e(z,e1),e(e1,$de),e($de,C5o),e(e1,w5o),e(e1,Cj),e(Cj,A5o),e(e1,y5o),e(z,L5o),e(z,o1),e(o1,kde),e(kde,x5o),e(o1,$5o),e(o1,wj),e(wj,k5o),e(o1,S5o),e(z,R5o),e(z,r1),e(r1,Sde),e(Sde,P5o),e(r1,B5o),e(r1,Aj),e(Aj,I5o),e(r1,q5o),e(z,N5o),e(z,t1),e(t1,Rde),e(Rde,j5o),e(t1,D5o),e(t1,yj),e(yj,G5o),e(t1,O5o),e(z,V5o),e(z,a1),e(a1,Pde),e(Pde,X5o),e(a1,z5o),e(a1,Lj),e(Lj,W5o),e(a1,Q5o),e(z,H5o),e(z,n1),e(n1,Bde),e(Bde,U5o),e(n1,J5o),e(n1,xj),e(xj,Y5o),e(n1,K5o),e(z,Z5o),e(z,s1),e(s1,Ide),e(Ide,ewo),e(s1,owo),e(s1,$j),e($j,rwo),e(s1,two),e(z,awo),e(z,l1),e(l1,qde),e(qde,nwo),e(l1,swo),e(l1,kj),e(kj,lwo),e(l1,iwo),e(z,dwo),e(z,i1),e(i1,Nde),e(Nde,cwo),e(i1,fwo),e(i1,Sj),e(Sj,mwo),e(i1,gwo),e(z,hwo),e(z,d1),e(d1,jde),e(jde,pwo),e(d1,uwo),e(d1,Rj),e(Rj,_wo),e(d1,bwo),e(z,vwo),e(z,c1),e(c1,Dde),e(Dde,Fwo),e(c1,Two),e(c1,Pj),e(Pj,Mwo),e(c1,Ewo),e(z,Cwo),e(z,f1),e(f1,Gde),e(Gde,wwo),e(f1,Awo),e(f1,Bj),e(Bj,ywo),e(f1,Lwo),e(z,xwo),e(z,m1),e(m1,Ode),e(Ode,$wo),e(m1,kwo),e(m1,Ij),e(Ij,Swo),e(m1,Rwo),e(z,Pwo),e(z,g1),e(g1,Vde),e(Vde,Bwo),e(g1,Iwo),e(g1,qj),e(qj,qwo),e(g1,Nwo),e(z,jwo),e(z,h1),e(h1,Xde),e(Xde,Dwo),e(h1,Gwo),e(h1,Nj),e(Nj,Owo),e(h1,Vwo),e(z,Xwo),e(z,p1),e(p1,zde),e(zde,zwo),e(p1,Wwo),e(p1,jj),e(jj,Qwo),e(p1,Hwo),e(z,Uwo),e(z,u1),e(u1,Wde),e(Wde,Jwo),e(u1,Ywo),e(u1,Dj),e(Dj,Kwo),e(u1,Zwo),e(z,e0o),e(z,_1),e(_1,Qde),e(Qde,o0o),e(_1,r0o),e(_1,Gj),e(Gj,t0o),e(_1,a0o),e(z,n0o),e(z,b1),e(b1,Hde),e(Hde,s0o),e(b1,l0o),e(b1,Oj),e(Oj,i0o),e(b1,d0o),e(z,c0o),e(z,v1),e(v1,Ude),e(Ude,f0o),e(v1,m0o),e(v1,Vj),e(Vj,g0o),e(v1,h0o),e(z,p0o),e(z,F1),e(F1,Jde),e(Jde,u0o),e(F1,_0o),e(F1,Xj),e(Xj,b0o),e(F1,v0o),e(z,F0o),e(z,T1),e(T1,Yde),e(Yde,T0o),e(T1,M0o),e(T1,zj),e(zj,E0o),e(T1,C0o),e(z,w0o),e(z,M1),e(M1,Kde),e(Kde,A0o),e(M1,y0o),e(M1,Wj),e(Wj,L0o),e(M1,x0o),e(z,$0o),e(z,E1),e(E1,Zde),e(Zde,k0o),e(E1,S0o),e(E1,Qj),e(Qj,R0o),e(E1,P0o),e(z,B0o),e(z,C1),e(C1,ece),e(ece,I0o),e(C1,q0o),e(C1,Hj),e(Hj,N0o),e(C1,j0o),e(z,D0o),e(z,w1),e(w1,oce),e(oce,G0o),e(w1,O0o),e(w1,Uj),e(Uj,V0o),e(w1,X0o),e(z,z0o),e(z,A1),e(A1,rce),e(rce,W0o),e(A1,Q0o),e(A1,Jj),e(Jj,H0o),e(A1,U0o),e(z,J0o),e(z,y1),e(y1,tce),e(tce,Y0o),e(y1,K0o),e(y1,Yj),e(Yj,Z0o),e(y1,eAo),e(z,oAo),e(z,L1),e(L1,ace),e(ace,rAo),e(L1,tAo),e(L1,Kj),e(Kj,aAo),e(L1,nAo),e(z,sAo),e(z,x1),e(x1,nce),e(nce,lAo),e(x1,iAo),e(x1,Zj),e(Zj,dAo),e(x1,cAo),e(z,fAo),e(z,$1),e($1,sce),e(sce,mAo),e($1,gAo),e($1,eD),e(eD,hAo),e($1,pAo),e(z,uAo),e(z,k1),e(k1,lce),e(lce,_Ao),e(k1,bAo),e(k1,oD),e(oD,vAo),e(k1,FAo),e(z,TAo),e(z,S1),e(S1,ice),e(ice,MAo),e(S1,EAo),e(S1,rD),e(rD,CAo),e(S1,wAo),e(z,AAo),e(z,R1),e(R1,dce),e(dce,yAo),e(R1,LAo),e(R1,tD),e(tD,xAo),e(R1,$Ao),e(Ke,kAo),e(Ke,P1),e(P1,SAo),e(P1,cce),e(cce,RAo),e(P1,PAo),e(P1,fce),e(fce,BAo),e(Ke,IAo),M(B1,Ke,null),b(f,_Ne,_),b(f,Pi,_),e(Pi,I1),e(I1,mce),M(hy,mce,null),e(Pi,qAo),e(Pi,gce),e(gce,NAo),b(f,bNe,_),b(f,ko,_),M(py,ko,null),e(ko,jAo),e(ko,Bi),e(Bi,DAo),e(Bi,aD),e(aD,GAo),e(Bi,OAo),e(Bi,nD),e(nD,VAo),e(Bi,XAo),e(ko,zAo),e(ko,uy),e(uy,WAo),e(uy,hce),e(hce,QAo),e(uy,HAo),e(ko,UAo),e(ko,st),M(_y,st,null),e(st,JAo),e(st,pce),e(pce,YAo),e(st,KAo),e(st,Ii),e(Ii,ZAo),e(Ii,uce),e(uce,e6o),e(Ii,o6o),e(Ii,sD),e(sD,r6o),e(Ii,t6o),e(st,a6o),M(q1,st,null),e(ko,n6o),e(ko,Ze),M(by,Ze,null),e(Ze,s6o),e(Ze,_ce),e(_ce,l6o),e(Ze,i6o),e(Ze,ka),e(ka,d6o),e(ka,bce),e(bce,c6o),e(ka,f6o),e(ka,vce),e(vce,m6o),e(ka,g6o),e(ka,Fce),e(Fce,h6o),e(ka,p6o),e(Ze,u6o),e(Ze,Q),e(Q,N1),e(N1,Tce),e(Tce,_6o),e(N1,b6o),e(N1,lD),e(lD,v6o),e(N1,F6o),e(Q,T6o),e(Q,j1),e(j1,Mce),e(Mce,M6o),e(j1,E6o),e(j1,iD),e(iD,C6o),e(j1,w6o),e(Q,A6o),e(Q,D1),e(D1,Ece),e(Ece,y6o),e(D1,L6o),e(D1,dD),e(dD,x6o),e(D1,$6o),e(Q,k6o),e(Q,G1),e(G1,Cce),e(Cce,S6o),e(G1,R6o),e(G1,cD),e(cD,P6o),e(G1,B6o),e(Q,I6o),e(Q,O1),e(O1,wce),e(wce,q6o),e(O1,N6o),e(O1,fD),e(fD,j6o),e(O1,D6o),e(Q,G6o),e(Q,V1),e(V1,Ace),e(Ace,O6o),e(V1,V6o),e(V1,mD),e(mD,X6o),e(V1,z6o),e(Q,W6o),e(Q,X1),e(X1,yce),e(yce,Q6o),e(X1,H6o),e(X1,gD),e(gD,U6o),e(X1,J6o),e(Q,Y6o),e(Q,z1),e(z1,Lce),e(Lce,K6o),e(z1,Z6o),e(z1,hD),e(hD,eyo),e(z1,oyo),e(Q,ryo),e(Q,W1),e(W1,xce),e(xce,tyo),e(W1,ayo),e(W1,pD),e(pD,nyo),e(W1,syo),e(Q,lyo),e(Q,Q1),e(Q1,$ce),e($ce,iyo),e(Q1,dyo),e(Q1,uD),e(uD,cyo),e(Q1,fyo),e(Q,myo),e(Q,H1),e(H1,kce),e(kce,gyo),e(H1,hyo),e(H1,_D),e(_D,pyo),e(H1,uyo),e(Q,_yo),e(Q,U1),e(U1,Sce),e(Sce,byo),e(U1,vyo),e(U1,bD),e(bD,Fyo),e(U1,Tyo),e(Q,Myo),e(Q,J1),e(J1,Rce),e(Rce,Eyo),e(J1,Cyo),e(J1,vD),e(vD,wyo),e(J1,Ayo),e(Q,yyo),e(Q,Y1),e(Y1,Pce),e(Pce,Lyo),e(Y1,xyo),e(Y1,FD),e(FD,$yo),e(Y1,kyo),e(Q,Syo),e(Q,K1),e(K1,Bce),e(Bce,Ryo),e(K1,Pyo),e(K1,TD),e(TD,Byo),e(K1,Iyo),e(Q,qyo),e(Q,Z1),e(Z1,Ice),e(Ice,Nyo),e(Z1,jyo),e(Z1,MD),e(MD,Dyo),e(Z1,Gyo),e(Q,Oyo),e(Q,e2),e(e2,qce),e(qce,Vyo),e(e2,Xyo),e(e2,ED),e(ED,zyo),e(e2,Wyo),e(Q,Qyo),e(Q,o2),e(o2,Nce),e(Nce,Hyo),e(o2,Uyo),e(o2,CD),e(CD,Jyo),e(o2,Yyo),e(Q,Kyo),e(Q,r2),e(r2,jce),e(jce,Zyo),e(r2,eLo),e(r2,wD),e(wD,oLo),e(r2,rLo),e(Q,tLo),e(Q,t2),e(t2,Dce),e(Dce,aLo),e(t2,nLo),e(t2,AD),e(AD,sLo),e(t2,lLo),e(Q,iLo),e(Q,a2),e(a2,Gce),e(Gce,dLo),e(a2,cLo),e(a2,yD),e(yD,fLo),e(a2,mLo),e(Q,gLo),e(Q,n2),e(n2,Oce),e(Oce,hLo),e(n2,pLo),e(n2,LD),e(LD,uLo),e(n2,_Lo),e(Q,bLo),e(Q,s2),e(s2,Vce),e(Vce,vLo),e(s2,FLo),e(s2,xD),e(xD,TLo),e(s2,MLo),e(Q,ELo),e(Q,l2),e(l2,Xce),e(Xce,CLo),e(l2,wLo),e(l2,$D),e($D,ALo),e(l2,yLo),e(Q,LLo),e(Q,i2),e(i2,zce),e(zce,xLo),e(i2,$Lo),e(i2,kD),e(kD,kLo),e(i2,SLo),e(Q,RLo),e(Q,d2),e(d2,Wce),e(Wce,PLo),e(d2,BLo),e(d2,SD),e(SD,ILo),e(d2,qLo),e(Q,NLo),e(Q,c2),e(c2,Qce),e(Qce,jLo),e(c2,DLo),e(c2,RD),e(RD,GLo),e(c2,OLo),e(Q,VLo),e(Q,f2),e(f2,Hce),e(Hce,XLo),e(f2,zLo),e(f2,PD),e(PD,WLo),e(f2,QLo),e(Q,HLo),e(Q,m2),e(m2,Uce),e(Uce,ULo),e(m2,JLo),e(m2,BD),e(BD,YLo),e(m2,KLo),e(Q,ZLo),e(Q,g2),e(g2,Jce),e(Jce,e8o),e(g2,o8o),e(g2,ID),e(ID,r8o),e(g2,t8o),e(Q,a8o),e(Q,h2),e(h2,Yce),e(Yce,n8o),e(h2,s8o),e(h2,Kce),e(Kce,l8o),e(h2,i8o),e(Q,d8o),e(Q,p2),e(p2,Zce),e(Zce,c8o),e(p2,f8o),e(p2,qD),e(qD,m8o),e(p2,g8o),e(Q,h8o),e(Q,u2),e(u2,efe),e(efe,p8o),e(u2,u8o),e(u2,ND),e(ND,_8o),e(u2,b8o),e(Q,v8o),e(Q,_2),e(_2,ofe),e(ofe,F8o),e(_2,T8o),e(_2,jD),e(jD,M8o),e(_2,E8o),e(Q,C8o),e(Q,b2),e(b2,rfe),e(rfe,w8o),e(b2,A8o),e(b2,DD),e(DD,y8o),e(b2,L8o),e(Ze,x8o),e(Ze,v2),e(v2,$8o),e(v2,tfe),e(tfe,k8o),e(v2,S8o),e(v2,afe),e(afe,R8o),e(Ze,P8o),M(F2,Ze,null),b(f,vNe,_),b(f,qi,_),e(qi,T2),e(T2,nfe),M(vy,nfe,null),e(qi,B8o),e(qi,sfe),e(sfe,I8o),b(f,FNe,_),b(f,So,_),M(Fy,So,null),e(So,q8o),e(So,Ni),e(Ni,N8o),e(Ni,GD),e(GD,j8o),e(Ni,D8o),e(Ni,OD),e(OD,G8o),e(Ni,O8o),e(So,V8o),e(So,Ty),e(Ty,X8o),e(Ty,lfe),e(lfe,z8o),e(Ty,W8o),e(So,Q8o),e(So,lt),M(My,lt,null),e(lt,H8o),e(lt,ife),e(ife,U8o),e(lt,J8o),e(lt,ji),e(ji,Y8o),e(ji,dfe),e(dfe,K8o),e(ji,Z8o),e(ji,VD),e(VD,e9o),e(ji,o9o),e(lt,r9o),M(M2,lt,null),e(So,t9o),e(So,eo),M(Ey,eo,null),e(eo,a9o),e(eo,cfe),e(cfe,n9o),e(eo,s9o),e(eo,Sa),e(Sa,l9o),e(Sa,ffe),e(ffe,i9o),e(Sa,d9o),e(Sa,mfe),e(mfe,c9o),e(Sa,f9o),e(Sa,gfe),e(gfe,m9o),e(Sa,g9o),e(eo,h9o),e(eo,ue),e(ue,E2),e(E2,hfe),e(hfe,p9o),e(E2,u9o),e(E2,XD),e(XD,_9o),e(E2,b9o),e(ue,v9o),e(ue,C2),e(C2,pfe),e(pfe,F9o),e(C2,T9o),e(C2,zD),e(zD,M9o),e(C2,E9o),e(ue,C9o),e(ue,w2),e(w2,ufe),e(ufe,w9o),e(w2,A9o),e(w2,WD),e(WD,y9o),e(w2,L9o),e(ue,x9o),e(ue,A2),e(A2,_fe),e(_fe,$9o),e(A2,k9o),e(A2,QD),e(QD,S9o),e(A2,R9o),e(ue,P9o),e(ue,y2),e(y2,bfe),e(bfe,B9o),e(y2,I9o),e(y2,HD),e(HD,q9o),e(y2,N9o),e(ue,j9o),e(ue,L2),e(L2,vfe),e(vfe,D9o),e(L2,G9o),e(L2,UD),e(UD,O9o),e(L2,V9o),e(ue,X9o),e(ue,x2),e(x2,Ffe),e(Ffe,z9o),e(x2,W9o),e(x2,JD),e(JD,Q9o),e(x2,H9o),e(ue,U9o),e(ue,$2),e($2,Tfe),e(Tfe,J9o),e($2,Y9o),e($2,YD),e(YD,K9o),e($2,Z9o),e(ue,exo),e(ue,k2),e(k2,Mfe),e(Mfe,oxo),e(k2,rxo),e(k2,KD),e(KD,txo),e(k2,axo),e(ue,nxo),e(ue,S2),e(S2,Efe),e(Efe,sxo),e(S2,lxo),e(S2,ZD),e(ZD,ixo),e(S2,dxo),e(ue,cxo),e(ue,R2),e(R2,Cfe),e(Cfe,fxo),e(R2,mxo),e(R2,eG),e(eG,gxo),e(R2,hxo),e(ue,pxo),e(ue,P2),e(P2,wfe),e(wfe,uxo),e(P2,_xo),e(P2,oG),e(oG,bxo),e(P2,vxo),e(ue,Fxo),e(ue,B2),e(B2,Afe),e(Afe,Txo),e(B2,Mxo),e(B2,rG),e(rG,Exo),e(B2,Cxo),e(ue,wxo),e(ue,I2),e(I2,yfe),e(yfe,Axo),e(I2,yxo),e(I2,tG),e(tG,Lxo),e(I2,xxo),e(ue,$xo),e(ue,q2),e(q2,Lfe),e(Lfe,kxo),e(q2,Sxo),e(q2,aG),e(aG,Rxo),e(q2,Pxo),e(ue,Bxo),e(ue,N2),e(N2,xfe),e(xfe,Ixo),e(N2,qxo),e(N2,nG),e(nG,Nxo),e(N2,jxo),e(eo,Dxo),e(eo,j2),e(j2,Gxo),e(j2,$fe),e($fe,Oxo),e(j2,Vxo),e(j2,kfe),e(kfe,Xxo),e(eo,zxo),M(D2,eo,null),b(f,TNe,_),b(f,Di,_),e(Di,G2),e(G2,Sfe),M(Cy,Sfe,null),e(Di,Wxo),e(Di,Rfe),e(Rfe,Qxo),b(f,MNe,_),b(f,Ro,_),M(wy,Ro,null),e(Ro,Hxo),e(Ro,Gi),e(Gi,Uxo),e(Gi,sG),e(sG,Jxo),e(Gi,Yxo),e(Gi,lG),e(lG,Kxo),e(Gi,Zxo),e(Ro,e$o),e(Ro,Ay),e(Ay,o$o),e(Ay,Pfe),e(Pfe,r$o),e(Ay,t$o),e(Ro,a$o),e(Ro,it),M(yy,it,null),e(it,n$o),e(it,Bfe),e(Bfe,s$o),e(it,l$o),e(it,Oi),e(Oi,i$o),e(Oi,Ife),e(Ife,d$o),e(Oi,c$o),e(Oi,iG),e(iG,f$o),e(Oi,m$o),e(it,g$o),M(O2,it,null),e(Ro,h$o),e(Ro,oo),M(Ly,oo,null),e(oo,p$o),e(oo,qfe),e(qfe,u$o),e(oo,_$o),e(oo,Ra),e(Ra,b$o),e(Ra,Nfe),e(Nfe,v$o),e(Ra,F$o),e(Ra,jfe),e(jfe,T$o),e(Ra,M$o),e(Ra,Dfe),e(Dfe,E$o),e(Ra,C$o),e(oo,w$o),e(oo,q),e(q,V2),e(V2,Gfe),e(Gfe,A$o),e(V2,y$o),e(V2,dG),e(dG,L$o),e(V2,x$o),e(q,$$o),e(q,X2),e(X2,Ofe),e(Ofe,k$o),e(X2,S$o),e(X2,cG),e(cG,R$o),e(X2,P$o),e(q,B$o),e(q,z2),e(z2,Vfe),e(Vfe,I$o),e(z2,q$o),e(z2,fG),e(fG,N$o),e(z2,j$o),e(q,D$o),e(q,W2),e(W2,Xfe),e(Xfe,G$o),e(W2,O$o),e(W2,mG),e(mG,V$o),e(W2,X$o),e(q,z$o),e(q,Q2),e(Q2,zfe),e(zfe,W$o),e(Q2,Q$o),e(Q2,gG),e(gG,H$o),e(Q2,U$o),e(q,J$o),e(q,H2),e(H2,Wfe),e(Wfe,Y$o),e(H2,K$o),e(H2,hG),e(hG,Z$o),e(H2,eko),e(q,oko),e(q,U2),e(U2,Qfe),e(Qfe,rko),e(U2,tko),e(U2,pG),e(pG,ako),e(U2,nko),e(q,sko),e(q,J2),e(J2,Hfe),e(Hfe,lko),e(J2,iko),e(J2,uG),e(uG,dko),e(J2,cko),e(q,fko),e(q,Y2),e(Y2,Ufe),e(Ufe,mko),e(Y2,gko),e(Y2,_G),e(_G,hko),e(Y2,pko),e(q,uko),e(q,K2),e(K2,Jfe),e(Jfe,_ko),e(K2,bko),e(K2,bG),e(bG,vko),e(K2,Fko),e(q,Tko),e(q,Z2),e(Z2,Yfe),e(Yfe,Mko),e(Z2,Eko),e(Z2,vG),e(vG,Cko),e(Z2,wko),e(q,Ako),e(q,eb),e(eb,Kfe),e(Kfe,yko),e(eb,Lko),e(eb,FG),e(FG,xko),e(eb,$ko),e(q,kko),e(q,ob),e(ob,Zfe),e(Zfe,Sko),e(ob,Rko),e(ob,TG),e(TG,Pko),e(ob,Bko),e(q,Iko),e(q,rb),e(rb,eme),e(eme,qko),e(rb,Nko),e(rb,MG),e(MG,jko),e(rb,Dko),e(q,Gko),e(q,tb),e(tb,ome),e(ome,Oko),e(tb,Vko),e(tb,EG),e(EG,Xko),e(tb,zko),e(q,Wko),e(q,ab),e(ab,rme),e(rme,Qko),e(ab,Hko),e(ab,CG),e(CG,Uko),e(ab,Jko),e(q,Yko),e(q,nb),e(nb,tme),e(tme,Kko),e(nb,Zko),e(nb,wG),e(wG,eSo),e(nb,oSo),e(q,rSo),e(q,sb),e(sb,ame),e(ame,tSo),e(sb,aSo),e(sb,AG),e(AG,nSo),e(sb,sSo),e(q,lSo),e(q,lb),e(lb,nme),e(nme,iSo),e(lb,dSo),e(lb,yG),e(yG,cSo),e(lb,fSo),e(q,mSo),e(q,ib),e(ib,sme),e(sme,gSo),e(ib,hSo),e(ib,LG),e(LG,pSo),e(ib,uSo),e(q,_So),e(q,db),e(db,lme),e(lme,bSo),e(db,vSo),e(db,xG),e(xG,FSo),e(db,TSo),e(q,MSo),e(q,cb),e(cb,ime),e(ime,ESo),e(cb,CSo),e(cb,$G),e($G,wSo),e(cb,ASo),e(q,ySo),e(q,fb),e(fb,dme),e(dme,LSo),e(fb,xSo),e(fb,kG),e(kG,$So),e(fb,kSo),e(q,SSo),e(q,mb),e(mb,cme),e(cme,RSo),e(mb,PSo),e(mb,SG),e(SG,BSo),e(mb,ISo),e(q,qSo),e(q,gb),e(gb,fme),e(fme,NSo),e(gb,jSo),e(gb,RG),e(RG,DSo),e(gb,GSo),e(q,OSo),e(q,hb),e(hb,mme),e(mme,VSo),e(hb,XSo),e(hb,PG),e(PG,zSo),e(hb,WSo),e(q,QSo),e(q,pb),e(pb,gme),e(gme,HSo),e(pb,USo),e(pb,BG),e(BG,JSo),e(pb,YSo),e(q,KSo),e(q,ub),e(ub,hme),e(hme,ZSo),e(ub,eRo),e(ub,IG),e(IG,oRo),e(ub,rRo),e(q,tRo),e(q,_b),e(_b,pme),e(pme,aRo),e(_b,nRo),e(_b,qG),e(qG,sRo),e(_b,lRo),e(q,iRo),e(q,bb),e(bb,ume),e(ume,dRo),e(bb,cRo),e(bb,NG),e(NG,fRo),e(bb,mRo),e(q,gRo),e(q,vb),e(vb,_me),e(_me,hRo),e(vb,pRo),e(vb,jG),e(jG,uRo),e(vb,_Ro),e(q,bRo),e(q,Fb),e(Fb,bme),e(bme,vRo),e(Fb,FRo),e(Fb,DG),e(DG,TRo),e(Fb,MRo),e(q,ERo),e(q,Tb),e(Tb,vme),e(vme,CRo),e(Tb,wRo),e(Tb,GG),e(GG,ARo),e(Tb,yRo),e(q,LRo),e(q,Mb),e(Mb,Fme),e(Fme,xRo),e(Mb,$Ro),e(Mb,OG),e(OG,kRo),e(Mb,SRo),e(q,RRo),e(q,Eb),e(Eb,Tme),e(Tme,PRo),e(Eb,BRo),e(Eb,VG),e(VG,IRo),e(Eb,qRo),e(q,NRo),e(q,Cb),e(Cb,Mme),e(Mme,jRo),e(Cb,DRo),e(Cb,XG),e(XG,GRo),e(Cb,ORo),e(q,VRo),e(q,wb),e(wb,Eme),e(Eme,XRo),e(wb,zRo),e(wb,zG),e(zG,WRo),e(wb,QRo),e(q,HRo),e(q,Ab),e(Ab,Cme),e(Cme,URo),e(Ab,JRo),e(Ab,WG),e(WG,YRo),e(Ab,KRo),e(q,ZRo),e(q,yb),e(yb,wme),e(wme,ePo),e(yb,oPo),e(yb,QG),e(QG,rPo),e(yb,tPo),e(q,aPo),e(q,Lb),e(Lb,Ame),e(Ame,nPo),e(Lb,sPo),e(Lb,HG),e(HG,lPo),e(Lb,iPo),e(q,dPo),e(q,xb),e(xb,yme),e(yme,cPo),e(xb,fPo),e(xb,UG),e(UG,mPo),e(xb,gPo),e(q,hPo),e(q,$b),e($b,Lme),e(Lme,pPo),e($b,uPo),e($b,JG),e(JG,_Po),e($b,bPo),e(q,vPo),e(q,kb),e(kb,xme),e(xme,FPo),e(kb,TPo),e(kb,YG),e(YG,MPo),e(kb,EPo),e(q,CPo),e(q,Sb),e(Sb,$me),e($me,wPo),e(Sb,APo),e(Sb,KG),e(KG,yPo),e(Sb,LPo),e(q,xPo),e(q,Rb),e(Rb,kme),e(kme,$Po),e(Rb,kPo),e(Rb,ZG),e(ZG,SPo),e(Rb,RPo),e(q,PPo),e(q,Pb),e(Pb,Sme),e(Sme,BPo),e(Pb,IPo),e(Pb,eO),e(eO,qPo),e(Pb,NPo),e(q,jPo),e(q,Bb),e(Bb,Rme),e(Rme,DPo),e(Bb,GPo),e(Bb,oO),e(oO,OPo),e(Bb,VPo),e(oo,XPo),e(oo,Ib),e(Ib,zPo),e(Ib,Pme),e(Pme,WPo),e(Ib,QPo),e(Ib,Bme),e(Bme,HPo),e(oo,UPo),M(qb,oo,null),b(f,ENe,_),b(f,Vi,_),e(Vi,Nb),e(Nb,Ime),M(xy,Ime,null),e(Vi,JPo),e(Vi,qme),e(qme,YPo),b(f,CNe,_),b(f,Po,_),M($y,Po,null),e(Po,KPo),e(Po,Xi),e(Xi,ZPo),e(Xi,rO),e(rO,eBo),e(Xi,oBo),e(Xi,tO),e(tO,rBo),e(Xi,tBo),e(Po,aBo),e(Po,ky),e(ky,nBo),e(ky,Nme),e(Nme,sBo),e(ky,lBo),e(Po,iBo),e(Po,dt),M(Sy,dt,null),e(dt,dBo),e(dt,jme),e(jme,cBo),e(dt,fBo),e(dt,zi),e(zi,mBo),e(zi,Dme),e(Dme,gBo),e(zi,hBo),e(zi,aO),e(aO,pBo),e(zi,uBo),e(dt,_Bo),M(jb,dt,null),e(Po,bBo),e(Po,ro),M(Ry,ro,null),e(ro,vBo),e(ro,Gme),e(Gme,FBo),e(ro,TBo),e(ro,Pa),e(Pa,MBo),e(Pa,Ome),e(Ome,EBo),e(Pa,CBo),e(Pa,Vme),e(Vme,wBo),e(Pa,ABo),e(Pa,Xme),e(Xme,yBo),e(Pa,LBo),e(ro,xBo),e(ro,K),e(K,Db),e(Db,zme),e(zme,$Bo),e(Db,kBo),e(Db,nO),e(nO,SBo),e(Db,RBo),e(K,PBo),e(K,Gb),e(Gb,Wme),e(Wme,BBo),e(Gb,IBo),e(Gb,sO),e(sO,qBo),e(Gb,NBo),e(K,jBo),e(K,Ob),e(Ob,Qme),e(Qme,DBo),e(Ob,GBo),e(Ob,lO),e(lO,OBo),e(Ob,VBo),e(K,XBo),e(K,Vb),e(Vb,Hme),e(Hme,zBo),e(Vb,WBo),e(Vb,iO),e(iO,QBo),e(Vb,HBo),e(K,UBo),e(K,Xb),e(Xb,Ume),e(Ume,JBo),e(Xb,YBo),e(Xb,dO),e(dO,KBo),e(Xb,ZBo),e(K,eIo),e(K,zb),e(zb,Jme),e(Jme,oIo),e(zb,rIo),e(zb,cO),e(cO,tIo),e(zb,aIo),e(K,nIo),e(K,Wb),e(Wb,Yme),e(Yme,sIo),e(Wb,lIo),e(Wb,fO),e(fO,iIo),e(Wb,dIo),e(K,cIo),e(K,Qb),e(Qb,Kme),e(Kme,fIo),e(Qb,mIo),e(Qb,mO),e(mO,gIo),e(Qb,hIo),e(K,pIo),e(K,Hb),e(Hb,Zme),e(Zme,uIo),e(Hb,_Io),e(Hb,gO),e(gO,bIo),e(Hb,vIo),e(K,FIo),e(K,Ub),e(Ub,ege),e(ege,TIo),e(Ub,MIo),e(Ub,hO),e(hO,EIo),e(Ub,CIo),e(K,wIo),e(K,Jb),e(Jb,oge),e(oge,AIo),e(Jb,yIo),e(Jb,pO),e(pO,LIo),e(Jb,xIo),e(K,$Io),e(K,Yb),e(Yb,rge),e(rge,kIo),e(Yb,SIo),e(Yb,uO),e(uO,RIo),e(Yb,PIo),e(K,BIo),e(K,Kb),e(Kb,tge),e(tge,IIo),e(Kb,qIo),e(Kb,_O),e(_O,NIo),e(Kb,jIo),e(K,DIo),e(K,Zb),e(Zb,age),e(age,GIo),e(Zb,OIo),e(Zb,bO),e(bO,VIo),e(Zb,XIo),e(K,zIo),e(K,ev),e(ev,nge),e(nge,WIo),e(ev,QIo),e(ev,vO),e(vO,HIo),e(ev,UIo),e(K,JIo),e(K,ov),e(ov,sge),e(sge,YIo),e(ov,KIo),e(ov,FO),e(FO,ZIo),e(ov,eqo),e(K,oqo),e(K,rv),e(rv,lge),e(lge,rqo),e(rv,tqo),e(rv,TO),e(TO,aqo),e(rv,nqo),e(K,sqo),e(K,tv),e(tv,ige),e(ige,lqo),e(tv,iqo),e(tv,MO),e(MO,dqo),e(tv,cqo),e(K,fqo),e(K,av),e(av,dge),e(dge,mqo),e(av,gqo),e(av,EO),e(EO,hqo),e(av,pqo),e(K,uqo),e(K,nv),e(nv,cge),e(cge,_qo),e(nv,bqo),e(nv,CO),e(CO,vqo),e(nv,Fqo),e(K,Tqo),e(K,sv),e(sv,fge),e(fge,Mqo),e(sv,Eqo),e(sv,wO),e(wO,Cqo),e(sv,wqo),e(K,Aqo),e(K,lv),e(lv,mge),e(mge,yqo),e(lv,Lqo),e(lv,AO),e(AO,xqo),e(lv,$qo),e(K,kqo),e(K,iv),e(iv,gge),e(gge,Sqo),e(iv,Rqo),e(iv,yO),e(yO,Pqo),e(iv,Bqo),e(K,Iqo),e(K,dv),e(dv,hge),e(hge,qqo),e(dv,Nqo),e(dv,LO),e(LO,jqo),e(dv,Dqo),e(K,Gqo),e(K,cv),e(cv,pge),e(pge,Oqo),e(cv,Vqo),e(cv,xO),e(xO,Xqo),e(cv,zqo),e(K,Wqo),e(K,fv),e(fv,uge),e(uge,Qqo),e(fv,Hqo),e(fv,$O),e($O,Uqo),e(fv,Jqo),e(K,Yqo),e(K,mv),e(mv,_ge),e(_ge,Kqo),e(mv,Zqo),e(mv,kO),e(kO,eNo),e(mv,oNo),e(K,rNo),e(K,gv),e(gv,bge),e(bge,tNo),e(gv,aNo),e(gv,SO),e(SO,nNo),e(gv,sNo),e(K,lNo),e(K,hv),e(hv,vge),e(vge,iNo),e(hv,dNo),e(hv,RO),e(RO,cNo),e(hv,fNo),e(ro,mNo),e(ro,pv),e(pv,gNo),e(pv,Fge),e(Fge,hNo),e(pv,pNo),e(pv,Tge),e(Tge,uNo),e(ro,_No),M(uv,ro,null),b(f,wNe,_),b(f,Wi,_),e(Wi,_v),e(_v,Mge),M(Py,Mge,null),e(Wi,bNo),e(Wi,Ege),e(Ege,vNo),b(f,ANe,_),b(f,Bo,_),M(By,Bo,null),e(Bo,FNo),e(Bo,Qi),e(Qi,TNo),e(Qi,PO),e(PO,MNo),e(Qi,ENo),e(Qi,BO),e(BO,CNo),e(Qi,wNo),e(Bo,ANo),e(Bo,Iy),e(Iy,yNo),e(Iy,Cge),e(Cge,LNo),e(Iy,xNo),e(Bo,$No),e(Bo,ct),M(qy,ct,null),e(ct,kNo),e(ct,wge),e(wge,SNo),e(ct,RNo),e(ct,Hi),e(Hi,PNo),e(Hi,Age),e(Age,BNo),e(Hi,INo),e(Hi,IO),e(IO,qNo),e(Hi,NNo),e(ct,jNo),M(bv,ct,null),e(Bo,DNo),e(Bo,to),M(Ny,to,null),e(to,GNo),e(to,yge),e(yge,ONo),e(to,VNo),e(to,Ba),e(Ba,XNo),e(Ba,Lge),e(Lge,zNo),e(Ba,WNo),e(Ba,xge),e(xge,QNo),e(Ba,HNo),e(Ba,$ge),e($ge,UNo),e(Ba,JNo),e(to,YNo),e(to,Yr),e(Yr,vv),e(vv,kge),e(kge,KNo),e(vv,ZNo),e(vv,qO),e(qO,ejo),e(vv,ojo),e(Yr,rjo),e(Yr,Fv),e(Fv,Sge),e(Sge,tjo),e(Fv,ajo),e(Fv,NO),e(NO,njo),e(Fv,sjo),e(Yr,ljo),e(Yr,Tv),e(Tv,Rge),e(Rge,ijo),e(Tv,djo),e(Tv,jO),e(jO,cjo),e(Tv,fjo),e(Yr,mjo),e(Yr,Mv),e(Mv,Pge),e(Pge,gjo),e(Mv,hjo),e(Mv,DO),e(DO,pjo),e(Mv,ujo),e(Yr,_jo),e(Yr,Ev),e(Ev,Bge),e(Bge,bjo),e(Ev,vjo),e(Ev,GO),e(GO,Fjo),e(Ev,Tjo),e(to,Mjo),e(to,Cv),e(Cv,Ejo),e(Cv,Ige),e(Ige,Cjo),e(Cv,wjo),e(Cv,qge),e(qge,Ajo),e(to,yjo),M(wv,to,null),b(f,yNe,_),b(f,Ui,_),e(Ui,Av),e(Av,Nge),M(jy,Nge,null),e(Ui,Ljo),e(Ui,jge),e(jge,xjo),b(f,LNe,_),b(f,Io,_),M(Dy,Io,null),e(Io,$jo),e(Io,Ji),e(Ji,kjo),e(Ji,OO),e(OO,Sjo),e(Ji,Rjo),e(Ji,VO),e(VO,Pjo),e(Ji,Bjo),e(Io,Ijo),e(Io,Gy),e(Gy,qjo),e(Gy,Dge),e(Dge,Njo),e(Gy,jjo),e(Io,Djo),e(Io,ft),M(Oy,ft,null),e(ft,Gjo),e(ft,Gge),e(Gge,Ojo),e(ft,Vjo),e(ft,Yi),e(Yi,Xjo),e(Yi,Oge),e(Oge,zjo),e(Yi,Wjo),e(Yi,XO),e(XO,Qjo),e(Yi,Hjo),e(ft,Ujo),M(yv,ft,null),e(Io,Jjo),e(Io,ao),M(Vy,ao,null),e(ao,Yjo),e(ao,Vge),e(Vge,Kjo),e(ao,Zjo),e(ao,Ia),e(Ia,eDo),e(Ia,Xge),e(Xge,oDo),e(Ia,rDo),e(Ia,zge),e(zge,tDo),e(Ia,aDo),e(Ia,Wge),e(Wge,nDo),e(Ia,sDo),e(ao,lDo),e(ao,H),e(H,Lv),e(Lv,Qge),e(Qge,iDo),e(Lv,dDo),e(Lv,zO),e(zO,cDo),e(Lv,fDo),e(H,mDo),e(H,xv),e(xv,Hge),e(Hge,gDo),e(xv,hDo),e(xv,WO),e(WO,pDo),e(xv,uDo),e(H,_Do),e(H,$v),e($v,Uge),e(Uge,bDo),e($v,vDo),e($v,QO),e(QO,FDo),e($v,TDo),e(H,MDo),e(H,kv),e(kv,Jge),e(Jge,EDo),e(kv,CDo),e(kv,HO),e(HO,wDo),e(kv,ADo),e(H,yDo),e(H,Sv),e(Sv,Yge),e(Yge,LDo),e(Sv,xDo),e(Sv,UO),e(UO,$Do),e(Sv,kDo),e(H,SDo),e(H,Rv),e(Rv,Kge),e(Kge,RDo),e(Rv,PDo),e(Rv,JO),e(JO,BDo),e(Rv,IDo),e(H,qDo),e(H,Pv),e(Pv,Zge),e(Zge,NDo),e(Pv,jDo),e(Pv,YO),e(YO,DDo),e(Pv,GDo),e(H,ODo),e(H,Bv),e(Bv,ehe),e(ehe,VDo),e(Bv,XDo),e(Bv,KO),e(KO,zDo),e(Bv,WDo),e(H,QDo),e(H,Iv),e(Iv,ohe),e(ohe,HDo),e(Iv,UDo),e(Iv,ZO),e(ZO,JDo),e(Iv,YDo),e(H,KDo),e(H,qv),e(qv,rhe),e(rhe,ZDo),e(qv,eGo),e(qv,eV),e(eV,oGo),e(qv,rGo),e(H,tGo),e(H,Nv),e(Nv,the),e(the,aGo),e(Nv,nGo),e(Nv,oV),e(oV,sGo),e(Nv,lGo),e(H,iGo),e(H,jv),e(jv,ahe),e(ahe,dGo),e(jv,cGo),e(jv,rV),e(rV,fGo),e(jv,mGo),e(H,gGo),e(H,Dv),e(Dv,nhe),e(nhe,hGo),e(Dv,pGo),e(Dv,tV),e(tV,uGo),e(Dv,_Go),e(H,bGo),e(H,Gv),e(Gv,she),e(she,vGo),e(Gv,FGo),e(Gv,aV),e(aV,TGo),e(Gv,MGo),e(H,EGo),e(H,Ov),e(Ov,lhe),e(lhe,CGo),e(Ov,wGo),e(Ov,nV),e(nV,AGo),e(Ov,yGo),e(H,LGo),e(H,Vv),e(Vv,ihe),e(ihe,xGo),e(Vv,$Go),e(Vv,sV),e(sV,kGo),e(Vv,SGo),e(H,RGo),e(H,Xv),e(Xv,dhe),e(dhe,PGo),e(Xv,BGo),e(Xv,lV),e(lV,IGo),e(Xv,qGo),e(H,NGo),e(H,zv),e(zv,che),e(che,jGo),e(zv,DGo),e(zv,iV),e(iV,GGo),e(zv,OGo),e(H,VGo),e(H,Wv),e(Wv,fhe),e(fhe,XGo),e(Wv,zGo),e(Wv,dV),e(dV,WGo),e(Wv,QGo),e(H,HGo),e(H,Qv),e(Qv,mhe),e(mhe,UGo),e(Qv,JGo),e(Qv,cV),e(cV,YGo),e(Qv,KGo),e(H,ZGo),e(H,Hv),e(Hv,ghe),e(ghe,eOo),e(Hv,oOo),e(Hv,fV),e(fV,rOo),e(Hv,tOo),e(H,aOo),e(H,Uv),e(Uv,hhe),e(hhe,nOo),e(Uv,sOo),e(Uv,mV),e(mV,lOo),e(Uv,iOo),e(H,dOo),e(H,Jv),e(Jv,phe),e(phe,cOo),e(Jv,fOo),e(Jv,gV),e(gV,mOo),e(Jv,gOo),e(H,hOo),e(H,Yv),e(Yv,uhe),e(uhe,pOo),e(Yv,uOo),e(Yv,hV),e(hV,_Oo),e(Yv,bOo),e(H,vOo),e(H,Kv),e(Kv,_he),e(_he,FOo),e(Kv,TOo),e(Kv,pV),e(pV,MOo),e(Kv,EOo),e(H,COo),e(H,Zv),e(Zv,bhe),e(bhe,wOo),e(Zv,AOo),e(Zv,uV),e(uV,yOo),e(Zv,LOo),e(H,xOo),e(H,e3),e(e3,vhe),e(vhe,$Oo),e(e3,kOo),e(e3,_V),e(_V,SOo),e(e3,ROo),e(H,POo),e(H,o3),e(o3,Fhe),e(Fhe,BOo),e(o3,IOo),e(o3,bV),e(bV,qOo),e(o3,NOo),e(H,jOo),e(H,r3),e(r3,The),e(The,DOo),e(r3,GOo),e(r3,vV),e(vV,OOo),e(r3,VOo),e(H,XOo),e(H,t3),e(t3,Mhe),e(Mhe,zOo),e(t3,WOo),e(t3,FV),e(FV,QOo),e(t3,HOo),e(H,UOo),e(H,a3),e(a3,Ehe),e(Ehe,JOo),e(a3,YOo),e(a3,TV),e(TV,KOo),e(a3,ZOo),e(H,eVo),e(H,n3),e(n3,Che),e(Che,oVo),e(n3,rVo),e(n3,MV),e(MV,tVo),e(n3,aVo),e(H,nVo),e(H,s3),e(s3,whe),e(whe,sVo),e(s3,lVo),e(s3,EV),e(EV,iVo),e(s3,dVo),e(H,cVo),e(H,l3),e(l3,Ahe),e(Ahe,fVo),e(l3,mVo),e(l3,CV),e(CV,gVo),e(l3,hVo),e(ao,pVo),e(ao,i3),e(i3,uVo),e(i3,yhe),e(yhe,_Vo),e(i3,bVo),e(i3,Lhe),e(Lhe,vVo),e(ao,FVo),M(d3,ao,null),b(f,xNe,_),b(f,Ki,_),e(Ki,c3),e(c3,xhe),M(Xy,xhe,null),e(Ki,TVo),e(Ki,$he),e($he,MVo),b(f,$Ne,_),b(f,qo,_),M(zy,qo,null),e(qo,EVo),e(qo,Zi),e(Zi,CVo),e(Zi,wV),e(wV,wVo),e(Zi,AVo),e(Zi,AV),e(AV,yVo),e(Zi,LVo),e(qo,xVo),e(qo,Wy),e(Wy,$Vo),e(Wy,khe),e(khe,kVo),e(Wy,SVo),e(qo,RVo),e(qo,mt),M(Qy,mt,null),e(mt,PVo),e(mt,She),e(She,BVo),e(mt,IVo),e(mt,ed),e(ed,qVo),e(ed,Rhe),e(Rhe,NVo),e(ed,jVo),e(ed,yV),e(yV,DVo),e(ed,GVo),e(mt,OVo),M(f3,mt,null),e(qo,VVo),e(qo,no),M(Hy,no,null),e(no,XVo),e(no,Phe),e(Phe,zVo),e(no,WVo),e(no,qa),e(qa,QVo),e(qa,Bhe),e(Bhe,HVo),e(qa,UVo),e(qa,Ihe),e(Ihe,JVo),e(qa,YVo),e(qa,qhe),e(qhe,KVo),e(qa,ZVo),e(no,eXo),e(no,V),e(V,m3),e(m3,Nhe),e(Nhe,oXo),e(m3,rXo),e(m3,LV),e(LV,tXo),e(m3,aXo),e(V,nXo),e(V,g3),e(g3,jhe),e(jhe,sXo),e(g3,lXo),e(g3,xV),e(xV,iXo),e(g3,dXo),e(V,cXo),e(V,h3),e(h3,Dhe),e(Dhe,fXo),e(h3,mXo),e(h3,$V),e($V,gXo),e(h3,hXo),e(V,pXo),e(V,p3),e(p3,Ghe),e(Ghe,uXo),e(p3,_Xo),e(p3,kV),e(kV,bXo),e(p3,vXo),e(V,FXo),e(V,u3),e(u3,Ohe),e(Ohe,TXo),e(u3,MXo),e(u3,SV),e(SV,EXo),e(u3,CXo),e(V,wXo),e(V,_3),e(_3,Vhe),e(Vhe,AXo),e(_3,yXo),e(_3,RV),e(RV,LXo),e(_3,xXo),e(V,$Xo),e(V,b3),e(b3,Xhe),e(Xhe,kXo),e(b3,SXo),e(b3,PV),e(PV,RXo),e(b3,PXo),e(V,BXo),e(V,v3),e(v3,zhe),e(zhe,IXo),e(v3,qXo),e(v3,BV),e(BV,NXo),e(v3,jXo),e(V,DXo),e(V,F3),e(F3,Whe),e(Whe,GXo),e(F3,OXo),e(F3,IV),e(IV,VXo),e(F3,XXo),e(V,zXo),e(V,T3),e(T3,Qhe),e(Qhe,WXo),e(T3,QXo),e(T3,qV),e(qV,HXo),e(T3,UXo),e(V,JXo),e(V,M3),e(M3,Hhe),e(Hhe,YXo),e(M3,KXo),e(M3,NV),e(NV,ZXo),e(M3,ezo),e(V,ozo),e(V,E3),e(E3,Uhe),e(Uhe,rzo),e(E3,tzo),e(E3,jV),e(jV,azo),e(E3,nzo),e(V,szo),e(V,C3),e(C3,Jhe),e(Jhe,lzo),e(C3,izo),e(C3,DV),e(DV,dzo),e(C3,czo),e(V,fzo),e(V,w3),e(w3,Yhe),e(Yhe,mzo),e(w3,gzo),e(w3,GV),e(GV,hzo),e(w3,pzo),e(V,uzo),e(V,A3),e(A3,Khe),e(Khe,_zo),e(A3,bzo),e(A3,OV),e(OV,vzo),e(A3,Fzo),e(V,Tzo),e(V,y3),e(y3,Zhe),e(Zhe,Mzo),e(y3,Ezo),e(y3,VV),e(VV,Czo),e(y3,wzo),e(V,Azo),e(V,L3),e(L3,epe),e(epe,yzo),e(L3,Lzo),e(L3,XV),e(XV,xzo),e(L3,$zo),e(V,kzo),e(V,x3),e(x3,ope),e(ope,Szo),e(x3,Rzo),e(x3,zV),e(zV,Pzo),e(x3,Bzo),e(V,Izo),e(V,$3),e($3,rpe),e(rpe,qzo),e($3,Nzo),e($3,WV),e(WV,jzo),e($3,Dzo),e(V,Gzo),e(V,k3),e(k3,tpe),e(tpe,Ozo),e(k3,Vzo),e(k3,QV),e(QV,Xzo),e(k3,zzo),e(V,Wzo),e(V,S3),e(S3,ape),e(ape,Qzo),e(S3,Hzo),e(S3,HV),e(HV,Uzo),e(S3,Jzo),e(V,Yzo),e(V,R3),e(R3,npe),e(npe,Kzo),e(R3,Zzo),e(R3,UV),e(UV,eWo),e(R3,oWo),e(V,rWo),e(V,P3),e(P3,spe),e(spe,tWo),e(P3,aWo),e(P3,JV),e(JV,nWo),e(P3,sWo),e(V,lWo),e(V,B3),e(B3,lpe),e(lpe,iWo),e(B3,dWo),e(B3,YV),e(YV,cWo),e(B3,fWo),e(V,mWo),e(V,I3),e(I3,ipe),e(ipe,gWo),e(I3,hWo),e(I3,KV),e(KV,pWo),e(I3,uWo),e(V,_Wo),e(V,q3),e(q3,dpe),e(dpe,bWo),e(q3,vWo),e(q3,ZV),e(ZV,FWo),e(q3,TWo),e(V,MWo),e(V,N3),e(N3,cpe),e(cpe,EWo),e(N3,CWo),e(N3,eX),e(eX,wWo),e(N3,AWo),e(V,yWo),e(V,j3),e(j3,fpe),e(fpe,LWo),e(j3,xWo),e(j3,oX),e(oX,$Wo),e(j3,kWo),e(V,SWo),e(V,D3),e(D3,mpe),e(mpe,RWo),e(D3,PWo),e(D3,rX),e(rX,BWo),e(D3,IWo),e(V,qWo),e(V,G3),e(G3,gpe),e(gpe,NWo),e(G3,jWo),e(G3,tX),e(tX,DWo),e(G3,GWo),e(V,OWo),e(V,O3),e(O3,hpe),e(hpe,VWo),e(O3,XWo),e(O3,aX),e(aX,zWo),e(O3,WWo),e(V,QWo),e(V,V3),e(V3,ppe),e(ppe,HWo),e(V3,UWo),e(V3,nX),e(nX,JWo),e(V3,YWo),e(V,KWo),e(V,X3),e(X3,upe),e(upe,ZWo),e(X3,eQo),e(X3,sX),e(sX,oQo),e(X3,rQo),e(V,tQo),e(V,z3),e(z3,_pe),e(_pe,aQo),e(z3,nQo),e(z3,lX),e(lX,sQo),e(z3,lQo),e(V,iQo),e(V,W3),e(W3,bpe),e(bpe,dQo),e(W3,cQo),e(W3,iX),e(iX,fQo),e(W3,mQo),e(V,gQo),e(V,Q3),e(Q3,vpe),e(vpe,hQo),e(Q3,pQo),e(Q3,dX),e(dX,uQo),e(Q3,_Qo),e(V,bQo),e(V,H3),e(H3,Fpe),e(Fpe,vQo),e(H3,FQo),e(H3,cX),e(cX,TQo),e(H3,MQo),e(V,EQo),e(V,U3),e(U3,Tpe),e(Tpe,CQo),e(U3,wQo),e(U3,fX),e(fX,AQo),e(U3,yQo),e(V,LQo),e(V,J3),e(J3,Mpe),e(Mpe,xQo),e(J3,$Qo),e(J3,mX),e(mX,kQo),e(J3,SQo),e(V,RQo),e(V,Y3),e(Y3,Epe),e(Epe,PQo),e(Y3,BQo),e(Y3,gX),e(gX,IQo),e(Y3,qQo),e(no,NQo),e(no,K3),e(K3,jQo),e(K3,Cpe),e(Cpe,DQo),e(K3,GQo),e(K3,wpe),e(wpe,OQo),e(no,VQo),M(Z3,no,null),b(f,kNe,_),b(f,od,_),e(od,eF),e(eF,Ape),M(Uy,Ape,null),e(od,XQo),e(od,ype),e(ype,zQo),b(f,SNe,_),b(f,No,_),M(Jy,No,null),e(No,WQo),e(No,rd),e(rd,QQo),e(rd,hX),e(hX,HQo),e(rd,UQo),e(rd,pX),e(pX,JQo),e(rd,YQo),e(No,KQo),e(No,Yy),e(Yy,ZQo),e(Yy,Lpe),e(Lpe,eHo),e(Yy,oHo),e(No,rHo),e(No,gt),M(Ky,gt,null),e(gt,tHo),e(gt,xpe),e(xpe,aHo),e(gt,nHo),e(gt,td),e(td,sHo),e(td,$pe),e($pe,lHo),e(td,iHo),e(td,uX),e(uX,dHo),e(td,cHo),e(gt,fHo),M(oF,gt,null),e(No,mHo),e(No,so),M(Zy,so,null),e(so,gHo),e(so,kpe),e(kpe,hHo),e(so,pHo),e(so,Na),e(Na,uHo),e(Na,Spe),e(Spe,_Ho),e(Na,bHo),e(Na,Rpe),e(Rpe,vHo),e(Na,FHo),e(Na,Ppe),e(Ppe,THo),e(Na,MHo),e(so,EHo),e(so,Bpe),e(Bpe,rF),e(rF,Ipe),e(Ipe,CHo),e(rF,wHo),e(rF,_X),e(_X,AHo),e(rF,yHo),e(so,LHo),e(so,tF),e(tF,xHo),e(tF,qpe),e(qpe,$Ho),e(tF,kHo),e(tF,Npe),e(Npe,SHo),e(so,RHo),M(aF,so,null),b(f,RNe,_),b(f,ad,_),e(ad,nF),e(nF,jpe),M(eL,jpe,null),e(ad,PHo),e(ad,Dpe),e(Dpe,BHo),b(f,PNe,_),b(f,jo,_),M(oL,jo,null),e(jo,IHo),e(jo,nd),e(nd,qHo),e(nd,bX),e(bX,NHo),e(nd,jHo),e(nd,vX),e(vX,DHo),e(nd,GHo),e(jo,OHo),e(jo,rL),e(rL,VHo),e(rL,Gpe),e(Gpe,XHo),e(rL,zHo),e(jo,WHo),e(jo,ht),M(tL,ht,null),e(ht,QHo),e(ht,Ope),e(Ope,HHo),e(ht,UHo),e(ht,sd),e(sd,JHo),e(sd,Vpe),e(Vpe,YHo),e(sd,KHo),e(sd,FX),e(FX,ZHo),e(sd,eUo),e(ht,oUo),M(sF,ht,null),e(jo,rUo),e(jo,lo),M(aL,lo,null),e(lo,tUo),e(lo,Xpe),e(Xpe,aUo),e(lo,nUo),e(lo,ja),e(ja,sUo),e(ja,zpe),e(zpe,lUo),e(ja,iUo),e(ja,Wpe),e(Wpe,dUo),e(ja,cUo),e(ja,Qpe),e(Qpe,fUo),e(ja,mUo),e(lo,gUo),e(lo,Fe),e(Fe,lF),e(lF,Hpe),e(Hpe,hUo),e(lF,pUo),e(lF,TX),e(TX,uUo),e(lF,_Uo),e(Fe,bUo),e(Fe,iF),e(iF,Upe),e(Upe,vUo),e(iF,FUo),e(iF,MX),e(MX,TUo),e(iF,MUo),e(Fe,EUo),e(Fe,dF),e(dF,Jpe),e(Jpe,CUo),e(dF,wUo),e(dF,EX),e(EX,AUo),e(dF,yUo),e(Fe,LUo),e(Fe,cF),e(cF,Ype),e(Ype,xUo),e(cF,$Uo),e(cF,CX),e(CX,kUo),e(cF,SUo),e(Fe,RUo),e(Fe,Bs),e(Bs,Kpe),e(Kpe,PUo),e(Bs,BUo),e(Bs,wX),e(wX,IUo),e(Bs,qUo),e(Bs,AX),e(AX,NUo),e(Bs,jUo),e(Fe,DUo),e(Fe,fF),e(fF,Zpe),e(Zpe,GUo),e(fF,OUo),e(fF,yX),e(yX,VUo),e(fF,XUo),e(Fe,zUo),e(Fe,pt),e(pt,eue),e(eue,WUo),e(pt,QUo),e(pt,LX),e(LX,HUo),e(pt,UUo),e(pt,xX),e(xX,JUo),e(pt,YUo),e(pt,$X),e($X,KUo),e(pt,ZUo),e(Fe,eJo),e(Fe,mF),e(mF,oue),e(oue,oJo),e(mF,rJo),e(mF,kX),e(kX,tJo),e(mF,aJo),e(Fe,nJo),e(Fe,gF),e(gF,rue),e(rue,sJo),e(gF,lJo),e(gF,SX),e(SX,iJo),e(gF,dJo),e(Fe,cJo),e(Fe,hF),e(hF,tue),e(tue,fJo),e(hF,mJo),e(hF,RX),e(RX,gJo),e(hF,hJo),e(Fe,pJo),e(Fe,pF),e(pF,aue),e(aue,uJo),e(pF,_Jo),e(pF,PX),e(PX,bJo),e(pF,vJo),e(Fe,FJo),e(Fe,uF),e(uF,nue),e(nue,TJo),e(uF,MJo),e(uF,BX),e(BX,EJo),e(uF,CJo),e(Fe,wJo),e(Fe,_F),e(_F,sue),e(sue,AJo),e(_F,yJo),e(_F,IX),e(IX,LJo),e(_F,xJo),e(Fe,$Jo),e(Fe,bF),e(bF,lue),e(lue,kJo),e(bF,SJo),e(bF,qX),e(qX,RJo),e(bF,PJo),e(lo,BJo),e(lo,vF),e(vF,IJo),e(vF,iue),e(iue,qJo),e(vF,NJo),e(vF,due),e(due,jJo),e(lo,DJo),M(FF,lo,null),b(f,BNe,_),b(f,ld,_),e(ld,TF),e(TF,cue),M(nL,cue,null),e(ld,GJo),e(ld,fue),e(fue,OJo),b(f,INe,_),b(f,Do,_),M(sL,Do,null),e(Do,VJo),e(Do,id),e(id,XJo),e(id,NX),e(NX,zJo),e(id,WJo),e(id,jX),e(jX,QJo),e(id,HJo),e(Do,UJo),e(Do,lL),e(lL,JJo),e(lL,mue),e(mue,YJo),e(lL,KJo),e(Do,ZJo),e(Do,ut),M(iL,ut,null),e(ut,eYo),e(ut,gue),e(gue,oYo),e(ut,rYo),e(ut,dd),e(dd,tYo),e(dd,hue),e(hue,aYo),e(dd,nYo),e(dd,DX),e(DX,sYo),e(dd,lYo),e(ut,iYo),M(MF,ut,null),e(Do,dYo),e(Do,io),M(dL,io,null),e(io,cYo),e(io,pue),e(pue,fYo),e(io,mYo),e(io,Da),e(Da,gYo),e(Da,uue),e(uue,hYo),e(Da,pYo),e(Da,_ue),e(_ue,uYo),e(Da,_Yo),e(Da,bue),e(bue,bYo),e(Da,vYo),e(io,FYo),e(io,vue),e(vue,EF),e(EF,Fue),e(Fue,TYo),e(EF,MYo),e(EF,GX),e(GX,EYo),e(EF,CYo),e(io,wYo),e(io,CF),e(CF,AYo),e(CF,Tue),e(Tue,yYo),e(CF,LYo),e(CF,Mue),e(Mue,xYo),e(io,$Yo),M(wF,io,null),b(f,qNe,_),b(f,cd,_),e(cd,AF),e(AF,Eue),M(cL,Eue,null),e(cd,kYo),e(cd,Cue),e(Cue,SYo),b(f,NNe,_),b(f,Go,_),M(fL,Go,null),e(Go,RYo),e(Go,fd),e(fd,PYo),e(fd,OX),e(OX,BYo),e(fd,IYo),e(fd,VX),e(VX,qYo),e(fd,NYo),e(Go,jYo),e(Go,mL),e(mL,DYo),e(mL,wue),e(wue,GYo),e(mL,OYo),e(Go,VYo),e(Go,_t),M(gL,_t,null),e(_t,XYo),e(_t,Aue),e(Aue,zYo),e(_t,WYo),e(_t,md),e(md,QYo),e(md,yue),e(yue,HYo),e(md,UYo),e(md,XX),e(XX,JYo),e(md,YYo),e(_t,KYo),M(yF,_t,null),e(Go,ZYo),e(Go,co),M(hL,co,null),e(co,eKo),e(co,Lue),e(Lue,oKo),e(co,rKo),e(co,Ga),e(Ga,tKo),e(Ga,xue),e(xue,aKo),e(Ga,nKo),e(Ga,$ue),e($ue,sKo),e(Ga,lKo),e(Ga,kue),e(kue,iKo),e(Ga,dKo),e(co,cKo),e(co,ke),e(ke,LF),e(LF,Sue),e(Sue,fKo),e(LF,mKo),e(LF,zX),e(zX,gKo),e(LF,hKo),e(ke,pKo),e(ke,xF),e(xF,Rue),e(Rue,uKo),e(xF,_Ko),e(xF,WX),e(WX,bKo),e(xF,vKo),e(ke,FKo),e(ke,$F),e($F,Pue),e(Pue,TKo),e($F,MKo),e($F,QX),e(QX,EKo),e($F,CKo),e(ke,wKo),e(ke,kF),e(kF,Bue),e(Bue,AKo),e(kF,yKo),e(kF,HX),e(HX,LKo),e(kF,xKo),e(ke,$Ko),e(ke,SF),e(SF,Iue),e(Iue,kKo),e(SF,SKo),e(SF,UX),e(UX,RKo),e(SF,PKo),e(ke,BKo),e(ke,RF),e(RF,que),e(que,IKo),e(RF,qKo),e(RF,JX),e(JX,NKo),e(RF,jKo),e(ke,DKo),e(ke,PF),e(PF,Nue),e(Nue,GKo),e(PF,OKo),e(PF,YX),e(YX,VKo),e(PF,XKo),e(ke,zKo),e(ke,BF),e(BF,jue),e(jue,WKo),e(BF,QKo),e(BF,KX),e(KX,HKo),e(BF,UKo),e(ke,JKo),e(ke,IF),e(IF,Due),e(Due,YKo),e(IF,KKo),e(IF,ZX),e(ZX,ZKo),e(IF,eZo),e(co,oZo),e(co,qF),e(qF,rZo),e(qF,Gue),e(Gue,tZo),e(qF,aZo),e(qF,Oue),e(Oue,nZo),e(co,sZo),M(NF,co,null),b(f,jNe,_),b(f,gd,_),e(gd,jF),e(jF,Vue),M(pL,Vue,null),e(gd,lZo),e(gd,Xue),e(Xue,iZo),b(f,DNe,_),b(f,Oo,_),M(uL,Oo,null),e(Oo,dZo),e(Oo,hd),e(hd,cZo),e(hd,ez),e(ez,fZo),e(hd,mZo),e(hd,oz),e(oz,gZo),e(hd,hZo),e(Oo,pZo),e(Oo,_L),e(_L,uZo),e(_L,zue),e(zue,_Zo),e(_L,bZo),e(Oo,vZo),e(Oo,bt),M(bL,bt,null),e(bt,FZo),e(bt,Wue),e(Wue,TZo),e(bt,MZo),e(bt,pd),e(pd,EZo),e(pd,Que),e(Que,CZo),e(pd,wZo),e(pd,rz),e(rz,AZo),e(pd,yZo),e(bt,LZo),M(DF,bt,null),e(Oo,xZo),e(Oo,fo),M(vL,fo,null),e(fo,$Zo),e(fo,Hue),e(Hue,kZo),e(fo,SZo),e(fo,Oa),e(Oa,RZo),e(Oa,Uue),e(Uue,PZo),e(Oa,BZo),e(Oa,Jue),e(Jue,IZo),e(Oa,qZo),e(Oa,Yue),e(Yue,NZo),e(Oa,jZo),e(fo,DZo),e(fo,Kr),e(Kr,GF),e(GF,Kue),e(Kue,GZo),e(GF,OZo),e(GF,tz),e(tz,VZo),e(GF,XZo),e(Kr,zZo),e(Kr,OF),e(OF,Zue),e(Zue,WZo),e(OF,QZo),e(OF,az),e(az,HZo),e(OF,UZo),e(Kr,JZo),e(Kr,VF),e(VF,e_e),e(e_e,YZo),e(VF,KZo),e(VF,nz),e(nz,ZZo),e(VF,eer),e(Kr,oer),e(Kr,XF),e(XF,o_e),e(o_e,rer),e(XF,ter),e(XF,sz),e(sz,aer),e(XF,ner),e(Kr,ser),e(Kr,zF),e(zF,r_e),e(r_e,ler),e(zF,ier),e(zF,lz),e(lz,der),e(zF,cer),e(fo,fer),e(fo,WF),e(WF,mer),e(WF,t_e),e(t_e,ger),e(WF,her),e(WF,a_e),e(a_e,per),e(fo,uer),M(QF,fo,null),b(f,GNe,_),b(f,ud,_),e(ud,HF),e(HF,n_e),M(FL,n_e,null),e(ud,_er),e(ud,s_e),e(s_e,ber),b(f,ONe,_),b(f,Vo,_),M(TL,Vo,null),e(Vo,ver),e(Vo,_d),e(_d,Fer),e(_d,iz),e(iz,Ter),e(_d,Mer),e(_d,dz),e(dz,Eer),e(_d,Cer),e(Vo,wer),e(Vo,ML),e(ML,Aer),e(ML,l_e),e(l_e,yer),e(ML,Ler),e(Vo,xer),e(Vo,vt),M(EL,vt,null),e(vt,$er),e(vt,i_e),e(i_e,ker),e(vt,Ser),e(vt,bd),e(bd,Rer),e(bd,d_e),e(d_e,Per),e(bd,Ber),e(bd,cz),e(cz,Ier),e(bd,qer),e(vt,Ner),M(UF,vt,null),e(Vo,jer),e(Vo,mo),M(CL,mo,null),e(mo,Der),e(mo,c_e),e(c_e,Ger),e(mo,Oer),e(mo,Va),e(Va,Ver),e(Va,f_e),e(f_e,Xer),e(Va,zer),e(Va,m_e),e(m_e,Wer),e(Va,Qer),e(Va,g_e),e(g_e,Her),e(Va,Uer),e(mo,Jer),e(mo,Se),e(Se,JF),e(JF,h_e),e(h_e,Yer),e(JF,Ker),e(JF,fz),e(fz,Zer),e(JF,eor),e(Se,oor),e(Se,YF),e(YF,p_e),e(p_e,ror),e(YF,tor),e(YF,mz),e(mz,aor),e(YF,nor),e(Se,sor),e(Se,KF),e(KF,u_e),e(u_e,lor),e(KF,ior),e(KF,gz),e(gz,dor),e(KF,cor),e(Se,mor),e(Se,ZF),e(ZF,__e),e(__e,gor),e(ZF,hor),e(ZF,hz),e(hz,por),e(ZF,uor),e(Se,_or),e(Se,eT),e(eT,b_e),e(b_e,bor),e(eT,vor),e(eT,pz),e(pz,For),e(eT,Tor),e(Se,Mor),e(Se,oT),e(oT,v_e),e(v_e,Eor),e(oT,Cor),e(oT,uz),e(uz,wor),e(oT,Aor),e(Se,yor),e(Se,rT),e(rT,F_e),e(F_e,Lor),e(rT,xor),e(rT,_z),e(_z,$or),e(rT,kor),e(Se,Sor),e(Se,tT),e(tT,T_e),e(T_e,Ror),e(tT,Por),e(tT,bz),e(bz,Bor),e(tT,Ior),e(Se,qor),e(Se,aT),e(aT,M_e),e(M_e,Nor),e(aT,jor),e(aT,vz),e(vz,Dor),e(aT,Gor),e(mo,Oor),e(mo,nT),e(nT,Vor),e(nT,E_e),e(E_e,Xor),e(nT,zor),e(nT,C_e),e(C_e,Wor),e(mo,Qor),M(sT,mo,null),b(f,VNe,_),b(f,vd,_),e(vd,lT),e(lT,w_e),M(wL,w_e,null),e(vd,Hor),e(vd,A_e),e(A_e,Uor),b(f,XNe,_),b(f,Xo,_),M(AL,Xo,null),e(Xo,Jor),e(Xo,Fd),e(Fd,Yor),e(Fd,Fz),e(Fz,Kor),e(Fd,Zor),e(Fd,Tz),e(Tz,err),e(Fd,orr),e(Xo,rrr),e(Xo,yL),e(yL,trr),e(yL,y_e),e(y_e,arr),e(yL,nrr),e(Xo,srr),e(Xo,Ft),M(LL,Ft,null),e(Ft,lrr),e(Ft,L_e),e(L_e,irr),e(Ft,drr),e(Ft,Td),e(Td,crr),e(Td,x_e),e(x_e,frr),e(Td,mrr),e(Td,Mz),e(Mz,grr),e(Td,hrr),e(Ft,prr),M(iT,Ft,null),e(Xo,urr),e(Xo,go),M(xL,go,null),e(go,_rr),e(go,$_e),e($_e,brr),e(go,vrr),e(go,Xa),e(Xa,Frr),e(Xa,k_e),e(k_e,Trr),e(Xa,Mrr),e(Xa,S_e),e(S_e,Err),e(Xa,Crr),e(Xa,R_e),e(R_e,wrr),e(Xa,Arr),e(go,yrr),e(go,$L),e($L,dT),e(dT,P_e),e(P_e,Lrr),e(dT,xrr),e(dT,Ez),e(Ez,$rr),e(dT,krr),e($L,Srr),e($L,cT),e(cT,B_e),e(B_e,Rrr),e(cT,Prr),e(cT,Cz),e(Cz,Brr),e(cT,Irr),e(go,qrr),e(go,fT),e(fT,Nrr),e(fT,I_e),e(I_e,jrr),e(fT,Drr),e(fT,q_e),e(q_e,Grr),e(go,Orr),M(mT,go,null),b(f,zNe,_),b(f,Md,_),e(Md,gT),e(gT,N_e),M(kL,N_e,null),e(Md,Vrr),e(Md,j_e),e(j_e,Xrr),b(f,WNe,_),b(f,zo,_),M(SL,zo,null),e(zo,zrr),e(zo,Ed),e(Ed,Wrr),e(Ed,wz),e(wz,Qrr),e(Ed,Hrr),e(Ed,Az),e(Az,Urr),e(Ed,Jrr),e(zo,Yrr),e(zo,RL),e(RL,Krr),e(RL,D_e),e(D_e,Zrr),e(RL,etr),e(zo,otr),e(zo,Tt),M(PL,Tt,null),e(Tt,rtr),e(Tt,G_e),e(G_e,ttr),e(Tt,atr),e(Tt,Cd),e(Cd,ntr),e(Cd,O_e),e(O_e,str),e(Cd,ltr),e(Cd,yz),e(yz,itr),e(Cd,dtr),e(Tt,ctr),M(hT,Tt,null),e(zo,ftr),e(zo,ho),M(BL,ho,null),e(ho,mtr),e(ho,V_e),e(V_e,gtr),e(ho,htr),e(ho,za),e(za,ptr),e(za,X_e),e(X_e,utr),e(za,_tr),e(za,z_e),e(z_e,btr),e(za,vtr),e(za,W_e),e(W_e,Ftr),e(za,Ttr),e(ho,Mtr),e(ho,Zr),e(Zr,pT),e(pT,Q_e),e(Q_e,Etr),e(pT,Ctr),e(pT,Lz),e(Lz,wtr),e(pT,Atr),e(Zr,ytr),e(Zr,uT),e(uT,H_e),e(H_e,Ltr),e(uT,xtr),e(uT,xz),e(xz,$tr),e(uT,ktr),e(Zr,Str),e(Zr,_T),e(_T,U_e),e(U_e,Rtr),e(_T,Ptr),e(_T,$z),e($z,Btr),e(_T,Itr),e(Zr,qtr),e(Zr,bT),e(bT,J_e),e(J_e,Ntr),e(bT,jtr),e(bT,kz),e(kz,Dtr),e(bT,Gtr),e(Zr,Otr),e(Zr,vT),e(vT,Y_e),e(Y_e,Vtr),e(vT,Xtr),e(vT,Sz),e(Sz,ztr),e(vT,Wtr),e(ho,Qtr),e(ho,FT),e(FT,Htr),e(FT,K_e),e(K_e,Utr),e(FT,Jtr),e(FT,Z_e),e(Z_e,Ytr),e(ho,Ktr),M(TT,ho,null),b(f,QNe,_),b(f,wd,_),e(wd,MT),e(MT,e1e),M(IL,e1e,null),e(wd,Ztr),e(wd,o1e),e(o1e,ear),b(f,HNe,_),b(f,Wo,_),M(qL,Wo,null),e(Wo,oar),e(Wo,Ad),e(Ad,rar),e(Ad,Rz),e(Rz,tar),e(Ad,aar),e(Ad,Pz),e(Pz,nar),e(Ad,sar),e(Wo,lar),e(Wo,NL),e(NL,iar),e(NL,r1e),e(r1e,dar),e(NL,car),e(Wo,far),e(Wo,Mt),M(jL,Mt,null),e(Mt,mar),e(Mt,t1e),e(t1e,gar),e(Mt,har),e(Mt,yd),e(yd,par),e(yd,a1e),e(a1e,uar),e(yd,_ar),e(yd,Bz),e(Bz,bar),e(yd,Far),e(Mt,Tar),M(ET,Mt,null),e(Wo,Mar),e(Wo,po),M(DL,po,null),e(po,Ear),e(po,n1e),e(n1e,Car),e(po,war),e(po,Wa),e(Wa,Aar),e(Wa,s1e),e(s1e,yar),e(Wa,Lar),e(Wa,l1e),e(l1e,xar),e(Wa,$ar),e(Wa,i1e),e(i1e,kar),e(Wa,Sar),e(po,Rar),e(po,Ld),e(Ld,CT),e(CT,d1e),e(d1e,Par),e(CT,Bar),e(CT,Iz),e(Iz,Iar),e(CT,qar),e(Ld,Nar),e(Ld,wT),e(wT,c1e),e(c1e,jar),e(wT,Dar),e(wT,qz),e(qz,Gar),e(wT,Oar),e(Ld,Var),e(Ld,AT),e(AT,f1e),e(f1e,Xar),e(AT,zar),e(AT,Nz),e(Nz,War),e(AT,Qar),e(po,Har),e(po,yT),e(yT,Uar),e(yT,m1e),e(m1e,Jar),e(yT,Yar),e(yT,g1e),e(g1e,Kar),e(po,Zar),M(LT,po,null),b(f,UNe,_),b(f,xd,_),e(xd,xT),e(xT,h1e),M(GL,h1e,null),e(xd,enr),e(xd,p1e),e(p1e,onr),b(f,JNe,_),b(f,Qo,_),M(OL,Qo,null),e(Qo,rnr),e(Qo,$d),e($d,tnr),e($d,jz),e(jz,anr),e($d,nnr),e($d,Dz),e(Dz,snr),e($d,lnr),e(Qo,inr),e(Qo,VL),e(VL,dnr),e(VL,u1e),e(u1e,cnr),e(VL,fnr),e(Qo,mnr),e(Qo,Et),M(XL,Et,null),e(Et,gnr),e(Et,_1e),e(_1e,hnr),e(Et,pnr),e(Et,kd),e(kd,unr),e(kd,b1e),e(b1e,_nr),e(kd,bnr),e(kd,Gz),e(Gz,vnr),e(kd,Fnr),e(Et,Tnr),M($T,Et,null),e(Qo,Mnr),e(Qo,uo),M(zL,uo,null),e(uo,Enr),e(uo,v1e),e(v1e,Cnr),e(uo,wnr),e(uo,Qa),e(Qa,Anr),e(Qa,F1e),e(F1e,ynr),e(Qa,Lnr),e(Qa,T1e),e(T1e,xnr),e(Qa,$nr),e(Qa,M1e),e(M1e,knr),e(Qa,Snr),e(uo,Rnr),e(uo,WL),e(WL,kT),e(kT,E1e),e(E1e,Pnr),e(kT,Bnr),e(kT,Oz),e(Oz,Inr),e(kT,qnr),e(WL,Nnr),e(WL,ST),e(ST,C1e),e(C1e,jnr),e(ST,Dnr),e(ST,Vz),e(Vz,Gnr),e(ST,Onr),e(uo,Vnr),e(uo,RT),e(RT,Xnr),e(RT,w1e),e(w1e,znr),e(RT,Wnr),e(RT,A1e),e(A1e,Qnr),e(uo,Hnr),M(PT,uo,null),b(f,YNe,_),b(f,Sd,_),e(Sd,BT),e(BT,y1e),M(QL,y1e,null),e(Sd,Unr),e(Sd,L1e),e(L1e,Jnr),b(f,KNe,_),b(f,Ho,_),M(HL,Ho,null),e(Ho,Ynr),e(Ho,Rd),e(Rd,Knr),e(Rd,Xz),e(Xz,Znr),e(Rd,esr),e(Rd,zz),e(zz,osr),e(Rd,rsr),e(Ho,tsr),e(Ho,UL),e(UL,asr),e(UL,x1e),e(x1e,nsr),e(UL,ssr),e(Ho,lsr),e(Ho,Ct),M(JL,Ct,null),e(Ct,isr),e(Ct,$1e),e($1e,dsr),e(Ct,csr),e(Ct,Pd),e(Pd,fsr),e(Pd,k1e),e(k1e,msr),e(Pd,gsr),e(Pd,Wz),e(Wz,hsr),e(Pd,psr),e(Ct,usr),M(IT,Ct,null),e(Ho,_sr),e(Ho,_o),M(YL,_o,null),e(_o,bsr),e(_o,S1e),e(S1e,vsr),e(_o,Fsr),e(_o,Ha),e(Ha,Tsr),e(Ha,R1e),e(R1e,Msr),e(Ha,Esr),e(Ha,P1e),e(P1e,Csr),e(Ha,wsr),e(Ha,B1e),e(B1e,Asr),e(Ha,ysr),e(_o,Lsr),e(_o,I1e),e(I1e,qT),e(qT,q1e),e(q1e,xsr),e(qT,$sr),e(qT,Qz),e(Qz,ksr),e(qT,Ssr),e(_o,Rsr),e(_o,NT),e(NT,Psr),e(NT,N1e),e(N1e,Bsr),e(NT,Isr),e(NT,j1e),e(j1e,qsr),e(_o,Nsr),M(jT,_o,null),b(f,ZNe,_),b(f,Bd,_),e(Bd,DT),e(DT,D1e),M(KL,D1e,null),e(Bd,jsr),e(Bd,G1e),e(G1e,Dsr),b(f,eje,_),b(f,Uo,_),M(ZL,Uo,null),e(Uo,Gsr),e(Uo,Id),e(Id,Osr),e(Id,Hz),e(Hz,Vsr),e(Id,Xsr),e(Id,Uz),e(Uz,zsr),e(Id,Wsr),e(Uo,Qsr),e(Uo,e8),e(e8,Hsr),e(e8,O1e),e(O1e,Usr),e(e8,Jsr),e(Uo,Ysr),e(Uo,wt),M(o8,wt,null),e(wt,Ksr),e(wt,V1e),e(V1e,Zsr),e(wt,elr),e(wt,qd),e(qd,olr),e(qd,X1e),e(X1e,rlr),e(qd,tlr),e(qd,Jz),e(Jz,alr),e(qd,nlr),e(wt,slr),M(GT,wt,null),e(Uo,llr),e(Uo,bo),M(r8,bo,null),e(bo,ilr),e(bo,z1e),e(z1e,dlr),e(bo,clr),e(bo,Ua),e(Ua,flr),e(Ua,W1e),e(W1e,mlr),e(Ua,glr),e(Ua,Q1e),e(Q1e,hlr),e(Ua,plr),e(Ua,H1e),e(H1e,ulr),e(Ua,_lr),e(bo,blr),e(bo,Ja),e(Ja,OT),e(OT,U1e),e(U1e,vlr),e(OT,Flr),e(OT,Yz),e(Yz,Tlr),e(OT,Mlr),e(Ja,Elr),e(Ja,VT),e(VT,J1e),e(J1e,Clr),e(VT,wlr),e(VT,Kz),e(Kz,Alr),e(VT,ylr),e(Ja,Llr),e(Ja,XT),e(XT,Y1e),e(Y1e,xlr),e(XT,$lr),e(XT,Zz),e(Zz,klr),e(XT,Slr),e(Ja,Rlr),e(Ja,zT),e(zT,K1e),e(K1e,Plr),e(zT,Blr),e(zT,eW),e(eW,Ilr),e(zT,qlr),e(bo,Nlr),e(bo,WT),e(WT,jlr),e(WT,Z1e),e(Z1e,Dlr),e(WT,Glr),e(WT,e2e),e(e2e,Olr),e(bo,Vlr),M(QT,bo,null),b(f,oje,_),b(f,Nd,_),e(Nd,HT),e(HT,o2e),M(t8,o2e,null),e(Nd,Xlr),e(Nd,r2e),e(r2e,zlr),b(f,rje,_),b(f,Jo,_),M(a8,Jo,null),e(Jo,Wlr),e(Jo,jd),e(jd,Qlr),e(jd,oW),e(oW,Hlr),e(jd,Ulr),e(jd,rW),e(rW,Jlr),e(jd,Ylr),e(Jo,Klr),e(Jo,n8),e(n8,Zlr),e(n8,t2e),e(t2e,eir),e(n8,oir),e(Jo,rir),e(Jo,At),M(s8,At,null),e(At,tir),e(At,a2e),e(a2e,air),e(At,nir),e(At,Dd),e(Dd,sir),e(Dd,n2e),e(n2e,lir),e(Dd,iir),e(Dd,tW),e(tW,dir),e(Dd,cir),e(At,fir),M(UT,At,null),e(Jo,mir),e(Jo,vo),M(l8,vo,null),e(vo,gir),e(vo,s2e),e(s2e,hir),e(vo,pir),e(vo,Ya),e(Ya,uir),e(Ya,l2e),e(l2e,_ir),e(Ya,bir),e(Ya,i2e),e(i2e,vir),e(Ya,Fir),e(Ya,d2e),e(d2e,Tir),e(Ya,Mir),e(vo,Eir),e(vo,c2e),e(c2e,JT),e(JT,f2e),e(f2e,Cir),e(JT,wir),e(JT,aW),e(aW,Air),e(JT,yir),e(vo,Lir),e(vo,YT),e(YT,xir),e(YT,m2e),e(m2e,$ir),e(YT,kir),e(YT,g2e),e(g2e,Sir),e(vo,Rir),M(KT,vo,null),b(f,tje,_),b(f,Gd,_),e(Gd,ZT),e(ZT,h2e),M(i8,h2e,null),e(Gd,Pir),e(Gd,p2e),e(p2e,Bir),b(f,aje,_),b(f,Yo,_),M(d8,Yo,null),e(Yo,Iir),e(Yo,Od),e(Od,qir),e(Od,nW),e(nW,Nir),e(Od,jir),e(Od,sW),e(sW,Dir),e(Od,Gir),e(Yo,Oir),e(Yo,c8),e(c8,Vir),e(c8,u2e),e(u2e,Xir),e(c8,zir),e(Yo,Wir),e(Yo,yt),M(f8,yt,null),e(yt,Qir),e(yt,_2e),e(_2e,Hir),e(yt,Uir),e(yt,Vd),e(Vd,Jir),e(Vd,b2e),e(b2e,Yir),e(Vd,Kir),e(Vd,lW),e(lW,Zir),e(Vd,edr),e(yt,odr),M(e7,yt,null),e(Yo,rdr),e(Yo,wr),M(m8,wr,null),e(wr,tdr),e(wr,v2e),e(v2e,adr),e(wr,ndr),e(wr,Ka),e(Ka,sdr),e(Ka,F2e),e(F2e,ldr),e(Ka,idr),e(Ka,T2e),e(T2e,ddr),e(Ka,cdr),e(Ka,M2e),e(M2e,fdr),e(Ka,mdr),e(wr,gdr),e(wr,N),e(N,o7),e(o7,E2e),e(E2e,hdr),e(o7,pdr),e(o7,iW),e(iW,udr),e(o7,_dr),e(N,bdr),e(N,r7),e(r7,C2e),e(C2e,vdr),e(r7,Fdr),e(r7,dW),e(dW,Tdr),e(r7,Mdr),e(N,Edr),e(N,t7),e(t7,w2e),e(w2e,Cdr),e(t7,wdr),e(t7,cW),e(cW,Adr),e(t7,ydr),e(N,Ldr),e(N,a7),e(a7,A2e),e(A2e,xdr),e(a7,$dr),e(a7,fW),e(fW,kdr),e(a7,Sdr),e(N,Rdr),e(N,n7),e(n7,y2e),e(y2e,Pdr),e(n7,Bdr),e(n7,mW),e(mW,Idr),e(n7,qdr),e(N,Ndr),e(N,s7),e(s7,L2e),e(L2e,jdr),e(s7,Ddr),e(s7,gW),e(gW,Gdr),e(s7,Odr),e(N,Vdr),e(N,l7),e(l7,x2e),e(x2e,Xdr),e(l7,zdr),e(l7,hW),e(hW,Wdr),e(l7,Qdr),e(N,Hdr),e(N,i7),e(i7,$2e),e($2e,Udr),e(i7,Jdr),e(i7,pW),e(pW,Ydr),e(i7,Kdr),e(N,Zdr),e(N,d7),e(d7,k2e),e(k2e,ecr),e(d7,ocr),e(d7,uW),e(uW,rcr),e(d7,tcr),e(N,acr),e(N,c7),e(c7,S2e),e(S2e,ncr),e(c7,scr),e(c7,_W),e(_W,lcr),e(c7,icr),e(N,dcr),e(N,f7),e(f7,R2e),e(R2e,ccr),e(f7,fcr),e(f7,bW),e(bW,mcr),e(f7,gcr),e(N,hcr),e(N,m7),e(m7,P2e),e(P2e,pcr),e(m7,ucr),e(m7,vW),e(vW,_cr),e(m7,bcr),e(N,vcr),e(N,g7),e(g7,B2e),e(B2e,Fcr),e(g7,Tcr),e(g7,FW),e(FW,Mcr),e(g7,Ecr),e(N,Ccr),e(N,h7),e(h7,I2e),e(I2e,wcr),e(h7,Acr),e(h7,TW),e(TW,ycr),e(h7,Lcr),e(N,xcr),e(N,p7),e(p7,q2e),e(q2e,$cr),e(p7,kcr),e(p7,MW),e(MW,Scr),e(p7,Rcr),e(N,Pcr),e(N,u7),e(u7,N2e),e(N2e,Bcr),e(u7,Icr),e(u7,EW),e(EW,qcr),e(u7,Ncr),e(N,jcr),e(N,_7),e(_7,j2e),e(j2e,Dcr),e(_7,Gcr),e(_7,CW),e(CW,Ocr),e(_7,Vcr),e(N,Xcr),e(N,Is),e(Is,D2e),e(D2e,zcr),e(Is,Wcr),e(Is,wW),e(wW,Qcr),e(Is,Hcr),e(Is,AW),e(AW,Ucr),e(Is,Jcr),e(N,Ycr),e(N,b7),e(b7,G2e),e(G2e,Kcr),e(b7,Zcr),e(b7,yW),e(yW,efr),e(b7,ofr),e(N,rfr),e(N,v7),e(v7,O2e),e(O2e,tfr),e(v7,afr),e(v7,LW),e(LW,nfr),e(v7,sfr),e(N,lfr),e(N,F7),e(F7,V2e),e(V2e,ifr),e(F7,dfr),e(F7,xW),e(xW,cfr),e(F7,ffr),e(N,mfr),e(N,T7),e(T7,X2e),e(X2e,gfr),e(T7,hfr),e(T7,$W),e($W,pfr),e(T7,ufr),e(N,_fr),e(N,M7),e(M7,z2e),e(z2e,bfr),e(M7,vfr),e(M7,kW),e(kW,Ffr),e(M7,Tfr),e(N,Mfr),e(N,E7),e(E7,W2e),e(W2e,Efr),e(E7,Cfr),e(E7,SW),e(SW,wfr),e(E7,Afr),e(N,yfr),e(N,C7),e(C7,Q2e),e(Q2e,Lfr),e(C7,xfr),e(C7,RW),e(RW,$fr),e(C7,kfr),e(N,Sfr),e(N,w7),e(w7,H2e),e(H2e,Rfr),e(w7,Pfr),e(w7,PW),e(PW,Bfr),e(w7,Ifr),e(N,qfr),e(N,A7),e(A7,U2e),e(U2e,Nfr),e(A7,jfr),e(A7,BW),e(BW,Dfr),e(A7,Gfr),e(N,Ofr),e(N,y7),e(y7,J2e),e(J2e,Vfr),e(y7,Xfr),e(y7,IW),e(IW,zfr),e(y7,Wfr),e(N,Qfr),e(N,L7),e(L7,Y2e),e(Y2e,Hfr),e(L7,Ufr),e(L7,qW),e(qW,Jfr),e(L7,Yfr),e(N,Kfr),e(N,x7),e(x7,K2e),e(K2e,Zfr),e(x7,emr),e(x7,NW),e(NW,omr),e(x7,rmr),e(N,tmr),e(N,$7),e($7,Z2e),e(Z2e,amr),e($7,nmr),e($7,jW),e(jW,smr),e($7,lmr),e(N,imr),e(N,k7),e(k7,ebe),e(ebe,dmr),e(k7,cmr),e(k7,DW),e(DW,fmr),e(k7,mmr),e(N,gmr),e(N,S7),e(S7,obe),e(obe,hmr),e(S7,pmr),e(S7,GW),e(GW,umr),e(S7,_mr),e(N,bmr),e(N,R7),e(R7,rbe),e(rbe,vmr),e(R7,Fmr),e(R7,OW),e(OW,Tmr),e(R7,Mmr),e(N,Emr),e(N,P7),e(P7,tbe),e(tbe,Cmr),e(P7,wmr),e(P7,VW),e(VW,Amr),e(P7,ymr),e(N,Lmr),e(N,B7),e(B7,abe),e(abe,xmr),e(B7,$mr),e(B7,XW),e(XW,kmr),e(B7,Smr),e(N,Rmr),e(N,I7),e(I7,nbe),e(nbe,Pmr),e(I7,Bmr),e(I7,zW),e(zW,Imr),e(I7,qmr),e(N,Nmr),e(N,q7),e(q7,sbe),e(sbe,jmr),e(q7,Dmr),e(q7,WW),e(WW,Gmr),e(q7,Omr),e(N,Vmr),e(N,N7),e(N7,lbe),e(lbe,Xmr),e(N7,zmr),e(N7,QW),e(QW,Wmr),e(N7,Qmr),e(N,Hmr),e(N,j7),e(j7,ibe),e(ibe,Umr),e(j7,Jmr),e(j7,HW),e(HW,Ymr),e(j7,Kmr),e(N,Zmr),e(N,D7),e(D7,dbe),e(dbe,egr),e(D7,ogr),e(D7,UW),e(UW,rgr),e(D7,tgr),e(N,agr),e(N,G7),e(G7,cbe),e(cbe,ngr),e(G7,sgr),e(G7,JW),e(JW,lgr),e(G7,igr),e(N,dgr),e(N,O7),e(O7,fbe),e(fbe,cgr),e(O7,fgr),e(O7,YW),e(YW,mgr),e(O7,ggr),e(N,hgr),e(N,V7),e(V7,mbe),e(mbe,pgr),e(V7,ugr),e(V7,KW),e(KW,_gr),e(V7,bgr),e(N,vgr),e(N,X7),e(X7,gbe),e(gbe,Fgr),e(X7,Tgr),e(X7,ZW),e(ZW,Mgr),e(X7,Egr),e(N,Cgr),e(N,z7),e(z7,hbe),e(hbe,wgr),e(z7,Agr),e(z7,eQ),e(eQ,ygr),e(z7,Lgr),e(wr,xgr),M(W7,wr,null),b(f,nje,_),b(f,Xd,_),e(Xd,Q7),e(Q7,pbe),M(g8,pbe,null),e(Xd,$gr),e(Xd,ube),e(ube,kgr),b(f,sje,_),b(f,Ko,_),M(h8,Ko,null),e(Ko,Sgr),e(Ko,zd),e(zd,Rgr),e(zd,oQ),e(oQ,Pgr),e(zd,Bgr),e(zd,rQ),e(rQ,Igr),e(zd,qgr),e(Ko,Ngr),e(Ko,p8),e(p8,jgr),e(p8,_be),e(_be,Dgr),e(p8,Ggr),e(Ko,Ogr),e(Ko,Lt),M(u8,Lt,null),e(Lt,Vgr),e(Lt,bbe),e(bbe,Xgr),e(Lt,zgr),e(Lt,Wd),e(Wd,Wgr),e(Wd,vbe),e(vbe,Qgr),e(Wd,Hgr),e(Wd,tQ),e(tQ,Ugr),e(Wd,Jgr),e(Lt,Ygr),M(H7,Lt,null),e(Ko,Kgr),e(Ko,Ar),M(_8,Ar,null),e(Ar,Zgr),e(Ar,Fbe),e(Fbe,ehr),e(Ar,ohr),e(Ar,Za),e(Za,rhr),e(Za,Tbe),e(Tbe,thr),e(Za,ahr),e(Za,Mbe),e(Mbe,nhr),e(Za,shr),e(Za,Ebe),e(Ebe,lhr),e(Za,ihr),e(Ar,dhr),e(Ar,se),e(se,U7),e(U7,Cbe),e(Cbe,chr),e(U7,fhr),e(U7,aQ),e(aQ,mhr),e(U7,ghr),e(se,hhr),e(se,J7),e(J7,wbe),e(wbe,phr),e(J7,uhr),e(J7,nQ),e(nQ,_hr),e(J7,bhr),e(se,vhr),e(se,Y7),e(Y7,Abe),e(Abe,Fhr),e(Y7,Thr),e(Y7,sQ),e(sQ,Mhr),e(Y7,Ehr),e(se,Chr),e(se,K7),e(K7,ybe),e(ybe,whr),e(K7,Ahr),e(K7,lQ),e(lQ,yhr),e(K7,Lhr),e(se,xhr),e(se,Z7),e(Z7,Lbe),e(Lbe,$hr),e(Z7,khr),e(Z7,iQ),e(iQ,Shr),e(Z7,Rhr),e(se,Phr),e(se,eM),e(eM,xbe),e(xbe,Bhr),e(eM,Ihr),e(eM,dQ),e(dQ,qhr),e(eM,Nhr),e(se,jhr),e(se,oM),e(oM,$be),e($be,Dhr),e(oM,Ghr),e(oM,cQ),e(cQ,Ohr),e(oM,Vhr),e(se,Xhr),e(se,rM),e(rM,kbe),e(kbe,zhr),e(rM,Whr),e(rM,fQ),e(fQ,Qhr),e(rM,Hhr),e(se,Uhr),e(se,tM),e(tM,Sbe),e(Sbe,Jhr),e(tM,Yhr),e(tM,mQ),e(mQ,Khr),e(tM,Zhr),e(se,epr),e(se,aM),e(aM,Rbe),e(Rbe,opr),e(aM,rpr),e(aM,gQ),e(gQ,tpr),e(aM,apr),e(se,npr),e(se,nM),e(nM,Pbe),e(Pbe,spr),e(nM,lpr),e(nM,hQ),e(hQ,ipr),e(nM,dpr),e(se,cpr),e(se,sM),e(sM,Bbe),e(Bbe,fpr),e(sM,mpr),e(sM,pQ),e(pQ,gpr),e(sM,hpr),e(se,ppr),e(se,lM),e(lM,Ibe),e(Ibe,upr),e(lM,_pr),e(lM,uQ),e(uQ,bpr),e(lM,vpr),e(se,Fpr),e(se,iM),e(iM,qbe),e(qbe,Tpr),e(iM,Mpr),e(iM,_Q),e(_Q,Epr),e(iM,Cpr),e(se,wpr),e(se,dM),e(dM,Nbe),e(Nbe,Apr),e(dM,ypr),e(dM,bQ),e(bQ,Lpr),e(dM,xpr),e(se,$pr),e(se,cM),e(cM,jbe),e(jbe,kpr),e(cM,Spr),e(cM,vQ),e(vQ,Rpr),e(cM,Ppr),e(se,Bpr),e(se,fM),e(fM,Dbe),e(Dbe,Ipr),e(fM,qpr),e(fM,FQ),e(FQ,Npr),e(fM,jpr),e(se,Dpr),e(se,mM),e(mM,Gbe),e(Gbe,Gpr),e(mM,Opr),e(mM,TQ),e(TQ,Vpr),e(mM,Xpr),e(se,zpr),e(se,gM),e(gM,Obe),e(Obe,Wpr),e(gM,Qpr),e(gM,MQ),e(MQ,Hpr),e(gM,Upr),e(se,Jpr),e(se,hM),e(hM,Vbe),e(Vbe,Ypr),e(hM,Kpr),e(hM,EQ),e(EQ,Zpr),e(hM,eur),e(se,our),e(se,pM),e(pM,Xbe),e(Xbe,rur),e(pM,tur),e(pM,CQ),e(CQ,aur),e(pM,nur),e(se,sur),e(se,uM),e(uM,zbe),e(zbe,lur),e(uM,iur),e(uM,wQ),e(wQ,dur),e(uM,cur),e(se,fur),e(se,_M),e(_M,Wbe),e(Wbe,mur),e(_M,gur),e(_M,AQ),e(AQ,hur),e(_M,pur),e(Ar,uur),M(bM,Ar,null),b(f,lje,_),b(f,Qd,_),e(Qd,vM),e(vM,Qbe),M(b8,Qbe,null),e(Qd,_ur),e(Qd,Hbe),e(Hbe,bur),b(f,ije,_),b(f,Zo,_),M(v8,Zo,null),e(Zo,vur),e(Zo,Hd),e(Hd,Fur),e(Hd,yQ),e(yQ,Tur),e(Hd,Mur),e(Hd,LQ),e(LQ,Eur),e(Hd,Cur),e(Zo,wur),e(Zo,F8),e(F8,Aur),e(F8,Ube),e(Ube,yur),e(F8,Lur),e(Zo,xur),e(Zo,xt),M(T8,xt,null),e(xt,$ur),e(xt,Jbe),e(Jbe,kur),e(xt,Sur),e(xt,Ud),e(Ud,Rur),e(Ud,Ybe),e(Ybe,Pur),e(Ud,Bur),e(Ud,xQ),e(xQ,Iur),e(Ud,qur),e(xt,Nur),M(FM,xt,null),e(Zo,jur),e(Zo,yr),M(M8,yr,null),e(yr,Dur),e(yr,Kbe),e(Kbe,Gur),e(yr,Our),e(yr,en),e(en,Vur),e(en,Zbe),e(Zbe,Xur),e(en,zur),e(en,eve),e(eve,Wur),e(en,Qur),e(en,ove),e(ove,Hur),e(en,Uur),e(yr,Jur),e(yr,Me),e(Me,TM),e(TM,rve),e(rve,Yur),e(TM,Kur),e(TM,$Q),e($Q,Zur),e(TM,e_r),e(Me,o_r),e(Me,MM),e(MM,tve),e(tve,r_r),e(MM,t_r),e(MM,kQ),e(kQ,a_r),e(MM,n_r),e(Me,s_r),e(Me,EM),e(EM,ave),e(ave,l_r),e(EM,i_r),e(EM,SQ),e(SQ,d_r),e(EM,c_r),e(Me,f_r),e(Me,CM),e(CM,nve),e(nve,m_r),e(CM,g_r),e(CM,RQ),e(RQ,h_r),e(CM,p_r),e(Me,u_r),e(Me,wM),e(wM,sve),e(sve,__r),e(wM,b_r),e(wM,PQ),e(PQ,v_r),e(wM,F_r),e(Me,T_r),e(Me,AM),e(AM,lve),e(lve,M_r),e(AM,E_r),e(AM,BQ),e(BQ,C_r),e(AM,w_r),e(Me,A_r),e(Me,yM),e(yM,ive),e(ive,y_r),e(yM,L_r),e(yM,IQ),e(IQ,x_r),e(yM,$_r),e(Me,k_r),e(Me,LM),e(LM,dve),e(dve,S_r),e(LM,R_r),e(LM,qQ),e(qQ,P_r),e(LM,B_r),e(Me,I_r),e(Me,xM),e(xM,cve),e(cve,q_r),e(xM,N_r),e(xM,NQ),e(NQ,j_r),e(xM,D_r),e(Me,G_r),e(Me,$M),e($M,fve),e(fve,O_r),e($M,V_r),e($M,jQ),e(jQ,X_r),e($M,z_r),e(Me,W_r),e(Me,kM),e(kM,mve),e(mve,Q_r),e(kM,H_r),e(kM,DQ),e(DQ,U_r),e(kM,J_r),e(Me,Y_r),e(Me,SM),e(SM,gve),e(gve,K_r),e(SM,Z_r),e(SM,GQ),e(GQ,e1r),e(SM,o1r),e(yr,r1r),M(RM,yr,null),b(f,dje,_),b(f,Jd,_),e(Jd,PM),e(PM,hve),M(E8,hve,null),e(Jd,t1r),e(Jd,pve),e(pve,a1r),b(f,cje,_),b(f,er,_),M(C8,er,null),e(er,n1r),e(er,Yd),e(Yd,s1r),e(Yd,OQ),e(OQ,l1r),e(Yd,i1r),e(Yd,VQ),e(VQ,d1r),e(Yd,c1r),e(er,f1r),e(er,w8),e(w8,m1r),e(w8,uve),e(uve,g1r),e(w8,h1r),e(er,p1r),e(er,$t),M(A8,$t,null),e($t,u1r),e($t,_ve),e(_ve,_1r),e($t,b1r),e($t,Kd),e(Kd,v1r),e(Kd,bve),e(bve,F1r),e(Kd,T1r),e(Kd,XQ),e(XQ,M1r),e(Kd,E1r),e($t,C1r),M(BM,$t,null),e(er,w1r),e(er,Lr),M(y8,Lr,null),e(Lr,A1r),e(Lr,vve),e(vve,y1r),e(Lr,L1r),e(Lr,on),e(on,x1r),e(on,Fve),e(Fve,$1r),e(on,k1r),e(on,Tve),e(Tve,S1r),e(on,R1r),e(on,Mve),e(Mve,P1r),e(on,B1r),e(Lr,I1r),e(Lr,rn),e(rn,IM),e(IM,Eve),e(Eve,q1r),e(IM,N1r),e(IM,zQ),e(zQ,j1r),e(IM,D1r),e(rn,G1r),e(rn,qM),e(qM,Cve),e(Cve,O1r),e(qM,V1r),e(qM,WQ),e(WQ,X1r),e(qM,z1r),e(rn,W1r),e(rn,NM),e(NM,wve),e(wve,Q1r),e(NM,H1r),e(NM,QQ),e(QQ,U1r),e(NM,J1r),e(rn,Y1r),e(rn,jM),e(jM,Ave),e(Ave,K1r),e(jM,Z1r),e(jM,HQ),e(HQ,e2r),e(jM,o2r),e(Lr,r2r),M(DM,Lr,null),b(f,fje,_),b(f,Zd,_),e(Zd,GM),e(GM,yve),M(L8,yve,null),e(Zd,t2r),e(Zd,Lve),e(Lve,a2r),b(f,mje,_),b(f,or,_),M(x8,or,null),e(or,n2r),e(or,ec),e(ec,s2r),e(ec,UQ),e(UQ,l2r),e(ec,i2r),e(ec,JQ),e(JQ,d2r),e(ec,c2r),e(or,f2r),e(or,$8),e($8,m2r),e($8,xve),e(xve,g2r),e($8,h2r),e(or,p2r),e(or,kt),M(k8,kt,null),e(kt,u2r),e(kt,$ve),e($ve,_2r),e(kt,b2r),e(kt,oc),e(oc,v2r),e(oc,kve),e(kve,F2r),e(oc,T2r),e(oc,YQ),e(YQ,M2r),e(oc,E2r),e(kt,C2r),M(OM,kt,null),e(or,w2r),e(or,xr),M(S8,xr,null),e(xr,A2r),e(xr,Sve),e(Sve,y2r),e(xr,L2r),e(xr,tn),e(tn,x2r),e(tn,Rve),e(Rve,$2r),e(tn,k2r),e(tn,Pve),e(Pve,S2r),e(tn,R2r),e(tn,Bve),e(Bve,P2r),e(tn,B2r),e(xr,I2r),e(xr,ie),e(ie,VM),e(VM,Ive),e(Ive,q2r),e(VM,N2r),e(VM,KQ),e(KQ,j2r),e(VM,D2r),e(ie,G2r),e(ie,XM),e(XM,qve),e(qve,O2r),e(XM,V2r),e(XM,ZQ),e(ZQ,X2r),e(XM,z2r),e(ie,W2r),e(ie,zM),e(zM,Nve),e(Nve,Q2r),e(zM,H2r),e(zM,eH),e(eH,U2r),e(zM,J2r),e(ie,Y2r),e(ie,WM),e(WM,jve),e(jve,K2r),e(WM,Z2r),e(WM,oH),e(oH,ebr),e(WM,obr),e(ie,rbr),e(ie,QM),e(QM,Dve),e(Dve,tbr),e(QM,abr),e(QM,rH),e(rH,nbr),e(QM,sbr),e(ie,lbr),e(ie,HM),e(HM,Gve),e(Gve,ibr),e(HM,dbr),e(HM,tH),e(tH,cbr),e(HM,fbr),e(ie,mbr),e(ie,UM),e(UM,Ove),e(Ove,gbr),e(UM,hbr),e(UM,aH),e(aH,pbr),e(UM,ubr),e(ie,_br),e(ie,JM),e(JM,Vve),e(Vve,bbr),e(JM,vbr),e(JM,nH),e(nH,Fbr),e(JM,Tbr),e(ie,Mbr),e(ie,YM),e(YM,Xve),e(Xve,Ebr),e(YM,Cbr),e(YM,sH),e(sH,wbr),e(YM,Abr),e(ie,ybr),e(ie,KM),e(KM,zve),e(zve,Lbr),e(KM,xbr),e(KM,lH),e(lH,$br),e(KM,kbr),e(ie,Sbr),e(ie,ZM),e(ZM,Wve),e(Wve,Rbr),e(ZM,Pbr),e(ZM,iH),e(iH,Bbr),e(ZM,Ibr),e(ie,qbr),e(ie,e4),e(e4,Qve),e(Qve,Nbr),e(e4,jbr),e(e4,dH),e(dH,Dbr),e(e4,Gbr),e(ie,Obr),e(ie,o4),e(o4,Hve),e(Hve,Vbr),e(o4,Xbr),e(o4,cH),e(cH,zbr),e(o4,Wbr),e(ie,Qbr),e(ie,r4),e(r4,Uve),e(Uve,Hbr),e(r4,Ubr),e(r4,fH),e(fH,Jbr),e(r4,Ybr),e(ie,Kbr),e(ie,t4),e(t4,Jve),e(Jve,Zbr),e(t4,evr),e(t4,mH),e(mH,ovr),e(t4,rvr),e(ie,tvr),e(ie,a4),e(a4,Yve),e(Yve,avr),e(a4,nvr),e(a4,gH),e(gH,svr),e(a4,lvr),e(ie,ivr),e(ie,n4),e(n4,Kve),e(Kve,dvr),e(n4,cvr),e(n4,hH),e(hH,fvr),e(n4,mvr),e(ie,gvr),e(ie,s4),e(s4,Zve),e(Zve,hvr),e(s4,pvr),e(s4,pH),e(pH,uvr),e(s4,_vr),e(ie,bvr),e(ie,l4),e(l4,e3e),e(e3e,vvr),e(l4,Fvr),e(l4,uH),e(uH,Tvr),e(l4,Mvr),e(ie,Evr),e(ie,i4),e(i4,o3e),e(o3e,Cvr),e(i4,wvr),e(i4,_H),e(_H,Avr),e(i4,yvr),e(xr,Lvr),M(d4,xr,null),b(f,gje,_),b(f,rc,_),e(rc,c4),e(c4,r3e),M(R8,r3e,null),e(rc,xvr),e(rc,t3e),e(t3e,$vr),b(f,hje,_),b(f,rr,_),M(P8,rr,null),e(rr,kvr),e(rr,tc),e(tc,Svr),e(tc,bH),e(bH,Rvr),e(tc,Pvr),e(tc,vH),e(vH,Bvr),e(tc,Ivr),e(rr,qvr),e(rr,B8),e(B8,Nvr),e(B8,a3e),e(a3e,jvr),e(B8,Dvr),e(rr,Gvr),e(rr,St),M(I8,St,null),e(St,Ovr),e(St,n3e),e(n3e,Vvr),e(St,Xvr),e(St,ac),e(ac,zvr),e(ac,s3e),e(s3e,Wvr),e(ac,Qvr),e(ac,FH),e(FH,Hvr),e(ac,Uvr),e(St,Jvr),M(f4,St,null),e(rr,Yvr),e(rr,$r),M(q8,$r,null),e($r,Kvr),e($r,l3e),e(l3e,Zvr),e($r,e3r),e($r,an),e(an,o3r),e(an,i3e),e(i3e,r3r),e(an,t3r),e(an,d3e),e(d3e,a3r),e(an,n3r),e(an,c3e),e(c3e,s3r),e(an,l3r),e($r,i3r),e($r,ye),e(ye,m4),e(m4,f3e),e(f3e,d3r),e(m4,c3r),e(m4,TH),e(TH,f3r),e(m4,m3r),e(ye,g3r),e(ye,g4),e(g4,m3e),e(m3e,h3r),e(g4,p3r),e(g4,MH),e(MH,u3r),e(g4,_3r),e(ye,b3r),e(ye,h4),e(h4,g3e),e(g3e,v3r),e(h4,F3r),e(h4,EH),e(EH,T3r),e(h4,M3r),e(ye,E3r),e(ye,p4),e(p4,h3e),e(h3e,C3r),e(p4,w3r),e(p4,CH),e(CH,A3r),e(p4,y3r),e(ye,L3r),e(ye,u4),e(u4,p3e),e(p3e,x3r),e(u4,$3r),e(u4,wH),e(wH,k3r),e(u4,S3r),e(ye,R3r),e(ye,_4),e(_4,u3e),e(u3e,P3r),e(_4,B3r),e(_4,AH),e(AH,I3r),e(_4,q3r),e(ye,N3r),e(ye,b4),e(b4,_3e),e(_3e,j3r),e(b4,D3r),e(b4,yH),e(yH,G3r),e(b4,O3r),e(ye,V3r),e(ye,v4),e(v4,b3e),e(b3e,X3r),e(v4,z3r),e(v4,LH),e(LH,W3r),e(v4,Q3r),e(ye,H3r),e(ye,F4),e(F4,v3e),e(v3e,U3r),e(F4,J3r),e(F4,xH),e(xH,Y3r),e(F4,K3r),e(ye,Z3r),e(ye,T4),e(T4,F3e),e(F3e,eFr),e(T4,oFr),e(T4,$H),e($H,rFr),e(T4,tFr),e($r,aFr),M(M4,$r,null),b(f,pje,_),b(f,nc,_),e(nc,E4),e(E4,T3e),M(N8,T3e,null),e(nc,nFr),e(nc,M3e),e(M3e,sFr),b(f,uje,_),b(f,tr,_),M(j8,tr,null),e(tr,lFr),e(tr,sc),e(sc,iFr),e(sc,kH),e(kH,dFr),e(sc,cFr),e(sc,SH),e(SH,fFr),e(sc,mFr),e(tr,gFr),e(tr,D8),e(D8,hFr),e(D8,E3e),e(E3e,pFr),e(D8,uFr),e(tr,_Fr),e(tr,Rt),M(G8,Rt,null),e(Rt,bFr),e(Rt,C3e),e(C3e,vFr),e(Rt,FFr),e(Rt,lc),e(lc,TFr),e(lc,w3e),e(w3e,MFr),e(lc,EFr),e(lc,RH),e(RH,CFr),e(lc,wFr),e(Rt,AFr),M(C4,Rt,null),e(tr,yFr),e(tr,kr),M(O8,kr,null),e(kr,LFr),e(kr,A3e),e(A3e,xFr),e(kr,$Fr),e(kr,nn),e(nn,kFr),e(nn,y3e),e(y3e,SFr),e(nn,RFr),e(nn,L3e),e(L3e,PFr),e(nn,BFr),e(nn,x3e),e(x3e,IFr),e(nn,qFr),e(kr,NFr),e(kr,oe),e(oe,w4),e(w4,$3e),e($3e,jFr),e(w4,DFr),e(w4,PH),e(PH,GFr),e(w4,OFr),e(oe,VFr),e(oe,A4),e(A4,k3e),e(k3e,XFr),e(A4,zFr),e(A4,BH),e(BH,WFr),e(A4,QFr),e(oe,HFr),e(oe,y4),e(y4,S3e),e(S3e,UFr),e(y4,JFr),e(y4,IH),e(IH,YFr),e(y4,KFr),e(oe,ZFr),e(oe,L4),e(L4,R3e),e(R3e,eTr),e(L4,oTr),e(L4,qH),e(qH,rTr),e(L4,tTr),e(oe,aTr),e(oe,x4),e(x4,P3e),e(P3e,nTr),e(x4,sTr),e(x4,NH),e(NH,lTr),e(x4,iTr),e(oe,dTr),e(oe,$4),e($4,B3e),e(B3e,cTr),e($4,fTr),e($4,jH),e(jH,mTr),e($4,gTr),e(oe,hTr),e(oe,k4),e(k4,I3e),e(I3e,pTr),e(k4,uTr),e(k4,DH),e(DH,_Tr),e(k4,bTr),e(oe,vTr),e(oe,S4),e(S4,q3e),e(q3e,FTr),e(S4,TTr),e(S4,GH),e(GH,MTr),e(S4,ETr),e(oe,CTr),e(oe,R4),e(R4,N3e),e(N3e,wTr),e(R4,ATr),e(R4,OH),e(OH,yTr),e(R4,LTr),e(oe,xTr),e(oe,P4),e(P4,j3e),e(j3e,$Tr),e(P4,kTr),e(P4,VH),e(VH,STr),e(P4,RTr),e(oe,PTr),e(oe,B4),e(B4,D3e),e(D3e,BTr),e(B4,ITr),e(B4,XH),e(XH,qTr),e(B4,NTr),e(oe,jTr),e(oe,I4),e(I4,G3e),e(G3e,DTr),e(I4,GTr),e(I4,zH),e(zH,OTr),e(I4,VTr),e(oe,XTr),e(oe,q4),e(q4,O3e),e(O3e,zTr),e(q4,WTr),e(q4,WH),e(WH,QTr),e(q4,HTr),e(oe,UTr),e(oe,N4),e(N4,V3e),e(V3e,JTr),e(N4,YTr),e(N4,QH),e(QH,KTr),e(N4,ZTr),e(oe,e7r),e(oe,j4),e(j4,X3e),e(X3e,o7r),e(j4,r7r),e(j4,HH),e(HH,t7r),e(j4,a7r),e(oe,n7r),e(oe,D4),e(D4,z3e),e(z3e,s7r),e(D4,l7r),e(D4,UH),e(UH,i7r),e(D4,d7r),e(oe,c7r),e(oe,G4),e(G4,W3e),e(W3e,f7r),e(G4,m7r),e(G4,JH),e(JH,g7r),e(G4,h7r),e(oe,p7r),e(oe,O4),e(O4,Q3e),e(Q3e,u7r),e(O4,_7r),e(O4,YH),e(YH,b7r),e(O4,v7r),e(oe,F7r),e(oe,V4),e(V4,H3e),e(H3e,T7r),e(V4,M7r),e(V4,KH),e(KH,E7r),e(V4,C7r),e(oe,w7r),e(oe,X4),e(X4,U3e),e(U3e,A7r),e(X4,y7r),e(X4,ZH),e(ZH,L7r),e(X4,x7r),e(oe,$7r),e(oe,z4),e(z4,J3e),e(J3e,k7r),e(z4,S7r),e(z4,eU),e(eU,R7r),e(z4,P7r),e(oe,B7r),e(oe,W4),e(W4,Y3e),e(Y3e,I7r),e(W4,q7r),e(W4,oU),e(oU,N7r),e(W4,j7r),e(oe,D7r),e(oe,Q4),e(Q4,K3e),e(K3e,G7r),e(Q4,O7r),e(Q4,rU),e(rU,V7r),e(Q4,X7r),e(oe,z7r),e(oe,H4),e(H4,Z3e),e(Z3e,W7r),e(H4,Q7r),e(H4,tU),e(tU,H7r),e(H4,U7r),e(oe,J7r),e(oe,U4),e(U4,eFe),e(eFe,Y7r),e(U4,K7r),e(U4,aU),e(aU,Z7r),e(U4,eMr),e(oe,oMr),e(oe,J4),e(J4,oFe),e(oFe,rMr),e(J4,tMr),e(J4,nU),e(nU,aMr),e(J4,nMr),e(kr,sMr),M(Y4,kr,null),b(f,_je,_),b(f,ic,_),e(ic,K4),e(K4,rFe),M(V8,rFe,null),e(ic,lMr),e(ic,tFe),e(tFe,iMr),b(f,bje,_),b(f,ar,_),M(X8,ar,null),e(ar,dMr),e(ar,dc),e(dc,cMr),e(dc,sU),e(sU,fMr),e(dc,mMr),e(dc,lU),e(lU,gMr),e(dc,hMr),e(ar,pMr),e(ar,z8),e(z8,uMr),e(z8,aFe),e(aFe,_Mr),e(z8,bMr),e(ar,vMr),e(ar,Pt),M(W8,Pt,null),e(Pt,FMr),e(Pt,nFe),e(nFe,TMr),e(Pt,MMr),e(Pt,cc),e(cc,EMr),e(cc,sFe),e(sFe,CMr),e(cc,wMr),e(cc,iU),e(iU,AMr),e(cc,yMr),e(Pt,LMr),M(Z4,Pt,null),e(ar,xMr),e(ar,Sr),M(Q8,Sr,null),e(Sr,$Mr),e(Sr,lFe),e(lFe,kMr),e(Sr,SMr),e(Sr,sn),e(sn,RMr),e(sn,iFe),e(iFe,PMr),e(sn,BMr),e(sn,dFe),e(dFe,IMr),e(sn,qMr),e(sn,cFe),e(cFe,NMr),e(sn,jMr),e(Sr,DMr),e(Sr,pe),e(pe,eE),e(eE,fFe),e(fFe,GMr),e(eE,OMr),e(eE,dU),e(dU,VMr),e(eE,XMr),e(pe,zMr),e(pe,oE),e(oE,mFe),e(mFe,WMr),e(oE,QMr),e(oE,cU),e(cU,HMr),e(oE,UMr),e(pe,JMr),e(pe,rE),e(rE,gFe),e(gFe,YMr),e(rE,KMr),e(rE,fU),e(fU,ZMr),e(rE,e4r),e(pe,o4r),e(pe,tE),e(tE,hFe),e(hFe,r4r),e(tE,t4r),e(tE,mU),e(mU,a4r),e(tE,n4r),e(pe,s4r),e(pe,aE),e(aE,pFe),e(pFe,l4r),e(aE,i4r),e(aE,gU),e(gU,d4r),e(aE,c4r),e(pe,f4r),e(pe,nE),e(nE,uFe),e(uFe,m4r),e(nE,g4r),e(nE,hU),e(hU,h4r),e(nE,p4r),e(pe,u4r),e(pe,sE),e(sE,_Fe),e(_Fe,_4r),e(sE,b4r),e(sE,pU),e(pU,v4r),e(sE,F4r),e(pe,T4r),e(pe,lE),e(lE,bFe),e(bFe,M4r),e(lE,E4r),e(lE,uU),e(uU,C4r),e(lE,w4r),e(pe,A4r),e(pe,iE),e(iE,vFe),e(vFe,y4r),e(iE,L4r),e(iE,_U),e(_U,x4r),e(iE,$4r),e(pe,k4r),e(pe,dE),e(dE,FFe),e(FFe,S4r),e(dE,R4r),e(dE,bU),e(bU,P4r),e(dE,B4r),e(pe,I4r),e(pe,cE),e(cE,TFe),e(TFe,q4r),e(cE,N4r),e(cE,vU),e(vU,j4r),e(cE,D4r),e(pe,G4r),e(pe,fE),e(fE,MFe),e(MFe,O4r),e(fE,V4r),e(fE,FU),e(FU,X4r),e(fE,z4r),e(pe,W4r),e(pe,mE),e(mE,EFe),e(EFe,Q4r),e(mE,H4r),e(mE,TU),e(TU,U4r),e(mE,J4r),e(pe,Y4r),e(pe,gE),e(gE,CFe),e(CFe,K4r),e(gE,Z4r),e(gE,MU),e(MU,eEr),e(gE,oEr),e(pe,rEr),e(pe,hE),e(hE,wFe),e(wFe,tEr),e(hE,aEr),e(hE,EU),e(EU,nEr),e(hE,sEr),e(pe,lEr),e(pe,pE),e(pE,AFe),e(AFe,iEr),e(pE,dEr),e(pE,CU),e(CU,cEr),e(pE,fEr),e(pe,mEr),e(pe,uE),e(uE,yFe),e(yFe,gEr),e(uE,hEr),e(uE,wU),e(wU,pEr),e(uE,uEr),e(Sr,_Er),M(_E,Sr,null),b(f,vje,_),b(f,fc,_),e(fc,bE),e(bE,LFe),M(H8,LFe,null),e(fc,bEr),e(fc,xFe),e(xFe,vEr),b(f,Fje,_),b(f,nr,_),M(U8,nr,null),e(nr,FEr),e(nr,mc),e(mc,TEr),e(mc,AU),e(AU,MEr),e(mc,EEr),e(mc,yU),e(yU,CEr),e(mc,wEr),e(nr,AEr),e(nr,J8),e(J8,yEr),e(J8,$Fe),e($Fe,LEr),e(J8,xEr),e(nr,$Er),e(nr,Bt),M(Y8,Bt,null),e(Bt,kEr),e(Bt,kFe),e(kFe,SEr),e(Bt,REr),e(Bt,gc),e(gc,PEr),e(gc,SFe),e(SFe,BEr),e(gc,IEr),e(gc,LU),e(LU,qEr),e(gc,NEr),e(Bt,jEr),M(vE,Bt,null),e(nr,DEr),e(nr,Rr),M(K8,Rr,null),e(Rr,GEr),e(Rr,RFe),e(RFe,OEr),e(Rr,VEr),e(Rr,ln),e(ln,XEr),e(ln,PFe),e(PFe,zEr),e(ln,WEr),e(ln,BFe),e(BFe,QEr),e(ln,HEr),e(ln,IFe),e(IFe,UEr),e(ln,JEr),e(Rr,YEr),e(Rr,Z8),e(Z8,FE),e(FE,qFe),e(qFe,KEr),e(FE,ZEr),e(FE,xU),e(xU,eCr),e(FE,oCr),e(Z8,rCr),e(Z8,TE),e(TE,NFe),e(NFe,tCr),e(TE,aCr),e(TE,$U),e($U,nCr),e(TE,sCr),e(Rr,lCr),M(ME,Rr,null),b(f,Tje,_),b(f,hc,_),e(hc,EE),e(EE,jFe),M(e9,jFe,null),e(hc,iCr),e(hc,DFe),e(DFe,dCr),b(f,Mje,_),b(f,sr,_),M(o9,sr,null),e(sr,cCr),e(sr,pc),e(pc,fCr),e(pc,kU),e(kU,mCr),e(pc,gCr),e(pc,SU),e(SU,hCr),e(pc,pCr),e(sr,uCr),e(sr,r9),e(r9,_Cr),e(r9,GFe),e(GFe,bCr),e(r9,vCr),e(sr,FCr),e(sr,It),M(t9,It,null),e(It,TCr),e(It,OFe),e(OFe,MCr),e(It,ECr),e(It,uc),e(uc,CCr),e(uc,VFe),e(VFe,wCr),e(uc,ACr),e(uc,RU),e(RU,yCr),e(uc,LCr),e(It,xCr),M(CE,It,null),e(sr,$Cr),e(sr,Pr),M(a9,Pr,null),e(Pr,kCr),e(Pr,XFe),e(XFe,SCr),e(Pr,RCr),e(Pr,dn),e(dn,PCr),e(dn,zFe),e(zFe,BCr),e(dn,ICr),e(dn,WFe),e(WFe,qCr),e(dn,NCr),e(dn,QFe),e(QFe,jCr),e(dn,DCr),e(Pr,GCr),e(Pr,HFe),e(HFe,wE),e(wE,UFe),e(UFe,OCr),e(wE,VCr),e(wE,PU),e(PU,XCr),e(wE,zCr),e(Pr,WCr),M(AE,Pr,null),b(f,Eje,_),b(f,_c,_),e(_c,yE),e(yE,JFe),M(n9,JFe,null),e(_c,QCr),e(_c,YFe),e(YFe,HCr),b(f,Cje,_),b(f,lr,_),M(s9,lr,null),e(lr,UCr),e(lr,bc),e(bc,JCr),e(bc,BU),e(BU,YCr),e(bc,KCr),e(bc,IU),e(IU,ZCr),e(bc,e5r),e(lr,o5r),e(lr,l9),e(l9,r5r),e(l9,KFe),e(KFe,t5r),e(l9,a5r),e(lr,n5r),e(lr,qt),M(i9,qt,null),e(qt,s5r),e(qt,ZFe),e(ZFe,l5r),e(qt,i5r),e(qt,vc),e(vc,d5r),e(vc,eTe),e(eTe,c5r),e(vc,f5r),e(vc,qU),e(qU,m5r),e(vc,g5r),e(qt,h5r),M(LE,qt,null),e(lr,p5r),e(lr,Br),M(d9,Br,null),e(Br,u5r),e(Br,oTe),e(oTe,_5r),e(Br,b5r),e(Br,cn),e(cn,v5r),e(cn,rTe),e(rTe,F5r),e(cn,T5r),e(cn,tTe),e(tTe,M5r),e(cn,E5r),e(cn,aTe),e(aTe,C5r),e(cn,w5r),e(Br,A5r),e(Br,de),e(de,xE),e(xE,nTe),e(nTe,y5r),e(xE,L5r),e(xE,NU),e(NU,x5r),e(xE,$5r),e(de,k5r),e(de,$E),e($E,sTe),e(sTe,S5r),e($E,R5r),e($E,jU),e(jU,P5r),e($E,B5r),e(de,I5r),e(de,kE),e(kE,lTe),e(lTe,q5r),e(kE,N5r),e(kE,DU),e(DU,j5r),e(kE,D5r),e(de,G5r),e(de,SE),e(SE,iTe),e(iTe,O5r),e(SE,V5r),e(SE,GU),e(GU,X5r),e(SE,z5r),e(de,W5r),e(de,RE),e(RE,dTe),e(dTe,Q5r),e(RE,H5r),e(RE,OU),e(OU,U5r),e(RE,J5r),e(de,Y5r),e(de,PE),e(PE,cTe),e(cTe,K5r),e(PE,Z5r),e(PE,VU),e(VU,ewr),e(PE,owr),e(de,rwr),e(de,BE),e(BE,fTe),e(fTe,twr),e(BE,awr),e(BE,XU),e(XU,nwr),e(BE,swr),e(de,lwr),e(de,IE),e(IE,mTe),e(mTe,iwr),e(IE,dwr),e(IE,zU),e(zU,cwr),e(IE,fwr),e(de,mwr),e(de,qE),e(qE,gTe),e(gTe,gwr),e(qE,hwr),e(qE,WU),e(WU,pwr),e(qE,uwr),e(de,_wr),e(de,NE),e(NE,hTe),e(hTe,bwr),e(NE,vwr),e(NE,QU),e(QU,Fwr),e(NE,Twr),e(de,Mwr),e(de,jE),e(jE,pTe),e(pTe,Ewr),e(jE,Cwr),e(jE,HU),e(HU,wwr),e(jE,Awr),e(de,ywr),e(de,DE),e(DE,uTe),e(uTe,Lwr),e(DE,xwr),e(DE,UU),e(UU,$wr),e(DE,kwr),e(de,Swr),e(de,GE),e(GE,_Te),e(_Te,Rwr),e(GE,Pwr),e(GE,JU),e(JU,Bwr),e(GE,Iwr),e(de,qwr),e(de,OE),e(OE,bTe),e(bTe,Nwr),e(OE,jwr),e(OE,YU),e(YU,Dwr),e(OE,Gwr),e(de,Owr),e(de,VE),e(VE,vTe),e(vTe,Vwr),e(VE,Xwr),e(VE,KU),e(KU,zwr),e(VE,Wwr),e(de,Qwr),e(de,XE),e(XE,FTe),e(FTe,Hwr),e(XE,Uwr),e(XE,ZU),e(ZU,Jwr),e(XE,Ywr),e(de,Kwr),e(de,zE),e(zE,TTe),e(TTe,Zwr),e(zE,e0r),e(zE,eJ),e(eJ,o0r),e(zE,r0r),e(de,t0r),e(de,WE),e(WE,MTe),e(MTe,a0r),e(WE,n0r),e(WE,oJ),e(oJ,s0r),e(WE,l0r),e(de,i0r),e(de,QE),e(QE,ETe),e(ETe,d0r),e(QE,c0r),e(QE,rJ),e(rJ,f0r),e(QE,m0r),e(de,g0r),e(de,HE),e(HE,CTe),e(CTe,h0r),e(HE,p0r),e(HE,tJ),e(tJ,u0r),e(HE,_0r),e(Br,b0r),M(UE,Br,null),b(f,wje,_),b(f,Fc,_),e(Fc,JE),e(JE,wTe),M(c9,wTe,null),e(Fc,v0r),e(Fc,ATe),e(ATe,F0r),b(f,Aje,_),b(f,ir,_),M(f9,ir,null),e(ir,T0r),e(ir,Tc),e(Tc,M0r),e(Tc,aJ),e(aJ,E0r),e(Tc,C0r),e(Tc,nJ),e(nJ,w0r),e(Tc,A0r),e(ir,y0r),e(ir,m9),e(m9,L0r),e(m9,yTe),e(yTe,x0r),e(m9,$0r),e(ir,k0r),e(ir,Nt),M(g9,Nt,null),e(Nt,S0r),e(Nt,LTe),e(LTe,R0r),e(Nt,P0r),e(Nt,Mc),e(Mc,B0r),e(Mc,xTe),e(xTe,I0r),e(Mc,q0r),e(Mc,sJ),e(sJ,N0r),e(Mc,j0r),e(Nt,D0r),M(YE,Nt,null),e(ir,G0r),e(ir,Ir),M(h9,Ir,null),e(Ir,O0r),e(Ir,$Te),e($Te,V0r),e(Ir,X0r),e(Ir,fn),e(fn,z0r),e(fn,kTe),e(kTe,W0r),e(fn,Q0r),e(fn,STe),e(STe,H0r),e(fn,U0r),e(fn,RTe),e(RTe,J0r),e(fn,Y0r),e(Ir,K0r),e(Ir,ce),e(ce,KE),e(KE,PTe),e(PTe,Z0r),e(KE,eAr),e(KE,lJ),e(lJ,oAr),e(KE,rAr),e(ce,tAr),e(ce,ZE),e(ZE,BTe),e(BTe,aAr),e(ZE,nAr),e(ZE,iJ),e(iJ,sAr),e(ZE,lAr),e(ce,iAr),e(ce,eC),e(eC,ITe),e(ITe,dAr),e(eC,cAr),e(eC,dJ),e(dJ,fAr),e(eC,mAr),e(ce,gAr),e(ce,oC),e(oC,qTe),e(qTe,hAr),e(oC,pAr),e(oC,cJ),e(cJ,uAr),e(oC,_Ar),e(ce,bAr),e(ce,rC),e(rC,NTe),e(NTe,vAr),e(rC,FAr),e(rC,fJ),e(fJ,TAr),e(rC,MAr),e(ce,EAr),e(ce,tC),e(tC,jTe),e(jTe,CAr),e(tC,wAr),e(tC,mJ),e(mJ,AAr),e(tC,yAr),e(ce,LAr),e(ce,aC),e(aC,DTe),e(DTe,xAr),e(aC,$Ar),e(aC,gJ),e(gJ,kAr),e(aC,SAr),e(ce,RAr),e(ce,nC),e(nC,GTe),e(GTe,PAr),e(nC,BAr),e(nC,hJ),e(hJ,IAr),e(nC,qAr),e(ce,NAr),e(ce,sC),e(sC,OTe),e(OTe,jAr),e(sC,DAr),e(sC,pJ),e(pJ,GAr),e(sC,OAr),e(ce,VAr),e(ce,lC),e(lC,VTe),e(VTe,XAr),e(lC,zAr),e(lC,uJ),e(uJ,WAr),e(lC,QAr),e(ce,HAr),e(ce,iC),e(iC,XTe),e(XTe,UAr),e(iC,JAr),e(iC,_J),e(_J,YAr),e(iC,KAr),e(ce,ZAr),e(ce,dC),e(dC,zTe),e(zTe,e6r),e(dC,o6r),e(dC,bJ),e(bJ,r6r),e(dC,t6r),e(ce,a6r),e(ce,cC),e(cC,WTe),e(WTe,n6r),e(cC,s6r),e(cC,vJ),e(vJ,l6r),e(cC,i6r),e(ce,d6r),e(ce,fC),e(fC,QTe),e(QTe,c6r),e(fC,f6r),e(fC,FJ),e(FJ,m6r),e(fC,g6r),e(ce,h6r),e(ce,mC),e(mC,HTe),e(HTe,p6r),e(mC,u6r),e(mC,TJ),e(TJ,_6r),e(mC,b6r),e(ce,v6r),e(ce,gC),e(gC,UTe),e(UTe,F6r),e(gC,T6r),e(gC,MJ),e(MJ,M6r),e(gC,E6r),e(ce,C6r),e(ce,hC),e(hC,JTe),e(JTe,w6r),e(hC,A6r),e(hC,EJ),e(EJ,y6r),e(hC,L6r),e(ce,x6r),e(ce,pC),e(pC,YTe),e(YTe,$6r),e(pC,k6r),e(pC,CJ),e(CJ,S6r),e(pC,R6r),e(ce,P6r),e(ce,uC),e(uC,KTe),e(KTe,B6r),e(uC,I6r),e(uC,wJ),e(wJ,q6r),e(uC,N6r),e(ce,j6r),e(ce,_C),e(_C,ZTe),e(ZTe,D6r),e(_C,G6r),e(_C,AJ),e(AJ,O6r),e(_C,V6r),e(Ir,X6r),M(bC,Ir,null),b(f,yje,_),b(f,Ec,_),e(Ec,vC),e(vC,e7e),M(p9,e7e,null),e(Ec,z6r),e(Ec,o7e),e(o7e,W6r),b(f,Lje,_),b(f,dr,_),M(u9,dr,null),e(dr,Q6r),e(dr,Cc),e(Cc,H6r),e(Cc,yJ),e(yJ,U6r),e(Cc,J6r),e(Cc,LJ),e(LJ,Y6r),e(Cc,K6r),e(dr,Z6r),e(dr,_9),e(_9,eyr),e(_9,r7e),e(r7e,oyr),e(_9,ryr),e(dr,tyr),e(dr,jt),M(b9,jt,null),e(jt,ayr),e(jt,t7e),e(t7e,nyr),e(jt,syr),e(jt,wc),e(wc,lyr),e(wc,a7e),e(a7e,iyr),e(wc,dyr),e(wc,xJ),e(xJ,cyr),e(wc,fyr),e(jt,myr),M(FC,jt,null),e(dr,gyr),e(dr,qr),M(v9,qr,null),e(qr,hyr),e(qr,n7e),e(n7e,pyr),e(qr,uyr),e(qr,mn),e(mn,_yr),e(mn,s7e),e(s7e,byr),e(mn,vyr),e(mn,l7e),e(l7e,Fyr),e(mn,Tyr),e(mn,i7e),e(i7e,Myr),e(mn,Eyr),e(qr,Cyr),e(qr,d7e),e(d7e,TC),e(TC,c7e),e(c7e,wyr),e(TC,Ayr),e(TC,$J),e($J,yyr),e(TC,Lyr),e(qr,xyr),M(MC,qr,null),b(f,xje,_),b(f,Ac,_),e(Ac,EC),e(EC,f7e),M(F9,f7e,null),e(Ac,$yr),e(Ac,m7e),e(m7e,kyr),b(f,$je,_),b(f,cr,_),M(T9,cr,null),e(cr,Syr),e(cr,yc),e(yc,Ryr),e(yc,kJ),e(kJ,Pyr),e(yc,Byr),e(yc,SJ),e(SJ,Iyr),e(yc,qyr),e(cr,Nyr),e(cr,M9),e(M9,jyr),e(M9,g7e),e(g7e,Dyr),e(M9,Gyr),e(cr,Oyr),e(cr,Dt),M(E9,Dt,null),e(Dt,Vyr),e(Dt,h7e),e(h7e,Xyr),e(Dt,zyr),e(Dt,Lc),e(Lc,Wyr),e(Lc,p7e),e(p7e,Qyr),e(Lc,Hyr),e(Lc,RJ),e(RJ,Uyr),e(Lc,Jyr),e(Dt,Yyr),M(CC,Dt,null),e(cr,Kyr),e(cr,Nr),M(C9,Nr,null),e(Nr,Zyr),e(Nr,u7e),e(u7e,eLr),e(Nr,oLr),e(Nr,gn),e(gn,rLr),e(gn,_7e),e(_7e,tLr),e(gn,aLr),e(gn,b7e),e(b7e,nLr),e(gn,sLr),e(gn,v7e),e(v7e,lLr),e(gn,iLr),e(Nr,dLr),e(Nr,F7e),e(F7e,wC),e(wC,T7e),e(T7e,cLr),e(wC,fLr),e(wC,PJ),e(PJ,mLr),e(wC,gLr),e(Nr,hLr),M(AC,Nr,null),b(f,kje,_),b(f,xc,_),e(xc,yC),e(yC,M7e),M(w9,M7e,null),e(xc,pLr),e(xc,E7e),e(E7e,uLr),b(f,Sje,_),b(f,fr,_),M(A9,fr,null),e(fr,_Lr),e(fr,$c),e($c,bLr),e($c,BJ),e(BJ,vLr),e($c,FLr),e($c,IJ),e(IJ,TLr),e($c,MLr),e(fr,ELr),e(fr,y9),e(y9,CLr),e(y9,C7e),e(C7e,wLr),e(y9,ALr),e(fr,yLr),e(fr,Gt),M(L9,Gt,null),e(Gt,LLr),e(Gt,w7e),e(w7e,xLr),e(Gt,$Lr),e(Gt,kc),e(kc,kLr),e(kc,A7e),e(A7e,SLr),e(kc,RLr),e(kc,qJ),e(qJ,PLr),e(kc,BLr),e(Gt,ILr),M(LC,Gt,null),e(fr,qLr),e(fr,jr),M(x9,jr,null),e(jr,NLr),e(jr,y7e),e(y7e,jLr),e(jr,DLr),e(jr,hn),e(hn,GLr),e(hn,L7e),e(L7e,OLr),e(hn,VLr),e(hn,x7e),e(x7e,XLr),e(hn,zLr),e(hn,$7e),e($7e,WLr),e(hn,QLr),e(jr,HLr),e(jr,te),e(te,xC),e(xC,k7e),e(k7e,ULr),e(xC,JLr),e(xC,NJ),e(NJ,YLr),e(xC,KLr),e(te,ZLr),e(te,$C),e($C,S7e),e(S7e,e8r),e($C,o8r),e($C,jJ),e(jJ,r8r),e($C,t8r),e(te,a8r),e(te,kC),e(kC,R7e),e(R7e,n8r),e(kC,s8r),e(kC,DJ),e(DJ,l8r),e(kC,i8r),e(te,d8r),e(te,SC),e(SC,P7e),e(P7e,c8r),e(SC,f8r),e(SC,GJ),e(GJ,m8r),e(SC,g8r),e(te,h8r),e(te,RC),e(RC,B7e),e(B7e,p8r),e(RC,u8r),e(RC,OJ),e(OJ,_8r),e(RC,b8r),e(te,v8r),e(te,PC),e(PC,I7e),e(I7e,F8r),e(PC,T8r),e(PC,VJ),e(VJ,M8r),e(PC,E8r),e(te,C8r),e(te,BC),e(BC,q7e),e(q7e,w8r),e(BC,A8r),e(BC,XJ),e(XJ,y8r),e(BC,L8r),e(te,x8r),e(te,IC),e(IC,N7e),e(N7e,$8r),e(IC,k8r),e(IC,zJ),e(zJ,S8r),e(IC,R8r),e(te,P8r),e(te,qC),e(qC,j7e),e(j7e,B8r),e(qC,I8r),e(qC,WJ),e(WJ,q8r),e(qC,N8r),e(te,j8r),e(te,NC),e(NC,D7e),e(D7e,D8r),e(NC,G8r),e(NC,QJ),e(QJ,O8r),e(NC,V8r),e(te,X8r),e(te,jC),e(jC,G7e),e(G7e,z8r),e(jC,W8r),e(jC,HJ),e(HJ,Q8r),e(jC,H8r),e(te,U8r),e(te,DC),e(DC,O7e),e(O7e,J8r),e(DC,Y8r),e(DC,UJ),e(UJ,K8r),e(DC,Z8r),e(te,e9r),e(te,GC),e(GC,V7e),e(V7e,o9r),e(GC,r9r),e(GC,JJ),e(JJ,t9r),e(GC,a9r),e(te,n9r),e(te,OC),e(OC,X7e),e(X7e,s9r),e(OC,l9r),e(OC,YJ),e(YJ,i9r),e(OC,d9r),e(te,c9r),e(te,VC),e(VC,z7e),e(z7e,f9r),e(VC,m9r),e(VC,KJ),e(KJ,g9r),e(VC,h9r),e(te,p9r),e(te,XC),e(XC,W7e),e(W7e,u9r),e(XC,_9r),e(XC,ZJ),e(ZJ,b9r),e(XC,v9r),e(te,F9r),e(te,zC),e(zC,Q7e),e(Q7e,T9r),e(zC,M9r),e(zC,eY),e(eY,E9r),e(zC,C9r),e(te,w9r),e(te,WC),e(WC,H7e),e(H7e,A9r),e(WC,y9r),e(WC,oY),e(oY,L9r),e(WC,x9r),e(te,$9r),e(te,QC),e(QC,U7e),e(U7e,k9r),e(QC,S9r),e(QC,rY),e(rY,R9r),e(QC,P9r),e(te,B9r),e(te,HC),e(HC,J7e),e(J7e,I9r),e(HC,q9r),e(HC,tY),e(tY,N9r),e(HC,j9r),e(te,D9r),e(te,UC),e(UC,Y7e),e(Y7e,G9r),e(UC,O9r),e(UC,aY),e(aY,V9r),e(UC,X9r),e(te,z9r),e(te,JC),e(JC,K7e),e(K7e,W9r),e(JC,Q9r),e(JC,nY),e(nY,H9r),e(JC,U9r),e(te,J9r),e(te,YC),e(YC,Z7e),e(Z7e,Y9r),e(YC,K9r),e(YC,sY),e(sY,Z9r),e(YC,exr),e(te,oxr),e(te,KC),e(KC,eMe),e(eMe,rxr),e(KC,txr),e(KC,lY),e(lY,axr),e(KC,nxr),e(te,sxr),e(te,ZC),e(ZC,oMe),e(oMe,lxr),e(ZC,ixr),e(ZC,iY),e(iY,dxr),e(ZC,cxr),e(jr,fxr),M(e5,jr,null),b(f,Rje,_),b(f,Sc,_),e(Sc,o5),e(o5,rMe),M($9,rMe,null),e(Sc,mxr),e(Sc,tMe),e(tMe,gxr),b(f,Pje,_),b(f,mr,_),M(k9,mr,null),e(mr,hxr),e(mr,Rc),e(Rc,pxr),e(Rc,dY),e(dY,uxr),e(Rc,_xr),e(Rc,cY),e(cY,bxr),e(Rc,vxr),e(mr,Fxr),e(mr,S9),e(S9,Txr),e(S9,aMe),e(aMe,Mxr),e(S9,Exr),e(mr,Cxr),e(mr,Ot),M(R9,Ot,null),e(Ot,wxr),e(Ot,nMe),e(nMe,Axr),e(Ot,yxr),e(Ot,Pc),e(Pc,Lxr),e(Pc,sMe),e(sMe,xxr),e(Pc,$xr),e(Pc,fY),e(fY,kxr),e(Pc,Sxr),e(Ot,Rxr),M(r5,Ot,null),e(mr,Pxr),e(mr,Dr),M(P9,Dr,null),e(Dr,Bxr),e(Dr,lMe),e(lMe,Ixr),e(Dr,qxr),e(Dr,pn),e(pn,Nxr),e(pn,iMe),e(iMe,jxr),e(pn,Dxr),e(pn,dMe),e(dMe,Gxr),e(pn,Oxr),e(pn,cMe),e(cMe,Vxr),e(pn,Xxr),e(Dr,zxr),e(Dr,Re),e(Re,t5),e(t5,fMe),e(fMe,Wxr),e(t5,Qxr),e(t5,mY),e(mY,Hxr),e(t5,Uxr),e(Re,Jxr),e(Re,a5),e(a5,mMe),e(mMe,Yxr),e(a5,Kxr),e(a5,gY),e(gY,Zxr),e(a5,e$r),e(Re,o$r),e(Re,n5),e(n5,gMe),e(gMe,r$r),e(n5,t$r),e(n5,hY),e(hY,a$r),e(n5,n$r),e(Re,s$r),e(Re,s5),e(s5,hMe),e(hMe,l$r),e(s5,i$r),e(s5,pY),e(pY,d$r),e(s5,c$r),e(Re,f$r),e(Re,l5),e(l5,pMe),e(pMe,m$r),e(l5,g$r),e(l5,uY),e(uY,h$r),e(l5,p$r),e(Re,u$r),e(Re,i5),e(i5,uMe),e(uMe,_$r),e(i5,b$r),e(i5,_Y),e(_Y,v$r),e(i5,F$r),e(Re,T$r),e(Re,d5),e(d5,_Me),e(_Me,M$r),e(d5,E$r),e(d5,bY),e(bY,C$r),e(d5,w$r),e(Re,A$r),e(Re,c5),e(c5,bMe),e(bMe,y$r),e(c5,L$r),e(c5,vY),e(vY,x$r),e(c5,$$r),e(Re,k$r),e(Re,f5),e(f5,vMe),e(vMe,S$r),e(f5,R$r),e(f5,FY),e(FY,P$r),e(f5,B$r),e(Dr,I$r),M(m5,Dr,null),b(f,Bje,_),b(f,Bc,_),e(Bc,g5),e(g5,FMe),M(B9,FMe,null),e(Bc,q$r),e(Bc,TMe),e(TMe,N$r),b(f,Ije,_),b(f,gr,_),M(I9,gr,null),e(gr,j$r),e(gr,Ic),e(Ic,D$r),e(Ic,TY),e(TY,G$r),e(Ic,O$r),e(Ic,MY),e(MY,V$r),e(Ic,X$r),e(gr,z$r),e(gr,q9),e(q9,W$r),e(q9,MMe),e(MMe,Q$r),e(q9,H$r),e(gr,U$r),e(gr,Vt),M(N9,Vt,null),e(Vt,J$r),e(Vt,EMe),e(EMe,Y$r),e(Vt,K$r),e(Vt,qc),e(qc,Z$r),e(qc,CMe),e(CMe,ekr),e(qc,okr),e(qc,EY),e(EY,rkr),e(qc,tkr),e(Vt,akr),M(h5,Vt,null),e(gr,nkr),e(gr,Gr),M(j9,Gr,null),e(Gr,skr),e(Gr,wMe),e(wMe,lkr),e(Gr,ikr),e(Gr,un),e(un,dkr),e(un,AMe),e(AMe,ckr),e(un,fkr),e(un,yMe),e(yMe,mkr),e(un,gkr),e(un,LMe),e(LMe,hkr),e(un,pkr),e(Gr,ukr),e(Gr,Ee),e(Ee,p5),e(p5,xMe),e(xMe,_kr),e(p5,bkr),e(p5,CY),e(CY,vkr),e(p5,Fkr),e(Ee,Tkr),e(Ee,u5),e(u5,$Me),e($Me,Mkr),e(u5,Ekr),e(u5,wY),e(wY,Ckr),e(u5,wkr),e(Ee,Akr),e(Ee,_5),e(_5,kMe),e(kMe,ykr),e(_5,Lkr),e(_5,AY),e(AY,xkr),e(_5,$kr),e(Ee,kkr),e(Ee,b5),e(b5,SMe),e(SMe,Skr),e(b5,Rkr),e(b5,yY),e(yY,Pkr),e(b5,Bkr),e(Ee,Ikr),e(Ee,v5),e(v5,RMe),e(RMe,qkr),e(v5,Nkr),e(v5,LY),e(LY,jkr),e(v5,Dkr),e(Ee,Gkr),e(Ee,F5),e(F5,PMe),e(PMe,Okr),e(F5,Vkr),e(F5,xY),e(xY,Xkr),e(F5,zkr),e(Ee,Wkr),e(Ee,T5),e(T5,BMe),e(BMe,Qkr),e(T5,Hkr),e(T5,$Y),e($Y,Ukr),e(T5,Jkr),e(Ee,Ykr),e(Ee,M5),e(M5,IMe),e(IMe,Kkr),e(M5,Zkr),e(M5,kY),e(kY,eSr),e(M5,oSr),e(Ee,rSr),e(Ee,E5),e(E5,qMe),e(qMe,tSr),e(E5,aSr),e(E5,SY),e(SY,nSr),e(E5,sSr),e(Ee,lSr),e(Ee,C5),e(C5,NMe),e(NMe,iSr),e(C5,dSr),e(C5,RY),e(RY,cSr),e(C5,fSr),e(Ee,mSr),e(Ee,w5),e(w5,jMe),e(jMe,gSr),e(w5,hSr),e(w5,PY),e(PY,pSr),e(w5,uSr),e(Ee,_Sr),e(Ee,A5),e(A5,DMe),e(DMe,bSr),e(A5,vSr),e(A5,BY),e(BY,FSr),e(A5,TSr),e(Gr,MSr),M(y5,Gr,null),b(f,qje,_),b(f,Nc,_),e(Nc,L5),e(L5,GMe),M(D9,GMe,null),e(Nc,ESr),e(Nc,OMe),e(OMe,CSr),b(f,Nje,_),b(f,hr,_),M(G9,hr,null),e(hr,wSr),e(hr,jc),e(jc,ASr),e(jc,IY),e(IY,ySr),e(jc,LSr),e(jc,qY),e(qY,xSr),e(jc,$Sr),e(hr,kSr),e(hr,O9),e(O9,SSr),e(O9,VMe),e(VMe,RSr),e(O9,PSr),e(hr,BSr),e(hr,Xt),M(V9,Xt,null),e(Xt,ISr),e(Xt,XMe),e(XMe,qSr),e(Xt,NSr),e(Xt,Dc),e(Dc,jSr),e(Dc,zMe),e(zMe,DSr),e(Dc,GSr),e(Dc,NY),e(NY,OSr),e(Dc,VSr),e(Xt,XSr),M(x5,Xt,null),e(hr,zSr),e(hr,Or),M(X9,Or,null),e(Or,WSr),e(Or,WMe),e(WMe,QSr),e(Or,HSr),e(Or,_n),e(_n,USr),e(_n,QMe),e(QMe,JSr),e(_n,YSr),e(_n,HMe),e(HMe,KSr),e(_n,ZSr),e(_n,UMe),e(UMe,eRr),e(_n,oRr),e(Or,rRr),e(Or,Le),e(Le,$5),e($5,JMe),e(JMe,tRr),e($5,aRr),e($5,jY),e(jY,nRr),e($5,sRr),e(Le,lRr),e(Le,k5),e(k5,YMe),e(YMe,iRr),e(k5,dRr),e(k5,DY),e(DY,cRr),e(k5,fRr),e(Le,mRr),e(Le,S5),e(S5,KMe),e(KMe,gRr),e(S5,hRr),e(S5,GY),e(GY,pRr),e(S5,uRr),e(Le,_Rr),e(Le,R5),e(R5,ZMe),e(ZMe,bRr),e(R5,vRr),e(R5,OY),e(OY,FRr),e(R5,TRr),e(Le,MRr),e(Le,P5),e(P5,e4e),e(e4e,ERr),e(P5,CRr),e(P5,VY),e(VY,wRr),e(P5,ARr),e(Le,yRr),e(Le,B5),e(B5,o4e),e(o4e,LRr),e(B5,xRr),e(B5,XY),e(XY,$Rr),e(B5,kRr),e(Le,SRr),e(Le,I5),e(I5,r4e),e(r4e,RRr),e(I5,PRr),e(I5,zY),e(zY,BRr),e(I5,IRr),e(Le,qRr),e(Le,q5),e(q5,t4e),e(t4e,NRr),e(q5,jRr),e(q5,WY),e(WY,DRr),e(q5,GRr),e(Le,ORr),e(Le,N5),e(N5,a4e),e(a4e,VRr),e(N5,XRr),e(N5,QY),e(QY,zRr),e(N5,WRr),e(Le,QRr),e(Le,j5),e(j5,n4e),e(n4e,HRr),e(j5,URr),e(j5,HY),e(HY,JRr),e(j5,YRr),e(Or,KRr),M(D5,Or,null),b(f,jje,_),b(f,Gc,_),e(Gc,G5),e(G5,s4e),M(z9,s4e,null),e(Gc,ZRr),e(Gc,l4e),e(l4e,ePr),b(f,Dje,_),b(f,pr,_),M(W9,pr,null),e(pr,oPr),e(pr,Oc),e(Oc,rPr),e(Oc,UY),e(UY,tPr),e(Oc,aPr),e(Oc,JY),e(JY,nPr),e(Oc,sPr),e(pr,lPr),e(pr,Q9),e(Q9,iPr),e(Q9,i4e),e(i4e,dPr),e(Q9,cPr),e(pr,fPr),e(pr,zt),M(H9,zt,null),e(zt,mPr),e(zt,d4e),e(d4e,gPr),e(zt,hPr),e(zt,Vc),e(Vc,pPr),e(Vc,c4e),e(c4e,uPr),e(Vc,_Pr),e(Vc,YY),e(YY,bPr),e(Vc,vPr),e(zt,FPr),M(O5,zt,null),e(pr,TPr),e(pr,Vr),M(U9,Vr,null),e(Vr,MPr),e(Vr,f4e),e(f4e,EPr),e(Vr,CPr),e(Vr,bn),e(bn,wPr),e(bn,m4e),e(m4e,APr),e(bn,yPr),e(bn,g4e),e(g4e,LPr),e(bn,xPr),e(bn,h4e),e(h4e,$Pr),e(bn,kPr),e(Vr,SPr),e(Vr,Pe),e(Pe,V5),e(V5,p4e),e(p4e,RPr),e(V5,PPr),e(V5,KY),e(KY,BPr),e(V5,IPr),e(Pe,qPr),e(Pe,X5),e(X5,u4e),e(u4e,NPr),e(X5,jPr),e(X5,ZY),e(ZY,DPr),e(X5,GPr),e(Pe,OPr),e(Pe,z5),e(z5,_4e),e(_4e,VPr),e(z5,XPr),e(z5,eK),e(eK,zPr),e(z5,WPr),e(Pe,QPr),e(Pe,W5),e(W5,b4e),e(b4e,HPr),e(W5,UPr),e(W5,oK),e(oK,JPr),e(W5,YPr),e(Pe,KPr),e(Pe,Q5),e(Q5,v4e),e(v4e,ZPr),e(Q5,eBr),e(Q5,rK),e(rK,oBr),e(Q5,rBr),e(Pe,tBr),e(Pe,H5),e(H5,F4e),e(F4e,aBr),e(H5,nBr),e(H5,tK),e(tK,sBr),e(H5,lBr),e(Pe,iBr),e(Pe,U5),e(U5,T4e),e(T4e,dBr),e(U5,cBr),e(U5,aK),e(aK,fBr),e(U5,mBr),e(Pe,gBr),e(Pe,J5),e(J5,M4e),e(M4e,hBr),e(J5,pBr),e(J5,nK),e(nK,uBr),e(J5,_Br),e(Pe,bBr),e(Pe,Y5),e(Y5,E4e),e(E4e,vBr),e(Y5,FBr),e(Y5,sK),e(sK,TBr),e(Y5,MBr),e(Vr,EBr),M(K5,Vr,null),b(f,Gje,_),b(f,Xc,_),e(Xc,Z5),e(Z5,C4e),M(J9,C4e,null),e(Xc,CBr),e(Xc,w4e),e(w4e,wBr),b(f,Oje,_),b(f,ur,_),M(Y9,ur,null),e(ur,ABr),e(ur,zc),e(zc,yBr),e(zc,lK),e(lK,LBr),e(zc,xBr),e(zc,iK),e(iK,$Br),e(zc,kBr),e(ur,SBr),e(ur,K9),e(K9,RBr),e(K9,A4e),e(A4e,PBr),e(K9,BBr),e(ur,IBr),e(ur,Wt),M(Z9,Wt,null),e(Wt,qBr),e(Wt,y4e),e(y4e,NBr),e(Wt,jBr),e(Wt,Wc),e(Wc,DBr),e(Wc,L4e),e(L4e,GBr),e(Wc,OBr),e(Wc,dK),e(dK,VBr),e(Wc,XBr),e(Wt,zBr),M(ew,Wt,null),e(ur,WBr),e(ur,Xr),M(ex,Xr,null),e(Xr,QBr),e(Xr,x4e),e(x4e,HBr),e(Xr,UBr),e(Xr,vn),e(vn,JBr),e(vn,$4e),e($4e,YBr),e(vn,KBr),e(vn,k4e),e(k4e,ZBr),e(vn,eIr),e(vn,S4e),e(S4e,oIr),e(vn,rIr),e(Xr,tIr),e(Xr,xe),e(xe,ow),e(ow,R4e),e(R4e,aIr),e(ow,nIr),e(ow,cK),e(cK,sIr),e(ow,lIr),e(xe,iIr),e(xe,rw),e(rw,P4e),e(P4e,dIr),e(rw,cIr),e(rw,fK),e(fK,fIr),e(rw,mIr),e(xe,gIr),e(xe,tw),e(tw,B4e),e(B4e,hIr),e(tw,pIr),e(tw,mK),e(mK,uIr),e(tw,_Ir),e(xe,bIr),e(xe,aw),e(aw,I4e),e(I4e,vIr),e(aw,FIr),e(aw,gK),e(gK,TIr),e(aw,MIr),e(xe,EIr),e(xe,nw),e(nw,q4e),e(q4e,CIr),e(nw,wIr),e(nw,hK),e(hK,AIr),e(nw,yIr),e(xe,LIr),e(xe,sw),e(sw,N4e),e(N4e,xIr),e(sw,$Ir),e(sw,pK),e(pK,kIr),e(sw,SIr),e(xe,RIr),e(xe,lw),e(lw,j4e),e(j4e,PIr),e(lw,BIr),e(lw,uK),e(uK,IIr),e(lw,qIr),e(xe,NIr),e(xe,iw),e(iw,D4e),e(D4e,jIr),e(iw,DIr),e(iw,_K),e(_K,GIr),e(iw,OIr),e(xe,VIr),e(xe,dw),e(dw,G4e),e(G4e,XIr),e(dw,zIr),e(dw,bK),e(bK,WIr),e(dw,QIr),e(xe,HIr),e(xe,cw),e(cw,O4e),e(O4e,UIr),e(cw,JIr),e(cw,vK),e(vK,YIr),e(cw,KIr),e(Xr,ZIr),M(fw,Xr,null),b(f,Vje,_),b(f,Qc,_),e(Qc,mw),e(mw,V4e),M(ox,V4e,null),e(Qc,eqr),e(Qc,X4e),e(X4e,oqr),b(f,Xje,_),b(f,_r,_),M(rx,_r,null),e(_r,rqr),e(_r,Hc),e(Hc,tqr),e(Hc,FK),e(FK,aqr),e(Hc,nqr),e(Hc,TK),e(TK,sqr),e(Hc,lqr),e(_r,iqr),e(_r,tx),e(tx,dqr),e(tx,z4e),e(z4e,cqr),e(tx,fqr),e(_r,mqr),e(_r,Qt),M(ax,Qt,null),e(Qt,gqr),e(Qt,W4e),e(W4e,hqr),e(Qt,pqr),e(Qt,Uc),e(Uc,uqr),e(Uc,Q4e),e(Q4e,_qr),e(Uc,bqr),e(Uc,MK),e(MK,vqr),e(Uc,Fqr),e(Qt,Tqr),M(gw,Qt,null),e(_r,Mqr),e(_r,zr),M(nx,zr,null),e(zr,Eqr),e(zr,H4e),e(H4e,Cqr),e(zr,wqr),e(zr,Fn),e(Fn,Aqr),e(Fn,U4e),e(U4e,yqr),e(Fn,Lqr),e(Fn,J4e),e(J4e,xqr),e(Fn,$qr),e(Fn,Y4e),e(Y4e,kqr),e(Fn,Sqr),e(zr,Rqr),e(zr,$e),e($e,hw),e(hw,K4e),e(K4e,Pqr),e(hw,Bqr),e(hw,EK),e(EK,Iqr),e(hw,qqr),e($e,Nqr),e($e,pw),e(pw,Z4e),e(Z4e,jqr),e(pw,Dqr),e(pw,CK),e(CK,Gqr),e(pw,Oqr),e($e,Vqr),e($e,uw),e(uw,eEe),e(eEe,Xqr),e(uw,zqr),e(uw,wK),e(wK,Wqr),e(uw,Qqr),e($e,Hqr),e($e,_w),e(_w,oEe),e(oEe,Uqr),e(_w,Jqr),e(_w,AK),e(AK,Yqr),e(_w,Kqr),e($e,Zqr),e($e,bw),e(bw,rEe),e(rEe,eNr),e(bw,oNr),e(bw,yK),e(yK,rNr),e(bw,tNr),e($e,aNr),e($e,vw),e(vw,tEe),e(tEe,nNr),e(vw,sNr),e(vw,LK),e(LK,lNr),e(vw,iNr),e($e,dNr),e($e,Fw),e(Fw,aEe),e(aEe,cNr),e(Fw,fNr),e(Fw,xK),e(xK,mNr),e(Fw,gNr),e($e,hNr),e($e,Tw),e(Tw,nEe),e(nEe,pNr),e(Tw,uNr),e(Tw,$K),e($K,_Nr),e(Tw,bNr),e($e,vNr),e($e,Mw),e(Mw,sEe),e(sEe,FNr),e(Mw,TNr),e(Mw,kK),e(kK,MNr),e(Mw,ENr),e($e,CNr),e($e,Ew),e(Ew,lEe),e(lEe,wNr),e(Ew,ANr),e(Ew,SK),e(SK,yNr),e(Ew,LNr),e(zr,xNr),M(Cw,zr,null),b(f,zje,_),b(f,Jc,_),e(Jc,ww),e(ww,iEe),M(sx,iEe,null),e(Jc,$Nr),e(Jc,dEe),e(dEe,kNr),b(f,Wje,_),b(f,br,_),M(lx,br,null),e(br,SNr),e(br,Yc),e(Yc,RNr),e(Yc,RK),e(RK,PNr),e(Yc,BNr),e(Yc,PK),e(PK,INr),e(Yc,qNr),e(br,NNr),e(br,ix),e(ix,jNr),e(ix,cEe),e(cEe,DNr),e(ix,GNr),e(br,ONr),e(br,Ht),M(dx,Ht,null),e(Ht,VNr),e(Ht,fEe),e(fEe,XNr),e(Ht,zNr),e(Ht,Kc),e(Kc,WNr),e(Kc,mEe),e(mEe,QNr),e(Kc,HNr),e(Kc,BK),e(BK,UNr),e(Kc,JNr),e(Ht,YNr),M(Aw,Ht,null),e(br,KNr),e(br,Wr),M(cx,Wr,null),e(Wr,ZNr),e(Wr,gEe),e(gEe,ejr),e(Wr,ojr),e(Wr,Tn),e(Tn,rjr),e(Tn,hEe),e(hEe,tjr),e(Tn,ajr),e(Tn,pEe),e(pEe,njr),e(Tn,sjr),e(Tn,uEe),e(uEe,ljr),e(Tn,ijr),e(Wr,djr),e(Wr,De),e(De,yw),e(yw,_Ee),e(_Ee,cjr),e(yw,fjr),e(yw,IK),e(IK,mjr),e(yw,gjr),e(De,hjr),e(De,Lw),e(Lw,bEe),e(bEe,pjr),e(Lw,ujr),e(Lw,qK),e(qK,_jr),e(Lw,bjr),e(De,vjr),e(De,xw),e(xw,vEe),e(vEe,Fjr),e(xw,Tjr),e(xw,NK),e(NK,Mjr),e(xw,Ejr),e(De,Cjr),e(De,$w),e($w,FEe),e(FEe,wjr),e($w,Ajr),e($w,jK),e(jK,yjr),e($w,Ljr),e(De,xjr),e(De,kw),e(kw,TEe),e(TEe,$jr),e(kw,kjr),e(kw,DK),e(DK,Sjr),e(kw,Rjr),e(De,Pjr),e(De,Sw),e(Sw,MEe),e(MEe,Bjr),e(Sw,Ijr),e(Sw,GK),e(GK,qjr),e(Sw,Njr),e(De,jjr),e(De,Rw),e(Rw,EEe),e(EEe,Djr),e(Rw,Gjr),e(Rw,OK),e(OK,Ojr),e(Rw,Vjr),e(De,Xjr),e(De,Pw),e(Pw,CEe),e(CEe,zjr),e(Pw,Wjr),e(Pw,VK),e(VK,Qjr),e(Pw,Hjr),e(Wr,Ujr),M(Bw,Wr,null),b(f,Qje,_),b(f,Zc,_),e(Zc,Iw),e(Iw,wEe),M(fx,wEe,null),e(Zc,Jjr),e(Zc,AEe),e(AEe,Yjr),b(f,Hje,_),b(f,vr,_),M(mx,vr,null),e(vr,Kjr),e(vr,ef),e(ef,Zjr),e(ef,XK),e(XK,eDr),e(ef,oDr),e(ef,zK),e(zK,rDr),e(ef,tDr),e(vr,aDr),e(vr,gx),e(gx,nDr),e(gx,yEe),e(yEe,sDr),e(gx,lDr),e(vr,iDr),e(vr,Ut),M(hx,Ut,null),e(Ut,dDr),e(Ut,LEe),e(LEe,cDr),e(Ut,fDr),e(Ut,of),e(of,mDr),e(of,xEe),e(xEe,gDr),e(of,hDr),e(of,WK),e(WK,pDr),e(of,uDr),e(Ut,_Dr),M(qw,Ut,null),e(vr,bDr),e(vr,Qr),M(px,Qr,null),e(Qr,vDr),e(Qr,$Ee),e($Ee,FDr),e(Qr,TDr),e(Qr,Mn),e(Mn,MDr),e(Mn,kEe),e(kEe,EDr),e(Mn,CDr),e(Mn,SEe),e(SEe,wDr),e(Mn,ADr),e(Mn,REe),e(REe,yDr),e(Mn,LDr),e(Qr,xDr),e(Qr,Ge),e(Ge,Nw),e(Nw,PEe),e(PEe,$Dr),e(Nw,kDr),e(Nw,QK),e(QK,SDr),e(Nw,RDr),e(Ge,PDr),e(Ge,jw),e(jw,BEe),e(BEe,BDr),e(jw,IDr),e(jw,HK),e(HK,qDr),e(jw,NDr),e(Ge,jDr),e(Ge,Dw),e(Dw,IEe),e(IEe,DDr),e(Dw,GDr),e(Dw,UK),e(UK,ODr),e(Dw,VDr),e(Ge,XDr),e(Ge,Gw),e(Gw,qEe),e(qEe,zDr),e(Gw,WDr),e(Gw,JK),e(JK,QDr),e(Gw,HDr),e(Ge,UDr),e(Ge,Ow),e(Ow,NEe),e(NEe,JDr),e(Ow,YDr),e(Ow,YK),e(YK,KDr),e(Ow,ZDr),e(Ge,eGr),e(Ge,Vw),e(Vw,jEe),e(jEe,oGr),e(Vw,rGr),e(Vw,KK),e(KK,tGr),e(Vw,aGr),e(Ge,nGr),e(Ge,Xw),e(Xw,DEe),e(DEe,sGr),e(Xw,lGr),e(Xw,ZK),e(ZK,iGr),e(Xw,dGr),e(Ge,cGr),e(Ge,zw),e(zw,GEe),e(GEe,fGr),e(zw,mGr),e(zw,eZ),e(eZ,gGr),e(zw,hGr),e(Qr,pGr),M(Ww,Qr,null),b(f,Uje,_),b(f,rf,_),e(rf,Qw),e(Qw,OEe),M(ux,OEe,null),e(rf,uGr),e(rf,VEe),e(VEe,_Gr),b(f,Jje,_),b(f,Fr,_),M(_x,Fr,null),e(Fr,bGr),e(Fr,tf),e(tf,vGr),e(tf,oZ),e(oZ,FGr),e(tf,TGr),e(tf,rZ),e(rZ,MGr),e(tf,EGr),e(Fr,CGr),e(Fr,bx),e(bx,wGr),e(bx,XEe),e(XEe,AGr),e(bx,yGr),e(Fr,LGr),e(Fr,Jt),M(vx,Jt,null),e(Jt,xGr),e(Jt,zEe),e(zEe,$Gr),e(Jt,kGr),e(Jt,af),e(af,SGr),e(af,WEe),e(WEe,RGr),e(af,PGr),e(af,tZ),e(tZ,BGr),e(af,IGr),e(Jt,qGr),M(Hw,Jt,null),e(Fr,NGr),e(Fr,Hr),M(Fx,Hr,null),e(Hr,jGr),e(Hr,QEe),e(QEe,DGr),e(Hr,GGr),e(Hr,En),e(En,OGr),e(En,HEe),e(HEe,VGr),e(En,XGr),e(En,UEe),e(UEe,zGr),e(En,WGr),e(En,JEe),e(JEe,QGr),e(En,HGr),e(Hr,UGr),e(Hr,YEe),e(YEe,Uw),e(Uw,KEe),e(KEe,JGr),e(Uw,YGr),e(Uw,aZ),e(aZ,KGr),e(Uw,ZGr),e(Hr,eOr),M(Jw,Hr,null),b(f,Yje,_),b(f,nf,_),e(nf,Yw),e(Yw,ZEe),M(Tx,ZEe,null),e(nf,oOr),e(nf,eCe),e(eCe,rOr),b(f,Kje,_),b(f,Tr,_),M(Mx,Tr,null),e(Tr,tOr),e(Tr,sf),e(sf,aOr),e(sf,nZ),e(nZ,nOr),e(sf,sOr),e(sf,sZ),e(sZ,lOr),e(sf,iOr),e(Tr,dOr),e(Tr,Ex),e(Ex,cOr),e(Ex,oCe),e(oCe,fOr),e(Ex,mOr),e(Tr,gOr),e(Tr,Yt),M(Cx,Yt,null),e(Yt,hOr),e(Yt,rCe),e(rCe,pOr),e(Yt,uOr),e(Yt,lf),e(lf,_Or),e(lf,tCe),e(tCe,bOr),e(lf,vOr),e(lf,lZ),e(lZ,FOr),e(lf,TOr),e(Yt,MOr),M(Kw,Yt,null),e(Tr,EOr),e(Tr,Ur),M(wx,Ur,null),e(Ur,COr),e(Ur,aCe),e(aCe,wOr),e(Ur,AOr),e(Ur,Cn),e(Cn,yOr),e(Cn,nCe),e(nCe,LOr),e(Cn,xOr),e(Cn,sCe),e(sCe,$Or),e(Cn,kOr),e(Cn,lCe),e(lCe,SOr),e(Cn,ROr),e(Ur,POr),e(Ur,Ax),e(Ax,Zw),e(Zw,iCe),e(iCe,BOr),e(Zw,IOr),e(Zw,iZ),e(iZ,qOr),e(Zw,NOr),e(Ax,jOr),e(Ax,e0),e(e0,dCe),e(dCe,DOr),e(e0,GOr),e(e0,dZ),e(dZ,OOr),e(e0,VOr),e(Ur,XOr),M(o0,Ur,null),b(f,Zje,_),b(f,df,_),e(df,r0),e(r0,cCe),M(yx,cCe,null),e(df,zOr),e(df,fCe),e(fCe,WOr),b(f,eDe,_),b(f,Mr,_),M(Lx,Mr,null),e(Mr,QOr),e(Mr,cf),e(cf,HOr),e(cf,cZ),e(cZ,UOr),e(cf,JOr),e(cf,fZ),e(fZ,YOr),e(cf,KOr),e(Mr,ZOr),e(Mr,xx),e(xx,eVr),e(xx,mCe),e(mCe,oVr),e(xx,rVr),e(Mr,tVr),e(Mr,Kt),M($x,Kt,null),e(Kt,aVr),e(Kt,gCe),e(gCe,nVr),e(Kt,sVr),e(Kt,ff),e(ff,lVr),e(ff,hCe),e(hCe,iVr),e(ff,dVr),e(ff,mZ),e(mZ,cVr),e(ff,fVr),e(Kt,mVr),M(t0,Kt,null),e(Mr,gVr),e(Mr,Jr),M(kx,Jr,null),e(Jr,hVr),e(Jr,pCe),e(pCe,pVr),e(Jr,uVr),e(Jr,wn),e(wn,_Vr),e(wn,uCe),e(uCe,bVr),e(wn,vVr),e(wn,_Ce),e(_Ce,FVr),e(wn,TVr),e(wn,bCe),e(bCe,MVr),e(wn,EVr),e(Jr,CVr),e(Jr,vCe),e(vCe,a0),e(a0,FCe),e(FCe,wVr),e(a0,AVr),e(a0,gZ),e(gZ,yVr),e(a0,LVr),e(Jr,xVr),M(n0,Jr,null),oDe=!0},p(f,[_]){const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),Ff.$set(Sx);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),Eg.$set(TCe);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),ah.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),Ih.$set(ECe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),qh.$set(Rx);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),tp.$set(CCe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),ap.$set(An);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),lp.$set(wCe);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),r_.$set(ACe);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),a_.$set(yCe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),H_.$set(Px);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),J_.$set(LCe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),B1.$set(Bx);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:f}),q1.$set(xCe);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),F2.$set(Ix);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:f}),M2.$set($Ce);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:f}),D2.$set(kCe);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:f}),O2.$set(SCe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),qb.$set(mf);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:f}),jb.$set(RCe);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:f}),uv.$set(PCe);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:f}),bv.$set(BCe);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),wv.$set(qx);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:f}),yv.$set(ICe);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:f}),d3.$set(qCe);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:f}),f3.$set(NCe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Z3.$set(et);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),oF.$set(Nx);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:f}),aF.$set(jCe);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:f}),sF.$set(jx);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:f}),FF.$set(DCe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),MF.$set(ot);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:f}),wF.$set(GCe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),yF.$set(gf);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:f}),NF.$set(OCe);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:f}),DF.$set(VCe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),QF.$set(y);const s0={};_&2&&(s0.$$scope={dirty:_,ctx:f}),UF.$set(s0);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:f}),sT.$set(XCe);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:f}),iT.$set(zCe);const l0={};_&2&&(l0.$$scope={dirty:_,ctx:f}),mT.$set(l0);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:f}),hT.$set(WCe);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:f}),TT.$set(QCe);const i0={};_&2&&(i0.$$scope={dirty:_,ctx:f}),ET.$set(i0);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:f}),LT.$set(HCe);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:f}),$T.$set(UCe);const d0={};_&2&&(d0.$$scope={dirty:_,ctx:f}),PT.$set(d0);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:f}),IT.$set(JCe);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:f}),jT.$set(YCe);const c0={};_&2&&(c0.$$scope={dirty:_,ctx:f}),GT.$set(c0);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:f}),QT.$set(KCe);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:f}),UT.$set(ZCe);const f0={};_&2&&(f0.$$scope={dirty:_,ctx:f}),KT.$set(f0);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),e7.$set(e5e);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),W7.$set(o5e);const m0={};_&2&&(m0.$$scope={dirty:_,ctx:f}),H7.$set(m0);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),bM.$set(r5e);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),FM.$set(t5e);const g0={};_&2&&(g0.$$scope={dirty:_,ctx:f}),RM.$set(g0);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),BM.$set(a5e);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),DM.$set(n5e);const h0={};_&2&&(h0.$$scope={dirty:_,ctx:f}),OM.$set(h0);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),d4.$set(s5e);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),f4.$set(l5e);const p0={};_&2&&(p0.$$scope={dirty:_,ctx:f}),M4.$set(p0);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),C4.$set(i5e);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),Y4.$set(d5e);const u0={};_&2&&(u0.$$scope={dirty:_,ctx:f}),Z4.$set(u0);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),_E.$set(c5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),vE.$set(f5e);const _0={};_&2&&(_0.$$scope={dirty:_,ctx:f}),ME.$set(_0);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),CE.$set(m5e);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),AE.$set(g5e);const b0={};_&2&&(b0.$$scope={dirty:_,ctx:f}),LE.$set(b0);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),UE.$set(h5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),YE.$set(p5e);const v0={};_&2&&(v0.$$scope={dirty:_,ctx:f}),bC.$set(v0);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),FC.$set(u5e);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),MC.$set(_5e);const F0={};_&2&&(F0.$$scope={dirty:_,ctx:f}),CC.$set(F0);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),AC.$set(b5e);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),LC.$set(v5e);const T0={};_&2&&(T0.$$scope={dirty:_,ctx:f}),e5.$set(T0);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),r5.$set(F5e);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),m5.$set(T5e);const M0={};_&2&&(M0.$$scope={dirty:_,ctx:f}),h5.$set(M0);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),y5.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),x5.$set(E5e);const E0={};_&2&&(E0.$$scope={dirty:_,ctx:f}),D5.$set(E0);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),O5.$set(C5e);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),K5.$set(w5e);const C0={};_&2&&(C0.$$scope={dirty:_,ctx:f}),ew.$set(C0);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),fw.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),gw.$set(y5e);const w0={};_&2&&(w0.$$scope={dirty:_,ctx:f}),Cw.$set(w0);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),Aw.$set(L5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),Bw.$set(x5e);const A0={};_&2&&(A0.$$scope={dirty:_,ctx:f}),qw.$set(A0);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),Ww.$set($5e);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),Hw.$set(k5e);const y0={};_&2&&(y0.$$scope={dirty:_,ctx:f}),Jw.$set(y0);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),Kw.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),o0.$set(R5e);const L0={};_&2&&(L0.$$scope={dirty:_,ctx:f}),t0.$set(L0);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),n0.$set(P5e)},i(f){oDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E(Ff.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(R6.$$.fragment,f),E(Eg.$$.fragment,f),E(P6.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(j6.$$.fragment,f),E(ah.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(z6.$$.fragment,f),E(Ih.$$.fragment,f),E(qh.$$.fragment,f),E(W6.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(Y6.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(lp.$$.fragment,f),E(ty.$$.fragment,f),E(r_.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(a_.$$.fragment,f),E(iy.$$.fragment,f),E(H_.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(J_.$$.fragment,f),E(gy.$$.fragment,f),E(B1.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(q1.$$.fragment,f),E(by.$$.fragment,f),E(F2.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(M2.$$.fragment,f),E(Ey.$$.fragment,f),E(D2.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(O2.$$.fragment,f),E(Ly.$$.fragment,f),E(qb.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(jb.$$.fragment,f),E(Ry.$$.fragment,f),E(uv.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(bv.$$.fragment,f),E(Ny.$$.fragment,f),E(wv.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(yv.$$.fragment,f),E(Vy.$$.fragment,f),E(d3.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(f3.$$.fragment,f),E(Hy.$$.fragment,f),E(Z3.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(oF.$$.fragment,f),E(Zy.$$.fragment,f),E(aF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(sF.$$.fragment,f),E(aL.$$.fragment,f),E(FF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(MF.$$.fragment,f),E(dL.$$.fragment,f),E(wF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(yF.$$.fragment,f),E(hL.$$.fragment,f),E(NF.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(DF.$$.fragment,f),E(vL.$$.fragment,f),E(QF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(UF.$$.fragment,f),E(CL.$$.fragment,f),E(sT.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(iT.$$.fragment,f),E(xL.$$.fragment,f),E(mT.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(hT.$$.fragment,f),E(BL.$$.fragment,f),E(TT.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(ET.$$.fragment,f),E(DL.$$.fragment,f),E(LT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E($T.$$.fragment,f),E(zL.$$.fragment,f),E(PT.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(IT.$$.fragment,f),E(YL.$$.fragment,f),E(jT.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(GT.$$.fragment,f),E(r8.$$.fragment,f),E(QT.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(UT.$$.fragment,f),E(l8.$$.fragment,f),E(KT.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(e7.$$.fragment,f),E(m8.$$.fragment,f),E(W7.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(H7.$$.fragment,f),E(_8.$$.fragment,f),E(bM.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(FM.$$.fragment,f),E(M8.$$.fragment,f),E(RM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(BM.$$.fragment,f),E(y8.$$.fragment,f),E(DM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(OM.$$.fragment,f),E(S8.$$.fragment,f),E(d4.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(f4.$$.fragment,f),E(q8.$$.fragment,f),E(M4.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(C4.$$.fragment,f),E(O8.$$.fragment,f),E(Y4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(Z4.$$.fragment,f),E(Q8.$$.fragment,f),E(_E.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(vE.$$.fragment,f),E(K8.$$.fragment,f),E(ME.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(CE.$$.fragment,f),E(a9.$$.fragment,f),E(AE.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(LE.$$.fragment,f),E(d9.$$.fragment,f),E(UE.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(YE.$$.fragment,f),E(h9.$$.fragment,f),E(bC.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(FC.$$.fragment,f),E(v9.$$.fragment,f),E(MC.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(CC.$$.fragment,f),E(C9.$$.fragment,f),E(AC.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(LC.$$.fragment,f),E(x9.$$.fragment,f),E(e5.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(r5.$$.fragment,f),E(P9.$$.fragment,f),E(m5.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(h5.$$.fragment,f),E(j9.$$.fragment,f),E(y5.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(x5.$$.fragment,f),E(X9.$$.fragment,f),E(D5.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(O5.$$.fragment,f),E(U9.$$.fragment,f),E(K5.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(ew.$$.fragment,f),E(ex.$$.fragment,f),E(fw.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(gw.$$.fragment,f),E(nx.$$.fragment,f),E(Cw.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(Aw.$$.fragment,f),E(cx.$$.fragment,f),E(Bw.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(qw.$$.fragment,f),E(px.$$.fragment,f),E(Ww.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(Hw.$$.fragment,f),E(Fx.$$.fragment,f),E(Jw.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(Kw.$$.fragment,f),E(wx.$$.fragment,f),E(o0.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(t0.$$.fragment,f),E(kx.$$.fragment,f),E(n0.$$.fragment,f),oDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C(Ff.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(R6.$$.fragment,f),C(Eg.$$.fragment,f),C(P6.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(j6.$$.fragment,f),C(ah.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(z6.$$.fragment,f),C(Ih.$$.fragment,f),C(qh.$$.fragment,f),C(W6.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(Y6.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(lp.$$.fragment,f),C(ty.$$.fragment,f),C(r_.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(a_.$$.fragment,f),C(iy.$$.fragment,f),C(H_.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(J_.$$.fragment,f),C(gy.$$.fragment,f),C(B1.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(q1.$$.fragment,f),C(by.$$.fragment,f),C(F2.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(M2.$$.fragment,f),C(Ey.$$.fragment,f),C(D2.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(O2.$$.fragment,f),C(Ly.$$.fragment,f),C(qb.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(jb.$$.fragment,f),C(Ry.$$.fragment,f),C(uv.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(bv.$$.fragment,f),C(Ny.$$.fragment,f),C(wv.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(yv.$$.fragment,f),C(Vy.$$.fragment,f),C(d3.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(f3.$$.fragment,f),C(Hy.$$.fragment,f),C(Z3.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(oF.$$.fragment,f),C(Zy.$$.fragment,f),C(aF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(sF.$$.fragment,f),C(aL.$$.fragment,f),C(FF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(MF.$$.fragment,f),C(dL.$$.fragment,f),C(wF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(yF.$$.fragment,f),C(hL.$$.fragment,f),C(NF.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(DF.$$.fragment,f),C(vL.$$.fragment,f),C(QF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(UF.$$.fragment,f),C(CL.$$.fragment,f),C(sT.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(iT.$$.fragment,f),C(xL.$$.fragment,f),C(mT.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(hT.$$.fragment,f),C(BL.$$.fragment,f),C(TT.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(ET.$$.fragment,f),C(DL.$$.fragment,f),C(LT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C($T.$$.fragment,f),C(zL.$$.fragment,f),C(PT.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(IT.$$.fragment,f),C(YL.$$.fragment,f),C(jT.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(GT.$$.fragment,f),C(r8.$$.fragment,f),C(QT.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(UT.$$.fragment,f),C(l8.$$.fragment,f),C(KT.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(e7.$$.fragment,f),C(m8.$$.fragment,f),C(W7.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(H7.$$.fragment,f),C(_8.$$.fragment,f),C(bM.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(FM.$$.fragment,f),C(M8.$$.fragment,f),C(RM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(BM.$$.fragment,f),C(y8.$$.fragment,f),C(DM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(OM.$$.fragment,f),C(S8.$$.fragment,f),C(d4.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(f4.$$.fragment,f),C(q8.$$.fragment,f),C(M4.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(C4.$$.fragment,f),C(O8.$$.fragment,f),C(Y4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(Z4.$$.fragment,f),C(Q8.$$.fragment,f),C(_E.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(vE.$$.fragment,f),C(K8.$$.fragment,f),C(ME.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(CE.$$.fragment,f),C(a9.$$.fragment,f),C(AE.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(LE.$$.fragment,f),C(d9.$$.fragment,f),C(UE.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(YE.$$.fragment,f),C(h9.$$.fragment,f),C(bC.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(FC.$$.fragment,f),C(v9.$$.fragment,f),C(MC.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(CC.$$.fragment,f),C(C9.$$.fragment,f),C(AC.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(LC.$$.fragment,f),C(x9.$$.fragment,f),C(e5.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(r5.$$.fragment,f),C(P9.$$.fragment,f),C(m5.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(h5.$$.fragment,f),C(j9.$$.fragment,f),C(y5.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(x5.$$.fragment,f),C(X9.$$.fragment,f),C(D5.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(O5.$$.fragment,f),C(U9.$$.fragment,f),C(K5.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(ew.$$.fragment,f),C(ex.$$.fragment,f),C(fw.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(gw.$$.fragment,f),C(nx.$$.fragment,f),C(Cw.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(Aw.$$.fragment,f),C(cx.$$.fragment,f),C(Bw.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(qw.$$.fragment,f),C(px.$$.fragment,f),C(Ww.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(Hw.$$.fragment,f),C(Fx.$$.fragment,f),C(Jw.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(Kw.$$.fragment,f),C(wx.$$.fragment,f),C(o0.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(t0.$$.fragment,f),C(kx.$$.fragment,f),C(n0.$$.fragment,f),oDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Kqe),f&&t(bi),w(y6),f&&t(Zqe),f&&t(kn),f&&t(eNe),w(L6,f),f&&t(oNe),f&&t(J$),f&&t(rNe),w(Ff,f),f&&t(tNe),f&&t(vi),w(x6),f&&t(aNe),f&&t(Co),w($6),w(R6),w(Eg),w(P6),f&&t(nNe),f&&t(Ti),w(B6),f&&t(sNe),f&&t(wo),w(I6),w(j6),w(ah),w(D6),f&&t(lNe),f&&t(Mi),w(G6),f&&t(iNe),f&&t(Ao),w(O6),w(z6),w(Ih),w(qh),w(W6),f&&t(dNe),f&&t(Ei),w(Q6),f&&t(cNe),f&&t(yo),w(H6),w(Y6),w(tp),w(ap),w(K6),f&&t(fNe),f&&t(wi),w(Z6),f&&t(mNe),f&&t(Lo),w(ey),w(ry),w(lp),w(ty),w(r_),f&&t(gNe),f&&t(Li),w(ay),f&&t(hNe),f&&t(xo),w(ny),w(ly),w(a_),w(iy),w(H_),f&&t(pNe),f&&t(ki),w(dy),f&&t(uNe),f&&t($o),w(cy),w(my),w(J_),w(gy),w(B1),f&&t(_Ne),f&&t(Pi),w(hy),f&&t(bNe),f&&t(ko),w(py),w(_y),w(q1),w(by),w(F2),f&&t(vNe),f&&t(qi),w(vy),f&&t(FNe),f&&t(So),w(Fy),w(My),w(M2),w(Ey),w(D2),f&&t(TNe),f&&t(Di),w(Cy),f&&t(MNe),f&&t(Ro),w(wy),w(yy),w(O2),w(Ly),w(qb),f&&t(ENe),f&&t(Vi),w(xy),f&&t(CNe),f&&t(Po),w($y),w(Sy),w(jb),w(Ry),w(uv),f&&t(wNe),f&&t(Wi),w(Py),f&&t(ANe),f&&t(Bo),w(By),w(qy),w(bv),w(Ny),w(wv),f&&t(yNe),f&&t(Ui),w(jy),f&&t(LNe),f&&t(Io),w(Dy),w(Oy),w(yv),w(Vy),w(d3),f&&t(xNe),f&&t(Ki),w(Xy),f&&t($Ne),f&&t(qo),w(zy),w(Qy),w(f3),w(Hy),w(Z3),f&&t(kNe),f&&t(od),w(Uy),f&&t(SNe),f&&t(No),w(Jy),w(Ky),w(oF),w(Zy),w(aF),f&&t(RNe),f&&t(ad),w(eL),f&&t(PNe),f&&t(jo),w(oL),w(tL),w(sF),w(aL),w(FF),f&&t(BNe),f&&t(ld),w(nL),f&&t(INe),f&&t(Do),w(sL),w(iL),w(MF),w(dL),w(wF),f&&t(qNe),f&&t(cd),w(cL),f&&t(NNe),f&&t(Go),w(fL),w(gL),w(yF),w(hL),w(NF),f&&t(jNe),f&&t(gd),w(pL),f&&t(DNe),f&&t(Oo),w(uL),w(bL),w(DF),w(vL),w(QF),f&&t(GNe),f&&t(ud),w(FL),f&&t(ONe),f&&t(Vo),w(TL),w(EL),w(UF),w(CL),w(sT),f&&t(VNe),f&&t(vd),w(wL),f&&t(XNe),f&&t(Xo),w(AL),w(LL),w(iT),w(xL),w(mT),f&&t(zNe),f&&t(Md),w(kL),f&&t(WNe),f&&t(zo),w(SL),w(PL),w(hT),w(BL),w(TT),f&&t(QNe),f&&t(wd),w(IL),f&&t(HNe),f&&t(Wo),w(qL),w(jL),w(ET),w(DL),w(LT),f&&t(UNe),f&&t(xd),w(GL),f&&t(JNe),f&&t(Qo),w(OL),w(XL),w($T),w(zL),w(PT),f&&t(YNe),f&&t(Sd),w(QL),f&&t(KNe),f&&t(Ho),w(HL),w(JL),w(IT),w(YL),w(jT),f&&t(ZNe),f&&t(Bd),w(KL),f&&t(eje),f&&t(Uo),w(ZL),w(o8),w(GT),w(r8),w(QT),f&&t(oje),f&&t(Nd),w(t8),f&&t(rje),f&&t(Jo),w(a8),w(s8),w(UT),w(l8),w(KT),f&&t(tje),f&&t(Gd),w(i8),f&&t(aje),f&&t(Yo),w(d8),w(f8),w(e7),w(m8),w(W7),f&&t(nje),f&&t(Xd),w(g8),f&&t(sje),f&&t(Ko),w(h8),w(u8),w(H7),w(_8),w(bM),f&&t(lje),f&&t(Qd),w(b8),f&&t(ije),f&&t(Zo),w(v8),w(T8),w(FM),w(M8),w(RM),f&&t(dje),f&&t(Jd),w(E8),f&&t(cje),f&&t(er),w(C8),w(A8),w(BM),w(y8),w(DM),f&&t(fje),f&&t(Zd),w(L8),f&&t(mje),f&&t(or),w(x8),w(k8),w(OM),w(S8),w(d4),f&&t(gje),f&&t(rc),w(R8),f&&t(hje),f&&t(rr),w(P8),w(I8),w(f4),w(q8),w(M4),f&&t(pje),f&&t(nc),w(N8),f&&t(uje),f&&t(tr),w(j8),w(G8),w(C4),w(O8),w(Y4),f&&t(_je),f&&t(ic),w(V8),f&&t(bje),f&&t(ar),w(X8),w(W8),w(Z4),w(Q8),w(_E),f&&t(vje),f&&t(fc),w(H8),f&&t(Fje),f&&t(nr),w(U8),w(Y8),w(vE),w(K8),w(ME),f&&t(Tje),f&&t(hc),w(e9),f&&t(Mje),f&&t(sr),w(o9),w(t9),w(CE),w(a9),w(AE),f&&t(Eje),f&&t(_c),w(n9),f&&t(Cje),f&&t(lr),w(s9),w(i9),w(LE),w(d9),w(UE),f&&t(wje),f&&t(Fc),w(c9),f&&t(Aje),f&&t(ir),w(f9),w(g9),w(YE),w(h9),w(bC),f&&t(yje),f&&t(Ec),w(p9),f&&t(Lje),f&&t(dr),w(u9),w(b9),w(FC),w(v9),w(MC),f&&t(xje),f&&t(Ac),w(F9),f&&t($je),f&&t(cr),w(T9),w(E9),w(CC),w(C9),w(AC),f&&t(kje),f&&t(xc),w(w9),f&&t(Sje),f&&t(fr),w(A9),w(L9),w(LC),w(x9),w(e5),f&&t(Rje),f&&t(Sc),w($9),f&&t(Pje),f&&t(mr),w(k9),w(R9),w(r5),w(P9),w(m5),f&&t(Bje),f&&t(Bc),w(B9),f&&t(Ije),f&&t(gr),w(I9),w(N9),w(h5),w(j9),w(y5),f&&t(qje),f&&t(Nc),w(D9),f&&t(Nje),f&&t(hr),w(G9),w(V9),w(x5),w(X9),w(D5),f&&t(jje),f&&t(Gc),w(z9),f&&t(Dje),f&&t(pr),w(W9),w(H9),w(O5),w(U9),w(K5),f&&t(Gje),f&&t(Xc),w(J9),f&&t(Oje),f&&t(ur),w(Y9),w(Z9),w(ew),w(ex),w(fw),f&&t(Vje),f&&t(Qc),w(ox),f&&t(Xje),f&&t(_r),w(rx),w(ax),w(gw),w(nx),w(Cw),f&&t(zje),f&&t(Jc),w(sx),f&&t(Wje),f&&t(br),w(lx),w(dx),w(Aw),w(cx),w(Bw),f&&t(Qje),f&&t(Zc),w(fx),f&&t(Hje),f&&t(vr),w(mx),w(hx),w(qw),w(px),w(Ww),f&&t(Uje),f&&t(rf),w(ux),f&&t(Jje),f&&t(Fr),w(_x),w(vx),w(Hw),w(Fx),w(Jw),f&&t(Yje),f&&t(nf),w(Tx),f&&t(Kje),f&&t(Tr),w(Mx),w(Cx),w(Kw),w(wx),w(o0),f&&t(Zje),f&&t(df),w(yx),f&&t(eDe),f&&t(Mr),w(Lx),w($x),w(t0),w(kx),w(n0)}}}const dSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cSt(L){return c$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _St extends s$t{constructor(g){super();l$t(this,g,cSt,iSt,i$t,{})}}export{_St as default,dSt as metadata};
