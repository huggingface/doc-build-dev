import{S as Kyt,i as Zyt,s as eLt,e as a,k as l,w as F,t as o,M as oLt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as rLt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function tLt(L){let g,v,p,m,u,d,h,Mo,ci,hf,rt,fi,mi,tA,pf,je,We,gi,yn,aA,Ln,xn,nA,hi,$n,sA,pi,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),tA=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),aA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),nA=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),sA=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var C$=s(p);m=r(C$,"NewModelConfig"),C$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var w$=s(ci);hf=r(w$,"model_type"),w$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var A$=s(fi);mi=r(A$,'"new-model"'),A$.forEach(t),tA=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),aA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var y$=s(Ln);xn=r(y$,"PreTrainedModel"),y$.forEach(t),nA=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var _f=s(hi);$n=r(_f,"config_class"),_f.forEach(t),sA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var L$=s(pi);uf=r(L$,"NewModelConfig"),L$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,tA),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,aA),e(je,Ln),e(Ln,xn),e(je,nA),e(je,hi),e(hi,$n),e(je,sA),e(je,pi),e(pi,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function aLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function lLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function dLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,u,d,h,Mo,ci,hf,rt,fi,mi,tA,pf,je,We,gi,yn,aA,Ln,xn,nA,hi,$n,sA,pi,uf,Ca,Qe,Ae,C$,ui,w$,A$,Eo,wa,y$,_f,L$,IDe,wIe,_i,bf,bee,lA,qDe,vee,NDe,AIe,kn,jDe,Fee,DDe,GDe,Tee,ODe,VDe,yIe,iA,LIe,x$,XDe,xIe,vf,$Ie,bi,Ff,Mee,dA,zDe,Eee,WDe,kIe,Co,cA,QDe,fA,HDe,$$,UDe,JDe,YDe,mA,KDe,Cee,ZDe,eGe,oGe,Er,gA,rGe,wee,tGe,aGe,vi,nGe,Aee,sGe,lGe,yee,iGe,dGe,cGe,A,Tf,Lee,fGe,mGe,k$,gGe,hGe,pGe,Mf,xee,uGe,_Ge,S$,bGe,vGe,FGe,Ef,$ee,TGe,MGe,R$,EGe,CGe,wGe,Cf,kee,AGe,yGe,P$,LGe,xGe,$Ge,wf,See,kGe,SGe,B$,RGe,PGe,BGe,Af,Ree,IGe,qGe,I$,NGe,jGe,DGe,yf,Pee,GGe,OGe,q$,VGe,XGe,zGe,Lf,Bee,WGe,QGe,N$,HGe,UGe,JGe,xf,Iee,YGe,KGe,j$,ZGe,eOe,oOe,$f,qee,rOe,tOe,D$,aOe,nOe,sOe,kf,Nee,lOe,iOe,G$,dOe,cOe,fOe,Sf,jee,mOe,gOe,O$,hOe,pOe,uOe,Rf,Dee,_Oe,bOe,V$,vOe,FOe,TOe,Pf,Gee,MOe,EOe,X$,COe,wOe,AOe,Bf,Oee,yOe,LOe,z$,xOe,$Oe,kOe,If,Vee,SOe,ROe,W$,POe,BOe,IOe,qf,Xee,qOe,NOe,Q$,jOe,DOe,GOe,Nf,zee,OOe,VOe,H$,XOe,zOe,WOe,jf,Wee,QOe,HOe,U$,UOe,JOe,YOe,Df,Qee,KOe,ZOe,J$,eVe,oVe,rVe,Gf,Hee,tVe,aVe,Y$,nVe,sVe,lVe,Of,Uee,iVe,dVe,K$,cVe,fVe,mVe,Vf,Jee,gVe,hVe,Z$,pVe,uVe,_Ve,Xf,Yee,bVe,vVe,ek,FVe,TVe,MVe,zf,Kee,EVe,CVe,ok,wVe,AVe,yVe,Wf,Zee,LVe,xVe,rk,$Ve,kVe,SVe,Qf,eoe,RVe,PVe,tk,BVe,IVe,qVe,Hf,ooe,NVe,jVe,ak,DVe,GVe,OVe,Uf,roe,VVe,XVe,nk,zVe,WVe,QVe,Jf,toe,HVe,UVe,sk,JVe,YVe,KVe,Yf,aoe,ZVe,eXe,lk,oXe,rXe,tXe,Kf,noe,aXe,nXe,ik,sXe,lXe,iXe,Zf,soe,dXe,cXe,dk,fXe,mXe,gXe,em,loe,hXe,pXe,ck,uXe,_Xe,bXe,om,ioe,vXe,FXe,fk,TXe,MXe,EXe,rm,doe,CXe,wXe,mk,AXe,yXe,LXe,tm,coe,xXe,$Xe,gk,kXe,SXe,RXe,am,foe,PXe,BXe,hk,IXe,qXe,NXe,nm,moe,jXe,DXe,pk,GXe,OXe,VXe,sm,goe,XXe,zXe,uk,WXe,QXe,HXe,lm,hoe,UXe,JXe,_k,YXe,KXe,ZXe,im,poe,eze,oze,bk,rze,tze,aze,dm,uoe,nze,sze,vk,lze,ize,dze,cm,_oe,cze,fze,Fk,mze,gze,hze,fm,boe,pze,uze,Tk,_ze,bze,vze,mm,voe,Fze,Tze,Mk,Mze,Eze,Cze,gm,Foe,wze,Aze,Ek,yze,Lze,xze,hm,Toe,$ze,kze,Ck,Sze,Rze,Pze,pm,Moe,Bze,Ize,wk,qze,Nze,jze,um,Eoe,Dze,Gze,Ak,Oze,Vze,Xze,_m,Coe,zze,Wze,yk,Qze,Hze,Uze,bm,woe,Jze,Yze,Lk,Kze,Zze,eWe,vm,Aoe,oWe,rWe,xk,tWe,aWe,nWe,Fm,yoe,sWe,lWe,$k,iWe,dWe,cWe,Tm,Loe,fWe,mWe,kk,gWe,hWe,pWe,Mm,xoe,uWe,_We,Sk,bWe,vWe,FWe,Em,$oe,TWe,MWe,Rk,EWe,CWe,wWe,Cm,koe,AWe,yWe,Pk,LWe,xWe,$We,wm,Soe,kWe,SWe,Bk,RWe,PWe,BWe,Am,Roe,IWe,qWe,Ik,NWe,jWe,DWe,ym,Poe,GWe,OWe,qk,VWe,XWe,zWe,Lm,Boe,WWe,QWe,Nk,HWe,UWe,JWe,xm,Ioe,YWe,KWe,jk,ZWe,eQe,oQe,$m,qoe,rQe,tQe,Dk,aQe,nQe,sQe,km,Noe,lQe,iQe,Gk,dQe,cQe,fQe,Sm,joe,mQe,gQe,Ok,hQe,pQe,uQe,Rm,Doe,_Qe,bQe,Vk,vQe,FQe,TQe,Pm,Goe,MQe,EQe,Xk,CQe,wQe,AQe,Bm,Ooe,yQe,LQe,zk,xQe,$Qe,kQe,Im,Voe,SQe,RQe,Wk,PQe,BQe,IQe,qm,Xoe,qQe,NQe,Qk,jQe,DQe,GQe,Nm,zoe,OQe,VQe,Hk,XQe,zQe,WQe,jm,Woe,QQe,HQe,Uk,UQe,JQe,YQe,Dm,Qoe,KQe,ZQe,Jk,eHe,oHe,rHe,Gm,Hoe,tHe,aHe,Yk,nHe,sHe,lHe,Om,Uoe,iHe,dHe,Kk,cHe,fHe,mHe,Vm,Joe,gHe,hHe,Zk,pHe,uHe,_He,Xm,Yoe,bHe,vHe,eS,FHe,THe,MHe,zm,Koe,EHe,CHe,oS,wHe,AHe,yHe,Wm,Zoe,LHe,xHe,rS,$He,kHe,SHe,Qm,ere,RHe,PHe,tS,BHe,IHe,qHe,Hm,ore,NHe,jHe,aS,DHe,GHe,OHe,Um,rre,VHe,XHe,nS,zHe,WHe,QHe,Jm,tre,HHe,UHe,sS,JHe,YHe,KHe,Ym,are,ZHe,eUe,lS,oUe,rUe,tUe,Km,nre,aUe,nUe,iS,sUe,lUe,iUe,Zm,sre,dUe,cUe,dS,fUe,mUe,gUe,eg,lre,hUe,pUe,cS,uUe,_Ue,bUe,og,ire,vUe,FUe,fS,TUe,MUe,EUe,rg,dre,CUe,wUe,mS,AUe,yUe,LUe,tg,cre,xUe,$Ue,gS,kUe,SUe,RUe,ag,fre,PUe,BUe,hS,IUe,qUe,NUe,ng,mre,jUe,DUe,pS,GUe,OUe,VUe,sg,gre,XUe,zUe,uS,WUe,QUe,HUe,lg,hre,UUe,JUe,_S,YUe,KUe,ZUe,ig,pre,eJe,oJe,bS,rJe,tJe,aJe,dg,ure,nJe,sJe,vS,lJe,iJe,dJe,cg,_re,cJe,fJe,FS,mJe,gJe,hJe,fg,bre,pJe,uJe,TS,_Je,bJe,vJe,mg,vre,FJe,TJe,MS,MJe,EJe,CJe,gg,Fre,wJe,AJe,ES,yJe,LJe,xJe,hg,Tre,$Je,kJe,CS,SJe,RJe,PJe,pg,Mre,BJe,IJe,wS,qJe,NJe,jJe,ug,Ere,DJe,GJe,AS,OJe,VJe,XJe,_g,Cre,zJe,WJe,yS,QJe,HJe,UJe,bg,JJe,vg,hA,YJe,wre,KJe,SIe,Fi,Fg,Are,pA,ZJe,yre,eYe,RIe,wo,uA,oYe,_A,rYe,LS,tYe,aYe,nYe,bA,sYe,Lre,lYe,iYe,dYe,Cr,vA,cYe,xre,fYe,mYe,Aa,gYe,$re,hYe,pYe,kre,uYe,_Ye,Sre,bYe,vYe,FYe,k,Sn,Rre,TYe,MYe,xS,EYe,CYe,$S,wYe,AYe,yYe,Rn,Pre,LYe,xYe,kS,$Ye,kYe,SS,SYe,RYe,PYe,Pn,Bre,BYe,IYe,RS,qYe,NYe,PS,jYe,DYe,GYe,Tg,Ire,OYe,VYe,BS,XYe,zYe,WYe,Bn,qre,QYe,HYe,IS,UYe,JYe,qS,YYe,KYe,ZYe,Mg,Nre,eKe,oKe,NS,rKe,tKe,aKe,Eg,jre,nKe,sKe,jS,lKe,iKe,dKe,Cg,Dre,cKe,fKe,DS,mKe,gKe,hKe,In,Gre,pKe,uKe,GS,_Ke,bKe,OS,vKe,FKe,TKe,qn,Ore,MKe,EKe,VS,CKe,wKe,XS,AKe,yKe,LKe,Nn,Vre,xKe,$Ke,zS,kKe,SKe,WS,RKe,PKe,BKe,wg,Xre,IKe,qKe,QS,NKe,jKe,DKe,Ag,zre,GKe,OKe,HS,VKe,XKe,zKe,jn,Wre,WKe,QKe,US,HKe,UKe,JS,JKe,YKe,KKe,yg,Qre,ZKe,eZe,YS,oZe,rZe,tZe,Dn,Hre,aZe,nZe,KS,sZe,lZe,ZS,iZe,dZe,cZe,Gn,Ure,fZe,mZe,eR,gZe,hZe,oR,pZe,uZe,_Ze,On,Jre,bZe,vZe,rR,FZe,TZe,tR,MZe,EZe,CZe,Lg,Yre,wZe,AZe,aR,yZe,LZe,xZe,Vn,Kre,$Ze,kZe,nR,SZe,RZe,sR,PZe,BZe,IZe,Xn,Zre,qZe,NZe,lR,jZe,DZe,iR,GZe,OZe,VZe,zn,ete,XZe,zZe,dR,WZe,QZe,cR,HZe,UZe,JZe,Wn,ote,YZe,KZe,fR,ZZe,eeo,mR,oeo,reo,teo,Qn,rte,aeo,neo,gR,seo,leo,hR,ieo,deo,ceo,Hn,tte,feo,meo,pR,geo,heo,uR,peo,ueo,_eo,xg,ate,beo,veo,_R,Feo,Teo,Meo,Un,nte,Eeo,Ceo,bR,weo,Aeo,vR,yeo,Leo,xeo,$g,ste,$eo,keo,FR,Seo,Reo,Peo,Jn,lte,Beo,Ieo,TR,qeo,Neo,MR,jeo,Deo,Geo,Yn,ite,Oeo,Veo,ER,Xeo,zeo,CR,Weo,Qeo,Heo,Kn,dte,Ueo,Jeo,wR,Yeo,Keo,AR,Zeo,eoo,ooo,Zn,cte,roo,too,yR,aoo,noo,LR,soo,loo,ioo,es,fte,doo,coo,xR,foo,moo,$R,goo,hoo,poo,kg,mte,uoo,_oo,kR,boo,voo,Foo,os,gte,Too,Moo,SR,Eoo,Coo,RR,woo,Aoo,yoo,rs,hte,Loo,xoo,PR,$oo,koo,BR,Soo,Roo,Poo,ts,pte,Boo,Ioo,IR,qoo,Noo,qR,joo,Doo,Goo,as,ute,Ooo,Voo,NR,Xoo,zoo,jR,Woo,Qoo,Hoo,ns,_te,Uoo,Joo,DR,Yoo,Koo,GR,Zoo,ero,oro,ss,bte,rro,tro,OR,aro,nro,VR,sro,lro,iro,Sg,vte,dro,cro,XR,fro,mro,gro,ls,Fte,hro,pro,zR,uro,_ro,WR,bro,vro,Fro,Rg,Tte,Tro,Mro,QR,Ero,Cro,wro,Pg,Mte,Aro,yro,HR,Lro,xro,$ro,is,Ete,kro,Sro,UR,Rro,Pro,JR,Bro,Iro,qro,ds,Cte,Nro,jro,YR,Dro,Gro,KR,Oro,Vro,Xro,cs,wte,zro,Wro,ZR,Qro,Hro,eP,Uro,Jro,Yro,Bg,Ate,Kro,Zro,oP,eto,oto,rto,fs,yte,tto,ato,rP,nto,sto,tP,lto,ito,dto,ms,Lte,cto,fto,aP,mto,gto,nP,hto,pto,uto,gs,xte,_to,bto,sP,vto,Fto,lP,Tto,Mto,Eto,hs,$te,Cto,wto,iP,Ato,yto,dP,Lto,xto,$to,ps,kte,kto,Sto,cP,Rto,Pto,fP,Bto,Ito,qto,Ig,Ste,Nto,jto,mP,Dto,Gto,Oto,us,Rte,Vto,Xto,gP,zto,Wto,hP,Qto,Hto,Uto,qg,Pte,Jto,Yto,pP,Kto,Zto,eao,Ng,Bte,oao,rao,uP,tao,aao,nao,jg,Ite,sao,lao,_P,iao,dao,cao,Dg,qte,fao,mao,bP,gao,hao,pao,_s,Nte,uao,_ao,vP,bao,vao,FP,Fao,Tao,Mao,Gg,jte,Eao,Cao,TP,wao,Aao,yao,bs,Dte,Lao,xao,MP,$ao,kao,EP,Sao,Rao,Pao,vs,Gte,Bao,Iao,CP,qao,Nao,wP,jao,Dao,Gao,Fs,Ote,Oao,Vao,AP,Xao,zao,yP,Wao,Qao,Hao,Ts,Vte,Uao,Jao,LP,Yao,Kao,xP,Zao,eno,ono,Ms,Xte,rno,tno,$P,ano,nno,kP,sno,lno,ino,Es,zte,dno,cno,SP,fno,mno,RP,gno,hno,pno,Og,Wte,uno,_no,PP,bno,vno,Fno,Vg,Qte,Tno,Mno,BP,Eno,Cno,wno,Cs,Hte,Ano,yno,IP,Lno,xno,qP,$no,kno,Sno,ws,Ute,Rno,Pno,NP,Bno,Ino,jP,qno,Nno,jno,As,Jte,Dno,Gno,DP,Ono,Vno,GP,Xno,zno,Wno,Xg,Yte,Qno,Hno,OP,Uno,Jno,Yno,zg,Kte,Kno,Zno,VP,eso,oso,rso,Wg,Zte,tso,aso,XP,nso,sso,lso,ys,eae,iso,dso,zP,cso,fso,WP,mso,gso,hso,Qg,oae,pso,uso,QP,_so,bso,vso,Hg,rae,Fso,Tso,HP,Mso,Eso,Cso,Ug,tae,wso,Aso,UP,yso,Lso,xso,Ls,aae,$so,kso,JP,Sso,Rso,YP,Pso,Bso,Iso,Jg,nae,qso,Nso,KP,jso,Dso,Gso,Yg,sae,Oso,Vso,ZP,Xso,zso,Wso,xs,lae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,$s,iae,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,ks,dae,llo,ilo,aB,dlo,clo,nB,flo,mlo,glo,Ss,cae,hlo,plo,sB,ulo,_lo,lB,blo,vlo,Flo,Kg,Tlo,Zg,FA,Mlo,fae,Elo,PIe,Ti,eh,mae,TA,Clo,gae,wlo,BIe,Ao,MA,Alo,EA,ylo,iB,Llo,xlo,$lo,CA,klo,hae,Slo,Rlo,Plo,He,wA,Blo,pae,Ilo,qlo,ya,Nlo,uae,jlo,Dlo,_ae,Glo,Olo,bae,Vlo,Xlo,zlo,Z,oh,vae,Wlo,Qlo,dB,Hlo,Ulo,Jlo,rh,Fae,Ylo,Klo,cB,Zlo,eio,oio,th,Tae,rio,tio,fB,aio,nio,sio,ah,Mae,lio,iio,mB,dio,cio,fio,nh,Eae,mio,gio,gB,hio,pio,uio,sh,Cae,_io,bio,hB,vio,Fio,Tio,lh,wae,Mio,Eio,pB,Cio,wio,Aio,ih,Aae,yio,Lio,uB,xio,$io,kio,dh,yae,Sio,Rio,_B,Pio,Bio,Iio,ch,Lae,qio,Nio,bB,jio,Dio,Gio,fh,xae,Oio,Vio,vB,Xio,zio,Wio,mh,$ae,Qio,Hio,FB,Uio,Jio,Yio,gh,kae,Kio,Zio,TB,edo,odo,rdo,hh,Sae,tdo,ado,MB,ndo,sdo,ldo,ph,Rae,ido,ddo,EB,cdo,fdo,mdo,uh,Pae,gdo,hdo,CB,pdo,udo,_do,_h,Bae,bdo,vdo,wB,Fdo,Tdo,Mdo,bh,Iae,Edo,Cdo,AB,wdo,Ado,ydo,vh,qae,Ldo,xdo,yB,$do,kdo,Sdo,Fh,Nae,Rdo,Pdo,LB,Bdo,Ido,qdo,Th,jae,Ndo,jdo,xB,Ddo,Gdo,Odo,Mh,Dae,Vdo,Xdo,$B,zdo,Wdo,Qdo,Eh,Gae,Hdo,Udo,kB,Jdo,Ydo,Kdo,Ch,Oae,Zdo,eco,SB,oco,rco,tco,wh,Vae,aco,nco,RB,sco,lco,ico,Ah,Xae,dco,cco,PB,fco,mco,gco,yh,hco,Lh,pco,xh,AA,uco,zae,_co,IIe,Mi,$h,Wae,yA,bco,Qae,vco,qIe,yo,LA,Fco,xA,Tco,BB,Mco,Eco,Cco,$A,wco,Hae,Aco,yco,Lco,Ue,kA,xco,Uae,$co,kco,Ei,Sco,Jae,Rco,Pco,Yae,Bco,Ico,qco,pe,kh,Kae,Nco,jco,IB,Dco,Gco,Oco,Sh,Zae,Vco,Xco,ene,zco,Wco,Qco,Rh,one,Hco,Uco,qB,Jco,Yco,Kco,Ph,rne,Zco,efo,NB,ofo,rfo,tfo,Bh,tne,afo,nfo,jB,sfo,lfo,ifo,Ih,ane,dfo,cfo,DB,ffo,mfo,gfo,qh,nne,hfo,pfo,GB,ufo,_fo,bfo,Nh,sne,vfo,Ffo,OB,Tfo,Mfo,Efo,jh,lne,Cfo,wfo,VB,Afo,yfo,Lfo,Dh,ine,xfo,$fo,XB,kfo,Sfo,Rfo,Gh,dne,Pfo,Bfo,zB,Ifo,qfo,Nfo,Oh,cne,jfo,Dfo,WB,Gfo,Ofo,Vfo,Vh,fne,Xfo,zfo,QB,Wfo,Qfo,Hfo,Xh,mne,Ufo,Jfo,HB,Yfo,Kfo,Zfo,zh,gne,emo,omo,UB,rmo,tmo,amo,Wh,hne,nmo,smo,JB,lmo,imo,dmo,Qh,cmo,Hh,fmo,Uh,SA,mmo,pne,gmo,NIe,Ci,Jh,une,RA,hmo,_ne,pmo,jIe,Lo,PA,umo,wi,_mo,YB,bmo,vmo,KB,Fmo,Tmo,Mmo,BA,Emo,bne,Cmo,wmo,Amo,tt,IA,ymo,vne,Lmo,xmo,Ai,$mo,Fne,kmo,Smo,ZB,Rmo,Pmo,Bmo,Yh,Imo,Je,qA,qmo,Tne,Nmo,jmo,La,Dmo,Mne,Gmo,Omo,Ene,Vmo,Xmo,Cne,zmo,Wmo,Qmo,x,Kh,wne,Hmo,Umo,eI,Jmo,Ymo,Kmo,Zh,Ane,Zmo,ego,oI,ogo,rgo,tgo,ep,yne,ago,ngo,rI,sgo,lgo,igo,op,Lne,dgo,cgo,tI,fgo,mgo,ggo,rp,xne,hgo,pgo,aI,ugo,_go,bgo,tp,$ne,vgo,Fgo,nI,Tgo,Mgo,Ego,ap,kne,Cgo,wgo,sI,Ago,ygo,Lgo,np,Sne,xgo,$go,lI,kgo,Sgo,Rgo,sp,Rne,Pgo,Bgo,iI,Igo,qgo,Ngo,lp,Pne,jgo,Dgo,dI,Ggo,Ogo,Vgo,ip,Bne,Xgo,zgo,cI,Wgo,Qgo,Hgo,dp,Ine,Ugo,Jgo,fI,Ygo,Kgo,Zgo,cp,qne,eho,oho,mI,rho,tho,aho,fp,Nne,nho,sho,gI,lho,iho,dho,mp,jne,cho,fho,hI,mho,gho,hho,gp,Dne,pho,uho,pI,_ho,bho,vho,hp,Gne,Fho,Tho,uI,Mho,Eho,Cho,pp,One,who,Aho,_I,yho,Lho,xho,up,Vne,$ho,kho,bI,Sho,Rho,Pho,_p,Xne,Bho,Iho,vI,qho,Nho,jho,bp,zne,Dho,Gho,FI,Oho,Vho,Xho,vp,Wne,zho,Who,TI,Qho,Hho,Uho,Fp,Qne,Jho,Yho,MI,Kho,Zho,epo,Tp,Hne,opo,rpo,EI,tpo,apo,npo,Mp,Une,spo,lpo,CI,ipo,dpo,cpo,Ep,Jne,fpo,mpo,wI,gpo,hpo,ppo,Cp,Yne,upo,_po,AI,bpo,vpo,Fpo,wp,Kne,Tpo,Mpo,yI,Epo,Cpo,wpo,Ap,Zne,Apo,ypo,LI,Lpo,xpo,$po,yp,ese,kpo,Spo,xI,Rpo,Ppo,Bpo,Lp,ose,Ipo,qpo,$I,Npo,jpo,Dpo,Rs,rse,Gpo,Opo,kI,Vpo,Xpo,SI,zpo,Wpo,Qpo,xp,tse,Hpo,Upo,RI,Jpo,Ypo,Kpo,$p,ase,Zpo,euo,PI,ouo,ruo,tuo,kp,nse,auo,nuo,BI,suo,luo,iuo,Sp,sse,duo,cuo,II,fuo,muo,guo,Rp,lse,huo,puo,qI,uuo,_uo,buo,Pp,ise,vuo,Fuo,NI,Tuo,Muo,Euo,Bp,dse,Cuo,wuo,jI,Auo,yuo,Luo,Ip,cse,xuo,$uo,DI,kuo,Suo,Ruo,qp,fse,Puo,Buo,GI,Iuo,quo,Nuo,Np,mse,juo,Duo,OI,Guo,Ouo,Vuo,jp,gse,Xuo,zuo,VI,Wuo,Quo,Huo,Dp,hse,Uuo,Juo,XI,Yuo,Kuo,Zuo,Gp,pse,e_o,o_o,zI,r_o,t_o,a_o,Op,use,n_o,s_o,WI,l_o,i_o,d_o,Vp,_se,c_o,f_o,QI,m_o,g_o,h_o,Xp,bse,p_o,u_o,HI,__o,b_o,v_o,zp,vse,F_o,T_o,UI,M_o,E_o,C_o,Wp,Fse,w_o,A_o,JI,y_o,L_o,x_o,Qp,Tse,$_o,k_o,YI,S_o,R_o,P_o,Hp,Mse,B_o,I_o,KI,q_o,N_o,j_o,Up,Ese,D_o,G_o,ZI,O_o,V_o,X_o,Jp,Cse,z_o,W_o,eq,Q_o,H_o,U_o,Yp,wse,J_o,Y_o,oq,K_o,Z_o,e2o,Kp,Ase,o2o,r2o,rq,t2o,a2o,n2o,Zp,yse,s2o,l2o,tq,i2o,d2o,c2o,eu,Lse,f2o,m2o,aq,g2o,h2o,p2o,ou,xse,u2o,_2o,nq,b2o,v2o,F2o,ru,$se,T2o,M2o,sq,E2o,C2o,w2o,tu,kse,A2o,y2o,lq,L2o,x2o,$2o,au,Sse,k2o,S2o,iq,R2o,P2o,B2o,nu,Rse,I2o,q2o,dq,N2o,j2o,D2o,su,Pse,G2o,O2o,cq,V2o,X2o,z2o,lu,Bse,W2o,Q2o,fq,H2o,U2o,J2o,iu,Ise,Y2o,K2o,mq,Z2o,e1o,o1o,du,qse,r1o,t1o,gq,a1o,n1o,s1o,cu,Nse,l1o,i1o,hq,d1o,c1o,f1o,fu,jse,m1o,g1o,pq,h1o,p1o,u1o,mu,Dse,_1o,b1o,uq,v1o,F1o,T1o,gu,Gse,M1o,E1o,_q,C1o,w1o,A1o,hu,Ose,y1o,L1o,bq,x1o,$1o,k1o,pu,Vse,S1o,R1o,vq,P1o,B1o,I1o,uu,Xse,q1o,N1o,Fq,j1o,D1o,G1o,_u,zse,O1o,V1o,Tq,X1o,z1o,W1o,bu,Wse,Q1o,H1o,Mq,U1o,J1o,Y1o,vu,Qse,K1o,Z1o,Eq,ebo,obo,rbo,Fu,Hse,tbo,abo,Cq,nbo,sbo,lbo,Tu,Use,ibo,dbo,wq,cbo,fbo,mbo,Mu,Jse,gbo,hbo,Aq,pbo,ubo,_bo,Eu,Yse,bbo,vbo,yq,Fbo,Tbo,Mbo,Cu,Kse,Ebo,Cbo,Lq,wbo,Abo,ybo,wu,Zse,Lbo,xbo,xq,$bo,kbo,Sbo,Au,ele,Rbo,Pbo,$q,Bbo,Ibo,qbo,yu,ole,Nbo,jbo,kq,Dbo,Gbo,Obo,Lu,rle,Vbo,Xbo,Sq,zbo,Wbo,Qbo,xu,tle,Hbo,Ubo,Rq,Jbo,Ybo,Kbo,$u,ale,Zbo,evo,Pq,ovo,rvo,tvo,ku,nle,avo,nvo,Bq,svo,lvo,ivo,Su,sle,dvo,cvo,Iq,fvo,mvo,gvo,Ru,lle,hvo,pvo,qq,uvo,_vo,bvo,Pu,ile,vvo,Fvo,Nq,Tvo,Mvo,Evo,Bu,dle,Cvo,wvo,jq,Avo,yvo,Lvo,Iu,cle,xvo,$vo,Dq,kvo,Svo,Rvo,qu,fle,Pvo,Bvo,Gq,Ivo,qvo,Nvo,Nu,mle,jvo,Dvo,Oq,Gvo,Ovo,Vvo,ju,gle,Xvo,zvo,Vq,Wvo,Qvo,Hvo,Du,hle,Uvo,Jvo,Xq,Yvo,Kvo,Zvo,Gu,eFo,ple,oFo,rFo,ule,tFo,aFo,Ou,DIe,yi,Vu,_le,NA,nFo,ble,sFo,GIe,xo,jA,lFo,Li,iFo,zq,dFo,cFo,Wq,fFo,mFo,gFo,DA,hFo,vle,pFo,uFo,_Fo,at,GA,bFo,Fle,vFo,FFo,xi,TFo,Tle,MFo,EFo,Qq,CFo,wFo,AFo,Xu,yFo,Ye,OA,LFo,Mle,xFo,$Fo,xa,kFo,Ele,SFo,RFo,Cle,PFo,BFo,wle,IFo,qFo,NFo,G,zu,Ale,jFo,DFo,Hq,GFo,OFo,VFo,Wu,yle,XFo,zFo,Uq,WFo,QFo,HFo,Qu,Lle,UFo,JFo,Jq,YFo,KFo,ZFo,Hu,xle,e6o,o6o,Yq,r6o,t6o,a6o,Uu,$le,n6o,s6o,Kq,l6o,i6o,d6o,Ju,kle,c6o,f6o,Zq,m6o,g6o,h6o,Yu,Sle,p6o,u6o,eN,_6o,b6o,v6o,Ku,Rle,F6o,T6o,oN,M6o,E6o,C6o,Zu,Ple,w6o,A6o,rN,y6o,L6o,x6o,e_,Ble,$6o,k6o,tN,S6o,R6o,P6o,o_,Ile,B6o,I6o,aN,q6o,N6o,j6o,r_,qle,D6o,G6o,nN,O6o,V6o,X6o,t_,Nle,z6o,W6o,sN,Q6o,H6o,U6o,a_,jle,J6o,Y6o,lN,K6o,Z6o,e0o,n_,Dle,o0o,r0o,iN,t0o,a0o,n0o,s_,Gle,s0o,l0o,dN,i0o,d0o,c0o,l_,Ole,f0o,m0o,cN,g0o,h0o,p0o,i_,Vle,u0o,_0o,fN,b0o,v0o,F0o,d_,Xle,T0o,M0o,mN,E0o,C0o,w0o,c_,zle,A0o,y0o,gN,L0o,x0o,$0o,f_,Wle,k0o,S0o,hN,R0o,P0o,B0o,m_,Qle,I0o,q0o,pN,N0o,j0o,D0o,g_,Hle,G0o,O0o,uN,V0o,X0o,z0o,h_,Ule,W0o,Q0o,_N,H0o,U0o,J0o,p_,Jle,Y0o,K0o,bN,Z0o,eTo,oTo,u_,Yle,rTo,tTo,vN,aTo,nTo,sTo,__,Kle,lTo,iTo,FN,dTo,cTo,fTo,b_,Zle,mTo,gTo,TN,hTo,pTo,uTo,v_,eie,_To,bTo,MN,vTo,FTo,TTo,F_,oie,MTo,ETo,EN,CTo,wTo,ATo,T_,rie,yTo,LTo,CN,xTo,$To,kTo,M_,tie,STo,RTo,wN,PTo,BTo,ITo,E_,aie,qTo,NTo,AN,jTo,DTo,GTo,C_,nie,OTo,VTo,yN,XTo,zTo,WTo,w_,sie,QTo,HTo,LN,UTo,JTo,YTo,A_,lie,KTo,ZTo,xN,e7o,o7o,r7o,y_,iie,t7o,a7o,$N,n7o,s7o,l7o,L_,die,i7o,d7o,kN,c7o,f7o,m7o,x_,cie,g7o,h7o,SN,p7o,u7o,_7o,$_,fie,b7o,v7o,RN,F7o,T7o,M7o,k_,mie,E7o,C7o,PN,w7o,A7o,y7o,S_,L7o,gie,x7o,$7o,hie,k7o,S7o,R_,OIe,$i,P_,pie,VA,R7o,uie,P7o,VIe,$o,XA,B7o,ki,I7o,BN,q7o,N7o,IN,j7o,D7o,G7o,zA,O7o,_ie,V7o,X7o,z7o,nt,WA,W7o,bie,Q7o,H7o,Si,U7o,vie,J7o,Y7o,qN,K7o,Z7o,eMo,B_,oMo,Ke,QA,rMo,Fie,tMo,aMo,$a,nMo,Tie,sMo,lMo,Mie,iMo,dMo,Eie,cMo,fMo,mMo,z,I_,Cie,gMo,hMo,NN,pMo,uMo,_Mo,q_,wie,bMo,vMo,jN,FMo,TMo,MMo,N_,Aie,EMo,CMo,DN,wMo,AMo,yMo,j_,yie,LMo,xMo,GN,$Mo,kMo,SMo,D_,Lie,RMo,PMo,ON,BMo,IMo,qMo,G_,xie,NMo,jMo,VN,DMo,GMo,OMo,O_,$ie,VMo,XMo,XN,zMo,WMo,QMo,V_,kie,HMo,UMo,zN,JMo,YMo,KMo,X_,Sie,ZMo,e4o,WN,o4o,r4o,t4o,z_,Rie,a4o,n4o,QN,s4o,l4o,i4o,W_,Pie,d4o,c4o,HN,f4o,m4o,g4o,Q_,Bie,h4o,p4o,UN,u4o,_4o,b4o,H_,Iie,v4o,F4o,JN,T4o,M4o,E4o,U_,qie,C4o,w4o,YN,A4o,y4o,L4o,J_,Nie,x4o,$4o,KN,k4o,S4o,R4o,Y_,jie,P4o,B4o,ZN,I4o,q4o,N4o,K_,Die,j4o,D4o,ej,G4o,O4o,V4o,Z_,Gie,X4o,z4o,oj,W4o,Q4o,H4o,e2,Oie,U4o,J4o,rj,Y4o,K4o,Z4o,o2,Vie,eEo,oEo,tj,rEo,tEo,aEo,r2,Xie,nEo,sEo,aj,lEo,iEo,dEo,t2,zie,cEo,fEo,nj,mEo,gEo,hEo,a2,Wie,pEo,uEo,sj,_Eo,bEo,vEo,n2,Qie,FEo,TEo,lj,MEo,EEo,CEo,s2,Hie,wEo,AEo,ij,yEo,LEo,xEo,l2,Uie,$Eo,kEo,dj,SEo,REo,PEo,i2,Jie,BEo,IEo,cj,qEo,NEo,jEo,d2,Yie,DEo,GEo,fj,OEo,VEo,XEo,c2,Kie,zEo,WEo,mj,QEo,HEo,UEo,f2,Zie,JEo,YEo,gj,KEo,ZEo,eCo,m2,ede,oCo,rCo,hj,tCo,aCo,nCo,g2,ode,sCo,lCo,pj,iCo,dCo,cCo,h2,rde,fCo,mCo,uj,gCo,hCo,pCo,p2,tde,uCo,_Co,_j,bCo,vCo,FCo,u2,ade,TCo,MCo,bj,ECo,CCo,wCo,_2,nde,ACo,yCo,vj,LCo,xCo,$Co,b2,kCo,sde,SCo,RCo,lde,PCo,BCo,v2,XIe,Ri,F2,ide,HA,ICo,dde,qCo,zIe,ko,UA,NCo,Pi,jCo,Fj,DCo,GCo,Tj,OCo,VCo,XCo,JA,zCo,cde,WCo,QCo,HCo,st,YA,UCo,fde,JCo,YCo,Bi,KCo,mde,ZCo,e5o,Mj,o5o,r5o,t5o,T2,a5o,Ze,KA,n5o,gde,s5o,l5o,ka,i5o,hde,d5o,c5o,pde,f5o,m5o,ude,g5o,h5o,p5o,W,M2,_de,u5o,_5o,Ej,b5o,v5o,F5o,E2,bde,T5o,M5o,Cj,E5o,C5o,w5o,C2,vde,A5o,y5o,wj,L5o,x5o,$5o,w2,Fde,k5o,S5o,Aj,R5o,P5o,B5o,A2,Tde,I5o,q5o,yj,N5o,j5o,D5o,y2,Mde,G5o,O5o,Lj,V5o,X5o,z5o,L2,Ede,W5o,Q5o,xj,H5o,U5o,J5o,x2,Cde,Y5o,K5o,$j,Z5o,e3o,o3o,$2,wde,r3o,t3o,kj,a3o,n3o,s3o,k2,Ade,l3o,i3o,Sj,d3o,c3o,f3o,S2,yde,m3o,g3o,Rj,h3o,p3o,u3o,R2,Lde,_3o,b3o,Pj,v3o,F3o,T3o,P2,xde,M3o,E3o,Bj,C3o,w3o,A3o,B2,$de,y3o,L3o,Ij,x3o,$3o,k3o,I2,kde,S3o,R3o,qj,P3o,B3o,I3o,q2,Sde,q3o,N3o,Nj,j3o,D3o,G3o,N2,Rde,O3o,V3o,jj,X3o,z3o,W3o,j2,Pde,Q3o,H3o,Dj,U3o,J3o,Y3o,D2,Bde,K3o,Z3o,Gj,ewo,owo,rwo,G2,Ide,two,awo,Oj,nwo,swo,lwo,O2,qde,iwo,dwo,Vj,cwo,fwo,mwo,V2,Nde,gwo,hwo,Xj,pwo,uwo,_wo,X2,jde,bwo,vwo,zj,Fwo,Two,Mwo,z2,Dde,Ewo,Cwo,Wj,wwo,Awo,ywo,W2,Gde,Lwo,xwo,Qj,$wo,kwo,Swo,Q2,Ode,Rwo,Pwo,Hj,Bwo,Iwo,qwo,H2,Vde,Nwo,jwo,Uj,Dwo,Gwo,Owo,U2,Xde,Vwo,Xwo,Jj,zwo,Wwo,Qwo,J2,zde,Hwo,Uwo,Yj,Jwo,Ywo,Kwo,Y2,Wde,Zwo,eAo,Kj,oAo,rAo,tAo,K2,Qde,aAo,nAo,Hde,sAo,lAo,iAo,Z2,Ude,dAo,cAo,Zj,fAo,mAo,gAo,e1,Jde,hAo,pAo,eD,uAo,_Ao,bAo,o1,Yde,vAo,FAo,oD,TAo,MAo,EAo,r1,Kde,CAo,wAo,rD,AAo,yAo,LAo,t1,xAo,Zde,$Ao,kAo,ece,SAo,RAo,a1,WIe,Ii,n1,oce,ZA,PAo,rce,BAo,QIe,So,ey,IAo,qi,qAo,tD,NAo,jAo,aD,DAo,GAo,OAo,oy,VAo,tce,XAo,zAo,WAo,lt,ry,QAo,ace,HAo,UAo,Ni,JAo,nce,YAo,KAo,nD,ZAo,eyo,oyo,s1,ryo,eo,ty,tyo,sce,ayo,nyo,Sa,syo,lce,lyo,iyo,ice,dyo,cyo,dce,fyo,myo,gyo,ue,l1,cce,hyo,pyo,sD,uyo,_yo,byo,i1,fce,vyo,Fyo,lD,Tyo,Myo,Eyo,d1,mce,Cyo,wyo,iD,Ayo,yyo,Lyo,c1,gce,xyo,$yo,dD,kyo,Syo,Ryo,f1,hce,Pyo,Byo,cD,Iyo,qyo,Nyo,m1,pce,jyo,Dyo,fD,Gyo,Oyo,Vyo,g1,uce,Xyo,zyo,mD,Wyo,Qyo,Hyo,h1,_ce,Uyo,Jyo,gD,Yyo,Kyo,Zyo,p1,bce,eLo,oLo,hD,rLo,tLo,aLo,u1,vce,nLo,sLo,pD,lLo,iLo,dLo,_1,Fce,cLo,fLo,uD,mLo,gLo,hLo,b1,Tce,pLo,uLo,_D,_Lo,bLo,vLo,v1,Mce,FLo,TLo,bD,MLo,ELo,CLo,F1,Ece,wLo,ALo,vD,yLo,LLo,xLo,T1,Cce,$Lo,kLo,FD,SLo,RLo,PLo,M1,wce,BLo,ILo,TD,qLo,NLo,jLo,E1,DLo,Ace,GLo,OLo,yce,VLo,XLo,C1,HIe,ji,w1,Lce,ay,zLo,xce,WLo,UIe,Ro,ny,QLo,Di,HLo,MD,ULo,JLo,ED,YLo,KLo,ZLo,sy,e8o,$ce,o8o,r8o,t8o,it,ly,a8o,kce,n8o,s8o,Gi,l8o,Sce,i8o,d8o,CD,c8o,f8o,m8o,A1,g8o,oo,iy,h8o,Rce,p8o,u8o,Ra,_8o,Pce,b8o,v8o,Bce,F8o,T8o,Ice,M8o,E8o,C8o,q,y1,qce,w8o,A8o,wD,y8o,L8o,x8o,L1,Nce,$8o,k8o,AD,S8o,R8o,P8o,x1,jce,B8o,I8o,yD,q8o,N8o,j8o,$1,Dce,D8o,G8o,LD,O8o,V8o,X8o,k1,Gce,z8o,W8o,xD,Q8o,H8o,U8o,S1,Oce,J8o,Y8o,$D,K8o,Z8o,exo,R1,Vce,oxo,rxo,kD,txo,axo,nxo,P1,Xce,sxo,lxo,SD,ixo,dxo,cxo,B1,zce,fxo,mxo,RD,gxo,hxo,pxo,I1,Wce,uxo,_xo,PD,bxo,vxo,Fxo,q1,Qce,Txo,Mxo,BD,Exo,Cxo,wxo,N1,Hce,Axo,yxo,ID,Lxo,xxo,$xo,j1,Uce,kxo,Sxo,qD,Rxo,Pxo,Bxo,D1,Jce,Ixo,qxo,ND,Nxo,jxo,Dxo,G1,Yce,Gxo,Oxo,jD,Vxo,Xxo,zxo,O1,Kce,Wxo,Qxo,DD,Hxo,Uxo,Jxo,V1,Zce,Yxo,Kxo,GD,Zxo,e9o,o9o,X1,efe,r9o,t9o,OD,a9o,n9o,s9o,z1,ofe,l9o,i9o,VD,d9o,c9o,f9o,W1,rfe,m9o,g9o,XD,h9o,p9o,u9o,Q1,tfe,_9o,b9o,zD,v9o,F9o,T9o,H1,afe,M9o,E9o,WD,C9o,w9o,A9o,U1,nfe,y9o,L9o,QD,x9o,$9o,k9o,J1,sfe,S9o,R9o,HD,P9o,B9o,I9o,Y1,lfe,q9o,N9o,UD,j9o,D9o,G9o,K1,ife,O9o,V9o,JD,X9o,z9o,W9o,Z1,dfe,Q9o,H9o,YD,U9o,J9o,Y9o,eb,cfe,K9o,Z9o,KD,e$o,o$o,r$o,ob,ffe,t$o,a$o,ZD,n$o,s$o,l$o,rb,mfe,i$o,d$o,eG,c$o,f$o,m$o,tb,gfe,g$o,h$o,oG,p$o,u$o,_$o,ab,hfe,b$o,v$o,rG,F$o,T$o,M$o,nb,pfe,E$o,C$o,tG,w$o,A$o,y$o,sb,ufe,L$o,x$o,aG,$$o,k$o,S$o,lb,_fe,R$o,P$o,nG,B$o,I$o,q$o,ib,bfe,N$o,j$o,sG,D$o,G$o,O$o,db,vfe,V$o,X$o,lG,z$o,W$o,Q$o,cb,Ffe,H$o,U$o,iG,J$o,Y$o,K$o,fb,Tfe,Z$o,eko,dG,oko,rko,tko,mb,Mfe,ako,nko,cG,sko,lko,iko,gb,Efe,dko,cko,fG,fko,mko,gko,hb,Cfe,hko,pko,mG,uko,_ko,bko,pb,wfe,vko,Fko,gG,Tko,Mko,Eko,ub,Afe,Cko,wko,hG,Ako,yko,Lko,_b,yfe,xko,$ko,pG,kko,Sko,Rko,bb,Lfe,Pko,Bko,uG,Iko,qko,Nko,vb,jko,xfe,Dko,Gko,$fe,Oko,Vko,Fb,JIe,Oi,Tb,kfe,dy,Xko,Sfe,zko,YIe,Po,cy,Wko,Vi,Qko,_G,Hko,Uko,bG,Jko,Yko,Kko,fy,Zko,Rfe,eSo,oSo,rSo,dt,my,tSo,Pfe,aSo,nSo,Xi,sSo,Bfe,lSo,iSo,vG,dSo,cSo,fSo,Mb,mSo,ro,gy,gSo,Ife,hSo,pSo,Pa,uSo,qfe,_So,bSo,Nfe,vSo,FSo,jfe,TSo,MSo,ESo,Y,Eb,Dfe,CSo,wSo,FG,ASo,ySo,LSo,Cb,Gfe,xSo,$So,TG,kSo,SSo,RSo,wb,Ofe,PSo,BSo,MG,ISo,qSo,NSo,Ab,Vfe,jSo,DSo,EG,GSo,OSo,VSo,yb,Xfe,XSo,zSo,CG,WSo,QSo,HSo,Lb,zfe,USo,JSo,wG,YSo,KSo,ZSo,xb,Wfe,eRo,oRo,AG,rRo,tRo,aRo,$b,Qfe,nRo,sRo,yG,lRo,iRo,dRo,kb,Hfe,cRo,fRo,LG,mRo,gRo,hRo,Sb,Ufe,pRo,uRo,xG,_Ro,bRo,vRo,Rb,Jfe,FRo,TRo,$G,MRo,ERo,CRo,Pb,Yfe,wRo,ARo,kG,yRo,LRo,xRo,Bb,Kfe,$Ro,kRo,SG,SRo,RRo,PRo,Ib,Zfe,BRo,IRo,RG,qRo,NRo,jRo,qb,eme,DRo,GRo,PG,ORo,VRo,XRo,Nb,ome,zRo,WRo,BG,QRo,HRo,URo,jb,rme,JRo,YRo,IG,KRo,ZRo,ePo,Db,tme,oPo,rPo,qG,tPo,aPo,nPo,Gb,ame,sPo,lPo,NG,iPo,dPo,cPo,Ob,nme,fPo,mPo,jG,gPo,hPo,pPo,Vb,sme,uPo,_Po,DG,bPo,vPo,FPo,Xb,lme,TPo,MPo,GG,EPo,CPo,wPo,zb,ime,APo,yPo,OG,LPo,xPo,$Po,Wb,dme,kPo,SPo,VG,RPo,PPo,BPo,Qb,cme,IPo,qPo,XG,NPo,jPo,DPo,Hb,fme,GPo,OPo,zG,VPo,XPo,zPo,Ub,mme,WPo,QPo,WG,HPo,UPo,JPo,Jb,gme,YPo,KPo,QG,ZPo,eBo,oBo,Yb,hme,rBo,tBo,HG,aBo,nBo,sBo,Kb,lBo,pme,iBo,dBo,ume,cBo,fBo,Zb,KIe,zi,ev,_me,hy,mBo,bme,gBo,ZIe,Bo,py,hBo,Wi,pBo,UG,uBo,_Bo,JG,bBo,vBo,FBo,uy,TBo,vme,MBo,EBo,CBo,ct,_y,wBo,Fme,ABo,yBo,Qi,LBo,Tme,xBo,$Bo,YG,kBo,SBo,RBo,ov,PBo,to,by,BBo,Mme,IBo,qBo,Ba,NBo,Eme,jBo,DBo,Cme,GBo,OBo,wme,VBo,XBo,zBo,Yr,rv,Ame,WBo,QBo,KG,HBo,UBo,JBo,tv,yme,YBo,KBo,ZG,ZBo,eIo,oIo,av,Lme,rIo,tIo,eO,aIo,nIo,sIo,nv,xme,lIo,iIo,oO,dIo,cIo,fIo,sv,$me,mIo,gIo,rO,hIo,pIo,uIo,lv,_Io,kme,bIo,vIo,Sme,FIo,TIo,iv,eqe,Hi,dv,Rme,vy,MIo,Pme,EIo,oqe,Io,Fy,CIo,Ui,wIo,tO,AIo,yIo,aO,LIo,xIo,$Io,Ty,kIo,Bme,SIo,RIo,PIo,ft,My,BIo,Ime,IIo,qIo,Ji,NIo,qme,jIo,DIo,nO,GIo,OIo,VIo,cv,XIo,ao,Ey,zIo,Nme,WIo,QIo,Ia,HIo,jme,UIo,JIo,Dme,YIo,KIo,Gme,ZIo,eqo,oqo,U,fv,Ome,rqo,tqo,sO,aqo,nqo,sqo,mv,Vme,lqo,iqo,lO,dqo,cqo,fqo,gv,Xme,mqo,gqo,iO,hqo,pqo,uqo,hv,zme,_qo,bqo,dO,vqo,Fqo,Tqo,pv,Wme,Mqo,Eqo,cO,Cqo,wqo,Aqo,uv,Qme,yqo,Lqo,fO,xqo,$qo,kqo,_v,Hme,Sqo,Rqo,mO,Pqo,Bqo,Iqo,bv,Ume,qqo,Nqo,gO,jqo,Dqo,Gqo,vv,Jme,Oqo,Vqo,hO,Xqo,zqo,Wqo,Fv,Yme,Qqo,Hqo,pO,Uqo,Jqo,Yqo,Tv,Kme,Kqo,Zqo,uO,eNo,oNo,rNo,Mv,Zme,tNo,aNo,_O,nNo,sNo,lNo,Ev,ege,iNo,dNo,bO,cNo,fNo,mNo,Cv,oge,gNo,hNo,vO,pNo,uNo,_No,wv,rge,bNo,vNo,FO,FNo,TNo,MNo,Av,tge,ENo,CNo,TO,wNo,ANo,yNo,yv,age,LNo,xNo,MO,$No,kNo,SNo,Lv,nge,RNo,PNo,EO,BNo,INo,qNo,xv,sge,NNo,jNo,CO,DNo,GNo,ONo,$v,lge,VNo,XNo,wO,zNo,WNo,QNo,kv,ige,HNo,UNo,AO,JNo,YNo,KNo,Sv,dge,ZNo,ejo,yO,ojo,rjo,tjo,Rv,cge,ajo,njo,LO,sjo,ljo,ijo,Pv,fge,djo,cjo,xO,fjo,mjo,gjo,Bv,mge,hjo,pjo,$O,ujo,_jo,bjo,Iv,gge,vjo,Fjo,kO,Tjo,Mjo,Ejo,qv,hge,Cjo,wjo,SO,Ajo,yjo,Ljo,Nv,pge,xjo,$jo,RO,kjo,Sjo,Rjo,jv,uge,Pjo,Bjo,PO,Ijo,qjo,Njo,Dv,_ge,jjo,Djo,BO,Gjo,Ojo,Vjo,Gv,bge,Xjo,zjo,IO,Wjo,Qjo,Hjo,Ov,vge,Ujo,Jjo,qO,Yjo,Kjo,Zjo,Vv,Fge,eDo,oDo,NO,rDo,tDo,aDo,Xv,nDo,Tge,sDo,lDo,Mge,iDo,dDo,zv,rqe,Yi,Wv,Ege,Cy,cDo,Cge,fDo,tqe,qo,wy,mDo,Ki,gDo,jO,hDo,pDo,DO,uDo,_Do,bDo,Ay,vDo,wge,FDo,TDo,MDo,mt,yy,EDo,Age,CDo,wDo,Zi,ADo,yge,yDo,LDo,GO,xDo,$Do,kDo,Qv,SDo,no,Ly,RDo,Lge,PDo,BDo,qa,IDo,xge,qDo,NDo,$ge,jDo,DDo,kge,GDo,ODo,VDo,V,Hv,Sge,XDo,zDo,OO,WDo,QDo,HDo,Uv,Rge,UDo,JDo,VO,YDo,KDo,ZDo,Jv,Pge,eGo,oGo,XO,rGo,tGo,aGo,Yv,Bge,nGo,sGo,zO,lGo,iGo,dGo,Kv,Ige,cGo,fGo,WO,mGo,gGo,hGo,Zv,qge,pGo,uGo,QO,_Go,bGo,vGo,eF,Nge,FGo,TGo,HO,MGo,EGo,CGo,oF,jge,wGo,AGo,UO,yGo,LGo,xGo,rF,Dge,$Go,kGo,JO,SGo,RGo,PGo,tF,Gge,BGo,IGo,YO,qGo,NGo,jGo,aF,Oge,DGo,GGo,KO,OGo,VGo,XGo,nF,Vge,zGo,WGo,ZO,QGo,HGo,UGo,sF,Xge,JGo,YGo,eV,KGo,ZGo,eOo,lF,zge,oOo,rOo,oV,tOo,aOo,nOo,iF,Wge,sOo,lOo,rV,iOo,dOo,cOo,dF,Qge,fOo,mOo,tV,gOo,hOo,pOo,cF,Hge,uOo,_Oo,aV,bOo,vOo,FOo,fF,Uge,TOo,MOo,nV,EOo,COo,wOo,mF,Jge,AOo,yOo,sV,LOo,xOo,$Oo,gF,Yge,kOo,SOo,lV,ROo,POo,BOo,hF,Kge,IOo,qOo,iV,NOo,jOo,DOo,pF,Zge,GOo,OOo,dV,VOo,XOo,zOo,uF,ehe,WOo,QOo,cV,HOo,UOo,JOo,_F,ohe,YOo,KOo,fV,ZOo,eVo,oVo,bF,rhe,rVo,tVo,mV,aVo,nVo,sVo,vF,the,lVo,iVo,gV,dVo,cVo,fVo,FF,ahe,mVo,gVo,hV,hVo,pVo,uVo,TF,nhe,_Vo,bVo,pV,vVo,FVo,TVo,MF,she,MVo,EVo,uV,CVo,wVo,AVo,EF,lhe,yVo,LVo,_V,xVo,$Vo,kVo,CF,ihe,SVo,RVo,bV,PVo,BVo,IVo,wF,dhe,qVo,NVo,vV,jVo,DVo,GVo,AF,che,OVo,VVo,FV,XVo,zVo,WVo,yF,fhe,QVo,HVo,TV,UVo,JVo,YVo,LF,mhe,KVo,ZVo,MV,eXo,oXo,rXo,xF,ghe,tXo,aXo,EV,nXo,sXo,lXo,$F,hhe,iXo,dXo,CV,cXo,fXo,mXo,kF,phe,gXo,hXo,wV,pXo,uXo,_Xo,SF,uhe,bXo,vXo,AV,FXo,TXo,MXo,RF,EXo,_he,CXo,wXo,bhe,AXo,yXo,PF,aqe,ed,BF,vhe,xy,LXo,Fhe,xXo,nqe,No,$y,$Xo,od,kXo,yV,SXo,RXo,LV,PXo,BXo,IXo,ky,qXo,The,NXo,jXo,DXo,gt,Sy,GXo,Mhe,OXo,VXo,rd,XXo,Ehe,zXo,WXo,xV,QXo,HXo,UXo,IF,JXo,so,Ry,YXo,Che,KXo,ZXo,Na,ezo,whe,ozo,rzo,Ahe,tzo,azo,yhe,nzo,szo,lzo,Lhe,qF,xhe,izo,dzo,$V,czo,fzo,mzo,NF,gzo,$he,hzo,pzo,khe,uzo,_zo,jF,sqe,td,DF,She,Py,bzo,Rhe,vzo,lqe,jo,By,Fzo,ad,Tzo,kV,Mzo,Ezo,SV,Czo,wzo,Azo,Iy,yzo,Phe,Lzo,xzo,$zo,ht,qy,kzo,Bhe,Szo,Rzo,nd,Pzo,Ihe,Bzo,Izo,RV,qzo,Nzo,jzo,GF,Dzo,lo,Ny,Gzo,qhe,Ozo,Vzo,ja,Xzo,Nhe,zzo,Wzo,jhe,Qzo,Hzo,Dhe,Uzo,Jzo,Yzo,Fe,OF,Ghe,Kzo,Zzo,PV,eWo,oWo,rWo,VF,Ohe,tWo,aWo,BV,nWo,sWo,lWo,XF,Vhe,iWo,dWo,IV,cWo,fWo,mWo,Ps,Xhe,gWo,hWo,qV,pWo,uWo,NV,_Wo,bWo,vWo,zF,zhe,FWo,TWo,jV,MWo,EWo,CWo,pt,Whe,wWo,AWo,DV,yWo,LWo,GV,xWo,$Wo,OV,kWo,SWo,RWo,WF,Qhe,PWo,BWo,VV,IWo,qWo,NWo,QF,Hhe,jWo,DWo,XV,GWo,OWo,VWo,HF,Uhe,XWo,zWo,zV,WWo,QWo,HWo,UF,Jhe,UWo,JWo,WV,YWo,KWo,ZWo,JF,Yhe,eQo,oQo,QV,rQo,tQo,aQo,YF,Khe,nQo,sQo,HV,lQo,iQo,dQo,KF,Zhe,cQo,fQo,UV,mQo,gQo,hQo,ZF,pQo,epe,uQo,_Qo,ope,bQo,vQo,e6,iqe,sd,o6,rpe,jy,FQo,tpe,TQo,dqe,Do,Dy,MQo,ld,EQo,JV,CQo,wQo,YV,AQo,yQo,LQo,Gy,xQo,ape,$Qo,kQo,SQo,ut,Oy,RQo,npe,PQo,BQo,id,IQo,spe,qQo,NQo,KV,jQo,DQo,GQo,r6,OQo,io,Vy,VQo,lpe,XQo,zQo,Da,WQo,ipe,QQo,HQo,dpe,UQo,JQo,cpe,YQo,KQo,ZQo,fpe,t6,mpe,eHo,oHo,ZV,rHo,tHo,aHo,a6,nHo,gpe,sHo,lHo,hpe,iHo,dHo,n6,cqe,dd,s6,ppe,Xy,cHo,upe,fHo,fqe,Go,zy,mHo,cd,gHo,eX,hHo,pHo,oX,uHo,_Ho,bHo,Wy,vHo,_pe,FHo,THo,MHo,_t,Qy,EHo,bpe,CHo,wHo,fd,AHo,vpe,yHo,LHo,rX,xHo,$Ho,kHo,l6,SHo,co,Hy,RHo,Fpe,PHo,BHo,Ga,IHo,Tpe,qHo,NHo,Mpe,jHo,DHo,Epe,GHo,OHo,VHo,ke,i6,Cpe,XHo,zHo,tX,WHo,QHo,HHo,d6,wpe,UHo,JHo,aX,YHo,KHo,ZHo,c6,Ape,eUo,oUo,nX,rUo,tUo,aUo,f6,ype,nUo,sUo,sX,lUo,iUo,dUo,m6,Lpe,cUo,fUo,lX,mUo,gUo,hUo,g6,xpe,pUo,uUo,iX,_Uo,bUo,vUo,h6,$pe,FUo,TUo,dX,MUo,EUo,CUo,p6,kpe,wUo,AUo,cX,yUo,LUo,xUo,u6,Spe,$Uo,kUo,fX,SUo,RUo,PUo,_6,BUo,Rpe,IUo,qUo,Ppe,NUo,jUo,b6,mqe,md,v6,Bpe,Uy,DUo,Ipe,GUo,gqe,Oo,Jy,OUo,gd,VUo,mX,XUo,zUo,gX,WUo,QUo,HUo,Yy,UUo,qpe,JUo,YUo,KUo,bt,Ky,ZUo,Npe,eJo,oJo,hd,rJo,jpe,tJo,aJo,hX,nJo,sJo,lJo,F6,iJo,fo,Zy,dJo,Dpe,cJo,fJo,Oa,mJo,Gpe,gJo,hJo,Ope,pJo,uJo,Vpe,_Jo,bJo,vJo,Kr,T6,Xpe,FJo,TJo,pX,MJo,EJo,CJo,M6,zpe,wJo,AJo,uX,yJo,LJo,xJo,E6,Wpe,$Jo,kJo,_X,SJo,RJo,PJo,C6,Qpe,BJo,IJo,bX,qJo,NJo,jJo,w6,Hpe,DJo,GJo,vX,OJo,VJo,XJo,A6,zJo,Upe,WJo,QJo,Jpe,HJo,UJo,y6,hqe,pd,L6,Ype,eL,JJo,Kpe,YJo,pqe,Vo,oL,KJo,ud,ZJo,FX,eYo,oYo,TX,rYo,tYo,aYo,rL,nYo,Zpe,sYo,lYo,iYo,vt,tL,dYo,eue,cYo,fYo,_d,mYo,oue,gYo,hYo,MX,pYo,uYo,_Yo,x6,bYo,mo,aL,vYo,rue,FYo,TYo,Va,MYo,tue,EYo,CYo,aue,wYo,AYo,nue,yYo,LYo,xYo,Se,$6,sue,$Yo,kYo,EX,SYo,RYo,PYo,k6,lue,BYo,IYo,CX,qYo,NYo,jYo,S6,iue,DYo,GYo,wX,OYo,VYo,XYo,R6,due,zYo,WYo,AX,QYo,HYo,UYo,P6,cue,JYo,YYo,yX,KYo,ZYo,eKo,B6,fue,oKo,rKo,LX,tKo,aKo,nKo,I6,mue,sKo,lKo,xX,iKo,dKo,cKo,q6,gue,fKo,mKo,$X,gKo,hKo,pKo,N6,hue,uKo,_Ko,kX,bKo,vKo,FKo,j6,TKo,pue,MKo,EKo,uue,CKo,wKo,D6,uqe,bd,G6,_ue,nL,AKo,bue,yKo,_qe,Xo,sL,LKo,vd,xKo,SX,$Ko,kKo,RX,SKo,RKo,PKo,lL,BKo,vue,IKo,qKo,NKo,Ft,iL,jKo,Fue,DKo,GKo,Fd,OKo,Tue,VKo,XKo,PX,zKo,WKo,QKo,O6,HKo,go,dL,UKo,Mue,JKo,YKo,Xa,KKo,Eue,ZKo,eZo,Cue,oZo,rZo,wue,tZo,aZo,nZo,cL,V6,Aue,sZo,lZo,BX,iZo,dZo,cZo,X6,yue,fZo,mZo,IX,gZo,hZo,pZo,z6,uZo,Lue,_Zo,bZo,xue,vZo,FZo,W6,bqe,Td,Q6,$ue,fL,TZo,kue,MZo,vqe,zo,mL,EZo,Md,CZo,qX,wZo,AZo,NX,yZo,LZo,xZo,gL,$Zo,Sue,kZo,SZo,RZo,Tt,hL,PZo,Rue,BZo,IZo,Ed,qZo,Pue,NZo,jZo,jX,DZo,GZo,OZo,H6,VZo,ho,pL,XZo,Bue,zZo,WZo,za,QZo,Iue,HZo,UZo,que,JZo,YZo,Nue,KZo,ZZo,eer,Zr,U6,jue,oer,rer,DX,ter,aer,ner,J6,Due,ser,ler,GX,ier,der,cer,Y6,Gue,fer,mer,OX,ger,her,per,K6,Oue,uer,_er,VX,ber,ver,Fer,Z6,Vue,Ter,Mer,XX,Eer,Cer,wer,e0,Aer,Xue,yer,Ler,zue,xer,$er,o0,Fqe,Cd,r0,Wue,uL,ker,Que,Ser,Tqe,Wo,_L,Rer,wd,Per,zX,Ber,Ier,WX,qer,Ner,jer,bL,Der,Hue,Ger,Oer,Ver,Mt,vL,Xer,Uue,zer,Wer,Ad,Qer,Jue,Her,Uer,QX,Jer,Yer,Ker,t0,Zer,po,FL,eor,Yue,oor,ror,Wa,tor,Kue,aor,nor,Zue,sor,lor,e_e,ior,dor,cor,yd,a0,o_e,mor,gor,HX,hor,por,uor,n0,r_e,_or,bor,UX,vor,For,Tor,s0,t_e,Mor,Eor,JX,Cor,wor,Aor,l0,yor,a_e,Lor,xor,n_e,$or,kor,i0,Mqe,Ld,d0,s_e,TL,Sor,l_e,Ror,Eqe,Qo,ML,Por,xd,Bor,YX,Ior,qor,KX,Nor,jor,Dor,EL,Gor,i_e,Oor,Vor,Xor,Et,CL,zor,d_e,Wor,Qor,$d,Hor,c_e,Uor,Jor,ZX,Yor,Kor,Zor,c0,err,uo,wL,orr,f_e,rrr,trr,Qa,arr,m_e,nrr,srr,g_e,lrr,irr,h_e,drr,crr,frr,AL,f0,p_e,mrr,grr,ez,hrr,prr,urr,m0,u_e,_rr,brr,oz,vrr,Frr,Trr,g0,Mrr,__e,Err,Crr,b_e,wrr,Arr,h0,Cqe,kd,p0,v_e,yL,yrr,F_e,Lrr,wqe,Ho,LL,xrr,Sd,$rr,rz,krr,Srr,tz,Rrr,Prr,Brr,xL,Irr,T_e,qrr,Nrr,jrr,Ct,$L,Drr,M_e,Grr,Orr,Rd,Vrr,E_e,Xrr,zrr,az,Wrr,Qrr,Hrr,u0,Urr,_o,kL,Jrr,C_e,Yrr,Krr,Ha,Zrr,w_e,etr,otr,A_e,rtr,ttr,y_e,atr,ntr,str,L_e,_0,x_e,ltr,itr,nz,dtr,ctr,ftr,b0,mtr,$_e,gtr,htr,k_e,ptr,utr,v0,Aqe,Pd,F0,S_e,SL,_tr,R_e,btr,yqe,Uo,RL,vtr,Bd,Ftr,sz,Ttr,Mtr,lz,Etr,Ctr,wtr,PL,Atr,P_e,ytr,Ltr,xtr,wt,BL,$tr,B_e,ktr,Str,Id,Rtr,I_e,Ptr,Btr,iz,Itr,qtr,Ntr,T0,jtr,bo,IL,Dtr,q_e,Gtr,Otr,Ua,Vtr,N_e,Xtr,ztr,j_e,Wtr,Qtr,D_e,Htr,Utr,Jtr,Ja,M0,G_e,Ytr,Ktr,dz,Ztr,ear,oar,E0,O_e,rar,tar,cz,aar,nar,sar,C0,V_e,lar,iar,fz,dar,car,far,w0,X_e,mar,gar,mz,har,par,uar,A0,_ar,z_e,bar,Far,W_e,Tar,Mar,y0,Lqe,qd,L0,Q_e,qL,Ear,H_e,Car,xqe,Jo,NL,war,Nd,Aar,gz,yar,Lar,hz,xar,$ar,kar,jL,Sar,U_e,Rar,Par,Bar,At,DL,Iar,J_e,qar,Nar,jd,jar,Y_e,Dar,Gar,pz,Oar,Var,Xar,x0,zar,vo,GL,War,K_e,Qar,Har,Ya,Uar,Z_e,Jar,Yar,e2e,Kar,Zar,o2e,enr,onr,rnr,r2e,$0,t2e,tnr,anr,uz,nnr,snr,lnr,k0,inr,a2e,dnr,cnr,n2e,fnr,mnr,S0,$qe,Dd,R0,s2e,OL,gnr,l2e,hnr,kqe,Yo,VL,pnr,Gd,unr,_z,_nr,bnr,bz,vnr,Fnr,Tnr,XL,Mnr,i2e,Enr,Cnr,wnr,yt,zL,Anr,d2e,ynr,Lnr,Od,xnr,c2e,$nr,knr,vz,Snr,Rnr,Pnr,P0,Bnr,wr,WL,Inr,f2e,qnr,Nnr,Ka,jnr,m2e,Dnr,Gnr,g2e,Onr,Vnr,h2e,Xnr,znr,Wnr,N,B0,p2e,Qnr,Hnr,Fz,Unr,Jnr,Ynr,I0,u2e,Knr,Znr,Tz,esr,osr,rsr,q0,_2e,tsr,asr,Mz,nsr,ssr,lsr,N0,b2e,isr,dsr,Ez,csr,fsr,msr,j0,v2e,gsr,hsr,Cz,psr,usr,_sr,D0,F2e,bsr,vsr,wz,Fsr,Tsr,Msr,G0,T2e,Esr,Csr,Az,wsr,Asr,ysr,O0,M2e,Lsr,xsr,yz,$sr,ksr,Ssr,V0,E2e,Rsr,Psr,Lz,Bsr,Isr,qsr,X0,C2e,Nsr,jsr,xz,Dsr,Gsr,Osr,z0,w2e,Vsr,Xsr,$z,zsr,Wsr,Qsr,W0,A2e,Hsr,Usr,kz,Jsr,Ysr,Ksr,Q0,y2e,Zsr,elr,Sz,olr,rlr,tlr,H0,L2e,alr,nlr,Rz,slr,llr,ilr,U0,x2e,dlr,clr,Pz,flr,mlr,glr,J0,$2e,hlr,plr,Bz,ulr,_lr,blr,Y0,k2e,vlr,Flr,Iz,Tlr,Mlr,Elr,Bs,S2e,Clr,wlr,qz,Alr,ylr,Nz,Llr,xlr,$lr,K0,R2e,klr,Slr,jz,Rlr,Plr,Blr,Z0,P2e,Ilr,qlr,Dz,Nlr,jlr,Dlr,eT,B2e,Glr,Olr,Gz,Vlr,Xlr,zlr,oT,I2e,Wlr,Qlr,Oz,Hlr,Ulr,Jlr,rT,q2e,Ylr,Klr,Vz,Zlr,eir,oir,tT,N2e,rir,tir,Xz,air,nir,sir,aT,j2e,lir,iir,zz,dir,cir,fir,nT,D2e,mir,gir,Wz,hir,pir,uir,sT,G2e,_ir,bir,Qz,vir,Fir,Tir,lT,O2e,Mir,Eir,Hz,Cir,wir,Air,iT,V2e,yir,Lir,Uz,xir,$ir,kir,dT,X2e,Sir,Rir,Jz,Pir,Bir,Iir,cT,z2e,qir,Nir,Yz,jir,Dir,Gir,fT,W2e,Oir,Vir,Kz,Xir,zir,Wir,mT,Q2e,Qir,Hir,Zz,Uir,Jir,Yir,gT,H2e,Kir,Zir,eW,edr,odr,rdr,hT,U2e,tdr,adr,oW,ndr,sdr,ldr,pT,J2e,idr,ddr,rW,cdr,fdr,mdr,uT,Y2e,gdr,hdr,tW,pdr,udr,_dr,_T,K2e,bdr,vdr,aW,Fdr,Tdr,Mdr,bT,Z2e,Edr,Cdr,nW,wdr,Adr,ydr,vT,e1e,Ldr,xdr,sW,$dr,kdr,Sdr,FT,o1e,Rdr,Pdr,lW,Bdr,Idr,qdr,TT,r1e,Ndr,jdr,iW,Ddr,Gdr,Odr,MT,t1e,Vdr,Xdr,dW,zdr,Wdr,Qdr,ET,a1e,Hdr,Udr,cW,Jdr,Ydr,Kdr,CT,n1e,Zdr,ecr,fW,ocr,rcr,tcr,wT,s1e,acr,ncr,mW,scr,lcr,icr,AT,Sqe,Vd,yT,l1e,QL,dcr,i1e,ccr,Rqe,Ko,HL,fcr,Xd,mcr,gW,gcr,hcr,hW,pcr,ucr,_cr,UL,bcr,d1e,vcr,Fcr,Tcr,Lt,JL,Mcr,c1e,Ecr,Ccr,zd,wcr,f1e,Acr,ycr,pW,Lcr,xcr,$cr,LT,kcr,Ar,YL,Scr,m1e,Rcr,Pcr,Za,Bcr,g1e,Icr,qcr,h1e,Ncr,jcr,p1e,Dcr,Gcr,Ocr,se,xT,u1e,Vcr,Xcr,uW,zcr,Wcr,Qcr,$T,_1e,Hcr,Ucr,_W,Jcr,Ycr,Kcr,kT,b1e,Zcr,efr,bW,ofr,rfr,tfr,ST,v1e,afr,nfr,vW,sfr,lfr,ifr,RT,F1e,dfr,cfr,FW,ffr,mfr,gfr,PT,T1e,hfr,pfr,TW,ufr,_fr,bfr,BT,M1e,vfr,Ffr,MW,Tfr,Mfr,Efr,IT,E1e,Cfr,wfr,EW,Afr,yfr,Lfr,qT,C1e,xfr,$fr,CW,kfr,Sfr,Rfr,NT,w1e,Pfr,Bfr,wW,Ifr,qfr,Nfr,jT,A1e,jfr,Dfr,AW,Gfr,Ofr,Vfr,DT,y1e,Xfr,zfr,yW,Wfr,Qfr,Hfr,GT,L1e,Ufr,Jfr,LW,Yfr,Kfr,Zfr,OT,x1e,emr,omr,xW,rmr,tmr,amr,VT,$1e,nmr,smr,$W,lmr,imr,dmr,XT,k1e,cmr,fmr,kW,mmr,gmr,hmr,zT,S1e,pmr,umr,SW,_mr,bmr,vmr,WT,R1e,Fmr,Tmr,RW,Mmr,Emr,Cmr,QT,P1e,wmr,Amr,PW,ymr,Lmr,xmr,HT,B1e,$mr,kmr,BW,Smr,Rmr,Pmr,UT,I1e,Bmr,Imr,IW,qmr,Nmr,jmr,JT,q1e,Dmr,Gmr,qW,Omr,Vmr,Xmr,YT,N1e,zmr,Wmr,NW,Qmr,Hmr,Umr,KT,Pqe,Wd,ZT,j1e,KL,Jmr,D1e,Ymr,Bqe,Zo,ZL,Kmr,Qd,Zmr,jW,egr,ogr,DW,rgr,tgr,agr,e8,ngr,G1e,sgr,lgr,igr,xt,o8,dgr,O1e,cgr,fgr,Hd,mgr,V1e,ggr,hgr,GW,pgr,ugr,_gr,e7,bgr,yr,r8,vgr,X1e,Fgr,Tgr,en,Mgr,z1e,Egr,Cgr,W1e,wgr,Agr,Q1e,ygr,Lgr,xgr,Te,o7,H1e,$gr,kgr,OW,Sgr,Rgr,Pgr,r7,U1e,Bgr,Igr,VW,qgr,Ngr,jgr,t7,J1e,Dgr,Ggr,XW,Ogr,Vgr,Xgr,a7,Y1e,zgr,Wgr,zW,Qgr,Hgr,Ugr,n7,K1e,Jgr,Ygr,WW,Kgr,Zgr,ehr,s7,Z1e,ohr,rhr,QW,thr,ahr,nhr,l7,ebe,shr,lhr,HW,ihr,dhr,chr,i7,obe,fhr,mhr,UW,ghr,hhr,phr,d7,rbe,uhr,_hr,JW,bhr,vhr,Fhr,c7,tbe,Thr,Mhr,YW,Ehr,Chr,whr,f7,abe,Ahr,yhr,KW,Lhr,xhr,$hr,m7,nbe,khr,Shr,ZW,Rhr,Phr,Bhr,g7,Iqe,Ud,h7,sbe,t8,Ihr,lbe,qhr,qqe,er,a8,Nhr,Jd,jhr,eQ,Dhr,Ghr,oQ,Ohr,Vhr,Xhr,n8,zhr,ibe,Whr,Qhr,Hhr,$t,s8,Uhr,dbe,Jhr,Yhr,Yd,Khr,cbe,Zhr,epr,rQ,opr,rpr,tpr,p7,apr,Lr,l8,npr,fbe,spr,lpr,on,ipr,mbe,dpr,cpr,gbe,fpr,mpr,hbe,gpr,hpr,ppr,rn,u7,pbe,upr,_pr,tQ,bpr,vpr,Fpr,_7,ube,Tpr,Mpr,aQ,Epr,Cpr,wpr,b7,_be,Apr,ypr,nQ,Lpr,xpr,$pr,v7,bbe,kpr,Spr,sQ,Rpr,Ppr,Bpr,F7,Nqe,Kd,T7,vbe,i8,Ipr,Fbe,qpr,jqe,or,d8,Npr,Zd,jpr,lQ,Dpr,Gpr,iQ,Opr,Vpr,Xpr,c8,zpr,Tbe,Wpr,Qpr,Hpr,kt,f8,Upr,Mbe,Jpr,Ypr,ec,Kpr,Ebe,Zpr,eur,dQ,our,rur,tur,M7,aur,xr,m8,nur,Cbe,sur,lur,tn,iur,wbe,dur,cur,Abe,fur,mur,ybe,gur,hur,pur,ie,E7,Lbe,uur,_ur,cQ,bur,vur,Fur,C7,xbe,Tur,Mur,fQ,Eur,Cur,wur,w7,$be,Aur,yur,mQ,Lur,xur,$ur,A7,kbe,kur,Sur,gQ,Rur,Pur,Bur,y7,Sbe,Iur,qur,hQ,Nur,jur,Dur,L7,Rbe,Gur,Our,pQ,Vur,Xur,zur,x7,Pbe,Wur,Qur,uQ,Hur,Uur,Jur,$7,Bbe,Yur,Kur,_Q,Zur,e_r,o_r,k7,Ibe,r_r,t_r,bQ,a_r,n_r,s_r,S7,qbe,l_r,i_r,vQ,d_r,c_r,f_r,R7,Nbe,m_r,g_r,FQ,h_r,p_r,u_r,P7,jbe,__r,b_r,TQ,v_r,F_r,T_r,B7,Dbe,M_r,E_r,MQ,C_r,w_r,A_r,I7,Gbe,y_r,L_r,EQ,x_r,$_r,k_r,q7,Obe,S_r,R_r,CQ,P_r,B_r,I_r,N7,Vbe,q_r,N_r,wQ,j_r,D_r,G_r,j7,Xbe,O_r,V_r,AQ,X_r,z_r,W_r,D7,zbe,Q_r,H_r,yQ,U_r,J_r,Y_r,G7,Wbe,K_r,Z_r,LQ,e2r,o2r,r2r,O7,Qbe,t2r,a2r,xQ,n2r,s2r,l2r,V7,Dqe,oc,X7,Hbe,g8,i2r,Ube,d2r,Gqe,rr,h8,c2r,rc,f2r,$Q,m2r,g2r,kQ,h2r,p2r,u2r,p8,_2r,Jbe,b2r,v2r,F2r,St,u8,T2r,Ybe,M2r,E2r,tc,C2r,Kbe,w2r,A2r,SQ,y2r,L2r,x2r,z7,$2r,$r,_8,k2r,Zbe,S2r,R2r,an,P2r,eve,B2r,I2r,ove,q2r,N2r,rve,j2r,D2r,G2r,ye,W7,tve,O2r,V2r,RQ,X2r,z2r,W2r,Q7,ave,Q2r,H2r,PQ,U2r,J2r,Y2r,H7,nve,K2r,Z2r,BQ,e1r,o1r,r1r,U7,sve,t1r,a1r,IQ,n1r,s1r,l1r,J7,lve,i1r,d1r,qQ,c1r,f1r,m1r,Y7,ive,g1r,h1r,NQ,p1r,u1r,_1r,K7,dve,b1r,v1r,jQ,F1r,T1r,M1r,Z7,cve,E1r,C1r,DQ,w1r,A1r,y1r,eM,fve,L1r,x1r,GQ,$1r,k1r,S1r,oM,mve,R1r,P1r,OQ,B1r,I1r,q1r,rM,Oqe,ac,tM,gve,b8,N1r,hve,j1r,Vqe,tr,v8,D1r,nc,G1r,VQ,O1r,V1r,XQ,X1r,z1r,W1r,F8,Q1r,pve,H1r,U1r,J1r,Rt,T8,Y1r,uve,K1r,Z1r,sc,ebr,_ve,obr,rbr,zQ,tbr,abr,nbr,aM,sbr,kr,M8,lbr,bve,ibr,dbr,nn,cbr,vve,fbr,mbr,Fve,gbr,hbr,Tve,pbr,ubr,_br,ee,nM,Mve,bbr,vbr,WQ,Fbr,Tbr,Mbr,sM,Eve,Ebr,Cbr,QQ,wbr,Abr,ybr,lM,Cve,Lbr,xbr,HQ,$br,kbr,Sbr,iM,wve,Rbr,Pbr,UQ,Bbr,Ibr,qbr,dM,Ave,Nbr,jbr,JQ,Dbr,Gbr,Obr,cM,yve,Vbr,Xbr,YQ,zbr,Wbr,Qbr,fM,Lve,Hbr,Ubr,KQ,Jbr,Ybr,Kbr,mM,xve,Zbr,evr,ZQ,ovr,rvr,tvr,gM,$ve,avr,nvr,eH,svr,lvr,ivr,hM,kve,dvr,cvr,oH,fvr,mvr,gvr,pM,Sve,hvr,pvr,rH,uvr,_vr,bvr,uM,Rve,vvr,Fvr,tH,Tvr,Mvr,Evr,_M,Pve,Cvr,wvr,aH,Avr,yvr,Lvr,bM,Bve,xvr,$vr,nH,kvr,Svr,Rvr,vM,Ive,Pvr,Bvr,sH,Ivr,qvr,Nvr,FM,qve,jvr,Dvr,lH,Gvr,Ovr,Vvr,TM,Nve,Xvr,zvr,iH,Wvr,Qvr,Hvr,MM,jve,Uvr,Jvr,dH,Yvr,Kvr,Zvr,EM,Dve,eFr,oFr,cH,rFr,tFr,aFr,CM,Gve,nFr,sFr,fH,lFr,iFr,dFr,wM,Ove,cFr,fFr,mH,mFr,gFr,hFr,AM,Vve,pFr,uFr,gH,_Fr,bFr,vFr,yM,Xve,FFr,TFr,hH,MFr,EFr,CFr,LM,zve,wFr,AFr,pH,yFr,LFr,xFr,xM,Wve,$Fr,kFr,uH,SFr,RFr,PFr,$M,Qve,BFr,IFr,_H,qFr,NFr,jFr,kM,Xqe,lc,SM,Hve,E8,DFr,Uve,GFr,zqe,ar,C8,OFr,ic,VFr,bH,XFr,zFr,vH,WFr,QFr,HFr,w8,UFr,Jve,JFr,YFr,KFr,Pt,A8,ZFr,Yve,e6r,o6r,dc,r6r,Kve,t6r,a6r,FH,n6r,s6r,l6r,RM,i6r,Sr,y8,d6r,Zve,c6r,f6r,sn,m6r,eFe,g6r,h6r,oFe,p6r,u6r,rFe,_6r,b6r,v6r,he,PM,tFe,F6r,T6r,TH,M6r,E6r,C6r,BM,aFe,w6r,A6r,MH,y6r,L6r,x6r,IM,nFe,$6r,k6r,EH,S6r,R6r,P6r,qM,sFe,B6r,I6r,CH,q6r,N6r,j6r,NM,lFe,D6r,G6r,wH,O6r,V6r,X6r,jM,iFe,z6r,W6r,AH,Q6r,H6r,U6r,DM,dFe,J6r,Y6r,yH,K6r,Z6r,e0r,GM,cFe,o0r,r0r,LH,t0r,a0r,n0r,OM,fFe,s0r,l0r,xH,i0r,d0r,c0r,VM,mFe,f0r,m0r,$H,g0r,h0r,p0r,XM,gFe,u0r,_0r,kH,b0r,v0r,F0r,zM,hFe,T0r,M0r,SH,E0r,C0r,w0r,WM,pFe,A0r,y0r,RH,L0r,x0r,$0r,QM,uFe,k0r,S0r,PH,R0r,P0r,B0r,HM,_Fe,I0r,q0r,BH,N0r,j0r,D0r,UM,bFe,G0r,O0r,IH,V0r,X0r,z0r,JM,vFe,W0r,Q0r,qH,H0r,U0r,J0r,YM,Wqe,cc,KM,FFe,L8,Y0r,TFe,K0r,Qqe,nr,x8,Z0r,fc,eTr,NH,oTr,rTr,jH,tTr,aTr,nTr,$8,sTr,MFe,lTr,iTr,dTr,Bt,k8,cTr,EFe,fTr,mTr,mc,gTr,CFe,hTr,pTr,DH,uTr,_Tr,bTr,ZM,vTr,Rr,S8,FTr,wFe,TTr,MTr,ln,ETr,AFe,CTr,wTr,yFe,ATr,yTr,LFe,LTr,xTr,$Tr,R8,e4,xFe,kTr,STr,GH,RTr,PTr,BTr,o4,$Fe,ITr,qTr,OH,NTr,jTr,DTr,r4,Hqe,gc,t4,kFe,P8,GTr,SFe,OTr,Uqe,sr,B8,VTr,hc,XTr,VH,zTr,WTr,XH,QTr,HTr,UTr,I8,JTr,RFe,YTr,KTr,ZTr,It,q8,e7r,PFe,o7r,r7r,pc,t7r,BFe,a7r,n7r,zH,s7r,l7r,i7r,a4,d7r,Pr,N8,c7r,IFe,f7r,m7r,dn,g7r,qFe,h7r,p7r,NFe,u7r,_7r,jFe,b7r,v7r,F7r,DFe,n4,GFe,T7r,M7r,WH,E7r,C7r,w7r,s4,Jqe,uc,l4,OFe,j8,A7r,VFe,y7r,Yqe,lr,D8,L7r,_c,x7r,QH,$7r,k7r,HH,S7r,R7r,P7r,G8,B7r,XFe,I7r,q7r,N7r,qt,O8,j7r,zFe,D7r,G7r,bc,O7r,WFe,V7r,X7r,UH,z7r,W7r,Q7r,i4,H7r,Br,V8,U7r,QFe,J7r,Y7r,cn,K7r,HFe,Z7r,eMr,UFe,oMr,rMr,JFe,tMr,aMr,nMr,de,d4,YFe,sMr,lMr,JH,iMr,dMr,cMr,c4,KFe,fMr,mMr,YH,gMr,hMr,pMr,f4,ZFe,uMr,_Mr,KH,bMr,vMr,FMr,m4,e6e,TMr,MMr,ZH,EMr,CMr,wMr,g4,o6e,AMr,yMr,eU,LMr,xMr,$Mr,h4,r6e,kMr,SMr,oU,RMr,PMr,BMr,p4,t6e,IMr,qMr,rU,NMr,jMr,DMr,u4,a6e,GMr,OMr,tU,VMr,XMr,zMr,_4,n6e,WMr,QMr,aU,HMr,UMr,JMr,b4,s6e,YMr,KMr,nU,ZMr,e4r,o4r,v4,l6e,r4r,t4r,sU,a4r,n4r,s4r,F4,i6e,l4r,i4r,lU,d4r,c4r,f4r,T4,d6e,m4r,g4r,iU,h4r,p4r,u4r,M4,c6e,_4r,b4r,dU,v4r,F4r,T4r,E4,f6e,M4r,E4r,cU,C4r,w4r,A4r,C4,m6e,y4r,L4r,fU,x4r,$4r,k4r,w4,g6e,S4r,R4r,mU,P4r,B4r,I4r,A4,h6e,q4r,N4r,gU,j4r,D4r,G4r,y4,p6e,O4r,V4r,hU,X4r,z4r,W4r,L4,u6e,Q4r,H4r,pU,U4r,J4r,Y4r,x4,Kqe,vc,$4,_6e,X8,K4r,b6e,Z4r,Zqe,ir,z8,eEr,Fc,oEr,uU,rEr,tEr,_U,aEr,nEr,sEr,W8,lEr,v6e,iEr,dEr,cEr,Nt,Q8,fEr,F6e,mEr,gEr,Tc,hEr,T6e,pEr,uEr,bU,_Er,bEr,vEr,k4,FEr,Ir,H8,TEr,M6e,MEr,EEr,fn,CEr,E6e,wEr,AEr,C6e,yEr,LEr,w6e,xEr,$Er,kEr,ce,S4,A6e,SEr,REr,vU,PEr,BEr,IEr,R4,y6e,qEr,NEr,FU,jEr,DEr,GEr,P4,L6e,OEr,VEr,TU,XEr,zEr,WEr,B4,x6e,QEr,HEr,MU,UEr,JEr,YEr,I4,$6e,KEr,ZEr,EU,eCr,oCr,rCr,q4,k6e,tCr,aCr,CU,nCr,sCr,lCr,N4,S6e,iCr,dCr,wU,cCr,fCr,mCr,j4,R6e,gCr,hCr,AU,pCr,uCr,_Cr,D4,P6e,bCr,vCr,yU,FCr,TCr,MCr,G4,B6e,ECr,CCr,LU,wCr,ACr,yCr,O4,I6e,LCr,xCr,xU,$Cr,kCr,SCr,V4,q6e,RCr,PCr,$U,BCr,ICr,qCr,X4,N6e,NCr,jCr,kU,DCr,GCr,OCr,z4,j6e,VCr,XCr,SU,zCr,WCr,QCr,W4,D6e,HCr,UCr,RU,JCr,YCr,KCr,Q4,G6e,ZCr,e5r,PU,o5r,r5r,t5r,H4,O6e,a5r,n5r,BU,s5r,l5r,i5r,U4,V6e,d5r,c5r,IU,f5r,m5r,g5r,J4,X6e,h5r,p5r,qU,u5r,_5r,b5r,Y4,z6e,v5r,F5r,NU,T5r,M5r,E5r,K4,eNe,Mc,Z4,W6e,U8,C5r,Q6e,w5r,oNe,dr,J8,A5r,Ec,y5r,jU,L5r,x5r,DU,$5r,k5r,S5r,Y8,R5r,H6e,P5r,B5r,I5r,jt,K8,q5r,U6e,N5r,j5r,Cc,D5r,J6e,G5r,O5r,GU,V5r,X5r,z5r,eE,W5r,qr,Z8,Q5r,Y6e,H5r,U5r,mn,J5r,K6e,Y5r,K5r,Z6e,Z5r,e3r,e0e,o3r,r3r,t3r,o0e,oE,r0e,a3r,n3r,OU,s3r,l3r,i3r,rE,rNe,wc,tE,t0e,ex,d3r,a0e,c3r,tNe,cr,ox,f3r,Ac,m3r,VU,g3r,h3r,XU,p3r,u3r,_3r,rx,b3r,n0e,v3r,F3r,T3r,Dt,tx,M3r,s0e,E3r,C3r,yc,w3r,l0e,A3r,y3r,zU,L3r,x3r,$3r,aE,k3r,Nr,ax,S3r,i0e,R3r,P3r,gn,B3r,d0e,I3r,q3r,c0e,N3r,j3r,f0e,D3r,G3r,O3r,m0e,nE,g0e,V3r,X3r,WU,z3r,W3r,Q3r,sE,aNe,Lc,lE,h0e,nx,H3r,p0e,U3r,nNe,fr,sx,J3r,xc,Y3r,QU,K3r,Z3r,HU,ewr,owr,rwr,lx,twr,u0e,awr,nwr,swr,Gt,ix,lwr,_0e,iwr,dwr,$c,cwr,b0e,fwr,mwr,UU,gwr,hwr,pwr,iE,uwr,jr,dx,_wr,v0e,bwr,vwr,hn,Fwr,F0e,Twr,Mwr,T0e,Ewr,Cwr,M0e,wwr,Awr,ywr,re,dE,E0e,Lwr,xwr,JU,$wr,kwr,Swr,cE,C0e,Rwr,Pwr,YU,Bwr,Iwr,qwr,fE,w0e,Nwr,jwr,KU,Dwr,Gwr,Owr,mE,A0e,Vwr,Xwr,ZU,zwr,Wwr,Qwr,gE,y0e,Hwr,Uwr,eJ,Jwr,Ywr,Kwr,hE,L0e,Zwr,eAr,oJ,oAr,rAr,tAr,pE,x0e,aAr,nAr,rJ,sAr,lAr,iAr,uE,$0e,dAr,cAr,tJ,fAr,mAr,gAr,_E,k0e,hAr,pAr,aJ,uAr,_Ar,bAr,bE,S0e,vAr,FAr,nJ,TAr,MAr,EAr,vE,R0e,CAr,wAr,sJ,AAr,yAr,LAr,FE,P0e,xAr,$Ar,lJ,kAr,SAr,RAr,TE,B0e,PAr,BAr,iJ,IAr,qAr,NAr,ME,I0e,jAr,DAr,dJ,GAr,OAr,VAr,EE,q0e,XAr,zAr,cJ,WAr,QAr,HAr,CE,N0e,UAr,JAr,fJ,YAr,KAr,ZAr,wE,j0e,eyr,oyr,mJ,ryr,tyr,ayr,AE,D0e,nyr,syr,gJ,lyr,iyr,dyr,yE,G0e,cyr,fyr,hJ,myr,gyr,hyr,LE,O0e,pyr,uyr,pJ,_yr,byr,vyr,xE,V0e,Fyr,Tyr,uJ,Myr,Eyr,Cyr,$E,X0e,wyr,Ayr,_J,yyr,Lyr,xyr,kE,z0e,$yr,kyr,bJ,Syr,Ryr,Pyr,SE,W0e,Byr,Iyr,vJ,qyr,Nyr,jyr,RE,Q0e,Dyr,Gyr,FJ,Oyr,Vyr,Xyr,PE,sNe,kc,BE,H0e,cx,zyr,U0e,Wyr,lNe,mr,fx,Qyr,Sc,Hyr,TJ,Uyr,Jyr,MJ,Yyr,Kyr,Zyr,mx,eLr,J0e,oLr,rLr,tLr,Ot,gx,aLr,Y0e,nLr,sLr,Rc,lLr,K0e,iLr,dLr,EJ,cLr,fLr,mLr,IE,gLr,Dr,hx,hLr,Z0e,pLr,uLr,pn,_Lr,eTe,bLr,vLr,oTe,FLr,TLr,rTe,MLr,ELr,CLr,Re,qE,tTe,wLr,ALr,CJ,yLr,LLr,xLr,NE,aTe,$Lr,kLr,wJ,SLr,RLr,PLr,jE,nTe,BLr,ILr,AJ,qLr,NLr,jLr,DE,sTe,DLr,GLr,yJ,OLr,VLr,XLr,GE,lTe,zLr,WLr,LJ,QLr,HLr,ULr,OE,iTe,JLr,YLr,xJ,KLr,ZLr,e8r,VE,dTe,o8r,r8r,$J,t8r,a8r,n8r,XE,cTe,s8r,l8r,kJ,i8r,d8r,c8r,zE,fTe,f8r,m8r,SJ,g8r,h8r,p8r,WE,iNe,Pc,QE,mTe,px,u8r,gTe,_8r,dNe,gr,ux,b8r,Bc,v8r,RJ,F8r,T8r,PJ,M8r,E8r,C8r,_x,w8r,hTe,A8r,y8r,L8r,Vt,bx,x8r,pTe,$8r,k8r,Ic,S8r,uTe,R8r,P8r,BJ,B8r,I8r,q8r,HE,N8r,Gr,vx,j8r,_Te,D8r,G8r,un,O8r,bTe,V8r,X8r,vTe,z8r,W8r,FTe,Q8r,H8r,U8r,Me,UE,TTe,J8r,Y8r,IJ,K8r,Z8r,exr,JE,MTe,oxr,rxr,qJ,txr,axr,nxr,YE,ETe,sxr,lxr,NJ,ixr,dxr,cxr,KE,CTe,fxr,mxr,jJ,gxr,hxr,pxr,ZE,wTe,uxr,_xr,DJ,bxr,vxr,Fxr,eC,ATe,Txr,Mxr,GJ,Exr,Cxr,wxr,oC,yTe,Axr,yxr,OJ,Lxr,xxr,$xr,rC,LTe,kxr,Sxr,VJ,Rxr,Pxr,Bxr,tC,xTe,Ixr,qxr,XJ,Nxr,jxr,Dxr,aC,$Te,Gxr,Oxr,zJ,Vxr,Xxr,zxr,nC,kTe,Wxr,Qxr,WJ,Hxr,Uxr,Jxr,sC,STe,Yxr,Kxr,QJ,Zxr,e9r,o9r,lC,cNe,qc,iC,RTe,Fx,r9r,PTe,t9r,fNe,hr,Tx,a9r,Nc,n9r,HJ,s9r,l9r,UJ,i9r,d9r,c9r,Mx,f9r,BTe,m9r,g9r,h9r,Xt,Ex,p9r,ITe,u9r,_9r,jc,b9r,qTe,v9r,F9r,JJ,T9r,M9r,E9r,dC,C9r,Or,Cx,w9r,NTe,A9r,y9r,_n,L9r,jTe,x9r,$9r,DTe,k9r,S9r,GTe,R9r,P9r,B9r,Le,cC,OTe,I9r,q9r,YJ,N9r,j9r,D9r,fC,VTe,G9r,O9r,KJ,V9r,X9r,z9r,mC,XTe,W9r,Q9r,ZJ,H9r,U9r,J9r,gC,zTe,Y9r,K9r,eY,Z9r,e$r,o$r,hC,WTe,r$r,t$r,oY,a$r,n$r,s$r,pC,QTe,l$r,i$r,rY,d$r,c$r,f$r,uC,HTe,m$r,g$r,tY,h$r,p$r,u$r,_C,UTe,_$r,b$r,aY,v$r,F$r,T$r,bC,JTe,M$r,E$r,nY,C$r,w$r,A$r,vC,YTe,y$r,L$r,sY,x$r,$$r,k$r,FC,mNe,Dc,TC,KTe,wx,S$r,ZTe,R$r,gNe,pr,Ax,P$r,Gc,B$r,lY,I$r,q$r,iY,N$r,j$r,D$r,yx,G$r,e7e,O$r,V$r,X$r,zt,Lx,z$r,o7e,W$r,Q$r,Oc,H$r,r7e,U$r,J$r,dY,Y$r,K$r,Z$r,MC,ekr,Vr,xx,okr,t7e,rkr,tkr,bn,akr,a7e,nkr,skr,n7e,lkr,ikr,s7e,dkr,ckr,fkr,Pe,EC,l7e,mkr,gkr,cY,hkr,pkr,ukr,CC,i7e,_kr,bkr,fY,vkr,Fkr,Tkr,wC,d7e,Mkr,Ekr,mY,Ckr,wkr,Akr,AC,c7e,ykr,Lkr,gY,xkr,$kr,kkr,yC,f7e,Skr,Rkr,hY,Pkr,Bkr,Ikr,LC,m7e,qkr,Nkr,pY,jkr,Dkr,Gkr,xC,g7e,Okr,Vkr,uY,Xkr,zkr,Wkr,$C,h7e,Qkr,Hkr,_Y,Ukr,Jkr,Ykr,kC,p7e,Kkr,Zkr,bY,eSr,oSr,rSr,SC,hNe,Vc,RC,u7e,$x,tSr,_7e,aSr,pNe,ur,kx,nSr,Xc,sSr,vY,lSr,iSr,FY,dSr,cSr,fSr,Sx,mSr,b7e,gSr,hSr,pSr,Wt,Rx,uSr,v7e,_Sr,bSr,zc,vSr,F7e,FSr,TSr,TY,MSr,ESr,CSr,PC,wSr,Xr,Px,ASr,T7e,ySr,LSr,vn,xSr,M7e,$Sr,kSr,E7e,SSr,RSr,C7e,PSr,BSr,ISr,xe,BC,w7e,qSr,NSr,MY,jSr,DSr,GSr,IC,A7e,OSr,VSr,EY,XSr,zSr,WSr,qC,y7e,QSr,HSr,CY,USr,JSr,YSr,NC,L7e,KSr,ZSr,wY,eRr,oRr,rRr,jC,x7e,tRr,aRr,AY,nRr,sRr,lRr,DC,$7e,iRr,dRr,yY,cRr,fRr,mRr,GC,k7e,gRr,hRr,LY,pRr,uRr,_Rr,OC,S7e,bRr,vRr,xY,FRr,TRr,MRr,VC,R7e,ERr,CRr,$Y,wRr,ARr,yRr,XC,P7e,LRr,xRr,kY,$Rr,kRr,SRr,zC,uNe,Wc,WC,B7e,Bx,RRr,I7e,PRr,_Ne,_r,Ix,BRr,Qc,IRr,SY,qRr,NRr,RY,jRr,DRr,GRr,qx,ORr,q7e,VRr,XRr,zRr,Qt,Nx,WRr,N7e,QRr,HRr,Hc,URr,j7e,JRr,YRr,PY,KRr,ZRr,ePr,QC,oPr,zr,jx,rPr,D7e,tPr,aPr,Fn,nPr,G7e,sPr,lPr,O7e,iPr,dPr,V7e,cPr,fPr,mPr,$e,HC,X7e,gPr,hPr,BY,pPr,uPr,_Pr,UC,z7e,bPr,vPr,IY,FPr,TPr,MPr,JC,W7e,EPr,CPr,qY,wPr,APr,yPr,YC,Q7e,LPr,xPr,NY,$Pr,kPr,SPr,KC,H7e,RPr,PPr,jY,BPr,IPr,qPr,ZC,U7e,NPr,jPr,DY,DPr,GPr,OPr,e5,J7e,VPr,XPr,GY,zPr,WPr,QPr,o5,Y7e,HPr,UPr,OY,JPr,YPr,KPr,r5,K7e,ZPr,eBr,VY,oBr,rBr,tBr,t5,Z7e,aBr,nBr,XY,sBr,lBr,iBr,a5,bNe,Uc,n5,eMe,Dx,dBr,oMe,cBr,vNe,br,Gx,fBr,Jc,mBr,zY,gBr,hBr,WY,pBr,uBr,_Br,Ox,bBr,rMe,vBr,FBr,TBr,Ht,Vx,MBr,tMe,EBr,CBr,Yc,wBr,aMe,ABr,yBr,QY,LBr,xBr,$Br,s5,kBr,Wr,Xx,SBr,nMe,RBr,PBr,Tn,BBr,sMe,IBr,qBr,lMe,NBr,jBr,iMe,DBr,GBr,OBr,De,l5,dMe,VBr,XBr,HY,zBr,WBr,QBr,i5,cMe,HBr,UBr,UY,JBr,YBr,KBr,d5,fMe,ZBr,eIr,JY,oIr,rIr,tIr,c5,mMe,aIr,nIr,YY,sIr,lIr,iIr,f5,gMe,dIr,cIr,KY,fIr,mIr,gIr,m5,hMe,hIr,pIr,ZY,uIr,_Ir,bIr,g5,pMe,vIr,FIr,eK,TIr,MIr,EIr,h5,uMe,CIr,wIr,oK,AIr,yIr,LIr,p5,FNe,Kc,u5,_Me,zx,xIr,bMe,$Ir,TNe,vr,Wx,kIr,Zc,SIr,rK,RIr,PIr,tK,BIr,IIr,qIr,Qx,NIr,vMe,jIr,DIr,GIr,Ut,Hx,OIr,FMe,VIr,XIr,ef,zIr,TMe,WIr,QIr,aK,HIr,UIr,JIr,_5,YIr,Qr,Ux,KIr,MMe,ZIr,eqr,Mn,oqr,EMe,rqr,tqr,CMe,aqr,nqr,wMe,sqr,lqr,iqr,Ge,b5,AMe,dqr,cqr,nK,fqr,mqr,gqr,v5,yMe,hqr,pqr,sK,uqr,_qr,bqr,F5,LMe,vqr,Fqr,lK,Tqr,Mqr,Eqr,T5,xMe,Cqr,wqr,iK,Aqr,yqr,Lqr,M5,$Me,xqr,$qr,dK,kqr,Sqr,Rqr,E5,kMe,Pqr,Bqr,cK,Iqr,qqr,Nqr,C5,SMe,jqr,Dqr,fK,Gqr,Oqr,Vqr,w5,RMe,Xqr,zqr,mK,Wqr,Qqr,Hqr,A5,MNe,of,y5,PMe,Jx,Uqr,BMe,Jqr,ENe,Fr,Yx,Yqr,rf,Kqr,gK,Zqr,eNr,hK,oNr,rNr,tNr,Kx,aNr,IMe,nNr,sNr,lNr,Jt,Zx,iNr,qMe,dNr,cNr,tf,fNr,NMe,mNr,gNr,pK,hNr,pNr,uNr,L5,_Nr,Hr,e9,bNr,jMe,vNr,FNr,En,TNr,DMe,MNr,ENr,GMe,CNr,wNr,OMe,ANr,yNr,LNr,VMe,x5,XMe,xNr,$Nr,uK,kNr,SNr,RNr,$5,CNe,af,k5,zMe,o9,PNr,WMe,BNr,wNe,Tr,r9,INr,nf,qNr,_K,NNr,jNr,bK,DNr,GNr,ONr,t9,VNr,QMe,XNr,zNr,WNr,Yt,a9,QNr,HMe,HNr,UNr,sf,JNr,UMe,YNr,KNr,vK,ZNr,ejr,ojr,S5,rjr,Ur,n9,tjr,JMe,ajr,njr,Cn,sjr,YMe,ljr,ijr,KMe,djr,cjr,ZMe,fjr,mjr,gjr,s9,R5,e4e,hjr,pjr,FK,ujr,_jr,bjr,P5,o4e,vjr,Fjr,TK,Tjr,Mjr,Ejr,B5,ANe,lf,I5,r4e,l9,Cjr,t4e,wjr,yNe,Mr,i9,Ajr,df,yjr,MK,Ljr,xjr,EK,$jr,kjr,Sjr,d9,Rjr,a4e,Pjr,Bjr,Ijr,Kt,c9,qjr,n4e,Njr,jjr,cf,Djr,s4e,Gjr,Ojr,CK,Vjr,Xjr,zjr,q5,Wjr,Jr,f9,Qjr,l4e,Hjr,Ujr,wn,Jjr,i4e,Yjr,Kjr,d4e,Zjr,eDr,c4e,oDr,rDr,tDr,f4e,N5,m4e,aDr,nDr,wK,sDr,lDr,iDr,j5,LNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),lA=new oe({}),iA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new dDr({props:{warning:!0,$$slots:{default:[tLt]},$$scope:{ctx:L}}}),dA=new oe({}),cA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/configuration_auto.py#L573"}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/configuration_auto.py#L596"}}),bg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),hA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/configuration_auto.py#L719"}}),pA=new oe({}),uA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/tokenization_auto.py#L388"}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17206/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/tokenization_auto.py#L402"}}),Kg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),FA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/tokenization_auto.py#L598"}}),TA=new oe({}),MA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),wA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17206/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),yh=new dDr({props:{$$slots:{default:[sLt]},$$scope:{ctx:L}}}),Lh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),AA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),yA=new oe({}),LA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/processing_auto.py#L87"}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/processing_auto.py#L101"}}),Qh=new dDr({props:{$$slots:{default:[iLt]},$$scope:{ctx:L}}}),Hh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),SA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/processing_auto.py#L254"}}),RA=new oe({}),PA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L725"}}),IA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Yh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),Ou=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),NA=new oe({}),jA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L732"}}),GA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Xu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),R_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),VA=new oe({}),XA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L747"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),B_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),v2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),HA=new oe({}),UA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L754"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),T2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),a1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),ZA=new oe({}),ey=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L761"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),s1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),C1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),ay=new oe({}),ny=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L770"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),A1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),dy=new oe({}),cy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L804"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L811"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L797"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L779"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),xy=new oe({}),$y=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L786"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),Py=new oe({}),By=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L820"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L859"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),Xy=new oe({}),zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L866"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),Uy=new oe({}),Jy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L889"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),eL=new oe({}),oL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L873"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L880"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),W6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L898"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),uL=new oe({}),_L=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L905"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L852"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),yL=new oe({}),LL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L827"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L834"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),qL=new oe({}),NL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L843"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),QL=new oe({}),HL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),t8=new oe({}),a8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),i8=new oe({}),d8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),V7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),g8=new oe({}),h8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),z7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),b8=new oe({}),v8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),E8=new oe({}),C8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),P8=new oe({}),B8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),j8=new oe({}),D8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),X8=new oe({}),z8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),U8=new oe({}),J8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),px=new oe({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),a9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),c9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),tA=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),aA=o("AutoConfig"),Ln=o(", "),xn=a("a"),nA=o("AutoModel"),hi=o(`, and
`),$n=a("a"),sA=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),C$=o("will create a model that is an instance of "),ui=a("a"),w$=o("BertModel"),A$=o("."),Eo=l(),wa=a("p"),y$=o("There is one class of "),_f=a("code"),L$=o("AutoModel"),IDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wIe=l(),_i=a("h2"),bf=a("a"),bee=a("span"),F(lA.$$.fragment),qDe=l(),vee=a("span"),NDe=o("Extending the Auto Classes"),AIe=l(),kn=a("p"),jDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fee=a("code"),DDe=o("NewModel"),GDe=o(", make sure you have a "),Tee=a("code"),ODe=o("NewModelConfig"),VDe=o(` then you can add those to the auto
classes like this:`),yIe=l(),F(iA.$$.fragment),LIe=l(),x$=a("p"),XDe=o("You will then be able to use the auto classes like you would usually do!"),xIe=l(),F(vf.$$.fragment),$Ie=l(),bi=a("h2"),Ff=a("a"),Mee=a("span"),F(dA.$$.fragment),zDe=l(),Eee=a("span"),WDe=o("AutoConfig"),kIe=l(),Co=a("div"),F(cA.$$.fragment),QDe=l(),fA=a("p"),HDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$$=a("a"),UDe=o("from_pretrained()"),JDe=o(" class method."),YDe=l(),mA=a("p"),KDe=o("This class cannot be instantiated directly using "),Cee=a("code"),ZDe=o("__init__()"),eGe=o(" (throws an error)."),oGe=l(),Er=a("div"),F(gA.$$.fragment),rGe=l(),wee=a("p"),tGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),aGe=l(),vi=a("p"),nGe=o("The configuration class to instantiate is selected based on the "),Aee=a("code"),sGe=o("model_type"),lGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yee=a("code"),iGe=o("pretrained_model_name_or_path"),dGe=o(":"),cGe=l(),A=a("ul"),Tf=a("li"),Lee=a("strong"),fGe=o("albert"),mGe=o(" \u2014 "),k$=a("a"),gGe=o("AlbertConfig"),hGe=o(" (ALBERT model)"),pGe=l(),Mf=a("li"),xee=a("strong"),uGe=o("bart"),_Ge=o(" \u2014 "),S$=a("a"),bGe=o("BartConfig"),vGe=o(" (BART model)"),FGe=l(),Ef=a("li"),$ee=a("strong"),TGe=o("beit"),MGe=o(" \u2014 "),R$=a("a"),EGe=o("BeitConfig"),CGe=o(" (BEiT model)"),wGe=l(),Cf=a("li"),kee=a("strong"),AGe=o("bert"),yGe=o(" \u2014 "),P$=a("a"),LGe=o("BertConfig"),xGe=o(" (BERT model)"),$Ge=l(),wf=a("li"),See=a("strong"),kGe=o("bert-generation"),SGe=o(" \u2014 "),B$=a("a"),RGe=o("BertGenerationConfig"),PGe=o(" (Bert Generation model)"),BGe=l(),Af=a("li"),Ree=a("strong"),IGe=o("big_bird"),qGe=o(" \u2014 "),I$=a("a"),NGe=o("BigBirdConfig"),jGe=o(" (BigBird model)"),DGe=l(),yf=a("li"),Pee=a("strong"),GGe=o("bigbird_pegasus"),OGe=o(" \u2014 "),q$=a("a"),VGe=o("BigBirdPegasusConfig"),XGe=o(" (BigBirdPegasus model)"),zGe=l(),Lf=a("li"),Bee=a("strong"),WGe=o("blenderbot"),QGe=o(" \u2014 "),N$=a("a"),HGe=o("BlenderbotConfig"),UGe=o(" (Blenderbot model)"),JGe=l(),xf=a("li"),Iee=a("strong"),YGe=o("blenderbot-small"),KGe=o(" \u2014 "),j$=a("a"),ZGe=o("BlenderbotSmallConfig"),eOe=o(" (BlenderbotSmall model)"),oOe=l(),$f=a("li"),qee=a("strong"),rOe=o("camembert"),tOe=o(" \u2014 "),D$=a("a"),aOe=o("CamembertConfig"),nOe=o(" (CamemBERT model)"),sOe=l(),kf=a("li"),Nee=a("strong"),lOe=o("canine"),iOe=o(" \u2014 "),G$=a("a"),dOe=o("CanineConfig"),cOe=o(" (Canine model)"),fOe=l(),Sf=a("li"),jee=a("strong"),mOe=o("clip"),gOe=o(" \u2014 "),O$=a("a"),hOe=o("CLIPConfig"),pOe=o(" (CLIP model)"),uOe=l(),Rf=a("li"),Dee=a("strong"),_Oe=o("convbert"),bOe=o(" \u2014 "),V$=a("a"),vOe=o("ConvBertConfig"),FOe=o(" (ConvBERT model)"),TOe=l(),Pf=a("li"),Gee=a("strong"),MOe=o("convnext"),EOe=o(" \u2014 "),X$=a("a"),COe=o("ConvNextConfig"),wOe=o(" (ConvNext model)"),AOe=l(),Bf=a("li"),Oee=a("strong"),yOe=o("ctrl"),LOe=o(" \u2014 "),z$=a("a"),xOe=o("CTRLConfig"),$Oe=o(" (CTRL model)"),kOe=l(),If=a("li"),Vee=a("strong"),SOe=o("data2vec-audio"),ROe=o(" \u2014 "),W$=a("a"),POe=o("Data2VecAudioConfig"),BOe=o(" (Data2VecAudio model)"),IOe=l(),qf=a("li"),Xee=a("strong"),qOe=o("data2vec-text"),NOe=o(" \u2014 "),Q$=a("a"),jOe=o("Data2VecTextConfig"),DOe=o(" (Data2VecText model)"),GOe=l(),Nf=a("li"),zee=a("strong"),OOe=o("data2vec-vision"),VOe=o(" \u2014 "),H$=a("a"),XOe=o("Data2VecVisionConfig"),zOe=o(" (Data2VecVision model)"),WOe=l(),jf=a("li"),Wee=a("strong"),QOe=o("deberta"),HOe=o(" \u2014 "),U$=a("a"),UOe=o("DebertaConfig"),JOe=o(" (DeBERTa model)"),YOe=l(),Df=a("li"),Qee=a("strong"),KOe=o("deberta-v2"),ZOe=o(" \u2014 "),J$=a("a"),eVe=o("DebertaV2Config"),oVe=o(" (DeBERTa-v2 model)"),rVe=l(),Gf=a("li"),Hee=a("strong"),tVe=o("decision_transformer"),aVe=o(" \u2014 "),Y$=a("a"),nVe=o("DecisionTransformerConfig"),sVe=o(" (Decision Transformer model)"),lVe=l(),Of=a("li"),Uee=a("strong"),iVe=o("deit"),dVe=o(" \u2014 "),K$=a("a"),cVe=o("DeiTConfig"),fVe=o(" (DeiT model)"),mVe=l(),Vf=a("li"),Jee=a("strong"),gVe=o("detr"),hVe=o(" \u2014 "),Z$=a("a"),pVe=o("DetrConfig"),uVe=o(" (DETR model)"),_Ve=l(),Xf=a("li"),Yee=a("strong"),bVe=o("distilbert"),vVe=o(" \u2014 "),ek=a("a"),FVe=o("DistilBertConfig"),TVe=o(" (DistilBERT model)"),MVe=l(),zf=a("li"),Kee=a("strong"),EVe=o("dpr"),CVe=o(" \u2014 "),ok=a("a"),wVe=o("DPRConfig"),AVe=o(" (DPR model)"),yVe=l(),Wf=a("li"),Zee=a("strong"),LVe=o("dpt"),xVe=o(" \u2014 "),rk=a("a"),$Ve=o("DPTConfig"),kVe=o(" (DPT model)"),SVe=l(),Qf=a("li"),eoe=a("strong"),RVe=o("electra"),PVe=o(" \u2014 "),tk=a("a"),BVe=o("ElectraConfig"),IVe=o(" (ELECTRA model)"),qVe=l(),Hf=a("li"),ooe=a("strong"),NVe=o("encoder-decoder"),jVe=o(" \u2014 "),ak=a("a"),DVe=o("EncoderDecoderConfig"),GVe=o(" (Encoder decoder model)"),OVe=l(),Uf=a("li"),roe=a("strong"),VVe=o("flaubert"),XVe=o(" \u2014 "),nk=a("a"),zVe=o("FlaubertConfig"),WVe=o(" (FlauBERT model)"),QVe=l(),Jf=a("li"),toe=a("strong"),HVe=o("flava"),UVe=o(" \u2014 "),sk=a("a"),JVe=o("FlavaConfig"),YVe=o(" (Flava model)"),KVe=l(),Yf=a("li"),aoe=a("strong"),ZVe=o("fnet"),eXe=o(" \u2014 "),lk=a("a"),oXe=o("FNetConfig"),rXe=o(" (FNet model)"),tXe=l(),Kf=a("li"),noe=a("strong"),aXe=o("fsmt"),nXe=o(" \u2014 "),ik=a("a"),sXe=o("FSMTConfig"),lXe=o(" (FairSeq Machine-Translation model)"),iXe=l(),Zf=a("li"),soe=a("strong"),dXe=o("funnel"),cXe=o(" \u2014 "),dk=a("a"),fXe=o("FunnelConfig"),mXe=o(" (Funnel Transformer model)"),gXe=l(),em=a("li"),loe=a("strong"),hXe=o("glpn"),pXe=o(" \u2014 "),ck=a("a"),uXe=o("GLPNConfig"),_Xe=o(" (GLPN model)"),bXe=l(),om=a("li"),ioe=a("strong"),vXe=o("gpt2"),FXe=o(" \u2014 "),fk=a("a"),TXe=o("GPT2Config"),MXe=o(" (OpenAI GPT-2 model)"),EXe=l(),rm=a("li"),doe=a("strong"),CXe=o("gpt_neo"),wXe=o(" \u2014 "),mk=a("a"),AXe=o("GPTNeoConfig"),yXe=o(" (GPT Neo model)"),LXe=l(),tm=a("li"),coe=a("strong"),xXe=o("gptj"),$Xe=o(" \u2014 "),gk=a("a"),kXe=o("GPTJConfig"),SXe=o(" (GPT-J model)"),RXe=l(),am=a("li"),foe=a("strong"),PXe=o("hubert"),BXe=o(" \u2014 "),hk=a("a"),IXe=o("HubertConfig"),qXe=o(" (Hubert model)"),NXe=l(),nm=a("li"),moe=a("strong"),jXe=o("ibert"),DXe=o(" \u2014 "),pk=a("a"),GXe=o("IBertConfig"),OXe=o(" (I-BERT model)"),VXe=l(),sm=a("li"),goe=a("strong"),XXe=o("imagegpt"),zXe=o(" \u2014 "),uk=a("a"),WXe=o("ImageGPTConfig"),QXe=o(" (ImageGPT model)"),HXe=l(),lm=a("li"),hoe=a("strong"),UXe=o("layoutlm"),JXe=o(" \u2014 "),_k=a("a"),YXe=o("LayoutLMConfig"),KXe=o(" (LayoutLM model)"),ZXe=l(),im=a("li"),poe=a("strong"),eze=o("layoutlmv2"),oze=o(" \u2014 "),bk=a("a"),rze=o("LayoutLMv2Config"),tze=o(" (LayoutLMv2 model)"),aze=l(),dm=a("li"),uoe=a("strong"),nze=o("led"),sze=o(" \u2014 "),vk=a("a"),lze=o("LEDConfig"),ize=o(" (LED model)"),dze=l(),cm=a("li"),_oe=a("strong"),cze=o("longformer"),fze=o(" \u2014 "),Fk=a("a"),mze=o("LongformerConfig"),gze=o(" (Longformer model)"),hze=l(),fm=a("li"),boe=a("strong"),pze=o("luke"),uze=o(" \u2014 "),Tk=a("a"),_ze=o("LukeConfig"),bze=o(" (LUKE model)"),vze=l(),mm=a("li"),voe=a("strong"),Fze=o("lxmert"),Tze=o(" \u2014 "),Mk=a("a"),Mze=o("LxmertConfig"),Eze=o(" (LXMERT model)"),Cze=l(),gm=a("li"),Foe=a("strong"),wze=o("m2m_100"),Aze=o(" \u2014 "),Ek=a("a"),yze=o("M2M100Config"),Lze=o(" (M2M100 model)"),xze=l(),hm=a("li"),Toe=a("strong"),$ze=o("marian"),kze=o(" \u2014 "),Ck=a("a"),Sze=o("MarianConfig"),Rze=o(" (Marian model)"),Pze=l(),pm=a("li"),Moe=a("strong"),Bze=o("maskformer"),Ize=o(" \u2014 "),wk=a("a"),qze=o("MaskFormerConfig"),Nze=o(" (MaskFormer model)"),jze=l(),um=a("li"),Eoe=a("strong"),Dze=o("mbart"),Gze=o(" \u2014 "),Ak=a("a"),Oze=o("MBartConfig"),Vze=o(" (mBART model)"),Xze=l(),_m=a("li"),Coe=a("strong"),zze=o("megatron-bert"),Wze=o(" \u2014 "),yk=a("a"),Qze=o("MegatronBertConfig"),Hze=o(" (MegatronBert model)"),Uze=l(),bm=a("li"),woe=a("strong"),Jze=o("mobilebert"),Yze=o(" \u2014 "),Lk=a("a"),Kze=o("MobileBertConfig"),Zze=o(" (MobileBERT model)"),eWe=l(),vm=a("li"),Aoe=a("strong"),oWe=o("mpnet"),rWe=o(" \u2014 "),xk=a("a"),tWe=o("MPNetConfig"),aWe=o(" (MPNet model)"),nWe=l(),Fm=a("li"),yoe=a("strong"),sWe=o("mt5"),lWe=o(" \u2014 "),$k=a("a"),iWe=o("MT5Config"),dWe=o(" (mT5 model)"),cWe=l(),Tm=a("li"),Loe=a("strong"),fWe=o("nystromformer"),mWe=o(" \u2014 "),kk=a("a"),gWe=o("NystromformerConfig"),hWe=o(" (Nystromformer model)"),pWe=l(),Mm=a("li"),xoe=a("strong"),uWe=o("openai-gpt"),_We=o(" \u2014 "),Sk=a("a"),bWe=o("OpenAIGPTConfig"),vWe=o(" (OpenAI GPT model)"),FWe=l(),Em=a("li"),$oe=a("strong"),TWe=o("opt"),MWe=o(" \u2014 "),Rk=a("a"),EWe=o("OPTConfig"),CWe=o(" (OPT model)"),wWe=l(),Cm=a("li"),koe=a("strong"),AWe=o("pegasus"),yWe=o(" \u2014 "),Pk=a("a"),LWe=o("PegasusConfig"),xWe=o(" (Pegasus model)"),$We=l(),wm=a("li"),Soe=a("strong"),kWe=o("perceiver"),SWe=o(" \u2014 "),Bk=a("a"),RWe=o("PerceiverConfig"),PWe=o(" (Perceiver model)"),BWe=l(),Am=a("li"),Roe=a("strong"),IWe=o("plbart"),qWe=o(" \u2014 "),Ik=a("a"),NWe=o("PLBartConfig"),jWe=o(" (PLBart model)"),DWe=l(),ym=a("li"),Poe=a("strong"),GWe=o("poolformer"),OWe=o(" \u2014 "),qk=a("a"),VWe=o("PoolFormerConfig"),XWe=o(" (PoolFormer model)"),zWe=l(),Lm=a("li"),Boe=a("strong"),WWe=o("prophetnet"),QWe=o(" \u2014 "),Nk=a("a"),HWe=o("ProphetNetConfig"),UWe=o(" (ProphetNet model)"),JWe=l(),xm=a("li"),Ioe=a("strong"),YWe=o("qdqbert"),KWe=o(" \u2014 "),jk=a("a"),ZWe=o("QDQBertConfig"),eQe=o(" (QDQBert model)"),oQe=l(),$m=a("li"),qoe=a("strong"),rQe=o("rag"),tQe=o(" \u2014 "),Dk=a("a"),aQe=o("RagConfig"),nQe=o(" (RAG model)"),sQe=l(),km=a("li"),Noe=a("strong"),lQe=o("realm"),iQe=o(" \u2014 "),Gk=a("a"),dQe=o("RealmConfig"),cQe=o(" (Realm model)"),fQe=l(),Sm=a("li"),joe=a("strong"),mQe=o("reformer"),gQe=o(" \u2014 "),Ok=a("a"),hQe=o("ReformerConfig"),pQe=o(" (Reformer model)"),uQe=l(),Rm=a("li"),Doe=a("strong"),_Qe=o("regnet"),bQe=o(" \u2014 "),Vk=a("a"),vQe=o("RegNetConfig"),FQe=o(" (RegNet model)"),TQe=l(),Pm=a("li"),Goe=a("strong"),MQe=o("rembert"),EQe=o(" \u2014 "),Xk=a("a"),CQe=o("RemBertConfig"),wQe=o(" (RemBERT model)"),AQe=l(),Bm=a("li"),Ooe=a("strong"),yQe=o("resnet"),LQe=o(" \u2014 "),zk=a("a"),xQe=o("ResNetConfig"),$Qe=o(" (ResNet model)"),kQe=l(),Im=a("li"),Voe=a("strong"),SQe=o("retribert"),RQe=o(" \u2014 "),Wk=a("a"),PQe=o("RetriBertConfig"),BQe=o(" (RetriBERT model)"),IQe=l(),qm=a("li"),Xoe=a("strong"),qQe=o("roberta"),NQe=o(" \u2014 "),Qk=a("a"),jQe=o("RobertaConfig"),DQe=o(" (RoBERTa model)"),GQe=l(),Nm=a("li"),zoe=a("strong"),OQe=o("roformer"),VQe=o(" \u2014 "),Hk=a("a"),XQe=o("RoFormerConfig"),zQe=o(" (RoFormer model)"),WQe=l(),jm=a("li"),Woe=a("strong"),QQe=o("segformer"),HQe=o(" \u2014 "),Uk=a("a"),UQe=o("SegformerConfig"),JQe=o(" (SegFormer model)"),YQe=l(),Dm=a("li"),Qoe=a("strong"),KQe=o("sew"),ZQe=o(" \u2014 "),Jk=a("a"),eHe=o("SEWConfig"),oHe=o(" (SEW model)"),rHe=l(),Gm=a("li"),Hoe=a("strong"),tHe=o("sew-d"),aHe=o(" \u2014 "),Yk=a("a"),nHe=o("SEWDConfig"),sHe=o(" (SEW-D model)"),lHe=l(),Om=a("li"),Uoe=a("strong"),iHe=o("speech-encoder-decoder"),dHe=o(" \u2014 "),Kk=a("a"),cHe=o("SpeechEncoderDecoderConfig"),fHe=o(" (Speech Encoder decoder model)"),mHe=l(),Vm=a("li"),Joe=a("strong"),gHe=o("speech_to_text"),hHe=o(" \u2014 "),Zk=a("a"),pHe=o("Speech2TextConfig"),uHe=o(" (Speech2Text model)"),_He=l(),Xm=a("li"),Yoe=a("strong"),bHe=o("speech_to_text_2"),vHe=o(" \u2014 "),eS=a("a"),FHe=o("Speech2Text2Config"),THe=o(" (Speech2Text2 model)"),MHe=l(),zm=a("li"),Koe=a("strong"),EHe=o("splinter"),CHe=o(" \u2014 "),oS=a("a"),wHe=o("SplinterConfig"),AHe=o(" (Splinter model)"),yHe=l(),Wm=a("li"),Zoe=a("strong"),LHe=o("squeezebert"),xHe=o(" \u2014 "),rS=a("a"),$He=o("SqueezeBertConfig"),kHe=o(" (SqueezeBERT model)"),SHe=l(),Qm=a("li"),ere=a("strong"),RHe=o("swin"),PHe=o(" \u2014 "),tS=a("a"),BHe=o("SwinConfig"),IHe=o(" (Swin model)"),qHe=l(),Hm=a("li"),ore=a("strong"),NHe=o("t5"),jHe=o(" \u2014 "),aS=a("a"),DHe=o("T5Config"),GHe=o(" (T5 model)"),OHe=l(),Um=a("li"),rre=a("strong"),VHe=o("tapas"),XHe=o(" \u2014 "),nS=a("a"),zHe=o("TapasConfig"),WHe=o(" (TAPAS model)"),QHe=l(),Jm=a("li"),tre=a("strong"),HHe=o("transfo-xl"),UHe=o(" \u2014 "),sS=a("a"),JHe=o("TransfoXLConfig"),YHe=o(" (Transformer-XL model)"),KHe=l(),Ym=a("li"),are=a("strong"),ZHe=o("trocr"),eUe=o(" \u2014 "),lS=a("a"),oUe=o("TrOCRConfig"),rUe=o(" (TrOCR model)"),tUe=l(),Km=a("li"),nre=a("strong"),aUe=o("unispeech"),nUe=o(" \u2014 "),iS=a("a"),sUe=o("UniSpeechConfig"),lUe=o(" (UniSpeech model)"),iUe=l(),Zm=a("li"),sre=a("strong"),dUe=o("unispeech-sat"),cUe=o(" \u2014 "),dS=a("a"),fUe=o("UniSpeechSatConfig"),mUe=o(" (UniSpeechSat model)"),gUe=l(),eg=a("li"),lre=a("strong"),hUe=o("van"),pUe=o(" \u2014 "),cS=a("a"),uUe=o("VanConfig"),_Ue=o(" (VAN model)"),bUe=l(),og=a("li"),ire=a("strong"),vUe=o("vilt"),FUe=o(" \u2014 "),fS=a("a"),TUe=o("ViltConfig"),MUe=o(" (ViLT model)"),EUe=l(),rg=a("li"),dre=a("strong"),CUe=o("vision-encoder-decoder"),wUe=o(" \u2014 "),mS=a("a"),AUe=o("VisionEncoderDecoderConfig"),yUe=o(" (Vision Encoder decoder model)"),LUe=l(),tg=a("li"),cre=a("strong"),xUe=o("vision-text-dual-encoder"),$Ue=o(" \u2014 "),gS=a("a"),kUe=o("VisionTextDualEncoderConfig"),SUe=o(" (VisionTextDualEncoder model)"),RUe=l(),ag=a("li"),fre=a("strong"),PUe=o("visual_bert"),BUe=o(" \u2014 "),hS=a("a"),IUe=o("VisualBertConfig"),qUe=o(" (VisualBert model)"),NUe=l(),ng=a("li"),mre=a("strong"),jUe=o("vit"),DUe=o(" \u2014 "),pS=a("a"),GUe=o("ViTConfig"),OUe=o(" (ViT model)"),VUe=l(),sg=a("li"),gre=a("strong"),XUe=o("vit_mae"),zUe=o(" \u2014 "),uS=a("a"),WUe=o("ViTMAEConfig"),QUe=o(" (ViTMAE model)"),HUe=l(),lg=a("li"),hre=a("strong"),UUe=o("wav2vec2"),JUe=o(" \u2014 "),_S=a("a"),YUe=o("Wav2Vec2Config"),KUe=o(" (Wav2Vec2 model)"),ZUe=l(),ig=a("li"),pre=a("strong"),eJe=o("wav2vec2-conformer"),oJe=o(" \u2014 "),bS=a("a"),rJe=o("Wav2Vec2ConformerConfig"),tJe=o(" (Wav2Vec2-Conformer model)"),aJe=l(),dg=a("li"),ure=a("strong"),nJe=o("wavlm"),sJe=o(" \u2014 "),vS=a("a"),lJe=o("WavLMConfig"),iJe=o(" (WavLM model)"),dJe=l(),cg=a("li"),_re=a("strong"),cJe=o("xglm"),fJe=o(" \u2014 "),FS=a("a"),mJe=o("XGLMConfig"),gJe=o(" (XGLM model)"),hJe=l(),fg=a("li"),bre=a("strong"),pJe=o("xlm"),uJe=o(" \u2014 "),TS=a("a"),_Je=o("XLMConfig"),bJe=o(" (XLM model)"),vJe=l(),mg=a("li"),vre=a("strong"),FJe=o("xlm-prophetnet"),TJe=o(" \u2014 "),MS=a("a"),MJe=o("XLMProphetNetConfig"),EJe=o(" (XLMProphetNet model)"),CJe=l(),gg=a("li"),Fre=a("strong"),wJe=o("xlm-roberta"),AJe=o(" \u2014 "),ES=a("a"),yJe=o("XLMRobertaConfig"),LJe=o(" (XLM-RoBERTa model)"),xJe=l(),hg=a("li"),Tre=a("strong"),$Je=o("xlm-roberta-xl"),kJe=o(" \u2014 "),CS=a("a"),SJe=o("XLMRobertaXLConfig"),RJe=o(" (XLM-RoBERTa-XL model)"),PJe=l(),pg=a("li"),Mre=a("strong"),BJe=o("xlnet"),IJe=o(" \u2014 "),wS=a("a"),qJe=o("XLNetConfig"),NJe=o(" (XLNet model)"),jJe=l(),ug=a("li"),Ere=a("strong"),DJe=o("yolos"),GJe=o(" \u2014 "),AS=a("a"),OJe=o("YolosConfig"),VJe=o(" (YOLOS model)"),XJe=l(),_g=a("li"),Cre=a("strong"),zJe=o("yoso"),WJe=o(" \u2014 "),yS=a("a"),QJe=o("YosoConfig"),HJe=o(" (YOSO model)"),UJe=l(),F(bg.$$.fragment),JJe=l(),vg=a("div"),F(hA.$$.fragment),YJe=l(),wre=a("p"),KJe=o("Register a new configuration for this class."),SIe=l(),Fi=a("h2"),Fg=a("a"),Are=a("span"),F(pA.$$.fragment),ZJe=l(),yre=a("span"),eYe=o("AutoTokenizer"),RIe=l(),wo=a("div"),F(uA.$$.fragment),oYe=l(),_A=a("p"),rYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LS=a("a"),tYe=o("AutoTokenizer.from_pretrained()"),aYe=o(" class method."),nYe=l(),bA=a("p"),sYe=o("This class cannot be instantiated directly using "),Lre=a("code"),lYe=o("__init__()"),iYe=o(" (throws an error)."),dYe=l(),Cr=a("div"),F(vA.$$.fragment),cYe=l(),xre=a("p"),fYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mYe=l(),Aa=a("p"),gYe=o("The tokenizer class to instantiate is selected based on the "),$re=a("code"),hYe=o("model_type"),pYe=o(` property of the config object (either
passed as an argument or loaded from `),kre=a("code"),uYe=o("pretrained_model_name_or_path"),_Ye=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=a("code"),bYe=o("pretrained_model_name_or_path"),vYe=o(":"),FYe=l(),k=a("ul"),Sn=a("li"),Rre=a("strong"),TYe=o("albert"),MYe=o(" \u2014 "),xS=a("a"),EYe=o("AlbertTokenizer"),CYe=o(" or "),$S=a("a"),wYe=o("AlbertTokenizerFast"),AYe=o(" (ALBERT model)"),yYe=l(),Rn=a("li"),Pre=a("strong"),LYe=o("bart"),xYe=o(" \u2014 "),kS=a("a"),$Ye=o("BartTokenizer"),kYe=o(" or "),SS=a("a"),SYe=o("BartTokenizerFast"),RYe=o(" (BART model)"),PYe=l(),Pn=a("li"),Bre=a("strong"),BYe=o("barthez"),IYe=o(" \u2014 "),RS=a("a"),qYe=o("BarthezTokenizer"),NYe=o(" or "),PS=a("a"),jYe=o("BarthezTokenizerFast"),DYe=o(" (BARThez model)"),GYe=l(),Tg=a("li"),Ire=a("strong"),OYe=o("bartpho"),VYe=o(" \u2014 "),BS=a("a"),XYe=o("BartphoTokenizer"),zYe=o(" (BARTpho model)"),WYe=l(),Bn=a("li"),qre=a("strong"),QYe=o("bert"),HYe=o(" \u2014 "),IS=a("a"),UYe=o("BertTokenizer"),JYe=o(" or "),qS=a("a"),YYe=o("BertTokenizerFast"),KYe=o(" (BERT model)"),ZYe=l(),Mg=a("li"),Nre=a("strong"),eKe=o("bert-generation"),oKe=o(" \u2014 "),NS=a("a"),rKe=o("BertGenerationTokenizer"),tKe=o(" (Bert Generation model)"),aKe=l(),Eg=a("li"),jre=a("strong"),nKe=o("bert-japanese"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("BertJapaneseTokenizer"),iKe=o(" (BertJapanese model)"),dKe=l(),Cg=a("li"),Dre=a("strong"),cKe=o("bertweet"),fKe=o(" \u2014 "),DS=a("a"),mKe=o("BertweetTokenizer"),gKe=o(" (Bertweet model)"),hKe=l(),In=a("li"),Gre=a("strong"),pKe=o("big_bird"),uKe=o(" \u2014 "),GS=a("a"),_Ke=o("BigBirdTokenizer"),bKe=o(" or "),OS=a("a"),vKe=o("BigBirdTokenizerFast"),FKe=o(" (BigBird model)"),TKe=l(),qn=a("li"),Ore=a("strong"),MKe=o("bigbird_pegasus"),EKe=o(" \u2014 "),VS=a("a"),CKe=o("PegasusTokenizer"),wKe=o(" or "),XS=a("a"),AKe=o("PegasusTokenizerFast"),yKe=o(" (BigBirdPegasus model)"),LKe=l(),Nn=a("li"),Vre=a("strong"),xKe=o("blenderbot"),$Ke=o(" \u2014 "),zS=a("a"),kKe=o("BlenderbotTokenizer"),SKe=o(" or "),WS=a("a"),RKe=o("BlenderbotTokenizerFast"),PKe=o(" (Blenderbot model)"),BKe=l(),wg=a("li"),Xre=a("strong"),IKe=o("blenderbot-small"),qKe=o(" \u2014 "),QS=a("a"),NKe=o("BlenderbotSmallTokenizer"),jKe=o(" (BlenderbotSmall model)"),DKe=l(),Ag=a("li"),zre=a("strong"),GKe=o("byt5"),OKe=o(" \u2014 "),HS=a("a"),VKe=o("ByT5Tokenizer"),XKe=o(" (ByT5 model)"),zKe=l(),jn=a("li"),Wre=a("strong"),WKe=o("camembert"),QKe=o(" \u2014 "),US=a("a"),HKe=o("CamembertTokenizer"),UKe=o(" or "),JS=a("a"),JKe=o("CamembertTokenizerFast"),YKe=o(" (CamemBERT model)"),KKe=l(),yg=a("li"),Qre=a("strong"),ZKe=o("canine"),eZe=o(" \u2014 "),YS=a("a"),oZe=o("CanineTokenizer"),rZe=o(" (Canine model)"),tZe=l(),Dn=a("li"),Hre=a("strong"),aZe=o("clip"),nZe=o(" \u2014 "),KS=a("a"),sZe=o("CLIPTokenizer"),lZe=o(" or "),ZS=a("a"),iZe=o("CLIPTokenizerFast"),dZe=o(" (CLIP model)"),cZe=l(),Gn=a("li"),Ure=a("strong"),fZe=o("convbert"),mZe=o(" \u2014 "),eR=a("a"),gZe=o("ConvBertTokenizer"),hZe=o(" or "),oR=a("a"),pZe=o("ConvBertTokenizerFast"),uZe=o(" (ConvBERT model)"),_Ze=l(),On=a("li"),Jre=a("strong"),bZe=o("cpm"),vZe=o(" \u2014 "),rR=a("a"),FZe=o("CpmTokenizer"),TZe=o(" or "),tR=a("a"),MZe=o("CpmTokenizerFast"),EZe=o(" (CPM model)"),CZe=l(),Lg=a("li"),Yre=a("strong"),wZe=o("ctrl"),AZe=o(" \u2014 "),aR=a("a"),yZe=o("CTRLTokenizer"),LZe=o(" (CTRL model)"),xZe=l(),Vn=a("li"),Kre=a("strong"),$Ze=o("data2vec-text"),kZe=o(" \u2014 "),nR=a("a"),SZe=o("RobertaTokenizer"),RZe=o(" or "),sR=a("a"),PZe=o("RobertaTokenizerFast"),BZe=o(" (Data2VecText model)"),IZe=l(),Xn=a("li"),Zre=a("strong"),qZe=o("deberta"),NZe=o(" \u2014 "),lR=a("a"),jZe=o("DebertaTokenizer"),DZe=o(" or "),iR=a("a"),GZe=o("DebertaTokenizerFast"),OZe=o(" (DeBERTa model)"),VZe=l(),zn=a("li"),ete=a("strong"),XZe=o("deberta-v2"),zZe=o(" \u2014 "),dR=a("a"),WZe=o("DebertaV2Tokenizer"),QZe=o(" or "),cR=a("a"),HZe=o("DebertaV2TokenizerFast"),UZe=o(" (DeBERTa-v2 model)"),JZe=l(),Wn=a("li"),ote=a("strong"),YZe=o("distilbert"),KZe=o(" \u2014 "),fR=a("a"),ZZe=o("DistilBertTokenizer"),eeo=o(" or "),mR=a("a"),oeo=o("DistilBertTokenizerFast"),reo=o(" (DistilBERT model)"),teo=l(),Qn=a("li"),rte=a("strong"),aeo=o("dpr"),neo=o(" \u2014 "),gR=a("a"),seo=o("DPRQuestionEncoderTokenizer"),leo=o(" or "),hR=a("a"),ieo=o("DPRQuestionEncoderTokenizerFast"),deo=o(" (DPR model)"),ceo=l(),Hn=a("li"),tte=a("strong"),feo=o("electra"),meo=o(" \u2014 "),pR=a("a"),geo=o("ElectraTokenizer"),heo=o(" or "),uR=a("a"),peo=o("ElectraTokenizerFast"),ueo=o(" (ELECTRA model)"),_eo=l(),xg=a("li"),ate=a("strong"),beo=o("flaubert"),veo=o(" \u2014 "),_R=a("a"),Feo=o("FlaubertTokenizer"),Teo=o(" (FlauBERT model)"),Meo=l(),Un=a("li"),nte=a("strong"),Eeo=o("fnet"),Ceo=o(" \u2014 "),bR=a("a"),weo=o("FNetTokenizer"),Aeo=o(" or "),vR=a("a"),yeo=o("FNetTokenizerFast"),Leo=o(" (FNet model)"),xeo=l(),$g=a("li"),ste=a("strong"),$eo=o("fsmt"),keo=o(" \u2014 "),FR=a("a"),Seo=o("FSMTTokenizer"),Reo=o(" (FairSeq Machine-Translation model)"),Peo=l(),Jn=a("li"),lte=a("strong"),Beo=o("funnel"),Ieo=o(" \u2014 "),TR=a("a"),qeo=o("FunnelTokenizer"),Neo=o(" or "),MR=a("a"),jeo=o("FunnelTokenizerFast"),Deo=o(" (Funnel Transformer model)"),Geo=l(),Yn=a("li"),ite=a("strong"),Oeo=o("gpt2"),Veo=o(" \u2014 "),ER=a("a"),Xeo=o("GPT2Tokenizer"),zeo=o(" or "),CR=a("a"),Weo=o("GPT2TokenizerFast"),Qeo=o(" (OpenAI GPT-2 model)"),Heo=l(),Kn=a("li"),dte=a("strong"),Ueo=o("gpt_neo"),Jeo=o(" \u2014 "),wR=a("a"),Yeo=o("GPT2Tokenizer"),Keo=o(" or "),AR=a("a"),Zeo=o("GPT2TokenizerFast"),eoo=o(" (GPT Neo model)"),ooo=l(),Zn=a("li"),cte=a("strong"),roo=o("gptj"),too=o(" \u2014 "),yR=a("a"),aoo=o("GPT2Tokenizer"),noo=o(" or "),LR=a("a"),soo=o("GPT2TokenizerFast"),loo=o(" (GPT-J model)"),ioo=l(),es=a("li"),fte=a("strong"),doo=o("herbert"),coo=o(" \u2014 "),xR=a("a"),foo=o("HerbertTokenizer"),moo=o(" or "),$R=a("a"),goo=o("HerbertTokenizerFast"),hoo=o(" (HerBERT model)"),poo=l(),kg=a("li"),mte=a("strong"),uoo=o("hubert"),_oo=o(" \u2014 "),kR=a("a"),boo=o("Wav2Vec2CTCTokenizer"),voo=o(" (Hubert model)"),Foo=l(),os=a("li"),gte=a("strong"),Too=o("ibert"),Moo=o(" \u2014 "),SR=a("a"),Eoo=o("RobertaTokenizer"),Coo=o(" or "),RR=a("a"),woo=o("RobertaTokenizerFast"),Aoo=o(" (I-BERT model)"),yoo=l(),rs=a("li"),hte=a("strong"),Loo=o("layoutlm"),xoo=o(" \u2014 "),PR=a("a"),$oo=o("LayoutLMTokenizer"),koo=o(" or "),BR=a("a"),Soo=o("LayoutLMTokenizerFast"),Roo=o(" (LayoutLM model)"),Poo=l(),ts=a("li"),pte=a("strong"),Boo=o("layoutlmv2"),Ioo=o(" \u2014 "),IR=a("a"),qoo=o("LayoutLMv2Tokenizer"),Noo=o(" or "),qR=a("a"),joo=o("LayoutLMv2TokenizerFast"),Doo=o(" (LayoutLMv2 model)"),Goo=l(),as=a("li"),ute=a("strong"),Ooo=o("layoutxlm"),Voo=o(" \u2014 "),NR=a("a"),Xoo=o("LayoutXLMTokenizer"),zoo=o(" or "),jR=a("a"),Woo=o("LayoutXLMTokenizerFast"),Qoo=o(" (LayoutXLM model)"),Hoo=l(),ns=a("li"),_te=a("strong"),Uoo=o("led"),Joo=o(" \u2014 "),DR=a("a"),Yoo=o("LEDTokenizer"),Koo=o(" or "),GR=a("a"),Zoo=o("LEDTokenizerFast"),ero=o(" (LED model)"),oro=l(),ss=a("li"),bte=a("strong"),rro=o("longformer"),tro=o(" \u2014 "),OR=a("a"),aro=o("LongformerTokenizer"),nro=o(" or "),VR=a("a"),sro=o("LongformerTokenizerFast"),lro=o(" (Longformer model)"),iro=l(),Sg=a("li"),vte=a("strong"),dro=o("luke"),cro=o(" \u2014 "),XR=a("a"),fro=o("LukeTokenizer"),mro=o(" (LUKE model)"),gro=l(),ls=a("li"),Fte=a("strong"),hro=o("lxmert"),pro=o(" \u2014 "),zR=a("a"),uro=o("LxmertTokenizer"),_ro=o(" or "),WR=a("a"),bro=o("LxmertTokenizerFast"),vro=o(" (LXMERT model)"),Fro=l(),Rg=a("li"),Tte=a("strong"),Tro=o("m2m_100"),Mro=o(" \u2014 "),QR=a("a"),Ero=o("M2M100Tokenizer"),Cro=o(" (M2M100 model)"),wro=l(),Pg=a("li"),Mte=a("strong"),Aro=o("marian"),yro=o(" \u2014 "),HR=a("a"),Lro=o("MarianTokenizer"),xro=o(" (Marian model)"),$ro=l(),is=a("li"),Ete=a("strong"),kro=o("mbart"),Sro=o(" \u2014 "),UR=a("a"),Rro=o("MBartTokenizer"),Pro=o(" or "),JR=a("a"),Bro=o("MBartTokenizerFast"),Iro=o(" (mBART model)"),qro=l(),ds=a("li"),Cte=a("strong"),Nro=o("mbart50"),jro=o(" \u2014 "),YR=a("a"),Dro=o("MBart50Tokenizer"),Gro=o(" or "),KR=a("a"),Oro=o("MBart50TokenizerFast"),Vro=o(" (mBART-50 model)"),Xro=l(),cs=a("li"),wte=a("strong"),zro=o("megatron-bert"),Wro=o(" \u2014 "),ZR=a("a"),Qro=o("BertTokenizer"),Hro=o(" or "),eP=a("a"),Uro=o("BertTokenizerFast"),Jro=o(" (MegatronBert model)"),Yro=l(),Bg=a("li"),Ate=a("strong"),Kro=o("mluke"),Zro=o(" \u2014 "),oP=a("a"),eto=o("MLukeTokenizer"),oto=o(" (mLUKE model)"),rto=l(),fs=a("li"),yte=a("strong"),tto=o("mobilebert"),ato=o(" \u2014 "),rP=a("a"),nto=o("MobileBertTokenizer"),sto=o(" or "),tP=a("a"),lto=o("MobileBertTokenizerFast"),ito=o(" (MobileBERT model)"),dto=l(),ms=a("li"),Lte=a("strong"),cto=o("mpnet"),fto=o(" \u2014 "),aP=a("a"),mto=o("MPNetTokenizer"),gto=o(" or "),nP=a("a"),hto=o("MPNetTokenizerFast"),pto=o(" (MPNet model)"),uto=l(),gs=a("li"),xte=a("strong"),_to=o("mt5"),bto=o(" \u2014 "),sP=a("a"),vto=o("MT5Tokenizer"),Fto=o(" or "),lP=a("a"),Tto=o("MT5TokenizerFast"),Mto=o(" (mT5 model)"),Eto=l(),hs=a("li"),$te=a("strong"),Cto=o("nystromformer"),wto=o(" \u2014 "),iP=a("a"),Ato=o("AlbertTokenizer"),yto=o(" or "),dP=a("a"),Lto=o("AlbertTokenizerFast"),xto=o(" (Nystromformer model)"),$to=l(),ps=a("li"),kte=a("strong"),kto=o("openai-gpt"),Sto=o(" \u2014 "),cP=a("a"),Rto=o("OpenAIGPTTokenizer"),Pto=o(" or "),fP=a("a"),Bto=o("OpenAIGPTTokenizerFast"),Ito=o(" (OpenAI GPT model)"),qto=l(),Ig=a("li"),Ste=a("strong"),Nto=o("opt"),jto=o(" \u2014 "),mP=a("a"),Dto=o("GPT2Tokenizer"),Gto=o(" (OPT model)"),Oto=l(),us=a("li"),Rte=a("strong"),Vto=o("pegasus"),Xto=o(" \u2014 "),gP=a("a"),zto=o("PegasusTokenizer"),Wto=o(" or "),hP=a("a"),Qto=o("PegasusTokenizerFast"),Hto=o(" (Pegasus model)"),Uto=l(),qg=a("li"),Pte=a("strong"),Jto=o("perceiver"),Yto=o(" \u2014 "),pP=a("a"),Kto=o("PerceiverTokenizer"),Zto=o(" (Perceiver model)"),eao=l(),Ng=a("li"),Bte=a("strong"),oao=o("phobert"),rao=o(" \u2014 "),uP=a("a"),tao=o("PhobertTokenizer"),aao=o(" (PhoBERT model)"),nao=l(),jg=a("li"),Ite=a("strong"),sao=o("plbart"),lao=o(" \u2014 "),_P=a("a"),iao=o("PLBartTokenizer"),dao=o(" (PLBart model)"),cao=l(),Dg=a("li"),qte=a("strong"),fao=o("prophetnet"),mao=o(" \u2014 "),bP=a("a"),gao=o("ProphetNetTokenizer"),hao=o(" (ProphetNet model)"),pao=l(),_s=a("li"),Nte=a("strong"),uao=o("qdqbert"),_ao=o(" \u2014 "),vP=a("a"),bao=o("BertTokenizer"),vao=o(" or "),FP=a("a"),Fao=o("BertTokenizerFast"),Tao=o(" (QDQBert model)"),Mao=l(),Gg=a("li"),jte=a("strong"),Eao=o("rag"),Cao=o(" \u2014 "),TP=a("a"),wao=o("RagTokenizer"),Aao=o(" (RAG model)"),yao=l(),bs=a("li"),Dte=a("strong"),Lao=o("realm"),xao=o(" \u2014 "),MP=a("a"),$ao=o("RealmTokenizer"),kao=o(" or "),EP=a("a"),Sao=o("RealmTokenizerFast"),Rao=o(" (Realm model)"),Pao=l(),vs=a("li"),Gte=a("strong"),Bao=o("reformer"),Iao=o(" \u2014 "),CP=a("a"),qao=o("ReformerTokenizer"),Nao=o(" or "),wP=a("a"),jao=o("ReformerTokenizerFast"),Dao=o(" (Reformer model)"),Gao=l(),Fs=a("li"),Ote=a("strong"),Oao=o("rembert"),Vao=o(" \u2014 "),AP=a("a"),Xao=o("RemBertTokenizer"),zao=o(" or "),yP=a("a"),Wao=o("RemBertTokenizerFast"),Qao=o(" (RemBERT model)"),Hao=l(),Ts=a("li"),Vte=a("strong"),Uao=o("retribert"),Jao=o(" \u2014 "),LP=a("a"),Yao=o("RetriBertTokenizer"),Kao=o(" or "),xP=a("a"),Zao=o("RetriBertTokenizerFast"),eno=o(" (RetriBERT model)"),ono=l(),Ms=a("li"),Xte=a("strong"),rno=o("roberta"),tno=o(" \u2014 "),$P=a("a"),ano=o("RobertaTokenizer"),nno=o(" or "),kP=a("a"),sno=o("RobertaTokenizerFast"),lno=o(" (RoBERTa model)"),ino=l(),Es=a("li"),zte=a("strong"),dno=o("roformer"),cno=o(" \u2014 "),SP=a("a"),fno=o("RoFormerTokenizer"),mno=o(" or "),RP=a("a"),gno=o("RoFormerTokenizerFast"),hno=o(" (RoFormer model)"),pno=l(),Og=a("li"),Wte=a("strong"),uno=o("speech_to_text"),_no=o(" \u2014 "),PP=a("a"),bno=o("Speech2TextTokenizer"),vno=o(" (Speech2Text model)"),Fno=l(),Vg=a("li"),Qte=a("strong"),Tno=o("speech_to_text_2"),Mno=o(" \u2014 "),BP=a("a"),Eno=o("Speech2Text2Tokenizer"),Cno=o(" (Speech2Text2 model)"),wno=l(),Cs=a("li"),Hte=a("strong"),Ano=o("splinter"),yno=o(" \u2014 "),IP=a("a"),Lno=o("SplinterTokenizer"),xno=o(" or "),qP=a("a"),$no=o("SplinterTokenizerFast"),kno=o(" (Splinter model)"),Sno=l(),ws=a("li"),Ute=a("strong"),Rno=o("squeezebert"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("SqueezeBertTokenizer"),Ino=o(" or "),jP=a("a"),qno=o("SqueezeBertTokenizerFast"),Nno=o(" (SqueezeBERT model)"),jno=l(),As=a("li"),Jte=a("strong"),Dno=o("t5"),Gno=o(" \u2014 "),DP=a("a"),Ono=o("T5Tokenizer"),Vno=o(" or "),GP=a("a"),Xno=o("T5TokenizerFast"),zno=o(" (T5 model)"),Wno=l(),Xg=a("li"),Yte=a("strong"),Qno=o("tapas"),Hno=o(" \u2014 "),OP=a("a"),Uno=o("TapasTokenizer"),Jno=o(" (TAPAS model)"),Yno=l(),zg=a("li"),Kte=a("strong"),Kno=o("tapex"),Zno=o(" \u2014 "),VP=a("a"),eso=o("TapexTokenizer"),oso=o(" (TAPEX model)"),rso=l(),Wg=a("li"),Zte=a("strong"),tso=o("transfo-xl"),aso=o(" \u2014 "),XP=a("a"),nso=o("TransfoXLTokenizer"),sso=o(" (Transformer-XL model)"),lso=l(),ys=a("li"),eae=a("strong"),iso=o("visual_bert"),dso=o(" \u2014 "),zP=a("a"),cso=o("BertTokenizer"),fso=o(" or "),WP=a("a"),mso=o("BertTokenizerFast"),gso=o(" (VisualBert model)"),hso=l(),Qg=a("li"),oae=a("strong"),pso=o("wav2vec2"),uso=o(" \u2014 "),QP=a("a"),_so=o("Wav2Vec2CTCTokenizer"),bso=o(" (Wav2Vec2 model)"),vso=l(),Hg=a("li"),rae=a("strong"),Fso=o("wav2vec2-conformer"),Tso=o(" \u2014 "),HP=a("a"),Mso=o("Wav2Vec2CTCTokenizer"),Eso=o(" (Wav2Vec2-Conformer model)"),Cso=l(),Ug=a("li"),tae=a("strong"),wso=o("wav2vec2_phoneme"),Aso=o(" \u2014 "),UP=a("a"),yso=o("Wav2Vec2PhonemeCTCTokenizer"),Lso=o(" (Wav2Vec2Phoneme model)"),xso=l(),Ls=a("li"),aae=a("strong"),$so=o("xglm"),kso=o(" \u2014 "),JP=a("a"),Sso=o("XGLMTokenizer"),Rso=o(" or "),YP=a("a"),Pso=o("XGLMTokenizerFast"),Bso=o(" (XGLM model)"),Iso=l(),Jg=a("li"),nae=a("strong"),qso=o("xlm"),Nso=o(" \u2014 "),KP=a("a"),jso=o("XLMTokenizer"),Dso=o(" (XLM model)"),Gso=l(),Yg=a("li"),sae=a("strong"),Oso=o("xlm-prophetnet"),Vso=o(" \u2014 "),ZP=a("a"),Xso=o("XLMProphetNetTokenizer"),zso=o(" (XLMProphetNet model)"),Wso=l(),xs=a("li"),lae=a("strong"),Qso=o("xlm-roberta"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("XLMRobertaTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("XLMRobertaTokenizerFast"),Kso=o(" (XLM-RoBERTa model)"),Zso=l(),$s=a("li"),iae=a("strong"),elo=o("xlm-roberta-xl"),olo=o(" \u2014 "),rB=a("a"),rlo=o("RobertaTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("RobertaTokenizerFast"),nlo=o(" (XLM-RoBERTa-XL model)"),slo=l(),ks=a("li"),dae=a("strong"),llo=o("xlnet"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("XLNetTokenizer"),clo=o(" or "),nB=a("a"),flo=o("XLNetTokenizerFast"),mlo=o(" (XLNet model)"),glo=l(),Ss=a("li"),cae=a("strong"),hlo=o("yoso"),plo=o(" \u2014 "),sB=a("a"),ulo=o("AlbertTokenizer"),_lo=o(" or "),lB=a("a"),blo=o("AlbertTokenizerFast"),vlo=o(" (YOSO model)"),Flo=l(),F(Kg.$$.fragment),Tlo=l(),Zg=a("div"),F(FA.$$.fragment),Mlo=l(),fae=a("p"),Elo=o("Register a new tokenizer in this mapping."),PIe=l(),Ti=a("h2"),eh=a("a"),mae=a("span"),F(TA.$$.fragment),Clo=l(),gae=a("span"),wlo=o("AutoFeatureExtractor"),BIe=l(),Ao=a("div"),F(MA.$$.fragment),Alo=l(),EA=a("p"),ylo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iB=a("a"),Llo=o("AutoFeatureExtractor.from_pretrained()"),xlo=o(" class method."),$lo=l(),CA=a("p"),klo=o("This class cannot be instantiated directly using "),hae=a("code"),Slo=o("__init__()"),Rlo=o(" (throws an error)."),Plo=l(),He=a("div"),F(wA.$$.fragment),Blo=l(),pae=a("p"),Ilo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qlo=l(),ya=a("p"),Nlo=o("The feature extractor class to instantiate is selected based on the "),uae=a("code"),jlo=o("model_type"),Dlo=o(` property of the config object
(either passed as an argument or loaded from `),_ae=a("code"),Glo=o("pretrained_model_name_or_path"),Olo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bae=a("code"),Vlo=o("pretrained_model_name_or_path"),Xlo=o(":"),zlo=l(),Z=a("ul"),oh=a("li"),vae=a("strong"),Wlo=o("beit"),Qlo=o(" \u2014 "),dB=a("a"),Hlo=o("BeitFeatureExtractor"),Ulo=o(" (BEiT model)"),Jlo=l(),rh=a("li"),Fae=a("strong"),Ylo=o("clip"),Klo=o(" \u2014 "),cB=a("a"),Zlo=o("CLIPFeatureExtractor"),eio=o(" (CLIP model)"),oio=l(),th=a("li"),Tae=a("strong"),rio=o("convnext"),tio=o(" \u2014 "),fB=a("a"),aio=o("ConvNextFeatureExtractor"),nio=o(" (ConvNext model)"),sio=l(),ah=a("li"),Mae=a("strong"),lio=o("data2vec-audio"),iio=o(" \u2014 "),mB=a("a"),dio=o("Wav2Vec2FeatureExtractor"),cio=o(" (Data2VecAudio model)"),fio=l(),nh=a("li"),Eae=a("strong"),mio=o("data2vec-vision"),gio=o(" \u2014 "),gB=a("a"),hio=o("BeitFeatureExtractor"),pio=o(" (Data2VecVision model)"),uio=l(),sh=a("li"),Cae=a("strong"),_io=o("deit"),bio=o(" \u2014 "),hB=a("a"),vio=o("DeiTFeatureExtractor"),Fio=o(" (DeiT model)"),Tio=l(),lh=a("li"),wae=a("strong"),Mio=o("detr"),Eio=o(" \u2014 "),pB=a("a"),Cio=o("DetrFeatureExtractor"),wio=o(" (DETR model)"),Aio=l(),ih=a("li"),Aae=a("strong"),yio=o("dpt"),Lio=o(" \u2014 "),uB=a("a"),xio=o("DPTFeatureExtractor"),$io=o(" (DPT model)"),kio=l(),dh=a("li"),yae=a("strong"),Sio=o("flava"),Rio=o(" \u2014 "),_B=a("a"),Pio=o("FlavaFeatureExtractor"),Bio=o(" (Flava model)"),Iio=l(),ch=a("li"),Lae=a("strong"),qio=o("glpn"),Nio=o(" \u2014 "),bB=a("a"),jio=o("GLPNFeatureExtractor"),Dio=o(" (GLPN model)"),Gio=l(),fh=a("li"),xae=a("strong"),Oio=o("hubert"),Vio=o(" \u2014 "),vB=a("a"),Xio=o("Wav2Vec2FeatureExtractor"),zio=o(" (Hubert model)"),Wio=l(),mh=a("li"),$ae=a("strong"),Qio=o("layoutlmv2"),Hio=o(" \u2014 "),FB=a("a"),Uio=o("LayoutLMv2FeatureExtractor"),Jio=o(" (LayoutLMv2 model)"),Yio=l(),gh=a("li"),kae=a("strong"),Kio=o("maskformer"),Zio=o(" \u2014 "),TB=a("a"),edo=o("MaskFormerFeatureExtractor"),odo=o(" (MaskFormer model)"),rdo=l(),hh=a("li"),Sae=a("strong"),tdo=o("perceiver"),ado=o(" \u2014 "),MB=a("a"),ndo=o("PerceiverFeatureExtractor"),sdo=o(" (Perceiver model)"),ldo=l(),ph=a("li"),Rae=a("strong"),ido=o("poolformer"),ddo=o(" \u2014 "),EB=a("a"),cdo=o("PoolFormerFeatureExtractor"),fdo=o(" (PoolFormer model)"),mdo=l(),uh=a("li"),Pae=a("strong"),gdo=o("regnet"),hdo=o(" \u2014 "),CB=a("a"),pdo=o("ConvNextFeatureExtractor"),udo=o(" (RegNet model)"),_do=l(),_h=a("li"),Bae=a("strong"),bdo=o("resnet"),vdo=o(" \u2014 "),wB=a("a"),Fdo=o("ConvNextFeatureExtractor"),Tdo=o(" (ResNet model)"),Mdo=l(),bh=a("li"),Iae=a("strong"),Edo=o("segformer"),Cdo=o(" \u2014 "),AB=a("a"),wdo=o("SegformerFeatureExtractor"),Ado=o(" (SegFormer model)"),ydo=l(),vh=a("li"),qae=a("strong"),Ldo=o("speech_to_text"),xdo=o(" \u2014 "),yB=a("a"),$do=o("Speech2TextFeatureExtractor"),kdo=o(" (Speech2Text model)"),Sdo=l(),Fh=a("li"),Nae=a("strong"),Rdo=o("swin"),Pdo=o(" \u2014 "),LB=a("a"),Bdo=o("ViTFeatureExtractor"),Ido=o(" (Swin model)"),qdo=l(),Th=a("li"),jae=a("strong"),Ndo=o("van"),jdo=o(" \u2014 "),xB=a("a"),Ddo=o("ConvNextFeatureExtractor"),Gdo=o(" (VAN model)"),Odo=l(),Mh=a("li"),Dae=a("strong"),Vdo=o("vit"),Xdo=o(" \u2014 "),$B=a("a"),zdo=o("ViTFeatureExtractor"),Wdo=o(" (ViT model)"),Qdo=l(),Eh=a("li"),Gae=a("strong"),Hdo=o("vit_mae"),Udo=o(" \u2014 "),kB=a("a"),Jdo=o("ViTFeatureExtractor"),Ydo=o(" (ViTMAE model)"),Kdo=l(),Ch=a("li"),Oae=a("strong"),Zdo=o("wav2vec2"),eco=o(" \u2014 "),SB=a("a"),oco=o("Wav2Vec2FeatureExtractor"),rco=o(" (Wav2Vec2 model)"),tco=l(),wh=a("li"),Vae=a("strong"),aco=o("wav2vec2-conformer"),nco=o(" \u2014 "),RB=a("a"),sco=o("Wav2Vec2FeatureExtractor"),lco=o(" (Wav2Vec2-Conformer model)"),ico=l(),Ah=a("li"),Xae=a("strong"),dco=o("yolos"),cco=o(" \u2014 "),PB=a("a"),fco=o("YolosFeatureExtractor"),mco=o(" (YOLOS model)"),gco=l(),F(yh.$$.fragment),hco=l(),F(Lh.$$.fragment),pco=l(),xh=a("div"),F(AA.$$.fragment),uco=l(),zae=a("p"),_co=o("Register a new feature extractor for this class."),IIe=l(),Mi=a("h2"),$h=a("a"),Wae=a("span"),F(yA.$$.fragment),bco=l(),Qae=a("span"),vco=o("AutoProcessor"),qIe=l(),yo=a("div"),F(LA.$$.fragment),Fco=l(),xA=a("p"),Tco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=a("a"),Mco=o("AutoProcessor.from_pretrained()"),Eco=o(" class method."),Cco=l(),$A=a("p"),wco=o("This class cannot be instantiated directly using "),Hae=a("code"),Aco=o("__init__()"),yco=o(" (throws an error)."),Lco=l(),Ue=a("div"),F(kA.$$.fragment),xco=l(),Uae=a("p"),$co=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),kco=l(),Ei=a("p"),Sco=o("The processor class to instantiate is selected based on the "),Jae=a("code"),Rco=o("model_type"),Pco=o(` property of the config object (either
passed as an argument or loaded from `),Yae=a("code"),Bco=o("pretrained_model_name_or_path"),Ico=o(" if possible):"),qco=l(),pe=a("ul"),kh=a("li"),Kae=a("strong"),Nco=o("clip"),jco=o(" \u2014 "),IB=a("a"),Dco=o("CLIPProcessor"),Gco=o(" (CLIP model)"),Oco=l(),Sh=a("li"),Zae=a("strong"),Vco=o("flava"),Xco=o(" \u2014 "),ene=a("code"),zco=o("FLAVAProcessor"),Wco=o(" (Flava model)"),Qco=l(),Rh=a("li"),one=a("strong"),Hco=o("layoutlmv2"),Uco=o(" \u2014 "),qB=a("a"),Jco=o("LayoutLMv2Processor"),Yco=o(" (LayoutLMv2 model)"),Kco=l(),Ph=a("li"),rne=a("strong"),Zco=o("layoutxlm"),efo=o(" \u2014 "),NB=a("a"),ofo=o("LayoutXLMProcessor"),rfo=o(" (LayoutXLM model)"),tfo=l(),Bh=a("li"),tne=a("strong"),afo=o("sew"),nfo=o(" \u2014 "),jB=a("a"),sfo=o("Wav2Vec2Processor"),lfo=o(" (SEW model)"),ifo=l(),Ih=a("li"),ane=a("strong"),dfo=o("sew-d"),cfo=o(" \u2014 "),DB=a("a"),ffo=o("Wav2Vec2Processor"),mfo=o(" (SEW-D model)"),gfo=l(),qh=a("li"),nne=a("strong"),hfo=o("speech_to_text"),pfo=o(" \u2014 "),GB=a("a"),ufo=o("Speech2TextProcessor"),_fo=o(" (Speech2Text model)"),bfo=l(),Nh=a("li"),sne=a("strong"),vfo=o("speech_to_text_2"),Ffo=o(" \u2014 "),OB=a("a"),Tfo=o("Speech2Text2Processor"),Mfo=o(" (Speech2Text2 model)"),Efo=l(),jh=a("li"),lne=a("strong"),Cfo=o("trocr"),wfo=o(" \u2014 "),VB=a("a"),Afo=o("TrOCRProcessor"),yfo=o(" (TrOCR model)"),Lfo=l(),Dh=a("li"),ine=a("strong"),xfo=o("unispeech"),$fo=o(" \u2014 "),XB=a("a"),kfo=o("Wav2Vec2Processor"),Sfo=o(" (UniSpeech model)"),Rfo=l(),Gh=a("li"),dne=a("strong"),Pfo=o("unispeech-sat"),Bfo=o(" \u2014 "),zB=a("a"),Ifo=o("Wav2Vec2Processor"),qfo=o(" (UniSpeechSat model)"),Nfo=l(),Oh=a("li"),cne=a("strong"),jfo=o("vilt"),Dfo=o(" \u2014 "),WB=a("a"),Gfo=o("ViltProcessor"),Ofo=o(" (ViLT model)"),Vfo=l(),Vh=a("li"),fne=a("strong"),Xfo=o("vision-text-dual-encoder"),zfo=o(" \u2014 "),QB=a("a"),Wfo=o("VisionTextDualEncoderProcessor"),Qfo=o(" (VisionTextDualEncoder model)"),Hfo=l(),Xh=a("li"),mne=a("strong"),Ufo=o("wav2vec2"),Jfo=o(" \u2014 "),HB=a("a"),Yfo=o("Wav2Vec2Processor"),Kfo=o(" (Wav2Vec2 model)"),Zfo=l(),zh=a("li"),gne=a("strong"),emo=o("wav2vec2-conformer"),omo=o(" \u2014 "),UB=a("a"),rmo=o("Wav2Vec2Processor"),tmo=o(" (Wav2Vec2-Conformer model)"),amo=l(),Wh=a("li"),hne=a("strong"),nmo=o("wavlm"),smo=o(" \u2014 "),JB=a("a"),lmo=o("Wav2Vec2Processor"),imo=o(" (WavLM model)"),dmo=l(),F(Qh.$$.fragment),cmo=l(),F(Hh.$$.fragment),fmo=l(),Uh=a("div"),F(SA.$$.fragment),mmo=l(),pne=a("p"),gmo=o("Register a new processor for this class."),NIe=l(),Ci=a("h2"),Jh=a("a"),une=a("span"),F(RA.$$.fragment),hmo=l(),_ne=a("span"),pmo=o("AutoModel"),jIe=l(),Lo=a("div"),F(PA.$$.fragment),umo=l(),wi=a("p"),_mo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YB=a("a"),bmo=o("from_pretrained()"),vmo=o(" class method or the "),KB=a("a"),Fmo=o("from_config()"),Tmo=o(` class
method.`),Mmo=l(),BA=a("p"),Emo=o("This class cannot be instantiated directly using "),bne=a("code"),Cmo=o("__init__()"),wmo=o(" (throws an error)."),Amo=l(),tt=a("div"),F(IA.$$.fragment),ymo=l(),vne=a("p"),Lmo=o("Instantiates one of the base model classes of the library from a configuration."),xmo=l(),Ai=a("p"),$mo=o(`Note:
Loading a model from its configuration file does `),Fne=a("strong"),kmo=o("not"),Smo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZB=a("a"),Rmo=o("from_pretrained()"),Pmo=o(" to load the model weights."),Bmo=l(),F(Yh.$$.fragment),Imo=l(),Je=a("div"),F(qA.$$.fragment),qmo=l(),Tne=a("p"),Nmo=o("Instantiate one of the base model classes of the library from a pretrained model."),jmo=l(),La=a("p"),Dmo=o("The model class to instantiate is selected based on the "),Mne=a("code"),Gmo=o("model_type"),Omo=o(` property of the config object (either
passed as an argument or loaded from `),Ene=a("code"),Vmo=o("pretrained_model_name_or_path"),Xmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cne=a("code"),zmo=o("pretrained_model_name_or_path"),Wmo=o(":"),Qmo=l(),x=a("ul"),Kh=a("li"),wne=a("strong"),Hmo=o("albert"),Umo=o(" \u2014 "),eI=a("a"),Jmo=o("AlbertModel"),Ymo=o(" (ALBERT model)"),Kmo=l(),Zh=a("li"),Ane=a("strong"),Zmo=o("bart"),ego=o(" \u2014 "),oI=a("a"),ogo=o("BartModel"),rgo=o(" (BART model)"),tgo=l(),ep=a("li"),yne=a("strong"),ago=o("beit"),ngo=o(" \u2014 "),rI=a("a"),sgo=o("BeitModel"),lgo=o(" (BEiT model)"),igo=l(),op=a("li"),Lne=a("strong"),dgo=o("bert"),cgo=o(" \u2014 "),tI=a("a"),fgo=o("BertModel"),mgo=o(" (BERT model)"),ggo=l(),rp=a("li"),xne=a("strong"),hgo=o("bert-generation"),pgo=o(" \u2014 "),aI=a("a"),ugo=o("BertGenerationEncoder"),_go=o(" (Bert Generation model)"),bgo=l(),tp=a("li"),$ne=a("strong"),vgo=o("big_bird"),Fgo=o(" \u2014 "),nI=a("a"),Tgo=o("BigBirdModel"),Mgo=o(" (BigBird model)"),Ego=l(),ap=a("li"),kne=a("strong"),Cgo=o("bigbird_pegasus"),wgo=o(" \u2014 "),sI=a("a"),Ago=o("BigBirdPegasusModel"),ygo=o(" (BigBirdPegasus model)"),Lgo=l(),np=a("li"),Sne=a("strong"),xgo=o("blenderbot"),$go=o(" \u2014 "),lI=a("a"),kgo=o("BlenderbotModel"),Sgo=o(" (Blenderbot model)"),Rgo=l(),sp=a("li"),Rne=a("strong"),Pgo=o("blenderbot-small"),Bgo=o(" \u2014 "),iI=a("a"),Igo=o("BlenderbotSmallModel"),qgo=o(" (BlenderbotSmall model)"),Ngo=l(),lp=a("li"),Pne=a("strong"),jgo=o("camembert"),Dgo=o(" \u2014 "),dI=a("a"),Ggo=o("CamembertModel"),Ogo=o(" (CamemBERT model)"),Vgo=l(),ip=a("li"),Bne=a("strong"),Xgo=o("canine"),zgo=o(" \u2014 "),cI=a("a"),Wgo=o("CanineModel"),Qgo=o(" (Canine model)"),Hgo=l(),dp=a("li"),Ine=a("strong"),Ugo=o("clip"),Jgo=o(" \u2014 "),fI=a("a"),Ygo=o("CLIPModel"),Kgo=o(" (CLIP model)"),Zgo=l(),cp=a("li"),qne=a("strong"),eho=o("convbert"),oho=o(" \u2014 "),mI=a("a"),rho=o("ConvBertModel"),tho=o(" (ConvBERT model)"),aho=l(),fp=a("li"),Nne=a("strong"),nho=o("convnext"),sho=o(" \u2014 "),gI=a("a"),lho=o("ConvNextModel"),iho=o(" (ConvNext model)"),dho=l(),mp=a("li"),jne=a("strong"),cho=o("ctrl"),fho=o(" \u2014 "),hI=a("a"),mho=o("CTRLModel"),gho=o(" (CTRL model)"),hho=l(),gp=a("li"),Dne=a("strong"),pho=o("data2vec-audio"),uho=o(" \u2014 "),pI=a("a"),_ho=o("Data2VecAudioModel"),bho=o(" (Data2VecAudio model)"),vho=l(),hp=a("li"),Gne=a("strong"),Fho=o("data2vec-text"),Tho=o(" \u2014 "),uI=a("a"),Mho=o("Data2VecTextModel"),Eho=o(" (Data2VecText model)"),Cho=l(),pp=a("li"),One=a("strong"),who=o("data2vec-vision"),Aho=o(" \u2014 "),_I=a("a"),yho=o("Data2VecVisionModel"),Lho=o(" (Data2VecVision model)"),xho=l(),up=a("li"),Vne=a("strong"),$ho=o("deberta"),kho=o(" \u2014 "),bI=a("a"),Sho=o("DebertaModel"),Rho=o(" (DeBERTa model)"),Pho=l(),_p=a("li"),Xne=a("strong"),Bho=o("deberta-v2"),Iho=o(" \u2014 "),vI=a("a"),qho=o("DebertaV2Model"),Nho=o(" (DeBERTa-v2 model)"),jho=l(),bp=a("li"),zne=a("strong"),Dho=o("decision_transformer"),Gho=o(" \u2014 "),FI=a("a"),Oho=o("DecisionTransformerModel"),Vho=o(" (Decision Transformer model)"),Xho=l(),vp=a("li"),Wne=a("strong"),zho=o("deit"),Who=o(" \u2014 "),TI=a("a"),Qho=o("DeiTModel"),Hho=o(" (DeiT model)"),Uho=l(),Fp=a("li"),Qne=a("strong"),Jho=o("detr"),Yho=o(" \u2014 "),MI=a("a"),Kho=o("DetrModel"),Zho=o(" (DETR model)"),epo=l(),Tp=a("li"),Hne=a("strong"),opo=o("distilbert"),rpo=o(" \u2014 "),EI=a("a"),tpo=o("DistilBertModel"),apo=o(" (DistilBERT model)"),npo=l(),Mp=a("li"),Une=a("strong"),spo=o("dpr"),lpo=o(" \u2014 "),CI=a("a"),ipo=o("DPRQuestionEncoder"),dpo=o(" (DPR model)"),cpo=l(),Ep=a("li"),Jne=a("strong"),fpo=o("dpt"),mpo=o(" \u2014 "),wI=a("a"),gpo=o("DPTModel"),hpo=o(" (DPT model)"),ppo=l(),Cp=a("li"),Yne=a("strong"),upo=o("electra"),_po=o(" \u2014 "),AI=a("a"),bpo=o("ElectraModel"),vpo=o(" (ELECTRA model)"),Fpo=l(),wp=a("li"),Kne=a("strong"),Tpo=o("flaubert"),Mpo=o(" \u2014 "),yI=a("a"),Epo=o("FlaubertModel"),Cpo=o(" (FlauBERT model)"),wpo=l(),Ap=a("li"),Zne=a("strong"),Apo=o("flava"),ypo=o(" \u2014 "),LI=a("a"),Lpo=o("FlavaModel"),xpo=o(" (Flava model)"),$po=l(),yp=a("li"),ese=a("strong"),kpo=o("fnet"),Spo=o(" \u2014 "),xI=a("a"),Rpo=o("FNetModel"),Ppo=o(" (FNet model)"),Bpo=l(),Lp=a("li"),ose=a("strong"),Ipo=o("fsmt"),qpo=o(" \u2014 "),$I=a("a"),Npo=o("FSMTModel"),jpo=o(" (FairSeq Machine-Translation model)"),Dpo=l(),Rs=a("li"),rse=a("strong"),Gpo=o("funnel"),Opo=o(" \u2014 "),kI=a("a"),Vpo=o("FunnelModel"),Xpo=o(" or "),SI=a("a"),zpo=o("FunnelBaseModel"),Wpo=o(" (Funnel Transformer model)"),Qpo=l(),xp=a("li"),tse=a("strong"),Hpo=o("glpn"),Upo=o(" \u2014 "),RI=a("a"),Jpo=o("GLPNModel"),Ypo=o(" (GLPN model)"),Kpo=l(),$p=a("li"),ase=a("strong"),Zpo=o("gpt2"),euo=o(" \u2014 "),PI=a("a"),ouo=o("GPT2Model"),ruo=o(" (OpenAI GPT-2 model)"),tuo=l(),kp=a("li"),nse=a("strong"),auo=o("gpt_neo"),nuo=o(" \u2014 "),BI=a("a"),suo=o("GPTNeoModel"),luo=o(" (GPT Neo model)"),iuo=l(),Sp=a("li"),sse=a("strong"),duo=o("gptj"),cuo=o(" \u2014 "),II=a("a"),fuo=o("GPTJModel"),muo=o(" (GPT-J model)"),guo=l(),Rp=a("li"),lse=a("strong"),huo=o("hubert"),puo=o(" \u2014 "),qI=a("a"),uuo=o("HubertModel"),_uo=o(" (Hubert model)"),buo=l(),Pp=a("li"),ise=a("strong"),vuo=o("ibert"),Fuo=o(" \u2014 "),NI=a("a"),Tuo=o("IBertModel"),Muo=o(" (I-BERT model)"),Euo=l(),Bp=a("li"),dse=a("strong"),Cuo=o("imagegpt"),wuo=o(" \u2014 "),jI=a("a"),Auo=o("ImageGPTModel"),yuo=o(" (ImageGPT model)"),Luo=l(),Ip=a("li"),cse=a("strong"),xuo=o("layoutlm"),$uo=o(" \u2014 "),DI=a("a"),kuo=o("LayoutLMModel"),Suo=o(" (LayoutLM model)"),Ruo=l(),qp=a("li"),fse=a("strong"),Puo=o("layoutlmv2"),Buo=o(" \u2014 "),GI=a("a"),Iuo=o("LayoutLMv2Model"),quo=o(" (LayoutLMv2 model)"),Nuo=l(),Np=a("li"),mse=a("strong"),juo=o("led"),Duo=o(" \u2014 "),OI=a("a"),Guo=o("LEDModel"),Ouo=o(" (LED model)"),Vuo=l(),jp=a("li"),gse=a("strong"),Xuo=o("longformer"),zuo=o(" \u2014 "),VI=a("a"),Wuo=o("LongformerModel"),Quo=o(" (Longformer model)"),Huo=l(),Dp=a("li"),hse=a("strong"),Uuo=o("luke"),Juo=o(" \u2014 "),XI=a("a"),Yuo=o("LukeModel"),Kuo=o(" (LUKE model)"),Zuo=l(),Gp=a("li"),pse=a("strong"),e_o=o("lxmert"),o_o=o(" \u2014 "),zI=a("a"),r_o=o("LxmertModel"),t_o=o(" (LXMERT model)"),a_o=l(),Op=a("li"),use=a("strong"),n_o=o("m2m_100"),s_o=o(" \u2014 "),WI=a("a"),l_o=o("M2M100Model"),i_o=o(" (M2M100 model)"),d_o=l(),Vp=a("li"),_se=a("strong"),c_o=o("marian"),f_o=o(" \u2014 "),QI=a("a"),m_o=o("MarianModel"),g_o=o(" (Marian model)"),h_o=l(),Xp=a("li"),bse=a("strong"),p_o=o("maskformer"),u_o=o(" \u2014 "),HI=a("a"),__o=o("MaskFormerModel"),b_o=o(" (MaskFormer model)"),v_o=l(),zp=a("li"),vse=a("strong"),F_o=o("mbart"),T_o=o(" \u2014 "),UI=a("a"),M_o=o("MBartModel"),E_o=o(" (mBART model)"),C_o=l(),Wp=a("li"),Fse=a("strong"),w_o=o("megatron-bert"),A_o=o(" \u2014 "),JI=a("a"),y_o=o("MegatronBertModel"),L_o=o(" (MegatronBert model)"),x_o=l(),Qp=a("li"),Tse=a("strong"),$_o=o("mobilebert"),k_o=o(" \u2014 "),YI=a("a"),S_o=o("MobileBertModel"),R_o=o(" (MobileBERT model)"),P_o=l(),Hp=a("li"),Mse=a("strong"),B_o=o("mpnet"),I_o=o(" \u2014 "),KI=a("a"),q_o=o("MPNetModel"),N_o=o(" (MPNet model)"),j_o=l(),Up=a("li"),Ese=a("strong"),D_o=o("mt5"),G_o=o(" \u2014 "),ZI=a("a"),O_o=o("MT5Model"),V_o=o(" (mT5 model)"),X_o=l(),Jp=a("li"),Cse=a("strong"),z_o=o("nystromformer"),W_o=o(" \u2014 "),eq=a("a"),Q_o=o("NystromformerModel"),H_o=o(" (Nystromformer model)"),U_o=l(),Yp=a("li"),wse=a("strong"),J_o=o("openai-gpt"),Y_o=o(" \u2014 "),oq=a("a"),K_o=o("OpenAIGPTModel"),Z_o=o(" (OpenAI GPT model)"),e2o=l(),Kp=a("li"),Ase=a("strong"),o2o=o("opt"),r2o=o(" \u2014 "),rq=a("a"),t2o=o("OPTModel"),a2o=o(" (OPT model)"),n2o=l(),Zp=a("li"),yse=a("strong"),s2o=o("pegasus"),l2o=o(" \u2014 "),tq=a("a"),i2o=o("PegasusModel"),d2o=o(" (Pegasus model)"),c2o=l(),eu=a("li"),Lse=a("strong"),f2o=o("perceiver"),m2o=o(" \u2014 "),aq=a("a"),g2o=o("PerceiverModel"),h2o=o(" (Perceiver model)"),p2o=l(),ou=a("li"),xse=a("strong"),u2o=o("plbart"),_2o=o(" \u2014 "),nq=a("a"),b2o=o("PLBartModel"),v2o=o(" (PLBart model)"),F2o=l(),ru=a("li"),$se=a("strong"),T2o=o("poolformer"),M2o=o(" \u2014 "),sq=a("a"),E2o=o("PoolFormerModel"),C2o=o(" (PoolFormer model)"),w2o=l(),tu=a("li"),kse=a("strong"),A2o=o("prophetnet"),y2o=o(" \u2014 "),lq=a("a"),L2o=o("ProphetNetModel"),x2o=o(" (ProphetNet model)"),$2o=l(),au=a("li"),Sse=a("strong"),k2o=o("qdqbert"),S2o=o(" \u2014 "),iq=a("a"),R2o=o("QDQBertModel"),P2o=o(" (QDQBert model)"),B2o=l(),nu=a("li"),Rse=a("strong"),I2o=o("reformer"),q2o=o(" \u2014 "),dq=a("a"),N2o=o("ReformerModel"),j2o=o(" (Reformer model)"),D2o=l(),su=a("li"),Pse=a("strong"),G2o=o("regnet"),O2o=o(" \u2014 "),cq=a("a"),V2o=o("RegNetModel"),X2o=o(" (RegNet model)"),z2o=l(),lu=a("li"),Bse=a("strong"),W2o=o("rembert"),Q2o=o(" \u2014 "),fq=a("a"),H2o=o("RemBertModel"),U2o=o(" (RemBERT model)"),J2o=l(),iu=a("li"),Ise=a("strong"),Y2o=o("resnet"),K2o=o(" \u2014 "),mq=a("a"),Z2o=o("ResNetModel"),e1o=o(" (ResNet model)"),o1o=l(),du=a("li"),qse=a("strong"),r1o=o("retribert"),t1o=o(" \u2014 "),gq=a("a"),a1o=o("RetriBertModel"),n1o=o(" (RetriBERT model)"),s1o=l(),cu=a("li"),Nse=a("strong"),l1o=o("roberta"),i1o=o(" \u2014 "),hq=a("a"),d1o=o("RobertaModel"),c1o=o(" (RoBERTa model)"),f1o=l(),fu=a("li"),jse=a("strong"),m1o=o("roformer"),g1o=o(" \u2014 "),pq=a("a"),h1o=o("RoFormerModel"),p1o=o(" (RoFormer model)"),u1o=l(),mu=a("li"),Dse=a("strong"),_1o=o("segformer"),b1o=o(" \u2014 "),uq=a("a"),v1o=o("SegformerModel"),F1o=o(" (SegFormer model)"),T1o=l(),gu=a("li"),Gse=a("strong"),M1o=o("sew"),E1o=o(" \u2014 "),_q=a("a"),C1o=o("SEWModel"),w1o=o(" (SEW model)"),A1o=l(),hu=a("li"),Ose=a("strong"),y1o=o("sew-d"),L1o=o(" \u2014 "),bq=a("a"),x1o=o("SEWDModel"),$1o=o(" (SEW-D model)"),k1o=l(),pu=a("li"),Vse=a("strong"),S1o=o("speech_to_text"),R1o=o(" \u2014 "),vq=a("a"),P1o=o("Speech2TextModel"),B1o=o(" (Speech2Text model)"),I1o=l(),uu=a("li"),Xse=a("strong"),q1o=o("splinter"),N1o=o(" \u2014 "),Fq=a("a"),j1o=o("SplinterModel"),D1o=o(" (Splinter model)"),G1o=l(),_u=a("li"),zse=a("strong"),O1o=o("squeezebert"),V1o=o(" \u2014 "),Tq=a("a"),X1o=o("SqueezeBertModel"),z1o=o(" (SqueezeBERT model)"),W1o=l(),bu=a("li"),Wse=a("strong"),Q1o=o("swin"),H1o=o(" \u2014 "),Mq=a("a"),U1o=o("SwinModel"),J1o=o(" (Swin model)"),Y1o=l(),vu=a("li"),Qse=a("strong"),K1o=o("t5"),Z1o=o(" \u2014 "),Eq=a("a"),ebo=o("T5Model"),obo=o(" (T5 model)"),rbo=l(),Fu=a("li"),Hse=a("strong"),tbo=o("tapas"),abo=o(" \u2014 "),Cq=a("a"),nbo=o("TapasModel"),sbo=o(" (TAPAS model)"),lbo=l(),Tu=a("li"),Use=a("strong"),ibo=o("transfo-xl"),dbo=o(" \u2014 "),wq=a("a"),cbo=o("TransfoXLModel"),fbo=o(" (Transformer-XL model)"),mbo=l(),Mu=a("li"),Jse=a("strong"),gbo=o("unispeech"),hbo=o(" \u2014 "),Aq=a("a"),pbo=o("UniSpeechModel"),ubo=o(" (UniSpeech model)"),_bo=l(),Eu=a("li"),Yse=a("strong"),bbo=o("unispeech-sat"),vbo=o(" \u2014 "),yq=a("a"),Fbo=o("UniSpeechSatModel"),Tbo=o(" (UniSpeechSat model)"),Mbo=l(),Cu=a("li"),Kse=a("strong"),Ebo=o("van"),Cbo=o(" \u2014 "),Lq=a("a"),wbo=o("VanModel"),Abo=o(" (VAN model)"),ybo=l(),wu=a("li"),Zse=a("strong"),Lbo=o("vilt"),xbo=o(" \u2014 "),xq=a("a"),$bo=o("ViltModel"),kbo=o(" (ViLT model)"),Sbo=l(),Au=a("li"),ele=a("strong"),Rbo=o("vision-text-dual-encoder"),Pbo=o(" \u2014 "),$q=a("a"),Bbo=o("VisionTextDualEncoderModel"),Ibo=o(" (VisionTextDualEncoder model)"),qbo=l(),yu=a("li"),ole=a("strong"),Nbo=o("visual_bert"),jbo=o(" \u2014 "),kq=a("a"),Dbo=o("VisualBertModel"),Gbo=o(" (VisualBert model)"),Obo=l(),Lu=a("li"),rle=a("strong"),Vbo=o("vit"),Xbo=o(" \u2014 "),Sq=a("a"),zbo=o("ViTModel"),Wbo=o(" (ViT model)"),Qbo=l(),xu=a("li"),tle=a("strong"),Hbo=o("vit_mae"),Ubo=o(" \u2014 "),Rq=a("a"),Jbo=o("ViTMAEModel"),Ybo=o(" (ViTMAE model)"),Kbo=l(),$u=a("li"),ale=a("strong"),Zbo=o("wav2vec2"),evo=o(" \u2014 "),Pq=a("a"),ovo=o("Wav2Vec2Model"),rvo=o(" (Wav2Vec2 model)"),tvo=l(),ku=a("li"),nle=a("strong"),avo=o("wav2vec2-conformer"),nvo=o(" \u2014 "),Bq=a("a"),svo=o("Wav2Vec2ConformerModel"),lvo=o(" (Wav2Vec2-Conformer model)"),ivo=l(),Su=a("li"),sle=a("strong"),dvo=o("wavlm"),cvo=o(" \u2014 "),Iq=a("a"),fvo=o("WavLMModel"),mvo=o(" (WavLM model)"),gvo=l(),Ru=a("li"),lle=a("strong"),hvo=o("xglm"),pvo=o(" \u2014 "),qq=a("a"),uvo=o("XGLMModel"),_vo=o(" (XGLM model)"),bvo=l(),Pu=a("li"),ile=a("strong"),vvo=o("xlm"),Fvo=o(" \u2014 "),Nq=a("a"),Tvo=o("XLMModel"),Mvo=o(" (XLM model)"),Evo=l(),Bu=a("li"),dle=a("strong"),Cvo=o("xlm-prophetnet"),wvo=o(" \u2014 "),jq=a("a"),Avo=o("XLMProphetNetModel"),yvo=o(" (XLMProphetNet model)"),Lvo=l(),Iu=a("li"),cle=a("strong"),xvo=o("xlm-roberta"),$vo=o(" \u2014 "),Dq=a("a"),kvo=o("XLMRobertaModel"),Svo=o(" (XLM-RoBERTa model)"),Rvo=l(),qu=a("li"),fle=a("strong"),Pvo=o("xlm-roberta-xl"),Bvo=o(" \u2014 "),Gq=a("a"),Ivo=o("XLMRobertaXLModel"),qvo=o(" (XLM-RoBERTa-XL model)"),Nvo=l(),Nu=a("li"),mle=a("strong"),jvo=o("xlnet"),Dvo=o(" \u2014 "),Oq=a("a"),Gvo=o("XLNetModel"),Ovo=o(" (XLNet model)"),Vvo=l(),ju=a("li"),gle=a("strong"),Xvo=o("yolos"),zvo=o(" \u2014 "),Vq=a("a"),Wvo=o("YolosModel"),Qvo=o(" (YOLOS model)"),Hvo=l(),Du=a("li"),hle=a("strong"),Uvo=o("yoso"),Jvo=o(" \u2014 "),Xq=a("a"),Yvo=o("YosoModel"),Kvo=o(" (YOSO model)"),Zvo=l(),Gu=a("p"),eFo=o("The model is set in evaluation mode by default using "),ple=a("code"),oFo=o("model.eval()"),rFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=a("code"),tFo=o("model.train()"),aFo=l(),F(Ou.$$.fragment),DIe=l(),yi=a("h2"),Vu=a("a"),_le=a("span"),F(NA.$$.fragment),nFo=l(),ble=a("span"),sFo=o("AutoModelForPreTraining"),GIe=l(),xo=a("div"),F(jA.$$.fragment),lFo=l(),Li=a("p"),iFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zq=a("a"),dFo=o("from_pretrained()"),cFo=o(" class method or the "),Wq=a("a"),fFo=o("from_config()"),mFo=o(` class
method.`),gFo=l(),DA=a("p"),hFo=o("This class cannot be instantiated directly using "),vle=a("code"),pFo=o("__init__()"),uFo=o(" (throws an error)."),_Fo=l(),at=a("div"),F(GA.$$.fragment),bFo=l(),Fle=a("p"),vFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),FFo=l(),xi=a("p"),TFo=o(`Note:
Loading a model from its configuration file does `),Tle=a("strong"),MFo=o("not"),EFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=a("a"),CFo=o("from_pretrained()"),wFo=o(" to load the model weights."),AFo=l(),F(Xu.$$.fragment),yFo=l(),Ye=a("div"),F(OA.$$.fragment),LFo=l(),Mle=a("p"),xFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Fo=l(),xa=a("p"),kFo=o("The model class to instantiate is selected based on the "),Ele=a("code"),SFo=o("model_type"),RFo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),PFo=o("pretrained_model_name_or_path"),BFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),IFo=o("pretrained_model_name_or_path"),qFo=o(":"),NFo=l(),G=a("ul"),zu=a("li"),Ale=a("strong"),jFo=o("albert"),DFo=o(" \u2014 "),Hq=a("a"),GFo=o("AlbertForPreTraining"),OFo=o(" (ALBERT model)"),VFo=l(),Wu=a("li"),yle=a("strong"),XFo=o("bart"),zFo=o(" \u2014 "),Uq=a("a"),WFo=o("BartForConditionalGeneration"),QFo=o(" (BART model)"),HFo=l(),Qu=a("li"),Lle=a("strong"),UFo=o("bert"),JFo=o(" \u2014 "),Jq=a("a"),YFo=o("BertForPreTraining"),KFo=o(" (BERT model)"),ZFo=l(),Hu=a("li"),xle=a("strong"),e6o=o("big_bird"),o6o=o(" \u2014 "),Yq=a("a"),r6o=o("BigBirdForPreTraining"),t6o=o(" (BigBird model)"),a6o=l(),Uu=a("li"),$le=a("strong"),n6o=o("camembert"),s6o=o(" \u2014 "),Kq=a("a"),l6o=o("CamembertForMaskedLM"),i6o=o(" (CamemBERT model)"),d6o=l(),Ju=a("li"),kle=a("strong"),c6o=o("ctrl"),f6o=o(" \u2014 "),Zq=a("a"),m6o=o("CTRLLMHeadModel"),g6o=o(" (CTRL model)"),h6o=l(),Yu=a("li"),Sle=a("strong"),p6o=o("data2vec-text"),u6o=o(" \u2014 "),eN=a("a"),_6o=o("Data2VecTextForMaskedLM"),b6o=o(" (Data2VecText model)"),v6o=l(),Ku=a("li"),Rle=a("strong"),F6o=o("deberta"),T6o=o(" \u2014 "),oN=a("a"),M6o=o("DebertaForMaskedLM"),E6o=o(" (DeBERTa model)"),C6o=l(),Zu=a("li"),Ple=a("strong"),w6o=o("deberta-v2"),A6o=o(" \u2014 "),rN=a("a"),y6o=o("DebertaV2ForMaskedLM"),L6o=o(" (DeBERTa-v2 model)"),x6o=l(),e_=a("li"),Ble=a("strong"),$6o=o("distilbert"),k6o=o(" \u2014 "),tN=a("a"),S6o=o("DistilBertForMaskedLM"),R6o=o(" (DistilBERT model)"),P6o=l(),o_=a("li"),Ile=a("strong"),B6o=o("electra"),I6o=o(" \u2014 "),aN=a("a"),q6o=o("ElectraForPreTraining"),N6o=o(" (ELECTRA model)"),j6o=l(),r_=a("li"),qle=a("strong"),D6o=o("flaubert"),G6o=o(" \u2014 "),nN=a("a"),O6o=o("FlaubertWithLMHeadModel"),V6o=o(" (FlauBERT model)"),X6o=l(),t_=a("li"),Nle=a("strong"),z6o=o("flava"),W6o=o(" \u2014 "),sN=a("a"),Q6o=o("FlavaForPreTraining"),H6o=o(" (Flava model)"),U6o=l(),a_=a("li"),jle=a("strong"),J6o=o("fnet"),Y6o=o(" \u2014 "),lN=a("a"),K6o=o("FNetForPreTraining"),Z6o=o(" (FNet model)"),e0o=l(),n_=a("li"),Dle=a("strong"),o0o=o("fsmt"),r0o=o(" \u2014 "),iN=a("a"),t0o=o("FSMTForConditionalGeneration"),a0o=o(" (FairSeq Machine-Translation model)"),n0o=l(),s_=a("li"),Gle=a("strong"),s0o=o("funnel"),l0o=o(" \u2014 "),dN=a("a"),i0o=o("FunnelForPreTraining"),d0o=o(" (Funnel Transformer model)"),c0o=l(),l_=a("li"),Ole=a("strong"),f0o=o("gpt2"),m0o=o(" \u2014 "),cN=a("a"),g0o=o("GPT2LMHeadModel"),h0o=o(" (OpenAI GPT-2 model)"),p0o=l(),i_=a("li"),Vle=a("strong"),u0o=o("ibert"),_0o=o(" \u2014 "),fN=a("a"),b0o=o("IBertForMaskedLM"),v0o=o(" (I-BERT model)"),F0o=l(),d_=a("li"),Xle=a("strong"),T0o=o("layoutlm"),M0o=o(" \u2014 "),mN=a("a"),E0o=o("LayoutLMForMaskedLM"),C0o=o(" (LayoutLM model)"),w0o=l(),c_=a("li"),zle=a("strong"),A0o=o("longformer"),y0o=o(" \u2014 "),gN=a("a"),L0o=o("LongformerForMaskedLM"),x0o=o(" (Longformer model)"),$0o=l(),f_=a("li"),Wle=a("strong"),k0o=o("lxmert"),S0o=o(" \u2014 "),hN=a("a"),R0o=o("LxmertForPreTraining"),P0o=o(" (LXMERT model)"),B0o=l(),m_=a("li"),Qle=a("strong"),I0o=o("megatron-bert"),q0o=o(" \u2014 "),pN=a("a"),N0o=o("MegatronBertForPreTraining"),j0o=o(" (MegatronBert model)"),D0o=l(),g_=a("li"),Hle=a("strong"),G0o=o("mobilebert"),O0o=o(" \u2014 "),uN=a("a"),V0o=o("MobileBertForPreTraining"),X0o=o(" (MobileBERT model)"),z0o=l(),h_=a("li"),Ule=a("strong"),W0o=o("mpnet"),Q0o=o(" \u2014 "),_N=a("a"),H0o=o("MPNetForMaskedLM"),U0o=o(" (MPNet model)"),J0o=l(),p_=a("li"),Jle=a("strong"),Y0o=o("openai-gpt"),K0o=o(" \u2014 "),bN=a("a"),Z0o=o("OpenAIGPTLMHeadModel"),eTo=o(" (OpenAI GPT model)"),oTo=l(),u_=a("li"),Yle=a("strong"),rTo=o("retribert"),tTo=o(" \u2014 "),vN=a("a"),aTo=o("RetriBertModel"),nTo=o(" (RetriBERT model)"),sTo=l(),__=a("li"),Kle=a("strong"),lTo=o("roberta"),iTo=o(" \u2014 "),FN=a("a"),dTo=o("RobertaForMaskedLM"),cTo=o(" (RoBERTa model)"),fTo=l(),b_=a("li"),Zle=a("strong"),mTo=o("squeezebert"),gTo=o(" \u2014 "),TN=a("a"),hTo=o("SqueezeBertForMaskedLM"),pTo=o(" (SqueezeBERT model)"),uTo=l(),v_=a("li"),eie=a("strong"),_To=o("t5"),bTo=o(" \u2014 "),MN=a("a"),vTo=o("T5ForConditionalGeneration"),FTo=o(" (T5 model)"),TTo=l(),F_=a("li"),oie=a("strong"),MTo=o("tapas"),ETo=o(" \u2014 "),EN=a("a"),CTo=o("TapasForMaskedLM"),wTo=o(" (TAPAS model)"),ATo=l(),T_=a("li"),rie=a("strong"),yTo=o("transfo-xl"),LTo=o(" \u2014 "),CN=a("a"),xTo=o("TransfoXLLMHeadModel"),$To=o(" (Transformer-XL model)"),kTo=l(),M_=a("li"),tie=a("strong"),STo=o("unispeech"),RTo=o(" \u2014 "),wN=a("a"),PTo=o("UniSpeechForPreTraining"),BTo=o(" (UniSpeech model)"),ITo=l(),E_=a("li"),aie=a("strong"),qTo=o("unispeech-sat"),NTo=o(" \u2014 "),AN=a("a"),jTo=o("UniSpeechSatForPreTraining"),DTo=o(" (UniSpeechSat model)"),GTo=l(),C_=a("li"),nie=a("strong"),OTo=o("visual_bert"),VTo=o(" \u2014 "),yN=a("a"),XTo=o("VisualBertForPreTraining"),zTo=o(" (VisualBert model)"),WTo=l(),w_=a("li"),sie=a("strong"),QTo=o("vit_mae"),HTo=o(" \u2014 "),LN=a("a"),UTo=o("ViTMAEForPreTraining"),JTo=o(" (ViTMAE model)"),YTo=l(),A_=a("li"),lie=a("strong"),KTo=o("wav2vec2"),ZTo=o(" \u2014 "),xN=a("a"),e7o=o("Wav2Vec2ForPreTraining"),o7o=o(" (Wav2Vec2 model)"),r7o=l(),y_=a("li"),iie=a("strong"),t7o=o("wav2vec2-conformer"),a7o=o(" \u2014 "),$N=a("a"),n7o=o("Wav2Vec2ConformerForPreTraining"),s7o=o(" (Wav2Vec2-Conformer model)"),l7o=l(),L_=a("li"),die=a("strong"),i7o=o("xlm"),d7o=o(" \u2014 "),kN=a("a"),c7o=o("XLMWithLMHeadModel"),f7o=o(" (XLM model)"),m7o=l(),x_=a("li"),cie=a("strong"),g7o=o("xlm-roberta"),h7o=o(" \u2014 "),SN=a("a"),p7o=o("XLMRobertaForMaskedLM"),u7o=o(" (XLM-RoBERTa model)"),_7o=l(),$_=a("li"),fie=a("strong"),b7o=o("xlm-roberta-xl"),v7o=o(" \u2014 "),RN=a("a"),F7o=o("XLMRobertaXLForMaskedLM"),T7o=o(" (XLM-RoBERTa-XL model)"),M7o=l(),k_=a("li"),mie=a("strong"),E7o=o("xlnet"),C7o=o(" \u2014 "),PN=a("a"),w7o=o("XLNetLMHeadModel"),A7o=o(" (XLNet model)"),y7o=l(),S_=a("p"),L7o=o("The model is set in evaluation mode by default using "),gie=a("code"),x7o=o("model.eval()"),$7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),k7o=o("model.train()"),S7o=l(),F(R_.$$.fragment),OIe=l(),$i=a("h2"),P_=a("a"),pie=a("span"),F(VA.$$.fragment),R7o=l(),uie=a("span"),P7o=o("AutoModelForCausalLM"),VIe=l(),$o=a("div"),F(XA.$$.fragment),B7o=l(),ki=a("p"),I7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BN=a("a"),q7o=o("from_pretrained()"),N7o=o(" class method or the "),IN=a("a"),j7o=o("from_config()"),D7o=o(` class
method.`),G7o=l(),zA=a("p"),O7o=o("This class cannot be instantiated directly using "),_ie=a("code"),V7o=o("__init__()"),X7o=o(" (throws an error)."),z7o=l(),nt=a("div"),F(WA.$$.fragment),W7o=l(),bie=a("p"),Q7o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),H7o=l(),Si=a("p"),U7o=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),J7o=o("not"),Y7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=a("a"),K7o=o("from_pretrained()"),Z7o=o(" to load the model weights."),eMo=l(),F(B_.$$.fragment),oMo=l(),Ke=a("div"),F(QA.$$.fragment),rMo=l(),Fie=a("p"),tMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aMo=l(),$a=a("p"),nMo=o("The model class to instantiate is selected based on the "),Tie=a("code"),sMo=o("model_type"),lMo=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),iMo=o("pretrained_model_name_or_path"),dMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),cMo=o("pretrained_model_name_or_path"),fMo=o(":"),mMo=l(),z=a("ul"),I_=a("li"),Cie=a("strong"),gMo=o("bart"),hMo=o(" \u2014 "),NN=a("a"),pMo=o("BartForCausalLM"),uMo=o(" (BART model)"),_Mo=l(),q_=a("li"),wie=a("strong"),bMo=o("bert"),vMo=o(" \u2014 "),jN=a("a"),FMo=o("BertLMHeadModel"),TMo=o(" (BERT model)"),MMo=l(),N_=a("li"),Aie=a("strong"),EMo=o("bert-generation"),CMo=o(" \u2014 "),DN=a("a"),wMo=o("BertGenerationDecoder"),AMo=o(" (Bert Generation model)"),yMo=l(),j_=a("li"),yie=a("strong"),LMo=o("big_bird"),xMo=o(" \u2014 "),GN=a("a"),$Mo=o("BigBirdForCausalLM"),kMo=o(" (BigBird model)"),SMo=l(),D_=a("li"),Lie=a("strong"),RMo=o("bigbird_pegasus"),PMo=o(" \u2014 "),ON=a("a"),BMo=o("BigBirdPegasusForCausalLM"),IMo=o(" (BigBirdPegasus model)"),qMo=l(),G_=a("li"),xie=a("strong"),NMo=o("blenderbot"),jMo=o(" \u2014 "),VN=a("a"),DMo=o("BlenderbotForCausalLM"),GMo=o(" (Blenderbot model)"),OMo=l(),O_=a("li"),$ie=a("strong"),VMo=o("blenderbot-small"),XMo=o(" \u2014 "),XN=a("a"),zMo=o("BlenderbotSmallForCausalLM"),WMo=o(" (BlenderbotSmall model)"),QMo=l(),V_=a("li"),kie=a("strong"),HMo=o("camembert"),UMo=o(" \u2014 "),zN=a("a"),JMo=o("CamembertForCausalLM"),YMo=o(" (CamemBERT model)"),KMo=l(),X_=a("li"),Sie=a("strong"),ZMo=o("ctrl"),e4o=o(" \u2014 "),WN=a("a"),o4o=o("CTRLLMHeadModel"),r4o=o(" (CTRL model)"),t4o=l(),z_=a("li"),Rie=a("strong"),a4o=o("data2vec-text"),n4o=o(" \u2014 "),QN=a("a"),s4o=o("Data2VecTextForCausalLM"),l4o=o(" (Data2VecText model)"),i4o=l(),W_=a("li"),Pie=a("strong"),d4o=o("electra"),c4o=o(" \u2014 "),HN=a("a"),f4o=o("ElectraForCausalLM"),m4o=o(" (ELECTRA model)"),g4o=l(),Q_=a("li"),Bie=a("strong"),h4o=o("gpt2"),p4o=o(" \u2014 "),UN=a("a"),u4o=o("GPT2LMHeadModel"),_4o=o(" (OpenAI GPT-2 model)"),b4o=l(),H_=a("li"),Iie=a("strong"),v4o=o("gpt_neo"),F4o=o(" \u2014 "),JN=a("a"),T4o=o("GPTNeoForCausalLM"),M4o=o(" (GPT Neo model)"),E4o=l(),U_=a("li"),qie=a("strong"),C4o=o("gptj"),w4o=o(" \u2014 "),YN=a("a"),A4o=o("GPTJForCausalLM"),y4o=o(" (GPT-J model)"),L4o=l(),J_=a("li"),Nie=a("strong"),x4o=o("marian"),$4o=o(" \u2014 "),KN=a("a"),k4o=o("MarianForCausalLM"),S4o=o(" (Marian model)"),R4o=l(),Y_=a("li"),jie=a("strong"),P4o=o("mbart"),B4o=o(" \u2014 "),ZN=a("a"),I4o=o("MBartForCausalLM"),q4o=o(" (mBART model)"),N4o=l(),K_=a("li"),Die=a("strong"),j4o=o("megatron-bert"),D4o=o(" \u2014 "),ej=a("a"),G4o=o("MegatronBertForCausalLM"),O4o=o(" (MegatronBert model)"),V4o=l(),Z_=a("li"),Gie=a("strong"),X4o=o("openai-gpt"),z4o=o(" \u2014 "),oj=a("a"),W4o=o("OpenAIGPTLMHeadModel"),Q4o=o(" (OpenAI GPT model)"),H4o=l(),e2=a("li"),Oie=a("strong"),U4o=o("opt"),J4o=o(" \u2014 "),rj=a("a"),Y4o=o("OPTForCausalLM"),K4o=o(" (OPT model)"),Z4o=l(),o2=a("li"),Vie=a("strong"),eEo=o("pegasus"),oEo=o(" \u2014 "),tj=a("a"),rEo=o("PegasusForCausalLM"),tEo=o(" (Pegasus model)"),aEo=l(),r2=a("li"),Xie=a("strong"),nEo=o("plbart"),sEo=o(" \u2014 "),aj=a("a"),lEo=o("PLBartForCausalLM"),iEo=o(" (PLBart model)"),dEo=l(),t2=a("li"),zie=a("strong"),cEo=o("prophetnet"),fEo=o(" \u2014 "),nj=a("a"),mEo=o("ProphetNetForCausalLM"),gEo=o(" (ProphetNet model)"),hEo=l(),a2=a("li"),Wie=a("strong"),pEo=o("qdqbert"),uEo=o(" \u2014 "),sj=a("a"),_Eo=o("QDQBertLMHeadModel"),bEo=o(" (QDQBert model)"),vEo=l(),n2=a("li"),Qie=a("strong"),FEo=o("reformer"),TEo=o(" \u2014 "),lj=a("a"),MEo=o("ReformerModelWithLMHead"),EEo=o(" (Reformer model)"),CEo=l(),s2=a("li"),Hie=a("strong"),wEo=o("rembert"),AEo=o(" \u2014 "),ij=a("a"),yEo=o("RemBertForCausalLM"),LEo=o(" (RemBERT model)"),xEo=l(),l2=a("li"),Uie=a("strong"),$Eo=o("roberta"),kEo=o(" \u2014 "),dj=a("a"),SEo=o("RobertaForCausalLM"),REo=o(" (RoBERTa model)"),PEo=l(),i2=a("li"),Jie=a("strong"),BEo=o("roformer"),IEo=o(" \u2014 "),cj=a("a"),qEo=o("RoFormerForCausalLM"),NEo=o(" (RoFormer model)"),jEo=l(),d2=a("li"),Yie=a("strong"),DEo=o("speech_to_text_2"),GEo=o(" \u2014 "),fj=a("a"),OEo=o("Speech2Text2ForCausalLM"),VEo=o(" (Speech2Text2 model)"),XEo=l(),c2=a("li"),Kie=a("strong"),zEo=o("transfo-xl"),WEo=o(" \u2014 "),mj=a("a"),QEo=o("TransfoXLLMHeadModel"),HEo=o(" (Transformer-XL model)"),UEo=l(),f2=a("li"),Zie=a("strong"),JEo=o("trocr"),YEo=o(" \u2014 "),gj=a("a"),KEo=o("TrOCRForCausalLM"),ZEo=o(" (TrOCR model)"),eCo=l(),m2=a("li"),ede=a("strong"),oCo=o("xglm"),rCo=o(" \u2014 "),hj=a("a"),tCo=o("XGLMForCausalLM"),aCo=o(" (XGLM model)"),nCo=l(),g2=a("li"),ode=a("strong"),sCo=o("xlm"),lCo=o(" \u2014 "),pj=a("a"),iCo=o("XLMWithLMHeadModel"),dCo=o(" (XLM model)"),cCo=l(),h2=a("li"),rde=a("strong"),fCo=o("xlm-prophetnet"),mCo=o(" \u2014 "),uj=a("a"),gCo=o("XLMProphetNetForCausalLM"),hCo=o(" (XLMProphetNet model)"),pCo=l(),p2=a("li"),tde=a("strong"),uCo=o("xlm-roberta"),_Co=o(" \u2014 "),_j=a("a"),bCo=o("XLMRobertaForCausalLM"),vCo=o(" (XLM-RoBERTa model)"),FCo=l(),u2=a("li"),ade=a("strong"),TCo=o("xlm-roberta-xl"),MCo=o(" \u2014 "),bj=a("a"),ECo=o("XLMRobertaXLForCausalLM"),CCo=o(" (XLM-RoBERTa-XL model)"),wCo=l(),_2=a("li"),nde=a("strong"),ACo=o("xlnet"),yCo=o(" \u2014 "),vj=a("a"),LCo=o("XLNetLMHeadModel"),xCo=o(" (XLNet model)"),$Co=l(),b2=a("p"),kCo=o("The model is set in evaluation mode by default using "),sde=a("code"),SCo=o("model.eval()"),RCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=a("code"),PCo=o("model.train()"),BCo=l(),F(v2.$$.fragment),XIe=l(),Ri=a("h2"),F2=a("a"),ide=a("span"),F(HA.$$.fragment),ICo=l(),dde=a("span"),qCo=o("AutoModelForMaskedLM"),zIe=l(),ko=a("div"),F(UA.$$.fragment),NCo=l(),Pi=a("p"),jCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fj=a("a"),DCo=o("from_pretrained()"),GCo=o(" class method or the "),Tj=a("a"),OCo=o("from_config()"),VCo=o(` class
method.`),XCo=l(),JA=a("p"),zCo=o("This class cannot be instantiated directly using "),cde=a("code"),WCo=o("__init__()"),QCo=o(" (throws an error)."),HCo=l(),st=a("div"),F(YA.$$.fragment),UCo=l(),fde=a("p"),JCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YCo=l(),Bi=a("p"),KCo=o(`Note:
Loading a model from its configuration file does `),mde=a("strong"),ZCo=o("not"),e5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),o5o=o("from_pretrained()"),r5o=o(" to load the model weights."),t5o=l(),F(T2.$$.fragment),a5o=l(),Ze=a("div"),F(KA.$$.fragment),n5o=l(),gde=a("p"),s5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),l5o=l(),ka=a("p"),i5o=o("The model class to instantiate is selected based on the "),hde=a("code"),d5o=o("model_type"),c5o=o(` property of the config object (either
passed as an argument or loaded from `),pde=a("code"),f5o=o("pretrained_model_name_or_path"),m5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=a("code"),g5o=o("pretrained_model_name_or_path"),h5o=o(":"),p5o=l(),W=a("ul"),M2=a("li"),_de=a("strong"),u5o=o("albert"),_5o=o(" \u2014 "),Ej=a("a"),b5o=o("AlbertForMaskedLM"),v5o=o(" (ALBERT model)"),F5o=l(),E2=a("li"),bde=a("strong"),T5o=o("bart"),M5o=o(" \u2014 "),Cj=a("a"),E5o=o("BartForConditionalGeneration"),C5o=o(" (BART model)"),w5o=l(),C2=a("li"),vde=a("strong"),A5o=o("bert"),y5o=o(" \u2014 "),wj=a("a"),L5o=o("BertForMaskedLM"),x5o=o(" (BERT model)"),$5o=l(),w2=a("li"),Fde=a("strong"),k5o=o("big_bird"),S5o=o(" \u2014 "),Aj=a("a"),R5o=o("BigBirdForMaskedLM"),P5o=o(" (BigBird model)"),B5o=l(),A2=a("li"),Tde=a("strong"),I5o=o("camembert"),q5o=o(" \u2014 "),yj=a("a"),N5o=o("CamembertForMaskedLM"),j5o=o(" (CamemBERT model)"),D5o=l(),y2=a("li"),Mde=a("strong"),G5o=o("convbert"),O5o=o(" \u2014 "),Lj=a("a"),V5o=o("ConvBertForMaskedLM"),X5o=o(" (ConvBERT model)"),z5o=l(),L2=a("li"),Ede=a("strong"),W5o=o("data2vec-text"),Q5o=o(" \u2014 "),xj=a("a"),H5o=o("Data2VecTextForMaskedLM"),U5o=o(" (Data2VecText model)"),J5o=l(),x2=a("li"),Cde=a("strong"),Y5o=o("deberta"),K5o=o(" \u2014 "),$j=a("a"),Z5o=o("DebertaForMaskedLM"),e3o=o(" (DeBERTa model)"),o3o=l(),$2=a("li"),wde=a("strong"),r3o=o("deberta-v2"),t3o=o(" \u2014 "),kj=a("a"),a3o=o("DebertaV2ForMaskedLM"),n3o=o(" (DeBERTa-v2 model)"),s3o=l(),k2=a("li"),Ade=a("strong"),l3o=o("distilbert"),i3o=o(" \u2014 "),Sj=a("a"),d3o=o("DistilBertForMaskedLM"),c3o=o(" (DistilBERT model)"),f3o=l(),S2=a("li"),yde=a("strong"),m3o=o("electra"),g3o=o(" \u2014 "),Rj=a("a"),h3o=o("ElectraForMaskedLM"),p3o=o(" (ELECTRA model)"),u3o=l(),R2=a("li"),Lde=a("strong"),_3o=o("flaubert"),b3o=o(" \u2014 "),Pj=a("a"),v3o=o("FlaubertWithLMHeadModel"),F3o=o(" (FlauBERT model)"),T3o=l(),P2=a("li"),xde=a("strong"),M3o=o("fnet"),E3o=o(" \u2014 "),Bj=a("a"),C3o=o("FNetForMaskedLM"),w3o=o(" (FNet model)"),A3o=l(),B2=a("li"),$de=a("strong"),y3o=o("funnel"),L3o=o(" \u2014 "),Ij=a("a"),x3o=o("FunnelForMaskedLM"),$3o=o(" (Funnel Transformer model)"),k3o=l(),I2=a("li"),kde=a("strong"),S3o=o("ibert"),R3o=o(" \u2014 "),qj=a("a"),P3o=o("IBertForMaskedLM"),B3o=o(" (I-BERT model)"),I3o=l(),q2=a("li"),Sde=a("strong"),q3o=o("layoutlm"),N3o=o(" \u2014 "),Nj=a("a"),j3o=o("LayoutLMForMaskedLM"),D3o=o(" (LayoutLM model)"),G3o=l(),N2=a("li"),Rde=a("strong"),O3o=o("longformer"),V3o=o(" \u2014 "),jj=a("a"),X3o=o("LongformerForMaskedLM"),z3o=o(" (Longformer model)"),W3o=l(),j2=a("li"),Pde=a("strong"),Q3o=o("mbart"),H3o=o(" \u2014 "),Dj=a("a"),U3o=o("MBartForConditionalGeneration"),J3o=o(" (mBART model)"),Y3o=l(),D2=a("li"),Bde=a("strong"),K3o=o("megatron-bert"),Z3o=o(" \u2014 "),Gj=a("a"),ewo=o("MegatronBertForMaskedLM"),owo=o(" (MegatronBert model)"),rwo=l(),G2=a("li"),Ide=a("strong"),two=o("mobilebert"),awo=o(" \u2014 "),Oj=a("a"),nwo=o("MobileBertForMaskedLM"),swo=o(" (MobileBERT model)"),lwo=l(),O2=a("li"),qde=a("strong"),iwo=o("mpnet"),dwo=o(" \u2014 "),Vj=a("a"),cwo=o("MPNetForMaskedLM"),fwo=o(" (MPNet model)"),mwo=l(),V2=a("li"),Nde=a("strong"),gwo=o("nystromformer"),hwo=o(" \u2014 "),Xj=a("a"),pwo=o("NystromformerForMaskedLM"),uwo=o(" (Nystromformer model)"),_wo=l(),X2=a("li"),jde=a("strong"),bwo=o("perceiver"),vwo=o(" \u2014 "),zj=a("a"),Fwo=o("PerceiverForMaskedLM"),Two=o(" (Perceiver model)"),Mwo=l(),z2=a("li"),Dde=a("strong"),Ewo=o("qdqbert"),Cwo=o(" \u2014 "),Wj=a("a"),wwo=o("QDQBertForMaskedLM"),Awo=o(" (QDQBert model)"),ywo=l(),W2=a("li"),Gde=a("strong"),Lwo=o("reformer"),xwo=o(" \u2014 "),Qj=a("a"),$wo=o("ReformerForMaskedLM"),kwo=o(" (Reformer model)"),Swo=l(),Q2=a("li"),Ode=a("strong"),Rwo=o("rembert"),Pwo=o(" \u2014 "),Hj=a("a"),Bwo=o("RemBertForMaskedLM"),Iwo=o(" (RemBERT model)"),qwo=l(),H2=a("li"),Vde=a("strong"),Nwo=o("roberta"),jwo=o(" \u2014 "),Uj=a("a"),Dwo=o("RobertaForMaskedLM"),Gwo=o(" (RoBERTa model)"),Owo=l(),U2=a("li"),Xde=a("strong"),Vwo=o("roformer"),Xwo=o(" \u2014 "),Jj=a("a"),zwo=o("RoFormerForMaskedLM"),Wwo=o(" (RoFormer model)"),Qwo=l(),J2=a("li"),zde=a("strong"),Hwo=o("squeezebert"),Uwo=o(" \u2014 "),Yj=a("a"),Jwo=o("SqueezeBertForMaskedLM"),Ywo=o(" (SqueezeBERT model)"),Kwo=l(),Y2=a("li"),Wde=a("strong"),Zwo=o("tapas"),eAo=o(" \u2014 "),Kj=a("a"),oAo=o("TapasForMaskedLM"),rAo=o(" (TAPAS model)"),tAo=l(),K2=a("li"),Qde=a("strong"),aAo=o("wav2vec2"),nAo=o(" \u2014 "),Hde=a("code"),sAo=o("Wav2Vec2ForMaskedLM"),lAo=o(" (Wav2Vec2 model)"),iAo=l(),Z2=a("li"),Ude=a("strong"),dAo=o("xlm"),cAo=o(" \u2014 "),Zj=a("a"),fAo=o("XLMWithLMHeadModel"),mAo=o(" (XLM model)"),gAo=l(),e1=a("li"),Jde=a("strong"),hAo=o("xlm-roberta"),pAo=o(" \u2014 "),eD=a("a"),uAo=o("XLMRobertaForMaskedLM"),_Ao=o(" (XLM-RoBERTa model)"),bAo=l(),o1=a("li"),Yde=a("strong"),vAo=o("xlm-roberta-xl"),FAo=o(" \u2014 "),oD=a("a"),TAo=o("XLMRobertaXLForMaskedLM"),MAo=o(" (XLM-RoBERTa-XL model)"),EAo=l(),r1=a("li"),Kde=a("strong"),CAo=o("yoso"),wAo=o(" \u2014 "),rD=a("a"),AAo=o("YosoForMaskedLM"),yAo=o(" (YOSO model)"),LAo=l(),t1=a("p"),xAo=o("The model is set in evaluation mode by default using "),Zde=a("code"),$Ao=o("model.eval()"),kAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),SAo=o("model.train()"),RAo=l(),F(a1.$$.fragment),WIe=l(),Ii=a("h2"),n1=a("a"),oce=a("span"),F(ZA.$$.fragment),PAo=l(),rce=a("span"),BAo=o("AutoModelForSeq2SeqLM"),QIe=l(),So=a("div"),F(ey.$$.fragment),IAo=l(),qi=a("p"),qAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tD=a("a"),NAo=o("from_pretrained()"),jAo=o(" class method or the "),aD=a("a"),DAo=o("from_config()"),GAo=o(` class
method.`),OAo=l(),oy=a("p"),VAo=o("This class cannot be instantiated directly using "),tce=a("code"),XAo=o("__init__()"),zAo=o(" (throws an error)."),WAo=l(),lt=a("div"),F(ry.$$.fragment),QAo=l(),ace=a("p"),HAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UAo=l(),Ni=a("p"),JAo=o(`Note:
Loading a model from its configuration file does `),nce=a("strong"),YAo=o("not"),KAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=a("a"),ZAo=o("from_pretrained()"),eyo=o(" to load the model weights."),oyo=l(),F(s1.$$.fragment),ryo=l(),eo=a("div"),F(ty.$$.fragment),tyo=l(),sce=a("p"),ayo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nyo=l(),Sa=a("p"),syo=o("The model class to instantiate is selected based on the "),lce=a("code"),lyo=o("model_type"),iyo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),dyo=o("pretrained_model_name_or_path"),cyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),fyo=o("pretrained_model_name_or_path"),myo=o(":"),gyo=l(),ue=a("ul"),l1=a("li"),cce=a("strong"),hyo=o("bart"),pyo=o(" \u2014 "),sD=a("a"),uyo=o("BartForConditionalGeneration"),_yo=o(" (BART model)"),byo=l(),i1=a("li"),fce=a("strong"),vyo=o("bigbird_pegasus"),Fyo=o(" \u2014 "),lD=a("a"),Tyo=o("BigBirdPegasusForConditionalGeneration"),Myo=o(" (BigBirdPegasus model)"),Eyo=l(),d1=a("li"),mce=a("strong"),Cyo=o("blenderbot"),wyo=o(" \u2014 "),iD=a("a"),Ayo=o("BlenderbotForConditionalGeneration"),yyo=o(" (Blenderbot model)"),Lyo=l(),c1=a("li"),gce=a("strong"),xyo=o("blenderbot-small"),$yo=o(" \u2014 "),dD=a("a"),kyo=o("BlenderbotSmallForConditionalGeneration"),Syo=o(" (BlenderbotSmall model)"),Ryo=l(),f1=a("li"),hce=a("strong"),Pyo=o("encoder-decoder"),Byo=o(" \u2014 "),cD=a("a"),Iyo=o("EncoderDecoderModel"),qyo=o(" (Encoder decoder model)"),Nyo=l(),m1=a("li"),pce=a("strong"),jyo=o("fsmt"),Dyo=o(" \u2014 "),fD=a("a"),Gyo=o("FSMTForConditionalGeneration"),Oyo=o(" (FairSeq Machine-Translation model)"),Vyo=l(),g1=a("li"),uce=a("strong"),Xyo=o("led"),zyo=o(" \u2014 "),mD=a("a"),Wyo=o("LEDForConditionalGeneration"),Qyo=o(" (LED model)"),Hyo=l(),h1=a("li"),_ce=a("strong"),Uyo=o("m2m_100"),Jyo=o(" \u2014 "),gD=a("a"),Yyo=o("M2M100ForConditionalGeneration"),Kyo=o(" (M2M100 model)"),Zyo=l(),p1=a("li"),bce=a("strong"),eLo=o("marian"),oLo=o(" \u2014 "),hD=a("a"),rLo=o("MarianMTModel"),tLo=o(" (Marian model)"),aLo=l(),u1=a("li"),vce=a("strong"),nLo=o("mbart"),sLo=o(" \u2014 "),pD=a("a"),lLo=o("MBartForConditionalGeneration"),iLo=o(" (mBART model)"),dLo=l(),_1=a("li"),Fce=a("strong"),cLo=o("mt5"),fLo=o(" \u2014 "),uD=a("a"),mLo=o("MT5ForConditionalGeneration"),gLo=o(" (mT5 model)"),hLo=l(),b1=a("li"),Tce=a("strong"),pLo=o("pegasus"),uLo=o(" \u2014 "),_D=a("a"),_Lo=o("PegasusForConditionalGeneration"),bLo=o(" (Pegasus model)"),vLo=l(),v1=a("li"),Mce=a("strong"),FLo=o("plbart"),TLo=o(" \u2014 "),bD=a("a"),MLo=o("PLBartForConditionalGeneration"),ELo=o(" (PLBart model)"),CLo=l(),F1=a("li"),Ece=a("strong"),wLo=o("prophetnet"),ALo=o(" \u2014 "),vD=a("a"),yLo=o("ProphetNetForConditionalGeneration"),LLo=o(" (ProphetNet model)"),xLo=l(),T1=a("li"),Cce=a("strong"),$Lo=o("t5"),kLo=o(" \u2014 "),FD=a("a"),SLo=o("T5ForConditionalGeneration"),RLo=o(" (T5 model)"),PLo=l(),M1=a("li"),wce=a("strong"),BLo=o("xlm-prophetnet"),ILo=o(" \u2014 "),TD=a("a"),qLo=o("XLMProphetNetForConditionalGeneration"),NLo=o(" (XLMProphetNet model)"),jLo=l(),E1=a("p"),DLo=o("The model is set in evaluation mode by default using "),Ace=a("code"),GLo=o("model.eval()"),OLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=a("code"),VLo=o("model.train()"),XLo=l(),F(C1.$$.fragment),HIe=l(),ji=a("h2"),w1=a("a"),Lce=a("span"),F(ay.$$.fragment),zLo=l(),xce=a("span"),WLo=o("AutoModelForSequenceClassification"),UIe=l(),Ro=a("div"),F(ny.$$.fragment),QLo=l(),Di=a("p"),HLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MD=a("a"),ULo=o("from_pretrained()"),JLo=o(" class method or the "),ED=a("a"),YLo=o("from_config()"),KLo=o(` class
method.`),ZLo=l(),sy=a("p"),e8o=o("This class cannot be instantiated directly using "),$ce=a("code"),o8o=o("__init__()"),r8o=o(" (throws an error)."),t8o=l(),it=a("div"),F(ly.$$.fragment),a8o=l(),kce=a("p"),n8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),s8o=l(),Gi=a("p"),l8o=o(`Note:
Loading a model from its configuration file does `),Sce=a("strong"),i8o=o("not"),d8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=a("a"),c8o=o("from_pretrained()"),f8o=o(" to load the model weights."),m8o=l(),F(A1.$$.fragment),g8o=l(),oo=a("div"),F(iy.$$.fragment),h8o=l(),Rce=a("p"),p8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u8o=l(),Ra=a("p"),_8o=o("The model class to instantiate is selected based on the "),Pce=a("code"),b8o=o("model_type"),v8o=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),F8o=o("pretrained_model_name_or_path"),T8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),M8o=o("pretrained_model_name_or_path"),E8o=o(":"),C8o=l(),q=a("ul"),y1=a("li"),qce=a("strong"),w8o=o("albert"),A8o=o(" \u2014 "),wD=a("a"),y8o=o("AlbertForSequenceClassification"),L8o=o(" (ALBERT model)"),x8o=l(),L1=a("li"),Nce=a("strong"),$8o=o("bart"),k8o=o(" \u2014 "),AD=a("a"),S8o=o("BartForSequenceClassification"),R8o=o(" (BART model)"),P8o=l(),x1=a("li"),jce=a("strong"),B8o=o("bert"),I8o=o(" \u2014 "),yD=a("a"),q8o=o("BertForSequenceClassification"),N8o=o(" (BERT model)"),j8o=l(),$1=a("li"),Dce=a("strong"),D8o=o("big_bird"),G8o=o(" \u2014 "),LD=a("a"),O8o=o("BigBirdForSequenceClassification"),V8o=o(" (BigBird model)"),X8o=l(),k1=a("li"),Gce=a("strong"),z8o=o("bigbird_pegasus"),W8o=o(" \u2014 "),xD=a("a"),Q8o=o("BigBirdPegasusForSequenceClassification"),H8o=o(" (BigBirdPegasus model)"),U8o=l(),S1=a("li"),Oce=a("strong"),J8o=o("camembert"),Y8o=o(" \u2014 "),$D=a("a"),K8o=o("CamembertForSequenceClassification"),Z8o=o(" (CamemBERT model)"),exo=l(),R1=a("li"),Vce=a("strong"),oxo=o("canine"),rxo=o(" \u2014 "),kD=a("a"),txo=o("CanineForSequenceClassification"),axo=o(" (Canine model)"),nxo=l(),P1=a("li"),Xce=a("strong"),sxo=o("convbert"),lxo=o(" \u2014 "),SD=a("a"),ixo=o("ConvBertForSequenceClassification"),dxo=o(" (ConvBERT model)"),cxo=l(),B1=a("li"),zce=a("strong"),fxo=o("ctrl"),mxo=o(" \u2014 "),RD=a("a"),gxo=o("CTRLForSequenceClassification"),hxo=o(" (CTRL model)"),pxo=l(),I1=a("li"),Wce=a("strong"),uxo=o("data2vec-text"),_xo=o(" \u2014 "),PD=a("a"),bxo=o("Data2VecTextForSequenceClassification"),vxo=o(" (Data2VecText model)"),Fxo=l(),q1=a("li"),Qce=a("strong"),Txo=o("deberta"),Mxo=o(" \u2014 "),BD=a("a"),Exo=o("DebertaForSequenceClassification"),Cxo=o(" (DeBERTa model)"),wxo=l(),N1=a("li"),Hce=a("strong"),Axo=o("deberta-v2"),yxo=o(" \u2014 "),ID=a("a"),Lxo=o("DebertaV2ForSequenceClassification"),xxo=o(" (DeBERTa-v2 model)"),$xo=l(),j1=a("li"),Uce=a("strong"),kxo=o("distilbert"),Sxo=o(" \u2014 "),qD=a("a"),Rxo=o("DistilBertForSequenceClassification"),Pxo=o(" (DistilBERT model)"),Bxo=l(),D1=a("li"),Jce=a("strong"),Ixo=o("electra"),qxo=o(" \u2014 "),ND=a("a"),Nxo=o("ElectraForSequenceClassification"),jxo=o(" (ELECTRA model)"),Dxo=l(),G1=a("li"),Yce=a("strong"),Gxo=o("flaubert"),Oxo=o(" \u2014 "),jD=a("a"),Vxo=o("FlaubertForSequenceClassification"),Xxo=o(" (FlauBERT model)"),zxo=l(),O1=a("li"),Kce=a("strong"),Wxo=o("fnet"),Qxo=o(" \u2014 "),DD=a("a"),Hxo=o("FNetForSequenceClassification"),Uxo=o(" (FNet model)"),Jxo=l(),V1=a("li"),Zce=a("strong"),Yxo=o("funnel"),Kxo=o(" \u2014 "),GD=a("a"),Zxo=o("FunnelForSequenceClassification"),e9o=o(" (Funnel Transformer model)"),o9o=l(),X1=a("li"),efe=a("strong"),r9o=o("gpt2"),t9o=o(" \u2014 "),OD=a("a"),a9o=o("GPT2ForSequenceClassification"),n9o=o(" (OpenAI GPT-2 model)"),s9o=l(),z1=a("li"),ofe=a("strong"),l9o=o("gpt_neo"),i9o=o(" \u2014 "),VD=a("a"),d9o=o("GPTNeoForSequenceClassification"),c9o=o(" (GPT Neo model)"),f9o=l(),W1=a("li"),rfe=a("strong"),m9o=o("gptj"),g9o=o(" \u2014 "),XD=a("a"),h9o=o("GPTJForSequenceClassification"),p9o=o(" (GPT-J model)"),u9o=l(),Q1=a("li"),tfe=a("strong"),_9o=o("ibert"),b9o=o(" \u2014 "),zD=a("a"),v9o=o("IBertForSequenceClassification"),F9o=o(" (I-BERT model)"),T9o=l(),H1=a("li"),afe=a("strong"),M9o=o("layoutlm"),E9o=o(" \u2014 "),WD=a("a"),C9o=o("LayoutLMForSequenceClassification"),w9o=o(" (LayoutLM model)"),A9o=l(),U1=a("li"),nfe=a("strong"),y9o=o("layoutlmv2"),L9o=o(" \u2014 "),QD=a("a"),x9o=o("LayoutLMv2ForSequenceClassification"),$9o=o(" (LayoutLMv2 model)"),k9o=l(),J1=a("li"),sfe=a("strong"),S9o=o("led"),R9o=o(" \u2014 "),HD=a("a"),P9o=o("LEDForSequenceClassification"),B9o=o(" (LED model)"),I9o=l(),Y1=a("li"),lfe=a("strong"),q9o=o("longformer"),N9o=o(" \u2014 "),UD=a("a"),j9o=o("LongformerForSequenceClassification"),D9o=o(" (Longformer model)"),G9o=l(),K1=a("li"),ife=a("strong"),O9o=o("mbart"),V9o=o(" \u2014 "),JD=a("a"),X9o=o("MBartForSequenceClassification"),z9o=o(" (mBART model)"),W9o=l(),Z1=a("li"),dfe=a("strong"),Q9o=o("megatron-bert"),H9o=o(" \u2014 "),YD=a("a"),U9o=o("MegatronBertForSequenceClassification"),J9o=o(" (MegatronBert model)"),Y9o=l(),eb=a("li"),cfe=a("strong"),K9o=o("mobilebert"),Z9o=o(" \u2014 "),KD=a("a"),e$o=o("MobileBertForSequenceClassification"),o$o=o(" (MobileBERT model)"),r$o=l(),ob=a("li"),ffe=a("strong"),t$o=o("mpnet"),a$o=o(" \u2014 "),ZD=a("a"),n$o=o("MPNetForSequenceClassification"),s$o=o(" (MPNet model)"),l$o=l(),rb=a("li"),mfe=a("strong"),i$o=o("nystromformer"),d$o=o(" \u2014 "),eG=a("a"),c$o=o("NystromformerForSequenceClassification"),f$o=o(" (Nystromformer model)"),m$o=l(),tb=a("li"),gfe=a("strong"),g$o=o("openai-gpt"),h$o=o(" \u2014 "),oG=a("a"),p$o=o("OpenAIGPTForSequenceClassification"),u$o=o(" (OpenAI GPT model)"),_$o=l(),ab=a("li"),hfe=a("strong"),b$o=o("perceiver"),v$o=o(" \u2014 "),rG=a("a"),F$o=o("PerceiverForSequenceClassification"),T$o=o(" (Perceiver model)"),M$o=l(),nb=a("li"),pfe=a("strong"),E$o=o("plbart"),C$o=o(" \u2014 "),tG=a("a"),w$o=o("PLBartForSequenceClassification"),A$o=o(" (PLBart model)"),y$o=l(),sb=a("li"),ufe=a("strong"),L$o=o("qdqbert"),x$o=o(" \u2014 "),aG=a("a"),$$o=o("QDQBertForSequenceClassification"),k$o=o(" (QDQBert model)"),S$o=l(),lb=a("li"),_fe=a("strong"),R$o=o("reformer"),P$o=o(" \u2014 "),nG=a("a"),B$o=o("ReformerForSequenceClassification"),I$o=o(" (Reformer model)"),q$o=l(),ib=a("li"),bfe=a("strong"),N$o=o("rembert"),j$o=o(" \u2014 "),sG=a("a"),D$o=o("RemBertForSequenceClassification"),G$o=o(" (RemBERT model)"),O$o=l(),db=a("li"),vfe=a("strong"),V$o=o("roberta"),X$o=o(" \u2014 "),lG=a("a"),z$o=o("RobertaForSequenceClassification"),W$o=o(" (RoBERTa model)"),Q$o=l(),cb=a("li"),Ffe=a("strong"),H$o=o("roformer"),U$o=o(" \u2014 "),iG=a("a"),J$o=o("RoFormerForSequenceClassification"),Y$o=o(" (RoFormer model)"),K$o=l(),fb=a("li"),Tfe=a("strong"),Z$o=o("squeezebert"),eko=o(" \u2014 "),dG=a("a"),oko=o("SqueezeBertForSequenceClassification"),rko=o(" (SqueezeBERT model)"),tko=l(),mb=a("li"),Mfe=a("strong"),ako=o("tapas"),nko=o(" \u2014 "),cG=a("a"),sko=o("TapasForSequenceClassification"),lko=o(" (TAPAS model)"),iko=l(),gb=a("li"),Efe=a("strong"),dko=o("transfo-xl"),cko=o(" \u2014 "),fG=a("a"),fko=o("TransfoXLForSequenceClassification"),mko=o(" (Transformer-XL model)"),gko=l(),hb=a("li"),Cfe=a("strong"),hko=o("xlm"),pko=o(" \u2014 "),mG=a("a"),uko=o("XLMForSequenceClassification"),_ko=o(" (XLM model)"),bko=l(),pb=a("li"),wfe=a("strong"),vko=o("xlm-roberta"),Fko=o(" \u2014 "),gG=a("a"),Tko=o("XLMRobertaForSequenceClassification"),Mko=o(" (XLM-RoBERTa model)"),Eko=l(),ub=a("li"),Afe=a("strong"),Cko=o("xlm-roberta-xl"),wko=o(" \u2014 "),hG=a("a"),Ako=o("XLMRobertaXLForSequenceClassification"),yko=o(" (XLM-RoBERTa-XL model)"),Lko=l(),_b=a("li"),yfe=a("strong"),xko=o("xlnet"),$ko=o(" \u2014 "),pG=a("a"),kko=o("XLNetForSequenceClassification"),Sko=o(" (XLNet model)"),Rko=l(),bb=a("li"),Lfe=a("strong"),Pko=o("yoso"),Bko=o(" \u2014 "),uG=a("a"),Iko=o("YosoForSequenceClassification"),qko=o(" (YOSO model)"),Nko=l(),vb=a("p"),jko=o("The model is set in evaluation mode by default using "),xfe=a("code"),Dko=o("model.eval()"),Gko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=a("code"),Oko=o("model.train()"),Vko=l(),F(Fb.$$.fragment),JIe=l(),Oi=a("h2"),Tb=a("a"),kfe=a("span"),F(dy.$$.fragment),Xko=l(),Sfe=a("span"),zko=o("AutoModelForMultipleChoice"),YIe=l(),Po=a("div"),F(cy.$$.fragment),Wko=l(),Vi=a("p"),Qko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_G=a("a"),Hko=o("from_pretrained()"),Uko=o(" class method or the "),bG=a("a"),Jko=o("from_config()"),Yko=o(` class
method.`),Kko=l(),fy=a("p"),Zko=o("This class cannot be instantiated directly using "),Rfe=a("code"),eSo=o("__init__()"),oSo=o(" (throws an error)."),rSo=l(),dt=a("div"),F(my.$$.fragment),tSo=l(),Pfe=a("p"),aSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nSo=l(),Xi=a("p"),sSo=o(`Note:
Loading a model from its configuration file does `),Bfe=a("strong"),lSo=o("not"),iSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=a("a"),dSo=o("from_pretrained()"),cSo=o(" to load the model weights."),fSo=l(),F(Mb.$$.fragment),mSo=l(),ro=a("div"),F(gy.$$.fragment),gSo=l(),Ife=a("p"),hSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pSo=l(),Pa=a("p"),uSo=o("The model class to instantiate is selected based on the "),qfe=a("code"),_So=o("model_type"),bSo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),vSo=o("pretrained_model_name_or_path"),FSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=a("code"),TSo=o("pretrained_model_name_or_path"),MSo=o(":"),ESo=l(),Y=a("ul"),Eb=a("li"),Dfe=a("strong"),CSo=o("albert"),wSo=o(" \u2014 "),FG=a("a"),ASo=o("AlbertForMultipleChoice"),ySo=o(" (ALBERT model)"),LSo=l(),Cb=a("li"),Gfe=a("strong"),xSo=o("bert"),$So=o(" \u2014 "),TG=a("a"),kSo=o("BertForMultipleChoice"),SSo=o(" (BERT model)"),RSo=l(),wb=a("li"),Ofe=a("strong"),PSo=o("big_bird"),BSo=o(" \u2014 "),MG=a("a"),ISo=o("BigBirdForMultipleChoice"),qSo=o(" (BigBird model)"),NSo=l(),Ab=a("li"),Vfe=a("strong"),jSo=o("camembert"),DSo=o(" \u2014 "),EG=a("a"),GSo=o("CamembertForMultipleChoice"),OSo=o(" (CamemBERT model)"),VSo=l(),yb=a("li"),Xfe=a("strong"),XSo=o("canine"),zSo=o(" \u2014 "),CG=a("a"),WSo=o("CanineForMultipleChoice"),QSo=o(" (Canine model)"),HSo=l(),Lb=a("li"),zfe=a("strong"),USo=o("convbert"),JSo=o(" \u2014 "),wG=a("a"),YSo=o("ConvBertForMultipleChoice"),KSo=o(" (ConvBERT model)"),ZSo=l(),xb=a("li"),Wfe=a("strong"),eRo=o("data2vec-text"),oRo=o(" \u2014 "),AG=a("a"),rRo=o("Data2VecTextForMultipleChoice"),tRo=o(" (Data2VecText model)"),aRo=l(),$b=a("li"),Qfe=a("strong"),nRo=o("deberta-v2"),sRo=o(" \u2014 "),yG=a("a"),lRo=o("DebertaV2ForMultipleChoice"),iRo=o(" (DeBERTa-v2 model)"),dRo=l(),kb=a("li"),Hfe=a("strong"),cRo=o("distilbert"),fRo=o(" \u2014 "),LG=a("a"),mRo=o("DistilBertForMultipleChoice"),gRo=o(" (DistilBERT model)"),hRo=l(),Sb=a("li"),Ufe=a("strong"),pRo=o("electra"),uRo=o(" \u2014 "),xG=a("a"),_Ro=o("ElectraForMultipleChoice"),bRo=o(" (ELECTRA model)"),vRo=l(),Rb=a("li"),Jfe=a("strong"),FRo=o("flaubert"),TRo=o(" \u2014 "),$G=a("a"),MRo=o("FlaubertForMultipleChoice"),ERo=o(" (FlauBERT model)"),CRo=l(),Pb=a("li"),Yfe=a("strong"),wRo=o("fnet"),ARo=o(" \u2014 "),kG=a("a"),yRo=o("FNetForMultipleChoice"),LRo=o(" (FNet model)"),xRo=l(),Bb=a("li"),Kfe=a("strong"),$Ro=o("funnel"),kRo=o(" \u2014 "),SG=a("a"),SRo=o("FunnelForMultipleChoice"),RRo=o(" (Funnel Transformer model)"),PRo=l(),Ib=a("li"),Zfe=a("strong"),BRo=o("ibert"),IRo=o(" \u2014 "),RG=a("a"),qRo=o("IBertForMultipleChoice"),NRo=o(" (I-BERT model)"),jRo=l(),qb=a("li"),eme=a("strong"),DRo=o("longformer"),GRo=o(" \u2014 "),PG=a("a"),ORo=o("LongformerForMultipleChoice"),VRo=o(" (Longformer model)"),XRo=l(),Nb=a("li"),ome=a("strong"),zRo=o("megatron-bert"),WRo=o(" \u2014 "),BG=a("a"),QRo=o("MegatronBertForMultipleChoice"),HRo=o(" (MegatronBert model)"),URo=l(),jb=a("li"),rme=a("strong"),JRo=o("mobilebert"),YRo=o(" \u2014 "),IG=a("a"),KRo=o("MobileBertForMultipleChoice"),ZRo=o(" (MobileBERT model)"),ePo=l(),Db=a("li"),tme=a("strong"),oPo=o("mpnet"),rPo=o(" \u2014 "),qG=a("a"),tPo=o("MPNetForMultipleChoice"),aPo=o(" (MPNet model)"),nPo=l(),Gb=a("li"),ame=a("strong"),sPo=o("nystromformer"),lPo=o(" \u2014 "),NG=a("a"),iPo=o("NystromformerForMultipleChoice"),dPo=o(" (Nystromformer model)"),cPo=l(),Ob=a("li"),nme=a("strong"),fPo=o("qdqbert"),mPo=o(" \u2014 "),jG=a("a"),gPo=o("QDQBertForMultipleChoice"),hPo=o(" (QDQBert model)"),pPo=l(),Vb=a("li"),sme=a("strong"),uPo=o("rembert"),_Po=o(" \u2014 "),DG=a("a"),bPo=o("RemBertForMultipleChoice"),vPo=o(" (RemBERT model)"),FPo=l(),Xb=a("li"),lme=a("strong"),TPo=o("roberta"),MPo=o(" \u2014 "),GG=a("a"),EPo=o("RobertaForMultipleChoice"),CPo=o(" (RoBERTa model)"),wPo=l(),zb=a("li"),ime=a("strong"),APo=o("roformer"),yPo=o(" \u2014 "),OG=a("a"),LPo=o("RoFormerForMultipleChoice"),xPo=o(" (RoFormer model)"),$Po=l(),Wb=a("li"),dme=a("strong"),kPo=o("squeezebert"),SPo=o(" \u2014 "),VG=a("a"),RPo=o("SqueezeBertForMultipleChoice"),PPo=o(" (SqueezeBERT model)"),BPo=l(),Qb=a("li"),cme=a("strong"),IPo=o("xlm"),qPo=o(" \u2014 "),XG=a("a"),NPo=o("XLMForMultipleChoice"),jPo=o(" (XLM model)"),DPo=l(),Hb=a("li"),fme=a("strong"),GPo=o("xlm-roberta"),OPo=o(" \u2014 "),zG=a("a"),VPo=o("XLMRobertaForMultipleChoice"),XPo=o(" (XLM-RoBERTa model)"),zPo=l(),Ub=a("li"),mme=a("strong"),WPo=o("xlm-roberta-xl"),QPo=o(" \u2014 "),WG=a("a"),HPo=o("XLMRobertaXLForMultipleChoice"),UPo=o(" (XLM-RoBERTa-XL model)"),JPo=l(),Jb=a("li"),gme=a("strong"),YPo=o("xlnet"),KPo=o(" \u2014 "),QG=a("a"),ZPo=o("XLNetForMultipleChoice"),eBo=o(" (XLNet model)"),oBo=l(),Yb=a("li"),hme=a("strong"),rBo=o("yoso"),tBo=o(" \u2014 "),HG=a("a"),aBo=o("YosoForMultipleChoice"),nBo=o(" (YOSO model)"),sBo=l(),Kb=a("p"),lBo=o("The model is set in evaluation mode by default using "),pme=a("code"),iBo=o("model.eval()"),dBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=a("code"),cBo=o("model.train()"),fBo=l(),F(Zb.$$.fragment),KIe=l(),zi=a("h2"),ev=a("a"),_me=a("span"),F(hy.$$.fragment),mBo=l(),bme=a("span"),gBo=o("AutoModelForNextSentencePrediction"),ZIe=l(),Bo=a("div"),F(py.$$.fragment),hBo=l(),Wi=a("p"),pBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UG=a("a"),uBo=o("from_pretrained()"),_Bo=o(" class method or the "),JG=a("a"),bBo=o("from_config()"),vBo=o(` class
method.`),FBo=l(),uy=a("p"),TBo=o("This class cannot be instantiated directly using "),vme=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),CBo=l(),ct=a("div"),F(_y.$$.fragment),wBo=l(),Fme=a("p"),ABo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yBo=l(),Qi=a("p"),LBo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),xBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),kBo=o("from_pretrained()"),SBo=o(" to load the model weights."),RBo=l(),F(ov.$$.fragment),PBo=l(),to=a("div"),F(by.$$.fragment),BBo=l(),Mme=a("p"),IBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qBo=l(),Ba=a("p"),NBo=o("The model class to instantiate is selected based on the "),Eme=a("code"),jBo=o("model_type"),DBo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),GBo=o("pretrained_model_name_or_path"),OBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(":"),zBo=l(),Yr=a("ul"),rv=a("li"),Ame=a("strong"),WBo=o("bert"),QBo=o(" \u2014 "),KG=a("a"),HBo=o("BertForNextSentencePrediction"),UBo=o(" (BERT model)"),JBo=l(),tv=a("li"),yme=a("strong"),YBo=o("fnet"),KBo=o(" \u2014 "),ZG=a("a"),ZBo=o("FNetForNextSentencePrediction"),eIo=o(" (FNet model)"),oIo=l(),av=a("li"),Lme=a("strong"),rIo=o("megatron-bert"),tIo=o(" \u2014 "),eO=a("a"),aIo=o("MegatronBertForNextSentencePrediction"),nIo=o(" (MegatronBert model)"),sIo=l(),nv=a("li"),xme=a("strong"),lIo=o("mobilebert"),iIo=o(" \u2014 "),oO=a("a"),dIo=o("MobileBertForNextSentencePrediction"),cIo=o(" (MobileBERT model)"),fIo=l(),sv=a("li"),$me=a("strong"),mIo=o("qdqbert"),gIo=o(" \u2014 "),rO=a("a"),hIo=o("QDQBertForNextSentencePrediction"),pIo=o(" (QDQBert model)"),uIo=l(),lv=a("p"),_Io=o("The model is set in evaluation mode by default using "),kme=a("code"),bIo=o("model.eval()"),vIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),FIo=o("model.train()"),TIo=l(),F(iv.$$.fragment),eqe=l(),Hi=a("h2"),dv=a("a"),Rme=a("span"),F(vy.$$.fragment),MIo=l(),Pme=a("span"),EIo=o("AutoModelForTokenClassification"),oqe=l(),Io=a("div"),F(Fy.$$.fragment),CIo=l(),Ui=a("p"),wIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tO=a("a"),AIo=o("from_pretrained()"),yIo=o(" class method or the "),aO=a("a"),LIo=o("from_config()"),xIo=o(` class
method.`),$Io=l(),Ty=a("p"),kIo=o("This class cannot be instantiated directly using "),Bme=a("code"),SIo=o("__init__()"),RIo=o(" (throws an error)."),PIo=l(),ft=a("div"),F(My.$$.fragment),BIo=l(),Ime=a("p"),IIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qIo=l(),Ji=a("p"),NIo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),jIo=o("not"),DIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),GIo=o("from_pretrained()"),OIo=o(" to load the model weights."),VIo=l(),F(cv.$$.fragment),XIo=l(),ao=a("div"),F(Ey.$$.fragment),zIo=l(),Nme=a("p"),WIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QIo=l(),Ia=a("p"),HIo=o("The model class to instantiate is selected based on the "),jme=a("code"),UIo=o("model_type"),JIo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),ZIo=o("pretrained_model_name_or_path"),eqo=o(":"),oqo=l(),U=a("ul"),fv=a("li"),Ome=a("strong"),rqo=o("albert"),tqo=o(" \u2014 "),sO=a("a"),aqo=o("AlbertForTokenClassification"),nqo=o(" (ALBERT model)"),sqo=l(),mv=a("li"),Vme=a("strong"),lqo=o("bert"),iqo=o(" \u2014 "),lO=a("a"),dqo=o("BertForTokenClassification"),cqo=o(" (BERT model)"),fqo=l(),gv=a("li"),Xme=a("strong"),mqo=o("big_bird"),gqo=o(" \u2014 "),iO=a("a"),hqo=o("BigBirdForTokenClassification"),pqo=o(" (BigBird model)"),uqo=l(),hv=a("li"),zme=a("strong"),_qo=o("camembert"),bqo=o(" \u2014 "),dO=a("a"),vqo=o("CamembertForTokenClassification"),Fqo=o(" (CamemBERT model)"),Tqo=l(),pv=a("li"),Wme=a("strong"),Mqo=o("canine"),Eqo=o(" \u2014 "),cO=a("a"),Cqo=o("CanineForTokenClassification"),wqo=o(" (Canine model)"),Aqo=l(),uv=a("li"),Qme=a("strong"),yqo=o("convbert"),Lqo=o(" \u2014 "),fO=a("a"),xqo=o("ConvBertForTokenClassification"),$qo=o(" (ConvBERT model)"),kqo=l(),_v=a("li"),Hme=a("strong"),Sqo=o("data2vec-text"),Rqo=o(" \u2014 "),mO=a("a"),Pqo=o("Data2VecTextForTokenClassification"),Bqo=o(" (Data2VecText model)"),Iqo=l(),bv=a("li"),Ume=a("strong"),qqo=o("deberta"),Nqo=o(" \u2014 "),gO=a("a"),jqo=o("DebertaForTokenClassification"),Dqo=o(" (DeBERTa model)"),Gqo=l(),vv=a("li"),Jme=a("strong"),Oqo=o("deberta-v2"),Vqo=o(" \u2014 "),hO=a("a"),Xqo=o("DebertaV2ForTokenClassification"),zqo=o(" (DeBERTa-v2 model)"),Wqo=l(),Fv=a("li"),Yme=a("strong"),Qqo=o("distilbert"),Hqo=o(" \u2014 "),pO=a("a"),Uqo=o("DistilBertForTokenClassification"),Jqo=o(" (DistilBERT model)"),Yqo=l(),Tv=a("li"),Kme=a("strong"),Kqo=o("electra"),Zqo=o(" \u2014 "),uO=a("a"),eNo=o("ElectraForTokenClassification"),oNo=o(" (ELECTRA model)"),rNo=l(),Mv=a("li"),Zme=a("strong"),tNo=o("flaubert"),aNo=o(" \u2014 "),_O=a("a"),nNo=o("FlaubertForTokenClassification"),sNo=o(" (FlauBERT model)"),lNo=l(),Ev=a("li"),ege=a("strong"),iNo=o("fnet"),dNo=o(" \u2014 "),bO=a("a"),cNo=o("FNetForTokenClassification"),fNo=o(" (FNet model)"),mNo=l(),Cv=a("li"),oge=a("strong"),gNo=o("funnel"),hNo=o(" \u2014 "),vO=a("a"),pNo=o("FunnelForTokenClassification"),uNo=o(" (Funnel Transformer model)"),_No=l(),wv=a("li"),rge=a("strong"),bNo=o("gpt2"),vNo=o(" \u2014 "),FO=a("a"),FNo=o("GPT2ForTokenClassification"),TNo=o(" (OpenAI GPT-2 model)"),MNo=l(),Av=a("li"),tge=a("strong"),ENo=o("ibert"),CNo=o(" \u2014 "),TO=a("a"),wNo=o("IBertForTokenClassification"),ANo=o(" (I-BERT model)"),yNo=l(),yv=a("li"),age=a("strong"),LNo=o("layoutlm"),xNo=o(" \u2014 "),MO=a("a"),$No=o("LayoutLMForTokenClassification"),kNo=o(" (LayoutLM model)"),SNo=l(),Lv=a("li"),nge=a("strong"),RNo=o("layoutlmv2"),PNo=o(" \u2014 "),EO=a("a"),BNo=o("LayoutLMv2ForTokenClassification"),INo=o(" (LayoutLMv2 model)"),qNo=l(),xv=a("li"),sge=a("strong"),NNo=o("longformer"),jNo=o(" \u2014 "),CO=a("a"),DNo=o("LongformerForTokenClassification"),GNo=o(" (Longformer model)"),ONo=l(),$v=a("li"),lge=a("strong"),VNo=o("megatron-bert"),XNo=o(" \u2014 "),wO=a("a"),zNo=o("MegatronBertForTokenClassification"),WNo=o(" (MegatronBert model)"),QNo=l(),kv=a("li"),ige=a("strong"),HNo=o("mobilebert"),UNo=o(" \u2014 "),AO=a("a"),JNo=o("MobileBertForTokenClassification"),YNo=o(" (MobileBERT model)"),KNo=l(),Sv=a("li"),dge=a("strong"),ZNo=o("mpnet"),ejo=o(" \u2014 "),yO=a("a"),ojo=o("MPNetForTokenClassification"),rjo=o(" (MPNet model)"),tjo=l(),Rv=a("li"),cge=a("strong"),ajo=o("nystromformer"),njo=o(" \u2014 "),LO=a("a"),sjo=o("NystromformerForTokenClassification"),ljo=o(" (Nystromformer model)"),ijo=l(),Pv=a("li"),fge=a("strong"),djo=o("qdqbert"),cjo=o(" \u2014 "),xO=a("a"),fjo=o("QDQBertForTokenClassification"),mjo=o(" (QDQBert model)"),gjo=l(),Bv=a("li"),mge=a("strong"),hjo=o("rembert"),pjo=o(" \u2014 "),$O=a("a"),ujo=o("RemBertForTokenClassification"),_jo=o(" (RemBERT model)"),bjo=l(),Iv=a("li"),gge=a("strong"),vjo=o("roberta"),Fjo=o(" \u2014 "),kO=a("a"),Tjo=o("RobertaForTokenClassification"),Mjo=o(" (RoBERTa model)"),Ejo=l(),qv=a("li"),hge=a("strong"),Cjo=o("roformer"),wjo=o(" \u2014 "),SO=a("a"),Ajo=o("RoFormerForTokenClassification"),yjo=o(" (RoFormer model)"),Ljo=l(),Nv=a("li"),pge=a("strong"),xjo=o("squeezebert"),$jo=o(" \u2014 "),RO=a("a"),kjo=o("SqueezeBertForTokenClassification"),Sjo=o(" (SqueezeBERT model)"),Rjo=l(),jv=a("li"),uge=a("strong"),Pjo=o("xlm"),Bjo=o(" \u2014 "),PO=a("a"),Ijo=o("XLMForTokenClassification"),qjo=o(" (XLM model)"),Njo=l(),Dv=a("li"),_ge=a("strong"),jjo=o("xlm-roberta"),Djo=o(" \u2014 "),BO=a("a"),Gjo=o("XLMRobertaForTokenClassification"),Ojo=o(" (XLM-RoBERTa model)"),Vjo=l(),Gv=a("li"),bge=a("strong"),Xjo=o("xlm-roberta-xl"),zjo=o(" \u2014 "),IO=a("a"),Wjo=o("XLMRobertaXLForTokenClassification"),Qjo=o(" (XLM-RoBERTa-XL model)"),Hjo=l(),Ov=a("li"),vge=a("strong"),Ujo=o("xlnet"),Jjo=o(" \u2014 "),qO=a("a"),Yjo=o("XLNetForTokenClassification"),Kjo=o(" (XLNet model)"),Zjo=l(),Vv=a("li"),Fge=a("strong"),eDo=o("yoso"),oDo=o(" \u2014 "),NO=a("a"),rDo=o("YosoForTokenClassification"),tDo=o(" (YOSO model)"),aDo=l(),Xv=a("p"),nDo=o("The model is set in evaluation mode by default using "),Tge=a("code"),sDo=o("model.eval()"),lDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),iDo=o("model.train()"),dDo=l(),F(zv.$$.fragment),rqe=l(),Yi=a("h2"),Wv=a("a"),Ege=a("span"),F(Cy.$$.fragment),cDo=l(),Cge=a("span"),fDo=o("AutoModelForQuestionAnswering"),tqe=l(),qo=a("div"),F(wy.$$.fragment),mDo=l(),Ki=a("p"),gDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jO=a("a"),hDo=o("from_pretrained()"),pDo=o(" class method or the "),DO=a("a"),uDo=o("from_config()"),_Do=o(` class
method.`),bDo=l(),Ay=a("p"),vDo=o("This class cannot be instantiated directly using "),wge=a("code"),FDo=o("__init__()"),TDo=o(" (throws an error)."),MDo=l(),mt=a("div"),F(yy.$$.fragment),EDo=l(),Age=a("p"),CDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wDo=l(),Zi=a("p"),ADo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),yDo=o("not"),LDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),xDo=o("from_pretrained()"),$Do=o(" to load the model weights."),kDo=l(),F(Qv.$$.fragment),SDo=l(),no=a("div"),F(Ly.$$.fragment),RDo=l(),Lge=a("p"),PDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BDo=l(),qa=a("p"),IDo=o("The model class to instantiate is selected based on the "),xge=a("code"),qDo=o("model_type"),NDo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),jDo=o("pretrained_model_name_or_path"),DDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(":"),VDo=l(),V=a("ul"),Hv=a("li"),Sge=a("strong"),XDo=o("albert"),zDo=o(" \u2014 "),OO=a("a"),WDo=o("AlbertForQuestionAnswering"),QDo=o(" (ALBERT model)"),HDo=l(),Uv=a("li"),Rge=a("strong"),UDo=o("bart"),JDo=o(" \u2014 "),VO=a("a"),YDo=o("BartForQuestionAnswering"),KDo=o(" (BART model)"),ZDo=l(),Jv=a("li"),Pge=a("strong"),eGo=o("bert"),oGo=o(" \u2014 "),XO=a("a"),rGo=o("BertForQuestionAnswering"),tGo=o(" (BERT model)"),aGo=l(),Yv=a("li"),Bge=a("strong"),nGo=o("big_bird"),sGo=o(" \u2014 "),zO=a("a"),lGo=o("BigBirdForQuestionAnswering"),iGo=o(" (BigBird model)"),dGo=l(),Kv=a("li"),Ige=a("strong"),cGo=o("bigbird_pegasus"),fGo=o(" \u2014 "),WO=a("a"),mGo=o("BigBirdPegasusForQuestionAnswering"),gGo=o(" (BigBirdPegasus model)"),hGo=l(),Zv=a("li"),qge=a("strong"),pGo=o("camembert"),uGo=o(" \u2014 "),QO=a("a"),_Go=o("CamembertForQuestionAnswering"),bGo=o(" (CamemBERT model)"),vGo=l(),eF=a("li"),Nge=a("strong"),FGo=o("canine"),TGo=o(" \u2014 "),HO=a("a"),MGo=o("CanineForQuestionAnswering"),EGo=o(" (Canine model)"),CGo=l(),oF=a("li"),jge=a("strong"),wGo=o("convbert"),AGo=o(" \u2014 "),UO=a("a"),yGo=o("ConvBertForQuestionAnswering"),LGo=o(" (ConvBERT model)"),xGo=l(),rF=a("li"),Dge=a("strong"),$Go=o("data2vec-text"),kGo=o(" \u2014 "),JO=a("a"),SGo=o("Data2VecTextForQuestionAnswering"),RGo=o(" (Data2VecText model)"),PGo=l(),tF=a("li"),Gge=a("strong"),BGo=o("deberta"),IGo=o(" \u2014 "),YO=a("a"),qGo=o("DebertaForQuestionAnswering"),NGo=o(" (DeBERTa model)"),jGo=l(),aF=a("li"),Oge=a("strong"),DGo=o("deberta-v2"),GGo=o(" \u2014 "),KO=a("a"),OGo=o("DebertaV2ForQuestionAnswering"),VGo=o(" (DeBERTa-v2 model)"),XGo=l(),nF=a("li"),Vge=a("strong"),zGo=o("distilbert"),WGo=o(" \u2014 "),ZO=a("a"),QGo=o("DistilBertForQuestionAnswering"),HGo=o(" (DistilBERT model)"),UGo=l(),sF=a("li"),Xge=a("strong"),JGo=o("electra"),YGo=o(" \u2014 "),eV=a("a"),KGo=o("ElectraForQuestionAnswering"),ZGo=o(" (ELECTRA model)"),eOo=l(),lF=a("li"),zge=a("strong"),oOo=o("flaubert"),rOo=o(" \u2014 "),oV=a("a"),tOo=o("FlaubertForQuestionAnsweringSimple"),aOo=o(" (FlauBERT model)"),nOo=l(),iF=a("li"),Wge=a("strong"),sOo=o("fnet"),lOo=o(" \u2014 "),rV=a("a"),iOo=o("FNetForQuestionAnswering"),dOo=o(" (FNet model)"),cOo=l(),dF=a("li"),Qge=a("strong"),fOo=o("funnel"),mOo=o(" \u2014 "),tV=a("a"),gOo=o("FunnelForQuestionAnswering"),hOo=o(" (Funnel Transformer model)"),pOo=l(),cF=a("li"),Hge=a("strong"),uOo=o("gptj"),_Oo=o(" \u2014 "),aV=a("a"),bOo=o("GPTJForQuestionAnswering"),vOo=o(" (GPT-J model)"),FOo=l(),fF=a("li"),Uge=a("strong"),TOo=o("ibert"),MOo=o(" \u2014 "),nV=a("a"),EOo=o("IBertForQuestionAnswering"),COo=o(" (I-BERT model)"),wOo=l(),mF=a("li"),Jge=a("strong"),AOo=o("layoutlmv2"),yOo=o(" \u2014 "),sV=a("a"),LOo=o("LayoutLMv2ForQuestionAnswering"),xOo=o(" (LayoutLMv2 model)"),$Oo=l(),gF=a("li"),Yge=a("strong"),kOo=o("led"),SOo=o(" \u2014 "),lV=a("a"),ROo=o("LEDForQuestionAnswering"),POo=o(" (LED model)"),BOo=l(),hF=a("li"),Kge=a("strong"),IOo=o("longformer"),qOo=o(" \u2014 "),iV=a("a"),NOo=o("LongformerForQuestionAnswering"),jOo=o(" (Longformer model)"),DOo=l(),pF=a("li"),Zge=a("strong"),GOo=o("lxmert"),OOo=o(" \u2014 "),dV=a("a"),VOo=o("LxmertForQuestionAnswering"),XOo=o(" (LXMERT model)"),zOo=l(),uF=a("li"),ehe=a("strong"),WOo=o("mbart"),QOo=o(" \u2014 "),cV=a("a"),HOo=o("MBartForQuestionAnswering"),UOo=o(" (mBART model)"),JOo=l(),_F=a("li"),ohe=a("strong"),YOo=o("megatron-bert"),KOo=o(" \u2014 "),fV=a("a"),ZOo=o("MegatronBertForQuestionAnswering"),eVo=o(" (MegatronBert model)"),oVo=l(),bF=a("li"),rhe=a("strong"),rVo=o("mobilebert"),tVo=o(" \u2014 "),mV=a("a"),aVo=o("MobileBertForQuestionAnswering"),nVo=o(" (MobileBERT model)"),sVo=l(),vF=a("li"),the=a("strong"),lVo=o("mpnet"),iVo=o(" \u2014 "),gV=a("a"),dVo=o("MPNetForQuestionAnswering"),cVo=o(" (MPNet model)"),fVo=l(),FF=a("li"),ahe=a("strong"),mVo=o("nystromformer"),gVo=o(" \u2014 "),hV=a("a"),hVo=o("NystromformerForQuestionAnswering"),pVo=o(" (Nystromformer model)"),uVo=l(),TF=a("li"),nhe=a("strong"),_Vo=o("qdqbert"),bVo=o(" \u2014 "),pV=a("a"),vVo=o("QDQBertForQuestionAnswering"),FVo=o(" (QDQBert model)"),TVo=l(),MF=a("li"),she=a("strong"),MVo=o("reformer"),EVo=o(" \u2014 "),uV=a("a"),CVo=o("ReformerForQuestionAnswering"),wVo=o(" (Reformer model)"),AVo=l(),EF=a("li"),lhe=a("strong"),yVo=o("rembert"),LVo=o(" \u2014 "),_V=a("a"),xVo=o("RemBertForQuestionAnswering"),$Vo=o(" (RemBERT model)"),kVo=l(),CF=a("li"),ihe=a("strong"),SVo=o("roberta"),RVo=o(" \u2014 "),bV=a("a"),PVo=o("RobertaForQuestionAnswering"),BVo=o(" (RoBERTa model)"),IVo=l(),wF=a("li"),dhe=a("strong"),qVo=o("roformer"),NVo=o(" \u2014 "),vV=a("a"),jVo=o("RoFormerForQuestionAnswering"),DVo=o(" (RoFormer model)"),GVo=l(),AF=a("li"),che=a("strong"),OVo=o("splinter"),VVo=o(" \u2014 "),FV=a("a"),XVo=o("SplinterForQuestionAnswering"),zVo=o(" (Splinter model)"),WVo=l(),yF=a("li"),fhe=a("strong"),QVo=o("squeezebert"),HVo=o(" \u2014 "),TV=a("a"),UVo=o("SqueezeBertForQuestionAnswering"),JVo=o(" (SqueezeBERT model)"),YVo=l(),LF=a("li"),mhe=a("strong"),KVo=o("xlm"),ZVo=o(" \u2014 "),MV=a("a"),eXo=o("XLMForQuestionAnsweringSimple"),oXo=o(" (XLM model)"),rXo=l(),xF=a("li"),ghe=a("strong"),tXo=o("xlm-roberta"),aXo=o(" \u2014 "),EV=a("a"),nXo=o("XLMRobertaForQuestionAnswering"),sXo=o(" (XLM-RoBERTa model)"),lXo=l(),$F=a("li"),hhe=a("strong"),iXo=o("xlm-roberta-xl"),dXo=o(" \u2014 "),CV=a("a"),cXo=o("XLMRobertaXLForQuestionAnswering"),fXo=o(" (XLM-RoBERTa-XL model)"),mXo=l(),kF=a("li"),phe=a("strong"),gXo=o("xlnet"),hXo=o(" \u2014 "),wV=a("a"),pXo=o("XLNetForQuestionAnsweringSimple"),uXo=o(" (XLNet model)"),_Xo=l(),SF=a("li"),uhe=a("strong"),bXo=o("yoso"),vXo=o(" \u2014 "),AV=a("a"),FXo=o("YosoForQuestionAnswering"),TXo=o(" (YOSO model)"),MXo=l(),RF=a("p"),EXo=o("The model is set in evaluation mode by default using "),_he=a("code"),CXo=o("model.eval()"),wXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),AXo=o("model.train()"),yXo=l(),F(PF.$$.fragment),aqe=l(),ed=a("h2"),BF=a("a"),vhe=a("span"),F(xy.$$.fragment),LXo=l(),Fhe=a("span"),xXo=o("AutoModelForTableQuestionAnswering"),nqe=l(),No=a("div"),F($y.$$.fragment),$Xo=l(),od=a("p"),kXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yV=a("a"),SXo=o("from_pretrained()"),RXo=o(" class method or the "),LV=a("a"),PXo=o("from_config()"),BXo=o(` class
method.`),IXo=l(),ky=a("p"),qXo=o("This class cannot be instantiated directly using "),The=a("code"),NXo=o("__init__()"),jXo=o(" (throws an error)."),DXo=l(),gt=a("div"),F(Sy.$$.fragment),GXo=l(),Mhe=a("p"),OXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),VXo=l(),rd=a("p"),XXo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),zXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),QXo=o("from_pretrained()"),HXo=o(" to load the model weights."),UXo=l(),F(IF.$$.fragment),JXo=l(),so=a("div"),F(Ry.$$.fragment),YXo=l(),Che=a("p"),KXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZXo=l(),Na=a("p"),ezo=o("The model class to instantiate is selected based on the "),whe=a("code"),ozo=o("model_type"),rzo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),nzo=o("pretrained_model_name_or_path"),szo=o(":"),lzo=l(),Lhe=a("ul"),qF=a("li"),xhe=a("strong"),izo=o("tapas"),dzo=o(" \u2014 "),$V=a("a"),czo=o("TapasForQuestionAnswering"),fzo=o(" (TAPAS model)"),mzo=l(),NF=a("p"),gzo=o("The model is set in evaluation mode by default using "),$he=a("code"),hzo=o("model.eval()"),pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),uzo=o("model.train()"),_zo=l(),F(jF.$$.fragment),sqe=l(),td=a("h2"),DF=a("a"),She=a("span"),F(Py.$$.fragment),bzo=l(),Rhe=a("span"),vzo=o("AutoModelForImageClassification"),lqe=l(),jo=a("div"),F(By.$$.fragment),Fzo=l(),ad=a("p"),Tzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kV=a("a"),Mzo=o("from_pretrained()"),Ezo=o(" class method or the "),SV=a("a"),Czo=o("from_config()"),wzo=o(` class
method.`),Azo=l(),Iy=a("p"),yzo=o("This class cannot be instantiated directly using "),Phe=a("code"),Lzo=o("__init__()"),xzo=o(" (throws an error)."),$zo=l(),ht=a("div"),F(qy.$$.fragment),kzo=l(),Bhe=a("p"),Szo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rzo=l(),nd=a("p"),Pzo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),Bzo=o("not"),Izo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),qzo=o("from_pretrained()"),Nzo=o(" to load the model weights."),jzo=l(),F(GF.$$.fragment),Dzo=l(),lo=a("div"),F(Ny.$$.fragment),Gzo=l(),qhe=a("p"),Ozo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vzo=l(),ja=a("p"),Xzo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),zzo=o("model_type"),Wzo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),Qzo=o("pretrained_model_name_or_path"),Hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(":"),Yzo=l(),Fe=a("ul"),OF=a("li"),Ghe=a("strong"),Kzo=o("beit"),Zzo=o(" \u2014 "),PV=a("a"),eWo=o("BeitForImageClassification"),oWo=o(" (BEiT model)"),rWo=l(),VF=a("li"),Ohe=a("strong"),tWo=o("convnext"),aWo=o(" \u2014 "),BV=a("a"),nWo=o("ConvNextForImageClassification"),sWo=o(" (ConvNext model)"),lWo=l(),XF=a("li"),Vhe=a("strong"),iWo=o("data2vec-vision"),dWo=o(" \u2014 "),IV=a("a"),cWo=o("Data2VecVisionForImageClassification"),fWo=o(" (Data2VecVision model)"),mWo=l(),Ps=a("li"),Xhe=a("strong"),gWo=o("deit"),hWo=o(" \u2014 "),qV=a("a"),pWo=o("DeiTForImageClassification"),uWo=o(" or "),NV=a("a"),_Wo=o("DeiTForImageClassificationWithTeacher"),bWo=o(" (DeiT model)"),vWo=l(),zF=a("li"),zhe=a("strong"),FWo=o("imagegpt"),TWo=o(" \u2014 "),jV=a("a"),MWo=o("ImageGPTForImageClassification"),EWo=o(" (ImageGPT model)"),CWo=l(),pt=a("li"),Whe=a("strong"),wWo=o("perceiver"),AWo=o(" \u2014 "),DV=a("a"),yWo=o("PerceiverForImageClassificationLearned"),LWo=o(" or "),GV=a("a"),xWo=o("PerceiverForImageClassificationFourier"),$Wo=o(" or "),OV=a("a"),kWo=o("PerceiverForImageClassificationConvProcessing"),SWo=o(" (Perceiver model)"),RWo=l(),WF=a("li"),Qhe=a("strong"),PWo=o("poolformer"),BWo=o(" \u2014 "),VV=a("a"),IWo=o("PoolFormerForImageClassification"),qWo=o(" (PoolFormer model)"),NWo=l(),QF=a("li"),Hhe=a("strong"),jWo=o("regnet"),DWo=o(" \u2014 "),XV=a("a"),GWo=o("RegNetForImageClassification"),OWo=o(" (RegNet model)"),VWo=l(),HF=a("li"),Uhe=a("strong"),XWo=o("resnet"),zWo=o(" \u2014 "),zV=a("a"),WWo=o("ResNetForImageClassification"),QWo=o(" (ResNet model)"),HWo=l(),UF=a("li"),Jhe=a("strong"),UWo=o("segformer"),JWo=o(" \u2014 "),WV=a("a"),YWo=o("SegformerForImageClassification"),KWo=o(" (SegFormer model)"),ZWo=l(),JF=a("li"),Yhe=a("strong"),eQo=o("swin"),oQo=o(" \u2014 "),QV=a("a"),rQo=o("SwinForImageClassification"),tQo=o(" (Swin model)"),aQo=l(),YF=a("li"),Khe=a("strong"),nQo=o("van"),sQo=o(" \u2014 "),HV=a("a"),lQo=o("VanForImageClassification"),iQo=o(" (VAN model)"),dQo=l(),KF=a("li"),Zhe=a("strong"),cQo=o("vit"),fQo=o(" \u2014 "),UV=a("a"),mQo=o("ViTForImageClassification"),gQo=o(" (ViT model)"),hQo=l(),ZF=a("p"),pQo=o("The model is set in evaluation mode by default using "),epe=a("code"),uQo=o("model.eval()"),_Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),bQo=o("model.train()"),vQo=l(),F(e6.$$.fragment),iqe=l(),sd=a("h2"),o6=a("a"),rpe=a("span"),F(jy.$$.fragment),FQo=l(),tpe=a("span"),TQo=o("AutoModelForVision2Seq"),dqe=l(),Do=a("div"),F(Dy.$$.fragment),MQo=l(),ld=a("p"),EQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JV=a("a"),CQo=o("from_pretrained()"),wQo=o(" class method or the "),YV=a("a"),AQo=o("from_config()"),yQo=o(` class
method.`),LQo=l(),Gy=a("p"),xQo=o("This class cannot be instantiated directly using "),ape=a("code"),$Qo=o("__init__()"),kQo=o(" (throws an error)."),SQo=l(),ut=a("div"),F(Oy.$$.fragment),RQo=l(),npe=a("p"),PQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BQo=l(),id=a("p"),IQo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),qQo=o("not"),NQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),jQo=o("from_pretrained()"),DQo=o(" to load the model weights."),GQo=l(),F(r6.$$.fragment),OQo=l(),io=a("div"),F(Vy.$$.fragment),VQo=l(),lpe=a("p"),XQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zQo=l(),Da=a("p"),WQo=o("The model class to instantiate is selected based on the "),ipe=a("code"),QQo=o("model_type"),HQo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),UQo=o("pretrained_model_name_or_path"),JQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),YQo=o("pretrained_model_name_or_path"),KQo=o(":"),ZQo=l(),fpe=a("ul"),t6=a("li"),mpe=a("strong"),eHo=o("vision-encoder-decoder"),oHo=o(" \u2014 "),ZV=a("a"),rHo=o("VisionEncoderDecoderModel"),tHo=o(" (Vision Encoder decoder model)"),aHo=l(),a6=a("p"),nHo=o("The model is set in evaluation mode by default using "),gpe=a("code"),sHo=o("model.eval()"),lHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),iHo=o("model.train()"),dHo=l(),F(n6.$$.fragment),cqe=l(),dd=a("h2"),s6=a("a"),ppe=a("span"),F(Xy.$$.fragment),cHo=l(),upe=a("span"),fHo=o("AutoModelForAudioClassification"),fqe=l(),Go=a("div"),F(zy.$$.fragment),mHo=l(),cd=a("p"),gHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eX=a("a"),hHo=o("from_pretrained()"),pHo=o(" class method or the "),oX=a("a"),uHo=o("from_config()"),_Ho=o(` class
method.`),bHo=l(),Wy=a("p"),vHo=o("This class cannot be instantiated directly using "),_pe=a("code"),FHo=o("__init__()"),THo=o(" (throws an error)."),MHo=l(),_t=a("div"),F(Qy.$$.fragment),EHo=l(),bpe=a("p"),CHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wHo=l(),fd=a("p"),AHo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),yHo=o("not"),LHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),xHo=o("from_pretrained()"),$Ho=o(" to load the model weights."),kHo=l(),F(l6.$$.fragment),SHo=l(),co=a("div"),F(Hy.$$.fragment),RHo=l(),Fpe=a("p"),PHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),BHo=l(),Ga=a("p"),IHo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),qHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),GHo=o("pretrained_model_name_or_path"),OHo=o(":"),VHo=l(),ke=a("ul"),i6=a("li"),Cpe=a("strong"),XHo=o("data2vec-audio"),zHo=o(" \u2014 "),tX=a("a"),WHo=o("Data2VecAudioForSequenceClassification"),QHo=o(" (Data2VecAudio model)"),HHo=l(),d6=a("li"),wpe=a("strong"),UHo=o("hubert"),JHo=o(" \u2014 "),aX=a("a"),YHo=o("HubertForSequenceClassification"),KHo=o(" (Hubert model)"),ZHo=l(),c6=a("li"),Ape=a("strong"),eUo=o("sew"),oUo=o(" \u2014 "),nX=a("a"),rUo=o("SEWForSequenceClassification"),tUo=o(" (SEW model)"),aUo=l(),f6=a("li"),ype=a("strong"),nUo=o("sew-d"),sUo=o(" \u2014 "),sX=a("a"),lUo=o("SEWDForSequenceClassification"),iUo=o(" (SEW-D model)"),dUo=l(),m6=a("li"),Lpe=a("strong"),cUo=o("unispeech"),fUo=o(" \u2014 "),lX=a("a"),mUo=o("UniSpeechForSequenceClassification"),gUo=o(" (UniSpeech model)"),hUo=l(),g6=a("li"),xpe=a("strong"),pUo=o("unispeech-sat"),uUo=o(" \u2014 "),iX=a("a"),_Uo=o("UniSpeechSatForSequenceClassification"),bUo=o(" (UniSpeechSat model)"),vUo=l(),h6=a("li"),$pe=a("strong"),FUo=o("wav2vec2"),TUo=o(" \u2014 "),dX=a("a"),MUo=o("Wav2Vec2ForSequenceClassification"),EUo=o(" (Wav2Vec2 model)"),CUo=l(),p6=a("li"),kpe=a("strong"),wUo=o("wav2vec2-conformer"),AUo=o(" \u2014 "),cX=a("a"),yUo=o("Wav2Vec2ConformerForSequenceClassification"),LUo=o(" (Wav2Vec2-Conformer model)"),xUo=l(),u6=a("li"),Spe=a("strong"),$Uo=o("wavlm"),kUo=o(" \u2014 "),fX=a("a"),SUo=o("WavLMForSequenceClassification"),RUo=o(" (WavLM model)"),PUo=l(),_6=a("p"),BUo=o("The model is set in evaluation mode by default using "),Rpe=a("code"),IUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=a("code"),NUo=o("model.train()"),jUo=l(),F(b6.$$.fragment),mqe=l(),md=a("h2"),v6=a("a"),Bpe=a("span"),F(Uy.$$.fragment),DUo=l(),Ipe=a("span"),GUo=o("AutoModelForAudioFrameClassification"),gqe=l(),Oo=a("div"),F(Jy.$$.fragment),OUo=l(),gd=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mX=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),gX=a("a"),WUo=o("from_config()"),QUo=o(` class
method.`),HUo=l(),Yy=a("p"),UUo=o("This class cannot be instantiated directly using "),qpe=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),bt=a("div"),F(Ky.$$.fragment),ZUo=l(),Npe=a("p"),eJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oJo=l(),hd=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(F6.$$.fragment),iJo=l(),fo=a("div"),F(Zy.$$.fragment),dJo=l(),Dpe=a("p"),cJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),fJo=l(),Oa=a("p"),mJo=o("The model class to instantiate is selected based on the "),Gpe=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),pJo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),_Jo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),Kr=a("ul"),T6=a("li"),Xpe=a("strong"),FJo=o("data2vec-audio"),TJo=o(" \u2014 "),pX=a("a"),MJo=o("Data2VecAudioForAudioFrameClassification"),EJo=o(" (Data2VecAudio model)"),CJo=l(),M6=a("li"),zpe=a("strong"),wJo=o("unispeech-sat"),AJo=o(" \u2014 "),uX=a("a"),yJo=o("UniSpeechSatForAudioFrameClassification"),LJo=o(" (UniSpeechSat model)"),xJo=l(),E6=a("li"),Wpe=a("strong"),$Jo=o("wav2vec2"),kJo=o(" \u2014 "),_X=a("a"),SJo=o("Wav2Vec2ForAudioFrameClassification"),RJo=o(" (Wav2Vec2 model)"),PJo=l(),C6=a("li"),Qpe=a("strong"),BJo=o("wav2vec2-conformer"),IJo=o(" \u2014 "),bX=a("a"),qJo=o("Wav2Vec2ConformerForAudioFrameClassification"),NJo=o(" (Wav2Vec2-Conformer model)"),jJo=l(),w6=a("li"),Hpe=a("strong"),DJo=o("wavlm"),GJo=o(" \u2014 "),vX=a("a"),OJo=o("WavLMForAudioFrameClassification"),VJo=o(" (WavLM model)"),XJo=l(),A6=a("p"),zJo=o("The model is set in evaluation mode by default using "),Upe=a("code"),WJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),HJo=o("model.train()"),UJo=l(),F(y6.$$.fragment),hqe=l(),pd=a("h2"),L6=a("a"),Ype=a("span"),F(eL.$$.fragment),JJo=l(),Kpe=a("span"),YJo=o("AutoModelForCTC"),pqe=l(),Vo=a("div"),F(oL.$$.fragment),KJo=l(),ud=a("p"),ZJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FX=a("a"),eYo=o("from_pretrained()"),oYo=o(" class method or the "),TX=a("a"),rYo=o("from_config()"),tYo=o(` class
method.`),aYo=l(),rL=a("p"),nYo=o("This class cannot be instantiated directly using "),Zpe=a("code"),sYo=o("__init__()"),lYo=o(" (throws an error)."),iYo=l(),vt=a("div"),F(tL.$$.fragment),dYo=l(),eue=a("p"),cYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),fYo=l(),_d=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),gYo=o("not"),hYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),pYo=o("from_pretrained()"),uYo=o(" to load the model weights."),_Yo=l(),F(x6.$$.fragment),bYo=l(),mo=a("div"),F(aL.$$.fragment),vYo=l(),rue=a("p"),FYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),TYo=l(),Va=a("p"),MYo=o("The model class to instantiate is selected based on the "),tue=a("code"),EYo=o("model_type"),CYo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(":"),xYo=l(),Se=a("ul"),$6=a("li"),sue=a("strong"),$Yo=o("data2vec-audio"),kYo=o(" \u2014 "),EX=a("a"),SYo=o("Data2VecAudioForCTC"),RYo=o(" (Data2VecAudio model)"),PYo=l(),k6=a("li"),lue=a("strong"),BYo=o("hubert"),IYo=o(" \u2014 "),CX=a("a"),qYo=o("HubertForCTC"),NYo=o(" (Hubert model)"),jYo=l(),S6=a("li"),iue=a("strong"),DYo=o("sew"),GYo=o(" \u2014 "),wX=a("a"),OYo=o("SEWForCTC"),VYo=o(" (SEW model)"),XYo=l(),R6=a("li"),due=a("strong"),zYo=o("sew-d"),WYo=o(" \u2014 "),AX=a("a"),QYo=o("SEWDForCTC"),HYo=o(" (SEW-D model)"),UYo=l(),P6=a("li"),cue=a("strong"),JYo=o("unispeech"),YYo=o(" \u2014 "),yX=a("a"),KYo=o("UniSpeechForCTC"),ZYo=o(" (UniSpeech model)"),eKo=l(),B6=a("li"),fue=a("strong"),oKo=o("unispeech-sat"),rKo=o(" \u2014 "),LX=a("a"),tKo=o("UniSpeechSatForCTC"),aKo=o(" (UniSpeechSat model)"),nKo=l(),I6=a("li"),mue=a("strong"),sKo=o("wav2vec2"),lKo=o(" \u2014 "),xX=a("a"),iKo=o("Wav2Vec2ForCTC"),dKo=o(" (Wav2Vec2 model)"),cKo=l(),q6=a("li"),gue=a("strong"),fKo=o("wav2vec2-conformer"),mKo=o(" \u2014 "),$X=a("a"),gKo=o("Wav2Vec2ConformerForCTC"),hKo=o(" (Wav2Vec2-Conformer model)"),pKo=l(),N6=a("li"),hue=a("strong"),uKo=o("wavlm"),_Ko=o(" \u2014 "),kX=a("a"),bKo=o("WavLMForCTC"),vKo=o(" (WavLM model)"),FKo=l(),j6=a("p"),TKo=o("The model is set in evaluation mode by default using "),pue=a("code"),MKo=o("model.eval()"),EKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),CKo=o("model.train()"),wKo=l(),F(D6.$$.fragment),uqe=l(),bd=a("h2"),G6=a("a"),_ue=a("span"),F(nL.$$.fragment),AKo=l(),bue=a("span"),yKo=o("AutoModelForSpeechSeq2Seq"),_qe=l(),Xo=a("div"),F(sL.$$.fragment),LKo=l(),vd=a("p"),xKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SX=a("a"),$Ko=o("from_pretrained()"),kKo=o(" class method or the "),RX=a("a"),SKo=o("from_config()"),RKo=o(` class
method.`),PKo=l(),lL=a("p"),BKo=o("This class cannot be instantiated directly using "),vue=a("code"),IKo=o("__init__()"),qKo=o(" (throws an error)."),NKo=l(),Ft=a("div"),F(iL.$$.fragment),jKo=l(),Fue=a("p"),DKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GKo=l(),Fd=a("p"),OKo=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),VKo=o("not"),XKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),zKo=o("from_pretrained()"),WKo=o(" to load the model weights."),QKo=l(),F(O6.$$.fragment),HKo=l(),go=a("div"),F(dL.$$.fragment),UKo=l(),Mue=a("p"),JKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YKo=l(),Xa=a("p"),KKo=o("The model class to instantiate is selected based on the "),Eue=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),Cue=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),cL=a("ul"),V6=a("li"),Aue=a("strong"),sZo=o("speech-encoder-decoder"),lZo=o(" \u2014 "),BX=a("a"),iZo=o("SpeechEncoderDecoderModel"),dZo=o(" (Speech Encoder decoder model)"),cZo=l(),X6=a("li"),yue=a("strong"),fZo=o("speech_to_text"),mZo=o(" \u2014 "),IX=a("a"),gZo=o("Speech2TextForConditionalGeneration"),hZo=o(" (Speech2Text model)"),pZo=l(),z6=a("p"),uZo=o("The model is set in evaluation mode by default using "),Lue=a("code"),_Zo=o("model.eval()"),bZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),vZo=o("model.train()"),FZo=l(),F(W6.$$.fragment),bqe=l(),Td=a("h2"),Q6=a("a"),$ue=a("span"),F(fL.$$.fragment),TZo=l(),kue=a("span"),MZo=o("AutoModelForAudioXVector"),vqe=l(),zo=a("div"),F(mL.$$.fragment),EZo=l(),Md=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qX=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),NX=a("a"),yZo=o("from_config()"),LZo=o(` class
method.`),xZo=l(),gL=a("p"),$Zo=o("This class cannot be instantiated directly using "),Sue=a("code"),kZo=o("__init__()"),SZo=o(" (throws an error)."),RZo=l(),Tt=a("div"),F(hL.$$.fragment),PZo=l(),Rue=a("p"),BZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),IZo=l(),Ed=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),NZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),F(H6.$$.fragment),VZo=l(),ho=a("div"),F(pL.$$.fragment),XZo=l(),Bue=a("p"),zZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),WZo=l(),za=a("p"),QZo=o("The model class to instantiate is selected based on the "),Iue=a("code"),HZo=o("model_type"),UZo=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(":"),eer=l(),Zr=a("ul"),U6=a("li"),jue=a("strong"),oer=o("data2vec-audio"),rer=o(" \u2014 "),DX=a("a"),ter=o("Data2VecAudioForXVector"),aer=o(" (Data2VecAudio model)"),ner=l(),J6=a("li"),Due=a("strong"),ser=o("unispeech-sat"),ler=o(" \u2014 "),GX=a("a"),ier=o("UniSpeechSatForXVector"),der=o(" (UniSpeechSat model)"),cer=l(),Y6=a("li"),Gue=a("strong"),fer=o("wav2vec2"),mer=o(" \u2014 "),OX=a("a"),ger=o("Wav2Vec2ForXVector"),her=o(" (Wav2Vec2 model)"),per=l(),K6=a("li"),Oue=a("strong"),uer=o("wav2vec2-conformer"),_er=o(" \u2014 "),VX=a("a"),ber=o("Wav2Vec2ConformerForXVector"),ver=o(" (Wav2Vec2-Conformer model)"),Fer=l(),Z6=a("li"),Vue=a("strong"),Ter=o("wavlm"),Mer=o(" \u2014 "),XX=a("a"),Eer=o("WavLMForXVector"),Cer=o(" (WavLM model)"),wer=l(),e0=a("p"),Aer=o("The model is set in evaluation mode by default using "),Xue=a("code"),yer=o("model.eval()"),Ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),xer=o("model.train()"),$er=l(),F(o0.$$.fragment),Fqe=l(),Cd=a("h2"),r0=a("a"),Wue=a("span"),F(uL.$$.fragment),ker=l(),Que=a("span"),Ser=o("AutoModelForMaskedImageModeling"),Tqe=l(),Wo=a("div"),F(_L.$$.fragment),Rer=l(),wd=a("p"),Per=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zX=a("a"),Ber=o("from_pretrained()"),Ier=o(" class method or the "),WX=a("a"),qer=o("from_config()"),Ner=o(` class
method.`),jer=l(),bL=a("p"),Der=o("This class cannot be instantiated directly using "),Hue=a("code"),Ger=o("__init__()"),Oer=o(" (throws an error)."),Ver=l(),Mt=a("div"),F(vL.$$.fragment),Xer=l(),Uue=a("p"),zer=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wer=l(),Ad=a("p"),Qer=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Her=o("not"),Uer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Jer=o("from_pretrained()"),Yer=o(" to load the model weights."),Ker=l(),F(t0.$$.fragment),Zer=l(),po=a("div"),F(FL.$$.fragment),eor=l(),Yue=a("p"),oor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ror=l(),Wa=a("p"),tor=o("The model class to instantiate is selected based on the "),Kue=a("code"),aor=o("model_type"),nor=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),sor=o("pretrained_model_name_or_path"),lor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(":"),cor=l(),yd=a("ul"),a0=a("li"),o_e=a("strong"),mor=o("deit"),gor=o(" \u2014 "),HX=a("a"),hor=o("DeiTForMaskedImageModeling"),por=o(" (DeiT model)"),uor=l(),n0=a("li"),r_e=a("strong"),_or=o("swin"),bor=o(" \u2014 "),UX=a("a"),vor=o("SwinForMaskedImageModeling"),For=o(" (Swin model)"),Tor=l(),s0=a("li"),t_e=a("strong"),Mor=o("vit"),Eor=o(" \u2014 "),JX=a("a"),Cor=o("ViTForMaskedImageModeling"),wor=o(" (ViT model)"),Aor=l(),l0=a("p"),yor=o("The model is set in evaluation mode by default using "),a_e=a("code"),Lor=o("model.eval()"),xor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),$or=o("model.train()"),kor=l(),F(i0.$$.fragment),Mqe=l(),Ld=a("h2"),d0=a("a"),s_e=a("span"),F(TL.$$.fragment),Sor=l(),l_e=a("span"),Ror=o("AutoModelForObjectDetection"),Eqe=l(),Qo=a("div"),F(ML.$$.fragment),Por=l(),xd=a("p"),Bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YX=a("a"),Ior=o("from_pretrained()"),qor=o(" class method or the "),KX=a("a"),Nor=o("from_config()"),jor=o(` class
method.`),Dor=l(),EL=a("p"),Gor=o("This class cannot be instantiated directly using "),i_e=a("code"),Oor=o("__init__()"),Vor=o(" (throws an error)."),Xor=l(),Et=a("div"),F(CL.$$.fragment),zor=l(),d_e=a("p"),Wor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qor=l(),$d=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Yor=o("from_pretrained()"),Kor=o(" to load the model weights."),Zor=l(),F(c0.$$.fragment),err=l(),uo=a("div"),F(wL.$$.fragment),orr=l(),f_e=a("p"),rrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),trr=l(),Qa=a("p"),arr=o("The model class to instantiate is selected based on the "),m_e=a("code"),nrr=o("model_type"),srr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(":"),frr=l(),AL=a("ul"),f0=a("li"),p_e=a("strong"),mrr=o("detr"),grr=o(" \u2014 "),ez=a("a"),hrr=o("DetrForObjectDetection"),prr=o(" (DETR model)"),urr=l(),m0=a("li"),u_e=a("strong"),_rr=o("yolos"),brr=o(" \u2014 "),oz=a("a"),vrr=o("YolosForObjectDetection"),Frr=o(" (YOLOS model)"),Trr=l(),g0=a("p"),Mrr=o("The model is set in evaluation mode by default using "),__e=a("code"),Err=o("model.eval()"),Crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=a("code"),wrr=o("model.train()"),Arr=l(),F(h0.$$.fragment),Cqe=l(),kd=a("h2"),p0=a("a"),v_e=a("span"),F(yL.$$.fragment),yrr=l(),F_e=a("span"),Lrr=o("AutoModelForImageSegmentation"),wqe=l(),Ho=a("div"),F(LL.$$.fragment),xrr=l(),Sd=a("p"),$rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rz=a("a"),krr=o("from_pretrained()"),Srr=o(" class method or the "),tz=a("a"),Rrr=o("from_config()"),Prr=o(` class
method.`),Brr=l(),xL=a("p"),Irr=o("This class cannot be instantiated directly using "),T_e=a("code"),qrr=o("__init__()"),Nrr=o(" (throws an error)."),jrr=l(),Ct=a("div"),F($L.$$.fragment),Drr=l(),M_e=a("p"),Grr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Orr=l(),Rd=a("p"),Vrr=o(`Note:
Loading a model from its configuration file does `),E_e=a("strong"),Xrr=o("not"),zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),Wrr=o("from_pretrained()"),Qrr=o(" to load the model weights."),Hrr=l(),F(u0.$$.fragment),Urr=l(),_o=a("div"),F(kL.$$.fragment),Jrr=l(),C_e=a("p"),Yrr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Krr=l(),Ha=a("p"),Zrr=o("The model class to instantiate is selected based on the "),w_e=a("code"),etr=o("model_type"),otr=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(":"),str=l(),L_e=a("ul"),_0=a("li"),x_e=a("strong"),ltr=o("detr"),itr=o(" \u2014 "),nz=a("a"),dtr=o("DetrForSegmentation"),ctr=o(" (DETR model)"),ftr=l(),b0=a("p"),mtr=o("The model is set in evaluation mode by default using "),$_e=a("code"),gtr=o("model.eval()"),htr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),ptr=o("model.train()"),utr=l(),F(v0.$$.fragment),Aqe=l(),Pd=a("h2"),F0=a("a"),S_e=a("span"),F(SL.$$.fragment),_tr=l(),R_e=a("span"),btr=o("AutoModelForSemanticSegmentation"),yqe=l(),Uo=a("div"),F(RL.$$.fragment),vtr=l(),Bd=a("p"),Ftr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sz=a("a"),Ttr=o("from_pretrained()"),Mtr=o(" class method or the "),lz=a("a"),Etr=o("from_config()"),Ctr=o(` class
method.`),wtr=l(),PL=a("p"),Atr=o("This class cannot be instantiated directly using "),P_e=a("code"),ytr=o("__init__()"),Ltr=o(" (throws an error)."),xtr=l(),wt=a("div"),F(BL.$$.fragment),$tr=l(),B_e=a("p"),ktr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Str=l(),Id=a("p"),Rtr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),Ptr=o("not"),Btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),Itr=o("from_pretrained()"),qtr=o(" to load the model weights."),Ntr=l(),F(T0.$$.fragment),jtr=l(),bo=a("div"),F(IL.$$.fragment),Dtr=l(),q_e=a("p"),Gtr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Otr=l(),Ua=a("p"),Vtr=o("The model class to instantiate is selected based on the "),N_e=a("code"),Xtr=o("model_type"),ztr=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),Wtr=o("pretrained_model_name_or_path"),Qtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(":"),Jtr=l(),Ja=a("ul"),M0=a("li"),G_e=a("strong"),Ytr=o("beit"),Ktr=o(" \u2014 "),dz=a("a"),Ztr=o("BeitForSemanticSegmentation"),ear=o(" (BEiT model)"),oar=l(),E0=a("li"),O_e=a("strong"),rar=o("data2vec-vision"),tar=o(" \u2014 "),cz=a("a"),aar=o("Data2VecVisionForSemanticSegmentation"),nar=o(" (Data2VecVision model)"),sar=l(),C0=a("li"),V_e=a("strong"),lar=o("dpt"),iar=o(" \u2014 "),fz=a("a"),dar=o("DPTForSemanticSegmentation"),car=o(" (DPT model)"),far=l(),w0=a("li"),X_e=a("strong"),mar=o("segformer"),gar=o(" \u2014 "),mz=a("a"),har=o("SegformerForSemanticSegmentation"),par=o(" (SegFormer model)"),uar=l(),A0=a("p"),_ar=o("The model is set in evaluation mode by default using "),z_e=a("code"),bar=o("model.eval()"),Far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),Tar=o("model.train()"),Mar=l(),F(y0.$$.fragment),Lqe=l(),qd=a("h2"),L0=a("a"),Q_e=a("span"),F(qL.$$.fragment),Ear=l(),H_e=a("span"),Car=o("AutoModelForInstanceSegmentation"),xqe=l(),Jo=a("div"),F(NL.$$.fragment),war=l(),Nd=a("p"),Aar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gz=a("a"),yar=o("from_pretrained()"),Lar=o(" class method or the "),hz=a("a"),xar=o("from_config()"),$ar=o(` class
method.`),kar=l(),jL=a("p"),Sar=o("This class cannot be instantiated directly using "),U_e=a("code"),Rar=o("__init__()"),Par=o(" (throws an error)."),Bar=l(),At=a("div"),F(DL.$$.fragment),Iar=l(),J_e=a("p"),qar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nar=l(),jd=a("p"),jar=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Dar=o("not"),Gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),Oar=o("from_pretrained()"),Var=o(" to load the model weights."),Xar=l(),F(x0.$$.fragment),zar=l(),vo=a("div"),F(GL.$$.fragment),War=l(),K_e=a("p"),Qar=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Har=l(),Ya=a("p"),Uar=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Jar=o("model_type"),Yar=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),Kar=o("pretrained_model_name_or_path"),Zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(":"),rnr=l(),r2e=a("ul"),$0=a("li"),t2e=a("strong"),tnr=o("maskformer"),anr=o(" \u2014 "),uz=a("a"),nnr=o("MaskFormerForInstanceSegmentation"),snr=o(" (MaskFormer model)"),lnr=l(),k0=a("p"),inr=o("The model is set in evaluation mode by default using "),a2e=a("code"),dnr=o("model.eval()"),cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=a("code"),fnr=o("model.train()"),mnr=l(),F(S0.$$.fragment),$qe=l(),Dd=a("h2"),R0=a("a"),s2e=a("span"),F(OL.$$.fragment),gnr=l(),l2e=a("span"),hnr=o("TFAutoModel"),kqe=l(),Yo=a("div"),F(VL.$$.fragment),pnr=l(),Gd=a("p"),unr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_z=a("a"),_nr=o("from_pretrained()"),bnr=o(" class method or the "),bz=a("a"),vnr=o("from_config()"),Fnr=o(` class
method.`),Tnr=l(),XL=a("p"),Mnr=o("This class cannot be instantiated directly using "),i2e=a("code"),Enr=o("__init__()"),Cnr=o(" (throws an error)."),wnr=l(),yt=a("div"),F(zL.$$.fragment),Anr=l(),d2e=a("p"),ynr=o("Instantiates one of the base model classes of the library from a configuration."),Lnr=l(),Od=a("p"),xnr=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),$nr=o("not"),knr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Snr=o("from_pretrained()"),Rnr=o(" to load the model weights."),Pnr=l(),F(P0.$$.fragment),Bnr=l(),wr=a("div"),F(WL.$$.fragment),Inr=l(),f2e=a("p"),qnr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nnr=l(),Ka=a("p"),jnr=o("The model class to instantiate is selected based on the "),m2e=a("code"),Dnr=o("model_type"),Gnr=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),Onr=o("pretrained_model_name_or_path"),Vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(":"),Wnr=l(),N=a("ul"),B0=a("li"),p2e=a("strong"),Qnr=o("albert"),Hnr=o(" \u2014 "),Fz=a("a"),Unr=o("TFAlbertModel"),Jnr=o(" (ALBERT model)"),Ynr=l(),I0=a("li"),u2e=a("strong"),Knr=o("bart"),Znr=o(" \u2014 "),Tz=a("a"),esr=o("TFBartModel"),osr=o(" (BART model)"),rsr=l(),q0=a("li"),_2e=a("strong"),tsr=o("bert"),asr=o(" \u2014 "),Mz=a("a"),nsr=o("TFBertModel"),ssr=o(" (BERT model)"),lsr=l(),N0=a("li"),b2e=a("strong"),isr=o("blenderbot"),dsr=o(" \u2014 "),Ez=a("a"),csr=o("TFBlenderbotModel"),fsr=o(" (Blenderbot model)"),msr=l(),j0=a("li"),v2e=a("strong"),gsr=o("blenderbot-small"),hsr=o(" \u2014 "),Cz=a("a"),psr=o("TFBlenderbotSmallModel"),usr=o(" (BlenderbotSmall model)"),_sr=l(),D0=a("li"),F2e=a("strong"),bsr=o("camembert"),vsr=o(" \u2014 "),wz=a("a"),Fsr=o("TFCamembertModel"),Tsr=o(" (CamemBERT model)"),Msr=l(),G0=a("li"),T2e=a("strong"),Esr=o("clip"),Csr=o(" \u2014 "),Az=a("a"),wsr=o("TFCLIPModel"),Asr=o(" (CLIP model)"),ysr=l(),O0=a("li"),M2e=a("strong"),Lsr=o("convbert"),xsr=o(" \u2014 "),yz=a("a"),$sr=o("TFConvBertModel"),ksr=o(" (ConvBERT model)"),Ssr=l(),V0=a("li"),E2e=a("strong"),Rsr=o("convnext"),Psr=o(" \u2014 "),Lz=a("a"),Bsr=o("TFConvNextModel"),Isr=o(" (ConvNext model)"),qsr=l(),X0=a("li"),C2e=a("strong"),Nsr=o("ctrl"),jsr=o(" \u2014 "),xz=a("a"),Dsr=o("TFCTRLModel"),Gsr=o(" (CTRL model)"),Osr=l(),z0=a("li"),w2e=a("strong"),Vsr=o("data2vec-vision"),Xsr=o(" \u2014 "),$z=a("a"),zsr=o("TFData2VecVisionModel"),Wsr=o(" (Data2VecVision model)"),Qsr=l(),W0=a("li"),A2e=a("strong"),Hsr=o("deberta"),Usr=o(" \u2014 "),kz=a("a"),Jsr=o("TFDebertaModel"),Ysr=o(" (DeBERTa model)"),Ksr=l(),Q0=a("li"),y2e=a("strong"),Zsr=o("deberta-v2"),elr=o(" \u2014 "),Sz=a("a"),olr=o("TFDebertaV2Model"),rlr=o(" (DeBERTa-v2 model)"),tlr=l(),H0=a("li"),L2e=a("strong"),alr=o("distilbert"),nlr=o(" \u2014 "),Rz=a("a"),slr=o("TFDistilBertModel"),llr=o(" (DistilBERT model)"),ilr=l(),U0=a("li"),x2e=a("strong"),dlr=o("dpr"),clr=o(" \u2014 "),Pz=a("a"),flr=o("TFDPRQuestionEncoder"),mlr=o(" (DPR model)"),glr=l(),J0=a("li"),$2e=a("strong"),hlr=o("electra"),plr=o(" \u2014 "),Bz=a("a"),ulr=o("TFElectraModel"),_lr=o(" (ELECTRA model)"),blr=l(),Y0=a("li"),k2e=a("strong"),vlr=o("flaubert"),Flr=o(" \u2014 "),Iz=a("a"),Tlr=o("TFFlaubertModel"),Mlr=o(" (FlauBERT model)"),Elr=l(),Bs=a("li"),S2e=a("strong"),Clr=o("funnel"),wlr=o(" \u2014 "),qz=a("a"),Alr=o("TFFunnelModel"),ylr=o(" or "),Nz=a("a"),Llr=o("TFFunnelBaseModel"),xlr=o(" (Funnel Transformer model)"),$lr=l(),K0=a("li"),R2e=a("strong"),klr=o("gpt2"),Slr=o(" \u2014 "),jz=a("a"),Rlr=o("TFGPT2Model"),Plr=o(" (OpenAI GPT-2 model)"),Blr=l(),Z0=a("li"),P2e=a("strong"),Ilr=o("gptj"),qlr=o(" \u2014 "),Dz=a("a"),Nlr=o("TFGPTJModel"),jlr=o(" (GPT-J model)"),Dlr=l(),eT=a("li"),B2e=a("strong"),Glr=o("hubert"),Olr=o(" \u2014 "),Gz=a("a"),Vlr=o("TFHubertModel"),Xlr=o(" (Hubert model)"),zlr=l(),oT=a("li"),I2e=a("strong"),Wlr=o("layoutlm"),Qlr=o(" \u2014 "),Oz=a("a"),Hlr=o("TFLayoutLMModel"),Ulr=o(" (LayoutLM model)"),Jlr=l(),rT=a("li"),q2e=a("strong"),Ylr=o("led"),Klr=o(" \u2014 "),Vz=a("a"),Zlr=o("TFLEDModel"),eir=o(" (LED model)"),oir=l(),tT=a("li"),N2e=a("strong"),rir=o("longformer"),tir=o(" \u2014 "),Xz=a("a"),air=o("TFLongformerModel"),nir=o(" (Longformer model)"),sir=l(),aT=a("li"),j2e=a("strong"),lir=o("lxmert"),iir=o(" \u2014 "),zz=a("a"),dir=o("TFLxmertModel"),cir=o(" (LXMERT model)"),fir=l(),nT=a("li"),D2e=a("strong"),mir=o("marian"),gir=o(" \u2014 "),Wz=a("a"),hir=o("TFMarianModel"),pir=o(" (Marian model)"),uir=l(),sT=a("li"),G2e=a("strong"),_ir=o("mbart"),bir=o(" \u2014 "),Qz=a("a"),vir=o("TFMBartModel"),Fir=o(" (mBART model)"),Tir=l(),lT=a("li"),O2e=a("strong"),Mir=o("mobilebert"),Eir=o(" \u2014 "),Hz=a("a"),Cir=o("TFMobileBertModel"),wir=o(" (MobileBERT model)"),Air=l(),iT=a("li"),V2e=a("strong"),yir=o("mpnet"),Lir=o(" \u2014 "),Uz=a("a"),xir=o("TFMPNetModel"),$ir=o(" (MPNet model)"),kir=l(),dT=a("li"),X2e=a("strong"),Sir=o("mt5"),Rir=o(" \u2014 "),Jz=a("a"),Pir=o("TFMT5Model"),Bir=o(" (mT5 model)"),Iir=l(),cT=a("li"),z2e=a("strong"),qir=o("openai-gpt"),Nir=o(" \u2014 "),Yz=a("a"),jir=o("TFOpenAIGPTModel"),Dir=o(" (OpenAI GPT model)"),Gir=l(),fT=a("li"),W2e=a("strong"),Oir=o("pegasus"),Vir=o(" \u2014 "),Kz=a("a"),Xir=o("TFPegasusModel"),zir=o(" (Pegasus model)"),Wir=l(),mT=a("li"),Q2e=a("strong"),Qir=o("rembert"),Hir=o(" \u2014 "),Zz=a("a"),Uir=o("TFRemBertModel"),Jir=o(" (RemBERT model)"),Yir=l(),gT=a("li"),H2e=a("strong"),Kir=o("roberta"),Zir=o(" \u2014 "),eW=a("a"),edr=o("TFRobertaModel"),odr=o(" (RoBERTa model)"),rdr=l(),hT=a("li"),U2e=a("strong"),tdr=o("roformer"),adr=o(" \u2014 "),oW=a("a"),ndr=o("TFRoFormerModel"),sdr=o(" (RoFormer model)"),ldr=l(),pT=a("li"),J2e=a("strong"),idr=o("speech_to_text"),ddr=o(" \u2014 "),rW=a("a"),cdr=o("TFSpeech2TextModel"),fdr=o(" (Speech2Text model)"),mdr=l(),uT=a("li"),Y2e=a("strong"),gdr=o("swin"),hdr=o(" \u2014 "),tW=a("a"),pdr=o("TFSwinModel"),udr=o(" (Swin model)"),_dr=l(),_T=a("li"),K2e=a("strong"),bdr=o("t5"),vdr=o(" \u2014 "),aW=a("a"),Fdr=o("TFT5Model"),Tdr=o(" (T5 model)"),Mdr=l(),bT=a("li"),Z2e=a("strong"),Edr=o("tapas"),Cdr=o(" \u2014 "),nW=a("a"),wdr=o("TFTapasModel"),Adr=o(" (TAPAS model)"),ydr=l(),vT=a("li"),e1e=a("strong"),Ldr=o("transfo-xl"),xdr=o(" \u2014 "),sW=a("a"),$dr=o("TFTransfoXLModel"),kdr=o(" (Transformer-XL model)"),Sdr=l(),FT=a("li"),o1e=a("strong"),Rdr=o("vit"),Pdr=o(" \u2014 "),lW=a("a"),Bdr=o("TFViTModel"),Idr=o(" (ViT model)"),qdr=l(),TT=a("li"),r1e=a("strong"),Ndr=o("vit_mae"),jdr=o(" \u2014 "),iW=a("a"),Ddr=o("TFViTMAEModel"),Gdr=o(" (ViTMAE model)"),Odr=l(),MT=a("li"),t1e=a("strong"),Vdr=o("wav2vec2"),Xdr=o(" \u2014 "),dW=a("a"),zdr=o("TFWav2Vec2Model"),Wdr=o(" (Wav2Vec2 model)"),Qdr=l(),ET=a("li"),a1e=a("strong"),Hdr=o("xlm"),Udr=o(" \u2014 "),cW=a("a"),Jdr=o("TFXLMModel"),Ydr=o(" (XLM model)"),Kdr=l(),CT=a("li"),n1e=a("strong"),Zdr=o("xlm-roberta"),ecr=o(" \u2014 "),fW=a("a"),ocr=o("TFXLMRobertaModel"),rcr=o(" (XLM-RoBERTa model)"),tcr=l(),wT=a("li"),s1e=a("strong"),acr=o("xlnet"),ncr=o(" \u2014 "),mW=a("a"),scr=o("TFXLNetModel"),lcr=o(" (XLNet model)"),icr=l(),F(AT.$$.fragment),Sqe=l(),Vd=a("h2"),yT=a("a"),l1e=a("span"),F(QL.$$.fragment),dcr=l(),i1e=a("span"),ccr=o("TFAutoModelForPreTraining"),Rqe=l(),Ko=a("div"),F(HL.$$.fragment),fcr=l(),Xd=a("p"),mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gW=a("a"),gcr=o("from_pretrained()"),hcr=o(" class method or the "),hW=a("a"),pcr=o("from_config()"),ucr=o(` class
method.`),_cr=l(),UL=a("p"),bcr=o("This class cannot be instantiated directly using "),d1e=a("code"),vcr=o("__init__()"),Fcr=o(" (throws an error)."),Tcr=l(),Lt=a("div"),F(JL.$$.fragment),Mcr=l(),c1e=a("p"),Ecr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ccr=l(),zd=a("p"),wcr=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),Acr=o("not"),ycr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),Lcr=o("from_pretrained()"),xcr=o(" to load the model weights."),$cr=l(),F(LT.$$.fragment),kcr=l(),Ar=a("div"),F(YL.$$.fragment),Scr=l(),m1e=a("p"),Rcr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pcr=l(),Za=a("p"),Bcr=o("The model class to instantiate is selected based on the "),g1e=a("code"),Icr=o("model_type"),qcr=o(` property of the config object (either
passed as an argument or loaded from `),h1e=a("code"),Ncr=o("pretrained_model_name_or_path"),jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(":"),Ocr=l(),se=a("ul"),xT=a("li"),u1e=a("strong"),Vcr=o("albert"),Xcr=o(" \u2014 "),uW=a("a"),zcr=o("TFAlbertForPreTraining"),Wcr=o(" (ALBERT model)"),Qcr=l(),$T=a("li"),_1e=a("strong"),Hcr=o("bart"),Ucr=o(" \u2014 "),_W=a("a"),Jcr=o("TFBartForConditionalGeneration"),Ycr=o(" (BART model)"),Kcr=l(),kT=a("li"),b1e=a("strong"),Zcr=o("bert"),efr=o(" \u2014 "),bW=a("a"),ofr=o("TFBertForPreTraining"),rfr=o(" (BERT model)"),tfr=l(),ST=a("li"),v1e=a("strong"),afr=o("camembert"),nfr=o(" \u2014 "),vW=a("a"),sfr=o("TFCamembertForMaskedLM"),lfr=o(" (CamemBERT model)"),ifr=l(),RT=a("li"),F1e=a("strong"),dfr=o("ctrl"),cfr=o(" \u2014 "),FW=a("a"),ffr=o("TFCTRLLMHeadModel"),mfr=o(" (CTRL model)"),gfr=l(),PT=a("li"),T1e=a("strong"),hfr=o("distilbert"),pfr=o(" \u2014 "),TW=a("a"),ufr=o("TFDistilBertForMaskedLM"),_fr=o(" (DistilBERT model)"),bfr=l(),BT=a("li"),M1e=a("strong"),vfr=o("electra"),Ffr=o(" \u2014 "),MW=a("a"),Tfr=o("TFElectraForPreTraining"),Mfr=o(" (ELECTRA model)"),Efr=l(),IT=a("li"),E1e=a("strong"),Cfr=o("flaubert"),wfr=o(" \u2014 "),EW=a("a"),Afr=o("TFFlaubertWithLMHeadModel"),yfr=o(" (FlauBERT model)"),Lfr=l(),qT=a("li"),C1e=a("strong"),xfr=o("funnel"),$fr=o(" \u2014 "),CW=a("a"),kfr=o("TFFunnelForPreTraining"),Sfr=o(" (Funnel Transformer model)"),Rfr=l(),NT=a("li"),w1e=a("strong"),Pfr=o("gpt2"),Bfr=o(" \u2014 "),wW=a("a"),Ifr=o("TFGPT2LMHeadModel"),qfr=o(" (OpenAI GPT-2 model)"),Nfr=l(),jT=a("li"),A1e=a("strong"),jfr=o("layoutlm"),Dfr=o(" \u2014 "),AW=a("a"),Gfr=o("TFLayoutLMForMaskedLM"),Ofr=o(" (LayoutLM model)"),Vfr=l(),DT=a("li"),y1e=a("strong"),Xfr=o("lxmert"),zfr=o(" \u2014 "),yW=a("a"),Wfr=o("TFLxmertForPreTraining"),Qfr=o(" (LXMERT model)"),Hfr=l(),GT=a("li"),L1e=a("strong"),Ufr=o("mobilebert"),Jfr=o(" \u2014 "),LW=a("a"),Yfr=o("TFMobileBertForPreTraining"),Kfr=o(" (MobileBERT model)"),Zfr=l(),OT=a("li"),x1e=a("strong"),emr=o("mpnet"),omr=o(" \u2014 "),xW=a("a"),rmr=o("TFMPNetForMaskedLM"),tmr=o(" (MPNet model)"),amr=l(),VT=a("li"),$1e=a("strong"),nmr=o("openai-gpt"),smr=o(" \u2014 "),$W=a("a"),lmr=o("TFOpenAIGPTLMHeadModel"),imr=o(" (OpenAI GPT model)"),dmr=l(),XT=a("li"),k1e=a("strong"),cmr=o("roberta"),fmr=o(" \u2014 "),kW=a("a"),mmr=o("TFRobertaForMaskedLM"),gmr=o(" (RoBERTa model)"),hmr=l(),zT=a("li"),S1e=a("strong"),pmr=o("t5"),umr=o(" \u2014 "),SW=a("a"),_mr=o("TFT5ForConditionalGeneration"),bmr=o(" (T5 model)"),vmr=l(),WT=a("li"),R1e=a("strong"),Fmr=o("tapas"),Tmr=o(" \u2014 "),RW=a("a"),Mmr=o("TFTapasForMaskedLM"),Emr=o(" (TAPAS model)"),Cmr=l(),QT=a("li"),P1e=a("strong"),wmr=o("transfo-xl"),Amr=o(" \u2014 "),PW=a("a"),ymr=o("TFTransfoXLLMHeadModel"),Lmr=o(" (Transformer-XL model)"),xmr=l(),HT=a("li"),B1e=a("strong"),$mr=o("vit_mae"),kmr=o(" \u2014 "),BW=a("a"),Smr=o("TFViTMAEForPreTraining"),Rmr=o(" (ViTMAE model)"),Pmr=l(),UT=a("li"),I1e=a("strong"),Bmr=o("xlm"),Imr=o(" \u2014 "),IW=a("a"),qmr=o("TFXLMWithLMHeadModel"),Nmr=o(" (XLM model)"),jmr=l(),JT=a("li"),q1e=a("strong"),Dmr=o("xlm-roberta"),Gmr=o(" \u2014 "),qW=a("a"),Omr=o("TFXLMRobertaForMaskedLM"),Vmr=o(" (XLM-RoBERTa model)"),Xmr=l(),YT=a("li"),N1e=a("strong"),zmr=o("xlnet"),Wmr=o(" \u2014 "),NW=a("a"),Qmr=o("TFXLNetLMHeadModel"),Hmr=o(" (XLNet model)"),Umr=l(),F(KT.$$.fragment),Pqe=l(),Wd=a("h2"),ZT=a("a"),j1e=a("span"),F(KL.$$.fragment),Jmr=l(),D1e=a("span"),Ymr=o("TFAutoModelForCausalLM"),Bqe=l(),Zo=a("div"),F(ZL.$$.fragment),Kmr=l(),Qd=a("p"),Zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jW=a("a"),egr=o("from_pretrained()"),ogr=o(" class method or the "),DW=a("a"),rgr=o("from_config()"),tgr=o(` class
method.`),agr=l(),e8=a("p"),ngr=o("This class cannot be instantiated directly using "),G1e=a("code"),sgr=o("__init__()"),lgr=o(" (throws an error)."),igr=l(),xt=a("div"),F(o8.$$.fragment),dgr=l(),O1e=a("p"),cgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fgr=l(),Hd=a("p"),mgr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),ggr=o("not"),hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),pgr=o("from_pretrained()"),ugr=o(" to load the model weights."),_gr=l(),F(e7.$$.fragment),bgr=l(),yr=a("div"),F(r8.$$.fragment),vgr=l(),X1e=a("p"),Fgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tgr=l(),en=a("p"),Mgr=o("The model class to instantiate is selected based on the "),z1e=a("code"),Egr=o("model_type"),Cgr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),ygr=o("pretrained_model_name_or_path"),Lgr=o(":"),xgr=l(),Te=a("ul"),o7=a("li"),H1e=a("strong"),$gr=o("bert"),kgr=o(" \u2014 "),OW=a("a"),Sgr=o("TFBertLMHeadModel"),Rgr=o(" (BERT model)"),Pgr=l(),r7=a("li"),U1e=a("strong"),Bgr=o("camembert"),Igr=o(" \u2014 "),VW=a("a"),qgr=o("TFCamembertForCausalLM"),Ngr=o(" (CamemBERT model)"),jgr=l(),t7=a("li"),J1e=a("strong"),Dgr=o("ctrl"),Ggr=o(" \u2014 "),XW=a("a"),Ogr=o("TFCTRLLMHeadModel"),Vgr=o(" (CTRL model)"),Xgr=l(),a7=a("li"),Y1e=a("strong"),zgr=o("gpt2"),Wgr=o(" \u2014 "),zW=a("a"),Qgr=o("TFGPT2LMHeadModel"),Hgr=o(" (OpenAI GPT-2 model)"),Ugr=l(),n7=a("li"),K1e=a("strong"),Jgr=o("gptj"),Ygr=o(" \u2014 "),WW=a("a"),Kgr=o("TFGPTJForCausalLM"),Zgr=o(" (GPT-J model)"),ehr=l(),s7=a("li"),Z1e=a("strong"),ohr=o("openai-gpt"),rhr=o(" \u2014 "),QW=a("a"),thr=o("TFOpenAIGPTLMHeadModel"),ahr=o(" (OpenAI GPT model)"),nhr=l(),l7=a("li"),ebe=a("strong"),shr=o("rembert"),lhr=o(" \u2014 "),HW=a("a"),ihr=o("TFRemBertForCausalLM"),dhr=o(" (RemBERT model)"),chr=l(),i7=a("li"),obe=a("strong"),fhr=o("roberta"),mhr=o(" \u2014 "),UW=a("a"),ghr=o("TFRobertaForCausalLM"),hhr=o(" (RoBERTa model)"),phr=l(),d7=a("li"),rbe=a("strong"),uhr=o("roformer"),_hr=o(" \u2014 "),JW=a("a"),bhr=o("TFRoFormerForCausalLM"),vhr=o(" (RoFormer model)"),Fhr=l(),c7=a("li"),tbe=a("strong"),Thr=o("transfo-xl"),Mhr=o(" \u2014 "),YW=a("a"),Ehr=o("TFTransfoXLLMHeadModel"),Chr=o(" (Transformer-XL model)"),whr=l(),f7=a("li"),abe=a("strong"),Ahr=o("xlm"),yhr=o(" \u2014 "),KW=a("a"),Lhr=o("TFXLMWithLMHeadModel"),xhr=o(" (XLM model)"),$hr=l(),m7=a("li"),nbe=a("strong"),khr=o("xlnet"),Shr=o(" \u2014 "),ZW=a("a"),Rhr=o("TFXLNetLMHeadModel"),Phr=o(" (XLNet model)"),Bhr=l(),F(g7.$$.fragment),Iqe=l(),Ud=a("h2"),h7=a("a"),sbe=a("span"),F(t8.$$.fragment),Ihr=l(),lbe=a("span"),qhr=o("TFAutoModelForImageClassification"),qqe=l(),er=a("div"),F(a8.$$.fragment),Nhr=l(),Jd=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),oQ=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),n8=a("p"),zhr=o("This class cannot be instantiated directly using "),ibe=a("code"),Whr=o("__init__()"),Qhr=o(" (throws an error)."),Hhr=l(),$t=a("div"),F(s8.$$.fragment),Uhr=l(),dbe=a("p"),Jhr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yhr=l(),Yd=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),Zhr=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(p7.$$.fragment),apr=l(),Lr=a("div"),F(l8.$$.fragment),npr=l(),fbe=a("p"),spr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lpr=l(),on=a("p"),ipr=o("The model class to instantiate is selected based on the "),mbe=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),ppr=l(),rn=a("ul"),u7=a("li"),pbe=a("strong"),upr=o("convnext"),_pr=o(" \u2014 "),tQ=a("a"),bpr=o("TFConvNextForImageClassification"),vpr=o(" (ConvNext model)"),Fpr=l(),_7=a("li"),ube=a("strong"),Tpr=o("data2vec-vision"),Mpr=o(" \u2014 "),aQ=a("a"),Epr=o("TFData2VecVisionForImageClassification"),Cpr=o(" (Data2VecVision model)"),wpr=l(),b7=a("li"),_be=a("strong"),Apr=o("swin"),ypr=o(" \u2014 "),nQ=a("a"),Lpr=o("TFSwinForImageClassification"),xpr=o(" (Swin model)"),$pr=l(),v7=a("li"),bbe=a("strong"),kpr=o("vit"),Spr=o(" \u2014 "),sQ=a("a"),Rpr=o("TFViTForImageClassification"),Ppr=o(" (ViT model)"),Bpr=l(),F(F7.$$.fragment),Nqe=l(),Kd=a("h2"),T7=a("a"),vbe=a("span"),F(i8.$$.fragment),Ipr=l(),Fbe=a("span"),qpr=o("TFAutoModelForMaskedLM"),jqe=l(),or=a("div"),F(d8.$$.fragment),Npr=l(),Zd=a("p"),jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lQ=a("a"),Dpr=o("from_pretrained()"),Gpr=o(" class method or the "),iQ=a("a"),Opr=o("from_config()"),Vpr=o(` class
method.`),Xpr=l(),c8=a("p"),zpr=o("This class cannot be instantiated directly using "),Tbe=a("code"),Wpr=o("__init__()"),Qpr=o(" (throws an error)."),Hpr=l(),kt=a("div"),F(f8.$$.fragment),Upr=l(),Mbe=a("p"),Jpr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ypr=l(),ec=a("p"),Kpr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),Zpr=o("not"),eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),our=o("from_pretrained()"),rur=o(" to load the model weights."),tur=l(),F(M7.$$.fragment),aur=l(),xr=a("div"),F(m8.$$.fragment),nur=l(),Cbe=a("p"),sur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lur=l(),tn=a("p"),iur=o("The model class to instantiate is selected based on the "),wbe=a("code"),dur=o("model_type"),cur=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),fur=o("pretrained_model_name_or_path"),mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(":"),pur=l(),ie=a("ul"),E7=a("li"),Lbe=a("strong"),uur=o("albert"),_ur=o(" \u2014 "),cQ=a("a"),bur=o("TFAlbertForMaskedLM"),vur=o(" (ALBERT model)"),Fur=l(),C7=a("li"),xbe=a("strong"),Tur=o("bert"),Mur=o(" \u2014 "),fQ=a("a"),Eur=o("TFBertForMaskedLM"),Cur=o(" (BERT model)"),wur=l(),w7=a("li"),$be=a("strong"),Aur=o("camembert"),yur=o(" \u2014 "),mQ=a("a"),Lur=o("TFCamembertForMaskedLM"),xur=o(" (CamemBERT model)"),$ur=l(),A7=a("li"),kbe=a("strong"),kur=o("convbert"),Sur=o(" \u2014 "),gQ=a("a"),Rur=o("TFConvBertForMaskedLM"),Pur=o(" (ConvBERT model)"),Bur=l(),y7=a("li"),Sbe=a("strong"),Iur=o("deberta"),qur=o(" \u2014 "),hQ=a("a"),Nur=o("TFDebertaForMaskedLM"),jur=o(" (DeBERTa model)"),Dur=l(),L7=a("li"),Rbe=a("strong"),Gur=o("deberta-v2"),Our=o(" \u2014 "),pQ=a("a"),Vur=o("TFDebertaV2ForMaskedLM"),Xur=o(" (DeBERTa-v2 model)"),zur=l(),x7=a("li"),Pbe=a("strong"),Wur=o("distilbert"),Qur=o(" \u2014 "),uQ=a("a"),Hur=o("TFDistilBertForMaskedLM"),Uur=o(" (DistilBERT model)"),Jur=l(),$7=a("li"),Bbe=a("strong"),Yur=o("electra"),Kur=o(" \u2014 "),_Q=a("a"),Zur=o("TFElectraForMaskedLM"),e_r=o(" (ELECTRA model)"),o_r=l(),k7=a("li"),Ibe=a("strong"),r_r=o("flaubert"),t_r=o(" \u2014 "),bQ=a("a"),a_r=o("TFFlaubertWithLMHeadModel"),n_r=o(" (FlauBERT model)"),s_r=l(),S7=a("li"),qbe=a("strong"),l_r=o("funnel"),i_r=o(" \u2014 "),vQ=a("a"),d_r=o("TFFunnelForMaskedLM"),c_r=o(" (Funnel Transformer model)"),f_r=l(),R7=a("li"),Nbe=a("strong"),m_r=o("layoutlm"),g_r=o(" \u2014 "),FQ=a("a"),h_r=o("TFLayoutLMForMaskedLM"),p_r=o(" (LayoutLM model)"),u_r=l(),P7=a("li"),jbe=a("strong"),__r=o("longformer"),b_r=o(" \u2014 "),TQ=a("a"),v_r=o("TFLongformerForMaskedLM"),F_r=o(" (Longformer model)"),T_r=l(),B7=a("li"),Dbe=a("strong"),M_r=o("mobilebert"),E_r=o(" \u2014 "),MQ=a("a"),C_r=o("TFMobileBertForMaskedLM"),w_r=o(" (MobileBERT model)"),A_r=l(),I7=a("li"),Gbe=a("strong"),y_r=o("mpnet"),L_r=o(" \u2014 "),EQ=a("a"),x_r=o("TFMPNetForMaskedLM"),$_r=o(" (MPNet model)"),k_r=l(),q7=a("li"),Obe=a("strong"),S_r=o("rembert"),R_r=o(" \u2014 "),CQ=a("a"),P_r=o("TFRemBertForMaskedLM"),B_r=o(" (RemBERT model)"),I_r=l(),N7=a("li"),Vbe=a("strong"),q_r=o("roberta"),N_r=o(" \u2014 "),wQ=a("a"),j_r=o("TFRobertaForMaskedLM"),D_r=o(" (RoBERTa model)"),G_r=l(),j7=a("li"),Xbe=a("strong"),O_r=o("roformer"),V_r=o(" \u2014 "),AQ=a("a"),X_r=o("TFRoFormerForMaskedLM"),z_r=o(" (RoFormer model)"),W_r=l(),D7=a("li"),zbe=a("strong"),Q_r=o("tapas"),H_r=o(" \u2014 "),yQ=a("a"),U_r=o("TFTapasForMaskedLM"),J_r=o(" (TAPAS model)"),Y_r=l(),G7=a("li"),Wbe=a("strong"),K_r=o("xlm"),Z_r=o(" \u2014 "),LQ=a("a"),e2r=o("TFXLMWithLMHeadModel"),o2r=o(" (XLM model)"),r2r=l(),O7=a("li"),Qbe=a("strong"),t2r=o("xlm-roberta"),a2r=o(" \u2014 "),xQ=a("a"),n2r=o("TFXLMRobertaForMaskedLM"),s2r=o(" (XLM-RoBERTa model)"),l2r=l(),F(V7.$$.fragment),Dqe=l(),oc=a("h2"),X7=a("a"),Hbe=a("span"),F(g8.$$.fragment),i2r=l(),Ube=a("span"),d2r=o("TFAutoModelForSeq2SeqLM"),Gqe=l(),rr=a("div"),F(h8.$$.fragment),c2r=l(),rc=a("p"),f2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Q=a("a"),m2r=o("from_pretrained()"),g2r=o(" class method or the "),kQ=a("a"),h2r=o("from_config()"),p2r=o(` class
method.`),u2r=l(),p8=a("p"),_2r=o("This class cannot be instantiated directly using "),Jbe=a("code"),b2r=o("__init__()"),v2r=o(" (throws an error)."),F2r=l(),St=a("div"),F(u8.$$.fragment),T2r=l(),Ybe=a("p"),M2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E2r=l(),tc=a("p"),C2r=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),w2r=o("not"),A2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),y2r=o("from_pretrained()"),L2r=o(" to load the model weights."),x2r=l(),F(z7.$$.fragment),$2r=l(),$r=a("div"),F(_8.$$.fragment),k2r=l(),Zbe=a("p"),S2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R2r=l(),an=a("p"),P2r=o("The model class to instantiate is selected based on the "),eve=a("code"),B2r=o("model_type"),I2r=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),q2r=o("pretrained_model_name_or_path"),N2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(":"),G2r=l(),ye=a("ul"),W7=a("li"),tve=a("strong"),O2r=o("bart"),V2r=o(" \u2014 "),RQ=a("a"),X2r=o("TFBartForConditionalGeneration"),z2r=o(" (BART model)"),W2r=l(),Q7=a("li"),ave=a("strong"),Q2r=o("blenderbot"),H2r=o(" \u2014 "),PQ=a("a"),U2r=o("TFBlenderbotForConditionalGeneration"),J2r=o(" (Blenderbot model)"),Y2r=l(),H7=a("li"),nve=a("strong"),K2r=o("blenderbot-small"),Z2r=o(" \u2014 "),BQ=a("a"),e1r=o("TFBlenderbotSmallForConditionalGeneration"),o1r=o(" (BlenderbotSmall model)"),r1r=l(),U7=a("li"),sve=a("strong"),t1r=o("encoder-decoder"),a1r=o(" \u2014 "),IQ=a("a"),n1r=o("TFEncoderDecoderModel"),s1r=o(" (Encoder decoder model)"),l1r=l(),J7=a("li"),lve=a("strong"),i1r=o("led"),d1r=o(" \u2014 "),qQ=a("a"),c1r=o("TFLEDForConditionalGeneration"),f1r=o(" (LED model)"),m1r=l(),Y7=a("li"),ive=a("strong"),g1r=o("marian"),h1r=o(" \u2014 "),NQ=a("a"),p1r=o("TFMarianMTModel"),u1r=o(" (Marian model)"),_1r=l(),K7=a("li"),dve=a("strong"),b1r=o("mbart"),v1r=o(" \u2014 "),jQ=a("a"),F1r=o("TFMBartForConditionalGeneration"),T1r=o(" (mBART model)"),M1r=l(),Z7=a("li"),cve=a("strong"),E1r=o("mt5"),C1r=o(" \u2014 "),DQ=a("a"),w1r=o("TFMT5ForConditionalGeneration"),A1r=o(" (mT5 model)"),y1r=l(),eM=a("li"),fve=a("strong"),L1r=o("pegasus"),x1r=o(" \u2014 "),GQ=a("a"),$1r=o("TFPegasusForConditionalGeneration"),k1r=o(" (Pegasus model)"),S1r=l(),oM=a("li"),mve=a("strong"),R1r=o("t5"),P1r=o(" \u2014 "),OQ=a("a"),B1r=o("TFT5ForConditionalGeneration"),I1r=o(" (T5 model)"),q1r=l(),F(rM.$$.fragment),Oqe=l(),ac=a("h2"),tM=a("a"),gve=a("span"),F(b8.$$.fragment),N1r=l(),hve=a("span"),j1r=o("TFAutoModelForSequenceClassification"),Vqe=l(),tr=a("div"),F(v8.$$.fragment),D1r=l(),nc=a("p"),G1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VQ=a("a"),O1r=o("from_pretrained()"),V1r=o(" class method or the "),XQ=a("a"),X1r=o("from_config()"),z1r=o(` class
method.`),W1r=l(),F8=a("p"),Q1r=o("This class cannot be instantiated directly using "),pve=a("code"),H1r=o("__init__()"),U1r=o(" (throws an error)."),J1r=l(),Rt=a("div"),F(T8.$$.fragment),Y1r=l(),uve=a("p"),K1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z1r=l(),sc=a("p"),ebr=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),obr=o("not"),rbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),tbr=o("from_pretrained()"),abr=o(" to load the model weights."),nbr=l(),F(aM.$$.fragment),sbr=l(),kr=a("div"),F(M8.$$.fragment),lbr=l(),bve=a("p"),ibr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dbr=l(),nn=a("p"),cbr=o("The model class to instantiate is selected based on the "),vve=a("code"),fbr=o("model_type"),mbr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),gbr=o("pretrained_model_name_or_path"),hbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),pbr=o("pretrained_model_name_or_path"),ubr=o(":"),_br=l(),ee=a("ul"),nM=a("li"),Mve=a("strong"),bbr=o("albert"),vbr=o(" \u2014 "),WQ=a("a"),Fbr=o("TFAlbertForSequenceClassification"),Tbr=o(" (ALBERT model)"),Mbr=l(),sM=a("li"),Eve=a("strong"),Ebr=o("bert"),Cbr=o(" \u2014 "),QQ=a("a"),wbr=o("TFBertForSequenceClassification"),Abr=o(" (BERT model)"),ybr=l(),lM=a("li"),Cve=a("strong"),Lbr=o("camembert"),xbr=o(" \u2014 "),HQ=a("a"),$br=o("TFCamembertForSequenceClassification"),kbr=o(" (CamemBERT model)"),Sbr=l(),iM=a("li"),wve=a("strong"),Rbr=o("convbert"),Pbr=o(" \u2014 "),UQ=a("a"),Bbr=o("TFConvBertForSequenceClassification"),Ibr=o(" (ConvBERT model)"),qbr=l(),dM=a("li"),Ave=a("strong"),Nbr=o("ctrl"),jbr=o(" \u2014 "),JQ=a("a"),Dbr=o("TFCTRLForSequenceClassification"),Gbr=o(" (CTRL model)"),Obr=l(),cM=a("li"),yve=a("strong"),Vbr=o("deberta"),Xbr=o(" \u2014 "),YQ=a("a"),zbr=o("TFDebertaForSequenceClassification"),Wbr=o(" (DeBERTa model)"),Qbr=l(),fM=a("li"),Lve=a("strong"),Hbr=o("deberta-v2"),Ubr=o(" \u2014 "),KQ=a("a"),Jbr=o("TFDebertaV2ForSequenceClassification"),Ybr=o(" (DeBERTa-v2 model)"),Kbr=l(),mM=a("li"),xve=a("strong"),Zbr=o("distilbert"),evr=o(" \u2014 "),ZQ=a("a"),ovr=o("TFDistilBertForSequenceClassification"),rvr=o(" (DistilBERT model)"),tvr=l(),gM=a("li"),$ve=a("strong"),avr=o("electra"),nvr=o(" \u2014 "),eH=a("a"),svr=o("TFElectraForSequenceClassification"),lvr=o(" (ELECTRA model)"),ivr=l(),hM=a("li"),kve=a("strong"),dvr=o("flaubert"),cvr=o(" \u2014 "),oH=a("a"),fvr=o("TFFlaubertForSequenceClassification"),mvr=o(" (FlauBERT model)"),gvr=l(),pM=a("li"),Sve=a("strong"),hvr=o("funnel"),pvr=o(" \u2014 "),rH=a("a"),uvr=o("TFFunnelForSequenceClassification"),_vr=o(" (Funnel Transformer model)"),bvr=l(),uM=a("li"),Rve=a("strong"),vvr=o("gpt2"),Fvr=o(" \u2014 "),tH=a("a"),Tvr=o("TFGPT2ForSequenceClassification"),Mvr=o(" (OpenAI GPT-2 model)"),Evr=l(),_M=a("li"),Pve=a("strong"),Cvr=o("gptj"),wvr=o(" \u2014 "),aH=a("a"),Avr=o("TFGPTJForSequenceClassification"),yvr=o(" (GPT-J model)"),Lvr=l(),bM=a("li"),Bve=a("strong"),xvr=o("layoutlm"),$vr=o(" \u2014 "),nH=a("a"),kvr=o("TFLayoutLMForSequenceClassification"),Svr=o(" (LayoutLM model)"),Rvr=l(),vM=a("li"),Ive=a("strong"),Pvr=o("longformer"),Bvr=o(" \u2014 "),sH=a("a"),Ivr=o("TFLongformerForSequenceClassification"),qvr=o(" (Longformer model)"),Nvr=l(),FM=a("li"),qve=a("strong"),jvr=o("mobilebert"),Dvr=o(" \u2014 "),lH=a("a"),Gvr=o("TFMobileBertForSequenceClassification"),Ovr=o(" (MobileBERT model)"),Vvr=l(),TM=a("li"),Nve=a("strong"),Xvr=o("mpnet"),zvr=o(" \u2014 "),iH=a("a"),Wvr=o("TFMPNetForSequenceClassification"),Qvr=o(" (MPNet model)"),Hvr=l(),MM=a("li"),jve=a("strong"),Uvr=o("openai-gpt"),Jvr=o(" \u2014 "),dH=a("a"),Yvr=o("TFOpenAIGPTForSequenceClassification"),Kvr=o(" (OpenAI GPT model)"),Zvr=l(),EM=a("li"),Dve=a("strong"),eFr=o("rembert"),oFr=o(" \u2014 "),cH=a("a"),rFr=o("TFRemBertForSequenceClassification"),tFr=o(" (RemBERT model)"),aFr=l(),CM=a("li"),Gve=a("strong"),nFr=o("roberta"),sFr=o(" \u2014 "),fH=a("a"),lFr=o("TFRobertaForSequenceClassification"),iFr=o(" (RoBERTa model)"),dFr=l(),wM=a("li"),Ove=a("strong"),cFr=o("roformer"),fFr=o(" \u2014 "),mH=a("a"),mFr=o("TFRoFormerForSequenceClassification"),gFr=o(" (RoFormer model)"),hFr=l(),AM=a("li"),Vve=a("strong"),pFr=o("tapas"),uFr=o(" \u2014 "),gH=a("a"),_Fr=o("TFTapasForSequenceClassification"),bFr=o(" (TAPAS model)"),vFr=l(),yM=a("li"),Xve=a("strong"),FFr=o("transfo-xl"),TFr=o(" \u2014 "),hH=a("a"),MFr=o("TFTransfoXLForSequenceClassification"),EFr=o(" (Transformer-XL model)"),CFr=l(),LM=a("li"),zve=a("strong"),wFr=o("xlm"),AFr=o(" \u2014 "),pH=a("a"),yFr=o("TFXLMForSequenceClassification"),LFr=o(" (XLM model)"),xFr=l(),xM=a("li"),Wve=a("strong"),$Fr=o("xlm-roberta"),kFr=o(" \u2014 "),uH=a("a"),SFr=o("TFXLMRobertaForSequenceClassification"),RFr=o(" (XLM-RoBERTa model)"),PFr=l(),$M=a("li"),Qve=a("strong"),BFr=o("xlnet"),IFr=o(" \u2014 "),_H=a("a"),qFr=o("TFXLNetForSequenceClassification"),NFr=o(" (XLNet model)"),jFr=l(),F(kM.$$.fragment),Xqe=l(),lc=a("h2"),SM=a("a"),Hve=a("span"),F(E8.$$.fragment),DFr=l(),Uve=a("span"),GFr=o("TFAutoModelForMultipleChoice"),zqe=l(),ar=a("div"),F(C8.$$.fragment),OFr=l(),ic=a("p"),VFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=a("a"),XFr=o("from_pretrained()"),zFr=o(" class method or the "),vH=a("a"),WFr=o("from_config()"),QFr=o(` class
method.`),HFr=l(),w8=a("p"),UFr=o("This class cannot be instantiated directly using "),Jve=a("code"),JFr=o("__init__()"),YFr=o(" (throws an error)."),KFr=l(),Pt=a("div"),F(A8.$$.fragment),ZFr=l(),Yve=a("p"),e6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o6r=l(),dc=a("p"),r6r=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),t6r=o("not"),a6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),n6r=o("from_pretrained()"),s6r=o(" to load the model weights."),l6r=l(),F(RM.$$.fragment),i6r=l(),Sr=a("div"),F(y8.$$.fragment),d6r=l(),Zve=a("p"),c6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),f6r=l(),sn=a("p"),m6r=o("The model class to instantiate is selected based on the "),eFe=a("code"),g6r=o("model_type"),h6r=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),p6r=o("pretrained_model_name_or_path"),u6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),_6r=o("pretrained_model_name_or_path"),b6r=o(":"),v6r=l(),he=a("ul"),PM=a("li"),tFe=a("strong"),F6r=o("albert"),T6r=o(" \u2014 "),TH=a("a"),M6r=o("TFAlbertForMultipleChoice"),E6r=o(" (ALBERT model)"),C6r=l(),BM=a("li"),aFe=a("strong"),w6r=o("bert"),A6r=o(" \u2014 "),MH=a("a"),y6r=o("TFBertForMultipleChoice"),L6r=o(" (BERT model)"),x6r=l(),IM=a("li"),nFe=a("strong"),$6r=o("camembert"),k6r=o(" \u2014 "),EH=a("a"),S6r=o("TFCamembertForMultipleChoice"),R6r=o(" (CamemBERT model)"),P6r=l(),qM=a("li"),sFe=a("strong"),B6r=o("convbert"),I6r=o(" \u2014 "),CH=a("a"),q6r=o("TFConvBertForMultipleChoice"),N6r=o(" (ConvBERT model)"),j6r=l(),NM=a("li"),lFe=a("strong"),D6r=o("distilbert"),G6r=o(" \u2014 "),wH=a("a"),O6r=o("TFDistilBertForMultipleChoice"),V6r=o(" (DistilBERT model)"),X6r=l(),jM=a("li"),iFe=a("strong"),z6r=o("electra"),W6r=o(" \u2014 "),AH=a("a"),Q6r=o("TFElectraForMultipleChoice"),H6r=o(" (ELECTRA model)"),U6r=l(),DM=a("li"),dFe=a("strong"),J6r=o("flaubert"),Y6r=o(" \u2014 "),yH=a("a"),K6r=o("TFFlaubertForMultipleChoice"),Z6r=o(" (FlauBERT model)"),e0r=l(),GM=a("li"),cFe=a("strong"),o0r=o("funnel"),r0r=o(" \u2014 "),LH=a("a"),t0r=o("TFFunnelForMultipleChoice"),a0r=o(" (Funnel Transformer model)"),n0r=l(),OM=a("li"),fFe=a("strong"),s0r=o("longformer"),l0r=o(" \u2014 "),xH=a("a"),i0r=o("TFLongformerForMultipleChoice"),d0r=o(" (Longformer model)"),c0r=l(),VM=a("li"),mFe=a("strong"),f0r=o("mobilebert"),m0r=o(" \u2014 "),$H=a("a"),g0r=o("TFMobileBertForMultipleChoice"),h0r=o(" (MobileBERT model)"),p0r=l(),XM=a("li"),gFe=a("strong"),u0r=o("mpnet"),_0r=o(" \u2014 "),kH=a("a"),b0r=o("TFMPNetForMultipleChoice"),v0r=o(" (MPNet model)"),F0r=l(),zM=a("li"),hFe=a("strong"),T0r=o("rembert"),M0r=o(" \u2014 "),SH=a("a"),E0r=o("TFRemBertForMultipleChoice"),C0r=o(" (RemBERT model)"),w0r=l(),WM=a("li"),pFe=a("strong"),A0r=o("roberta"),y0r=o(" \u2014 "),RH=a("a"),L0r=o("TFRobertaForMultipleChoice"),x0r=o(" (RoBERTa model)"),$0r=l(),QM=a("li"),uFe=a("strong"),k0r=o("roformer"),S0r=o(" \u2014 "),PH=a("a"),R0r=o("TFRoFormerForMultipleChoice"),P0r=o(" (RoFormer model)"),B0r=l(),HM=a("li"),_Fe=a("strong"),I0r=o("xlm"),q0r=o(" \u2014 "),BH=a("a"),N0r=o("TFXLMForMultipleChoice"),j0r=o(" (XLM model)"),D0r=l(),UM=a("li"),bFe=a("strong"),G0r=o("xlm-roberta"),O0r=o(" \u2014 "),IH=a("a"),V0r=o("TFXLMRobertaForMultipleChoice"),X0r=o(" (XLM-RoBERTa model)"),z0r=l(),JM=a("li"),vFe=a("strong"),W0r=o("xlnet"),Q0r=o(" \u2014 "),qH=a("a"),H0r=o("TFXLNetForMultipleChoice"),U0r=o(" (XLNet model)"),J0r=l(),F(YM.$$.fragment),Wqe=l(),cc=a("h2"),KM=a("a"),FFe=a("span"),F(L8.$$.fragment),Y0r=l(),TFe=a("span"),K0r=o("TFAutoModelForNextSentencePrediction"),Qqe=l(),nr=a("div"),F(x8.$$.fragment),Z0r=l(),fc=a("p"),eTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NH=a("a"),oTr=o("from_pretrained()"),rTr=o(" class method or the "),jH=a("a"),tTr=o("from_config()"),aTr=o(` class
method.`),nTr=l(),$8=a("p"),sTr=o("This class cannot be instantiated directly using "),MFe=a("code"),lTr=o("__init__()"),iTr=o(" (throws an error)."),dTr=l(),Bt=a("div"),F(k8.$$.fragment),cTr=l(),EFe=a("p"),fTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mTr=l(),mc=a("p"),gTr=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),hTr=o("not"),pTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),uTr=o("from_pretrained()"),_Tr=o(" to load the model weights."),bTr=l(),F(ZM.$$.fragment),vTr=l(),Rr=a("div"),F(S8.$$.fragment),FTr=l(),wFe=a("p"),TTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MTr=l(),ln=a("p"),ETr=o("The model class to instantiate is selected based on the "),AFe=a("code"),CTr=o("model_type"),wTr=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),ATr=o("pretrained_model_name_or_path"),yTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),LTr=o("pretrained_model_name_or_path"),xTr=o(":"),$Tr=l(),R8=a("ul"),e4=a("li"),xFe=a("strong"),kTr=o("bert"),STr=o(" \u2014 "),GH=a("a"),RTr=o("TFBertForNextSentencePrediction"),PTr=o(" (BERT model)"),BTr=l(),o4=a("li"),$Fe=a("strong"),ITr=o("mobilebert"),qTr=o(" \u2014 "),OH=a("a"),NTr=o("TFMobileBertForNextSentencePrediction"),jTr=o(" (MobileBERT model)"),DTr=l(),F(r4.$$.fragment),Hqe=l(),gc=a("h2"),t4=a("a"),kFe=a("span"),F(P8.$$.fragment),GTr=l(),SFe=a("span"),OTr=o("TFAutoModelForTableQuestionAnswering"),Uqe=l(),sr=a("div"),F(B8.$$.fragment),VTr=l(),hc=a("p"),XTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VH=a("a"),zTr=o("from_pretrained()"),WTr=o(" class method or the "),XH=a("a"),QTr=o("from_config()"),HTr=o(` class
method.`),UTr=l(),I8=a("p"),JTr=o("This class cannot be instantiated directly using "),RFe=a("code"),YTr=o("__init__()"),KTr=o(" (throws an error)."),ZTr=l(),It=a("div"),F(q8.$$.fragment),e7r=l(),PFe=a("p"),o7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),r7r=l(),pc=a("p"),t7r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),a7r=o("not"),n7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),s7r=o("from_pretrained()"),l7r=o(" to load the model weights."),i7r=l(),F(a4.$$.fragment),d7r=l(),Pr=a("div"),F(N8.$$.fragment),c7r=l(),IFe=a("p"),f7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),m7r=l(),dn=a("p"),g7r=o("The model class to instantiate is selected based on the "),qFe=a("code"),h7r=o("model_type"),p7r=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),u7r=o("pretrained_model_name_or_path"),_7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(":"),F7r=l(),DFe=a("ul"),n4=a("li"),GFe=a("strong"),T7r=o("tapas"),M7r=o(" \u2014 "),WH=a("a"),E7r=o("TFTapasForQuestionAnswering"),C7r=o(" (TAPAS model)"),w7r=l(),F(s4.$$.fragment),Jqe=l(),uc=a("h2"),l4=a("a"),OFe=a("span"),F(j8.$$.fragment),A7r=l(),VFe=a("span"),y7r=o("TFAutoModelForTokenClassification"),Yqe=l(),lr=a("div"),F(D8.$$.fragment),L7r=l(),_c=a("p"),x7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QH=a("a"),$7r=o("from_pretrained()"),k7r=o(" class method or the "),HH=a("a"),S7r=o("from_config()"),R7r=o(` class
method.`),P7r=l(),G8=a("p"),B7r=o("This class cannot be instantiated directly using "),XFe=a("code"),I7r=o("__init__()"),q7r=o(" (throws an error)."),N7r=l(),qt=a("div"),F(O8.$$.fragment),j7r=l(),zFe=a("p"),D7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G7r=l(),bc=a("p"),O7r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),V7r=o("not"),X7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),z7r=o("from_pretrained()"),W7r=o(" to load the model weights."),Q7r=l(),F(i4.$$.fragment),H7r=l(),Br=a("div"),F(V8.$$.fragment),U7r=l(),QFe=a("p"),J7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y7r=l(),cn=a("p"),K7r=o("The model class to instantiate is selected based on the "),HFe=a("code"),Z7r=o("model_type"),eMr=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),oMr=o("pretrained_model_name_or_path"),rMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),tMr=o("pretrained_model_name_or_path"),aMr=o(":"),nMr=l(),de=a("ul"),d4=a("li"),YFe=a("strong"),sMr=o("albert"),lMr=o(" \u2014 "),JH=a("a"),iMr=o("TFAlbertForTokenClassification"),dMr=o(" (ALBERT model)"),cMr=l(),c4=a("li"),KFe=a("strong"),fMr=o("bert"),mMr=o(" \u2014 "),YH=a("a"),gMr=o("TFBertForTokenClassification"),hMr=o(" (BERT model)"),pMr=l(),f4=a("li"),ZFe=a("strong"),uMr=o("camembert"),_Mr=o(" \u2014 "),KH=a("a"),bMr=o("TFCamembertForTokenClassification"),vMr=o(" (CamemBERT model)"),FMr=l(),m4=a("li"),e6e=a("strong"),TMr=o("convbert"),MMr=o(" \u2014 "),ZH=a("a"),EMr=o("TFConvBertForTokenClassification"),CMr=o(" (ConvBERT model)"),wMr=l(),g4=a("li"),o6e=a("strong"),AMr=o("deberta"),yMr=o(" \u2014 "),eU=a("a"),LMr=o("TFDebertaForTokenClassification"),xMr=o(" (DeBERTa model)"),$Mr=l(),h4=a("li"),r6e=a("strong"),kMr=o("deberta-v2"),SMr=o(" \u2014 "),oU=a("a"),RMr=o("TFDebertaV2ForTokenClassification"),PMr=o(" (DeBERTa-v2 model)"),BMr=l(),p4=a("li"),t6e=a("strong"),IMr=o("distilbert"),qMr=o(" \u2014 "),rU=a("a"),NMr=o("TFDistilBertForTokenClassification"),jMr=o(" (DistilBERT model)"),DMr=l(),u4=a("li"),a6e=a("strong"),GMr=o("electra"),OMr=o(" \u2014 "),tU=a("a"),VMr=o("TFElectraForTokenClassification"),XMr=o(" (ELECTRA model)"),zMr=l(),_4=a("li"),n6e=a("strong"),WMr=o("flaubert"),QMr=o(" \u2014 "),aU=a("a"),HMr=o("TFFlaubertForTokenClassification"),UMr=o(" (FlauBERT model)"),JMr=l(),b4=a("li"),s6e=a("strong"),YMr=o("funnel"),KMr=o(" \u2014 "),nU=a("a"),ZMr=o("TFFunnelForTokenClassification"),e4r=o(" (Funnel Transformer model)"),o4r=l(),v4=a("li"),l6e=a("strong"),r4r=o("layoutlm"),t4r=o(" \u2014 "),sU=a("a"),a4r=o("TFLayoutLMForTokenClassification"),n4r=o(" (LayoutLM model)"),s4r=l(),F4=a("li"),i6e=a("strong"),l4r=o("longformer"),i4r=o(" \u2014 "),lU=a("a"),d4r=o("TFLongformerForTokenClassification"),c4r=o(" (Longformer model)"),f4r=l(),T4=a("li"),d6e=a("strong"),m4r=o("mobilebert"),g4r=o(" \u2014 "),iU=a("a"),h4r=o("TFMobileBertForTokenClassification"),p4r=o(" (MobileBERT model)"),u4r=l(),M4=a("li"),c6e=a("strong"),_4r=o("mpnet"),b4r=o(" \u2014 "),dU=a("a"),v4r=o("TFMPNetForTokenClassification"),F4r=o(" (MPNet model)"),T4r=l(),E4=a("li"),f6e=a("strong"),M4r=o("rembert"),E4r=o(" \u2014 "),cU=a("a"),C4r=o("TFRemBertForTokenClassification"),w4r=o(" (RemBERT model)"),A4r=l(),C4=a("li"),m6e=a("strong"),y4r=o("roberta"),L4r=o(" \u2014 "),fU=a("a"),x4r=o("TFRobertaForTokenClassification"),$4r=o(" (RoBERTa model)"),k4r=l(),w4=a("li"),g6e=a("strong"),S4r=o("roformer"),R4r=o(" \u2014 "),mU=a("a"),P4r=o("TFRoFormerForTokenClassification"),B4r=o(" (RoFormer model)"),I4r=l(),A4=a("li"),h6e=a("strong"),q4r=o("xlm"),N4r=o(" \u2014 "),gU=a("a"),j4r=o("TFXLMForTokenClassification"),D4r=o(" (XLM model)"),G4r=l(),y4=a("li"),p6e=a("strong"),O4r=o("xlm-roberta"),V4r=o(" \u2014 "),hU=a("a"),X4r=o("TFXLMRobertaForTokenClassification"),z4r=o(" (XLM-RoBERTa model)"),W4r=l(),L4=a("li"),u6e=a("strong"),Q4r=o("xlnet"),H4r=o(" \u2014 "),pU=a("a"),U4r=o("TFXLNetForTokenClassification"),J4r=o(" (XLNet model)"),Y4r=l(),F(x4.$$.fragment),Kqe=l(),vc=a("h2"),$4=a("a"),_6e=a("span"),F(X8.$$.fragment),K4r=l(),b6e=a("span"),Z4r=o("TFAutoModelForQuestionAnswering"),Zqe=l(),ir=a("div"),F(z8.$$.fragment),eEr=l(),Fc=a("p"),oEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uU=a("a"),rEr=o("from_pretrained()"),tEr=o(" class method or the "),_U=a("a"),aEr=o("from_config()"),nEr=o(` class
method.`),sEr=l(),W8=a("p"),lEr=o("This class cannot be instantiated directly using "),v6e=a("code"),iEr=o("__init__()"),dEr=o(" (throws an error)."),cEr=l(),Nt=a("div"),F(Q8.$$.fragment),fEr=l(),F6e=a("p"),mEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gEr=l(),Tc=a("p"),hEr=o(`Note:
Loading a model from its configuration file does `),T6e=a("strong"),pEr=o("not"),uEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),_Er=o("from_pretrained()"),bEr=o(" to load the model weights."),vEr=l(),F(k4.$$.fragment),FEr=l(),Ir=a("div"),F(H8.$$.fragment),TEr=l(),M6e=a("p"),MEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EEr=l(),fn=a("p"),CEr=o("The model class to instantiate is selected based on the "),E6e=a("code"),wEr=o("model_type"),AEr=o(` property of the config object (either
passed as an argument or loaded from `),C6e=a("code"),yEr=o("pretrained_model_name_or_path"),LEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=a("code"),xEr=o("pretrained_model_name_or_path"),$Er=o(":"),kEr=l(),ce=a("ul"),S4=a("li"),A6e=a("strong"),SEr=o("albert"),REr=o(" \u2014 "),vU=a("a"),PEr=o("TFAlbertForQuestionAnswering"),BEr=o(" (ALBERT model)"),IEr=l(),R4=a("li"),y6e=a("strong"),qEr=o("bert"),NEr=o(" \u2014 "),FU=a("a"),jEr=o("TFBertForQuestionAnswering"),DEr=o(" (BERT model)"),GEr=l(),P4=a("li"),L6e=a("strong"),OEr=o("camembert"),VEr=o(" \u2014 "),TU=a("a"),XEr=o("TFCamembertForQuestionAnswering"),zEr=o(" (CamemBERT model)"),WEr=l(),B4=a("li"),x6e=a("strong"),QEr=o("convbert"),HEr=o(" \u2014 "),MU=a("a"),UEr=o("TFConvBertForQuestionAnswering"),JEr=o(" (ConvBERT model)"),YEr=l(),I4=a("li"),$6e=a("strong"),KEr=o("deberta"),ZEr=o(" \u2014 "),EU=a("a"),eCr=o("TFDebertaForQuestionAnswering"),oCr=o(" (DeBERTa model)"),rCr=l(),q4=a("li"),k6e=a("strong"),tCr=o("deberta-v2"),aCr=o(" \u2014 "),CU=a("a"),nCr=o("TFDebertaV2ForQuestionAnswering"),sCr=o(" (DeBERTa-v2 model)"),lCr=l(),N4=a("li"),S6e=a("strong"),iCr=o("distilbert"),dCr=o(" \u2014 "),wU=a("a"),cCr=o("TFDistilBertForQuestionAnswering"),fCr=o(" (DistilBERT model)"),mCr=l(),j4=a("li"),R6e=a("strong"),gCr=o("electra"),hCr=o(" \u2014 "),AU=a("a"),pCr=o("TFElectraForQuestionAnswering"),uCr=o(" (ELECTRA model)"),_Cr=l(),D4=a("li"),P6e=a("strong"),bCr=o("flaubert"),vCr=o(" \u2014 "),yU=a("a"),FCr=o("TFFlaubertForQuestionAnsweringSimple"),TCr=o(" (FlauBERT model)"),MCr=l(),G4=a("li"),B6e=a("strong"),ECr=o("funnel"),CCr=o(" \u2014 "),LU=a("a"),wCr=o("TFFunnelForQuestionAnswering"),ACr=o(" (Funnel Transformer model)"),yCr=l(),O4=a("li"),I6e=a("strong"),LCr=o("gptj"),xCr=o(" \u2014 "),xU=a("a"),$Cr=o("TFGPTJForQuestionAnswering"),kCr=o(" (GPT-J model)"),SCr=l(),V4=a("li"),q6e=a("strong"),RCr=o("longformer"),PCr=o(" \u2014 "),$U=a("a"),BCr=o("TFLongformerForQuestionAnswering"),ICr=o(" (Longformer model)"),qCr=l(),X4=a("li"),N6e=a("strong"),NCr=o("mobilebert"),jCr=o(" \u2014 "),kU=a("a"),DCr=o("TFMobileBertForQuestionAnswering"),GCr=o(" (MobileBERT model)"),OCr=l(),z4=a("li"),j6e=a("strong"),VCr=o("mpnet"),XCr=o(" \u2014 "),SU=a("a"),zCr=o("TFMPNetForQuestionAnswering"),WCr=o(" (MPNet model)"),QCr=l(),W4=a("li"),D6e=a("strong"),HCr=o("rembert"),UCr=o(" \u2014 "),RU=a("a"),JCr=o("TFRemBertForQuestionAnswering"),YCr=o(" (RemBERT model)"),KCr=l(),Q4=a("li"),G6e=a("strong"),ZCr=o("roberta"),e5r=o(" \u2014 "),PU=a("a"),o5r=o("TFRobertaForQuestionAnswering"),r5r=o(" (RoBERTa model)"),t5r=l(),H4=a("li"),O6e=a("strong"),a5r=o("roformer"),n5r=o(" \u2014 "),BU=a("a"),s5r=o("TFRoFormerForQuestionAnswering"),l5r=o(" (RoFormer model)"),i5r=l(),U4=a("li"),V6e=a("strong"),d5r=o("xlm"),c5r=o(" \u2014 "),IU=a("a"),f5r=o("TFXLMForQuestionAnsweringSimple"),m5r=o(" (XLM model)"),g5r=l(),J4=a("li"),X6e=a("strong"),h5r=o("xlm-roberta"),p5r=o(" \u2014 "),qU=a("a"),u5r=o("TFXLMRobertaForQuestionAnswering"),_5r=o(" (XLM-RoBERTa model)"),b5r=l(),Y4=a("li"),z6e=a("strong"),v5r=o("xlnet"),F5r=o(" \u2014 "),NU=a("a"),T5r=o("TFXLNetForQuestionAnsweringSimple"),M5r=o(" (XLNet model)"),E5r=l(),F(K4.$$.fragment),eNe=l(),Mc=a("h2"),Z4=a("a"),W6e=a("span"),F(U8.$$.fragment),C5r=l(),Q6e=a("span"),w5r=o("TFAutoModelForVision2Seq"),oNe=l(),dr=a("div"),F(J8.$$.fragment),A5r=l(),Ec=a("p"),y5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jU=a("a"),L5r=o("from_pretrained()"),x5r=o(" class method or the "),DU=a("a"),$5r=o("from_config()"),k5r=o(` class
method.`),S5r=l(),Y8=a("p"),R5r=o("This class cannot be instantiated directly using "),H6e=a("code"),P5r=o("__init__()"),B5r=o(" (throws an error)."),I5r=l(),jt=a("div"),F(K8.$$.fragment),q5r=l(),U6e=a("p"),N5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j5r=l(),Cc=a("p"),D5r=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),G5r=o("not"),O5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),V5r=o("from_pretrained()"),X5r=o(" to load the model weights."),z5r=l(),F(eE.$$.fragment),W5r=l(),qr=a("div"),F(Z8.$$.fragment),Q5r=l(),Y6e=a("p"),H5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),U5r=l(),mn=a("p"),J5r=o("The model class to instantiate is selected based on the "),K6e=a("code"),Y5r=o("model_type"),K5r=o(` property of the config object (either
passed as an argument or loaded from `),Z6e=a("code"),Z5r=o("pretrained_model_name_or_path"),e3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),o3r=o("pretrained_model_name_or_path"),r3r=o(":"),t3r=l(),o0e=a("ul"),oE=a("li"),r0e=a("strong"),a3r=o("vision-encoder-decoder"),n3r=o(" \u2014 "),OU=a("a"),s3r=o("TFVisionEncoderDecoderModel"),l3r=o(" (Vision Encoder decoder model)"),i3r=l(),F(rE.$$.fragment),rNe=l(),wc=a("h2"),tE=a("a"),t0e=a("span"),F(ex.$$.fragment),d3r=l(),a0e=a("span"),c3r=o("TFAutoModelForSpeechSeq2Seq"),tNe=l(),cr=a("div"),F(ox.$$.fragment),f3r=l(),Ac=a("p"),m3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VU=a("a"),g3r=o("from_pretrained()"),h3r=o(" class method or the "),XU=a("a"),p3r=o("from_config()"),u3r=o(` class
method.`),_3r=l(),rx=a("p"),b3r=o("This class cannot be instantiated directly using "),n0e=a("code"),v3r=o("__init__()"),F3r=o(" (throws an error)."),T3r=l(),Dt=a("div"),F(tx.$$.fragment),M3r=l(),s0e=a("p"),E3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),C3r=l(),yc=a("p"),w3r=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),A3r=o("not"),y3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),L3r=o("from_pretrained()"),x3r=o(" to load the model weights."),$3r=l(),F(aE.$$.fragment),k3r=l(),Nr=a("div"),F(ax.$$.fragment),S3r=l(),i0e=a("p"),R3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),P3r=l(),gn=a("p"),B3r=o("The model class to instantiate is selected based on the "),d0e=a("code"),I3r=o("model_type"),q3r=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),N3r=o("pretrained_model_name_or_path"),j3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),D3r=o("pretrained_model_name_or_path"),G3r=o(":"),O3r=l(),m0e=a("ul"),nE=a("li"),g0e=a("strong"),V3r=o("speech_to_text"),X3r=o(" \u2014 "),WU=a("a"),z3r=o("TFSpeech2TextForConditionalGeneration"),W3r=o(" (Speech2Text model)"),Q3r=l(),F(sE.$$.fragment),aNe=l(),Lc=a("h2"),lE=a("a"),h0e=a("span"),F(nx.$$.fragment),H3r=l(),p0e=a("span"),U3r=o("FlaxAutoModel"),nNe=l(),fr=a("div"),F(sx.$$.fragment),J3r=l(),xc=a("p"),Y3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QU=a("a"),K3r=o("from_pretrained()"),Z3r=o(" class method or the "),HU=a("a"),ewr=o("from_config()"),owr=o(` class
method.`),rwr=l(),lx=a("p"),twr=o("This class cannot be instantiated directly using "),u0e=a("code"),awr=o("__init__()"),nwr=o(" (throws an error)."),swr=l(),Gt=a("div"),F(ix.$$.fragment),lwr=l(),_0e=a("p"),iwr=o("Instantiates one of the base model classes of the library from a configuration."),dwr=l(),$c=a("p"),cwr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),fwr=o("not"),mwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),gwr=o("from_pretrained()"),hwr=o(" to load the model weights."),pwr=l(),F(iE.$$.fragment),uwr=l(),jr=a("div"),F(dx.$$.fragment),_wr=l(),v0e=a("p"),bwr=o("Instantiate one of the base model classes of the library from a pretrained model."),vwr=l(),hn=a("p"),Fwr=o("The model class to instantiate is selected based on the "),F0e=a("code"),Twr=o("model_type"),Mwr=o(` property of the config object (either
passed as an argument or loaded from `),T0e=a("code"),Ewr=o("pretrained_model_name_or_path"),Cwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(":"),ywr=l(),re=a("ul"),dE=a("li"),E0e=a("strong"),Lwr=o("albert"),xwr=o(" \u2014 "),JU=a("a"),$wr=o("FlaxAlbertModel"),kwr=o(" (ALBERT model)"),Swr=l(),cE=a("li"),C0e=a("strong"),Rwr=o("bart"),Pwr=o(" \u2014 "),YU=a("a"),Bwr=o("FlaxBartModel"),Iwr=o(" (BART model)"),qwr=l(),fE=a("li"),w0e=a("strong"),Nwr=o("beit"),jwr=o(" \u2014 "),KU=a("a"),Dwr=o("FlaxBeitModel"),Gwr=o(" (BEiT model)"),Owr=l(),mE=a("li"),A0e=a("strong"),Vwr=o("bert"),Xwr=o(" \u2014 "),ZU=a("a"),zwr=o("FlaxBertModel"),Wwr=o(" (BERT model)"),Qwr=l(),gE=a("li"),y0e=a("strong"),Hwr=o("big_bird"),Uwr=o(" \u2014 "),eJ=a("a"),Jwr=o("FlaxBigBirdModel"),Ywr=o(" (BigBird model)"),Kwr=l(),hE=a("li"),L0e=a("strong"),Zwr=o("blenderbot"),eAr=o(" \u2014 "),oJ=a("a"),oAr=o("FlaxBlenderbotModel"),rAr=o(" (Blenderbot model)"),tAr=l(),pE=a("li"),x0e=a("strong"),aAr=o("blenderbot-small"),nAr=o(" \u2014 "),rJ=a("a"),sAr=o("FlaxBlenderbotSmallModel"),lAr=o(" (BlenderbotSmall model)"),iAr=l(),uE=a("li"),$0e=a("strong"),dAr=o("clip"),cAr=o(" \u2014 "),tJ=a("a"),fAr=o("FlaxCLIPModel"),mAr=o(" (CLIP model)"),gAr=l(),_E=a("li"),k0e=a("strong"),hAr=o("distilbert"),pAr=o(" \u2014 "),aJ=a("a"),uAr=o("FlaxDistilBertModel"),_Ar=o(" (DistilBERT model)"),bAr=l(),bE=a("li"),S0e=a("strong"),vAr=o("electra"),FAr=o(" \u2014 "),nJ=a("a"),TAr=o("FlaxElectraModel"),MAr=o(" (ELECTRA model)"),EAr=l(),vE=a("li"),R0e=a("strong"),CAr=o("gpt2"),wAr=o(" \u2014 "),sJ=a("a"),AAr=o("FlaxGPT2Model"),yAr=o(" (OpenAI GPT-2 model)"),LAr=l(),FE=a("li"),P0e=a("strong"),xAr=o("gpt_neo"),$Ar=o(" \u2014 "),lJ=a("a"),kAr=o("FlaxGPTNeoModel"),SAr=o(" (GPT Neo model)"),RAr=l(),TE=a("li"),B0e=a("strong"),PAr=o("gptj"),BAr=o(" \u2014 "),iJ=a("a"),IAr=o("FlaxGPTJModel"),qAr=o(" (GPT-J model)"),NAr=l(),ME=a("li"),I0e=a("strong"),jAr=o("marian"),DAr=o(" \u2014 "),dJ=a("a"),GAr=o("FlaxMarianModel"),OAr=o(" (Marian model)"),VAr=l(),EE=a("li"),q0e=a("strong"),XAr=o("mbart"),zAr=o(" \u2014 "),cJ=a("a"),WAr=o("FlaxMBartModel"),QAr=o(" (mBART model)"),HAr=l(),CE=a("li"),N0e=a("strong"),UAr=o("mt5"),JAr=o(" \u2014 "),fJ=a("a"),YAr=o("FlaxMT5Model"),KAr=o(" (mT5 model)"),ZAr=l(),wE=a("li"),j0e=a("strong"),eyr=o("pegasus"),oyr=o(" \u2014 "),mJ=a("a"),ryr=o("FlaxPegasusModel"),tyr=o(" (Pegasus model)"),ayr=l(),AE=a("li"),D0e=a("strong"),nyr=o("roberta"),syr=o(" \u2014 "),gJ=a("a"),lyr=o("FlaxRobertaModel"),iyr=o(" (RoBERTa model)"),dyr=l(),yE=a("li"),G0e=a("strong"),cyr=o("roformer"),fyr=o(" \u2014 "),hJ=a("a"),myr=o("FlaxRoFormerModel"),gyr=o(" (RoFormer model)"),hyr=l(),LE=a("li"),O0e=a("strong"),pyr=o("t5"),uyr=o(" \u2014 "),pJ=a("a"),_yr=o("FlaxT5Model"),byr=o(" (T5 model)"),vyr=l(),xE=a("li"),V0e=a("strong"),Fyr=o("vision-text-dual-encoder"),Tyr=o(" \u2014 "),uJ=a("a"),Myr=o("FlaxVisionTextDualEncoderModel"),Eyr=o(" (VisionTextDualEncoder model)"),Cyr=l(),$E=a("li"),X0e=a("strong"),wyr=o("vit"),Ayr=o(" \u2014 "),_J=a("a"),yyr=o("FlaxViTModel"),Lyr=o(" (ViT model)"),xyr=l(),kE=a("li"),z0e=a("strong"),$yr=o("wav2vec2"),kyr=o(" \u2014 "),bJ=a("a"),Syr=o("FlaxWav2Vec2Model"),Ryr=o(" (Wav2Vec2 model)"),Pyr=l(),SE=a("li"),W0e=a("strong"),Byr=o("xglm"),Iyr=o(" \u2014 "),vJ=a("a"),qyr=o("FlaxXGLMModel"),Nyr=o(" (XGLM model)"),jyr=l(),RE=a("li"),Q0e=a("strong"),Dyr=o("xlm-roberta"),Gyr=o(" \u2014 "),FJ=a("a"),Oyr=o("FlaxXLMRobertaModel"),Vyr=o(" (XLM-RoBERTa model)"),Xyr=l(),F(PE.$$.fragment),sNe=l(),kc=a("h2"),BE=a("a"),H0e=a("span"),F(cx.$$.fragment),zyr=l(),U0e=a("span"),Wyr=o("FlaxAutoModelForCausalLM"),lNe=l(),mr=a("div"),F(fx.$$.fragment),Qyr=l(),Sc=a("p"),Hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TJ=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" class method or the "),MJ=a("a"),Yyr=o("from_config()"),Kyr=o(` class
method.`),Zyr=l(),mx=a("p"),eLr=o("This class cannot be instantiated directly using "),J0e=a("code"),oLr=o("__init__()"),rLr=o(" (throws an error)."),tLr=l(),Ot=a("div"),F(gx.$$.fragment),aLr=l(),Y0e=a("p"),nLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sLr=l(),Rc=a("p"),lLr=o(`Note:
Loading a model from its configuration file does `),K0e=a("strong"),iLr=o("not"),dLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),cLr=o("from_pretrained()"),fLr=o(" to load the model weights."),mLr=l(),F(IE.$$.fragment),gLr=l(),Dr=a("div"),F(hx.$$.fragment),hLr=l(),Z0e=a("p"),pLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uLr=l(),pn=a("p"),_Lr=o("The model class to instantiate is selected based on the "),eTe=a("code"),bLr=o("model_type"),vLr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),CLr=l(),Re=a("ul"),qE=a("li"),tTe=a("strong"),wLr=o("bart"),ALr=o(" \u2014 "),CJ=a("a"),yLr=o("FlaxBartForCausalLM"),LLr=o(" (BART model)"),xLr=l(),NE=a("li"),aTe=a("strong"),$Lr=o("bert"),kLr=o(" \u2014 "),wJ=a("a"),SLr=o("FlaxBertForCausalLM"),RLr=o(" (BERT model)"),PLr=l(),jE=a("li"),nTe=a("strong"),BLr=o("big_bird"),ILr=o(" \u2014 "),AJ=a("a"),qLr=o("FlaxBigBirdForCausalLM"),NLr=o(" (BigBird model)"),jLr=l(),DE=a("li"),sTe=a("strong"),DLr=o("electra"),GLr=o(" \u2014 "),yJ=a("a"),OLr=o("FlaxElectraForCausalLM"),VLr=o(" (ELECTRA model)"),XLr=l(),GE=a("li"),lTe=a("strong"),zLr=o("gpt2"),WLr=o(" \u2014 "),LJ=a("a"),QLr=o("FlaxGPT2LMHeadModel"),HLr=o(" (OpenAI GPT-2 model)"),ULr=l(),OE=a("li"),iTe=a("strong"),JLr=o("gpt_neo"),YLr=o(" \u2014 "),xJ=a("a"),KLr=o("FlaxGPTNeoForCausalLM"),ZLr=o(" (GPT Neo model)"),e8r=l(),VE=a("li"),dTe=a("strong"),o8r=o("gptj"),r8r=o(" \u2014 "),$J=a("a"),t8r=o("FlaxGPTJForCausalLM"),a8r=o(" (GPT-J model)"),n8r=l(),XE=a("li"),cTe=a("strong"),s8r=o("roberta"),l8r=o(" \u2014 "),kJ=a("a"),i8r=o("FlaxRobertaForCausalLM"),d8r=o(" (RoBERTa model)"),c8r=l(),zE=a("li"),fTe=a("strong"),f8r=o("xglm"),m8r=o(" \u2014 "),SJ=a("a"),g8r=o("FlaxXGLMForCausalLM"),h8r=o(" (XGLM model)"),p8r=l(),F(WE.$$.fragment),iNe=l(),Pc=a("h2"),QE=a("a"),mTe=a("span"),F(px.$$.fragment),u8r=l(),gTe=a("span"),_8r=o("FlaxAutoModelForPreTraining"),dNe=l(),gr=a("div"),F(ux.$$.fragment),b8r=l(),Bc=a("p"),v8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=a("a"),F8r=o("from_pretrained()"),T8r=o(" class method or the "),PJ=a("a"),M8r=o("from_config()"),E8r=o(` class
method.`),C8r=l(),_x=a("p"),w8r=o("This class cannot be instantiated directly using "),hTe=a("code"),A8r=o("__init__()"),y8r=o(" (throws an error)."),L8r=l(),Vt=a("div"),F(bx.$$.fragment),x8r=l(),pTe=a("p"),$8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k8r=l(),Ic=a("p"),S8r=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),R8r=o("not"),P8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),B8r=o("from_pretrained()"),I8r=o(" to load the model weights."),q8r=l(),F(HE.$$.fragment),N8r=l(),Gr=a("div"),F(vx.$$.fragment),j8r=l(),_Te=a("p"),D8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G8r=l(),un=a("p"),O8r=o("The model class to instantiate is selected based on the "),bTe=a("code"),V8r=o("model_type"),X8r=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),z8r=o("pretrained_model_name_or_path"),W8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),Q8r=o("pretrained_model_name_or_path"),H8r=o(":"),U8r=l(),Me=a("ul"),UE=a("li"),TTe=a("strong"),J8r=o("albert"),Y8r=o(" \u2014 "),IJ=a("a"),K8r=o("FlaxAlbertForPreTraining"),Z8r=o(" (ALBERT model)"),exr=l(),JE=a("li"),MTe=a("strong"),oxr=o("bart"),rxr=o(" \u2014 "),qJ=a("a"),txr=o("FlaxBartForConditionalGeneration"),axr=o(" (BART model)"),nxr=l(),YE=a("li"),ETe=a("strong"),sxr=o("bert"),lxr=o(" \u2014 "),NJ=a("a"),ixr=o("FlaxBertForPreTraining"),dxr=o(" (BERT model)"),cxr=l(),KE=a("li"),CTe=a("strong"),fxr=o("big_bird"),mxr=o(" \u2014 "),jJ=a("a"),gxr=o("FlaxBigBirdForPreTraining"),hxr=o(" (BigBird model)"),pxr=l(),ZE=a("li"),wTe=a("strong"),uxr=o("electra"),_xr=o(" \u2014 "),DJ=a("a"),bxr=o("FlaxElectraForPreTraining"),vxr=o(" (ELECTRA model)"),Fxr=l(),eC=a("li"),ATe=a("strong"),Txr=o("mbart"),Mxr=o(" \u2014 "),GJ=a("a"),Exr=o("FlaxMBartForConditionalGeneration"),Cxr=o(" (mBART model)"),wxr=l(),oC=a("li"),yTe=a("strong"),Axr=o("mt5"),yxr=o(" \u2014 "),OJ=a("a"),Lxr=o("FlaxMT5ForConditionalGeneration"),xxr=o(" (mT5 model)"),$xr=l(),rC=a("li"),LTe=a("strong"),kxr=o("roberta"),Sxr=o(" \u2014 "),VJ=a("a"),Rxr=o("FlaxRobertaForMaskedLM"),Pxr=o(" (RoBERTa model)"),Bxr=l(),tC=a("li"),xTe=a("strong"),Ixr=o("roformer"),qxr=o(" \u2014 "),XJ=a("a"),Nxr=o("FlaxRoFormerForMaskedLM"),jxr=o(" (RoFormer model)"),Dxr=l(),aC=a("li"),$Te=a("strong"),Gxr=o("t5"),Oxr=o(" \u2014 "),zJ=a("a"),Vxr=o("FlaxT5ForConditionalGeneration"),Xxr=o(" (T5 model)"),zxr=l(),nC=a("li"),kTe=a("strong"),Wxr=o("wav2vec2"),Qxr=o(" \u2014 "),WJ=a("a"),Hxr=o("FlaxWav2Vec2ForPreTraining"),Uxr=o(" (Wav2Vec2 model)"),Jxr=l(),sC=a("li"),STe=a("strong"),Yxr=o("xlm-roberta"),Kxr=o(" \u2014 "),QJ=a("a"),Zxr=o("FlaxXLMRobertaForMaskedLM"),e9r=o(" (XLM-RoBERTa model)"),o9r=l(),F(lC.$$.fragment),cNe=l(),qc=a("h2"),iC=a("a"),RTe=a("span"),F(Fx.$$.fragment),r9r=l(),PTe=a("span"),t9r=o("FlaxAutoModelForMaskedLM"),fNe=l(),hr=a("div"),F(Tx.$$.fragment),a9r=l(),Nc=a("p"),n9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HJ=a("a"),s9r=o("from_pretrained()"),l9r=o(" class method or the "),UJ=a("a"),i9r=o("from_config()"),d9r=o(` class
method.`),c9r=l(),Mx=a("p"),f9r=o("This class cannot be instantiated directly using "),BTe=a("code"),m9r=o("__init__()"),g9r=o(" (throws an error)."),h9r=l(),Xt=a("div"),F(Ex.$$.fragment),p9r=l(),ITe=a("p"),u9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_9r=l(),jc=a("p"),b9r=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),v9r=o("not"),F9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),T9r=o("from_pretrained()"),M9r=o(" to load the model weights."),E9r=l(),F(dC.$$.fragment),C9r=l(),Or=a("div"),F(Cx.$$.fragment),w9r=l(),NTe=a("p"),A9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y9r=l(),_n=a("p"),L9r=o("The model class to instantiate is selected based on the "),jTe=a("code"),x9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),R9r=o("pretrained_model_name_or_path"),P9r=o(":"),B9r=l(),Le=a("ul"),cC=a("li"),OTe=a("strong"),I9r=o("albert"),q9r=o(" \u2014 "),YJ=a("a"),N9r=o("FlaxAlbertForMaskedLM"),j9r=o(" (ALBERT model)"),D9r=l(),fC=a("li"),VTe=a("strong"),G9r=o("bart"),O9r=o(" \u2014 "),KJ=a("a"),V9r=o("FlaxBartForConditionalGeneration"),X9r=o(" (BART model)"),z9r=l(),mC=a("li"),XTe=a("strong"),W9r=o("bert"),Q9r=o(" \u2014 "),ZJ=a("a"),H9r=o("FlaxBertForMaskedLM"),U9r=o(" (BERT model)"),J9r=l(),gC=a("li"),zTe=a("strong"),Y9r=o("big_bird"),K9r=o(" \u2014 "),eY=a("a"),Z9r=o("FlaxBigBirdForMaskedLM"),e$r=o(" (BigBird model)"),o$r=l(),hC=a("li"),WTe=a("strong"),r$r=o("distilbert"),t$r=o(" \u2014 "),oY=a("a"),a$r=o("FlaxDistilBertForMaskedLM"),n$r=o(" (DistilBERT model)"),s$r=l(),pC=a("li"),QTe=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),rY=a("a"),d$r=o("FlaxElectraForMaskedLM"),c$r=o(" (ELECTRA model)"),f$r=l(),uC=a("li"),HTe=a("strong"),m$r=o("mbart"),g$r=o(" \u2014 "),tY=a("a"),h$r=o("FlaxMBartForConditionalGeneration"),p$r=o(" (mBART model)"),u$r=l(),_C=a("li"),UTe=a("strong"),_$r=o("roberta"),b$r=o(" \u2014 "),aY=a("a"),v$r=o("FlaxRobertaForMaskedLM"),F$r=o(" (RoBERTa model)"),T$r=l(),bC=a("li"),JTe=a("strong"),M$r=o("roformer"),E$r=o(" \u2014 "),nY=a("a"),C$r=o("FlaxRoFormerForMaskedLM"),w$r=o(" (RoFormer model)"),A$r=l(),vC=a("li"),YTe=a("strong"),y$r=o("xlm-roberta"),L$r=o(" \u2014 "),sY=a("a"),x$r=o("FlaxXLMRobertaForMaskedLM"),$$r=o(" (XLM-RoBERTa model)"),k$r=l(),F(FC.$$.fragment),mNe=l(),Dc=a("h2"),TC=a("a"),KTe=a("span"),F(wx.$$.fragment),S$r=l(),ZTe=a("span"),R$r=o("FlaxAutoModelForSeq2SeqLM"),gNe=l(),pr=a("div"),F(Ax.$$.fragment),P$r=l(),Gc=a("p"),B$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lY=a("a"),I$r=o("from_pretrained()"),q$r=o(" class method or the "),iY=a("a"),N$r=o("from_config()"),j$r=o(` class
method.`),D$r=l(),yx=a("p"),G$r=o("This class cannot be instantiated directly using "),e7e=a("code"),O$r=o("__init__()"),V$r=o(" (throws an error)."),X$r=l(),zt=a("div"),F(Lx.$$.fragment),z$r=l(),o7e=a("p"),W$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q$r=l(),Oc=a("p"),H$r=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),U$r=o("not"),J$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),Y$r=o("from_pretrained()"),K$r=o(" to load the model weights."),Z$r=l(),F(MC.$$.fragment),ekr=l(),Vr=a("div"),F(xx.$$.fragment),okr=l(),t7e=a("p"),rkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tkr=l(),bn=a("p"),akr=o("The model class to instantiate is selected based on the "),a7e=a("code"),nkr=o("model_type"),skr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(":"),fkr=l(),Pe=a("ul"),EC=a("li"),l7e=a("strong"),mkr=o("bart"),gkr=o(" \u2014 "),cY=a("a"),hkr=o("FlaxBartForConditionalGeneration"),pkr=o(" (BART model)"),ukr=l(),CC=a("li"),i7e=a("strong"),_kr=o("blenderbot"),bkr=o(" \u2014 "),fY=a("a"),vkr=o("FlaxBlenderbotForConditionalGeneration"),Fkr=o(" (Blenderbot model)"),Tkr=l(),wC=a("li"),d7e=a("strong"),Mkr=o("blenderbot-small"),Ekr=o(" \u2014 "),mY=a("a"),Ckr=o("FlaxBlenderbotSmallForConditionalGeneration"),wkr=o(" (BlenderbotSmall model)"),Akr=l(),AC=a("li"),c7e=a("strong"),ykr=o("encoder-decoder"),Lkr=o(" \u2014 "),gY=a("a"),xkr=o("FlaxEncoderDecoderModel"),$kr=o(" (Encoder decoder model)"),kkr=l(),yC=a("li"),f7e=a("strong"),Skr=o("marian"),Rkr=o(" \u2014 "),hY=a("a"),Pkr=o("FlaxMarianMTModel"),Bkr=o(" (Marian model)"),Ikr=l(),LC=a("li"),m7e=a("strong"),qkr=o("mbart"),Nkr=o(" \u2014 "),pY=a("a"),jkr=o("FlaxMBartForConditionalGeneration"),Dkr=o(" (mBART model)"),Gkr=l(),xC=a("li"),g7e=a("strong"),Okr=o("mt5"),Vkr=o(" \u2014 "),uY=a("a"),Xkr=o("FlaxMT5ForConditionalGeneration"),zkr=o(" (mT5 model)"),Wkr=l(),$C=a("li"),h7e=a("strong"),Qkr=o("pegasus"),Hkr=o(" \u2014 "),_Y=a("a"),Ukr=o("FlaxPegasusForConditionalGeneration"),Jkr=o(" (Pegasus model)"),Ykr=l(),kC=a("li"),p7e=a("strong"),Kkr=o("t5"),Zkr=o(" \u2014 "),bY=a("a"),eSr=o("FlaxT5ForConditionalGeneration"),oSr=o(" (T5 model)"),rSr=l(),F(SC.$$.fragment),hNe=l(),Vc=a("h2"),RC=a("a"),u7e=a("span"),F($x.$$.fragment),tSr=l(),_7e=a("span"),aSr=o("FlaxAutoModelForSequenceClassification"),pNe=l(),ur=a("div"),F(kx.$$.fragment),nSr=l(),Xc=a("p"),sSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vY=a("a"),lSr=o("from_pretrained()"),iSr=o(" class method or the "),FY=a("a"),dSr=o("from_config()"),cSr=o(` class
method.`),fSr=l(),Sx=a("p"),mSr=o("This class cannot be instantiated directly using "),b7e=a("code"),gSr=o("__init__()"),hSr=o(" (throws an error)."),pSr=l(),Wt=a("div"),F(Rx.$$.fragment),uSr=l(),v7e=a("p"),_Sr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bSr=l(),zc=a("p"),vSr=o(`Note:
Loading a model from its configuration file does `),F7e=a("strong"),FSr=o("not"),TSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),MSr=o("from_pretrained()"),ESr=o(" to load the model weights."),CSr=l(),F(PC.$$.fragment),wSr=l(),Xr=a("div"),F(Px.$$.fragment),ASr=l(),T7e=a("p"),ySr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LSr=l(),vn=a("p"),xSr=o("The model class to instantiate is selected based on the "),M7e=a("code"),$Sr=o("model_type"),kSr=o(` property of the config object (either
passed as an argument or loaded from `),E7e=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),PSr=o("pretrained_model_name_or_path"),BSr=o(":"),ISr=l(),xe=a("ul"),BC=a("li"),w7e=a("strong"),qSr=o("albert"),NSr=o(" \u2014 "),MY=a("a"),jSr=o("FlaxAlbertForSequenceClassification"),DSr=o(" (ALBERT model)"),GSr=l(),IC=a("li"),A7e=a("strong"),OSr=o("bart"),VSr=o(" \u2014 "),EY=a("a"),XSr=o("FlaxBartForSequenceClassification"),zSr=o(" (BART model)"),WSr=l(),qC=a("li"),y7e=a("strong"),QSr=o("bert"),HSr=o(" \u2014 "),CY=a("a"),USr=o("FlaxBertForSequenceClassification"),JSr=o(" (BERT model)"),YSr=l(),NC=a("li"),L7e=a("strong"),KSr=o("big_bird"),ZSr=o(" \u2014 "),wY=a("a"),eRr=o("FlaxBigBirdForSequenceClassification"),oRr=o(" (BigBird model)"),rRr=l(),jC=a("li"),x7e=a("strong"),tRr=o("distilbert"),aRr=o(" \u2014 "),AY=a("a"),nRr=o("FlaxDistilBertForSequenceClassification"),sRr=o(" (DistilBERT model)"),lRr=l(),DC=a("li"),$7e=a("strong"),iRr=o("electra"),dRr=o(" \u2014 "),yY=a("a"),cRr=o("FlaxElectraForSequenceClassification"),fRr=o(" (ELECTRA model)"),mRr=l(),GC=a("li"),k7e=a("strong"),gRr=o("mbart"),hRr=o(" \u2014 "),LY=a("a"),pRr=o("FlaxMBartForSequenceClassification"),uRr=o(" (mBART model)"),_Rr=l(),OC=a("li"),S7e=a("strong"),bRr=o("roberta"),vRr=o(" \u2014 "),xY=a("a"),FRr=o("FlaxRobertaForSequenceClassification"),TRr=o(" (RoBERTa model)"),MRr=l(),VC=a("li"),R7e=a("strong"),ERr=o("roformer"),CRr=o(" \u2014 "),$Y=a("a"),wRr=o("FlaxRoFormerForSequenceClassification"),ARr=o(" (RoFormer model)"),yRr=l(),XC=a("li"),P7e=a("strong"),LRr=o("xlm-roberta"),xRr=o(" \u2014 "),kY=a("a"),$Rr=o("FlaxXLMRobertaForSequenceClassification"),kRr=o(" (XLM-RoBERTa model)"),SRr=l(),F(zC.$$.fragment),uNe=l(),Wc=a("h2"),WC=a("a"),B7e=a("span"),F(Bx.$$.fragment),RRr=l(),I7e=a("span"),PRr=o("FlaxAutoModelForQuestionAnswering"),_Ne=l(),_r=a("div"),F(Ix.$$.fragment),BRr=l(),Qc=a("p"),IRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SY=a("a"),qRr=o("from_pretrained()"),NRr=o(" class method or the "),RY=a("a"),jRr=o("from_config()"),DRr=o(` class
method.`),GRr=l(),qx=a("p"),ORr=o("This class cannot be instantiated directly using "),q7e=a("code"),VRr=o("__init__()"),XRr=o(" (throws an error)."),zRr=l(),Qt=a("div"),F(Nx.$$.fragment),WRr=l(),N7e=a("p"),QRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HRr=l(),Hc=a("p"),URr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),JRr=o("not"),YRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),KRr=o("from_pretrained()"),ZRr=o(" to load the model weights."),ePr=l(),F(QC.$$.fragment),oPr=l(),zr=a("div"),F(jx.$$.fragment),rPr=l(),D7e=a("p"),tPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aPr=l(),Fn=a("p"),nPr=o("The model class to instantiate is selected based on the "),G7e=a("code"),sPr=o("model_type"),lPr=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),iPr=o("pretrained_model_name_or_path"),dPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),cPr=o("pretrained_model_name_or_path"),fPr=o(":"),mPr=l(),$e=a("ul"),HC=a("li"),X7e=a("strong"),gPr=o("albert"),hPr=o(" \u2014 "),BY=a("a"),pPr=o("FlaxAlbertForQuestionAnswering"),uPr=o(" (ALBERT model)"),_Pr=l(),UC=a("li"),z7e=a("strong"),bPr=o("bart"),vPr=o(" \u2014 "),IY=a("a"),FPr=o("FlaxBartForQuestionAnswering"),TPr=o(" (BART model)"),MPr=l(),JC=a("li"),W7e=a("strong"),EPr=o("bert"),CPr=o(" \u2014 "),qY=a("a"),wPr=o("FlaxBertForQuestionAnswering"),APr=o(" (BERT model)"),yPr=l(),YC=a("li"),Q7e=a("strong"),LPr=o("big_bird"),xPr=o(" \u2014 "),NY=a("a"),$Pr=o("FlaxBigBirdForQuestionAnswering"),kPr=o(" (BigBird model)"),SPr=l(),KC=a("li"),H7e=a("strong"),RPr=o("distilbert"),PPr=o(" \u2014 "),jY=a("a"),BPr=o("FlaxDistilBertForQuestionAnswering"),IPr=o(" (DistilBERT model)"),qPr=l(),ZC=a("li"),U7e=a("strong"),NPr=o("electra"),jPr=o(" \u2014 "),DY=a("a"),DPr=o("FlaxElectraForQuestionAnswering"),GPr=o(" (ELECTRA model)"),OPr=l(),e5=a("li"),J7e=a("strong"),VPr=o("mbart"),XPr=o(" \u2014 "),GY=a("a"),zPr=o("FlaxMBartForQuestionAnswering"),WPr=o(" (mBART model)"),QPr=l(),o5=a("li"),Y7e=a("strong"),HPr=o("roberta"),UPr=o(" \u2014 "),OY=a("a"),JPr=o("FlaxRobertaForQuestionAnswering"),YPr=o(" (RoBERTa model)"),KPr=l(),r5=a("li"),K7e=a("strong"),ZPr=o("roformer"),eBr=o(" \u2014 "),VY=a("a"),oBr=o("FlaxRoFormerForQuestionAnswering"),rBr=o(" (RoFormer model)"),tBr=l(),t5=a("li"),Z7e=a("strong"),aBr=o("xlm-roberta"),nBr=o(" \u2014 "),XY=a("a"),sBr=o("FlaxXLMRobertaForQuestionAnswering"),lBr=o(" (XLM-RoBERTa model)"),iBr=l(),F(a5.$$.fragment),bNe=l(),Uc=a("h2"),n5=a("a"),eMe=a("span"),F(Dx.$$.fragment),dBr=l(),oMe=a("span"),cBr=o("FlaxAutoModelForTokenClassification"),vNe=l(),br=a("div"),F(Gx.$$.fragment),fBr=l(),Jc=a("p"),mBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zY=a("a"),gBr=o("from_pretrained()"),hBr=o(" class method or the "),WY=a("a"),pBr=o("from_config()"),uBr=o(` class
method.`),_Br=l(),Ox=a("p"),bBr=o("This class cannot be instantiated directly using "),rMe=a("code"),vBr=o("__init__()"),FBr=o(" (throws an error)."),TBr=l(),Ht=a("div"),F(Vx.$$.fragment),MBr=l(),tMe=a("p"),EBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CBr=l(),Yc=a("p"),wBr=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),ABr=o("not"),yBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),LBr=o("from_pretrained()"),xBr=o(" to load the model weights."),$Br=l(),F(s5.$$.fragment),kBr=l(),Wr=a("div"),F(Xx.$$.fragment),SBr=l(),nMe=a("p"),RBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PBr=l(),Tn=a("p"),BBr=o("The model class to instantiate is selected based on the "),sMe=a("code"),IBr=o("model_type"),qBr=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),NBr=o("pretrained_model_name_or_path"),jBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(":"),OBr=l(),De=a("ul"),l5=a("li"),dMe=a("strong"),VBr=o("albert"),XBr=o(" \u2014 "),HY=a("a"),zBr=o("FlaxAlbertForTokenClassification"),WBr=o(" (ALBERT model)"),QBr=l(),i5=a("li"),cMe=a("strong"),HBr=o("bert"),UBr=o(" \u2014 "),UY=a("a"),JBr=o("FlaxBertForTokenClassification"),YBr=o(" (BERT model)"),KBr=l(),d5=a("li"),fMe=a("strong"),ZBr=o("big_bird"),eIr=o(" \u2014 "),JY=a("a"),oIr=o("FlaxBigBirdForTokenClassification"),rIr=o(" (BigBird model)"),tIr=l(),c5=a("li"),mMe=a("strong"),aIr=o("distilbert"),nIr=o(" \u2014 "),YY=a("a"),sIr=o("FlaxDistilBertForTokenClassification"),lIr=o(" (DistilBERT model)"),iIr=l(),f5=a("li"),gMe=a("strong"),dIr=o("electra"),cIr=o(" \u2014 "),KY=a("a"),fIr=o("FlaxElectraForTokenClassification"),mIr=o(" (ELECTRA model)"),gIr=l(),m5=a("li"),hMe=a("strong"),hIr=o("roberta"),pIr=o(" \u2014 "),ZY=a("a"),uIr=o("FlaxRobertaForTokenClassification"),_Ir=o(" (RoBERTa model)"),bIr=l(),g5=a("li"),pMe=a("strong"),vIr=o("roformer"),FIr=o(" \u2014 "),eK=a("a"),TIr=o("FlaxRoFormerForTokenClassification"),MIr=o(" (RoFormer model)"),EIr=l(),h5=a("li"),uMe=a("strong"),CIr=o("xlm-roberta"),wIr=o(" \u2014 "),oK=a("a"),AIr=o("FlaxXLMRobertaForTokenClassification"),yIr=o(" (XLM-RoBERTa model)"),LIr=l(),F(p5.$$.fragment),FNe=l(),Kc=a("h2"),u5=a("a"),_Me=a("span"),F(zx.$$.fragment),xIr=l(),bMe=a("span"),$Ir=o("FlaxAutoModelForMultipleChoice"),TNe=l(),vr=a("div"),F(Wx.$$.fragment),kIr=l(),Zc=a("p"),SIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rK=a("a"),RIr=o("from_pretrained()"),PIr=o(" class method or the "),tK=a("a"),BIr=o("from_config()"),IIr=o(` class
method.`),qIr=l(),Qx=a("p"),NIr=o("This class cannot be instantiated directly using "),vMe=a("code"),jIr=o("__init__()"),DIr=o(" (throws an error)."),GIr=l(),Ut=a("div"),F(Hx.$$.fragment),OIr=l(),FMe=a("p"),VIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XIr=l(),ef=a("p"),zIr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),WIr=o("not"),QIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),HIr=o("from_pretrained()"),UIr=o(" to load the model weights."),JIr=l(),F(_5.$$.fragment),YIr=l(),Qr=a("div"),F(Ux.$$.fragment),KIr=l(),MMe=a("p"),ZIr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eqr=l(),Mn=a("p"),oqr=o("The model class to instantiate is selected based on the "),EMe=a("code"),rqr=o("model_type"),tqr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),aqr=o("pretrained_model_name_or_path"),nqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),sqr=o("pretrained_model_name_or_path"),lqr=o(":"),iqr=l(),Ge=a("ul"),b5=a("li"),AMe=a("strong"),dqr=o("albert"),cqr=o(" \u2014 "),nK=a("a"),fqr=o("FlaxAlbertForMultipleChoice"),mqr=o(" (ALBERT model)"),gqr=l(),v5=a("li"),yMe=a("strong"),hqr=o("bert"),pqr=o(" \u2014 "),sK=a("a"),uqr=o("FlaxBertForMultipleChoice"),_qr=o(" (BERT model)"),bqr=l(),F5=a("li"),LMe=a("strong"),vqr=o("big_bird"),Fqr=o(" \u2014 "),lK=a("a"),Tqr=o("FlaxBigBirdForMultipleChoice"),Mqr=o(" (BigBird model)"),Eqr=l(),T5=a("li"),xMe=a("strong"),Cqr=o("distilbert"),wqr=o(" \u2014 "),iK=a("a"),Aqr=o("FlaxDistilBertForMultipleChoice"),yqr=o(" (DistilBERT model)"),Lqr=l(),M5=a("li"),$Me=a("strong"),xqr=o("electra"),$qr=o(" \u2014 "),dK=a("a"),kqr=o("FlaxElectraForMultipleChoice"),Sqr=o(" (ELECTRA model)"),Rqr=l(),E5=a("li"),kMe=a("strong"),Pqr=o("roberta"),Bqr=o(" \u2014 "),cK=a("a"),Iqr=o("FlaxRobertaForMultipleChoice"),qqr=o(" (RoBERTa model)"),Nqr=l(),C5=a("li"),SMe=a("strong"),jqr=o("roformer"),Dqr=o(" \u2014 "),fK=a("a"),Gqr=o("FlaxRoFormerForMultipleChoice"),Oqr=o(" (RoFormer model)"),Vqr=l(),w5=a("li"),RMe=a("strong"),Xqr=o("xlm-roberta"),zqr=o(" \u2014 "),mK=a("a"),Wqr=o("FlaxXLMRobertaForMultipleChoice"),Qqr=o(" (XLM-RoBERTa model)"),Hqr=l(),F(A5.$$.fragment),MNe=l(),of=a("h2"),y5=a("a"),PMe=a("span"),F(Jx.$$.fragment),Uqr=l(),BMe=a("span"),Jqr=o("FlaxAutoModelForNextSentencePrediction"),ENe=l(),Fr=a("div"),F(Yx.$$.fragment),Yqr=l(),rf=a("p"),Kqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gK=a("a"),Zqr=o("from_pretrained()"),eNr=o(" class method or the "),hK=a("a"),oNr=o("from_config()"),rNr=o(` class
method.`),tNr=l(),Kx=a("p"),aNr=o("This class cannot be instantiated directly using "),IMe=a("code"),nNr=o("__init__()"),sNr=o(" (throws an error)."),lNr=l(),Jt=a("div"),F(Zx.$$.fragment),iNr=l(),qMe=a("p"),dNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cNr=l(),tf=a("p"),fNr=o(`Note:
Loading a model from its configuration file does `),NMe=a("strong"),mNr=o("not"),gNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),hNr=o("from_pretrained()"),pNr=o(" to load the model weights."),uNr=l(),F(L5.$$.fragment),_Nr=l(),Hr=a("div"),F(e9.$$.fragment),bNr=l(),jMe=a("p"),vNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FNr=l(),En=a("p"),TNr=o("The model class to instantiate is selected based on the "),DMe=a("code"),MNr=o("model_type"),ENr=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),ANr=o("pretrained_model_name_or_path"),yNr=o(":"),LNr=l(),VMe=a("ul"),x5=a("li"),XMe=a("strong"),xNr=o("bert"),$Nr=o(" \u2014 "),uK=a("a"),kNr=o("FlaxBertForNextSentencePrediction"),SNr=o(" (BERT model)"),RNr=l(),F($5.$$.fragment),CNe=l(),af=a("h2"),k5=a("a"),zMe=a("span"),F(o9.$$.fragment),PNr=l(),WMe=a("span"),BNr=o("FlaxAutoModelForImageClassification"),wNe=l(),Tr=a("div"),F(r9.$$.fragment),INr=l(),nf=a("p"),qNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_K=a("a"),NNr=o("from_pretrained()"),jNr=o(" class method or the "),bK=a("a"),DNr=o("from_config()"),GNr=o(` class
method.`),ONr=l(),t9=a("p"),VNr=o("This class cannot be instantiated directly using "),QMe=a("code"),XNr=o("__init__()"),zNr=o(" (throws an error)."),WNr=l(),Yt=a("div"),F(a9.$$.fragment),QNr=l(),HMe=a("p"),HNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UNr=l(),sf=a("p"),JNr=o(`Note:
Loading a model from its configuration file does `),UMe=a("strong"),YNr=o("not"),KNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),ZNr=o("from_pretrained()"),ejr=o(" to load the model weights."),ojr=l(),F(S5.$$.fragment),rjr=l(),Ur=a("div"),F(n9.$$.fragment),tjr=l(),JMe=a("p"),ajr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),njr=l(),Cn=a("p"),sjr=o("The model class to instantiate is selected based on the "),YMe=a("code"),ljr=o("model_type"),ijr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),djr=o("pretrained_model_name_or_path"),cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),fjr=o("pretrained_model_name_or_path"),mjr=o(":"),gjr=l(),s9=a("ul"),R5=a("li"),e4e=a("strong"),hjr=o("beit"),pjr=o(" \u2014 "),FK=a("a"),ujr=o("FlaxBeitForImageClassification"),_jr=o(" (BEiT model)"),bjr=l(),P5=a("li"),o4e=a("strong"),vjr=o("vit"),Fjr=o(" \u2014 "),TK=a("a"),Tjr=o("FlaxViTForImageClassification"),Mjr=o(" (ViT model)"),Ejr=l(),F(B5.$$.fragment),ANe=l(),lf=a("h2"),I5=a("a"),r4e=a("span"),F(l9.$$.fragment),Cjr=l(),t4e=a("span"),wjr=o("FlaxAutoModelForVision2Seq"),yNe=l(),Mr=a("div"),F(i9.$$.fragment),Ajr=l(),df=a("p"),yjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MK=a("a"),Ljr=o("from_pretrained()"),xjr=o(" class method or the "),EK=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),d9=a("p"),Rjr=o("This class cannot be instantiated directly using "),a4e=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),Kt=a("div"),F(c9.$$.fragment),qjr=l(),n4e=a("p"),Njr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jjr=l(),cf=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(q5.$$.fragment),Wjr=l(),Jr=a("div"),F(f9.$$.fragment),Qjr=l(),l4e=a("p"),Hjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ujr=l(),wn=a("p"),Jjr=o("The model class to instantiate is selected based on the "),i4e=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),f4e=a("ul"),N5=a("li"),m4e=a("strong"),aDr=o("vision-encoder-decoder"),nDr=o(" \u2014 "),wK=a("a"),sDr=o("FlaxVisionEncoderDecoderModel"),lDr=o(" (Vision Encoder decoder model)"),iDr=l(),F(j5.$$.fragment),this.h()},l(f){const _=oLt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var m9=s(p);m=n(m9,"A",{id:!0,class:!0,href:!0});var g4e=s(m);u=n(g4e,"SPAN",{});var h4e=s(u);T(d.$$.fragment,h4e),h4e.forEach(t),g4e.forEach(t),h=i(m9),Mo=n(m9,"SPAN",{});var p4e=s(Mo);ci=r(p4e,"Auto Classes"),p4e.forEach(t),m9.forEach(t),hf=i(f),rt=n(f,"P",{});var g9=s(rt);fi=r(g9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(g9,"CODE",{});var u4e=s(mi);tA=r(u4e,"from_pretrained()"),u4e.forEach(t),pf=r(g9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),g9.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var _4e=s(yn);aA=r(_4e,"AutoConfig"),_4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var b4e=s(xn);nA=r(b4e,"AutoModel"),b4e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var v4e=s($n);sA=r(v4e,"AutoTokenizer"),v4e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var h9=s(Ae);C$=r(h9,"will create a model that is an instance of "),ui=n(h9,"A",{href:!0});var F4e=s(ui);w$=r(F4e,"BertModel"),F4e.forEach(t),A$=r(h9,"."),h9.forEach(t),Eo=i(f),wa=n(f,"P",{});var p9=s(wa);y$=r(p9,"There is one class of "),_f=n(p9,"CODE",{});var T4e=s(_f);L$=r(T4e,"AutoModel"),T4e.forEach(t),IDe=r(p9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),p9.forEach(t),wIe=i(f),_i=n(f,"H2",{class:!0});var u9=s(_i);bf=n(u9,"A",{id:!0,class:!0,href:!0});var M4e=s(bf);bee=n(M4e,"SPAN",{});var E4e=s(bee);T(lA.$$.fragment,E4e),E4e.forEach(t),M4e.forEach(t),qDe=i(u9),vee=n(u9,"SPAN",{});var C4e=s(vee);NDe=r(C4e,"Extending the Auto Classes"),C4e.forEach(t),u9.forEach(t),AIe=i(f),kn=n(f,"P",{});var ff=s(kn);jDe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fee=n(ff,"CODE",{});var w4e=s(Fee);DDe=r(w4e,"NewModel"),w4e.forEach(t),GDe=r(ff,", make sure you have a "),Tee=n(ff,"CODE",{});var A4e=s(Tee);ODe=r(A4e,"NewModelConfig"),A4e.forEach(t),VDe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),yIe=i(f),T(iA.$$.fragment,f),LIe=i(f),x$=n(f,"P",{});var y4e=s(x$);XDe=r(y4e,"You will then be able to use the auto classes like you would usually do!"),y4e.forEach(t),xIe=i(f),T(vf.$$.fragment,f),$Ie=i(f),bi=n(f,"H2",{class:!0});var _9=s(bi);Ff=n(_9,"A",{id:!0,class:!0,href:!0});var L4e=s(Ff);Mee=n(L4e,"SPAN",{});var x4e=s(Mee);T(dA.$$.fragment,x4e),x4e.forEach(t),L4e.forEach(t),zDe=i(_9),Eee=n(_9,"SPAN",{});var $4e=s(Eee);WDe=r($4e,"AutoConfig"),$4e.forEach(t),_9.forEach(t),kIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(cA.$$.fragment,et),QDe=i(et),fA=n(et,"P",{});var b9=s(fA);HDe=r(b9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$$=n(b9,"A",{href:!0});var k4e=s($$);UDe=r(k4e,"from_pretrained()"),k4e.forEach(t),JDe=r(b9," class method."),b9.forEach(t),YDe=i(et),mA=n(et,"P",{});var v9=s(mA);KDe=r(v9,"This class cannot be instantiated directly using "),Cee=n(v9,"CODE",{});var S4e=s(Cee);ZDe=r(S4e,"__init__()"),S4e.forEach(t),eGe=r(v9," (throws an error)."),v9.forEach(t),oGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(gA.$$.fragment,ot),rGe=i(ot),wee=n(ot,"P",{});var R4e=s(wee);tGe=r(R4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),R4e.forEach(t),aGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);nGe=r(mf,"The configuration class to instantiate is selected based on the "),Aee=n(mf,"CODE",{});var P4e=s(Aee);sGe=r(P4e,"model_type"),P4e.forEach(t),lGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yee=n(mf,"CODE",{});var B4e=s(yee);iGe=r(B4e,"pretrained_model_name_or_path"),B4e.forEach(t),dGe=r(mf,":"),mf.forEach(t),cGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var D5=s(Tf);Lee=n(D5,"STRONG",{});var I4e=s(Lee);fGe=r(I4e,"albert"),I4e.forEach(t),mGe=r(D5," \u2014 "),k$=n(D5,"A",{href:!0});var q4e=s(k$);gGe=r(q4e,"AlbertConfig"),q4e.forEach(t),hGe=r(D5," (ALBERT model)"),D5.forEach(t),pGe=i(y),Mf=n(y,"LI",{});var G5=s(Mf);xee=n(G5,"STRONG",{});var N4e=s(xee);uGe=r(N4e,"bart"),N4e.forEach(t),_Ge=r(G5," \u2014 "),S$=n(G5,"A",{href:!0});var j4e=s(S$);bGe=r(j4e,"BartConfig"),j4e.forEach(t),vGe=r(G5," (BART model)"),G5.forEach(t),FGe=i(y),Ef=n(y,"LI",{});var O5=s(Ef);$ee=n(O5,"STRONG",{});var D4e=s($ee);TGe=r(D4e,"beit"),D4e.forEach(t),MGe=r(O5," \u2014 "),R$=n(O5,"A",{href:!0});var G4e=s(R$);EGe=r(G4e,"BeitConfig"),G4e.forEach(t),CGe=r(O5," (BEiT model)"),O5.forEach(t),wGe=i(y),Cf=n(y,"LI",{});var V5=s(Cf);kee=n(V5,"STRONG",{});var O4e=s(kee);AGe=r(O4e,"bert"),O4e.forEach(t),yGe=r(V5," \u2014 "),P$=n(V5,"A",{href:!0});var V4e=s(P$);LGe=r(V4e,"BertConfig"),V4e.forEach(t),xGe=r(V5," (BERT model)"),V5.forEach(t),$Ge=i(y),wf=n(y,"LI",{});var X5=s(wf);See=n(X5,"STRONG",{});var X4e=s(See);kGe=r(X4e,"bert-generation"),X4e.forEach(t),SGe=r(X5," \u2014 "),B$=n(X5,"A",{href:!0});var z4e=s(B$);RGe=r(z4e,"BertGenerationConfig"),z4e.forEach(t),PGe=r(X5," (Bert Generation model)"),X5.forEach(t),BGe=i(y),Af=n(y,"LI",{});var z5=s(Af);Ree=n(z5,"STRONG",{});var W4e=s(Ree);IGe=r(W4e,"big_bird"),W4e.forEach(t),qGe=r(z5," \u2014 "),I$=n(z5,"A",{href:!0});var Q4e=s(I$);NGe=r(Q4e,"BigBirdConfig"),Q4e.forEach(t),jGe=r(z5," (BigBird model)"),z5.forEach(t),DGe=i(y),yf=n(y,"LI",{});var W5=s(yf);Pee=n(W5,"STRONG",{});var H4e=s(Pee);GGe=r(H4e,"bigbird_pegasus"),H4e.forEach(t),OGe=r(W5," \u2014 "),q$=n(W5,"A",{href:!0});var U4e=s(q$);VGe=r(U4e,"BigBirdPegasusConfig"),U4e.forEach(t),XGe=r(W5," (BigBirdPegasus model)"),W5.forEach(t),zGe=i(y),Lf=n(y,"LI",{});var Q5=s(Lf);Bee=n(Q5,"STRONG",{});var J4e=s(Bee);WGe=r(J4e,"blenderbot"),J4e.forEach(t),QGe=r(Q5," \u2014 "),N$=n(Q5,"A",{href:!0});var Y4e=s(N$);HGe=r(Y4e,"BlenderbotConfig"),Y4e.forEach(t),UGe=r(Q5," (Blenderbot model)"),Q5.forEach(t),JGe=i(y),xf=n(y,"LI",{});var H5=s(xf);Iee=n(H5,"STRONG",{});var K4e=s(Iee);YGe=r(K4e,"blenderbot-small"),K4e.forEach(t),KGe=r(H5," \u2014 "),j$=n(H5,"A",{href:!0});var Z4e=s(j$);ZGe=r(Z4e,"BlenderbotSmallConfig"),Z4e.forEach(t),eOe=r(H5," (BlenderbotSmall model)"),H5.forEach(t),oOe=i(y),$f=n(y,"LI",{});var U5=s($f);qee=n(U5,"STRONG",{});var eEe=s(qee);rOe=r(eEe,"camembert"),eEe.forEach(t),tOe=r(U5," \u2014 "),D$=n(U5,"A",{href:!0});var oEe=s(D$);aOe=r(oEe,"CamembertConfig"),oEe.forEach(t),nOe=r(U5," (CamemBERT model)"),U5.forEach(t),sOe=i(y),kf=n(y,"LI",{});var J5=s(kf);Nee=n(J5,"STRONG",{});var rEe=s(Nee);lOe=r(rEe,"canine"),rEe.forEach(t),iOe=r(J5," \u2014 "),G$=n(J5,"A",{href:!0});var tEe=s(G$);dOe=r(tEe,"CanineConfig"),tEe.forEach(t),cOe=r(J5," (Canine model)"),J5.forEach(t),fOe=i(y),Sf=n(y,"LI",{});var Y5=s(Sf);jee=n(Y5,"STRONG",{});var aEe=s(jee);mOe=r(aEe,"clip"),aEe.forEach(t),gOe=r(Y5," \u2014 "),O$=n(Y5,"A",{href:!0});var nEe=s(O$);hOe=r(nEe,"CLIPConfig"),nEe.forEach(t),pOe=r(Y5," (CLIP model)"),Y5.forEach(t),uOe=i(y),Rf=n(y,"LI",{});var K5=s(Rf);Dee=n(K5,"STRONG",{});var sEe=s(Dee);_Oe=r(sEe,"convbert"),sEe.forEach(t),bOe=r(K5," \u2014 "),V$=n(K5,"A",{href:!0});var lEe=s(V$);vOe=r(lEe,"ConvBertConfig"),lEe.forEach(t),FOe=r(K5," (ConvBERT model)"),K5.forEach(t),TOe=i(y),Pf=n(y,"LI",{});var Z5=s(Pf);Gee=n(Z5,"STRONG",{});var iEe=s(Gee);MOe=r(iEe,"convnext"),iEe.forEach(t),EOe=r(Z5," \u2014 "),X$=n(Z5,"A",{href:!0});var dEe=s(X$);COe=r(dEe,"ConvNextConfig"),dEe.forEach(t),wOe=r(Z5," (ConvNext model)"),Z5.forEach(t),AOe=i(y),Bf=n(y,"LI",{});var e3=s(Bf);Oee=n(e3,"STRONG",{});var cEe=s(Oee);yOe=r(cEe,"ctrl"),cEe.forEach(t),LOe=r(e3," \u2014 "),z$=n(e3,"A",{href:!0});var fEe=s(z$);xOe=r(fEe,"CTRLConfig"),fEe.forEach(t),$Oe=r(e3," (CTRL model)"),e3.forEach(t),kOe=i(y),If=n(y,"LI",{});var o3=s(If);Vee=n(o3,"STRONG",{});var mEe=s(Vee);SOe=r(mEe,"data2vec-audio"),mEe.forEach(t),ROe=r(o3," \u2014 "),W$=n(o3,"A",{href:!0});var gEe=s(W$);POe=r(gEe,"Data2VecAudioConfig"),gEe.forEach(t),BOe=r(o3," (Data2VecAudio model)"),o3.forEach(t),IOe=i(y),qf=n(y,"LI",{});var r3=s(qf);Xee=n(r3,"STRONG",{});var hEe=s(Xee);qOe=r(hEe,"data2vec-text"),hEe.forEach(t),NOe=r(r3," \u2014 "),Q$=n(r3,"A",{href:!0});var pEe=s(Q$);jOe=r(pEe,"Data2VecTextConfig"),pEe.forEach(t),DOe=r(r3," (Data2VecText model)"),r3.forEach(t),GOe=i(y),Nf=n(y,"LI",{});var t3=s(Nf);zee=n(t3,"STRONG",{});var uEe=s(zee);OOe=r(uEe,"data2vec-vision"),uEe.forEach(t),VOe=r(t3," \u2014 "),H$=n(t3,"A",{href:!0});var _Ee=s(H$);XOe=r(_Ee,"Data2VecVisionConfig"),_Ee.forEach(t),zOe=r(t3," (Data2VecVision model)"),t3.forEach(t),WOe=i(y),jf=n(y,"LI",{});var a3=s(jf);Wee=n(a3,"STRONG",{});var bEe=s(Wee);QOe=r(bEe,"deberta"),bEe.forEach(t),HOe=r(a3," \u2014 "),U$=n(a3,"A",{href:!0});var vEe=s(U$);UOe=r(vEe,"DebertaConfig"),vEe.forEach(t),JOe=r(a3," (DeBERTa model)"),a3.forEach(t),YOe=i(y),Df=n(y,"LI",{});var n3=s(Df);Qee=n(n3,"STRONG",{});var FEe=s(Qee);KOe=r(FEe,"deberta-v2"),FEe.forEach(t),ZOe=r(n3," \u2014 "),J$=n(n3,"A",{href:!0});var TEe=s(J$);eVe=r(TEe,"DebertaV2Config"),TEe.forEach(t),oVe=r(n3," (DeBERTa-v2 model)"),n3.forEach(t),rVe=i(y),Gf=n(y,"LI",{});var s3=s(Gf);Hee=n(s3,"STRONG",{});var MEe=s(Hee);tVe=r(MEe,"decision_transformer"),MEe.forEach(t),aVe=r(s3," \u2014 "),Y$=n(s3,"A",{href:!0});var EEe=s(Y$);nVe=r(EEe,"DecisionTransformerConfig"),EEe.forEach(t),sVe=r(s3," (Decision Transformer model)"),s3.forEach(t),lVe=i(y),Of=n(y,"LI",{});var l3=s(Of);Uee=n(l3,"STRONG",{});var CEe=s(Uee);iVe=r(CEe,"deit"),CEe.forEach(t),dVe=r(l3," \u2014 "),K$=n(l3,"A",{href:!0});var wEe=s(K$);cVe=r(wEe,"DeiTConfig"),wEe.forEach(t),fVe=r(l3," (DeiT model)"),l3.forEach(t),mVe=i(y),Vf=n(y,"LI",{});var i3=s(Vf);Jee=n(i3,"STRONG",{});var AEe=s(Jee);gVe=r(AEe,"detr"),AEe.forEach(t),hVe=r(i3," \u2014 "),Z$=n(i3,"A",{href:!0});var cDr=s(Z$);pVe=r(cDr,"DetrConfig"),cDr.forEach(t),uVe=r(i3," (DETR model)"),i3.forEach(t),_Ve=i(y),Xf=n(y,"LI",{});var yEe=s(Xf);Yee=n(yEe,"STRONG",{});var fDr=s(Yee);bVe=r(fDr,"distilbert"),fDr.forEach(t),vVe=r(yEe," \u2014 "),ek=n(yEe,"A",{href:!0});var mDr=s(ek);FVe=r(mDr,"DistilBertConfig"),mDr.forEach(t),TVe=r(yEe," (DistilBERT model)"),yEe.forEach(t),MVe=i(y),zf=n(y,"LI",{});var LEe=s(zf);Kee=n(LEe,"STRONG",{});var gDr=s(Kee);EVe=r(gDr,"dpr"),gDr.forEach(t),CVe=r(LEe," \u2014 "),ok=n(LEe,"A",{href:!0});var hDr=s(ok);wVe=r(hDr,"DPRConfig"),hDr.forEach(t),AVe=r(LEe," (DPR model)"),LEe.forEach(t),yVe=i(y),Wf=n(y,"LI",{});var xEe=s(Wf);Zee=n(xEe,"STRONG",{});var pDr=s(Zee);LVe=r(pDr,"dpt"),pDr.forEach(t),xVe=r(xEe," \u2014 "),rk=n(xEe,"A",{href:!0});var uDr=s(rk);$Ve=r(uDr,"DPTConfig"),uDr.forEach(t),kVe=r(xEe," (DPT model)"),xEe.forEach(t),SVe=i(y),Qf=n(y,"LI",{});var $Ee=s(Qf);eoe=n($Ee,"STRONG",{});var _Dr=s(eoe);RVe=r(_Dr,"electra"),_Dr.forEach(t),PVe=r($Ee," \u2014 "),tk=n($Ee,"A",{href:!0});var bDr=s(tk);BVe=r(bDr,"ElectraConfig"),bDr.forEach(t),IVe=r($Ee," (ELECTRA model)"),$Ee.forEach(t),qVe=i(y),Hf=n(y,"LI",{});var kEe=s(Hf);ooe=n(kEe,"STRONG",{});var vDr=s(ooe);NVe=r(vDr,"encoder-decoder"),vDr.forEach(t),jVe=r(kEe," \u2014 "),ak=n(kEe,"A",{href:!0});var FDr=s(ak);DVe=r(FDr,"EncoderDecoderConfig"),FDr.forEach(t),GVe=r(kEe," (Encoder decoder model)"),kEe.forEach(t),OVe=i(y),Uf=n(y,"LI",{});var SEe=s(Uf);roe=n(SEe,"STRONG",{});var TDr=s(roe);VVe=r(TDr,"flaubert"),TDr.forEach(t),XVe=r(SEe," \u2014 "),nk=n(SEe,"A",{href:!0});var MDr=s(nk);zVe=r(MDr,"FlaubertConfig"),MDr.forEach(t),WVe=r(SEe," (FlauBERT model)"),SEe.forEach(t),QVe=i(y),Jf=n(y,"LI",{});var REe=s(Jf);toe=n(REe,"STRONG",{});var EDr=s(toe);HVe=r(EDr,"flava"),EDr.forEach(t),UVe=r(REe," \u2014 "),sk=n(REe,"A",{href:!0});var CDr=s(sk);JVe=r(CDr,"FlavaConfig"),CDr.forEach(t),YVe=r(REe," (Flava model)"),REe.forEach(t),KVe=i(y),Yf=n(y,"LI",{});var PEe=s(Yf);aoe=n(PEe,"STRONG",{});var wDr=s(aoe);ZVe=r(wDr,"fnet"),wDr.forEach(t),eXe=r(PEe," \u2014 "),lk=n(PEe,"A",{href:!0});var ADr=s(lk);oXe=r(ADr,"FNetConfig"),ADr.forEach(t),rXe=r(PEe," (FNet model)"),PEe.forEach(t),tXe=i(y),Kf=n(y,"LI",{});var BEe=s(Kf);noe=n(BEe,"STRONG",{});var yDr=s(noe);aXe=r(yDr,"fsmt"),yDr.forEach(t),nXe=r(BEe," \u2014 "),ik=n(BEe,"A",{href:!0});var LDr=s(ik);sXe=r(LDr,"FSMTConfig"),LDr.forEach(t),lXe=r(BEe," (FairSeq Machine-Translation model)"),BEe.forEach(t),iXe=i(y),Zf=n(y,"LI",{});var IEe=s(Zf);soe=n(IEe,"STRONG",{});var xDr=s(soe);dXe=r(xDr,"funnel"),xDr.forEach(t),cXe=r(IEe," \u2014 "),dk=n(IEe,"A",{href:!0});var $Dr=s(dk);fXe=r($Dr,"FunnelConfig"),$Dr.forEach(t),mXe=r(IEe," (Funnel Transformer model)"),IEe.forEach(t),gXe=i(y),em=n(y,"LI",{});var qEe=s(em);loe=n(qEe,"STRONG",{});var kDr=s(loe);hXe=r(kDr,"glpn"),kDr.forEach(t),pXe=r(qEe," \u2014 "),ck=n(qEe,"A",{href:!0});var SDr=s(ck);uXe=r(SDr,"GLPNConfig"),SDr.forEach(t),_Xe=r(qEe," (GLPN model)"),qEe.forEach(t),bXe=i(y),om=n(y,"LI",{});var NEe=s(om);ioe=n(NEe,"STRONG",{});var RDr=s(ioe);vXe=r(RDr,"gpt2"),RDr.forEach(t),FXe=r(NEe," \u2014 "),fk=n(NEe,"A",{href:!0});var PDr=s(fk);TXe=r(PDr,"GPT2Config"),PDr.forEach(t),MXe=r(NEe," (OpenAI GPT-2 model)"),NEe.forEach(t),EXe=i(y),rm=n(y,"LI",{});var jEe=s(rm);doe=n(jEe,"STRONG",{});var BDr=s(doe);CXe=r(BDr,"gpt_neo"),BDr.forEach(t),wXe=r(jEe," \u2014 "),mk=n(jEe,"A",{href:!0});var IDr=s(mk);AXe=r(IDr,"GPTNeoConfig"),IDr.forEach(t),yXe=r(jEe," (GPT Neo model)"),jEe.forEach(t),LXe=i(y),tm=n(y,"LI",{});var DEe=s(tm);coe=n(DEe,"STRONG",{});var qDr=s(coe);xXe=r(qDr,"gptj"),qDr.forEach(t),$Xe=r(DEe," \u2014 "),gk=n(DEe,"A",{href:!0});var NDr=s(gk);kXe=r(NDr,"GPTJConfig"),NDr.forEach(t),SXe=r(DEe," (GPT-J model)"),DEe.forEach(t),RXe=i(y),am=n(y,"LI",{});var GEe=s(am);foe=n(GEe,"STRONG",{});var jDr=s(foe);PXe=r(jDr,"hubert"),jDr.forEach(t),BXe=r(GEe," \u2014 "),hk=n(GEe,"A",{href:!0});var DDr=s(hk);IXe=r(DDr,"HubertConfig"),DDr.forEach(t),qXe=r(GEe," (Hubert model)"),GEe.forEach(t),NXe=i(y),nm=n(y,"LI",{});var OEe=s(nm);moe=n(OEe,"STRONG",{});var GDr=s(moe);jXe=r(GDr,"ibert"),GDr.forEach(t),DXe=r(OEe," \u2014 "),pk=n(OEe,"A",{href:!0});var ODr=s(pk);GXe=r(ODr,"IBertConfig"),ODr.forEach(t),OXe=r(OEe," (I-BERT model)"),OEe.forEach(t),VXe=i(y),sm=n(y,"LI",{});var VEe=s(sm);goe=n(VEe,"STRONG",{});var VDr=s(goe);XXe=r(VDr,"imagegpt"),VDr.forEach(t),zXe=r(VEe," \u2014 "),uk=n(VEe,"A",{href:!0});var XDr=s(uk);WXe=r(XDr,"ImageGPTConfig"),XDr.forEach(t),QXe=r(VEe," (ImageGPT model)"),VEe.forEach(t),HXe=i(y),lm=n(y,"LI",{});var XEe=s(lm);hoe=n(XEe,"STRONG",{});var zDr=s(hoe);UXe=r(zDr,"layoutlm"),zDr.forEach(t),JXe=r(XEe," \u2014 "),_k=n(XEe,"A",{href:!0});var WDr=s(_k);YXe=r(WDr,"LayoutLMConfig"),WDr.forEach(t),KXe=r(XEe," (LayoutLM model)"),XEe.forEach(t),ZXe=i(y),im=n(y,"LI",{});var zEe=s(im);poe=n(zEe,"STRONG",{});var QDr=s(poe);eze=r(QDr,"layoutlmv2"),QDr.forEach(t),oze=r(zEe," \u2014 "),bk=n(zEe,"A",{href:!0});var HDr=s(bk);rze=r(HDr,"LayoutLMv2Config"),HDr.forEach(t),tze=r(zEe," (LayoutLMv2 model)"),zEe.forEach(t),aze=i(y),dm=n(y,"LI",{});var WEe=s(dm);uoe=n(WEe,"STRONG",{});var UDr=s(uoe);nze=r(UDr,"led"),UDr.forEach(t),sze=r(WEe," \u2014 "),vk=n(WEe,"A",{href:!0});var JDr=s(vk);lze=r(JDr,"LEDConfig"),JDr.forEach(t),ize=r(WEe," (LED model)"),WEe.forEach(t),dze=i(y),cm=n(y,"LI",{});var QEe=s(cm);_oe=n(QEe,"STRONG",{});var YDr=s(_oe);cze=r(YDr,"longformer"),YDr.forEach(t),fze=r(QEe," \u2014 "),Fk=n(QEe,"A",{href:!0});var KDr=s(Fk);mze=r(KDr,"LongformerConfig"),KDr.forEach(t),gze=r(QEe," (Longformer model)"),QEe.forEach(t),hze=i(y),fm=n(y,"LI",{});var HEe=s(fm);boe=n(HEe,"STRONG",{});var ZDr=s(boe);pze=r(ZDr,"luke"),ZDr.forEach(t),uze=r(HEe," \u2014 "),Tk=n(HEe,"A",{href:!0});var eGr=s(Tk);_ze=r(eGr,"LukeConfig"),eGr.forEach(t),bze=r(HEe," (LUKE model)"),HEe.forEach(t),vze=i(y),mm=n(y,"LI",{});var UEe=s(mm);voe=n(UEe,"STRONG",{});var oGr=s(voe);Fze=r(oGr,"lxmert"),oGr.forEach(t),Tze=r(UEe," \u2014 "),Mk=n(UEe,"A",{href:!0});var rGr=s(Mk);Mze=r(rGr,"LxmertConfig"),rGr.forEach(t),Eze=r(UEe," (LXMERT model)"),UEe.forEach(t),Cze=i(y),gm=n(y,"LI",{});var JEe=s(gm);Foe=n(JEe,"STRONG",{});var tGr=s(Foe);wze=r(tGr,"m2m_100"),tGr.forEach(t),Aze=r(JEe," \u2014 "),Ek=n(JEe,"A",{href:!0});var aGr=s(Ek);yze=r(aGr,"M2M100Config"),aGr.forEach(t),Lze=r(JEe," (M2M100 model)"),JEe.forEach(t),xze=i(y),hm=n(y,"LI",{});var YEe=s(hm);Toe=n(YEe,"STRONG",{});var nGr=s(Toe);$ze=r(nGr,"marian"),nGr.forEach(t),kze=r(YEe," \u2014 "),Ck=n(YEe,"A",{href:!0});var sGr=s(Ck);Sze=r(sGr,"MarianConfig"),sGr.forEach(t),Rze=r(YEe," (Marian model)"),YEe.forEach(t),Pze=i(y),pm=n(y,"LI",{});var KEe=s(pm);Moe=n(KEe,"STRONG",{});var lGr=s(Moe);Bze=r(lGr,"maskformer"),lGr.forEach(t),Ize=r(KEe," \u2014 "),wk=n(KEe,"A",{href:!0});var iGr=s(wk);qze=r(iGr,"MaskFormerConfig"),iGr.forEach(t),Nze=r(KEe," (MaskFormer model)"),KEe.forEach(t),jze=i(y),um=n(y,"LI",{});var ZEe=s(um);Eoe=n(ZEe,"STRONG",{});var dGr=s(Eoe);Dze=r(dGr,"mbart"),dGr.forEach(t),Gze=r(ZEe," \u2014 "),Ak=n(ZEe,"A",{href:!0});var cGr=s(Ak);Oze=r(cGr,"MBartConfig"),cGr.forEach(t),Vze=r(ZEe," (mBART model)"),ZEe.forEach(t),Xze=i(y),_m=n(y,"LI",{});var eCe=s(_m);Coe=n(eCe,"STRONG",{});var fGr=s(Coe);zze=r(fGr,"megatron-bert"),fGr.forEach(t),Wze=r(eCe," \u2014 "),yk=n(eCe,"A",{href:!0});var mGr=s(yk);Qze=r(mGr,"MegatronBertConfig"),mGr.forEach(t),Hze=r(eCe," (MegatronBert model)"),eCe.forEach(t),Uze=i(y),bm=n(y,"LI",{});var oCe=s(bm);woe=n(oCe,"STRONG",{});var gGr=s(woe);Jze=r(gGr,"mobilebert"),gGr.forEach(t),Yze=r(oCe," \u2014 "),Lk=n(oCe,"A",{href:!0});var hGr=s(Lk);Kze=r(hGr,"MobileBertConfig"),hGr.forEach(t),Zze=r(oCe," (MobileBERT model)"),oCe.forEach(t),eWe=i(y),vm=n(y,"LI",{});var rCe=s(vm);Aoe=n(rCe,"STRONG",{});var pGr=s(Aoe);oWe=r(pGr,"mpnet"),pGr.forEach(t),rWe=r(rCe," \u2014 "),xk=n(rCe,"A",{href:!0});var uGr=s(xk);tWe=r(uGr,"MPNetConfig"),uGr.forEach(t),aWe=r(rCe," (MPNet model)"),rCe.forEach(t),nWe=i(y),Fm=n(y,"LI",{});var tCe=s(Fm);yoe=n(tCe,"STRONG",{});var _Gr=s(yoe);sWe=r(_Gr,"mt5"),_Gr.forEach(t),lWe=r(tCe," \u2014 "),$k=n(tCe,"A",{href:!0});var bGr=s($k);iWe=r(bGr,"MT5Config"),bGr.forEach(t),dWe=r(tCe," (mT5 model)"),tCe.forEach(t),cWe=i(y),Tm=n(y,"LI",{});var aCe=s(Tm);Loe=n(aCe,"STRONG",{});var vGr=s(Loe);fWe=r(vGr,"nystromformer"),vGr.forEach(t),mWe=r(aCe," \u2014 "),kk=n(aCe,"A",{href:!0});var FGr=s(kk);gWe=r(FGr,"NystromformerConfig"),FGr.forEach(t),hWe=r(aCe," (Nystromformer model)"),aCe.forEach(t),pWe=i(y),Mm=n(y,"LI",{});var nCe=s(Mm);xoe=n(nCe,"STRONG",{});var TGr=s(xoe);uWe=r(TGr,"openai-gpt"),TGr.forEach(t),_We=r(nCe," \u2014 "),Sk=n(nCe,"A",{href:!0});var MGr=s(Sk);bWe=r(MGr,"OpenAIGPTConfig"),MGr.forEach(t),vWe=r(nCe," (OpenAI GPT model)"),nCe.forEach(t),FWe=i(y),Em=n(y,"LI",{});var sCe=s(Em);$oe=n(sCe,"STRONG",{});var EGr=s($oe);TWe=r(EGr,"opt"),EGr.forEach(t),MWe=r(sCe," \u2014 "),Rk=n(sCe,"A",{href:!0});var CGr=s(Rk);EWe=r(CGr,"OPTConfig"),CGr.forEach(t),CWe=r(sCe," (OPT model)"),sCe.forEach(t),wWe=i(y),Cm=n(y,"LI",{});var lCe=s(Cm);koe=n(lCe,"STRONG",{});var wGr=s(koe);AWe=r(wGr,"pegasus"),wGr.forEach(t),yWe=r(lCe," \u2014 "),Pk=n(lCe,"A",{href:!0});var AGr=s(Pk);LWe=r(AGr,"PegasusConfig"),AGr.forEach(t),xWe=r(lCe," (Pegasus model)"),lCe.forEach(t),$We=i(y),wm=n(y,"LI",{});var iCe=s(wm);Soe=n(iCe,"STRONG",{});var yGr=s(Soe);kWe=r(yGr,"perceiver"),yGr.forEach(t),SWe=r(iCe," \u2014 "),Bk=n(iCe,"A",{href:!0});var LGr=s(Bk);RWe=r(LGr,"PerceiverConfig"),LGr.forEach(t),PWe=r(iCe," (Perceiver model)"),iCe.forEach(t),BWe=i(y),Am=n(y,"LI",{});var dCe=s(Am);Roe=n(dCe,"STRONG",{});var xGr=s(Roe);IWe=r(xGr,"plbart"),xGr.forEach(t),qWe=r(dCe," \u2014 "),Ik=n(dCe,"A",{href:!0});var $Gr=s(Ik);NWe=r($Gr,"PLBartConfig"),$Gr.forEach(t),jWe=r(dCe," (PLBart model)"),dCe.forEach(t),DWe=i(y),ym=n(y,"LI",{});var cCe=s(ym);Poe=n(cCe,"STRONG",{});var kGr=s(Poe);GWe=r(kGr,"poolformer"),kGr.forEach(t),OWe=r(cCe," \u2014 "),qk=n(cCe,"A",{href:!0});var SGr=s(qk);VWe=r(SGr,"PoolFormerConfig"),SGr.forEach(t),XWe=r(cCe," (PoolFormer model)"),cCe.forEach(t),zWe=i(y),Lm=n(y,"LI",{});var fCe=s(Lm);Boe=n(fCe,"STRONG",{});var RGr=s(Boe);WWe=r(RGr,"prophetnet"),RGr.forEach(t),QWe=r(fCe," \u2014 "),Nk=n(fCe,"A",{href:!0});var PGr=s(Nk);HWe=r(PGr,"ProphetNetConfig"),PGr.forEach(t),UWe=r(fCe," (ProphetNet model)"),fCe.forEach(t),JWe=i(y),xm=n(y,"LI",{});var mCe=s(xm);Ioe=n(mCe,"STRONG",{});var BGr=s(Ioe);YWe=r(BGr,"qdqbert"),BGr.forEach(t),KWe=r(mCe," \u2014 "),jk=n(mCe,"A",{href:!0});var IGr=s(jk);ZWe=r(IGr,"QDQBertConfig"),IGr.forEach(t),eQe=r(mCe," (QDQBert model)"),mCe.forEach(t),oQe=i(y),$m=n(y,"LI",{});var gCe=s($m);qoe=n(gCe,"STRONG",{});var qGr=s(qoe);rQe=r(qGr,"rag"),qGr.forEach(t),tQe=r(gCe," \u2014 "),Dk=n(gCe,"A",{href:!0});var NGr=s(Dk);aQe=r(NGr,"RagConfig"),NGr.forEach(t),nQe=r(gCe," (RAG model)"),gCe.forEach(t),sQe=i(y),km=n(y,"LI",{});var hCe=s(km);Noe=n(hCe,"STRONG",{});var jGr=s(Noe);lQe=r(jGr,"realm"),jGr.forEach(t),iQe=r(hCe," \u2014 "),Gk=n(hCe,"A",{href:!0});var DGr=s(Gk);dQe=r(DGr,"RealmConfig"),DGr.forEach(t),cQe=r(hCe," (Realm model)"),hCe.forEach(t),fQe=i(y),Sm=n(y,"LI",{});var pCe=s(Sm);joe=n(pCe,"STRONG",{});var GGr=s(joe);mQe=r(GGr,"reformer"),GGr.forEach(t),gQe=r(pCe," \u2014 "),Ok=n(pCe,"A",{href:!0});var OGr=s(Ok);hQe=r(OGr,"ReformerConfig"),OGr.forEach(t),pQe=r(pCe," (Reformer model)"),pCe.forEach(t),uQe=i(y),Rm=n(y,"LI",{});var uCe=s(Rm);Doe=n(uCe,"STRONG",{});var VGr=s(Doe);_Qe=r(VGr,"regnet"),VGr.forEach(t),bQe=r(uCe," \u2014 "),Vk=n(uCe,"A",{href:!0});var XGr=s(Vk);vQe=r(XGr,"RegNetConfig"),XGr.forEach(t),FQe=r(uCe," (RegNet model)"),uCe.forEach(t),TQe=i(y),Pm=n(y,"LI",{});var _Ce=s(Pm);Goe=n(_Ce,"STRONG",{});var zGr=s(Goe);MQe=r(zGr,"rembert"),zGr.forEach(t),EQe=r(_Ce," \u2014 "),Xk=n(_Ce,"A",{href:!0});var WGr=s(Xk);CQe=r(WGr,"RemBertConfig"),WGr.forEach(t),wQe=r(_Ce," (RemBERT model)"),_Ce.forEach(t),AQe=i(y),Bm=n(y,"LI",{});var bCe=s(Bm);Ooe=n(bCe,"STRONG",{});var QGr=s(Ooe);yQe=r(QGr,"resnet"),QGr.forEach(t),LQe=r(bCe," \u2014 "),zk=n(bCe,"A",{href:!0});var HGr=s(zk);xQe=r(HGr,"ResNetConfig"),HGr.forEach(t),$Qe=r(bCe," (ResNet model)"),bCe.forEach(t),kQe=i(y),Im=n(y,"LI",{});var vCe=s(Im);Voe=n(vCe,"STRONG",{});var UGr=s(Voe);SQe=r(UGr,"retribert"),UGr.forEach(t),RQe=r(vCe," \u2014 "),Wk=n(vCe,"A",{href:!0});var JGr=s(Wk);PQe=r(JGr,"RetriBertConfig"),JGr.forEach(t),BQe=r(vCe," (RetriBERT model)"),vCe.forEach(t),IQe=i(y),qm=n(y,"LI",{});var FCe=s(qm);Xoe=n(FCe,"STRONG",{});var YGr=s(Xoe);qQe=r(YGr,"roberta"),YGr.forEach(t),NQe=r(FCe," \u2014 "),Qk=n(FCe,"A",{href:!0});var KGr=s(Qk);jQe=r(KGr,"RobertaConfig"),KGr.forEach(t),DQe=r(FCe," (RoBERTa model)"),FCe.forEach(t),GQe=i(y),Nm=n(y,"LI",{});var TCe=s(Nm);zoe=n(TCe,"STRONG",{});var ZGr=s(zoe);OQe=r(ZGr,"roformer"),ZGr.forEach(t),VQe=r(TCe," \u2014 "),Hk=n(TCe,"A",{href:!0});var eOr=s(Hk);XQe=r(eOr,"RoFormerConfig"),eOr.forEach(t),zQe=r(TCe," (RoFormer model)"),TCe.forEach(t),WQe=i(y),jm=n(y,"LI",{});var MCe=s(jm);Woe=n(MCe,"STRONG",{});var oOr=s(Woe);QQe=r(oOr,"segformer"),oOr.forEach(t),HQe=r(MCe," \u2014 "),Uk=n(MCe,"A",{href:!0});var rOr=s(Uk);UQe=r(rOr,"SegformerConfig"),rOr.forEach(t),JQe=r(MCe," (SegFormer model)"),MCe.forEach(t),YQe=i(y),Dm=n(y,"LI",{});var ECe=s(Dm);Qoe=n(ECe,"STRONG",{});var tOr=s(Qoe);KQe=r(tOr,"sew"),tOr.forEach(t),ZQe=r(ECe," \u2014 "),Jk=n(ECe,"A",{href:!0});var aOr=s(Jk);eHe=r(aOr,"SEWConfig"),aOr.forEach(t),oHe=r(ECe," (SEW model)"),ECe.forEach(t),rHe=i(y),Gm=n(y,"LI",{});var CCe=s(Gm);Hoe=n(CCe,"STRONG",{});var nOr=s(Hoe);tHe=r(nOr,"sew-d"),nOr.forEach(t),aHe=r(CCe," \u2014 "),Yk=n(CCe,"A",{href:!0});var sOr=s(Yk);nHe=r(sOr,"SEWDConfig"),sOr.forEach(t),sHe=r(CCe," (SEW-D model)"),CCe.forEach(t),lHe=i(y),Om=n(y,"LI",{});var wCe=s(Om);Uoe=n(wCe,"STRONG",{});var lOr=s(Uoe);iHe=r(lOr,"speech-encoder-decoder"),lOr.forEach(t),dHe=r(wCe," \u2014 "),Kk=n(wCe,"A",{href:!0});var iOr=s(Kk);cHe=r(iOr,"SpeechEncoderDecoderConfig"),iOr.forEach(t),fHe=r(wCe," (Speech Encoder decoder model)"),wCe.forEach(t),mHe=i(y),Vm=n(y,"LI",{});var ACe=s(Vm);Joe=n(ACe,"STRONG",{});var dOr=s(Joe);gHe=r(dOr,"speech_to_text"),dOr.forEach(t),hHe=r(ACe," \u2014 "),Zk=n(ACe,"A",{href:!0});var cOr=s(Zk);pHe=r(cOr,"Speech2TextConfig"),cOr.forEach(t),uHe=r(ACe," (Speech2Text model)"),ACe.forEach(t),_He=i(y),Xm=n(y,"LI",{});var yCe=s(Xm);Yoe=n(yCe,"STRONG",{});var fOr=s(Yoe);bHe=r(fOr,"speech_to_text_2"),fOr.forEach(t),vHe=r(yCe," \u2014 "),eS=n(yCe,"A",{href:!0});var mOr=s(eS);FHe=r(mOr,"Speech2Text2Config"),mOr.forEach(t),THe=r(yCe," (Speech2Text2 model)"),yCe.forEach(t),MHe=i(y),zm=n(y,"LI",{});var LCe=s(zm);Koe=n(LCe,"STRONG",{});var gOr=s(Koe);EHe=r(gOr,"splinter"),gOr.forEach(t),CHe=r(LCe," \u2014 "),oS=n(LCe,"A",{href:!0});var hOr=s(oS);wHe=r(hOr,"SplinterConfig"),hOr.forEach(t),AHe=r(LCe," (Splinter model)"),LCe.forEach(t),yHe=i(y),Wm=n(y,"LI",{});var xCe=s(Wm);Zoe=n(xCe,"STRONG",{});var pOr=s(Zoe);LHe=r(pOr,"squeezebert"),pOr.forEach(t),xHe=r(xCe," \u2014 "),rS=n(xCe,"A",{href:!0});var uOr=s(rS);$He=r(uOr,"SqueezeBertConfig"),uOr.forEach(t),kHe=r(xCe," (SqueezeBERT model)"),xCe.forEach(t),SHe=i(y),Qm=n(y,"LI",{});var $Ce=s(Qm);ere=n($Ce,"STRONG",{});var _Or=s(ere);RHe=r(_Or,"swin"),_Or.forEach(t),PHe=r($Ce," \u2014 "),tS=n($Ce,"A",{href:!0});var bOr=s(tS);BHe=r(bOr,"SwinConfig"),bOr.forEach(t),IHe=r($Ce," (Swin model)"),$Ce.forEach(t),qHe=i(y),Hm=n(y,"LI",{});var kCe=s(Hm);ore=n(kCe,"STRONG",{});var vOr=s(ore);NHe=r(vOr,"t5"),vOr.forEach(t),jHe=r(kCe," \u2014 "),aS=n(kCe,"A",{href:!0});var FOr=s(aS);DHe=r(FOr,"T5Config"),FOr.forEach(t),GHe=r(kCe," (T5 model)"),kCe.forEach(t),OHe=i(y),Um=n(y,"LI",{});var SCe=s(Um);rre=n(SCe,"STRONG",{});var TOr=s(rre);VHe=r(TOr,"tapas"),TOr.forEach(t),XHe=r(SCe," \u2014 "),nS=n(SCe,"A",{href:!0});var MOr=s(nS);zHe=r(MOr,"TapasConfig"),MOr.forEach(t),WHe=r(SCe," (TAPAS model)"),SCe.forEach(t),QHe=i(y),Jm=n(y,"LI",{});var RCe=s(Jm);tre=n(RCe,"STRONG",{});var EOr=s(tre);HHe=r(EOr,"transfo-xl"),EOr.forEach(t),UHe=r(RCe," \u2014 "),sS=n(RCe,"A",{href:!0});var COr=s(sS);JHe=r(COr,"TransfoXLConfig"),COr.forEach(t),YHe=r(RCe," (Transformer-XL model)"),RCe.forEach(t),KHe=i(y),Ym=n(y,"LI",{});var PCe=s(Ym);are=n(PCe,"STRONG",{});var wOr=s(are);ZHe=r(wOr,"trocr"),wOr.forEach(t),eUe=r(PCe," \u2014 "),lS=n(PCe,"A",{href:!0});var AOr=s(lS);oUe=r(AOr,"TrOCRConfig"),AOr.forEach(t),rUe=r(PCe," (TrOCR model)"),PCe.forEach(t),tUe=i(y),Km=n(y,"LI",{});var BCe=s(Km);nre=n(BCe,"STRONG",{});var yOr=s(nre);aUe=r(yOr,"unispeech"),yOr.forEach(t),nUe=r(BCe," \u2014 "),iS=n(BCe,"A",{href:!0});var LOr=s(iS);sUe=r(LOr,"UniSpeechConfig"),LOr.forEach(t),lUe=r(BCe," (UniSpeech model)"),BCe.forEach(t),iUe=i(y),Zm=n(y,"LI",{});var ICe=s(Zm);sre=n(ICe,"STRONG",{});var xOr=s(sre);dUe=r(xOr,"unispeech-sat"),xOr.forEach(t),cUe=r(ICe," \u2014 "),dS=n(ICe,"A",{href:!0});var $Or=s(dS);fUe=r($Or,"UniSpeechSatConfig"),$Or.forEach(t),mUe=r(ICe," (UniSpeechSat model)"),ICe.forEach(t),gUe=i(y),eg=n(y,"LI",{});var qCe=s(eg);lre=n(qCe,"STRONG",{});var kOr=s(lre);hUe=r(kOr,"van"),kOr.forEach(t),pUe=r(qCe," \u2014 "),cS=n(qCe,"A",{href:!0});var SOr=s(cS);uUe=r(SOr,"VanConfig"),SOr.forEach(t),_Ue=r(qCe," (VAN model)"),qCe.forEach(t),bUe=i(y),og=n(y,"LI",{});var NCe=s(og);ire=n(NCe,"STRONG",{});var ROr=s(ire);vUe=r(ROr,"vilt"),ROr.forEach(t),FUe=r(NCe," \u2014 "),fS=n(NCe,"A",{href:!0});var POr=s(fS);TUe=r(POr,"ViltConfig"),POr.forEach(t),MUe=r(NCe," (ViLT model)"),NCe.forEach(t),EUe=i(y),rg=n(y,"LI",{});var jCe=s(rg);dre=n(jCe,"STRONG",{});var BOr=s(dre);CUe=r(BOr,"vision-encoder-decoder"),BOr.forEach(t),wUe=r(jCe," \u2014 "),mS=n(jCe,"A",{href:!0});var IOr=s(mS);AUe=r(IOr,"VisionEncoderDecoderConfig"),IOr.forEach(t),yUe=r(jCe," (Vision Encoder decoder model)"),jCe.forEach(t),LUe=i(y),tg=n(y,"LI",{});var DCe=s(tg);cre=n(DCe,"STRONG",{});var qOr=s(cre);xUe=r(qOr,"vision-text-dual-encoder"),qOr.forEach(t),$Ue=r(DCe," \u2014 "),gS=n(DCe,"A",{href:!0});var NOr=s(gS);kUe=r(NOr,"VisionTextDualEncoderConfig"),NOr.forEach(t),SUe=r(DCe," (VisionTextDualEncoder model)"),DCe.forEach(t),RUe=i(y),ag=n(y,"LI",{});var GCe=s(ag);fre=n(GCe,"STRONG",{});var jOr=s(fre);PUe=r(jOr,"visual_bert"),jOr.forEach(t),BUe=r(GCe," \u2014 "),hS=n(GCe,"A",{href:!0});var DOr=s(hS);IUe=r(DOr,"VisualBertConfig"),DOr.forEach(t),qUe=r(GCe," (VisualBert model)"),GCe.forEach(t),NUe=i(y),ng=n(y,"LI",{});var OCe=s(ng);mre=n(OCe,"STRONG",{});var GOr=s(mre);jUe=r(GOr,"vit"),GOr.forEach(t),DUe=r(OCe," \u2014 "),pS=n(OCe,"A",{href:!0});var OOr=s(pS);GUe=r(OOr,"ViTConfig"),OOr.forEach(t),OUe=r(OCe," (ViT model)"),OCe.forEach(t),VUe=i(y),sg=n(y,"LI",{});var VCe=s(sg);gre=n(VCe,"STRONG",{});var VOr=s(gre);XUe=r(VOr,"vit_mae"),VOr.forEach(t),zUe=r(VCe," \u2014 "),uS=n(VCe,"A",{href:!0});var XOr=s(uS);WUe=r(XOr,"ViTMAEConfig"),XOr.forEach(t),QUe=r(VCe," (ViTMAE model)"),VCe.forEach(t),HUe=i(y),lg=n(y,"LI",{});var XCe=s(lg);hre=n(XCe,"STRONG",{});var zOr=s(hre);UUe=r(zOr,"wav2vec2"),zOr.forEach(t),JUe=r(XCe," \u2014 "),_S=n(XCe,"A",{href:!0});var WOr=s(_S);YUe=r(WOr,"Wav2Vec2Config"),WOr.forEach(t),KUe=r(XCe," (Wav2Vec2 model)"),XCe.forEach(t),ZUe=i(y),ig=n(y,"LI",{});var zCe=s(ig);pre=n(zCe,"STRONG",{});var QOr=s(pre);eJe=r(QOr,"wav2vec2-conformer"),QOr.forEach(t),oJe=r(zCe," \u2014 "),bS=n(zCe,"A",{href:!0});var HOr=s(bS);rJe=r(HOr,"Wav2Vec2ConformerConfig"),HOr.forEach(t),tJe=r(zCe," (Wav2Vec2-Conformer model)"),zCe.forEach(t),aJe=i(y),dg=n(y,"LI",{});var WCe=s(dg);ure=n(WCe,"STRONG",{});var UOr=s(ure);nJe=r(UOr,"wavlm"),UOr.forEach(t),sJe=r(WCe," \u2014 "),vS=n(WCe,"A",{href:!0});var JOr=s(vS);lJe=r(JOr,"WavLMConfig"),JOr.forEach(t),iJe=r(WCe," (WavLM model)"),WCe.forEach(t),dJe=i(y),cg=n(y,"LI",{});var QCe=s(cg);_re=n(QCe,"STRONG",{});var YOr=s(_re);cJe=r(YOr,"xglm"),YOr.forEach(t),fJe=r(QCe," \u2014 "),FS=n(QCe,"A",{href:!0});var KOr=s(FS);mJe=r(KOr,"XGLMConfig"),KOr.forEach(t),gJe=r(QCe," (XGLM model)"),QCe.forEach(t),hJe=i(y),fg=n(y,"LI",{});var HCe=s(fg);bre=n(HCe,"STRONG",{});var ZOr=s(bre);pJe=r(ZOr,"xlm"),ZOr.forEach(t),uJe=r(HCe," \u2014 "),TS=n(HCe,"A",{href:!0});var eVr=s(TS);_Je=r(eVr,"XLMConfig"),eVr.forEach(t),bJe=r(HCe," (XLM model)"),HCe.forEach(t),vJe=i(y),mg=n(y,"LI",{});var UCe=s(mg);vre=n(UCe,"STRONG",{});var oVr=s(vre);FJe=r(oVr,"xlm-prophetnet"),oVr.forEach(t),TJe=r(UCe," \u2014 "),MS=n(UCe,"A",{href:!0});var rVr=s(MS);MJe=r(rVr,"XLMProphetNetConfig"),rVr.forEach(t),EJe=r(UCe," (XLMProphetNet model)"),UCe.forEach(t),CJe=i(y),gg=n(y,"LI",{});var JCe=s(gg);Fre=n(JCe,"STRONG",{});var tVr=s(Fre);wJe=r(tVr,"xlm-roberta"),tVr.forEach(t),AJe=r(JCe," \u2014 "),ES=n(JCe,"A",{href:!0});var aVr=s(ES);yJe=r(aVr,"XLMRobertaConfig"),aVr.forEach(t),LJe=r(JCe," (XLM-RoBERTa model)"),JCe.forEach(t),xJe=i(y),hg=n(y,"LI",{});var YCe=s(hg);Tre=n(YCe,"STRONG",{});var nVr=s(Tre);$Je=r(nVr,"xlm-roberta-xl"),nVr.forEach(t),kJe=r(YCe," \u2014 "),CS=n(YCe,"A",{href:!0});var sVr=s(CS);SJe=r(sVr,"XLMRobertaXLConfig"),sVr.forEach(t),RJe=r(YCe," (XLM-RoBERTa-XL model)"),YCe.forEach(t),PJe=i(y),pg=n(y,"LI",{});var KCe=s(pg);Mre=n(KCe,"STRONG",{});var lVr=s(Mre);BJe=r(lVr,"xlnet"),lVr.forEach(t),IJe=r(KCe," \u2014 "),wS=n(KCe,"A",{href:!0});var iVr=s(wS);qJe=r(iVr,"XLNetConfig"),iVr.forEach(t),NJe=r(KCe," (XLNet model)"),KCe.forEach(t),jJe=i(y),ug=n(y,"LI",{});var ZCe=s(ug);Ere=n(ZCe,"STRONG",{});var dVr=s(Ere);DJe=r(dVr,"yolos"),dVr.forEach(t),GJe=r(ZCe," \u2014 "),AS=n(ZCe,"A",{href:!0});var cVr=s(AS);OJe=r(cVr,"YolosConfig"),cVr.forEach(t),VJe=r(ZCe," (YOLOS model)"),ZCe.forEach(t),XJe=i(y),_g=n(y,"LI",{});var e5e=s(_g);Cre=n(e5e,"STRONG",{});var fVr=s(Cre);zJe=r(fVr,"yoso"),fVr.forEach(t),WJe=r(e5e," \u2014 "),yS=n(e5e,"A",{href:!0});var mVr=s(yS);QJe=r(mVr,"YosoConfig"),mVr.forEach(t),HJe=r(e5e," (YOSO model)"),e5e.forEach(t),y.forEach(t),UJe=i(ot),T(bg.$$.fragment,ot),ot.forEach(t),JJe=i(et),vg=n(et,"DIV",{class:!0});var xNe=s(vg);T(hA.$$.fragment,xNe),YJe=i(xNe),wre=n(xNe,"P",{});var gVr=s(wre);KJe=r(gVr,"Register a new configuration for this class."),gVr.forEach(t),xNe.forEach(t),et.forEach(t),SIe=i(f),Fi=n(f,"H2",{class:!0});var $Ne=s(Fi);Fg=n($Ne,"A",{id:!0,class:!0,href:!0});var hVr=s(Fg);Are=n(hVr,"SPAN",{});var pVr=s(Are);T(pA.$$.fragment,pVr),pVr.forEach(t),hVr.forEach(t),ZJe=i($Ne),yre=n($Ne,"SPAN",{});var uVr=s(yre);eYe=r(uVr,"AutoTokenizer"),uVr.forEach(t),$Ne.forEach(t),RIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(uA.$$.fragment,Is),oYe=i(Is),_A=n(Is,"P",{});var kNe=s(_A);rYe=r(kNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LS=n(kNe,"A",{href:!0});var _Vr=s(LS);tYe=r(_Vr,"AutoTokenizer.from_pretrained()"),_Vr.forEach(t),aYe=r(kNe," class method."),kNe.forEach(t),nYe=i(Is),bA=n(Is,"P",{});var SNe=s(bA);sYe=r(SNe,"This class cannot be instantiated directly using "),Lre=n(SNe,"CODE",{});var bVr=s(Lre);lYe=r(bVr,"__init__()"),bVr.forEach(t),iYe=r(SNe," (throws an error)."),SNe.forEach(t),dYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(vA.$$.fragment,qs),cYe=i(qs),xre=n(qs,"P",{});var vVr=s(xre);fYe=r(vVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),vVr.forEach(t),mYe=i(qs),Aa=n(qs,"P",{});var d3=s(Aa);gYe=r(d3,"The tokenizer class to instantiate is selected based on the "),$re=n(d3,"CODE",{});var FVr=s($re);hYe=r(FVr,"model_type"),FVr.forEach(t),pYe=r(d3,` property of the config object (either
passed as an argument or loaded from `),kre=n(d3,"CODE",{});var TVr=s(kre);uYe=r(TVr,"pretrained_model_name_or_path"),TVr.forEach(t),_Ye=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=n(d3,"CODE",{});var MVr=s(Sre);bYe=r(MVr,"pretrained_model_name_or_path"),MVr.forEach(t),vYe=r(d3,":"),d3.forEach(t),FYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var F9=s(Sn);Rre=n(F9,"STRONG",{});var EVr=s(Rre);TYe=r(EVr,"albert"),EVr.forEach(t),MYe=r(F9," \u2014 "),xS=n(F9,"A",{href:!0});var CVr=s(xS);EYe=r(CVr,"AlbertTokenizer"),CVr.forEach(t),CYe=r(F9," or "),$S=n(F9,"A",{href:!0});var wVr=s($S);wYe=r(wVr,"AlbertTokenizerFast"),wVr.forEach(t),AYe=r(F9," (ALBERT model)"),F9.forEach(t),yYe=i(S),Rn=n(S,"LI",{});var T9=s(Rn);Pre=n(T9,"STRONG",{});var AVr=s(Pre);LYe=r(AVr,"bart"),AVr.forEach(t),xYe=r(T9," \u2014 "),kS=n(T9,"A",{href:!0});var yVr=s(kS);$Ye=r(yVr,"BartTokenizer"),yVr.forEach(t),kYe=r(T9," or "),SS=n(T9,"A",{href:!0});var LVr=s(SS);SYe=r(LVr,"BartTokenizerFast"),LVr.forEach(t),RYe=r(T9," (BART model)"),T9.forEach(t),PYe=i(S),Pn=n(S,"LI",{});var M9=s(Pn);Bre=n(M9,"STRONG",{});var xVr=s(Bre);BYe=r(xVr,"barthez"),xVr.forEach(t),IYe=r(M9," \u2014 "),RS=n(M9,"A",{href:!0});var $Vr=s(RS);qYe=r($Vr,"BarthezTokenizer"),$Vr.forEach(t),NYe=r(M9," or "),PS=n(M9,"A",{href:!0});var kVr=s(PS);jYe=r(kVr,"BarthezTokenizerFast"),kVr.forEach(t),DYe=r(M9," (BARThez model)"),M9.forEach(t),GYe=i(S),Tg=n(S,"LI",{});var o5e=s(Tg);Ire=n(o5e,"STRONG",{});var SVr=s(Ire);OYe=r(SVr,"bartpho"),SVr.forEach(t),VYe=r(o5e," \u2014 "),BS=n(o5e,"A",{href:!0});var RVr=s(BS);XYe=r(RVr,"BartphoTokenizer"),RVr.forEach(t),zYe=r(o5e," (BARTpho model)"),o5e.forEach(t),WYe=i(S),Bn=n(S,"LI",{});var E9=s(Bn);qre=n(E9,"STRONG",{});var PVr=s(qre);QYe=r(PVr,"bert"),PVr.forEach(t),HYe=r(E9," \u2014 "),IS=n(E9,"A",{href:!0});var BVr=s(IS);UYe=r(BVr,"BertTokenizer"),BVr.forEach(t),JYe=r(E9," or "),qS=n(E9,"A",{href:!0});var IVr=s(qS);YYe=r(IVr,"BertTokenizerFast"),IVr.forEach(t),KYe=r(E9," (BERT model)"),E9.forEach(t),ZYe=i(S),Mg=n(S,"LI",{});var r5e=s(Mg);Nre=n(r5e,"STRONG",{});var qVr=s(Nre);eKe=r(qVr,"bert-generation"),qVr.forEach(t),oKe=r(r5e," \u2014 "),NS=n(r5e,"A",{href:!0});var NVr=s(NS);rKe=r(NVr,"BertGenerationTokenizer"),NVr.forEach(t),tKe=r(r5e," (Bert Generation model)"),r5e.forEach(t),aKe=i(S),Eg=n(S,"LI",{});var t5e=s(Eg);jre=n(t5e,"STRONG",{});var jVr=s(jre);nKe=r(jVr,"bert-japanese"),jVr.forEach(t),sKe=r(t5e," \u2014 "),jS=n(t5e,"A",{href:!0});var DVr=s(jS);lKe=r(DVr,"BertJapaneseTokenizer"),DVr.forEach(t),iKe=r(t5e," (BertJapanese model)"),t5e.forEach(t),dKe=i(S),Cg=n(S,"LI",{});var a5e=s(Cg);Dre=n(a5e,"STRONG",{});var GVr=s(Dre);cKe=r(GVr,"bertweet"),GVr.forEach(t),fKe=r(a5e," \u2014 "),DS=n(a5e,"A",{href:!0});var OVr=s(DS);mKe=r(OVr,"BertweetTokenizer"),OVr.forEach(t),gKe=r(a5e," (Bertweet model)"),a5e.forEach(t),hKe=i(S),In=n(S,"LI",{});var C9=s(In);Gre=n(C9,"STRONG",{});var VVr=s(Gre);pKe=r(VVr,"big_bird"),VVr.forEach(t),uKe=r(C9," \u2014 "),GS=n(C9,"A",{href:!0});var XVr=s(GS);_Ke=r(XVr,"BigBirdTokenizer"),XVr.forEach(t),bKe=r(C9," or "),OS=n(C9,"A",{href:!0});var zVr=s(OS);vKe=r(zVr,"BigBirdTokenizerFast"),zVr.forEach(t),FKe=r(C9," (BigBird model)"),C9.forEach(t),TKe=i(S),qn=n(S,"LI",{});var w9=s(qn);Ore=n(w9,"STRONG",{});var WVr=s(Ore);MKe=r(WVr,"bigbird_pegasus"),WVr.forEach(t),EKe=r(w9," \u2014 "),VS=n(w9,"A",{href:!0});var QVr=s(VS);CKe=r(QVr,"PegasusTokenizer"),QVr.forEach(t),wKe=r(w9," or "),XS=n(w9,"A",{href:!0});var HVr=s(XS);AKe=r(HVr,"PegasusTokenizerFast"),HVr.forEach(t),yKe=r(w9," (BigBirdPegasus model)"),w9.forEach(t),LKe=i(S),Nn=n(S,"LI",{});var A9=s(Nn);Vre=n(A9,"STRONG",{});var UVr=s(Vre);xKe=r(UVr,"blenderbot"),UVr.forEach(t),$Ke=r(A9," \u2014 "),zS=n(A9,"A",{href:!0});var JVr=s(zS);kKe=r(JVr,"BlenderbotTokenizer"),JVr.forEach(t),SKe=r(A9," or "),WS=n(A9,"A",{href:!0});var YVr=s(WS);RKe=r(YVr,"BlenderbotTokenizerFast"),YVr.forEach(t),PKe=r(A9," (Blenderbot model)"),A9.forEach(t),BKe=i(S),wg=n(S,"LI",{});var n5e=s(wg);Xre=n(n5e,"STRONG",{});var KVr=s(Xre);IKe=r(KVr,"blenderbot-small"),KVr.forEach(t),qKe=r(n5e," \u2014 "),QS=n(n5e,"A",{href:!0});var ZVr=s(QS);NKe=r(ZVr,"BlenderbotSmallTokenizer"),ZVr.forEach(t),jKe=r(n5e," (BlenderbotSmall model)"),n5e.forEach(t),DKe=i(S),Ag=n(S,"LI",{});var s5e=s(Ag);zre=n(s5e,"STRONG",{});var eXr=s(zre);GKe=r(eXr,"byt5"),eXr.forEach(t),OKe=r(s5e," \u2014 "),HS=n(s5e,"A",{href:!0});var oXr=s(HS);VKe=r(oXr,"ByT5Tokenizer"),oXr.forEach(t),XKe=r(s5e," (ByT5 model)"),s5e.forEach(t),zKe=i(S),jn=n(S,"LI",{});var y9=s(jn);Wre=n(y9,"STRONG",{});var rXr=s(Wre);WKe=r(rXr,"camembert"),rXr.forEach(t),QKe=r(y9," \u2014 "),US=n(y9,"A",{href:!0});var tXr=s(US);HKe=r(tXr,"CamembertTokenizer"),tXr.forEach(t),UKe=r(y9," or "),JS=n(y9,"A",{href:!0});var aXr=s(JS);JKe=r(aXr,"CamembertTokenizerFast"),aXr.forEach(t),YKe=r(y9," (CamemBERT model)"),y9.forEach(t),KKe=i(S),yg=n(S,"LI",{});var l5e=s(yg);Qre=n(l5e,"STRONG",{});var nXr=s(Qre);ZKe=r(nXr,"canine"),nXr.forEach(t),eZe=r(l5e," \u2014 "),YS=n(l5e,"A",{href:!0});var sXr=s(YS);oZe=r(sXr,"CanineTokenizer"),sXr.forEach(t),rZe=r(l5e," (Canine model)"),l5e.forEach(t),tZe=i(S),Dn=n(S,"LI",{});var L9=s(Dn);Hre=n(L9,"STRONG",{});var lXr=s(Hre);aZe=r(lXr,"clip"),lXr.forEach(t),nZe=r(L9," \u2014 "),KS=n(L9,"A",{href:!0});var iXr=s(KS);sZe=r(iXr,"CLIPTokenizer"),iXr.forEach(t),lZe=r(L9," or "),ZS=n(L9,"A",{href:!0});var dXr=s(ZS);iZe=r(dXr,"CLIPTokenizerFast"),dXr.forEach(t),dZe=r(L9," (CLIP model)"),L9.forEach(t),cZe=i(S),Gn=n(S,"LI",{});var x9=s(Gn);Ure=n(x9,"STRONG",{});var cXr=s(Ure);fZe=r(cXr,"convbert"),cXr.forEach(t),mZe=r(x9," \u2014 "),eR=n(x9,"A",{href:!0});var fXr=s(eR);gZe=r(fXr,"ConvBertTokenizer"),fXr.forEach(t),hZe=r(x9," or "),oR=n(x9,"A",{href:!0});var mXr=s(oR);pZe=r(mXr,"ConvBertTokenizerFast"),mXr.forEach(t),uZe=r(x9," (ConvBERT model)"),x9.forEach(t),_Ze=i(S),On=n(S,"LI",{});var $9=s(On);Jre=n($9,"STRONG",{});var gXr=s(Jre);bZe=r(gXr,"cpm"),gXr.forEach(t),vZe=r($9," \u2014 "),rR=n($9,"A",{href:!0});var hXr=s(rR);FZe=r(hXr,"CpmTokenizer"),hXr.forEach(t),TZe=r($9," or "),tR=n($9,"A",{href:!0});var pXr=s(tR);MZe=r(pXr,"CpmTokenizerFast"),pXr.forEach(t),EZe=r($9," (CPM model)"),$9.forEach(t),CZe=i(S),Lg=n(S,"LI",{});var i5e=s(Lg);Yre=n(i5e,"STRONG",{});var uXr=s(Yre);wZe=r(uXr,"ctrl"),uXr.forEach(t),AZe=r(i5e," \u2014 "),aR=n(i5e,"A",{href:!0});var _Xr=s(aR);yZe=r(_Xr,"CTRLTokenizer"),_Xr.forEach(t),LZe=r(i5e," (CTRL model)"),i5e.forEach(t),xZe=i(S),Vn=n(S,"LI",{});var k9=s(Vn);Kre=n(k9,"STRONG",{});var bXr=s(Kre);$Ze=r(bXr,"data2vec-text"),bXr.forEach(t),kZe=r(k9," \u2014 "),nR=n(k9,"A",{href:!0});var vXr=s(nR);SZe=r(vXr,"RobertaTokenizer"),vXr.forEach(t),RZe=r(k9," or "),sR=n(k9,"A",{href:!0});var FXr=s(sR);PZe=r(FXr,"RobertaTokenizerFast"),FXr.forEach(t),BZe=r(k9," (Data2VecText model)"),k9.forEach(t),IZe=i(S),Xn=n(S,"LI",{});var S9=s(Xn);Zre=n(S9,"STRONG",{});var TXr=s(Zre);qZe=r(TXr,"deberta"),TXr.forEach(t),NZe=r(S9," \u2014 "),lR=n(S9,"A",{href:!0});var MXr=s(lR);jZe=r(MXr,"DebertaTokenizer"),MXr.forEach(t),DZe=r(S9," or "),iR=n(S9,"A",{href:!0});var EXr=s(iR);GZe=r(EXr,"DebertaTokenizerFast"),EXr.forEach(t),OZe=r(S9," (DeBERTa model)"),S9.forEach(t),VZe=i(S),zn=n(S,"LI",{});var R9=s(zn);ete=n(R9,"STRONG",{});var CXr=s(ete);XZe=r(CXr,"deberta-v2"),CXr.forEach(t),zZe=r(R9," \u2014 "),dR=n(R9,"A",{href:!0});var wXr=s(dR);WZe=r(wXr,"DebertaV2Tokenizer"),wXr.forEach(t),QZe=r(R9," or "),cR=n(R9,"A",{href:!0});var AXr=s(cR);HZe=r(AXr,"DebertaV2TokenizerFast"),AXr.forEach(t),UZe=r(R9," (DeBERTa-v2 model)"),R9.forEach(t),JZe=i(S),Wn=n(S,"LI",{});var P9=s(Wn);ote=n(P9,"STRONG",{});var yXr=s(ote);YZe=r(yXr,"distilbert"),yXr.forEach(t),KZe=r(P9," \u2014 "),fR=n(P9,"A",{href:!0});var LXr=s(fR);ZZe=r(LXr,"DistilBertTokenizer"),LXr.forEach(t),eeo=r(P9," or "),mR=n(P9,"A",{href:!0});var xXr=s(mR);oeo=r(xXr,"DistilBertTokenizerFast"),xXr.forEach(t),reo=r(P9," (DistilBERT model)"),P9.forEach(t),teo=i(S),Qn=n(S,"LI",{});var B9=s(Qn);rte=n(B9,"STRONG",{});var $Xr=s(rte);aeo=r($Xr,"dpr"),$Xr.forEach(t),neo=r(B9," \u2014 "),gR=n(B9,"A",{href:!0});var kXr=s(gR);seo=r(kXr,"DPRQuestionEncoderTokenizer"),kXr.forEach(t),leo=r(B9," or "),hR=n(B9,"A",{href:!0});var SXr=s(hR);ieo=r(SXr,"DPRQuestionEncoderTokenizerFast"),SXr.forEach(t),deo=r(B9," (DPR model)"),B9.forEach(t),ceo=i(S),Hn=n(S,"LI",{});var I9=s(Hn);tte=n(I9,"STRONG",{});var RXr=s(tte);feo=r(RXr,"electra"),RXr.forEach(t),meo=r(I9," \u2014 "),pR=n(I9,"A",{href:!0});var PXr=s(pR);geo=r(PXr,"ElectraTokenizer"),PXr.forEach(t),heo=r(I9," or "),uR=n(I9,"A",{href:!0});var BXr=s(uR);peo=r(BXr,"ElectraTokenizerFast"),BXr.forEach(t),ueo=r(I9," (ELECTRA model)"),I9.forEach(t),_eo=i(S),xg=n(S,"LI",{});var d5e=s(xg);ate=n(d5e,"STRONG",{});var IXr=s(ate);beo=r(IXr,"flaubert"),IXr.forEach(t),veo=r(d5e," \u2014 "),_R=n(d5e,"A",{href:!0});var qXr=s(_R);Feo=r(qXr,"FlaubertTokenizer"),qXr.forEach(t),Teo=r(d5e," (FlauBERT model)"),d5e.forEach(t),Meo=i(S),Un=n(S,"LI",{});var q9=s(Un);nte=n(q9,"STRONG",{});var NXr=s(nte);Eeo=r(NXr,"fnet"),NXr.forEach(t),Ceo=r(q9," \u2014 "),bR=n(q9,"A",{href:!0});var jXr=s(bR);weo=r(jXr,"FNetTokenizer"),jXr.forEach(t),Aeo=r(q9," or "),vR=n(q9,"A",{href:!0});var DXr=s(vR);yeo=r(DXr,"FNetTokenizerFast"),DXr.forEach(t),Leo=r(q9," (FNet model)"),q9.forEach(t),xeo=i(S),$g=n(S,"LI",{});var c5e=s($g);ste=n(c5e,"STRONG",{});var GXr=s(ste);$eo=r(GXr,"fsmt"),GXr.forEach(t),keo=r(c5e," \u2014 "),FR=n(c5e,"A",{href:!0});var OXr=s(FR);Seo=r(OXr,"FSMTTokenizer"),OXr.forEach(t),Reo=r(c5e," (FairSeq Machine-Translation model)"),c5e.forEach(t),Peo=i(S),Jn=n(S,"LI",{});var N9=s(Jn);lte=n(N9,"STRONG",{});var VXr=s(lte);Beo=r(VXr,"funnel"),VXr.forEach(t),Ieo=r(N9," \u2014 "),TR=n(N9,"A",{href:!0});var XXr=s(TR);qeo=r(XXr,"FunnelTokenizer"),XXr.forEach(t),Neo=r(N9," or "),MR=n(N9,"A",{href:!0});var zXr=s(MR);jeo=r(zXr,"FunnelTokenizerFast"),zXr.forEach(t),Deo=r(N9," (Funnel Transformer model)"),N9.forEach(t),Geo=i(S),Yn=n(S,"LI",{});var j9=s(Yn);ite=n(j9,"STRONG",{});var WXr=s(ite);Oeo=r(WXr,"gpt2"),WXr.forEach(t),Veo=r(j9," \u2014 "),ER=n(j9,"A",{href:!0});var QXr=s(ER);Xeo=r(QXr,"GPT2Tokenizer"),QXr.forEach(t),zeo=r(j9," or "),CR=n(j9,"A",{href:!0});var HXr=s(CR);Weo=r(HXr,"GPT2TokenizerFast"),HXr.forEach(t),Qeo=r(j9," (OpenAI GPT-2 model)"),j9.forEach(t),Heo=i(S),Kn=n(S,"LI",{});var D9=s(Kn);dte=n(D9,"STRONG",{});var UXr=s(dte);Ueo=r(UXr,"gpt_neo"),UXr.forEach(t),Jeo=r(D9," \u2014 "),wR=n(D9,"A",{href:!0});var JXr=s(wR);Yeo=r(JXr,"GPT2Tokenizer"),JXr.forEach(t),Keo=r(D9," or "),AR=n(D9,"A",{href:!0});var YXr=s(AR);Zeo=r(YXr,"GPT2TokenizerFast"),YXr.forEach(t),eoo=r(D9," (GPT Neo model)"),D9.forEach(t),ooo=i(S),Zn=n(S,"LI",{});var G9=s(Zn);cte=n(G9,"STRONG",{});var KXr=s(cte);roo=r(KXr,"gptj"),KXr.forEach(t),too=r(G9," \u2014 "),yR=n(G9,"A",{href:!0});var ZXr=s(yR);aoo=r(ZXr,"GPT2Tokenizer"),ZXr.forEach(t),noo=r(G9," or "),LR=n(G9,"A",{href:!0});var ezr=s(LR);soo=r(ezr,"GPT2TokenizerFast"),ezr.forEach(t),loo=r(G9," (GPT-J model)"),G9.forEach(t),ioo=i(S),es=n(S,"LI",{});var O9=s(es);fte=n(O9,"STRONG",{});var ozr=s(fte);doo=r(ozr,"herbert"),ozr.forEach(t),coo=r(O9," \u2014 "),xR=n(O9,"A",{href:!0});var rzr=s(xR);foo=r(rzr,"HerbertTokenizer"),rzr.forEach(t),moo=r(O9," or "),$R=n(O9,"A",{href:!0});var tzr=s($R);goo=r(tzr,"HerbertTokenizerFast"),tzr.forEach(t),hoo=r(O9," (HerBERT model)"),O9.forEach(t),poo=i(S),kg=n(S,"LI",{});var f5e=s(kg);mte=n(f5e,"STRONG",{});var azr=s(mte);uoo=r(azr,"hubert"),azr.forEach(t),_oo=r(f5e," \u2014 "),kR=n(f5e,"A",{href:!0});var nzr=s(kR);boo=r(nzr,"Wav2Vec2CTCTokenizer"),nzr.forEach(t),voo=r(f5e," (Hubert model)"),f5e.forEach(t),Foo=i(S),os=n(S,"LI",{});var V9=s(os);gte=n(V9,"STRONG",{});var szr=s(gte);Too=r(szr,"ibert"),szr.forEach(t),Moo=r(V9," \u2014 "),SR=n(V9,"A",{href:!0});var lzr=s(SR);Eoo=r(lzr,"RobertaTokenizer"),lzr.forEach(t),Coo=r(V9," or "),RR=n(V9,"A",{href:!0});var izr=s(RR);woo=r(izr,"RobertaTokenizerFast"),izr.forEach(t),Aoo=r(V9," (I-BERT model)"),V9.forEach(t),yoo=i(S),rs=n(S,"LI",{});var X9=s(rs);hte=n(X9,"STRONG",{});var dzr=s(hte);Loo=r(dzr,"layoutlm"),dzr.forEach(t),xoo=r(X9," \u2014 "),PR=n(X9,"A",{href:!0});var czr=s(PR);$oo=r(czr,"LayoutLMTokenizer"),czr.forEach(t),koo=r(X9," or "),BR=n(X9,"A",{href:!0});var fzr=s(BR);Soo=r(fzr,"LayoutLMTokenizerFast"),fzr.forEach(t),Roo=r(X9," (LayoutLM model)"),X9.forEach(t),Poo=i(S),ts=n(S,"LI",{});var z9=s(ts);pte=n(z9,"STRONG",{});var mzr=s(pte);Boo=r(mzr,"layoutlmv2"),mzr.forEach(t),Ioo=r(z9," \u2014 "),IR=n(z9,"A",{href:!0});var gzr=s(IR);qoo=r(gzr,"LayoutLMv2Tokenizer"),gzr.forEach(t),Noo=r(z9," or "),qR=n(z9,"A",{href:!0});var hzr=s(qR);joo=r(hzr,"LayoutLMv2TokenizerFast"),hzr.forEach(t),Doo=r(z9," (LayoutLMv2 model)"),z9.forEach(t),Goo=i(S),as=n(S,"LI",{});var W9=s(as);ute=n(W9,"STRONG",{});var pzr=s(ute);Ooo=r(pzr,"layoutxlm"),pzr.forEach(t),Voo=r(W9," \u2014 "),NR=n(W9,"A",{href:!0});var uzr=s(NR);Xoo=r(uzr,"LayoutXLMTokenizer"),uzr.forEach(t),zoo=r(W9," or "),jR=n(W9,"A",{href:!0});var _zr=s(jR);Woo=r(_zr,"LayoutXLMTokenizerFast"),_zr.forEach(t),Qoo=r(W9," (LayoutXLM model)"),W9.forEach(t),Hoo=i(S),ns=n(S,"LI",{});var Q9=s(ns);_te=n(Q9,"STRONG",{});var bzr=s(_te);Uoo=r(bzr,"led"),bzr.forEach(t),Joo=r(Q9," \u2014 "),DR=n(Q9,"A",{href:!0});var vzr=s(DR);Yoo=r(vzr,"LEDTokenizer"),vzr.forEach(t),Koo=r(Q9," or "),GR=n(Q9,"A",{href:!0});var Fzr=s(GR);Zoo=r(Fzr,"LEDTokenizerFast"),Fzr.forEach(t),ero=r(Q9," (LED model)"),Q9.forEach(t),oro=i(S),ss=n(S,"LI",{});var H9=s(ss);bte=n(H9,"STRONG",{});var Tzr=s(bte);rro=r(Tzr,"longformer"),Tzr.forEach(t),tro=r(H9," \u2014 "),OR=n(H9,"A",{href:!0});var Mzr=s(OR);aro=r(Mzr,"LongformerTokenizer"),Mzr.forEach(t),nro=r(H9," or "),VR=n(H9,"A",{href:!0});var Ezr=s(VR);sro=r(Ezr,"LongformerTokenizerFast"),Ezr.forEach(t),lro=r(H9," (Longformer model)"),H9.forEach(t),iro=i(S),Sg=n(S,"LI",{});var m5e=s(Sg);vte=n(m5e,"STRONG",{});var Czr=s(vte);dro=r(Czr,"luke"),Czr.forEach(t),cro=r(m5e," \u2014 "),XR=n(m5e,"A",{href:!0});var wzr=s(XR);fro=r(wzr,"LukeTokenizer"),wzr.forEach(t),mro=r(m5e," (LUKE model)"),m5e.forEach(t),gro=i(S),ls=n(S,"LI",{});var U9=s(ls);Fte=n(U9,"STRONG",{});var Azr=s(Fte);hro=r(Azr,"lxmert"),Azr.forEach(t),pro=r(U9," \u2014 "),zR=n(U9,"A",{href:!0});var yzr=s(zR);uro=r(yzr,"LxmertTokenizer"),yzr.forEach(t),_ro=r(U9," or "),WR=n(U9,"A",{href:!0});var Lzr=s(WR);bro=r(Lzr,"LxmertTokenizerFast"),Lzr.forEach(t),vro=r(U9," (LXMERT model)"),U9.forEach(t),Fro=i(S),Rg=n(S,"LI",{});var g5e=s(Rg);Tte=n(g5e,"STRONG",{});var xzr=s(Tte);Tro=r(xzr,"m2m_100"),xzr.forEach(t),Mro=r(g5e," \u2014 "),QR=n(g5e,"A",{href:!0});var $zr=s(QR);Ero=r($zr,"M2M100Tokenizer"),$zr.forEach(t),Cro=r(g5e," (M2M100 model)"),g5e.forEach(t),wro=i(S),Pg=n(S,"LI",{});var h5e=s(Pg);Mte=n(h5e,"STRONG",{});var kzr=s(Mte);Aro=r(kzr,"marian"),kzr.forEach(t),yro=r(h5e," \u2014 "),HR=n(h5e,"A",{href:!0});var Szr=s(HR);Lro=r(Szr,"MarianTokenizer"),Szr.forEach(t),xro=r(h5e," (Marian model)"),h5e.forEach(t),$ro=i(S),is=n(S,"LI",{});var J9=s(is);Ete=n(J9,"STRONG",{});var Rzr=s(Ete);kro=r(Rzr,"mbart"),Rzr.forEach(t),Sro=r(J9," \u2014 "),UR=n(J9,"A",{href:!0});var Pzr=s(UR);Rro=r(Pzr,"MBartTokenizer"),Pzr.forEach(t),Pro=r(J9," or "),JR=n(J9,"A",{href:!0});var Bzr=s(JR);Bro=r(Bzr,"MBartTokenizerFast"),Bzr.forEach(t),Iro=r(J9," (mBART model)"),J9.forEach(t),qro=i(S),ds=n(S,"LI",{});var Y9=s(ds);Cte=n(Y9,"STRONG",{});var Izr=s(Cte);Nro=r(Izr,"mbart50"),Izr.forEach(t),jro=r(Y9," \u2014 "),YR=n(Y9,"A",{href:!0});var qzr=s(YR);Dro=r(qzr,"MBart50Tokenizer"),qzr.forEach(t),Gro=r(Y9," or "),KR=n(Y9,"A",{href:!0});var Nzr=s(KR);Oro=r(Nzr,"MBart50TokenizerFast"),Nzr.forEach(t),Vro=r(Y9," (mBART-50 model)"),Y9.forEach(t),Xro=i(S),cs=n(S,"LI",{});var K9=s(cs);wte=n(K9,"STRONG",{});var jzr=s(wte);zro=r(jzr,"megatron-bert"),jzr.forEach(t),Wro=r(K9," \u2014 "),ZR=n(K9,"A",{href:!0});var Dzr=s(ZR);Qro=r(Dzr,"BertTokenizer"),Dzr.forEach(t),Hro=r(K9," or "),eP=n(K9,"A",{href:!0});var Gzr=s(eP);Uro=r(Gzr,"BertTokenizerFast"),Gzr.forEach(t),Jro=r(K9," (MegatronBert model)"),K9.forEach(t),Yro=i(S),Bg=n(S,"LI",{});var p5e=s(Bg);Ate=n(p5e,"STRONG",{});var Ozr=s(Ate);Kro=r(Ozr,"mluke"),Ozr.forEach(t),Zro=r(p5e," \u2014 "),oP=n(p5e,"A",{href:!0});var Vzr=s(oP);eto=r(Vzr,"MLukeTokenizer"),Vzr.forEach(t),oto=r(p5e," (mLUKE model)"),p5e.forEach(t),rto=i(S),fs=n(S,"LI",{});var Z9=s(fs);yte=n(Z9,"STRONG",{});var Xzr=s(yte);tto=r(Xzr,"mobilebert"),Xzr.forEach(t),ato=r(Z9," \u2014 "),rP=n(Z9,"A",{href:!0});var zzr=s(rP);nto=r(zzr,"MobileBertTokenizer"),zzr.forEach(t),sto=r(Z9," or "),tP=n(Z9,"A",{href:!0});var Wzr=s(tP);lto=r(Wzr,"MobileBertTokenizerFast"),Wzr.forEach(t),ito=r(Z9," (MobileBERT model)"),Z9.forEach(t),dto=i(S),ms=n(S,"LI",{});var e$=s(ms);Lte=n(e$,"STRONG",{});var Qzr=s(Lte);cto=r(Qzr,"mpnet"),Qzr.forEach(t),fto=r(e$," \u2014 "),aP=n(e$,"A",{href:!0});var Hzr=s(aP);mto=r(Hzr,"MPNetTokenizer"),Hzr.forEach(t),gto=r(e$," or "),nP=n(e$,"A",{href:!0});var Uzr=s(nP);hto=r(Uzr,"MPNetTokenizerFast"),Uzr.forEach(t),pto=r(e$," (MPNet model)"),e$.forEach(t),uto=i(S),gs=n(S,"LI",{});var o$=s(gs);xte=n(o$,"STRONG",{});var Jzr=s(xte);_to=r(Jzr,"mt5"),Jzr.forEach(t),bto=r(o$," \u2014 "),sP=n(o$,"A",{href:!0});var Yzr=s(sP);vto=r(Yzr,"MT5Tokenizer"),Yzr.forEach(t),Fto=r(o$," or "),lP=n(o$,"A",{href:!0});var Kzr=s(lP);Tto=r(Kzr,"MT5TokenizerFast"),Kzr.forEach(t),Mto=r(o$," (mT5 model)"),o$.forEach(t),Eto=i(S),hs=n(S,"LI",{});var r$=s(hs);$te=n(r$,"STRONG",{});var Zzr=s($te);Cto=r(Zzr,"nystromformer"),Zzr.forEach(t),wto=r(r$," \u2014 "),iP=n(r$,"A",{href:!0});var eWr=s(iP);Ato=r(eWr,"AlbertTokenizer"),eWr.forEach(t),yto=r(r$," or "),dP=n(r$,"A",{href:!0});var oWr=s(dP);Lto=r(oWr,"AlbertTokenizerFast"),oWr.forEach(t),xto=r(r$," (Nystromformer model)"),r$.forEach(t),$to=i(S),ps=n(S,"LI",{});var t$=s(ps);kte=n(t$,"STRONG",{});var rWr=s(kte);kto=r(rWr,"openai-gpt"),rWr.forEach(t),Sto=r(t$," \u2014 "),cP=n(t$,"A",{href:!0});var tWr=s(cP);Rto=r(tWr,"OpenAIGPTTokenizer"),tWr.forEach(t),Pto=r(t$," or "),fP=n(t$,"A",{href:!0});var aWr=s(fP);Bto=r(aWr,"OpenAIGPTTokenizerFast"),aWr.forEach(t),Ito=r(t$," (OpenAI GPT model)"),t$.forEach(t),qto=i(S),Ig=n(S,"LI",{});var u5e=s(Ig);Ste=n(u5e,"STRONG",{});var nWr=s(Ste);Nto=r(nWr,"opt"),nWr.forEach(t),jto=r(u5e," \u2014 "),mP=n(u5e,"A",{href:!0});var sWr=s(mP);Dto=r(sWr,"GPT2Tokenizer"),sWr.forEach(t),Gto=r(u5e," (OPT model)"),u5e.forEach(t),Oto=i(S),us=n(S,"LI",{});var a$=s(us);Rte=n(a$,"STRONG",{});var lWr=s(Rte);Vto=r(lWr,"pegasus"),lWr.forEach(t),Xto=r(a$," \u2014 "),gP=n(a$,"A",{href:!0});var iWr=s(gP);zto=r(iWr,"PegasusTokenizer"),iWr.forEach(t),Wto=r(a$," or "),hP=n(a$,"A",{href:!0});var dWr=s(hP);Qto=r(dWr,"PegasusTokenizerFast"),dWr.forEach(t),Hto=r(a$," (Pegasus model)"),a$.forEach(t),Uto=i(S),qg=n(S,"LI",{});var _5e=s(qg);Pte=n(_5e,"STRONG",{});var cWr=s(Pte);Jto=r(cWr,"perceiver"),cWr.forEach(t),Yto=r(_5e," \u2014 "),pP=n(_5e,"A",{href:!0});var fWr=s(pP);Kto=r(fWr,"PerceiverTokenizer"),fWr.forEach(t),Zto=r(_5e," (Perceiver model)"),_5e.forEach(t),eao=i(S),Ng=n(S,"LI",{});var b5e=s(Ng);Bte=n(b5e,"STRONG",{});var mWr=s(Bte);oao=r(mWr,"phobert"),mWr.forEach(t),rao=r(b5e," \u2014 "),uP=n(b5e,"A",{href:!0});var gWr=s(uP);tao=r(gWr,"PhobertTokenizer"),gWr.forEach(t),aao=r(b5e," (PhoBERT model)"),b5e.forEach(t),nao=i(S),jg=n(S,"LI",{});var v5e=s(jg);Ite=n(v5e,"STRONG",{});var hWr=s(Ite);sao=r(hWr,"plbart"),hWr.forEach(t),lao=r(v5e," \u2014 "),_P=n(v5e,"A",{href:!0});var pWr=s(_P);iao=r(pWr,"PLBartTokenizer"),pWr.forEach(t),dao=r(v5e," (PLBart model)"),v5e.forEach(t),cao=i(S),Dg=n(S,"LI",{});var F5e=s(Dg);qte=n(F5e,"STRONG",{});var uWr=s(qte);fao=r(uWr,"prophetnet"),uWr.forEach(t),mao=r(F5e," \u2014 "),bP=n(F5e,"A",{href:!0});var _Wr=s(bP);gao=r(_Wr,"ProphetNetTokenizer"),_Wr.forEach(t),hao=r(F5e," (ProphetNet model)"),F5e.forEach(t),pao=i(S),_s=n(S,"LI",{});var n$=s(_s);Nte=n(n$,"STRONG",{});var bWr=s(Nte);uao=r(bWr,"qdqbert"),bWr.forEach(t),_ao=r(n$," \u2014 "),vP=n(n$,"A",{href:!0});var vWr=s(vP);bao=r(vWr,"BertTokenizer"),vWr.forEach(t),vao=r(n$," or "),FP=n(n$,"A",{href:!0});var FWr=s(FP);Fao=r(FWr,"BertTokenizerFast"),FWr.forEach(t),Tao=r(n$," (QDQBert model)"),n$.forEach(t),Mao=i(S),Gg=n(S,"LI",{});var T5e=s(Gg);jte=n(T5e,"STRONG",{});var TWr=s(jte);Eao=r(TWr,"rag"),TWr.forEach(t),Cao=r(T5e," \u2014 "),TP=n(T5e,"A",{href:!0});var MWr=s(TP);wao=r(MWr,"RagTokenizer"),MWr.forEach(t),Aao=r(T5e," (RAG model)"),T5e.forEach(t),yao=i(S),bs=n(S,"LI",{});var s$=s(bs);Dte=n(s$,"STRONG",{});var EWr=s(Dte);Lao=r(EWr,"realm"),EWr.forEach(t),xao=r(s$," \u2014 "),MP=n(s$,"A",{href:!0});var CWr=s(MP);$ao=r(CWr,"RealmTokenizer"),CWr.forEach(t),kao=r(s$," or "),EP=n(s$,"A",{href:!0});var wWr=s(EP);Sao=r(wWr,"RealmTokenizerFast"),wWr.forEach(t),Rao=r(s$," (Realm model)"),s$.forEach(t),Pao=i(S),vs=n(S,"LI",{});var l$=s(vs);Gte=n(l$,"STRONG",{});var AWr=s(Gte);Bao=r(AWr,"reformer"),AWr.forEach(t),Iao=r(l$," \u2014 "),CP=n(l$,"A",{href:!0});var yWr=s(CP);qao=r(yWr,"ReformerTokenizer"),yWr.forEach(t),Nao=r(l$," or "),wP=n(l$,"A",{href:!0});var LWr=s(wP);jao=r(LWr,"ReformerTokenizerFast"),LWr.forEach(t),Dao=r(l$," (Reformer model)"),l$.forEach(t),Gao=i(S),Fs=n(S,"LI",{});var i$=s(Fs);Ote=n(i$,"STRONG",{});var xWr=s(Ote);Oao=r(xWr,"rembert"),xWr.forEach(t),Vao=r(i$," \u2014 "),AP=n(i$,"A",{href:!0});var $Wr=s(AP);Xao=r($Wr,"RemBertTokenizer"),$Wr.forEach(t),zao=r(i$," or "),yP=n(i$,"A",{href:!0});var kWr=s(yP);Wao=r(kWr,"RemBertTokenizerFast"),kWr.forEach(t),Qao=r(i$," (RemBERT model)"),i$.forEach(t),Hao=i(S),Ts=n(S,"LI",{});var d$=s(Ts);Vte=n(d$,"STRONG",{});var SWr=s(Vte);Uao=r(SWr,"retribert"),SWr.forEach(t),Jao=r(d$," \u2014 "),LP=n(d$,"A",{href:!0});var RWr=s(LP);Yao=r(RWr,"RetriBertTokenizer"),RWr.forEach(t),Kao=r(d$," or "),xP=n(d$,"A",{href:!0});var PWr=s(xP);Zao=r(PWr,"RetriBertTokenizerFast"),PWr.forEach(t),eno=r(d$," (RetriBERT model)"),d$.forEach(t),ono=i(S),Ms=n(S,"LI",{});var c$=s(Ms);Xte=n(c$,"STRONG",{});var BWr=s(Xte);rno=r(BWr,"roberta"),BWr.forEach(t),tno=r(c$," \u2014 "),$P=n(c$,"A",{href:!0});var IWr=s($P);ano=r(IWr,"RobertaTokenizer"),IWr.forEach(t),nno=r(c$," or "),kP=n(c$,"A",{href:!0});var qWr=s(kP);sno=r(qWr,"RobertaTokenizerFast"),qWr.forEach(t),lno=r(c$," (RoBERTa model)"),c$.forEach(t),ino=i(S),Es=n(S,"LI",{});var f$=s(Es);zte=n(f$,"STRONG",{});var NWr=s(zte);dno=r(NWr,"roformer"),NWr.forEach(t),cno=r(f$," \u2014 "),SP=n(f$,"A",{href:!0});var jWr=s(SP);fno=r(jWr,"RoFormerTokenizer"),jWr.forEach(t),mno=r(f$," or "),RP=n(f$,"A",{href:!0});var DWr=s(RP);gno=r(DWr,"RoFormerTokenizerFast"),DWr.forEach(t),hno=r(f$," (RoFormer model)"),f$.forEach(t),pno=i(S),Og=n(S,"LI",{});var M5e=s(Og);Wte=n(M5e,"STRONG",{});var GWr=s(Wte);uno=r(GWr,"speech_to_text"),GWr.forEach(t),_no=r(M5e," \u2014 "),PP=n(M5e,"A",{href:!0});var OWr=s(PP);bno=r(OWr,"Speech2TextTokenizer"),OWr.forEach(t),vno=r(M5e," (Speech2Text model)"),M5e.forEach(t),Fno=i(S),Vg=n(S,"LI",{});var E5e=s(Vg);Qte=n(E5e,"STRONG",{});var VWr=s(Qte);Tno=r(VWr,"speech_to_text_2"),VWr.forEach(t),Mno=r(E5e," \u2014 "),BP=n(E5e,"A",{href:!0});var XWr=s(BP);Eno=r(XWr,"Speech2Text2Tokenizer"),XWr.forEach(t),Cno=r(E5e," (Speech2Text2 model)"),E5e.forEach(t),wno=i(S),Cs=n(S,"LI",{});var m$=s(Cs);Hte=n(m$,"STRONG",{});var zWr=s(Hte);Ano=r(zWr,"splinter"),zWr.forEach(t),yno=r(m$," \u2014 "),IP=n(m$,"A",{href:!0});var WWr=s(IP);Lno=r(WWr,"SplinterTokenizer"),WWr.forEach(t),xno=r(m$," or "),qP=n(m$,"A",{href:!0});var QWr=s(qP);$no=r(QWr,"SplinterTokenizerFast"),QWr.forEach(t),kno=r(m$," (Splinter model)"),m$.forEach(t),Sno=i(S),ws=n(S,"LI",{});var g$=s(ws);Ute=n(g$,"STRONG",{});var HWr=s(Ute);Rno=r(HWr,"squeezebert"),HWr.forEach(t),Pno=r(g$," \u2014 "),NP=n(g$,"A",{href:!0});var UWr=s(NP);Bno=r(UWr,"SqueezeBertTokenizer"),UWr.forEach(t),Ino=r(g$," or "),jP=n(g$,"A",{href:!0});var JWr=s(jP);qno=r(JWr,"SqueezeBertTokenizerFast"),JWr.forEach(t),Nno=r(g$," (SqueezeBERT model)"),g$.forEach(t),jno=i(S),As=n(S,"LI",{});var h$=s(As);Jte=n(h$,"STRONG",{});var YWr=s(Jte);Dno=r(YWr,"t5"),YWr.forEach(t),Gno=r(h$," \u2014 "),DP=n(h$,"A",{href:!0});var KWr=s(DP);Ono=r(KWr,"T5Tokenizer"),KWr.forEach(t),Vno=r(h$," or "),GP=n(h$,"A",{href:!0});var ZWr=s(GP);Xno=r(ZWr,"T5TokenizerFast"),ZWr.forEach(t),zno=r(h$," (T5 model)"),h$.forEach(t),Wno=i(S),Xg=n(S,"LI",{});var C5e=s(Xg);Yte=n(C5e,"STRONG",{});var eQr=s(Yte);Qno=r(eQr,"tapas"),eQr.forEach(t),Hno=r(C5e," \u2014 "),OP=n(C5e,"A",{href:!0});var oQr=s(OP);Uno=r(oQr,"TapasTokenizer"),oQr.forEach(t),Jno=r(C5e," (TAPAS model)"),C5e.forEach(t),Yno=i(S),zg=n(S,"LI",{});var w5e=s(zg);Kte=n(w5e,"STRONG",{});var rQr=s(Kte);Kno=r(rQr,"tapex"),rQr.forEach(t),Zno=r(w5e," \u2014 "),VP=n(w5e,"A",{href:!0});var tQr=s(VP);eso=r(tQr,"TapexTokenizer"),tQr.forEach(t),oso=r(w5e," (TAPEX model)"),w5e.forEach(t),rso=i(S),Wg=n(S,"LI",{});var A5e=s(Wg);Zte=n(A5e,"STRONG",{});var aQr=s(Zte);tso=r(aQr,"transfo-xl"),aQr.forEach(t),aso=r(A5e," \u2014 "),XP=n(A5e,"A",{href:!0});var nQr=s(XP);nso=r(nQr,"TransfoXLTokenizer"),nQr.forEach(t),sso=r(A5e," (Transformer-XL model)"),A5e.forEach(t),lso=i(S),ys=n(S,"LI",{});var p$=s(ys);eae=n(p$,"STRONG",{});var sQr=s(eae);iso=r(sQr,"visual_bert"),sQr.forEach(t),dso=r(p$," \u2014 "),zP=n(p$,"A",{href:!0});var lQr=s(zP);cso=r(lQr,"BertTokenizer"),lQr.forEach(t),fso=r(p$," or "),WP=n(p$,"A",{href:!0});var iQr=s(WP);mso=r(iQr,"BertTokenizerFast"),iQr.forEach(t),gso=r(p$," (VisualBert model)"),p$.forEach(t),hso=i(S),Qg=n(S,"LI",{});var y5e=s(Qg);oae=n(y5e,"STRONG",{});var dQr=s(oae);pso=r(dQr,"wav2vec2"),dQr.forEach(t),uso=r(y5e," \u2014 "),QP=n(y5e,"A",{href:!0});var cQr=s(QP);_so=r(cQr,"Wav2Vec2CTCTokenizer"),cQr.forEach(t),bso=r(y5e," (Wav2Vec2 model)"),y5e.forEach(t),vso=i(S),Hg=n(S,"LI",{});var L5e=s(Hg);rae=n(L5e,"STRONG",{});var fQr=s(rae);Fso=r(fQr,"wav2vec2-conformer"),fQr.forEach(t),Tso=r(L5e," \u2014 "),HP=n(L5e,"A",{href:!0});var mQr=s(HP);Mso=r(mQr,"Wav2Vec2CTCTokenizer"),mQr.forEach(t),Eso=r(L5e," (Wav2Vec2-Conformer model)"),L5e.forEach(t),Cso=i(S),Ug=n(S,"LI",{});var x5e=s(Ug);tae=n(x5e,"STRONG",{});var gQr=s(tae);wso=r(gQr,"wav2vec2_phoneme"),gQr.forEach(t),Aso=r(x5e," \u2014 "),UP=n(x5e,"A",{href:!0});var hQr=s(UP);yso=r(hQr,"Wav2Vec2PhonemeCTCTokenizer"),hQr.forEach(t),Lso=r(x5e," (Wav2Vec2Phoneme model)"),x5e.forEach(t),xso=i(S),Ls=n(S,"LI",{});var u$=s(Ls);aae=n(u$,"STRONG",{});var pQr=s(aae);$so=r(pQr,"xglm"),pQr.forEach(t),kso=r(u$," \u2014 "),JP=n(u$,"A",{href:!0});var uQr=s(JP);Sso=r(uQr,"XGLMTokenizer"),uQr.forEach(t),Rso=r(u$," or "),YP=n(u$,"A",{href:!0});var _Qr=s(YP);Pso=r(_Qr,"XGLMTokenizerFast"),_Qr.forEach(t),Bso=r(u$," (XGLM model)"),u$.forEach(t),Iso=i(S),Jg=n(S,"LI",{});var $5e=s(Jg);nae=n($5e,"STRONG",{});var bQr=s(nae);qso=r(bQr,"xlm"),bQr.forEach(t),Nso=r($5e," \u2014 "),KP=n($5e,"A",{href:!0});var vQr=s(KP);jso=r(vQr,"XLMTokenizer"),vQr.forEach(t),Dso=r($5e," (XLM model)"),$5e.forEach(t),Gso=i(S),Yg=n(S,"LI",{});var k5e=s(Yg);sae=n(k5e,"STRONG",{});var FQr=s(sae);Oso=r(FQr,"xlm-prophetnet"),FQr.forEach(t),Vso=r(k5e," \u2014 "),ZP=n(k5e,"A",{href:!0});var TQr=s(ZP);Xso=r(TQr,"XLMProphetNetTokenizer"),TQr.forEach(t),zso=r(k5e," (XLMProphetNet model)"),k5e.forEach(t),Wso=i(S),xs=n(S,"LI",{});var _$=s(xs);lae=n(_$,"STRONG",{});var MQr=s(lae);Qso=r(MQr,"xlm-roberta"),MQr.forEach(t),Hso=r(_$," \u2014 "),eB=n(_$,"A",{href:!0});var EQr=s(eB);Uso=r(EQr,"XLMRobertaTokenizer"),EQr.forEach(t),Jso=r(_$," or "),oB=n(_$,"A",{href:!0});var CQr=s(oB);Yso=r(CQr,"XLMRobertaTokenizerFast"),CQr.forEach(t),Kso=r(_$," (XLM-RoBERTa model)"),_$.forEach(t),Zso=i(S),$s=n(S,"LI",{});var b$=s($s);iae=n(b$,"STRONG",{});var wQr=s(iae);elo=r(wQr,"xlm-roberta-xl"),wQr.forEach(t),olo=r(b$," \u2014 "),rB=n(b$,"A",{href:!0});var AQr=s(rB);rlo=r(AQr,"RobertaTokenizer"),AQr.forEach(t),tlo=r(b$," or "),tB=n(b$,"A",{href:!0});var yQr=s(tB);alo=r(yQr,"RobertaTokenizerFast"),yQr.forEach(t),nlo=r(b$," (XLM-RoBERTa-XL model)"),b$.forEach(t),slo=i(S),ks=n(S,"LI",{});var v$=s(ks);dae=n(v$,"STRONG",{});var LQr=s(dae);llo=r(LQr,"xlnet"),LQr.forEach(t),ilo=r(v$," \u2014 "),aB=n(v$,"A",{href:!0});var xQr=s(aB);dlo=r(xQr,"XLNetTokenizer"),xQr.forEach(t),clo=r(v$," or "),nB=n(v$,"A",{href:!0});var $Qr=s(nB);flo=r($Qr,"XLNetTokenizerFast"),$Qr.forEach(t),mlo=r(v$," (XLNet model)"),v$.forEach(t),glo=i(S),Ss=n(S,"LI",{});var F$=s(Ss);cae=n(F$,"STRONG",{});var kQr=s(cae);hlo=r(kQr,"yoso"),kQr.forEach(t),plo=r(F$," \u2014 "),sB=n(F$,"A",{href:!0});var SQr=s(sB);ulo=r(SQr,"AlbertTokenizer"),SQr.forEach(t),_lo=r(F$," or "),lB=n(F$,"A",{href:!0});var RQr=s(lB);blo=r(RQr,"AlbertTokenizerFast"),RQr.forEach(t),vlo=r(F$," (YOSO model)"),F$.forEach(t),S.forEach(t),Flo=i(qs),T(Kg.$$.fragment,qs),qs.forEach(t),Tlo=i(Is),Zg=n(Is,"DIV",{class:!0});var RNe=s(Zg);T(FA.$$.fragment,RNe),Mlo=i(RNe),fae=n(RNe,"P",{});var PQr=s(fae);Elo=r(PQr,"Register a new tokenizer in this mapping."),PQr.forEach(t),RNe.forEach(t),Is.forEach(t),PIe=i(f),Ti=n(f,"H2",{class:!0});var PNe=s(Ti);eh=n(PNe,"A",{id:!0,class:!0,href:!0});var BQr=s(eh);mae=n(BQr,"SPAN",{});var IQr=s(mae);T(TA.$$.fragment,IQr),IQr.forEach(t),BQr.forEach(t),Clo=i(PNe),gae=n(PNe,"SPAN",{});var qQr=s(gae);wlo=r(qQr,"AutoFeatureExtractor"),qQr.forEach(t),PNe.forEach(t),BIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(MA.$$.fragment,Ns),Alo=i(Ns),EA=n(Ns,"P",{});var BNe=s(EA);ylo=r(BNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iB=n(BNe,"A",{href:!0});var NQr=s(iB);Llo=r(NQr,"AutoFeatureExtractor.from_pretrained()"),NQr.forEach(t),xlo=r(BNe," class method."),BNe.forEach(t),$lo=i(Ns),CA=n(Ns,"P",{});var INe=s(CA);klo=r(INe,"This class cannot be instantiated directly using "),hae=n(INe,"CODE",{});var jQr=s(hae);Slo=r(jQr,"__init__()"),jQr.forEach(t),Rlo=r(INe," (throws an error)."),INe.forEach(t),Plo=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(wA.$$.fragment,Zt),Blo=i(Zt),pae=n(Zt,"P",{});var DQr=s(pae);Ilo=r(DQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DQr.forEach(t),qlo=i(Zt),ya=n(Zt,"P",{});var c3=s(ya);Nlo=r(c3,"The feature extractor class to instantiate is selected based on the "),uae=n(c3,"CODE",{});var GQr=s(uae);jlo=r(GQr,"model_type"),GQr.forEach(t),Dlo=r(c3,` property of the config object
(either passed as an argument or loaded from `),_ae=n(c3,"CODE",{});var OQr=s(_ae);Glo=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),Olo=r(c3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bae=n(c3,"CODE",{});var VQr=s(bae);Vlo=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),Xlo=r(c3,":"),c3.forEach(t),zlo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);oh=n(te,"LI",{});var S5e=s(oh);vae=n(S5e,"STRONG",{});var XQr=s(vae);Wlo=r(XQr,"beit"),XQr.forEach(t),Qlo=r(S5e," \u2014 "),dB=n(S5e,"A",{href:!0});var zQr=s(dB);Hlo=r(zQr,"BeitFeatureExtractor"),zQr.forEach(t),Ulo=r(S5e," (BEiT model)"),S5e.forEach(t),Jlo=i(te),rh=n(te,"LI",{});var R5e=s(rh);Fae=n(R5e,"STRONG",{});var WQr=s(Fae);Ylo=r(WQr,"clip"),WQr.forEach(t),Klo=r(R5e," \u2014 "),cB=n(R5e,"A",{href:!0});var QQr=s(cB);Zlo=r(QQr,"CLIPFeatureExtractor"),QQr.forEach(t),eio=r(R5e," (CLIP model)"),R5e.forEach(t),oio=i(te),th=n(te,"LI",{});var P5e=s(th);Tae=n(P5e,"STRONG",{});var HQr=s(Tae);rio=r(HQr,"convnext"),HQr.forEach(t),tio=r(P5e," \u2014 "),fB=n(P5e,"A",{href:!0});var UQr=s(fB);aio=r(UQr,"ConvNextFeatureExtractor"),UQr.forEach(t),nio=r(P5e," (ConvNext model)"),P5e.forEach(t),sio=i(te),ah=n(te,"LI",{});var B5e=s(ah);Mae=n(B5e,"STRONG",{});var JQr=s(Mae);lio=r(JQr,"data2vec-audio"),JQr.forEach(t),iio=r(B5e," \u2014 "),mB=n(B5e,"A",{href:!0});var YQr=s(mB);dio=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),cio=r(B5e," (Data2VecAudio model)"),B5e.forEach(t),fio=i(te),nh=n(te,"LI",{});var I5e=s(nh);Eae=n(I5e,"STRONG",{});var KQr=s(Eae);mio=r(KQr,"data2vec-vision"),KQr.forEach(t),gio=r(I5e," \u2014 "),gB=n(I5e,"A",{href:!0});var ZQr=s(gB);hio=r(ZQr,"BeitFeatureExtractor"),ZQr.forEach(t),pio=r(I5e," (Data2VecVision model)"),I5e.forEach(t),uio=i(te),sh=n(te,"LI",{});var q5e=s(sh);Cae=n(q5e,"STRONG",{});var eHr=s(Cae);_io=r(eHr,"deit"),eHr.forEach(t),bio=r(q5e," \u2014 "),hB=n(q5e,"A",{href:!0});var oHr=s(hB);vio=r(oHr,"DeiTFeatureExtractor"),oHr.forEach(t),Fio=r(q5e," (DeiT model)"),q5e.forEach(t),Tio=i(te),lh=n(te,"LI",{});var N5e=s(lh);wae=n(N5e,"STRONG",{});var rHr=s(wae);Mio=r(rHr,"detr"),rHr.forEach(t),Eio=r(N5e," \u2014 "),pB=n(N5e,"A",{href:!0});var tHr=s(pB);Cio=r(tHr,"DetrFeatureExtractor"),tHr.forEach(t),wio=r(N5e," (DETR model)"),N5e.forEach(t),Aio=i(te),ih=n(te,"LI",{});var j5e=s(ih);Aae=n(j5e,"STRONG",{});var aHr=s(Aae);yio=r(aHr,"dpt"),aHr.forEach(t),Lio=r(j5e," \u2014 "),uB=n(j5e,"A",{href:!0});var nHr=s(uB);xio=r(nHr,"DPTFeatureExtractor"),nHr.forEach(t),$io=r(j5e," (DPT model)"),j5e.forEach(t),kio=i(te),dh=n(te,"LI",{});var D5e=s(dh);yae=n(D5e,"STRONG",{});var sHr=s(yae);Sio=r(sHr,"flava"),sHr.forEach(t),Rio=r(D5e," \u2014 "),_B=n(D5e,"A",{href:!0});var lHr=s(_B);Pio=r(lHr,"FlavaFeatureExtractor"),lHr.forEach(t),Bio=r(D5e," (Flava model)"),D5e.forEach(t),Iio=i(te),ch=n(te,"LI",{});var G5e=s(ch);Lae=n(G5e,"STRONG",{});var iHr=s(Lae);qio=r(iHr,"glpn"),iHr.forEach(t),Nio=r(G5e," \u2014 "),bB=n(G5e,"A",{href:!0});var dHr=s(bB);jio=r(dHr,"GLPNFeatureExtractor"),dHr.forEach(t),Dio=r(G5e," (GLPN model)"),G5e.forEach(t),Gio=i(te),fh=n(te,"LI",{});var O5e=s(fh);xae=n(O5e,"STRONG",{});var cHr=s(xae);Oio=r(cHr,"hubert"),cHr.forEach(t),Vio=r(O5e," \u2014 "),vB=n(O5e,"A",{href:!0});var fHr=s(vB);Xio=r(fHr,"Wav2Vec2FeatureExtractor"),fHr.forEach(t),zio=r(O5e," (Hubert model)"),O5e.forEach(t),Wio=i(te),mh=n(te,"LI",{});var V5e=s(mh);$ae=n(V5e,"STRONG",{});var mHr=s($ae);Qio=r(mHr,"layoutlmv2"),mHr.forEach(t),Hio=r(V5e," \u2014 "),FB=n(V5e,"A",{href:!0});var gHr=s(FB);Uio=r(gHr,"LayoutLMv2FeatureExtractor"),gHr.forEach(t),Jio=r(V5e," (LayoutLMv2 model)"),V5e.forEach(t),Yio=i(te),gh=n(te,"LI",{});var X5e=s(gh);kae=n(X5e,"STRONG",{});var hHr=s(kae);Kio=r(hHr,"maskformer"),hHr.forEach(t),Zio=r(X5e," \u2014 "),TB=n(X5e,"A",{href:!0});var pHr=s(TB);edo=r(pHr,"MaskFormerFeatureExtractor"),pHr.forEach(t),odo=r(X5e," (MaskFormer model)"),X5e.forEach(t),rdo=i(te),hh=n(te,"LI",{});var z5e=s(hh);Sae=n(z5e,"STRONG",{});var uHr=s(Sae);tdo=r(uHr,"perceiver"),uHr.forEach(t),ado=r(z5e," \u2014 "),MB=n(z5e,"A",{href:!0});var _Hr=s(MB);ndo=r(_Hr,"PerceiverFeatureExtractor"),_Hr.forEach(t),sdo=r(z5e," (Perceiver model)"),z5e.forEach(t),ldo=i(te),ph=n(te,"LI",{});var W5e=s(ph);Rae=n(W5e,"STRONG",{});var bHr=s(Rae);ido=r(bHr,"poolformer"),bHr.forEach(t),ddo=r(W5e," \u2014 "),EB=n(W5e,"A",{href:!0});var vHr=s(EB);cdo=r(vHr,"PoolFormerFeatureExtractor"),vHr.forEach(t),fdo=r(W5e," (PoolFormer model)"),W5e.forEach(t),mdo=i(te),uh=n(te,"LI",{});var Q5e=s(uh);Pae=n(Q5e,"STRONG",{});var FHr=s(Pae);gdo=r(FHr,"regnet"),FHr.forEach(t),hdo=r(Q5e," \u2014 "),CB=n(Q5e,"A",{href:!0});var THr=s(CB);pdo=r(THr,"ConvNextFeatureExtractor"),THr.forEach(t),udo=r(Q5e," (RegNet model)"),Q5e.forEach(t),_do=i(te),_h=n(te,"LI",{});var H5e=s(_h);Bae=n(H5e,"STRONG",{});var MHr=s(Bae);bdo=r(MHr,"resnet"),MHr.forEach(t),vdo=r(H5e," \u2014 "),wB=n(H5e,"A",{href:!0});var EHr=s(wB);Fdo=r(EHr,"ConvNextFeatureExtractor"),EHr.forEach(t),Tdo=r(H5e," (ResNet model)"),H5e.forEach(t),Mdo=i(te),bh=n(te,"LI",{});var U5e=s(bh);Iae=n(U5e,"STRONG",{});var CHr=s(Iae);Edo=r(CHr,"segformer"),CHr.forEach(t),Cdo=r(U5e," \u2014 "),AB=n(U5e,"A",{href:!0});var wHr=s(AB);wdo=r(wHr,"SegformerFeatureExtractor"),wHr.forEach(t),Ado=r(U5e," (SegFormer model)"),U5e.forEach(t),ydo=i(te),vh=n(te,"LI",{});var J5e=s(vh);qae=n(J5e,"STRONG",{});var AHr=s(qae);Ldo=r(AHr,"speech_to_text"),AHr.forEach(t),xdo=r(J5e," \u2014 "),yB=n(J5e,"A",{href:!0});var yHr=s(yB);$do=r(yHr,"Speech2TextFeatureExtractor"),yHr.forEach(t),kdo=r(J5e," (Speech2Text model)"),J5e.forEach(t),Sdo=i(te),Fh=n(te,"LI",{});var Y5e=s(Fh);Nae=n(Y5e,"STRONG",{});var LHr=s(Nae);Rdo=r(LHr,"swin"),LHr.forEach(t),Pdo=r(Y5e," \u2014 "),LB=n(Y5e,"A",{href:!0});var xHr=s(LB);Bdo=r(xHr,"ViTFeatureExtractor"),xHr.forEach(t),Ido=r(Y5e," (Swin model)"),Y5e.forEach(t),qdo=i(te),Th=n(te,"LI",{});var K5e=s(Th);jae=n(K5e,"STRONG",{});var $Hr=s(jae);Ndo=r($Hr,"van"),$Hr.forEach(t),jdo=r(K5e," \u2014 "),xB=n(K5e,"A",{href:!0});var kHr=s(xB);Ddo=r(kHr,"ConvNextFeatureExtractor"),kHr.forEach(t),Gdo=r(K5e," (VAN model)"),K5e.forEach(t),Odo=i(te),Mh=n(te,"LI",{});var Z5e=s(Mh);Dae=n(Z5e,"STRONG",{});var SHr=s(Dae);Vdo=r(SHr,"vit"),SHr.forEach(t),Xdo=r(Z5e," \u2014 "),$B=n(Z5e,"A",{href:!0});var RHr=s($B);zdo=r(RHr,"ViTFeatureExtractor"),RHr.forEach(t),Wdo=r(Z5e," (ViT model)"),Z5e.forEach(t),Qdo=i(te),Eh=n(te,"LI",{});var e3e=s(Eh);Gae=n(e3e,"STRONG",{});var PHr=s(Gae);Hdo=r(PHr,"vit_mae"),PHr.forEach(t),Udo=r(e3e," \u2014 "),kB=n(e3e,"A",{href:!0});var BHr=s(kB);Jdo=r(BHr,"ViTFeatureExtractor"),BHr.forEach(t),Ydo=r(e3e," (ViTMAE model)"),e3e.forEach(t),Kdo=i(te),Ch=n(te,"LI",{});var o3e=s(Ch);Oae=n(o3e,"STRONG",{});var IHr=s(Oae);Zdo=r(IHr,"wav2vec2"),IHr.forEach(t),eco=r(o3e," \u2014 "),SB=n(o3e,"A",{href:!0});var qHr=s(SB);oco=r(qHr,"Wav2Vec2FeatureExtractor"),qHr.forEach(t),rco=r(o3e," (Wav2Vec2 model)"),o3e.forEach(t),tco=i(te),wh=n(te,"LI",{});var r3e=s(wh);Vae=n(r3e,"STRONG",{});var NHr=s(Vae);aco=r(NHr,"wav2vec2-conformer"),NHr.forEach(t),nco=r(r3e," \u2014 "),RB=n(r3e,"A",{href:!0});var jHr=s(RB);sco=r(jHr,"Wav2Vec2FeatureExtractor"),jHr.forEach(t),lco=r(r3e," (Wav2Vec2-Conformer model)"),r3e.forEach(t),ico=i(te),Ah=n(te,"LI",{});var t3e=s(Ah);Xae=n(t3e,"STRONG",{});var DHr=s(Xae);dco=r(DHr,"yolos"),DHr.forEach(t),cco=r(t3e," \u2014 "),PB=n(t3e,"A",{href:!0});var GHr=s(PB);fco=r(GHr,"YolosFeatureExtractor"),GHr.forEach(t),mco=r(t3e," (YOLOS model)"),t3e.forEach(t),te.forEach(t),gco=i(Zt),T(yh.$$.fragment,Zt),hco=i(Zt),T(Lh.$$.fragment,Zt),Zt.forEach(t),pco=i(Ns),xh=n(Ns,"DIV",{class:!0});var qNe=s(xh);T(AA.$$.fragment,qNe),uco=i(qNe),zae=n(qNe,"P",{});var OHr=s(zae);_co=r(OHr,"Register a new feature extractor for this class."),OHr.forEach(t),qNe.forEach(t),Ns.forEach(t),IIe=i(f),Mi=n(f,"H2",{class:!0});var NNe=s(Mi);$h=n(NNe,"A",{id:!0,class:!0,href:!0});var VHr=s($h);Wae=n(VHr,"SPAN",{});var XHr=s(Wae);T(yA.$$.fragment,XHr),XHr.forEach(t),VHr.forEach(t),bco=i(NNe),Qae=n(NNe,"SPAN",{});var zHr=s(Qae);vco=r(zHr,"AutoProcessor"),zHr.forEach(t),NNe.forEach(t),qIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(LA.$$.fragment,js),Fco=i(js),xA=n(js,"P",{});var jNe=s(xA);Tco=r(jNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=n(jNe,"A",{href:!0});var WHr=s(BB);Mco=r(WHr,"AutoProcessor.from_pretrained()"),WHr.forEach(t),Eco=r(jNe," class method."),jNe.forEach(t),Cco=i(js),$A=n(js,"P",{});var DNe=s($A);wco=r(DNe,"This class cannot be instantiated directly using "),Hae=n(DNe,"CODE",{});var QHr=s(Hae);Aco=r(QHr,"__init__()"),QHr.forEach(t),yco=r(DNe," (throws an error)."),DNe.forEach(t),Lco=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(kA.$$.fragment,ea),xco=i(ea),Uae=n(ea,"P",{});var HHr=s(Uae);$co=r(HHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),HHr.forEach(t),kco=i(ea),Ei=n(ea,"P",{});var AK=s(Ei);Sco=r(AK,"The processor class to instantiate is selected based on the "),Jae=n(AK,"CODE",{});var UHr=s(Jae);Rco=r(UHr,"model_type"),UHr.forEach(t),Pco=r(AK,` property of the config object (either
passed as an argument or loaded from `),Yae=n(AK,"CODE",{});var JHr=s(Yae);Bco=r(JHr,"pretrained_model_name_or_path"),JHr.forEach(t),Ico=r(AK," if possible):"),AK.forEach(t),qco=i(ea),pe=n(ea,"UL",{});var be=s(pe);kh=n(be,"LI",{});var a3e=s(kh);Kae=n(a3e,"STRONG",{});var YHr=s(Kae);Nco=r(YHr,"clip"),YHr.forEach(t),jco=r(a3e," \u2014 "),IB=n(a3e,"A",{href:!0});var KHr=s(IB);Dco=r(KHr,"CLIPProcessor"),KHr.forEach(t),Gco=r(a3e," (CLIP model)"),a3e.forEach(t),Oco=i(be),Sh=n(be,"LI",{});var n3e=s(Sh);Zae=n(n3e,"STRONG",{});var ZHr=s(Zae);Vco=r(ZHr,"flava"),ZHr.forEach(t),Xco=r(n3e," \u2014 "),ene=n(n3e,"CODE",{});var eUr=s(ene);zco=r(eUr,"FLAVAProcessor"),eUr.forEach(t),Wco=r(n3e," (Flava model)"),n3e.forEach(t),Qco=i(be),Rh=n(be,"LI",{});var s3e=s(Rh);one=n(s3e,"STRONG",{});var oUr=s(one);Hco=r(oUr,"layoutlmv2"),oUr.forEach(t),Uco=r(s3e," \u2014 "),qB=n(s3e,"A",{href:!0});var rUr=s(qB);Jco=r(rUr,"LayoutLMv2Processor"),rUr.forEach(t),Yco=r(s3e," (LayoutLMv2 model)"),s3e.forEach(t),Kco=i(be),Ph=n(be,"LI",{});var l3e=s(Ph);rne=n(l3e,"STRONG",{});var tUr=s(rne);Zco=r(tUr,"layoutxlm"),tUr.forEach(t),efo=r(l3e," \u2014 "),NB=n(l3e,"A",{href:!0});var aUr=s(NB);ofo=r(aUr,"LayoutXLMProcessor"),aUr.forEach(t),rfo=r(l3e," (LayoutXLM model)"),l3e.forEach(t),tfo=i(be),Bh=n(be,"LI",{});var i3e=s(Bh);tne=n(i3e,"STRONG",{});var nUr=s(tne);afo=r(nUr,"sew"),nUr.forEach(t),nfo=r(i3e," \u2014 "),jB=n(i3e,"A",{href:!0});var sUr=s(jB);sfo=r(sUr,"Wav2Vec2Processor"),sUr.forEach(t),lfo=r(i3e," (SEW model)"),i3e.forEach(t),ifo=i(be),Ih=n(be,"LI",{});var d3e=s(Ih);ane=n(d3e,"STRONG",{});var lUr=s(ane);dfo=r(lUr,"sew-d"),lUr.forEach(t),cfo=r(d3e," \u2014 "),DB=n(d3e,"A",{href:!0});var iUr=s(DB);ffo=r(iUr,"Wav2Vec2Processor"),iUr.forEach(t),mfo=r(d3e," (SEW-D model)"),d3e.forEach(t),gfo=i(be),qh=n(be,"LI",{});var c3e=s(qh);nne=n(c3e,"STRONG",{});var dUr=s(nne);hfo=r(dUr,"speech_to_text"),dUr.forEach(t),pfo=r(c3e," \u2014 "),GB=n(c3e,"A",{href:!0});var cUr=s(GB);ufo=r(cUr,"Speech2TextProcessor"),cUr.forEach(t),_fo=r(c3e," (Speech2Text model)"),c3e.forEach(t),bfo=i(be),Nh=n(be,"LI",{});var f3e=s(Nh);sne=n(f3e,"STRONG",{});var fUr=s(sne);vfo=r(fUr,"speech_to_text_2"),fUr.forEach(t),Ffo=r(f3e," \u2014 "),OB=n(f3e,"A",{href:!0});var mUr=s(OB);Tfo=r(mUr,"Speech2Text2Processor"),mUr.forEach(t),Mfo=r(f3e," (Speech2Text2 model)"),f3e.forEach(t),Efo=i(be),jh=n(be,"LI",{});var m3e=s(jh);lne=n(m3e,"STRONG",{});var gUr=s(lne);Cfo=r(gUr,"trocr"),gUr.forEach(t),wfo=r(m3e," \u2014 "),VB=n(m3e,"A",{href:!0});var hUr=s(VB);Afo=r(hUr,"TrOCRProcessor"),hUr.forEach(t),yfo=r(m3e," (TrOCR model)"),m3e.forEach(t),Lfo=i(be),Dh=n(be,"LI",{});var g3e=s(Dh);ine=n(g3e,"STRONG",{});var pUr=s(ine);xfo=r(pUr,"unispeech"),pUr.forEach(t),$fo=r(g3e," \u2014 "),XB=n(g3e,"A",{href:!0});var uUr=s(XB);kfo=r(uUr,"Wav2Vec2Processor"),uUr.forEach(t),Sfo=r(g3e," (UniSpeech model)"),g3e.forEach(t),Rfo=i(be),Gh=n(be,"LI",{});var h3e=s(Gh);dne=n(h3e,"STRONG",{});var _Ur=s(dne);Pfo=r(_Ur,"unispeech-sat"),_Ur.forEach(t),Bfo=r(h3e," \u2014 "),zB=n(h3e,"A",{href:!0});var bUr=s(zB);Ifo=r(bUr,"Wav2Vec2Processor"),bUr.forEach(t),qfo=r(h3e," (UniSpeechSat model)"),h3e.forEach(t),Nfo=i(be),Oh=n(be,"LI",{});var p3e=s(Oh);cne=n(p3e,"STRONG",{});var vUr=s(cne);jfo=r(vUr,"vilt"),vUr.forEach(t),Dfo=r(p3e," \u2014 "),WB=n(p3e,"A",{href:!0});var FUr=s(WB);Gfo=r(FUr,"ViltProcessor"),FUr.forEach(t),Ofo=r(p3e," (ViLT model)"),p3e.forEach(t),Vfo=i(be),Vh=n(be,"LI",{});var u3e=s(Vh);fne=n(u3e,"STRONG",{});var TUr=s(fne);Xfo=r(TUr,"vision-text-dual-encoder"),TUr.forEach(t),zfo=r(u3e," \u2014 "),QB=n(u3e,"A",{href:!0});var MUr=s(QB);Wfo=r(MUr,"VisionTextDualEncoderProcessor"),MUr.forEach(t),Qfo=r(u3e," (VisionTextDualEncoder model)"),u3e.forEach(t),Hfo=i(be),Xh=n(be,"LI",{});var _3e=s(Xh);mne=n(_3e,"STRONG",{});var EUr=s(mne);Ufo=r(EUr,"wav2vec2"),EUr.forEach(t),Jfo=r(_3e," \u2014 "),HB=n(_3e,"A",{href:!0});var CUr=s(HB);Yfo=r(CUr,"Wav2Vec2Processor"),CUr.forEach(t),Kfo=r(_3e," (Wav2Vec2 model)"),_3e.forEach(t),Zfo=i(be),zh=n(be,"LI",{});var b3e=s(zh);gne=n(b3e,"STRONG",{});var wUr=s(gne);emo=r(wUr,"wav2vec2-conformer"),wUr.forEach(t),omo=r(b3e," \u2014 "),UB=n(b3e,"A",{href:!0});var AUr=s(UB);rmo=r(AUr,"Wav2Vec2Processor"),AUr.forEach(t),tmo=r(b3e," (Wav2Vec2-Conformer model)"),b3e.forEach(t),amo=i(be),Wh=n(be,"LI",{});var v3e=s(Wh);hne=n(v3e,"STRONG",{});var yUr=s(hne);nmo=r(yUr,"wavlm"),yUr.forEach(t),smo=r(v3e," \u2014 "),JB=n(v3e,"A",{href:!0});var LUr=s(JB);lmo=r(LUr,"Wav2Vec2Processor"),LUr.forEach(t),imo=r(v3e," (WavLM model)"),v3e.forEach(t),be.forEach(t),dmo=i(ea),T(Qh.$$.fragment,ea),cmo=i(ea),T(Hh.$$.fragment,ea),ea.forEach(t),fmo=i(js),Uh=n(js,"DIV",{class:!0});var GNe=s(Uh);T(SA.$$.fragment,GNe),mmo=i(GNe),pne=n(GNe,"P",{});var xUr=s(pne);gmo=r(xUr,"Register a new processor for this class."),xUr.forEach(t),GNe.forEach(t),js.forEach(t),NIe=i(f),Ci=n(f,"H2",{class:!0});var ONe=s(Ci);Jh=n(ONe,"A",{id:!0,class:!0,href:!0});var $Ur=s(Jh);une=n($Ur,"SPAN",{});var kUr=s(une);T(RA.$$.fragment,kUr),kUr.forEach(t),$Ur.forEach(t),hmo=i(ONe),_ne=n(ONe,"SPAN",{});var SUr=s(_ne);pmo=r(SUr,"AutoModel"),SUr.forEach(t),ONe.forEach(t),jIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(PA.$$.fragment,Ds),umo=i(Ds),wi=n(Ds,"P",{});var yK=s(wi);_mo=r(yK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YB=n(yK,"A",{href:!0});var RUr=s(YB);bmo=r(RUr,"from_pretrained()"),RUr.forEach(t),vmo=r(yK," class method or the "),KB=n(yK,"A",{href:!0});var PUr=s(KB);Fmo=r(PUr,"from_config()"),PUr.forEach(t),Tmo=r(yK,` class
method.`),yK.forEach(t),Mmo=i(Ds),BA=n(Ds,"P",{});var VNe=s(BA);Emo=r(VNe,"This class cannot be instantiated directly using "),bne=n(VNe,"CODE",{});var BUr=s(bne);Cmo=r(BUr,"__init__()"),BUr.forEach(t),wmo=r(VNe," (throws an error)."),VNe.forEach(t),Amo=i(Ds),tt=n(Ds,"DIV",{class:!0});var f3=s(tt);T(IA.$$.fragment,f3),ymo=i(f3),vne=n(f3,"P",{});var IUr=s(vne);Lmo=r(IUr,"Instantiates one of the base model classes of the library from a configuration."),IUr.forEach(t),xmo=i(f3),Ai=n(f3,"P",{});var LK=s(Ai);$mo=r(LK,`Note:
Loading a model from its configuration file does `),Fne=n(LK,"STRONG",{});var qUr=s(Fne);kmo=r(qUr,"not"),qUr.forEach(t),Smo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZB=n(LK,"A",{href:!0});var NUr=s(ZB);Rmo=r(NUr,"from_pretrained()"),NUr.forEach(t),Pmo=r(LK," to load the model weights."),LK.forEach(t),Bmo=i(f3),T(Yh.$$.fragment,f3),f3.forEach(t),Imo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(qA.$$.fragment,oa),qmo=i(oa),Tne=n(oa,"P",{});var jUr=s(Tne);Nmo=r(jUr,"Instantiate one of the base model classes of the library from a pretrained model."),jUr.forEach(t),jmo=i(oa),La=n(oa,"P",{});var m3=s(La);Dmo=r(m3,"The model class to instantiate is selected based on the "),Mne=n(m3,"CODE",{});var DUr=s(Mne);Gmo=r(DUr,"model_type"),DUr.forEach(t),Omo=r(m3,` property of the config object (either
passed as an argument or loaded from `),Ene=n(m3,"CODE",{});var GUr=s(Ene);Vmo=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),Xmo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cne=n(m3,"CODE",{});var OUr=s(Cne);zmo=r(OUr,"pretrained_model_name_or_path"),OUr.forEach(t),Wmo=r(m3,":"),m3.forEach(t),Qmo=i(oa),x=n(oa,"UL",{});var $=s(x);Kh=n($,"LI",{});var F3e=s(Kh);wne=n(F3e,"STRONG",{});var VUr=s(wne);Hmo=r(VUr,"albert"),VUr.forEach(t),Umo=r(F3e," \u2014 "),eI=n(F3e,"A",{href:!0});var XUr=s(eI);Jmo=r(XUr,"AlbertModel"),XUr.forEach(t),Ymo=r(F3e," (ALBERT model)"),F3e.forEach(t),Kmo=i($),Zh=n($,"LI",{});var T3e=s(Zh);Ane=n(T3e,"STRONG",{});var zUr=s(Ane);Zmo=r(zUr,"bart"),zUr.forEach(t),ego=r(T3e," \u2014 "),oI=n(T3e,"A",{href:!0});var WUr=s(oI);ogo=r(WUr,"BartModel"),WUr.forEach(t),rgo=r(T3e," (BART model)"),T3e.forEach(t),tgo=i($),ep=n($,"LI",{});var M3e=s(ep);yne=n(M3e,"STRONG",{});var QUr=s(yne);ago=r(QUr,"beit"),QUr.forEach(t),ngo=r(M3e," \u2014 "),rI=n(M3e,"A",{href:!0});var HUr=s(rI);sgo=r(HUr,"BeitModel"),HUr.forEach(t),lgo=r(M3e," (BEiT model)"),M3e.forEach(t),igo=i($),op=n($,"LI",{});var E3e=s(op);Lne=n(E3e,"STRONG",{});var UUr=s(Lne);dgo=r(UUr,"bert"),UUr.forEach(t),cgo=r(E3e," \u2014 "),tI=n(E3e,"A",{href:!0});var JUr=s(tI);fgo=r(JUr,"BertModel"),JUr.forEach(t),mgo=r(E3e," (BERT model)"),E3e.forEach(t),ggo=i($),rp=n($,"LI",{});var C3e=s(rp);xne=n(C3e,"STRONG",{});var YUr=s(xne);hgo=r(YUr,"bert-generation"),YUr.forEach(t),pgo=r(C3e," \u2014 "),aI=n(C3e,"A",{href:!0});var KUr=s(aI);ugo=r(KUr,"BertGenerationEncoder"),KUr.forEach(t),_go=r(C3e," (Bert Generation model)"),C3e.forEach(t),bgo=i($),tp=n($,"LI",{});var w3e=s(tp);$ne=n(w3e,"STRONG",{});var ZUr=s($ne);vgo=r(ZUr,"big_bird"),ZUr.forEach(t),Fgo=r(w3e," \u2014 "),nI=n(w3e,"A",{href:!0});var eJr=s(nI);Tgo=r(eJr,"BigBirdModel"),eJr.forEach(t),Mgo=r(w3e," (BigBird model)"),w3e.forEach(t),Ego=i($),ap=n($,"LI",{});var A3e=s(ap);kne=n(A3e,"STRONG",{});var oJr=s(kne);Cgo=r(oJr,"bigbird_pegasus"),oJr.forEach(t),wgo=r(A3e," \u2014 "),sI=n(A3e,"A",{href:!0});var rJr=s(sI);Ago=r(rJr,"BigBirdPegasusModel"),rJr.forEach(t),ygo=r(A3e," (BigBirdPegasus model)"),A3e.forEach(t),Lgo=i($),np=n($,"LI",{});var y3e=s(np);Sne=n(y3e,"STRONG",{});var tJr=s(Sne);xgo=r(tJr,"blenderbot"),tJr.forEach(t),$go=r(y3e," \u2014 "),lI=n(y3e,"A",{href:!0});var aJr=s(lI);kgo=r(aJr,"BlenderbotModel"),aJr.forEach(t),Sgo=r(y3e," (Blenderbot model)"),y3e.forEach(t),Rgo=i($),sp=n($,"LI",{});var L3e=s(sp);Rne=n(L3e,"STRONG",{});var nJr=s(Rne);Pgo=r(nJr,"blenderbot-small"),nJr.forEach(t),Bgo=r(L3e," \u2014 "),iI=n(L3e,"A",{href:!0});var sJr=s(iI);Igo=r(sJr,"BlenderbotSmallModel"),sJr.forEach(t),qgo=r(L3e," (BlenderbotSmall model)"),L3e.forEach(t),Ngo=i($),lp=n($,"LI",{});var x3e=s(lp);Pne=n(x3e,"STRONG",{});var lJr=s(Pne);jgo=r(lJr,"camembert"),lJr.forEach(t),Dgo=r(x3e," \u2014 "),dI=n(x3e,"A",{href:!0});var iJr=s(dI);Ggo=r(iJr,"CamembertModel"),iJr.forEach(t),Ogo=r(x3e," (CamemBERT model)"),x3e.forEach(t),Vgo=i($),ip=n($,"LI",{});var $3e=s(ip);Bne=n($3e,"STRONG",{});var dJr=s(Bne);Xgo=r(dJr,"canine"),dJr.forEach(t),zgo=r($3e," \u2014 "),cI=n($3e,"A",{href:!0});var cJr=s(cI);Wgo=r(cJr,"CanineModel"),cJr.forEach(t),Qgo=r($3e," (Canine model)"),$3e.forEach(t),Hgo=i($),dp=n($,"LI",{});var k3e=s(dp);Ine=n(k3e,"STRONG",{});var fJr=s(Ine);Ugo=r(fJr,"clip"),fJr.forEach(t),Jgo=r(k3e," \u2014 "),fI=n(k3e,"A",{href:!0});var mJr=s(fI);Ygo=r(mJr,"CLIPModel"),mJr.forEach(t),Kgo=r(k3e," (CLIP model)"),k3e.forEach(t),Zgo=i($),cp=n($,"LI",{});var S3e=s(cp);qne=n(S3e,"STRONG",{});var gJr=s(qne);eho=r(gJr,"convbert"),gJr.forEach(t),oho=r(S3e," \u2014 "),mI=n(S3e,"A",{href:!0});var hJr=s(mI);rho=r(hJr,"ConvBertModel"),hJr.forEach(t),tho=r(S3e," (ConvBERT model)"),S3e.forEach(t),aho=i($),fp=n($,"LI",{});var R3e=s(fp);Nne=n(R3e,"STRONG",{});var pJr=s(Nne);nho=r(pJr,"convnext"),pJr.forEach(t),sho=r(R3e," \u2014 "),gI=n(R3e,"A",{href:!0});var uJr=s(gI);lho=r(uJr,"ConvNextModel"),uJr.forEach(t),iho=r(R3e," (ConvNext model)"),R3e.forEach(t),dho=i($),mp=n($,"LI",{});var P3e=s(mp);jne=n(P3e,"STRONG",{});var _Jr=s(jne);cho=r(_Jr,"ctrl"),_Jr.forEach(t),fho=r(P3e," \u2014 "),hI=n(P3e,"A",{href:!0});var bJr=s(hI);mho=r(bJr,"CTRLModel"),bJr.forEach(t),gho=r(P3e," (CTRL model)"),P3e.forEach(t),hho=i($),gp=n($,"LI",{});var B3e=s(gp);Dne=n(B3e,"STRONG",{});var vJr=s(Dne);pho=r(vJr,"data2vec-audio"),vJr.forEach(t),uho=r(B3e," \u2014 "),pI=n(B3e,"A",{href:!0});var FJr=s(pI);_ho=r(FJr,"Data2VecAudioModel"),FJr.forEach(t),bho=r(B3e," (Data2VecAudio model)"),B3e.forEach(t),vho=i($),hp=n($,"LI",{});var I3e=s(hp);Gne=n(I3e,"STRONG",{});var TJr=s(Gne);Fho=r(TJr,"data2vec-text"),TJr.forEach(t),Tho=r(I3e," \u2014 "),uI=n(I3e,"A",{href:!0});var MJr=s(uI);Mho=r(MJr,"Data2VecTextModel"),MJr.forEach(t),Eho=r(I3e," (Data2VecText model)"),I3e.forEach(t),Cho=i($),pp=n($,"LI",{});var q3e=s(pp);One=n(q3e,"STRONG",{});var EJr=s(One);who=r(EJr,"data2vec-vision"),EJr.forEach(t),Aho=r(q3e," \u2014 "),_I=n(q3e,"A",{href:!0});var CJr=s(_I);yho=r(CJr,"Data2VecVisionModel"),CJr.forEach(t),Lho=r(q3e," (Data2VecVision model)"),q3e.forEach(t),xho=i($),up=n($,"LI",{});var N3e=s(up);Vne=n(N3e,"STRONG",{});var wJr=s(Vne);$ho=r(wJr,"deberta"),wJr.forEach(t),kho=r(N3e," \u2014 "),bI=n(N3e,"A",{href:!0});var AJr=s(bI);Sho=r(AJr,"DebertaModel"),AJr.forEach(t),Rho=r(N3e," (DeBERTa model)"),N3e.forEach(t),Pho=i($),_p=n($,"LI",{});var j3e=s(_p);Xne=n(j3e,"STRONG",{});var yJr=s(Xne);Bho=r(yJr,"deberta-v2"),yJr.forEach(t),Iho=r(j3e," \u2014 "),vI=n(j3e,"A",{href:!0});var LJr=s(vI);qho=r(LJr,"DebertaV2Model"),LJr.forEach(t),Nho=r(j3e," (DeBERTa-v2 model)"),j3e.forEach(t),jho=i($),bp=n($,"LI",{});var D3e=s(bp);zne=n(D3e,"STRONG",{});var xJr=s(zne);Dho=r(xJr,"decision_transformer"),xJr.forEach(t),Gho=r(D3e," \u2014 "),FI=n(D3e,"A",{href:!0});var $Jr=s(FI);Oho=r($Jr,"DecisionTransformerModel"),$Jr.forEach(t),Vho=r(D3e," (Decision Transformer model)"),D3e.forEach(t),Xho=i($),vp=n($,"LI",{});var G3e=s(vp);Wne=n(G3e,"STRONG",{});var kJr=s(Wne);zho=r(kJr,"deit"),kJr.forEach(t),Who=r(G3e," \u2014 "),TI=n(G3e,"A",{href:!0});var SJr=s(TI);Qho=r(SJr,"DeiTModel"),SJr.forEach(t),Hho=r(G3e," (DeiT model)"),G3e.forEach(t),Uho=i($),Fp=n($,"LI",{});var O3e=s(Fp);Qne=n(O3e,"STRONG",{});var RJr=s(Qne);Jho=r(RJr,"detr"),RJr.forEach(t),Yho=r(O3e," \u2014 "),MI=n(O3e,"A",{href:!0});var PJr=s(MI);Kho=r(PJr,"DetrModel"),PJr.forEach(t),Zho=r(O3e," (DETR model)"),O3e.forEach(t),epo=i($),Tp=n($,"LI",{});var V3e=s(Tp);Hne=n(V3e,"STRONG",{});var BJr=s(Hne);opo=r(BJr,"distilbert"),BJr.forEach(t),rpo=r(V3e," \u2014 "),EI=n(V3e,"A",{href:!0});var IJr=s(EI);tpo=r(IJr,"DistilBertModel"),IJr.forEach(t),apo=r(V3e," (DistilBERT model)"),V3e.forEach(t),npo=i($),Mp=n($,"LI",{});var X3e=s(Mp);Une=n(X3e,"STRONG",{});var qJr=s(Une);spo=r(qJr,"dpr"),qJr.forEach(t),lpo=r(X3e," \u2014 "),CI=n(X3e,"A",{href:!0});var NJr=s(CI);ipo=r(NJr,"DPRQuestionEncoder"),NJr.forEach(t),dpo=r(X3e," (DPR model)"),X3e.forEach(t),cpo=i($),Ep=n($,"LI",{});var z3e=s(Ep);Jne=n(z3e,"STRONG",{});var jJr=s(Jne);fpo=r(jJr,"dpt"),jJr.forEach(t),mpo=r(z3e," \u2014 "),wI=n(z3e,"A",{href:!0});var DJr=s(wI);gpo=r(DJr,"DPTModel"),DJr.forEach(t),hpo=r(z3e," (DPT model)"),z3e.forEach(t),ppo=i($),Cp=n($,"LI",{});var W3e=s(Cp);Yne=n(W3e,"STRONG",{});var GJr=s(Yne);upo=r(GJr,"electra"),GJr.forEach(t),_po=r(W3e," \u2014 "),AI=n(W3e,"A",{href:!0});var OJr=s(AI);bpo=r(OJr,"ElectraModel"),OJr.forEach(t),vpo=r(W3e," (ELECTRA model)"),W3e.forEach(t),Fpo=i($),wp=n($,"LI",{});var Q3e=s(wp);Kne=n(Q3e,"STRONG",{});var VJr=s(Kne);Tpo=r(VJr,"flaubert"),VJr.forEach(t),Mpo=r(Q3e," \u2014 "),yI=n(Q3e,"A",{href:!0});var XJr=s(yI);Epo=r(XJr,"FlaubertModel"),XJr.forEach(t),Cpo=r(Q3e," (FlauBERT model)"),Q3e.forEach(t),wpo=i($),Ap=n($,"LI",{});var H3e=s(Ap);Zne=n(H3e,"STRONG",{});var zJr=s(Zne);Apo=r(zJr,"flava"),zJr.forEach(t),ypo=r(H3e," \u2014 "),LI=n(H3e,"A",{href:!0});var WJr=s(LI);Lpo=r(WJr,"FlavaModel"),WJr.forEach(t),xpo=r(H3e," (Flava model)"),H3e.forEach(t),$po=i($),yp=n($,"LI",{});var U3e=s(yp);ese=n(U3e,"STRONG",{});var QJr=s(ese);kpo=r(QJr,"fnet"),QJr.forEach(t),Spo=r(U3e," \u2014 "),xI=n(U3e,"A",{href:!0});var HJr=s(xI);Rpo=r(HJr,"FNetModel"),HJr.forEach(t),Ppo=r(U3e," (FNet model)"),U3e.forEach(t),Bpo=i($),Lp=n($,"LI",{});var J3e=s(Lp);ose=n(J3e,"STRONG",{});var UJr=s(ose);Ipo=r(UJr,"fsmt"),UJr.forEach(t),qpo=r(J3e," \u2014 "),$I=n(J3e,"A",{href:!0});var JJr=s($I);Npo=r(JJr,"FSMTModel"),JJr.forEach(t),jpo=r(J3e," (FairSeq Machine-Translation model)"),J3e.forEach(t),Dpo=i($),Rs=n($,"LI",{});var T$=s(Rs);rse=n(T$,"STRONG",{});var YJr=s(rse);Gpo=r(YJr,"funnel"),YJr.forEach(t),Opo=r(T$," \u2014 "),kI=n(T$,"A",{href:!0});var KJr=s(kI);Vpo=r(KJr,"FunnelModel"),KJr.forEach(t),Xpo=r(T$," or "),SI=n(T$,"A",{href:!0});var ZJr=s(SI);zpo=r(ZJr,"FunnelBaseModel"),ZJr.forEach(t),Wpo=r(T$," (Funnel Transformer model)"),T$.forEach(t),Qpo=i($),xp=n($,"LI",{});var Y3e=s(xp);tse=n(Y3e,"STRONG",{});var eYr=s(tse);Hpo=r(eYr,"glpn"),eYr.forEach(t),Upo=r(Y3e," \u2014 "),RI=n(Y3e,"A",{href:!0});var oYr=s(RI);Jpo=r(oYr,"GLPNModel"),oYr.forEach(t),Ypo=r(Y3e," (GLPN model)"),Y3e.forEach(t),Kpo=i($),$p=n($,"LI",{});var K3e=s($p);ase=n(K3e,"STRONG",{});var rYr=s(ase);Zpo=r(rYr,"gpt2"),rYr.forEach(t),euo=r(K3e," \u2014 "),PI=n(K3e,"A",{href:!0});var tYr=s(PI);ouo=r(tYr,"GPT2Model"),tYr.forEach(t),ruo=r(K3e," (OpenAI GPT-2 model)"),K3e.forEach(t),tuo=i($),kp=n($,"LI",{});var Z3e=s(kp);nse=n(Z3e,"STRONG",{});var aYr=s(nse);auo=r(aYr,"gpt_neo"),aYr.forEach(t),nuo=r(Z3e," \u2014 "),BI=n(Z3e,"A",{href:!0});var nYr=s(BI);suo=r(nYr,"GPTNeoModel"),nYr.forEach(t),luo=r(Z3e," (GPT Neo model)"),Z3e.forEach(t),iuo=i($),Sp=n($,"LI",{});var ewe=s(Sp);sse=n(ewe,"STRONG",{});var sYr=s(sse);duo=r(sYr,"gptj"),sYr.forEach(t),cuo=r(ewe," \u2014 "),II=n(ewe,"A",{href:!0});var lYr=s(II);fuo=r(lYr,"GPTJModel"),lYr.forEach(t),muo=r(ewe," (GPT-J model)"),ewe.forEach(t),guo=i($),Rp=n($,"LI",{});var owe=s(Rp);lse=n(owe,"STRONG",{});var iYr=s(lse);huo=r(iYr,"hubert"),iYr.forEach(t),puo=r(owe," \u2014 "),qI=n(owe,"A",{href:!0});var dYr=s(qI);uuo=r(dYr,"HubertModel"),dYr.forEach(t),_uo=r(owe," (Hubert model)"),owe.forEach(t),buo=i($),Pp=n($,"LI",{});var rwe=s(Pp);ise=n(rwe,"STRONG",{});var cYr=s(ise);vuo=r(cYr,"ibert"),cYr.forEach(t),Fuo=r(rwe," \u2014 "),NI=n(rwe,"A",{href:!0});var fYr=s(NI);Tuo=r(fYr,"IBertModel"),fYr.forEach(t),Muo=r(rwe," (I-BERT model)"),rwe.forEach(t),Euo=i($),Bp=n($,"LI",{});var twe=s(Bp);dse=n(twe,"STRONG",{});var mYr=s(dse);Cuo=r(mYr,"imagegpt"),mYr.forEach(t),wuo=r(twe," \u2014 "),jI=n(twe,"A",{href:!0});var gYr=s(jI);Auo=r(gYr,"ImageGPTModel"),gYr.forEach(t),yuo=r(twe," (ImageGPT model)"),twe.forEach(t),Luo=i($),Ip=n($,"LI",{});var awe=s(Ip);cse=n(awe,"STRONG",{});var hYr=s(cse);xuo=r(hYr,"layoutlm"),hYr.forEach(t),$uo=r(awe," \u2014 "),DI=n(awe,"A",{href:!0});var pYr=s(DI);kuo=r(pYr,"LayoutLMModel"),pYr.forEach(t),Suo=r(awe," (LayoutLM model)"),awe.forEach(t),Ruo=i($),qp=n($,"LI",{});var nwe=s(qp);fse=n(nwe,"STRONG",{});var uYr=s(fse);Puo=r(uYr,"layoutlmv2"),uYr.forEach(t),Buo=r(nwe," \u2014 "),GI=n(nwe,"A",{href:!0});var _Yr=s(GI);Iuo=r(_Yr,"LayoutLMv2Model"),_Yr.forEach(t),quo=r(nwe," (LayoutLMv2 model)"),nwe.forEach(t),Nuo=i($),Np=n($,"LI",{});var swe=s(Np);mse=n(swe,"STRONG",{});var bYr=s(mse);juo=r(bYr,"led"),bYr.forEach(t),Duo=r(swe," \u2014 "),OI=n(swe,"A",{href:!0});var vYr=s(OI);Guo=r(vYr,"LEDModel"),vYr.forEach(t),Ouo=r(swe," (LED model)"),swe.forEach(t),Vuo=i($),jp=n($,"LI",{});var lwe=s(jp);gse=n(lwe,"STRONG",{});var FYr=s(gse);Xuo=r(FYr,"longformer"),FYr.forEach(t),zuo=r(lwe," \u2014 "),VI=n(lwe,"A",{href:!0});var TYr=s(VI);Wuo=r(TYr,"LongformerModel"),TYr.forEach(t),Quo=r(lwe," (Longformer model)"),lwe.forEach(t),Huo=i($),Dp=n($,"LI",{});var iwe=s(Dp);hse=n(iwe,"STRONG",{});var MYr=s(hse);Uuo=r(MYr,"luke"),MYr.forEach(t),Juo=r(iwe," \u2014 "),XI=n(iwe,"A",{href:!0});var EYr=s(XI);Yuo=r(EYr,"LukeModel"),EYr.forEach(t),Kuo=r(iwe," (LUKE model)"),iwe.forEach(t),Zuo=i($),Gp=n($,"LI",{});var dwe=s(Gp);pse=n(dwe,"STRONG",{});var CYr=s(pse);e_o=r(CYr,"lxmert"),CYr.forEach(t),o_o=r(dwe," \u2014 "),zI=n(dwe,"A",{href:!0});var wYr=s(zI);r_o=r(wYr,"LxmertModel"),wYr.forEach(t),t_o=r(dwe," (LXMERT model)"),dwe.forEach(t),a_o=i($),Op=n($,"LI",{});var cwe=s(Op);use=n(cwe,"STRONG",{});var AYr=s(use);n_o=r(AYr,"m2m_100"),AYr.forEach(t),s_o=r(cwe," \u2014 "),WI=n(cwe,"A",{href:!0});var yYr=s(WI);l_o=r(yYr,"M2M100Model"),yYr.forEach(t),i_o=r(cwe," (M2M100 model)"),cwe.forEach(t),d_o=i($),Vp=n($,"LI",{});var fwe=s(Vp);_se=n(fwe,"STRONG",{});var LYr=s(_se);c_o=r(LYr,"marian"),LYr.forEach(t),f_o=r(fwe," \u2014 "),QI=n(fwe,"A",{href:!0});var xYr=s(QI);m_o=r(xYr,"MarianModel"),xYr.forEach(t),g_o=r(fwe," (Marian model)"),fwe.forEach(t),h_o=i($),Xp=n($,"LI",{});var mwe=s(Xp);bse=n(mwe,"STRONG",{});var $Yr=s(bse);p_o=r($Yr,"maskformer"),$Yr.forEach(t),u_o=r(mwe," \u2014 "),HI=n(mwe,"A",{href:!0});var kYr=s(HI);__o=r(kYr,"MaskFormerModel"),kYr.forEach(t),b_o=r(mwe," (MaskFormer model)"),mwe.forEach(t),v_o=i($),zp=n($,"LI",{});var gwe=s(zp);vse=n(gwe,"STRONG",{});var SYr=s(vse);F_o=r(SYr,"mbart"),SYr.forEach(t),T_o=r(gwe," \u2014 "),UI=n(gwe,"A",{href:!0});var RYr=s(UI);M_o=r(RYr,"MBartModel"),RYr.forEach(t),E_o=r(gwe," (mBART model)"),gwe.forEach(t),C_o=i($),Wp=n($,"LI",{});var hwe=s(Wp);Fse=n(hwe,"STRONG",{});var PYr=s(Fse);w_o=r(PYr,"megatron-bert"),PYr.forEach(t),A_o=r(hwe," \u2014 "),JI=n(hwe,"A",{href:!0});var BYr=s(JI);y_o=r(BYr,"MegatronBertModel"),BYr.forEach(t),L_o=r(hwe," (MegatronBert model)"),hwe.forEach(t),x_o=i($),Qp=n($,"LI",{});var pwe=s(Qp);Tse=n(pwe,"STRONG",{});var IYr=s(Tse);$_o=r(IYr,"mobilebert"),IYr.forEach(t),k_o=r(pwe," \u2014 "),YI=n(pwe,"A",{href:!0});var qYr=s(YI);S_o=r(qYr,"MobileBertModel"),qYr.forEach(t),R_o=r(pwe," (MobileBERT model)"),pwe.forEach(t),P_o=i($),Hp=n($,"LI",{});var uwe=s(Hp);Mse=n(uwe,"STRONG",{});var NYr=s(Mse);B_o=r(NYr,"mpnet"),NYr.forEach(t),I_o=r(uwe," \u2014 "),KI=n(uwe,"A",{href:!0});var jYr=s(KI);q_o=r(jYr,"MPNetModel"),jYr.forEach(t),N_o=r(uwe," (MPNet model)"),uwe.forEach(t),j_o=i($),Up=n($,"LI",{});var _we=s(Up);Ese=n(_we,"STRONG",{});var DYr=s(Ese);D_o=r(DYr,"mt5"),DYr.forEach(t),G_o=r(_we," \u2014 "),ZI=n(_we,"A",{href:!0});var GYr=s(ZI);O_o=r(GYr,"MT5Model"),GYr.forEach(t),V_o=r(_we," (mT5 model)"),_we.forEach(t),X_o=i($),Jp=n($,"LI",{});var bwe=s(Jp);Cse=n(bwe,"STRONG",{});var OYr=s(Cse);z_o=r(OYr,"nystromformer"),OYr.forEach(t),W_o=r(bwe," \u2014 "),eq=n(bwe,"A",{href:!0});var VYr=s(eq);Q_o=r(VYr,"NystromformerModel"),VYr.forEach(t),H_o=r(bwe," (Nystromformer model)"),bwe.forEach(t),U_o=i($),Yp=n($,"LI",{});var vwe=s(Yp);wse=n(vwe,"STRONG",{});var XYr=s(wse);J_o=r(XYr,"openai-gpt"),XYr.forEach(t),Y_o=r(vwe," \u2014 "),oq=n(vwe,"A",{href:!0});var zYr=s(oq);K_o=r(zYr,"OpenAIGPTModel"),zYr.forEach(t),Z_o=r(vwe," (OpenAI GPT model)"),vwe.forEach(t),e2o=i($),Kp=n($,"LI",{});var Fwe=s(Kp);Ase=n(Fwe,"STRONG",{});var WYr=s(Ase);o2o=r(WYr,"opt"),WYr.forEach(t),r2o=r(Fwe," \u2014 "),rq=n(Fwe,"A",{href:!0});var QYr=s(rq);t2o=r(QYr,"OPTModel"),QYr.forEach(t),a2o=r(Fwe," (OPT model)"),Fwe.forEach(t),n2o=i($),Zp=n($,"LI",{});var Twe=s(Zp);yse=n(Twe,"STRONG",{});var HYr=s(yse);s2o=r(HYr,"pegasus"),HYr.forEach(t),l2o=r(Twe," \u2014 "),tq=n(Twe,"A",{href:!0});var UYr=s(tq);i2o=r(UYr,"PegasusModel"),UYr.forEach(t),d2o=r(Twe," (Pegasus model)"),Twe.forEach(t),c2o=i($),eu=n($,"LI",{});var Mwe=s(eu);Lse=n(Mwe,"STRONG",{});var JYr=s(Lse);f2o=r(JYr,"perceiver"),JYr.forEach(t),m2o=r(Mwe," \u2014 "),aq=n(Mwe,"A",{href:!0});var YYr=s(aq);g2o=r(YYr,"PerceiverModel"),YYr.forEach(t),h2o=r(Mwe," (Perceiver model)"),Mwe.forEach(t),p2o=i($),ou=n($,"LI",{});var Ewe=s(ou);xse=n(Ewe,"STRONG",{});var KYr=s(xse);u2o=r(KYr,"plbart"),KYr.forEach(t),_2o=r(Ewe," \u2014 "),nq=n(Ewe,"A",{href:!0});var ZYr=s(nq);b2o=r(ZYr,"PLBartModel"),ZYr.forEach(t),v2o=r(Ewe," (PLBart model)"),Ewe.forEach(t),F2o=i($),ru=n($,"LI",{});var Cwe=s(ru);$se=n(Cwe,"STRONG",{});var eKr=s($se);T2o=r(eKr,"poolformer"),eKr.forEach(t),M2o=r(Cwe," \u2014 "),sq=n(Cwe,"A",{href:!0});var oKr=s(sq);E2o=r(oKr,"PoolFormerModel"),oKr.forEach(t),C2o=r(Cwe," (PoolFormer model)"),Cwe.forEach(t),w2o=i($),tu=n($,"LI",{});var wwe=s(tu);kse=n(wwe,"STRONG",{});var rKr=s(kse);A2o=r(rKr,"prophetnet"),rKr.forEach(t),y2o=r(wwe," \u2014 "),lq=n(wwe,"A",{href:!0});var tKr=s(lq);L2o=r(tKr,"ProphetNetModel"),tKr.forEach(t),x2o=r(wwe," (ProphetNet model)"),wwe.forEach(t),$2o=i($),au=n($,"LI",{});var Awe=s(au);Sse=n(Awe,"STRONG",{});var aKr=s(Sse);k2o=r(aKr,"qdqbert"),aKr.forEach(t),S2o=r(Awe," \u2014 "),iq=n(Awe,"A",{href:!0});var nKr=s(iq);R2o=r(nKr,"QDQBertModel"),nKr.forEach(t),P2o=r(Awe," (QDQBert model)"),Awe.forEach(t),B2o=i($),nu=n($,"LI",{});var ywe=s(nu);Rse=n(ywe,"STRONG",{});var sKr=s(Rse);I2o=r(sKr,"reformer"),sKr.forEach(t),q2o=r(ywe," \u2014 "),dq=n(ywe,"A",{href:!0});var lKr=s(dq);N2o=r(lKr,"ReformerModel"),lKr.forEach(t),j2o=r(ywe," (Reformer model)"),ywe.forEach(t),D2o=i($),su=n($,"LI",{});var Lwe=s(su);Pse=n(Lwe,"STRONG",{});var iKr=s(Pse);G2o=r(iKr,"regnet"),iKr.forEach(t),O2o=r(Lwe," \u2014 "),cq=n(Lwe,"A",{href:!0});var dKr=s(cq);V2o=r(dKr,"RegNetModel"),dKr.forEach(t),X2o=r(Lwe," (RegNet model)"),Lwe.forEach(t),z2o=i($),lu=n($,"LI",{});var xwe=s(lu);Bse=n(xwe,"STRONG",{});var cKr=s(Bse);W2o=r(cKr,"rembert"),cKr.forEach(t),Q2o=r(xwe," \u2014 "),fq=n(xwe,"A",{href:!0});var fKr=s(fq);H2o=r(fKr,"RemBertModel"),fKr.forEach(t),U2o=r(xwe," (RemBERT model)"),xwe.forEach(t),J2o=i($),iu=n($,"LI",{});var $we=s(iu);Ise=n($we,"STRONG",{});var mKr=s(Ise);Y2o=r(mKr,"resnet"),mKr.forEach(t),K2o=r($we," \u2014 "),mq=n($we,"A",{href:!0});var gKr=s(mq);Z2o=r(gKr,"ResNetModel"),gKr.forEach(t),e1o=r($we," (ResNet model)"),$we.forEach(t),o1o=i($),du=n($,"LI",{});var kwe=s(du);qse=n(kwe,"STRONG",{});var hKr=s(qse);r1o=r(hKr,"retribert"),hKr.forEach(t),t1o=r(kwe," \u2014 "),gq=n(kwe,"A",{href:!0});var pKr=s(gq);a1o=r(pKr,"RetriBertModel"),pKr.forEach(t),n1o=r(kwe," (RetriBERT model)"),kwe.forEach(t),s1o=i($),cu=n($,"LI",{});var Swe=s(cu);Nse=n(Swe,"STRONG",{});var uKr=s(Nse);l1o=r(uKr,"roberta"),uKr.forEach(t),i1o=r(Swe," \u2014 "),hq=n(Swe,"A",{href:!0});var _Kr=s(hq);d1o=r(_Kr,"RobertaModel"),_Kr.forEach(t),c1o=r(Swe," (RoBERTa model)"),Swe.forEach(t),f1o=i($),fu=n($,"LI",{});var Rwe=s(fu);jse=n(Rwe,"STRONG",{});var bKr=s(jse);m1o=r(bKr,"roformer"),bKr.forEach(t),g1o=r(Rwe," \u2014 "),pq=n(Rwe,"A",{href:!0});var vKr=s(pq);h1o=r(vKr,"RoFormerModel"),vKr.forEach(t),p1o=r(Rwe," (RoFormer model)"),Rwe.forEach(t),u1o=i($),mu=n($,"LI",{});var Pwe=s(mu);Dse=n(Pwe,"STRONG",{});var FKr=s(Dse);_1o=r(FKr,"segformer"),FKr.forEach(t),b1o=r(Pwe," \u2014 "),uq=n(Pwe,"A",{href:!0});var TKr=s(uq);v1o=r(TKr,"SegformerModel"),TKr.forEach(t),F1o=r(Pwe," (SegFormer model)"),Pwe.forEach(t),T1o=i($),gu=n($,"LI",{});var Bwe=s(gu);Gse=n(Bwe,"STRONG",{});var MKr=s(Gse);M1o=r(MKr,"sew"),MKr.forEach(t),E1o=r(Bwe," \u2014 "),_q=n(Bwe,"A",{href:!0});var EKr=s(_q);C1o=r(EKr,"SEWModel"),EKr.forEach(t),w1o=r(Bwe," (SEW model)"),Bwe.forEach(t),A1o=i($),hu=n($,"LI",{});var Iwe=s(hu);Ose=n(Iwe,"STRONG",{});var CKr=s(Ose);y1o=r(CKr,"sew-d"),CKr.forEach(t),L1o=r(Iwe," \u2014 "),bq=n(Iwe,"A",{href:!0});var wKr=s(bq);x1o=r(wKr,"SEWDModel"),wKr.forEach(t),$1o=r(Iwe," (SEW-D model)"),Iwe.forEach(t),k1o=i($),pu=n($,"LI",{});var qwe=s(pu);Vse=n(qwe,"STRONG",{});var AKr=s(Vse);S1o=r(AKr,"speech_to_text"),AKr.forEach(t),R1o=r(qwe," \u2014 "),vq=n(qwe,"A",{href:!0});var yKr=s(vq);P1o=r(yKr,"Speech2TextModel"),yKr.forEach(t),B1o=r(qwe," (Speech2Text model)"),qwe.forEach(t),I1o=i($),uu=n($,"LI",{});var Nwe=s(uu);Xse=n(Nwe,"STRONG",{});var LKr=s(Xse);q1o=r(LKr,"splinter"),LKr.forEach(t),N1o=r(Nwe," \u2014 "),Fq=n(Nwe,"A",{href:!0});var xKr=s(Fq);j1o=r(xKr,"SplinterModel"),xKr.forEach(t),D1o=r(Nwe," (Splinter model)"),Nwe.forEach(t),G1o=i($),_u=n($,"LI",{});var jwe=s(_u);zse=n(jwe,"STRONG",{});var $Kr=s(zse);O1o=r($Kr,"squeezebert"),$Kr.forEach(t),V1o=r(jwe," \u2014 "),Tq=n(jwe,"A",{href:!0});var kKr=s(Tq);X1o=r(kKr,"SqueezeBertModel"),kKr.forEach(t),z1o=r(jwe," (SqueezeBERT model)"),jwe.forEach(t),W1o=i($),bu=n($,"LI",{});var Dwe=s(bu);Wse=n(Dwe,"STRONG",{});var SKr=s(Wse);Q1o=r(SKr,"swin"),SKr.forEach(t),H1o=r(Dwe," \u2014 "),Mq=n(Dwe,"A",{href:!0});var RKr=s(Mq);U1o=r(RKr,"SwinModel"),RKr.forEach(t),J1o=r(Dwe," (Swin model)"),Dwe.forEach(t),Y1o=i($),vu=n($,"LI",{});var Gwe=s(vu);Qse=n(Gwe,"STRONG",{});var PKr=s(Qse);K1o=r(PKr,"t5"),PKr.forEach(t),Z1o=r(Gwe," \u2014 "),Eq=n(Gwe,"A",{href:!0});var BKr=s(Eq);ebo=r(BKr,"T5Model"),BKr.forEach(t),obo=r(Gwe," (T5 model)"),Gwe.forEach(t),rbo=i($),Fu=n($,"LI",{});var Owe=s(Fu);Hse=n(Owe,"STRONG",{});var IKr=s(Hse);tbo=r(IKr,"tapas"),IKr.forEach(t),abo=r(Owe," \u2014 "),Cq=n(Owe,"A",{href:!0});var qKr=s(Cq);nbo=r(qKr,"TapasModel"),qKr.forEach(t),sbo=r(Owe," (TAPAS model)"),Owe.forEach(t),lbo=i($),Tu=n($,"LI",{});var Vwe=s(Tu);Use=n(Vwe,"STRONG",{});var NKr=s(Use);ibo=r(NKr,"transfo-xl"),NKr.forEach(t),dbo=r(Vwe," \u2014 "),wq=n(Vwe,"A",{href:!0});var jKr=s(wq);cbo=r(jKr,"TransfoXLModel"),jKr.forEach(t),fbo=r(Vwe," (Transformer-XL model)"),Vwe.forEach(t),mbo=i($),Mu=n($,"LI",{});var Xwe=s(Mu);Jse=n(Xwe,"STRONG",{});var DKr=s(Jse);gbo=r(DKr,"unispeech"),DKr.forEach(t),hbo=r(Xwe," \u2014 "),Aq=n(Xwe,"A",{href:!0});var GKr=s(Aq);pbo=r(GKr,"UniSpeechModel"),GKr.forEach(t),ubo=r(Xwe," (UniSpeech model)"),Xwe.forEach(t),_bo=i($),Eu=n($,"LI",{});var zwe=s(Eu);Yse=n(zwe,"STRONG",{});var OKr=s(Yse);bbo=r(OKr,"unispeech-sat"),OKr.forEach(t),vbo=r(zwe," \u2014 "),yq=n(zwe,"A",{href:!0});var VKr=s(yq);Fbo=r(VKr,"UniSpeechSatModel"),VKr.forEach(t),Tbo=r(zwe," (UniSpeechSat model)"),zwe.forEach(t),Mbo=i($),Cu=n($,"LI",{});var Wwe=s(Cu);Kse=n(Wwe,"STRONG",{});var XKr=s(Kse);Ebo=r(XKr,"van"),XKr.forEach(t),Cbo=r(Wwe," \u2014 "),Lq=n(Wwe,"A",{href:!0});var zKr=s(Lq);wbo=r(zKr,"VanModel"),zKr.forEach(t),Abo=r(Wwe," (VAN model)"),Wwe.forEach(t),ybo=i($),wu=n($,"LI",{});var Qwe=s(wu);Zse=n(Qwe,"STRONG",{});var WKr=s(Zse);Lbo=r(WKr,"vilt"),WKr.forEach(t),xbo=r(Qwe," \u2014 "),xq=n(Qwe,"A",{href:!0});var QKr=s(xq);$bo=r(QKr,"ViltModel"),QKr.forEach(t),kbo=r(Qwe," (ViLT model)"),Qwe.forEach(t),Sbo=i($),Au=n($,"LI",{});var Hwe=s(Au);ele=n(Hwe,"STRONG",{});var HKr=s(ele);Rbo=r(HKr,"vision-text-dual-encoder"),HKr.forEach(t),Pbo=r(Hwe," \u2014 "),$q=n(Hwe,"A",{href:!0});var UKr=s($q);Bbo=r(UKr,"VisionTextDualEncoderModel"),UKr.forEach(t),Ibo=r(Hwe," (VisionTextDualEncoder model)"),Hwe.forEach(t),qbo=i($),yu=n($,"LI",{});var Uwe=s(yu);ole=n(Uwe,"STRONG",{});var JKr=s(ole);Nbo=r(JKr,"visual_bert"),JKr.forEach(t),jbo=r(Uwe," \u2014 "),kq=n(Uwe,"A",{href:!0});var YKr=s(kq);Dbo=r(YKr,"VisualBertModel"),YKr.forEach(t),Gbo=r(Uwe," (VisualBert model)"),Uwe.forEach(t),Obo=i($),Lu=n($,"LI",{});var Jwe=s(Lu);rle=n(Jwe,"STRONG",{});var KKr=s(rle);Vbo=r(KKr,"vit"),KKr.forEach(t),Xbo=r(Jwe," \u2014 "),Sq=n(Jwe,"A",{href:!0});var ZKr=s(Sq);zbo=r(ZKr,"ViTModel"),ZKr.forEach(t),Wbo=r(Jwe," (ViT model)"),Jwe.forEach(t),Qbo=i($),xu=n($,"LI",{});var Ywe=s(xu);tle=n(Ywe,"STRONG",{});var eZr=s(tle);Hbo=r(eZr,"vit_mae"),eZr.forEach(t),Ubo=r(Ywe," \u2014 "),Rq=n(Ywe,"A",{href:!0});var oZr=s(Rq);Jbo=r(oZr,"ViTMAEModel"),oZr.forEach(t),Ybo=r(Ywe," (ViTMAE model)"),Ywe.forEach(t),Kbo=i($),$u=n($,"LI",{});var Kwe=s($u);ale=n(Kwe,"STRONG",{});var rZr=s(ale);Zbo=r(rZr,"wav2vec2"),rZr.forEach(t),evo=r(Kwe," \u2014 "),Pq=n(Kwe,"A",{href:!0});var tZr=s(Pq);ovo=r(tZr,"Wav2Vec2Model"),tZr.forEach(t),rvo=r(Kwe," (Wav2Vec2 model)"),Kwe.forEach(t),tvo=i($),ku=n($,"LI",{});var Zwe=s(ku);nle=n(Zwe,"STRONG",{});var aZr=s(nle);avo=r(aZr,"wav2vec2-conformer"),aZr.forEach(t),nvo=r(Zwe," \u2014 "),Bq=n(Zwe,"A",{href:!0});var nZr=s(Bq);svo=r(nZr,"Wav2Vec2ConformerModel"),nZr.forEach(t),lvo=r(Zwe," (Wav2Vec2-Conformer model)"),Zwe.forEach(t),ivo=i($),Su=n($,"LI",{});var eAe=s(Su);sle=n(eAe,"STRONG",{});var sZr=s(sle);dvo=r(sZr,"wavlm"),sZr.forEach(t),cvo=r(eAe," \u2014 "),Iq=n(eAe,"A",{href:!0});var lZr=s(Iq);fvo=r(lZr,"WavLMModel"),lZr.forEach(t),mvo=r(eAe," (WavLM model)"),eAe.forEach(t),gvo=i($),Ru=n($,"LI",{});var oAe=s(Ru);lle=n(oAe,"STRONG",{});var iZr=s(lle);hvo=r(iZr,"xglm"),iZr.forEach(t),pvo=r(oAe," \u2014 "),qq=n(oAe,"A",{href:!0});var dZr=s(qq);uvo=r(dZr,"XGLMModel"),dZr.forEach(t),_vo=r(oAe," (XGLM model)"),oAe.forEach(t),bvo=i($),Pu=n($,"LI",{});var rAe=s(Pu);ile=n(rAe,"STRONG",{});var cZr=s(ile);vvo=r(cZr,"xlm"),cZr.forEach(t),Fvo=r(rAe," \u2014 "),Nq=n(rAe,"A",{href:!0});var fZr=s(Nq);Tvo=r(fZr,"XLMModel"),fZr.forEach(t),Mvo=r(rAe," (XLM model)"),rAe.forEach(t),Evo=i($),Bu=n($,"LI",{});var tAe=s(Bu);dle=n(tAe,"STRONG",{});var mZr=s(dle);Cvo=r(mZr,"xlm-prophetnet"),mZr.forEach(t),wvo=r(tAe," \u2014 "),jq=n(tAe,"A",{href:!0});var gZr=s(jq);Avo=r(gZr,"XLMProphetNetModel"),gZr.forEach(t),yvo=r(tAe," (XLMProphetNet model)"),tAe.forEach(t),Lvo=i($),Iu=n($,"LI",{});var aAe=s(Iu);cle=n(aAe,"STRONG",{});var hZr=s(cle);xvo=r(hZr,"xlm-roberta"),hZr.forEach(t),$vo=r(aAe," \u2014 "),Dq=n(aAe,"A",{href:!0});var pZr=s(Dq);kvo=r(pZr,"XLMRobertaModel"),pZr.forEach(t),Svo=r(aAe," (XLM-RoBERTa model)"),aAe.forEach(t),Rvo=i($),qu=n($,"LI",{});var nAe=s(qu);fle=n(nAe,"STRONG",{});var uZr=s(fle);Pvo=r(uZr,"xlm-roberta-xl"),uZr.forEach(t),Bvo=r(nAe," \u2014 "),Gq=n(nAe,"A",{href:!0});var _Zr=s(Gq);Ivo=r(_Zr,"XLMRobertaXLModel"),_Zr.forEach(t),qvo=r(nAe," (XLM-RoBERTa-XL model)"),nAe.forEach(t),Nvo=i($),Nu=n($,"LI",{});var sAe=s(Nu);mle=n(sAe,"STRONG",{});var bZr=s(mle);jvo=r(bZr,"xlnet"),bZr.forEach(t),Dvo=r(sAe," \u2014 "),Oq=n(sAe,"A",{href:!0});var vZr=s(Oq);Gvo=r(vZr,"XLNetModel"),vZr.forEach(t),Ovo=r(sAe," (XLNet model)"),sAe.forEach(t),Vvo=i($),ju=n($,"LI",{});var lAe=s(ju);gle=n(lAe,"STRONG",{});var FZr=s(gle);Xvo=r(FZr,"yolos"),FZr.forEach(t),zvo=r(lAe," \u2014 "),Vq=n(lAe,"A",{href:!0});var TZr=s(Vq);Wvo=r(TZr,"YolosModel"),TZr.forEach(t),Qvo=r(lAe," (YOLOS model)"),lAe.forEach(t),Hvo=i($),Du=n($,"LI",{});var iAe=s(Du);hle=n(iAe,"STRONG",{});var MZr=s(hle);Uvo=r(MZr,"yoso"),MZr.forEach(t),Jvo=r(iAe," \u2014 "),Xq=n(iAe,"A",{href:!0});var EZr=s(Xq);Yvo=r(EZr,"YosoModel"),EZr.forEach(t),Kvo=r(iAe," (YOSO model)"),iAe.forEach(t),$.forEach(t),Zvo=i(oa),Gu=n(oa,"P",{});var dAe=s(Gu);eFo=r(dAe,"The model is set in evaluation mode by default using "),ple=n(dAe,"CODE",{});var CZr=s(ple);oFo=r(CZr,"model.eval()"),CZr.forEach(t),rFo=r(dAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=n(dAe,"CODE",{});var wZr=s(ule);tFo=r(wZr,"model.train()"),wZr.forEach(t),dAe.forEach(t),aFo=i(oa),T(Ou.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),DIe=i(f),yi=n(f,"H2",{class:!0});var XNe=s(yi);Vu=n(XNe,"A",{id:!0,class:!0,href:!0});var AZr=s(Vu);_le=n(AZr,"SPAN",{});var yZr=s(_le);T(NA.$$.fragment,yZr),yZr.forEach(t),AZr.forEach(t),nFo=i(XNe),ble=n(XNe,"SPAN",{});var LZr=s(ble);sFo=r(LZr,"AutoModelForPreTraining"),LZr.forEach(t),XNe.forEach(t),GIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(jA.$$.fragment,Gs),lFo=i(Gs),Li=n(Gs,"P",{});var xK=s(Li);iFo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zq=n(xK,"A",{href:!0});var xZr=s(zq);dFo=r(xZr,"from_pretrained()"),xZr.forEach(t),cFo=r(xK," class method or the "),Wq=n(xK,"A",{href:!0});var $Zr=s(Wq);fFo=r($Zr,"from_config()"),$Zr.forEach(t),mFo=r(xK,` class
method.`),xK.forEach(t),gFo=i(Gs),DA=n(Gs,"P",{});var zNe=s(DA);hFo=r(zNe,"This class cannot be instantiated directly using "),vle=n(zNe,"CODE",{});var kZr=s(vle);pFo=r(kZr,"__init__()"),kZr.forEach(t),uFo=r(zNe," (throws an error)."),zNe.forEach(t),_Fo=i(Gs),at=n(Gs,"DIV",{class:!0});var g3=s(at);T(GA.$$.fragment,g3),bFo=i(g3),Fle=n(g3,"P",{});var SZr=s(Fle);vFo=r(SZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SZr.forEach(t),FFo=i(g3),xi=n(g3,"P",{});var $K=s(xi);TFo=r($K,`Note:
Loading a model from its configuration file does `),Tle=n($K,"STRONG",{});var RZr=s(Tle);MFo=r(RZr,"not"),RZr.forEach(t),EFo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=n($K,"A",{href:!0});var PZr=s(Qq);CFo=r(PZr,"from_pretrained()"),PZr.forEach(t),wFo=r($K," to load the model weights."),$K.forEach(t),AFo=i(g3),T(Xu.$$.fragment,g3),g3.forEach(t),yFo=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(OA.$$.fragment,ra),LFo=i(ra),Mle=n(ra,"P",{});var BZr=s(Mle);xFo=r(BZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BZr.forEach(t),$Fo=i(ra),xa=n(ra,"P",{});var h3=s(xa);kFo=r(h3,"The model class to instantiate is selected based on the "),Ele=n(h3,"CODE",{});var IZr=s(Ele);SFo=r(IZr,"model_type"),IZr.forEach(t),RFo=r(h3,` property of the config object (either
passed as an argument or loaded from `),Cle=n(h3,"CODE",{});var qZr=s(Cle);PFo=r(qZr,"pretrained_model_name_or_path"),qZr.forEach(t),BFo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(h3,"CODE",{});var NZr=s(wle);IFo=r(NZr,"pretrained_model_name_or_path"),NZr.forEach(t),qFo=r(h3,":"),h3.forEach(t),NFo=i(ra),G=n(ra,"UL",{});var O=s(G);zu=n(O,"LI",{});var cAe=s(zu);Ale=n(cAe,"STRONG",{});var jZr=s(Ale);jFo=r(jZr,"albert"),jZr.forEach(t),DFo=r(cAe," \u2014 "),Hq=n(cAe,"A",{href:!0});var DZr=s(Hq);GFo=r(DZr,"AlbertForPreTraining"),DZr.forEach(t),OFo=r(cAe," (ALBERT model)"),cAe.forEach(t),VFo=i(O),Wu=n(O,"LI",{});var fAe=s(Wu);yle=n(fAe,"STRONG",{});var GZr=s(yle);XFo=r(GZr,"bart"),GZr.forEach(t),zFo=r(fAe," \u2014 "),Uq=n(fAe,"A",{href:!0});var OZr=s(Uq);WFo=r(OZr,"BartForConditionalGeneration"),OZr.forEach(t),QFo=r(fAe," (BART model)"),fAe.forEach(t),HFo=i(O),Qu=n(O,"LI",{});var mAe=s(Qu);Lle=n(mAe,"STRONG",{});var VZr=s(Lle);UFo=r(VZr,"bert"),VZr.forEach(t),JFo=r(mAe," \u2014 "),Jq=n(mAe,"A",{href:!0});var XZr=s(Jq);YFo=r(XZr,"BertForPreTraining"),XZr.forEach(t),KFo=r(mAe," (BERT model)"),mAe.forEach(t),ZFo=i(O),Hu=n(O,"LI",{});var gAe=s(Hu);xle=n(gAe,"STRONG",{});var zZr=s(xle);e6o=r(zZr,"big_bird"),zZr.forEach(t),o6o=r(gAe," \u2014 "),Yq=n(gAe,"A",{href:!0});var WZr=s(Yq);r6o=r(WZr,"BigBirdForPreTraining"),WZr.forEach(t),t6o=r(gAe," (BigBird model)"),gAe.forEach(t),a6o=i(O),Uu=n(O,"LI",{});var hAe=s(Uu);$le=n(hAe,"STRONG",{});var QZr=s($le);n6o=r(QZr,"camembert"),QZr.forEach(t),s6o=r(hAe," \u2014 "),Kq=n(hAe,"A",{href:!0});var HZr=s(Kq);l6o=r(HZr,"CamembertForMaskedLM"),HZr.forEach(t),i6o=r(hAe," (CamemBERT model)"),hAe.forEach(t),d6o=i(O),Ju=n(O,"LI",{});var pAe=s(Ju);kle=n(pAe,"STRONG",{});var UZr=s(kle);c6o=r(UZr,"ctrl"),UZr.forEach(t),f6o=r(pAe," \u2014 "),Zq=n(pAe,"A",{href:!0});var JZr=s(Zq);m6o=r(JZr,"CTRLLMHeadModel"),JZr.forEach(t),g6o=r(pAe," (CTRL model)"),pAe.forEach(t),h6o=i(O),Yu=n(O,"LI",{});var uAe=s(Yu);Sle=n(uAe,"STRONG",{});var YZr=s(Sle);p6o=r(YZr,"data2vec-text"),YZr.forEach(t),u6o=r(uAe," \u2014 "),eN=n(uAe,"A",{href:!0});var KZr=s(eN);_6o=r(KZr,"Data2VecTextForMaskedLM"),KZr.forEach(t),b6o=r(uAe," (Data2VecText model)"),uAe.forEach(t),v6o=i(O),Ku=n(O,"LI",{});var _Ae=s(Ku);Rle=n(_Ae,"STRONG",{});var ZZr=s(Rle);F6o=r(ZZr,"deberta"),ZZr.forEach(t),T6o=r(_Ae," \u2014 "),oN=n(_Ae,"A",{href:!0});var eet=s(oN);M6o=r(eet,"DebertaForMaskedLM"),eet.forEach(t),E6o=r(_Ae," (DeBERTa model)"),_Ae.forEach(t),C6o=i(O),Zu=n(O,"LI",{});var bAe=s(Zu);Ple=n(bAe,"STRONG",{});var oet=s(Ple);w6o=r(oet,"deberta-v2"),oet.forEach(t),A6o=r(bAe," \u2014 "),rN=n(bAe,"A",{href:!0});var ret=s(rN);y6o=r(ret,"DebertaV2ForMaskedLM"),ret.forEach(t),L6o=r(bAe," (DeBERTa-v2 model)"),bAe.forEach(t),x6o=i(O),e_=n(O,"LI",{});var vAe=s(e_);Ble=n(vAe,"STRONG",{});var tet=s(Ble);$6o=r(tet,"distilbert"),tet.forEach(t),k6o=r(vAe," \u2014 "),tN=n(vAe,"A",{href:!0});var aet=s(tN);S6o=r(aet,"DistilBertForMaskedLM"),aet.forEach(t),R6o=r(vAe," (DistilBERT model)"),vAe.forEach(t),P6o=i(O),o_=n(O,"LI",{});var FAe=s(o_);Ile=n(FAe,"STRONG",{});var net=s(Ile);B6o=r(net,"electra"),net.forEach(t),I6o=r(FAe," \u2014 "),aN=n(FAe,"A",{href:!0});var set=s(aN);q6o=r(set,"ElectraForPreTraining"),set.forEach(t),N6o=r(FAe," (ELECTRA model)"),FAe.forEach(t),j6o=i(O),r_=n(O,"LI",{});var TAe=s(r_);qle=n(TAe,"STRONG",{});var iet=s(qle);D6o=r(iet,"flaubert"),iet.forEach(t),G6o=r(TAe," \u2014 "),nN=n(TAe,"A",{href:!0});var det=s(nN);O6o=r(det,"FlaubertWithLMHeadModel"),det.forEach(t),V6o=r(TAe," (FlauBERT model)"),TAe.forEach(t),X6o=i(O),t_=n(O,"LI",{});var MAe=s(t_);Nle=n(MAe,"STRONG",{});var cet=s(Nle);z6o=r(cet,"flava"),cet.forEach(t),W6o=r(MAe," \u2014 "),sN=n(MAe,"A",{href:!0});var fet=s(sN);Q6o=r(fet,"FlavaForPreTraining"),fet.forEach(t),H6o=r(MAe," (Flava model)"),MAe.forEach(t),U6o=i(O),a_=n(O,"LI",{});var EAe=s(a_);jle=n(EAe,"STRONG",{});var met=s(jle);J6o=r(met,"fnet"),met.forEach(t),Y6o=r(EAe," \u2014 "),lN=n(EAe,"A",{href:!0});var get=s(lN);K6o=r(get,"FNetForPreTraining"),get.forEach(t),Z6o=r(EAe," (FNet model)"),EAe.forEach(t),e0o=i(O),n_=n(O,"LI",{});var CAe=s(n_);Dle=n(CAe,"STRONG",{});var het=s(Dle);o0o=r(het,"fsmt"),het.forEach(t),r0o=r(CAe," \u2014 "),iN=n(CAe,"A",{href:!0});var pet=s(iN);t0o=r(pet,"FSMTForConditionalGeneration"),pet.forEach(t),a0o=r(CAe," (FairSeq Machine-Translation model)"),CAe.forEach(t),n0o=i(O),s_=n(O,"LI",{});var wAe=s(s_);Gle=n(wAe,"STRONG",{});var uet=s(Gle);s0o=r(uet,"funnel"),uet.forEach(t),l0o=r(wAe," \u2014 "),dN=n(wAe,"A",{href:!0});var _et=s(dN);i0o=r(_et,"FunnelForPreTraining"),_et.forEach(t),d0o=r(wAe," (Funnel Transformer model)"),wAe.forEach(t),c0o=i(O),l_=n(O,"LI",{});var AAe=s(l_);Ole=n(AAe,"STRONG",{});var bet=s(Ole);f0o=r(bet,"gpt2"),bet.forEach(t),m0o=r(AAe," \u2014 "),cN=n(AAe,"A",{href:!0});var vet=s(cN);g0o=r(vet,"GPT2LMHeadModel"),vet.forEach(t),h0o=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),p0o=i(O),i_=n(O,"LI",{});var yAe=s(i_);Vle=n(yAe,"STRONG",{});var Fet=s(Vle);u0o=r(Fet,"ibert"),Fet.forEach(t),_0o=r(yAe," \u2014 "),fN=n(yAe,"A",{href:!0});var Tet=s(fN);b0o=r(Tet,"IBertForMaskedLM"),Tet.forEach(t),v0o=r(yAe," (I-BERT model)"),yAe.forEach(t),F0o=i(O),d_=n(O,"LI",{});var LAe=s(d_);Xle=n(LAe,"STRONG",{});var Met=s(Xle);T0o=r(Met,"layoutlm"),Met.forEach(t),M0o=r(LAe," \u2014 "),mN=n(LAe,"A",{href:!0});var Eet=s(mN);E0o=r(Eet,"LayoutLMForMaskedLM"),Eet.forEach(t),C0o=r(LAe," (LayoutLM model)"),LAe.forEach(t),w0o=i(O),c_=n(O,"LI",{});var xAe=s(c_);zle=n(xAe,"STRONG",{});var Cet=s(zle);A0o=r(Cet,"longformer"),Cet.forEach(t),y0o=r(xAe," \u2014 "),gN=n(xAe,"A",{href:!0});var wet=s(gN);L0o=r(wet,"LongformerForMaskedLM"),wet.forEach(t),x0o=r(xAe," (Longformer model)"),xAe.forEach(t),$0o=i(O),f_=n(O,"LI",{});var $Ae=s(f_);Wle=n($Ae,"STRONG",{});var Aet=s(Wle);k0o=r(Aet,"lxmert"),Aet.forEach(t),S0o=r($Ae," \u2014 "),hN=n($Ae,"A",{href:!0});var yet=s(hN);R0o=r(yet,"LxmertForPreTraining"),yet.forEach(t),P0o=r($Ae," (LXMERT model)"),$Ae.forEach(t),B0o=i(O),m_=n(O,"LI",{});var kAe=s(m_);Qle=n(kAe,"STRONG",{});var Let=s(Qle);I0o=r(Let,"megatron-bert"),Let.forEach(t),q0o=r(kAe," \u2014 "),pN=n(kAe,"A",{href:!0});var xet=s(pN);N0o=r(xet,"MegatronBertForPreTraining"),xet.forEach(t),j0o=r(kAe," (MegatronBert model)"),kAe.forEach(t),D0o=i(O),g_=n(O,"LI",{});var SAe=s(g_);Hle=n(SAe,"STRONG",{});var $et=s(Hle);G0o=r($et,"mobilebert"),$et.forEach(t),O0o=r(SAe," \u2014 "),uN=n(SAe,"A",{href:!0});var ket=s(uN);V0o=r(ket,"MobileBertForPreTraining"),ket.forEach(t),X0o=r(SAe," (MobileBERT model)"),SAe.forEach(t),z0o=i(O),h_=n(O,"LI",{});var RAe=s(h_);Ule=n(RAe,"STRONG",{});var Set=s(Ule);W0o=r(Set,"mpnet"),Set.forEach(t),Q0o=r(RAe," \u2014 "),_N=n(RAe,"A",{href:!0});var Ret=s(_N);H0o=r(Ret,"MPNetForMaskedLM"),Ret.forEach(t),U0o=r(RAe," (MPNet model)"),RAe.forEach(t),J0o=i(O),p_=n(O,"LI",{});var PAe=s(p_);Jle=n(PAe,"STRONG",{});var Pet=s(Jle);Y0o=r(Pet,"openai-gpt"),Pet.forEach(t),K0o=r(PAe," \u2014 "),bN=n(PAe,"A",{href:!0});var Bet=s(bN);Z0o=r(Bet,"OpenAIGPTLMHeadModel"),Bet.forEach(t),eTo=r(PAe," (OpenAI GPT model)"),PAe.forEach(t),oTo=i(O),u_=n(O,"LI",{});var BAe=s(u_);Yle=n(BAe,"STRONG",{});var Iet=s(Yle);rTo=r(Iet,"retribert"),Iet.forEach(t),tTo=r(BAe," \u2014 "),vN=n(BAe,"A",{href:!0});var qet=s(vN);aTo=r(qet,"RetriBertModel"),qet.forEach(t),nTo=r(BAe," (RetriBERT model)"),BAe.forEach(t),sTo=i(O),__=n(O,"LI",{});var IAe=s(__);Kle=n(IAe,"STRONG",{});var Net=s(Kle);lTo=r(Net,"roberta"),Net.forEach(t),iTo=r(IAe," \u2014 "),FN=n(IAe,"A",{href:!0});var jet=s(FN);dTo=r(jet,"RobertaForMaskedLM"),jet.forEach(t),cTo=r(IAe," (RoBERTa model)"),IAe.forEach(t),fTo=i(O),b_=n(O,"LI",{});var qAe=s(b_);Zle=n(qAe,"STRONG",{});var Det=s(Zle);mTo=r(Det,"squeezebert"),Det.forEach(t),gTo=r(qAe," \u2014 "),TN=n(qAe,"A",{href:!0});var Get=s(TN);hTo=r(Get,"SqueezeBertForMaskedLM"),Get.forEach(t),pTo=r(qAe," (SqueezeBERT model)"),qAe.forEach(t),uTo=i(O),v_=n(O,"LI",{});var NAe=s(v_);eie=n(NAe,"STRONG",{});var Oet=s(eie);_To=r(Oet,"t5"),Oet.forEach(t),bTo=r(NAe," \u2014 "),MN=n(NAe,"A",{href:!0});var Vet=s(MN);vTo=r(Vet,"T5ForConditionalGeneration"),Vet.forEach(t),FTo=r(NAe," (T5 model)"),NAe.forEach(t),TTo=i(O),F_=n(O,"LI",{});var jAe=s(F_);oie=n(jAe,"STRONG",{});var Xet=s(oie);MTo=r(Xet,"tapas"),Xet.forEach(t),ETo=r(jAe," \u2014 "),EN=n(jAe,"A",{href:!0});var zet=s(EN);CTo=r(zet,"TapasForMaskedLM"),zet.forEach(t),wTo=r(jAe," (TAPAS model)"),jAe.forEach(t),ATo=i(O),T_=n(O,"LI",{});var DAe=s(T_);rie=n(DAe,"STRONG",{});var Wet=s(rie);yTo=r(Wet,"transfo-xl"),Wet.forEach(t),LTo=r(DAe," \u2014 "),CN=n(DAe,"A",{href:!0});var Qet=s(CN);xTo=r(Qet,"TransfoXLLMHeadModel"),Qet.forEach(t),$To=r(DAe," (Transformer-XL model)"),DAe.forEach(t),kTo=i(O),M_=n(O,"LI",{});var GAe=s(M_);tie=n(GAe,"STRONG",{});var Het=s(tie);STo=r(Het,"unispeech"),Het.forEach(t),RTo=r(GAe," \u2014 "),wN=n(GAe,"A",{href:!0});var Uet=s(wN);PTo=r(Uet,"UniSpeechForPreTraining"),Uet.forEach(t),BTo=r(GAe," (UniSpeech model)"),GAe.forEach(t),ITo=i(O),E_=n(O,"LI",{});var OAe=s(E_);aie=n(OAe,"STRONG",{});var Jet=s(aie);qTo=r(Jet,"unispeech-sat"),Jet.forEach(t),NTo=r(OAe," \u2014 "),AN=n(OAe,"A",{href:!0});var Yet=s(AN);jTo=r(Yet,"UniSpeechSatForPreTraining"),Yet.forEach(t),DTo=r(OAe," (UniSpeechSat model)"),OAe.forEach(t),GTo=i(O),C_=n(O,"LI",{});var VAe=s(C_);nie=n(VAe,"STRONG",{});var Ket=s(nie);OTo=r(Ket,"visual_bert"),Ket.forEach(t),VTo=r(VAe," \u2014 "),yN=n(VAe,"A",{href:!0});var Zet=s(yN);XTo=r(Zet,"VisualBertForPreTraining"),Zet.forEach(t),zTo=r(VAe," (VisualBert model)"),VAe.forEach(t),WTo=i(O),w_=n(O,"LI",{});var XAe=s(w_);sie=n(XAe,"STRONG",{});var eot=s(sie);QTo=r(eot,"vit_mae"),eot.forEach(t),HTo=r(XAe," \u2014 "),LN=n(XAe,"A",{href:!0});var oot=s(LN);UTo=r(oot,"ViTMAEForPreTraining"),oot.forEach(t),JTo=r(XAe," (ViTMAE model)"),XAe.forEach(t),YTo=i(O),A_=n(O,"LI",{});var zAe=s(A_);lie=n(zAe,"STRONG",{});var rot=s(lie);KTo=r(rot,"wav2vec2"),rot.forEach(t),ZTo=r(zAe," \u2014 "),xN=n(zAe,"A",{href:!0});var tot=s(xN);e7o=r(tot,"Wav2Vec2ForPreTraining"),tot.forEach(t),o7o=r(zAe," (Wav2Vec2 model)"),zAe.forEach(t),r7o=i(O),y_=n(O,"LI",{});var WAe=s(y_);iie=n(WAe,"STRONG",{});var aot=s(iie);t7o=r(aot,"wav2vec2-conformer"),aot.forEach(t),a7o=r(WAe," \u2014 "),$N=n(WAe,"A",{href:!0});var not=s($N);n7o=r(not,"Wav2Vec2ConformerForPreTraining"),not.forEach(t),s7o=r(WAe," (Wav2Vec2-Conformer model)"),WAe.forEach(t),l7o=i(O),L_=n(O,"LI",{});var QAe=s(L_);die=n(QAe,"STRONG",{});var sot=s(die);i7o=r(sot,"xlm"),sot.forEach(t),d7o=r(QAe," \u2014 "),kN=n(QAe,"A",{href:!0});var lot=s(kN);c7o=r(lot,"XLMWithLMHeadModel"),lot.forEach(t),f7o=r(QAe," (XLM model)"),QAe.forEach(t),m7o=i(O),x_=n(O,"LI",{});var HAe=s(x_);cie=n(HAe,"STRONG",{});var iot=s(cie);g7o=r(iot,"xlm-roberta"),iot.forEach(t),h7o=r(HAe," \u2014 "),SN=n(HAe,"A",{href:!0});var dot=s(SN);p7o=r(dot,"XLMRobertaForMaskedLM"),dot.forEach(t),u7o=r(HAe," (XLM-RoBERTa model)"),HAe.forEach(t),_7o=i(O),$_=n(O,"LI",{});var UAe=s($_);fie=n(UAe,"STRONG",{});var cot=s(fie);b7o=r(cot,"xlm-roberta-xl"),cot.forEach(t),v7o=r(UAe," \u2014 "),RN=n(UAe,"A",{href:!0});var fot=s(RN);F7o=r(fot,"XLMRobertaXLForMaskedLM"),fot.forEach(t),T7o=r(UAe," (XLM-RoBERTa-XL model)"),UAe.forEach(t),M7o=i(O),k_=n(O,"LI",{});var JAe=s(k_);mie=n(JAe,"STRONG",{});var mot=s(mie);E7o=r(mot,"xlnet"),mot.forEach(t),C7o=r(JAe," \u2014 "),PN=n(JAe,"A",{href:!0});var got=s(PN);w7o=r(got,"XLNetLMHeadModel"),got.forEach(t),A7o=r(JAe," (XLNet model)"),JAe.forEach(t),O.forEach(t),y7o=i(ra),S_=n(ra,"P",{});var YAe=s(S_);L7o=r(YAe,"The model is set in evaluation mode by default using "),gie=n(YAe,"CODE",{});var hot=s(gie);x7o=r(hot,"model.eval()"),hot.forEach(t),$7o=r(YAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(YAe,"CODE",{});var pot=s(hie);k7o=r(pot,"model.train()"),pot.forEach(t),YAe.forEach(t),S7o=i(ra),T(R_.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),OIe=i(f),$i=n(f,"H2",{class:!0});var WNe=s($i);P_=n(WNe,"A",{id:!0,class:!0,href:!0});var uot=s(P_);pie=n(uot,"SPAN",{});var _ot=s(pie);T(VA.$$.fragment,_ot),_ot.forEach(t),uot.forEach(t),R7o=i(WNe),uie=n(WNe,"SPAN",{});var bot=s(uie);P7o=r(bot,"AutoModelForCausalLM"),bot.forEach(t),WNe.forEach(t),VIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(XA.$$.fragment,Os),B7o=i(Os),ki=n(Os,"P",{});var kK=s(ki);I7o=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BN=n(kK,"A",{href:!0});var vot=s(BN);q7o=r(vot,"from_pretrained()"),vot.forEach(t),N7o=r(kK," class method or the "),IN=n(kK,"A",{href:!0});var Fot=s(IN);j7o=r(Fot,"from_config()"),Fot.forEach(t),D7o=r(kK,` class
method.`),kK.forEach(t),G7o=i(Os),zA=n(Os,"P",{});var QNe=s(zA);O7o=r(QNe,"This class cannot be instantiated directly using "),_ie=n(QNe,"CODE",{});var Tot=s(_ie);V7o=r(Tot,"__init__()"),Tot.forEach(t),X7o=r(QNe," (throws an error)."),QNe.forEach(t),z7o=i(Os),nt=n(Os,"DIV",{class:!0});var p3=s(nt);T(WA.$$.fragment,p3),W7o=i(p3),bie=n(p3,"P",{});var Mot=s(bie);Q7o=r(Mot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mot.forEach(t),H7o=i(p3),Si=n(p3,"P",{});var SK=s(Si);U7o=r(SK,`Note:
Loading a model from its configuration file does `),vie=n(SK,"STRONG",{});var Eot=s(vie);J7o=r(Eot,"not"),Eot.forEach(t),Y7o=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=n(SK,"A",{href:!0});var Cot=s(qN);K7o=r(Cot,"from_pretrained()"),Cot.forEach(t),Z7o=r(SK," to load the model weights."),SK.forEach(t),eMo=i(p3),T(B_.$$.fragment,p3),p3.forEach(t),oMo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(QA.$$.fragment,ta),rMo=i(ta),Fie=n(ta,"P",{});var wot=s(Fie);tMo=r(wot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wot.forEach(t),aMo=i(ta),$a=n(ta,"P",{});var u3=s($a);nMo=r(u3,"The model class to instantiate is selected based on the "),Tie=n(u3,"CODE",{});var Aot=s(Tie);sMo=r(Aot,"model_type"),Aot.forEach(t),lMo=r(u3,` property of the config object (either
passed as an argument or loaded from `),Mie=n(u3,"CODE",{});var yot=s(Mie);iMo=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),dMo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(u3,"CODE",{});var Lot=s(Eie);cMo=r(Lot,"pretrained_model_name_or_path"),Lot.forEach(t),fMo=r(u3,":"),u3.forEach(t),mMo=i(ta),z=n(ta,"UL",{});var Q=s(z);I_=n(Q,"LI",{});var KAe=s(I_);Cie=n(KAe,"STRONG",{});var xot=s(Cie);gMo=r(xot,"bart"),xot.forEach(t),hMo=r(KAe," \u2014 "),NN=n(KAe,"A",{href:!0});var $ot=s(NN);pMo=r($ot,"BartForCausalLM"),$ot.forEach(t),uMo=r(KAe," (BART model)"),KAe.forEach(t),_Mo=i(Q),q_=n(Q,"LI",{});var ZAe=s(q_);wie=n(ZAe,"STRONG",{});var kot=s(wie);bMo=r(kot,"bert"),kot.forEach(t),vMo=r(ZAe," \u2014 "),jN=n(ZAe,"A",{href:!0});var Sot=s(jN);FMo=r(Sot,"BertLMHeadModel"),Sot.forEach(t),TMo=r(ZAe," (BERT model)"),ZAe.forEach(t),MMo=i(Q),N_=n(Q,"LI",{});var eye=s(N_);Aie=n(eye,"STRONG",{});var Rot=s(Aie);EMo=r(Rot,"bert-generation"),Rot.forEach(t),CMo=r(eye," \u2014 "),DN=n(eye,"A",{href:!0});var Pot=s(DN);wMo=r(Pot,"BertGenerationDecoder"),Pot.forEach(t),AMo=r(eye," (Bert Generation model)"),eye.forEach(t),yMo=i(Q),j_=n(Q,"LI",{});var oye=s(j_);yie=n(oye,"STRONG",{});var Bot=s(yie);LMo=r(Bot,"big_bird"),Bot.forEach(t),xMo=r(oye," \u2014 "),GN=n(oye,"A",{href:!0});var Iot=s(GN);$Mo=r(Iot,"BigBirdForCausalLM"),Iot.forEach(t),kMo=r(oye," (BigBird model)"),oye.forEach(t),SMo=i(Q),D_=n(Q,"LI",{});var rye=s(D_);Lie=n(rye,"STRONG",{});var qot=s(Lie);RMo=r(qot,"bigbird_pegasus"),qot.forEach(t),PMo=r(rye," \u2014 "),ON=n(rye,"A",{href:!0});var Not=s(ON);BMo=r(Not,"BigBirdPegasusForCausalLM"),Not.forEach(t),IMo=r(rye," (BigBirdPegasus model)"),rye.forEach(t),qMo=i(Q),G_=n(Q,"LI",{});var tye=s(G_);xie=n(tye,"STRONG",{});var jot=s(xie);NMo=r(jot,"blenderbot"),jot.forEach(t),jMo=r(tye," \u2014 "),VN=n(tye,"A",{href:!0});var Dot=s(VN);DMo=r(Dot,"BlenderbotForCausalLM"),Dot.forEach(t),GMo=r(tye," (Blenderbot model)"),tye.forEach(t),OMo=i(Q),O_=n(Q,"LI",{});var aye=s(O_);$ie=n(aye,"STRONG",{});var Got=s($ie);VMo=r(Got,"blenderbot-small"),Got.forEach(t),XMo=r(aye," \u2014 "),XN=n(aye,"A",{href:!0});var Oot=s(XN);zMo=r(Oot,"BlenderbotSmallForCausalLM"),Oot.forEach(t),WMo=r(aye," (BlenderbotSmall model)"),aye.forEach(t),QMo=i(Q),V_=n(Q,"LI",{});var nye=s(V_);kie=n(nye,"STRONG",{});var Vot=s(kie);HMo=r(Vot,"camembert"),Vot.forEach(t),UMo=r(nye," \u2014 "),zN=n(nye,"A",{href:!0});var Xot=s(zN);JMo=r(Xot,"CamembertForCausalLM"),Xot.forEach(t),YMo=r(nye," (CamemBERT model)"),nye.forEach(t),KMo=i(Q),X_=n(Q,"LI",{});var sye=s(X_);Sie=n(sye,"STRONG",{});var zot=s(Sie);ZMo=r(zot,"ctrl"),zot.forEach(t),e4o=r(sye," \u2014 "),WN=n(sye,"A",{href:!0});var Wot=s(WN);o4o=r(Wot,"CTRLLMHeadModel"),Wot.forEach(t),r4o=r(sye," (CTRL model)"),sye.forEach(t),t4o=i(Q),z_=n(Q,"LI",{});var lye=s(z_);Rie=n(lye,"STRONG",{});var Qot=s(Rie);a4o=r(Qot,"data2vec-text"),Qot.forEach(t),n4o=r(lye," \u2014 "),QN=n(lye,"A",{href:!0});var Hot=s(QN);s4o=r(Hot,"Data2VecTextForCausalLM"),Hot.forEach(t),l4o=r(lye," (Data2VecText model)"),lye.forEach(t),i4o=i(Q),W_=n(Q,"LI",{});var iye=s(W_);Pie=n(iye,"STRONG",{});var Uot=s(Pie);d4o=r(Uot,"electra"),Uot.forEach(t),c4o=r(iye," \u2014 "),HN=n(iye,"A",{href:!0});var Jot=s(HN);f4o=r(Jot,"ElectraForCausalLM"),Jot.forEach(t),m4o=r(iye," (ELECTRA model)"),iye.forEach(t),g4o=i(Q),Q_=n(Q,"LI",{});var dye=s(Q_);Bie=n(dye,"STRONG",{});var Yot=s(Bie);h4o=r(Yot,"gpt2"),Yot.forEach(t),p4o=r(dye," \u2014 "),UN=n(dye,"A",{href:!0});var Kot=s(UN);u4o=r(Kot,"GPT2LMHeadModel"),Kot.forEach(t),_4o=r(dye," (OpenAI GPT-2 model)"),dye.forEach(t),b4o=i(Q),H_=n(Q,"LI",{});var cye=s(H_);Iie=n(cye,"STRONG",{});var Zot=s(Iie);v4o=r(Zot,"gpt_neo"),Zot.forEach(t),F4o=r(cye," \u2014 "),JN=n(cye,"A",{href:!0});var ert=s(JN);T4o=r(ert,"GPTNeoForCausalLM"),ert.forEach(t),M4o=r(cye," (GPT Neo model)"),cye.forEach(t),E4o=i(Q),U_=n(Q,"LI",{});var fye=s(U_);qie=n(fye,"STRONG",{});var ort=s(qie);C4o=r(ort,"gptj"),ort.forEach(t),w4o=r(fye," \u2014 "),YN=n(fye,"A",{href:!0});var rrt=s(YN);A4o=r(rrt,"GPTJForCausalLM"),rrt.forEach(t),y4o=r(fye," (GPT-J model)"),fye.forEach(t),L4o=i(Q),J_=n(Q,"LI",{});var mye=s(J_);Nie=n(mye,"STRONG",{});var trt=s(Nie);x4o=r(trt,"marian"),trt.forEach(t),$4o=r(mye," \u2014 "),KN=n(mye,"A",{href:!0});var art=s(KN);k4o=r(art,"MarianForCausalLM"),art.forEach(t),S4o=r(mye," (Marian model)"),mye.forEach(t),R4o=i(Q),Y_=n(Q,"LI",{});var gye=s(Y_);jie=n(gye,"STRONG",{});var nrt=s(jie);P4o=r(nrt,"mbart"),nrt.forEach(t),B4o=r(gye," \u2014 "),ZN=n(gye,"A",{href:!0});var srt=s(ZN);I4o=r(srt,"MBartForCausalLM"),srt.forEach(t),q4o=r(gye," (mBART model)"),gye.forEach(t),N4o=i(Q),K_=n(Q,"LI",{});var hye=s(K_);Die=n(hye,"STRONG",{});var lrt=s(Die);j4o=r(lrt,"megatron-bert"),lrt.forEach(t),D4o=r(hye," \u2014 "),ej=n(hye,"A",{href:!0});var irt=s(ej);G4o=r(irt,"MegatronBertForCausalLM"),irt.forEach(t),O4o=r(hye," (MegatronBert model)"),hye.forEach(t),V4o=i(Q),Z_=n(Q,"LI",{});var pye=s(Z_);Gie=n(pye,"STRONG",{});var drt=s(Gie);X4o=r(drt,"openai-gpt"),drt.forEach(t),z4o=r(pye," \u2014 "),oj=n(pye,"A",{href:!0});var crt=s(oj);W4o=r(crt,"OpenAIGPTLMHeadModel"),crt.forEach(t),Q4o=r(pye," (OpenAI GPT model)"),pye.forEach(t),H4o=i(Q),e2=n(Q,"LI",{});var uye=s(e2);Oie=n(uye,"STRONG",{});var frt=s(Oie);U4o=r(frt,"opt"),frt.forEach(t),J4o=r(uye," \u2014 "),rj=n(uye,"A",{href:!0});var mrt=s(rj);Y4o=r(mrt,"OPTForCausalLM"),mrt.forEach(t),K4o=r(uye," (OPT model)"),uye.forEach(t),Z4o=i(Q),o2=n(Q,"LI",{});var _ye=s(o2);Vie=n(_ye,"STRONG",{});var grt=s(Vie);eEo=r(grt,"pegasus"),grt.forEach(t),oEo=r(_ye," \u2014 "),tj=n(_ye,"A",{href:!0});var hrt=s(tj);rEo=r(hrt,"PegasusForCausalLM"),hrt.forEach(t),tEo=r(_ye," (Pegasus model)"),_ye.forEach(t),aEo=i(Q),r2=n(Q,"LI",{});var bye=s(r2);Xie=n(bye,"STRONG",{});var prt=s(Xie);nEo=r(prt,"plbart"),prt.forEach(t),sEo=r(bye," \u2014 "),aj=n(bye,"A",{href:!0});var urt=s(aj);lEo=r(urt,"PLBartForCausalLM"),urt.forEach(t),iEo=r(bye," (PLBart model)"),bye.forEach(t),dEo=i(Q),t2=n(Q,"LI",{});var vye=s(t2);zie=n(vye,"STRONG",{});var _rt=s(zie);cEo=r(_rt,"prophetnet"),_rt.forEach(t),fEo=r(vye," \u2014 "),nj=n(vye,"A",{href:!0});var brt=s(nj);mEo=r(brt,"ProphetNetForCausalLM"),brt.forEach(t),gEo=r(vye," (ProphetNet model)"),vye.forEach(t),hEo=i(Q),a2=n(Q,"LI",{});var Fye=s(a2);Wie=n(Fye,"STRONG",{});var vrt=s(Wie);pEo=r(vrt,"qdqbert"),vrt.forEach(t),uEo=r(Fye," \u2014 "),sj=n(Fye,"A",{href:!0});var Frt=s(sj);_Eo=r(Frt,"QDQBertLMHeadModel"),Frt.forEach(t),bEo=r(Fye," (QDQBert model)"),Fye.forEach(t),vEo=i(Q),n2=n(Q,"LI",{});var Tye=s(n2);Qie=n(Tye,"STRONG",{});var Trt=s(Qie);FEo=r(Trt,"reformer"),Trt.forEach(t),TEo=r(Tye," \u2014 "),lj=n(Tye,"A",{href:!0});var Mrt=s(lj);MEo=r(Mrt,"ReformerModelWithLMHead"),Mrt.forEach(t),EEo=r(Tye," (Reformer model)"),Tye.forEach(t),CEo=i(Q),s2=n(Q,"LI",{});var Mye=s(s2);Hie=n(Mye,"STRONG",{});var Ert=s(Hie);wEo=r(Ert,"rembert"),Ert.forEach(t),AEo=r(Mye," \u2014 "),ij=n(Mye,"A",{href:!0});var Crt=s(ij);yEo=r(Crt,"RemBertForCausalLM"),Crt.forEach(t),LEo=r(Mye," (RemBERT model)"),Mye.forEach(t),xEo=i(Q),l2=n(Q,"LI",{});var Eye=s(l2);Uie=n(Eye,"STRONG",{});var wrt=s(Uie);$Eo=r(wrt,"roberta"),wrt.forEach(t),kEo=r(Eye," \u2014 "),dj=n(Eye,"A",{href:!0});var Art=s(dj);SEo=r(Art,"RobertaForCausalLM"),Art.forEach(t),REo=r(Eye," (RoBERTa model)"),Eye.forEach(t),PEo=i(Q),i2=n(Q,"LI",{});var Cye=s(i2);Jie=n(Cye,"STRONG",{});var yrt=s(Jie);BEo=r(yrt,"roformer"),yrt.forEach(t),IEo=r(Cye," \u2014 "),cj=n(Cye,"A",{href:!0});var Lrt=s(cj);qEo=r(Lrt,"RoFormerForCausalLM"),Lrt.forEach(t),NEo=r(Cye," (RoFormer model)"),Cye.forEach(t),jEo=i(Q),d2=n(Q,"LI",{});var wye=s(d2);Yie=n(wye,"STRONG",{});var xrt=s(Yie);DEo=r(xrt,"speech_to_text_2"),xrt.forEach(t),GEo=r(wye," \u2014 "),fj=n(wye,"A",{href:!0});var $rt=s(fj);OEo=r($rt,"Speech2Text2ForCausalLM"),$rt.forEach(t),VEo=r(wye," (Speech2Text2 model)"),wye.forEach(t),XEo=i(Q),c2=n(Q,"LI",{});var Aye=s(c2);Kie=n(Aye,"STRONG",{});var krt=s(Kie);zEo=r(krt,"transfo-xl"),krt.forEach(t),WEo=r(Aye," \u2014 "),mj=n(Aye,"A",{href:!0});var Srt=s(mj);QEo=r(Srt,"TransfoXLLMHeadModel"),Srt.forEach(t),HEo=r(Aye," (Transformer-XL model)"),Aye.forEach(t),UEo=i(Q),f2=n(Q,"LI",{});var yye=s(f2);Zie=n(yye,"STRONG",{});var Rrt=s(Zie);JEo=r(Rrt,"trocr"),Rrt.forEach(t),YEo=r(yye," \u2014 "),gj=n(yye,"A",{href:!0});var Prt=s(gj);KEo=r(Prt,"TrOCRForCausalLM"),Prt.forEach(t),ZEo=r(yye," (TrOCR model)"),yye.forEach(t),eCo=i(Q),m2=n(Q,"LI",{});var Lye=s(m2);ede=n(Lye,"STRONG",{});var Brt=s(ede);oCo=r(Brt,"xglm"),Brt.forEach(t),rCo=r(Lye," \u2014 "),hj=n(Lye,"A",{href:!0});var Irt=s(hj);tCo=r(Irt,"XGLMForCausalLM"),Irt.forEach(t),aCo=r(Lye," (XGLM model)"),Lye.forEach(t),nCo=i(Q),g2=n(Q,"LI",{});var xye=s(g2);ode=n(xye,"STRONG",{});var qrt=s(ode);sCo=r(qrt,"xlm"),qrt.forEach(t),lCo=r(xye," \u2014 "),pj=n(xye,"A",{href:!0});var Nrt=s(pj);iCo=r(Nrt,"XLMWithLMHeadModel"),Nrt.forEach(t),dCo=r(xye," (XLM model)"),xye.forEach(t),cCo=i(Q),h2=n(Q,"LI",{});var $ye=s(h2);rde=n($ye,"STRONG",{});var jrt=s(rde);fCo=r(jrt,"xlm-prophetnet"),jrt.forEach(t),mCo=r($ye," \u2014 "),uj=n($ye,"A",{href:!0});var Drt=s(uj);gCo=r(Drt,"XLMProphetNetForCausalLM"),Drt.forEach(t),hCo=r($ye," (XLMProphetNet model)"),$ye.forEach(t),pCo=i(Q),p2=n(Q,"LI",{});var kye=s(p2);tde=n(kye,"STRONG",{});var Grt=s(tde);uCo=r(Grt,"xlm-roberta"),Grt.forEach(t),_Co=r(kye," \u2014 "),_j=n(kye,"A",{href:!0});var Ort=s(_j);bCo=r(Ort,"XLMRobertaForCausalLM"),Ort.forEach(t),vCo=r(kye," (XLM-RoBERTa model)"),kye.forEach(t),FCo=i(Q),u2=n(Q,"LI",{});var Sye=s(u2);ade=n(Sye,"STRONG",{});var Vrt=s(ade);TCo=r(Vrt,"xlm-roberta-xl"),Vrt.forEach(t),MCo=r(Sye," \u2014 "),bj=n(Sye,"A",{href:!0});var Xrt=s(bj);ECo=r(Xrt,"XLMRobertaXLForCausalLM"),Xrt.forEach(t),CCo=r(Sye," (XLM-RoBERTa-XL model)"),Sye.forEach(t),wCo=i(Q),_2=n(Q,"LI",{});var Rye=s(_2);nde=n(Rye,"STRONG",{});var zrt=s(nde);ACo=r(zrt,"xlnet"),zrt.forEach(t),yCo=r(Rye," \u2014 "),vj=n(Rye,"A",{href:!0});var Wrt=s(vj);LCo=r(Wrt,"XLNetLMHeadModel"),Wrt.forEach(t),xCo=r(Rye," (XLNet model)"),Rye.forEach(t),Q.forEach(t),$Co=i(ta),b2=n(ta,"P",{});var Pye=s(b2);kCo=r(Pye,"The model is set in evaluation mode by default using "),sde=n(Pye,"CODE",{});var Qrt=s(sde);SCo=r(Qrt,"model.eval()"),Qrt.forEach(t),RCo=r(Pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=n(Pye,"CODE",{});var Hrt=s(lde);PCo=r(Hrt,"model.train()"),Hrt.forEach(t),Pye.forEach(t),BCo=i(ta),T(v2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),XIe=i(f),Ri=n(f,"H2",{class:!0});var HNe=s(Ri);F2=n(HNe,"A",{id:!0,class:!0,href:!0});var Urt=s(F2);ide=n(Urt,"SPAN",{});var Jrt=s(ide);T(HA.$$.fragment,Jrt),Jrt.forEach(t),Urt.forEach(t),ICo=i(HNe),dde=n(HNe,"SPAN",{});var Yrt=s(dde);qCo=r(Yrt,"AutoModelForMaskedLM"),Yrt.forEach(t),HNe.forEach(t),zIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(UA.$$.fragment,Vs),NCo=i(Vs),Pi=n(Vs,"P",{});var RK=s(Pi);jCo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fj=n(RK,"A",{href:!0});var Krt=s(Fj);DCo=r(Krt,"from_pretrained()"),Krt.forEach(t),GCo=r(RK," class method or the "),Tj=n(RK,"A",{href:!0});var Zrt=s(Tj);OCo=r(Zrt,"from_config()"),Zrt.forEach(t),VCo=r(RK,` class
method.`),RK.forEach(t),XCo=i(Vs),JA=n(Vs,"P",{});var UNe=s(JA);zCo=r(UNe,"This class cannot be instantiated directly using "),cde=n(UNe,"CODE",{});var ett=s(cde);WCo=r(ett,"__init__()"),ett.forEach(t),QCo=r(UNe," (throws an error)."),UNe.forEach(t),HCo=i(Vs),st=n(Vs,"DIV",{class:!0});var _3=s(st);T(YA.$$.fragment,_3),UCo=i(_3),fde=n(_3,"P",{});var ott=s(fde);JCo=r(ott,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ott.forEach(t),YCo=i(_3),Bi=n(_3,"P",{});var PK=s(Bi);KCo=r(PK,`Note:
Loading a model from its configuration file does `),mde=n(PK,"STRONG",{});var rtt=s(mde);ZCo=r(rtt,"not"),rtt.forEach(t),e5o=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(PK,"A",{href:!0});var ttt=s(Mj);o5o=r(ttt,"from_pretrained()"),ttt.forEach(t),r5o=r(PK," to load the model weights."),PK.forEach(t),t5o=i(_3),T(T2.$$.fragment,_3),_3.forEach(t),a5o=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(KA.$$.fragment,aa),n5o=i(aa),gde=n(aa,"P",{});var att=s(gde);s5o=r(att,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),att.forEach(t),l5o=i(aa),ka=n(aa,"P",{});var b3=s(ka);i5o=r(b3,"The model class to instantiate is selected based on the "),hde=n(b3,"CODE",{});var ntt=s(hde);d5o=r(ntt,"model_type"),ntt.forEach(t),c5o=r(b3,` property of the config object (either
passed as an argument or loaded from `),pde=n(b3,"CODE",{});var stt=s(pde);f5o=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),m5o=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=n(b3,"CODE",{});var ltt=s(ude);g5o=r(ltt,"pretrained_model_name_or_path"),ltt.forEach(t),h5o=r(b3,":"),b3.forEach(t),p5o=i(aa),W=n(aa,"UL",{});var H=s(W);M2=n(H,"LI",{});var Bye=s(M2);_de=n(Bye,"STRONG",{});var itt=s(_de);u5o=r(itt,"albert"),itt.forEach(t),_5o=r(Bye," \u2014 "),Ej=n(Bye,"A",{href:!0});var dtt=s(Ej);b5o=r(dtt,"AlbertForMaskedLM"),dtt.forEach(t),v5o=r(Bye," (ALBERT model)"),Bye.forEach(t),F5o=i(H),E2=n(H,"LI",{});var Iye=s(E2);bde=n(Iye,"STRONG",{});var ctt=s(bde);T5o=r(ctt,"bart"),ctt.forEach(t),M5o=r(Iye," \u2014 "),Cj=n(Iye,"A",{href:!0});var ftt=s(Cj);E5o=r(ftt,"BartForConditionalGeneration"),ftt.forEach(t),C5o=r(Iye," (BART model)"),Iye.forEach(t),w5o=i(H),C2=n(H,"LI",{});var qye=s(C2);vde=n(qye,"STRONG",{});var mtt=s(vde);A5o=r(mtt,"bert"),mtt.forEach(t),y5o=r(qye," \u2014 "),wj=n(qye,"A",{href:!0});var gtt=s(wj);L5o=r(gtt,"BertForMaskedLM"),gtt.forEach(t),x5o=r(qye," (BERT model)"),qye.forEach(t),$5o=i(H),w2=n(H,"LI",{});var Nye=s(w2);Fde=n(Nye,"STRONG",{});var htt=s(Fde);k5o=r(htt,"big_bird"),htt.forEach(t),S5o=r(Nye," \u2014 "),Aj=n(Nye,"A",{href:!0});var ptt=s(Aj);R5o=r(ptt,"BigBirdForMaskedLM"),ptt.forEach(t),P5o=r(Nye," (BigBird model)"),Nye.forEach(t),B5o=i(H),A2=n(H,"LI",{});var jye=s(A2);Tde=n(jye,"STRONG",{});var utt=s(Tde);I5o=r(utt,"camembert"),utt.forEach(t),q5o=r(jye," \u2014 "),yj=n(jye,"A",{href:!0});var _tt=s(yj);N5o=r(_tt,"CamembertForMaskedLM"),_tt.forEach(t),j5o=r(jye," (CamemBERT model)"),jye.forEach(t),D5o=i(H),y2=n(H,"LI",{});var Dye=s(y2);Mde=n(Dye,"STRONG",{});var btt=s(Mde);G5o=r(btt,"convbert"),btt.forEach(t),O5o=r(Dye," \u2014 "),Lj=n(Dye,"A",{href:!0});var vtt=s(Lj);V5o=r(vtt,"ConvBertForMaskedLM"),vtt.forEach(t),X5o=r(Dye," (ConvBERT model)"),Dye.forEach(t),z5o=i(H),L2=n(H,"LI",{});var Gye=s(L2);Ede=n(Gye,"STRONG",{});var Ftt=s(Ede);W5o=r(Ftt,"data2vec-text"),Ftt.forEach(t),Q5o=r(Gye," \u2014 "),xj=n(Gye,"A",{href:!0});var Ttt=s(xj);H5o=r(Ttt,"Data2VecTextForMaskedLM"),Ttt.forEach(t),U5o=r(Gye," (Data2VecText model)"),Gye.forEach(t),J5o=i(H),x2=n(H,"LI",{});var Oye=s(x2);Cde=n(Oye,"STRONG",{});var Mtt=s(Cde);Y5o=r(Mtt,"deberta"),Mtt.forEach(t),K5o=r(Oye," \u2014 "),$j=n(Oye,"A",{href:!0});var Ett=s($j);Z5o=r(Ett,"DebertaForMaskedLM"),Ett.forEach(t),e3o=r(Oye," (DeBERTa model)"),Oye.forEach(t),o3o=i(H),$2=n(H,"LI",{});var Vye=s($2);wde=n(Vye,"STRONG",{});var Ctt=s(wde);r3o=r(Ctt,"deberta-v2"),Ctt.forEach(t),t3o=r(Vye," \u2014 "),kj=n(Vye,"A",{href:!0});var wtt=s(kj);a3o=r(wtt,"DebertaV2ForMaskedLM"),wtt.forEach(t),n3o=r(Vye," (DeBERTa-v2 model)"),Vye.forEach(t),s3o=i(H),k2=n(H,"LI",{});var Xye=s(k2);Ade=n(Xye,"STRONG",{});var Att=s(Ade);l3o=r(Att,"distilbert"),Att.forEach(t),i3o=r(Xye," \u2014 "),Sj=n(Xye,"A",{href:!0});var ytt=s(Sj);d3o=r(ytt,"DistilBertForMaskedLM"),ytt.forEach(t),c3o=r(Xye," (DistilBERT model)"),Xye.forEach(t),f3o=i(H),S2=n(H,"LI",{});var zye=s(S2);yde=n(zye,"STRONG",{});var Ltt=s(yde);m3o=r(Ltt,"electra"),Ltt.forEach(t),g3o=r(zye," \u2014 "),Rj=n(zye,"A",{href:!0});var xtt=s(Rj);h3o=r(xtt,"ElectraForMaskedLM"),xtt.forEach(t),p3o=r(zye," (ELECTRA model)"),zye.forEach(t),u3o=i(H),R2=n(H,"LI",{});var Wye=s(R2);Lde=n(Wye,"STRONG",{});var $tt=s(Lde);_3o=r($tt,"flaubert"),$tt.forEach(t),b3o=r(Wye," \u2014 "),Pj=n(Wye,"A",{href:!0});var ktt=s(Pj);v3o=r(ktt,"FlaubertWithLMHeadModel"),ktt.forEach(t),F3o=r(Wye," (FlauBERT model)"),Wye.forEach(t),T3o=i(H),P2=n(H,"LI",{});var Qye=s(P2);xde=n(Qye,"STRONG",{});var Stt=s(xde);M3o=r(Stt,"fnet"),Stt.forEach(t),E3o=r(Qye," \u2014 "),Bj=n(Qye,"A",{href:!0});var Rtt=s(Bj);C3o=r(Rtt,"FNetForMaskedLM"),Rtt.forEach(t),w3o=r(Qye," (FNet model)"),Qye.forEach(t),A3o=i(H),B2=n(H,"LI",{});var Hye=s(B2);$de=n(Hye,"STRONG",{});var Ptt=s($de);y3o=r(Ptt,"funnel"),Ptt.forEach(t),L3o=r(Hye," \u2014 "),Ij=n(Hye,"A",{href:!0});var Btt=s(Ij);x3o=r(Btt,"FunnelForMaskedLM"),Btt.forEach(t),$3o=r(Hye," (Funnel Transformer model)"),Hye.forEach(t),k3o=i(H),I2=n(H,"LI",{});var Uye=s(I2);kde=n(Uye,"STRONG",{});var Itt=s(kde);S3o=r(Itt,"ibert"),Itt.forEach(t),R3o=r(Uye," \u2014 "),qj=n(Uye,"A",{href:!0});var qtt=s(qj);P3o=r(qtt,"IBertForMaskedLM"),qtt.forEach(t),B3o=r(Uye," (I-BERT model)"),Uye.forEach(t),I3o=i(H),q2=n(H,"LI",{});var Jye=s(q2);Sde=n(Jye,"STRONG",{});var Ntt=s(Sde);q3o=r(Ntt,"layoutlm"),Ntt.forEach(t),N3o=r(Jye," \u2014 "),Nj=n(Jye,"A",{href:!0});var jtt=s(Nj);j3o=r(jtt,"LayoutLMForMaskedLM"),jtt.forEach(t),D3o=r(Jye," (LayoutLM model)"),Jye.forEach(t),G3o=i(H),N2=n(H,"LI",{});var Yye=s(N2);Rde=n(Yye,"STRONG",{});var Dtt=s(Rde);O3o=r(Dtt,"longformer"),Dtt.forEach(t),V3o=r(Yye," \u2014 "),jj=n(Yye,"A",{href:!0});var Gtt=s(jj);X3o=r(Gtt,"LongformerForMaskedLM"),Gtt.forEach(t),z3o=r(Yye," (Longformer model)"),Yye.forEach(t),W3o=i(H),j2=n(H,"LI",{});var Kye=s(j2);Pde=n(Kye,"STRONG",{});var Ott=s(Pde);Q3o=r(Ott,"mbart"),Ott.forEach(t),H3o=r(Kye," \u2014 "),Dj=n(Kye,"A",{href:!0});var Vtt=s(Dj);U3o=r(Vtt,"MBartForConditionalGeneration"),Vtt.forEach(t),J3o=r(Kye," (mBART model)"),Kye.forEach(t),Y3o=i(H),D2=n(H,"LI",{});var Zye=s(D2);Bde=n(Zye,"STRONG",{});var Xtt=s(Bde);K3o=r(Xtt,"megatron-bert"),Xtt.forEach(t),Z3o=r(Zye," \u2014 "),Gj=n(Zye,"A",{href:!0});var ztt=s(Gj);ewo=r(ztt,"MegatronBertForMaskedLM"),ztt.forEach(t),owo=r(Zye," (MegatronBert model)"),Zye.forEach(t),rwo=i(H),G2=n(H,"LI",{});var eLe=s(G2);Ide=n(eLe,"STRONG",{});var Wtt=s(Ide);two=r(Wtt,"mobilebert"),Wtt.forEach(t),awo=r(eLe," \u2014 "),Oj=n(eLe,"A",{href:!0});var Qtt=s(Oj);nwo=r(Qtt,"MobileBertForMaskedLM"),Qtt.forEach(t),swo=r(eLe," (MobileBERT model)"),eLe.forEach(t),lwo=i(H),O2=n(H,"LI",{});var oLe=s(O2);qde=n(oLe,"STRONG",{});var Htt=s(qde);iwo=r(Htt,"mpnet"),Htt.forEach(t),dwo=r(oLe," \u2014 "),Vj=n(oLe,"A",{href:!0});var Utt=s(Vj);cwo=r(Utt,"MPNetForMaskedLM"),Utt.forEach(t),fwo=r(oLe," (MPNet model)"),oLe.forEach(t),mwo=i(H),V2=n(H,"LI",{});var rLe=s(V2);Nde=n(rLe,"STRONG",{});var Jtt=s(Nde);gwo=r(Jtt,"nystromformer"),Jtt.forEach(t),hwo=r(rLe," \u2014 "),Xj=n(rLe,"A",{href:!0});var Ytt=s(Xj);pwo=r(Ytt,"NystromformerForMaskedLM"),Ytt.forEach(t),uwo=r(rLe," (Nystromformer model)"),rLe.forEach(t),_wo=i(H),X2=n(H,"LI",{});var tLe=s(X2);jde=n(tLe,"STRONG",{});var Ktt=s(jde);bwo=r(Ktt,"perceiver"),Ktt.forEach(t),vwo=r(tLe," \u2014 "),zj=n(tLe,"A",{href:!0});var Ztt=s(zj);Fwo=r(Ztt,"PerceiverForMaskedLM"),Ztt.forEach(t),Two=r(tLe," (Perceiver model)"),tLe.forEach(t),Mwo=i(H),z2=n(H,"LI",{});var aLe=s(z2);Dde=n(aLe,"STRONG",{});var eat=s(Dde);Ewo=r(eat,"qdqbert"),eat.forEach(t),Cwo=r(aLe," \u2014 "),Wj=n(aLe,"A",{href:!0});var oat=s(Wj);wwo=r(oat,"QDQBertForMaskedLM"),oat.forEach(t),Awo=r(aLe," (QDQBert model)"),aLe.forEach(t),ywo=i(H),W2=n(H,"LI",{});var nLe=s(W2);Gde=n(nLe,"STRONG",{});var rat=s(Gde);Lwo=r(rat,"reformer"),rat.forEach(t),xwo=r(nLe," \u2014 "),Qj=n(nLe,"A",{href:!0});var tat=s(Qj);$wo=r(tat,"ReformerForMaskedLM"),tat.forEach(t),kwo=r(nLe," (Reformer model)"),nLe.forEach(t),Swo=i(H),Q2=n(H,"LI",{});var sLe=s(Q2);Ode=n(sLe,"STRONG",{});var aat=s(Ode);Rwo=r(aat,"rembert"),aat.forEach(t),Pwo=r(sLe," \u2014 "),Hj=n(sLe,"A",{href:!0});var nat=s(Hj);Bwo=r(nat,"RemBertForMaskedLM"),nat.forEach(t),Iwo=r(sLe," (RemBERT model)"),sLe.forEach(t),qwo=i(H),H2=n(H,"LI",{});var lLe=s(H2);Vde=n(lLe,"STRONG",{});var sat=s(Vde);Nwo=r(sat,"roberta"),sat.forEach(t),jwo=r(lLe," \u2014 "),Uj=n(lLe,"A",{href:!0});var lat=s(Uj);Dwo=r(lat,"RobertaForMaskedLM"),lat.forEach(t),Gwo=r(lLe," (RoBERTa model)"),lLe.forEach(t),Owo=i(H),U2=n(H,"LI",{});var iLe=s(U2);Xde=n(iLe,"STRONG",{});var iat=s(Xde);Vwo=r(iat,"roformer"),iat.forEach(t),Xwo=r(iLe," \u2014 "),Jj=n(iLe,"A",{href:!0});var dat=s(Jj);zwo=r(dat,"RoFormerForMaskedLM"),dat.forEach(t),Wwo=r(iLe," (RoFormer model)"),iLe.forEach(t),Qwo=i(H),J2=n(H,"LI",{});var dLe=s(J2);zde=n(dLe,"STRONG",{});var cat=s(zde);Hwo=r(cat,"squeezebert"),cat.forEach(t),Uwo=r(dLe," \u2014 "),Yj=n(dLe,"A",{href:!0});var fat=s(Yj);Jwo=r(fat,"SqueezeBertForMaskedLM"),fat.forEach(t),Ywo=r(dLe," (SqueezeBERT model)"),dLe.forEach(t),Kwo=i(H),Y2=n(H,"LI",{});var cLe=s(Y2);Wde=n(cLe,"STRONG",{});var mat=s(Wde);Zwo=r(mat,"tapas"),mat.forEach(t),eAo=r(cLe," \u2014 "),Kj=n(cLe,"A",{href:!0});var gat=s(Kj);oAo=r(gat,"TapasForMaskedLM"),gat.forEach(t),rAo=r(cLe," (TAPAS model)"),cLe.forEach(t),tAo=i(H),K2=n(H,"LI",{});var fLe=s(K2);Qde=n(fLe,"STRONG",{});var hat=s(Qde);aAo=r(hat,"wav2vec2"),hat.forEach(t),nAo=r(fLe," \u2014 "),Hde=n(fLe,"CODE",{});var pat=s(Hde);sAo=r(pat,"Wav2Vec2ForMaskedLM"),pat.forEach(t),lAo=r(fLe," (Wav2Vec2 model)"),fLe.forEach(t),iAo=i(H),Z2=n(H,"LI",{});var mLe=s(Z2);Ude=n(mLe,"STRONG",{});var uat=s(Ude);dAo=r(uat,"xlm"),uat.forEach(t),cAo=r(mLe," \u2014 "),Zj=n(mLe,"A",{href:!0});var _at=s(Zj);fAo=r(_at,"XLMWithLMHeadModel"),_at.forEach(t),mAo=r(mLe," (XLM model)"),mLe.forEach(t),gAo=i(H),e1=n(H,"LI",{});var gLe=s(e1);Jde=n(gLe,"STRONG",{});var bat=s(Jde);hAo=r(bat,"xlm-roberta"),bat.forEach(t),pAo=r(gLe," \u2014 "),eD=n(gLe,"A",{href:!0});var vat=s(eD);uAo=r(vat,"XLMRobertaForMaskedLM"),vat.forEach(t),_Ao=r(gLe," (XLM-RoBERTa model)"),gLe.forEach(t),bAo=i(H),o1=n(H,"LI",{});var hLe=s(o1);Yde=n(hLe,"STRONG",{});var Fat=s(Yde);vAo=r(Fat,"xlm-roberta-xl"),Fat.forEach(t),FAo=r(hLe," \u2014 "),oD=n(hLe,"A",{href:!0});var Tat=s(oD);TAo=r(Tat,"XLMRobertaXLForMaskedLM"),Tat.forEach(t),MAo=r(hLe," (XLM-RoBERTa-XL model)"),hLe.forEach(t),EAo=i(H),r1=n(H,"LI",{});var pLe=s(r1);Kde=n(pLe,"STRONG",{});var Mat=s(Kde);CAo=r(Mat,"yoso"),Mat.forEach(t),wAo=r(pLe," \u2014 "),rD=n(pLe,"A",{href:!0});var Eat=s(rD);AAo=r(Eat,"YosoForMaskedLM"),Eat.forEach(t),yAo=r(pLe," (YOSO model)"),pLe.forEach(t),H.forEach(t),LAo=i(aa),t1=n(aa,"P",{});var uLe=s(t1);xAo=r(uLe,"The model is set in evaluation mode by default using "),Zde=n(uLe,"CODE",{});var Cat=s(Zde);$Ao=r(Cat,"model.eval()"),Cat.forEach(t),kAo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(uLe,"CODE",{});var wat=s(ece);SAo=r(wat,"model.train()"),wat.forEach(t),uLe.forEach(t),RAo=i(aa),T(a1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),WIe=i(f),Ii=n(f,"H2",{class:!0});var JNe=s(Ii);n1=n(JNe,"A",{id:!0,class:!0,href:!0});var Aat=s(n1);oce=n(Aat,"SPAN",{});var yat=s(oce);T(ZA.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),PAo=i(JNe),rce=n(JNe,"SPAN",{});var Lat=s(rce);BAo=r(Lat,"AutoModelForSeq2SeqLM"),Lat.forEach(t),JNe.forEach(t),QIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(ey.$$.fragment,Xs),IAo=i(Xs),qi=n(Xs,"P",{});var BK=s(qi);qAo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tD=n(BK,"A",{href:!0});var xat=s(tD);NAo=r(xat,"from_pretrained()"),xat.forEach(t),jAo=r(BK," class method or the "),aD=n(BK,"A",{href:!0});var $at=s(aD);DAo=r($at,"from_config()"),$at.forEach(t),GAo=r(BK,` class
method.`),BK.forEach(t),OAo=i(Xs),oy=n(Xs,"P",{});var YNe=s(oy);VAo=r(YNe,"This class cannot be instantiated directly using "),tce=n(YNe,"CODE",{});var kat=s(tce);XAo=r(kat,"__init__()"),kat.forEach(t),zAo=r(YNe," (throws an error)."),YNe.forEach(t),WAo=i(Xs),lt=n(Xs,"DIV",{class:!0});var v3=s(lt);T(ry.$$.fragment,v3),QAo=i(v3),ace=n(v3,"P",{});var Sat=s(ace);HAo=r(Sat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sat.forEach(t),UAo=i(v3),Ni=n(v3,"P",{});var IK=s(Ni);JAo=r(IK,`Note:
Loading a model from its configuration file does `),nce=n(IK,"STRONG",{});var Rat=s(nce);YAo=r(Rat,"not"),Rat.forEach(t),KAo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=n(IK,"A",{href:!0});var Pat=s(nD);ZAo=r(Pat,"from_pretrained()"),Pat.forEach(t),eyo=r(IK," to load the model weights."),IK.forEach(t),oyo=i(v3),T(s1.$$.fragment,v3),v3.forEach(t),ryo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(ty.$$.fragment,na),tyo=i(na),sce=n(na,"P",{});var Bat=s(sce);ayo=r(Bat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bat.forEach(t),nyo=i(na),Sa=n(na,"P",{});var F3=s(Sa);syo=r(F3,"The model class to instantiate is selected based on the "),lce=n(F3,"CODE",{});var Iat=s(lce);lyo=r(Iat,"model_type"),Iat.forEach(t),iyo=r(F3,` property of the config object (either
passed as an argument or loaded from `),ice=n(F3,"CODE",{});var qat=s(ice);dyo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),cyo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(F3,"CODE",{});var Nat=s(dce);fyo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),myo=r(F3,":"),F3.forEach(t),gyo=i(na),ue=n(na,"UL",{});var ve=s(ue);l1=n(ve,"LI",{});var _Le=s(l1);cce=n(_Le,"STRONG",{});var jat=s(cce);hyo=r(jat,"bart"),jat.forEach(t),pyo=r(_Le," \u2014 "),sD=n(_Le,"A",{href:!0});var Dat=s(sD);uyo=r(Dat,"BartForConditionalGeneration"),Dat.forEach(t),_yo=r(_Le," (BART model)"),_Le.forEach(t),byo=i(ve),i1=n(ve,"LI",{});var bLe=s(i1);fce=n(bLe,"STRONG",{});var Gat=s(fce);vyo=r(Gat,"bigbird_pegasus"),Gat.forEach(t),Fyo=r(bLe," \u2014 "),lD=n(bLe,"A",{href:!0});var Oat=s(lD);Tyo=r(Oat,"BigBirdPegasusForConditionalGeneration"),Oat.forEach(t),Myo=r(bLe," (BigBirdPegasus model)"),bLe.forEach(t),Eyo=i(ve),d1=n(ve,"LI",{});var vLe=s(d1);mce=n(vLe,"STRONG",{});var Vat=s(mce);Cyo=r(Vat,"blenderbot"),Vat.forEach(t),wyo=r(vLe," \u2014 "),iD=n(vLe,"A",{href:!0});var Xat=s(iD);Ayo=r(Xat,"BlenderbotForConditionalGeneration"),Xat.forEach(t),yyo=r(vLe," (Blenderbot model)"),vLe.forEach(t),Lyo=i(ve),c1=n(ve,"LI",{});var FLe=s(c1);gce=n(FLe,"STRONG",{});var zat=s(gce);xyo=r(zat,"blenderbot-small"),zat.forEach(t),$yo=r(FLe," \u2014 "),dD=n(FLe,"A",{href:!0});var Wat=s(dD);kyo=r(Wat,"BlenderbotSmallForConditionalGeneration"),Wat.forEach(t),Syo=r(FLe," (BlenderbotSmall model)"),FLe.forEach(t),Ryo=i(ve),f1=n(ve,"LI",{});var TLe=s(f1);hce=n(TLe,"STRONG",{});var Qat=s(hce);Pyo=r(Qat,"encoder-decoder"),Qat.forEach(t),Byo=r(TLe," \u2014 "),cD=n(TLe,"A",{href:!0});var Hat=s(cD);Iyo=r(Hat,"EncoderDecoderModel"),Hat.forEach(t),qyo=r(TLe," (Encoder decoder model)"),TLe.forEach(t),Nyo=i(ve),m1=n(ve,"LI",{});var MLe=s(m1);pce=n(MLe,"STRONG",{});var Uat=s(pce);jyo=r(Uat,"fsmt"),Uat.forEach(t),Dyo=r(MLe," \u2014 "),fD=n(MLe,"A",{href:!0});var Jat=s(fD);Gyo=r(Jat,"FSMTForConditionalGeneration"),Jat.forEach(t),Oyo=r(MLe," (FairSeq Machine-Translation model)"),MLe.forEach(t),Vyo=i(ve),g1=n(ve,"LI",{});var ELe=s(g1);uce=n(ELe,"STRONG",{});var Yat=s(uce);Xyo=r(Yat,"led"),Yat.forEach(t),zyo=r(ELe," \u2014 "),mD=n(ELe,"A",{href:!0});var Kat=s(mD);Wyo=r(Kat,"LEDForConditionalGeneration"),Kat.forEach(t),Qyo=r(ELe," (LED model)"),ELe.forEach(t),Hyo=i(ve),h1=n(ve,"LI",{});var CLe=s(h1);_ce=n(CLe,"STRONG",{});var Zat=s(_ce);Uyo=r(Zat,"m2m_100"),Zat.forEach(t),Jyo=r(CLe," \u2014 "),gD=n(CLe,"A",{href:!0});var ent=s(gD);Yyo=r(ent,"M2M100ForConditionalGeneration"),ent.forEach(t),Kyo=r(CLe," (M2M100 model)"),CLe.forEach(t),Zyo=i(ve),p1=n(ve,"LI",{});var wLe=s(p1);bce=n(wLe,"STRONG",{});var ont=s(bce);eLo=r(ont,"marian"),ont.forEach(t),oLo=r(wLe," \u2014 "),hD=n(wLe,"A",{href:!0});var rnt=s(hD);rLo=r(rnt,"MarianMTModel"),rnt.forEach(t),tLo=r(wLe," (Marian model)"),wLe.forEach(t),aLo=i(ve),u1=n(ve,"LI",{});var ALe=s(u1);vce=n(ALe,"STRONG",{});var tnt=s(vce);nLo=r(tnt,"mbart"),tnt.forEach(t),sLo=r(ALe," \u2014 "),pD=n(ALe,"A",{href:!0});var ant=s(pD);lLo=r(ant,"MBartForConditionalGeneration"),ant.forEach(t),iLo=r(ALe," (mBART model)"),ALe.forEach(t),dLo=i(ve),_1=n(ve,"LI",{});var yLe=s(_1);Fce=n(yLe,"STRONG",{});var nnt=s(Fce);cLo=r(nnt,"mt5"),nnt.forEach(t),fLo=r(yLe," \u2014 "),uD=n(yLe,"A",{href:!0});var snt=s(uD);mLo=r(snt,"MT5ForConditionalGeneration"),snt.forEach(t),gLo=r(yLe," (mT5 model)"),yLe.forEach(t),hLo=i(ve),b1=n(ve,"LI",{});var LLe=s(b1);Tce=n(LLe,"STRONG",{});var lnt=s(Tce);pLo=r(lnt,"pegasus"),lnt.forEach(t),uLo=r(LLe," \u2014 "),_D=n(LLe,"A",{href:!0});var int=s(_D);_Lo=r(int,"PegasusForConditionalGeneration"),int.forEach(t),bLo=r(LLe," (Pegasus model)"),LLe.forEach(t),vLo=i(ve),v1=n(ve,"LI",{});var xLe=s(v1);Mce=n(xLe,"STRONG",{});var dnt=s(Mce);FLo=r(dnt,"plbart"),dnt.forEach(t),TLo=r(xLe," \u2014 "),bD=n(xLe,"A",{href:!0});var cnt=s(bD);MLo=r(cnt,"PLBartForConditionalGeneration"),cnt.forEach(t),ELo=r(xLe," (PLBart model)"),xLe.forEach(t),CLo=i(ve),F1=n(ve,"LI",{});var $Le=s(F1);Ece=n($Le,"STRONG",{});var fnt=s(Ece);wLo=r(fnt,"prophetnet"),fnt.forEach(t),ALo=r($Le," \u2014 "),vD=n($Le,"A",{href:!0});var mnt=s(vD);yLo=r(mnt,"ProphetNetForConditionalGeneration"),mnt.forEach(t),LLo=r($Le," (ProphetNet model)"),$Le.forEach(t),xLo=i(ve),T1=n(ve,"LI",{});var kLe=s(T1);Cce=n(kLe,"STRONG",{});var gnt=s(Cce);$Lo=r(gnt,"t5"),gnt.forEach(t),kLo=r(kLe," \u2014 "),FD=n(kLe,"A",{href:!0});var hnt=s(FD);SLo=r(hnt,"T5ForConditionalGeneration"),hnt.forEach(t),RLo=r(kLe," (T5 model)"),kLe.forEach(t),PLo=i(ve),M1=n(ve,"LI",{});var SLe=s(M1);wce=n(SLe,"STRONG",{});var pnt=s(wce);BLo=r(pnt,"xlm-prophetnet"),pnt.forEach(t),ILo=r(SLe," \u2014 "),TD=n(SLe,"A",{href:!0});var unt=s(TD);qLo=r(unt,"XLMProphetNetForConditionalGeneration"),unt.forEach(t),NLo=r(SLe," (XLMProphetNet model)"),SLe.forEach(t),ve.forEach(t),jLo=i(na),E1=n(na,"P",{});var RLe=s(E1);DLo=r(RLe,"The model is set in evaluation mode by default using "),Ace=n(RLe,"CODE",{});var _nt=s(Ace);GLo=r(_nt,"model.eval()"),_nt.forEach(t),OLo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=n(RLe,"CODE",{});var bnt=s(yce);VLo=r(bnt,"model.train()"),bnt.forEach(t),RLe.forEach(t),XLo=i(na),T(C1.$$.fragment,na),na.forEach(t),Xs.forEach(t),HIe=i(f),ji=n(f,"H2",{class:!0});var KNe=s(ji);w1=n(KNe,"A",{id:!0,class:!0,href:!0});var vnt=s(w1);Lce=n(vnt,"SPAN",{});var Fnt=s(Lce);T(ay.$$.fragment,Fnt),Fnt.forEach(t),vnt.forEach(t),zLo=i(KNe),xce=n(KNe,"SPAN",{});var Tnt=s(xce);WLo=r(Tnt,"AutoModelForSequenceClassification"),Tnt.forEach(t),KNe.forEach(t),UIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(ny.$$.fragment,zs),QLo=i(zs),Di=n(zs,"P",{});var qK=s(Di);HLo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MD=n(qK,"A",{href:!0});var Mnt=s(MD);ULo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),JLo=r(qK," class method or the "),ED=n(qK,"A",{href:!0});var Ent=s(ED);YLo=r(Ent,"from_config()"),Ent.forEach(t),KLo=r(qK,` class
method.`),qK.forEach(t),ZLo=i(zs),sy=n(zs,"P",{});var ZNe=s(sy);e8o=r(ZNe,"This class cannot be instantiated directly using "),$ce=n(ZNe,"CODE",{});var Cnt=s($ce);o8o=r(Cnt,"__init__()"),Cnt.forEach(t),r8o=r(ZNe," (throws an error)."),ZNe.forEach(t),t8o=i(zs),it=n(zs,"DIV",{class:!0});var T3=s(it);T(ly.$$.fragment,T3),a8o=i(T3),kce=n(T3,"P",{});var wnt=s(kce);n8o=r(wnt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wnt.forEach(t),s8o=i(T3),Gi=n(T3,"P",{});var NK=s(Gi);l8o=r(NK,`Note:
Loading a model from its configuration file does `),Sce=n(NK,"STRONG",{});var Ant=s(Sce);i8o=r(Ant,"not"),Ant.forEach(t),d8o=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=n(NK,"A",{href:!0});var ynt=s(CD);c8o=r(ynt,"from_pretrained()"),ynt.forEach(t),f8o=r(NK," to load the model weights."),NK.forEach(t),m8o=i(T3),T(A1.$$.fragment,T3),T3.forEach(t),g8o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(iy.$$.fragment,sa),h8o=i(sa),Rce=n(sa,"P",{});var Lnt=s(Rce);p8o=r(Lnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lnt.forEach(t),u8o=i(sa),Ra=n(sa,"P",{});var M3=s(Ra);_8o=r(M3,"The model class to instantiate is selected based on the "),Pce=n(M3,"CODE",{});var xnt=s(Pce);b8o=r(xnt,"model_type"),xnt.forEach(t),v8o=r(M3,` property of the config object (either
passed as an argument or loaded from `),Bce=n(M3,"CODE",{});var $nt=s(Bce);F8o=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),T8o=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(M3,"CODE",{});var knt=s(Ice);M8o=r(knt,"pretrained_model_name_or_path"),knt.forEach(t),E8o=r(M3,":"),M3.forEach(t),C8o=i(sa),q=n(sa,"UL",{});var j=s(q);y1=n(j,"LI",{});var PLe=s(y1);qce=n(PLe,"STRONG",{});var Snt=s(qce);w8o=r(Snt,"albert"),Snt.forEach(t),A8o=r(PLe," \u2014 "),wD=n(PLe,"A",{href:!0});var Rnt=s(wD);y8o=r(Rnt,"AlbertForSequenceClassification"),Rnt.forEach(t),L8o=r(PLe," (ALBERT model)"),PLe.forEach(t),x8o=i(j),L1=n(j,"LI",{});var BLe=s(L1);Nce=n(BLe,"STRONG",{});var Pnt=s(Nce);$8o=r(Pnt,"bart"),Pnt.forEach(t),k8o=r(BLe," \u2014 "),AD=n(BLe,"A",{href:!0});var Bnt=s(AD);S8o=r(Bnt,"BartForSequenceClassification"),Bnt.forEach(t),R8o=r(BLe," (BART model)"),BLe.forEach(t),P8o=i(j),x1=n(j,"LI",{});var ILe=s(x1);jce=n(ILe,"STRONG",{});var Int=s(jce);B8o=r(Int,"bert"),Int.forEach(t),I8o=r(ILe," \u2014 "),yD=n(ILe,"A",{href:!0});var qnt=s(yD);q8o=r(qnt,"BertForSequenceClassification"),qnt.forEach(t),N8o=r(ILe," (BERT model)"),ILe.forEach(t),j8o=i(j),$1=n(j,"LI",{});var qLe=s($1);Dce=n(qLe,"STRONG",{});var Nnt=s(Dce);D8o=r(Nnt,"big_bird"),Nnt.forEach(t),G8o=r(qLe," \u2014 "),LD=n(qLe,"A",{href:!0});var jnt=s(LD);O8o=r(jnt,"BigBirdForSequenceClassification"),jnt.forEach(t),V8o=r(qLe," (BigBird model)"),qLe.forEach(t),X8o=i(j),k1=n(j,"LI",{});var NLe=s(k1);Gce=n(NLe,"STRONG",{});var Dnt=s(Gce);z8o=r(Dnt,"bigbird_pegasus"),Dnt.forEach(t),W8o=r(NLe," \u2014 "),xD=n(NLe,"A",{href:!0});var Gnt=s(xD);Q8o=r(Gnt,"BigBirdPegasusForSequenceClassification"),Gnt.forEach(t),H8o=r(NLe," (BigBirdPegasus model)"),NLe.forEach(t),U8o=i(j),S1=n(j,"LI",{});var jLe=s(S1);Oce=n(jLe,"STRONG",{});var Ont=s(Oce);J8o=r(Ont,"camembert"),Ont.forEach(t),Y8o=r(jLe," \u2014 "),$D=n(jLe,"A",{href:!0});var Vnt=s($D);K8o=r(Vnt,"CamembertForSequenceClassification"),Vnt.forEach(t),Z8o=r(jLe," (CamemBERT model)"),jLe.forEach(t),exo=i(j),R1=n(j,"LI",{});var DLe=s(R1);Vce=n(DLe,"STRONG",{});var Xnt=s(Vce);oxo=r(Xnt,"canine"),Xnt.forEach(t),rxo=r(DLe," \u2014 "),kD=n(DLe,"A",{href:!0});var znt=s(kD);txo=r(znt,"CanineForSequenceClassification"),znt.forEach(t),axo=r(DLe," (Canine model)"),DLe.forEach(t),nxo=i(j),P1=n(j,"LI",{});var GLe=s(P1);Xce=n(GLe,"STRONG",{});var Wnt=s(Xce);sxo=r(Wnt,"convbert"),Wnt.forEach(t),lxo=r(GLe," \u2014 "),SD=n(GLe,"A",{href:!0});var Qnt=s(SD);ixo=r(Qnt,"ConvBertForSequenceClassification"),Qnt.forEach(t),dxo=r(GLe," (ConvBERT model)"),GLe.forEach(t),cxo=i(j),B1=n(j,"LI",{});var OLe=s(B1);zce=n(OLe,"STRONG",{});var Hnt=s(zce);fxo=r(Hnt,"ctrl"),Hnt.forEach(t),mxo=r(OLe," \u2014 "),RD=n(OLe,"A",{href:!0});var Unt=s(RD);gxo=r(Unt,"CTRLForSequenceClassification"),Unt.forEach(t),hxo=r(OLe," (CTRL model)"),OLe.forEach(t),pxo=i(j),I1=n(j,"LI",{});var VLe=s(I1);Wce=n(VLe,"STRONG",{});var Jnt=s(Wce);uxo=r(Jnt,"data2vec-text"),Jnt.forEach(t),_xo=r(VLe," \u2014 "),PD=n(VLe,"A",{href:!0});var Ynt=s(PD);bxo=r(Ynt,"Data2VecTextForSequenceClassification"),Ynt.forEach(t),vxo=r(VLe," (Data2VecText model)"),VLe.forEach(t),Fxo=i(j),q1=n(j,"LI",{});var XLe=s(q1);Qce=n(XLe,"STRONG",{});var Knt=s(Qce);Txo=r(Knt,"deberta"),Knt.forEach(t),Mxo=r(XLe," \u2014 "),BD=n(XLe,"A",{href:!0});var Znt=s(BD);Exo=r(Znt,"DebertaForSequenceClassification"),Znt.forEach(t),Cxo=r(XLe," (DeBERTa model)"),XLe.forEach(t),wxo=i(j),N1=n(j,"LI",{});var zLe=s(N1);Hce=n(zLe,"STRONG",{});var est=s(Hce);Axo=r(est,"deberta-v2"),est.forEach(t),yxo=r(zLe," \u2014 "),ID=n(zLe,"A",{href:!0});var ost=s(ID);Lxo=r(ost,"DebertaV2ForSequenceClassification"),ost.forEach(t),xxo=r(zLe," (DeBERTa-v2 model)"),zLe.forEach(t),$xo=i(j),j1=n(j,"LI",{});var WLe=s(j1);Uce=n(WLe,"STRONG",{});var rst=s(Uce);kxo=r(rst,"distilbert"),rst.forEach(t),Sxo=r(WLe," \u2014 "),qD=n(WLe,"A",{href:!0});var tst=s(qD);Rxo=r(tst,"DistilBertForSequenceClassification"),tst.forEach(t),Pxo=r(WLe," (DistilBERT model)"),WLe.forEach(t),Bxo=i(j),D1=n(j,"LI",{});var QLe=s(D1);Jce=n(QLe,"STRONG",{});var ast=s(Jce);Ixo=r(ast,"electra"),ast.forEach(t),qxo=r(QLe," \u2014 "),ND=n(QLe,"A",{href:!0});var nst=s(ND);Nxo=r(nst,"ElectraForSequenceClassification"),nst.forEach(t),jxo=r(QLe," (ELECTRA model)"),QLe.forEach(t),Dxo=i(j),G1=n(j,"LI",{});var HLe=s(G1);Yce=n(HLe,"STRONG",{});var sst=s(Yce);Gxo=r(sst,"flaubert"),sst.forEach(t),Oxo=r(HLe," \u2014 "),jD=n(HLe,"A",{href:!0});var lst=s(jD);Vxo=r(lst,"FlaubertForSequenceClassification"),lst.forEach(t),Xxo=r(HLe," (FlauBERT model)"),HLe.forEach(t),zxo=i(j),O1=n(j,"LI",{});var ULe=s(O1);Kce=n(ULe,"STRONG",{});var ist=s(Kce);Wxo=r(ist,"fnet"),ist.forEach(t),Qxo=r(ULe," \u2014 "),DD=n(ULe,"A",{href:!0});var dst=s(DD);Hxo=r(dst,"FNetForSequenceClassification"),dst.forEach(t),Uxo=r(ULe," (FNet model)"),ULe.forEach(t),Jxo=i(j),V1=n(j,"LI",{});var JLe=s(V1);Zce=n(JLe,"STRONG",{});var cst=s(Zce);Yxo=r(cst,"funnel"),cst.forEach(t),Kxo=r(JLe," \u2014 "),GD=n(JLe,"A",{href:!0});var fst=s(GD);Zxo=r(fst,"FunnelForSequenceClassification"),fst.forEach(t),e9o=r(JLe," (Funnel Transformer model)"),JLe.forEach(t),o9o=i(j),X1=n(j,"LI",{});var YLe=s(X1);efe=n(YLe,"STRONG",{});var mst=s(efe);r9o=r(mst,"gpt2"),mst.forEach(t),t9o=r(YLe," \u2014 "),OD=n(YLe,"A",{href:!0});var gst=s(OD);a9o=r(gst,"GPT2ForSequenceClassification"),gst.forEach(t),n9o=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),s9o=i(j),z1=n(j,"LI",{});var KLe=s(z1);ofe=n(KLe,"STRONG",{});var hst=s(ofe);l9o=r(hst,"gpt_neo"),hst.forEach(t),i9o=r(KLe," \u2014 "),VD=n(KLe,"A",{href:!0});var pst=s(VD);d9o=r(pst,"GPTNeoForSequenceClassification"),pst.forEach(t),c9o=r(KLe," (GPT Neo model)"),KLe.forEach(t),f9o=i(j),W1=n(j,"LI",{});var ZLe=s(W1);rfe=n(ZLe,"STRONG",{});var ust=s(rfe);m9o=r(ust,"gptj"),ust.forEach(t),g9o=r(ZLe," \u2014 "),XD=n(ZLe,"A",{href:!0});var _st=s(XD);h9o=r(_st,"GPTJForSequenceClassification"),_st.forEach(t),p9o=r(ZLe," (GPT-J model)"),ZLe.forEach(t),u9o=i(j),Q1=n(j,"LI",{});var e8e=s(Q1);tfe=n(e8e,"STRONG",{});var bst=s(tfe);_9o=r(bst,"ibert"),bst.forEach(t),b9o=r(e8e," \u2014 "),zD=n(e8e,"A",{href:!0});var vst=s(zD);v9o=r(vst,"IBertForSequenceClassification"),vst.forEach(t),F9o=r(e8e," (I-BERT model)"),e8e.forEach(t),T9o=i(j),H1=n(j,"LI",{});var o8e=s(H1);afe=n(o8e,"STRONG",{});var Fst=s(afe);M9o=r(Fst,"layoutlm"),Fst.forEach(t),E9o=r(o8e," \u2014 "),WD=n(o8e,"A",{href:!0});var Tst=s(WD);C9o=r(Tst,"LayoutLMForSequenceClassification"),Tst.forEach(t),w9o=r(o8e," (LayoutLM model)"),o8e.forEach(t),A9o=i(j),U1=n(j,"LI",{});var r8e=s(U1);nfe=n(r8e,"STRONG",{});var Mst=s(nfe);y9o=r(Mst,"layoutlmv2"),Mst.forEach(t),L9o=r(r8e," \u2014 "),QD=n(r8e,"A",{href:!0});var Est=s(QD);x9o=r(Est,"LayoutLMv2ForSequenceClassification"),Est.forEach(t),$9o=r(r8e," (LayoutLMv2 model)"),r8e.forEach(t),k9o=i(j),J1=n(j,"LI",{});var t8e=s(J1);sfe=n(t8e,"STRONG",{});var Cst=s(sfe);S9o=r(Cst,"led"),Cst.forEach(t),R9o=r(t8e," \u2014 "),HD=n(t8e,"A",{href:!0});var wst=s(HD);P9o=r(wst,"LEDForSequenceClassification"),wst.forEach(t),B9o=r(t8e," (LED model)"),t8e.forEach(t),I9o=i(j),Y1=n(j,"LI",{});var a8e=s(Y1);lfe=n(a8e,"STRONG",{});var Ast=s(lfe);q9o=r(Ast,"longformer"),Ast.forEach(t),N9o=r(a8e," \u2014 "),UD=n(a8e,"A",{href:!0});var yst=s(UD);j9o=r(yst,"LongformerForSequenceClassification"),yst.forEach(t),D9o=r(a8e," (Longformer model)"),a8e.forEach(t),G9o=i(j),K1=n(j,"LI",{});var n8e=s(K1);ife=n(n8e,"STRONG",{});var Lst=s(ife);O9o=r(Lst,"mbart"),Lst.forEach(t),V9o=r(n8e," \u2014 "),JD=n(n8e,"A",{href:!0});var xst=s(JD);X9o=r(xst,"MBartForSequenceClassification"),xst.forEach(t),z9o=r(n8e," (mBART model)"),n8e.forEach(t),W9o=i(j),Z1=n(j,"LI",{});var s8e=s(Z1);dfe=n(s8e,"STRONG",{});var $st=s(dfe);Q9o=r($st,"megatron-bert"),$st.forEach(t),H9o=r(s8e," \u2014 "),YD=n(s8e,"A",{href:!0});var kst=s(YD);U9o=r(kst,"MegatronBertForSequenceClassification"),kst.forEach(t),J9o=r(s8e," (MegatronBert model)"),s8e.forEach(t),Y9o=i(j),eb=n(j,"LI",{});var l8e=s(eb);cfe=n(l8e,"STRONG",{});var Sst=s(cfe);K9o=r(Sst,"mobilebert"),Sst.forEach(t),Z9o=r(l8e," \u2014 "),KD=n(l8e,"A",{href:!0});var Rst=s(KD);e$o=r(Rst,"MobileBertForSequenceClassification"),Rst.forEach(t),o$o=r(l8e," (MobileBERT model)"),l8e.forEach(t),r$o=i(j),ob=n(j,"LI",{});var i8e=s(ob);ffe=n(i8e,"STRONG",{});var Pst=s(ffe);t$o=r(Pst,"mpnet"),Pst.forEach(t),a$o=r(i8e," \u2014 "),ZD=n(i8e,"A",{href:!0});var Bst=s(ZD);n$o=r(Bst,"MPNetForSequenceClassification"),Bst.forEach(t),s$o=r(i8e," (MPNet model)"),i8e.forEach(t),l$o=i(j),rb=n(j,"LI",{});var d8e=s(rb);mfe=n(d8e,"STRONG",{});var Ist=s(mfe);i$o=r(Ist,"nystromformer"),Ist.forEach(t),d$o=r(d8e," \u2014 "),eG=n(d8e,"A",{href:!0});var qst=s(eG);c$o=r(qst,"NystromformerForSequenceClassification"),qst.forEach(t),f$o=r(d8e," (Nystromformer model)"),d8e.forEach(t),m$o=i(j),tb=n(j,"LI",{});var c8e=s(tb);gfe=n(c8e,"STRONG",{});var Nst=s(gfe);g$o=r(Nst,"openai-gpt"),Nst.forEach(t),h$o=r(c8e," \u2014 "),oG=n(c8e,"A",{href:!0});var jst=s(oG);p$o=r(jst,"OpenAIGPTForSequenceClassification"),jst.forEach(t),u$o=r(c8e," (OpenAI GPT model)"),c8e.forEach(t),_$o=i(j),ab=n(j,"LI",{});var f8e=s(ab);hfe=n(f8e,"STRONG",{});var Dst=s(hfe);b$o=r(Dst,"perceiver"),Dst.forEach(t),v$o=r(f8e," \u2014 "),rG=n(f8e,"A",{href:!0});var Gst=s(rG);F$o=r(Gst,"PerceiverForSequenceClassification"),Gst.forEach(t),T$o=r(f8e," (Perceiver model)"),f8e.forEach(t),M$o=i(j),nb=n(j,"LI",{});var m8e=s(nb);pfe=n(m8e,"STRONG",{});var Ost=s(pfe);E$o=r(Ost,"plbart"),Ost.forEach(t),C$o=r(m8e," \u2014 "),tG=n(m8e,"A",{href:!0});var Vst=s(tG);w$o=r(Vst,"PLBartForSequenceClassification"),Vst.forEach(t),A$o=r(m8e," (PLBart model)"),m8e.forEach(t),y$o=i(j),sb=n(j,"LI",{});var g8e=s(sb);ufe=n(g8e,"STRONG",{});var Xst=s(ufe);L$o=r(Xst,"qdqbert"),Xst.forEach(t),x$o=r(g8e," \u2014 "),aG=n(g8e,"A",{href:!0});var zst=s(aG);$$o=r(zst,"QDQBertForSequenceClassification"),zst.forEach(t),k$o=r(g8e," (QDQBert model)"),g8e.forEach(t),S$o=i(j),lb=n(j,"LI",{});var h8e=s(lb);_fe=n(h8e,"STRONG",{});var Wst=s(_fe);R$o=r(Wst,"reformer"),Wst.forEach(t),P$o=r(h8e," \u2014 "),nG=n(h8e,"A",{href:!0});var Qst=s(nG);B$o=r(Qst,"ReformerForSequenceClassification"),Qst.forEach(t),I$o=r(h8e," (Reformer model)"),h8e.forEach(t),q$o=i(j),ib=n(j,"LI",{});var p8e=s(ib);bfe=n(p8e,"STRONG",{});var Hst=s(bfe);N$o=r(Hst,"rembert"),Hst.forEach(t),j$o=r(p8e," \u2014 "),sG=n(p8e,"A",{href:!0});var Ust=s(sG);D$o=r(Ust,"RemBertForSequenceClassification"),Ust.forEach(t),G$o=r(p8e," (RemBERT model)"),p8e.forEach(t),O$o=i(j),db=n(j,"LI",{});var u8e=s(db);vfe=n(u8e,"STRONG",{});var Jst=s(vfe);V$o=r(Jst,"roberta"),Jst.forEach(t),X$o=r(u8e," \u2014 "),lG=n(u8e,"A",{href:!0});var Yst=s(lG);z$o=r(Yst,"RobertaForSequenceClassification"),Yst.forEach(t),W$o=r(u8e," (RoBERTa model)"),u8e.forEach(t),Q$o=i(j),cb=n(j,"LI",{});var _8e=s(cb);Ffe=n(_8e,"STRONG",{});var Kst=s(Ffe);H$o=r(Kst,"roformer"),Kst.forEach(t),U$o=r(_8e," \u2014 "),iG=n(_8e,"A",{href:!0});var Zst=s(iG);J$o=r(Zst,"RoFormerForSequenceClassification"),Zst.forEach(t),Y$o=r(_8e," (RoFormer model)"),_8e.forEach(t),K$o=i(j),fb=n(j,"LI",{});var b8e=s(fb);Tfe=n(b8e,"STRONG",{});var elt=s(Tfe);Z$o=r(elt,"squeezebert"),elt.forEach(t),eko=r(b8e," \u2014 "),dG=n(b8e,"A",{href:!0});var olt=s(dG);oko=r(olt,"SqueezeBertForSequenceClassification"),olt.forEach(t),rko=r(b8e," (SqueezeBERT model)"),b8e.forEach(t),tko=i(j),mb=n(j,"LI",{});var v8e=s(mb);Mfe=n(v8e,"STRONG",{});var rlt=s(Mfe);ako=r(rlt,"tapas"),rlt.forEach(t),nko=r(v8e," \u2014 "),cG=n(v8e,"A",{href:!0});var tlt=s(cG);sko=r(tlt,"TapasForSequenceClassification"),tlt.forEach(t),lko=r(v8e," (TAPAS model)"),v8e.forEach(t),iko=i(j),gb=n(j,"LI",{});var F8e=s(gb);Efe=n(F8e,"STRONG",{});var alt=s(Efe);dko=r(alt,"transfo-xl"),alt.forEach(t),cko=r(F8e," \u2014 "),fG=n(F8e,"A",{href:!0});var nlt=s(fG);fko=r(nlt,"TransfoXLForSequenceClassification"),nlt.forEach(t),mko=r(F8e," (Transformer-XL model)"),F8e.forEach(t),gko=i(j),hb=n(j,"LI",{});var T8e=s(hb);Cfe=n(T8e,"STRONG",{});var slt=s(Cfe);hko=r(slt,"xlm"),slt.forEach(t),pko=r(T8e," \u2014 "),mG=n(T8e,"A",{href:!0});var llt=s(mG);uko=r(llt,"XLMForSequenceClassification"),llt.forEach(t),_ko=r(T8e," (XLM model)"),T8e.forEach(t),bko=i(j),pb=n(j,"LI",{});var M8e=s(pb);wfe=n(M8e,"STRONG",{});var ilt=s(wfe);vko=r(ilt,"xlm-roberta"),ilt.forEach(t),Fko=r(M8e," \u2014 "),gG=n(M8e,"A",{href:!0});var dlt=s(gG);Tko=r(dlt,"XLMRobertaForSequenceClassification"),dlt.forEach(t),Mko=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),Eko=i(j),ub=n(j,"LI",{});var E8e=s(ub);Afe=n(E8e,"STRONG",{});var clt=s(Afe);Cko=r(clt,"xlm-roberta-xl"),clt.forEach(t),wko=r(E8e," \u2014 "),hG=n(E8e,"A",{href:!0});var flt=s(hG);Ako=r(flt,"XLMRobertaXLForSequenceClassification"),flt.forEach(t),yko=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),Lko=i(j),_b=n(j,"LI",{});var C8e=s(_b);yfe=n(C8e,"STRONG",{});var mlt=s(yfe);xko=r(mlt,"xlnet"),mlt.forEach(t),$ko=r(C8e," \u2014 "),pG=n(C8e,"A",{href:!0});var glt=s(pG);kko=r(glt,"XLNetForSequenceClassification"),glt.forEach(t),Sko=r(C8e," (XLNet model)"),C8e.forEach(t),Rko=i(j),bb=n(j,"LI",{});var w8e=s(bb);Lfe=n(w8e,"STRONG",{});var hlt=s(Lfe);Pko=r(hlt,"yoso"),hlt.forEach(t),Bko=r(w8e," \u2014 "),uG=n(w8e,"A",{href:!0});var plt=s(uG);Iko=r(plt,"YosoForSequenceClassification"),plt.forEach(t),qko=r(w8e," (YOSO model)"),w8e.forEach(t),j.forEach(t),Nko=i(sa),vb=n(sa,"P",{});var A8e=s(vb);jko=r(A8e,"The model is set in evaluation mode by default using "),xfe=n(A8e,"CODE",{});var ult=s(xfe);Dko=r(ult,"model.eval()"),ult.forEach(t),Gko=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=n(A8e,"CODE",{});var _lt=s($fe);Oko=r(_lt,"model.train()"),_lt.forEach(t),A8e.forEach(t),Vko=i(sa),T(Fb.$$.fragment,sa),sa.forEach(t),zs.forEach(t),JIe=i(f),Oi=n(f,"H2",{class:!0});var eje=s(Oi);Tb=n(eje,"A",{id:!0,class:!0,href:!0});var blt=s(Tb);kfe=n(blt,"SPAN",{});var vlt=s(kfe);T(dy.$$.fragment,vlt),vlt.forEach(t),blt.forEach(t),Xko=i(eje),Sfe=n(eje,"SPAN",{});var Flt=s(Sfe);zko=r(Flt,"AutoModelForMultipleChoice"),Flt.forEach(t),eje.forEach(t),YIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(cy.$$.fragment,Ws),Wko=i(Ws),Vi=n(Ws,"P",{});var jK=s(Vi);Qko=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_G=n(jK,"A",{href:!0});var Tlt=s(_G);Hko=r(Tlt,"from_pretrained()"),Tlt.forEach(t),Uko=r(jK," class method or the "),bG=n(jK,"A",{href:!0});var Mlt=s(bG);Jko=r(Mlt,"from_config()"),Mlt.forEach(t),Yko=r(jK,` class
method.`),jK.forEach(t),Kko=i(Ws),fy=n(Ws,"P",{});var oje=s(fy);Zko=r(oje,"This class cannot be instantiated directly using "),Rfe=n(oje,"CODE",{});var Elt=s(Rfe);eSo=r(Elt,"__init__()"),Elt.forEach(t),oSo=r(oje," (throws an error)."),oje.forEach(t),rSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var E3=s(dt);T(my.$$.fragment,E3),tSo=i(E3),Pfe=n(E3,"P",{});var Clt=s(Pfe);aSo=r(Clt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Clt.forEach(t),nSo=i(E3),Xi=n(E3,"P",{});var DK=s(Xi);sSo=r(DK,`Note:
Loading a model from its configuration file does `),Bfe=n(DK,"STRONG",{});var wlt=s(Bfe);lSo=r(wlt,"not"),wlt.forEach(t),iSo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=n(DK,"A",{href:!0});var Alt=s(vG);dSo=r(Alt,"from_pretrained()"),Alt.forEach(t),cSo=r(DK," to load the model weights."),DK.forEach(t),fSo=i(E3),T(Mb.$$.fragment,E3),E3.forEach(t),mSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(gy.$$.fragment,la),gSo=i(la),Ife=n(la,"P",{});var ylt=s(Ife);hSo=r(ylt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ylt.forEach(t),pSo=i(la),Pa=n(la,"P",{});var C3=s(Pa);uSo=r(C3,"The model class to instantiate is selected based on the "),qfe=n(C3,"CODE",{});var Llt=s(qfe);_So=r(Llt,"model_type"),Llt.forEach(t),bSo=r(C3,` property of the config object (either
passed as an argument or loaded from `),Nfe=n(C3,"CODE",{});var xlt=s(Nfe);vSo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),FSo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=n(C3,"CODE",{});var $lt=s(jfe);TSo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),MSo=r(C3,":"),C3.forEach(t),ESo=i(la),Y=n(la,"UL",{});var K=s(Y);Eb=n(K,"LI",{});var y8e=s(Eb);Dfe=n(y8e,"STRONG",{});var klt=s(Dfe);CSo=r(klt,"albert"),klt.forEach(t),wSo=r(y8e," \u2014 "),FG=n(y8e,"A",{href:!0});var Slt=s(FG);ASo=r(Slt,"AlbertForMultipleChoice"),Slt.forEach(t),ySo=r(y8e," (ALBERT model)"),y8e.forEach(t),LSo=i(K),Cb=n(K,"LI",{});var L8e=s(Cb);Gfe=n(L8e,"STRONG",{});var Rlt=s(Gfe);xSo=r(Rlt,"bert"),Rlt.forEach(t),$So=r(L8e," \u2014 "),TG=n(L8e,"A",{href:!0});var Plt=s(TG);kSo=r(Plt,"BertForMultipleChoice"),Plt.forEach(t),SSo=r(L8e," (BERT model)"),L8e.forEach(t),RSo=i(K),wb=n(K,"LI",{});var x8e=s(wb);Ofe=n(x8e,"STRONG",{});var Blt=s(Ofe);PSo=r(Blt,"big_bird"),Blt.forEach(t),BSo=r(x8e," \u2014 "),MG=n(x8e,"A",{href:!0});var Ilt=s(MG);ISo=r(Ilt,"BigBirdForMultipleChoice"),Ilt.forEach(t),qSo=r(x8e," (BigBird model)"),x8e.forEach(t),NSo=i(K),Ab=n(K,"LI",{});var $8e=s(Ab);Vfe=n($8e,"STRONG",{});var qlt=s(Vfe);jSo=r(qlt,"camembert"),qlt.forEach(t),DSo=r($8e," \u2014 "),EG=n($8e,"A",{href:!0});var Nlt=s(EG);GSo=r(Nlt,"CamembertForMultipleChoice"),Nlt.forEach(t),OSo=r($8e," (CamemBERT model)"),$8e.forEach(t),VSo=i(K),yb=n(K,"LI",{});var k8e=s(yb);Xfe=n(k8e,"STRONG",{});var jlt=s(Xfe);XSo=r(jlt,"canine"),jlt.forEach(t),zSo=r(k8e," \u2014 "),CG=n(k8e,"A",{href:!0});var Dlt=s(CG);WSo=r(Dlt,"CanineForMultipleChoice"),Dlt.forEach(t),QSo=r(k8e," (Canine model)"),k8e.forEach(t),HSo=i(K),Lb=n(K,"LI",{});var S8e=s(Lb);zfe=n(S8e,"STRONG",{});var Glt=s(zfe);USo=r(Glt,"convbert"),Glt.forEach(t),JSo=r(S8e," \u2014 "),wG=n(S8e,"A",{href:!0});var Olt=s(wG);YSo=r(Olt,"ConvBertForMultipleChoice"),Olt.forEach(t),KSo=r(S8e," (ConvBERT model)"),S8e.forEach(t),ZSo=i(K),xb=n(K,"LI",{});var R8e=s(xb);Wfe=n(R8e,"STRONG",{});var Vlt=s(Wfe);eRo=r(Vlt,"data2vec-text"),Vlt.forEach(t),oRo=r(R8e," \u2014 "),AG=n(R8e,"A",{href:!0});var Xlt=s(AG);rRo=r(Xlt,"Data2VecTextForMultipleChoice"),Xlt.forEach(t),tRo=r(R8e," (Data2VecText model)"),R8e.forEach(t),aRo=i(K),$b=n(K,"LI",{});var P8e=s($b);Qfe=n(P8e,"STRONG",{});var zlt=s(Qfe);nRo=r(zlt,"deberta-v2"),zlt.forEach(t),sRo=r(P8e," \u2014 "),yG=n(P8e,"A",{href:!0});var Wlt=s(yG);lRo=r(Wlt,"DebertaV2ForMultipleChoice"),Wlt.forEach(t),iRo=r(P8e," (DeBERTa-v2 model)"),P8e.forEach(t),dRo=i(K),kb=n(K,"LI",{});var B8e=s(kb);Hfe=n(B8e,"STRONG",{});var Qlt=s(Hfe);cRo=r(Qlt,"distilbert"),Qlt.forEach(t),fRo=r(B8e," \u2014 "),LG=n(B8e,"A",{href:!0});var Hlt=s(LG);mRo=r(Hlt,"DistilBertForMultipleChoice"),Hlt.forEach(t),gRo=r(B8e," (DistilBERT model)"),B8e.forEach(t),hRo=i(K),Sb=n(K,"LI",{});var I8e=s(Sb);Ufe=n(I8e,"STRONG",{});var Ult=s(Ufe);pRo=r(Ult,"electra"),Ult.forEach(t),uRo=r(I8e," \u2014 "),xG=n(I8e,"A",{href:!0});var Jlt=s(xG);_Ro=r(Jlt,"ElectraForMultipleChoice"),Jlt.forEach(t),bRo=r(I8e," (ELECTRA model)"),I8e.forEach(t),vRo=i(K),Rb=n(K,"LI",{});var q8e=s(Rb);Jfe=n(q8e,"STRONG",{});var Ylt=s(Jfe);FRo=r(Ylt,"flaubert"),Ylt.forEach(t),TRo=r(q8e," \u2014 "),$G=n(q8e,"A",{href:!0});var Klt=s($G);MRo=r(Klt,"FlaubertForMultipleChoice"),Klt.forEach(t),ERo=r(q8e," (FlauBERT model)"),q8e.forEach(t),CRo=i(K),Pb=n(K,"LI",{});var N8e=s(Pb);Yfe=n(N8e,"STRONG",{});var Zlt=s(Yfe);wRo=r(Zlt,"fnet"),Zlt.forEach(t),ARo=r(N8e," \u2014 "),kG=n(N8e,"A",{href:!0});var eit=s(kG);yRo=r(eit,"FNetForMultipleChoice"),eit.forEach(t),LRo=r(N8e," (FNet model)"),N8e.forEach(t),xRo=i(K),Bb=n(K,"LI",{});var j8e=s(Bb);Kfe=n(j8e,"STRONG",{});var oit=s(Kfe);$Ro=r(oit,"funnel"),oit.forEach(t),kRo=r(j8e," \u2014 "),SG=n(j8e,"A",{href:!0});var rit=s(SG);SRo=r(rit,"FunnelForMultipleChoice"),rit.forEach(t),RRo=r(j8e," (Funnel Transformer model)"),j8e.forEach(t),PRo=i(K),Ib=n(K,"LI",{});var D8e=s(Ib);Zfe=n(D8e,"STRONG",{});var tit=s(Zfe);BRo=r(tit,"ibert"),tit.forEach(t),IRo=r(D8e," \u2014 "),RG=n(D8e,"A",{href:!0});var ait=s(RG);qRo=r(ait,"IBertForMultipleChoice"),ait.forEach(t),NRo=r(D8e," (I-BERT model)"),D8e.forEach(t),jRo=i(K),qb=n(K,"LI",{});var G8e=s(qb);eme=n(G8e,"STRONG",{});var nit=s(eme);DRo=r(nit,"longformer"),nit.forEach(t),GRo=r(G8e," \u2014 "),PG=n(G8e,"A",{href:!0});var sit=s(PG);ORo=r(sit,"LongformerForMultipleChoice"),sit.forEach(t),VRo=r(G8e," (Longformer model)"),G8e.forEach(t),XRo=i(K),Nb=n(K,"LI",{});var O8e=s(Nb);ome=n(O8e,"STRONG",{});var lit=s(ome);zRo=r(lit,"megatron-bert"),lit.forEach(t),WRo=r(O8e," \u2014 "),BG=n(O8e,"A",{href:!0});var iit=s(BG);QRo=r(iit,"MegatronBertForMultipleChoice"),iit.forEach(t),HRo=r(O8e," (MegatronBert model)"),O8e.forEach(t),URo=i(K),jb=n(K,"LI",{});var V8e=s(jb);rme=n(V8e,"STRONG",{});var dit=s(rme);JRo=r(dit,"mobilebert"),dit.forEach(t),YRo=r(V8e," \u2014 "),IG=n(V8e,"A",{href:!0});var cit=s(IG);KRo=r(cit,"MobileBertForMultipleChoice"),cit.forEach(t),ZRo=r(V8e," (MobileBERT model)"),V8e.forEach(t),ePo=i(K),Db=n(K,"LI",{});var X8e=s(Db);tme=n(X8e,"STRONG",{});var fit=s(tme);oPo=r(fit,"mpnet"),fit.forEach(t),rPo=r(X8e," \u2014 "),qG=n(X8e,"A",{href:!0});var mit=s(qG);tPo=r(mit,"MPNetForMultipleChoice"),mit.forEach(t),aPo=r(X8e," (MPNet model)"),X8e.forEach(t),nPo=i(K),Gb=n(K,"LI",{});var z8e=s(Gb);ame=n(z8e,"STRONG",{});var git=s(ame);sPo=r(git,"nystromformer"),git.forEach(t),lPo=r(z8e," \u2014 "),NG=n(z8e,"A",{href:!0});var hit=s(NG);iPo=r(hit,"NystromformerForMultipleChoice"),hit.forEach(t),dPo=r(z8e," (Nystromformer model)"),z8e.forEach(t),cPo=i(K),Ob=n(K,"LI",{});var W8e=s(Ob);nme=n(W8e,"STRONG",{});var pit=s(nme);fPo=r(pit,"qdqbert"),pit.forEach(t),mPo=r(W8e," \u2014 "),jG=n(W8e,"A",{href:!0});var uit=s(jG);gPo=r(uit,"QDQBertForMultipleChoice"),uit.forEach(t),hPo=r(W8e," (QDQBert model)"),W8e.forEach(t),pPo=i(K),Vb=n(K,"LI",{});var Q8e=s(Vb);sme=n(Q8e,"STRONG",{});var _it=s(sme);uPo=r(_it,"rembert"),_it.forEach(t),_Po=r(Q8e," \u2014 "),DG=n(Q8e,"A",{href:!0});var bit=s(DG);bPo=r(bit,"RemBertForMultipleChoice"),bit.forEach(t),vPo=r(Q8e," (RemBERT model)"),Q8e.forEach(t),FPo=i(K),Xb=n(K,"LI",{});var H8e=s(Xb);lme=n(H8e,"STRONG",{});var vit=s(lme);TPo=r(vit,"roberta"),vit.forEach(t),MPo=r(H8e," \u2014 "),GG=n(H8e,"A",{href:!0});var Fit=s(GG);EPo=r(Fit,"RobertaForMultipleChoice"),Fit.forEach(t),CPo=r(H8e," (RoBERTa model)"),H8e.forEach(t),wPo=i(K),zb=n(K,"LI",{});var U8e=s(zb);ime=n(U8e,"STRONG",{});var Tit=s(ime);APo=r(Tit,"roformer"),Tit.forEach(t),yPo=r(U8e," \u2014 "),OG=n(U8e,"A",{href:!0});var Mit=s(OG);LPo=r(Mit,"RoFormerForMultipleChoice"),Mit.forEach(t),xPo=r(U8e," (RoFormer model)"),U8e.forEach(t),$Po=i(K),Wb=n(K,"LI",{});var J8e=s(Wb);dme=n(J8e,"STRONG",{});var Eit=s(dme);kPo=r(Eit,"squeezebert"),Eit.forEach(t),SPo=r(J8e," \u2014 "),VG=n(J8e,"A",{href:!0});var Cit=s(VG);RPo=r(Cit,"SqueezeBertForMultipleChoice"),Cit.forEach(t),PPo=r(J8e," (SqueezeBERT model)"),J8e.forEach(t),BPo=i(K),Qb=n(K,"LI",{});var Y8e=s(Qb);cme=n(Y8e,"STRONG",{});var wit=s(cme);IPo=r(wit,"xlm"),wit.forEach(t),qPo=r(Y8e," \u2014 "),XG=n(Y8e,"A",{href:!0});var Ait=s(XG);NPo=r(Ait,"XLMForMultipleChoice"),Ait.forEach(t),jPo=r(Y8e," (XLM model)"),Y8e.forEach(t),DPo=i(K),Hb=n(K,"LI",{});var K8e=s(Hb);fme=n(K8e,"STRONG",{});var yit=s(fme);GPo=r(yit,"xlm-roberta"),yit.forEach(t),OPo=r(K8e," \u2014 "),zG=n(K8e,"A",{href:!0});var Lit=s(zG);VPo=r(Lit,"XLMRobertaForMultipleChoice"),Lit.forEach(t),XPo=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),zPo=i(K),Ub=n(K,"LI",{});var Z8e=s(Ub);mme=n(Z8e,"STRONG",{});var xit=s(mme);WPo=r(xit,"xlm-roberta-xl"),xit.forEach(t),QPo=r(Z8e," \u2014 "),WG=n(Z8e,"A",{href:!0});var $it=s(WG);HPo=r($it,"XLMRobertaXLForMultipleChoice"),$it.forEach(t),UPo=r(Z8e," (XLM-RoBERTa-XL model)"),Z8e.forEach(t),JPo=i(K),Jb=n(K,"LI",{});var exe=s(Jb);gme=n(exe,"STRONG",{});var kit=s(gme);YPo=r(kit,"xlnet"),kit.forEach(t),KPo=r(exe," \u2014 "),QG=n(exe,"A",{href:!0});var Sit=s(QG);ZPo=r(Sit,"XLNetForMultipleChoice"),Sit.forEach(t),eBo=r(exe," (XLNet model)"),exe.forEach(t),oBo=i(K),Yb=n(K,"LI",{});var oxe=s(Yb);hme=n(oxe,"STRONG",{});var Rit=s(hme);rBo=r(Rit,"yoso"),Rit.forEach(t),tBo=r(oxe," \u2014 "),HG=n(oxe,"A",{href:!0});var Pit=s(HG);aBo=r(Pit,"YosoForMultipleChoice"),Pit.forEach(t),nBo=r(oxe," (YOSO model)"),oxe.forEach(t),K.forEach(t),sBo=i(la),Kb=n(la,"P",{});var rxe=s(Kb);lBo=r(rxe,"The model is set in evaluation mode by default using "),pme=n(rxe,"CODE",{});var Bit=s(pme);iBo=r(Bit,"model.eval()"),Bit.forEach(t),dBo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=n(rxe,"CODE",{});var Iit=s(ume);cBo=r(Iit,"model.train()"),Iit.forEach(t),rxe.forEach(t),fBo=i(la),T(Zb.$$.fragment,la),la.forEach(t),Ws.forEach(t),KIe=i(f),zi=n(f,"H2",{class:!0});var rje=s(zi);ev=n(rje,"A",{id:!0,class:!0,href:!0});var qit=s(ev);_me=n(qit,"SPAN",{});var Nit=s(_me);T(hy.$$.fragment,Nit),Nit.forEach(t),qit.forEach(t),mBo=i(rje),bme=n(rje,"SPAN",{});var jit=s(bme);gBo=r(jit,"AutoModelForNextSentencePrediction"),jit.forEach(t),rje.forEach(t),ZIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(py.$$.fragment,Qs),hBo=i(Qs),Wi=n(Qs,"P",{});var GK=s(Wi);pBo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UG=n(GK,"A",{href:!0});var Dit=s(UG);uBo=r(Dit,"from_pretrained()"),Dit.forEach(t),_Bo=r(GK," class method or the "),JG=n(GK,"A",{href:!0});var Git=s(JG);bBo=r(Git,"from_config()"),Git.forEach(t),vBo=r(GK,` class
method.`),GK.forEach(t),FBo=i(Qs),uy=n(Qs,"P",{});var tje=s(uy);TBo=r(tje,"This class cannot be instantiated directly using "),vme=n(tje,"CODE",{});var Oit=s(vme);MBo=r(Oit,"__init__()"),Oit.forEach(t),EBo=r(tje," (throws an error)."),tje.forEach(t),CBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var w3=s(ct);T(_y.$$.fragment,w3),wBo=i(w3),Fme=n(w3,"P",{});var Vit=s(Fme);ABo=r(Vit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vit.forEach(t),yBo=i(w3),Qi=n(w3,"P",{});var OK=s(Qi);LBo=r(OK,`Note:
Loading a model from its configuration file does `),Tme=n(OK,"STRONG",{});var Xit=s(Tme);xBo=r(Xit,"not"),Xit.forEach(t),$Bo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(OK,"A",{href:!0});var zit=s(YG);kBo=r(zit,"from_pretrained()"),zit.forEach(t),SBo=r(OK," to load the model weights."),OK.forEach(t),RBo=i(w3),T(ov.$$.fragment,w3),w3.forEach(t),PBo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(by.$$.fragment,ia),BBo=i(ia),Mme=n(ia,"P",{});var Wit=s(Mme);IBo=r(Wit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wit.forEach(t),qBo=i(ia),Ba=n(ia,"P",{});var A3=s(Ba);NBo=r(A3,"The model class to instantiate is selected based on the "),Eme=n(A3,"CODE",{});var Qit=s(Eme);jBo=r(Qit,"model_type"),Qit.forEach(t),DBo=r(A3,` property of the config object (either
passed as an argument or loaded from `),Cme=n(A3,"CODE",{});var Hit=s(Cme);GBo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),OBo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(A3,"CODE",{});var Uit=s(wme);VBo=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),XBo=r(A3,":"),A3.forEach(t),zBo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);rv=n(Hs,"LI",{});var txe=s(rv);Ame=n(txe,"STRONG",{});var Jit=s(Ame);WBo=r(Jit,"bert"),Jit.forEach(t),QBo=r(txe," \u2014 "),KG=n(txe,"A",{href:!0});var Yit=s(KG);HBo=r(Yit,"BertForNextSentencePrediction"),Yit.forEach(t),UBo=r(txe," (BERT model)"),txe.forEach(t),JBo=i(Hs),tv=n(Hs,"LI",{});var axe=s(tv);yme=n(axe,"STRONG",{});var Kit=s(yme);YBo=r(Kit,"fnet"),Kit.forEach(t),KBo=r(axe," \u2014 "),ZG=n(axe,"A",{href:!0});var Zit=s(ZG);ZBo=r(Zit,"FNetForNextSentencePrediction"),Zit.forEach(t),eIo=r(axe," (FNet model)"),axe.forEach(t),oIo=i(Hs),av=n(Hs,"LI",{});var nxe=s(av);Lme=n(nxe,"STRONG",{});var edt=s(Lme);rIo=r(edt,"megatron-bert"),edt.forEach(t),tIo=r(nxe," \u2014 "),eO=n(nxe,"A",{href:!0});var odt=s(eO);aIo=r(odt,"MegatronBertForNextSentencePrediction"),odt.forEach(t),nIo=r(nxe," (MegatronBert model)"),nxe.forEach(t),sIo=i(Hs),nv=n(Hs,"LI",{});var sxe=s(nv);xme=n(sxe,"STRONG",{});var rdt=s(xme);lIo=r(rdt,"mobilebert"),rdt.forEach(t),iIo=r(sxe," \u2014 "),oO=n(sxe,"A",{href:!0});var tdt=s(oO);dIo=r(tdt,"MobileBertForNextSentencePrediction"),tdt.forEach(t),cIo=r(sxe," (MobileBERT model)"),sxe.forEach(t),fIo=i(Hs),sv=n(Hs,"LI",{});var lxe=s(sv);$me=n(lxe,"STRONG",{});var adt=s($me);mIo=r(adt,"qdqbert"),adt.forEach(t),gIo=r(lxe," \u2014 "),rO=n(lxe,"A",{href:!0});var ndt=s(rO);hIo=r(ndt,"QDQBertForNextSentencePrediction"),ndt.forEach(t),pIo=r(lxe," (QDQBert model)"),lxe.forEach(t),Hs.forEach(t),uIo=i(ia),lv=n(ia,"P",{});var ixe=s(lv);_Io=r(ixe,"The model is set in evaluation mode by default using "),kme=n(ixe,"CODE",{});var sdt=s(kme);bIo=r(sdt,"model.eval()"),sdt.forEach(t),vIo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(ixe,"CODE",{});var ldt=s(Sme);FIo=r(ldt,"model.train()"),ldt.forEach(t),ixe.forEach(t),TIo=i(ia),T(iv.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),eqe=i(f),Hi=n(f,"H2",{class:!0});var aje=s(Hi);dv=n(aje,"A",{id:!0,class:!0,href:!0});var idt=s(dv);Rme=n(idt,"SPAN",{});var ddt=s(Rme);T(vy.$$.fragment,ddt),ddt.forEach(t),idt.forEach(t),MIo=i(aje),Pme=n(aje,"SPAN",{});var cdt=s(Pme);EIo=r(cdt,"AutoModelForTokenClassification"),cdt.forEach(t),aje.forEach(t),oqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(Fy.$$.fragment,Us),CIo=i(Us),Ui=n(Us,"P",{});var VK=s(Ui);wIo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tO=n(VK,"A",{href:!0});var fdt=s(tO);AIo=r(fdt,"from_pretrained()"),fdt.forEach(t),yIo=r(VK," class method or the "),aO=n(VK,"A",{href:!0});var mdt=s(aO);LIo=r(mdt,"from_config()"),mdt.forEach(t),xIo=r(VK,` class
method.`),VK.forEach(t),$Io=i(Us),Ty=n(Us,"P",{});var nje=s(Ty);kIo=r(nje,"This class cannot be instantiated directly using "),Bme=n(nje,"CODE",{});var gdt=s(Bme);SIo=r(gdt,"__init__()"),gdt.forEach(t),RIo=r(nje," (throws an error)."),nje.forEach(t),PIo=i(Us),ft=n(Us,"DIV",{class:!0});var y3=s(ft);T(My.$$.fragment,y3),BIo=i(y3),Ime=n(y3,"P",{});var hdt=s(Ime);IIo=r(hdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hdt.forEach(t),qIo=i(y3),Ji=n(y3,"P",{});var XK=s(Ji);NIo=r(XK,`Note:
Loading a model from its configuration file does `),qme=n(XK,"STRONG",{});var pdt=s(qme);jIo=r(pdt,"not"),pdt.forEach(t),DIo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(XK,"A",{href:!0});var udt=s(nO);GIo=r(udt,"from_pretrained()"),udt.forEach(t),OIo=r(XK," to load the model weights."),XK.forEach(t),VIo=i(y3),T(cv.$$.fragment,y3),y3.forEach(t),XIo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(Ey.$$.fragment,da),zIo=i(da),Nme=n(da,"P",{});var _dt=s(Nme);WIo=r(_dt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_dt.forEach(t),QIo=i(da),Ia=n(da,"P",{});var L3=s(Ia);HIo=r(L3,"The model class to instantiate is selected based on the "),jme=n(L3,"CODE",{});var bdt=s(jme);UIo=r(bdt,"model_type"),bdt.forEach(t),JIo=r(L3,` property of the config object (either
passed as an argument or loaded from `),Dme=n(L3,"CODE",{});var vdt=s(Dme);YIo=r(vdt,"pretrained_model_name_or_path"),vdt.forEach(t),KIo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(L3,"CODE",{});var Fdt=s(Gme);ZIo=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),eqo=r(L3,":"),L3.forEach(t),oqo=i(da),U=n(da,"UL",{});var J=s(U);fv=n(J,"LI",{});var dxe=s(fv);Ome=n(dxe,"STRONG",{});var Tdt=s(Ome);rqo=r(Tdt,"albert"),Tdt.forEach(t),tqo=r(dxe," \u2014 "),sO=n(dxe,"A",{href:!0});var Mdt=s(sO);aqo=r(Mdt,"AlbertForTokenClassification"),Mdt.forEach(t),nqo=r(dxe," (ALBERT model)"),dxe.forEach(t),sqo=i(J),mv=n(J,"LI",{});var cxe=s(mv);Vme=n(cxe,"STRONG",{});var Edt=s(Vme);lqo=r(Edt,"bert"),Edt.forEach(t),iqo=r(cxe," \u2014 "),lO=n(cxe,"A",{href:!0});var Cdt=s(lO);dqo=r(Cdt,"BertForTokenClassification"),Cdt.forEach(t),cqo=r(cxe," (BERT model)"),cxe.forEach(t),fqo=i(J),gv=n(J,"LI",{});var fxe=s(gv);Xme=n(fxe,"STRONG",{});var wdt=s(Xme);mqo=r(wdt,"big_bird"),wdt.forEach(t),gqo=r(fxe," \u2014 "),iO=n(fxe,"A",{href:!0});var Adt=s(iO);hqo=r(Adt,"BigBirdForTokenClassification"),Adt.forEach(t),pqo=r(fxe," (BigBird model)"),fxe.forEach(t),uqo=i(J),hv=n(J,"LI",{});var mxe=s(hv);zme=n(mxe,"STRONG",{});var ydt=s(zme);_qo=r(ydt,"camembert"),ydt.forEach(t),bqo=r(mxe," \u2014 "),dO=n(mxe,"A",{href:!0});var Ldt=s(dO);vqo=r(Ldt,"CamembertForTokenClassification"),Ldt.forEach(t),Fqo=r(mxe," (CamemBERT model)"),mxe.forEach(t),Tqo=i(J),pv=n(J,"LI",{});var gxe=s(pv);Wme=n(gxe,"STRONG",{});var xdt=s(Wme);Mqo=r(xdt,"canine"),xdt.forEach(t),Eqo=r(gxe," \u2014 "),cO=n(gxe,"A",{href:!0});var $dt=s(cO);Cqo=r($dt,"CanineForTokenClassification"),$dt.forEach(t),wqo=r(gxe," (Canine model)"),gxe.forEach(t),Aqo=i(J),uv=n(J,"LI",{});var hxe=s(uv);Qme=n(hxe,"STRONG",{});var kdt=s(Qme);yqo=r(kdt,"convbert"),kdt.forEach(t),Lqo=r(hxe," \u2014 "),fO=n(hxe,"A",{href:!0});var Sdt=s(fO);xqo=r(Sdt,"ConvBertForTokenClassification"),Sdt.forEach(t),$qo=r(hxe," (ConvBERT model)"),hxe.forEach(t),kqo=i(J),_v=n(J,"LI",{});var pxe=s(_v);Hme=n(pxe,"STRONG",{});var Rdt=s(Hme);Sqo=r(Rdt,"data2vec-text"),Rdt.forEach(t),Rqo=r(pxe," \u2014 "),mO=n(pxe,"A",{href:!0});var Pdt=s(mO);Pqo=r(Pdt,"Data2VecTextForTokenClassification"),Pdt.forEach(t),Bqo=r(pxe," (Data2VecText model)"),pxe.forEach(t),Iqo=i(J),bv=n(J,"LI",{});var uxe=s(bv);Ume=n(uxe,"STRONG",{});var Bdt=s(Ume);qqo=r(Bdt,"deberta"),Bdt.forEach(t),Nqo=r(uxe," \u2014 "),gO=n(uxe,"A",{href:!0});var Idt=s(gO);jqo=r(Idt,"DebertaForTokenClassification"),Idt.forEach(t),Dqo=r(uxe," (DeBERTa model)"),uxe.forEach(t),Gqo=i(J),vv=n(J,"LI",{});var _xe=s(vv);Jme=n(_xe,"STRONG",{});var qdt=s(Jme);Oqo=r(qdt,"deberta-v2"),qdt.forEach(t),Vqo=r(_xe," \u2014 "),hO=n(_xe,"A",{href:!0});var Ndt=s(hO);Xqo=r(Ndt,"DebertaV2ForTokenClassification"),Ndt.forEach(t),zqo=r(_xe," (DeBERTa-v2 model)"),_xe.forEach(t),Wqo=i(J),Fv=n(J,"LI",{});var bxe=s(Fv);Yme=n(bxe,"STRONG",{});var jdt=s(Yme);Qqo=r(jdt,"distilbert"),jdt.forEach(t),Hqo=r(bxe," \u2014 "),pO=n(bxe,"A",{href:!0});var Ddt=s(pO);Uqo=r(Ddt,"DistilBertForTokenClassification"),Ddt.forEach(t),Jqo=r(bxe," (DistilBERT model)"),bxe.forEach(t),Yqo=i(J),Tv=n(J,"LI",{});var vxe=s(Tv);Kme=n(vxe,"STRONG",{});var Gdt=s(Kme);Kqo=r(Gdt,"electra"),Gdt.forEach(t),Zqo=r(vxe," \u2014 "),uO=n(vxe,"A",{href:!0});var Odt=s(uO);eNo=r(Odt,"ElectraForTokenClassification"),Odt.forEach(t),oNo=r(vxe," (ELECTRA model)"),vxe.forEach(t),rNo=i(J),Mv=n(J,"LI",{});var Fxe=s(Mv);Zme=n(Fxe,"STRONG",{});var Vdt=s(Zme);tNo=r(Vdt,"flaubert"),Vdt.forEach(t),aNo=r(Fxe," \u2014 "),_O=n(Fxe,"A",{href:!0});var Xdt=s(_O);nNo=r(Xdt,"FlaubertForTokenClassification"),Xdt.forEach(t),sNo=r(Fxe," (FlauBERT model)"),Fxe.forEach(t),lNo=i(J),Ev=n(J,"LI",{});var Txe=s(Ev);ege=n(Txe,"STRONG",{});var zdt=s(ege);iNo=r(zdt,"fnet"),zdt.forEach(t),dNo=r(Txe," \u2014 "),bO=n(Txe,"A",{href:!0});var Wdt=s(bO);cNo=r(Wdt,"FNetForTokenClassification"),Wdt.forEach(t),fNo=r(Txe," (FNet model)"),Txe.forEach(t),mNo=i(J),Cv=n(J,"LI",{});var Mxe=s(Cv);oge=n(Mxe,"STRONG",{});var Qdt=s(oge);gNo=r(Qdt,"funnel"),Qdt.forEach(t),hNo=r(Mxe," \u2014 "),vO=n(Mxe,"A",{href:!0});var Hdt=s(vO);pNo=r(Hdt,"FunnelForTokenClassification"),Hdt.forEach(t),uNo=r(Mxe," (Funnel Transformer model)"),Mxe.forEach(t),_No=i(J),wv=n(J,"LI",{});var Exe=s(wv);rge=n(Exe,"STRONG",{});var Udt=s(rge);bNo=r(Udt,"gpt2"),Udt.forEach(t),vNo=r(Exe," \u2014 "),FO=n(Exe,"A",{href:!0});var Jdt=s(FO);FNo=r(Jdt,"GPT2ForTokenClassification"),Jdt.forEach(t),TNo=r(Exe," (OpenAI GPT-2 model)"),Exe.forEach(t),MNo=i(J),Av=n(J,"LI",{});var Cxe=s(Av);tge=n(Cxe,"STRONG",{});var Ydt=s(tge);ENo=r(Ydt,"ibert"),Ydt.forEach(t),CNo=r(Cxe," \u2014 "),TO=n(Cxe,"A",{href:!0});var Kdt=s(TO);wNo=r(Kdt,"IBertForTokenClassification"),Kdt.forEach(t),ANo=r(Cxe," (I-BERT model)"),Cxe.forEach(t),yNo=i(J),yv=n(J,"LI",{});var wxe=s(yv);age=n(wxe,"STRONG",{});var Zdt=s(age);LNo=r(Zdt,"layoutlm"),Zdt.forEach(t),xNo=r(wxe," \u2014 "),MO=n(wxe,"A",{href:!0});var ect=s(MO);$No=r(ect,"LayoutLMForTokenClassification"),ect.forEach(t),kNo=r(wxe," (LayoutLM model)"),wxe.forEach(t),SNo=i(J),Lv=n(J,"LI",{});var Axe=s(Lv);nge=n(Axe,"STRONG",{});var oct=s(nge);RNo=r(oct,"layoutlmv2"),oct.forEach(t),PNo=r(Axe," \u2014 "),EO=n(Axe,"A",{href:!0});var rct=s(EO);BNo=r(rct,"LayoutLMv2ForTokenClassification"),rct.forEach(t),INo=r(Axe," (LayoutLMv2 model)"),Axe.forEach(t),qNo=i(J),xv=n(J,"LI",{});var yxe=s(xv);sge=n(yxe,"STRONG",{});var tct=s(sge);NNo=r(tct,"longformer"),tct.forEach(t),jNo=r(yxe," \u2014 "),CO=n(yxe,"A",{href:!0});var act=s(CO);DNo=r(act,"LongformerForTokenClassification"),act.forEach(t),GNo=r(yxe," (Longformer model)"),yxe.forEach(t),ONo=i(J),$v=n(J,"LI",{});var Lxe=s($v);lge=n(Lxe,"STRONG",{});var nct=s(lge);VNo=r(nct,"megatron-bert"),nct.forEach(t),XNo=r(Lxe," \u2014 "),wO=n(Lxe,"A",{href:!0});var sct=s(wO);zNo=r(sct,"MegatronBertForTokenClassification"),sct.forEach(t),WNo=r(Lxe," (MegatronBert model)"),Lxe.forEach(t),QNo=i(J),kv=n(J,"LI",{});var xxe=s(kv);ige=n(xxe,"STRONG",{});var lct=s(ige);HNo=r(lct,"mobilebert"),lct.forEach(t),UNo=r(xxe," \u2014 "),AO=n(xxe,"A",{href:!0});var ict=s(AO);JNo=r(ict,"MobileBertForTokenClassification"),ict.forEach(t),YNo=r(xxe," (MobileBERT model)"),xxe.forEach(t),KNo=i(J),Sv=n(J,"LI",{});var $xe=s(Sv);dge=n($xe,"STRONG",{});var dct=s(dge);ZNo=r(dct,"mpnet"),dct.forEach(t),ejo=r($xe," \u2014 "),yO=n($xe,"A",{href:!0});var cct=s(yO);ojo=r(cct,"MPNetForTokenClassification"),cct.forEach(t),rjo=r($xe," (MPNet model)"),$xe.forEach(t),tjo=i(J),Rv=n(J,"LI",{});var kxe=s(Rv);cge=n(kxe,"STRONG",{});var fct=s(cge);ajo=r(fct,"nystromformer"),fct.forEach(t),njo=r(kxe," \u2014 "),LO=n(kxe,"A",{href:!0});var mct=s(LO);sjo=r(mct,"NystromformerForTokenClassification"),mct.forEach(t),ljo=r(kxe," (Nystromformer model)"),kxe.forEach(t),ijo=i(J),Pv=n(J,"LI",{});var Sxe=s(Pv);fge=n(Sxe,"STRONG",{});var gct=s(fge);djo=r(gct,"qdqbert"),gct.forEach(t),cjo=r(Sxe," \u2014 "),xO=n(Sxe,"A",{href:!0});var hct=s(xO);fjo=r(hct,"QDQBertForTokenClassification"),hct.forEach(t),mjo=r(Sxe," (QDQBert model)"),Sxe.forEach(t),gjo=i(J),Bv=n(J,"LI",{});var Rxe=s(Bv);mge=n(Rxe,"STRONG",{});var pct=s(mge);hjo=r(pct,"rembert"),pct.forEach(t),pjo=r(Rxe," \u2014 "),$O=n(Rxe,"A",{href:!0});var uct=s($O);ujo=r(uct,"RemBertForTokenClassification"),uct.forEach(t),_jo=r(Rxe," (RemBERT model)"),Rxe.forEach(t),bjo=i(J),Iv=n(J,"LI",{});var Pxe=s(Iv);gge=n(Pxe,"STRONG",{});var _ct=s(gge);vjo=r(_ct,"roberta"),_ct.forEach(t),Fjo=r(Pxe," \u2014 "),kO=n(Pxe,"A",{href:!0});var bct=s(kO);Tjo=r(bct,"RobertaForTokenClassification"),bct.forEach(t),Mjo=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),Ejo=i(J),qv=n(J,"LI",{});var Bxe=s(qv);hge=n(Bxe,"STRONG",{});var vct=s(hge);Cjo=r(vct,"roformer"),vct.forEach(t),wjo=r(Bxe," \u2014 "),SO=n(Bxe,"A",{href:!0});var Fct=s(SO);Ajo=r(Fct,"RoFormerForTokenClassification"),Fct.forEach(t),yjo=r(Bxe," (RoFormer model)"),Bxe.forEach(t),Ljo=i(J),Nv=n(J,"LI",{});var Ixe=s(Nv);pge=n(Ixe,"STRONG",{});var Tct=s(pge);xjo=r(Tct,"squeezebert"),Tct.forEach(t),$jo=r(Ixe," \u2014 "),RO=n(Ixe,"A",{href:!0});var Mct=s(RO);kjo=r(Mct,"SqueezeBertForTokenClassification"),Mct.forEach(t),Sjo=r(Ixe," (SqueezeBERT model)"),Ixe.forEach(t),Rjo=i(J),jv=n(J,"LI",{});var qxe=s(jv);uge=n(qxe,"STRONG",{});var Ect=s(uge);Pjo=r(Ect,"xlm"),Ect.forEach(t),Bjo=r(qxe," \u2014 "),PO=n(qxe,"A",{href:!0});var Cct=s(PO);Ijo=r(Cct,"XLMForTokenClassification"),Cct.forEach(t),qjo=r(qxe," (XLM model)"),qxe.forEach(t),Njo=i(J),Dv=n(J,"LI",{});var Nxe=s(Dv);_ge=n(Nxe,"STRONG",{});var wct=s(_ge);jjo=r(wct,"xlm-roberta"),wct.forEach(t),Djo=r(Nxe," \u2014 "),BO=n(Nxe,"A",{href:!0});var Act=s(BO);Gjo=r(Act,"XLMRobertaForTokenClassification"),Act.forEach(t),Ojo=r(Nxe," (XLM-RoBERTa model)"),Nxe.forEach(t),Vjo=i(J),Gv=n(J,"LI",{});var jxe=s(Gv);bge=n(jxe,"STRONG",{});var yct=s(bge);Xjo=r(yct,"xlm-roberta-xl"),yct.forEach(t),zjo=r(jxe," \u2014 "),IO=n(jxe,"A",{href:!0});var Lct=s(IO);Wjo=r(Lct,"XLMRobertaXLForTokenClassification"),Lct.forEach(t),Qjo=r(jxe," (XLM-RoBERTa-XL model)"),jxe.forEach(t),Hjo=i(J),Ov=n(J,"LI",{});var Dxe=s(Ov);vge=n(Dxe,"STRONG",{});var xct=s(vge);Ujo=r(xct,"xlnet"),xct.forEach(t),Jjo=r(Dxe," \u2014 "),qO=n(Dxe,"A",{href:!0});var $ct=s(qO);Yjo=r($ct,"XLNetForTokenClassification"),$ct.forEach(t),Kjo=r(Dxe," (XLNet model)"),Dxe.forEach(t),Zjo=i(J),Vv=n(J,"LI",{});var Gxe=s(Vv);Fge=n(Gxe,"STRONG",{});var kct=s(Fge);eDo=r(kct,"yoso"),kct.forEach(t),oDo=r(Gxe," \u2014 "),NO=n(Gxe,"A",{href:!0});var Sct=s(NO);rDo=r(Sct,"YosoForTokenClassification"),Sct.forEach(t),tDo=r(Gxe," (YOSO model)"),Gxe.forEach(t),J.forEach(t),aDo=i(da),Xv=n(da,"P",{});var Oxe=s(Xv);nDo=r(Oxe,"The model is set in evaluation mode by default using "),Tge=n(Oxe,"CODE",{});var Rct=s(Tge);sDo=r(Rct,"model.eval()"),Rct.forEach(t),lDo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(Oxe,"CODE",{});var Pct=s(Mge);iDo=r(Pct,"model.train()"),Pct.forEach(t),Oxe.forEach(t),dDo=i(da),T(zv.$$.fragment,da),da.forEach(t),Us.forEach(t),rqe=i(f),Yi=n(f,"H2",{class:!0});var sje=s(Yi);Wv=n(sje,"A",{id:!0,class:!0,href:!0});var Bct=s(Wv);Ege=n(Bct,"SPAN",{});var Ict=s(Ege);T(Cy.$$.fragment,Ict),Ict.forEach(t),Bct.forEach(t),cDo=i(sje),Cge=n(sje,"SPAN",{});var qct=s(Cge);fDo=r(qct,"AutoModelForQuestionAnswering"),qct.forEach(t),sje.forEach(t),tqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(wy.$$.fragment,Js),mDo=i(Js),Ki=n(Js,"P",{});var zK=s(Ki);gDo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jO=n(zK,"A",{href:!0});var Nct=s(jO);hDo=r(Nct,"from_pretrained()"),Nct.forEach(t),pDo=r(zK," class method or the "),DO=n(zK,"A",{href:!0});var jct=s(DO);uDo=r(jct,"from_config()"),jct.forEach(t),_Do=r(zK,` class
method.`),zK.forEach(t),bDo=i(Js),Ay=n(Js,"P",{});var lje=s(Ay);vDo=r(lje,"This class cannot be instantiated directly using "),wge=n(lje,"CODE",{});var Dct=s(wge);FDo=r(Dct,"__init__()"),Dct.forEach(t),TDo=r(lje," (throws an error)."),lje.forEach(t),MDo=i(Js),mt=n(Js,"DIV",{class:!0});var x3=s(mt);T(yy.$$.fragment,x3),EDo=i(x3),Age=n(x3,"P",{});var Gct=s(Age);CDo=r(Gct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gct.forEach(t),wDo=i(x3),Zi=n(x3,"P",{});var WK=s(Zi);ADo=r(WK,`Note:
Loading a model from its configuration file does `),yge=n(WK,"STRONG",{});var Oct=s(yge);yDo=r(Oct,"not"),Oct.forEach(t),LDo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(WK,"A",{href:!0});var Vct=s(GO);xDo=r(Vct,"from_pretrained()"),Vct.forEach(t),$Do=r(WK," to load the model weights."),WK.forEach(t),kDo=i(x3),T(Qv.$$.fragment,x3),x3.forEach(t),SDo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(Ly.$$.fragment,ca),RDo=i(ca),Lge=n(ca,"P",{});var Xct=s(Lge);PDo=r(Xct,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xct.forEach(t),BDo=i(ca),qa=n(ca,"P",{});var $3=s(qa);IDo=r($3,"The model class to instantiate is selected based on the "),xge=n($3,"CODE",{});var zct=s(xge);qDo=r(zct,"model_type"),zct.forEach(t),NDo=r($3,` property of the config object (either
passed as an argument or loaded from `),$ge=n($3,"CODE",{});var Wct=s($ge);jDo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),DDo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n($3,"CODE",{});var Qct=s(kge);GDo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),ODo=r($3,":"),$3.forEach(t),VDo=i(ca),V=n(ca,"UL",{});var X=s(V);Hv=n(X,"LI",{});var Vxe=s(Hv);Sge=n(Vxe,"STRONG",{});var Hct=s(Sge);XDo=r(Hct,"albert"),Hct.forEach(t),zDo=r(Vxe," \u2014 "),OO=n(Vxe,"A",{href:!0});var Uct=s(OO);WDo=r(Uct,"AlbertForQuestionAnswering"),Uct.forEach(t),QDo=r(Vxe," (ALBERT model)"),Vxe.forEach(t),HDo=i(X),Uv=n(X,"LI",{});var Xxe=s(Uv);Rge=n(Xxe,"STRONG",{});var Jct=s(Rge);UDo=r(Jct,"bart"),Jct.forEach(t),JDo=r(Xxe," \u2014 "),VO=n(Xxe,"A",{href:!0});var Yct=s(VO);YDo=r(Yct,"BartForQuestionAnswering"),Yct.forEach(t),KDo=r(Xxe," (BART model)"),Xxe.forEach(t),ZDo=i(X),Jv=n(X,"LI",{});var zxe=s(Jv);Pge=n(zxe,"STRONG",{});var Kct=s(Pge);eGo=r(Kct,"bert"),Kct.forEach(t),oGo=r(zxe," \u2014 "),XO=n(zxe,"A",{href:!0});var Zct=s(XO);rGo=r(Zct,"BertForQuestionAnswering"),Zct.forEach(t),tGo=r(zxe," (BERT model)"),zxe.forEach(t),aGo=i(X),Yv=n(X,"LI",{});var Wxe=s(Yv);Bge=n(Wxe,"STRONG",{});var eft=s(Bge);nGo=r(eft,"big_bird"),eft.forEach(t),sGo=r(Wxe," \u2014 "),zO=n(Wxe,"A",{href:!0});var oft=s(zO);lGo=r(oft,"BigBirdForQuestionAnswering"),oft.forEach(t),iGo=r(Wxe," (BigBird model)"),Wxe.forEach(t),dGo=i(X),Kv=n(X,"LI",{});var Qxe=s(Kv);Ige=n(Qxe,"STRONG",{});var rft=s(Ige);cGo=r(rft,"bigbird_pegasus"),rft.forEach(t),fGo=r(Qxe," \u2014 "),WO=n(Qxe,"A",{href:!0});var tft=s(WO);mGo=r(tft,"BigBirdPegasusForQuestionAnswering"),tft.forEach(t),gGo=r(Qxe," (BigBirdPegasus model)"),Qxe.forEach(t),hGo=i(X),Zv=n(X,"LI",{});var Hxe=s(Zv);qge=n(Hxe,"STRONG",{});var aft=s(qge);pGo=r(aft,"camembert"),aft.forEach(t),uGo=r(Hxe," \u2014 "),QO=n(Hxe,"A",{href:!0});var nft=s(QO);_Go=r(nft,"CamembertForQuestionAnswering"),nft.forEach(t),bGo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),vGo=i(X),eF=n(X,"LI",{});var Uxe=s(eF);Nge=n(Uxe,"STRONG",{});var sft=s(Nge);FGo=r(sft,"canine"),sft.forEach(t),TGo=r(Uxe," \u2014 "),HO=n(Uxe,"A",{href:!0});var lft=s(HO);MGo=r(lft,"CanineForQuestionAnswering"),lft.forEach(t),EGo=r(Uxe," (Canine model)"),Uxe.forEach(t),CGo=i(X),oF=n(X,"LI",{});var Jxe=s(oF);jge=n(Jxe,"STRONG",{});var ift=s(jge);wGo=r(ift,"convbert"),ift.forEach(t),AGo=r(Jxe," \u2014 "),UO=n(Jxe,"A",{href:!0});var dft=s(UO);yGo=r(dft,"ConvBertForQuestionAnswering"),dft.forEach(t),LGo=r(Jxe," (ConvBERT model)"),Jxe.forEach(t),xGo=i(X),rF=n(X,"LI",{});var Yxe=s(rF);Dge=n(Yxe,"STRONG",{});var cft=s(Dge);$Go=r(cft,"data2vec-text"),cft.forEach(t),kGo=r(Yxe," \u2014 "),JO=n(Yxe,"A",{href:!0});var fft=s(JO);SGo=r(fft,"Data2VecTextForQuestionAnswering"),fft.forEach(t),RGo=r(Yxe," (Data2VecText model)"),Yxe.forEach(t),PGo=i(X),tF=n(X,"LI",{});var Kxe=s(tF);Gge=n(Kxe,"STRONG",{});var mft=s(Gge);BGo=r(mft,"deberta"),mft.forEach(t),IGo=r(Kxe," \u2014 "),YO=n(Kxe,"A",{href:!0});var gft=s(YO);qGo=r(gft,"DebertaForQuestionAnswering"),gft.forEach(t),NGo=r(Kxe," (DeBERTa model)"),Kxe.forEach(t),jGo=i(X),aF=n(X,"LI",{});var Zxe=s(aF);Oge=n(Zxe,"STRONG",{});var hft=s(Oge);DGo=r(hft,"deberta-v2"),hft.forEach(t),GGo=r(Zxe," \u2014 "),KO=n(Zxe,"A",{href:!0});var pft=s(KO);OGo=r(pft,"DebertaV2ForQuestionAnswering"),pft.forEach(t),VGo=r(Zxe," (DeBERTa-v2 model)"),Zxe.forEach(t),XGo=i(X),nF=n(X,"LI",{});var e9e=s(nF);Vge=n(e9e,"STRONG",{});var uft=s(Vge);zGo=r(uft,"distilbert"),uft.forEach(t),WGo=r(e9e," \u2014 "),ZO=n(e9e,"A",{href:!0});var _ft=s(ZO);QGo=r(_ft,"DistilBertForQuestionAnswering"),_ft.forEach(t),HGo=r(e9e," (DistilBERT model)"),e9e.forEach(t),UGo=i(X),sF=n(X,"LI",{});var o9e=s(sF);Xge=n(o9e,"STRONG",{});var bft=s(Xge);JGo=r(bft,"electra"),bft.forEach(t),YGo=r(o9e," \u2014 "),eV=n(o9e,"A",{href:!0});var vft=s(eV);KGo=r(vft,"ElectraForQuestionAnswering"),vft.forEach(t),ZGo=r(o9e," (ELECTRA model)"),o9e.forEach(t),eOo=i(X),lF=n(X,"LI",{});var r9e=s(lF);zge=n(r9e,"STRONG",{});var Fft=s(zge);oOo=r(Fft,"flaubert"),Fft.forEach(t),rOo=r(r9e," \u2014 "),oV=n(r9e,"A",{href:!0});var Tft=s(oV);tOo=r(Tft,"FlaubertForQuestionAnsweringSimple"),Tft.forEach(t),aOo=r(r9e," (FlauBERT model)"),r9e.forEach(t),nOo=i(X),iF=n(X,"LI",{});var t9e=s(iF);Wge=n(t9e,"STRONG",{});var Mft=s(Wge);sOo=r(Mft,"fnet"),Mft.forEach(t),lOo=r(t9e," \u2014 "),rV=n(t9e,"A",{href:!0});var Eft=s(rV);iOo=r(Eft,"FNetForQuestionAnswering"),Eft.forEach(t),dOo=r(t9e," (FNet model)"),t9e.forEach(t),cOo=i(X),dF=n(X,"LI",{});var a9e=s(dF);Qge=n(a9e,"STRONG",{});var Cft=s(Qge);fOo=r(Cft,"funnel"),Cft.forEach(t),mOo=r(a9e," \u2014 "),tV=n(a9e,"A",{href:!0});var wft=s(tV);gOo=r(wft,"FunnelForQuestionAnswering"),wft.forEach(t),hOo=r(a9e," (Funnel Transformer model)"),a9e.forEach(t),pOo=i(X),cF=n(X,"LI",{});var n9e=s(cF);Hge=n(n9e,"STRONG",{});var Aft=s(Hge);uOo=r(Aft,"gptj"),Aft.forEach(t),_Oo=r(n9e," \u2014 "),aV=n(n9e,"A",{href:!0});var yft=s(aV);bOo=r(yft,"GPTJForQuestionAnswering"),yft.forEach(t),vOo=r(n9e," (GPT-J model)"),n9e.forEach(t),FOo=i(X),fF=n(X,"LI",{});var s9e=s(fF);Uge=n(s9e,"STRONG",{});var Lft=s(Uge);TOo=r(Lft,"ibert"),Lft.forEach(t),MOo=r(s9e," \u2014 "),nV=n(s9e,"A",{href:!0});var xft=s(nV);EOo=r(xft,"IBertForQuestionAnswering"),xft.forEach(t),COo=r(s9e," (I-BERT model)"),s9e.forEach(t),wOo=i(X),mF=n(X,"LI",{});var l9e=s(mF);Jge=n(l9e,"STRONG",{});var $ft=s(Jge);AOo=r($ft,"layoutlmv2"),$ft.forEach(t),yOo=r(l9e," \u2014 "),sV=n(l9e,"A",{href:!0});var kft=s(sV);LOo=r(kft,"LayoutLMv2ForQuestionAnswering"),kft.forEach(t),xOo=r(l9e," (LayoutLMv2 model)"),l9e.forEach(t),$Oo=i(X),gF=n(X,"LI",{});var i9e=s(gF);Yge=n(i9e,"STRONG",{});var Sft=s(Yge);kOo=r(Sft,"led"),Sft.forEach(t),SOo=r(i9e," \u2014 "),lV=n(i9e,"A",{href:!0});var Rft=s(lV);ROo=r(Rft,"LEDForQuestionAnswering"),Rft.forEach(t),POo=r(i9e," (LED model)"),i9e.forEach(t),BOo=i(X),hF=n(X,"LI",{});var d9e=s(hF);Kge=n(d9e,"STRONG",{});var Pft=s(Kge);IOo=r(Pft,"longformer"),Pft.forEach(t),qOo=r(d9e," \u2014 "),iV=n(d9e,"A",{href:!0});var Bft=s(iV);NOo=r(Bft,"LongformerForQuestionAnswering"),Bft.forEach(t),jOo=r(d9e," (Longformer model)"),d9e.forEach(t),DOo=i(X),pF=n(X,"LI",{});var c9e=s(pF);Zge=n(c9e,"STRONG",{});var Ift=s(Zge);GOo=r(Ift,"lxmert"),Ift.forEach(t),OOo=r(c9e," \u2014 "),dV=n(c9e,"A",{href:!0});var qft=s(dV);VOo=r(qft,"LxmertForQuestionAnswering"),qft.forEach(t),XOo=r(c9e," (LXMERT model)"),c9e.forEach(t),zOo=i(X),uF=n(X,"LI",{});var f9e=s(uF);ehe=n(f9e,"STRONG",{});var Nft=s(ehe);WOo=r(Nft,"mbart"),Nft.forEach(t),QOo=r(f9e," \u2014 "),cV=n(f9e,"A",{href:!0});var jft=s(cV);HOo=r(jft,"MBartForQuestionAnswering"),jft.forEach(t),UOo=r(f9e," (mBART model)"),f9e.forEach(t),JOo=i(X),_F=n(X,"LI",{});var m9e=s(_F);ohe=n(m9e,"STRONG",{});var Dft=s(ohe);YOo=r(Dft,"megatron-bert"),Dft.forEach(t),KOo=r(m9e," \u2014 "),fV=n(m9e,"A",{href:!0});var Gft=s(fV);ZOo=r(Gft,"MegatronBertForQuestionAnswering"),Gft.forEach(t),eVo=r(m9e," (MegatronBert model)"),m9e.forEach(t),oVo=i(X),bF=n(X,"LI",{});var g9e=s(bF);rhe=n(g9e,"STRONG",{});var Oft=s(rhe);rVo=r(Oft,"mobilebert"),Oft.forEach(t),tVo=r(g9e," \u2014 "),mV=n(g9e,"A",{href:!0});var Vft=s(mV);aVo=r(Vft,"MobileBertForQuestionAnswering"),Vft.forEach(t),nVo=r(g9e," (MobileBERT model)"),g9e.forEach(t),sVo=i(X),vF=n(X,"LI",{});var h9e=s(vF);the=n(h9e,"STRONG",{});var Xft=s(the);lVo=r(Xft,"mpnet"),Xft.forEach(t),iVo=r(h9e," \u2014 "),gV=n(h9e,"A",{href:!0});var zft=s(gV);dVo=r(zft,"MPNetForQuestionAnswering"),zft.forEach(t),cVo=r(h9e," (MPNet model)"),h9e.forEach(t),fVo=i(X),FF=n(X,"LI",{});var p9e=s(FF);ahe=n(p9e,"STRONG",{});var Wft=s(ahe);mVo=r(Wft,"nystromformer"),Wft.forEach(t),gVo=r(p9e," \u2014 "),hV=n(p9e,"A",{href:!0});var Qft=s(hV);hVo=r(Qft,"NystromformerForQuestionAnswering"),Qft.forEach(t),pVo=r(p9e," (Nystromformer model)"),p9e.forEach(t),uVo=i(X),TF=n(X,"LI",{});var u9e=s(TF);nhe=n(u9e,"STRONG",{});var Hft=s(nhe);_Vo=r(Hft,"qdqbert"),Hft.forEach(t),bVo=r(u9e," \u2014 "),pV=n(u9e,"A",{href:!0});var Uft=s(pV);vVo=r(Uft,"QDQBertForQuestionAnswering"),Uft.forEach(t),FVo=r(u9e," (QDQBert model)"),u9e.forEach(t),TVo=i(X),MF=n(X,"LI",{});var _9e=s(MF);she=n(_9e,"STRONG",{});var Jft=s(she);MVo=r(Jft,"reformer"),Jft.forEach(t),EVo=r(_9e," \u2014 "),uV=n(_9e,"A",{href:!0});var Yft=s(uV);CVo=r(Yft,"ReformerForQuestionAnswering"),Yft.forEach(t),wVo=r(_9e," (Reformer model)"),_9e.forEach(t),AVo=i(X),EF=n(X,"LI",{});var b9e=s(EF);lhe=n(b9e,"STRONG",{});var Kft=s(lhe);yVo=r(Kft,"rembert"),Kft.forEach(t),LVo=r(b9e," \u2014 "),_V=n(b9e,"A",{href:!0});var Zft=s(_V);xVo=r(Zft,"RemBertForQuestionAnswering"),Zft.forEach(t),$Vo=r(b9e," (RemBERT model)"),b9e.forEach(t),kVo=i(X),CF=n(X,"LI",{});var v9e=s(CF);ihe=n(v9e,"STRONG",{});var emt=s(ihe);SVo=r(emt,"roberta"),emt.forEach(t),RVo=r(v9e," \u2014 "),bV=n(v9e,"A",{href:!0});var omt=s(bV);PVo=r(omt,"RobertaForQuestionAnswering"),omt.forEach(t),BVo=r(v9e," (RoBERTa model)"),v9e.forEach(t),IVo=i(X),wF=n(X,"LI",{});var F9e=s(wF);dhe=n(F9e,"STRONG",{});var rmt=s(dhe);qVo=r(rmt,"roformer"),rmt.forEach(t),NVo=r(F9e," \u2014 "),vV=n(F9e,"A",{href:!0});var tmt=s(vV);jVo=r(tmt,"RoFormerForQuestionAnswering"),tmt.forEach(t),DVo=r(F9e," (RoFormer model)"),F9e.forEach(t),GVo=i(X),AF=n(X,"LI",{});var T9e=s(AF);che=n(T9e,"STRONG",{});var amt=s(che);OVo=r(amt,"splinter"),amt.forEach(t),VVo=r(T9e," \u2014 "),FV=n(T9e,"A",{href:!0});var nmt=s(FV);XVo=r(nmt,"SplinterForQuestionAnswering"),nmt.forEach(t),zVo=r(T9e," (Splinter model)"),T9e.forEach(t),WVo=i(X),yF=n(X,"LI",{});var M9e=s(yF);fhe=n(M9e,"STRONG",{});var smt=s(fhe);QVo=r(smt,"squeezebert"),smt.forEach(t),HVo=r(M9e," \u2014 "),TV=n(M9e,"A",{href:!0});var lmt=s(TV);UVo=r(lmt,"SqueezeBertForQuestionAnswering"),lmt.forEach(t),JVo=r(M9e," (SqueezeBERT model)"),M9e.forEach(t),YVo=i(X),LF=n(X,"LI",{});var E9e=s(LF);mhe=n(E9e,"STRONG",{});var imt=s(mhe);KVo=r(imt,"xlm"),imt.forEach(t),ZVo=r(E9e," \u2014 "),MV=n(E9e,"A",{href:!0});var dmt=s(MV);eXo=r(dmt,"XLMForQuestionAnsweringSimple"),dmt.forEach(t),oXo=r(E9e," (XLM model)"),E9e.forEach(t),rXo=i(X),xF=n(X,"LI",{});var C9e=s(xF);ghe=n(C9e,"STRONG",{});var cmt=s(ghe);tXo=r(cmt,"xlm-roberta"),cmt.forEach(t),aXo=r(C9e," \u2014 "),EV=n(C9e,"A",{href:!0});var fmt=s(EV);nXo=r(fmt,"XLMRobertaForQuestionAnswering"),fmt.forEach(t),sXo=r(C9e," (XLM-RoBERTa model)"),C9e.forEach(t),lXo=i(X),$F=n(X,"LI",{});var w9e=s($F);hhe=n(w9e,"STRONG",{});var mmt=s(hhe);iXo=r(mmt,"xlm-roberta-xl"),mmt.forEach(t),dXo=r(w9e," \u2014 "),CV=n(w9e,"A",{href:!0});var gmt=s(CV);cXo=r(gmt,"XLMRobertaXLForQuestionAnswering"),gmt.forEach(t),fXo=r(w9e," (XLM-RoBERTa-XL model)"),w9e.forEach(t),mXo=i(X),kF=n(X,"LI",{});var A9e=s(kF);phe=n(A9e,"STRONG",{});var hmt=s(phe);gXo=r(hmt,"xlnet"),hmt.forEach(t),hXo=r(A9e," \u2014 "),wV=n(A9e,"A",{href:!0});var pmt=s(wV);pXo=r(pmt,"XLNetForQuestionAnsweringSimple"),pmt.forEach(t),uXo=r(A9e," (XLNet model)"),A9e.forEach(t),_Xo=i(X),SF=n(X,"LI",{});var y9e=s(SF);uhe=n(y9e,"STRONG",{});var umt=s(uhe);bXo=r(umt,"yoso"),umt.forEach(t),vXo=r(y9e," \u2014 "),AV=n(y9e,"A",{href:!0});var _mt=s(AV);FXo=r(_mt,"YosoForQuestionAnswering"),_mt.forEach(t),TXo=r(y9e," (YOSO model)"),y9e.forEach(t),X.forEach(t),MXo=i(ca),RF=n(ca,"P",{});var L9e=s(RF);EXo=r(L9e,"The model is set in evaluation mode by default using "),_he=n(L9e,"CODE",{});var bmt=s(_he);CXo=r(bmt,"model.eval()"),bmt.forEach(t),wXo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(L9e,"CODE",{});var vmt=s(bhe);AXo=r(vmt,"model.train()"),vmt.forEach(t),L9e.forEach(t),yXo=i(ca),T(PF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),aqe=i(f),ed=n(f,"H2",{class:!0});var ije=s(ed);BF=n(ije,"A",{id:!0,class:!0,href:!0});var Fmt=s(BF);vhe=n(Fmt,"SPAN",{});var Tmt=s(vhe);T(xy.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),LXo=i(ije),Fhe=n(ije,"SPAN",{});var Mmt=s(Fhe);xXo=r(Mmt,"AutoModelForTableQuestionAnswering"),Mmt.forEach(t),ije.forEach(t),nqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T($y.$$.fragment,Ys),$Xo=i(Ys),od=n(Ys,"P",{});var QK=s(od);kXo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yV=n(QK,"A",{href:!0});var Emt=s(yV);SXo=r(Emt,"from_pretrained()"),Emt.forEach(t),RXo=r(QK," class method or the "),LV=n(QK,"A",{href:!0});var Cmt=s(LV);PXo=r(Cmt,"from_config()"),Cmt.forEach(t),BXo=r(QK,` class
method.`),QK.forEach(t),IXo=i(Ys),ky=n(Ys,"P",{});var dje=s(ky);qXo=r(dje,"This class cannot be instantiated directly using "),The=n(dje,"CODE",{});var wmt=s(The);NXo=r(wmt,"__init__()"),wmt.forEach(t),jXo=r(dje," (throws an error)."),dje.forEach(t),DXo=i(Ys),gt=n(Ys,"DIV",{class:!0});var k3=s(gt);T(Sy.$$.fragment,k3),GXo=i(k3),Mhe=n(k3,"P",{});var Amt=s(Mhe);OXo=r(Amt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Amt.forEach(t),VXo=i(k3),rd=n(k3,"P",{});var HK=s(rd);XXo=r(HK,`Note:
Loading a model from its configuration file does `),Ehe=n(HK,"STRONG",{});var ymt=s(Ehe);zXo=r(ymt,"not"),ymt.forEach(t),WXo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(HK,"A",{href:!0});var Lmt=s(xV);QXo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),HXo=r(HK," to load the model weights."),HK.forEach(t),UXo=i(k3),T(IF.$$.fragment,k3),k3.forEach(t),JXo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(Ry.$$.fragment,fa),YXo=i(fa),Che=n(fa,"P",{});var xmt=s(Che);KXo=r(xmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xmt.forEach(t),ZXo=i(fa),Na=n(fa,"P",{});var S3=s(Na);ezo=r(S3,"The model class to instantiate is selected based on the "),whe=n(S3,"CODE",{});var $mt=s(whe);ozo=r($mt,"model_type"),$mt.forEach(t),rzo=r(S3,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(S3,"CODE",{});var kmt=s(Ahe);tzo=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),azo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(S3,"CODE",{});var Smt=s(yhe);nzo=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),szo=r(S3,":"),S3.forEach(t),lzo=i(fa),Lhe=n(fa,"UL",{});var Rmt=s(Lhe);qF=n(Rmt,"LI",{});var x9e=s(qF);xhe=n(x9e,"STRONG",{});var Pmt=s(xhe);izo=r(Pmt,"tapas"),Pmt.forEach(t),dzo=r(x9e," \u2014 "),$V=n(x9e,"A",{href:!0});var Bmt=s($V);czo=r(Bmt,"TapasForQuestionAnswering"),Bmt.forEach(t),fzo=r(x9e," (TAPAS model)"),x9e.forEach(t),Rmt.forEach(t),mzo=i(fa),NF=n(fa,"P",{});var $9e=s(NF);gzo=r($9e,"The model is set in evaluation mode by default using "),$he=n($9e,"CODE",{});var Imt=s($he);hzo=r(Imt,"model.eval()"),Imt.forEach(t),pzo=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n($9e,"CODE",{});var qmt=s(khe);uzo=r(qmt,"model.train()"),qmt.forEach(t),$9e.forEach(t),_zo=i(fa),T(jF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),sqe=i(f),td=n(f,"H2",{class:!0});var cje=s(td);DF=n(cje,"A",{id:!0,class:!0,href:!0});var Nmt=s(DF);She=n(Nmt,"SPAN",{});var jmt=s(She);T(Py.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),bzo=i(cje),Rhe=n(cje,"SPAN",{});var Dmt=s(Rhe);vzo=r(Dmt,"AutoModelForImageClassification"),Dmt.forEach(t),cje.forEach(t),lqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(By.$$.fragment,Ks),Fzo=i(Ks),ad=n(Ks,"P",{});var UK=s(ad);Tzo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kV=n(UK,"A",{href:!0});var Gmt=s(kV);Mzo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),Ezo=r(UK," class method or the "),SV=n(UK,"A",{href:!0});var Omt=s(SV);Czo=r(Omt,"from_config()"),Omt.forEach(t),wzo=r(UK,` class
method.`),UK.forEach(t),Azo=i(Ks),Iy=n(Ks,"P",{});var fje=s(Iy);yzo=r(fje,"This class cannot be instantiated directly using "),Phe=n(fje,"CODE",{});var Vmt=s(Phe);Lzo=r(Vmt,"__init__()"),Vmt.forEach(t),xzo=r(fje," (throws an error)."),fje.forEach(t),$zo=i(Ks),ht=n(Ks,"DIV",{class:!0});var R3=s(ht);T(qy.$$.fragment,R3),kzo=i(R3),Bhe=n(R3,"P",{});var Xmt=s(Bhe);Szo=r(Xmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xmt.forEach(t),Rzo=i(R3),nd=n(R3,"P",{});var JK=s(nd);Pzo=r(JK,`Note:
Loading a model from its configuration file does `),Ihe=n(JK,"STRONG",{});var zmt=s(Ihe);Bzo=r(zmt,"not"),zmt.forEach(t),Izo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(JK,"A",{href:!0});var Wmt=s(RV);qzo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),Nzo=r(JK," to load the model weights."),JK.forEach(t),jzo=i(R3),T(GF.$$.fragment,R3),R3.forEach(t),Dzo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(Ny.$$.fragment,ma),Gzo=i(ma),qhe=n(ma,"P",{});var Qmt=s(qhe);Ozo=r(Qmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qmt.forEach(t),Vzo=i(ma),ja=n(ma,"P",{});var P3=s(ja);Xzo=r(P3,"The model class to instantiate is selected based on the "),Nhe=n(P3,"CODE",{});var Hmt=s(Nhe);zzo=r(Hmt,"model_type"),Hmt.forEach(t),Wzo=r(P3,` property of the config object (either
passed as an argument or loaded from `),jhe=n(P3,"CODE",{});var Umt=s(jhe);Qzo=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),Hzo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(P3,"CODE",{});var Jmt=s(Dhe);Uzo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),Jzo=r(P3,":"),P3.forEach(t),Yzo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);OF=n(Ee,"LI",{});var k9e=s(OF);Ghe=n(k9e,"STRONG",{});var Ymt=s(Ghe);Kzo=r(Ymt,"beit"),Ymt.forEach(t),Zzo=r(k9e," \u2014 "),PV=n(k9e,"A",{href:!0});var Kmt=s(PV);eWo=r(Kmt,"BeitForImageClassification"),Kmt.forEach(t),oWo=r(k9e," (BEiT model)"),k9e.forEach(t),rWo=i(Ee),VF=n(Ee,"LI",{});var S9e=s(VF);Ohe=n(S9e,"STRONG",{});var Zmt=s(Ohe);tWo=r(Zmt,"convnext"),Zmt.forEach(t),aWo=r(S9e," \u2014 "),BV=n(S9e,"A",{href:!0});var egt=s(BV);nWo=r(egt,"ConvNextForImageClassification"),egt.forEach(t),sWo=r(S9e," (ConvNext model)"),S9e.forEach(t),lWo=i(Ee),XF=n(Ee,"LI",{});var R9e=s(XF);Vhe=n(R9e,"STRONG",{});var ogt=s(Vhe);iWo=r(ogt,"data2vec-vision"),ogt.forEach(t),dWo=r(R9e," \u2014 "),IV=n(R9e,"A",{href:!0});var rgt=s(IV);cWo=r(rgt,"Data2VecVisionForImageClassification"),rgt.forEach(t),fWo=r(R9e," (Data2VecVision model)"),R9e.forEach(t),mWo=i(Ee),Ps=n(Ee,"LI",{});var M$=s(Ps);Xhe=n(M$,"STRONG",{});var tgt=s(Xhe);gWo=r(tgt,"deit"),tgt.forEach(t),hWo=r(M$," \u2014 "),qV=n(M$,"A",{href:!0});var agt=s(qV);pWo=r(agt,"DeiTForImageClassification"),agt.forEach(t),uWo=r(M$," or "),NV=n(M$,"A",{href:!0});var ngt=s(NV);_Wo=r(ngt,"DeiTForImageClassificationWithTeacher"),ngt.forEach(t),bWo=r(M$," (DeiT model)"),M$.forEach(t),vWo=i(Ee),zF=n(Ee,"LI",{});var P9e=s(zF);zhe=n(P9e,"STRONG",{});var sgt=s(zhe);FWo=r(sgt,"imagegpt"),sgt.forEach(t),TWo=r(P9e," \u2014 "),jV=n(P9e,"A",{href:!0});var lgt=s(jV);MWo=r(lgt,"ImageGPTForImageClassification"),lgt.forEach(t),EWo=r(P9e," (ImageGPT model)"),P9e.forEach(t),CWo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);Whe=n(gf,"STRONG",{});var igt=s(Whe);wWo=r(igt,"perceiver"),igt.forEach(t),AWo=r(gf," \u2014 "),DV=n(gf,"A",{href:!0});var dgt=s(DV);yWo=r(dgt,"PerceiverForImageClassificationLearned"),dgt.forEach(t),LWo=r(gf," or "),GV=n(gf,"A",{href:!0});var cgt=s(GV);xWo=r(cgt,"PerceiverForImageClassificationFourier"),cgt.forEach(t),$Wo=r(gf," or "),OV=n(gf,"A",{href:!0});var fgt=s(OV);kWo=r(fgt,"PerceiverForImageClassificationConvProcessing"),fgt.forEach(t),SWo=r(gf," (Perceiver model)"),gf.forEach(t),RWo=i(Ee),WF=n(Ee,"LI",{});var B9e=s(WF);Qhe=n(B9e,"STRONG",{});var mgt=s(Qhe);PWo=r(mgt,"poolformer"),mgt.forEach(t),BWo=r(B9e," \u2014 "),VV=n(B9e,"A",{href:!0});var ggt=s(VV);IWo=r(ggt,"PoolFormerForImageClassification"),ggt.forEach(t),qWo=r(B9e," (PoolFormer model)"),B9e.forEach(t),NWo=i(Ee),QF=n(Ee,"LI",{});var I9e=s(QF);Hhe=n(I9e,"STRONG",{});var hgt=s(Hhe);jWo=r(hgt,"regnet"),hgt.forEach(t),DWo=r(I9e," \u2014 "),XV=n(I9e,"A",{href:!0});var pgt=s(XV);GWo=r(pgt,"RegNetForImageClassification"),pgt.forEach(t),OWo=r(I9e," (RegNet model)"),I9e.forEach(t),VWo=i(Ee),HF=n(Ee,"LI",{});var q9e=s(HF);Uhe=n(q9e,"STRONG",{});var ugt=s(Uhe);XWo=r(ugt,"resnet"),ugt.forEach(t),zWo=r(q9e," \u2014 "),zV=n(q9e,"A",{href:!0});var _gt=s(zV);WWo=r(_gt,"ResNetForImageClassification"),_gt.forEach(t),QWo=r(q9e," (ResNet model)"),q9e.forEach(t),HWo=i(Ee),UF=n(Ee,"LI",{});var N9e=s(UF);Jhe=n(N9e,"STRONG",{});var bgt=s(Jhe);UWo=r(bgt,"segformer"),bgt.forEach(t),JWo=r(N9e," \u2014 "),WV=n(N9e,"A",{href:!0});var vgt=s(WV);YWo=r(vgt,"SegformerForImageClassification"),vgt.forEach(t),KWo=r(N9e," (SegFormer model)"),N9e.forEach(t),ZWo=i(Ee),JF=n(Ee,"LI",{});var j9e=s(JF);Yhe=n(j9e,"STRONG",{});var Fgt=s(Yhe);eQo=r(Fgt,"swin"),Fgt.forEach(t),oQo=r(j9e," \u2014 "),QV=n(j9e,"A",{href:!0});var Tgt=s(QV);rQo=r(Tgt,"SwinForImageClassification"),Tgt.forEach(t),tQo=r(j9e," (Swin model)"),j9e.forEach(t),aQo=i(Ee),YF=n(Ee,"LI",{});var D9e=s(YF);Khe=n(D9e,"STRONG",{});var Mgt=s(Khe);nQo=r(Mgt,"van"),Mgt.forEach(t),sQo=r(D9e," \u2014 "),HV=n(D9e,"A",{href:!0});var Egt=s(HV);lQo=r(Egt,"VanForImageClassification"),Egt.forEach(t),iQo=r(D9e," (VAN model)"),D9e.forEach(t),dQo=i(Ee),KF=n(Ee,"LI",{});var G9e=s(KF);Zhe=n(G9e,"STRONG",{});var Cgt=s(Zhe);cQo=r(Cgt,"vit"),Cgt.forEach(t),fQo=r(G9e," \u2014 "),UV=n(G9e,"A",{href:!0});var wgt=s(UV);mQo=r(wgt,"ViTForImageClassification"),wgt.forEach(t),gQo=r(G9e," (ViT model)"),G9e.forEach(t),Ee.forEach(t),hQo=i(ma),ZF=n(ma,"P",{});var O9e=s(ZF);pQo=r(O9e,"The model is set in evaluation mode by default using "),epe=n(O9e,"CODE",{});var Agt=s(epe);uQo=r(Agt,"model.eval()"),Agt.forEach(t),_Qo=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(O9e,"CODE",{});var ygt=s(ope);bQo=r(ygt,"model.train()"),ygt.forEach(t),O9e.forEach(t),vQo=i(ma),T(e6.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),iqe=i(f),sd=n(f,"H2",{class:!0});var mje=s(sd);o6=n(mje,"A",{id:!0,class:!0,href:!0});var Lgt=s(o6);rpe=n(Lgt,"SPAN",{});var xgt=s(rpe);T(jy.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),FQo=i(mje),tpe=n(mje,"SPAN",{});var $gt=s(tpe);TQo=r($gt,"AutoModelForVision2Seq"),$gt.forEach(t),mje.forEach(t),dqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Dy.$$.fragment,Zs),MQo=i(Zs),ld=n(Zs,"P",{});var YK=s(ld);EQo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JV=n(YK,"A",{href:!0});var kgt=s(JV);CQo=r(kgt,"from_pretrained()"),kgt.forEach(t),wQo=r(YK," class method or the "),YV=n(YK,"A",{href:!0});var Sgt=s(YV);AQo=r(Sgt,"from_config()"),Sgt.forEach(t),yQo=r(YK,` class
method.`),YK.forEach(t),LQo=i(Zs),Gy=n(Zs,"P",{});var gje=s(Gy);xQo=r(gje,"This class cannot be instantiated directly using "),ape=n(gje,"CODE",{});var Rgt=s(ape);$Qo=r(Rgt,"__init__()"),Rgt.forEach(t),kQo=r(gje," (throws an error)."),gje.forEach(t),SQo=i(Zs),ut=n(Zs,"DIV",{class:!0});var B3=s(ut);T(Oy.$$.fragment,B3),RQo=i(B3),npe=n(B3,"P",{});var Pgt=s(npe);PQo=r(Pgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pgt.forEach(t),BQo=i(B3),id=n(B3,"P",{});var KK=s(id);IQo=r(KK,`Note:
Loading a model from its configuration file does `),spe=n(KK,"STRONG",{});var Bgt=s(spe);qQo=r(Bgt,"not"),Bgt.forEach(t),NQo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(KK,"A",{href:!0});var Igt=s(KV);jQo=r(Igt,"from_pretrained()"),Igt.forEach(t),DQo=r(KK," to load the model weights."),KK.forEach(t),GQo=i(B3),T(r6.$$.fragment,B3),B3.forEach(t),OQo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(Vy.$$.fragment,ga),VQo=i(ga),lpe=n(ga,"P",{});var qgt=s(lpe);XQo=r(qgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qgt.forEach(t),zQo=i(ga),Da=n(ga,"P",{});var I3=s(Da);WQo=r(I3,"The model class to instantiate is selected based on the "),ipe=n(I3,"CODE",{});var Ngt=s(ipe);QQo=r(Ngt,"model_type"),Ngt.forEach(t),HQo=r(I3,` property of the config object (either
passed as an argument or loaded from `),dpe=n(I3,"CODE",{});var jgt=s(dpe);UQo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),JQo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(I3,"CODE",{});var Dgt=s(cpe);YQo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),KQo=r(I3,":"),I3.forEach(t),ZQo=i(ga),fpe=n(ga,"UL",{});var Ggt=s(fpe);t6=n(Ggt,"LI",{});var V9e=s(t6);mpe=n(V9e,"STRONG",{});var Ogt=s(mpe);eHo=r(Ogt,"vision-encoder-decoder"),Ogt.forEach(t),oHo=r(V9e," \u2014 "),ZV=n(V9e,"A",{href:!0});var Vgt=s(ZV);rHo=r(Vgt,"VisionEncoderDecoderModel"),Vgt.forEach(t),tHo=r(V9e," (Vision Encoder decoder model)"),V9e.forEach(t),Ggt.forEach(t),aHo=i(ga),a6=n(ga,"P",{});var X9e=s(a6);nHo=r(X9e,"The model is set in evaluation mode by default using "),gpe=n(X9e,"CODE",{});var Xgt=s(gpe);sHo=r(Xgt,"model.eval()"),Xgt.forEach(t),lHo=r(X9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(X9e,"CODE",{});var zgt=s(hpe);iHo=r(zgt,"model.train()"),zgt.forEach(t),X9e.forEach(t),dHo=i(ga),T(n6.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),cqe=i(f),dd=n(f,"H2",{class:!0});var hje=s(dd);s6=n(hje,"A",{id:!0,class:!0,href:!0});var Wgt=s(s6);ppe=n(Wgt,"SPAN",{});var Qgt=s(ppe);T(Xy.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),cHo=i(hje),upe=n(hje,"SPAN",{});var Hgt=s(upe);fHo=r(Hgt,"AutoModelForAudioClassification"),Hgt.forEach(t),hje.forEach(t),fqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(zy.$$.fragment,el),mHo=i(el),cd=n(el,"P",{});var ZK=s(cd);gHo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eX=n(ZK,"A",{href:!0});var Ugt=s(eX);hHo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),pHo=r(ZK," class method or the "),oX=n(ZK,"A",{href:!0});var Jgt=s(oX);uHo=r(Jgt,"from_config()"),Jgt.forEach(t),_Ho=r(ZK,` class
method.`),ZK.forEach(t),bHo=i(el),Wy=n(el,"P",{});var pje=s(Wy);vHo=r(pje,"This class cannot be instantiated directly using "),_pe=n(pje,"CODE",{});var Ygt=s(_pe);FHo=r(Ygt,"__init__()"),Ygt.forEach(t),THo=r(pje," (throws an error)."),pje.forEach(t),MHo=i(el),_t=n(el,"DIV",{class:!0});var q3=s(_t);T(Qy.$$.fragment,q3),EHo=i(q3),bpe=n(q3,"P",{});var Kgt=s(bpe);CHo=r(Kgt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Kgt.forEach(t),wHo=i(q3),fd=n(q3,"P",{});var eZ=s(fd);AHo=r(eZ,`Note:
Loading a model from its configuration file does `),vpe=n(eZ,"STRONG",{});var Zgt=s(vpe);yHo=r(Zgt,"not"),Zgt.forEach(t),LHo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(eZ,"A",{href:!0});var eht=s(rX);xHo=r(eht,"from_pretrained()"),eht.forEach(t),$Ho=r(eZ," to load the model weights."),eZ.forEach(t),kHo=i(q3),T(l6.$$.fragment,q3),q3.forEach(t),SHo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(Hy.$$.fragment,ha),RHo=i(ha),Fpe=n(ha,"P",{});var oht=s(Fpe);PHo=r(oht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oht.forEach(t),BHo=i(ha),Ga=n(ha,"P",{});var N3=s(Ga);IHo=r(N3,"The model class to instantiate is selected based on the "),Tpe=n(N3,"CODE",{});var rht=s(Tpe);qHo=r(rht,"model_type"),rht.forEach(t),NHo=r(N3,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(N3,"CODE",{});var tht=s(Mpe);jHo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),DHo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(N3,"CODE",{});var aht=s(Epe);GHo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),OHo=r(N3,":"),N3.forEach(t),VHo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);i6=n(Oe,"LI",{});var z9e=s(i6);Cpe=n(z9e,"STRONG",{});var nht=s(Cpe);XHo=r(nht,"data2vec-audio"),nht.forEach(t),zHo=r(z9e," \u2014 "),tX=n(z9e,"A",{href:!0});var sht=s(tX);WHo=r(sht,"Data2VecAudioForSequenceClassification"),sht.forEach(t),QHo=r(z9e," (Data2VecAudio model)"),z9e.forEach(t),HHo=i(Oe),d6=n(Oe,"LI",{});var W9e=s(d6);wpe=n(W9e,"STRONG",{});var lht=s(wpe);UHo=r(lht,"hubert"),lht.forEach(t),JHo=r(W9e," \u2014 "),aX=n(W9e,"A",{href:!0});var iht=s(aX);YHo=r(iht,"HubertForSequenceClassification"),iht.forEach(t),KHo=r(W9e," (Hubert model)"),W9e.forEach(t),ZHo=i(Oe),c6=n(Oe,"LI",{});var Q9e=s(c6);Ape=n(Q9e,"STRONG",{});var dht=s(Ape);eUo=r(dht,"sew"),dht.forEach(t),oUo=r(Q9e," \u2014 "),nX=n(Q9e,"A",{href:!0});var cht=s(nX);rUo=r(cht,"SEWForSequenceClassification"),cht.forEach(t),tUo=r(Q9e," (SEW model)"),Q9e.forEach(t),aUo=i(Oe),f6=n(Oe,"LI",{});var H9e=s(f6);ype=n(H9e,"STRONG",{});var fht=s(ype);nUo=r(fht,"sew-d"),fht.forEach(t),sUo=r(H9e," \u2014 "),sX=n(H9e,"A",{href:!0});var mht=s(sX);lUo=r(mht,"SEWDForSequenceClassification"),mht.forEach(t),iUo=r(H9e," (SEW-D model)"),H9e.forEach(t),dUo=i(Oe),m6=n(Oe,"LI",{});var U9e=s(m6);Lpe=n(U9e,"STRONG",{});var ght=s(Lpe);cUo=r(ght,"unispeech"),ght.forEach(t),fUo=r(U9e," \u2014 "),lX=n(U9e,"A",{href:!0});var hht=s(lX);mUo=r(hht,"UniSpeechForSequenceClassification"),hht.forEach(t),gUo=r(U9e," (UniSpeech model)"),U9e.forEach(t),hUo=i(Oe),g6=n(Oe,"LI",{});var J9e=s(g6);xpe=n(J9e,"STRONG",{});var pht=s(xpe);pUo=r(pht,"unispeech-sat"),pht.forEach(t),uUo=r(J9e," \u2014 "),iX=n(J9e,"A",{href:!0});var uht=s(iX);_Uo=r(uht,"UniSpeechSatForSequenceClassification"),uht.forEach(t),bUo=r(J9e," (UniSpeechSat model)"),J9e.forEach(t),vUo=i(Oe),h6=n(Oe,"LI",{});var Y9e=s(h6);$pe=n(Y9e,"STRONG",{});var _ht=s($pe);FUo=r(_ht,"wav2vec2"),_ht.forEach(t),TUo=r(Y9e," \u2014 "),dX=n(Y9e,"A",{href:!0});var bht=s(dX);MUo=r(bht,"Wav2Vec2ForSequenceClassification"),bht.forEach(t),EUo=r(Y9e," (Wav2Vec2 model)"),Y9e.forEach(t),CUo=i(Oe),p6=n(Oe,"LI",{});var K9e=s(p6);kpe=n(K9e,"STRONG",{});var vht=s(kpe);wUo=r(vht,"wav2vec2-conformer"),vht.forEach(t),AUo=r(K9e," \u2014 "),cX=n(K9e,"A",{href:!0});var Fht=s(cX);yUo=r(Fht,"Wav2Vec2ConformerForSequenceClassification"),Fht.forEach(t),LUo=r(K9e," (Wav2Vec2-Conformer model)"),K9e.forEach(t),xUo=i(Oe),u6=n(Oe,"LI",{});var Z9e=s(u6);Spe=n(Z9e,"STRONG",{});var Tht=s(Spe);$Uo=r(Tht,"wavlm"),Tht.forEach(t),kUo=r(Z9e," \u2014 "),fX=n(Z9e,"A",{href:!0});var Mht=s(fX);SUo=r(Mht,"WavLMForSequenceClassification"),Mht.forEach(t),RUo=r(Z9e," (WavLM model)"),Z9e.forEach(t),Oe.forEach(t),PUo=i(ha),_6=n(ha,"P",{});var e$e=s(_6);BUo=r(e$e,"The model is set in evaluation mode by default using "),Rpe=n(e$e,"CODE",{});var Eht=s(Rpe);IUo=r(Eht,"model.eval()"),Eht.forEach(t),qUo=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=n(e$e,"CODE",{});var Cht=s(Ppe);NUo=r(Cht,"model.train()"),Cht.forEach(t),e$e.forEach(t),jUo=i(ha),T(b6.$$.fragment,ha),ha.forEach(t),el.forEach(t),mqe=i(f),md=n(f,"H2",{class:!0});var uje=s(md);v6=n(uje,"A",{id:!0,class:!0,href:!0});var wht=s(v6);Bpe=n(wht,"SPAN",{});var Aht=s(Bpe);T(Uy.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),DUo=i(uje),Ipe=n(uje,"SPAN",{});var yht=s(Ipe);GUo=r(yht,"AutoModelForAudioFrameClassification"),yht.forEach(t),uje.forEach(t),gqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(Jy.$$.fragment,ol),OUo=i(ol),gd=n(ol,"P",{});var oZ=s(gd);VUo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mX=n(oZ,"A",{href:!0});var Lht=s(mX);XUo=r(Lht,"from_pretrained()"),Lht.forEach(t),zUo=r(oZ," class method or the "),gX=n(oZ,"A",{href:!0});var xht=s(gX);WUo=r(xht,"from_config()"),xht.forEach(t),QUo=r(oZ,` class
method.`),oZ.forEach(t),HUo=i(ol),Yy=n(ol,"P",{});var _je=s(Yy);UUo=r(_je,"This class cannot be instantiated directly using "),qpe=n(_je,"CODE",{});var $ht=s(qpe);JUo=r($ht,"__init__()"),$ht.forEach(t),YUo=r(_je," (throws an error)."),_je.forEach(t),KUo=i(ol),bt=n(ol,"DIV",{class:!0});var j3=s(bt);T(Ky.$$.fragment,j3),ZUo=i(j3),Npe=n(j3,"P",{});var kht=s(Npe);eJo=r(kht,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kht.forEach(t),oJo=i(j3),hd=n(j3,"P",{});var rZ=s(hd);rJo=r(rZ,`Note:
Loading a model from its configuration file does `),jpe=n(rZ,"STRONG",{});var Sht=s(jpe);tJo=r(Sht,"not"),Sht.forEach(t),aJo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(rZ,"A",{href:!0});var Rht=s(hX);nJo=r(Rht,"from_pretrained()"),Rht.forEach(t),sJo=r(rZ," to load the model weights."),rZ.forEach(t),lJo=i(j3),T(F6.$$.fragment,j3),j3.forEach(t),iJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(Zy.$$.fragment,pa),dJo=i(pa),Dpe=n(pa,"P",{});var Pht=s(Dpe);cJo=r(Pht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Pht.forEach(t),fJo=i(pa),Oa=n(pa,"P",{});var D3=s(Oa);mJo=r(D3,"The model class to instantiate is selected based on the "),Gpe=n(D3,"CODE",{});var Bht=s(Gpe);gJo=r(Bht,"model_type"),Bht.forEach(t),hJo=r(D3,` property of the config object (either
passed as an argument or loaded from `),Ope=n(D3,"CODE",{});var Iht=s(Ope);pJo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),uJo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(D3,"CODE",{});var qht=s(Vpe);_Jo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),bJo=r(D3,":"),D3.forEach(t),vJo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);T6=n(rl,"LI",{});var o$e=s(T6);Xpe=n(o$e,"STRONG",{});var Nht=s(Xpe);FJo=r(Nht,"data2vec-audio"),Nht.forEach(t),TJo=r(o$e," \u2014 "),pX=n(o$e,"A",{href:!0});var jht=s(pX);MJo=r(jht,"Data2VecAudioForAudioFrameClassification"),jht.forEach(t),EJo=r(o$e," (Data2VecAudio model)"),o$e.forEach(t),CJo=i(rl),M6=n(rl,"LI",{});var r$e=s(M6);zpe=n(r$e,"STRONG",{});var Dht=s(zpe);wJo=r(Dht,"unispeech-sat"),Dht.forEach(t),AJo=r(r$e," \u2014 "),uX=n(r$e,"A",{href:!0});var Ght=s(uX);yJo=r(Ght,"UniSpeechSatForAudioFrameClassification"),Ght.forEach(t),LJo=r(r$e," (UniSpeechSat model)"),r$e.forEach(t),xJo=i(rl),E6=n(rl,"LI",{});var t$e=s(E6);Wpe=n(t$e,"STRONG",{});var Oht=s(Wpe);$Jo=r(Oht,"wav2vec2"),Oht.forEach(t),kJo=r(t$e," \u2014 "),_X=n(t$e,"A",{href:!0});var Vht=s(_X);SJo=r(Vht,"Wav2Vec2ForAudioFrameClassification"),Vht.forEach(t),RJo=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),PJo=i(rl),C6=n(rl,"LI",{});var a$e=s(C6);Qpe=n(a$e,"STRONG",{});var Xht=s(Qpe);BJo=r(Xht,"wav2vec2-conformer"),Xht.forEach(t),IJo=r(a$e," \u2014 "),bX=n(a$e,"A",{href:!0});var zht=s(bX);qJo=r(zht,"Wav2Vec2ConformerForAudioFrameClassification"),zht.forEach(t),NJo=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),jJo=i(rl),w6=n(rl,"LI",{});var n$e=s(w6);Hpe=n(n$e,"STRONG",{});var Wht=s(Hpe);DJo=r(Wht,"wavlm"),Wht.forEach(t),GJo=r(n$e," \u2014 "),vX=n(n$e,"A",{href:!0});var Qht=s(vX);OJo=r(Qht,"WavLMForAudioFrameClassification"),Qht.forEach(t),VJo=r(n$e," (WavLM model)"),n$e.forEach(t),rl.forEach(t),XJo=i(pa),A6=n(pa,"P",{});var s$e=s(A6);zJo=r(s$e,"The model is set in evaluation mode by default using "),Upe=n(s$e,"CODE",{});var Hht=s(Upe);WJo=r(Hht,"model.eval()"),Hht.forEach(t),QJo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(s$e,"CODE",{});var Uht=s(Jpe);HJo=r(Uht,"model.train()"),Uht.forEach(t),s$e.forEach(t),UJo=i(pa),T(y6.$$.fragment,pa),pa.forEach(t),ol.forEach(t),hqe=i(f),pd=n(f,"H2",{class:!0});var bje=s(pd);L6=n(bje,"A",{id:!0,class:!0,href:!0});var Jht=s(L6);Ype=n(Jht,"SPAN",{});var Yht=s(Ype);T(eL.$$.fragment,Yht),Yht.forEach(t),Jht.forEach(t),JJo=i(bje),Kpe=n(bje,"SPAN",{});var Kht=s(Kpe);YJo=r(Kht,"AutoModelForCTC"),Kht.forEach(t),bje.forEach(t),pqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(oL.$$.fragment,tl),KJo=i(tl),ud=n(tl,"P",{});var tZ=s(ud);ZJo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FX=n(tZ,"A",{href:!0});var Zht=s(FX);eYo=r(Zht,"from_pretrained()"),Zht.forEach(t),oYo=r(tZ," class method or the "),TX=n(tZ,"A",{href:!0});var ept=s(TX);rYo=r(ept,"from_config()"),ept.forEach(t),tYo=r(tZ,` class
method.`),tZ.forEach(t),aYo=i(tl),rL=n(tl,"P",{});var vje=s(rL);nYo=r(vje,"This class cannot be instantiated directly using "),Zpe=n(vje,"CODE",{});var opt=s(Zpe);sYo=r(opt,"__init__()"),opt.forEach(t),lYo=r(vje," (throws an error)."),vje.forEach(t),iYo=i(tl),vt=n(tl,"DIV",{class:!0});var G3=s(vt);T(tL.$$.fragment,G3),dYo=i(G3),eue=n(G3,"P",{});var rpt=s(eue);cYo=r(rpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rpt.forEach(t),fYo=i(G3),_d=n(G3,"P",{});var aZ=s(_d);mYo=r(aZ,`Note:
Loading a model from its configuration file does `),oue=n(aZ,"STRONG",{});var tpt=s(oue);gYo=r(tpt,"not"),tpt.forEach(t),hYo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(aZ,"A",{href:!0});var apt=s(MX);pYo=r(apt,"from_pretrained()"),apt.forEach(t),uYo=r(aZ," to load the model weights."),aZ.forEach(t),_Yo=i(G3),T(x6.$$.fragment,G3),G3.forEach(t),bYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(aL.$$.fragment,ua),vYo=i(ua),rue=n(ua,"P",{});var npt=s(rue);FYo=r(npt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),npt.forEach(t),TYo=i(ua),Va=n(ua,"P",{});var O3=s(Va);MYo=r(O3,"The model class to instantiate is selected based on the "),tue=n(O3,"CODE",{});var spt=s(tue);EYo=r(spt,"model_type"),spt.forEach(t),CYo=r(O3,` property of the config object (either
passed as an argument or loaded from `),aue=n(O3,"CODE",{});var lpt=s(aue);wYo=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),AYo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(O3,"CODE",{});var ipt=s(nue);yYo=r(ipt,"pretrained_model_name_or_path"),ipt.forEach(t),LYo=r(O3,":"),O3.forEach(t),xYo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);$6=n(Ve,"LI",{});var l$e=s($6);sue=n(l$e,"STRONG",{});var dpt=s(sue);$Yo=r(dpt,"data2vec-audio"),dpt.forEach(t),kYo=r(l$e," \u2014 "),EX=n(l$e,"A",{href:!0});var cpt=s(EX);SYo=r(cpt,"Data2VecAudioForCTC"),cpt.forEach(t),RYo=r(l$e," (Data2VecAudio model)"),l$e.forEach(t),PYo=i(Ve),k6=n(Ve,"LI",{});var i$e=s(k6);lue=n(i$e,"STRONG",{});var fpt=s(lue);BYo=r(fpt,"hubert"),fpt.forEach(t),IYo=r(i$e," \u2014 "),CX=n(i$e,"A",{href:!0});var mpt=s(CX);qYo=r(mpt,"HubertForCTC"),mpt.forEach(t),NYo=r(i$e," (Hubert model)"),i$e.forEach(t),jYo=i(Ve),S6=n(Ve,"LI",{});var d$e=s(S6);iue=n(d$e,"STRONG",{});var gpt=s(iue);DYo=r(gpt,"sew"),gpt.forEach(t),GYo=r(d$e," \u2014 "),wX=n(d$e,"A",{href:!0});var hpt=s(wX);OYo=r(hpt,"SEWForCTC"),hpt.forEach(t),VYo=r(d$e," (SEW model)"),d$e.forEach(t),XYo=i(Ve),R6=n(Ve,"LI",{});var c$e=s(R6);due=n(c$e,"STRONG",{});var ppt=s(due);zYo=r(ppt,"sew-d"),ppt.forEach(t),WYo=r(c$e," \u2014 "),AX=n(c$e,"A",{href:!0});var upt=s(AX);QYo=r(upt,"SEWDForCTC"),upt.forEach(t),HYo=r(c$e," (SEW-D model)"),c$e.forEach(t),UYo=i(Ve),P6=n(Ve,"LI",{});var f$e=s(P6);cue=n(f$e,"STRONG",{});var _pt=s(cue);JYo=r(_pt,"unispeech"),_pt.forEach(t),YYo=r(f$e," \u2014 "),yX=n(f$e,"A",{href:!0});var bpt=s(yX);KYo=r(bpt,"UniSpeechForCTC"),bpt.forEach(t),ZYo=r(f$e," (UniSpeech model)"),f$e.forEach(t),eKo=i(Ve),B6=n(Ve,"LI",{});var m$e=s(B6);fue=n(m$e,"STRONG",{});var vpt=s(fue);oKo=r(vpt,"unispeech-sat"),vpt.forEach(t),rKo=r(m$e," \u2014 "),LX=n(m$e,"A",{href:!0});var Fpt=s(LX);tKo=r(Fpt,"UniSpeechSatForCTC"),Fpt.forEach(t),aKo=r(m$e," (UniSpeechSat model)"),m$e.forEach(t),nKo=i(Ve),I6=n(Ve,"LI",{});var g$e=s(I6);mue=n(g$e,"STRONG",{});var Tpt=s(mue);sKo=r(Tpt,"wav2vec2"),Tpt.forEach(t),lKo=r(g$e," \u2014 "),xX=n(g$e,"A",{href:!0});var Mpt=s(xX);iKo=r(Mpt,"Wav2Vec2ForCTC"),Mpt.forEach(t),dKo=r(g$e," (Wav2Vec2 model)"),g$e.forEach(t),cKo=i(Ve),q6=n(Ve,"LI",{});var h$e=s(q6);gue=n(h$e,"STRONG",{});var Ept=s(gue);fKo=r(Ept,"wav2vec2-conformer"),Ept.forEach(t),mKo=r(h$e," \u2014 "),$X=n(h$e,"A",{href:!0});var Cpt=s($X);gKo=r(Cpt,"Wav2Vec2ConformerForCTC"),Cpt.forEach(t),hKo=r(h$e," (Wav2Vec2-Conformer model)"),h$e.forEach(t),pKo=i(Ve),N6=n(Ve,"LI",{});var p$e=s(N6);hue=n(p$e,"STRONG",{});var wpt=s(hue);uKo=r(wpt,"wavlm"),wpt.forEach(t),_Ko=r(p$e," \u2014 "),kX=n(p$e,"A",{href:!0});var Apt=s(kX);bKo=r(Apt,"WavLMForCTC"),Apt.forEach(t),vKo=r(p$e," (WavLM model)"),p$e.forEach(t),Ve.forEach(t),FKo=i(ua),j6=n(ua,"P",{});var u$e=s(j6);TKo=r(u$e,"The model is set in evaluation mode by default using "),pue=n(u$e,"CODE",{});var ypt=s(pue);MKo=r(ypt,"model.eval()"),ypt.forEach(t),EKo=r(u$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(u$e,"CODE",{});var Lpt=s(uue);CKo=r(Lpt,"model.train()"),Lpt.forEach(t),u$e.forEach(t),wKo=i(ua),T(D6.$$.fragment,ua),ua.forEach(t),tl.forEach(t),uqe=i(f),bd=n(f,"H2",{class:!0});var Fje=s(bd);G6=n(Fje,"A",{id:!0,class:!0,href:!0});var xpt=s(G6);_ue=n(xpt,"SPAN",{});var $pt=s(_ue);T(nL.$$.fragment,$pt),$pt.forEach(t),xpt.forEach(t),AKo=i(Fje),bue=n(Fje,"SPAN",{});var kpt=s(bue);yKo=r(kpt,"AutoModelForSpeechSeq2Seq"),kpt.forEach(t),Fje.forEach(t),_qe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(sL.$$.fragment,al),LKo=i(al),vd=n(al,"P",{});var nZ=s(vd);xKo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SX=n(nZ,"A",{href:!0});var Spt=s(SX);$Ko=r(Spt,"from_pretrained()"),Spt.forEach(t),kKo=r(nZ," class method or the "),RX=n(nZ,"A",{href:!0});var Rpt=s(RX);SKo=r(Rpt,"from_config()"),Rpt.forEach(t),RKo=r(nZ,` class
method.`),nZ.forEach(t),PKo=i(al),lL=n(al,"P",{});var Tje=s(lL);BKo=r(Tje,"This class cannot be instantiated directly using "),vue=n(Tje,"CODE",{});var Ppt=s(vue);IKo=r(Ppt,"__init__()"),Ppt.forEach(t),qKo=r(Tje," (throws an error)."),Tje.forEach(t),NKo=i(al),Ft=n(al,"DIV",{class:!0});var V3=s(Ft);T(iL.$$.fragment,V3),jKo=i(V3),Fue=n(V3,"P",{});var Bpt=s(Fue);DKo=r(Bpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bpt.forEach(t),GKo=i(V3),Fd=n(V3,"P",{});var sZ=s(Fd);OKo=r(sZ,`Note:
Loading a model from its configuration file does `),Tue=n(sZ,"STRONG",{});var Ipt=s(Tue);VKo=r(Ipt,"not"),Ipt.forEach(t),XKo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(sZ,"A",{href:!0});var qpt=s(PX);zKo=r(qpt,"from_pretrained()"),qpt.forEach(t),WKo=r(sZ," to load the model weights."),sZ.forEach(t),QKo=i(V3),T(O6.$$.fragment,V3),V3.forEach(t),HKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(dL.$$.fragment,_a),UKo=i(_a),Mue=n(_a,"P",{});var Npt=s(Mue);JKo=r(Npt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Npt.forEach(t),YKo=i(_a),Xa=n(_a,"P",{});var X3=s(Xa);KKo=r(X3,"The model class to instantiate is selected based on the "),Eue=n(X3,"CODE",{});var jpt=s(Eue);ZKo=r(jpt,"model_type"),jpt.forEach(t),eZo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Cue=n(X3,"CODE",{});var Dpt=s(Cue);oZo=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),rZo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(X3,"CODE",{});var Gpt=s(wue);tZo=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),aZo=r(X3,":"),X3.forEach(t),nZo=i(_a),cL=n(_a,"UL",{});var Mje=s(cL);V6=n(Mje,"LI",{});var _$e=s(V6);Aue=n(_$e,"STRONG",{});var Opt=s(Aue);sZo=r(Opt,"speech-encoder-decoder"),Opt.forEach(t),lZo=r(_$e," \u2014 "),BX=n(_$e,"A",{href:!0});var Vpt=s(BX);iZo=r(Vpt,"SpeechEncoderDecoderModel"),Vpt.forEach(t),dZo=r(_$e," (Speech Encoder decoder model)"),_$e.forEach(t),cZo=i(Mje),X6=n(Mje,"LI",{});var b$e=s(X6);yue=n(b$e,"STRONG",{});var Xpt=s(yue);fZo=r(Xpt,"speech_to_text"),Xpt.forEach(t),mZo=r(b$e," \u2014 "),IX=n(b$e,"A",{href:!0});var zpt=s(IX);gZo=r(zpt,"Speech2TextForConditionalGeneration"),zpt.forEach(t),hZo=r(b$e," (Speech2Text model)"),b$e.forEach(t),Mje.forEach(t),pZo=i(_a),z6=n(_a,"P",{});var v$e=s(z6);uZo=r(v$e,"The model is set in evaluation mode by default using "),Lue=n(v$e,"CODE",{});var Wpt=s(Lue);_Zo=r(Wpt,"model.eval()"),Wpt.forEach(t),bZo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(v$e,"CODE",{});var Qpt=s(xue);vZo=r(Qpt,"model.train()"),Qpt.forEach(t),v$e.forEach(t),FZo=i(_a),T(W6.$$.fragment,_a),_a.forEach(t),al.forEach(t),bqe=i(f),Td=n(f,"H2",{class:!0});var Eje=s(Td);Q6=n(Eje,"A",{id:!0,class:!0,href:!0});var Hpt=s(Q6);$ue=n(Hpt,"SPAN",{});var Upt=s($ue);T(fL.$$.fragment,Upt),Upt.forEach(t),Hpt.forEach(t),TZo=i(Eje),kue=n(Eje,"SPAN",{});var Jpt=s(kue);MZo=r(Jpt,"AutoModelForAudioXVector"),Jpt.forEach(t),Eje.forEach(t),vqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(mL.$$.fragment,nl),EZo=i(nl),Md=n(nl,"P",{});var lZ=s(Md);CZo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qX=n(lZ,"A",{href:!0});var Ypt=s(qX);wZo=r(Ypt,"from_pretrained()"),Ypt.forEach(t),AZo=r(lZ," class method or the "),NX=n(lZ,"A",{href:!0});var Kpt=s(NX);yZo=r(Kpt,"from_config()"),Kpt.forEach(t),LZo=r(lZ,` class
method.`),lZ.forEach(t),xZo=i(nl),gL=n(nl,"P",{});var Cje=s(gL);$Zo=r(Cje,"This class cannot be instantiated directly using "),Sue=n(Cje,"CODE",{});var Zpt=s(Sue);kZo=r(Zpt,"__init__()"),Zpt.forEach(t),SZo=r(Cje," (throws an error)."),Cje.forEach(t),RZo=i(nl),Tt=n(nl,"DIV",{class:!0});var z3=s(Tt);T(hL.$$.fragment,z3),PZo=i(z3),Rue=n(z3,"P",{});var eut=s(Rue);BZo=r(eut,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eut.forEach(t),IZo=i(z3),Ed=n(z3,"P",{});var iZ=s(Ed);qZo=r(iZ,`Note:
Loading a model from its configuration file does `),Pue=n(iZ,"STRONG",{});var out=s(Pue);NZo=r(out,"not"),out.forEach(t),jZo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(iZ,"A",{href:!0});var rut=s(jX);DZo=r(rut,"from_pretrained()"),rut.forEach(t),GZo=r(iZ," to load the model weights."),iZ.forEach(t),OZo=i(z3),T(H6.$$.fragment,z3),z3.forEach(t),VZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(pL.$$.fragment,ba),XZo=i(ba),Bue=n(ba,"P",{});var tut=s(Bue);zZo=r(tut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tut.forEach(t),WZo=i(ba),za=n(ba,"P",{});var W3=s(za);QZo=r(W3,"The model class to instantiate is selected based on the "),Iue=n(W3,"CODE",{});var aut=s(Iue);HZo=r(aut,"model_type"),aut.forEach(t),UZo=r(W3,` property of the config object (either
passed as an argument or loaded from `),que=n(W3,"CODE",{});var nut=s(que);JZo=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),YZo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(W3,"CODE",{});var sut=s(Nue);KZo=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),ZZo=r(W3,":"),W3.forEach(t),eer=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);U6=n(sl,"LI",{});var F$e=s(U6);jue=n(F$e,"STRONG",{});var lut=s(jue);oer=r(lut,"data2vec-audio"),lut.forEach(t),rer=r(F$e," \u2014 "),DX=n(F$e,"A",{href:!0});var iut=s(DX);ter=r(iut,"Data2VecAudioForXVector"),iut.forEach(t),aer=r(F$e," (Data2VecAudio model)"),F$e.forEach(t),ner=i(sl),J6=n(sl,"LI",{});var T$e=s(J6);Due=n(T$e,"STRONG",{});var dut=s(Due);ser=r(dut,"unispeech-sat"),dut.forEach(t),ler=r(T$e," \u2014 "),GX=n(T$e,"A",{href:!0});var cut=s(GX);ier=r(cut,"UniSpeechSatForXVector"),cut.forEach(t),der=r(T$e," (UniSpeechSat model)"),T$e.forEach(t),cer=i(sl),Y6=n(sl,"LI",{});var M$e=s(Y6);Gue=n(M$e,"STRONG",{});var fut=s(Gue);fer=r(fut,"wav2vec2"),fut.forEach(t),mer=r(M$e," \u2014 "),OX=n(M$e,"A",{href:!0});var mut=s(OX);ger=r(mut,"Wav2Vec2ForXVector"),mut.forEach(t),her=r(M$e," (Wav2Vec2 model)"),M$e.forEach(t),per=i(sl),K6=n(sl,"LI",{});var E$e=s(K6);Oue=n(E$e,"STRONG",{});var gut=s(Oue);uer=r(gut,"wav2vec2-conformer"),gut.forEach(t),_er=r(E$e," \u2014 "),VX=n(E$e,"A",{href:!0});var hut=s(VX);ber=r(hut,"Wav2Vec2ConformerForXVector"),hut.forEach(t),ver=r(E$e," (Wav2Vec2-Conformer model)"),E$e.forEach(t),Fer=i(sl),Z6=n(sl,"LI",{});var C$e=s(Z6);Vue=n(C$e,"STRONG",{});var put=s(Vue);Ter=r(put,"wavlm"),put.forEach(t),Mer=r(C$e," \u2014 "),XX=n(C$e,"A",{href:!0});var uut=s(XX);Eer=r(uut,"WavLMForXVector"),uut.forEach(t),Cer=r(C$e," (WavLM model)"),C$e.forEach(t),sl.forEach(t),wer=i(ba),e0=n(ba,"P",{});var w$e=s(e0);Aer=r(w$e,"The model is set in evaluation mode by default using "),Xue=n(w$e,"CODE",{});var _ut=s(Xue);yer=r(_ut,"model.eval()"),_ut.forEach(t),Ler=r(w$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(w$e,"CODE",{});var but=s(zue);xer=r(but,"model.train()"),but.forEach(t),w$e.forEach(t),$er=i(ba),T(o0.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Fqe=i(f),Cd=n(f,"H2",{class:!0});var wje=s(Cd);r0=n(wje,"A",{id:!0,class:!0,href:!0});var vut=s(r0);Wue=n(vut,"SPAN",{});var Fut=s(Wue);T(uL.$$.fragment,Fut),Fut.forEach(t),vut.forEach(t),ker=i(wje),Que=n(wje,"SPAN",{});var Tut=s(Que);Ser=r(Tut,"AutoModelForMaskedImageModeling"),Tut.forEach(t),wje.forEach(t),Tqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(_L.$$.fragment,ll),Rer=i(ll),wd=n(ll,"P",{});var dZ=s(wd);Per=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zX=n(dZ,"A",{href:!0});var Mut=s(zX);Ber=r(Mut,"from_pretrained()"),Mut.forEach(t),Ier=r(dZ," class method or the "),WX=n(dZ,"A",{href:!0});var Eut=s(WX);qer=r(Eut,"from_config()"),Eut.forEach(t),Ner=r(dZ,` class
method.`),dZ.forEach(t),jer=i(ll),bL=n(ll,"P",{});var Aje=s(bL);Der=r(Aje,"This class cannot be instantiated directly using "),Hue=n(Aje,"CODE",{});var Cut=s(Hue);Ger=r(Cut,"__init__()"),Cut.forEach(t),Oer=r(Aje," (throws an error)."),Aje.forEach(t),Ver=i(ll),Mt=n(ll,"DIV",{class:!0});var Q3=s(Mt);T(vL.$$.fragment,Q3),Xer=i(Q3),Uue=n(Q3,"P",{});var wut=s(Uue);zer=r(wut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wut.forEach(t),Wer=i(Q3),Ad=n(Q3,"P",{});var cZ=s(Ad);Qer=r(cZ,`Note:
Loading a model from its configuration file does `),Jue=n(cZ,"STRONG",{});var Aut=s(Jue);Her=r(Aut,"not"),Aut.forEach(t),Uer=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(cZ,"A",{href:!0});var yut=s(QX);Jer=r(yut,"from_pretrained()"),yut.forEach(t),Yer=r(cZ," to load the model weights."),cZ.forEach(t),Ker=i(Q3),T(t0.$$.fragment,Q3),Q3.forEach(t),Zer=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(FL.$$.fragment,va),eor=i(va),Yue=n(va,"P",{});var Lut=s(Yue);oor=r(Lut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lut.forEach(t),ror=i(va),Wa=n(va,"P",{});var H3=s(Wa);tor=r(H3,"The model class to instantiate is selected based on the "),Kue=n(H3,"CODE",{});var xut=s(Kue);aor=r(xut,"model_type"),xut.forEach(t),nor=r(H3,` property of the config object (either
passed as an argument or loaded from `),Zue=n(H3,"CODE",{});var $ut=s(Zue);sor=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),lor=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(H3,"CODE",{});var kut=s(e_e);ior=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),dor=r(H3,":"),H3.forEach(t),cor=i(va),yd=n(va,"UL",{});var fZ=s(yd);a0=n(fZ,"LI",{});var A$e=s(a0);o_e=n(A$e,"STRONG",{});var Sut=s(o_e);mor=r(Sut,"deit"),Sut.forEach(t),gor=r(A$e," \u2014 "),HX=n(A$e,"A",{href:!0});var Rut=s(HX);hor=r(Rut,"DeiTForMaskedImageModeling"),Rut.forEach(t),por=r(A$e," (DeiT model)"),A$e.forEach(t),uor=i(fZ),n0=n(fZ,"LI",{});var y$e=s(n0);r_e=n(y$e,"STRONG",{});var Put=s(r_e);_or=r(Put,"swin"),Put.forEach(t),bor=r(y$e," \u2014 "),UX=n(y$e,"A",{href:!0});var But=s(UX);vor=r(But,"SwinForMaskedImageModeling"),But.forEach(t),For=r(y$e," (Swin model)"),y$e.forEach(t),Tor=i(fZ),s0=n(fZ,"LI",{});var L$e=s(s0);t_e=n(L$e,"STRONG",{});var Iut=s(t_e);Mor=r(Iut,"vit"),Iut.forEach(t),Eor=r(L$e," \u2014 "),JX=n(L$e,"A",{href:!0});var qut=s(JX);Cor=r(qut,"ViTForMaskedImageModeling"),qut.forEach(t),wor=r(L$e," (ViT model)"),L$e.forEach(t),fZ.forEach(t),Aor=i(va),l0=n(va,"P",{});var x$e=s(l0);yor=r(x$e,"The model is set in evaluation mode by default using "),a_e=n(x$e,"CODE",{});var Nut=s(a_e);Lor=r(Nut,"model.eval()"),Nut.forEach(t),xor=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(x$e,"CODE",{});var jut=s(n_e);$or=r(jut,"model.train()"),jut.forEach(t),x$e.forEach(t),kor=i(va),T(i0.$$.fragment,va),va.forEach(t),ll.forEach(t),Mqe=i(f),Ld=n(f,"H2",{class:!0});var yje=s(Ld);d0=n(yje,"A",{id:!0,class:!0,href:!0});var Dut=s(d0);s_e=n(Dut,"SPAN",{});var Gut=s(s_e);T(TL.$$.fragment,Gut),Gut.forEach(t),Dut.forEach(t),Sor=i(yje),l_e=n(yje,"SPAN",{});var Out=s(l_e);Ror=r(Out,"AutoModelForObjectDetection"),Out.forEach(t),yje.forEach(t),Eqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(ML.$$.fragment,il),Por=i(il),xd=n(il,"P",{});var mZ=s(xd);Bor=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YX=n(mZ,"A",{href:!0});var Vut=s(YX);Ior=r(Vut,"from_pretrained()"),Vut.forEach(t),qor=r(mZ," class method or the "),KX=n(mZ,"A",{href:!0});var Xut=s(KX);Nor=r(Xut,"from_config()"),Xut.forEach(t),jor=r(mZ,` class
method.`),mZ.forEach(t),Dor=i(il),EL=n(il,"P",{});var Lje=s(EL);Gor=r(Lje,"This class cannot be instantiated directly using "),i_e=n(Lje,"CODE",{});var zut=s(i_e);Oor=r(zut,"__init__()"),zut.forEach(t),Vor=r(Lje," (throws an error)."),Lje.forEach(t),Xor=i(il),Et=n(il,"DIV",{class:!0});var U3=s(Et);T(CL.$$.fragment,U3),zor=i(U3),d_e=n(U3,"P",{});var Wut=s(d_e);Wor=r(Wut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wut.forEach(t),Qor=i(U3),$d=n(U3,"P",{});var gZ=s($d);Hor=r(gZ,`Note:
Loading a model from its configuration file does `),c_e=n(gZ,"STRONG",{});var Qut=s(c_e);Uor=r(Qut,"not"),Qut.forEach(t),Jor=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(gZ,"A",{href:!0});var Hut=s(ZX);Yor=r(Hut,"from_pretrained()"),Hut.forEach(t),Kor=r(gZ," to load the model weights."),gZ.forEach(t),Zor=i(U3),T(c0.$$.fragment,U3),U3.forEach(t),err=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(wL.$$.fragment,Fa),orr=i(Fa),f_e=n(Fa,"P",{});var Uut=s(f_e);rrr=r(Uut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Uut.forEach(t),trr=i(Fa),Qa=n(Fa,"P",{});var J3=s(Qa);arr=r(J3,"The model class to instantiate is selected based on the "),m_e=n(J3,"CODE",{});var Jut=s(m_e);nrr=r(Jut,"model_type"),Jut.forEach(t),srr=r(J3,` property of the config object (either
passed as an argument or loaded from `),g_e=n(J3,"CODE",{});var Yut=s(g_e);lrr=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),irr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(J3,"CODE",{});var Kut=s(h_e);drr=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),crr=r(J3,":"),J3.forEach(t),frr=i(Fa),AL=n(Fa,"UL",{});var xje=s(AL);f0=n(xje,"LI",{});var $$e=s(f0);p_e=n($$e,"STRONG",{});var Zut=s(p_e);mrr=r(Zut,"detr"),Zut.forEach(t),grr=r($$e," \u2014 "),ez=n($$e,"A",{href:!0});var e_t=s(ez);hrr=r(e_t,"DetrForObjectDetection"),e_t.forEach(t),prr=r($$e," (DETR model)"),$$e.forEach(t),urr=i(xje),m0=n(xje,"LI",{});var k$e=s(m0);u_e=n(k$e,"STRONG",{});var o_t=s(u_e);_rr=r(o_t,"yolos"),o_t.forEach(t),brr=r(k$e," \u2014 "),oz=n(k$e,"A",{href:!0});var r_t=s(oz);vrr=r(r_t,"YolosForObjectDetection"),r_t.forEach(t),Frr=r(k$e," (YOLOS model)"),k$e.forEach(t),xje.forEach(t),Trr=i(Fa),g0=n(Fa,"P",{});var S$e=s(g0);Mrr=r(S$e,"The model is set in evaluation mode by default using "),__e=n(S$e,"CODE",{});var t_t=s(__e);Err=r(t_t,"model.eval()"),t_t.forEach(t),Crr=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=n(S$e,"CODE",{});var a_t=s(b_e);wrr=r(a_t,"model.train()"),a_t.forEach(t),S$e.forEach(t),Arr=i(Fa),T(h0.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Cqe=i(f),kd=n(f,"H2",{class:!0});var $je=s(kd);p0=n($je,"A",{id:!0,class:!0,href:!0});var n_t=s(p0);v_e=n(n_t,"SPAN",{});var s_t=s(v_e);T(yL.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),yrr=i($je),F_e=n($je,"SPAN",{});var l_t=s(F_e);Lrr=r(l_t,"AutoModelForImageSegmentation"),l_t.forEach(t),$je.forEach(t),wqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(LL.$$.fragment,dl),xrr=i(dl),Sd=n(dl,"P",{});var hZ=s(Sd);$rr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rz=n(hZ,"A",{href:!0});var i_t=s(rz);krr=r(i_t,"from_pretrained()"),i_t.forEach(t),Srr=r(hZ," class method or the "),tz=n(hZ,"A",{href:!0});var d_t=s(tz);Rrr=r(d_t,"from_config()"),d_t.forEach(t),Prr=r(hZ,` class
method.`),hZ.forEach(t),Brr=i(dl),xL=n(dl,"P",{});var kje=s(xL);Irr=r(kje,"This class cannot be instantiated directly using "),T_e=n(kje,"CODE",{});var c_t=s(T_e);qrr=r(c_t,"__init__()"),c_t.forEach(t),Nrr=r(kje," (throws an error)."),kje.forEach(t),jrr=i(dl),Ct=n(dl,"DIV",{class:!0});var Y3=s(Ct);T($L.$$.fragment,Y3),Drr=i(Y3),M_e=n(Y3,"P",{});var f_t=s(M_e);Grr=r(f_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),f_t.forEach(t),Orr=i(Y3),Rd=n(Y3,"P",{});var pZ=s(Rd);Vrr=r(pZ,`Note:
Loading a model from its configuration file does `),E_e=n(pZ,"STRONG",{});var m_t=s(E_e);Xrr=r(m_t,"not"),m_t.forEach(t),zrr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(pZ,"A",{href:!0});var g_t=s(az);Wrr=r(g_t,"from_pretrained()"),g_t.forEach(t),Qrr=r(pZ," to load the model weights."),pZ.forEach(t),Hrr=i(Y3),T(u0.$$.fragment,Y3),Y3.forEach(t),Urr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(kL.$$.fragment,Ta),Jrr=i(Ta),C_e=n(Ta,"P",{});var h_t=s(C_e);Yrr=r(h_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),h_t.forEach(t),Krr=i(Ta),Ha=n(Ta,"P",{});var K3=s(Ha);Zrr=r(K3,"The model class to instantiate is selected based on the "),w_e=n(K3,"CODE",{});var p_t=s(w_e);etr=r(p_t,"model_type"),p_t.forEach(t),otr=r(K3,` property of the config object (either
passed as an argument or loaded from `),A_e=n(K3,"CODE",{});var u_t=s(A_e);rtr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),ttr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(K3,"CODE",{});var __t=s(y_e);atr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),ntr=r(K3,":"),K3.forEach(t),str=i(Ta),L_e=n(Ta,"UL",{});var b_t=s(L_e);_0=n(b_t,"LI",{});var R$e=s(_0);x_e=n(R$e,"STRONG",{});var v_t=s(x_e);ltr=r(v_t,"detr"),v_t.forEach(t),itr=r(R$e," \u2014 "),nz=n(R$e,"A",{href:!0});var F_t=s(nz);dtr=r(F_t,"DetrForSegmentation"),F_t.forEach(t),ctr=r(R$e," (DETR model)"),R$e.forEach(t),b_t.forEach(t),ftr=i(Ta),b0=n(Ta,"P",{});var P$e=s(b0);mtr=r(P$e,"The model is set in evaluation mode by default using "),$_e=n(P$e,"CODE",{});var T_t=s($_e);gtr=r(T_t,"model.eval()"),T_t.forEach(t),htr=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(P$e,"CODE",{});var M_t=s(k_e);ptr=r(M_t,"model.train()"),M_t.forEach(t),P$e.forEach(t),utr=i(Ta),T(v0.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Aqe=i(f),Pd=n(f,"H2",{class:!0});var Sje=s(Pd);F0=n(Sje,"A",{id:!0,class:!0,href:!0});var E_t=s(F0);S_e=n(E_t,"SPAN",{});var C_t=s(S_e);T(SL.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),_tr=i(Sje),R_e=n(Sje,"SPAN",{});var w_t=s(R_e);btr=r(w_t,"AutoModelForSemanticSegmentation"),w_t.forEach(t),Sje.forEach(t),yqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(RL.$$.fragment,cl),vtr=i(cl),Bd=n(cl,"P",{});var uZ=s(Bd);Ftr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sz=n(uZ,"A",{href:!0});var A_t=s(sz);Ttr=r(A_t,"from_pretrained()"),A_t.forEach(t),Mtr=r(uZ," class method or the "),lz=n(uZ,"A",{href:!0});var y_t=s(lz);Etr=r(y_t,"from_config()"),y_t.forEach(t),Ctr=r(uZ,` class
method.`),uZ.forEach(t),wtr=i(cl),PL=n(cl,"P",{});var Rje=s(PL);Atr=r(Rje,"This class cannot be instantiated directly using "),P_e=n(Rje,"CODE",{});var L_t=s(P_e);ytr=r(L_t,"__init__()"),L_t.forEach(t),Ltr=r(Rje," (throws an error)."),Rje.forEach(t),xtr=i(cl),wt=n(cl,"DIV",{class:!0});var Z3=s(wt);T(BL.$$.fragment,Z3),$tr=i(Z3),B_e=n(Z3,"P",{});var x_t=s(B_e);ktr=r(x_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),x_t.forEach(t),Str=i(Z3),Id=n(Z3,"P",{});var _Z=s(Id);Rtr=r(_Z,`Note:
Loading a model from its configuration file does `),I_e=n(_Z,"STRONG",{});var $_t=s(I_e);Ptr=r($_t,"not"),$_t.forEach(t),Btr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(_Z,"A",{href:!0});var k_t=s(iz);Itr=r(k_t,"from_pretrained()"),k_t.forEach(t),qtr=r(_Z," to load the model weights."),_Z.forEach(t),Ntr=i(Z3),T(T0.$$.fragment,Z3),Z3.forEach(t),jtr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(IL.$$.fragment,Ma),Dtr=i(Ma),q_e=n(Ma,"P",{});var S_t=s(q_e);Gtr=r(S_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),S_t.forEach(t),Otr=i(Ma),Ua=n(Ma,"P",{});var ew=s(Ua);Vtr=r(ew,"The model class to instantiate is selected based on the "),N_e=n(ew,"CODE",{});var R_t=s(N_e);Xtr=r(R_t,"model_type"),R_t.forEach(t),ztr=r(ew,` property of the config object (either
passed as an argument or loaded from `),j_e=n(ew,"CODE",{});var P_t=s(j_e);Wtr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),Qtr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(ew,"CODE",{});var B_t=s(D_e);Htr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),Utr=r(ew,":"),ew.forEach(t),Jtr=i(Ma),Ja=n(Ma,"UL",{});var ow=s(Ja);M0=n(ow,"LI",{});var B$e=s(M0);G_e=n(B$e,"STRONG",{});var I_t=s(G_e);Ytr=r(I_t,"beit"),I_t.forEach(t),Ktr=r(B$e," \u2014 "),dz=n(B$e,"A",{href:!0});var q_t=s(dz);Ztr=r(q_t,"BeitForSemanticSegmentation"),q_t.forEach(t),ear=r(B$e," (BEiT model)"),B$e.forEach(t),oar=i(ow),E0=n(ow,"LI",{});var I$e=s(E0);O_e=n(I$e,"STRONG",{});var N_t=s(O_e);rar=r(N_t,"data2vec-vision"),N_t.forEach(t),tar=r(I$e," \u2014 "),cz=n(I$e,"A",{href:!0});var j_t=s(cz);aar=r(j_t,"Data2VecVisionForSemanticSegmentation"),j_t.forEach(t),nar=r(I$e," (Data2VecVision model)"),I$e.forEach(t),sar=i(ow),C0=n(ow,"LI",{});var q$e=s(C0);V_e=n(q$e,"STRONG",{});var D_t=s(V_e);lar=r(D_t,"dpt"),D_t.forEach(t),iar=r(q$e," \u2014 "),fz=n(q$e,"A",{href:!0});var G_t=s(fz);dar=r(G_t,"DPTForSemanticSegmentation"),G_t.forEach(t),car=r(q$e," (DPT model)"),q$e.forEach(t),far=i(ow),w0=n(ow,"LI",{});var N$e=s(w0);X_e=n(N$e,"STRONG",{});var O_t=s(X_e);mar=r(O_t,"segformer"),O_t.forEach(t),gar=r(N$e," \u2014 "),mz=n(N$e,"A",{href:!0});var V_t=s(mz);har=r(V_t,"SegformerForSemanticSegmentation"),V_t.forEach(t),par=r(N$e," (SegFormer model)"),N$e.forEach(t),ow.forEach(t),uar=i(Ma),A0=n(Ma,"P",{});var j$e=s(A0);_ar=r(j$e,"The model is set in evaluation mode by default using "),z_e=n(j$e,"CODE",{});var X_t=s(z_e);bar=r(X_t,"model.eval()"),X_t.forEach(t),Far=r(j$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(j$e,"CODE",{});var z_t=s(W_e);Tar=r(z_t,"model.train()"),z_t.forEach(t),j$e.forEach(t),Mar=i(Ma),T(y0.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Lqe=i(f),qd=n(f,"H2",{class:!0});var Pje=s(qd);L0=n(Pje,"A",{id:!0,class:!0,href:!0});var W_t=s(L0);Q_e=n(W_t,"SPAN",{});var Q_t=s(Q_e);T(qL.$$.fragment,Q_t),Q_t.forEach(t),W_t.forEach(t),Ear=i(Pje),H_e=n(Pje,"SPAN",{});var H_t=s(H_e);Car=r(H_t,"AutoModelForInstanceSegmentation"),H_t.forEach(t),Pje.forEach(t),xqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(NL.$$.fragment,fl),war=i(fl),Nd=n(fl,"P",{});var bZ=s(Nd);Aar=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gz=n(bZ,"A",{href:!0});var U_t=s(gz);yar=r(U_t,"from_pretrained()"),U_t.forEach(t),Lar=r(bZ," class method or the "),hz=n(bZ,"A",{href:!0});var J_t=s(hz);xar=r(J_t,"from_config()"),J_t.forEach(t),$ar=r(bZ,` class
method.`),bZ.forEach(t),kar=i(fl),jL=n(fl,"P",{});var Bje=s(jL);Sar=r(Bje,"This class cannot be instantiated directly using "),U_e=n(Bje,"CODE",{});var Y_t=s(U_e);Rar=r(Y_t,"__init__()"),Y_t.forEach(t),Par=r(Bje," (throws an error)."),Bje.forEach(t),Bar=i(fl),At=n(fl,"DIV",{class:!0});var rw=s(At);T(DL.$$.fragment,rw),Iar=i(rw),J_e=n(rw,"P",{});var K_t=s(J_e);qar=r(K_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),K_t.forEach(t),Nar=i(rw),jd=n(rw,"P",{});var vZ=s(jd);jar=r(vZ,`Note:
Loading a model from its configuration file does `),Y_e=n(vZ,"STRONG",{});var Z_t=s(Y_e);Dar=r(Z_t,"not"),Z_t.forEach(t),Gar=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(vZ,"A",{href:!0});var e2t=s(pz);Oar=r(e2t,"from_pretrained()"),e2t.forEach(t),Var=r(vZ," to load the model weights."),vZ.forEach(t),Xar=i(rw),T(x0.$$.fragment,rw),rw.forEach(t),zar=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(GL.$$.fragment,Ea),War=i(Ea),K_e=n(Ea,"P",{});var o2t=s(K_e);Qar=r(o2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),o2t.forEach(t),Har=i(Ea),Ya=n(Ea,"P",{});var tw=s(Ya);Uar=r(tw,"The model class to instantiate is selected based on the "),Z_e=n(tw,"CODE",{});var r2t=s(Z_e);Jar=r(r2t,"model_type"),r2t.forEach(t),Yar=r(tw,` property of the config object (either
passed as an argument or loaded from `),e2e=n(tw,"CODE",{});var t2t=s(e2e);Kar=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),Zar=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(tw,"CODE",{});var a2t=s(o2e);enr=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),onr=r(tw,":"),tw.forEach(t),rnr=i(Ea),r2e=n(Ea,"UL",{});var n2t=s(r2e);$0=n(n2t,"LI",{});var D$e=s($0);t2e=n(D$e,"STRONG",{});var s2t=s(t2e);tnr=r(s2t,"maskformer"),s2t.forEach(t),anr=r(D$e," \u2014 "),uz=n(D$e,"A",{href:!0});var l2t=s(uz);nnr=r(l2t,"MaskFormerForInstanceSegmentation"),l2t.forEach(t),snr=r(D$e," (MaskFormer model)"),D$e.forEach(t),n2t.forEach(t),lnr=i(Ea),k0=n(Ea,"P",{});var G$e=s(k0);inr=r(G$e,"The model is set in evaluation mode by default using "),a2e=n(G$e,"CODE",{});var i2t=s(a2e);dnr=r(i2t,"model.eval()"),i2t.forEach(t),cnr=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=n(G$e,"CODE",{});var d2t=s(n2e);fnr=r(d2t,"model.train()"),d2t.forEach(t),G$e.forEach(t),mnr=i(Ea),T(S0.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),$qe=i(f),Dd=n(f,"H2",{class:!0});var Ije=s(Dd);R0=n(Ije,"A",{id:!0,class:!0,href:!0});var c2t=s(R0);s2e=n(c2t,"SPAN",{});var f2t=s(s2e);T(OL.$$.fragment,f2t),f2t.forEach(t),c2t.forEach(t),gnr=i(Ije),l2e=n(Ije,"SPAN",{});var m2t=s(l2e);hnr=r(m2t,"TFAutoModel"),m2t.forEach(t),Ije.forEach(t),kqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(VL.$$.fragment,ml),pnr=i(ml),Gd=n(ml,"P",{});var FZ=s(Gd);unr=r(FZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_z=n(FZ,"A",{href:!0});var g2t=s(_z);_nr=r(g2t,"from_pretrained()"),g2t.forEach(t),bnr=r(FZ," class method or the "),bz=n(FZ,"A",{href:!0});var h2t=s(bz);vnr=r(h2t,"from_config()"),h2t.forEach(t),Fnr=r(FZ,` class
method.`),FZ.forEach(t),Tnr=i(ml),XL=n(ml,"P",{});var qje=s(XL);Mnr=r(qje,"This class cannot be instantiated directly using "),i2e=n(qje,"CODE",{});var p2t=s(i2e);Enr=r(p2t,"__init__()"),p2t.forEach(t),Cnr=r(qje," (throws an error)."),qje.forEach(t),wnr=i(ml),yt=n(ml,"DIV",{class:!0});var aw=s(yt);T(zL.$$.fragment,aw),Anr=i(aw),d2e=n(aw,"P",{});var u2t=s(d2e);ynr=r(u2t,"Instantiates one of the base model classes of the library from a configuration."),u2t.forEach(t),Lnr=i(aw),Od=n(aw,"P",{});var TZ=s(Od);xnr=r(TZ,`Note:
Loading a model from its configuration file does `),c2e=n(TZ,"STRONG",{});var _2t=s(c2e);$nr=r(_2t,"not"),_2t.forEach(t),knr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(TZ,"A",{href:!0});var b2t=s(vz);Snr=r(b2t,"from_pretrained()"),b2t.forEach(t),Rnr=r(TZ," to load the model weights."),TZ.forEach(t),Pnr=i(aw),T(P0.$$.fragment,aw),aw.forEach(t),Bnr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(WL.$$.fragment,gl),Inr=i(gl),f2e=n(gl,"P",{});var v2t=s(f2e);qnr=r(v2t,"Instantiate one of the base model classes of the library from a pretrained model."),v2t.forEach(t),Nnr=i(gl),Ka=n(gl,"P",{});var nw=s(Ka);jnr=r(nw,"The model class to instantiate is selected based on the "),m2e=n(nw,"CODE",{});var F2t=s(m2e);Dnr=r(F2t,"model_type"),F2t.forEach(t),Gnr=r(nw,` property of the config object (either
passed as an argument or loaded from `),g2e=n(nw,"CODE",{});var T2t=s(g2e);Onr=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),Vnr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(nw,"CODE",{});var M2t=s(h2e);Xnr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),znr=r(nw,":"),nw.forEach(t),Wnr=i(gl),N=n(gl,"UL",{});var D=s(N);B0=n(D,"LI",{});var O$e=s(B0);p2e=n(O$e,"STRONG",{});var E2t=s(p2e);Qnr=r(E2t,"albert"),E2t.forEach(t),Hnr=r(O$e," \u2014 "),Fz=n(O$e,"A",{href:!0});var C2t=s(Fz);Unr=r(C2t,"TFAlbertModel"),C2t.forEach(t),Jnr=r(O$e," (ALBERT model)"),O$e.forEach(t),Ynr=i(D),I0=n(D,"LI",{});var V$e=s(I0);u2e=n(V$e,"STRONG",{});var w2t=s(u2e);Knr=r(w2t,"bart"),w2t.forEach(t),Znr=r(V$e," \u2014 "),Tz=n(V$e,"A",{href:!0});var A2t=s(Tz);esr=r(A2t,"TFBartModel"),A2t.forEach(t),osr=r(V$e," (BART model)"),V$e.forEach(t),rsr=i(D),q0=n(D,"LI",{});var X$e=s(q0);_2e=n(X$e,"STRONG",{});var y2t=s(_2e);tsr=r(y2t,"bert"),y2t.forEach(t),asr=r(X$e," \u2014 "),Mz=n(X$e,"A",{href:!0});var L2t=s(Mz);nsr=r(L2t,"TFBertModel"),L2t.forEach(t),ssr=r(X$e," (BERT model)"),X$e.forEach(t),lsr=i(D),N0=n(D,"LI",{});var z$e=s(N0);b2e=n(z$e,"STRONG",{});var x2t=s(b2e);isr=r(x2t,"blenderbot"),x2t.forEach(t),dsr=r(z$e," \u2014 "),Ez=n(z$e,"A",{href:!0});var $2t=s(Ez);csr=r($2t,"TFBlenderbotModel"),$2t.forEach(t),fsr=r(z$e," (Blenderbot model)"),z$e.forEach(t),msr=i(D),j0=n(D,"LI",{});var W$e=s(j0);v2e=n(W$e,"STRONG",{});var k2t=s(v2e);gsr=r(k2t,"blenderbot-small"),k2t.forEach(t),hsr=r(W$e," \u2014 "),Cz=n(W$e,"A",{href:!0});var S2t=s(Cz);psr=r(S2t,"TFBlenderbotSmallModel"),S2t.forEach(t),usr=r(W$e," (BlenderbotSmall model)"),W$e.forEach(t),_sr=i(D),D0=n(D,"LI",{});var Q$e=s(D0);F2e=n(Q$e,"STRONG",{});var R2t=s(F2e);bsr=r(R2t,"camembert"),R2t.forEach(t),vsr=r(Q$e," \u2014 "),wz=n(Q$e,"A",{href:!0});var P2t=s(wz);Fsr=r(P2t,"TFCamembertModel"),P2t.forEach(t),Tsr=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),Msr=i(D),G0=n(D,"LI",{});var H$e=s(G0);T2e=n(H$e,"STRONG",{});var B2t=s(T2e);Esr=r(B2t,"clip"),B2t.forEach(t),Csr=r(H$e," \u2014 "),Az=n(H$e,"A",{href:!0});var I2t=s(Az);wsr=r(I2t,"TFCLIPModel"),I2t.forEach(t),Asr=r(H$e," (CLIP model)"),H$e.forEach(t),ysr=i(D),O0=n(D,"LI",{});var U$e=s(O0);M2e=n(U$e,"STRONG",{});var q2t=s(M2e);Lsr=r(q2t,"convbert"),q2t.forEach(t),xsr=r(U$e," \u2014 "),yz=n(U$e,"A",{href:!0});var N2t=s(yz);$sr=r(N2t,"TFConvBertModel"),N2t.forEach(t),ksr=r(U$e," (ConvBERT model)"),U$e.forEach(t),Ssr=i(D),V0=n(D,"LI",{});var J$e=s(V0);E2e=n(J$e,"STRONG",{});var j2t=s(E2e);Rsr=r(j2t,"convnext"),j2t.forEach(t),Psr=r(J$e," \u2014 "),Lz=n(J$e,"A",{href:!0});var D2t=s(Lz);Bsr=r(D2t,"TFConvNextModel"),D2t.forEach(t),Isr=r(J$e," (ConvNext model)"),J$e.forEach(t),qsr=i(D),X0=n(D,"LI",{});var Y$e=s(X0);C2e=n(Y$e,"STRONG",{});var G2t=s(C2e);Nsr=r(G2t,"ctrl"),G2t.forEach(t),jsr=r(Y$e," \u2014 "),xz=n(Y$e,"A",{href:!0});var O2t=s(xz);Dsr=r(O2t,"TFCTRLModel"),O2t.forEach(t),Gsr=r(Y$e," (CTRL model)"),Y$e.forEach(t),Osr=i(D),z0=n(D,"LI",{});var K$e=s(z0);w2e=n(K$e,"STRONG",{});var V2t=s(w2e);Vsr=r(V2t,"data2vec-vision"),V2t.forEach(t),Xsr=r(K$e," \u2014 "),$z=n(K$e,"A",{href:!0});var X2t=s($z);zsr=r(X2t,"TFData2VecVisionModel"),X2t.forEach(t),Wsr=r(K$e," (Data2VecVision model)"),K$e.forEach(t),Qsr=i(D),W0=n(D,"LI",{});var Z$e=s(W0);A2e=n(Z$e,"STRONG",{});var z2t=s(A2e);Hsr=r(z2t,"deberta"),z2t.forEach(t),Usr=r(Z$e," \u2014 "),kz=n(Z$e,"A",{href:!0});var W2t=s(kz);Jsr=r(W2t,"TFDebertaModel"),W2t.forEach(t),Ysr=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),Ksr=i(D),Q0=n(D,"LI",{});var eke=s(Q0);y2e=n(eke,"STRONG",{});var Q2t=s(y2e);Zsr=r(Q2t,"deberta-v2"),Q2t.forEach(t),elr=r(eke," \u2014 "),Sz=n(eke,"A",{href:!0});var H2t=s(Sz);olr=r(H2t,"TFDebertaV2Model"),H2t.forEach(t),rlr=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),tlr=i(D),H0=n(D,"LI",{});var oke=s(H0);L2e=n(oke,"STRONG",{});var U2t=s(L2e);alr=r(U2t,"distilbert"),U2t.forEach(t),nlr=r(oke," \u2014 "),Rz=n(oke,"A",{href:!0});var J2t=s(Rz);slr=r(J2t,"TFDistilBertModel"),J2t.forEach(t),llr=r(oke," (DistilBERT model)"),oke.forEach(t),ilr=i(D),U0=n(D,"LI",{});var rke=s(U0);x2e=n(rke,"STRONG",{});var Y2t=s(x2e);dlr=r(Y2t,"dpr"),Y2t.forEach(t),clr=r(rke," \u2014 "),Pz=n(rke,"A",{href:!0});var K2t=s(Pz);flr=r(K2t,"TFDPRQuestionEncoder"),K2t.forEach(t),mlr=r(rke," (DPR model)"),rke.forEach(t),glr=i(D),J0=n(D,"LI",{});var tke=s(J0);$2e=n(tke,"STRONG",{});var Z2t=s($2e);hlr=r(Z2t,"electra"),Z2t.forEach(t),plr=r(tke," \u2014 "),Bz=n(tke,"A",{href:!0});var e1t=s(Bz);ulr=r(e1t,"TFElectraModel"),e1t.forEach(t),_lr=r(tke," (ELECTRA model)"),tke.forEach(t),blr=i(D),Y0=n(D,"LI",{});var ake=s(Y0);k2e=n(ake,"STRONG",{});var o1t=s(k2e);vlr=r(o1t,"flaubert"),o1t.forEach(t),Flr=r(ake," \u2014 "),Iz=n(ake,"A",{href:!0});var r1t=s(Iz);Tlr=r(r1t,"TFFlaubertModel"),r1t.forEach(t),Mlr=r(ake," (FlauBERT model)"),ake.forEach(t),Elr=i(D),Bs=n(D,"LI",{});var E$=s(Bs);S2e=n(E$,"STRONG",{});var t1t=s(S2e);Clr=r(t1t,"funnel"),t1t.forEach(t),wlr=r(E$," \u2014 "),qz=n(E$,"A",{href:!0});var a1t=s(qz);Alr=r(a1t,"TFFunnelModel"),a1t.forEach(t),ylr=r(E$," or "),Nz=n(E$,"A",{href:!0});var n1t=s(Nz);Llr=r(n1t,"TFFunnelBaseModel"),n1t.forEach(t),xlr=r(E$," (Funnel Transformer model)"),E$.forEach(t),$lr=i(D),K0=n(D,"LI",{});var nke=s(K0);R2e=n(nke,"STRONG",{});var s1t=s(R2e);klr=r(s1t,"gpt2"),s1t.forEach(t),Slr=r(nke," \u2014 "),jz=n(nke,"A",{href:!0});var l1t=s(jz);Rlr=r(l1t,"TFGPT2Model"),l1t.forEach(t),Plr=r(nke," (OpenAI GPT-2 model)"),nke.forEach(t),Blr=i(D),Z0=n(D,"LI",{});var ske=s(Z0);P2e=n(ske,"STRONG",{});var i1t=s(P2e);Ilr=r(i1t,"gptj"),i1t.forEach(t),qlr=r(ske," \u2014 "),Dz=n(ske,"A",{href:!0});var d1t=s(Dz);Nlr=r(d1t,"TFGPTJModel"),d1t.forEach(t),jlr=r(ske," (GPT-J model)"),ske.forEach(t),Dlr=i(D),eT=n(D,"LI",{});var lke=s(eT);B2e=n(lke,"STRONG",{});var c1t=s(B2e);Glr=r(c1t,"hubert"),c1t.forEach(t),Olr=r(lke," \u2014 "),Gz=n(lke,"A",{href:!0});var f1t=s(Gz);Vlr=r(f1t,"TFHubertModel"),f1t.forEach(t),Xlr=r(lke," (Hubert model)"),lke.forEach(t),zlr=i(D),oT=n(D,"LI",{});var ike=s(oT);I2e=n(ike,"STRONG",{});var m1t=s(I2e);Wlr=r(m1t,"layoutlm"),m1t.forEach(t),Qlr=r(ike," \u2014 "),Oz=n(ike,"A",{href:!0});var g1t=s(Oz);Hlr=r(g1t,"TFLayoutLMModel"),g1t.forEach(t),Ulr=r(ike," (LayoutLM model)"),ike.forEach(t),Jlr=i(D),rT=n(D,"LI",{});var dke=s(rT);q2e=n(dke,"STRONG",{});var h1t=s(q2e);Ylr=r(h1t,"led"),h1t.forEach(t),Klr=r(dke," \u2014 "),Vz=n(dke,"A",{href:!0});var p1t=s(Vz);Zlr=r(p1t,"TFLEDModel"),p1t.forEach(t),eir=r(dke," (LED model)"),dke.forEach(t),oir=i(D),tT=n(D,"LI",{});var cke=s(tT);N2e=n(cke,"STRONG",{});var u1t=s(N2e);rir=r(u1t,"longformer"),u1t.forEach(t),tir=r(cke," \u2014 "),Xz=n(cke,"A",{href:!0});var _1t=s(Xz);air=r(_1t,"TFLongformerModel"),_1t.forEach(t),nir=r(cke," (Longformer model)"),cke.forEach(t),sir=i(D),aT=n(D,"LI",{});var fke=s(aT);j2e=n(fke,"STRONG",{});var b1t=s(j2e);lir=r(b1t,"lxmert"),b1t.forEach(t),iir=r(fke," \u2014 "),zz=n(fke,"A",{href:!0});var v1t=s(zz);dir=r(v1t,"TFLxmertModel"),v1t.forEach(t),cir=r(fke," (LXMERT model)"),fke.forEach(t),fir=i(D),nT=n(D,"LI",{});var mke=s(nT);D2e=n(mke,"STRONG",{});var F1t=s(D2e);mir=r(F1t,"marian"),F1t.forEach(t),gir=r(mke," \u2014 "),Wz=n(mke,"A",{href:!0});var T1t=s(Wz);hir=r(T1t,"TFMarianModel"),T1t.forEach(t),pir=r(mke," (Marian model)"),mke.forEach(t),uir=i(D),sT=n(D,"LI",{});var gke=s(sT);G2e=n(gke,"STRONG",{});var M1t=s(G2e);_ir=r(M1t,"mbart"),M1t.forEach(t),bir=r(gke," \u2014 "),Qz=n(gke,"A",{href:!0});var E1t=s(Qz);vir=r(E1t,"TFMBartModel"),E1t.forEach(t),Fir=r(gke," (mBART model)"),gke.forEach(t),Tir=i(D),lT=n(D,"LI",{});var hke=s(lT);O2e=n(hke,"STRONG",{});var C1t=s(O2e);Mir=r(C1t,"mobilebert"),C1t.forEach(t),Eir=r(hke," \u2014 "),Hz=n(hke,"A",{href:!0});var w1t=s(Hz);Cir=r(w1t,"TFMobileBertModel"),w1t.forEach(t),wir=r(hke," (MobileBERT model)"),hke.forEach(t),Air=i(D),iT=n(D,"LI",{});var pke=s(iT);V2e=n(pke,"STRONG",{});var A1t=s(V2e);yir=r(A1t,"mpnet"),A1t.forEach(t),Lir=r(pke," \u2014 "),Uz=n(pke,"A",{href:!0});var y1t=s(Uz);xir=r(y1t,"TFMPNetModel"),y1t.forEach(t),$ir=r(pke," (MPNet model)"),pke.forEach(t),kir=i(D),dT=n(D,"LI",{});var uke=s(dT);X2e=n(uke,"STRONG",{});var L1t=s(X2e);Sir=r(L1t,"mt5"),L1t.forEach(t),Rir=r(uke," \u2014 "),Jz=n(uke,"A",{href:!0});var x1t=s(Jz);Pir=r(x1t,"TFMT5Model"),x1t.forEach(t),Bir=r(uke," (mT5 model)"),uke.forEach(t),Iir=i(D),cT=n(D,"LI",{});var _ke=s(cT);z2e=n(_ke,"STRONG",{});var $1t=s(z2e);qir=r($1t,"openai-gpt"),$1t.forEach(t),Nir=r(_ke," \u2014 "),Yz=n(_ke,"A",{href:!0});var k1t=s(Yz);jir=r(k1t,"TFOpenAIGPTModel"),k1t.forEach(t),Dir=r(_ke," (OpenAI GPT model)"),_ke.forEach(t),Gir=i(D),fT=n(D,"LI",{});var bke=s(fT);W2e=n(bke,"STRONG",{});var S1t=s(W2e);Oir=r(S1t,"pegasus"),S1t.forEach(t),Vir=r(bke," \u2014 "),Kz=n(bke,"A",{href:!0});var R1t=s(Kz);Xir=r(R1t,"TFPegasusModel"),R1t.forEach(t),zir=r(bke," (Pegasus model)"),bke.forEach(t),Wir=i(D),mT=n(D,"LI",{});var vke=s(mT);Q2e=n(vke,"STRONG",{});var P1t=s(Q2e);Qir=r(P1t,"rembert"),P1t.forEach(t),Hir=r(vke," \u2014 "),Zz=n(vke,"A",{href:!0});var B1t=s(Zz);Uir=r(B1t,"TFRemBertModel"),B1t.forEach(t),Jir=r(vke," (RemBERT model)"),vke.forEach(t),Yir=i(D),gT=n(D,"LI",{});var Fke=s(gT);H2e=n(Fke,"STRONG",{});var I1t=s(H2e);Kir=r(I1t,"roberta"),I1t.forEach(t),Zir=r(Fke," \u2014 "),eW=n(Fke,"A",{href:!0});var q1t=s(eW);edr=r(q1t,"TFRobertaModel"),q1t.forEach(t),odr=r(Fke," (RoBERTa model)"),Fke.forEach(t),rdr=i(D),hT=n(D,"LI",{});var Tke=s(hT);U2e=n(Tke,"STRONG",{});var N1t=s(U2e);tdr=r(N1t,"roformer"),N1t.forEach(t),adr=r(Tke," \u2014 "),oW=n(Tke,"A",{href:!0});var j1t=s(oW);ndr=r(j1t,"TFRoFormerModel"),j1t.forEach(t),sdr=r(Tke," (RoFormer model)"),Tke.forEach(t),ldr=i(D),pT=n(D,"LI",{});var Mke=s(pT);J2e=n(Mke,"STRONG",{});var D1t=s(J2e);idr=r(D1t,"speech_to_text"),D1t.forEach(t),ddr=r(Mke," \u2014 "),rW=n(Mke,"A",{href:!0});var G1t=s(rW);cdr=r(G1t,"TFSpeech2TextModel"),G1t.forEach(t),fdr=r(Mke," (Speech2Text model)"),Mke.forEach(t),mdr=i(D),uT=n(D,"LI",{});var Eke=s(uT);Y2e=n(Eke,"STRONG",{});var O1t=s(Y2e);gdr=r(O1t,"swin"),O1t.forEach(t),hdr=r(Eke," \u2014 "),tW=n(Eke,"A",{href:!0});var V1t=s(tW);pdr=r(V1t,"TFSwinModel"),V1t.forEach(t),udr=r(Eke," (Swin model)"),Eke.forEach(t),_dr=i(D),_T=n(D,"LI",{});var Cke=s(_T);K2e=n(Cke,"STRONG",{});var X1t=s(K2e);bdr=r(X1t,"t5"),X1t.forEach(t),vdr=r(Cke," \u2014 "),aW=n(Cke,"A",{href:!0});var z1t=s(aW);Fdr=r(z1t,"TFT5Model"),z1t.forEach(t),Tdr=r(Cke," (T5 model)"),Cke.forEach(t),Mdr=i(D),bT=n(D,"LI",{});var wke=s(bT);Z2e=n(wke,"STRONG",{});var W1t=s(Z2e);Edr=r(W1t,"tapas"),W1t.forEach(t),Cdr=r(wke," \u2014 "),nW=n(wke,"A",{href:!0});var Q1t=s(nW);wdr=r(Q1t,"TFTapasModel"),Q1t.forEach(t),Adr=r(wke," (TAPAS model)"),wke.forEach(t),ydr=i(D),vT=n(D,"LI",{});var Ake=s(vT);e1e=n(Ake,"STRONG",{});var H1t=s(e1e);Ldr=r(H1t,"transfo-xl"),H1t.forEach(t),xdr=r(Ake," \u2014 "),sW=n(Ake,"A",{href:!0});var U1t=s(sW);$dr=r(U1t,"TFTransfoXLModel"),U1t.forEach(t),kdr=r(Ake," (Transformer-XL model)"),Ake.forEach(t),Sdr=i(D),FT=n(D,"LI",{});var yke=s(FT);o1e=n(yke,"STRONG",{});var J1t=s(o1e);Rdr=r(J1t,"vit"),J1t.forEach(t),Pdr=r(yke," \u2014 "),lW=n(yke,"A",{href:!0});var Y1t=s(lW);Bdr=r(Y1t,"TFViTModel"),Y1t.forEach(t),Idr=r(yke," (ViT model)"),yke.forEach(t),qdr=i(D),TT=n(D,"LI",{});var Lke=s(TT);r1e=n(Lke,"STRONG",{});var K1t=s(r1e);Ndr=r(K1t,"vit_mae"),K1t.forEach(t),jdr=r(Lke," \u2014 "),iW=n(Lke,"A",{href:!0});var Z1t=s(iW);Ddr=r(Z1t,"TFViTMAEModel"),Z1t.forEach(t),Gdr=r(Lke," (ViTMAE model)"),Lke.forEach(t),Odr=i(D),MT=n(D,"LI",{});var xke=s(MT);t1e=n(xke,"STRONG",{});var ebt=s(t1e);Vdr=r(ebt,"wav2vec2"),ebt.forEach(t),Xdr=r(xke," \u2014 "),dW=n(xke,"A",{href:!0});var obt=s(dW);zdr=r(obt,"TFWav2Vec2Model"),obt.forEach(t),Wdr=r(xke," (Wav2Vec2 model)"),xke.forEach(t),Qdr=i(D),ET=n(D,"LI",{});var $ke=s(ET);a1e=n($ke,"STRONG",{});var rbt=s(a1e);Hdr=r(rbt,"xlm"),rbt.forEach(t),Udr=r($ke," \u2014 "),cW=n($ke,"A",{href:!0});var tbt=s(cW);Jdr=r(tbt,"TFXLMModel"),tbt.forEach(t),Ydr=r($ke," (XLM model)"),$ke.forEach(t),Kdr=i(D),CT=n(D,"LI",{});var kke=s(CT);n1e=n(kke,"STRONG",{});var abt=s(n1e);Zdr=r(abt,"xlm-roberta"),abt.forEach(t),ecr=r(kke," \u2014 "),fW=n(kke,"A",{href:!0});var nbt=s(fW);ocr=r(nbt,"TFXLMRobertaModel"),nbt.forEach(t),rcr=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),tcr=i(D),wT=n(D,"LI",{});var Ske=s(wT);s1e=n(Ske,"STRONG",{});var sbt=s(s1e);acr=r(sbt,"xlnet"),sbt.forEach(t),ncr=r(Ske," \u2014 "),mW=n(Ske,"A",{href:!0});var lbt=s(mW);scr=r(lbt,"TFXLNetModel"),lbt.forEach(t),lcr=r(Ske," (XLNet model)"),Ske.forEach(t),D.forEach(t),icr=i(gl),T(AT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Sqe=i(f),Vd=n(f,"H2",{class:!0});var Nje=s(Vd);yT=n(Nje,"A",{id:!0,class:!0,href:!0});var ibt=s(yT);l1e=n(ibt,"SPAN",{});var dbt=s(l1e);T(QL.$$.fragment,dbt),dbt.forEach(t),ibt.forEach(t),dcr=i(Nje),i1e=n(Nje,"SPAN",{});var cbt=s(i1e);ccr=r(cbt,"TFAutoModelForPreTraining"),cbt.forEach(t),Nje.forEach(t),Rqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(HL.$$.fragment,hl),fcr=i(hl),Xd=n(hl,"P",{});var MZ=s(Xd);mcr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gW=n(MZ,"A",{href:!0});var fbt=s(gW);gcr=r(fbt,"from_pretrained()"),fbt.forEach(t),hcr=r(MZ," class method or the "),hW=n(MZ,"A",{href:!0});var mbt=s(hW);pcr=r(mbt,"from_config()"),mbt.forEach(t),ucr=r(MZ,` class
method.`),MZ.forEach(t),_cr=i(hl),UL=n(hl,"P",{});var jje=s(UL);bcr=r(jje,"This class cannot be instantiated directly using "),d1e=n(jje,"CODE",{});var gbt=s(d1e);vcr=r(gbt,"__init__()"),gbt.forEach(t),Fcr=r(jje," (throws an error)."),jje.forEach(t),Tcr=i(hl),Lt=n(hl,"DIV",{class:!0});var sw=s(Lt);T(JL.$$.fragment,sw),Mcr=i(sw),c1e=n(sw,"P",{});var hbt=s(c1e);Ecr=r(hbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hbt.forEach(t),Ccr=i(sw),zd=n(sw,"P",{});var EZ=s(zd);wcr=r(EZ,`Note:
Loading a model from its configuration file does `),f1e=n(EZ,"STRONG",{});var pbt=s(f1e);Acr=r(pbt,"not"),pbt.forEach(t),ycr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(EZ,"A",{href:!0});var ubt=s(pW);Lcr=r(ubt,"from_pretrained()"),ubt.forEach(t),xcr=r(EZ," to load the model weights."),EZ.forEach(t),$cr=i(sw),T(LT.$$.fragment,sw),sw.forEach(t),kcr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(YL.$$.fragment,pl),Scr=i(pl),m1e=n(pl,"P",{});var _bt=s(m1e);Rcr=r(_bt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_bt.forEach(t),Pcr=i(pl),Za=n(pl,"P",{});var lw=s(Za);Bcr=r(lw,"The model class to instantiate is selected based on the "),g1e=n(lw,"CODE",{});var bbt=s(g1e);Icr=r(bbt,"model_type"),bbt.forEach(t),qcr=r(lw,` property of the config object (either
passed as an argument or loaded from `),h1e=n(lw,"CODE",{});var vbt=s(h1e);Ncr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),jcr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(lw,"CODE",{});var Fbt=s(p1e);Dcr=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),Gcr=r(lw,":"),lw.forEach(t),Ocr=i(pl),se=n(pl,"UL",{});var le=s(se);xT=n(le,"LI",{});var Rke=s(xT);u1e=n(Rke,"STRONG",{});var Tbt=s(u1e);Vcr=r(Tbt,"albert"),Tbt.forEach(t),Xcr=r(Rke," \u2014 "),uW=n(Rke,"A",{href:!0});var Mbt=s(uW);zcr=r(Mbt,"TFAlbertForPreTraining"),Mbt.forEach(t),Wcr=r(Rke," (ALBERT model)"),Rke.forEach(t),Qcr=i(le),$T=n(le,"LI",{});var Pke=s($T);_1e=n(Pke,"STRONG",{});var Ebt=s(_1e);Hcr=r(Ebt,"bart"),Ebt.forEach(t),Ucr=r(Pke," \u2014 "),_W=n(Pke,"A",{href:!0});var Cbt=s(_W);Jcr=r(Cbt,"TFBartForConditionalGeneration"),Cbt.forEach(t),Ycr=r(Pke," (BART model)"),Pke.forEach(t),Kcr=i(le),kT=n(le,"LI",{});var Bke=s(kT);b1e=n(Bke,"STRONG",{});var wbt=s(b1e);Zcr=r(wbt,"bert"),wbt.forEach(t),efr=r(Bke," \u2014 "),bW=n(Bke,"A",{href:!0});var Abt=s(bW);ofr=r(Abt,"TFBertForPreTraining"),Abt.forEach(t),rfr=r(Bke," (BERT model)"),Bke.forEach(t),tfr=i(le),ST=n(le,"LI",{});var Ike=s(ST);v1e=n(Ike,"STRONG",{});var ybt=s(v1e);afr=r(ybt,"camembert"),ybt.forEach(t),nfr=r(Ike," \u2014 "),vW=n(Ike,"A",{href:!0});var Lbt=s(vW);sfr=r(Lbt,"TFCamembertForMaskedLM"),Lbt.forEach(t),lfr=r(Ike," (CamemBERT model)"),Ike.forEach(t),ifr=i(le),RT=n(le,"LI",{});var qke=s(RT);F1e=n(qke,"STRONG",{});var xbt=s(F1e);dfr=r(xbt,"ctrl"),xbt.forEach(t),cfr=r(qke," \u2014 "),FW=n(qke,"A",{href:!0});var $bt=s(FW);ffr=r($bt,"TFCTRLLMHeadModel"),$bt.forEach(t),mfr=r(qke," (CTRL model)"),qke.forEach(t),gfr=i(le),PT=n(le,"LI",{});var Nke=s(PT);T1e=n(Nke,"STRONG",{});var kbt=s(T1e);hfr=r(kbt,"distilbert"),kbt.forEach(t),pfr=r(Nke," \u2014 "),TW=n(Nke,"A",{href:!0});var Sbt=s(TW);ufr=r(Sbt,"TFDistilBertForMaskedLM"),Sbt.forEach(t),_fr=r(Nke," (DistilBERT model)"),Nke.forEach(t),bfr=i(le),BT=n(le,"LI",{});var jke=s(BT);M1e=n(jke,"STRONG",{});var Rbt=s(M1e);vfr=r(Rbt,"electra"),Rbt.forEach(t),Ffr=r(jke," \u2014 "),MW=n(jke,"A",{href:!0});var Pbt=s(MW);Tfr=r(Pbt,"TFElectraForPreTraining"),Pbt.forEach(t),Mfr=r(jke," (ELECTRA model)"),jke.forEach(t),Efr=i(le),IT=n(le,"LI",{});var Dke=s(IT);E1e=n(Dke,"STRONG",{});var Bbt=s(E1e);Cfr=r(Bbt,"flaubert"),Bbt.forEach(t),wfr=r(Dke," \u2014 "),EW=n(Dke,"A",{href:!0});var Ibt=s(EW);Afr=r(Ibt,"TFFlaubertWithLMHeadModel"),Ibt.forEach(t),yfr=r(Dke," (FlauBERT model)"),Dke.forEach(t),Lfr=i(le),qT=n(le,"LI",{});var Gke=s(qT);C1e=n(Gke,"STRONG",{});var qbt=s(C1e);xfr=r(qbt,"funnel"),qbt.forEach(t),$fr=r(Gke," \u2014 "),CW=n(Gke,"A",{href:!0});var Nbt=s(CW);kfr=r(Nbt,"TFFunnelForPreTraining"),Nbt.forEach(t),Sfr=r(Gke," (Funnel Transformer model)"),Gke.forEach(t),Rfr=i(le),NT=n(le,"LI",{});var Oke=s(NT);w1e=n(Oke,"STRONG",{});var jbt=s(w1e);Pfr=r(jbt,"gpt2"),jbt.forEach(t),Bfr=r(Oke," \u2014 "),wW=n(Oke,"A",{href:!0});var Dbt=s(wW);Ifr=r(Dbt,"TFGPT2LMHeadModel"),Dbt.forEach(t),qfr=r(Oke," (OpenAI GPT-2 model)"),Oke.forEach(t),Nfr=i(le),jT=n(le,"LI",{});var Vke=s(jT);A1e=n(Vke,"STRONG",{});var Gbt=s(A1e);jfr=r(Gbt,"layoutlm"),Gbt.forEach(t),Dfr=r(Vke," \u2014 "),AW=n(Vke,"A",{href:!0});var Obt=s(AW);Gfr=r(Obt,"TFLayoutLMForMaskedLM"),Obt.forEach(t),Ofr=r(Vke," (LayoutLM model)"),Vke.forEach(t),Vfr=i(le),DT=n(le,"LI",{});var Xke=s(DT);y1e=n(Xke,"STRONG",{});var Vbt=s(y1e);Xfr=r(Vbt,"lxmert"),Vbt.forEach(t),zfr=r(Xke," \u2014 "),yW=n(Xke,"A",{href:!0});var Xbt=s(yW);Wfr=r(Xbt,"TFLxmertForPreTraining"),Xbt.forEach(t),Qfr=r(Xke," (LXMERT model)"),Xke.forEach(t),Hfr=i(le),GT=n(le,"LI",{});var zke=s(GT);L1e=n(zke,"STRONG",{});var zbt=s(L1e);Ufr=r(zbt,"mobilebert"),zbt.forEach(t),Jfr=r(zke," \u2014 "),LW=n(zke,"A",{href:!0});var Wbt=s(LW);Yfr=r(Wbt,"TFMobileBertForPreTraining"),Wbt.forEach(t),Kfr=r(zke," (MobileBERT model)"),zke.forEach(t),Zfr=i(le),OT=n(le,"LI",{});var Wke=s(OT);x1e=n(Wke,"STRONG",{});var Qbt=s(x1e);emr=r(Qbt,"mpnet"),Qbt.forEach(t),omr=r(Wke," \u2014 "),xW=n(Wke,"A",{href:!0});var Hbt=s(xW);rmr=r(Hbt,"TFMPNetForMaskedLM"),Hbt.forEach(t),tmr=r(Wke," (MPNet model)"),Wke.forEach(t),amr=i(le),VT=n(le,"LI",{});var Qke=s(VT);$1e=n(Qke,"STRONG",{});var Ubt=s($1e);nmr=r(Ubt,"openai-gpt"),Ubt.forEach(t),smr=r(Qke," \u2014 "),$W=n(Qke,"A",{href:!0});var Jbt=s($W);lmr=r(Jbt,"TFOpenAIGPTLMHeadModel"),Jbt.forEach(t),imr=r(Qke," (OpenAI GPT model)"),Qke.forEach(t),dmr=i(le),XT=n(le,"LI",{});var Hke=s(XT);k1e=n(Hke,"STRONG",{});var Ybt=s(k1e);cmr=r(Ybt,"roberta"),Ybt.forEach(t),fmr=r(Hke," \u2014 "),kW=n(Hke,"A",{href:!0});var Kbt=s(kW);mmr=r(Kbt,"TFRobertaForMaskedLM"),Kbt.forEach(t),gmr=r(Hke," (RoBERTa model)"),Hke.forEach(t),hmr=i(le),zT=n(le,"LI",{});var Uke=s(zT);S1e=n(Uke,"STRONG",{});var Zbt=s(S1e);pmr=r(Zbt,"t5"),Zbt.forEach(t),umr=r(Uke," \u2014 "),SW=n(Uke,"A",{href:!0});var evt=s(SW);_mr=r(evt,"TFT5ForConditionalGeneration"),evt.forEach(t),bmr=r(Uke," (T5 model)"),Uke.forEach(t),vmr=i(le),WT=n(le,"LI",{});var Jke=s(WT);R1e=n(Jke,"STRONG",{});var ovt=s(R1e);Fmr=r(ovt,"tapas"),ovt.forEach(t),Tmr=r(Jke," \u2014 "),RW=n(Jke,"A",{href:!0});var rvt=s(RW);Mmr=r(rvt,"TFTapasForMaskedLM"),rvt.forEach(t),Emr=r(Jke," (TAPAS model)"),Jke.forEach(t),Cmr=i(le),QT=n(le,"LI",{});var Yke=s(QT);P1e=n(Yke,"STRONG",{});var tvt=s(P1e);wmr=r(tvt,"transfo-xl"),tvt.forEach(t),Amr=r(Yke," \u2014 "),PW=n(Yke,"A",{href:!0});var avt=s(PW);ymr=r(avt,"TFTransfoXLLMHeadModel"),avt.forEach(t),Lmr=r(Yke," (Transformer-XL model)"),Yke.forEach(t),xmr=i(le),HT=n(le,"LI",{});var Kke=s(HT);B1e=n(Kke,"STRONG",{});var nvt=s(B1e);$mr=r(nvt,"vit_mae"),nvt.forEach(t),kmr=r(Kke," \u2014 "),BW=n(Kke,"A",{href:!0});var svt=s(BW);Smr=r(svt,"TFViTMAEForPreTraining"),svt.forEach(t),Rmr=r(Kke," (ViTMAE model)"),Kke.forEach(t),Pmr=i(le),UT=n(le,"LI",{});var Zke=s(UT);I1e=n(Zke,"STRONG",{});var lvt=s(I1e);Bmr=r(lvt,"xlm"),lvt.forEach(t),Imr=r(Zke," \u2014 "),IW=n(Zke,"A",{href:!0});var ivt=s(IW);qmr=r(ivt,"TFXLMWithLMHeadModel"),ivt.forEach(t),Nmr=r(Zke," (XLM model)"),Zke.forEach(t),jmr=i(le),JT=n(le,"LI",{});var eSe=s(JT);q1e=n(eSe,"STRONG",{});var dvt=s(q1e);Dmr=r(dvt,"xlm-roberta"),dvt.forEach(t),Gmr=r(eSe," \u2014 "),qW=n(eSe,"A",{href:!0});var cvt=s(qW);Omr=r(cvt,"TFXLMRobertaForMaskedLM"),cvt.forEach(t),Vmr=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),Xmr=i(le),YT=n(le,"LI",{});var oSe=s(YT);N1e=n(oSe,"STRONG",{});var fvt=s(N1e);zmr=r(fvt,"xlnet"),fvt.forEach(t),Wmr=r(oSe," \u2014 "),NW=n(oSe,"A",{href:!0});var mvt=s(NW);Qmr=r(mvt,"TFXLNetLMHeadModel"),mvt.forEach(t),Hmr=r(oSe," (XLNet model)"),oSe.forEach(t),le.forEach(t),Umr=i(pl),T(KT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Pqe=i(f),Wd=n(f,"H2",{class:!0});var Dje=s(Wd);ZT=n(Dje,"A",{id:!0,class:!0,href:!0});var gvt=s(ZT);j1e=n(gvt,"SPAN",{});var hvt=s(j1e);T(KL.$$.fragment,hvt),hvt.forEach(t),gvt.forEach(t),Jmr=i(Dje),D1e=n(Dje,"SPAN",{});var pvt=s(D1e);Ymr=r(pvt,"TFAutoModelForCausalLM"),pvt.forEach(t),Dje.forEach(t),Bqe=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(ZL.$$.fragment,ul),Kmr=i(ul),Qd=n(ul,"P",{});var CZ=s(Qd);Zmr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jW=n(CZ,"A",{href:!0});var uvt=s(jW);egr=r(uvt,"from_pretrained()"),uvt.forEach(t),ogr=r(CZ," class method or the "),DW=n(CZ,"A",{href:!0});var _vt=s(DW);rgr=r(_vt,"from_config()"),_vt.forEach(t),tgr=r(CZ,` class
method.`),CZ.forEach(t),agr=i(ul),e8=n(ul,"P",{});var Gje=s(e8);ngr=r(Gje,"This class cannot be instantiated directly using "),G1e=n(Gje,"CODE",{});var bvt=s(G1e);sgr=r(bvt,"__init__()"),bvt.forEach(t),lgr=r(Gje," (throws an error)."),Gje.forEach(t),igr=i(ul),xt=n(ul,"DIV",{class:!0});var iw=s(xt);T(o8.$$.fragment,iw),dgr=i(iw),O1e=n(iw,"P",{});var vvt=s(O1e);cgr=r(vvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vvt.forEach(t),fgr=i(iw),Hd=n(iw,"P",{});var wZ=s(Hd);mgr=r(wZ,`Note:
Loading a model from its configuration file does `),V1e=n(wZ,"STRONG",{});var Fvt=s(V1e);ggr=r(Fvt,"not"),Fvt.forEach(t),hgr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(wZ,"A",{href:!0});var Tvt=s(GW);pgr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),ugr=r(wZ," to load the model weights."),wZ.forEach(t),_gr=i(iw),T(e7.$$.fragment,iw),iw.forEach(t),bgr=i(ul),yr=n(ul,"DIV",{class:!0});var _l=s(yr);T(r8.$$.fragment,_l),vgr=i(_l),X1e=n(_l,"P",{});var Mvt=s(X1e);Fgr=r(Mvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mvt.forEach(t),Tgr=i(_l),en=n(_l,"P",{});var dw=s(en);Mgr=r(dw,"The model class to instantiate is selected based on the "),z1e=n(dw,"CODE",{});var Evt=s(z1e);Egr=r(Evt,"model_type"),Evt.forEach(t),Cgr=r(dw,` property of the config object (either
passed as an argument or loaded from `),W1e=n(dw,"CODE",{});var Cvt=s(W1e);wgr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),Agr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(dw,"CODE",{});var wvt=s(Q1e);ygr=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),Lgr=r(dw,":"),dw.forEach(t),xgr=i(_l),Te=n(_l,"UL",{});var Ce=s(Te);o7=n(Ce,"LI",{});var rSe=s(o7);H1e=n(rSe,"STRONG",{});var Avt=s(H1e);$gr=r(Avt,"bert"),Avt.forEach(t),kgr=r(rSe," \u2014 "),OW=n(rSe,"A",{href:!0});var yvt=s(OW);Sgr=r(yvt,"TFBertLMHeadModel"),yvt.forEach(t),Rgr=r(rSe," (BERT model)"),rSe.forEach(t),Pgr=i(Ce),r7=n(Ce,"LI",{});var tSe=s(r7);U1e=n(tSe,"STRONG",{});var Lvt=s(U1e);Bgr=r(Lvt,"camembert"),Lvt.forEach(t),Igr=r(tSe," \u2014 "),VW=n(tSe,"A",{href:!0});var xvt=s(VW);qgr=r(xvt,"TFCamembertForCausalLM"),xvt.forEach(t),Ngr=r(tSe," (CamemBERT model)"),tSe.forEach(t),jgr=i(Ce),t7=n(Ce,"LI",{});var aSe=s(t7);J1e=n(aSe,"STRONG",{});var $vt=s(J1e);Dgr=r($vt,"ctrl"),$vt.forEach(t),Ggr=r(aSe," \u2014 "),XW=n(aSe,"A",{href:!0});var kvt=s(XW);Ogr=r(kvt,"TFCTRLLMHeadModel"),kvt.forEach(t),Vgr=r(aSe," (CTRL model)"),aSe.forEach(t),Xgr=i(Ce),a7=n(Ce,"LI",{});var nSe=s(a7);Y1e=n(nSe,"STRONG",{});var Svt=s(Y1e);zgr=r(Svt,"gpt2"),Svt.forEach(t),Wgr=r(nSe," \u2014 "),zW=n(nSe,"A",{href:!0});var Rvt=s(zW);Qgr=r(Rvt,"TFGPT2LMHeadModel"),Rvt.forEach(t),Hgr=r(nSe," (OpenAI GPT-2 model)"),nSe.forEach(t),Ugr=i(Ce),n7=n(Ce,"LI",{});var sSe=s(n7);K1e=n(sSe,"STRONG",{});var Pvt=s(K1e);Jgr=r(Pvt,"gptj"),Pvt.forEach(t),Ygr=r(sSe," \u2014 "),WW=n(sSe,"A",{href:!0});var Bvt=s(WW);Kgr=r(Bvt,"TFGPTJForCausalLM"),Bvt.forEach(t),Zgr=r(sSe," (GPT-J model)"),sSe.forEach(t),ehr=i(Ce),s7=n(Ce,"LI",{});var lSe=s(s7);Z1e=n(lSe,"STRONG",{});var Ivt=s(Z1e);ohr=r(Ivt,"openai-gpt"),Ivt.forEach(t),rhr=r(lSe," \u2014 "),QW=n(lSe,"A",{href:!0});var qvt=s(QW);thr=r(qvt,"TFOpenAIGPTLMHeadModel"),qvt.forEach(t),ahr=r(lSe," (OpenAI GPT model)"),lSe.forEach(t),nhr=i(Ce),l7=n(Ce,"LI",{});var iSe=s(l7);ebe=n(iSe,"STRONG",{});var Nvt=s(ebe);shr=r(Nvt,"rembert"),Nvt.forEach(t),lhr=r(iSe," \u2014 "),HW=n(iSe,"A",{href:!0});var jvt=s(HW);ihr=r(jvt,"TFRemBertForCausalLM"),jvt.forEach(t),dhr=r(iSe," (RemBERT model)"),iSe.forEach(t),chr=i(Ce),i7=n(Ce,"LI",{});var dSe=s(i7);obe=n(dSe,"STRONG",{});var Dvt=s(obe);fhr=r(Dvt,"roberta"),Dvt.forEach(t),mhr=r(dSe," \u2014 "),UW=n(dSe,"A",{href:!0});var Gvt=s(UW);ghr=r(Gvt,"TFRobertaForCausalLM"),Gvt.forEach(t),hhr=r(dSe," (RoBERTa model)"),dSe.forEach(t),phr=i(Ce),d7=n(Ce,"LI",{});var cSe=s(d7);rbe=n(cSe,"STRONG",{});var Ovt=s(rbe);uhr=r(Ovt,"roformer"),Ovt.forEach(t),_hr=r(cSe," \u2014 "),JW=n(cSe,"A",{href:!0});var Vvt=s(JW);bhr=r(Vvt,"TFRoFormerForCausalLM"),Vvt.forEach(t),vhr=r(cSe," (RoFormer model)"),cSe.forEach(t),Fhr=i(Ce),c7=n(Ce,"LI",{});var fSe=s(c7);tbe=n(fSe,"STRONG",{});var Xvt=s(tbe);Thr=r(Xvt,"transfo-xl"),Xvt.forEach(t),Mhr=r(fSe," \u2014 "),YW=n(fSe,"A",{href:!0});var zvt=s(YW);Ehr=r(zvt,"TFTransfoXLLMHeadModel"),zvt.forEach(t),Chr=r(fSe," (Transformer-XL model)"),fSe.forEach(t),whr=i(Ce),f7=n(Ce,"LI",{});var mSe=s(f7);abe=n(mSe,"STRONG",{});var Wvt=s(abe);Ahr=r(Wvt,"xlm"),Wvt.forEach(t),yhr=r(mSe," \u2014 "),KW=n(mSe,"A",{href:!0});var Qvt=s(KW);Lhr=r(Qvt,"TFXLMWithLMHeadModel"),Qvt.forEach(t),xhr=r(mSe," (XLM model)"),mSe.forEach(t),$hr=i(Ce),m7=n(Ce,"LI",{});var gSe=s(m7);nbe=n(gSe,"STRONG",{});var Hvt=s(nbe);khr=r(Hvt,"xlnet"),Hvt.forEach(t),Shr=r(gSe," \u2014 "),ZW=n(gSe,"A",{href:!0});var Uvt=s(ZW);Rhr=r(Uvt,"TFXLNetLMHeadModel"),Uvt.forEach(t),Phr=r(gSe," (XLNet model)"),gSe.forEach(t),Ce.forEach(t),Bhr=i(_l),T(g7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),Iqe=i(f),Ud=n(f,"H2",{class:!0});var Oje=s(Ud);h7=n(Oje,"A",{id:!0,class:!0,href:!0});var Jvt=s(h7);sbe=n(Jvt,"SPAN",{});var Yvt=s(sbe);T(t8.$$.fragment,Yvt),Yvt.forEach(t),Jvt.forEach(t),Ihr=i(Oje),lbe=n(Oje,"SPAN",{});var Kvt=s(lbe);qhr=r(Kvt,"TFAutoModelForImageClassification"),Kvt.forEach(t),Oje.forEach(t),qqe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(a8.$$.fragment,bl),Nhr=i(bl),Jd=n(bl,"P",{});var AZ=s(Jd);jhr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eQ=n(AZ,"A",{href:!0});var Zvt=s(eQ);Dhr=r(Zvt,"from_pretrained()"),Zvt.forEach(t),Ghr=r(AZ," class method or the "),oQ=n(AZ,"A",{href:!0});var eFt=s(oQ);Ohr=r(eFt,"from_config()"),eFt.forEach(t),Vhr=r(AZ,` class
method.`),AZ.forEach(t),Xhr=i(bl),n8=n(bl,"P",{});var Vje=s(n8);zhr=r(Vje,"This class cannot be instantiated directly using "),ibe=n(Vje,"CODE",{});var oFt=s(ibe);Whr=r(oFt,"__init__()"),oFt.forEach(t),Qhr=r(Vje," (throws an error)."),Vje.forEach(t),Hhr=i(bl),$t=n(bl,"DIV",{class:!0});var cw=s($t);T(s8.$$.fragment,cw),Uhr=i(cw),dbe=n(cw,"P",{});var rFt=s(dbe);Jhr=r(rFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rFt.forEach(t),Yhr=i(cw),Yd=n(cw,"P",{});var yZ=s(Yd);Khr=r(yZ,`Note:
Loading a model from its configuration file does `),cbe=n(yZ,"STRONG",{});var tFt=s(cbe);Zhr=r(tFt,"not"),tFt.forEach(t),epr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(yZ,"A",{href:!0});var aFt=s(rQ);opr=r(aFt,"from_pretrained()"),aFt.forEach(t),rpr=r(yZ," to load the model weights."),yZ.forEach(t),tpr=i(cw),T(p7.$$.fragment,cw),cw.forEach(t),apr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(l8.$$.fragment,vl),npr=i(vl),fbe=n(vl,"P",{});var nFt=s(fbe);spr=r(nFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nFt.forEach(t),lpr=i(vl),on=n(vl,"P",{});var fw=s(on);ipr=r(fw,"The model class to instantiate is selected based on the "),mbe=n(fw,"CODE",{});var sFt=s(mbe);dpr=r(sFt,"model_type"),sFt.forEach(t),cpr=r(fw,` property of the config object (either
passed as an argument or loaded from `),gbe=n(fw,"CODE",{});var lFt=s(gbe);fpr=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),mpr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(fw,"CODE",{});var iFt=s(hbe);gpr=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),hpr=r(fw,":"),fw.forEach(t),ppr=i(vl),rn=n(vl,"UL",{});var mw=s(rn);u7=n(mw,"LI",{});var hSe=s(u7);pbe=n(hSe,"STRONG",{});var dFt=s(pbe);upr=r(dFt,"convnext"),dFt.forEach(t),_pr=r(hSe," \u2014 "),tQ=n(hSe,"A",{href:!0});var cFt=s(tQ);bpr=r(cFt,"TFConvNextForImageClassification"),cFt.forEach(t),vpr=r(hSe," (ConvNext model)"),hSe.forEach(t),Fpr=i(mw),_7=n(mw,"LI",{});var pSe=s(_7);ube=n(pSe,"STRONG",{});var fFt=s(ube);Tpr=r(fFt,"data2vec-vision"),fFt.forEach(t),Mpr=r(pSe," \u2014 "),aQ=n(pSe,"A",{href:!0});var mFt=s(aQ);Epr=r(mFt,"TFData2VecVisionForImageClassification"),mFt.forEach(t),Cpr=r(pSe," (Data2VecVision model)"),pSe.forEach(t),wpr=i(mw),b7=n(mw,"LI",{});var uSe=s(b7);_be=n(uSe,"STRONG",{});var gFt=s(_be);Apr=r(gFt,"swin"),gFt.forEach(t),ypr=r(uSe," \u2014 "),nQ=n(uSe,"A",{href:!0});var hFt=s(nQ);Lpr=r(hFt,"TFSwinForImageClassification"),hFt.forEach(t),xpr=r(uSe," (Swin model)"),uSe.forEach(t),$pr=i(mw),v7=n(mw,"LI",{});var _Se=s(v7);bbe=n(_Se,"STRONG",{});var pFt=s(bbe);kpr=r(pFt,"vit"),pFt.forEach(t),Spr=r(_Se," \u2014 "),sQ=n(_Se,"A",{href:!0});var uFt=s(sQ);Rpr=r(uFt,"TFViTForImageClassification"),uFt.forEach(t),Ppr=r(_Se," (ViT model)"),_Se.forEach(t),mw.forEach(t),Bpr=i(vl),T(F7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Nqe=i(f),Kd=n(f,"H2",{class:!0});var Xje=s(Kd);T7=n(Xje,"A",{id:!0,class:!0,href:!0});var _Ft=s(T7);vbe=n(_Ft,"SPAN",{});var bFt=s(vbe);T(i8.$$.fragment,bFt),bFt.forEach(t),_Ft.forEach(t),Ipr=i(Xje),Fbe=n(Xje,"SPAN",{});var vFt=s(Fbe);qpr=r(vFt,"TFAutoModelForMaskedLM"),vFt.forEach(t),Xje.forEach(t),jqe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(d8.$$.fragment,Fl),Npr=i(Fl),Zd=n(Fl,"P",{});var LZ=s(Zd);jpr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lQ=n(LZ,"A",{href:!0});var FFt=s(lQ);Dpr=r(FFt,"from_pretrained()"),FFt.forEach(t),Gpr=r(LZ," class method or the "),iQ=n(LZ,"A",{href:!0});var TFt=s(iQ);Opr=r(TFt,"from_config()"),TFt.forEach(t),Vpr=r(LZ,` class
method.`),LZ.forEach(t),Xpr=i(Fl),c8=n(Fl,"P",{});var zje=s(c8);zpr=r(zje,"This class cannot be instantiated directly using "),Tbe=n(zje,"CODE",{});var MFt=s(Tbe);Wpr=r(MFt,"__init__()"),MFt.forEach(t),Qpr=r(zje," (throws an error)."),zje.forEach(t),Hpr=i(Fl),kt=n(Fl,"DIV",{class:!0});var gw=s(kt);T(f8.$$.fragment,gw),Upr=i(gw),Mbe=n(gw,"P",{});var EFt=s(Mbe);Jpr=r(EFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EFt.forEach(t),Ypr=i(gw),ec=n(gw,"P",{});var xZ=s(ec);Kpr=r(xZ,`Note:
Loading a model from its configuration file does `),Ebe=n(xZ,"STRONG",{});var CFt=s(Ebe);Zpr=r(CFt,"not"),CFt.forEach(t),eur=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(xZ,"A",{href:!0});var wFt=s(dQ);our=r(wFt,"from_pretrained()"),wFt.forEach(t),rur=r(xZ," to load the model weights."),xZ.forEach(t),tur=i(gw),T(M7.$$.fragment,gw),gw.forEach(t),aur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(m8.$$.fragment,Tl),nur=i(Tl),Cbe=n(Tl,"P",{});var AFt=s(Cbe);sur=r(AFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),AFt.forEach(t),lur=i(Tl),tn=n(Tl,"P",{});var hw=s(tn);iur=r(hw,"The model class to instantiate is selected based on the "),wbe=n(hw,"CODE",{});var yFt=s(wbe);dur=r(yFt,"model_type"),yFt.forEach(t),cur=r(hw,` property of the config object (either
passed as an argument or loaded from `),Abe=n(hw,"CODE",{});var LFt=s(Abe);fur=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),mur=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(hw,"CODE",{});var xFt=s(ybe);gur=r(xFt,"pretrained_model_name_or_path"),xFt.forEach(t),hur=r(hw,":"),hw.forEach(t),pur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);E7=n(fe,"LI",{});var bSe=s(E7);Lbe=n(bSe,"STRONG",{});var $Ft=s(Lbe);uur=r($Ft,"albert"),$Ft.forEach(t),_ur=r(bSe," \u2014 "),cQ=n(bSe,"A",{href:!0});var kFt=s(cQ);bur=r(kFt,"TFAlbertForMaskedLM"),kFt.forEach(t),vur=r(bSe," (ALBERT model)"),bSe.forEach(t),Fur=i(fe),C7=n(fe,"LI",{});var vSe=s(C7);xbe=n(vSe,"STRONG",{});var SFt=s(xbe);Tur=r(SFt,"bert"),SFt.forEach(t),Mur=r(vSe," \u2014 "),fQ=n(vSe,"A",{href:!0});var RFt=s(fQ);Eur=r(RFt,"TFBertForMaskedLM"),RFt.forEach(t),Cur=r(vSe," (BERT model)"),vSe.forEach(t),wur=i(fe),w7=n(fe,"LI",{});var FSe=s(w7);$be=n(FSe,"STRONG",{});var PFt=s($be);Aur=r(PFt,"camembert"),PFt.forEach(t),yur=r(FSe," \u2014 "),mQ=n(FSe,"A",{href:!0});var BFt=s(mQ);Lur=r(BFt,"TFCamembertForMaskedLM"),BFt.forEach(t),xur=r(FSe," (CamemBERT model)"),FSe.forEach(t),$ur=i(fe),A7=n(fe,"LI",{});var TSe=s(A7);kbe=n(TSe,"STRONG",{});var IFt=s(kbe);kur=r(IFt,"convbert"),IFt.forEach(t),Sur=r(TSe," \u2014 "),gQ=n(TSe,"A",{href:!0});var qFt=s(gQ);Rur=r(qFt,"TFConvBertForMaskedLM"),qFt.forEach(t),Pur=r(TSe," (ConvBERT model)"),TSe.forEach(t),Bur=i(fe),y7=n(fe,"LI",{});var MSe=s(y7);Sbe=n(MSe,"STRONG",{});var NFt=s(Sbe);Iur=r(NFt,"deberta"),NFt.forEach(t),qur=r(MSe," \u2014 "),hQ=n(MSe,"A",{href:!0});var jFt=s(hQ);Nur=r(jFt,"TFDebertaForMaskedLM"),jFt.forEach(t),jur=r(MSe," (DeBERTa model)"),MSe.forEach(t),Dur=i(fe),L7=n(fe,"LI",{});var ESe=s(L7);Rbe=n(ESe,"STRONG",{});var DFt=s(Rbe);Gur=r(DFt,"deberta-v2"),DFt.forEach(t),Our=r(ESe," \u2014 "),pQ=n(ESe,"A",{href:!0});var GFt=s(pQ);Vur=r(GFt,"TFDebertaV2ForMaskedLM"),GFt.forEach(t),Xur=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),zur=i(fe),x7=n(fe,"LI",{});var CSe=s(x7);Pbe=n(CSe,"STRONG",{});var OFt=s(Pbe);Wur=r(OFt,"distilbert"),OFt.forEach(t),Qur=r(CSe," \u2014 "),uQ=n(CSe,"A",{href:!0});var VFt=s(uQ);Hur=r(VFt,"TFDistilBertForMaskedLM"),VFt.forEach(t),Uur=r(CSe," (DistilBERT model)"),CSe.forEach(t),Jur=i(fe),$7=n(fe,"LI",{});var wSe=s($7);Bbe=n(wSe,"STRONG",{});var XFt=s(Bbe);Yur=r(XFt,"electra"),XFt.forEach(t),Kur=r(wSe," \u2014 "),_Q=n(wSe,"A",{href:!0});var zFt=s(_Q);Zur=r(zFt,"TFElectraForMaskedLM"),zFt.forEach(t),e_r=r(wSe," (ELECTRA model)"),wSe.forEach(t),o_r=i(fe),k7=n(fe,"LI",{});var ASe=s(k7);Ibe=n(ASe,"STRONG",{});var WFt=s(Ibe);r_r=r(WFt,"flaubert"),WFt.forEach(t),t_r=r(ASe," \u2014 "),bQ=n(ASe,"A",{href:!0});var QFt=s(bQ);a_r=r(QFt,"TFFlaubertWithLMHeadModel"),QFt.forEach(t),n_r=r(ASe," (FlauBERT model)"),ASe.forEach(t),s_r=i(fe),S7=n(fe,"LI",{});var ySe=s(S7);qbe=n(ySe,"STRONG",{});var HFt=s(qbe);l_r=r(HFt,"funnel"),HFt.forEach(t),i_r=r(ySe," \u2014 "),vQ=n(ySe,"A",{href:!0});var UFt=s(vQ);d_r=r(UFt,"TFFunnelForMaskedLM"),UFt.forEach(t),c_r=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),f_r=i(fe),R7=n(fe,"LI",{});var LSe=s(R7);Nbe=n(LSe,"STRONG",{});var JFt=s(Nbe);m_r=r(JFt,"layoutlm"),JFt.forEach(t),g_r=r(LSe," \u2014 "),FQ=n(LSe,"A",{href:!0});var YFt=s(FQ);h_r=r(YFt,"TFLayoutLMForMaskedLM"),YFt.forEach(t),p_r=r(LSe," (LayoutLM model)"),LSe.forEach(t),u_r=i(fe),P7=n(fe,"LI",{});var xSe=s(P7);jbe=n(xSe,"STRONG",{});var KFt=s(jbe);__r=r(KFt,"longformer"),KFt.forEach(t),b_r=r(xSe," \u2014 "),TQ=n(xSe,"A",{href:!0});var ZFt=s(TQ);v_r=r(ZFt,"TFLongformerForMaskedLM"),ZFt.forEach(t),F_r=r(xSe," (Longformer model)"),xSe.forEach(t),T_r=i(fe),B7=n(fe,"LI",{});var $Se=s(B7);Dbe=n($Se,"STRONG",{});var e6t=s(Dbe);M_r=r(e6t,"mobilebert"),e6t.forEach(t),E_r=r($Se," \u2014 "),MQ=n($Se,"A",{href:!0});var o6t=s(MQ);C_r=r(o6t,"TFMobileBertForMaskedLM"),o6t.forEach(t),w_r=r($Se," (MobileBERT model)"),$Se.forEach(t),A_r=i(fe),I7=n(fe,"LI",{});var kSe=s(I7);Gbe=n(kSe,"STRONG",{});var r6t=s(Gbe);y_r=r(r6t,"mpnet"),r6t.forEach(t),L_r=r(kSe," \u2014 "),EQ=n(kSe,"A",{href:!0});var t6t=s(EQ);x_r=r(t6t,"TFMPNetForMaskedLM"),t6t.forEach(t),$_r=r(kSe," (MPNet model)"),kSe.forEach(t),k_r=i(fe),q7=n(fe,"LI",{});var SSe=s(q7);Obe=n(SSe,"STRONG",{});var a6t=s(Obe);S_r=r(a6t,"rembert"),a6t.forEach(t),R_r=r(SSe," \u2014 "),CQ=n(SSe,"A",{href:!0});var n6t=s(CQ);P_r=r(n6t,"TFRemBertForMaskedLM"),n6t.forEach(t),B_r=r(SSe," (RemBERT model)"),SSe.forEach(t),I_r=i(fe),N7=n(fe,"LI",{});var RSe=s(N7);Vbe=n(RSe,"STRONG",{});var s6t=s(Vbe);q_r=r(s6t,"roberta"),s6t.forEach(t),N_r=r(RSe," \u2014 "),wQ=n(RSe,"A",{href:!0});var l6t=s(wQ);j_r=r(l6t,"TFRobertaForMaskedLM"),l6t.forEach(t),D_r=r(RSe," (RoBERTa model)"),RSe.forEach(t),G_r=i(fe),j7=n(fe,"LI",{});var PSe=s(j7);Xbe=n(PSe,"STRONG",{});var i6t=s(Xbe);O_r=r(i6t,"roformer"),i6t.forEach(t),V_r=r(PSe," \u2014 "),AQ=n(PSe,"A",{href:!0});var d6t=s(AQ);X_r=r(d6t,"TFRoFormerForMaskedLM"),d6t.forEach(t),z_r=r(PSe," (RoFormer model)"),PSe.forEach(t),W_r=i(fe),D7=n(fe,"LI",{});var BSe=s(D7);zbe=n(BSe,"STRONG",{});var c6t=s(zbe);Q_r=r(c6t,"tapas"),c6t.forEach(t),H_r=r(BSe," \u2014 "),yQ=n(BSe,"A",{href:!0});var f6t=s(yQ);U_r=r(f6t,"TFTapasForMaskedLM"),f6t.forEach(t),J_r=r(BSe," (TAPAS model)"),BSe.forEach(t),Y_r=i(fe),G7=n(fe,"LI",{});var ISe=s(G7);Wbe=n(ISe,"STRONG",{});var m6t=s(Wbe);K_r=r(m6t,"xlm"),m6t.forEach(t),Z_r=r(ISe," \u2014 "),LQ=n(ISe,"A",{href:!0});var g6t=s(LQ);e2r=r(g6t,"TFXLMWithLMHeadModel"),g6t.forEach(t),o2r=r(ISe," (XLM model)"),ISe.forEach(t),r2r=i(fe),O7=n(fe,"LI",{});var qSe=s(O7);Qbe=n(qSe,"STRONG",{});var h6t=s(Qbe);t2r=r(h6t,"xlm-roberta"),h6t.forEach(t),a2r=r(qSe," \u2014 "),xQ=n(qSe,"A",{href:!0});var p6t=s(xQ);n2r=r(p6t,"TFXLMRobertaForMaskedLM"),p6t.forEach(t),s2r=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),fe.forEach(t),l2r=i(Tl),T(V7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Dqe=i(f),oc=n(f,"H2",{class:!0});var Wje=s(oc);X7=n(Wje,"A",{id:!0,class:!0,href:!0});var u6t=s(X7);Hbe=n(u6t,"SPAN",{});var _6t=s(Hbe);T(g8.$$.fragment,_6t),_6t.forEach(t),u6t.forEach(t),i2r=i(Wje),Ube=n(Wje,"SPAN",{});var b6t=s(Ube);d2r=r(b6t,"TFAutoModelForSeq2SeqLM"),b6t.forEach(t),Wje.forEach(t),Gqe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(h8.$$.fragment,Ml),c2r=i(Ml),rc=n(Ml,"P",{});var $Z=s(rc);f2r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Q=n($Z,"A",{href:!0});var v6t=s($Q);m2r=r(v6t,"from_pretrained()"),v6t.forEach(t),g2r=r($Z," class method or the "),kQ=n($Z,"A",{href:!0});var F6t=s(kQ);h2r=r(F6t,"from_config()"),F6t.forEach(t),p2r=r($Z,` class
method.`),$Z.forEach(t),u2r=i(Ml),p8=n(Ml,"P",{});var Qje=s(p8);_2r=r(Qje,"This class cannot be instantiated directly using "),Jbe=n(Qje,"CODE",{});var T6t=s(Jbe);b2r=r(T6t,"__init__()"),T6t.forEach(t),v2r=r(Qje," (throws an error)."),Qje.forEach(t),F2r=i(Ml),St=n(Ml,"DIV",{class:!0});var pw=s(St);T(u8.$$.fragment,pw),T2r=i(pw),Ybe=n(pw,"P",{});var M6t=s(Ybe);M2r=r(M6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),M6t.forEach(t),E2r=i(pw),tc=n(pw,"P",{});var kZ=s(tc);C2r=r(kZ,`Note:
Loading a model from its configuration file does `),Kbe=n(kZ,"STRONG",{});var E6t=s(Kbe);w2r=r(E6t,"not"),E6t.forEach(t),A2r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(kZ,"A",{href:!0});var C6t=s(SQ);y2r=r(C6t,"from_pretrained()"),C6t.forEach(t),L2r=r(kZ," to load the model weights."),kZ.forEach(t),x2r=i(pw),T(z7.$$.fragment,pw),pw.forEach(t),$2r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(_8.$$.fragment,El),k2r=i(El),Zbe=n(El,"P",{});var w6t=s(Zbe);S2r=r(w6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w6t.forEach(t),R2r=i(El),an=n(El,"P",{});var uw=s(an);P2r=r(uw,"The model class to instantiate is selected based on the "),eve=n(uw,"CODE",{});var A6t=s(eve);B2r=r(A6t,"model_type"),A6t.forEach(t),I2r=r(uw,` property of the config object (either
passed as an argument or loaded from `),ove=n(uw,"CODE",{});var y6t=s(ove);q2r=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),N2r=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(uw,"CODE",{});var L6t=s(rve);j2r=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),D2r=r(uw,":"),uw.forEach(t),G2r=i(El),ye=n(El,"UL",{});var Be=s(ye);W7=n(Be,"LI",{});var NSe=s(W7);tve=n(NSe,"STRONG",{});var x6t=s(tve);O2r=r(x6t,"bart"),x6t.forEach(t),V2r=r(NSe," \u2014 "),RQ=n(NSe,"A",{href:!0});var $6t=s(RQ);X2r=r($6t,"TFBartForConditionalGeneration"),$6t.forEach(t),z2r=r(NSe," (BART model)"),NSe.forEach(t),W2r=i(Be),Q7=n(Be,"LI",{});var jSe=s(Q7);ave=n(jSe,"STRONG",{});var k6t=s(ave);Q2r=r(k6t,"blenderbot"),k6t.forEach(t),H2r=r(jSe," \u2014 "),PQ=n(jSe,"A",{href:!0});var S6t=s(PQ);U2r=r(S6t,"TFBlenderbotForConditionalGeneration"),S6t.forEach(t),J2r=r(jSe," (Blenderbot model)"),jSe.forEach(t),Y2r=i(Be),H7=n(Be,"LI",{});var DSe=s(H7);nve=n(DSe,"STRONG",{});var R6t=s(nve);K2r=r(R6t,"blenderbot-small"),R6t.forEach(t),Z2r=r(DSe," \u2014 "),BQ=n(DSe,"A",{href:!0});var P6t=s(BQ);e1r=r(P6t,"TFBlenderbotSmallForConditionalGeneration"),P6t.forEach(t),o1r=r(DSe," (BlenderbotSmall model)"),DSe.forEach(t),r1r=i(Be),U7=n(Be,"LI",{});var GSe=s(U7);sve=n(GSe,"STRONG",{});var B6t=s(sve);t1r=r(B6t,"encoder-decoder"),B6t.forEach(t),a1r=r(GSe," \u2014 "),IQ=n(GSe,"A",{href:!0});var I6t=s(IQ);n1r=r(I6t,"TFEncoderDecoderModel"),I6t.forEach(t),s1r=r(GSe," (Encoder decoder model)"),GSe.forEach(t),l1r=i(Be),J7=n(Be,"LI",{});var OSe=s(J7);lve=n(OSe,"STRONG",{});var q6t=s(lve);i1r=r(q6t,"led"),q6t.forEach(t),d1r=r(OSe," \u2014 "),qQ=n(OSe,"A",{href:!0});var N6t=s(qQ);c1r=r(N6t,"TFLEDForConditionalGeneration"),N6t.forEach(t),f1r=r(OSe," (LED model)"),OSe.forEach(t),m1r=i(Be),Y7=n(Be,"LI",{});var VSe=s(Y7);ive=n(VSe,"STRONG",{});var j6t=s(ive);g1r=r(j6t,"marian"),j6t.forEach(t),h1r=r(VSe," \u2014 "),NQ=n(VSe,"A",{href:!0});var D6t=s(NQ);p1r=r(D6t,"TFMarianMTModel"),D6t.forEach(t),u1r=r(VSe," (Marian model)"),VSe.forEach(t),_1r=i(Be),K7=n(Be,"LI",{});var XSe=s(K7);dve=n(XSe,"STRONG",{});var G6t=s(dve);b1r=r(G6t,"mbart"),G6t.forEach(t),v1r=r(XSe," \u2014 "),jQ=n(XSe,"A",{href:!0});var O6t=s(jQ);F1r=r(O6t,"TFMBartForConditionalGeneration"),O6t.forEach(t),T1r=r(XSe," (mBART model)"),XSe.forEach(t),M1r=i(Be),Z7=n(Be,"LI",{});var zSe=s(Z7);cve=n(zSe,"STRONG",{});var V6t=s(cve);E1r=r(V6t,"mt5"),V6t.forEach(t),C1r=r(zSe," \u2014 "),DQ=n(zSe,"A",{href:!0});var X6t=s(DQ);w1r=r(X6t,"TFMT5ForConditionalGeneration"),X6t.forEach(t),A1r=r(zSe," (mT5 model)"),zSe.forEach(t),y1r=i(Be),eM=n(Be,"LI",{});var WSe=s(eM);fve=n(WSe,"STRONG",{});var z6t=s(fve);L1r=r(z6t,"pegasus"),z6t.forEach(t),x1r=r(WSe," \u2014 "),GQ=n(WSe,"A",{href:!0});var W6t=s(GQ);$1r=r(W6t,"TFPegasusForConditionalGeneration"),W6t.forEach(t),k1r=r(WSe," (Pegasus model)"),WSe.forEach(t),S1r=i(Be),oM=n(Be,"LI",{});var QSe=s(oM);mve=n(QSe,"STRONG",{});var Q6t=s(mve);R1r=r(Q6t,"t5"),Q6t.forEach(t),P1r=r(QSe," \u2014 "),OQ=n(QSe,"A",{href:!0});var H6t=s(OQ);B1r=r(H6t,"TFT5ForConditionalGeneration"),H6t.forEach(t),I1r=r(QSe," (T5 model)"),QSe.forEach(t),Be.forEach(t),q1r=i(El),T(rM.$$.fragment,El),El.forEach(t),Ml.forEach(t),Oqe=i(f),ac=n(f,"H2",{class:!0});var Hje=s(ac);tM=n(Hje,"A",{id:!0,class:!0,href:!0});var U6t=s(tM);gve=n(U6t,"SPAN",{});var J6t=s(gve);T(b8.$$.fragment,J6t),J6t.forEach(t),U6t.forEach(t),N1r=i(Hje),hve=n(Hje,"SPAN",{});var Y6t=s(hve);j1r=r(Y6t,"TFAutoModelForSequenceClassification"),Y6t.forEach(t),Hje.forEach(t),Vqe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(v8.$$.fragment,Cl),D1r=i(Cl),nc=n(Cl,"P",{});var SZ=s(nc);G1r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VQ=n(SZ,"A",{href:!0});var K6t=s(VQ);O1r=r(K6t,"from_pretrained()"),K6t.forEach(t),V1r=r(SZ," class method or the "),XQ=n(SZ,"A",{href:!0});var Z6t=s(XQ);X1r=r(Z6t,"from_config()"),Z6t.forEach(t),z1r=r(SZ,` class
method.`),SZ.forEach(t),W1r=i(Cl),F8=n(Cl,"P",{});var Uje=s(F8);Q1r=r(Uje,"This class cannot be instantiated directly using "),pve=n(Uje,"CODE",{});var e0t=s(pve);H1r=r(e0t,"__init__()"),e0t.forEach(t),U1r=r(Uje," (throws an error)."),Uje.forEach(t),J1r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var _w=s(Rt);T(T8.$$.fragment,_w),Y1r=i(_w),uve=n(_w,"P",{});var o0t=s(uve);K1r=r(o0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o0t.forEach(t),Z1r=i(_w),sc=n(_w,"P",{});var RZ=s(sc);ebr=r(RZ,`Note:
Loading a model from its configuration file does `),_ve=n(RZ,"STRONG",{});var r0t=s(_ve);obr=r(r0t,"not"),r0t.forEach(t),rbr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(RZ,"A",{href:!0});var t0t=s(zQ);tbr=r(t0t,"from_pretrained()"),t0t.forEach(t),abr=r(RZ," to load the model weights."),RZ.forEach(t),nbr=i(_w),T(aM.$$.fragment,_w),_w.forEach(t),sbr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(M8.$$.fragment,wl),lbr=i(wl),bve=n(wl,"P",{});var a0t=s(bve);ibr=r(a0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a0t.forEach(t),dbr=i(wl),nn=n(wl,"P",{});var bw=s(nn);cbr=r(bw,"The model class to instantiate is selected based on the "),vve=n(bw,"CODE",{});var n0t=s(vve);fbr=r(n0t,"model_type"),n0t.forEach(t),mbr=r(bw,` property of the config object (either
passed as an argument or loaded from `),Fve=n(bw,"CODE",{});var s0t=s(Fve);gbr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),hbr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(bw,"CODE",{});var l0t=s(Tve);pbr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),ubr=r(bw,":"),bw.forEach(t),_br=i(wl),ee=n(wl,"UL",{});var ae=s(ee);nM=n(ae,"LI",{});var HSe=s(nM);Mve=n(HSe,"STRONG",{});var i0t=s(Mve);bbr=r(i0t,"albert"),i0t.forEach(t),vbr=r(HSe," \u2014 "),WQ=n(HSe,"A",{href:!0});var d0t=s(WQ);Fbr=r(d0t,"TFAlbertForSequenceClassification"),d0t.forEach(t),Tbr=r(HSe," (ALBERT model)"),HSe.forEach(t),Mbr=i(ae),sM=n(ae,"LI",{});var USe=s(sM);Eve=n(USe,"STRONG",{});var c0t=s(Eve);Ebr=r(c0t,"bert"),c0t.forEach(t),Cbr=r(USe," \u2014 "),QQ=n(USe,"A",{href:!0});var f0t=s(QQ);wbr=r(f0t,"TFBertForSequenceClassification"),f0t.forEach(t),Abr=r(USe," (BERT model)"),USe.forEach(t),ybr=i(ae),lM=n(ae,"LI",{});var JSe=s(lM);Cve=n(JSe,"STRONG",{});var m0t=s(Cve);Lbr=r(m0t,"camembert"),m0t.forEach(t),xbr=r(JSe," \u2014 "),HQ=n(JSe,"A",{href:!0});var g0t=s(HQ);$br=r(g0t,"TFCamembertForSequenceClassification"),g0t.forEach(t),kbr=r(JSe," (CamemBERT model)"),JSe.forEach(t),Sbr=i(ae),iM=n(ae,"LI",{});var YSe=s(iM);wve=n(YSe,"STRONG",{});var h0t=s(wve);Rbr=r(h0t,"convbert"),h0t.forEach(t),Pbr=r(YSe," \u2014 "),UQ=n(YSe,"A",{href:!0});var p0t=s(UQ);Bbr=r(p0t,"TFConvBertForSequenceClassification"),p0t.forEach(t),Ibr=r(YSe," (ConvBERT model)"),YSe.forEach(t),qbr=i(ae),dM=n(ae,"LI",{});var KSe=s(dM);Ave=n(KSe,"STRONG",{});var u0t=s(Ave);Nbr=r(u0t,"ctrl"),u0t.forEach(t),jbr=r(KSe," \u2014 "),JQ=n(KSe,"A",{href:!0});var _0t=s(JQ);Dbr=r(_0t,"TFCTRLForSequenceClassification"),_0t.forEach(t),Gbr=r(KSe," (CTRL model)"),KSe.forEach(t),Obr=i(ae),cM=n(ae,"LI",{});var ZSe=s(cM);yve=n(ZSe,"STRONG",{});var b0t=s(yve);Vbr=r(b0t,"deberta"),b0t.forEach(t),Xbr=r(ZSe," \u2014 "),YQ=n(ZSe,"A",{href:!0});var v0t=s(YQ);zbr=r(v0t,"TFDebertaForSequenceClassification"),v0t.forEach(t),Wbr=r(ZSe," (DeBERTa model)"),ZSe.forEach(t),Qbr=i(ae),fM=n(ae,"LI",{});var eRe=s(fM);Lve=n(eRe,"STRONG",{});var F0t=s(Lve);Hbr=r(F0t,"deberta-v2"),F0t.forEach(t),Ubr=r(eRe," \u2014 "),KQ=n(eRe,"A",{href:!0});var T0t=s(KQ);Jbr=r(T0t,"TFDebertaV2ForSequenceClassification"),T0t.forEach(t),Ybr=r(eRe," (DeBERTa-v2 model)"),eRe.forEach(t),Kbr=i(ae),mM=n(ae,"LI",{});var oRe=s(mM);xve=n(oRe,"STRONG",{});var M0t=s(xve);Zbr=r(M0t,"distilbert"),M0t.forEach(t),evr=r(oRe," \u2014 "),ZQ=n(oRe,"A",{href:!0});var E0t=s(ZQ);ovr=r(E0t,"TFDistilBertForSequenceClassification"),E0t.forEach(t),rvr=r(oRe," (DistilBERT model)"),oRe.forEach(t),tvr=i(ae),gM=n(ae,"LI",{});var rRe=s(gM);$ve=n(rRe,"STRONG",{});var C0t=s($ve);avr=r(C0t,"electra"),C0t.forEach(t),nvr=r(rRe," \u2014 "),eH=n(rRe,"A",{href:!0});var w0t=s(eH);svr=r(w0t,"TFElectraForSequenceClassification"),w0t.forEach(t),lvr=r(rRe," (ELECTRA model)"),rRe.forEach(t),ivr=i(ae),hM=n(ae,"LI",{});var tRe=s(hM);kve=n(tRe,"STRONG",{});var A0t=s(kve);dvr=r(A0t,"flaubert"),A0t.forEach(t),cvr=r(tRe," \u2014 "),oH=n(tRe,"A",{href:!0});var y0t=s(oH);fvr=r(y0t,"TFFlaubertForSequenceClassification"),y0t.forEach(t),mvr=r(tRe," (FlauBERT model)"),tRe.forEach(t),gvr=i(ae),pM=n(ae,"LI",{});var aRe=s(pM);Sve=n(aRe,"STRONG",{});var L0t=s(Sve);hvr=r(L0t,"funnel"),L0t.forEach(t),pvr=r(aRe," \u2014 "),rH=n(aRe,"A",{href:!0});var x0t=s(rH);uvr=r(x0t,"TFFunnelForSequenceClassification"),x0t.forEach(t),_vr=r(aRe," (Funnel Transformer model)"),aRe.forEach(t),bvr=i(ae),uM=n(ae,"LI",{});var nRe=s(uM);Rve=n(nRe,"STRONG",{});var $0t=s(Rve);vvr=r($0t,"gpt2"),$0t.forEach(t),Fvr=r(nRe," \u2014 "),tH=n(nRe,"A",{href:!0});var k0t=s(tH);Tvr=r(k0t,"TFGPT2ForSequenceClassification"),k0t.forEach(t),Mvr=r(nRe," (OpenAI GPT-2 model)"),nRe.forEach(t),Evr=i(ae),_M=n(ae,"LI",{});var sRe=s(_M);Pve=n(sRe,"STRONG",{});var S0t=s(Pve);Cvr=r(S0t,"gptj"),S0t.forEach(t),wvr=r(sRe," \u2014 "),aH=n(sRe,"A",{href:!0});var R0t=s(aH);Avr=r(R0t,"TFGPTJForSequenceClassification"),R0t.forEach(t),yvr=r(sRe," (GPT-J model)"),sRe.forEach(t),Lvr=i(ae),bM=n(ae,"LI",{});var lRe=s(bM);Bve=n(lRe,"STRONG",{});var P0t=s(Bve);xvr=r(P0t,"layoutlm"),P0t.forEach(t),$vr=r(lRe," \u2014 "),nH=n(lRe,"A",{href:!0});var B0t=s(nH);kvr=r(B0t,"TFLayoutLMForSequenceClassification"),B0t.forEach(t),Svr=r(lRe," (LayoutLM model)"),lRe.forEach(t),Rvr=i(ae),vM=n(ae,"LI",{});var iRe=s(vM);Ive=n(iRe,"STRONG",{});var I0t=s(Ive);Pvr=r(I0t,"longformer"),I0t.forEach(t),Bvr=r(iRe," \u2014 "),sH=n(iRe,"A",{href:!0});var q0t=s(sH);Ivr=r(q0t,"TFLongformerForSequenceClassification"),q0t.forEach(t),qvr=r(iRe," (Longformer model)"),iRe.forEach(t),Nvr=i(ae),FM=n(ae,"LI",{});var dRe=s(FM);qve=n(dRe,"STRONG",{});var N0t=s(qve);jvr=r(N0t,"mobilebert"),N0t.forEach(t),Dvr=r(dRe," \u2014 "),lH=n(dRe,"A",{href:!0});var j0t=s(lH);Gvr=r(j0t,"TFMobileBertForSequenceClassification"),j0t.forEach(t),Ovr=r(dRe," (MobileBERT model)"),dRe.forEach(t),Vvr=i(ae),TM=n(ae,"LI",{});var cRe=s(TM);Nve=n(cRe,"STRONG",{});var D0t=s(Nve);Xvr=r(D0t,"mpnet"),D0t.forEach(t),zvr=r(cRe," \u2014 "),iH=n(cRe,"A",{href:!0});var G0t=s(iH);Wvr=r(G0t,"TFMPNetForSequenceClassification"),G0t.forEach(t),Qvr=r(cRe," (MPNet model)"),cRe.forEach(t),Hvr=i(ae),MM=n(ae,"LI",{});var fRe=s(MM);jve=n(fRe,"STRONG",{});var O0t=s(jve);Uvr=r(O0t,"openai-gpt"),O0t.forEach(t),Jvr=r(fRe," \u2014 "),dH=n(fRe,"A",{href:!0});var V0t=s(dH);Yvr=r(V0t,"TFOpenAIGPTForSequenceClassification"),V0t.forEach(t),Kvr=r(fRe," (OpenAI GPT model)"),fRe.forEach(t),Zvr=i(ae),EM=n(ae,"LI",{});var mRe=s(EM);Dve=n(mRe,"STRONG",{});var X0t=s(Dve);eFr=r(X0t,"rembert"),X0t.forEach(t),oFr=r(mRe," \u2014 "),cH=n(mRe,"A",{href:!0});var z0t=s(cH);rFr=r(z0t,"TFRemBertForSequenceClassification"),z0t.forEach(t),tFr=r(mRe," (RemBERT model)"),mRe.forEach(t),aFr=i(ae),CM=n(ae,"LI",{});var gRe=s(CM);Gve=n(gRe,"STRONG",{});var W0t=s(Gve);nFr=r(W0t,"roberta"),W0t.forEach(t),sFr=r(gRe," \u2014 "),fH=n(gRe,"A",{href:!0});var Q0t=s(fH);lFr=r(Q0t,"TFRobertaForSequenceClassification"),Q0t.forEach(t),iFr=r(gRe," (RoBERTa model)"),gRe.forEach(t),dFr=i(ae),wM=n(ae,"LI",{});var hRe=s(wM);Ove=n(hRe,"STRONG",{});var H0t=s(Ove);cFr=r(H0t,"roformer"),H0t.forEach(t),fFr=r(hRe," \u2014 "),mH=n(hRe,"A",{href:!0});var U0t=s(mH);mFr=r(U0t,"TFRoFormerForSequenceClassification"),U0t.forEach(t),gFr=r(hRe," (RoFormer model)"),hRe.forEach(t),hFr=i(ae),AM=n(ae,"LI",{});var pRe=s(AM);Vve=n(pRe,"STRONG",{});var J0t=s(Vve);pFr=r(J0t,"tapas"),J0t.forEach(t),uFr=r(pRe," \u2014 "),gH=n(pRe,"A",{href:!0});var Y0t=s(gH);_Fr=r(Y0t,"TFTapasForSequenceClassification"),Y0t.forEach(t),bFr=r(pRe," (TAPAS model)"),pRe.forEach(t),vFr=i(ae),yM=n(ae,"LI",{});var uRe=s(yM);Xve=n(uRe,"STRONG",{});var K0t=s(Xve);FFr=r(K0t,"transfo-xl"),K0t.forEach(t),TFr=r(uRe," \u2014 "),hH=n(uRe,"A",{href:!0});var Z0t=s(hH);MFr=r(Z0t,"TFTransfoXLForSequenceClassification"),Z0t.forEach(t),EFr=r(uRe," (Transformer-XL model)"),uRe.forEach(t),CFr=i(ae),LM=n(ae,"LI",{});var _Re=s(LM);zve=n(_Re,"STRONG",{});var eTt=s(zve);wFr=r(eTt,"xlm"),eTt.forEach(t),AFr=r(_Re," \u2014 "),pH=n(_Re,"A",{href:!0});var oTt=s(pH);yFr=r(oTt,"TFXLMForSequenceClassification"),oTt.forEach(t),LFr=r(_Re," (XLM model)"),_Re.forEach(t),xFr=i(ae),xM=n(ae,"LI",{});var bRe=s(xM);Wve=n(bRe,"STRONG",{});var rTt=s(Wve);$Fr=r(rTt,"xlm-roberta"),rTt.forEach(t),kFr=r(bRe," \u2014 "),uH=n(bRe,"A",{href:!0});var tTt=s(uH);SFr=r(tTt,"TFXLMRobertaForSequenceClassification"),tTt.forEach(t),RFr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),PFr=i(ae),$M=n(ae,"LI",{});var vRe=s($M);Qve=n(vRe,"STRONG",{});var aTt=s(Qve);BFr=r(aTt,"xlnet"),aTt.forEach(t),IFr=r(vRe," \u2014 "),_H=n(vRe,"A",{href:!0});var nTt=s(_H);qFr=r(nTt,"TFXLNetForSequenceClassification"),nTt.forEach(t),NFr=r(vRe," (XLNet model)"),vRe.forEach(t),ae.forEach(t),jFr=i(wl),T(kM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Xqe=i(f),lc=n(f,"H2",{class:!0});var Jje=s(lc);SM=n(Jje,"A",{id:!0,class:!0,href:!0});var sTt=s(SM);Hve=n(sTt,"SPAN",{});var lTt=s(Hve);T(E8.$$.fragment,lTt),lTt.forEach(t),sTt.forEach(t),DFr=i(Jje),Uve=n(Jje,"SPAN",{});var iTt=s(Uve);GFr=r(iTt,"TFAutoModelForMultipleChoice"),iTt.forEach(t),Jje.forEach(t),zqe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(C8.$$.fragment,Al),OFr=i(Al),ic=n(Al,"P",{});var PZ=s(ic);VFr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=n(PZ,"A",{href:!0});var dTt=s(bH);XFr=r(dTt,"from_pretrained()"),dTt.forEach(t),zFr=r(PZ," class method or the "),vH=n(PZ,"A",{href:!0});var cTt=s(vH);WFr=r(cTt,"from_config()"),cTt.forEach(t),QFr=r(PZ,` class
method.`),PZ.forEach(t),HFr=i(Al),w8=n(Al,"P",{});var Yje=s(w8);UFr=r(Yje,"This class cannot be instantiated directly using "),Jve=n(Yje,"CODE",{});var fTt=s(Jve);JFr=r(fTt,"__init__()"),fTt.forEach(t),YFr=r(Yje," (throws an error)."),Yje.forEach(t),KFr=i(Al),Pt=n(Al,"DIV",{class:!0});var vw=s(Pt);T(A8.$$.fragment,vw),ZFr=i(vw),Yve=n(vw,"P",{});var mTt=s(Yve);e6r=r(mTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mTt.forEach(t),o6r=i(vw),dc=n(vw,"P",{});var BZ=s(dc);r6r=r(BZ,`Note:
Loading a model from its configuration file does `),Kve=n(BZ,"STRONG",{});var gTt=s(Kve);t6r=r(gTt,"not"),gTt.forEach(t),a6r=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(BZ,"A",{href:!0});var hTt=s(FH);n6r=r(hTt,"from_pretrained()"),hTt.forEach(t),s6r=r(BZ," to load the model weights."),BZ.forEach(t),l6r=i(vw),T(RM.$$.fragment,vw),vw.forEach(t),i6r=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(y8.$$.fragment,yl),d6r=i(yl),Zve=n(yl,"P",{});var pTt=s(Zve);c6r=r(pTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pTt.forEach(t),f6r=i(yl),sn=n(yl,"P",{});var Fw=s(sn);m6r=r(Fw,"The model class to instantiate is selected based on the "),eFe=n(Fw,"CODE",{});var uTt=s(eFe);g6r=r(uTt,"model_type"),uTt.forEach(t),h6r=r(Fw,` property of the config object (either
passed as an argument or loaded from `),oFe=n(Fw,"CODE",{});var _Tt=s(oFe);p6r=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),u6r=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(Fw,"CODE",{});var bTt=s(rFe);_6r=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),b6r=r(Fw,":"),Fw.forEach(t),v6r=i(yl),he=n(yl,"UL",{});var _e=s(he);PM=n(_e,"LI",{});var FRe=s(PM);tFe=n(FRe,"STRONG",{});var vTt=s(tFe);F6r=r(vTt,"albert"),vTt.forEach(t),T6r=r(FRe," \u2014 "),TH=n(FRe,"A",{href:!0});var FTt=s(TH);M6r=r(FTt,"TFAlbertForMultipleChoice"),FTt.forEach(t),E6r=r(FRe," (ALBERT model)"),FRe.forEach(t),C6r=i(_e),BM=n(_e,"LI",{});var TRe=s(BM);aFe=n(TRe,"STRONG",{});var TTt=s(aFe);w6r=r(TTt,"bert"),TTt.forEach(t),A6r=r(TRe," \u2014 "),MH=n(TRe,"A",{href:!0});var MTt=s(MH);y6r=r(MTt,"TFBertForMultipleChoice"),MTt.forEach(t),L6r=r(TRe," (BERT model)"),TRe.forEach(t),x6r=i(_e),IM=n(_e,"LI",{});var MRe=s(IM);nFe=n(MRe,"STRONG",{});var ETt=s(nFe);$6r=r(ETt,"camembert"),ETt.forEach(t),k6r=r(MRe," \u2014 "),EH=n(MRe,"A",{href:!0});var CTt=s(EH);S6r=r(CTt,"TFCamembertForMultipleChoice"),CTt.forEach(t),R6r=r(MRe," (CamemBERT model)"),MRe.forEach(t),P6r=i(_e),qM=n(_e,"LI",{});var ERe=s(qM);sFe=n(ERe,"STRONG",{});var wTt=s(sFe);B6r=r(wTt,"convbert"),wTt.forEach(t),I6r=r(ERe," \u2014 "),CH=n(ERe,"A",{href:!0});var ATt=s(CH);q6r=r(ATt,"TFConvBertForMultipleChoice"),ATt.forEach(t),N6r=r(ERe," (ConvBERT model)"),ERe.forEach(t),j6r=i(_e),NM=n(_e,"LI",{});var CRe=s(NM);lFe=n(CRe,"STRONG",{});var yTt=s(lFe);D6r=r(yTt,"distilbert"),yTt.forEach(t),G6r=r(CRe," \u2014 "),wH=n(CRe,"A",{href:!0});var LTt=s(wH);O6r=r(LTt,"TFDistilBertForMultipleChoice"),LTt.forEach(t),V6r=r(CRe," (DistilBERT model)"),CRe.forEach(t),X6r=i(_e),jM=n(_e,"LI",{});var wRe=s(jM);iFe=n(wRe,"STRONG",{});var xTt=s(iFe);z6r=r(xTt,"electra"),xTt.forEach(t),W6r=r(wRe," \u2014 "),AH=n(wRe,"A",{href:!0});var $Tt=s(AH);Q6r=r($Tt,"TFElectraForMultipleChoice"),$Tt.forEach(t),H6r=r(wRe," (ELECTRA model)"),wRe.forEach(t),U6r=i(_e),DM=n(_e,"LI",{});var ARe=s(DM);dFe=n(ARe,"STRONG",{});var kTt=s(dFe);J6r=r(kTt,"flaubert"),kTt.forEach(t),Y6r=r(ARe," \u2014 "),yH=n(ARe,"A",{href:!0});var STt=s(yH);K6r=r(STt,"TFFlaubertForMultipleChoice"),STt.forEach(t),Z6r=r(ARe," (FlauBERT model)"),ARe.forEach(t),e0r=i(_e),GM=n(_e,"LI",{});var yRe=s(GM);cFe=n(yRe,"STRONG",{});var RTt=s(cFe);o0r=r(RTt,"funnel"),RTt.forEach(t),r0r=r(yRe," \u2014 "),LH=n(yRe,"A",{href:!0});var PTt=s(LH);t0r=r(PTt,"TFFunnelForMultipleChoice"),PTt.forEach(t),a0r=r(yRe," (Funnel Transformer model)"),yRe.forEach(t),n0r=i(_e),OM=n(_e,"LI",{});var LRe=s(OM);fFe=n(LRe,"STRONG",{});var BTt=s(fFe);s0r=r(BTt,"longformer"),BTt.forEach(t),l0r=r(LRe," \u2014 "),xH=n(LRe,"A",{href:!0});var ITt=s(xH);i0r=r(ITt,"TFLongformerForMultipleChoice"),ITt.forEach(t),d0r=r(LRe," (Longformer model)"),LRe.forEach(t),c0r=i(_e),VM=n(_e,"LI",{});var xRe=s(VM);mFe=n(xRe,"STRONG",{});var qTt=s(mFe);f0r=r(qTt,"mobilebert"),qTt.forEach(t),m0r=r(xRe," \u2014 "),$H=n(xRe,"A",{href:!0});var NTt=s($H);g0r=r(NTt,"TFMobileBertForMultipleChoice"),NTt.forEach(t),h0r=r(xRe," (MobileBERT model)"),xRe.forEach(t),p0r=i(_e),XM=n(_e,"LI",{});var $Re=s(XM);gFe=n($Re,"STRONG",{});var jTt=s(gFe);u0r=r(jTt,"mpnet"),jTt.forEach(t),_0r=r($Re," \u2014 "),kH=n($Re,"A",{href:!0});var DTt=s(kH);b0r=r(DTt,"TFMPNetForMultipleChoice"),DTt.forEach(t),v0r=r($Re," (MPNet model)"),$Re.forEach(t),F0r=i(_e),zM=n(_e,"LI",{});var kRe=s(zM);hFe=n(kRe,"STRONG",{});var GTt=s(hFe);T0r=r(GTt,"rembert"),GTt.forEach(t),M0r=r(kRe," \u2014 "),SH=n(kRe,"A",{href:!0});var OTt=s(SH);E0r=r(OTt,"TFRemBertForMultipleChoice"),OTt.forEach(t),C0r=r(kRe," (RemBERT model)"),kRe.forEach(t),w0r=i(_e),WM=n(_e,"LI",{});var SRe=s(WM);pFe=n(SRe,"STRONG",{});var VTt=s(pFe);A0r=r(VTt,"roberta"),VTt.forEach(t),y0r=r(SRe," \u2014 "),RH=n(SRe,"A",{href:!0});var XTt=s(RH);L0r=r(XTt,"TFRobertaForMultipleChoice"),XTt.forEach(t),x0r=r(SRe," (RoBERTa model)"),SRe.forEach(t),$0r=i(_e),QM=n(_e,"LI",{});var RRe=s(QM);uFe=n(RRe,"STRONG",{});var zTt=s(uFe);k0r=r(zTt,"roformer"),zTt.forEach(t),S0r=r(RRe," \u2014 "),PH=n(RRe,"A",{href:!0});var WTt=s(PH);R0r=r(WTt,"TFRoFormerForMultipleChoice"),WTt.forEach(t),P0r=r(RRe," (RoFormer model)"),RRe.forEach(t),B0r=i(_e),HM=n(_e,"LI",{});var PRe=s(HM);_Fe=n(PRe,"STRONG",{});var QTt=s(_Fe);I0r=r(QTt,"xlm"),QTt.forEach(t),q0r=r(PRe," \u2014 "),BH=n(PRe,"A",{href:!0});var HTt=s(BH);N0r=r(HTt,"TFXLMForMultipleChoice"),HTt.forEach(t),j0r=r(PRe," (XLM model)"),PRe.forEach(t),D0r=i(_e),UM=n(_e,"LI",{});var BRe=s(UM);bFe=n(BRe,"STRONG",{});var UTt=s(bFe);G0r=r(UTt,"xlm-roberta"),UTt.forEach(t),O0r=r(BRe," \u2014 "),IH=n(BRe,"A",{href:!0});var JTt=s(IH);V0r=r(JTt,"TFXLMRobertaForMultipleChoice"),JTt.forEach(t),X0r=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),z0r=i(_e),JM=n(_e,"LI",{});var IRe=s(JM);vFe=n(IRe,"STRONG",{});var YTt=s(vFe);W0r=r(YTt,"xlnet"),YTt.forEach(t),Q0r=r(IRe," \u2014 "),qH=n(IRe,"A",{href:!0});var KTt=s(qH);H0r=r(KTt,"TFXLNetForMultipleChoice"),KTt.forEach(t),U0r=r(IRe," (XLNet model)"),IRe.forEach(t),_e.forEach(t),J0r=i(yl),T(YM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Wqe=i(f),cc=n(f,"H2",{class:!0});var Kje=s(cc);KM=n(Kje,"A",{id:!0,class:!0,href:!0});var ZTt=s(KM);FFe=n(ZTt,"SPAN",{});var e7t=s(FFe);T(L8.$$.fragment,e7t),e7t.forEach(t),ZTt.forEach(t),Y0r=i(Kje),TFe=n(Kje,"SPAN",{});var o7t=s(TFe);K0r=r(o7t,"TFAutoModelForNextSentencePrediction"),o7t.forEach(t),Kje.forEach(t),Qqe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(x8.$$.fragment,Ll),Z0r=i(Ll),fc=n(Ll,"P",{});var IZ=s(fc);eTr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NH=n(IZ,"A",{href:!0});var r7t=s(NH);oTr=r(r7t,"from_pretrained()"),r7t.forEach(t),rTr=r(IZ," class method or the "),jH=n(IZ,"A",{href:!0});var t7t=s(jH);tTr=r(t7t,"from_config()"),t7t.forEach(t),aTr=r(IZ,` class
method.`),IZ.forEach(t),nTr=i(Ll),$8=n(Ll,"P",{});var Zje=s($8);sTr=r(Zje,"This class cannot be instantiated directly using "),MFe=n(Zje,"CODE",{});var a7t=s(MFe);lTr=r(a7t,"__init__()"),a7t.forEach(t),iTr=r(Zje," (throws an error)."),Zje.forEach(t),dTr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var Tw=s(Bt);T(k8.$$.fragment,Tw),cTr=i(Tw),EFe=n(Tw,"P",{});var n7t=s(EFe);fTr=r(n7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n7t.forEach(t),mTr=i(Tw),mc=n(Tw,"P",{});var qZ=s(mc);gTr=r(qZ,`Note:
Loading a model from its configuration file does `),CFe=n(qZ,"STRONG",{});var s7t=s(CFe);hTr=r(s7t,"not"),s7t.forEach(t),pTr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(qZ,"A",{href:!0});var l7t=s(DH);uTr=r(l7t,"from_pretrained()"),l7t.forEach(t),_Tr=r(qZ," to load the model weights."),qZ.forEach(t),bTr=i(Tw),T(ZM.$$.fragment,Tw),Tw.forEach(t),vTr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(S8.$$.fragment,xl),FTr=i(xl),wFe=n(xl,"P",{});var i7t=s(wFe);TTr=r(i7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),i7t.forEach(t),MTr=i(xl),ln=n(xl,"P",{});var Mw=s(ln);ETr=r(Mw,"The model class to instantiate is selected based on the "),AFe=n(Mw,"CODE",{});var d7t=s(AFe);CTr=r(d7t,"model_type"),d7t.forEach(t),wTr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),yFe=n(Mw,"CODE",{});var c7t=s(yFe);ATr=r(c7t,"pretrained_model_name_or_path"),c7t.forEach(t),yTr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(Mw,"CODE",{});var f7t=s(LFe);LTr=r(f7t,"pretrained_model_name_or_path"),f7t.forEach(t),xTr=r(Mw,":"),Mw.forEach(t),$Tr=i(xl),R8=n(xl,"UL",{});var eDe=s(R8);e4=n(eDe,"LI",{});var qRe=s(e4);xFe=n(qRe,"STRONG",{});var m7t=s(xFe);kTr=r(m7t,"bert"),m7t.forEach(t),STr=r(qRe," \u2014 "),GH=n(qRe,"A",{href:!0});var g7t=s(GH);RTr=r(g7t,"TFBertForNextSentencePrediction"),g7t.forEach(t),PTr=r(qRe," (BERT model)"),qRe.forEach(t),BTr=i(eDe),o4=n(eDe,"LI",{});var NRe=s(o4);$Fe=n(NRe,"STRONG",{});var h7t=s($Fe);ITr=r(h7t,"mobilebert"),h7t.forEach(t),qTr=r(NRe," \u2014 "),OH=n(NRe,"A",{href:!0});var p7t=s(OH);NTr=r(p7t,"TFMobileBertForNextSentencePrediction"),p7t.forEach(t),jTr=r(NRe," (MobileBERT model)"),NRe.forEach(t),eDe.forEach(t),DTr=i(xl),T(r4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Hqe=i(f),gc=n(f,"H2",{class:!0});var oDe=s(gc);t4=n(oDe,"A",{id:!0,class:!0,href:!0});var u7t=s(t4);kFe=n(u7t,"SPAN",{});var _7t=s(kFe);T(P8.$$.fragment,_7t),_7t.forEach(t),u7t.forEach(t),GTr=i(oDe),SFe=n(oDe,"SPAN",{});var b7t=s(SFe);OTr=r(b7t,"TFAutoModelForTableQuestionAnswering"),b7t.forEach(t),oDe.forEach(t),Uqe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(B8.$$.fragment,$l),VTr=i($l),hc=n($l,"P",{});var NZ=s(hc);XTr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VH=n(NZ,"A",{href:!0});var v7t=s(VH);zTr=r(v7t,"from_pretrained()"),v7t.forEach(t),WTr=r(NZ," class method or the "),XH=n(NZ,"A",{href:!0});var F7t=s(XH);QTr=r(F7t,"from_config()"),F7t.forEach(t),HTr=r(NZ,` class
method.`),NZ.forEach(t),UTr=i($l),I8=n($l,"P",{});var rDe=s(I8);JTr=r(rDe,"This class cannot be instantiated directly using "),RFe=n(rDe,"CODE",{});var T7t=s(RFe);YTr=r(T7t,"__init__()"),T7t.forEach(t),KTr=r(rDe," (throws an error)."),rDe.forEach(t),ZTr=i($l),It=n($l,"DIV",{class:!0});var Ew=s(It);T(q8.$$.fragment,Ew),e7r=i(Ew),PFe=n(Ew,"P",{});var M7t=s(PFe);o7r=r(M7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),M7t.forEach(t),r7r=i(Ew),pc=n(Ew,"P",{});var jZ=s(pc);t7r=r(jZ,`Note:
Loading a model from its configuration file does `),BFe=n(jZ,"STRONG",{});var E7t=s(BFe);a7r=r(E7t,"not"),E7t.forEach(t),n7r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(jZ,"A",{href:!0});var C7t=s(zH);s7r=r(C7t,"from_pretrained()"),C7t.forEach(t),l7r=r(jZ," to load the model weights."),jZ.forEach(t),i7r=i(Ew),T(a4.$$.fragment,Ew),Ew.forEach(t),d7r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(N8.$$.fragment,kl),c7r=i(kl),IFe=n(kl,"P",{});var w7t=s(IFe);f7r=r(w7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),w7t.forEach(t),m7r=i(kl),dn=n(kl,"P",{});var Cw=s(dn);g7r=r(Cw,"The model class to instantiate is selected based on the "),qFe=n(Cw,"CODE",{});var A7t=s(qFe);h7r=r(A7t,"model_type"),A7t.forEach(t),p7r=r(Cw,` property of the config object (either
passed as an argument or loaded from `),NFe=n(Cw,"CODE",{});var y7t=s(NFe);u7r=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),_7r=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(Cw,"CODE",{});var L7t=s(jFe);b7r=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),v7r=r(Cw,":"),Cw.forEach(t),F7r=i(kl),DFe=n(kl,"UL",{});var x7t=s(DFe);n4=n(x7t,"LI",{});var jRe=s(n4);GFe=n(jRe,"STRONG",{});var $7t=s(GFe);T7r=r($7t,"tapas"),$7t.forEach(t),M7r=r(jRe," \u2014 "),WH=n(jRe,"A",{href:!0});var k7t=s(WH);E7r=r(k7t,"TFTapasForQuestionAnswering"),k7t.forEach(t),C7r=r(jRe," (TAPAS model)"),jRe.forEach(t),x7t.forEach(t),w7r=i(kl),T(s4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Jqe=i(f),uc=n(f,"H2",{class:!0});var tDe=s(uc);l4=n(tDe,"A",{id:!0,class:!0,href:!0});var S7t=s(l4);OFe=n(S7t,"SPAN",{});var R7t=s(OFe);T(j8.$$.fragment,R7t),R7t.forEach(t),S7t.forEach(t),A7r=i(tDe),VFe=n(tDe,"SPAN",{});var P7t=s(VFe);y7r=r(P7t,"TFAutoModelForTokenClassification"),P7t.forEach(t),tDe.forEach(t),Yqe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(D8.$$.fragment,Sl),L7r=i(Sl),_c=n(Sl,"P",{});var DZ=s(_c);x7r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QH=n(DZ,"A",{href:!0});var B7t=s(QH);$7r=r(B7t,"from_pretrained()"),B7t.forEach(t),k7r=r(DZ," class method or the "),HH=n(DZ,"A",{href:!0});var I7t=s(HH);S7r=r(I7t,"from_config()"),I7t.forEach(t),R7r=r(DZ,` class
method.`),DZ.forEach(t),P7r=i(Sl),G8=n(Sl,"P",{});var aDe=s(G8);B7r=r(aDe,"This class cannot be instantiated directly using "),XFe=n(aDe,"CODE",{});var q7t=s(XFe);I7r=r(q7t,"__init__()"),q7t.forEach(t),q7r=r(aDe," (throws an error)."),aDe.forEach(t),N7r=i(Sl),qt=n(Sl,"DIV",{class:!0});var ww=s(qt);T(O8.$$.fragment,ww),j7r=i(ww),zFe=n(ww,"P",{});var N7t=s(zFe);D7r=r(N7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N7t.forEach(t),G7r=i(ww),bc=n(ww,"P",{});var GZ=s(bc);O7r=r(GZ,`Note:
Loading a model from its configuration file does `),WFe=n(GZ,"STRONG",{});var j7t=s(WFe);V7r=r(j7t,"not"),j7t.forEach(t),X7r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(GZ,"A",{href:!0});var D7t=s(UH);z7r=r(D7t,"from_pretrained()"),D7t.forEach(t),W7r=r(GZ," to load the model weights."),GZ.forEach(t),Q7r=i(ww),T(i4.$$.fragment,ww),ww.forEach(t),H7r=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(V8.$$.fragment,Rl),U7r=i(Rl),QFe=n(Rl,"P",{});var G7t=s(QFe);J7r=r(G7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G7t.forEach(t),Y7r=i(Rl),cn=n(Rl,"P",{});var Aw=s(cn);K7r=r(Aw,"The model class to instantiate is selected based on the "),HFe=n(Aw,"CODE",{});var O7t=s(HFe);Z7r=r(O7t,"model_type"),O7t.forEach(t),eMr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),UFe=n(Aw,"CODE",{});var V7t=s(UFe);oMr=r(V7t,"pretrained_model_name_or_path"),V7t.forEach(t),rMr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(Aw,"CODE",{});var X7t=s(JFe);tMr=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),aMr=r(Aw,":"),Aw.forEach(t),nMr=i(Rl),de=n(Rl,"UL",{});var me=s(de);d4=n(me,"LI",{});var DRe=s(d4);YFe=n(DRe,"STRONG",{});var z7t=s(YFe);sMr=r(z7t,"albert"),z7t.forEach(t),lMr=r(DRe," \u2014 "),JH=n(DRe,"A",{href:!0});var W7t=s(JH);iMr=r(W7t,"TFAlbertForTokenClassification"),W7t.forEach(t),dMr=r(DRe," (ALBERT model)"),DRe.forEach(t),cMr=i(me),c4=n(me,"LI",{});var GRe=s(c4);KFe=n(GRe,"STRONG",{});var Q7t=s(KFe);fMr=r(Q7t,"bert"),Q7t.forEach(t),mMr=r(GRe," \u2014 "),YH=n(GRe,"A",{href:!0});var H7t=s(YH);gMr=r(H7t,"TFBertForTokenClassification"),H7t.forEach(t),hMr=r(GRe," (BERT model)"),GRe.forEach(t),pMr=i(me),f4=n(me,"LI",{});var ORe=s(f4);ZFe=n(ORe,"STRONG",{});var U7t=s(ZFe);uMr=r(U7t,"camembert"),U7t.forEach(t),_Mr=r(ORe," \u2014 "),KH=n(ORe,"A",{href:!0});var J7t=s(KH);bMr=r(J7t,"TFCamembertForTokenClassification"),J7t.forEach(t),vMr=r(ORe," (CamemBERT model)"),ORe.forEach(t),FMr=i(me),m4=n(me,"LI",{});var VRe=s(m4);e6e=n(VRe,"STRONG",{});var Y7t=s(e6e);TMr=r(Y7t,"convbert"),Y7t.forEach(t),MMr=r(VRe," \u2014 "),ZH=n(VRe,"A",{href:!0});var K7t=s(ZH);EMr=r(K7t,"TFConvBertForTokenClassification"),K7t.forEach(t),CMr=r(VRe," (ConvBERT model)"),VRe.forEach(t),wMr=i(me),g4=n(me,"LI",{});var XRe=s(g4);o6e=n(XRe,"STRONG",{});var Z7t=s(o6e);AMr=r(Z7t,"deberta"),Z7t.forEach(t),yMr=r(XRe," \u2014 "),eU=n(XRe,"A",{href:!0});var eMt=s(eU);LMr=r(eMt,"TFDebertaForTokenClassification"),eMt.forEach(t),xMr=r(XRe," (DeBERTa model)"),XRe.forEach(t),$Mr=i(me),h4=n(me,"LI",{});var zRe=s(h4);r6e=n(zRe,"STRONG",{});var oMt=s(r6e);kMr=r(oMt,"deberta-v2"),oMt.forEach(t),SMr=r(zRe," \u2014 "),oU=n(zRe,"A",{href:!0});var rMt=s(oU);RMr=r(rMt,"TFDebertaV2ForTokenClassification"),rMt.forEach(t),PMr=r(zRe," (DeBERTa-v2 model)"),zRe.forEach(t),BMr=i(me),p4=n(me,"LI",{});var WRe=s(p4);t6e=n(WRe,"STRONG",{});var tMt=s(t6e);IMr=r(tMt,"distilbert"),tMt.forEach(t),qMr=r(WRe," \u2014 "),rU=n(WRe,"A",{href:!0});var aMt=s(rU);NMr=r(aMt,"TFDistilBertForTokenClassification"),aMt.forEach(t),jMr=r(WRe," (DistilBERT model)"),WRe.forEach(t),DMr=i(me),u4=n(me,"LI",{});var QRe=s(u4);a6e=n(QRe,"STRONG",{});var nMt=s(a6e);GMr=r(nMt,"electra"),nMt.forEach(t),OMr=r(QRe," \u2014 "),tU=n(QRe,"A",{href:!0});var sMt=s(tU);VMr=r(sMt,"TFElectraForTokenClassification"),sMt.forEach(t),XMr=r(QRe," (ELECTRA model)"),QRe.forEach(t),zMr=i(me),_4=n(me,"LI",{});var HRe=s(_4);n6e=n(HRe,"STRONG",{});var lMt=s(n6e);WMr=r(lMt,"flaubert"),lMt.forEach(t),QMr=r(HRe," \u2014 "),aU=n(HRe,"A",{href:!0});var iMt=s(aU);HMr=r(iMt,"TFFlaubertForTokenClassification"),iMt.forEach(t),UMr=r(HRe," (FlauBERT model)"),HRe.forEach(t),JMr=i(me),b4=n(me,"LI",{});var URe=s(b4);s6e=n(URe,"STRONG",{});var dMt=s(s6e);YMr=r(dMt,"funnel"),dMt.forEach(t),KMr=r(URe," \u2014 "),nU=n(URe,"A",{href:!0});var cMt=s(nU);ZMr=r(cMt,"TFFunnelForTokenClassification"),cMt.forEach(t),e4r=r(URe," (Funnel Transformer model)"),URe.forEach(t),o4r=i(me),v4=n(me,"LI",{});var JRe=s(v4);l6e=n(JRe,"STRONG",{});var fMt=s(l6e);r4r=r(fMt,"layoutlm"),fMt.forEach(t),t4r=r(JRe," \u2014 "),sU=n(JRe,"A",{href:!0});var mMt=s(sU);a4r=r(mMt,"TFLayoutLMForTokenClassification"),mMt.forEach(t),n4r=r(JRe," (LayoutLM model)"),JRe.forEach(t),s4r=i(me),F4=n(me,"LI",{});var YRe=s(F4);i6e=n(YRe,"STRONG",{});var gMt=s(i6e);l4r=r(gMt,"longformer"),gMt.forEach(t),i4r=r(YRe," \u2014 "),lU=n(YRe,"A",{href:!0});var hMt=s(lU);d4r=r(hMt,"TFLongformerForTokenClassification"),hMt.forEach(t),c4r=r(YRe," (Longformer model)"),YRe.forEach(t),f4r=i(me),T4=n(me,"LI",{});var KRe=s(T4);d6e=n(KRe,"STRONG",{});var pMt=s(d6e);m4r=r(pMt,"mobilebert"),pMt.forEach(t),g4r=r(KRe," \u2014 "),iU=n(KRe,"A",{href:!0});var uMt=s(iU);h4r=r(uMt,"TFMobileBertForTokenClassification"),uMt.forEach(t),p4r=r(KRe," (MobileBERT model)"),KRe.forEach(t),u4r=i(me),M4=n(me,"LI",{});var ZRe=s(M4);c6e=n(ZRe,"STRONG",{});var _Mt=s(c6e);_4r=r(_Mt,"mpnet"),_Mt.forEach(t),b4r=r(ZRe," \u2014 "),dU=n(ZRe,"A",{href:!0});var bMt=s(dU);v4r=r(bMt,"TFMPNetForTokenClassification"),bMt.forEach(t),F4r=r(ZRe," (MPNet model)"),ZRe.forEach(t),T4r=i(me),E4=n(me,"LI",{});var ePe=s(E4);f6e=n(ePe,"STRONG",{});var vMt=s(f6e);M4r=r(vMt,"rembert"),vMt.forEach(t),E4r=r(ePe," \u2014 "),cU=n(ePe,"A",{href:!0});var FMt=s(cU);C4r=r(FMt,"TFRemBertForTokenClassification"),FMt.forEach(t),w4r=r(ePe," (RemBERT model)"),ePe.forEach(t),A4r=i(me),C4=n(me,"LI",{});var oPe=s(C4);m6e=n(oPe,"STRONG",{});var TMt=s(m6e);y4r=r(TMt,"roberta"),TMt.forEach(t),L4r=r(oPe," \u2014 "),fU=n(oPe,"A",{href:!0});var MMt=s(fU);x4r=r(MMt,"TFRobertaForTokenClassification"),MMt.forEach(t),$4r=r(oPe," (RoBERTa model)"),oPe.forEach(t),k4r=i(me),w4=n(me,"LI",{});var rPe=s(w4);g6e=n(rPe,"STRONG",{});var EMt=s(g6e);S4r=r(EMt,"roformer"),EMt.forEach(t),R4r=r(rPe," \u2014 "),mU=n(rPe,"A",{href:!0});var CMt=s(mU);P4r=r(CMt,"TFRoFormerForTokenClassification"),CMt.forEach(t),B4r=r(rPe," (RoFormer model)"),rPe.forEach(t),I4r=i(me),A4=n(me,"LI",{});var tPe=s(A4);h6e=n(tPe,"STRONG",{});var wMt=s(h6e);q4r=r(wMt,"xlm"),wMt.forEach(t),N4r=r(tPe," \u2014 "),gU=n(tPe,"A",{href:!0});var AMt=s(gU);j4r=r(AMt,"TFXLMForTokenClassification"),AMt.forEach(t),D4r=r(tPe," (XLM model)"),tPe.forEach(t),G4r=i(me),y4=n(me,"LI",{});var aPe=s(y4);p6e=n(aPe,"STRONG",{});var yMt=s(p6e);O4r=r(yMt,"xlm-roberta"),yMt.forEach(t),V4r=r(aPe," \u2014 "),hU=n(aPe,"A",{href:!0});var LMt=s(hU);X4r=r(LMt,"TFXLMRobertaForTokenClassification"),LMt.forEach(t),z4r=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),W4r=i(me),L4=n(me,"LI",{});var nPe=s(L4);u6e=n(nPe,"STRONG",{});var xMt=s(u6e);Q4r=r(xMt,"xlnet"),xMt.forEach(t),H4r=r(nPe," \u2014 "),pU=n(nPe,"A",{href:!0});var $Mt=s(pU);U4r=r($Mt,"TFXLNetForTokenClassification"),$Mt.forEach(t),J4r=r(nPe," (XLNet model)"),nPe.forEach(t),me.forEach(t),Y4r=i(Rl),T(x4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Kqe=i(f),vc=n(f,"H2",{class:!0});var nDe=s(vc);$4=n(nDe,"A",{id:!0,class:!0,href:!0});var kMt=s($4);_6e=n(kMt,"SPAN",{});var SMt=s(_6e);T(X8.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),K4r=i(nDe),b6e=n(nDe,"SPAN",{});var RMt=s(b6e);Z4r=r(RMt,"TFAutoModelForQuestionAnswering"),RMt.forEach(t),nDe.forEach(t),Zqe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(z8.$$.fragment,Pl),eEr=i(Pl),Fc=n(Pl,"P",{});var OZ=s(Fc);oEr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uU=n(OZ,"A",{href:!0});var PMt=s(uU);rEr=r(PMt,"from_pretrained()"),PMt.forEach(t),tEr=r(OZ," class method or the "),_U=n(OZ,"A",{href:!0});var BMt=s(_U);aEr=r(BMt,"from_config()"),BMt.forEach(t),nEr=r(OZ,` class
method.`),OZ.forEach(t),sEr=i(Pl),W8=n(Pl,"P",{});var sDe=s(W8);lEr=r(sDe,"This class cannot be instantiated directly using "),v6e=n(sDe,"CODE",{});var IMt=s(v6e);iEr=r(IMt,"__init__()"),IMt.forEach(t),dEr=r(sDe," (throws an error)."),sDe.forEach(t),cEr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var yw=s(Nt);T(Q8.$$.fragment,yw),fEr=i(yw),F6e=n(yw,"P",{});var qMt=s(F6e);mEr=r(qMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qMt.forEach(t),gEr=i(yw),Tc=n(yw,"P",{});var VZ=s(Tc);hEr=r(VZ,`Note:
Loading a model from its configuration file does `),T6e=n(VZ,"STRONG",{});var NMt=s(T6e);pEr=r(NMt,"not"),NMt.forEach(t),uEr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(VZ,"A",{href:!0});var jMt=s(bU);_Er=r(jMt,"from_pretrained()"),jMt.forEach(t),bEr=r(VZ," to load the model weights."),VZ.forEach(t),vEr=i(yw),T(k4.$$.fragment,yw),yw.forEach(t),FEr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(H8.$$.fragment,Bl),TEr=i(Bl),M6e=n(Bl,"P",{});var DMt=s(M6e);MEr=r(DMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DMt.forEach(t),EEr=i(Bl),fn=n(Bl,"P",{});var Lw=s(fn);CEr=r(Lw,"The model class to instantiate is selected based on the "),E6e=n(Lw,"CODE",{});var GMt=s(E6e);wEr=r(GMt,"model_type"),GMt.forEach(t),AEr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),C6e=n(Lw,"CODE",{});var OMt=s(C6e);yEr=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),LEr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=n(Lw,"CODE",{});var VMt=s(w6e);xEr=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),$Er=r(Lw,":"),Lw.forEach(t),kEr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);S4=n(ge,"LI",{});var sPe=s(S4);A6e=n(sPe,"STRONG",{});var XMt=s(A6e);SEr=r(XMt,"albert"),XMt.forEach(t),REr=r(sPe," \u2014 "),vU=n(sPe,"A",{href:!0});var zMt=s(vU);PEr=r(zMt,"TFAlbertForQuestionAnswering"),zMt.forEach(t),BEr=r(sPe," (ALBERT model)"),sPe.forEach(t),IEr=i(ge),R4=n(ge,"LI",{});var lPe=s(R4);y6e=n(lPe,"STRONG",{});var WMt=s(y6e);qEr=r(WMt,"bert"),WMt.forEach(t),NEr=r(lPe," \u2014 "),FU=n(lPe,"A",{href:!0});var QMt=s(FU);jEr=r(QMt,"TFBertForQuestionAnswering"),QMt.forEach(t),DEr=r(lPe," (BERT model)"),lPe.forEach(t),GEr=i(ge),P4=n(ge,"LI",{});var iPe=s(P4);L6e=n(iPe,"STRONG",{});var HMt=s(L6e);OEr=r(HMt,"camembert"),HMt.forEach(t),VEr=r(iPe," \u2014 "),TU=n(iPe,"A",{href:!0});var UMt=s(TU);XEr=r(UMt,"TFCamembertForQuestionAnswering"),UMt.forEach(t),zEr=r(iPe," (CamemBERT model)"),iPe.forEach(t),WEr=i(ge),B4=n(ge,"LI",{});var dPe=s(B4);x6e=n(dPe,"STRONG",{});var JMt=s(x6e);QEr=r(JMt,"convbert"),JMt.forEach(t),HEr=r(dPe," \u2014 "),MU=n(dPe,"A",{href:!0});var YMt=s(MU);UEr=r(YMt,"TFConvBertForQuestionAnswering"),YMt.forEach(t),JEr=r(dPe," (ConvBERT model)"),dPe.forEach(t),YEr=i(ge),I4=n(ge,"LI",{});var cPe=s(I4);$6e=n(cPe,"STRONG",{});var KMt=s($6e);KEr=r(KMt,"deberta"),KMt.forEach(t),ZEr=r(cPe," \u2014 "),EU=n(cPe,"A",{href:!0});var ZMt=s(EU);eCr=r(ZMt,"TFDebertaForQuestionAnswering"),ZMt.forEach(t),oCr=r(cPe," (DeBERTa model)"),cPe.forEach(t),rCr=i(ge),q4=n(ge,"LI",{});var fPe=s(q4);k6e=n(fPe,"STRONG",{});var e4t=s(k6e);tCr=r(e4t,"deberta-v2"),e4t.forEach(t),aCr=r(fPe," \u2014 "),CU=n(fPe,"A",{href:!0});var o4t=s(CU);nCr=r(o4t,"TFDebertaV2ForQuestionAnswering"),o4t.forEach(t),sCr=r(fPe," (DeBERTa-v2 model)"),fPe.forEach(t),lCr=i(ge),N4=n(ge,"LI",{});var mPe=s(N4);S6e=n(mPe,"STRONG",{});var r4t=s(S6e);iCr=r(r4t,"distilbert"),r4t.forEach(t),dCr=r(mPe," \u2014 "),wU=n(mPe,"A",{href:!0});var t4t=s(wU);cCr=r(t4t,"TFDistilBertForQuestionAnswering"),t4t.forEach(t),fCr=r(mPe," (DistilBERT model)"),mPe.forEach(t),mCr=i(ge),j4=n(ge,"LI",{});var gPe=s(j4);R6e=n(gPe,"STRONG",{});var a4t=s(R6e);gCr=r(a4t,"electra"),a4t.forEach(t),hCr=r(gPe," \u2014 "),AU=n(gPe,"A",{href:!0});var n4t=s(AU);pCr=r(n4t,"TFElectraForQuestionAnswering"),n4t.forEach(t),uCr=r(gPe," (ELECTRA model)"),gPe.forEach(t),_Cr=i(ge),D4=n(ge,"LI",{});var hPe=s(D4);P6e=n(hPe,"STRONG",{});var s4t=s(P6e);bCr=r(s4t,"flaubert"),s4t.forEach(t),vCr=r(hPe," \u2014 "),yU=n(hPe,"A",{href:!0});var l4t=s(yU);FCr=r(l4t,"TFFlaubertForQuestionAnsweringSimple"),l4t.forEach(t),TCr=r(hPe," (FlauBERT model)"),hPe.forEach(t),MCr=i(ge),G4=n(ge,"LI",{});var pPe=s(G4);B6e=n(pPe,"STRONG",{});var i4t=s(B6e);ECr=r(i4t,"funnel"),i4t.forEach(t),CCr=r(pPe," \u2014 "),LU=n(pPe,"A",{href:!0});var d4t=s(LU);wCr=r(d4t,"TFFunnelForQuestionAnswering"),d4t.forEach(t),ACr=r(pPe," (Funnel Transformer model)"),pPe.forEach(t),yCr=i(ge),O4=n(ge,"LI",{});var uPe=s(O4);I6e=n(uPe,"STRONG",{});var c4t=s(I6e);LCr=r(c4t,"gptj"),c4t.forEach(t),xCr=r(uPe," \u2014 "),xU=n(uPe,"A",{href:!0});var f4t=s(xU);$Cr=r(f4t,"TFGPTJForQuestionAnswering"),f4t.forEach(t),kCr=r(uPe," (GPT-J model)"),uPe.forEach(t),SCr=i(ge),V4=n(ge,"LI",{});var _Pe=s(V4);q6e=n(_Pe,"STRONG",{});var m4t=s(q6e);RCr=r(m4t,"longformer"),m4t.forEach(t),PCr=r(_Pe," \u2014 "),$U=n(_Pe,"A",{href:!0});var g4t=s($U);BCr=r(g4t,"TFLongformerForQuestionAnswering"),g4t.forEach(t),ICr=r(_Pe," (Longformer model)"),_Pe.forEach(t),qCr=i(ge),X4=n(ge,"LI",{});var bPe=s(X4);N6e=n(bPe,"STRONG",{});var h4t=s(N6e);NCr=r(h4t,"mobilebert"),h4t.forEach(t),jCr=r(bPe," \u2014 "),kU=n(bPe,"A",{href:!0});var p4t=s(kU);DCr=r(p4t,"TFMobileBertForQuestionAnswering"),p4t.forEach(t),GCr=r(bPe," (MobileBERT model)"),bPe.forEach(t),OCr=i(ge),z4=n(ge,"LI",{});var vPe=s(z4);j6e=n(vPe,"STRONG",{});var u4t=s(j6e);VCr=r(u4t,"mpnet"),u4t.forEach(t),XCr=r(vPe," \u2014 "),SU=n(vPe,"A",{href:!0});var _4t=s(SU);zCr=r(_4t,"TFMPNetForQuestionAnswering"),_4t.forEach(t),WCr=r(vPe," (MPNet model)"),vPe.forEach(t),QCr=i(ge),W4=n(ge,"LI",{});var FPe=s(W4);D6e=n(FPe,"STRONG",{});var b4t=s(D6e);HCr=r(b4t,"rembert"),b4t.forEach(t),UCr=r(FPe," \u2014 "),RU=n(FPe,"A",{href:!0});var v4t=s(RU);JCr=r(v4t,"TFRemBertForQuestionAnswering"),v4t.forEach(t),YCr=r(FPe," (RemBERT model)"),FPe.forEach(t),KCr=i(ge),Q4=n(ge,"LI",{});var TPe=s(Q4);G6e=n(TPe,"STRONG",{});var F4t=s(G6e);ZCr=r(F4t,"roberta"),F4t.forEach(t),e5r=r(TPe," \u2014 "),PU=n(TPe,"A",{href:!0});var T4t=s(PU);o5r=r(T4t,"TFRobertaForQuestionAnswering"),T4t.forEach(t),r5r=r(TPe," (RoBERTa model)"),TPe.forEach(t),t5r=i(ge),H4=n(ge,"LI",{});var MPe=s(H4);O6e=n(MPe,"STRONG",{});var M4t=s(O6e);a5r=r(M4t,"roformer"),M4t.forEach(t),n5r=r(MPe," \u2014 "),BU=n(MPe,"A",{href:!0});var E4t=s(BU);s5r=r(E4t,"TFRoFormerForQuestionAnswering"),E4t.forEach(t),l5r=r(MPe," (RoFormer model)"),MPe.forEach(t),i5r=i(ge),U4=n(ge,"LI",{});var EPe=s(U4);V6e=n(EPe,"STRONG",{});var C4t=s(V6e);d5r=r(C4t,"xlm"),C4t.forEach(t),c5r=r(EPe," \u2014 "),IU=n(EPe,"A",{href:!0});var w4t=s(IU);f5r=r(w4t,"TFXLMForQuestionAnsweringSimple"),w4t.forEach(t),m5r=r(EPe," (XLM model)"),EPe.forEach(t),g5r=i(ge),J4=n(ge,"LI",{});var CPe=s(J4);X6e=n(CPe,"STRONG",{});var A4t=s(X6e);h5r=r(A4t,"xlm-roberta"),A4t.forEach(t),p5r=r(CPe," \u2014 "),qU=n(CPe,"A",{href:!0});var y4t=s(qU);u5r=r(y4t,"TFXLMRobertaForQuestionAnswering"),y4t.forEach(t),_5r=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),b5r=i(ge),Y4=n(ge,"LI",{});var wPe=s(Y4);z6e=n(wPe,"STRONG",{});var L4t=s(z6e);v5r=r(L4t,"xlnet"),L4t.forEach(t),F5r=r(wPe," \u2014 "),NU=n(wPe,"A",{href:!0});var x4t=s(NU);T5r=r(x4t,"TFXLNetForQuestionAnsweringSimple"),x4t.forEach(t),M5r=r(wPe," (XLNet model)"),wPe.forEach(t),ge.forEach(t),E5r=i(Bl),T(K4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),eNe=i(f),Mc=n(f,"H2",{class:!0});var lDe=s(Mc);Z4=n(lDe,"A",{id:!0,class:!0,href:!0});var $4t=s(Z4);W6e=n($4t,"SPAN",{});var k4t=s(W6e);T(U8.$$.fragment,k4t),k4t.forEach(t),$4t.forEach(t),C5r=i(lDe),Q6e=n(lDe,"SPAN",{});var S4t=s(Q6e);w5r=r(S4t,"TFAutoModelForVision2Seq"),S4t.forEach(t),lDe.forEach(t),oNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(J8.$$.fragment,Il),A5r=i(Il),Ec=n(Il,"P",{});var XZ=s(Ec);y5r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jU=n(XZ,"A",{href:!0});var R4t=s(jU);L5r=r(R4t,"from_pretrained()"),R4t.forEach(t),x5r=r(XZ," class method or the "),DU=n(XZ,"A",{href:!0});var P4t=s(DU);$5r=r(P4t,"from_config()"),P4t.forEach(t),k5r=r(XZ,` class
method.`),XZ.forEach(t),S5r=i(Il),Y8=n(Il,"P",{});var iDe=s(Y8);R5r=r(iDe,"This class cannot be instantiated directly using "),H6e=n(iDe,"CODE",{});var B4t=s(H6e);P5r=r(B4t,"__init__()"),B4t.forEach(t),B5r=r(iDe," (throws an error)."),iDe.forEach(t),I5r=i(Il),jt=n(Il,"DIV",{class:!0});var xw=s(jt);T(K8.$$.fragment,xw),q5r=i(xw),U6e=n(xw,"P",{});var I4t=s(U6e);N5r=r(I4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),I4t.forEach(t),j5r=i(xw),Cc=n(xw,"P",{});var zZ=s(Cc);D5r=r(zZ,`Note:
Loading a model from its configuration file does `),J6e=n(zZ,"STRONG",{});var q4t=s(J6e);G5r=r(q4t,"not"),q4t.forEach(t),O5r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(zZ,"A",{href:!0});var N4t=s(GU);V5r=r(N4t,"from_pretrained()"),N4t.forEach(t),X5r=r(zZ," to load the model weights."),zZ.forEach(t),z5r=i(xw),T(eE.$$.fragment,xw),xw.forEach(t),W5r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(Z8.$$.fragment,ql),Q5r=i(ql),Y6e=n(ql,"P",{});var j4t=s(Y6e);H5r=r(j4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),j4t.forEach(t),U5r=i(ql),mn=n(ql,"P",{});var $w=s(mn);J5r=r($w,"The model class to instantiate is selected based on the "),K6e=n($w,"CODE",{});var D4t=s(K6e);Y5r=r(D4t,"model_type"),D4t.forEach(t),K5r=r($w,` property of the config object (either
passed as an argument or loaded from `),Z6e=n($w,"CODE",{});var G4t=s(Z6e);Z5r=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),e3r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n($w,"CODE",{});var O4t=s(e0e);o3r=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),r3r=r($w,":"),$w.forEach(t),t3r=i(ql),o0e=n(ql,"UL",{});var V4t=s(o0e);oE=n(V4t,"LI",{});var APe=s(oE);r0e=n(APe,"STRONG",{});var X4t=s(r0e);a3r=r(X4t,"vision-encoder-decoder"),X4t.forEach(t),n3r=r(APe," \u2014 "),OU=n(APe,"A",{href:!0});var z4t=s(OU);s3r=r(z4t,"TFVisionEncoderDecoderModel"),z4t.forEach(t),l3r=r(APe," (Vision Encoder decoder model)"),APe.forEach(t),V4t.forEach(t),i3r=i(ql),T(rE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),rNe=i(f),wc=n(f,"H2",{class:!0});var dDe=s(wc);tE=n(dDe,"A",{id:!0,class:!0,href:!0});var W4t=s(tE);t0e=n(W4t,"SPAN",{});var Q4t=s(t0e);T(ex.$$.fragment,Q4t),Q4t.forEach(t),W4t.forEach(t),d3r=i(dDe),a0e=n(dDe,"SPAN",{});var H4t=s(a0e);c3r=r(H4t,"TFAutoModelForSpeechSeq2Seq"),H4t.forEach(t),dDe.forEach(t),tNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(ox.$$.fragment,Nl),f3r=i(Nl),Ac=n(Nl,"P",{});var WZ=s(Ac);m3r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VU=n(WZ,"A",{href:!0});var U4t=s(VU);g3r=r(U4t,"from_pretrained()"),U4t.forEach(t),h3r=r(WZ," class method or the "),XU=n(WZ,"A",{href:!0});var J4t=s(XU);p3r=r(J4t,"from_config()"),J4t.forEach(t),u3r=r(WZ,` class
method.`),WZ.forEach(t),_3r=i(Nl),rx=n(Nl,"P",{});var cDe=s(rx);b3r=r(cDe,"This class cannot be instantiated directly using "),n0e=n(cDe,"CODE",{});var Y4t=s(n0e);v3r=r(Y4t,"__init__()"),Y4t.forEach(t),F3r=r(cDe," (throws an error)."),cDe.forEach(t),T3r=i(Nl),Dt=n(Nl,"DIV",{class:!0});var kw=s(Dt);T(tx.$$.fragment,kw),M3r=i(kw),s0e=n(kw,"P",{});var K4t=s(s0e);E3r=r(K4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),K4t.forEach(t),C3r=i(kw),yc=n(kw,"P",{});var QZ=s(yc);w3r=r(QZ,`Note:
Loading a model from its configuration file does `),l0e=n(QZ,"STRONG",{});var Z4t=s(l0e);A3r=r(Z4t,"not"),Z4t.forEach(t),y3r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(QZ,"A",{href:!0});var eEt=s(zU);L3r=r(eEt,"from_pretrained()"),eEt.forEach(t),x3r=r(QZ," to load the model weights."),QZ.forEach(t),$3r=i(kw),T(aE.$$.fragment,kw),kw.forEach(t),k3r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(ax.$$.fragment,jl),S3r=i(jl),i0e=n(jl,"P",{});var oEt=s(i0e);R3r=r(oEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oEt.forEach(t),P3r=i(jl),gn=n(jl,"P",{});var Sw=s(gn);B3r=r(Sw,"The model class to instantiate is selected based on the "),d0e=n(Sw,"CODE",{});var rEt=s(d0e);I3r=r(rEt,"model_type"),rEt.forEach(t),q3r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),c0e=n(Sw,"CODE",{});var tEt=s(c0e);N3r=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),j3r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(Sw,"CODE",{});var aEt=s(f0e);D3r=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),G3r=r(Sw,":"),Sw.forEach(t),O3r=i(jl),m0e=n(jl,"UL",{});var nEt=s(m0e);nE=n(nEt,"LI",{});var yPe=s(nE);g0e=n(yPe,"STRONG",{});var sEt=s(g0e);V3r=r(sEt,"speech_to_text"),sEt.forEach(t),X3r=r(yPe," \u2014 "),WU=n(yPe,"A",{href:!0});var lEt=s(WU);z3r=r(lEt,"TFSpeech2TextForConditionalGeneration"),lEt.forEach(t),W3r=r(yPe," (Speech2Text model)"),yPe.forEach(t),nEt.forEach(t),Q3r=i(jl),T(sE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),aNe=i(f),Lc=n(f,"H2",{class:!0});var fDe=s(Lc);lE=n(fDe,"A",{id:!0,class:!0,href:!0});var iEt=s(lE);h0e=n(iEt,"SPAN",{});var dEt=s(h0e);T(nx.$$.fragment,dEt),dEt.forEach(t),iEt.forEach(t),H3r=i(fDe),p0e=n(fDe,"SPAN",{});var cEt=s(p0e);U3r=r(cEt,"FlaxAutoModel"),cEt.forEach(t),fDe.forEach(t),nNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(sx.$$.fragment,Dl),J3r=i(Dl),xc=n(Dl,"P",{});var HZ=s(xc);Y3r=r(HZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QU=n(HZ,"A",{href:!0});var fEt=s(QU);K3r=r(fEt,"from_pretrained()"),fEt.forEach(t),Z3r=r(HZ," class method or the "),HU=n(HZ,"A",{href:!0});var mEt=s(HU);ewr=r(mEt,"from_config()"),mEt.forEach(t),owr=r(HZ,` class
method.`),HZ.forEach(t),rwr=i(Dl),lx=n(Dl,"P",{});var mDe=s(lx);twr=r(mDe,"This class cannot be instantiated directly using "),u0e=n(mDe,"CODE",{});var gEt=s(u0e);awr=r(gEt,"__init__()"),gEt.forEach(t),nwr=r(mDe," (throws an error)."),mDe.forEach(t),swr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var Rw=s(Gt);T(ix.$$.fragment,Rw),lwr=i(Rw),_0e=n(Rw,"P",{});var hEt=s(_0e);iwr=r(hEt,"Instantiates one of the base model classes of the library from a configuration."),hEt.forEach(t),dwr=i(Rw),$c=n(Rw,"P",{});var UZ=s($c);cwr=r(UZ,`Note:
Loading a model from its configuration file does `),b0e=n(UZ,"STRONG",{});var pEt=s(b0e);fwr=r(pEt,"not"),pEt.forEach(t),mwr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(UZ,"A",{href:!0});var uEt=s(UU);gwr=r(uEt,"from_pretrained()"),uEt.forEach(t),hwr=r(UZ," to load the model weights."),UZ.forEach(t),pwr=i(Rw),T(iE.$$.fragment,Rw),Rw.forEach(t),uwr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(dx.$$.fragment,Gl),_wr=i(Gl),v0e=n(Gl,"P",{});var _Et=s(v0e);bwr=r(_Et,"Instantiate one of the base model classes of the library from a pretrained model."),_Et.forEach(t),vwr=i(Gl),hn=n(Gl,"P",{});var Pw=s(hn);Fwr=r(Pw,"The model class to instantiate is selected based on the "),F0e=n(Pw,"CODE",{});var bEt=s(F0e);Twr=r(bEt,"model_type"),bEt.forEach(t),Mwr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),T0e=n(Pw,"CODE",{});var vEt=s(T0e);Ewr=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),Cwr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=n(Pw,"CODE",{});var FEt=s(M0e);wwr=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),Awr=r(Pw,":"),Pw.forEach(t),ywr=i(Gl),re=n(Gl,"UL",{});var ne=s(re);dE=n(ne,"LI",{});var LPe=s(dE);E0e=n(LPe,"STRONG",{});var TEt=s(E0e);Lwr=r(TEt,"albert"),TEt.forEach(t),xwr=r(LPe," \u2014 "),JU=n(LPe,"A",{href:!0});var MEt=s(JU);$wr=r(MEt,"FlaxAlbertModel"),MEt.forEach(t),kwr=r(LPe," (ALBERT model)"),LPe.forEach(t),Swr=i(ne),cE=n(ne,"LI",{});var xPe=s(cE);C0e=n(xPe,"STRONG",{});var EEt=s(C0e);Rwr=r(EEt,"bart"),EEt.forEach(t),Pwr=r(xPe," \u2014 "),YU=n(xPe,"A",{href:!0});var CEt=s(YU);Bwr=r(CEt,"FlaxBartModel"),CEt.forEach(t),Iwr=r(xPe," (BART model)"),xPe.forEach(t),qwr=i(ne),fE=n(ne,"LI",{});var $Pe=s(fE);w0e=n($Pe,"STRONG",{});var wEt=s(w0e);Nwr=r(wEt,"beit"),wEt.forEach(t),jwr=r($Pe," \u2014 "),KU=n($Pe,"A",{href:!0});var AEt=s(KU);Dwr=r(AEt,"FlaxBeitModel"),AEt.forEach(t),Gwr=r($Pe," (BEiT model)"),$Pe.forEach(t),Owr=i(ne),mE=n(ne,"LI",{});var kPe=s(mE);A0e=n(kPe,"STRONG",{});var yEt=s(A0e);Vwr=r(yEt,"bert"),yEt.forEach(t),Xwr=r(kPe," \u2014 "),ZU=n(kPe,"A",{href:!0});var LEt=s(ZU);zwr=r(LEt,"FlaxBertModel"),LEt.forEach(t),Wwr=r(kPe," (BERT model)"),kPe.forEach(t),Qwr=i(ne),gE=n(ne,"LI",{});var SPe=s(gE);y0e=n(SPe,"STRONG",{});var xEt=s(y0e);Hwr=r(xEt,"big_bird"),xEt.forEach(t),Uwr=r(SPe," \u2014 "),eJ=n(SPe,"A",{href:!0});var $Et=s(eJ);Jwr=r($Et,"FlaxBigBirdModel"),$Et.forEach(t),Ywr=r(SPe," (BigBird model)"),SPe.forEach(t),Kwr=i(ne),hE=n(ne,"LI",{});var RPe=s(hE);L0e=n(RPe,"STRONG",{});var kEt=s(L0e);Zwr=r(kEt,"blenderbot"),kEt.forEach(t),eAr=r(RPe," \u2014 "),oJ=n(RPe,"A",{href:!0});var SEt=s(oJ);oAr=r(SEt,"FlaxBlenderbotModel"),SEt.forEach(t),rAr=r(RPe," (Blenderbot model)"),RPe.forEach(t),tAr=i(ne),pE=n(ne,"LI",{});var PPe=s(pE);x0e=n(PPe,"STRONG",{});var REt=s(x0e);aAr=r(REt,"blenderbot-small"),REt.forEach(t),nAr=r(PPe," \u2014 "),rJ=n(PPe,"A",{href:!0});var PEt=s(rJ);sAr=r(PEt,"FlaxBlenderbotSmallModel"),PEt.forEach(t),lAr=r(PPe," (BlenderbotSmall model)"),PPe.forEach(t),iAr=i(ne),uE=n(ne,"LI",{});var BPe=s(uE);$0e=n(BPe,"STRONG",{});var BEt=s($0e);dAr=r(BEt,"clip"),BEt.forEach(t),cAr=r(BPe," \u2014 "),tJ=n(BPe,"A",{href:!0});var IEt=s(tJ);fAr=r(IEt,"FlaxCLIPModel"),IEt.forEach(t),mAr=r(BPe," (CLIP model)"),BPe.forEach(t),gAr=i(ne),_E=n(ne,"LI",{});var IPe=s(_E);k0e=n(IPe,"STRONG",{});var qEt=s(k0e);hAr=r(qEt,"distilbert"),qEt.forEach(t),pAr=r(IPe," \u2014 "),aJ=n(IPe,"A",{href:!0});var NEt=s(aJ);uAr=r(NEt,"FlaxDistilBertModel"),NEt.forEach(t),_Ar=r(IPe," (DistilBERT model)"),IPe.forEach(t),bAr=i(ne),bE=n(ne,"LI",{});var qPe=s(bE);S0e=n(qPe,"STRONG",{});var jEt=s(S0e);vAr=r(jEt,"electra"),jEt.forEach(t),FAr=r(qPe," \u2014 "),nJ=n(qPe,"A",{href:!0});var DEt=s(nJ);TAr=r(DEt,"FlaxElectraModel"),DEt.forEach(t),MAr=r(qPe," (ELECTRA model)"),qPe.forEach(t),EAr=i(ne),vE=n(ne,"LI",{});var NPe=s(vE);R0e=n(NPe,"STRONG",{});var GEt=s(R0e);CAr=r(GEt,"gpt2"),GEt.forEach(t),wAr=r(NPe," \u2014 "),sJ=n(NPe,"A",{href:!0});var OEt=s(sJ);AAr=r(OEt,"FlaxGPT2Model"),OEt.forEach(t),yAr=r(NPe," (OpenAI GPT-2 model)"),NPe.forEach(t),LAr=i(ne),FE=n(ne,"LI",{});var jPe=s(FE);P0e=n(jPe,"STRONG",{});var VEt=s(P0e);xAr=r(VEt,"gpt_neo"),VEt.forEach(t),$Ar=r(jPe," \u2014 "),lJ=n(jPe,"A",{href:!0});var XEt=s(lJ);kAr=r(XEt,"FlaxGPTNeoModel"),XEt.forEach(t),SAr=r(jPe," (GPT Neo model)"),jPe.forEach(t),RAr=i(ne),TE=n(ne,"LI",{});var DPe=s(TE);B0e=n(DPe,"STRONG",{});var zEt=s(B0e);PAr=r(zEt,"gptj"),zEt.forEach(t),BAr=r(DPe," \u2014 "),iJ=n(DPe,"A",{href:!0});var WEt=s(iJ);IAr=r(WEt,"FlaxGPTJModel"),WEt.forEach(t),qAr=r(DPe," (GPT-J model)"),DPe.forEach(t),NAr=i(ne),ME=n(ne,"LI",{});var GPe=s(ME);I0e=n(GPe,"STRONG",{});var QEt=s(I0e);jAr=r(QEt,"marian"),QEt.forEach(t),DAr=r(GPe," \u2014 "),dJ=n(GPe,"A",{href:!0});var HEt=s(dJ);GAr=r(HEt,"FlaxMarianModel"),HEt.forEach(t),OAr=r(GPe," (Marian model)"),GPe.forEach(t),VAr=i(ne),EE=n(ne,"LI",{});var OPe=s(EE);q0e=n(OPe,"STRONG",{});var UEt=s(q0e);XAr=r(UEt,"mbart"),UEt.forEach(t),zAr=r(OPe," \u2014 "),cJ=n(OPe,"A",{href:!0});var JEt=s(cJ);WAr=r(JEt,"FlaxMBartModel"),JEt.forEach(t),QAr=r(OPe," (mBART model)"),OPe.forEach(t),HAr=i(ne),CE=n(ne,"LI",{});var VPe=s(CE);N0e=n(VPe,"STRONG",{});var YEt=s(N0e);UAr=r(YEt,"mt5"),YEt.forEach(t),JAr=r(VPe," \u2014 "),fJ=n(VPe,"A",{href:!0});var KEt=s(fJ);YAr=r(KEt,"FlaxMT5Model"),KEt.forEach(t),KAr=r(VPe," (mT5 model)"),VPe.forEach(t),ZAr=i(ne),wE=n(ne,"LI",{});var XPe=s(wE);j0e=n(XPe,"STRONG",{});var ZEt=s(j0e);eyr=r(ZEt,"pegasus"),ZEt.forEach(t),oyr=r(XPe," \u2014 "),mJ=n(XPe,"A",{href:!0});var eCt=s(mJ);ryr=r(eCt,"FlaxPegasusModel"),eCt.forEach(t),tyr=r(XPe," (Pegasus model)"),XPe.forEach(t),ayr=i(ne),AE=n(ne,"LI",{});var zPe=s(AE);D0e=n(zPe,"STRONG",{});var oCt=s(D0e);nyr=r(oCt,"roberta"),oCt.forEach(t),syr=r(zPe," \u2014 "),gJ=n(zPe,"A",{href:!0});var rCt=s(gJ);lyr=r(rCt,"FlaxRobertaModel"),rCt.forEach(t),iyr=r(zPe," (RoBERTa model)"),zPe.forEach(t),dyr=i(ne),yE=n(ne,"LI",{});var WPe=s(yE);G0e=n(WPe,"STRONG",{});var tCt=s(G0e);cyr=r(tCt,"roformer"),tCt.forEach(t),fyr=r(WPe," \u2014 "),hJ=n(WPe,"A",{href:!0});var aCt=s(hJ);myr=r(aCt,"FlaxRoFormerModel"),aCt.forEach(t),gyr=r(WPe," (RoFormer model)"),WPe.forEach(t),hyr=i(ne),LE=n(ne,"LI",{});var QPe=s(LE);O0e=n(QPe,"STRONG",{});var nCt=s(O0e);pyr=r(nCt,"t5"),nCt.forEach(t),uyr=r(QPe," \u2014 "),pJ=n(QPe,"A",{href:!0});var sCt=s(pJ);_yr=r(sCt,"FlaxT5Model"),sCt.forEach(t),byr=r(QPe," (T5 model)"),QPe.forEach(t),vyr=i(ne),xE=n(ne,"LI",{});var HPe=s(xE);V0e=n(HPe,"STRONG",{});var lCt=s(V0e);Fyr=r(lCt,"vision-text-dual-encoder"),lCt.forEach(t),Tyr=r(HPe," \u2014 "),uJ=n(HPe,"A",{href:!0});var iCt=s(uJ);Myr=r(iCt,"FlaxVisionTextDualEncoderModel"),iCt.forEach(t),Eyr=r(HPe," (VisionTextDualEncoder model)"),HPe.forEach(t),Cyr=i(ne),$E=n(ne,"LI",{});var UPe=s($E);X0e=n(UPe,"STRONG",{});var dCt=s(X0e);wyr=r(dCt,"vit"),dCt.forEach(t),Ayr=r(UPe," \u2014 "),_J=n(UPe,"A",{href:!0});var cCt=s(_J);yyr=r(cCt,"FlaxViTModel"),cCt.forEach(t),Lyr=r(UPe," (ViT model)"),UPe.forEach(t),xyr=i(ne),kE=n(ne,"LI",{});var JPe=s(kE);z0e=n(JPe,"STRONG",{});var fCt=s(z0e);$yr=r(fCt,"wav2vec2"),fCt.forEach(t),kyr=r(JPe," \u2014 "),bJ=n(JPe,"A",{href:!0});var mCt=s(bJ);Syr=r(mCt,"FlaxWav2Vec2Model"),mCt.forEach(t),Ryr=r(JPe," (Wav2Vec2 model)"),JPe.forEach(t),Pyr=i(ne),SE=n(ne,"LI",{});var YPe=s(SE);W0e=n(YPe,"STRONG",{});var gCt=s(W0e);Byr=r(gCt,"xglm"),gCt.forEach(t),Iyr=r(YPe," \u2014 "),vJ=n(YPe,"A",{href:!0});var hCt=s(vJ);qyr=r(hCt,"FlaxXGLMModel"),hCt.forEach(t),Nyr=r(YPe," (XGLM model)"),YPe.forEach(t),jyr=i(ne),RE=n(ne,"LI",{});var KPe=s(RE);Q0e=n(KPe,"STRONG",{});var pCt=s(Q0e);Dyr=r(pCt,"xlm-roberta"),pCt.forEach(t),Gyr=r(KPe," \u2014 "),FJ=n(KPe,"A",{href:!0});var uCt=s(FJ);Oyr=r(uCt,"FlaxXLMRobertaModel"),uCt.forEach(t),Vyr=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),ne.forEach(t),Xyr=i(Gl),T(PE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),sNe=i(f),kc=n(f,"H2",{class:!0});var gDe=s(kc);BE=n(gDe,"A",{id:!0,class:!0,href:!0});var _Ct=s(BE);H0e=n(_Ct,"SPAN",{});var bCt=s(H0e);T(cx.$$.fragment,bCt),bCt.forEach(t),_Ct.forEach(t),zyr=i(gDe),U0e=n(gDe,"SPAN",{});var vCt=s(U0e);Wyr=r(vCt,"FlaxAutoModelForCausalLM"),vCt.forEach(t),gDe.forEach(t),lNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(fx.$$.fragment,Ol),Qyr=i(Ol),Sc=n(Ol,"P",{});var JZ=s(Sc);Hyr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TJ=n(JZ,"A",{href:!0});var FCt=s(TJ);Uyr=r(FCt,"from_pretrained()"),FCt.forEach(t),Jyr=r(JZ," class method or the "),MJ=n(JZ,"A",{href:!0});var TCt=s(MJ);Yyr=r(TCt,"from_config()"),TCt.forEach(t),Kyr=r(JZ,` class
method.`),JZ.forEach(t),Zyr=i(Ol),mx=n(Ol,"P",{});var hDe=s(mx);eLr=r(hDe,"This class cannot be instantiated directly using "),J0e=n(hDe,"CODE",{});var MCt=s(J0e);oLr=r(MCt,"__init__()"),MCt.forEach(t),rLr=r(hDe," (throws an error)."),hDe.forEach(t),tLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var Bw=s(Ot);T(gx.$$.fragment,Bw),aLr=i(Bw),Y0e=n(Bw,"P",{});var ECt=s(Y0e);nLr=r(ECt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ECt.forEach(t),sLr=i(Bw),Rc=n(Bw,"P",{});var YZ=s(Rc);lLr=r(YZ,`Note:
Loading a model from its configuration file does `),K0e=n(YZ,"STRONG",{});var CCt=s(K0e);iLr=r(CCt,"not"),CCt.forEach(t),dLr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(YZ,"A",{href:!0});var wCt=s(EJ);cLr=r(wCt,"from_pretrained()"),wCt.forEach(t),fLr=r(YZ," to load the model weights."),YZ.forEach(t),mLr=i(Bw),T(IE.$$.fragment,Bw),Bw.forEach(t),gLr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(hx.$$.fragment,Vl),hLr=i(Vl),Z0e=n(Vl,"P",{});var ACt=s(Z0e);pLr=r(ACt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ACt.forEach(t),uLr=i(Vl),pn=n(Vl,"P",{});var Iw=s(pn);_Lr=r(Iw,"The model class to instantiate is selected based on the "),eTe=n(Iw,"CODE",{});var yCt=s(eTe);bLr=r(yCt,"model_type"),yCt.forEach(t),vLr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),oTe=n(Iw,"CODE",{});var LCt=s(oTe);FLr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),TLr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(Iw,"CODE",{});var xCt=s(rTe);MLr=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),ELr=r(Iw,":"),Iw.forEach(t),CLr=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);qE=n(Xe,"LI",{});var ZPe=s(qE);tTe=n(ZPe,"STRONG",{});var $Ct=s(tTe);wLr=r($Ct,"bart"),$Ct.forEach(t),ALr=r(ZPe," \u2014 "),CJ=n(ZPe,"A",{href:!0});var kCt=s(CJ);yLr=r(kCt,"FlaxBartForCausalLM"),kCt.forEach(t),LLr=r(ZPe," (BART model)"),ZPe.forEach(t),xLr=i(Xe),NE=n(Xe,"LI",{});var eBe=s(NE);aTe=n(eBe,"STRONG",{});var SCt=s(aTe);$Lr=r(SCt,"bert"),SCt.forEach(t),kLr=r(eBe," \u2014 "),wJ=n(eBe,"A",{href:!0});var RCt=s(wJ);SLr=r(RCt,"FlaxBertForCausalLM"),RCt.forEach(t),RLr=r(eBe," (BERT model)"),eBe.forEach(t),PLr=i(Xe),jE=n(Xe,"LI",{});var oBe=s(jE);nTe=n(oBe,"STRONG",{});var PCt=s(nTe);BLr=r(PCt,"big_bird"),PCt.forEach(t),ILr=r(oBe," \u2014 "),AJ=n(oBe,"A",{href:!0});var BCt=s(AJ);qLr=r(BCt,"FlaxBigBirdForCausalLM"),BCt.forEach(t),NLr=r(oBe," (BigBird model)"),oBe.forEach(t),jLr=i(Xe),DE=n(Xe,"LI",{});var rBe=s(DE);sTe=n(rBe,"STRONG",{});var ICt=s(sTe);DLr=r(ICt,"electra"),ICt.forEach(t),GLr=r(rBe," \u2014 "),yJ=n(rBe,"A",{href:!0});var qCt=s(yJ);OLr=r(qCt,"FlaxElectraForCausalLM"),qCt.forEach(t),VLr=r(rBe," (ELECTRA model)"),rBe.forEach(t),XLr=i(Xe),GE=n(Xe,"LI",{});var tBe=s(GE);lTe=n(tBe,"STRONG",{});var NCt=s(lTe);zLr=r(NCt,"gpt2"),NCt.forEach(t),WLr=r(tBe," \u2014 "),LJ=n(tBe,"A",{href:!0});var jCt=s(LJ);QLr=r(jCt,"FlaxGPT2LMHeadModel"),jCt.forEach(t),HLr=r(tBe," (OpenAI GPT-2 model)"),tBe.forEach(t),ULr=i(Xe),OE=n(Xe,"LI",{});var aBe=s(OE);iTe=n(aBe,"STRONG",{});var DCt=s(iTe);JLr=r(DCt,"gpt_neo"),DCt.forEach(t),YLr=r(aBe," \u2014 "),xJ=n(aBe,"A",{href:!0});var GCt=s(xJ);KLr=r(GCt,"FlaxGPTNeoForCausalLM"),GCt.forEach(t),ZLr=r(aBe," (GPT Neo model)"),aBe.forEach(t),e8r=i(Xe),VE=n(Xe,"LI",{});var nBe=s(VE);dTe=n(nBe,"STRONG",{});var OCt=s(dTe);o8r=r(OCt,"gptj"),OCt.forEach(t),r8r=r(nBe," \u2014 "),$J=n(nBe,"A",{href:!0});var VCt=s($J);t8r=r(VCt,"FlaxGPTJForCausalLM"),VCt.forEach(t),a8r=r(nBe," (GPT-J model)"),nBe.forEach(t),n8r=i(Xe),XE=n(Xe,"LI",{});var sBe=s(XE);cTe=n(sBe,"STRONG",{});var XCt=s(cTe);s8r=r(XCt,"roberta"),XCt.forEach(t),l8r=r(sBe," \u2014 "),kJ=n(sBe,"A",{href:!0});var zCt=s(kJ);i8r=r(zCt,"FlaxRobertaForCausalLM"),zCt.forEach(t),d8r=r(sBe," (RoBERTa model)"),sBe.forEach(t),c8r=i(Xe),zE=n(Xe,"LI",{});var lBe=s(zE);fTe=n(lBe,"STRONG",{});var WCt=s(fTe);f8r=r(WCt,"xglm"),WCt.forEach(t),m8r=r(lBe," \u2014 "),SJ=n(lBe,"A",{href:!0});var QCt=s(SJ);g8r=r(QCt,"FlaxXGLMForCausalLM"),QCt.forEach(t),h8r=r(lBe," (XGLM model)"),lBe.forEach(t),Xe.forEach(t),p8r=i(Vl),T(WE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),iNe=i(f),Pc=n(f,"H2",{class:!0});var pDe=s(Pc);QE=n(pDe,"A",{id:!0,class:!0,href:!0});var HCt=s(QE);mTe=n(HCt,"SPAN",{});var UCt=s(mTe);T(px.$$.fragment,UCt),UCt.forEach(t),HCt.forEach(t),u8r=i(pDe),gTe=n(pDe,"SPAN",{});var JCt=s(gTe);_8r=r(JCt,"FlaxAutoModelForPreTraining"),JCt.forEach(t),pDe.forEach(t),dNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(ux.$$.fragment,Xl),b8r=i(Xl),Bc=n(Xl,"P",{});var KZ=s(Bc);v8r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=n(KZ,"A",{href:!0});var YCt=s(RJ);F8r=r(YCt,"from_pretrained()"),YCt.forEach(t),T8r=r(KZ," class method or the "),PJ=n(KZ,"A",{href:!0});var KCt=s(PJ);M8r=r(KCt,"from_config()"),KCt.forEach(t),E8r=r(KZ,` class
method.`),KZ.forEach(t),C8r=i(Xl),_x=n(Xl,"P",{});var uDe=s(_x);w8r=r(uDe,"This class cannot be instantiated directly using "),hTe=n(uDe,"CODE",{});var ZCt=s(hTe);A8r=r(ZCt,"__init__()"),ZCt.forEach(t),y8r=r(uDe," (throws an error)."),uDe.forEach(t),L8r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var qw=s(Vt);T(bx.$$.fragment,qw),x8r=i(qw),pTe=n(qw,"P",{});var e5t=s(pTe);$8r=r(e5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e5t.forEach(t),k8r=i(qw),Ic=n(qw,"P",{});var ZZ=s(Ic);S8r=r(ZZ,`Note:
Loading a model from its configuration file does `),uTe=n(ZZ,"STRONG",{});var o5t=s(uTe);R8r=r(o5t,"not"),o5t.forEach(t),P8r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(ZZ,"A",{href:!0});var r5t=s(BJ);B8r=r(r5t,"from_pretrained()"),r5t.forEach(t),I8r=r(ZZ," to load the model weights."),ZZ.forEach(t),q8r=i(qw),T(HE.$$.fragment,qw),qw.forEach(t),N8r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(vx.$$.fragment,zl),j8r=i(zl),_Te=n(zl,"P",{});var t5t=s(_Te);D8r=r(t5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t5t.forEach(t),G8r=i(zl),un=n(zl,"P",{});var Nw=s(un);O8r=r(Nw,"The model class to instantiate is selected based on the "),bTe=n(Nw,"CODE",{});var a5t=s(bTe);V8r=r(a5t,"model_type"),a5t.forEach(t),X8r=r(Nw,` property of the config object (either
passed as an argument or loaded from `),vTe=n(Nw,"CODE",{});var n5t=s(vTe);z8r=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),W8r=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(Nw,"CODE",{});var s5t=s(FTe);Q8r=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),H8r=r(Nw,":"),Nw.forEach(t),U8r=i(zl),Me=n(zl,"UL",{});var we=s(Me);UE=n(we,"LI",{});var iBe=s(UE);TTe=n(iBe,"STRONG",{});var l5t=s(TTe);J8r=r(l5t,"albert"),l5t.forEach(t),Y8r=r(iBe," \u2014 "),IJ=n(iBe,"A",{href:!0});var i5t=s(IJ);K8r=r(i5t,"FlaxAlbertForPreTraining"),i5t.forEach(t),Z8r=r(iBe," (ALBERT model)"),iBe.forEach(t),exr=i(we),JE=n(we,"LI",{});var dBe=s(JE);MTe=n(dBe,"STRONG",{});var d5t=s(MTe);oxr=r(d5t,"bart"),d5t.forEach(t),rxr=r(dBe," \u2014 "),qJ=n(dBe,"A",{href:!0});var c5t=s(qJ);txr=r(c5t,"FlaxBartForConditionalGeneration"),c5t.forEach(t),axr=r(dBe," (BART model)"),dBe.forEach(t),nxr=i(we),YE=n(we,"LI",{});var cBe=s(YE);ETe=n(cBe,"STRONG",{});var f5t=s(ETe);sxr=r(f5t,"bert"),f5t.forEach(t),lxr=r(cBe," \u2014 "),NJ=n(cBe,"A",{href:!0});var m5t=s(NJ);ixr=r(m5t,"FlaxBertForPreTraining"),m5t.forEach(t),dxr=r(cBe," (BERT model)"),cBe.forEach(t),cxr=i(we),KE=n(we,"LI",{});var fBe=s(KE);CTe=n(fBe,"STRONG",{});var g5t=s(CTe);fxr=r(g5t,"big_bird"),g5t.forEach(t),mxr=r(fBe," \u2014 "),jJ=n(fBe,"A",{href:!0});var h5t=s(jJ);gxr=r(h5t,"FlaxBigBirdForPreTraining"),h5t.forEach(t),hxr=r(fBe," (BigBird model)"),fBe.forEach(t),pxr=i(we),ZE=n(we,"LI",{});var mBe=s(ZE);wTe=n(mBe,"STRONG",{});var p5t=s(wTe);uxr=r(p5t,"electra"),p5t.forEach(t),_xr=r(mBe," \u2014 "),DJ=n(mBe,"A",{href:!0});var u5t=s(DJ);bxr=r(u5t,"FlaxElectraForPreTraining"),u5t.forEach(t),vxr=r(mBe," (ELECTRA model)"),mBe.forEach(t),Fxr=i(we),eC=n(we,"LI",{});var gBe=s(eC);ATe=n(gBe,"STRONG",{});var _5t=s(ATe);Txr=r(_5t,"mbart"),_5t.forEach(t),Mxr=r(gBe," \u2014 "),GJ=n(gBe,"A",{href:!0});var b5t=s(GJ);Exr=r(b5t,"FlaxMBartForConditionalGeneration"),b5t.forEach(t),Cxr=r(gBe," (mBART model)"),gBe.forEach(t),wxr=i(we),oC=n(we,"LI",{});var hBe=s(oC);yTe=n(hBe,"STRONG",{});var v5t=s(yTe);Axr=r(v5t,"mt5"),v5t.forEach(t),yxr=r(hBe," \u2014 "),OJ=n(hBe,"A",{href:!0});var F5t=s(OJ);Lxr=r(F5t,"FlaxMT5ForConditionalGeneration"),F5t.forEach(t),xxr=r(hBe," (mT5 model)"),hBe.forEach(t),$xr=i(we),rC=n(we,"LI",{});var pBe=s(rC);LTe=n(pBe,"STRONG",{});var T5t=s(LTe);kxr=r(T5t,"roberta"),T5t.forEach(t),Sxr=r(pBe," \u2014 "),VJ=n(pBe,"A",{href:!0});var M5t=s(VJ);Rxr=r(M5t,"FlaxRobertaForMaskedLM"),M5t.forEach(t),Pxr=r(pBe," (RoBERTa model)"),pBe.forEach(t),Bxr=i(we),tC=n(we,"LI",{});var uBe=s(tC);xTe=n(uBe,"STRONG",{});var E5t=s(xTe);Ixr=r(E5t,"roformer"),E5t.forEach(t),qxr=r(uBe," \u2014 "),XJ=n(uBe,"A",{href:!0});var C5t=s(XJ);Nxr=r(C5t,"FlaxRoFormerForMaskedLM"),C5t.forEach(t),jxr=r(uBe," (RoFormer model)"),uBe.forEach(t),Dxr=i(we),aC=n(we,"LI",{});var _Be=s(aC);$Te=n(_Be,"STRONG",{});var w5t=s($Te);Gxr=r(w5t,"t5"),w5t.forEach(t),Oxr=r(_Be," \u2014 "),zJ=n(_Be,"A",{href:!0});var A5t=s(zJ);Vxr=r(A5t,"FlaxT5ForConditionalGeneration"),A5t.forEach(t),Xxr=r(_Be," (T5 model)"),_Be.forEach(t),zxr=i(we),nC=n(we,"LI",{});var bBe=s(nC);kTe=n(bBe,"STRONG",{});var y5t=s(kTe);Wxr=r(y5t,"wav2vec2"),y5t.forEach(t),Qxr=r(bBe," \u2014 "),WJ=n(bBe,"A",{href:!0});var L5t=s(WJ);Hxr=r(L5t,"FlaxWav2Vec2ForPreTraining"),L5t.forEach(t),Uxr=r(bBe," (Wav2Vec2 model)"),bBe.forEach(t),Jxr=i(we),sC=n(we,"LI",{});var vBe=s(sC);STe=n(vBe,"STRONG",{});var x5t=s(STe);Yxr=r(x5t,"xlm-roberta"),x5t.forEach(t),Kxr=r(vBe," \u2014 "),QJ=n(vBe,"A",{href:!0});var $5t=s(QJ);Zxr=r($5t,"FlaxXLMRobertaForMaskedLM"),$5t.forEach(t),e9r=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),we.forEach(t),o9r=i(zl),T(lC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),cNe=i(f),qc=n(f,"H2",{class:!0});var _De=s(qc);iC=n(_De,"A",{id:!0,class:!0,href:!0});var k5t=s(iC);RTe=n(k5t,"SPAN",{});var S5t=s(RTe);T(Fx.$$.fragment,S5t),S5t.forEach(t),k5t.forEach(t),r9r=i(_De),PTe=n(_De,"SPAN",{});var R5t=s(PTe);t9r=r(R5t,"FlaxAutoModelForMaskedLM"),R5t.forEach(t),_De.forEach(t),fNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(Tx.$$.fragment,Wl),a9r=i(Wl),Nc=n(Wl,"P",{});var eee=s(Nc);n9r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HJ=n(eee,"A",{href:!0});var P5t=s(HJ);s9r=r(P5t,"from_pretrained()"),P5t.forEach(t),l9r=r(eee," class method or the "),UJ=n(eee,"A",{href:!0});var B5t=s(UJ);i9r=r(B5t,"from_config()"),B5t.forEach(t),d9r=r(eee,` class
method.`),eee.forEach(t),c9r=i(Wl),Mx=n(Wl,"P",{});var bDe=s(Mx);f9r=r(bDe,"This class cannot be instantiated directly using "),BTe=n(bDe,"CODE",{});var I5t=s(BTe);m9r=r(I5t,"__init__()"),I5t.forEach(t),g9r=r(bDe," (throws an error)."),bDe.forEach(t),h9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var jw=s(Xt);T(Ex.$$.fragment,jw),p9r=i(jw),ITe=n(jw,"P",{});var q5t=s(ITe);u9r=r(q5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),q5t.forEach(t),_9r=i(jw),jc=n(jw,"P",{});var oee=s(jc);b9r=r(oee,`Note:
Loading a model from its configuration file does `),qTe=n(oee,"STRONG",{});var N5t=s(qTe);v9r=r(N5t,"not"),N5t.forEach(t),F9r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(oee,"A",{href:!0});var j5t=s(JJ);T9r=r(j5t,"from_pretrained()"),j5t.forEach(t),M9r=r(oee," to load the model weights."),oee.forEach(t),E9r=i(jw),T(dC.$$.fragment,jw),jw.forEach(t),C9r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(Cx.$$.fragment,Ql),w9r=i(Ql),NTe=n(Ql,"P",{});var D5t=s(NTe);A9r=r(D5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D5t.forEach(t),y9r=i(Ql),_n=n(Ql,"P",{});var Dw=s(_n);L9r=r(Dw,"The model class to instantiate is selected based on the "),jTe=n(Dw,"CODE",{});var G5t=s(jTe);x9r=r(G5t,"model_type"),G5t.forEach(t),$9r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),DTe=n(Dw,"CODE",{});var O5t=s(DTe);k9r=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),S9r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(Dw,"CODE",{});var V5t=s(GTe);R9r=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),P9r=r(Dw,":"),Dw.forEach(t),B9r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);cC=n(Ie,"LI",{});var FBe=s(cC);OTe=n(FBe,"STRONG",{});var X5t=s(OTe);I9r=r(X5t,"albert"),X5t.forEach(t),q9r=r(FBe," \u2014 "),YJ=n(FBe,"A",{href:!0});var z5t=s(YJ);N9r=r(z5t,"FlaxAlbertForMaskedLM"),z5t.forEach(t),j9r=r(FBe," (ALBERT model)"),FBe.forEach(t),D9r=i(Ie),fC=n(Ie,"LI",{});var TBe=s(fC);VTe=n(TBe,"STRONG",{});var W5t=s(VTe);G9r=r(W5t,"bart"),W5t.forEach(t),O9r=r(TBe," \u2014 "),KJ=n(TBe,"A",{href:!0});var Q5t=s(KJ);V9r=r(Q5t,"FlaxBartForConditionalGeneration"),Q5t.forEach(t),X9r=r(TBe," (BART model)"),TBe.forEach(t),z9r=i(Ie),mC=n(Ie,"LI",{});var MBe=s(mC);XTe=n(MBe,"STRONG",{});var H5t=s(XTe);W9r=r(H5t,"bert"),H5t.forEach(t),Q9r=r(MBe," \u2014 "),ZJ=n(MBe,"A",{href:!0});var U5t=s(ZJ);H9r=r(U5t,"FlaxBertForMaskedLM"),U5t.forEach(t),U9r=r(MBe," (BERT model)"),MBe.forEach(t),J9r=i(Ie),gC=n(Ie,"LI",{});var EBe=s(gC);zTe=n(EBe,"STRONG",{});var J5t=s(zTe);Y9r=r(J5t,"big_bird"),J5t.forEach(t),K9r=r(EBe," \u2014 "),eY=n(EBe,"A",{href:!0});var Y5t=s(eY);Z9r=r(Y5t,"FlaxBigBirdForMaskedLM"),Y5t.forEach(t),e$r=r(EBe," (BigBird model)"),EBe.forEach(t),o$r=i(Ie),hC=n(Ie,"LI",{});var CBe=s(hC);WTe=n(CBe,"STRONG",{});var K5t=s(WTe);r$r=r(K5t,"distilbert"),K5t.forEach(t),t$r=r(CBe," \u2014 "),oY=n(CBe,"A",{href:!0});var Z5t=s(oY);a$r=r(Z5t,"FlaxDistilBertForMaskedLM"),Z5t.forEach(t),n$r=r(CBe," (DistilBERT model)"),CBe.forEach(t),s$r=i(Ie),pC=n(Ie,"LI",{});var wBe=s(pC);QTe=n(wBe,"STRONG",{});var e3t=s(QTe);l$r=r(e3t,"electra"),e3t.forEach(t),i$r=r(wBe," \u2014 "),rY=n(wBe,"A",{href:!0});var o3t=s(rY);d$r=r(o3t,"FlaxElectraForMaskedLM"),o3t.forEach(t),c$r=r(wBe," (ELECTRA model)"),wBe.forEach(t),f$r=i(Ie),uC=n(Ie,"LI",{});var ABe=s(uC);HTe=n(ABe,"STRONG",{});var r3t=s(HTe);m$r=r(r3t,"mbart"),r3t.forEach(t),g$r=r(ABe," \u2014 "),tY=n(ABe,"A",{href:!0});var t3t=s(tY);h$r=r(t3t,"FlaxMBartForConditionalGeneration"),t3t.forEach(t),p$r=r(ABe," (mBART model)"),ABe.forEach(t),u$r=i(Ie),_C=n(Ie,"LI",{});var yBe=s(_C);UTe=n(yBe,"STRONG",{});var a3t=s(UTe);_$r=r(a3t,"roberta"),a3t.forEach(t),b$r=r(yBe," \u2014 "),aY=n(yBe,"A",{href:!0});var n3t=s(aY);v$r=r(n3t,"FlaxRobertaForMaskedLM"),n3t.forEach(t),F$r=r(yBe," (RoBERTa model)"),yBe.forEach(t),T$r=i(Ie),bC=n(Ie,"LI",{});var LBe=s(bC);JTe=n(LBe,"STRONG",{});var s3t=s(JTe);M$r=r(s3t,"roformer"),s3t.forEach(t),E$r=r(LBe," \u2014 "),nY=n(LBe,"A",{href:!0});var l3t=s(nY);C$r=r(l3t,"FlaxRoFormerForMaskedLM"),l3t.forEach(t),w$r=r(LBe," (RoFormer model)"),LBe.forEach(t),A$r=i(Ie),vC=n(Ie,"LI",{});var xBe=s(vC);YTe=n(xBe,"STRONG",{});var i3t=s(YTe);y$r=r(i3t,"xlm-roberta"),i3t.forEach(t),L$r=r(xBe," \u2014 "),sY=n(xBe,"A",{href:!0});var d3t=s(sY);x$r=r(d3t,"FlaxXLMRobertaForMaskedLM"),d3t.forEach(t),$$r=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),Ie.forEach(t),k$r=i(Ql),T(FC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),mNe=i(f),Dc=n(f,"H2",{class:!0});var vDe=s(Dc);TC=n(vDe,"A",{id:!0,class:!0,href:!0});var c3t=s(TC);KTe=n(c3t,"SPAN",{});var f3t=s(KTe);T(wx.$$.fragment,f3t),f3t.forEach(t),c3t.forEach(t),S$r=i(vDe),ZTe=n(vDe,"SPAN",{});var m3t=s(ZTe);R$r=r(m3t,"FlaxAutoModelForSeq2SeqLM"),m3t.forEach(t),vDe.forEach(t),gNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(Ax.$$.fragment,Hl),P$r=i(Hl),Gc=n(Hl,"P",{});var ree=s(Gc);B$r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lY=n(ree,"A",{href:!0});var g3t=s(lY);I$r=r(g3t,"from_pretrained()"),g3t.forEach(t),q$r=r(ree," class method or the "),iY=n(ree,"A",{href:!0});var h3t=s(iY);N$r=r(h3t,"from_config()"),h3t.forEach(t),j$r=r(ree,` class
method.`),ree.forEach(t),D$r=i(Hl),yx=n(Hl,"P",{});var FDe=s(yx);G$r=r(FDe,"This class cannot be instantiated directly using "),e7e=n(FDe,"CODE",{});var p3t=s(e7e);O$r=r(p3t,"__init__()"),p3t.forEach(t),V$r=r(FDe," (throws an error)."),FDe.forEach(t),X$r=i(Hl),zt=n(Hl,"DIV",{class:!0});var Gw=s(zt);T(Lx.$$.fragment,Gw),z$r=i(Gw),o7e=n(Gw,"P",{});var u3t=s(o7e);W$r=r(u3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),u3t.forEach(t),Q$r=i(Gw),Oc=n(Gw,"P",{});var tee=s(Oc);H$r=r(tee,`Note:
Loading a model from its configuration file does `),r7e=n(tee,"STRONG",{});var _3t=s(r7e);U$r=r(_3t,"not"),_3t.forEach(t),J$r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(tee,"A",{href:!0});var b3t=s(dY);Y$r=r(b3t,"from_pretrained()"),b3t.forEach(t),K$r=r(tee," to load the model weights."),tee.forEach(t),Z$r=i(Gw),T(MC.$$.fragment,Gw),Gw.forEach(t),ekr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(xx.$$.fragment,Ul),okr=i(Ul),t7e=n(Ul,"P",{});var v3t=s(t7e);rkr=r(v3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v3t.forEach(t),tkr=i(Ul),bn=n(Ul,"P",{});var Ow=s(bn);akr=r(Ow,"The model class to instantiate is selected based on the "),a7e=n(Ow,"CODE",{});var F3t=s(a7e);nkr=r(F3t,"model_type"),F3t.forEach(t),skr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),n7e=n(Ow,"CODE",{});var T3t=s(n7e);lkr=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),ikr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(Ow,"CODE",{});var M3t=s(s7e);dkr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),ckr=r(Ow,":"),Ow.forEach(t),fkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);EC=n(ze,"LI",{});var $Be=s(EC);l7e=n($Be,"STRONG",{});var E3t=s(l7e);mkr=r(E3t,"bart"),E3t.forEach(t),gkr=r($Be," \u2014 "),cY=n($Be,"A",{href:!0});var C3t=s(cY);hkr=r(C3t,"FlaxBartForConditionalGeneration"),C3t.forEach(t),pkr=r($Be," (BART model)"),$Be.forEach(t),ukr=i(ze),CC=n(ze,"LI",{});var kBe=s(CC);i7e=n(kBe,"STRONG",{});var w3t=s(i7e);_kr=r(w3t,"blenderbot"),w3t.forEach(t),bkr=r(kBe," \u2014 "),fY=n(kBe,"A",{href:!0});var A3t=s(fY);vkr=r(A3t,"FlaxBlenderbotForConditionalGeneration"),A3t.forEach(t),Fkr=r(kBe," (Blenderbot model)"),kBe.forEach(t),Tkr=i(ze),wC=n(ze,"LI",{});var SBe=s(wC);d7e=n(SBe,"STRONG",{});var y3t=s(d7e);Mkr=r(y3t,"blenderbot-small"),y3t.forEach(t),Ekr=r(SBe," \u2014 "),mY=n(SBe,"A",{href:!0});var L3t=s(mY);Ckr=r(L3t,"FlaxBlenderbotSmallForConditionalGeneration"),L3t.forEach(t),wkr=r(SBe," (BlenderbotSmall model)"),SBe.forEach(t),Akr=i(ze),AC=n(ze,"LI",{});var RBe=s(AC);c7e=n(RBe,"STRONG",{});var x3t=s(c7e);ykr=r(x3t,"encoder-decoder"),x3t.forEach(t),Lkr=r(RBe," \u2014 "),gY=n(RBe,"A",{href:!0});var $3t=s(gY);xkr=r($3t,"FlaxEncoderDecoderModel"),$3t.forEach(t),$kr=r(RBe," (Encoder decoder model)"),RBe.forEach(t),kkr=i(ze),yC=n(ze,"LI",{});var PBe=s(yC);f7e=n(PBe,"STRONG",{});var k3t=s(f7e);Skr=r(k3t,"marian"),k3t.forEach(t),Rkr=r(PBe," \u2014 "),hY=n(PBe,"A",{href:!0});var S3t=s(hY);Pkr=r(S3t,"FlaxMarianMTModel"),S3t.forEach(t),Bkr=r(PBe," (Marian model)"),PBe.forEach(t),Ikr=i(ze),LC=n(ze,"LI",{});var BBe=s(LC);m7e=n(BBe,"STRONG",{});var R3t=s(m7e);qkr=r(R3t,"mbart"),R3t.forEach(t),Nkr=r(BBe," \u2014 "),pY=n(BBe,"A",{href:!0});var P3t=s(pY);jkr=r(P3t,"FlaxMBartForConditionalGeneration"),P3t.forEach(t),Dkr=r(BBe," (mBART model)"),BBe.forEach(t),Gkr=i(ze),xC=n(ze,"LI",{});var IBe=s(xC);g7e=n(IBe,"STRONG",{});var B3t=s(g7e);Okr=r(B3t,"mt5"),B3t.forEach(t),Vkr=r(IBe," \u2014 "),uY=n(IBe,"A",{href:!0});var I3t=s(uY);Xkr=r(I3t,"FlaxMT5ForConditionalGeneration"),I3t.forEach(t),zkr=r(IBe," (mT5 model)"),IBe.forEach(t),Wkr=i(ze),$C=n(ze,"LI",{});var qBe=s($C);h7e=n(qBe,"STRONG",{});var q3t=s(h7e);Qkr=r(q3t,"pegasus"),q3t.forEach(t),Hkr=r(qBe," \u2014 "),_Y=n(qBe,"A",{href:!0});var N3t=s(_Y);Ukr=r(N3t,"FlaxPegasusForConditionalGeneration"),N3t.forEach(t),Jkr=r(qBe," (Pegasus model)"),qBe.forEach(t),Ykr=i(ze),kC=n(ze,"LI",{});var NBe=s(kC);p7e=n(NBe,"STRONG",{});var j3t=s(p7e);Kkr=r(j3t,"t5"),j3t.forEach(t),Zkr=r(NBe," \u2014 "),bY=n(NBe,"A",{href:!0});var D3t=s(bY);eSr=r(D3t,"FlaxT5ForConditionalGeneration"),D3t.forEach(t),oSr=r(NBe," (T5 model)"),NBe.forEach(t),ze.forEach(t),rSr=i(Ul),T(SC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),hNe=i(f),Vc=n(f,"H2",{class:!0});var TDe=s(Vc);RC=n(TDe,"A",{id:!0,class:!0,href:!0});var G3t=s(RC);u7e=n(G3t,"SPAN",{});var O3t=s(u7e);T($x.$$.fragment,O3t),O3t.forEach(t),G3t.forEach(t),tSr=i(TDe),_7e=n(TDe,"SPAN",{});var V3t=s(_7e);aSr=r(V3t,"FlaxAutoModelForSequenceClassification"),V3t.forEach(t),TDe.forEach(t),pNe=i(f),ur=n(f,"DIV",{class:!0});var Jl=s(ur);T(kx.$$.fragment,Jl),nSr=i(Jl),Xc=n(Jl,"P",{});var aee=s(Xc);sSr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vY=n(aee,"A",{href:!0});var X3t=s(vY);lSr=r(X3t,"from_pretrained()"),X3t.forEach(t),iSr=r(aee," class method or the "),FY=n(aee,"A",{href:!0});var z3t=s(FY);dSr=r(z3t,"from_config()"),z3t.forEach(t),cSr=r(aee,` class
method.`),aee.forEach(t),fSr=i(Jl),Sx=n(Jl,"P",{});var MDe=s(Sx);mSr=r(MDe,"This class cannot be instantiated directly using "),b7e=n(MDe,"CODE",{});var W3t=s(b7e);gSr=r(W3t,"__init__()"),W3t.forEach(t),hSr=r(MDe," (throws an error)."),MDe.forEach(t),pSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var Vw=s(Wt);T(Rx.$$.fragment,Vw),uSr=i(Vw),v7e=n(Vw,"P",{});var Q3t=s(v7e);_Sr=r(Q3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q3t.forEach(t),bSr=i(Vw),zc=n(Vw,"P",{});var nee=s(zc);vSr=r(nee,`Note:
Loading a model from its configuration file does `),F7e=n(nee,"STRONG",{});var H3t=s(F7e);FSr=r(H3t,"not"),H3t.forEach(t),TSr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(nee,"A",{href:!0});var U3t=s(TY);MSr=r(U3t,"from_pretrained()"),U3t.forEach(t),ESr=r(nee," to load the model weights."),nee.forEach(t),CSr=i(Vw),T(PC.$$.fragment,Vw),Vw.forEach(t),wSr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(Px.$$.fragment,Yl),ASr=i(Yl),T7e=n(Yl,"P",{});var J3t=s(T7e);ySr=r(J3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),J3t.forEach(t),LSr=i(Yl),vn=n(Yl,"P",{});var Xw=s(vn);xSr=r(Xw,"The model class to instantiate is selected based on the "),M7e=n(Xw,"CODE",{});var Y3t=s(M7e);$Sr=r(Y3t,"model_type"),Y3t.forEach(t),kSr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),E7e=n(Xw,"CODE",{});var K3t=s(E7e);SSr=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),RSr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(Xw,"CODE",{});var Z3t=s(C7e);PSr=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),BSr=r(Xw,":"),Xw.forEach(t),ISr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);BC=n(qe,"LI",{});var jBe=s(BC);w7e=n(jBe,"STRONG",{});var ewt=s(w7e);qSr=r(ewt,"albert"),ewt.forEach(t),NSr=r(jBe," \u2014 "),MY=n(jBe,"A",{href:!0});var owt=s(MY);jSr=r(owt,"FlaxAlbertForSequenceClassification"),owt.forEach(t),DSr=r(jBe," (ALBERT model)"),jBe.forEach(t),GSr=i(qe),IC=n(qe,"LI",{});var DBe=s(IC);A7e=n(DBe,"STRONG",{});var rwt=s(A7e);OSr=r(rwt,"bart"),rwt.forEach(t),VSr=r(DBe," \u2014 "),EY=n(DBe,"A",{href:!0});var twt=s(EY);XSr=r(twt,"FlaxBartForSequenceClassification"),twt.forEach(t),zSr=r(DBe," (BART model)"),DBe.forEach(t),WSr=i(qe),qC=n(qe,"LI",{});var GBe=s(qC);y7e=n(GBe,"STRONG",{});var awt=s(y7e);QSr=r(awt,"bert"),awt.forEach(t),HSr=r(GBe," \u2014 "),CY=n(GBe,"A",{href:!0});var nwt=s(CY);USr=r(nwt,"FlaxBertForSequenceClassification"),nwt.forEach(t),JSr=r(GBe," (BERT model)"),GBe.forEach(t),YSr=i(qe),NC=n(qe,"LI",{});var OBe=s(NC);L7e=n(OBe,"STRONG",{});var swt=s(L7e);KSr=r(swt,"big_bird"),swt.forEach(t),ZSr=r(OBe," \u2014 "),wY=n(OBe,"A",{href:!0});var lwt=s(wY);eRr=r(lwt,"FlaxBigBirdForSequenceClassification"),lwt.forEach(t),oRr=r(OBe," (BigBird model)"),OBe.forEach(t),rRr=i(qe),jC=n(qe,"LI",{});var VBe=s(jC);x7e=n(VBe,"STRONG",{});var iwt=s(x7e);tRr=r(iwt,"distilbert"),iwt.forEach(t),aRr=r(VBe," \u2014 "),AY=n(VBe,"A",{href:!0});var dwt=s(AY);nRr=r(dwt,"FlaxDistilBertForSequenceClassification"),dwt.forEach(t),sRr=r(VBe," (DistilBERT model)"),VBe.forEach(t),lRr=i(qe),DC=n(qe,"LI",{});var XBe=s(DC);$7e=n(XBe,"STRONG",{});var cwt=s($7e);iRr=r(cwt,"electra"),cwt.forEach(t),dRr=r(XBe," \u2014 "),yY=n(XBe,"A",{href:!0});var fwt=s(yY);cRr=r(fwt,"FlaxElectraForSequenceClassification"),fwt.forEach(t),fRr=r(XBe," (ELECTRA model)"),XBe.forEach(t),mRr=i(qe),GC=n(qe,"LI",{});var zBe=s(GC);k7e=n(zBe,"STRONG",{});var mwt=s(k7e);gRr=r(mwt,"mbart"),mwt.forEach(t),hRr=r(zBe," \u2014 "),LY=n(zBe,"A",{href:!0});var gwt=s(LY);pRr=r(gwt,"FlaxMBartForSequenceClassification"),gwt.forEach(t),uRr=r(zBe," (mBART model)"),zBe.forEach(t),_Rr=i(qe),OC=n(qe,"LI",{});var WBe=s(OC);S7e=n(WBe,"STRONG",{});var hwt=s(S7e);bRr=r(hwt,"roberta"),hwt.forEach(t),vRr=r(WBe," \u2014 "),xY=n(WBe,"A",{href:!0});var pwt=s(xY);FRr=r(pwt,"FlaxRobertaForSequenceClassification"),pwt.forEach(t),TRr=r(WBe," (RoBERTa model)"),WBe.forEach(t),MRr=i(qe),VC=n(qe,"LI",{});var QBe=s(VC);R7e=n(QBe,"STRONG",{});var uwt=s(R7e);ERr=r(uwt,"roformer"),uwt.forEach(t),CRr=r(QBe," \u2014 "),$Y=n(QBe,"A",{href:!0});var _wt=s($Y);wRr=r(_wt,"FlaxRoFormerForSequenceClassification"),_wt.forEach(t),ARr=r(QBe," (RoFormer model)"),QBe.forEach(t),yRr=i(qe),XC=n(qe,"LI",{});var HBe=s(XC);P7e=n(HBe,"STRONG",{});var bwt=s(P7e);LRr=r(bwt,"xlm-roberta"),bwt.forEach(t),xRr=r(HBe," \u2014 "),kY=n(HBe,"A",{href:!0});var vwt=s(kY);$Rr=r(vwt,"FlaxXLMRobertaForSequenceClassification"),vwt.forEach(t),kRr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),qe.forEach(t),SRr=i(Yl),T(zC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),uNe=i(f),Wc=n(f,"H2",{class:!0});var EDe=s(Wc);WC=n(EDe,"A",{id:!0,class:!0,href:!0});var Fwt=s(WC);B7e=n(Fwt,"SPAN",{});var Twt=s(B7e);T(Bx.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),RRr=i(EDe),I7e=n(EDe,"SPAN",{});var Mwt=s(I7e);PRr=r(Mwt,"FlaxAutoModelForQuestionAnswering"),Mwt.forEach(t),EDe.forEach(t),_Ne=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(Ix.$$.fragment,Kl),BRr=i(Kl),Qc=n(Kl,"P",{});var see=s(Qc);IRr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SY=n(see,"A",{href:!0});var Ewt=s(SY);qRr=r(Ewt,"from_pretrained()"),Ewt.forEach(t),NRr=r(see," class method or the "),RY=n(see,"A",{href:!0});var Cwt=s(RY);jRr=r(Cwt,"from_config()"),Cwt.forEach(t),DRr=r(see,` class
method.`),see.forEach(t),GRr=i(Kl),qx=n(Kl,"P",{});var CDe=s(qx);ORr=r(CDe,"This class cannot be instantiated directly using "),q7e=n(CDe,"CODE",{});var wwt=s(q7e);VRr=r(wwt,"__init__()"),wwt.forEach(t),XRr=r(CDe," (throws an error)."),CDe.forEach(t),zRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var zw=s(Qt);T(Nx.$$.fragment,zw),WRr=i(zw),N7e=n(zw,"P",{});var Awt=s(N7e);QRr=r(Awt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Awt.forEach(t),HRr=i(zw),Hc=n(zw,"P",{});var lee=s(Hc);URr=r(lee,`Note:
Loading a model from its configuration file does `),j7e=n(lee,"STRONG",{});var ywt=s(j7e);JRr=r(ywt,"not"),ywt.forEach(t),YRr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(lee,"A",{href:!0});var Lwt=s(PY);KRr=r(Lwt,"from_pretrained()"),Lwt.forEach(t),ZRr=r(lee," to load the model weights."),lee.forEach(t),ePr=i(zw),T(QC.$$.fragment,zw),zw.forEach(t),oPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(jx.$$.fragment,Zl),rPr=i(Zl),D7e=n(Zl,"P",{});var xwt=s(D7e);tPr=r(xwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xwt.forEach(t),aPr=i(Zl),Fn=n(Zl,"P",{});var Ww=s(Fn);nPr=r(Ww,"The model class to instantiate is selected based on the "),G7e=n(Ww,"CODE",{});var $wt=s(G7e);sPr=r($wt,"model_type"),$wt.forEach(t),lPr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),O7e=n(Ww,"CODE",{});var kwt=s(O7e);iPr=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),dPr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(Ww,"CODE",{});var Swt=s(V7e);cPr=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),fPr=r(Ww,":"),Ww.forEach(t),mPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);HC=n(Ne,"LI",{});var UBe=s(HC);X7e=n(UBe,"STRONG",{});var Rwt=s(X7e);gPr=r(Rwt,"albert"),Rwt.forEach(t),hPr=r(UBe," \u2014 "),BY=n(UBe,"A",{href:!0});var Pwt=s(BY);pPr=r(Pwt,"FlaxAlbertForQuestionAnswering"),Pwt.forEach(t),uPr=r(UBe," (ALBERT model)"),UBe.forEach(t),_Pr=i(Ne),UC=n(Ne,"LI",{});var JBe=s(UC);z7e=n(JBe,"STRONG",{});var Bwt=s(z7e);bPr=r(Bwt,"bart"),Bwt.forEach(t),vPr=r(JBe," \u2014 "),IY=n(JBe,"A",{href:!0});var Iwt=s(IY);FPr=r(Iwt,"FlaxBartForQuestionAnswering"),Iwt.forEach(t),TPr=r(JBe," (BART model)"),JBe.forEach(t),MPr=i(Ne),JC=n(Ne,"LI",{});var YBe=s(JC);W7e=n(YBe,"STRONG",{});var qwt=s(W7e);EPr=r(qwt,"bert"),qwt.forEach(t),CPr=r(YBe," \u2014 "),qY=n(YBe,"A",{href:!0});var Nwt=s(qY);wPr=r(Nwt,"FlaxBertForQuestionAnswering"),Nwt.forEach(t),APr=r(YBe," (BERT model)"),YBe.forEach(t),yPr=i(Ne),YC=n(Ne,"LI",{});var KBe=s(YC);Q7e=n(KBe,"STRONG",{});var jwt=s(Q7e);LPr=r(jwt,"big_bird"),jwt.forEach(t),xPr=r(KBe," \u2014 "),NY=n(KBe,"A",{href:!0});var Dwt=s(NY);$Pr=r(Dwt,"FlaxBigBirdForQuestionAnswering"),Dwt.forEach(t),kPr=r(KBe," (BigBird model)"),KBe.forEach(t),SPr=i(Ne),KC=n(Ne,"LI",{});var ZBe=s(KC);H7e=n(ZBe,"STRONG",{});var Gwt=s(H7e);RPr=r(Gwt,"distilbert"),Gwt.forEach(t),PPr=r(ZBe," \u2014 "),jY=n(ZBe,"A",{href:!0});var Owt=s(jY);BPr=r(Owt,"FlaxDistilBertForQuestionAnswering"),Owt.forEach(t),IPr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),qPr=i(Ne),ZC=n(Ne,"LI",{});var eIe=s(ZC);U7e=n(eIe,"STRONG",{});var Vwt=s(U7e);NPr=r(Vwt,"electra"),Vwt.forEach(t),jPr=r(eIe," \u2014 "),DY=n(eIe,"A",{href:!0});var Xwt=s(DY);DPr=r(Xwt,"FlaxElectraForQuestionAnswering"),Xwt.forEach(t),GPr=r(eIe," (ELECTRA model)"),eIe.forEach(t),OPr=i(Ne),e5=n(Ne,"LI",{});var oIe=s(e5);J7e=n(oIe,"STRONG",{});var zwt=s(J7e);VPr=r(zwt,"mbart"),zwt.forEach(t),XPr=r(oIe," \u2014 "),GY=n(oIe,"A",{href:!0});var Wwt=s(GY);zPr=r(Wwt,"FlaxMBartForQuestionAnswering"),Wwt.forEach(t),WPr=r(oIe," (mBART model)"),oIe.forEach(t),QPr=i(Ne),o5=n(Ne,"LI",{});var rIe=s(o5);Y7e=n(rIe,"STRONG",{});var Qwt=s(Y7e);HPr=r(Qwt,"roberta"),Qwt.forEach(t),UPr=r(rIe," \u2014 "),OY=n(rIe,"A",{href:!0});var Hwt=s(OY);JPr=r(Hwt,"FlaxRobertaForQuestionAnswering"),Hwt.forEach(t),YPr=r(rIe," (RoBERTa model)"),rIe.forEach(t),KPr=i(Ne),r5=n(Ne,"LI",{});var tIe=s(r5);K7e=n(tIe,"STRONG",{});var Uwt=s(K7e);ZPr=r(Uwt,"roformer"),Uwt.forEach(t),eBr=r(tIe," \u2014 "),VY=n(tIe,"A",{href:!0});var Jwt=s(VY);oBr=r(Jwt,"FlaxRoFormerForQuestionAnswering"),Jwt.forEach(t),rBr=r(tIe," (RoFormer model)"),tIe.forEach(t),tBr=i(Ne),t5=n(Ne,"LI",{});var aIe=s(t5);Z7e=n(aIe,"STRONG",{});var Ywt=s(Z7e);aBr=r(Ywt,"xlm-roberta"),Ywt.forEach(t),nBr=r(aIe," \u2014 "),XY=n(aIe,"A",{href:!0});var Kwt=s(XY);sBr=r(Kwt,"FlaxXLMRobertaForQuestionAnswering"),Kwt.forEach(t),lBr=r(aIe," (XLM-RoBERTa model)"),aIe.forEach(t),Ne.forEach(t),iBr=i(Zl),T(a5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),bNe=i(f),Uc=n(f,"H2",{class:!0});var wDe=s(Uc);n5=n(wDe,"A",{id:!0,class:!0,href:!0});var Zwt=s(n5);eMe=n(Zwt,"SPAN",{});var eAt=s(eMe);T(Dx.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),dBr=i(wDe),oMe=n(wDe,"SPAN",{});var oAt=s(oMe);cBr=r(oAt,"FlaxAutoModelForTokenClassification"),oAt.forEach(t),wDe.forEach(t),vNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(Gx.$$.fragment,ei),fBr=i(ei),Jc=n(ei,"P",{});var iee=s(Jc);mBr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zY=n(iee,"A",{href:!0});var rAt=s(zY);gBr=r(rAt,"from_pretrained()"),rAt.forEach(t),hBr=r(iee," class method or the "),WY=n(iee,"A",{href:!0});var tAt=s(WY);pBr=r(tAt,"from_config()"),tAt.forEach(t),uBr=r(iee,` class
method.`),iee.forEach(t),_Br=i(ei),Ox=n(ei,"P",{});var ADe=s(Ox);bBr=r(ADe,"This class cannot be instantiated directly using "),rMe=n(ADe,"CODE",{});var aAt=s(rMe);vBr=r(aAt,"__init__()"),aAt.forEach(t),FBr=r(ADe," (throws an error)."),ADe.forEach(t),TBr=i(ei),Ht=n(ei,"DIV",{class:!0});var Qw=s(Ht);T(Vx.$$.fragment,Qw),MBr=i(Qw),tMe=n(Qw,"P",{});var nAt=s(tMe);EBr=r(nAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nAt.forEach(t),CBr=i(Qw),Yc=n(Qw,"P",{});var dee=s(Yc);wBr=r(dee,`Note:
Loading a model from its configuration file does `),aMe=n(dee,"STRONG",{});var sAt=s(aMe);ABr=r(sAt,"not"),sAt.forEach(t),yBr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(dee,"A",{href:!0});var lAt=s(QY);LBr=r(lAt,"from_pretrained()"),lAt.forEach(t),xBr=r(dee," to load the model weights."),dee.forEach(t),$Br=i(Qw),T(s5.$$.fragment,Qw),Qw.forEach(t),kBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Xx.$$.fragment,oi),SBr=i(oi),nMe=n(oi,"P",{});var iAt=s(nMe);RBr=r(iAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iAt.forEach(t),PBr=i(oi),Tn=n(oi,"P",{});var Hw=s(Tn);BBr=r(Hw,"The model class to instantiate is selected based on the "),sMe=n(Hw,"CODE",{});var dAt=s(sMe);IBr=r(dAt,"model_type"),dAt.forEach(t),qBr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),lMe=n(Hw,"CODE",{});var cAt=s(lMe);NBr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),jBr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(Hw,"CODE",{});var fAt=s(iMe);DBr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),GBr=r(Hw,":"),Hw.forEach(t),OBr=i(oi),De=n(oi,"UL",{});var Fo=s(De);l5=n(Fo,"LI",{});var nIe=s(l5);dMe=n(nIe,"STRONG",{});var mAt=s(dMe);VBr=r(mAt,"albert"),mAt.forEach(t),XBr=r(nIe," \u2014 "),HY=n(nIe,"A",{href:!0});var gAt=s(HY);zBr=r(gAt,"FlaxAlbertForTokenClassification"),gAt.forEach(t),WBr=r(nIe," (ALBERT model)"),nIe.forEach(t),QBr=i(Fo),i5=n(Fo,"LI",{});var sIe=s(i5);cMe=n(sIe,"STRONG",{});var hAt=s(cMe);HBr=r(hAt,"bert"),hAt.forEach(t),UBr=r(sIe," \u2014 "),UY=n(sIe,"A",{href:!0});var pAt=s(UY);JBr=r(pAt,"FlaxBertForTokenClassification"),pAt.forEach(t),YBr=r(sIe," (BERT model)"),sIe.forEach(t),KBr=i(Fo),d5=n(Fo,"LI",{});var lIe=s(d5);fMe=n(lIe,"STRONG",{});var uAt=s(fMe);ZBr=r(uAt,"big_bird"),uAt.forEach(t),eIr=r(lIe," \u2014 "),JY=n(lIe,"A",{href:!0});var _At=s(JY);oIr=r(_At,"FlaxBigBirdForTokenClassification"),_At.forEach(t),rIr=r(lIe," (BigBird model)"),lIe.forEach(t),tIr=i(Fo),c5=n(Fo,"LI",{});var iIe=s(c5);mMe=n(iIe,"STRONG",{});var bAt=s(mMe);aIr=r(bAt,"distilbert"),bAt.forEach(t),nIr=r(iIe," \u2014 "),YY=n(iIe,"A",{href:!0});var vAt=s(YY);sIr=r(vAt,"FlaxDistilBertForTokenClassification"),vAt.forEach(t),lIr=r(iIe," (DistilBERT model)"),iIe.forEach(t),iIr=i(Fo),f5=n(Fo,"LI",{});var dIe=s(f5);gMe=n(dIe,"STRONG",{});var FAt=s(gMe);dIr=r(FAt,"electra"),FAt.forEach(t),cIr=r(dIe," \u2014 "),KY=n(dIe,"A",{href:!0});var TAt=s(KY);fIr=r(TAt,"FlaxElectraForTokenClassification"),TAt.forEach(t),mIr=r(dIe," (ELECTRA model)"),dIe.forEach(t),gIr=i(Fo),m5=n(Fo,"LI",{});var cIe=s(m5);hMe=n(cIe,"STRONG",{});var MAt=s(hMe);hIr=r(MAt,"roberta"),MAt.forEach(t),pIr=r(cIe," \u2014 "),ZY=n(cIe,"A",{href:!0});var EAt=s(ZY);uIr=r(EAt,"FlaxRobertaForTokenClassification"),EAt.forEach(t),_Ir=r(cIe," (RoBERTa model)"),cIe.forEach(t),bIr=i(Fo),g5=n(Fo,"LI",{});var fIe=s(g5);pMe=n(fIe,"STRONG",{});var CAt=s(pMe);vIr=r(CAt,"roformer"),CAt.forEach(t),FIr=r(fIe," \u2014 "),eK=n(fIe,"A",{href:!0});var wAt=s(eK);TIr=r(wAt,"FlaxRoFormerForTokenClassification"),wAt.forEach(t),MIr=r(fIe," (RoFormer model)"),fIe.forEach(t),EIr=i(Fo),h5=n(Fo,"LI",{});var mIe=s(h5);uMe=n(mIe,"STRONG",{});var AAt=s(uMe);CIr=r(AAt,"xlm-roberta"),AAt.forEach(t),wIr=r(mIe," \u2014 "),oK=n(mIe,"A",{href:!0});var yAt=s(oK);AIr=r(yAt,"FlaxXLMRobertaForTokenClassification"),yAt.forEach(t),yIr=r(mIe," (XLM-RoBERTa model)"),mIe.forEach(t),Fo.forEach(t),LIr=i(oi),T(p5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),FNe=i(f),Kc=n(f,"H2",{class:!0});var yDe=s(Kc);u5=n(yDe,"A",{id:!0,class:!0,href:!0});var LAt=s(u5);_Me=n(LAt,"SPAN",{});var xAt=s(_Me);T(zx.$$.fragment,xAt),xAt.forEach(t),LAt.forEach(t),xIr=i(yDe),bMe=n(yDe,"SPAN",{});var $At=s(bMe);$Ir=r($At,"FlaxAutoModelForMultipleChoice"),$At.forEach(t),yDe.forEach(t),TNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Wx.$$.fragment,ri),kIr=i(ri),Zc=n(ri,"P",{});var cee=s(Zc);SIr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rK=n(cee,"A",{href:!0});var kAt=s(rK);RIr=r(kAt,"from_pretrained()"),kAt.forEach(t),PIr=r(cee," class method or the "),tK=n(cee,"A",{href:!0});var SAt=s(tK);BIr=r(SAt,"from_config()"),SAt.forEach(t),IIr=r(cee,` class
method.`),cee.forEach(t),qIr=i(ri),Qx=n(ri,"P",{});var LDe=s(Qx);NIr=r(LDe,"This class cannot be instantiated directly using "),vMe=n(LDe,"CODE",{});var RAt=s(vMe);jIr=r(RAt,"__init__()"),RAt.forEach(t),DIr=r(LDe," (throws an error)."),LDe.forEach(t),GIr=i(ri),Ut=n(ri,"DIV",{class:!0});var Uw=s(Ut);T(Hx.$$.fragment,Uw),OIr=i(Uw),FMe=n(Uw,"P",{});var PAt=s(FMe);VIr=r(PAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PAt.forEach(t),XIr=i(Uw),ef=n(Uw,"P",{});var fee=s(ef);zIr=r(fee,`Note:
Loading a model from its configuration file does `),TMe=n(fee,"STRONG",{});var BAt=s(TMe);WIr=r(BAt,"not"),BAt.forEach(t),QIr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(fee,"A",{href:!0});var IAt=s(aK);HIr=r(IAt,"from_pretrained()"),IAt.forEach(t),UIr=r(fee," to load the model weights."),fee.forEach(t),JIr=i(Uw),T(_5.$$.fragment,Uw),Uw.forEach(t),YIr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(Ux.$$.fragment,ti),KIr=i(ti),MMe=n(ti,"P",{});var qAt=s(MMe);ZIr=r(qAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qAt.forEach(t),eqr=i(ti),Mn=n(ti,"P",{});var Jw=s(Mn);oqr=r(Jw,"The model class to instantiate is selected based on the "),EMe=n(Jw,"CODE",{});var NAt=s(EMe);rqr=r(NAt,"model_type"),NAt.forEach(t),tqr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),CMe=n(Jw,"CODE",{});var jAt=s(CMe);aqr=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),nqr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(Jw,"CODE",{});var DAt=s(wMe);sqr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),lqr=r(Jw,":"),Jw.forEach(t),iqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);b5=n(To,"LI",{});var gIe=s(b5);AMe=n(gIe,"STRONG",{});var GAt=s(AMe);dqr=r(GAt,"albert"),GAt.forEach(t),cqr=r(gIe," \u2014 "),nK=n(gIe,"A",{href:!0});var OAt=s(nK);fqr=r(OAt,"FlaxAlbertForMultipleChoice"),OAt.forEach(t),mqr=r(gIe," (ALBERT model)"),gIe.forEach(t),gqr=i(To),v5=n(To,"LI",{});var hIe=s(v5);yMe=n(hIe,"STRONG",{});var VAt=s(yMe);hqr=r(VAt,"bert"),VAt.forEach(t),pqr=r(hIe," \u2014 "),sK=n(hIe,"A",{href:!0});var XAt=s(sK);uqr=r(XAt,"FlaxBertForMultipleChoice"),XAt.forEach(t),_qr=r(hIe," (BERT model)"),hIe.forEach(t),bqr=i(To),F5=n(To,"LI",{});var pIe=s(F5);LMe=n(pIe,"STRONG",{});var zAt=s(LMe);vqr=r(zAt,"big_bird"),zAt.forEach(t),Fqr=r(pIe," \u2014 "),lK=n(pIe,"A",{href:!0});var WAt=s(lK);Tqr=r(WAt,"FlaxBigBirdForMultipleChoice"),WAt.forEach(t),Mqr=r(pIe," (BigBird model)"),pIe.forEach(t),Eqr=i(To),T5=n(To,"LI",{});var uIe=s(T5);xMe=n(uIe,"STRONG",{});var QAt=s(xMe);Cqr=r(QAt,"distilbert"),QAt.forEach(t),wqr=r(uIe," \u2014 "),iK=n(uIe,"A",{href:!0});var HAt=s(iK);Aqr=r(HAt,"FlaxDistilBertForMultipleChoice"),HAt.forEach(t),yqr=r(uIe," (DistilBERT model)"),uIe.forEach(t),Lqr=i(To),M5=n(To,"LI",{});var _Ie=s(M5);$Me=n(_Ie,"STRONG",{});var UAt=s($Me);xqr=r(UAt,"electra"),UAt.forEach(t),$qr=r(_Ie," \u2014 "),dK=n(_Ie,"A",{href:!0});var JAt=s(dK);kqr=r(JAt,"FlaxElectraForMultipleChoice"),JAt.forEach(t),Sqr=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),Rqr=i(To),E5=n(To,"LI",{});var bIe=s(E5);kMe=n(bIe,"STRONG",{});var YAt=s(kMe);Pqr=r(YAt,"roberta"),YAt.forEach(t),Bqr=r(bIe," \u2014 "),cK=n(bIe,"A",{href:!0});var KAt=s(cK);Iqr=r(KAt,"FlaxRobertaForMultipleChoice"),KAt.forEach(t),qqr=r(bIe," (RoBERTa model)"),bIe.forEach(t),Nqr=i(To),C5=n(To,"LI",{});var vIe=s(C5);SMe=n(vIe,"STRONG",{});var ZAt=s(SMe);jqr=r(ZAt,"roformer"),ZAt.forEach(t),Dqr=r(vIe," \u2014 "),fK=n(vIe,"A",{href:!0});var eyt=s(fK);Gqr=r(eyt,"FlaxRoFormerForMultipleChoice"),eyt.forEach(t),Oqr=r(vIe," (RoFormer model)"),vIe.forEach(t),Vqr=i(To),w5=n(To,"LI",{});var FIe=s(w5);RMe=n(FIe,"STRONG",{});var oyt=s(RMe);Xqr=r(oyt,"xlm-roberta"),oyt.forEach(t),zqr=r(FIe," \u2014 "),mK=n(FIe,"A",{href:!0});var ryt=s(mK);Wqr=r(ryt,"FlaxXLMRobertaForMultipleChoice"),ryt.forEach(t),Qqr=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),To.forEach(t),Hqr=i(ti),T(A5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),MNe=i(f),of=n(f,"H2",{class:!0});var xDe=s(of);y5=n(xDe,"A",{id:!0,class:!0,href:!0});var tyt=s(y5);PMe=n(tyt,"SPAN",{});var ayt=s(PMe);T(Jx.$$.fragment,ayt),ayt.forEach(t),tyt.forEach(t),Uqr=i(xDe),BMe=n(xDe,"SPAN",{});var nyt=s(BMe);Jqr=r(nyt,"FlaxAutoModelForNextSentencePrediction"),nyt.forEach(t),xDe.forEach(t),ENe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(Yx.$$.fragment,ai),Yqr=i(ai),rf=n(ai,"P",{});var mee=s(rf);Kqr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gK=n(mee,"A",{href:!0});var syt=s(gK);Zqr=r(syt,"from_pretrained()"),syt.forEach(t),eNr=r(mee," class method or the "),hK=n(mee,"A",{href:!0});var lyt=s(hK);oNr=r(lyt,"from_config()"),lyt.forEach(t),rNr=r(mee,` class
method.`),mee.forEach(t),tNr=i(ai),Kx=n(ai,"P",{});var $De=s(Kx);aNr=r($De,"This class cannot be instantiated directly using "),IMe=n($De,"CODE",{});var iyt=s(IMe);nNr=r(iyt,"__init__()"),iyt.forEach(t),sNr=r($De," (throws an error)."),$De.forEach(t),lNr=i(ai),Jt=n(ai,"DIV",{class:!0});var Yw=s(Jt);T(Zx.$$.fragment,Yw),iNr=i(Yw),qMe=n(Yw,"P",{});var dyt=s(qMe);dNr=r(dyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dyt.forEach(t),cNr=i(Yw),tf=n(Yw,"P",{});var gee=s(tf);fNr=r(gee,`Note:
Loading a model from its configuration file does `),NMe=n(gee,"STRONG",{});var cyt=s(NMe);mNr=r(cyt,"not"),cyt.forEach(t),gNr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(gee,"A",{href:!0});var fyt=s(pK);hNr=r(fyt,"from_pretrained()"),fyt.forEach(t),pNr=r(gee," to load the model weights."),gee.forEach(t),uNr=i(Yw),T(L5.$$.fragment,Yw),Yw.forEach(t),_Nr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(e9.$$.fragment,ni),bNr=i(ni),jMe=n(ni,"P",{});var myt=s(jMe);vNr=r(myt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),myt.forEach(t),FNr=i(ni),En=n(ni,"P",{});var Kw=s(En);TNr=r(Kw,"The model class to instantiate is selected based on the "),DMe=n(Kw,"CODE",{});var gyt=s(DMe);MNr=r(gyt,"model_type"),gyt.forEach(t),ENr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),GMe=n(Kw,"CODE",{});var hyt=s(GMe);CNr=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),wNr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(Kw,"CODE",{});var pyt=s(OMe);ANr=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),yNr=r(Kw,":"),Kw.forEach(t),LNr=i(ni),VMe=n(ni,"UL",{});var uyt=s(VMe);x5=n(uyt,"LI",{});var TIe=s(x5);XMe=n(TIe,"STRONG",{});var _yt=s(XMe);xNr=r(_yt,"bert"),_yt.forEach(t),$Nr=r(TIe," \u2014 "),uK=n(TIe,"A",{href:!0});var byt=s(uK);kNr=r(byt,"FlaxBertForNextSentencePrediction"),byt.forEach(t),SNr=r(TIe," (BERT model)"),TIe.forEach(t),uyt.forEach(t),RNr=i(ni),T($5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),CNe=i(f),af=n(f,"H2",{class:!0});var kDe=s(af);k5=n(kDe,"A",{id:!0,class:!0,href:!0});var vyt=s(k5);zMe=n(vyt,"SPAN",{});var Fyt=s(zMe);T(o9.$$.fragment,Fyt),Fyt.forEach(t),vyt.forEach(t),PNr=i(kDe),WMe=n(kDe,"SPAN",{});var Tyt=s(WMe);BNr=r(Tyt,"FlaxAutoModelForImageClassification"),Tyt.forEach(t),kDe.forEach(t),wNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(r9.$$.fragment,si),INr=i(si),nf=n(si,"P",{});var hee=s(nf);qNr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_K=n(hee,"A",{href:!0});var Myt=s(_K);NNr=r(Myt,"from_pretrained()"),Myt.forEach(t),jNr=r(hee," class method or the "),bK=n(hee,"A",{href:!0});var Eyt=s(bK);DNr=r(Eyt,"from_config()"),Eyt.forEach(t),GNr=r(hee,` class
method.`),hee.forEach(t),ONr=i(si),t9=n(si,"P",{});var SDe=s(t9);VNr=r(SDe,"This class cannot be instantiated directly using "),QMe=n(SDe,"CODE",{});var Cyt=s(QMe);XNr=r(Cyt,"__init__()"),Cyt.forEach(t),zNr=r(SDe," (throws an error)."),SDe.forEach(t),WNr=i(si),Yt=n(si,"DIV",{class:!0});var Zw=s(Yt);T(a9.$$.fragment,Zw),QNr=i(Zw),HMe=n(Zw,"P",{});var wyt=s(HMe);HNr=r(wyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wyt.forEach(t),UNr=i(Zw),sf=n(Zw,"P",{});var pee=s(sf);JNr=r(pee,`Note:
Loading a model from its configuration file does `),UMe=n(pee,"STRONG",{});var Ayt=s(UMe);YNr=r(Ayt,"not"),Ayt.forEach(t),KNr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(pee,"A",{href:!0});var yyt=s(vK);ZNr=r(yyt,"from_pretrained()"),yyt.forEach(t),ejr=r(pee," to load the model weights."),pee.forEach(t),ojr=i(Zw),T(S5.$$.fragment,Zw),Zw.forEach(t),rjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(n9.$$.fragment,li),tjr=i(li),JMe=n(li,"P",{});var Lyt=s(JMe);ajr=r(Lyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lyt.forEach(t),njr=i(li),Cn=n(li,"P",{});var eA=s(Cn);sjr=r(eA,"The model class to instantiate is selected based on the "),YMe=n(eA,"CODE",{});var xyt=s(YMe);ljr=r(xyt,"model_type"),xyt.forEach(t),ijr=r(eA,` property of the config object (either
passed as an argument or loaded from `),KMe=n(eA,"CODE",{});var $yt=s(KMe);djr=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),cjr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(eA,"CODE",{});var kyt=s(ZMe);fjr=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),mjr=r(eA,":"),eA.forEach(t),gjr=i(li),s9=n(li,"UL",{});var RDe=s(s9);R5=n(RDe,"LI",{});var MIe=s(R5);e4e=n(MIe,"STRONG",{});var Syt=s(e4e);hjr=r(Syt,"beit"),Syt.forEach(t),pjr=r(MIe," \u2014 "),FK=n(MIe,"A",{href:!0});var Ryt=s(FK);ujr=r(Ryt,"FlaxBeitForImageClassification"),Ryt.forEach(t),_jr=r(MIe," (BEiT model)"),MIe.forEach(t),bjr=i(RDe),P5=n(RDe,"LI",{});var EIe=s(P5);o4e=n(EIe,"STRONG",{});var Pyt=s(o4e);vjr=r(Pyt,"vit"),Pyt.forEach(t),Fjr=r(EIe," \u2014 "),TK=n(EIe,"A",{href:!0});var Byt=s(TK);Tjr=r(Byt,"FlaxViTForImageClassification"),Byt.forEach(t),Mjr=r(EIe," (ViT model)"),EIe.forEach(t),RDe.forEach(t),Ejr=i(li),T(B5.$$.fragment,li),li.forEach(t),si.forEach(t),ANe=i(f),lf=n(f,"H2",{class:!0});var PDe=s(lf);I5=n(PDe,"A",{id:!0,class:!0,href:!0});var Iyt=s(I5);r4e=n(Iyt,"SPAN",{});var qyt=s(r4e);T(l9.$$.fragment,qyt),qyt.forEach(t),Iyt.forEach(t),Cjr=i(PDe),t4e=n(PDe,"SPAN",{});var Nyt=s(t4e);wjr=r(Nyt,"FlaxAutoModelForVision2Seq"),Nyt.forEach(t),PDe.forEach(t),yNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(i9.$$.fragment,ii),Ajr=i(ii),df=n(ii,"P",{});var uee=s(df);yjr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MK=n(uee,"A",{href:!0});var jyt=s(MK);Ljr=r(jyt,"from_pretrained()"),jyt.forEach(t),xjr=r(uee," class method or the "),EK=n(uee,"A",{href:!0});var Dyt=s(EK);$jr=r(Dyt,"from_config()"),Dyt.forEach(t),kjr=r(uee,` class
method.`),uee.forEach(t),Sjr=i(ii),d9=n(ii,"P",{});var BDe=s(d9);Rjr=r(BDe,"This class cannot be instantiated directly using "),a4e=n(BDe,"CODE",{});var Gyt=s(a4e);Pjr=r(Gyt,"__init__()"),Gyt.forEach(t),Bjr=r(BDe," (throws an error)."),BDe.forEach(t),Ijr=i(ii),Kt=n(ii,"DIV",{class:!0});var oA=s(Kt);T(c9.$$.fragment,oA),qjr=i(oA),n4e=n(oA,"P",{});var Oyt=s(n4e);Njr=r(Oyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Oyt.forEach(t),jjr=i(oA),cf=n(oA,"P",{});var _ee=s(cf);Djr=r(_ee,`Note:
Loading a model from its configuration file does `),s4e=n(_ee,"STRONG",{});var Vyt=s(s4e);Gjr=r(Vyt,"not"),Vyt.forEach(t),Ojr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(_ee,"A",{href:!0});var Xyt=s(CK);Vjr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),Xjr=r(_ee," to load the model weights."),_ee.forEach(t),zjr=i(oA),T(q5.$$.fragment,oA),oA.forEach(t),Wjr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(f9.$$.fragment,di),Qjr=i(di),l4e=n(di,"P",{});var zyt=s(l4e);Hjr=r(zyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zyt.forEach(t),Ujr=i(di),wn=n(di,"P",{});var rA=s(wn);Jjr=r(rA,"The model class to instantiate is selected based on the "),i4e=n(rA,"CODE",{});var Wyt=s(i4e);Yjr=r(Wyt,"model_type"),Wyt.forEach(t),Kjr=r(rA,` property of the config object (either
passed as an argument or loaded from `),d4e=n(rA,"CODE",{});var Qyt=s(d4e);Zjr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),eDr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(rA,"CODE",{});var Hyt=s(c4e);oDr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),rDr=r(rA,":"),rA.forEach(t),tDr=i(di),f4e=n(di,"UL",{});var Uyt=s(f4e);N5=n(Uyt,"LI",{});var CIe=s(N5);m4e=n(CIe,"STRONG",{});var Jyt=s(m4e);aDr=r(Jyt,"vision-encoder-decoder"),Jyt.forEach(t),nDr=r(CIe," \u2014 "),wK=n(CIe,"A",{href:!0});var Yyt=s(wK);sDr=r(Yyt,"FlaxVisionEncoderDecoderModel"),Yyt.forEach(t),lDr=r(CIe," (Vision Encoder decoder model)"),CIe.forEach(t),Uyt.forEach(t),iDr=i(di),T(j5.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(oxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(_i,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c($$,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(k$,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig"),c(S$,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig"),c(R$,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig"),c(P$,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig"),c(B$,"href","/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(I$,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig"),c(q$,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(N$,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(j$,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(D$,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig"),c(G$,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig"),c(O$,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPConfig"),c(V$,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig"),c(X$,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig"),c(z$,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig"),c(W$,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Q$,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(H$,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(U$,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig"),c(J$,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Y$,"href","/docs/transformers/pr_17206/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(K$,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTConfig"),c(Z$,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrConfig"),c(ek,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ok,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRConfig"),c(rk,"href","/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTConfig"),c(tk,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig"),c(ak,"href","/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(nk,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig"),c(sk,"href","/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaConfig"),c(lk,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig"),c(ik,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTConfig"),c(dk,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig"),c(ck,"href","/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNConfig"),c(fk,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config"),c(mk,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(gk,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig"),c(hk,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig"),c(pk,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig"),c(uk,"href","/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(_k,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(bk,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(vk,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig"),c(Fk,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig"),c(Tk,"href","/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeConfig"),c(Mk,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ek,"href","/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ck,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig"),c(wk,"href","/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Ak,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig"),c(yk,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Lk,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(xk,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig"),c($k,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config"),c(kk,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Sk,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Rk,"href","/docs/transformers/pr_17206/en/model_doc/opt#transformers.OPTConfig"),c(Pk,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig"),c(Bk,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ik,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig"),c(qk,"href","/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Nk,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(jk,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Dk,"href","/docs/transformers/pr_17206/en/model_doc/rag#transformers.RagConfig"),c(Gk,"href","/docs/transformers/pr_17206/en/model_doc/realm#transformers.RealmConfig"),c(Ok,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig"),c(Vk,"href","/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetConfig"),c(Xk,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig"),c(zk,"href","/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetConfig"),c(Wk,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertConfig"),c(Qk,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig"),c(Hk,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig"),c(Uk,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerConfig"),c(Jk,"href","/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWConfig"),c(Yk,"href","/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDConfig"),c(Kk,"href","/docs/transformers/pr_17206/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Zk,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(eS,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(oS,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterConfig"),c(rS,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(tS,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig"),c(aS,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config"),c(nS,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig"),c(sS,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(lS,"href","/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRConfig"),c(iS,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(dS,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(cS,"href","/docs/transformers/pr_17206/en/model_doc/van#transformers.VanConfig"),c(fS,"href","/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltConfig"),c(mS,"href","/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gS,"href","/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hS,"href","/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(pS,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig"),c(uS,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_S,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bS,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(vS,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig"),c(FS,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig"),c(TS,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig"),c(MS,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ES,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(CS,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wS,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig"),c(AS,"href","/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosConfig"),c(yS,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"id","transformers.AutoTokenizer"),c(Fg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(LS,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xS,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizer"),c($S,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kS,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartTokenizer"),c(SS,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartTokenizerFast"),c(RS,"href","/docs/transformers/pr_17206/en/model_doc/barthez#transformers.BarthezTokenizer"),c(PS,"href","/docs/transformers/pr_17206/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(BS,"href","/docs/transformers/pr_17206/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(IS,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizer"),c(qS,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizerFast"),c(NS,"href","/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jS,"href","/docs/transformers/pr_17206/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(DS,"href","/docs/transformers/pr_17206/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(GS,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(OS,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(VS,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XS,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zS,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(WS,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(QS,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(HS,"href","/docs/transformers/pr_17206/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(US,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertTokenizer"),c(JS,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(YS,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineTokenizer"),c(KS,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPTokenizer"),c(ZS,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eR,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(oR,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17206/en/model_doc/cpm#transformers.CpmTokenizer"),c(tR,"href","/docs/transformers/pr_17206/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(aR,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(nR,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sR,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lR,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaTokenizer"),c(iR,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dR,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cR,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(fR,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mR,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hR,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pR,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraTokenizer"),c(uR,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_R,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bR,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetTokenizer"),c(vR,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(FR,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(TR,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelTokenizer"),c(MR,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ER,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xR,"href","/docs/transformers/pr_17206/en/model_doc/herbert#transformers.HerbertTokenizer"),c($R,"href","/docs/transformers/pr_17206/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(kR,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SR,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RR,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(BR,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(IR,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(qR,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(NR,"href","/docs/transformers/pr_17206/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jR,"href","/docs/transformers/pr_17206/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(DR,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDTokenizer"),c(GR,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDTokenizerFast"),c(OR,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerTokenizer"),c(VR,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(XR,"href","/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeTokenizer"),c(zR,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(WR,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(HR,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianTokenizer"),c(UR,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartTokenizer"),c(JR,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(YR,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(KR,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(ZR,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizer"),c(eP,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizerFast"),c(oP,"href","/docs/transformers/pr_17206/en/model_doc/mluke#transformers.MLukeTokenizer"),c(rP,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(tP,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(aP,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(nP,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(sP,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.T5Tokenizer"),c(lP,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.T5TokenizerFast"),c(iP,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizer"),c(dP,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cP,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(fP,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(mP,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gP,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hP,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(pP,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(uP,"href","/docs/transformers/pr_17206/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_P,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartTokenizer"),c(bP,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(vP,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizer"),c(FP,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizerFast"),c(TP,"href","/docs/transformers/pr_17206/en/model_doc/rag#transformers.RagTokenizer"),c(MP,"href","/docs/transformers/pr_17206/en/model_doc/realm#transformers.RealmTokenizer"),c(EP,"href","/docs/transformers/pr_17206/en/model_doc/realm#transformers.RealmTokenizerFast"),c(CP,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerTokenizer"),c(wP,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(AP,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertTokenizer"),c(yP,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(xP,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c($P,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kP,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SP,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(RP,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(PP,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(BP,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(IP,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterTokenizer"),c(qP,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(NP,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(jP,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.T5Tokenizer"),c(GP,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.T5TokenizerFast"),c(OP,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasTokenizer"),c(VP,"href","/docs/transformers/pr_17206/en/model_doc/tapex#transformers.TapexTokenizer"),c(XP,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(zP,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizer"),c(WP,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizerFast"),c(QP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(JP,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMTokenizer"),c(YP,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(KP,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMTokenizer"),c(ZP,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(eB,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(oB,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(rB,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tB,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aB,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(nB,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(sB,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizer"),c(lB,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoFeatureExtractor"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(iB,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(dB,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cB,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fB,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gB,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hB,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FB,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(TB,"href","/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PB,"href","/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoProcessor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(BB,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(IB,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPProcessor"),c(qB,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(NB,"href","/docs/transformers/pr_17206/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(jB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GB,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(OB,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(VB,"href","/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRProcessor"),c(XB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltProcessor"),c(QB,"href","/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(HB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"id","transformers.AutoModel"),c(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(YB,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KB,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZB,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eI,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertModel"),c(oI,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartModel"),c(rI,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitModel"),c(tI,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertModel"),c(aI,"href","/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(nI,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdModel"),c(sI,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(lI,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(iI,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(dI,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertModel"),c(cI,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineModel"),c(fI,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPModel"),c(mI,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertModel"),c(gI,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextModel"),c(hI,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLModel"),c(pI,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(uI,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(_I,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(bI,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaModel"),c(vI,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(FI,"href","/docs/transformers/pr_17206/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(TI,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTModel"),c(MI,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrModel"),c(EI,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertModel"),c(CI,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(wI,"href","/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTModel"),c(AI,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraModel"),c(yI,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertModel"),c(LI,"href","/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaModel"),c(xI,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetModel"),c($I,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTModel"),c(kI,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelModel"),c(SI,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelBaseModel"),c(RI,"href","/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNModel"),c(PI,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Model"),c(BI,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(II,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJModel"),c(qI,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertModel"),c(NI,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertModel"),c(jI,"href","/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(DI,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(GI,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(OI,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDModel"),c(VI,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerModel"),c(XI,"href","/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeModel"),c(zI,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertModel"),c(WI,"href","/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Model"),c(QI,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianModel"),c(HI,"href","/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerModel"),c(UI,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartModel"),c(JI,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(YI,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertModel"),c(KI,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetModel"),c(ZI,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Model"),c(eq,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerModel"),c(oq,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(rq,"href","/docs/transformers/pr_17206/en/model_doc/opt#transformers.OPTModel"),c(tq,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusModel"),c(aq,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverModel"),c(nq,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartModel"),c(sq,"href","/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lq,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iq,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dq,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerModel"),c(cq,"href","/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetModel"),c(fq,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertModel"),c(mq,"href","/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetModel"),c(gq,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertModel"),c(hq,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaModel"),c(pq,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerModel"),c(uq,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerModel"),c(_q,"href","/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWModel"),c(bq,"href","/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDModel"),c(vq,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Fq,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterModel"),c(Tq,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Mq,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinModel"),c(Eq,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Model"),c(Cq,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasModel"),c(wq,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Aq,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechModel"),c(yq,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Lq,"href","/docs/transformers/pr_17206/en/model_doc/van#transformers.VanModel"),c(xq,"href","/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltModel"),c($q,"href","/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(kq,"href","/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Sq,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTModel"),c(Rq,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Pq,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Bq,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Iq,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMModel"),c(qq,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMModel"),c(Nq,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMModel"),c(jq,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Dq,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Gq,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Oq,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetModel"),c(Vq,"href","/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosModel"),c(Xq,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vu,"id","transformers.AutoModelForPreTraining"),c(Vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vu,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(zq,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wq,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qq,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hq,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Uq,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Jq,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForPreTraining"),c(Yq,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Kq,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eN,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oN,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rN,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tN,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aN,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForPreTraining"),c(nN,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sN,"href","/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaForPreTraining"),c(lN,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iN,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dN,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cN,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fN,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mN,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gN,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hN,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(pN,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(uN,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_N,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bN,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vN,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertModel"),c(FN,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(TN,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MN,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(EN,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CN,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wN,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(AN,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(yN,"href","/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(LN,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xN,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($N,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kN,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SN,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RN,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PN,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P_,"id","transformers.AutoModelForCausalLM"),c(P_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P_,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(BN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NN,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForCausalLM"),c(jN,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertLMHeadModel"),c(DN,"href","/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GN,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(ON,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VN,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XN,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zN,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(WN,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(QN,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(HN,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForCausalLM"),c(UN,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(JN,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(YN,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(KN,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianForCausalLM"),c(ZN,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForCausalLM"),c(ej,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(oj,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rj,"href","/docs/transformers/pr_17206/en/model_doc/opt#transformers.OPTForCausalLM"),c(tj,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(aj,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(nj,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(sj,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(lj,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ij,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(dj,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(cj,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(fj,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(mj,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gj,"href","/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(hj,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(pj,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uj,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_j,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(bj,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(vj,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForMaskedLM"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Fj,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tj,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mj,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ej,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(yj,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(xj,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c($j,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(kj,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(qj,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jj,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(zj,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eD,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oD,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rD,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n1,"id","transformers.AutoModelForSeq2SeqLM"),c(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(tD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sD,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(fD,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianMTModel"),c(pD,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w1,"id","transformers.AutoModelForSequenceClassification"),c(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(MD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ED,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wD,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c($D,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForMultipleChoice"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(_G,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FG,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c($G,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForNextSentencePrediction"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(UG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(ZG,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(eO,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(oO,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(rO,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForTokenClassification"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(tO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sO,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForTokenClassification"),c(iO,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(dO,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForTokenClassification"),c(fO,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(gO,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(hO,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(pO,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_O,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(vO,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(FO,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(TO,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(EO,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(CO,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wO,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yO,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LO,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xO,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($O,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kO,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SO,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RO,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PO,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BO,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IO,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(qO,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(NO,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForQuestionAnswering"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(jO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rV,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EV,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AV,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForTableQuestionAnswering"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(yV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForImageClassification"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(kV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitForImageClassification"),c(BV,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IV,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qV,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForImageClassification"),c(NV,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jV,"href","/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DV,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(GV,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(OV,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(VV,"href","/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(XV,"href","/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(zV,"href","/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(WV,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QV,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinForImageClassification"),c(HV,"href","/docs/transformers/pr_17206/en/model_doc/van#transformers.VanForImageClassification"),c(UV,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.AutoModelForVision2Seq"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(JV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.AutoModelForAudioClassification"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(eX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForAudioFrameClassification"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(mX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uX,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(_X,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(bX,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(vX,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.AutoModelForCTC"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(CX,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertForCTC"),c(wX,"href","/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWForCTC"),c(AX,"href","/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yX,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LX,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(xX,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c($X,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(kX,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17206/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(IX,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q6,"id","transformers.AutoModelForAudioXVector"),c(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q6,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(qX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GX,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(OX,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VX,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(XX,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.AutoModelForMaskedImageModeling"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(zX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(UX,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(JX,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.AutoModelForObjectDetection"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(YX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrForObjectDetection"),c(oz,"href","/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.AutoModelForImageSegmentation"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F0,"id","transformers.AutoModelForSemanticSegmentation"),c(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F0,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(sz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(cz,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(fz,"href","/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(mz,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.AutoModelForInstanceSegmentation"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(gz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.TFAutoModel"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(_z,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertModel"),c(Tz,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartModel"),c(Mz,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertModel"),c(Ez,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Cz,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wz,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertModel"),c(Az,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.TFCLIPModel"),c(yz,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertModel"),c(Lz,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.TFConvNextModel"),c(xz,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLModel"),c($z,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kz,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaModel"),c(Sz,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Rz,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Pz,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Bz,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraModel"),c(Iz,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(qz,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelModel"),c(Nz,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(jz,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Dz,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJModel"),c(Gz,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.TFHubertModel"),c(Oz,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Vz,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.TFLEDModel"),c(Xz,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerModel"),c(zz,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Wz,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.TFMarianModel"),c(Qz,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.TFMBartModel"),c(Hz,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Uz,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Jz,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.TFMT5Model"),c(Yz,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Kz,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Zz,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertModel"),c(eW,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaModel"),c(oW,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rW,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(tW,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.TFSwinModel"),c(aW,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5Model"),c(nW,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasModel"),c(sW,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(lW,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.TFViTModel"),c(iW,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(dW,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(cW,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMModel"),c(fW,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(mW,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.TFAutoModelForPreTraining"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(_W,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForPreTraining"),c(vW,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FW,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TW,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MW,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(EW,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CW,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(wW,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AW,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yW,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(LW,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(xW,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($W,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kW,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SW,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PW,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BW,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(IW,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qW,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(NW,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForCausalLM"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(VW,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(XW,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zW,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WW,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(QW,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HW,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(UW,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(JW,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(YW,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(KW,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.TFAutoModelForImageClassification"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(eQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(aQ,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(nQ,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(sQ,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModelForMaskedLM"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(lQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cQ,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c($Q,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PQ,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(BQ,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qQ,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(NQ,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.TFMarianMTModel"),c(jQ,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(DQ,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForSequenceClassification"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(VQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForMultipleChoice"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(bH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(MH,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(EH,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wH,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yH,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LH,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xH,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c($H,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kH,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(SH,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(NH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(OH,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(VH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.TFAutoModelForTokenClassification"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(QH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(YH,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(KH,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(oU,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(rU,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(tU,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(aU,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(nU,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(sU,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(lU,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(iU,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(dU,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(cU,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(mU,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(gU,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(hU,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(pU,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.TFAutoModelForQuestionAnswering"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(LU,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c($U,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qU,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.TFAutoModelForVision2Seq"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(VU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.FlaxAutoModel"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertModel"),c(YU,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartModel"),c(KU,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.FlaxBeitModel"),c(ZU,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertModel"),c(eJ,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(oJ,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(rJ,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(tJ,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.FlaxCLIPModel"),c(aJ,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(nJ,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraModel"),c(sJ,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(lJ,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(iJ,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(dJ,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.FlaxMarianModel"),c(cJ,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartModel"),c(fJ,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5Model"),c(mJ,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(gJ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(hJ,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(pJ,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5Model"),c(uJ,"href","/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(_J,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.FlaxViTModel"),c(bJ,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(vJ,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(FJ,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.FlaxAutoModelForCausalLM"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(wJ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(AJ,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yJ,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(LJ,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(xJ,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($J,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(kJ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(SJ,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.FlaxAutoModelForPreTraining"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(qJ,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jJ,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(DJ,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(GJ,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(QJ,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.FlaxAutoModelForMaskedLM"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(KJ,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(eY,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(oY,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(rY,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(tY,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(nY,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(sY,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(lY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fY,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(hY,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(pY,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_Y,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(EY,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(CY,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(wY,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(SY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(IY,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(qY,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForTokenClassification"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(UY,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(JY,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(YY,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(KY,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(eK,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(oK,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(sK,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(lK,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(iK,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(dK,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(cK,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(fK,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(mK,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(gK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForImageClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(_K,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(TK,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I5,"id","transformers.FlaxAutoModelForVision2Seq"),c(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(MK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,_),b(f,rt,_),e(rt,fi),e(rt,mi),e(mi,tA),e(rt,pf),b(f,je,_),b(f,We,_),e(We,gi),e(We,yn),e(yn,aA),e(We,Ln),e(We,xn),e(xn,nA),e(We,hi),e(We,$n),e($n,sA),e(We,pi),b(f,uf,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,C$),e(Ae,ui),e(ui,w$),e(Ae,A$),b(f,Eo,_),b(f,wa,_),e(wa,y$),e(wa,_f),e(_f,L$),e(wa,IDe),b(f,wIe,_),b(f,_i,_),e(_i,bf),e(bf,bee),M(lA,bee,null),e(_i,qDe),e(_i,vee),e(vee,NDe),b(f,AIe,_),b(f,kn,_),e(kn,jDe),e(kn,Fee),e(Fee,DDe),e(kn,GDe),e(kn,Tee),e(Tee,ODe),e(kn,VDe),b(f,yIe,_),M(iA,f,_),b(f,LIe,_),b(f,x$,_),e(x$,XDe),b(f,xIe,_),M(vf,f,_),b(f,$Ie,_),b(f,bi,_),e(bi,Ff),e(Ff,Mee),M(dA,Mee,null),e(bi,zDe),e(bi,Eee),e(Eee,WDe),b(f,kIe,_),b(f,Co,_),M(cA,Co,null),e(Co,QDe),e(Co,fA),e(fA,HDe),e(fA,$$),e($$,UDe),e(fA,JDe),e(Co,YDe),e(Co,mA),e(mA,KDe),e(mA,Cee),e(Cee,ZDe),e(mA,eGe),e(Co,oGe),e(Co,Er),M(gA,Er,null),e(Er,rGe),e(Er,wee),e(wee,tGe),e(Er,aGe),e(Er,vi),e(vi,nGe),e(vi,Aee),e(Aee,sGe),e(vi,lGe),e(vi,yee),e(yee,iGe),e(vi,dGe),e(Er,cGe),e(Er,A),e(A,Tf),e(Tf,Lee),e(Lee,fGe),e(Tf,mGe),e(Tf,k$),e(k$,gGe),e(Tf,hGe),e(A,pGe),e(A,Mf),e(Mf,xee),e(xee,uGe),e(Mf,_Ge),e(Mf,S$),e(S$,bGe),e(Mf,vGe),e(A,FGe),e(A,Ef),e(Ef,$ee),e($ee,TGe),e(Ef,MGe),e(Ef,R$),e(R$,EGe),e(Ef,CGe),e(A,wGe),e(A,Cf),e(Cf,kee),e(kee,AGe),e(Cf,yGe),e(Cf,P$),e(P$,LGe),e(Cf,xGe),e(A,$Ge),e(A,wf),e(wf,See),e(See,kGe),e(wf,SGe),e(wf,B$),e(B$,RGe),e(wf,PGe),e(A,BGe),e(A,Af),e(Af,Ree),e(Ree,IGe),e(Af,qGe),e(Af,I$),e(I$,NGe),e(Af,jGe),e(A,DGe),e(A,yf),e(yf,Pee),e(Pee,GGe),e(yf,OGe),e(yf,q$),e(q$,VGe),e(yf,XGe),e(A,zGe),e(A,Lf),e(Lf,Bee),e(Bee,WGe),e(Lf,QGe),e(Lf,N$),e(N$,HGe),e(Lf,UGe),e(A,JGe),e(A,xf),e(xf,Iee),e(Iee,YGe),e(xf,KGe),e(xf,j$),e(j$,ZGe),e(xf,eOe),e(A,oOe),e(A,$f),e($f,qee),e(qee,rOe),e($f,tOe),e($f,D$),e(D$,aOe),e($f,nOe),e(A,sOe),e(A,kf),e(kf,Nee),e(Nee,lOe),e(kf,iOe),e(kf,G$),e(G$,dOe),e(kf,cOe),e(A,fOe),e(A,Sf),e(Sf,jee),e(jee,mOe),e(Sf,gOe),e(Sf,O$),e(O$,hOe),e(Sf,pOe),e(A,uOe),e(A,Rf),e(Rf,Dee),e(Dee,_Oe),e(Rf,bOe),e(Rf,V$),e(V$,vOe),e(Rf,FOe),e(A,TOe),e(A,Pf),e(Pf,Gee),e(Gee,MOe),e(Pf,EOe),e(Pf,X$),e(X$,COe),e(Pf,wOe),e(A,AOe),e(A,Bf),e(Bf,Oee),e(Oee,yOe),e(Bf,LOe),e(Bf,z$),e(z$,xOe),e(Bf,$Oe),e(A,kOe),e(A,If),e(If,Vee),e(Vee,SOe),e(If,ROe),e(If,W$),e(W$,POe),e(If,BOe),e(A,IOe),e(A,qf),e(qf,Xee),e(Xee,qOe),e(qf,NOe),e(qf,Q$),e(Q$,jOe),e(qf,DOe),e(A,GOe),e(A,Nf),e(Nf,zee),e(zee,OOe),e(Nf,VOe),e(Nf,H$),e(H$,XOe),e(Nf,zOe),e(A,WOe),e(A,jf),e(jf,Wee),e(Wee,QOe),e(jf,HOe),e(jf,U$),e(U$,UOe),e(jf,JOe),e(A,YOe),e(A,Df),e(Df,Qee),e(Qee,KOe),e(Df,ZOe),e(Df,J$),e(J$,eVe),e(Df,oVe),e(A,rVe),e(A,Gf),e(Gf,Hee),e(Hee,tVe),e(Gf,aVe),e(Gf,Y$),e(Y$,nVe),e(Gf,sVe),e(A,lVe),e(A,Of),e(Of,Uee),e(Uee,iVe),e(Of,dVe),e(Of,K$),e(K$,cVe),e(Of,fVe),e(A,mVe),e(A,Vf),e(Vf,Jee),e(Jee,gVe),e(Vf,hVe),e(Vf,Z$),e(Z$,pVe),e(Vf,uVe),e(A,_Ve),e(A,Xf),e(Xf,Yee),e(Yee,bVe),e(Xf,vVe),e(Xf,ek),e(ek,FVe),e(Xf,TVe),e(A,MVe),e(A,zf),e(zf,Kee),e(Kee,EVe),e(zf,CVe),e(zf,ok),e(ok,wVe),e(zf,AVe),e(A,yVe),e(A,Wf),e(Wf,Zee),e(Zee,LVe),e(Wf,xVe),e(Wf,rk),e(rk,$Ve),e(Wf,kVe),e(A,SVe),e(A,Qf),e(Qf,eoe),e(eoe,RVe),e(Qf,PVe),e(Qf,tk),e(tk,BVe),e(Qf,IVe),e(A,qVe),e(A,Hf),e(Hf,ooe),e(ooe,NVe),e(Hf,jVe),e(Hf,ak),e(ak,DVe),e(Hf,GVe),e(A,OVe),e(A,Uf),e(Uf,roe),e(roe,VVe),e(Uf,XVe),e(Uf,nk),e(nk,zVe),e(Uf,WVe),e(A,QVe),e(A,Jf),e(Jf,toe),e(toe,HVe),e(Jf,UVe),e(Jf,sk),e(sk,JVe),e(Jf,YVe),e(A,KVe),e(A,Yf),e(Yf,aoe),e(aoe,ZVe),e(Yf,eXe),e(Yf,lk),e(lk,oXe),e(Yf,rXe),e(A,tXe),e(A,Kf),e(Kf,noe),e(noe,aXe),e(Kf,nXe),e(Kf,ik),e(ik,sXe),e(Kf,lXe),e(A,iXe),e(A,Zf),e(Zf,soe),e(soe,dXe),e(Zf,cXe),e(Zf,dk),e(dk,fXe),e(Zf,mXe),e(A,gXe),e(A,em),e(em,loe),e(loe,hXe),e(em,pXe),e(em,ck),e(ck,uXe),e(em,_Xe),e(A,bXe),e(A,om),e(om,ioe),e(ioe,vXe),e(om,FXe),e(om,fk),e(fk,TXe),e(om,MXe),e(A,EXe),e(A,rm),e(rm,doe),e(doe,CXe),e(rm,wXe),e(rm,mk),e(mk,AXe),e(rm,yXe),e(A,LXe),e(A,tm),e(tm,coe),e(coe,xXe),e(tm,$Xe),e(tm,gk),e(gk,kXe),e(tm,SXe),e(A,RXe),e(A,am),e(am,foe),e(foe,PXe),e(am,BXe),e(am,hk),e(hk,IXe),e(am,qXe),e(A,NXe),e(A,nm),e(nm,moe),e(moe,jXe),e(nm,DXe),e(nm,pk),e(pk,GXe),e(nm,OXe),e(A,VXe),e(A,sm),e(sm,goe),e(goe,XXe),e(sm,zXe),e(sm,uk),e(uk,WXe),e(sm,QXe),e(A,HXe),e(A,lm),e(lm,hoe),e(hoe,UXe),e(lm,JXe),e(lm,_k),e(_k,YXe),e(lm,KXe),e(A,ZXe),e(A,im),e(im,poe),e(poe,eze),e(im,oze),e(im,bk),e(bk,rze),e(im,tze),e(A,aze),e(A,dm),e(dm,uoe),e(uoe,nze),e(dm,sze),e(dm,vk),e(vk,lze),e(dm,ize),e(A,dze),e(A,cm),e(cm,_oe),e(_oe,cze),e(cm,fze),e(cm,Fk),e(Fk,mze),e(cm,gze),e(A,hze),e(A,fm),e(fm,boe),e(boe,pze),e(fm,uze),e(fm,Tk),e(Tk,_ze),e(fm,bze),e(A,vze),e(A,mm),e(mm,voe),e(voe,Fze),e(mm,Tze),e(mm,Mk),e(Mk,Mze),e(mm,Eze),e(A,Cze),e(A,gm),e(gm,Foe),e(Foe,wze),e(gm,Aze),e(gm,Ek),e(Ek,yze),e(gm,Lze),e(A,xze),e(A,hm),e(hm,Toe),e(Toe,$ze),e(hm,kze),e(hm,Ck),e(Ck,Sze),e(hm,Rze),e(A,Pze),e(A,pm),e(pm,Moe),e(Moe,Bze),e(pm,Ize),e(pm,wk),e(wk,qze),e(pm,Nze),e(A,jze),e(A,um),e(um,Eoe),e(Eoe,Dze),e(um,Gze),e(um,Ak),e(Ak,Oze),e(um,Vze),e(A,Xze),e(A,_m),e(_m,Coe),e(Coe,zze),e(_m,Wze),e(_m,yk),e(yk,Qze),e(_m,Hze),e(A,Uze),e(A,bm),e(bm,woe),e(woe,Jze),e(bm,Yze),e(bm,Lk),e(Lk,Kze),e(bm,Zze),e(A,eWe),e(A,vm),e(vm,Aoe),e(Aoe,oWe),e(vm,rWe),e(vm,xk),e(xk,tWe),e(vm,aWe),e(A,nWe),e(A,Fm),e(Fm,yoe),e(yoe,sWe),e(Fm,lWe),e(Fm,$k),e($k,iWe),e(Fm,dWe),e(A,cWe),e(A,Tm),e(Tm,Loe),e(Loe,fWe),e(Tm,mWe),e(Tm,kk),e(kk,gWe),e(Tm,hWe),e(A,pWe),e(A,Mm),e(Mm,xoe),e(xoe,uWe),e(Mm,_We),e(Mm,Sk),e(Sk,bWe),e(Mm,vWe),e(A,FWe),e(A,Em),e(Em,$oe),e($oe,TWe),e(Em,MWe),e(Em,Rk),e(Rk,EWe),e(Em,CWe),e(A,wWe),e(A,Cm),e(Cm,koe),e(koe,AWe),e(Cm,yWe),e(Cm,Pk),e(Pk,LWe),e(Cm,xWe),e(A,$We),e(A,wm),e(wm,Soe),e(Soe,kWe),e(wm,SWe),e(wm,Bk),e(Bk,RWe),e(wm,PWe),e(A,BWe),e(A,Am),e(Am,Roe),e(Roe,IWe),e(Am,qWe),e(Am,Ik),e(Ik,NWe),e(Am,jWe),e(A,DWe),e(A,ym),e(ym,Poe),e(Poe,GWe),e(ym,OWe),e(ym,qk),e(qk,VWe),e(ym,XWe),e(A,zWe),e(A,Lm),e(Lm,Boe),e(Boe,WWe),e(Lm,QWe),e(Lm,Nk),e(Nk,HWe),e(Lm,UWe),e(A,JWe),e(A,xm),e(xm,Ioe),e(Ioe,YWe),e(xm,KWe),e(xm,jk),e(jk,ZWe),e(xm,eQe),e(A,oQe),e(A,$m),e($m,qoe),e(qoe,rQe),e($m,tQe),e($m,Dk),e(Dk,aQe),e($m,nQe),e(A,sQe),e(A,km),e(km,Noe),e(Noe,lQe),e(km,iQe),e(km,Gk),e(Gk,dQe),e(km,cQe),e(A,fQe),e(A,Sm),e(Sm,joe),e(joe,mQe),e(Sm,gQe),e(Sm,Ok),e(Ok,hQe),e(Sm,pQe),e(A,uQe),e(A,Rm),e(Rm,Doe),e(Doe,_Qe),e(Rm,bQe),e(Rm,Vk),e(Vk,vQe),e(Rm,FQe),e(A,TQe),e(A,Pm),e(Pm,Goe),e(Goe,MQe),e(Pm,EQe),e(Pm,Xk),e(Xk,CQe),e(Pm,wQe),e(A,AQe),e(A,Bm),e(Bm,Ooe),e(Ooe,yQe),e(Bm,LQe),e(Bm,zk),e(zk,xQe),e(Bm,$Qe),e(A,kQe),e(A,Im),e(Im,Voe),e(Voe,SQe),e(Im,RQe),e(Im,Wk),e(Wk,PQe),e(Im,BQe),e(A,IQe),e(A,qm),e(qm,Xoe),e(Xoe,qQe),e(qm,NQe),e(qm,Qk),e(Qk,jQe),e(qm,DQe),e(A,GQe),e(A,Nm),e(Nm,zoe),e(zoe,OQe),e(Nm,VQe),e(Nm,Hk),e(Hk,XQe),e(Nm,zQe),e(A,WQe),e(A,jm),e(jm,Woe),e(Woe,QQe),e(jm,HQe),e(jm,Uk),e(Uk,UQe),e(jm,JQe),e(A,YQe),e(A,Dm),e(Dm,Qoe),e(Qoe,KQe),e(Dm,ZQe),e(Dm,Jk),e(Jk,eHe),e(Dm,oHe),e(A,rHe),e(A,Gm),e(Gm,Hoe),e(Hoe,tHe),e(Gm,aHe),e(Gm,Yk),e(Yk,nHe),e(Gm,sHe),e(A,lHe),e(A,Om),e(Om,Uoe),e(Uoe,iHe),e(Om,dHe),e(Om,Kk),e(Kk,cHe),e(Om,fHe),e(A,mHe),e(A,Vm),e(Vm,Joe),e(Joe,gHe),e(Vm,hHe),e(Vm,Zk),e(Zk,pHe),e(Vm,uHe),e(A,_He),e(A,Xm),e(Xm,Yoe),e(Yoe,bHe),e(Xm,vHe),e(Xm,eS),e(eS,FHe),e(Xm,THe),e(A,MHe),e(A,zm),e(zm,Koe),e(Koe,EHe),e(zm,CHe),e(zm,oS),e(oS,wHe),e(zm,AHe),e(A,yHe),e(A,Wm),e(Wm,Zoe),e(Zoe,LHe),e(Wm,xHe),e(Wm,rS),e(rS,$He),e(Wm,kHe),e(A,SHe),e(A,Qm),e(Qm,ere),e(ere,RHe),e(Qm,PHe),e(Qm,tS),e(tS,BHe),e(Qm,IHe),e(A,qHe),e(A,Hm),e(Hm,ore),e(ore,NHe),e(Hm,jHe),e(Hm,aS),e(aS,DHe),e(Hm,GHe),e(A,OHe),e(A,Um),e(Um,rre),e(rre,VHe),e(Um,XHe),e(Um,nS),e(nS,zHe),e(Um,WHe),e(A,QHe),e(A,Jm),e(Jm,tre),e(tre,HHe),e(Jm,UHe),e(Jm,sS),e(sS,JHe),e(Jm,YHe),e(A,KHe),e(A,Ym),e(Ym,are),e(are,ZHe),e(Ym,eUe),e(Ym,lS),e(lS,oUe),e(Ym,rUe),e(A,tUe),e(A,Km),e(Km,nre),e(nre,aUe),e(Km,nUe),e(Km,iS),e(iS,sUe),e(Km,lUe),e(A,iUe),e(A,Zm),e(Zm,sre),e(sre,dUe),e(Zm,cUe),e(Zm,dS),e(dS,fUe),e(Zm,mUe),e(A,gUe),e(A,eg),e(eg,lre),e(lre,hUe),e(eg,pUe),e(eg,cS),e(cS,uUe),e(eg,_Ue),e(A,bUe),e(A,og),e(og,ire),e(ire,vUe),e(og,FUe),e(og,fS),e(fS,TUe),e(og,MUe),e(A,EUe),e(A,rg),e(rg,dre),e(dre,CUe),e(rg,wUe),e(rg,mS),e(mS,AUe),e(rg,yUe),e(A,LUe),e(A,tg),e(tg,cre),e(cre,xUe),e(tg,$Ue),e(tg,gS),e(gS,kUe),e(tg,SUe),e(A,RUe),e(A,ag),e(ag,fre),e(fre,PUe),e(ag,BUe),e(ag,hS),e(hS,IUe),e(ag,qUe),e(A,NUe),e(A,ng),e(ng,mre),e(mre,jUe),e(ng,DUe),e(ng,pS),e(pS,GUe),e(ng,OUe),e(A,VUe),e(A,sg),e(sg,gre),e(gre,XUe),e(sg,zUe),e(sg,uS),e(uS,WUe),e(sg,QUe),e(A,HUe),e(A,lg),e(lg,hre),e(hre,UUe),e(lg,JUe),e(lg,_S),e(_S,YUe),e(lg,KUe),e(A,ZUe),e(A,ig),e(ig,pre),e(pre,eJe),e(ig,oJe),e(ig,bS),e(bS,rJe),e(ig,tJe),e(A,aJe),e(A,dg),e(dg,ure),e(ure,nJe),e(dg,sJe),e(dg,vS),e(vS,lJe),e(dg,iJe),e(A,dJe),e(A,cg),e(cg,_re),e(_re,cJe),e(cg,fJe),e(cg,FS),e(FS,mJe),e(cg,gJe),e(A,hJe),e(A,fg),e(fg,bre),e(bre,pJe),e(fg,uJe),e(fg,TS),e(TS,_Je),e(fg,bJe),e(A,vJe),e(A,mg),e(mg,vre),e(vre,FJe),e(mg,TJe),e(mg,MS),e(MS,MJe),e(mg,EJe),e(A,CJe),e(A,gg),e(gg,Fre),e(Fre,wJe),e(gg,AJe),e(gg,ES),e(ES,yJe),e(gg,LJe),e(A,xJe),e(A,hg),e(hg,Tre),e(Tre,$Je),e(hg,kJe),e(hg,CS),e(CS,SJe),e(hg,RJe),e(A,PJe),e(A,pg),e(pg,Mre),e(Mre,BJe),e(pg,IJe),e(pg,wS),e(wS,qJe),e(pg,NJe),e(A,jJe),e(A,ug),e(ug,Ere),e(Ere,DJe),e(ug,GJe),e(ug,AS),e(AS,OJe),e(ug,VJe),e(A,XJe),e(A,_g),e(_g,Cre),e(Cre,zJe),e(_g,WJe),e(_g,yS),e(yS,QJe),e(_g,HJe),e(Er,UJe),M(bg,Er,null),e(Co,JJe),e(Co,vg),M(hA,vg,null),e(vg,YJe),e(vg,wre),e(wre,KJe),b(f,SIe,_),b(f,Fi,_),e(Fi,Fg),e(Fg,Are),M(pA,Are,null),e(Fi,ZJe),e(Fi,yre),e(yre,eYe),b(f,RIe,_),b(f,wo,_),M(uA,wo,null),e(wo,oYe),e(wo,_A),e(_A,rYe),e(_A,LS),e(LS,tYe),e(_A,aYe),e(wo,nYe),e(wo,bA),e(bA,sYe),e(bA,Lre),e(Lre,lYe),e(bA,iYe),e(wo,dYe),e(wo,Cr),M(vA,Cr,null),e(Cr,cYe),e(Cr,xre),e(xre,fYe),e(Cr,mYe),e(Cr,Aa),e(Aa,gYe),e(Aa,$re),e($re,hYe),e(Aa,pYe),e(Aa,kre),e(kre,uYe),e(Aa,_Ye),e(Aa,Sre),e(Sre,bYe),e(Aa,vYe),e(Cr,FYe),e(Cr,k),e(k,Sn),e(Sn,Rre),e(Rre,TYe),e(Sn,MYe),e(Sn,xS),e(xS,EYe),e(Sn,CYe),e(Sn,$S),e($S,wYe),e(Sn,AYe),e(k,yYe),e(k,Rn),e(Rn,Pre),e(Pre,LYe),e(Rn,xYe),e(Rn,kS),e(kS,$Ye),e(Rn,kYe),e(Rn,SS),e(SS,SYe),e(Rn,RYe),e(k,PYe),e(k,Pn),e(Pn,Bre),e(Bre,BYe),e(Pn,IYe),e(Pn,RS),e(RS,qYe),e(Pn,NYe),e(Pn,PS),e(PS,jYe),e(Pn,DYe),e(k,GYe),e(k,Tg),e(Tg,Ire),e(Ire,OYe),e(Tg,VYe),e(Tg,BS),e(BS,XYe),e(Tg,zYe),e(k,WYe),e(k,Bn),e(Bn,qre),e(qre,QYe),e(Bn,HYe),e(Bn,IS),e(IS,UYe),e(Bn,JYe),e(Bn,qS),e(qS,YYe),e(Bn,KYe),e(k,ZYe),e(k,Mg),e(Mg,Nre),e(Nre,eKe),e(Mg,oKe),e(Mg,NS),e(NS,rKe),e(Mg,tKe),e(k,aKe),e(k,Eg),e(Eg,jre),e(jre,nKe),e(Eg,sKe),e(Eg,jS),e(jS,lKe),e(Eg,iKe),e(k,dKe),e(k,Cg),e(Cg,Dre),e(Dre,cKe),e(Cg,fKe),e(Cg,DS),e(DS,mKe),e(Cg,gKe),e(k,hKe),e(k,In),e(In,Gre),e(Gre,pKe),e(In,uKe),e(In,GS),e(GS,_Ke),e(In,bKe),e(In,OS),e(OS,vKe),e(In,FKe),e(k,TKe),e(k,qn),e(qn,Ore),e(Ore,MKe),e(qn,EKe),e(qn,VS),e(VS,CKe),e(qn,wKe),e(qn,XS),e(XS,AKe),e(qn,yKe),e(k,LKe),e(k,Nn),e(Nn,Vre),e(Vre,xKe),e(Nn,$Ke),e(Nn,zS),e(zS,kKe),e(Nn,SKe),e(Nn,WS),e(WS,RKe),e(Nn,PKe),e(k,BKe),e(k,wg),e(wg,Xre),e(Xre,IKe),e(wg,qKe),e(wg,QS),e(QS,NKe),e(wg,jKe),e(k,DKe),e(k,Ag),e(Ag,zre),e(zre,GKe),e(Ag,OKe),e(Ag,HS),e(HS,VKe),e(Ag,XKe),e(k,zKe),e(k,jn),e(jn,Wre),e(Wre,WKe),e(jn,QKe),e(jn,US),e(US,HKe),e(jn,UKe),e(jn,JS),e(JS,JKe),e(jn,YKe),e(k,KKe),e(k,yg),e(yg,Qre),e(Qre,ZKe),e(yg,eZe),e(yg,YS),e(YS,oZe),e(yg,rZe),e(k,tZe),e(k,Dn),e(Dn,Hre),e(Hre,aZe),e(Dn,nZe),e(Dn,KS),e(KS,sZe),e(Dn,lZe),e(Dn,ZS),e(ZS,iZe),e(Dn,dZe),e(k,cZe),e(k,Gn),e(Gn,Ure),e(Ure,fZe),e(Gn,mZe),e(Gn,eR),e(eR,gZe),e(Gn,hZe),e(Gn,oR),e(oR,pZe),e(Gn,uZe),e(k,_Ze),e(k,On),e(On,Jre),e(Jre,bZe),e(On,vZe),e(On,rR),e(rR,FZe),e(On,TZe),e(On,tR),e(tR,MZe),e(On,EZe),e(k,CZe),e(k,Lg),e(Lg,Yre),e(Yre,wZe),e(Lg,AZe),e(Lg,aR),e(aR,yZe),e(Lg,LZe),e(k,xZe),e(k,Vn),e(Vn,Kre),e(Kre,$Ze),e(Vn,kZe),e(Vn,nR),e(nR,SZe),e(Vn,RZe),e(Vn,sR),e(sR,PZe),e(Vn,BZe),e(k,IZe),e(k,Xn),e(Xn,Zre),e(Zre,qZe),e(Xn,NZe),e(Xn,lR),e(lR,jZe),e(Xn,DZe),e(Xn,iR),e(iR,GZe),e(Xn,OZe),e(k,VZe),e(k,zn),e(zn,ete),e(ete,XZe),e(zn,zZe),e(zn,dR),e(dR,WZe),e(zn,QZe),e(zn,cR),e(cR,HZe),e(zn,UZe),e(k,JZe),e(k,Wn),e(Wn,ote),e(ote,YZe),e(Wn,KZe),e(Wn,fR),e(fR,ZZe),e(Wn,eeo),e(Wn,mR),e(mR,oeo),e(Wn,reo),e(k,teo),e(k,Qn),e(Qn,rte),e(rte,aeo),e(Qn,neo),e(Qn,gR),e(gR,seo),e(Qn,leo),e(Qn,hR),e(hR,ieo),e(Qn,deo),e(k,ceo),e(k,Hn),e(Hn,tte),e(tte,feo),e(Hn,meo),e(Hn,pR),e(pR,geo),e(Hn,heo),e(Hn,uR),e(uR,peo),e(Hn,ueo),e(k,_eo),e(k,xg),e(xg,ate),e(ate,beo),e(xg,veo),e(xg,_R),e(_R,Feo),e(xg,Teo),e(k,Meo),e(k,Un),e(Un,nte),e(nte,Eeo),e(Un,Ceo),e(Un,bR),e(bR,weo),e(Un,Aeo),e(Un,vR),e(vR,yeo),e(Un,Leo),e(k,xeo),e(k,$g),e($g,ste),e(ste,$eo),e($g,keo),e($g,FR),e(FR,Seo),e($g,Reo),e(k,Peo),e(k,Jn),e(Jn,lte),e(lte,Beo),e(Jn,Ieo),e(Jn,TR),e(TR,qeo),e(Jn,Neo),e(Jn,MR),e(MR,jeo),e(Jn,Deo),e(k,Geo),e(k,Yn),e(Yn,ite),e(ite,Oeo),e(Yn,Veo),e(Yn,ER),e(ER,Xeo),e(Yn,zeo),e(Yn,CR),e(CR,Weo),e(Yn,Qeo),e(k,Heo),e(k,Kn),e(Kn,dte),e(dte,Ueo),e(Kn,Jeo),e(Kn,wR),e(wR,Yeo),e(Kn,Keo),e(Kn,AR),e(AR,Zeo),e(Kn,eoo),e(k,ooo),e(k,Zn),e(Zn,cte),e(cte,roo),e(Zn,too),e(Zn,yR),e(yR,aoo),e(Zn,noo),e(Zn,LR),e(LR,soo),e(Zn,loo),e(k,ioo),e(k,es),e(es,fte),e(fte,doo),e(es,coo),e(es,xR),e(xR,foo),e(es,moo),e(es,$R),e($R,goo),e(es,hoo),e(k,poo),e(k,kg),e(kg,mte),e(mte,uoo),e(kg,_oo),e(kg,kR),e(kR,boo),e(kg,voo),e(k,Foo),e(k,os),e(os,gte),e(gte,Too),e(os,Moo),e(os,SR),e(SR,Eoo),e(os,Coo),e(os,RR),e(RR,woo),e(os,Aoo),e(k,yoo),e(k,rs),e(rs,hte),e(hte,Loo),e(rs,xoo),e(rs,PR),e(PR,$oo),e(rs,koo),e(rs,BR),e(BR,Soo),e(rs,Roo),e(k,Poo),e(k,ts),e(ts,pte),e(pte,Boo),e(ts,Ioo),e(ts,IR),e(IR,qoo),e(ts,Noo),e(ts,qR),e(qR,joo),e(ts,Doo),e(k,Goo),e(k,as),e(as,ute),e(ute,Ooo),e(as,Voo),e(as,NR),e(NR,Xoo),e(as,zoo),e(as,jR),e(jR,Woo),e(as,Qoo),e(k,Hoo),e(k,ns),e(ns,_te),e(_te,Uoo),e(ns,Joo),e(ns,DR),e(DR,Yoo),e(ns,Koo),e(ns,GR),e(GR,Zoo),e(ns,ero),e(k,oro),e(k,ss),e(ss,bte),e(bte,rro),e(ss,tro),e(ss,OR),e(OR,aro),e(ss,nro),e(ss,VR),e(VR,sro),e(ss,lro),e(k,iro),e(k,Sg),e(Sg,vte),e(vte,dro),e(Sg,cro),e(Sg,XR),e(XR,fro),e(Sg,mro),e(k,gro),e(k,ls),e(ls,Fte),e(Fte,hro),e(ls,pro),e(ls,zR),e(zR,uro),e(ls,_ro),e(ls,WR),e(WR,bro),e(ls,vro),e(k,Fro),e(k,Rg),e(Rg,Tte),e(Tte,Tro),e(Rg,Mro),e(Rg,QR),e(QR,Ero),e(Rg,Cro),e(k,wro),e(k,Pg),e(Pg,Mte),e(Mte,Aro),e(Pg,yro),e(Pg,HR),e(HR,Lro),e(Pg,xro),e(k,$ro),e(k,is),e(is,Ete),e(Ete,kro),e(is,Sro),e(is,UR),e(UR,Rro),e(is,Pro),e(is,JR),e(JR,Bro),e(is,Iro),e(k,qro),e(k,ds),e(ds,Cte),e(Cte,Nro),e(ds,jro),e(ds,YR),e(YR,Dro),e(ds,Gro),e(ds,KR),e(KR,Oro),e(ds,Vro),e(k,Xro),e(k,cs),e(cs,wte),e(wte,zro),e(cs,Wro),e(cs,ZR),e(ZR,Qro),e(cs,Hro),e(cs,eP),e(eP,Uro),e(cs,Jro),e(k,Yro),e(k,Bg),e(Bg,Ate),e(Ate,Kro),e(Bg,Zro),e(Bg,oP),e(oP,eto),e(Bg,oto),e(k,rto),e(k,fs),e(fs,yte),e(yte,tto),e(fs,ato),e(fs,rP),e(rP,nto),e(fs,sto),e(fs,tP),e(tP,lto),e(fs,ito),e(k,dto),e(k,ms),e(ms,Lte),e(Lte,cto),e(ms,fto),e(ms,aP),e(aP,mto),e(ms,gto),e(ms,nP),e(nP,hto),e(ms,pto),e(k,uto),e(k,gs),e(gs,xte),e(xte,_to),e(gs,bto),e(gs,sP),e(sP,vto),e(gs,Fto),e(gs,lP),e(lP,Tto),e(gs,Mto),e(k,Eto),e(k,hs),e(hs,$te),e($te,Cto),e(hs,wto),e(hs,iP),e(iP,Ato),e(hs,yto),e(hs,dP),e(dP,Lto),e(hs,xto),e(k,$to),e(k,ps),e(ps,kte),e(kte,kto),e(ps,Sto),e(ps,cP),e(cP,Rto),e(ps,Pto),e(ps,fP),e(fP,Bto),e(ps,Ito),e(k,qto),e(k,Ig),e(Ig,Ste),e(Ste,Nto),e(Ig,jto),e(Ig,mP),e(mP,Dto),e(Ig,Gto),e(k,Oto),e(k,us),e(us,Rte),e(Rte,Vto),e(us,Xto),e(us,gP),e(gP,zto),e(us,Wto),e(us,hP),e(hP,Qto),e(us,Hto),e(k,Uto),e(k,qg),e(qg,Pte),e(Pte,Jto),e(qg,Yto),e(qg,pP),e(pP,Kto),e(qg,Zto),e(k,eao),e(k,Ng),e(Ng,Bte),e(Bte,oao),e(Ng,rao),e(Ng,uP),e(uP,tao),e(Ng,aao),e(k,nao),e(k,jg),e(jg,Ite),e(Ite,sao),e(jg,lao),e(jg,_P),e(_P,iao),e(jg,dao),e(k,cao),e(k,Dg),e(Dg,qte),e(qte,fao),e(Dg,mao),e(Dg,bP),e(bP,gao),e(Dg,hao),e(k,pao),e(k,_s),e(_s,Nte),e(Nte,uao),e(_s,_ao),e(_s,vP),e(vP,bao),e(_s,vao),e(_s,FP),e(FP,Fao),e(_s,Tao),e(k,Mao),e(k,Gg),e(Gg,jte),e(jte,Eao),e(Gg,Cao),e(Gg,TP),e(TP,wao),e(Gg,Aao),e(k,yao),e(k,bs),e(bs,Dte),e(Dte,Lao),e(bs,xao),e(bs,MP),e(MP,$ao),e(bs,kao),e(bs,EP),e(EP,Sao),e(bs,Rao),e(k,Pao),e(k,vs),e(vs,Gte),e(Gte,Bao),e(vs,Iao),e(vs,CP),e(CP,qao),e(vs,Nao),e(vs,wP),e(wP,jao),e(vs,Dao),e(k,Gao),e(k,Fs),e(Fs,Ote),e(Ote,Oao),e(Fs,Vao),e(Fs,AP),e(AP,Xao),e(Fs,zao),e(Fs,yP),e(yP,Wao),e(Fs,Qao),e(k,Hao),e(k,Ts),e(Ts,Vte),e(Vte,Uao),e(Ts,Jao),e(Ts,LP),e(LP,Yao),e(Ts,Kao),e(Ts,xP),e(xP,Zao),e(Ts,eno),e(k,ono),e(k,Ms),e(Ms,Xte),e(Xte,rno),e(Ms,tno),e(Ms,$P),e($P,ano),e(Ms,nno),e(Ms,kP),e(kP,sno),e(Ms,lno),e(k,ino),e(k,Es),e(Es,zte),e(zte,dno),e(Es,cno),e(Es,SP),e(SP,fno),e(Es,mno),e(Es,RP),e(RP,gno),e(Es,hno),e(k,pno),e(k,Og),e(Og,Wte),e(Wte,uno),e(Og,_no),e(Og,PP),e(PP,bno),e(Og,vno),e(k,Fno),e(k,Vg),e(Vg,Qte),e(Qte,Tno),e(Vg,Mno),e(Vg,BP),e(BP,Eno),e(Vg,Cno),e(k,wno),e(k,Cs),e(Cs,Hte),e(Hte,Ano),e(Cs,yno),e(Cs,IP),e(IP,Lno),e(Cs,xno),e(Cs,qP),e(qP,$no),e(Cs,kno),e(k,Sno),e(k,ws),e(ws,Ute),e(Ute,Rno),e(ws,Pno),e(ws,NP),e(NP,Bno),e(ws,Ino),e(ws,jP),e(jP,qno),e(ws,Nno),e(k,jno),e(k,As),e(As,Jte),e(Jte,Dno),e(As,Gno),e(As,DP),e(DP,Ono),e(As,Vno),e(As,GP),e(GP,Xno),e(As,zno),e(k,Wno),e(k,Xg),e(Xg,Yte),e(Yte,Qno),e(Xg,Hno),e(Xg,OP),e(OP,Uno),e(Xg,Jno),e(k,Yno),e(k,zg),e(zg,Kte),e(Kte,Kno),e(zg,Zno),e(zg,VP),e(VP,eso),e(zg,oso),e(k,rso),e(k,Wg),e(Wg,Zte),e(Zte,tso),e(Wg,aso),e(Wg,XP),e(XP,nso),e(Wg,sso),e(k,lso),e(k,ys),e(ys,eae),e(eae,iso),e(ys,dso),e(ys,zP),e(zP,cso),e(ys,fso),e(ys,WP),e(WP,mso),e(ys,gso),e(k,hso),e(k,Qg),e(Qg,oae),e(oae,pso),e(Qg,uso),e(Qg,QP),e(QP,_so),e(Qg,bso),e(k,vso),e(k,Hg),e(Hg,rae),e(rae,Fso),e(Hg,Tso),e(Hg,HP),e(HP,Mso),e(Hg,Eso),e(k,Cso),e(k,Ug),e(Ug,tae),e(tae,wso),e(Ug,Aso),e(Ug,UP),e(UP,yso),e(Ug,Lso),e(k,xso),e(k,Ls),e(Ls,aae),e(aae,$so),e(Ls,kso),e(Ls,JP),e(JP,Sso),e(Ls,Rso),e(Ls,YP),e(YP,Pso),e(Ls,Bso),e(k,Iso),e(k,Jg),e(Jg,nae),e(nae,qso),e(Jg,Nso),e(Jg,KP),e(KP,jso),e(Jg,Dso),e(k,Gso),e(k,Yg),e(Yg,sae),e(sae,Oso),e(Yg,Vso),e(Yg,ZP),e(ZP,Xso),e(Yg,zso),e(k,Wso),e(k,xs),e(xs,lae),e(lae,Qso),e(xs,Hso),e(xs,eB),e(eB,Uso),e(xs,Jso),e(xs,oB),e(oB,Yso),e(xs,Kso),e(k,Zso),e(k,$s),e($s,iae),e(iae,elo),e($s,olo),e($s,rB),e(rB,rlo),e($s,tlo),e($s,tB),e(tB,alo),e($s,nlo),e(k,slo),e(k,ks),e(ks,dae),e(dae,llo),e(ks,ilo),e(ks,aB),e(aB,dlo),e(ks,clo),e(ks,nB),e(nB,flo),e(ks,mlo),e(k,glo),e(k,Ss),e(Ss,cae),e(cae,hlo),e(Ss,plo),e(Ss,sB),e(sB,ulo),e(Ss,_lo),e(Ss,lB),e(lB,blo),e(Ss,vlo),e(Cr,Flo),M(Kg,Cr,null),e(wo,Tlo),e(wo,Zg),M(FA,Zg,null),e(Zg,Mlo),e(Zg,fae),e(fae,Elo),b(f,PIe,_),b(f,Ti,_),e(Ti,eh),e(eh,mae),M(TA,mae,null),e(Ti,Clo),e(Ti,gae),e(gae,wlo),b(f,BIe,_),b(f,Ao,_),M(MA,Ao,null),e(Ao,Alo),e(Ao,EA),e(EA,ylo),e(EA,iB),e(iB,Llo),e(EA,xlo),e(Ao,$lo),e(Ao,CA),e(CA,klo),e(CA,hae),e(hae,Slo),e(CA,Rlo),e(Ao,Plo),e(Ao,He),M(wA,He,null),e(He,Blo),e(He,pae),e(pae,Ilo),e(He,qlo),e(He,ya),e(ya,Nlo),e(ya,uae),e(uae,jlo),e(ya,Dlo),e(ya,_ae),e(_ae,Glo),e(ya,Olo),e(ya,bae),e(bae,Vlo),e(ya,Xlo),e(He,zlo),e(He,Z),e(Z,oh),e(oh,vae),e(vae,Wlo),e(oh,Qlo),e(oh,dB),e(dB,Hlo),e(oh,Ulo),e(Z,Jlo),e(Z,rh),e(rh,Fae),e(Fae,Ylo),e(rh,Klo),e(rh,cB),e(cB,Zlo),e(rh,eio),e(Z,oio),e(Z,th),e(th,Tae),e(Tae,rio),e(th,tio),e(th,fB),e(fB,aio),e(th,nio),e(Z,sio),e(Z,ah),e(ah,Mae),e(Mae,lio),e(ah,iio),e(ah,mB),e(mB,dio),e(ah,cio),e(Z,fio),e(Z,nh),e(nh,Eae),e(Eae,mio),e(nh,gio),e(nh,gB),e(gB,hio),e(nh,pio),e(Z,uio),e(Z,sh),e(sh,Cae),e(Cae,_io),e(sh,bio),e(sh,hB),e(hB,vio),e(sh,Fio),e(Z,Tio),e(Z,lh),e(lh,wae),e(wae,Mio),e(lh,Eio),e(lh,pB),e(pB,Cio),e(lh,wio),e(Z,Aio),e(Z,ih),e(ih,Aae),e(Aae,yio),e(ih,Lio),e(ih,uB),e(uB,xio),e(ih,$io),e(Z,kio),e(Z,dh),e(dh,yae),e(yae,Sio),e(dh,Rio),e(dh,_B),e(_B,Pio),e(dh,Bio),e(Z,Iio),e(Z,ch),e(ch,Lae),e(Lae,qio),e(ch,Nio),e(ch,bB),e(bB,jio),e(ch,Dio),e(Z,Gio),e(Z,fh),e(fh,xae),e(xae,Oio),e(fh,Vio),e(fh,vB),e(vB,Xio),e(fh,zio),e(Z,Wio),e(Z,mh),e(mh,$ae),e($ae,Qio),e(mh,Hio),e(mh,FB),e(FB,Uio),e(mh,Jio),e(Z,Yio),e(Z,gh),e(gh,kae),e(kae,Kio),e(gh,Zio),e(gh,TB),e(TB,edo),e(gh,odo),e(Z,rdo),e(Z,hh),e(hh,Sae),e(Sae,tdo),e(hh,ado),e(hh,MB),e(MB,ndo),e(hh,sdo),e(Z,ldo),e(Z,ph),e(ph,Rae),e(Rae,ido),e(ph,ddo),e(ph,EB),e(EB,cdo),e(ph,fdo),e(Z,mdo),e(Z,uh),e(uh,Pae),e(Pae,gdo),e(uh,hdo),e(uh,CB),e(CB,pdo),e(uh,udo),e(Z,_do),e(Z,_h),e(_h,Bae),e(Bae,bdo),e(_h,vdo),e(_h,wB),e(wB,Fdo),e(_h,Tdo),e(Z,Mdo),e(Z,bh),e(bh,Iae),e(Iae,Edo),e(bh,Cdo),e(bh,AB),e(AB,wdo),e(bh,Ado),e(Z,ydo),e(Z,vh),e(vh,qae),e(qae,Ldo),e(vh,xdo),e(vh,yB),e(yB,$do),e(vh,kdo),e(Z,Sdo),e(Z,Fh),e(Fh,Nae),e(Nae,Rdo),e(Fh,Pdo),e(Fh,LB),e(LB,Bdo),e(Fh,Ido),e(Z,qdo),e(Z,Th),e(Th,jae),e(jae,Ndo),e(Th,jdo),e(Th,xB),e(xB,Ddo),e(Th,Gdo),e(Z,Odo),e(Z,Mh),e(Mh,Dae),e(Dae,Vdo),e(Mh,Xdo),e(Mh,$B),e($B,zdo),e(Mh,Wdo),e(Z,Qdo),e(Z,Eh),e(Eh,Gae),e(Gae,Hdo),e(Eh,Udo),e(Eh,kB),e(kB,Jdo),e(Eh,Ydo),e(Z,Kdo),e(Z,Ch),e(Ch,Oae),e(Oae,Zdo),e(Ch,eco),e(Ch,SB),e(SB,oco),e(Ch,rco),e(Z,tco),e(Z,wh),e(wh,Vae),e(Vae,aco),e(wh,nco),e(wh,RB),e(RB,sco),e(wh,lco),e(Z,ico),e(Z,Ah),e(Ah,Xae),e(Xae,dco),e(Ah,cco),e(Ah,PB),e(PB,fco),e(Ah,mco),e(He,gco),M(yh,He,null),e(He,hco),M(Lh,He,null),e(Ao,pco),e(Ao,xh),M(AA,xh,null),e(xh,uco),e(xh,zae),e(zae,_co),b(f,IIe,_),b(f,Mi,_),e(Mi,$h),e($h,Wae),M(yA,Wae,null),e(Mi,bco),e(Mi,Qae),e(Qae,vco),b(f,qIe,_),b(f,yo,_),M(LA,yo,null),e(yo,Fco),e(yo,xA),e(xA,Tco),e(xA,BB),e(BB,Mco),e(xA,Eco),e(yo,Cco),e(yo,$A),e($A,wco),e($A,Hae),e(Hae,Aco),e($A,yco),e(yo,Lco),e(yo,Ue),M(kA,Ue,null),e(Ue,xco),e(Ue,Uae),e(Uae,$co),e(Ue,kco),e(Ue,Ei),e(Ei,Sco),e(Ei,Jae),e(Jae,Rco),e(Ei,Pco),e(Ei,Yae),e(Yae,Bco),e(Ei,Ico),e(Ue,qco),e(Ue,pe),e(pe,kh),e(kh,Kae),e(Kae,Nco),e(kh,jco),e(kh,IB),e(IB,Dco),e(kh,Gco),e(pe,Oco),e(pe,Sh),e(Sh,Zae),e(Zae,Vco),e(Sh,Xco),e(Sh,ene),e(ene,zco),e(Sh,Wco),e(pe,Qco),e(pe,Rh),e(Rh,one),e(one,Hco),e(Rh,Uco),e(Rh,qB),e(qB,Jco),e(Rh,Yco),e(pe,Kco),e(pe,Ph),e(Ph,rne),e(rne,Zco),e(Ph,efo),e(Ph,NB),e(NB,ofo),e(Ph,rfo),e(pe,tfo),e(pe,Bh),e(Bh,tne),e(tne,afo),e(Bh,nfo),e(Bh,jB),e(jB,sfo),e(Bh,lfo),e(pe,ifo),e(pe,Ih),e(Ih,ane),e(ane,dfo),e(Ih,cfo),e(Ih,DB),e(DB,ffo),e(Ih,mfo),e(pe,gfo),e(pe,qh),e(qh,nne),e(nne,hfo),e(qh,pfo),e(qh,GB),e(GB,ufo),e(qh,_fo),e(pe,bfo),e(pe,Nh),e(Nh,sne),e(sne,vfo),e(Nh,Ffo),e(Nh,OB),e(OB,Tfo),e(Nh,Mfo),e(pe,Efo),e(pe,jh),e(jh,lne),e(lne,Cfo),e(jh,wfo),e(jh,VB),e(VB,Afo),e(jh,yfo),e(pe,Lfo),e(pe,Dh),e(Dh,ine),e(ine,xfo),e(Dh,$fo),e(Dh,XB),e(XB,kfo),e(Dh,Sfo),e(pe,Rfo),e(pe,Gh),e(Gh,dne),e(dne,Pfo),e(Gh,Bfo),e(Gh,zB),e(zB,Ifo),e(Gh,qfo),e(pe,Nfo),e(pe,Oh),e(Oh,cne),e(cne,jfo),e(Oh,Dfo),e(Oh,WB),e(WB,Gfo),e(Oh,Ofo),e(pe,Vfo),e(pe,Vh),e(Vh,fne),e(fne,Xfo),e(Vh,zfo),e(Vh,QB),e(QB,Wfo),e(Vh,Qfo),e(pe,Hfo),e(pe,Xh),e(Xh,mne),e(mne,Ufo),e(Xh,Jfo),e(Xh,HB),e(HB,Yfo),e(Xh,Kfo),e(pe,Zfo),e(pe,zh),e(zh,gne),e(gne,emo),e(zh,omo),e(zh,UB),e(UB,rmo),e(zh,tmo),e(pe,amo),e(pe,Wh),e(Wh,hne),e(hne,nmo),e(Wh,smo),e(Wh,JB),e(JB,lmo),e(Wh,imo),e(Ue,dmo),M(Qh,Ue,null),e(Ue,cmo),M(Hh,Ue,null),e(yo,fmo),e(yo,Uh),M(SA,Uh,null),e(Uh,mmo),e(Uh,pne),e(pne,gmo),b(f,NIe,_),b(f,Ci,_),e(Ci,Jh),e(Jh,une),M(RA,une,null),e(Ci,hmo),e(Ci,_ne),e(_ne,pmo),b(f,jIe,_),b(f,Lo,_),M(PA,Lo,null),e(Lo,umo),e(Lo,wi),e(wi,_mo),e(wi,YB),e(YB,bmo),e(wi,vmo),e(wi,KB),e(KB,Fmo),e(wi,Tmo),e(Lo,Mmo),e(Lo,BA),e(BA,Emo),e(BA,bne),e(bne,Cmo),e(BA,wmo),e(Lo,Amo),e(Lo,tt),M(IA,tt,null),e(tt,ymo),e(tt,vne),e(vne,Lmo),e(tt,xmo),e(tt,Ai),e(Ai,$mo),e(Ai,Fne),e(Fne,kmo),e(Ai,Smo),e(Ai,ZB),e(ZB,Rmo),e(Ai,Pmo),e(tt,Bmo),M(Yh,tt,null),e(Lo,Imo),e(Lo,Je),M(qA,Je,null),e(Je,qmo),e(Je,Tne),e(Tne,Nmo),e(Je,jmo),e(Je,La),e(La,Dmo),e(La,Mne),e(Mne,Gmo),e(La,Omo),e(La,Ene),e(Ene,Vmo),e(La,Xmo),e(La,Cne),e(Cne,zmo),e(La,Wmo),e(Je,Qmo),e(Je,x),e(x,Kh),e(Kh,wne),e(wne,Hmo),e(Kh,Umo),e(Kh,eI),e(eI,Jmo),e(Kh,Ymo),e(x,Kmo),e(x,Zh),e(Zh,Ane),e(Ane,Zmo),e(Zh,ego),e(Zh,oI),e(oI,ogo),e(Zh,rgo),e(x,tgo),e(x,ep),e(ep,yne),e(yne,ago),e(ep,ngo),e(ep,rI),e(rI,sgo),e(ep,lgo),e(x,igo),e(x,op),e(op,Lne),e(Lne,dgo),e(op,cgo),e(op,tI),e(tI,fgo),e(op,mgo),e(x,ggo),e(x,rp),e(rp,xne),e(xne,hgo),e(rp,pgo),e(rp,aI),e(aI,ugo),e(rp,_go),e(x,bgo),e(x,tp),e(tp,$ne),e($ne,vgo),e(tp,Fgo),e(tp,nI),e(nI,Tgo),e(tp,Mgo),e(x,Ego),e(x,ap),e(ap,kne),e(kne,Cgo),e(ap,wgo),e(ap,sI),e(sI,Ago),e(ap,ygo),e(x,Lgo),e(x,np),e(np,Sne),e(Sne,xgo),e(np,$go),e(np,lI),e(lI,kgo),e(np,Sgo),e(x,Rgo),e(x,sp),e(sp,Rne),e(Rne,Pgo),e(sp,Bgo),e(sp,iI),e(iI,Igo),e(sp,qgo),e(x,Ngo),e(x,lp),e(lp,Pne),e(Pne,jgo),e(lp,Dgo),e(lp,dI),e(dI,Ggo),e(lp,Ogo),e(x,Vgo),e(x,ip),e(ip,Bne),e(Bne,Xgo),e(ip,zgo),e(ip,cI),e(cI,Wgo),e(ip,Qgo),e(x,Hgo),e(x,dp),e(dp,Ine),e(Ine,Ugo),e(dp,Jgo),e(dp,fI),e(fI,Ygo),e(dp,Kgo),e(x,Zgo),e(x,cp),e(cp,qne),e(qne,eho),e(cp,oho),e(cp,mI),e(mI,rho),e(cp,tho),e(x,aho),e(x,fp),e(fp,Nne),e(Nne,nho),e(fp,sho),e(fp,gI),e(gI,lho),e(fp,iho),e(x,dho),e(x,mp),e(mp,jne),e(jne,cho),e(mp,fho),e(mp,hI),e(hI,mho),e(mp,gho),e(x,hho),e(x,gp),e(gp,Dne),e(Dne,pho),e(gp,uho),e(gp,pI),e(pI,_ho),e(gp,bho),e(x,vho),e(x,hp),e(hp,Gne),e(Gne,Fho),e(hp,Tho),e(hp,uI),e(uI,Mho),e(hp,Eho),e(x,Cho),e(x,pp),e(pp,One),e(One,who),e(pp,Aho),e(pp,_I),e(_I,yho),e(pp,Lho),e(x,xho),e(x,up),e(up,Vne),e(Vne,$ho),e(up,kho),e(up,bI),e(bI,Sho),e(up,Rho),e(x,Pho),e(x,_p),e(_p,Xne),e(Xne,Bho),e(_p,Iho),e(_p,vI),e(vI,qho),e(_p,Nho),e(x,jho),e(x,bp),e(bp,zne),e(zne,Dho),e(bp,Gho),e(bp,FI),e(FI,Oho),e(bp,Vho),e(x,Xho),e(x,vp),e(vp,Wne),e(Wne,zho),e(vp,Who),e(vp,TI),e(TI,Qho),e(vp,Hho),e(x,Uho),e(x,Fp),e(Fp,Qne),e(Qne,Jho),e(Fp,Yho),e(Fp,MI),e(MI,Kho),e(Fp,Zho),e(x,epo),e(x,Tp),e(Tp,Hne),e(Hne,opo),e(Tp,rpo),e(Tp,EI),e(EI,tpo),e(Tp,apo),e(x,npo),e(x,Mp),e(Mp,Une),e(Une,spo),e(Mp,lpo),e(Mp,CI),e(CI,ipo),e(Mp,dpo),e(x,cpo),e(x,Ep),e(Ep,Jne),e(Jne,fpo),e(Ep,mpo),e(Ep,wI),e(wI,gpo),e(Ep,hpo),e(x,ppo),e(x,Cp),e(Cp,Yne),e(Yne,upo),e(Cp,_po),e(Cp,AI),e(AI,bpo),e(Cp,vpo),e(x,Fpo),e(x,wp),e(wp,Kne),e(Kne,Tpo),e(wp,Mpo),e(wp,yI),e(yI,Epo),e(wp,Cpo),e(x,wpo),e(x,Ap),e(Ap,Zne),e(Zne,Apo),e(Ap,ypo),e(Ap,LI),e(LI,Lpo),e(Ap,xpo),e(x,$po),e(x,yp),e(yp,ese),e(ese,kpo),e(yp,Spo),e(yp,xI),e(xI,Rpo),e(yp,Ppo),e(x,Bpo),e(x,Lp),e(Lp,ose),e(ose,Ipo),e(Lp,qpo),e(Lp,$I),e($I,Npo),e(Lp,jpo),e(x,Dpo),e(x,Rs),e(Rs,rse),e(rse,Gpo),e(Rs,Opo),e(Rs,kI),e(kI,Vpo),e(Rs,Xpo),e(Rs,SI),e(SI,zpo),e(Rs,Wpo),e(x,Qpo),e(x,xp),e(xp,tse),e(tse,Hpo),e(xp,Upo),e(xp,RI),e(RI,Jpo),e(xp,Ypo),e(x,Kpo),e(x,$p),e($p,ase),e(ase,Zpo),e($p,euo),e($p,PI),e(PI,ouo),e($p,ruo),e(x,tuo),e(x,kp),e(kp,nse),e(nse,auo),e(kp,nuo),e(kp,BI),e(BI,suo),e(kp,luo),e(x,iuo),e(x,Sp),e(Sp,sse),e(sse,duo),e(Sp,cuo),e(Sp,II),e(II,fuo),e(Sp,muo),e(x,guo),e(x,Rp),e(Rp,lse),e(lse,huo),e(Rp,puo),e(Rp,qI),e(qI,uuo),e(Rp,_uo),e(x,buo),e(x,Pp),e(Pp,ise),e(ise,vuo),e(Pp,Fuo),e(Pp,NI),e(NI,Tuo),e(Pp,Muo),e(x,Euo),e(x,Bp),e(Bp,dse),e(dse,Cuo),e(Bp,wuo),e(Bp,jI),e(jI,Auo),e(Bp,yuo),e(x,Luo),e(x,Ip),e(Ip,cse),e(cse,xuo),e(Ip,$uo),e(Ip,DI),e(DI,kuo),e(Ip,Suo),e(x,Ruo),e(x,qp),e(qp,fse),e(fse,Puo),e(qp,Buo),e(qp,GI),e(GI,Iuo),e(qp,quo),e(x,Nuo),e(x,Np),e(Np,mse),e(mse,juo),e(Np,Duo),e(Np,OI),e(OI,Guo),e(Np,Ouo),e(x,Vuo),e(x,jp),e(jp,gse),e(gse,Xuo),e(jp,zuo),e(jp,VI),e(VI,Wuo),e(jp,Quo),e(x,Huo),e(x,Dp),e(Dp,hse),e(hse,Uuo),e(Dp,Juo),e(Dp,XI),e(XI,Yuo),e(Dp,Kuo),e(x,Zuo),e(x,Gp),e(Gp,pse),e(pse,e_o),e(Gp,o_o),e(Gp,zI),e(zI,r_o),e(Gp,t_o),e(x,a_o),e(x,Op),e(Op,use),e(use,n_o),e(Op,s_o),e(Op,WI),e(WI,l_o),e(Op,i_o),e(x,d_o),e(x,Vp),e(Vp,_se),e(_se,c_o),e(Vp,f_o),e(Vp,QI),e(QI,m_o),e(Vp,g_o),e(x,h_o),e(x,Xp),e(Xp,bse),e(bse,p_o),e(Xp,u_o),e(Xp,HI),e(HI,__o),e(Xp,b_o),e(x,v_o),e(x,zp),e(zp,vse),e(vse,F_o),e(zp,T_o),e(zp,UI),e(UI,M_o),e(zp,E_o),e(x,C_o),e(x,Wp),e(Wp,Fse),e(Fse,w_o),e(Wp,A_o),e(Wp,JI),e(JI,y_o),e(Wp,L_o),e(x,x_o),e(x,Qp),e(Qp,Tse),e(Tse,$_o),e(Qp,k_o),e(Qp,YI),e(YI,S_o),e(Qp,R_o),e(x,P_o),e(x,Hp),e(Hp,Mse),e(Mse,B_o),e(Hp,I_o),e(Hp,KI),e(KI,q_o),e(Hp,N_o),e(x,j_o),e(x,Up),e(Up,Ese),e(Ese,D_o),e(Up,G_o),e(Up,ZI),e(ZI,O_o),e(Up,V_o),e(x,X_o),e(x,Jp),e(Jp,Cse),e(Cse,z_o),e(Jp,W_o),e(Jp,eq),e(eq,Q_o),e(Jp,H_o),e(x,U_o),e(x,Yp),e(Yp,wse),e(wse,J_o),e(Yp,Y_o),e(Yp,oq),e(oq,K_o),e(Yp,Z_o),e(x,e2o),e(x,Kp),e(Kp,Ase),e(Ase,o2o),e(Kp,r2o),e(Kp,rq),e(rq,t2o),e(Kp,a2o),e(x,n2o),e(x,Zp),e(Zp,yse),e(yse,s2o),e(Zp,l2o),e(Zp,tq),e(tq,i2o),e(Zp,d2o),e(x,c2o),e(x,eu),e(eu,Lse),e(Lse,f2o),e(eu,m2o),e(eu,aq),e(aq,g2o),e(eu,h2o),e(x,p2o),e(x,ou),e(ou,xse),e(xse,u2o),e(ou,_2o),e(ou,nq),e(nq,b2o),e(ou,v2o),e(x,F2o),e(x,ru),e(ru,$se),e($se,T2o),e(ru,M2o),e(ru,sq),e(sq,E2o),e(ru,C2o),e(x,w2o),e(x,tu),e(tu,kse),e(kse,A2o),e(tu,y2o),e(tu,lq),e(lq,L2o),e(tu,x2o),e(x,$2o),e(x,au),e(au,Sse),e(Sse,k2o),e(au,S2o),e(au,iq),e(iq,R2o),e(au,P2o),e(x,B2o),e(x,nu),e(nu,Rse),e(Rse,I2o),e(nu,q2o),e(nu,dq),e(dq,N2o),e(nu,j2o),e(x,D2o),e(x,su),e(su,Pse),e(Pse,G2o),e(su,O2o),e(su,cq),e(cq,V2o),e(su,X2o),e(x,z2o),e(x,lu),e(lu,Bse),e(Bse,W2o),e(lu,Q2o),e(lu,fq),e(fq,H2o),e(lu,U2o),e(x,J2o),e(x,iu),e(iu,Ise),e(Ise,Y2o),e(iu,K2o),e(iu,mq),e(mq,Z2o),e(iu,e1o),e(x,o1o),e(x,du),e(du,qse),e(qse,r1o),e(du,t1o),e(du,gq),e(gq,a1o),e(du,n1o),e(x,s1o),e(x,cu),e(cu,Nse),e(Nse,l1o),e(cu,i1o),e(cu,hq),e(hq,d1o),e(cu,c1o),e(x,f1o),e(x,fu),e(fu,jse),e(jse,m1o),e(fu,g1o),e(fu,pq),e(pq,h1o),e(fu,p1o),e(x,u1o),e(x,mu),e(mu,Dse),e(Dse,_1o),e(mu,b1o),e(mu,uq),e(uq,v1o),e(mu,F1o),e(x,T1o),e(x,gu),e(gu,Gse),e(Gse,M1o),e(gu,E1o),e(gu,_q),e(_q,C1o),e(gu,w1o),e(x,A1o),e(x,hu),e(hu,Ose),e(Ose,y1o),e(hu,L1o),e(hu,bq),e(bq,x1o),e(hu,$1o),e(x,k1o),e(x,pu),e(pu,Vse),e(Vse,S1o),e(pu,R1o),e(pu,vq),e(vq,P1o),e(pu,B1o),e(x,I1o),e(x,uu),e(uu,Xse),e(Xse,q1o),e(uu,N1o),e(uu,Fq),e(Fq,j1o),e(uu,D1o),e(x,G1o),e(x,_u),e(_u,zse),e(zse,O1o),e(_u,V1o),e(_u,Tq),e(Tq,X1o),e(_u,z1o),e(x,W1o),e(x,bu),e(bu,Wse),e(Wse,Q1o),e(bu,H1o),e(bu,Mq),e(Mq,U1o),e(bu,J1o),e(x,Y1o),e(x,vu),e(vu,Qse),e(Qse,K1o),e(vu,Z1o),e(vu,Eq),e(Eq,ebo),e(vu,obo),e(x,rbo),e(x,Fu),e(Fu,Hse),e(Hse,tbo),e(Fu,abo),e(Fu,Cq),e(Cq,nbo),e(Fu,sbo),e(x,lbo),e(x,Tu),e(Tu,Use),e(Use,ibo),e(Tu,dbo),e(Tu,wq),e(wq,cbo),e(Tu,fbo),e(x,mbo),e(x,Mu),e(Mu,Jse),e(Jse,gbo),e(Mu,hbo),e(Mu,Aq),e(Aq,pbo),e(Mu,ubo),e(x,_bo),e(x,Eu),e(Eu,Yse),e(Yse,bbo),e(Eu,vbo),e(Eu,yq),e(yq,Fbo),e(Eu,Tbo),e(x,Mbo),e(x,Cu),e(Cu,Kse),e(Kse,Ebo),e(Cu,Cbo),e(Cu,Lq),e(Lq,wbo),e(Cu,Abo),e(x,ybo),e(x,wu),e(wu,Zse),e(Zse,Lbo),e(wu,xbo),e(wu,xq),e(xq,$bo),e(wu,kbo),e(x,Sbo),e(x,Au),e(Au,ele),e(ele,Rbo),e(Au,Pbo),e(Au,$q),e($q,Bbo),e(Au,Ibo),e(x,qbo),e(x,yu),e(yu,ole),e(ole,Nbo),e(yu,jbo),e(yu,kq),e(kq,Dbo),e(yu,Gbo),e(x,Obo),e(x,Lu),e(Lu,rle),e(rle,Vbo),e(Lu,Xbo),e(Lu,Sq),e(Sq,zbo),e(Lu,Wbo),e(x,Qbo),e(x,xu),e(xu,tle),e(tle,Hbo),e(xu,Ubo),e(xu,Rq),e(Rq,Jbo),e(xu,Ybo),e(x,Kbo),e(x,$u),e($u,ale),e(ale,Zbo),e($u,evo),e($u,Pq),e(Pq,ovo),e($u,rvo),e(x,tvo),e(x,ku),e(ku,nle),e(nle,avo),e(ku,nvo),e(ku,Bq),e(Bq,svo),e(ku,lvo),e(x,ivo),e(x,Su),e(Su,sle),e(sle,dvo),e(Su,cvo),e(Su,Iq),e(Iq,fvo),e(Su,mvo),e(x,gvo),e(x,Ru),e(Ru,lle),e(lle,hvo),e(Ru,pvo),e(Ru,qq),e(qq,uvo),e(Ru,_vo),e(x,bvo),e(x,Pu),e(Pu,ile),e(ile,vvo),e(Pu,Fvo),e(Pu,Nq),e(Nq,Tvo),e(Pu,Mvo),e(x,Evo),e(x,Bu),e(Bu,dle),e(dle,Cvo),e(Bu,wvo),e(Bu,jq),e(jq,Avo),e(Bu,yvo),e(x,Lvo),e(x,Iu),e(Iu,cle),e(cle,xvo),e(Iu,$vo),e(Iu,Dq),e(Dq,kvo),e(Iu,Svo),e(x,Rvo),e(x,qu),e(qu,fle),e(fle,Pvo),e(qu,Bvo),e(qu,Gq),e(Gq,Ivo),e(qu,qvo),e(x,Nvo),e(x,Nu),e(Nu,mle),e(mle,jvo),e(Nu,Dvo),e(Nu,Oq),e(Oq,Gvo),e(Nu,Ovo),e(x,Vvo),e(x,ju),e(ju,gle),e(gle,Xvo),e(ju,zvo),e(ju,Vq),e(Vq,Wvo),e(ju,Qvo),e(x,Hvo),e(x,Du),e(Du,hle),e(hle,Uvo),e(Du,Jvo),e(Du,Xq),e(Xq,Yvo),e(Du,Kvo),e(Je,Zvo),e(Je,Gu),e(Gu,eFo),e(Gu,ple),e(ple,oFo),e(Gu,rFo),e(Gu,ule),e(ule,tFo),e(Je,aFo),M(Ou,Je,null),b(f,DIe,_),b(f,yi,_),e(yi,Vu),e(Vu,_le),M(NA,_le,null),e(yi,nFo),e(yi,ble),e(ble,sFo),b(f,GIe,_),b(f,xo,_),M(jA,xo,null),e(xo,lFo),e(xo,Li),e(Li,iFo),e(Li,zq),e(zq,dFo),e(Li,cFo),e(Li,Wq),e(Wq,fFo),e(Li,mFo),e(xo,gFo),e(xo,DA),e(DA,hFo),e(DA,vle),e(vle,pFo),e(DA,uFo),e(xo,_Fo),e(xo,at),M(GA,at,null),e(at,bFo),e(at,Fle),e(Fle,vFo),e(at,FFo),e(at,xi),e(xi,TFo),e(xi,Tle),e(Tle,MFo),e(xi,EFo),e(xi,Qq),e(Qq,CFo),e(xi,wFo),e(at,AFo),M(Xu,at,null),e(xo,yFo),e(xo,Ye),M(OA,Ye,null),e(Ye,LFo),e(Ye,Mle),e(Mle,xFo),e(Ye,$Fo),e(Ye,xa),e(xa,kFo),e(xa,Ele),e(Ele,SFo),e(xa,RFo),e(xa,Cle),e(Cle,PFo),e(xa,BFo),e(xa,wle),e(wle,IFo),e(xa,qFo),e(Ye,NFo),e(Ye,G),e(G,zu),e(zu,Ale),e(Ale,jFo),e(zu,DFo),e(zu,Hq),e(Hq,GFo),e(zu,OFo),e(G,VFo),e(G,Wu),e(Wu,yle),e(yle,XFo),e(Wu,zFo),e(Wu,Uq),e(Uq,WFo),e(Wu,QFo),e(G,HFo),e(G,Qu),e(Qu,Lle),e(Lle,UFo),e(Qu,JFo),e(Qu,Jq),e(Jq,YFo),e(Qu,KFo),e(G,ZFo),e(G,Hu),e(Hu,xle),e(xle,e6o),e(Hu,o6o),e(Hu,Yq),e(Yq,r6o),e(Hu,t6o),e(G,a6o),e(G,Uu),e(Uu,$le),e($le,n6o),e(Uu,s6o),e(Uu,Kq),e(Kq,l6o),e(Uu,i6o),e(G,d6o),e(G,Ju),e(Ju,kle),e(kle,c6o),e(Ju,f6o),e(Ju,Zq),e(Zq,m6o),e(Ju,g6o),e(G,h6o),e(G,Yu),e(Yu,Sle),e(Sle,p6o),e(Yu,u6o),e(Yu,eN),e(eN,_6o),e(Yu,b6o),e(G,v6o),e(G,Ku),e(Ku,Rle),e(Rle,F6o),e(Ku,T6o),e(Ku,oN),e(oN,M6o),e(Ku,E6o),e(G,C6o),e(G,Zu),e(Zu,Ple),e(Ple,w6o),e(Zu,A6o),e(Zu,rN),e(rN,y6o),e(Zu,L6o),e(G,x6o),e(G,e_),e(e_,Ble),e(Ble,$6o),e(e_,k6o),e(e_,tN),e(tN,S6o),e(e_,R6o),e(G,P6o),e(G,o_),e(o_,Ile),e(Ile,B6o),e(o_,I6o),e(o_,aN),e(aN,q6o),e(o_,N6o),e(G,j6o),e(G,r_),e(r_,qle),e(qle,D6o),e(r_,G6o),e(r_,nN),e(nN,O6o),e(r_,V6o),e(G,X6o),e(G,t_),e(t_,Nle),e(Nle,z6o),e(t_,W6o),e(t_,sN),e(sN,Q6o),e(t_,H6o),e(G,U6o),e(G,a_),e(a_,jle),e(jle,J6o),e(a_,Y6o),e(a_,lN),e(lN,K6o),e(a_,Z6o),e(G,e0o),e(G,n_),e(n_,Dle),e(Dle,o0o),e(n_,r0o),e(n_,iN),e(iN,t0o),e(n_,a0o),e(G,n0o),e(G,s_),e(s_,Gle),e(Gle,s0o),e(s_,l0o),e(s_,dN),e(dN,i0o),e(s_,d0o),e(G,c0o),e(G,l_),e(l_,Ole),e(Ole,f0o),e(l_,m0o),e(l_,cN),e(cN,g0o),e(l_,h0o),e(G,p0o),e(G,i_),e(i_,Vle),e(Vle,u0o),e(i_,_0o),e(i_,fN),e(fN,b0o),e(i_,v0o),e(G,F0o),e(G,d_),e(d_,Xle),e(Xle,T0o),e(d_,M0o),e(d_,mN),e(mN,E0o),e(d_,C0o),e(G,w0o),e(G,c_),e(c_,zle),e(zle,A0o),e(c_,y0o),e(c_,gN),e(gN,L0o),e(c_,x0o),e(G,$0o),e(G,f_),e(f_,Wle),e(Wle,k0o),e(f_,S0o),e(f_,hN),e(hN,R0o),e(f_,P0o),e(G,B0o),e(G,m_),e(m_,Qle),e(Qle,I0o),e(m_,q0o),e(m_,pN),e(pN,N0o),e(m_,j0o),e(G,D0o),e(G,g_),e(g_,Hle),e(Hle,G0o),e(g_,O0o),e(g_,uN),e(uN,V0o),e(g_,X0o),e(G,z0o),e(G,h_),e(h_,Ule),e(Ule,W0o),e(h_,Q0o),e(h_,_N),e(_N,H0o),e(h_,U0o),e(G,J0o),e(G,p_),e(p_,Jle),e(Jle,Y0o),e(p_,K0o),e(p_,bN),e(bN,Z0o),e(p_,eTo),e(G,oTo),e(G,u_),e(u_,Yle),e(Yle,rTo),e(u_,tTo),e(u_,vN),e(vN,aTo),e(u_,nTo),e(G,sTo),e(G,__),e(__,Kle),e(Kle,lTo),e(__,iTo),e(__,FN),e(FN,dTo),e(__,cTo),e(G,fTo),e(G,b_),e(b_,Zle),e(Zle,mTo),e(b_,gTo),e(b_,TN),e(TN,hTo),e(b_,pTo),e(G,uTo),e(G,v_),e(v_,eie),e(eie,_To),e(v_,bTo),e(v_,MN),e(MN,vTo),e(v_,FTo),e(G,TTo),e(G,F_),e(F_,oie),e(oie,MTo),e(F_,ETo),e(F_,EN),e(EN,CTo),e(F_,wTo),e(G,ATo),e(G,T_),e(T_,rie),e(rie,yTo),e(T_,LTo),e(T_,CN),e(CN,xTo),e(T_,$To),e(G,kTo),e(G,M_),e(M_,tie),e(tie,STo),e(M_,RTo),e(M_,wN),e(wN,PTo),e(M_,BTo),e(G,ITo),e(G,E_),e(E_,aie),e(aie,qTo),e(E_,NTo),e(E_,AN),e(AN,jTo),e(E_,DTo),e(G,GTo),e(G,C_),e(C_,nie),e(nie,OTo),e(C_,VTo),e(C_,yN),e(yN,XTo),e(C_,zTo),e(G,WTo),e(G,w_),e(w_,sie),e(sie,QTo),e(w_,HTo),e(w_,LN),e(LN,UTo),e(w_,JTo),e(G,YTo),e(G,A_),e(A_,lie),e(lie,KTo),e(A_,ZTo),e(A_,xN),e(xN,e7o),e(A_,o7o),e(G,r7o),e(G,y_),e(y_,iie),e(iie,t7o),e(y_,a7o),e(y_,$N),e($N,n7o),e(y_,s7o),e(G,l7o),e(G,L_),e(L_,die),e(die,i7o),e(L_,d7o),e(L_,kN),e(kN,c7o),e(L_,f7o),e(G,m7o),e(G,x_),e(x_,cie),e(cie,g7o),e(x_,h7o),e(x_,SN),e(SN,p7o),e(x_,u7o),e(G,_7o),e(G,$_),e($_,fie),e(fie,b7o),e($_,v7o),e($_,RN),e(RN,F7o),e($_,T7o),e(G,M7o),e(G,k_),e(k_,mie),e(mie,E7o),e(k_,C7o),e(k_,PN),e(PN,w7o),e(k_,A7o),e(Ye,y7o),e(Ye,S_),e(S_,L7o),e(S_,gie),e(gie,x7o),e(S_,$7o),e(S_,hie),e(hie,k7o),e(Ye,S7o),M(R_,Ye,null),b(f,OIe,_),b(f,$i,_),e($i,P_),e(P_,pie),M(VA,pie,null),e($i,R7o),e($i,uie),e(uie,P7o),b(f,VIe,_),b(f,$o,_),M(XA,$o,null),e($o,B7o),e($o,ki),e(ki,I7o),e(ki,BN),e(BN,q7o),e(ki,N7o),e(ki,IN),e(IN,j7o),e(ki,D7o),e($o,G7o),e($o,zA),e(zA,O7o),e(zA,_ie),e(_ie,V7o),e(zA,X7o),e($o,z7o),e($o,nt),M(WA,nt,null),e(nt,W7o),e(nt,bie),e(bie,Q7o),e(nt,H7o),e(nt,Si),e(Si,U7o),e(Si,vie),e(vie,J7o),e(Si,Y7o),e(Si,qN),e(qN,K7o),e(Si,Z7o),e(nt,eMo),M(B_,nt,null),e($o,oMo),e($o,Ke),M(QA,Ke,null),e(Ke,rMo),e(Ke,Fie),e(Fie,tMo),e(Ke,aMo),e(Ke,$a),e($a,nMo),e($a,Tie),e(Tie,sMo),e($a,lMo),e($a,Mie),e(Mie,iMo),e($a,dMo),e($a,Eie),e(Eie,cMo),e($a,fMo),e(Ke,mMo),e(Ke,z),e(z,I_),e(I_,Cie),e(Cie,gMo),e(I_,hMo),e(I_,NN),e(NN,pMo),e(I_,uMo),e(z,_Mo),e(z,q_),e(q_,wie),e(wie,bMo),e(q_,vMo),e(q_,jN),e(jN,FMo),e(q_,TMo),e(z,MMo),e(z,N_),e(N_,Aie),e(Aie,EMo),e(N_,CMo),e(N_,DN),e(DN,wMo),e(N_,AMo),e(z,yMo),e(z,j_),e(j_,yie),e(yie,LMo),e(j_,xMo),e(j_,GN),e(GN,$Mo),e(j_,kMo),e(z,SMo),e(z,D_),e(D_,Lie),e(Lie,RMo),e(D_,PMo),e(D_,ON),e(ON,BMo),e(D_,IMo),e(z,qMo),e(z,G_),e(G_,xie),e(xie,NMo),e(G_,jMo),e(G_,VN),e(VN,DMo),e(G_,GMo),e(z,OMo),e(z,O_),e(O_,$ie),e($ie,VMo),e(O_,XMo),e(O_,XN),e(XN,zMo),e(O_,WMo),e(z,QMo),e(z,V_),e(V_,kie),e(kie,HMo),e(V_,UMo),e(V_,zN),e(zN,JMo),e(V_,YMo),e(z,KMo),e(z,X_),e(X_,Sie),e(Sie,ZMo),e(X_,e4o),e(X_,WN),e(WN,o4o),e(X_,r4o),e(z,t4o),e(z,z_),e(z_,Rie),e(Rie,a4o),e(z_,n4o),e(z_,QN),e(QN,s4o),e(z_,l4o),e(z,i4o),e(z,W_),e(W_,Pie),e(Pie,d4o),e(W_,c4o),e(W_,HN),e(HN,f4o),e(W_,m4o),e(z,g4o),e(z,Q_),e(Q_,Bie),e(Bie,h4o),e(Q_,p4o),e(Q_,UN),e(UN,u4o),e(Q_,_4o),e(z,b4o),e(z,H_),e(H_,Iie),e(Iie,v4o),e(H_,F4o),e(H_,JN),e(JN,T4o),e(H_,M4o),e(z,E4o),e(z,U_),e(U_,qie),e(qie,C4o),e(U_,w4o),e(U_,YN),e(YN,A4o),e(U_,y4o),e(z,L4o),e(z,J_),e(J_,Nie),e(Nie,x4o),e(J_,$4o),e(J_,KN),e(KN,k4o),e(J_,S4o),e(z,R4o),e(z,Y_),e(Y_,jie),e(jie,P4o),e(Y_,B4o),e(Y_,ZN),e(ZN,I4o),e(Y_,q4o),e(z,N4o),e(z,K_),e(K_,Die),e(Die,j4o),e(K_,D4o),e(K_,ej),e(ej,G4o),e(K_,O4o),e(z,V4o),e(z,Z_),e(Z_,Gie),e(Gie,X4o),e(Z_,z4o),e(Z_,oj),e(oj,W4o),e(Z_,Q4o),e(z,H4o),e(z,e2),e(e2,Oie),e(Oie,U4o),e(e2,J4o),e(e2,rj),e(rj,Y4o),e(e2,K4o),e(z,Z4o),e(z,o2),e(o2,Vie),e(Vie,eEo),e(o2,oEo),e(o2,tj),e(tj,rEo),e(o2,tEo),e(z,aEo),e(z,r2),e(r2,Xie),e(Xie,nEo),e(r2,sEo),e(r2,aj),e(aj,lEo),e(r2,iEo),e(z,dEo),e(z,t2),e(t2,zie),e(zie,cEo),e(t2,fEo),e(t2,nj),e(nj,mEo),e(t2,gEo),e(z,hEo),e(z,a2),e(a2,Wie),e(Wie,pEo),e(a2,uEo),e(a2,sj),e(sj,_Eo),e(a2,bEo),e(z,vEo),e(z,n2),e(n2,Qie),e(Qie,FEo),e(n2,TEo),e(n2,lj),e(lj,MEo),e(n2,EEo),e(z,CEo),e(z,s2),e(s2,Hie),e(Hie,wEo),e(s2,AEo),e(s2,ij),e(ij,yEo),e(s2,LEo),e(z,xEo),e(z,l2),e(l2,Uie),e(Uie,$Eo),e(l2,kEo),e(l2,dj),e(dj,SEo),e(l2,REo),e(z,PEo),e(z,i2),e(i2,Jie),e(Jie,BEo),e(i2,IEo),e(i2,cj),e(cj,qEo),e(i2,NEo),e(z,jEo),e(z,d2),e(d2,Yie),e(Yie,DEo),e(d2,GEo),e(d2,fj),e(fj,OEo),e(d2,VEo),e(z,XEo),e(z,c2),e(c2,Kie),e(Kie,zEo),e(c2,WEo),e(c2,mj),e(mj,QEo),e(c2,HEo),e(z,UEo),e(z,f2),e(f2,Zie),e(Zie,JEo),e(f2,YEo),e(f2,gj),e(gj,KEo),e(f2,ZEo),e(z,eCo),e(z,m2),e(m2,ede),e(ede,oCo),e(m2,rCo),e(m2,hj),e(hj,tCo),e(m2,aCo),e(z,nCo),e(z,g2),e(g2,ode),e(ode,sCo),e(g2,lCo),e(g2,pj),e(pj,iCo),e(g2,dCo),e(z,cCo),e(z,h2),e(h2,rde),e(rde,fCo),e(h2,mCo),e(h2,uj),e(uj,gCo),e(h2,hCo),e(z,pCo),e(z,p2),e(p2,tde),e(tde,uCo),e(p2,_Co),e(p2,_j),e(_j,bCo),e(p2,vCo),e(z,FCo),e(z,u2),e(u2,ade),e(ade,TCo),e(u2,MCo),e(u2,bj),e(bj,ECo),e(u2,CCo),e(z,wCo),e(z,_2),e(_2,nde),e(nde,ACo),e(_2,yCo),e(_2,vj),e(vj,LCo),e(_2,xCo),e(Ke,$Co),e(Ke,b2),e(b2,kCo),e(b2,sde),e(sde,SCo),e(b2,RCo),e(b2,lde),e(lde,PCo),e(Ke,BCo),M(v2,Ke,null),b(f,XIe,_),b(f,Ri,_),e(Ri,F2),e(F2,ide),M(HA,ide,null),e(Ri,ICo),e(Ri,dde),e(dde,qCo),b(f,zIe,_),b(f,ko,_),M(UA,ko,null),e(ko,NCo),e(ko,Pi),e(Pi,jCo),e(Pi,Fj),e(Fj,DCo),e(Pi,GCo),e(Pi,Tj),e(Tj,OCo),e(Pi,VCo),e(ko,XCo),e(ko,JA),e(JA,zCo),e(JA,cde),e(cde,WCo),e(JA,QCo),e(ko,HCo),e(ko,st),M(YA,st,null),e(st,UCo),e(st,fde),e(fde,JCo),e(st,YCo),e(st,Bi),e(Bi,KCo),e(Bi,mde),e(mde,ZCo),e(Bi,e5o),e(Bi,Mj),e(Mj,o5o),e(Bi,r5o),e(st,t5o),M(T2,st,null),e(ko,a5o),e(ko,Ze),M(KA,Ze,null),e(Ze,n5o),e(Ze,gde),e(gde,s5o),e(Ze,l5o),e(Ze,ka),e(ka,i5o),e(ka,hde),e(hde,d5o),e(ka,c5o),e(ka,pde),e(pde,f5o),e(ka,m5o),e(ka,ude),e(ude,g5o),e(ka,h5o),e(Ze,p5o),e(Ze,W),e(W,M2),e(M2,_de),e(_de,u5o),e(M2,_5o),e(M2,Ej),e(Ej,b5o),e(M2,v5o),e(W,F5o),e(W,E2),e(E2,bde),e(bde,T5o),e(E2,M5o),e(E2,Cj),e(Cj,E5o),e(E2,C5o),e(W,w5o),e(W,C2),e(C2,vde),e(vde,A5o),e(C2,y5o),e(C2,wj),e(wj,L5o),e(C2,x5o),e(W,$5o),e(W,w2),e(w2,Fde),e(Fde,k5o),e(w2,S5o),e(w2,Aj),e(Aj,R5o),e(w2,P5o),e(W,B5o),e(W,A2),e(A2,Tde),e(Tde,I5o),e(A2,q5o),e(A2,yj),e(yj,N5o),e(A2,j5o),e(W,D5o),e(W,y2),e(y2,Mde),e(Mde,G5o),e(y2,O5o),e(y2,Lj),e(Lj,V5o),e(y2,X5o),e(W,z5o),e(W,L2),e(L2,Ede),e(Ede,W5o),e(L2,Q5o),e(L2,xj),e(xj,H5o),e(L2,U5o),e(W,J5o),e(W,x2),e(x2,Cde),e(Cde,Y5o),e(x2,K5o),e(x2,$j),e($j,Z5o),e(x2,e3o),e(W,o3o),e(W,$2),e($2,wde),e(wde,r3o),e($2,t3o),e($2,kj),e(kj,a3o),e($2,n3o),e(W,s3o),e(W,k2),e(k2,Ade),e(Ade,l3o),e(k2,i3o),e(k2,Sj),e(Sj,d3o),e(k2,c3o),e(W,f3o),e(W,S2),e(S2,yde),e(yde,m3o),e(S2,g3o),e(S2,Rj),e(Rj,h3o),e(S2,p3o),e(W,u3o),e(W,R2),e(R2,Lde),e(Lde,_3o),e(R2,b3o),e(R2,Pj),e(Pj,v3o),e(R2,F3o),e(W,T3o),e(W,P2),e(P2,xde),e(xde,M3o),e(P2,E3o),e(P2,Bj),e(Bj,C3o),e(P2,w3o),e(W,A3o),e(W,B2),e(B2,$de),e($de,y3o),e(B2,L3o),e(B2,Ij),e(Ij,x3o),e(B2,$3o),e(W,k3o),e(W,I2),e(I2,kde),e(kde,S3o),e(I2,R3o),e(I2,qj),e(qj,P3o),e(I2,B3o),e(W,I3o),e(W,q2),e(q2,Sde),e(Sde,q3o),e(q2,N3o),e(q2,Nj),e(Nj,j3o),e(q2,D3o),e(W,G3o),e(W,N2),e(N2,Rde),e(Rde,O3o),e(N2,V3o),e(N2,jj),e(jj,X3o),e(N2,z3o),e(W,W3o),e(W,j2),e(j2,Pde),e(Pde,Q3o),e(j2,H3o),e(j2,Dj),e(Dj,U3o),e(j2,J3o),e(W,Y3o),e(W,D2),e(D2,Bde),e(Bde,K3o),e(D2,Z3o),e(D2,Gj),e(Gj,ewo),e(D2,owo),e(W,rwo),e(W,G2),e(G2,Ide),e(Ide,two),e(G2,awo),e(G2,Oj),e(Oj,nwo),e(G2,swo),e(W,lwo),e(W,O2),e(O2,qde),e(qde,iwo),e(O2,dwo),e(O2,Vj),e(Vj,cwo),e(O2,fwo),e(W,mwo),e(W,V2),e(V2,Nde),e(Nde,gwo),e(V2,hwo),e(V2,Xj),e(Xj,pwo),e(V2,uwo),e(W,_wo),e(W,X2),e(X2,jde),e(jde,bwo),e(X2,vwo),e(X2,zj),e(zj,Fwo),e(X2,Two),e(W,Mwo),e(W,z2),e(z2,Dde),e(Dde,Ewo),e(z2,Cwo),e(z2,Wj),e(Wj,wwo),e(z2,Awo),e(W,ywo),e(W,W2),e(W2,Gde),e(Gde,Lwo),e(W2,xwo),e(W2,Qj),e(Qj,$wo),e(W2,kwo),e(W,Swo),e(W,Q2),e(Q2,Ode),e(Ode,Rwo),e(Q2,Pwo),e(Q2,Hj),e(Hj,Bwo),e(Q2,Iwo),e(W,qwo),e(W,H2),e(H2,Vde),e(Vde,Nwo),e(H2,jwo),e(H2,Uj),e(Uj,Dwo),e(H2,Gwo),e(W,Owo),e(W,U2),e(U2,Xde),e(Xde,Vwo),e(U2,Xwo),e(U2,Jj),e(Jj,zwo),e(U2,Wwo),e(W,Qwo),e(W,J2),e(J2,zde),e(zde,Hwo),e(J2,Uwo),e(J2,Yj),e(Yj,Jwo),e(J2,Ywo),e(W,Kwo),e(W,Y2),e(Y2,Wde),e(Wde,Zwo),e(Y2,eAo),e(Y2,Kj),e(Kj,oAo),e(Y2,rAo),e(W,tAo),e(W,K2),e(K2,Qde),e(Qde,aAo),e(K2,nAo),e(K2,Hde),e(Hde,sAo),e(K2,lAo),e(W,iAo),e(W,Z2),e(Z2,Ude),e(Ude,dAo),e(Z2,cAo),e(Z2,Zj),e(Zj,fAo),e(Z2,mAo),e(W,gAo),e(W,e1),e(e1,Jde),e(Jde,hAo),e(e1,pAo),e(e1,eD),e(eD,uAo),e(e1,_Ao),e(W,bAo),e(W,o1),e(o1,Yde),e(Yde,vAo),e(o1,FAo),e(o1,oD),e(oD,TAo),e(o1,MAo),e(W,EAo),e(W,r1),e(r1,Kde),e(Kde,CAo),e(r1,wAo),e(r1,rD),e(rD,AAo),e(r1,yAo),e(Ze,LAo),e(Ze,t1),e(t1,xAo),e(t1,Zde),e(Zde,$Ao),e(t1,kAo),e(t1,ece),e(ece,SAo),e(Ze,RAo),M(a1,Ze,null),b(f,WIe,_),b(f,Ii,_),e(Ii,n1),e(n1,oce),M(ZA,oce,null),e(Ii,PAo),e(Ii,rce),e(rce,BAo),b(f,QIe,_),b(f,So,_),M(ey,So,null),e(So,IAo),e(So,qi),e(qi,qAo),e(qi,tD),e(tD,NAo),e(qi,jAo),e(qi,aD),e(aD,DAo),e(qi,GAo),e(So,OAo),e(So,oy),e(oy,VAo),e(oy,tce),e(tce,XAo),e(oy,zAo),e(So,WAo),e(So,lt),M(ry,lt,null),e(lt,QAo),e(lt,ace),e(ace,HAo),e(lt,UAo),e(lt,Ni),e(Ni,JAo),e(Ni,nce),e(nce,YAo),e(Ni,KAo),e(Ni,nD),e(nD,ZAo),e(Ni,eyo),e(lt,oyo),M(s1,lt,null),e(So,ryo),e(So,eo),M(ty,eo,null),e(eo,tyo),e(eo,sce),e(sce,ayo),e(eo,nyo),e(eo,Sa),e(Sa,syo),e(Sa,lce),e(lce,lyo),e(Sa,iyo),e(Sa,ice),e(ice,dyo),e(Sa,cyo),e(Sa,dce),e(dce,fyo),e(Sa,myo),e(eo,gyo),e(eo,ue),e(ue,l1),e(l1,cce),e(cce,hyo),e(l1,pyo),e(l1,sD),e(sD,uyo),e(l1,_yo),e(ue,byo),e(ue,i1),e(i1,fce),e(fce,vyo),e(i1,Fyo),e(i1,lD),e(lD,Tyo),e(i1,Myo),e(ue,Eyo),e(ue,d1),e(d1,mce),e(mce,Cyo),e(d1,wyo),e(d1,iD),e(iD,Ayo),e(d1,yyo),e(ue,Lyo),e(ue,c1),e(c1,gce),e(gce,xyo),e(c1,$yo),e(c1,dD),e(dD,kyo),e(c1,Syo),e(ue,Ryo),e(ue,f1),e(f1,hce),e(hce,Pyo),e(f1,Byo),e(f1,cD),e(cD,Iyo),e(f1,qyo),e(ue,Nyo),e(ue,m1),e(m1,pce),e(pce,jyo),e(m1,Dyo),e(m1,fD),e(fD,Gyo),e(m1,Oyo),e(ue,Vyo),e(ue,g1),e(g1,uce),e(uce,Xyo),e(g1,zyo),e(g1,mD),e(mD,Wyo),e(g1,Qyo),e(ue,Hyo),e(ue,h1),e(h1,_ce),e(_ce,Uyo),e(h1,Jyo),e(h1,gD),e(gD,Yyo),e(h1,Kyo),e(ue,Zyo),e(ue,p1),e(p1,bce),e(bce,eLo),e(p1,oLo),e(p1,hD),e(hD,rLo),e(p1,tLo),e(ue,aLo),e(ue,u1),e(u1,vce),e(vce,nLo),e(u1,sLo),e(u1,pD),e(pD,lLo),e(u1,iLo),e(ue,dLo),e(ue,_1),e(_1,Fce),e(Fce,cLo),e(_1,fLo),e(_1,uD),e(uD,mLo),e(_1,gLo),e(ue,hLo),e(ue,b1),e(b1,Tce),e(Tce,pLo),e(b1,uLo),e(b1,_D),e(_D,_Lo),e(b1,bLo),e(ue,vLo),e(ue,v1),e(v1,Mce),e(Mce,FLo),e(v1,TLo),e(v1,bD),e(bD,MLo),e(v1,ELo),e(ue,CLo),e(ue,F1),e(F1,Ece),e(Ece,wLo),e(F1,ALo),e(F1,vD),e(vD,yLo),e(F1,LLo),e(ue,xLo),e(ue,T1),e(T1,Cce),e(Cce,$Lo),e(T1,kLo),e(T1,FD),e(FD,SLo),e(T1,RLo),e(ue,PLo),e(ue,M1),e(M1,wce),e(wce,BLo),e(M1,ILo),e(M1,TD),e(TD,qLo),e(M1,NLo),e(eo,jLo),e(eo,E1),e(E1,DLo),e(E1,Ace),e(Ace,GLo),e(E1,OLo),e(E1,yce),e(yce,VLo),e(eo,XLo),M(C1,eo,null),b(f,HIe,_),b(f,ji,_),e(ji,w1),e(w1,Lce),M(ay,Lce,null),e(ji,zLo),e(ji,xce),e(xce,WLo),b(f,UIe,_),b(f,Ro,_),M(ny,Ro,null),e(Ro,QLo),e(Ro,Di),e(Di,HLo),e(Di,MD),e(MD,ULo),e(Di,JLo),e(Di,ED),e(ED,YLo),e(Di,KLo),e(Ro,ZLo),e(Ro,sy),e(sy,e8o),e(sy,$ce),e($ce,o8o),e(sy,r8o),e(Ro,t8o),e(Ro,it),M(ly,it,null),e(it,a8o),e(it,kce),e(kce,n8o),e(it,s8o),e(it,Gi),e(Gi,l8o),e(Gi,Sce),e(Sce,i8o),e(Gi,d8o),e(Gi,CD),e(CD,c8o),e(Gi,f8o),e(it,m8o),M(A1,it,null),e(Ro,g8o),e(Ro,oo),M(iy,oo,null),e(oo,h8o),e(oo,Rce),e(Rce,p8o),e(oo,u8o),e(oo,Ra),e(Ra,_8o),e(Ra,Pce),e(Pce,b8o),e(Ra,v8o),e(Ra,Bce),e(Bce,F8o),e(Ra,T8o),e(Ra,Ice),e(Ice,M8o),e(Ra,E8o),e(oo,C8o),e(oo,q),e(q,y1),e(y1,qce),e(qce,w8o),e(y1,A8o),e(y1,wD),e(wD,y8o),e(y1,L8o),e(q,x8o),e(q,L1),e(L1,Nce),e(Nce,$8o),e(L1,k8o),e(L1,AD),e(AD,S8o),e(L1,R8o),e(q,P8o),e(q,x1),e(x1,jce),e(jce,B8o),e(x1,I8o),e(x1,yD),e(yD,q8o),e(x1,N8o),e(q,j8o),e(q,$1),e($1,Dce),e(Dce,D8o),e($1,G8o),e($1,LD),e(LD,O8o),e($1,V8o),e(q,X8o),e(q,k1),e(k1,Gce),e(Gce,z8o),e(k1,W8o),e(k1,xD),e(xD,Q8o),e(k1,H8o),e(q,U8o),e(q,S1),e(S1,Oce),e(Oce,J8o),e(S1,Y8o),e(S1,$D),e($D,K8o),e(S1,Z8o),e(q,exo),e(q,R1),e(R1,Vce),e(Vce,oxo),e(R1,rxo),e(R1,kD),e(kD,txo),e(R1,axo),e(q,nxo),e(q,P1),e(P1,Xce),e(Xce,sxo),e(P1,lxo),e(P1,SD),e(SD,ixo),e(P1,dxo),e(q,cxo),e(q,B1),e(B1,zce),e(zce,fxo),e(B1,mxo),e(B1,RD),e(RD,gxo),e(B1,hxo),e(q,pxo),e(q,I1),e(I1,Wce),e(Wce,uxo),e(I1,_xo),e(I1,PD),e(PD,bxo),e(I1,vxo),e(q,Fxo),e(q,q1),e(q1,Qce),e(Qce,Txo),e(q1,Mxo),e(q1,BD),e(BD,Exo),e(q1,Cxo),e(q,wxo),e(q,N1),e(N1,Hce),e(Hce,Axo),e(N1,yxo),e(N1,ID),e(ID,Lxo),e(N1,xxo),e(q,$xo),e(q,j1),e(j1,Uce),e(Uce,kxo),e(j1,Sxo),e(j1,qD),e(qD,Rxo),e(j1,Pxo),e(q,Bxo),e(q,D1),e(D1,Jce),e(Jce,Ixo),e(D1,qxo),e(D1,ND),e(ND,Nxo),e(D1,jxo),e(q,Dxo),e(q,G1),e(G1,Yce),e(Yce,Gxo),e(G1,Oxo),e(G1,jD),e(jD,Vxo),e(G1,Xxo),e(q,zxo),e(q,O1),e(O1,Kce),e(Kce,Wxo),e(O1,Qxo),e(O1,DD),e(DD,Hxo),e(O1,Uxo),e(q,Jxo),e(q,V1),e(V1,Zce),e(Zce,Yxo),e(V1,Kxo),e(V1,GD),e(GD,Zxo),e(V1,e9o),e(q,o9o),e(q,X1),e(X1,efe),e(efe,r9o),e(X1,t9o),e(X1,OD),e(OD,a9o),e(X1,n9o),e(q,s9o),e(q,z1),e(z1,ofe),e(ofe,l9o),e(z1,i9o),e(z1,VD),e(VD,d9o),e(z1,c9o),e(q,f9o),e(q,W1),e(W1,rfe),e(rfe,m9o),e(W1,g9o),e(W1,XD),e(XD,h9o),e(W1,p9o),e(q,u9o),e(q,Q1),e(Q1,tfe),e(tfe,_9o),e(Q1,b9o),e(Q1,zD),e(zD,v9o),e(Q1,F9o),e(q,T9o),e(q,H1),e(H1,afe),e(afe,M9o),e(H1,E9o),e(H1,WD),e(WD,C9o),e(H1,w9o),e(q,A9o),e(q,U1),e(U1,nfe),e(nfe,y9o),e(U1,L9o),e(U1,QD),e(QD,x9o),e(U1,$9o),e(q,k9o),e(q,J1),e(J1,sfe),e(sfe,S9o),e(J1,R9o),e(J1,HD),e(HD,P9o),e(J1,B9o),e(q,I9o),e(q,Y1),e(Y1,lfe),e(lfe,q9o),e(Y1,N9o),e(Y1,UD),e(UD,j9o),e(Y1,D9o),e(q,G9o),e(q,K1),e(K1,ife),e(ife,O9o),e(K1,V9o),e(K1,JD),e(JD,X9o),e(K1,z9o),e(q,W9o),e(q,Z1),e(Z1,dfe),e(dfe,Q9o),e(Z1,H9o),e(Z1,YD),e(YD,U9o),e(Z1,J9o),e(q,Y9o),e(q,eb),e(eb,cfe),e(cfe,K9o),e(eb,Z9o),e(eb,KD),e(KD,e$o),e(eb,o$o),e(q,r$o),e(q,ob),e(ob,ffe),e(ffe,t$o),e(ob,a$o),e(ob,ZD),e(ZD,n$o),e(ob,s$o),e(q,l$o),e(q,rb),e(rb,mfe),e(mfe,i$o),e(rb,d$o),e(rb,eG),e(eG,c$o),e(rb,f$o),e(q,m$o),e(q,tb),e(tb,gfe),e(gfe,g$o),e(tb,h$o),e(tb,oG),e(oG,p$o),e(tb,u$o),e(q,_$o),e(q,ab),e(ab,hfe),e(hfe,b$o),e(ab,v$o),e(ab,rG),e(rG,F$o),e(ab,T$o),e(q,M$o),e(q,nb),e(nb,pfe),e(pfe,E$o),e(nb,C$o),e(nb,tG),e(tG,w$o),e(nb,A$o),e(q,y$o),e(q,sb),e(sb,ufe),e(ufe,L$o),e(sb,x$o),e(sb,aG),e(aG,$$o),e(sb,k$o),e(q,S$o),e(q,lb),e(lb,_fe),e(_fe,R$o),e(lb,P$o),e(lb,nG),e(nG,B$o),e(lb,I$o),e(q,q$o),e(q,ib),e(ib,bfe),e(bfe,N$o),e(ib,j$o),e(ib,sG),e(sG,D$o),e(ib,G$o),e(q,O$o),e(q,db),e(db,vfe),e(vfe,V$o),e(db,X$o),e(db,lG),e(lG,z$o),e(db,W$o),e(q,Q$o),e(q,cb),e(cb,Ffe),e(Ffe,H$o),e(cb,U$o),e(cb,iG),e(iG,J$o),e(cb,Y$o),e(q,K$o),e(q,fb),e(fb,Tfe),e(Tfe,Z$o),e(fb,eko),e(fb,dG),e(dG,oko),e(fb,rko),e(q,tko),e(q,mb),e(mb,Mfe),e(Mfe,ako),e(mb,nko),e(mb,cG),e(cG,sko),e(mb,lko),e(q,iko),e(q,gb),e(gb,Efe),e(Efe,dko),e(gb,cko),e(gb,fG),e(fG,fko),e(gb,mko),e(q,gko),e(q,hb),e(hb,Cfe),e(Cfe,hko),e(hb,pko),e(hb,mG),e(mG,uko),e(hb,_ko),e(q,bko),e(q,pb),e(pb,wfe),e(wfe,vko),e(pb,Fko),e(pb,gG),e(gG,Tko),e(pb,Mko),e(q,Eko),e(q,ub),e(ub,Afe),e(Afe,Cko),e(ub,wko),e(ub,hG),e(hG,Ako),e(ub,yko),e(q,Lko),e(q,_b),e(_b,yfe),e(yfe,xko),e(_b,$ko),e(_b,pG),e(pG,kko),e(_b,Sko),e(q,Rko),e(q,bb),e(bb,Lfe),e(Lfe,Pko),e(bb,Bko),e(bb,uG),e(uG,Iko),e(bb,qko),e(oo,Nko),e(oo,vb),e(vb,jko),e(vb,xfe),e(xfe,Dko),e(vb,Gko),e(vb,$fe),e($fe,Oko),e(oo,Vko),M(Fb,oo,null),b(f,JIe,_),b(f,Oi,_),e(Oi,Tb),e(Tb,kfe),M(dy,kfe,null),e(Oi,Xko),e(Oi,Sfe),e(Sfe,zko),b(f,YIe,_),b(f,Po,_),M(cy,Po,null),e(Po,Wko),e(Po,Vi),e(Vi,Qko),e(Vi,_G),e(_G,Hko),e(Vi,Uko),e(Vi,bG),e(bG,Jko),e(Vi,Yko),e(Po,Kko),e(Po,fy),e(fy,Zko),e(fy,Rfe),e(Rfe,eSo),e(fy,oSo),e(Po,rSo),e(Po,dt),M(my,dt,null),e(dt,tSo),e(dt,Pfe),e(Pfe,aSo),e(dt,nSo),e(dt,Xi),e(Xi,sSo),e(Xi,Bfe),e(Bfe,lSo),e(Xi,iSo),e(Xi,vG),e(vG,dSo),e(Xi,cSo),e(dt,fSo),M(Mb,dt,null),e(Po,mSo),e(Po,ro),M(gy,ro,null),e(ro,gSo),e(ro,Ife),e(Ife,hSo),e(ro,pSo),e(ro,Pa),e(Pa,uSo),e(Pa,qfe),e(qfe,_So),e(Pa,bSo),e(Pa,Nfe),e(Nfe,vSo),e(Pa,FSo),e(Pa,jfe),e(jfe,TSo),e(Pa,MSo),e(ro,ESo),e(ro,Y),e(Y,Eb),e(Eb,Dfe),e(Dfe,CSo),e(Eb,wSo),e(Eb,FG),e(FG,ASo),e(Eb,ySo),e(Y,LSo),e(Y,Cb),e(Cb,Gfe),e(Gfe,xSo),e(Cb,$So),e(Cb,TG),e(TG,kSo),e(Cb,SSo),e(Y,RSo),e(Y,wb),e(wb,Ofe),e(Ofe,PSo),e(wb,BSo),e(wb,MG),e(MG,ISo),e(wb,qSo),e(Y,NSo),e(Y,Ab),e(Ab,Vfe),e(Vfe,jSo),e(Ab,DSo),e(Ab,EG),e(EG,GSo),e(Ab,OSo),e(Y,VSo),e(Y,yb),e(yb,Xfe),e(Xfe,XSo),e(yb,zSo),e(yb,CG),e(CG,WSo),e(yb,QSo),e(Y,HSo),e(Y,Lb),e(Lb,zfe),e(zfe,USo),e(Lb,JSo),e(Lb,wG),e(wG,YSo),e(Lb,KSo),e(Y,ZSo),e(Y,xb),e(xb,Wfe),e(Wfe,eRo),e(xb,oRo),e(xb,AG),e(AG,rRo),e(xb,tRo),e(Y,aRo),e(Y,$b),e($b,Qfe),e(Qfe,nRo),e($b,sRo),e($b,yG),e(yG,lRo),e($b,iRo),e(Y,dRo),e(Y,kb),e(kb,Hfe),e(Hfe,cRo),e(kb,fRo),e(kb,LG),e(LG,mRo),e(kb,gRo),e(Y,hRo),e(Y,Sb),e(Sb,Ufe),e(Ufe,pRo),e(Sb,uRo),e(Sb,xG),e(xG,_Ro),e(Sb,bRo),e(Y,vRo),e(Y,Rb),e(Rb,Jfe),e(Jfe,FRo),e(Rb,TRo),e(Rb,$G),e($G,MRo),e(Rb,ERo),e(Y,CRo),e(Y,Pb),e(Pb,Yfe),e(Yfe,wRo),e(Pb,ARo),e(Pb,kG),e(kG,yRo),e(Pb,LRo),e(Y,xRo),e(Y,Bb),e(Bb,Kfe),e(Kfe,$Ro),e(Bb,kRo),e(Bb,SG),e(SG,SRo),e(Bb,RRo),e(Y,PRo),e(Y,Ib),e(Ib,Zfe),e(Zfe,BRo),e(Ib,IRo),e(Ib,RG),e(RG,qRo),e(Ib,NRo),e(Y,jRo),e(Y,qb),e(qb,eme),e(eme,DRo),e(qb,GRo),e(qb,PG),e(PG,ORo),e(qb,VRo),e(Y,XRo),e(Y,Nb),e(Nb,ome),e(ome,zRo),e(Nb,WRo),e(Nb,BG),e(BG,QRo),e(Nb,HRo),e(Y,URo),e(Y,jb),e(jb,rme),e(rme,JRo),e(jb,YRo),e(jb,IG),e(IG,KRo),e(jb,ZRo),e(Y,ePo),e(Y,Db),e(Db,tme),e(tme,oPo),e(Db,rPo),e(Db,qG),e(qG,tPo),e(Db,aPo),e(Y,nPo),e(Y,Gb),e(Gb,ame),e(ame,sPo),e(Gb,lPo),e(Gb,NG),e(NG,iPo),e(Gb,dPo),e(Y,cPo),e(Y,Ob),e(Ob,nme),e(nme,fPo),e(Ob,mPo),e(Ob,jG),e(jG,gPo),e(Ob,hPo),e(Y,pPo),e(Y,Vb),e(Vb,sme),e(sme,uPo),e(Vb,_Po),e(Vb,DG),e(DG,bPo),e(Vb,vPo),e(Y,FPo),e(Y,Xb),e(Xb,lme),e(lme,TPo),e(Xb,MPo),e(Xb,GG),e(GG,EPo),e(Xb,CPo),e(Y,wPo),e(Y,zb),e(zb,ime),e(ime,APo),e(zb,yPo),e(zb,OG),e(OG,LPo),e(zb,xPo),e(Y,$Po),e(Y,Wb),e(Wb,dme),e(dme,kPo),e(Wb,SPo),e(Wb,VG),e(VG,RPo),e(Wb,PPo),e(Y,BPo),e(Y,Qb),e(Qb,cme),e(cme,IPo),e(Qb,qPo),e(Qb,XG),e(XG,NPo),e(Qb,jPo),e(Y,DPo),e(Y,Hb),e(Hb,fme),e(fme,GPo),e(Hb,OPo),e(Hb,zG),e(zG,VPo),e(Hb,XPo),e(Y,zPo),e(Y,Ub),e(Ub,mme),e(mme,WPo),e(Ub,QPo),e(Ub,WG),e(WG,HPo),e(Ub,UPo),e(Y,JPo),e(Y,Jb),e(Jb,gme),e(gme,YPo),e(Jb,KPo),e(Jb,QG),e(QG,ZPo),e(Jb,eBo),e(Y,oBo),e(Y,Yb),e(Yb,hme),e(hme,rBo),e(Yb,tBo),e(Yb,HG),e(HG,aBo),e(Yb,nBo),e(ro,sBo),e(ro,Kb),e(Kb,lBo),e(Kb,pme),e(pme,iBo),e(Kb,dBo),e(Kb,ume),e(ume,cBo),e(ro,fBo),M(Zb,ro,null),b(f,KIe,_),b(f,zi,_),e(zi,ev),e(ev,_me),M(hy,_me,null),e(zi,mBo),e(zi,bme),e(bme,gBo),b(f,ZIe,_),b(f,Bo,_),M(py,Bo,null),e(Bo,hBo),e(Bo,Wi),e(Wi,pBo),e(Wi,UG),e(UG,uBo),e(Wi,_Bo),e(Wi,JG),e(JG,bBo),e(Wi,vBo),e(Bo,FBo),e(Bo,uy),e(uy,TBo),e(uy,vme),e(vme,MBo),e(uy,EBo),e(Bo,CBo),e(Bo,ct),M(_y,ct,null),e(ct,wBo),e(ct,Fme),e(Fme,ABo),e(ct,yBo),e(ct,Qi),e(Qi,LBo),e(Qi,Tme),e(Tme,xBo),e(Qi,$Bo),e(Qi,YG),e(YG,kBo),e(Qi,SBo),e(ct,RBo),M(ov,ct,null),e(Bo,PBo),e(Bo,to),M(by,to,null),e(to,BBo),e(to,Mme),e(Mme,IBo),e(to,qBo),e(to,Ba),e(Ba,NBo),e(Ba,Eme),e(Eme,jBo),e(Ba,DBo),e(Ba,Cme),e(Cme,GBo),e(Ba,OBo),e(Ba,wme),e(wme,VBo),e(Ba,XBo),e(to,zBo),e(to,Yr),e(Yr,rv),e(rv,Ame),e(Ame,WBo),e(rv,QBo),e(rv,KG),e(KG,HBo),e(rv,UBo),e(Yr,JBo),e(Yr,tv),e(tv,yme),e(yme,YBo),e(tv,KBo),e(tv,ZG),e(ZG,ZBo),e(tv,eIo),e(Yr,oIo),e(Yr,av),e(av,Lme),e(Lme,rIo),e(av,tIo),e(av,eO),e(eO,aIo),e(av,nIo),e(Yr,sIo),e(Yr,nv),e(nv,xme),e(xme,lIo),e(nv,iIo),e(nv,oO),e(oO,dIo),e(nv,cIo),e(Yr,fIo),e(Yr,sv),e(sv,$me),e($me,mIo),e(sv,gIo),e(sv,rO),e(rO,hIo),e(sv,pIo),e(to,uIo),e(to,lv),e(lv,_Io),e(lv,kme),e(kme,bIo),e(lv,vIo),e(lv,Sme),e(Sme,FIo),e(to,TIo),M(iv,to,null),b(f,eqe,_),b(f,Hi,_),e(Hi,dv),e(dv,Rme),M(vy,Rme,null),e(Hi,MIo),e(Hi,Pme),e(Pme,EIo),b(f,oqe,_),b(f,Io,_),M(Fy,Io,null),e(Io,CIo),e(Io,Ui),e(Ui,wIo),e(Ui,tO),e(tO,AIo),e(Ui,yIo),e(Ui,aO),e(aO,LIo),e(Ui,xIo),e(Io,$Io),e(Io,Ty),e(Ty,kIo),e(Ty,Bme),e(Bme,SIo),e(Ty,RIo),e(Io,PIo),e(Io,ft),M(My,ft,null),e(ft,BIo),e(ft,Ime),e(Ime,IIo),e(ft,qIo),e(ft,Ji),e(Ji,NIo),e(Ji,qme),e(qme,jIo),e(Ji,DIo),e(Ji,nO),e(nO,GIo),e(Ji,OIo),e(ft,VIo),M(cv,ft,null),e(Io,XIo),e(Io,ao),M(Ey,ao,null),e(ao,zIo),e(ao,Nme),e(Nme,WIo),e(ao,QIo),e(ao,Ia),e(Ia,HIo),e(Ia,jme),e(jme,UIo),e(Ia,JIo),e(Ia,Dme),e(Dme,YIo),e(Ia,KIo),e(Ia,Gme),e(Gme,ZIo),e(Ia,eqo),e(ao,oqo),e(ao,U),e(U,fv),e(fv,Ome),e(Ome,rqo),e(fv,tqo),e(fv,sO),e(sO,aqo),e(fv,nqo),e(U,sqo),e(U,mv),e(mv,Vme),e(Vme,lqo),e(mv,iqo),e(mv,lO),e(lO,dqo),e(mv,cqo),e(U,fqo),e(U,gv),e(gv,Xme),e(Xme,mqo),e(gv,gqo),e(gv,iO),e(iO,hqo),e(gv,pqo),e(U,uqo),e(U,hv),e(hv,zme),e(zme,_qo),e(hv,bqo),e(hv,dO),e(dO,vqo),e(hv,Fqo),e(U,Tqo),e(U,pv),e(pv,Wme),e(Wme,Mqo),e(pv,Eqo),e(pv,cO),e(cO,Cqo),e(pv,wqo),e(U,Aqo),e(U,uv),e(uv,Qme),e(Qme,yqo),e(uv,Lqo),e(uv,fO),e(fO,xqo),e(uv,$qo),e(U,kqo),e(U,_v),e(_v,Hme),e(Hme,Sqo),e(_v,Rqo),e(_v,mO),e(mO,Pqo),e(_v,Bqo),e(U,Iqo),e(U,bv),e(bv,Ume),e(Ume,qqo),e(bv,Nqo),e(bv,gO),e(gO,jqo),e(bv,Dqo),e(U,Gqo),e(U,vv),e(vv,Jme),e(Jme,Oqo),e(vv,Vqo),e(vv,hO),e(hO,Xqo),e(vv,zqo),e(U,Wqo),e(U,Fv),e(Fv,Yme),e(Yme,Qqo),e(Fv,Hqo),e(Fv,pO),e(pO,Uqo),e(Fv,Jqo),e(U,Yqo),e(U,Tv),e(Tv,Kme),e(Kme,Kqo),e(Tv,Zqo),e(Tv,uO),e(uO,eNo),e(Tv,oNo),e(U,rNo),e(U,Mv),e(Mv,Zme),e(Zme,tNo),e(Mv,aNo),e(Mv,_O),e(_O,nNo),e(Mv,sNo),e(U,lNo),e(U,Ev),e(Ev,ege),e(ege,iNo),e(Ev,dNo),e(Ev,bO),e(bO,cNo),e(Ev,fNo),e(U,mNo),e(U,Cv),e(Cv,oge),e(oge,gNo),e(Cv,hNo),e(Cv,vO),e(vO,pNo),e(Cv,uNo),e(U,_No),e(U,wv),e(wv,rge),e(rge,bNo),e(wv,vNo),e(wv,FO),e(FO,FNo),e(wv,TNo),e(U,MNo),e(U,Av),e(Av,tge),e(tge,ENo),e(Av,CNo),e(Av,TO),e(TO,wNo),e(Av,ANo),e(U,yNo),e(U,yv),e(yv,age),e(age,LNo),e(yv,xNo),e(yv,MO),e(MO,$No),e(yv,kNo),e(U,SNo),e(U,Lv),e(Lv,nge),e(nge,RNo),e(Lv,PNo),e(Lv,EO),e(EO,BNo),e(Lv,INo),e(U,qNo),e(U,xv),e(xv,sge),e(sge,NNo),e(xv,jNo),e(xv,CO),e(CO,DNo),e(xv,GNo),e(U,ONo),e(U,$v),e($v,lge),e(lge,VNo),e($v,XNo),e($v,wO),e(wO,zNo),e($v,WNo),e(U,QNo),e(U,kv),e(kv,ige),e(ige,HNo),e(kv,UNo),e(kv,AO),e(AO,JNo),e(kv,YNo),e(U,KNo),e(U,Sv),e(Sv,dge),e(dge,ZNo),e(Sv,ejo),e(Sv,yO),e(yO,ojo),e(Sv,rjo),e(U,tjo),e(U,Rv),e(Rv,cge),e(cge,ajo),e(Rv,njo),e(Rv,LO),e(LO,sjo),e(Rv,ljo),e(U,ijo),e(U,Pv),e(Pv,fge),e(fge,djo),e(Pv,cjo),e(Pv,xO),e(xO,fjo),e(Pv,mjo),e(U,gjo),e(U,Bv),e(Bv,mge),e(mge,hjo),e(Bv,pjo),e(Bv,$O),e($O,ujo),e(Bv,_jo),e(U,bjo),e(U,Iv),e(Iv,gge),e(gge,vjo),e(Iv,Fjo),e(Iv,kO),e(kO,Tjo),e(Iv,Mjo),e(U,Ejo),e(U,qv),e(qv,hge),e(hge,Cjo),e(qv,wjo),e(qv,SO),e(SO,Ajo),e(qv,yjo),e(U,Ljo),e(U,Nv),e(Nv,pge),e(pge,xjo),e(Nv,$jo),e(Nv,RO),e(RO,kjo),e(Nv,Sjo),e(U,Rjo),e(U,jv),e(jv,uge),e(uge,Pjo),e(jv,Bjo),e(jv,PO),e(PO,Ijo),e(jv,qjo),e(U,Njo),e(U,Dv),e(Dv,_ge),e(_ge,jjo),e(Dv,Djo),e(Dv,BO),e(BO,Gjo),e(Dv,Ojo),e(U,Vjo),e(U,Gv),e(Gv,bge),e(bge,Xjo),e(Gv,zjo),e(Gv,IO),e(IO,Wjo),e(Gv,Qjo),e(U,Hjo),e(U,Ov),e(Ov,vge),e(vge,Ujo),e(Ov,Jjo),e(Ov,qO),e(qO,Yjo),e(Ov,Kjo),e(U,Zjo),e(U,Vv),e(Vv,Fge),e(Fge,eDo),e(Vv,oDo),e(Vv,NO),e(NO,rDo),e(Vv,tDo),e(ao,aDo),e(ao,Xv),e(Xv,nDo),e(Xv,Tge),e(Tge,sDo),e(Xv,lDo),e(Xv,Mge),e(Mge,iDo),e(ao,dDo),M(zv,ao,null),b(f,rqe,_),b(f,Yi,_),e(Yi,Wv),e(Wv,Ege),M(Cy,Ege,null),e(Yi,cDo),e(Yi,Cge),e(Cge,fDo),b(f,tqe,_),b(f,qo,_),M(wy,qo,null),e(qo,mDo),e(qo,Ki),e(Ki,gDo),e(Ki,jO),e(jO,hDo),e(Ki,pDo),e(Ki,DO),e(DO,uDo),e(Ki,_Do),e(qo,bDo),e(qo,Ay),e(Ay,vDo),e(Ay,wge),e(wge,FDo),e(Ay,TDo),e(qo,MDo),e(qo,mt),M(yy,mt,null),e(mt,EDo),e(mt,Age),e(Age,CDo),e(mt,wDo),e(mt,Zi),e(Zi,ADo),e(Zi,yge),e(yge,yDo),e(Zi,LDo),e(Zi,GO),e(GO,xDo),e(Zi,$Do),e(mt,kDo),M(Qv,mt,null),e(qo,SDo),e(qo,no),M(Ly,no,null),e(no,RDo),e(no,Lge),e(Lge,PDo),e(no,BDo),e(no,qa),e(qa,IDo),e(qa,xge),e(xge,qDo),e(qa,NDo),e(qa,$ge),e($ge,jDo),e(qa,DDo),e(qa,kge),e(kge,GDo),e(qa,ODo),e(no,VDo),e(no,V),e(V,Hv),e(Hv,Sge),e(Sge,XDo),e(Hv,zDo),e(Hv,OO),e(OO,WDo),e(Hv,QDo),e(V,HDo),e(V,Uv),e(Uv,Rge),e(Rge,UDo),e(Uv,JDo),e(Uv,VO),e(VO,YDo),e(Uv,KDo),e(V,ZDo),e(V,Jv),e(Jv,Pge),e(Pge,eGo),e(Jv,oGo),e(Jv,XO),e(XO,rGo),e(Jv,tGo),e(V,aGo),e(V,Yv),e(Yv,Bge),e(Bge,nGo),e(Yv,sGo),e(Yv,zO),e(zO,lGo),e(Yv,iGo),e(V,dGo),e(V,Kv),e(Kv,Ige),e(Ige,cGo),e(Kv,fGo),e(Kv,WO),e(WO,mGo),e(Kv,gGo),e(V,hGo),e(V,Zv),e(Zv,qge),e(qge,pGo),e(Zv,uGo),e(Zv,QO),e(QO,_Go),e(Zv,bGo),e(V,vGo),e(V,eF),e(eF,Nge),e(Nge,FGo),e(eF,TGo),e(eF,HO),e(HO,MGo),e(eF,EGo),e(V,CGo),e(V,oF),e(oF,jge),e(jge,wGo),e(oF,AGo),e(oF,UO),e(UO,yGo),e(oF,LGo),e(V,xGo),e(V,rF),e(rF,Dge),e(Dge,$Go),e(rF,kGo),e(rF,JO),e(JO,SGo),e(rF,RGo),e(V,PGo),e(V,tF),e(tF,Gge),e(Gge,BGo),e(tF,IGo),e(tF,YO),e(YO,qGo),e(tF,NGo),e(V,jGo),e(V,aF),e(aF,Oge),e(Oge,DGo),e(aF,GGo),e(aF,KO),e(KO,OGo),e(aF,VGo),e(V,XGo),e(V,nF),e(nF,Vge),e(Vge,zGo),e(nF,WGo),e(nF,ZO),e(ZO,QGo),e(nF,HGo),e(V,UGo),e(V,sF),e(sF,Xge),e(Xge,JGo),e(sF,YGo),e(sF,eV),e(eV,KGo),e(sF,ZGo),e(V,eOo),e(V,lF),e(lF,zge),e(zge,oOo),e(lF,rOo),e(lF,oV),e(oV,tOo),e(lF,aOo),e(V,nOo),e(V,iF),e(iF,Wge),e(Wge,sOo),e(iF,lOo),e(iF,rV),e(rV,iOo),e(iF,dOo),e(V,cOo),e(V,dF),e(dF,Qge),e(Qge,fOo),e(dF,mOo),e(dF,tV),e(tV,gOo),e(dF,hOo),e(V,pOo),e(V,cF),e(cF,Hge),e(Hge,uOo),e(cF,_Oo),e(cF,aV),e(aV,bOo),e(cF,vOo),e(V,FOo),e(V,fF),e(fF,Uge),e(Uge,TOo),e(fF,MOo),e(fF,nV),e(nV,EOo),e(fF,COo),e(V,wOo),e(V,mF),e(mF,Jge),e(Jge,AOo),e(mF,yOo),e(mF,sV),e(sV,LOo),e(mF,xOo),e(V,$Oo),e(V,gF),e(gF,Yge),e(Yge,kOo),e(gF,SOo),e(gF,lV),e(lV,ROo),e(gF,POo),e(V,BOo),e(V,hF),e(hF,Kge),e(Kge,IOo),e(hF,qOo),e(hF,iV),e(iV,NOo),e(hF,jOo),e(V,DOo),e(V,pF),e(pF,Zge),e(Zge,GOo),e(pF,OOo),e(pF,dV),e(dV,VOo),e(pF,XOo),e(V,zOo),e(V,uF),e(uF,ehe),e(ehe,WOo),e(uF,QOo),e(uF,cV),e(cV,HOo),e(uF,UOo),e(V,JOo),e(V,_F),e(_F,ohe),e(ohe,YOo),e(_F,KOo),e(_F,fV),e(fV,ZOo),e(_F,eVo),e(V,oVo),e(V,bF),e(bF,rhe),e(rhe,rVo),e(bF,tVo),e(bF,mV),e(mV,aVo),e(bF,nVo),e(V,sVo),e(V,vF),e(vF,the),e(the,lVo),e(vF,iVo),e(vF,gV),e(gV,dVo),e(vF,cVo),e(V,fVo),e(V,FF),e(FF,ahe),e(ahe,mVo),e(FF,gVo),e(FF,hV),e(hV,hVo),e(FF,pVo),e(V,uVo),e(V,TF),e(TF,nhe),e(nhe,_Vo),e(TF,bVo),e(TF,pV),e(pV,vVo),e(TF,FVo),e(V,TVo),e(V,MF),e(MF,she),e(she,MVo),e(MF,EVo),e(MF,uV),e(uV,CVo),e(MF,wVo),e(V,AVo),e(V,EF),e(EF,lhe),e(lhe,yVo),e(EF,LVo),e(EF,_V),e(_V,xVo),e(EF,$Vo),e(V,kVo),e(V,CF),e(CF,ihe),e(ihe,SVo),e(CF,RVo),e(CF,bV),e(bV,PVo),e(CF,BVo),e(V,IVo),e(V,wF),e(wF,dhe),e(dhe,qVo),e(wF,NVo),e(wF,vV),e(vV,jVo),e(wF,DVo),e(V,GVo),e(V,AF),e(AF,che),e(che,OVo),e(AF,VVo),e(AF,FV),e(FV,XVo),e(AF,zVo),e(V,WVo),e(V,yF),e(yF,fhe),e(fhe,QVo),e(yF,HVo),e(yF,TV),e(TV,UVo),e(yF,JVo),e(V,YVo),e(V,LF),e(LF,mhe),e(mhe,KVo),e(LF,ZVo),e(LF,MV),e(MV,eXo),e(LF,oXo),e(V,rXo),e(V,xF),e(xF,ghe),e(ghe,tXo),e(xF,aXo),e(xF,EV),e(EV,nXo),e(xF,sXo),e(V,lXo),e(V,$F),e($F,hhe),e(hhe,iXo),e($F,dXo),e($F,CV),e(CV,cXo),e($F,fXo),e(V,mXo),e(V,kF),e(kF,phe),e(phe,gXo),e(kF,hXo),e(kF,wV),e(wV,pXo),e(kF,uXo),e(V,_Xo),e(V,SF),e(SF,uhe),e(uhe,bXo),e(SF,vXo),e(SF,AV),e(AV,FXo),e(SF,TXo),e(no,MXo),e(no,RF),e(RF,EXo),e(RF,_he),e(_he,CXo),e(RF,wXo),e(RF,bhe),e(bhe,AXo),e(no,yXo),M(PF,no,null),b(f,aqe,_),b(f,ed,_),e(ed,BF),e(BF,vhe),M(xy,vhe,null),e(ed,LXo),e(ed,Fhe),e(Fhe,xXo),b(f,nqe,_),b(f,No,_),M($y,No,null),e(No,$Xo),e(No,od),e(od,kXo),e(od,yV),e(yV,SXo),e(od,RXo),e(od,LV),e(LV,PXo),e(od,BXo),e(No,IXo),e(No,ky),e(ky,qXo),e(ky,The),e(The,NXo),e(ky,jXo),e(No,DXo),e(No,gt),M(Sy,gt,null),e(gt,GXo),e(gt,Mhe),e(Mhe,OXo),e(gt,VXo),e(gt,rd),e(rd,XXo),e(rd,Ehe),e(Ehe,zXo),e(rd,WXo),e(rd,xV),e(xV,QXo),e(rd,HXo),e(gt,UXo),M(IF,gt,null),e(No,JXo),e(No,so),M(Ry,so,null),e(so,YXo),e(so,Che),e(Che,KXo),e(so,ZXo),e(so,Na),e(Na,ezo),e(Na,whe),e(whe,ozo),e(Na,rzo),e(Na,Ahe),e(Ahe,tzo),e(Na,azo),e(Na,yhe),e(yhe,nzo),e(Na,szo),e(so,lzo),e(so,Lhe),e(Lhe,qF),e(qF,xhe),e(xhe,izo),e(qF,dzo),e(qF,$V),e($V,czo),e(qF,fzo),e(so,mzo),e(so,NF),e(NF,gzo),e(NF,$he),e($he,hzo),e(NF,pzo),e(NF,khe),e(khe,uzo),e(so,_zo),M(jF,so,null),b(f,sqe,_),b(f,td,_),e(td,DF),e(DF,She),M(Py,She,null),e(td,bzo),e(td,Rhe),e(Rhe,vzo),b(f,lqe,_),b(f,jo,_),M(By,jo,null),e(jo,Fzo),e(jo,ad),e(ad,Tzo),e(ad,kV),e(kV,Mzo),e(ad,Ezo),e(ad,SV),e(SV,Czo),e(ad,wzo),e(jo,Azo),e(jo,Iy),e(Iy,yzo),e(Iy,Phe),e(Phe,Lzo),e(Iy,xzo),e(jo,$zo),e(jo,ht),M(qy,ht,null),e(ht,kzo),e(ht,Bhe),e(Bhe,Szo),e(ht,Rzo),e(ht,nd),e(nd,Pzo),e(nd,Ihe),e(Ihe,Bzo),e(nd,Izo),e(nd,RV),e(RV,qzo),e(nd,Nzo),e(ht,jzo),M(GF,ht,null),e(jo,Dzo),e(jo,lo),M(Ny,lo,null),e(lo,Gzo),e(lo,qhe),e(qhe,Ozo),e(lo,Vzo),e(lo,ja),e(ja,Xzo),e(ja,Nhe),e(Nhe,zzo),e(ja,Wzo),e(ja,jhe),e(jhe,Qzo),e(ja,Hzo),e(ja,Dhe),e(Dhe,Uzo),e(ja,Jzo),e(lo,Yzo),e(lo,Fe),e(Fe,OF),e(OF,Ghe),e(Ghe,Kzo),e(OF,Zzo),e(OF,PV),e(PV,eWo),e(OF,oWo),e(Fe,rWo),e(Fe,VF),e(VF,Ohe),e(Ohe,tWo),e(VF,aWo),e(VF,BV),e(BV,nWo),e(VF,sWo),e(Fe,lWo),e(Fe,XF),e(XF,Vhe),e(Vhe,iWo),e(XF,dWo),e(XF,IV),e(IV,cWo),e(XF,fWo),e(Fe,mWo),e(Fe,Ps),e(Ps,Xhe),e(Xhe,gWo),e(Ps,hWo),e(Ps,qV),e(qV,pWo),e(Ps,uWo),e(Ps,NV),e(NV,_Wo),e(Ps,bWo),e(Fe,vWo),e(Fe,zF),e(zF,zhe),e(zhe,FWo),e(zF,TWo),e(zF,jV),e(jV,MWo),e(zF,EWo),e(Fe,CWo),e(Fe,pt),e(pt,Whe),e(Whe,wWo),e(pt,AWo),e(pt,DV),e(DV,yWo),e(pt,LWo),e(pt,GV),e(GV,xWo),e(pt,$Wo),e(pt,OV),e(OV,kWo),e(pt,SWo),e(Fe,RWo),e(Fe,WF),e(WF,Qhe),e(Qhe,PWo),e(WF,BWo),e(WF,VV),e(VV,IWo),e(WF,qWo),e(Fe,NWo),e(Fe,QF),e(QF,Hhe),e(Hhe,jWo),e(QF,DWo),e(QF,XV),e(XV,GWo),e(QF,OWo),e(Fe,VWo),e(Fe,HF),e(HF,Uhe),e(Uhe,XWo),e(HF,zWo),e(HF,zV),e(zV,WWo),e(HF,QWo),e(Fe,HWo),e(Fe,UF),e(UF,Jhe),e(Jhe,UWo),e(UF,JWo),e(UF,WV),e(WV,YWo),e(UF,KWo),e(Fe,ZWo),e(Fe,JF),e(JF,Yhe),e(Yhe,eQo),e(JF,oQo),e(JF,QV),e(QV,rQo),e(JF,tQo),e(Fe,aQo),e(Fe,YF),e(YF,Khe),e(Khe,nQo),e(YF,sQo),e(YF,HV),e(HV,lQo),e(YF,iQo),e(Fe,dQo),e(Fe,KF),e(KF,Zhe),e(Zhe,cQo),e(KF,fQo),e(KF,UV),e(UV,mQo),e(KF,gQo),e(lo,hQo),e(lo,ZF),e(ZF,pQo),e(ZF,epe),e(epe,uQo),e(ZF,_Qo),e(ZF,ope),e(ope,bQo),e(lo,vQo),M(e6,lo,null),b(f,iqe,_),b(f,sd,_),e(sd,o6),e(o6,rpe),M(jy,rpe,null),e(sd,FQo),e(sd,tpe),e(tpe,TQo),b(f,dqe,_),b(f,Do,_),M(Dy,Do,null),e(Do,MQo),e(Do,ld),e(ld,EQo),e(ld,JV),e(JV,CQo),e(ld,wQo),e(ld,YV),e(YV,AQo),e(ld,yQo),e(Do,LQo),e(Do,Gy),e(Gy,xQo),e(Gy,ape),e(ape,$Qo),e(Gy,kQo),e(Do,SQo),e(Do,ut),M(Oy,ut,null),e(ut,RQo),e(ut,npe),e(npe,PQo),e(ut,BQo),e(ut,id),e(id,IQo),e(id,spe),e(spe,qQo),e(id,NQo),e(id,KV),e(KV,jQo),e(id,DQo),e(ut,GQo),M(r6,ut,null),e(Do,OQo),e(Do,io),M(Vy,io,null),e(io,VQo),e(io,lpe),e(lpe,XQo),e(io,zQo),e(io,Da),e(Da,WQo),e(Da,ipe),e(ipe,QQo),e(Da,HQo),e(Da,dpe),e(dpe,UQo),e(Da,JQo),e(Da,cpe),e(cpe,YQo),e(Da,KQo),e(io,ZQo),e(io,fpe),e(fpe,t6),e(t6,mpe),e(mpe,eHo),e(t6,oHo),e(t6,ZV),e(ZV,rHo),e(t6,tHo),e(io,aHo),e(io,a6),e(a6,nHo),e(a6,gpe),e(gpe,sHo),e(a6,lHo),e(a6,hpe),e(hpe,iHo),e(io,dHo),M(n6,io,null),b(f,cqe,_),b(f,dd,_),e(dd,s6),e(s6,ppe),M(Xy,ppe,null),e(dd,cHo),e(dd,upe),e(upe,fHo),b(f,fqe,_),b(f,Go,_),M(zy,Go,null),e(Go,mHo),e(Go,cd),e(cd,gHo),e(cd,eX),e(eX,hHo),e(cd,pHo),e(cd,oX),e(oX,uHo),e(cd,_Ho),e(Go,bHo),e(Go,Wy),e(Wy,vHo),e(Wy,_pe),e(_pe,FHo),e(Wy,THo),e(Go,MHo),e(Go,_t),M(Qy,_t,null),e(_t,EHo),e(_t,bpe),e(bpe,CHo),e(_t,wHo),e(_t,fd),e(fd,AHo),e(fd,vpe),e(vpe,yHo),e(fd,LHo),e(fd,rX),e(rX,xHo),e(fd,$Ho),e(_t,kHo),M(l6,_t,null),e(Go,SHo),e(Go,co),M(Hy,co,null),e(co,RHo),e(co,Fpe),e(Fpe,PHo),e(co,BHo),e(co,Ga),e(Ga,IHo),e(Ga,Tpe),e(Tpe,qHo),e(Ga,NHo),e(Ga,Mpe),e(Mpe,jHo),e(Ga,DHo),e(Ga,Epe),e(Epe,GHo),e(Ga,OHo),e(co,VHo),e(co,ke),e(ke,i6),e(i6,Cpe),e(Cpe,XHo),e(i6,zHo),e(i6,tX),e(tX,WHo),e(i6,QHo),e(ke,HHo),e(ke,d6),e(d6,wpe),e(wpe,UHo),e(d6,JHo),e(d6,aX),e(aX,YHo),e(d6,KHo),e(ke,ZHo),e(ke,c6),e(c6,Ape),e(Ape,eUo),e(c6,oUo),e(c6,nX),e(nX,rUo),e(c6,tUo),e(ke,aUo),e(ke,f6),e(f6,ype),e(ype,nUo),e(f6,sUo),e(f6,sX),e(sX,lUo),e(f6,iUo),e(ke,dUo),e(ke,m6),e(m6,Lpe),e(Lpe,cUo),e(m6,fUo),e(m6,lX),e(lX,mUo),e(m6,gUo),e(ke,hUo),e(ke,g6),e(g6,xpe),e(xpe,pUo),e(g6,uUo),e(g6,iX),e(iX,_Uo),e(g6,bUo),e(ke,vUo),e(ke,h6),e(h6,$pe),e($pe,FUo),e(h6,TUo),e(h6,dX),e(dX,MUo),e(h6,EUo),e(ke,CUo),e(ke,p6),e(p6,kpe),e(kpe,wUo),e(p6,AUo),e(p6,cX),e(cX,yUo),e(p6,LUo),e(ke,xUo),e(ke,u6),e(u6,Spe),e(Spe,$Uo),e(u6,kUo),e(u6,fX),e(fX,SUo),e(u6,RUo),e(co,PUo),e(co,_6),e(_6,BUo),e(_6,Rpe),e(Rpe,IUo),e(_6,qUo),e(_6,Ppe),e(Ppe,NUo),e(co,jUo),M(b6,co,null),b(f,mqe,_),b(f,md,_),e(md,v6),e(v6,Bpe),M(Uy,Bpe,null),e(md,DUo),e(md,Ipe),e(Ipe,GUo),b(f,gqe,_),b(f,Oo,_),M(Jy,Oo,null),e(Oo,OUo),e(Oo,gd),e(gd,VUo),e(gd,mX),e(mX,XUo),e(gd,zUo),e(gd,gX),e(gX,WUo),e(gd,QUo),e(Oo,HUo),e(Oo,Yy),e(Yy,UUo),e(Yy,qpe),e(qpe,JUo),e(Yy,YUo),e(Oo,KUo),e(Oo,bt),M(Ky,bt,null),e(bt,ZUo),e(bt,Npe),e(Npe,eJo),e(bt,oJo),e(bt,hd),e(hd,rJo),e(hd,jpe),e(jpe,tJo),e(hd,aJo),e(hd,hX),e(hX,nJo),e(hd,sJo),e(bt,lJo),M(F6,bt,null),e(Oo,iJo),e(Oo,fo),M(Zy,fo,null),e(fo,dJo),e(fo,Dpe),e(Dpe,cJo),e(fo,fJo),e(fo,Oa),e(Oa,mJo),e(Oa,Gpe),e(Gpe,gJo),e(Oa,hJo),e(Oa,Ope),e(Ope,pJo),e(Oa,uJo),e(Oa,Vpe),e(Vpe,_Jo),e(Oa,bJo),e(fo,vJo),e(fo,Kr),e(Kr,T6),e(T6,Xpe),e(Xpe,FJo),e(T6,TJo),e(T6,pX),e(pX,MJo),e(T6,EJo),e(Kr,CJo),e(Kr,M6),e(M6,zpe),e(zpe,wJo),e(M6,AJo),e(M6,uX),e(uX,yJo),e(M6,LJo),e(Kr,xJo),e(Kr,E6),e(E6,Wpe),e(Wpe,$Jo),e(E6,kJo),e(E6,_X),e(_X,SJo),e(E6,RJo),e(Kr,PJo),e(Kr,C6),e(C6,Qpe),e(Qpe,BJo),e(C6,IJo),e(C6,bX),e(bX,qJo),e(C6,NJo),e(Kr,jJo),e(Kr,w6),e(w6,Hpe),e(Hpe,DJo),e(w6,GJo),e(w6,vX),e(vX,OJo),e(w6,VJo),e(fo,XJo),e(fo,A6),e(A6,zJo),e(A6,Upe),e(Upe,WJo),e(A6,QJo),e(A6,Jpe),e(Jpe,HJo),e(fo,UJo),M(y6,fo,null),b(f,hqe,_),b(f,pd,_),e(pd,L6),e(L6,Ype),M(eL,Ype,null),e(pd,JJo),e(pd,Kpe),e(Kpe,YJo),b(f,pqe,_),b(f,Vo,_),M(oL,Vo,null),e(Vo,KJo),e(Vo,ud),e(ud,ZJo),e(ud,FX),e(FX,eYo),e(ud,oYo),e(ud,TX),e(TX,rYo),e(ud,tYo),e(Vo,aYo),e(Vo,rL),e(rL,nYo),e(rL,Zpe),e(Zpe,sYo),e(rL,lYo),e(Vo,iYo),e(Vo,vt),M(tL,vt,null),e(vt,dYo),e(vt,eue),e(eue,cYo),e(vt,fYo),e(vt,_d),e(_d,mYo),e(_d,oue),e(oue,gYo),e(_d,hYo),e(_d,MX),e(MX,pYo),e(_d,uYo),e(vt,_Yo),M(x6,vt,null),e(Vo,bYo),e(Vo,mo),M(aL,mo,null),e(mo,vYo),e(mo,rue),e(rue,FYo),e(mo,TYo),e(mo,Va),e(Va,MYo),e(Va,tue),e(tue,EYo),e(Va,CYo),e(Va,aue),e(aue,wYo),e(Va,AYo),e(Va,nue),e(nue,yYo),e(Va,LYo),e(mo,xYo),e(mo,Se),e(Se,$6),e($6,sue),e(sue,$Yo),e($6,kYo),e($6,EX),e(EX,SYo),e($6,RYo),e(Se,PYo),e(Se,k6),e(k6,lue),e(lue,BYo),e(k6,IYo),e(k6,CX),e(CX,qYo),e(k6,NYo),e(Se,jYo),e(Se,S6),e(S6,iue),e(iue,DYo),e(S6,GYo),e(S6,wX),e(wX,OYo),e(S6,VYo),e(Se,XYo),e(Se,R6),e(R6,due),e(due,zYo),e(R6,WYo),e(R6,AX),e(AX,QYo),e(R6,HYo),e(Se,UYo),e(Se,P6),e(P6,cue),e(cue,JYo),e(P6,YYo),e(P6,yX),e(yX,KYo),e(P6,ZYo),e(Se,eKo),e(Se,B6),e(B6,fue),e(fue,oKo),e(B6,rKo),e(B6,LX),e(LX,tKo),e(B6,aKo),e(Se,nKo),e(Se,I6),e(I6,mue),e(mue,sKo),e(I6,lKo),e(I6,xX),e(xX,iKo),e(I6,dKo),e(Se,cKo),e(Se,q6),e(q6,gue),e(gue,fKo),e(q6,mKo),e(q6,$X),e($X,gKo),e(q6,hKo),e(Se,pKo),e(Se,N6),e(N6,hue),e(hue,uKo),e(N6,_Ko),e(N6,kX),e(kX,bKo),e(N6,vKo),e(mo,FKo),e(mo,j6),e(j6,TKo),e(j6,pue),e(pue,MKo),e(j6,EKo),e(j6,uue),e(uue,CKo),e(mo,wKo),M(D6,mo,null),b(f,uqe,_),b(f,bd,_),e(bd,G6),e(G6,_ue),M(nL,_ue,null),e(bd,AKo),e(bd,bue),e(bue,yKo),b(f,_qe,_),b(f,Xo,_),M(sL,Xo,null),e(Xo,LKo),e(Xo,vd),e(vd,xKo),e(vd,SX),e(SX,$Ko),e(vd,kKo),e(vd,RX),e(RX,SKo),e(vd,RKo),e(Xo,PKo),e(Xo,lL),e(lL,BKo),e(lL,vue),e(vue,IKo),e(lL,qKo),e(Xo,NKo),e(Xo,Ft),M(iL,Ft,null),e(Ft,jKo),e(Ft,Fue),e(Fue,DKo),e(Ft,GKo),e(Ft,Fd),e(Fd,OKo),e(Fd,Tue),e(Tue,VKo),e(Fd,XKo),e(Fd,PX),e(PX,zKo),e(Fd,WKo),e(Ft,QKo),M(O6,Ft,null),e(Xo,HKo),e(Xo,go),M(dL,go,null),e(go,UKo),e(go,Mue),e(Mue,JKo),e(go,YKo),e(go,Xa),e(Xa,KKo),e(Xa,Eue),e(Eue,ZKo),e(Xa,eZo),e(Xa,Cue),e(Cue,oZo),e(Xa,rZo),e(Xa,wue),e(wue,tZo),e(Xa,aZo),e(go,nZo),e(go,cL),e(cL,V6),e(V6,Aue),e(Aue,sZo),e(V6,lZo),e(V6,BX),e(BX,iZo),e(V6,dZo),e(cL,cZo),e(cL,X6),e(X6,yue),e(yue,fZo),e(X6,mZo),e(X6,IX),e(IX,gZo),e(X6,hZo),e(go,pZo),e(go,z6),e(z6,uZo),e(z6,Lue),e(Lue,_Zo),e(z6,bZo),e(z6,xue),e(xue,vZo),e(go,FZo),M(W6,go,null),b(f,bqe,_),b(f,Td,_),e(Td,Q6),e(Q6,$ue),M(fL,$ue,null),e(Td,TZo),e(Td,kue),e(kue,MZo),b(f,vqe,_),b(f,zo,_),M(mL,zo,null),e(zo,EZo),e(zo,Md),e(Md,CZo),e(Md,qX),e(qX,wZo),e(Md,AZo),e(Md,NX),e(NX,yZo),e(Md,LZo),e(zo,xZo),e(zo,gL),e(gL,$Zo),e(gL,Sue),e(Sue,kZo),e(gL,SZo),e(zo,RZo),e(zo,Tt),M(hL,Tt,null),e(Tt,PZo),e(Tt,Rue),e(Rue,BZo),e(Tt,IZo),e(Tt,Ed),e(Ed,qZo),e(Ed,Pue),e(Pue,NZo),e(Ed,jZo),e(Ed,jX),e(jX,DZo),e(Ed,GZo),e(Tt,OZo),M(H6,Tt,null),e(zo,VZo),e(zo,ho),M(pL,ho,null),e(ho,XZo),e(ho,Bue),e(Bue,zZo),e(ho,WZo),e(ho,za),e(za,QZo),e(za,Iue),e(Iue,HZo),e(za,UZo),e(za,que),e(que,JZo),e(za,YZo),e(za,Nue),e(Nue,KZo),e(za,ZZo),e(ho,eer),e(ho,Zr),e(Zr,U6),e(U6,jue),e(jue,oer),e(U6,rer),e(U6,DX),e(DX,ter),e(U6,aer),e(Zr,ner),e(Zr,J6),e(J6,Due),e(Due,ser),e(J6,ler),e(J6,GX),e(GX,ier),e(J6,der),e(Zr,cer),e(Zr,Y6),e(Y6,Gue),e(Gue,fer),e(Y6,mer),e(Y6,OX),e(OX,ger),e(Y6,her),e(Zr,per),e(Zr,K6),e(K6,Oue),e(Oue,uer),e(K6,_er),e(K6,VX),e(VX,ber),e(K6,ver),e(Zr,Fer),e(Zr,Z6),e(Z6,Vue),e(Vue,Ter),e(Z6,Mer),e(Z6,XX),e(XX,Eer),e(Z6,Cer),e(ho,wer),e(ho,e0),e(e0,Aer),e(e0,Xue),e(Xue,yer),e(e0,Ler),e(e0,zue),e(zue,xer),e(ho,$er),M(o0,ho,null),b(f,Fqe,_),b(f,Cd,_),e(Cd,r0),e(r0,Wue),M(uL,Wue,null),e(Cd,ker),e(Cd,Que),e(Que,Ser),b(f,Tqe,_),b(f,Wo,_),M(_L,Wo,null),e(Wo,Rer),e(Wo,wd),e(wd,Per),e(wd,zX),e(zX,Ber),e(wd,Ier),e(wd,WX),e(WX,qer),e(wd,Ner),e(Wo,jer),e(Wo,bL),e(bL,Der),e(bL,Hue),e(Hue,Ger),e(bL,Oer),e(Wo,Ver),e(Wo,Mt),M(vL,Mt,null),e(Mt,Xer),e(Mt,Uue),e(Uue,zer),e(Mt,Wer),e(Mt,Ad),e(Ad,Qer),e(Ad,Jue),e(Jue,Her),e(Ad,Uer),e(Ad,QX),e(QX,Jer),e(Ad,Yer),e(Mt,Ker),M(t0,Mt,null),e(Wo,Zer),e(Wo,po),M(FL,po,null),e(po,eor),e(po,Yue),e(Yue,oor),e(po,ror),e(po,Wa),e(Wa,tor),e(Wa,Kue),e(Kue,aor),e(Wa,nor),e(Wa,Zue),e(Zue,sor),e(Wa,lor),e(Wa,e_e),e(e_e,ior),e(Wa,dor),e(po,cor),e(po,yd),e(yd,a0),e(a0,o_e),e(o_e,mor),e(a0,gor),e(a0,HX),e(HX,hor),e(a0,por),e(yd,uor),e(yd,n0),e(n0,r_e),e(r_e,_or),e(n0,bor),e(n0,UX),e(UX,vor),e(n0,For),e(yd,Tor),e(yd,s0),e(s0,t_e),e(t_e,Mor),e(s0,Eor),e(s0,JX),e(JX,Cor),e(s0,wor),e(po,Aor),e(po,l0),e(l0,yor),e(l0,a_e),e(a_e,Lor),e(l0,xor),e(l0,n_e),e(n_e,$or),e(po,kor),M(i0,po,null),b(f,Mqe,_),b(f,Ld,_),e(Ld,d0),e(d0,s_e),M(TL,s_e,null),e(Ld,Sor),e(Ld,l_e),e(l_e,Ror),b(f,Eqe,_),b(f,Qo,_),M(ML,Qo,null),e(Qo,Por),e(Qo,xd),e(xd,Bor),e(xd,YX),e(YX,Ior),e(xd,qor),e(xd,KX),e(KX,Nor),e(xd,jor),e(Qo,Dor),e(Qo,EL),e(EL,Gor),e(EL,i_e),e(i_e,Oor),e(EL,Vor),e(Qo,Xor),e(Qo,Et),M(CL,Et,null),e(Et,zor),e(Et,d_e),e(d_e,Wor),e(Et,Qor),e(Et,$d),e($d,Hor),e($d,c_e),e(c_e,Uor),e($d,Jor),e($d,ZX),e(ZX,Yor),e($d,Kor),e(Et,Zor),M(c0,Et,null),e(Qo,err),e(Qo,uo),M(wL,uo,null),e(uo,orr),e(uo,f_e),e(f_e,rrr),e(uo,trr),e(uo,Qa),e(Qa,arr),e(Qa,m_e),e(m_e,nrr),e(Qa,srr),e(Qa,g_e),e(g_e,lrr),e(Qa,irr),e(Qa,h_e),e(h_e,drr),e(Qa,crr),e(uo,frr),e(uo,AL),e(AL,f0),e(f0,p_e),e(p_e,mrr),e(f0,grr),e(f0,ez),e(ez,hrr),e(f0,prr),e(AL,urr),e(AL,m0),e(m0,u_e),e(u_e,_rr),e(m0,brr),e(m0,oz),e(oz,vrr),e(m0,Frr),e(uo,Trr),e(uo,g0),e(g0,Mrr),e(g0,__e),e(__e,Err),e(g0,Crr),e(g0,b_e),e(b_e,wrr),e(uo,Arr),M(h0,uo,null),b(f,Cqe,_),b(f,kd,_),e(kd,p0),e(p0,v_e),M(yL,v_e,null),e(kd,yrr),e(kd,F_e),e(F_e,Lrr),b(f,wqe,_),b(f,Ho,_),M(LL,Ho,null),e(Ho,xrr),e(Ho,Sd),e(Sd,$rr),e(Sd,rz),e(rz,krr),e(Sd,Srr),e(Sd,tz),e(tz,Rrr),e(Sd,Prr),e(Ho,Brr),e(Ho,xL),e(xL,Irr),e(xL,T_e),e(T_e,qrr),e(xL,Nrr),e(Ho,jrr),e(Ho,Ct),M($L,Ct,null),e(Ct,Drr),e(Ct,M_e),e(M_e,Grr),e(Ct,Orr),e(Ct,Rd),e(Rd,Vrr),e(Rd,E_e),e(E_e,Xrr),e(Rd,zrr),e(Rd,az),e(az,Wrr),e(Rd,Qrr),e(Ct,Hrr),M(u0,Ct,null),e(Ho,Urr),e(Ho,_o),M(kL,_o,null),e(_o,Jrr),e(_o,C_e),e(C_e,Yrr),e(_o,Krr),e(_o,Ha),e(Ha,Zrr),e(Ha,w_e),e(w_e,etr),e(Ha,otr),e(Ha,A_e),e(A_e,rtr),e(Ha,ttr),e(Ha,y_e),e(y_e,atr),e(Ha,ntr),e(_o,str),e(_o,L_e),e(L_e,_0),e(_0,x_e),e(x_e,ltr),e(_0,itr),e(_0,nz),e(nz,dtr),e(_0,ctr),e(_o,ftr),e(_o,b0),e(b0,mtr),e(b0,$_e),e($_e,gtr),e(b0,htr),e(b0,k_e),e(k_e,ptr),e(_o,utr),M(v0,_o,null),b(f,Aqe,_),b(f,Pd,_),e(Pd,F0),e(F0,S_e),M(SL,S_e,null),e(Pd,_tr),e(Pd,R_e),e(R_e,btr),b(f,yqe,_),b(f,Uo,_),M(RL,Uo,null),e(Uo,vtr),e(Uo,Bd),e(Bd,Ftr),e(Bd,sz),e(sz,Ttr),e(Bd,Mtr),e(Bd,lz),e(lz,Etr),e(Bd,Ctr),e(Uo,wtr),e(Uo,PL),e(PL,Atr),e(PL,P_e),e(P_e,ytr),e(PL,Ltr),e(Uo,xtr),e(Uo,wt),M(BL,wt,null),e(wt,$tr),e(wt,B_e),e(B_e,ktr),e(wt,Str),e(wt,Id),e(Id,Rtr),e(Id,I_e),e(I_e,Ptr),e(Id,Btr),e(Id,iz),e(iz,Itr),e(Id,qtr),e(wt,Ntr),M(T0,wt,null),e(Uo,jtr),e(Uo,bo),M(IL,bo,null),e(bo,Dtr),e(bo,q_e),e(q_e,Gtr),e(bo,Otr),e(bo,Ua),e(Ua,Vtr),e(Ua,N_e),e(N_e,Xtr),e(Ua,ztr),e(Ua,j_e),e(j_e,Wtr),e(Ua,Qtr),e(Ua,D_e),e(D_e,Htr),e(Ua,Utr),e(bo,Jtr),e(bo,Ja),e(Ja,M0),e(M0,G_e),e(G_e,Ytr),e(M0,Ktr),e(M0,dz),e(dz,Ztr),e(M0,ear),e(Ja,oar),e(Ja,E0),e(E0,O_e),e(O_e,rar),e(E0,tar),e(E0,cz),e(cz,aar),e(E0,nar),e(Ja,sar),e(Ja,C0),e(C0,V_e),e(V_e,lar),e(C0,iar),e(C0,fz),e(fz,dar),e(C0,car),e(Ja,far),e(Ja,w0),e(w0,X_e),e(X_e,mar),e(w0,gar),e(w0,mz),e(mz,har),e(w0,par),e(bo,uar),e(bo,A0),e(A0,_ar),e(A0,z_e),e(z_e,bar),e(A0,Far),e(A0,W_e),e(W_e,Tar),e(bo,Mar),M(y0,bo,null),b(f,Lqe,_),b(f,qd,_),e(qd,L0),e(L0,Q_e),M(qL,Q_e,null),e(qd,Ear),e(qd,H_e),e(H_e,Car),b(f,xqe,_),b(f,Jo,_),M(NL,Jo,null),e(Jo,war),e(Jo,Nd),e(Nd,Aar),e(Nd,gz),e(gz,yar),e(Nd,Lar),e(Nd,hz),e(hz,xar),e(Nd,$ar),e(Jo,kar),e(Jo,jL),e(jL,Sar),e(jL,U_e),e(U_e,Rar),e(jL,Par),e(Jo,Bar),e(Jo,At),M(DL,At,null),e(At,Iar),e(At,J_e),e(J_e,qar),e(At,Nar),e(At,jd),e(jd,jar),e(jd,Y_e),e(Y_e,Dar),e(jd,Gar),e(jd,pz),e(pz,Oar),e(jd,Var),e(At,Xar),M(x0,At,null),e(Jo,zar),e(Jo,vo),M(GL,vo,null),e(vo,War),e(vo,K_e),e(K_e,Qar),e(vo,Har),e(vo,Ya),e(Ya,Uar),e(Ya,Z_e),e(Z_e,Jar),e(Ya,Yar),e(Ya,e2e),e(e2e,Kar),e(Ya,Zar),e(Ya,o2e),e(o2e,enr),e(Ya,onr),e(vo,rnr),e(vo,r2e),e(r2e,$0),e($0,t2e),e(t2e,tnr),e($0,anr),e($0,uz),e(uz,nnr),e($0,snr),e(vo,lnr),e(vo,k0),e(k0,inr),e(k0,a2e),e(a2e,dnr),e(k0,cnr),e(k0,n2e),e(n2e,fnr),e(vo,mnr),M(S0,vo,null),b(f,$qe,_),b(f,Dd,_),e(Dd,R0),e(R0,s2e),M(OL,s2e,null),e(Dd,gnr),e(Dd,l2e),e(l2e,hnr),b(f,kqe,_),b(f,Yo,_),M(VL,Yo,null),e(Yo,pnr),e(Yo,Gd),e(Gd,unr),e(Gd,_z),e(_z,_nr),e(Gd,bnr),e(Gd,bz),e(bz,vnr),e(Gd,Fnr),e(Yo,Tnr),e(Yo,XL),e(XL,Mnr),e(XL,i2e),e(i2e,Enr),e(XL,Cnr),e(Yo,wnr),e(Yo,yt),M(zL,yt,null),e(yt,Anr),e(yt,d2e),e(d2e,ynr),e(yt,Lnr),e(yt,Od),e(Od,xnr),e(Od,c2e),e(c2e,$nr),e(Od,knr),e(Od,vz),e(vz,Snr),e(Od,Rnr),e(yt,Pnr),M(P0,yt,null),e(Yo,Bnr),e(Yo,wr),M(WL,wr,null),e(wr,Inr),e(wr,f2e),e(f2e,qnr),e(wr,Nnr),e(wr,Ka),e(Ka,jnr),e(Ka,m2e),e(m2e,Dnr),e(Ka,Gnr),e(Ka,g2e),e(g2e,Onr),e(Ka,Vnr),e(Ka,h2e),e(h2e,Xnr),e(Ka,znr),e(wr,Wnr),e(wr,N),e(N,B0),e(B0,p2e),e(p2e,Qnr),e(B0,Hnr),e(B0,Fz),e(Fz,Unr),e(B0,Jnr),e(N,Ynr),e(N,I0),e(I0,u2e),e(u2e,Knr),e(I0,Znr),e(I0,Tz),e(Tz,esr),e(I0,osr),e(N,rsr),e(N,q0),e(q0,_2e),e(_2e,tsr),e(q0,asr),e(q0,Mz),e(Mz,nsr),e(q0,ssr),e(N,lsr),e(N,N0),e(N0,b2e),e(b2e,isr),e(N0,dsr),e(N0,Ez),e(Ez,csr),e(N0,fsr),e(N,msr),e(N,j0),e(j0,v2e),e(v2e,gsr),e(j0,hsr),e(j0,Cz),e(Cz,psr),e(j0,usr),e(N,_sr),e(N,D0),e(D0,F2e),e(F2e,bsr),e(D0,vsr),e(D0,wz),e(wz,Fsr),e(D0,Tsr),e(N,Msr),e(N,G0),e(G0,T2e),e(T2e,Esr),e(G0,Csr),e(G0,Az),e(Az,wsr),e(G0,Asr),e(N,ysr),e(N,O0),e(O0,M2e),e(M2e,Lsr),e(O0,xsr),e(O0,yz),e(yz,$sr),e(O0,ksr),e(N,Ssr),e(N,V0),e(V0,E2e),e(E2e,Rsr),e(V0,Psr),e(V0,Lz),e(Lz,Bsr),e(V0,Isr),e(N,qsr),e(N,X0),e(X0,C2e),e(C2e,Nsr),e(X0,jsr),e(X0,xz),e(xz,Dsr),e(X0,Gsr),e(N,Osr),e(N,z0),e(z0,w2e),e(w2e,Vsr),e(z0,Xsr),e(z0,$z),e($z,zsr),e(z0,Wsr),e(N,Qsr),e(N,W0),e(W0,A2e),e(A2e,Hsr),e(W0,Usr),e(W0,kz),e(kz,Jsr),e(W0,Ysr),e(N,Ksr),e(N,Q0),e(Q0,y2e),e(y2e,Zsr),e(Q0,elr),e(Q0,Sz),e(Sz,olr),e(Q0,rlr),e(N,tlr),e(N,H0),e(H0,L2e),e(L2e,alr),e(H0,nlr),e(H0,Rz),e(Rz,slr),e(H0,llr),e(N,ilr),e(N,U0),e(U0,x2e),e(x2e,dlr),e(U0,clr),e(U0,Pz),e(Pz,flr),e(U0,mlr),e(N,glr),e(N,J0),e(J0,$2e),e($2e,hlr),e(J0,plr),e(J0,Bz),e(Bz,ulr),e(J0,_lr),e(N,blr),e(N,Y0),e(Y0,k2e),e(k2e,vlr),e(Y0,Flr),e(Y0,Iz),e(Iz,Tlr),e(Y0,Mlr),e(N,Elr),e(N,Bs),e(Bs,S2e),e(S2e,Clr),e(Bs,wlr),e(Bs,qz),e(qz,Alr),e(Bs,ylr),e(Bs,Nz),e(Nz,Llr),e(Bs,xlr),e(N,$lr),e(N,K0),e(K0,R2e),e(R2e,klr),e(K0,Slr),e(K0,jz),e(jz,Rlr),e(K0,Plr),e(N,Blr),e(N,Z0),e(Z0,P2e),e(P2e,Ilr),e(Z0,qlr),e(Z0,Dz),e(Dz,Nlr),e(Z0,jlr),e(N,Dlr),e(N,eT),e(eT,B2e),e(B2e,Glr),e(eT,Olr),e(eT,Gz),e(Gz,Vlr),e(eT,Xlr),e(N,zlr),e(N,oT),e(oT,I2e),e(I2e,Wlr),e(oT,Qlr),e(oT,Oz),e(Oz,Hlr),e(oT,Ulr),e(N,Jlr),e(N,rT),e(rT,q2e),e(q2e,Ylr),e(rT,Klr),e(rT,Vz),e(Vz,Zlr),e(rT,eir),e(N,oir),e(N,tT),e(tT,N2e),e(N2e,rir),e(tT,tir),e(tT,Xz),e(Xz,air),e(tT,nir),e(N,sir),e(N,aT),e(aT,j2e),e(j2e,lir),e(aT,iir),e(aT,zz),e(zz,dir),e(aT,cir),e(N,fir),e(N,nT),e(nT,D2e),e(D2e,mir),e(nT,gir),e(nT,Wz),e(Wz,hir),e(nT,pir),e(N,uir),e(N,sT),e(sT,G2e),e(G2e,_ir),e(sT,bir),e(sT,Qz),e(Qz,vir),e(sT,Fir),e(N,Tir),e(N,lT),e(lT,O2e),e(O2e,Mir),e(lT,Eir),e(lT,Hz),e(Hz,Cir),e(lT,wir),e(N,Air),e(N,iT),e(iT,V2e),e(V2e,yir),e(iT,Lir),e(iT,Uz),e(Uz,xir),e(iT,$ir),e(N,kir),e(N,dT),e(dT,X2e),e(X2e,Sir),e(dT,Rir),e(dT,Jz),e(Jz,Pir),e(dT,Bir),e(N,Iir),e(N,cT),e(cT,z2e),e(z2e,qir),e(cT,Nir),e(cT,Yz),e(Yz,jir),e(cT,Dir),e(N,Gir),e(N,fT),e(fT,W2e),e(W2e,Oir),e(fT,Vir),e(fT,Kz),e(Kz,Xir),e(fT,zir),e(N,Wir),e(N,mT),e(mT,Q2e),e(Q2e,Qir),e(mT,Hir),e(mT,Zz),e(Zz,Uir),e(mT,Jir),e(N,Yir),e(N,gT),e(gT,H2e),e(H2e,Kir),e(gT,Zir),e(gT,eW),e(eW,edr),e(gT,odr),e(N,rdr),e(N,hT),e(hT,U2e),e(U2e,tdr),e(hT,adr),e(hT,oW),e(oW,ndr),e(hT,sdr),e(N,ldr),e(N,pT),e(pT,J2e),e(J2e,idr),e(pT,ddr),e(pT,rW),e(rW,cdr),e(pT,fdr),e(N,mdr),e(N,uT),e(uT,Y2e),e(Y2e,gdr),e(uT,hdr),e(uT,tW),e(tW,pdr),e(uT,udr),e(N,_dr),e(N,_T),e(_T,K2e),e(K2e,bdr),e(_T,vdr),e(_T,aW),e(aW,Fdr),e(_T,Tdr),e(N,Mdr),e(N,bT),e(bT,Z2e),e(Z2e,Edr),e(bT,Cdr),e(bT,nW),e(nW,wdr),e(bT,Adr),e(N,ydr),e(N,vT),e(vT,e1e),e(e1e,Ldr),e(vT,xdr),e(vT,sW),e(sW,$dr),e(vT,kdr),e(N,Sdr),e(N,FT),e(FT,o1e),e(o1e,Rdr),e(FT,Pdr),e(FT,lW),e(lW,Bdr),e(FT,Idr),e(N,qdr),e(N,TT),e(TT,r1e),e(r1e,Ndr),e(TT,jdr),e(TT,iW),e(iW,Ddr),e(TT,Gdr),e(N,Odr),e(N,MT),e(MT,t1e),e(t1e,Vdr),e(MT,Xdr),e(MT,dW),e(dW,zdr),e(MT,Wdr),e(N,Qdr),e(N,ET),e(ET,a1e),e(a1e,Hdr),e(ET,Udr),e(ET,cW),e(cW,Jdr),e(ET,Ydr),e(N,Kdr),e(N,CT),e(CT,n1e),e(n1e,Zdr),e(CT,ecr),e(CT,fW),e(fW,ocr),e(CT,rcr),e(N,tcr),e(N,wT),e(wT,s1e),e(s1e,acr),e(wT,ncr),e(wT,mW),e(mW,scr),e(wT,lcr),e(wr,icr),M(AT,wr,null),b(f,Sqe,_),b(f,Vd,_),e(Vd,yT),e(yT,l1e),M(QL,l1e,null),e(Vd,dcr),e(Vd,i1e),e(i1e,ccr),b(f,Rqe,_),b(f,Ko,_),M(HL,Ko,null),e(Ko,fcr),e(Ko,Xd),e(Xd,mcr),e(Xd,gW),e(gW,gcr),e(Xd,hcr),e(Xd,hW),e(hW,pcr),e(Xd,ucr),e(Ko,_cr),e(Ko,UL),e(UL,bcr),e(UL,d1e),e(d1e,vcr),e(UL,Fcr),e(Ko,Tcr),e(Ko,Lt),M(JL,Lt,null),e(Lt,Mcr),e(Lt,c1e),e(c1e,Ecr),e(Lt,Ccr),e(Lt,zd),e(zd,wcr),e(zd,f1e),e(f1e,Acr),e(zd,ycr),e(zd,pW),e(pW,Lcr),e(zd,xcr),e(Lt,$cr),M(LT,Lt,null),e(Ko,kcr),e(Ko,Ar),M(YL,Ar,null),e(Ar,Scr),e(Ar,m1e),e(m1e,Rcr),e(Ar,Pcr),e(Ar,Za),e(Za,Bcr),e(Za,g1e),e(g1e,Icr),e(Za,qcr),e(Za,h1e),e(h1e,Ncr),e(Za,jcr),e(Za,p1e),e(p1e,Dcr),e(Za,Gcr),e(Ar,Ocr),e(Ar,se),e(se,xT),e(xT,u1e),e(u1e,Vcr),e(xT,Xcr),e(xT,uW),e(uW,zcr),e(xT,Wcr),e(se,Qcr),e(se,$T),e($T,_1e),e(_1e,Hcr),e($T,Ucr),e($T,_W),e(_W,Jcr),e($T,Ycr),e(se,Kcr),e(se,kT),e(kT,b1e),e(b1e,Zcr),e(kT,efr),e(kT,bW),e(bW,ofr),e(kT,rfr),e(se,tfr),e(se,ST),e(ST,v1e),e(v1e,afr),e(ST,nfr),e(ST,vW),e(vW,sfr),e(ST,lfr),e(se,ifr),e(se,RT),e(RT,F1e),e(F1e,dfr),e(RT,cfr),e(RT,FW),e(FW,ffr),e(RT,mfr),e(se,gfr),e(se,PT),e(PT,T1e),e(T1e,hfr),e(PT,pfr),e(PT,TW),e(TW,ufr),e(PT,_fr),e(se,bfr),e(se,BT),e(BT,M1e),e(M1e,vfr),e(BT,Ffr),e(BT,MW),e(MW,Tfr),e(BT,Mfr),e(se,Efr),e(se,IT),e(IT,E1e),e(E1e,Cfr),e(IT,wfr),e(IT,EW),e(EW,Afr),e(IT,yfr),e(se,Lfr),e(se,qT),e(qT,C1e),e(C1e,xfr),e(qT,$fr),e(qT,CW),e(CW,kfr),e(qT,Sfr),e(se,Rfr),e(se,NT),e(NT,w1e),e(w1e,Pfr),e(NT,Bfr),e(NT,wW),e(wW,Ifr),e(NT,qfr),e(se,Nfr),e(se,jT),e(jT,A1e),e(A1e,jfr),e(jT,Dfr),e(jT,AW),e(AW,Gfr),e(jT,Ofr),e(se,Vfr),e(se,DT),e(DT,y1e),e(y1e,Xfr),e(DT,zfr),e(DT,yW),e(yW,Wfr),e(DT,Qfr),e(se,Hfr),e(se,GT),e(GT,L1e),e(L1e,Ufr),e(GT,Jfr),e(GT,LW),e(LW,Yfr),e(GT,Kfr),e(se,Zfr),e(se,OT),e(OT,x1e),e(x1e,emr),e(OT,omr),e(OT,xW),e(xW,rmr),e(OT,tmr),e(se,amr),e(se,VT),e(VT,$1e),e($1e,nmr),e(VT,smr),e(VT,$W),e($W,lmr),e(VT,imr),e(se,dmr),e(se,XT),e(XT,k1e),e(k1e,cmr),e(XT,fmr),e(XT,kW),e(kW,mmr),e(XT,gmr),e(se,hmr),e(se,zT),e(zT,S1e),e(S1e,pmr),e(zT,umr),e(zT,SW),e(SW,_mr),e(zT,bmr),e(se,vmr),e(se,WT),e(WT,R1e),e(R1e,Fmr),e(WT,Tmr),e(WT,RW),e(RW,Mmr),e(WT,Emr),e(se,Cmr),e(se,QT),e(QT,P1e),e(P1e,wmr),e(QT,Amr),e(QT,PW),e(PW,ymr),e(QT,Lmr),e(se,xmr),e(se,HT),e(HT,B1e),e(B1e,$mr),e(HT,kmr),e(HT,BW),e(BW,Smr),e(HT,Rmr),e(se,Pmr),e(se,UT),e(UT,I1e),e(I1e,Bmr),e(UT,Imr),e(UT,IW),e(IW,qmr),e(UT,Nmr),e(se,jmr),e(se,JT),e(JT,q1e),e(q1e,Dmr),e(JT,Gmr),e(JT,qW),e(qW,Omr),e(JT,Vmr),e(se,Xmr),e(se,YT),e(YT,N1e),e(N1e,zmr),e(YT,Wmr),e(YT,NW),e(NW,Qmr),e(YT,Hmr),e(Ar,Umr),M(KT,Ar,null),b(f,Pqe,_),b(f,Wd,_),e(Wd,ZT),e(ZT,j1e),M(KL,j1e,null),e(Wd,Jmr),e(Wd,D1e),e(D1e,Ymr),b(f,Bqe,_),b(f,Zo,_),M(ZL,Zo,null),e(Zo,Kmr),e(Zo,Qd),e(Qd,Zmr),e(Qd,jW),e(jW,egr),e(Qd,ogr),e(Qd,DW),e(DW,rgr),e(Qd,tgr),e(Zo,agr),e(Zo,e8),e(e8,ngr),e(e8,G1e),e(G1e,sgr),e(e8,lgr),e(Zo,igr),e(Zo,xt),M(o8,xt,null),e(xt,dgr),e(xt,O1e),e(O1e,cgr),e(xt,fgr),e(xt,Hd),e(Hd,mgr),e(Hd,V1e),e(V1e,ggr),e(Hd,hgr),e(Hd,GW),e(GW,pgr),e(Hd,ugr),e(xt,_gr),M(e7,xt,null),e(Zo,bgr),e(Zo,yr),M(r8,yr,null),e(yr,vgr),e(yr,X1e),e(X1e,Fgr),e(yr,Tgr),e(yr,en),e(en,Mgr),e(en,z1e),e(z1e,Egr),e(en,Cgr),e(en,W1e),e(W1e,wgr),e(en,Agr),e(en,Q1e),e(Q1e,ygr),e(en,Lgr),e(yr,xgr),e(yr,Te),e(Te,o7),e(o7,H1e),e(H1e,$gr),e(o7,kgr),e(o7,OW),e(OW,Sgr),e(o7,Rgr),e(Te,Pgr),e(Te,r7),e(r7,U1e),e(U1e,Bgr),e(r7,Igr),e(r7,VW),e(VW,qgr),e(r7,Ngr),e(Te,jgr),e(Te,t7),e(t7,J1e),e(J1e,Dgr),e(t7,Ggr),e(t7,XW),e(XW,Ogr),e(t7,Vgr),e(Te,Xgr),e(Te,a7),e(a7,Y1e),e(Y1e,zgr),e(a7,Wgr),e(a7,zW),e(zW,Qgr),e(a7,Hgr),e(Te,Ugr),e(Te,n7),e(n7,K1e),e(K1e,Jgr),e(n7,Ygr),e(n7,WW),e(WW,Kgr),e(n7,Zgr),e(Te,ehr),e(Te,s7),e(s7,Z1e),e(Z1e,ohr),e(s7,rhr),e(s7,QW),e(QW,thr),e(s7,ahr),e(Te,nhr),e(Te,l7),e(l7,ebe),e(ebe,shr),e(l7,lhr),e(l7,HW),e(HW,ihr),e(l7,dhr),e(Te,chr),e(Te,i7),e(i7,obe),e(obe,fhr),e(i7,mhr),e(i7,UW),e(UW,ghr),e(i7,hhr),e(Te,phr),e(Te,d7),e(d7,rbe),e(rbe,uhr),e(d7,_hr),e(d7,JW),e(JW,bhr),e(d7,vhr),e(Te,Fhr),e(Te,c7),e(c7,tbe),e(tbe,Thr),e(c7,Mhr),e(c7,YW),e(YW,Ehr),e(c7,Chr),e(Te,whr),e(Te,f7),e(f7,abe),e(abe,Ahr),e(f7,yhr),e(f7,KW),e(KW,Lhr),e(f7,xhr),e(Te,$hr),e(Te,m7),e(m7,nbe),e(nbe,khr),e(m7,Shr),e(m7,ZW),e(ZW,Rhr),e(m7,Phr),e(yr,Bhr),M(g7,yr,null),b(f,Iqe,_),b(f,Ud,_),e(Ud,h7),e(h7,sbe),M(t8,sbe,null),e(Ud,Ihr),e(Ud,lbe),e(lbe,qhr),b(f,qqe,_),b(f,er,_),M(a8,er,null),e(er,Nhr),e(er,Jd),e(Jd,jhr),e(Jd,eQ),e(eQ,Dhr),e(Jd,Ghr),e(Jd,oQ),e(oQ,Ohr),e(Jd,Vhr),e(er,Xhr),e(er,n8),e(n8,zhr),e(n8,ibe),e(ibe,Whr),e(n8,Qhr),e(er,Hhr),e(er,$t),M(s8,$t,null),e($t,Uhr),e($t,dbe),e(dbe,Jhr),e($t,Yhr),e($t,Yd),e(Yd,Khr),e(Yd,cbe),e(cbe,Zhr),e(Yd,epr),e(Yd,rQ),e(rQ,opr),e(Yd,rpr),e($t,tpr),M(p7,$t,null),e(er,apr),e(er,Lr),M(l8,Lr,null),e(Lr,npr),e(Lr,fbe),e(fbe,spr),e(Lr,lpr),e(Lr,on),e(on,ipr),e(on,mbe),e(mbe,dpr),e(on,cpr),e(on,gbe),e(gbe,fpr),e(on,mpr),e(on,hbe),e(hbe,gpr),e(on,hpr),e(Lr,ppr),e(Lr,rn),e(rn,u7),e(u7,pbe),e(pbe,upr),e(u7,_pr),e(u7,tQ),e(tQ,bpr),e(u7,vpr),e(rn,Fpr),e(rn,_7),e(_7,ube),e(ube,Tpr),e(_7,Mpr),e(_7,aQ),e(aQ,Epr),e(_7,Cpr),e(rn,wpr),e(rn,b7),e(b7,_be),e(_be,Apr),e(b7,ypr),e(b7,nQ),e(nQ,Lpr),e(b7,xpr),e(rn,$pr),e(rn,v7),e(v7,bbe),e(bbe,kpr),e(v7,Spr),e(v7,sQ),e(sQ,Rpr),e(v7,Ppr),e(Lr,Bpr),M(F7,Lr,null),b(f,Nqe,_),b(f,Kd,_),e(Kd,T7),e(T7,vbe),M(i8,vbe,null),e(Kd,Ipr),e(Kd,Fbe),e(Fbe,qpr),b(f,jqe,_),b(f,or,_),M(d8,or,null),e(or,Npr),e(or,Zd),e(Zd,jpr),e(Zd,lQ),e(lQ,Dpr),e(Zd,Gpr),e(Zd,iQ),e(iQ,Opr),e(Zd,Vpr),e(or,Xpr),e(or,c8),e(c8,zpr),e(c8,Tbe),e(Tbe,Wpr),e(c8,Qpr),e(or,Hpr),e(or,kt),M(f8,kt,null),e(kt,Upr),e(kt,Mbe),e(Mbe,Jpr),e(kt,Ypr),e(kt,ec),e(ec,Kpr),e(ec,Ebe),e(Ebe,Zpr),e(ec,eur),e(ec,dQ),e(dQ,our),e(ec,rur),e(kt,tur),M(M7,kt,null),e(or,aur),e(or,xr),M(m8,xr,null),e(xr,nur),e(xr,Cbe),e(Cbe,sur),e(xr,lur),e(xr,tn),e(tn,iur),e(tn,wbe),e(wbe,dur),e(tn,cur),e(tn,Abe),e(Abe,fur),e(tn,mur),e(tn,ybe),e(ybe,gur),e(tn,hur),e(xr,pur),e(xr,ie),e(ie,E7),e(E7,Lbe),e(Lbe,uur),e(E7,_ur),e(E7,cQ),e(cQ,bur),e(E7,vur),e(ie,Fur),e(ie,C7),e(C7,xbe),e(xbe,Tur),e(C7,Mur),e(C7,fQ),e(fQ,Eur),e(C7,Cur),e(ie,wur),e(ie,w7),e(w7,$be),e($be,Aur),e(w7,yur),e(w7,mQ),e(mQ,Lur),e(w7,xur),e(ie,$ur),e(ie,A7),e(A7,kbe),e(kbe,kur),e(A7,Sur),e(A7,gQ),e(gQ,Rur),e(A7,Pur),e(ie,Bur),e(ie,y7),e(y7,Sbe),e(Sbe,Iur),e(y7,qur),e(y7,hQ),e(hQ,Nur),e(y7,jur),e(ie,Dur),e(ie,L7),e(L7,Rbe),e(Rbe,Gur),e(L7,Our),e(L7,pQ),e(pQ,Vur),e(L7,Xur),e(ie,zur),e(ie,x7),e(x7,Pbe),e(Pbe,Wur),e(x7,Qur),e(x7,uQ),e(uQ,Hur),e(x7,Uur),e(ie,Jur),e(ie,$7),e($7,Bbe),e(Bbe,Yur),e($7,Kur),e($7,_Q),e(_Q,Zur),e($7,e_r),e(ie,o_r),e(ie,k7),e(k7,Ibe),e(Ibe,r_r),e(k7,t_r),e(k7,bQ),e(bQ,a_r),e(k7,n_r),e(ie,s_r),e(ie,S7),e(S7,qbe),e(qbe,l_r),e(S7,i_r),e(S7,vQ),e(vQ,d_r),e(S7,c_r),e(ie,f_r),e(ie,R7),e(R7,Nbe),e(Nbe,m_r),e(R7,g_r),e(R7,FQ),e(FQ,h_r),e(R7,p_r),e(ie,u_r),e(ie,P7),e(P7,jbe),e(jbe,__r),e(P7,b_r),e(P7,TQ),e(TQ,v_r),e(P7,F_r),e(ie,T_r),e(ie,B7),e(B7,Dbe),e(Dbe,M_r),e(B7,E_r),e(B7,MQ),e(MQ,C_r),e(B7,w_r),e(ie,A_r),e(ie,I7),e(I7,Gbe),e(Gbe,y_r),e(I7,L_r),e(I7,EQ),e(EQ,x_r),e(I7,$_r),e(ie,k_r),e(ie,q7),e(q7,Obe),e(Obe,S_r),e(q7,R_r),e(q7,CQ),e(CQ,P_r),e(q7,B_r),e(ie,I_r),e(ie,N7),e(N7,Vbe),e(Vbe,q_r),e(N7,N_r),e(N7,wQ),e(wQ,j_r),e(N7,D_r),e(ie,G_r),e(ie,j7),e(j7,Xbe),e(Xbe,O_r),e(j7,V_r),e(j7,AQ),e(AQ,X_r),e(j7,z_r),e(ie,W_r),e(ie,D7),e(D7,zbe),e(zbe,Q_r),e(D7,H_r),e(D7,yQ),e(yQ,U_r),e(D7,J_r),e(ie,Y_r),e(ie,G7),e(G7,Wbe),e(Wbe,K_r),e(G7,Z_r),e(G7,LQ),e(LQ,e2r),e(G7,o2r),e(ie,r2r),e(ie,O7),e(O7,Qbe),e(Qbe,t2r),e(O7,a2r),e(O7,xQ),e(xQ,n2r),e(O7,s2r),e(xr,l2r),M(V7,xr,null),b(f,Dqe,_),b(f,oc,_),e(oc,X7),e(X7,Hbe),M(g8,Hbe,null),e(oc,i2r),e(oc,Ube),e(Ube,d2r),b(f,Gqe,_),b(f,rr,_),M(h8,rr,null),e(rr,c2r),e(rr,rc),e(rc,f2r),e(rc,$Q),e($Q,m2r),e(rc,g2r),e(rc,kQ),e(kQ,h2r),e(rc,p2r),e(rr,u2r),e(rr,p8),e(p8,_2r),e(p8,Jbe),e(Jbe,b2r),e(p8,v2r),e(rr,F2r),e(rr,St),M(u8,St,null),e(St,T2r),e(St,Ybe),e(Ybe,M2r),e(St,E2r),e(St,tc),e(tc,C2r),e(tc,Kbe),e(Kbe,w2r),e(tc,A2r),e(tc,SQ),e(SQ,y2r),e(tc,L2r),e(St,x2r),M(z7,St,null),e(rr,$2r),e(rr,$r),M(_8,$r,null),e($r,k2r),e($r,Zbe),e(Zbe,S2r),e($r,R2r),e($r,an),e(an,P2r),e(an,eve),e(eve,B2r),e(an,I2r),e(an,ove),e(ove,q2r),e(an,N2r),e(an,rve),e(rve,j2r),e(an,D2r),e($r,G2r),e($r,ye),e(ye,W7),e(W7,tve),e(tve,O2r),e(W7,V2r),e(W7,RQ),e(RQ,X2r),e(W7,z2r),e(ye,W2r),e(ye,Q7),e(Q7,ave),e(ave,Q2r),e(Q7,H2r),e(Q7,PQ),e(PQ,U2r),e(Q7,J2r),e(ye,Y2r),e(ye,H7),e(H7,nve),e(nve,K2r),e(H7,Z2r),e(H7,BQ),e(BQ,e1r),e(H7,o1r),e(ye,r1r),e(ye,U7),e(U7,sve),e(sve,t1r),e(U7,a1r),e(U7,IQ),e(IQ,n1r),e(U7,s1r),e(ye,l1r),e(ye,J7),e(J7,lve),e(lve,i1r),e(J7,d1r),e(J7,qQ),e(qQ,c1r),e(J7,f1r),e(ye,m1r),e(ye,Y7),e(Y7,ive),e(ive,g1r),e(Y7,h1r),e(Y7,NQ),e(NQ,p1r),e(Y7,u1r),e(ye,_1r),e(ye,K7),e(K7,dve),e(dve,b1r),e(K7,v1r),e(K7,jQ),e(jQ,F1r),e(K7,T1r),e(ye,M1r),e(ye,Z7),e(Z7,cve),e(cve,E1r),e(Z7,C1r),e(Z7,DQ),e(DQ,w1r),e(Z7,A1r),e(ye,y1r),e(ye,eM),e(eM,fve),e(fve,L1r),e(eM,x1r),e(eM,GQ),e(GQ,$1r),e(eM,k1r),e(ye,S1r),e(ye,oM),e(oM,mve),e(mve,R1r),e(oM,P1r),e(oM,OQ),e(OQ,B1r),e(oM,I1r),e($r,q1r),M(rM,$r,null),b(f,Oqe,_),b(f,ac,_),e(ac,tM),e(tM,gve),M(b8,gve,null),e(ac,N1r),e(ac,hve),e(hve,j1r),b(f,Vqe,_),b(f,tr,_),M(v8,tr,null),e(tr,D1r),e(tr,nc),e(nc,G1r),e(nc,VQ),e(VQ,O1r),e(nc,V1r),e(nc,XQ),e(XQ,X1r),e(nc,z1r),e(tr,W1r),e(tr,F8),e(F8,Q1r),e(F8,pve),e(pve,H1r),e(F8,U1r),e(tr,J1r),e(tr,Rt),M(T8,Rt,null),e(Rt,Y1r),e(Rt,uve),e(uve,K1r),e(Rt,Z1r),e(Rt,sc),e(sc,ebr),e(sc,_ve),e(_ve,obr),e(sc,rbr),e(sc,zQ),e(zQ,tbr),e(sc,abr),e(Rt,nbr),M(aM,Rt,null),e(tr,sbr),e(tr,kr),M(M8,kr,null),e(kr,lbr),e(kr,bve),e(bve,ibr),e(kr,dbr),e(kr,nn),e(nn,cbr),e(nn,vve),e(vve,fbr),e(nn,mbr),e(nn,Fve),e(Fve,gbr),e(nn,hbr),e(nn,Tve),e(Tve,pbr),e(nn,ubr),e(kr,_br),e(kr,ee),e(ee,nM),e(nM,Mve),e(Mve,bbr),e(nM,vbr),e(nM,WQ),e(WQ,Fbr),e(nM,Tbr),e(ee,Mbr),e(ee,sM),e(sM,Eve),e(Eve,Ebr),e(sM,Cbr),e(sM,QQ),e(QQ,wbr),e(sM,Abr),e(ee,ybr),e(ee,lM),e(lM,Cve),e(Cve,Lbr),e(lM,xbr),e(lM,HQ),e(HQ,$br),e(lM,kbr),e(ee,Sbr),e(ee,iM),e(iM,wve),e(wve,Rbr),e(iM,Pbr),e(iM,UQ),e(UQ,Bbr),e(iM,Ibr),e(ee,qbr),e(ee,dM),e(dM,Ave),e(Ave,Nbr),e(dM,jbr),e(dM,JQ),e(JQ,Dbr),e(dM,Gbr),e(ee,Obr),e(ee,cM),e(cM,yve),e(yve,Vbr),e(cM,Xbr),e(cM,YQ),e(YQ,zbr),e(cM,Wbr),e(ee,Qbr),e(ee,fM),e(fM,Lve),e(Lve,Hbr),e(fM,Ubr),e(fM,KQ),e(KQ,Jbr),e(fM,Ybr),e(ee,Kbr),e(ee,mM),e(mM,xve),e(xve,Zbr),e(mM,evr),e(mM,ZQ),e(ZQ,ovr),e(mM,rvr),e(ee,tvr),e(ee,gM),e(gM,$ve),e($ve,avr),e(gM,nvr),e(gM,eH),e(eH,svr),e(gM,lvr),e(ee,ivr),e(ee,hM),e(hM,kve),e(kve,dvr),e(hM,cvr),e(hM,oH),e(oH,fvr),e(hM,mvr),e(ee,gvr),e(ee,pM),e(pM,Sve),e(Sve,hvr),e(pM,pvr),e(pM,rH),e(rH,uvr),e(pM,_vr),e(ee,bvr),e(ee,uM),e(uM,Rve),e(Rve,vvr),e(uM,Fvr),e(uM,tH),e(tH,Tvr),e(uM,Mvr),e(ee,Evr),e(ee,_M),e(_M,Pve),e(Pve,Cvr),e(_M,wvr),e(_M,aH),e(aH,Avr),e(_M,yvr),e(ee,Lvr),e(ee,bM),e(bM,Bve),e(Bve,xvr),e(bM,$vr),e(bM,nH),e(nH,kvr),e(bM,Svr),e(ee,Rvr),e(ee,vM),e(vM,Ive),e(Ive,Pvr),e(vM,Bvr),e(vM,sH),e(sH,Ivr),e(vM,qvr),e(ee,Nvr),e(ee,FM),e(FM,qve),e(qve,jvr),e(FM,Dvr),e(FM,lH),e(lH,Gvr),e(FM,Ovr),e(ee,Vvr),e(ee,TM),e(TM,Nve),e(Nve,Xvr),e(TM,zvr),e(TM,iH),e(iH,Wvr),e(TM,Qvr),e(ee,Hvr),e(ee,MM),e(MM,jve),e(jve,Uvr),e(MM,Jvr),e(MM,dH),e(dH,Yvr),e(MM,Kvr),e(ee,Zvr),e(ee,EM),e(EM,Dve),e(Dve,eFr),e(EM,oFr),e(EM,cH),e(cH,rFr),e(EM,tFr),e(ee,aFr),e(ee,CM),e(CM,Gve),e(Gve,nFr),e(CM,sFr),e(CM,fH),e(fH,lFr),e(CM,iFr),e(ee,dFr),e(ee,wM),e(wM,Ove),e(Ove,cFr),e(wM,fFr),e(wM,mH),e(mH,mFr),e(wM,gFr),e(ee,hFr),e(ee,AM),e(AM,Vve),e(Vve,pFr),e(AM,uFr),e(AM,gH),e(gH,_Fr),e(AM,bFr),e(ee,vFr),e(ee,yM),e(yM,Xve),e(Xve,FFr),e(yM,TFr),e(yM,hH),e(hH,MFr),e(yM,EFr),e(ee,CFr),e(ee,LM),e(LM,zve),e(zve,wFr),e(LM,AFr),e(LM,pH),e(pH,yFr),e(LM,LFr),e(ee,xFr),e(ee,xM),e(xM,Wve),e(Wve,$Fr),e(xM,kFr),e(xM,uH),e(uH,SFr),e(xM,RFr),e(ee,PFr),e(ee,$M),e($M,Qve),e(Qve,BFr),e($M,IFr),e($M,_H),e(_H,qFr),e($M,NFr),e(kr,jFr),M(kM,kr,null),b(f,Xqe,_),b(f,lc,_),e(lc,SM),e(SM,Hve),M(E8,Hve,null),e(lc,DFr),e(lc,Uve),e(Uve,GFr),b(f,zqe,_),b(f,ar,_),M(C8,ar,null),e(ar,OFr),e(ar,ic),e(ic,VFr),e(ic,bH),e(bH,XFr),e(ic,zFr),e(ic,vH),e(vH,WFr),e(ic,QFr),e(ar,HFr),e(ar,w8),e(w8,UFr),e(w8,Jve),e(Jve,JFr),e(w8,YFr),e(ar,KFr),e(ar,Pt),M(A8,Pt,null),e(Pt,ZFr),e(Pt,Yve),e(Yve,e6r),e(Pt,o6r),e(Pt,dc),e(dc,r6r),e(dc,Kve),e(Kve,t6r),e(dc,a6r),e(dc,FH),e(FH,n6r),e(dc,s6r),e(Pt,l6r),M(RM,Pt,null),e(ar,i6r),e(ar,Sr),M(y8,Sr,null),e(Sr,d6r),e(Sr,Zve),e(Zve,c6r),e(Sr,f6r),e(Sr,sn),e(sn,m6r),e(sn,eFe),e(eFe,g6r),e(sn,h6r),e(sn,oFe),e(oFe,p6r),e(sn,u6r),e(sn,rFe),e(rFe,_6r),e(sn,b6r),e(Sr,v6r),e(Sr,he),e(he,PM),e(PM,tFe),e(tFe,F6r),e(PM,T6r),e(PM,TH),e(TH,M6r),e(PM,E6r),e(he,C6r),e(he,BM),e(BM,aFe),e(aFe,w6r),e(BM,A6r),e(BM,MH),e(MH,y6r),e(BM,L6r),e(he,x6r),e(he,IM),e(IM,nFe),e(nFe,$6r),e(IM,k6r),e(IM,EH),e(EH,S6r),e(IM,R6r),e(he,P6r),e(he,qM),e(qM,sFe),e(sFe,B6r),e(qM,I6r),e(qM,CH),e(CH,q6r),e(qM,N6r),e(he,j6r),e(he,NM),e(NM,lFe),e(lFe,D6r),e(NM,G6r),e(NM,wH),e(wH,O6r),e(NM,V6r),e(he,X6r),e(he,jM),e(jM,iFe),e(iFe,z6r),e(jM,W6r),e(jM,AH),e(AH,Q6r),e(jM,H6r),e(he,U6r),e(he,DM),e(DM,dFe),e(dFe,J6r),e(DM,Y6r),e(DM,yH),e(yH,K6r),e(DM,Z6r),e(he,e0r),e(he,GM),e(GM,cFe),e(cFe,o0r),e(GM,r0r),e(GM,LH),e(LH,t0r),e(GM,a0r),e(he,n0r),e(he,OM),e(OM,fFe),e(fFe,s0r),e(OM,l0r),e(OM,xH),e(xH,i0r),e(OM,d0r),e(he,c0r),e(he,VM),e(VM,mFe),e(mFe,f0r),e(VM,m0r),e(VM,$H),e($H,g0r),e(VM,h0r),e(he,p0r),e(he,XM),e(XM,gFe),e(gFe,u0r),e(XM,_0r),e(XM,kH),e(kH,b0r),e(XM,v0r),e(he,F0r),e(he,zM),e(zM,hFe),e(hFe,T0r),e(zM,M0r),e(zM,SH),e(SH,E0r),e(zM,C0r),e(he,w0r),e(he,WM),e(WM,pFe),e(pFe,A0r),e(WM,y0r),e(WM,RH),e(RH,L0r),e(WM,x0r),e(he,$0r),e(he,QM),e(QM,uFe),e(uFe,k0r),e(QM,S0r),e(QM,PH),e(PH,R0r),e(QM,P0r),e(he,B0r),e(he,HM),e(HM,_Fe),e(_Fe,I0r),e(HM,q0r),e(HM,BH),e(BH,N0r),e(HM,j0r),e(he,D0r),e(he,UM),e(UM,bFe),e(bFe,G0r),e(UM,O0r),e(UM,IH),e(IH,V0r),e(UM,X0r),e(he,z0r),e(he,JM),e(JM,vFe),e(vFe,W0r),e(JM,Q0r),e(JM,qH),e(qH,H0r),e(JM,U0r),e(Sr,J0r),M(YM,Sr,null),b(f,Wqe,_),b(f,cc,_),e(cc,KM),e(KM,FFe),M(L8,FFe,null),e(cc,Y0r),e(cc,TFe),e(TFe,K0r),b(f,Qqe,_),b(f,nr,_),M(x8,nr,null),e(nr,Z0r),e(nr,fc),e(fc,eTr),e(fc,NH),e(NH,oTr),e(fc,rTr),e(fc,jH),e(jH,tTr),e(fc,aTr),e(nr,nTr),e(nr,$8),e($8,sTr),e($8,MFe),e(MFe,lTr),e($8,iTr),e(nr,dTr),e(nr,Bt),M(k8,Bt,null),e(Bt,cTr),e(Bt,EFe),e(EFe,fTr),e(Bt,mTr),e(Bt,mc),e(mc,gTr),e(mc,CFe),e(CFe,hTr),e(mc,pTr),e(mc,DH),e(DH,uTr),e(mc,_Tr),e(Bt,bTr),M(ZM,Bt,null),e(nr,vTr),e(nr,Rr),M(S8,Rr,null),e(Rr,FTr),e(Rr,wFe),e(wFe,TTr),e(Rr,MTr),e(Rr,ln),e(ln,ETr),e(ln,AFe),e(AFe,CTr),e(ln,wTr),e(ln,yFe),e(yFe,ATr),e(ln,yTr),e(ln,LFe),e(LFe,LTr),e(ln,xTr),e(Rr,$Tr),e(Rr,R8),e(R8,e4),e(e4,xFe),e(xFe,kTr),e(e4,STr),e(e4,GH),e(GH,RTr),e(e4,PTr),e(R8,BTr),e(R8,o4),e(o4,$Fe),e($Fe,ITr),e(o4,qTr),e(o4,OH),e(OH,NTr),e(o4,jTr),e(Rr,DTr),M(r4,Rr,null),b(f,Hqe,_),b(f,gc,_),e(gc,t4),e(t4,kFe),M(P8,kFe,null),e(gc,GTr),e(gc,SFe),e(SFe,OTr),b(f,Uqe,_),b(f,sr,_),M(B8,sr,null),e(sr,VTr),e(sr,hc),e(hc,XTr),e(hc,VH),e(VH,zTr),e(hc,WTr),e(hc,XH),e(XH,QTr),e(hc,HTr),e(sr,UTr),e(sr,I8),e(I8,JTr),e(I8,RFe),e(RFe,YTr),e(I8,KTr),e(sr,ZTr),e(sr,It),M(q8,It,null),e(It,e7r),e(It,PFe),e(PFe,o7r),e(It,r7r),e(It,pc),e(pc,t7r),e(pc,BFe),e(BFe,a7r),e(pc,n7r),e(pc,zH),e(zH,s7r),e(pc,l7r),e(It,i7r),M(a4,It,null),e(sr,d7r),e(sr,Pr),M(N8,Pr,null),e(Pr,c7r),e(Pr,IFe),e(IFe,f7r),e(Pr,m7r),e(Pr,dn),e(dn,g7r),e(dn,qFe),e(qFe,h7r),e(dn,p7r),e(dn,NFe),e(NFe,u7r),e(dn,_7r),e(dn,jFe),e(jFe,b7r),e(dn,v7r),e(Pr,F7r),e(Pr,DFe),e(DFe,n4),e(n4,GFe),e(GFe,T7r),e(n4,M7r),e(n4,WH),e(WH,E7r),e(n4,C7r),e(Pr,w7r),M(s4,Pr,null),b(f,Jqe,_),b(f,uc,_),e(uc,l4),e(l4,OFe),M(j8,OFe,null),e(uc,A7r),e(uc,VFe),e(VFe,y7r),b(f,Yqe,_),b(f,lr,_),M(D8,lr,null),e(lr,L7r),e(lr,_c),e(_c,x7r),e(_c,QH),e(QH,$7r),e(_c,k7r),e(_c,HH),e(HH,S7r),e(_c,R7r),e(lr,P7r),e(lr,G8),e(G8,B7r),e(G8,XFe),e(XFe,I7r),e(G8,q7r),e(lr,N7r),e(lr,qt),M(O8,qt,null),e(qt,j7r),e(qt,zFe),e(zFe,D7r),e(qt,G7r),e(qt,bc),e(bc,O7r),e(bc,WFe),e(WFe,V7r),e(bc,X7r),e(bc,UH),e(UH,z7r),e(bc,W7r),e(qt,Q7r),M(i4,qt,null),e(lr,H7r),e(lr,Br),M(V8,Br,null),e(Br,U7r),e(Br,QFe),e(QFe,J7r),e(Br,Y7r),e(Br,cn),e(cn,K7r),e(cn,HFe),e(HFe,Z7r),e(cn,eMr),e(cn,UFe),e(UFe,oMr),e(cn,rMr),e(cn,JFe),e(JFe,tMr),e(cn,aMr),e(Br,nMr),e(Br,de),e(de,d4),e(d4,YFe),e(YFe,sMr),e(d4,lMr),e(d4,JH),e(JH,iMr),e(d4,dMr),e(de,cMr),e(de,c4),e(c4,KFe),e(KFe,fMr),e(c4,mMr),e(c4,YH),e(YH,gMr),e(c4,hMr),e(de,pMr),e(de,f4),e(f4,ZFe),e(ZFe,uMr),e(f4,_Mr),e(f4,KH),e(KH,bMr),e(f4,vMr),e(de,FMr),e(de,m4),e(m4,e6e),e(e6e,TMr),e(m4,MMr),e(m4,ZH),e(ZH,EMr),e(m4,CMr),e(de,wMr),e(de,g4),e(g4,o6e),e(o6e,AMr),e(g4,yMr),e(g4,eU),e(eU,LMr),e(g4,xMr),e(de,$Mr),e(de,h4),e(h4,r6e),e(r6e,kMr),e(h4,SMr),e(h4,oU),e(oU,RMr),e(h4,PMr),e(de,BMr),e(de,p4),e(p4,t6e),e(t6e,IMr),e(p4,qMr),e(p4,rU),e(rU,NMr),e(p4,jMr),e(de,DMr),e(de,u4),e(u4,a6e),e(a6e,GMr),e(u4,OMr),e(u4,tU),e(tU,VMr),e(u4,XMr),e(de,zMr),e(de,_4),e(_4,n6e),e(n6e,WMr),e(_4,QMr),e(_4,aU),e(aU,HMr),e(_4,UMr),e(de,JMr),e(de,b4),e(b4,s6e),e(s6e,YMr),e(b4,KMr),e(b4,nU),e(nU,ZMr),e(b4,e4r),e(de,o4r),e(de,v4),e(v4,l6e),e(l6e,r4r),e(v4,t4r),e(v4,sU),e(sU,a4r),e(v4,n4r),e(de,s4r),e(de,F4),e(F4,i6e),e(i6e,l4r),e(F4,i4r),e(F4,lU),e(lU,d4r),e(F4,c4r),e(de,f4r),e(de,T4),e(T4,d6e),e(d6e,m4r),e(T4,g4r),e(T4,iU),e(iU,h4r),e(T4,p4r),e(de,u4r),e(de,M4),e(M4,c6e),e(c6e,_4r),e(M4,b4r),e(M4,dU),e(dU,v4r),e(M4,F4r),e(de,T4r),e(de,E4),e(E4,f6e),e(f6e,M4r),e(E4,E4r),e(E4,cU),e(cU,C4r),e(E4,w4r),e(de,A4r),e(de,C4),e(C4,m6e),e(m6e,y4r),e(C4,L4r),e(C4,fU),e(fU,x4r),e(C4,$4r),e(de,k4r),e(de,w4),e(w4,g6e),e(g6e,S4r),e(w4,R4r),e(w4,mU),e(mU,P4r),e(w4,B4r),e(de,I4r),e(de,A4),e(A4,h6e),e(h6e,q4r),e(A4,N4r),e(A4,gU),e(gU,j4r),e(A4,D4r),e(de,G4r),e(de,y4),e(y4,p6e),e(p6e,O4r),e(y4,V4r),e(y4,hU),e(hU,X4r),e(y4,z4r),e(de,W4r),e(de,L4),e(L4,u6e),e(u6e,Q4r),e(L4,H4r),e(L4,pU),e(pU,U4r),e(L4,J4r),e(Br,Y4r),M(x4,Br,null),b(f,Kqe,_),b(f,vc,_),e(vc,$4),e($4,_6e),M(X8,_6e,null),e(vc,K4r),e(vc,b6e),e(b6e,Z4r),b(f,Zqe,_),b(f,ir,_),M(z8,ir,null),e(ir,eEr),e(ir,Fc),e(Fc,oEr),e(Fc,uU),e(uU,rEr),e(Fc,tEr),e(Fc,_U),e(_U,aEr),e(Fc,nEr),e(ir,sEr),e(ir,W8),e(W8,lEr),e(W8,v6e),e(v6e,iEr),e(W8,dEr),e(ir,cEr),e(ir,Nt),M(Q8,Nt,null),e(Nt,fEr),e(Nt,F6e),e(F6e,mEr),e(Nt,gEr),e(Nt,Tc),e(Tc,hEr),e(Tc,T6e),e(T6e,pEr),e(Tc,uEr),e(Tc,bU),e(bU,_Er),e(Tc,bEr),e(Nt,vEr),M(k4,Nt,null),e(ir,FEr),e(ir,Ir),M(H8,Ir,null),e(Ir,TEr),e(Ir,M6e),e(M6e,MEr),e(Ir,EEr),e(Ir,fn),e(fn,CEr),e(fn,E6e),e(E6e,wEr),e(fn,AEr),e(fn,C6e),e(C6e,yEr),e(fn,LEr),e(fn,w6e),e(w6e,xEr),e(fn,$Er),e(Ir,kEr),e(Ir,ce),e(ce,S4),e(S4,A6e),e(A6e,SEr),e(S4,REr),e(S4,vU),e(vU,PEr),e(S4,BEr),e(ce,IEr),e(ce,R4),e(R4,y6e),e(y6e,qEr),e(R4,NEr),e(R4,FU),e(FU,jEr),e(R4,DEr),e(ce,GEr),e(ce,P4),e(P4,L6e),e(L6e,OEr),e(P4,VEr),e(P4,TU),e(TU,XEr),e(P4,zEr),e(ce,WEr),e(ce,B4),e(B4,x6e),e(x6e,QEr),e(B4,HEr),e(B4,MU),e(MU,UEr),e(B4,JEr),e(ce,YEr),e(ce,I4),e(I4,$6e),e($6e,KEr),e(I4,ZEr),e(I4,EU),e(EU,eCr),e(I4,oCr),e(ce,rCr),e(ce,q4),e(q4,k6e),e(k6e,tCr),e(q4,aCr),e(q4,CU),e(CU,nCr),e(q4,sCr),e(ce,lCr),e(ce,N4),e(N4,S6e),e(S6e,iCr),e(N4,dCr),e(N4,wU),e(wU,cCr),e(N4,fCr),e(ce,mCr),e(ce,j4),e(j4,R6e),e(R6e,gCr),e(j4,hCr),e(j4,AU),e(AU,pCr),e(j4,uCr),e(ce,_Cr),e(ce,D4),e(D4,P6e),e(P6e,bCr),e(D4,vCr),e(D4,yU),e(yU,FCr),e(D4,TCr),e(ce,MCr),e(ce,G4),e(G4,B6e),e(B6e,ECr),e(G4,CCr),e(G4,LU),e(LU,wCr),e(G4,ACr),e(ce,yCr),e(ce,O4),e(O4,I6e),e(I6e,LCr),e(O4,xCr),e(O4,xU),e(xU,$Cr),e(O4,kCr),e(ce,SCr),e(ce,V4),e(V4,q6e),e(q6e,RCr),e(V4,PCr),e(V4,$U),e($U,BCr),e(V4,ICr),e(ce,qCr),e(ce,X4),e(X4,N6e),e(N6e,NCr),e(X4,jCr),e(X4,kU),e(kU,DCr),e(X4,GCr),e(ce,OCr),e(ce,z4),e(z4,j6e),e(j6e,VCr),e(z4,XCr),e(z4,SU),e(SU,zCr),e(z4,WCr),e(ce,QCr),e(ce,W4),e(W4,D6e),e(D6e,HCr),e(W4,UCr),e(W4,RU),e(RU,JCr),e(W4,YCr),e(ce,KCr),e(ce,Q4),e(Q4,G6e),e(G6e,ZCr),e(Q4,e5r),e(Q4,PU),e(PU,o5r),e(Q4,r5r),e(ce,t5r),e(ce,H4),e(H4,O6e),e(O6e,a5r),e(H4,n5r),e(H4,BU),e(BU,s5r),e(H4,l5r),e(ce,i5r),e(ce,U4),e(U4,V6e),e(V6e,d5r),e(U4,c5r),e(U4,IU),e(IU,f5r),e(U4,m5r),e(ce,g5r),e(ce,J4),e(J4,X6e),e(X6e,h5r),e(J4,p5r),e(J4,qU),e(qU,u5r),e(J4,_5r),e(ce,b5r),e(ce,Y4),e(Y4,z6e),e(z6e,v5r),e(Y4,F5r),e(Y4,NU),e(NU,T5r),e(Y4,M5r),e(Ir,E5r),M(K4,Ir,null),b(f,eNe,_),b(f,Mc,_),e(Mc,Z4),e(Z4,W6e),M(U8,W6e,null),e(Mc,C5r),e(Mc,Q6e),e(Q6e,w5r),b(f,oNe,_),b(f,dr,_),M(J8,dr,null),e(dr,A5r),e(dr,Ec),e(Ec,y5r),e(Ec,jU),e(jU,L5r),e(Ec,x5r),e(Ec,DU),e(DU,$5r),e(Ec,k5r),e(dr,S5r),e(dr,Y8),e(Y8,R5r),e(Y8,H6e),e(H6e,P5r),e(Y8,B5r),e(dr,I5r),e(dr,jt),M(K8,jt,null),e(jt,q5r),e(jt,U6e),e(U6e,N5r),e(jt,j5r),e(jt,Cc),e(Cc,D5r),e(Cc,J6e),e(J6e,G5r),e(Cc,O5r),e(Cc,GU),e(GU,V5r),e(Cc,X5r),e(jt,z5r),M(eE,jt,null),e(dr,W5r),e(dr,qr),M(Z8,qr,null),e(qr,Q5r),e(qr,Y6e),e(Y6e,H5r),e(qr,U5r),e(qr,mn),e(mn,J5r),e(mn,K6e),e(K6e,Y5r),e(mn,K5r),e(mn,Z6e),e(Z6e,Z5r),e(mn,e3r),e(mn,e0e),e(e0e,o3r),e(mn,r3r),e(qr,t3r),e(qr,o0e),e(o0e,oE),e(oE,r0e),e(r0e,a3r),e(oE,n3r),e(oE,OU),e(OU,s3r),e(oE,l3r),e(qr,i3r),M(rE,qr,null),b(f,rNe,_),b(f,wc,_),e(wc,tE),e(tE,t0e),M(ex,t0e,null),e(wc,d3r),e(wc,a0e),e(a0e,c3r),b(f,tNe,_),b(f,cr,_),M(ox,cr,null),e(cr,f3r),e(cr,Ac),e(Ac,m3r),e(Ac,VU),e(VU,g3r),e(Ac,h3r),e(Ac,XU),e(XU,p3r),e(Ac,u3r),e(cr,_3r),e(cr,rx),e(rx,b3r),e(rx,n0e),e(n0e,v3r),e(rx,F3r),e(cr,T3r),e(cr,Dt),M(tx,Dt,null),e(Dt,M3r),e(Dt,s0e),e(s0e,E3r),e(Dt,C3r),e(Dt,yc),e(yc,w3r),e(yc,l0e),e(l0e,A3r),e(yc,y3r),e(yc,zU),e(zU,L3r),e(yc,x3r),e(Dt,$3r),M(aE,Dt,null),e(cr,k3r),e(cr,Nr),M(ax,Nr,null),e(Nr,S3r),e(Nr,i0e),e(i0e,R3r),e(Nr,P3r),e(Nr,gn),e(gn,B3r),e(gn,d0e),e(d0e,I3r),e(gn,q3r),e(gn,c0e),e(c0e,N3r),e(gn,j3r),e(gn,f0e),e(f0e,D3r),e(gn,G3r),e(Nr,O3r),e(Nr,m0e),e(m0e,nE),e(nE,g0e),e(g0e,V3r),e(nE,X3r),e(nE,WU),e(WU,z3r),e(nE,W3r),e(Nr,Q3r),M(sE,Nr,null),b(f,aNe,_),b(f,Lc,_),e(Lc,lE),e(lE,h0e),M(nx,h0e,null),e(Lc,H3r),e(Lc,p0e),e(p0e,U3r),b(f,nNe,_),b(f,fr,_),M(sx,fr,null),e(fr,J3r),e(fr,xc),e(xc,Y3r),e(xc,QU),e(QU,K3r),e(xc,Z3r),e(xc,HU),e(HU,ewr),e(xc,owr),e(fr,rwr),e(fr,lx),e(lx,twr),e(lx,u0e),e(u0e,awr),e(lx,nwr),e(fr,swr),e(fr,Gt),M(ix,Gt,null),e(Gt,lwr),e(Gt,_0e),e(_0e,iwr),e(Gt,dwr),e(Gt,$c),e($c,cwr),e($c,b0e),e(b0e,fwr),e($c,mwr),e($c,UU),e(UU,gwr),e($c,hwr),e(Gt,pwr),M(iE,Gt,null),e(fr,uwr),e(fr,jr),M(dx,jr,null),e(jr,_wr),e(jr,v0e),e(v0e,bwr),e(jr,vwr),e(jr,hn),e(hn,Fwr),e(hn,F0e),e(F0e,Twr),e(hn,Mwr),e(hn,T0e),e(T0e,Ewr),e(hn,Cwr),e(hn,M0e),e(M0e,wwr),e(hn,Awr),e(jr,ywr),e(jr,re),e(re,dE),e(dE,E0e),e(E0e,Lwr),e(dE,xwr),e(dE,JU),e(JU,$wr),e(dE,kwr),e(re,Swr),e(re,cE),e(cE,C0e),e(C0e,Rwr),e(cE,Pwr),e(cE,YU),e(YU,Bwr),e(cE,Iwr),e(re,qwr),e(re,fE),e(fE,w0e),e(w0e,Nwr),e(fE,jwr),e(fE,KU),e(KU,Dwr),e(fE,Gwr),e(re,Owr),e(re,mE),e(mE,A0e),e(A0e,Vwr),e(mE,Xwr),e(mE,ZU),e(ZU,zwr),e(mE,Wwr),e(re,Qwr),e(re,gE),e(gE,y0e),e(y0e,Hwr),e(gE,Uwr),e(gE,eJ),e(eJ,Jwr),e(gE,Ywr),e(re,Kwr),e(re,hE),e(hE,L0e),e(L0e,Zwr),e(hE,eAr),e(hE,oJ),e(oJ,oAr),e(hE,rAr),e(re,tAr),e(re,pE),e(pE,x0e),e(x0e,aAr),e(pE,nAr),e(pE,rJ),e(rJ,sAr),e(pE,lAr),e(re,iAr),e(re,uE),e(uE,$0e),e($0e,dAr),e(uE,cAr),e(uE,tJ),e(tJ,fAr),e(uE,mAr),e(re,gAr),e(re,_E),e(_E,k0e),e(k0e,hAr),e(_E,pAr),e(_E,aJ),e(aJ,uAr),e(_E,_Ar),e(re,bAr),e(re,bE),e(bE,S0e),e(S0e,vAr),e(bE,FAr),e(bE,nJ),e(nJ,TAr),e(bE,MAr),e(re,EAr),e(re,vE),e(vE,R0e),e(R0e,CAr),e(vE,wAr),e(vE,sJ),e(sJ,AAr),e(vE,yAr),e(re,LAr),e(re,FE),e(FE,P0e),e(P0e,xAr),e(FE,$Ar),e(FE,lJ),e(lJ,kAr),e(FE,SAr),e(re,RAr),e(re,TE),e(TE,B0e),e(B0e,PAr),e(TE,BAr),e(TE,iJ),e(iJ,IAr),e(TE,qAr),e(re,NAr),e(re,ME),e(ME,I0e),e(I0e,jAr),e(ME,DAr),e(ME,dJ),e(dJ,GAr),e(ME,OAr),e(re,VAr),e(re,EE),e(EE,q0e),e(q0e,XAr),e(EE,zAr),e(EE,cJ),e(cJ,WAr),e(EE,QAr),e(re,HAr),e(re,CE),e(CE,N0e),e(N0e,UAr),e(CE,JAr),e(CE,fJ),e(fJ,YAr),e(CE,KAr),e(re,ZAr),e(re,wE),e(wE,j0e),e(j0e,eyr),e(wE,oyr),e(wE,mJ),e(mJ,ryr),e(wE,tyr),e(re,ayr),e(re,AE),e(AE,D0e),e(D0e,nyr),e(AE,syr),e(AE,gJ),e(gJ,lyr),e(AE,iyr),e(re,dyr),e(re,yE),e(yE,G0e),e(G0e,cyr),e(yE,fyr),e(yE,hJ),e(hJ,myr),e(yE,gyr),e(re,hyr),e(re,LE),e(LE,O0e),e(O0e,pyr),e(LE,uyr),e(LE,pJ),e(pJ,_yr),e(LE,byr),e(re,vyr),e(re,xE),e(xE,V0e),e(V0e,Fyr),e(xE,Tyr),e(xE,uJ),e(uJ,Myr),e(xE,Eyr),e(re,Cyr),e(re,$E),e($E,X0e),e(X0e,wyr),e($E,Ayr),e($E,_J),e(_J,yyr),e($E,Lyr),e(re,xyr),e(re,kE),e(kE,z0e),e(z0e,$yr),e(kE,kyr),e(kE,bJ),e(bJ,Syr),e(kE,Ryr),e(re,Pyr),e(re,SE),e(SE,W0e),e(W0e,Byr),e(SE,Iyr),e(SE,vJ),e(vJ,qyr),e(SE,Nyr),e(re,jyr),e(re,RE),e(RE,Q0e),e(Q0e,Dyr),e(RE,Gyr),e(RE,FJ),e(FJ,Oyr),e(RE,Vyr),e(jr,Xyr),M(PE,jr,null),b(f,sNe,_),b(f,kc,_),e(kc,BE),e(BE,H0e),M(cx,H0e,null),e(kc,zyr),e(kc,U0e),e(U0e,Wyr),b(f,lNe,_),b(f,mr,_),M(fx,mr,null),e(mr,Qyr),e(mr,Sc),e(Sc,Hyr),e(Sc,TJ),e(TJ,Uyr),e(Sc,Jyr),e(Sc,MJ),e(MJ,Yyr),e(Sc,Kyr),e(mr,Zyr),e(mr,mx),e(mx,eLr),e(mx,J0e),e(J0e,oLr),e(mx,rLr),e(mr,tLr),e(mr,Ot),M(gx,Ot,null),e(Ot,aLr),e(Ot,Y0e),e(Y0e,nLr),e(Ot,sLr),e(Ot,Rc),e(Rc,lLr),e(Rc,K0e),e(K0e,iLr),e(Rc,dLr),e(Rc,EJ),e(EJ,cLr),e(Rc,fLr),e(Ot,mLr),M(IE,Ot,null),e(mr,gLr),e(mr,Dr),M(hx,Dr,null),e(Dr,hLr),e(Dr,Z0e),e(Z0e,pLr),e(Dr,uLr),e(Dr,pn),e(pn,_Lr),e(pn,eTe),e(eTe,bLr),e(pn,vLr),e(pn,oTe),e(oTe,FLr),e(pn,TLr),e(pn,rTe),e(rTe,MLr),e(pn,ELr),e(Dr,CLr),e(Dr,Re),e(Re,qE),e(qE,tTe),e(tTe,wLr),e(qE,ALr),e(qE,CJ),e(CJ,yLr),e(qE,LLr),e(Re,xLr),e(Re,NE),e(NE,aTe),e(aTe,$Lr),e(NE,kLr),e(NE,wJ),e(wJ,SLr),e(NE,RLr),e(Re,PLr),e(Re,jE),e(jE,nTe),e(nTe,BLr),e(jE,ILr),e(jE,AJ),e(AJ,qLr),e(jE,NLr),e(Re,jLr),e(Re,DE),e(DE,sTe),e(sTe,DLr),e(DE,GLr),e(DE,yJ),e(yJ,OLr),e(DE,VLr),e(Re,XLr),e(Re,GE),e(GE,lTe),e(lTe,zLr),e(GE,WLr),e(GE,LJ),e(LJ,QLr),e(GE,HLr),e(Re,ULr),e(Re,OE),e(OE,iTe),e(iTe,JLr),e(OE,YLr),e(OE,xJ),e(xJ,KLr),e(OE,ZLr),e(Re,e8r),e(Re,VE),e(VE,dTe),e(dTe,o8r),e(VE,r8r),e(VE,$J),e($J,t8r),e(VE,a8r),e(Re,n8r),e(Re,XE),e(XE,cTe),e(cTe,s8r),e(XE,l8r),e(XE,kJ),e(kJ,i8r),e(XE,d8r),e(Re,c8r),e(Re,zE),e(zE,fTe),e(fTe,f8r),e(zE,m8r),e(zE,SJ),e(SJ,g8r),e(zE,h8r),e(Dr,p8r),M(WE,Dr,null),b(f,iNe,_),b(f,Pc,_),e(Pc,QE),e(QE,mTe),M(px,mTe,null),e(Pc,u8r),e(Pc,gTe),e(gTe,_8r),b(f,dNe,_),b(f,gr,_),M(ux,gr,null),e(gr,b8r),e(gr,Bc),e(Bc,v8r),e(Bc,RJ),e(RJ,F8r),e(Bc,T8r),e(Bc,PJ),e(PJ,M8r),e(Bc,E8r),e(gr,C8r),e(gr,_x),e(_x,w8r),e(_x,hTe),e(hTe,A8r),e(_x,y8r),e(gr,L8r),e(gr,Vt),M(bx,Vt,null),e(Vt,x8r),e(Vt,pTe),e(pTe,$8r),e(Vt,k8r),e(Vt,Ic),e(Ic,S8r),e(Ic,uTe),e(uTe,R8r),e(Ic,P8r),e(Ic,BJ),e(BJ,B8r),e(Ic,I8r),e(Vt,q8r),M(HE,Vt,null),e(gr,N8r),e(gr,Gr),M(vx,Gr,null),e(Gr,j8r),e(Gr,_Te),e(_Te,D8r),e(Gr,G8r),e(Gr,un),e(un,O8r),e(un,bTe),e(bTe,V8r),e(un,X8r),e(un,vTe),e(vTe,z8r),e(un,W8r),e(un,FTe),e(FTe,Q8r),e(un,H8r),e(Gr,U8r),e(Gr,Me),e(Me,UE),e(UE,TTe),e(TTe,J8r),e(UE,Y8r),e(UE,IJ),e(IJ,K8r),e(UE,Z8r),e(Me,exr),e(Me,JE),e(JE,MTe),e(MTe,oxr),e(JE,rxr),e(JE,qJ),e(qJ,txr),e(JE,axr),e(Me,nxr),e(Me,YE),e(YE,ETe),e(ETe,sxr),e(YE,lxr),e(YE,NJ),e(NJ,ixr),e(YE,dxr),e(Me,cxr),e(Me,KE),e(KE,CTe),e(CTe,fxr),e(KE,mxr),e(KE,jJ),e(jJ,gxr),e(KE,hxr),e(Me,pxr),e(Me,ZE),e(ZE,wTe),e(wTe,uxr),e(ZE,_xr),e(ZE,DJ),e(DJ,bxr),e(ZE,vxr),e(Me,Fxr),e(Me,eC),e(eC,ATe),e(ATe,Txr),e(eC,Mxr),e(eC,GJ),e(GJ,Exr),e(eC,Cxr),e(Me,wxr),e(Me,oC),e(oC,yTe),e(yTe,Axr),e(oC,yxr),e(oC,OJ),e(OJ,Lxr),e(oC,xxr),e(Me,$xr),e(Me,rC),e(rC,LTe),e(LTe,kxr),e(rC,Sxr),e(rC,VJ),e(VJ,Rxr),e(rC,Pxr),e(Me,Bxr),e(Me,tC),e(tC,xTe),e(xTe,Ixr),e(tC,qxr),e(tC,XJ),e(XJ,Nxr),e(tC,jxr),e(Me,Dxr),e(Me,aC),e(aC,$Te),e($Te,Gxr),e(aC,Oxr),e(aC,zJ),e(zJ,Vxr),e(aC,Xxr),e(Me,zxr),e(Me,nC),e(nC,kTe),e(kTe,Wxr),e(nC,Qxr),e(nC,WJ),e(WJ,Hxr),e(nC,Uxr),e(Me,Jxr),e(Me,sC),e(sC,STe),e(STe,Yxr),e(sC,Kxr),e(sC,QJ),e(QJ,Zxr),e(sC,e9r),e(Gr,o9r),M(lC,Gr,null),b(f,cNe,_),b(f,qc,_),e(qc,iC),e(iC,RTe),M(Fx,RTe,null),e(qc,r9r),e(qc,PTe),e(PTe,t9r),b(f,fNe,_),b(f,hr,_),M(Tx,hr,null),e(hr,a9r),e(hr,Nc),e(Nc,n9r),e(Nc,HJ),e(HJ,s9r),e(Nc,l9r),e(Nc,UJ),e(UJ,i9r),e(Nc,d9r),e(hr,c9r),e(hr,Mx),e(Mx,f9r),e(Mx,BTe),e(BTe,m9r),e(Mx,g9r),e(hr,h9r),e(hr,Xt),M(Ex,Xt,null),e(Xt,p9r),e(Xt,ITe),e(ITe,u9r),e(Xt,_9r),e(Xt,jc),e(jc,b9r),e(jc,qTe),e(qTe,v9r),e(jc,F9r),e(jc,JJ),e(JJ,T9r),e(jc,M9r),e(Xt,E9r),M(dC,Xt,null),e(hr,C9r),e(hr,Or),M(Cx,Or,null),e(Or,w9r),e(Or,NTe),e(NTe,A9r),e(Or,y9r),e(Or,_n),e(_n,L9r),e(_n,jTe),e(jTe,x9r),e(_n,$9r),e(_n,DTe),e(DTe,k9r),e(_n,S9r),e(_n,GTe),e(GTe,R9r),e(_n,P9r),e(Or,B9r),e(Or,Le),e(Le,cC),e(cC,OTe),e(OTe,I9r),e(cC,q9r),e(cC,YJ),e(YJ,N9r),e(cC,j9r),e(Le,D9r),e(Le,fC),e(fC,VTe),e(VTe,G9r),e(fC,O9r),e(fC,KJ),e(KJ,V9r),e(fC,X9r),e(Le,z9r),e(Le,mC),e(mC,XTe),e(XTe,W9r),e(mC,Q9r),e(mC,ZJ),e(ZJ,H9r),e(mC,U9r),e(Le,J9r),e(Le,gC),e(gC,zTe),e(zTe,Y9r),e(gC,K9r),e(gC,eY),e(eY,Z9r),e(gC,e$r),e(Le,o$r),e(Le,hC),e(hC,WTe),e(WTe,r$r),e(hC,t$r),e(hC,oY),e(oY,a$r),e(hC,n$r),e(Le,s$r),e(Le,pC),e(pC,QTe),e(QTe,l$r),e(pC,i$r),e(pC,rY),e(rY,d$r),e(pC,c$r),e(Le,f$r),e(Le,uC),e(uC,HTe),e(HTe,m$r),e(uC,g$r),e(uC,tY),e(tY,h$r),e(uC,p$r),e(Le,u$r),e(Le,_C),e(_C,UTe),e(UTe,_$r),e(_C,b$r),e(_C,aY),e(aY,v$r),e(_C,F$r),e(Le,T$r),e(Le,bC),e(bC,JTe),e(JTe,M$r),e(bC,E$r),e(bC,nY),e(nY,C$r),e(bC,w$r),e(Le,A$r),e(Le,vC),e(vC,YTe),e(YTe,y$r),e(vC,L$r),e(vC,sY),e(sY,x$r),e(vC,$$r),e(Or,k$r),M(FC,Or,null),b(f,mNe,_),b(f,Dc,_),e(Dc,TC),e(TC,KTe),M(wx,KTe,null),e(Dc,S$r),e(Dc,ZTe),e(ZTe,R$r),b(f,gNe,_),b(f,pr,_),M(Ax,pr,null),e(pr,P$r),e(pr,Gc),e(Gc,B$r),e(Gc,lY),e(lY,I$r),e(Gc,q$r),e(Gc,iY),e(iY,N$r),e(Gc,j$r),e(pr,D$r),e(pr,yx),e(yx,G$r),e(yx,e7e),e(e7e,O$r),e(yx,V$r),e(pr,X$r),e(pr,zt),M(Lx,zt,null),e(zt,z$r),e(zt,o7e),e(o7e,W$r),e(zt,Q$r),e(zt,Oc),e(Oc,H$r),e(Oc,r7e),e(r7e,U$r),e(Oc,J$r),e(Oc,dY),e(dY,Y$r),e(Oc,K$r),e(zt,Z$r),M(MC,zt,null),e(pr,ekr),e(pr,Vr),M(xx,Vr,null),e(Vr,okr),e(Vr,t7e),e(t7e,rkr),e(Vr,tkr),e(Vr,bn),e(bn,akr),e(bn,a7e),e(a7e,nkr),e(bn,skr),e(bn,n7e),e(n7e,lkr),e(bn,ikr),e(bn,s7e),e(s7e,dkr),e(bn,ckr),e(Vr,fkr),e(Vr,Pe),e(Pe,EC),e(EC,l7e),e(l7e,mkr),e(EC,gkr),e(EC,cY),e(cY,hkr),e(EC,pkr),e(Pe,ukr),e(Pe,CC),e(CC,i7e),e(i7e,_kr),e(CC,bkr),e(CC,fY),e(fY,vkr),e(CC,Fkr),e(Pe,Tkr),e(Pe,wC),e(wC,d7e),e(d7e,Mkr),e(wC,Ekr),e(wC,mY),e(mY,Ckr),e(wC,wkr),e(Pe,Akr),e(Pe,AC),e(AC,c7e),e(c7e,ykr),e(AC,Lkr),e(AC,gY),e(gY,xkr),e(AC,$kr),e(Pe,kkr),e(Pe,yC),e(yC,f7e),e(f7e,Skr),e(yC,Rkr),e(yC,hY),e(hY,Pkr),e(yC,Bkr),e(Pe,Ikr),e(Pe,LC),e(LC,m7e),e(m7e,qkr),e(LC,Nkr),e(LC,pY),e(pY,jkr),e(LC,Dkr),e(Pe,Gkr),e(Pe,xC),e(xC,g7e),e(g7e,Okr),e(xC,Vkr),e(xC,uY),e(uY,Xkr),e(xC,zkr),e(Pe,Wkr),e(Pe,$C),e($C,h7e),e(h7e,Qkr),e($C,Hkr),e($C,_Y),e(_Y,Ukr),e($C,Jkr),e(Pe,Ykr),e(Pe,kC),e(kC,p7e),e(p7e,Kkr),e(kC,Zkr),e(kC,bY),e(bY,eSr),e(kC,oSr),e(Vr,rSr),M(SC,Vr,null),b(f,hNe,_),b(f,Vc,_),e(Vc,RC),e(RC,u7e),M($x,u7e,null),e(Vc,tSr),e(Vc,_7e),e(_7e,aSr),b(f,pNe,_),b(f,ur,_),M(kx,ur,null),e(ur,nSr),e(ur,Xc),e(Xc,sSr),e(Xc,vY),e(vY,lSr),e(Xc,iSr),e(Xc,FY),e(FY,dSr),e(Xc,cSr),e(ur,fSr),e(ur,Sx),e(Sx,mSr),e(Sx,b7e),e(b7e,gSr),e(Sx,hSr),e(ur,pSr),e(ur,Wt),M(Rx,Wt,null),e(Wt,uSr),e(Wt,v7e),e(v7e,_Sr),e(Wt,bSr),e(Wt,zc),e(zc,vSr),e(zc,F7e),e(F7e,FSr),e(zc,TSr),e(zc,TY),e(TY,MSr),e(zc,ESr),e(Wt,CSr),M(PC,Wt,null),e(ur,wSr),e(ur,Xr),M(Px,Xr,null),e(Xr,ASr),e(Xr,T7e),e(T7e,ySr),e(Xr,LSr),e(Xr,vn),e(vn,xSr),e(vn,M7e),e(M7e,$Sr),e(vn,kSr),e(vn,E7e),e(E7e,SSr),e(vn,RSr),e(vn,C7e),e(C7e,PSr),e(vn,BSr),e(Xr,ISr),e(Xr,xe),e(xe,BC),e(BC,w7e),e(w7e,qSr),e(BC,NSr),e(BC,MY),e(MY,jSr),e(BC,DSr),e(xe,GSr),e(xe,IC),e(IC,A7e),e(A7e,OSr),e(IC,VSr),e(IC,EY),e(EY,XSr),e(IC,zSr),e(xe,WSr),e(xe,qC),e(qC,y7e),e(y7e,QSr),e(qC,HSr),e(qC,CY),e(CY,USr),e(qC,JSr),e(xe,YSr),e(xe,NC),e(NC,L7e),e(L7e,KSr),e(NC,ZSr),e(NC,wY),e(wY,eRr),e(NC,oRr),e(xe,rRr),e(xe,jC),e(jC,x7e),e(x7e,tRr),e(jC,aRr),e(jC,AY),e(AY,nRr),e(jC,sRr),e(xe,lRr),e(xe,DC),e(DC,$7e),e($7e,iRr),e(DC,dRr),e(DC,yY),e(yY,cRr),e(DC,fRr),e(xe,mRr),e(xe,GC),e(GC,k7e),e(k7e,gRr),e(GC,hRr),e(GC,LY),e(LY,pRr),e(GC,uRr),e(xe,_Rr),e(xe,OC),e(OC,S7e),e(S7e,bRr),e(OC,vRr),e(OC,xY),e(xY,FRr),e(OC,TRr),e(xe,MRr),e(xe,VC),e(VC,R7e),e(R7e,ERr),e(VC,CRr),e(VC,$Y),e($Y,wRr),e(VC,ARr),e(xe,yRr),e(xe,XC),e(XC,P7e),e(P7e,LRr),e(XC,xRr),e(XC,kY),e(kY,$Rr),e(XC,kRr),e(Xr,SRr),M(zC,Xr,null),b(f,uNe,_),b(f,Wc,_),e(Wc,WC),e(WC,B7e),M(Bx,B7e,null),e(Wc,RRr),e(Wc,I7e),e(I7e,PRr),b(f,_Ne,_),b(f,_r,_),M(Ix,_r,null),e(_r,BRr),e(_r,Qc),e(Qc,IRr),e(Qc,SY),e(SY,qRr),e(Qc,NRr),e(Qc,RY),e(RY,jRr),e(Qc,DRr),e(_r,GRr),e(_r,qx),e(qx,ORr),e(qx,q7e),e(q7e,VRr),e(qx,XRr),e(_r,zRr),e(_r,Qt),M(Nx,Qt,null),e(Qt,WRr),e(Qt,N7e),e(N7e,QRr),e(Qt,HRr),e(Qt,Hc),e(Hc,URr),e(Hc,j7e),e(j7e,JRr),e(Hc,YRr),e(Hc,PY),e(PY,KRr),e(Hc,ZRr),e(Qt,ePr),M(QC,Qt,null),e(_r,oPr),e(_r,zr),M(jx,zr,null),e(zr,rPr),e(zr,D7e),e(D7e,tPr),e(zr,aPr),e(zr,Fn),e(Fn,nPr),e(Fn,G7e),e(G7e,sPr),e(Fn,lPr),e(Fn,O7e),e(O7e,iPr),e(Fn,dPr),e(Fn,V7e),e(V7e,cPr),e(Fn,fPr),e(zr,mPr),e(zr,$e),e($e,HC),e(HC,X7e),e(X7e,gPr),e(HC,hPr),e(HC,BY),e(BY,pPr),e(HC,uPr),e($e,_Pr),e($e,UC),e(UC,z7e),e(z7e,bPr),e(UC,vPr),e(UC,IY),e(IY,FPr),e(UC,TPr),e($e,MPr),e($e,JC),e(JC,W7e),e(W7e,EPr),e(JC,CPr),e(JC,qY),e(qY,wPr),e(JC,APr),e($e,yPr),e($e,YC),e(YC,Q7e),e(Q7e,LPr),e(YC,xPr),e(YC,NY),e(NY,$Pr),e(YC,kPr),e($e,SPr),e($e,KC),e(KC,H7e),e(H7e,RPr),e(KC,PPr),e(KC,jY),e(jY,BPr),e(KC,IPr),e($e,qPr),e($e,ZC),e(ZC,U7e),e(U7e,NPr),e(ZC,jPr),e(ZC,DY),e(DY,DPr),e(ZC,GPr),e($e,OPr),e($e,e5),e(e5,J7e),e(J7e,VPr),e(e5,XPr),e(e5,GY),e(GY,zPr),e(e5,WPr),e($e,QPr),e($e,o5),e(o5,Y7e),e(Y7e,HPr),e(o5,UPr),e(o5,OY),e(OY,JPr),e(o5,YPr),e($e,KPr),e($e,r5),e(r5,K7e),e(K7e,ZPr),e(r5,eBr),e(r5,VY),e(VY,oBr),e(r5,rBr),e($e,tBr),e($e,t5),e(t5,Z7e),e(Z7e,aBr),e(t5,nBr),e(t5,XY),e(XY,sBr),e(t5,lBr),e(zr,iBr),M(a5,zr,null),b(f,bNe,_),b(f,Uc,_),e(Uc,n5),e(n5,eMe),M(Dx,eMe,null),e(Uc,dBr),e(Uc,oMe),e(oMe,cBr),b(f,vNe,_),b(f,br,_),M(Gx,br,null),e(br,fBr),e(br,Jc),e(Jc,mBr),e(Jc,zY),e(zY,gBr),e(Jc,hBr),e(Jc,WY),e(WY,pBr),e(Jc,uBr),e(br,_Br),e(br,Ox),e(Ox,bBr),e(Ox,rMe),e(rMe,vBr),e(Ox,FBr),e(br,TBr),e(br,Ht),M(Vx,Ht,null),e(Ht,MBr),e(Ht,tMe),e(tMe,EBr),e(Ht,CBr),e(Ht,Yc),e(Yc,wBr),e(Yc,aMe),e(aMe,ABr),e(Yc,yBr),e(Yc,QY),e(QY,LBr),e(Yc,xBr),e(Ht,$Br),M(s5,Ht,null),e(br,kBr),e(br,Wr),M(Xx,Wr,null),e(Wr,SBr),e(Wr,nMe),e(nMe,RBr),e(Wr,PBr),e(Wr,Tn),e(Tn,BBr),e(Tn,sMe),e(sMe,IBr),e(Tn,qBr),e(Tn,lMe),e(lMe,NBr),e(Tn,jBr),e(Tn,iMe),e(iMe,DBr),e(Tn,GBr),e(Wr,OBr),e(Wr,De),e(De,l5),e(l5,dMe),e(dMe,VBr),e(l5,XBr),e(l5,HY),e(HY,zBr),e(l5,WBr),e(De,QBr),e(De,i5),e(i5,cMe),e(cMe,HBr),e(i5,UBr),e(i5,UY),e(UY,JBr),e(i5,YBr),e(De,KBr),e(De,d5),e(d5,fMe),e(fMe,ZBr),e(d5,eIr),e(d5,JY),e(JY,oIr),e(d5,rIr),e(De,tIr),e(De,c5),e(c5,mMe),e(mMe,aIr),e(c5,nIr),e(c5,YY),e(YY,sIr),e(c5,lIr),e(De,iIr),e(De,f5),e(f5,gMe),e(gMe,dIr),e(f5,cIr),e(f5,KY),e(KY,fIr),e(f5,mIr),e(De,gIr),e(De,m5),e(m5,hMe),e(hMe,hIr),e(m5,pIr),e(m5,ZY),e(ZY,uIr),e(m5,_Ir),e(De,bIr),e(De,g5),e(g5,pMe),e(pMe,vIr),e(g5,FIr),e(g5,eK),e(eK,TIr),e(g5,MIr),e(De,EIr),e(De,h5),e(h5,uMe),e(uMe,CIr),e(h5,wIr),e(h5,oK),e(oK,AIr),e(h5,yIr),e(Wr,LIr),M(p5,Wr,null),b(f,FNe,_),b(f,Kc,_),e(Kc,u5),e(u5,_Me),M(zx,_Me,null),e(Kc,xIr),e(Kc,bMe),e(bMe,$Ir),b(f,TNe,_),b(f,vr,_),M(Wx,vr,null),e(vr,kIr),e(vr,Zc),e(Zc,SIr),e(Zc,rK),e(rK,RIr),e(Zc,PIr),e(Zc,tK),e(tK,BIr),e(Zc,IIr),e(vr,qIr),e(vr,Qx),e(Qx,NIr),e(Qx,vMe),e(vMe,jIr),e(Qx,DIr),e(vr,GIr),e(vr,Ut),M(Hx,Ut,null),e(Ut,OIr),e(Ut,FMe),e(FMe,VIr),e(Ut,XIr),e(Ut,ef),e(ef,zIr),e(ef,TMe),e(TMe,WIr),e(ef,QIr),e(ef,aK),e(aK,HIr),e(ef,UIr),e(Ut,JIr),M(_5,Ut,null),e(vr,YIr),e(vr,Qr),M(Ux,Qr,null),e(Qr,KIr),e(Qr,MMe),e(MMe,ZIr),e(Qr,eqr),e(Qr,Mn),e(Mn,oqr),e(Mn,EMe),e(EMe,rqr),e(Mn,tqr),e(Mn,CMe),e(CMe,aqr),e(Mn,nqr),e(Mn,wMe),e(wMe,sqr),e(Mn,lqr),e(Qr,iqr),e(Qr,Ge),e(Ge,b5),e(b5,AMe),e(AMe,dqr),e(b5,cqr),e(b5,nK),e(nK,fqr),e(b5,mqr),e(Ge,gqr),e(Ge,v5),e(v5,yMe),e(yMe,hqr),e(v5,pqr),e(v5,sK),e(sK,uqr),e(v5,_qr),e(Ge,bqr),e(Ge,F5),e(F5,LMe),e(LMe,vqr),e(F5,Fqr),e(F5,lK),e(lK,Tqr),e(F5,Mqr),e(Ge,Eqr),e(Ge,T5),e(T5,xMe),e(xMe,Cqr),e(T5,wqr),e(T5,iK),e(iK,Aqr),e(T5,yqr),e(Ge,Lqr),e(Ge,M5),e(M5,$Me),e($Me,xqr),e(M5,$qr),e(M5,dK),e(dK,kqr),e(M5,Sqr),e(Ge,Rqr),e(Ge,E5),e(E5,kMe),e(kMe,Pqr),e(E5,Bqr),e(E5,cK),e(cK,Iqr),e(E5,qqr),e(Ge,Nqr),e(Ge,C5),e(C5,SMe),e(SMe,jqr),e(C5,Dqr),e(C5,fK),e(fK,Gqr),e(C5,Oqr),e(Ge,Vqr),e(Ge,w5),e(w5,RMe),e(RMe,Xqr),e(w5,zqr),e(w5,mK),e(mK,Wqr),e(w5,Qqr),e(Qr,Hqr),M(A5,Qr,null),b(f,MNe,_),b(f,of,_),e(of,y5),e(y5,PMe),M(Jx,PMe,null),e(of,Uqr),e(of,BMe),e(BMe,Jqr),b(f,ENe,_),b(f,Fr,_),M(Yx,Fr,null),e(Fr,Yqr),e(Fr,rf),e(rf,Kqr),e(rf,gK),e(gK,Zqr),e(rf,eNr),e(rf,hK),e(hK,oNr),e(rf,rNr),e(Fr,tNr),e(Fr,Kx),e(Kx,aNr),e(Kx,IMe),e(IMe,nNr),e(Kx,sNr),e(Fr,lNr),e(Fr,Jt),M(Zx,Jt,null),e(Jt,iNr),e(Jt,qMe),e(qMe,dNr),e(Jt,cNr),e(Jt,tf),e(tf,fNr),e(tf,NMe),e(NMe,mNr),e(tf,gNr),e(tf,pK),e(pK,hNr),e(tf,pNr),e(Jt,uNr),M(L5,Jt,null),e(Fr,_Nr),e(Fr,Hr),M(e9,Hr,null),e(Hr,bNr),e(Hr,jMe),e(jMe,vNr),e(Hr,FNr),e(Hr,En),e(En,TNr),e(En,DMe),e(DMe,MNr),e(En,ENr),e(En,GMe),e(GMe,CNr),e(En,wNr),e(En,OMe),e(OMe,ANr),e(En,yNr),e(Hr,LNr),e(Hr,VMe),e(VMe,x5),e(x5,XMe),e(XMe,xNr),e(x5,$Nr),e(x5,uK),e(uK,kNr),e(x5,SNr),e(Hr,RNr),M($5,Hr,null),b(f,CNe,_),b(f,af,_),e(af,k5),e(k5,zMe),M(o9,zMe,null),e(af,PNr),e(af,WMe),e(WMe,BNr),b(f,wNe,_),b(f,Tr,_),M(r9,Tr,null),e(Tr,INr),e(Tr,nf),e(nf,qNr),e(nf,_K),e(_K,NNr),e(nf,jNr),e(nf,bK),e(bK,DNr),e(nf,GNr),e(Tr,ONr),e(Tr,t9),e(t9,VNr),e(t9,QMe),e(QMe,XNr),e(t9,zNr),e(Tr,WNr),e(Tr,Yt),M(a9,Yt,null),e(Yt,QNr),e(Yt,HMe),e(HMe,HNr),e(Yt,UNr),e(Yt,sf),e(sf,JNr),e(sf,UMe),e(UMe,YNr),e(sf,KNr),e(sf,vK),e(vK,ZNr),e(sf,ejr),e(Yt,ojr),M(S5,Yt,null),e(Tr,rjr),e(Tr,Ur),M(n9,Ur,null),e(Ur,tjr),e(Ur,JMe),e(JMe,ajr),e(Ur,njr),e(Ur,Cn),e(Cn,sjr),e(Cn,YMe),e(YMe,ljr),e(Cn,ijr),e(Cn,KMe),e(KMe,djr),e(Cn,cjr),e(Cn,ZMe),e(ZMe,fjr),e(Cn,mjr),e(Ur,gjr),e(Ur,s9),e(s9,R5),e(R5,e4e),e(e4e,hjr),e(R5,pjr),e(R5,FK),e(FK,ujr),e(R5,_jr),e(s9,bjr),e(s9,P5),e(P5,o4e),e(o4e,vjr),e(P5,Fjr),e(P5,TK),e(TK,Tjr),e(P5,Mjr),e(Ur,Ejr),M(B5,Ur,null),b(f,ANe,_),b(f,lf,_),e(lf,I5),e(I5,r4e),M(l9,r4e,null),e(lf,Cjr),e(lf,t4e),e(t4e,wjr),b(f,yNe,_),b(f,Mr,_),M(i9,Mr,null),e(Mr,Ajr),e(Mr,df),e(df,yjr),e(df,MK),e(MK,Ljr),e(df,xjr),e(df,EK),e(EK,$jr),e(df,kjr),e(Mr,Sjr),e(Mr,d9),e(d9,Rjr),e(d9,a4e),e(a4e,Pjr),e(d9,Bjr),e(Mr,Ijr),e(Mr,Kt),M(c9,Kt,null),e(Kt,qjr),e(Kt,n4e),e(n4e,Njr),e(Kt,jjr),e(Kt,cf),e(cf,Djr),e(cf,s4e),e(s4e,Gjr),e(cf,Ojr),e(cf,CK),e(CK,Vjr),e(cf,Xjr),e(Kt,zjr),M(q5,Kt,null),e(Mr,Wjr),e(Mr,Jr),M(f9,Jr,null),e(Jr,Qjr),e(Jr,l4e),e(l4e,Hjr),e(Jr,Ujr),e(Jr,wn),e(wn,Jjr),e(wn,i4e),e(i4e,Yjr),e(wn,Kjr),e(wn,d4e),e(d4e,Zjr),e(wn,eDr),e(wn,c4e),e(c4e,oDr),e(wn,rDr),e(Jr,tDr),e(Jr,f4e),e(f4e,N5),e(N5,m4e),e(m4e,aDr),e(N5,nDr),e(N5,wK),e(wK,sDr),e(N5,lDr),e(Jr,iDr),M(j5,Jr,null),LNe=!0},p(f,[_]){const m9={};_&2&&(m9.$$scope={dirty:_,ctx:f}),vf.$set(m9);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),bg.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),Kg.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),yh.$set(p4e);const g9={};_&2&&(g9.$$scope={dirty:_,ctx:f}),Lh.$set(g9);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),Qh.$set(u4e);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Hh.$set(An);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),Yh.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),Ou.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),Xu.$set(v4e);const h9={};_&2&&(h9.$$scope={dirty:_,ctx:f}),R_.$set(h9);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),B_.$set(F4e);const p9={};_&2&&(p9.$$scope={dirty:_,ctx:f}),v2.$set(p9);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),T2.$set(T4e);const u9={};_&2&&(u9.$$scope={dirty:_,ctx:f}),a1.$set(u9);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),s1.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),C1.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),A1.$set(C4e);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),Fb.$set(ff);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),Mb.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),Zb.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),ov.$set(y4e);const _9={};_&2&&(_9.$$scope={dirty:_,ctx:f}),iv.$set(_9);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),cv.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),zv.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),Qv.$set($4e);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),PF.$set(et);const b9={};_&2&&(b9.$$scope={dirty:_,ctx:f}),IF.$set(b9);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),jF.$set(k4e);const v9={};_&2&&(v9.$$scope={dirty:_,ctx:f}),GF.$set(v9);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),e6.$set(S4e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),r6.$set(ot);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),n6.$set(R4e);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),l6.$set(mf);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),b6.$set(P4e);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),F6.$set(B4e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),y6.$set(y);const D5={};_&2&&(D5.$$scope={dirty:_,ctx:f}),x6.$set(D5);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),D6.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),O6.$set(q4e);const G5={};_&2&&(G5.$$scope={dirty:_,ctx:f}),W6.$set(G5);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),H6.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),o0.$set(j4e);const O5={};_&2&&(O5.$$scope={dirty:_,ctx:f}),t0.$set(O5);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),i0.$set(D4e);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),c0.$set(G4e);const V5={};_&2&&(V5.$$scope={dirty:_,ctx:f}),h0.$set(V5);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),u0.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),v0.$set(V4e);const X5={};_&2&&(X5.$$scope={dirty:_,ctx:f}),T0.$set(X5);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),y0.$set(X4e);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),x0.$set(z4e);const z5={};_&2&&(z5.$$scope={dirty:_,ctx:f}),S0.$set(z5);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),P0.$set(W4e);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),AT.$set(Q4e);const W5={};_&2&&(W5.$$scope={dirty:_,ctx:f}),LT.$set(W5);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),KT.$set(H4e);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),e7.$set(U4e);const Q5={};_&2&&(Q5.$$scope={dirty:_,ctx:f}),g7.$set(Q5);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),p7.$set(J4e);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),F7.$set(Y4e);const H5={};_&2&&(H5.$$scope={dirty:_,ctx:f}),M7.$set(H5);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),V7.$set(K4e);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),z7.$set(Z4e);const U5={};_&2&&(U5.$$scope={dirty:_,ctx:f}),rM.$set(U5);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),aM.$set(eEe);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),kM.$set(oEe);const J5={};_&2&&(J5.$$scope={dirty:_,ctx:f}),RM.$set(J5);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),YM.$set(rEe);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),ZM.$set(tEe);const Y5={};_&2&&(Y5.$$scope={dirty:_,ctx:f}),r4.$set(Y5);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),a4.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),s4.$set(nEe);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),i4.$set(K5);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),x4.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),k4.$set(lEe);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),K4.$set(Z5);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),eE.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),rE.$set(dEe);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),aE.$set(e3);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),sE.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),iE.$set(fEe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),PE.$set(o3);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),IE.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),WE.$set(gEe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),HE.$set(r3);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),lC.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),dC.$set(pEe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),FC.$set(t3);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),MC.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),SC.$set(_Ee);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),PC.$set(a3);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),zC.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),QC.$set(vEe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),a5.$set(n3);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),s5.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),p5.$set(TEe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),_5.$set(s3);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),A5.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),L5.$set(EEe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),$5.$set(l3);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),S5.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),B5.$set(wEe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),q5.$set(i3);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),j5.$set(AEe)},i(f){LNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(vf.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(gA.$$.fragment,f),E(bg.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(vA.$$.fragment,f),E(Kg.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(wA.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(kA.$$.fragment,f),E(Qh.$$.fragment,f),E(Hh.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(Yh.$$.fragment,f),E(qA.$$.fragment,f),E(Ou.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(GA.$$.fragment,f),E(Xu.$$.fragment,f),E(OA.$$.fragment,f),E(R_.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(WA.$$.fragment,f),E(B_.$$.fragment,f),E(QA.$$.fragment,f),E(v2.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(T2.$$.fragment,f),E(KA.$$.fragment,f),E(a1.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(s1.$$.fragment,f),E(ty.$$.fragment,f),E(C1.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(A1.$$.fragment,f),E(iy.$$.fragment,f),E(Fb.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(Mb.$$.fragment,f),E(gy.$$.fragment,f),E(Zb.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(ov.$$.fragment,f),E(by.$$.fragment,f),E(iv.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(cv.$$.fragment,f),E(Ey.$$.fragment,f),E(zv.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Qv.$$.fragment,f),E(Ly.$$.fragment,f),E(PF.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(IF.$$.fragment,f),E(Ry.$$.fragment,f),E(jF.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(GF.$$.fragment,f),E(Ny.$$.fragment,f),E(e6.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(r6.$$.fragment,f),E(Vy.$$.fragment,f),E(n6.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(l6.$$.fragment,f),E(Hy.$$.fragment,f),E(b6.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(F6.$$.fragment,f),E(Zy.$$.fragment,f),E(y6.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(x6.$$.fragment,f),E(aL.$$.fragment,f),E(D6.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(O6.$$.fragment,f),E(dL.$$.fragment,f),E(W6.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(H6.$$.fragment,f),E(pL.$$.fragment,f),E(o0.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(t0.$$.fragment,f),E(FL.$$.fragment,f),E(i0.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(c0.$$.fragment,f),E(wL.$$.fragment,f),E(h0.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(u0.$$.fragment,f),E(kL.$$.fragment,f),E(v0.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(T0.$$.fragment,f),E(IL.$$.fragment,f),E(y0.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(x0.$$.fragment,f),E(GL.$$.fragment,f),E(S0.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(P0.$$.fragment,f),E(WL.$$.fragment,f),E(AT.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(LT.$$.fragment,f),E(YL.$$.fragment,f),E(KT.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(e7.$$.fragment,f),E(r8.$$.fragment,f),E(g7.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(p7.$$.fragment,f),E(l8.$$.fragment,f),E(F7.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(M7.$$.fragment,f),E(m8.$$.fragment,f),E(V7.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(z7.$$.fragment,f),E(_8.$$.fragment,f),E(rM.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(aM.$$.fragment,f),E(M8.$$.fragment,f),E(kM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(RM.$$.fragment,f),E(y8.$$.fragment,f),E(YM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(ZM.$$.fragment,f),E(S8.$$.fragment,f),E(r4.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(q8.$$.fragment,f),E(a4.$$.fragment,f),E(N8.$$.fragment,f),E(s4.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(i4.$$.fragment,f),E(V8.$$.fragment,f),E(x4.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(k4.$$.fragment,f),E(H8.$$.fragment,f),E(K4.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(eE.$$.fragment,f),E(Z8.$$.fragment,f),E(rE.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(aE.$$.fragment,f),E(ax.$$.fragment,f),E(sE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(iE.$$.fragment,f),E(dx.$$.fragment,f),E(PE.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(IE.$$.fragment,f),E(hx.$$.fragment,f),E(WE.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(HE.$$.fragment,f),E(vx.$$.fragment,f),E(lC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(dC.$$.fragment,f),E(Cx.$$.fragment,f),E(FC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(MC.$$.fragment,f),E(xx.$$.fragment,f),E(SC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(PC.$$.fragment,f),E(Px.$$.fragment,f),E(zC.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(QC.$$.fragment,f),E(jx.$$.fragment,f),E(a5.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(s5.$$.fragment,f),E(Xx.$$.fragment,f),E(p5.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(_5.$$.fragment,f),E(Ux.$$.fragment,f),E(A5.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(L5.$$.fragment,f),E(e9.$$.fragment,f),E($5.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(S5.$$.fragment,f),E(n9.$$.fragment,f),E(B5.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(q5.$$.fragment,f),E(f9.$$.fragment,f),E(j5.$$.fragment,f),LNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(vf.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(gA.$$.fragment,f),C(bg.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(vA.$$.fragment,f),C(Kg.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(wA.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(kA.$$.fragment,f),C(Qh.$$.fragment,f),C(Hh.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(Yh.$$.fragment,f),C(qA.$$.fragment,f),C(Ou.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(GA.$$.fragment,f),C(Xu.$$.fragment,f),C(OA.$$.fragment,f),C(R_.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(WA.$$.fragment,f),C(B_.$$.fragment,f),C(QA.$$.fragment,f),C(v2.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(T2.$$.fragment,f),C(KA.$$.fragment,f),C(a1.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(s1.$$.fragment,f),C(ty.$$.fragment,f),C(C1.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(A1.$$.fragment,f),C(iy.$$.fragment,f),C(Fb.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(Mb.$$.fragment,f),C(gy.$$.fragment,f),C(Zb.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(ov.$$.fragment,f),C(by.$$.fragment,f),C(iv.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(cv.$$.fragment,f),C(Ey.$$.fragment,f),C(zv.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Qv.$$.fragment,f),C(Ly.$$.fragment,f),C(PF.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(IF.$$.fragment,f),C(Ry.$$.fragment,f),C(jF.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(GF.$$.fragment,f),C(Ny.$$.fragment,f),C(e6.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(r6.$$.fragment,f),C(Vy.$$.fragment,f),C(n6.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(l6.$$.fragment,f),C(Hy.$$.fragment,f),C(b6.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(F6.$$.fragment,f),C(Zy.$$.fragment,f),C(y6.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(x6.$$.fragment,f),C(aL.$$.fragment,f),C(D6.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(O6.$$.fragment,f),C(dL.$$.fragment,f),C(W6.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(H6.$$.fragment,f),C(pL.$$.fragment,f),C(o0.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(t0.$$.fragment,f),C(FL.$$.fragment,f),C(i0.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(c0.$$.fragment,f),C(wL.$$.fragment,f),C(h0.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(u0.$$.fragment,f),C(kL.$$.fragment,f),C(v0.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(T0.$$.fragment,f),C(IL.$$.fragment,f),C(y0.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(x0.$$.fragment,f),C(GL.$$.fragment,f),C(S0.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(P0.$$.fragment,f),C(WL.$$.fragment,f),C(AT.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(LT.$$.fragment,f),C(YL.$$.fragment,f),C(KT.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(e7.$$.fragment,f),C(r8.$$.fragment,f),C(g7.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(p7.$$.fragment,f),C(l8.$$.fragment,f),C(F7.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(M7.$$.fragment,f),C(m8.$$.fragment,f),C(V7.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(z7.$$.fragment,f),C(_8.$$.fragment,f),C(rM.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(aM.$$.fragment,f),C(M8.$$.fragment,f),C(kM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(RM.$$.fragment,f),C(y8.$$.fragment,f),C(YM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(ZM.$$.fragment,f),C(S8.$$.fragment,f),C(r4.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(q8.$$.fragment,f),C(a4.$$.fragment,f),C(N8.$$.fragment,f),C(s4.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(i4.$$.fragment,f),C(V8.$$.fragment,f),C(x4.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(k4.$$.fragment,f),C(H8.$$.fragment,f),C(K4.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(eE.$$.fragment,f),C(Z8.$$.fragment,f),C(rE.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(aE.$$.fragment,f),C(ax.$$.fragment,f),C(sE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(iE.$$.fragment,f),C(dx.$$.fragment,f),C(PE.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(IE.$$.fragment,f),C(hx.$$.fragment,f),C(WE.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(HE.$$.fragment,f),C(vx.$$.fragment,f),C(lC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(dC.$$.fragment,f),C(Cx.$$.fragment,f),C(FC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(MC.$$.fragment,f),C(xx.$$.fragment,f),C(SC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(PC.$$.fragment,f),C(Px.$$.fragment,f),C(zC.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(QC.$$.fragment,f),C(jx.$$.fragment,f),C(a5.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(s5.$$.fragment,f),C(Xx.$$.fragment,f),C(p5.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(_5.$$.fragment,f),C(Ux.$$.fragment,f),C(A5.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(L5.$$.fragment,f),C(e9.$$.fragment,f),C($5.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(S5.$$.fragment,f),C(n9.$$.fragment,f),C(B5.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(q5.$$.fragment,f),C(f9.$$.fragment,f),C(j5.$$.fragment,f),LNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(wIe),f&&t(_i),w(lA),f&&t(AIe),f&&t(kn),f&&t(yIe),w(iA,f),f&&t(LIe),f&&t(x$),f&&t(xIe),w(vf,f),f&&t($Ie),f&&t(bi),w(dA),f&&t(kIe),f&&t(Co),w(cA),w(gA),w(bg),w(hA),f&&t(SIe),f&&t(Fi),w(pA),f&&t(RIe),f&&t(wo),w(uA),w(vA),w(Kg),w(FA),f&&t(PIe),f&&t(Ti),w(TA),f&&t(BIe),f&&t(Ao),w(MA),w(wA),w(yh),w(Lh),w(AA),f&&t(IIe),f&&t(Mi),w(yA),f&&t(qIe),f&&t(yo),w(LA),w(kA),w(Qh),w(Hh),w(SA),f&&t(NIe),f&&t(Ci),w(RA),f&&t(jIe),f&&t(Lo),w(PA),w(IA),w(Yh),w(qA),w(Ou),f&&t(DIe),f&&t(yi),w(NA),f&&t(GIe),f&&t(xo),w(jA),w(GA),w(Xu),w(OA),w(R_),f&&t(OIe),f&&t($i),w(VA),f&&t(VIe),f&&t($o),w(XA),w(WA),w(B_),w(QA),w(v2),f&&t(XIe),f&&t(Ri),w(HA),f&&t(zIe),f&&t(ko),w(UA),w(YA),w(T2),w(KA),w(a1),f&&t(WIe),f&&t(Ii),w(ZA),f&&t(QIe),f&&t(So),w(ey),w(ry),w(s1),w(ty),w(C1),f&&t(HIe),f&&t(ji),w(ay),f&&t(UIe),f&&t(Ro),w(ny),w(ly),w(A1),w(iy),w(Fb),f&&t(JIe),f&&t(Oi),w(dy),f&&t(YIe),f&&t(Po),w(cy),w(my),w(Mb),w(gy),w(Zb),f&&t(KIe),f&&t(zi),w(hy),f&&t(ZIe),f&&t(Bo),w(py),w(_y),w(ov),w(by),w(iv),f&&t(eqe),f&&t(Hi),w(vy),f&&t(oqe),f&&t(Io),w(Fy),w(My),w(cv),w(Ey),w(zv),f&&t(rqe),f&&t(Yi),w(Cy),f&&t(tqe),f&&t(qo),w(wy),w(yy),w(Qv),w(Ly),w(PF),f&&t(aqe),f&&t(ed),w(xy),f&&t(nqe),f&&t(No),w($y),w(Sy),w(IF),w(Ry),w(jF),f&&t(sqe),f&&t(td),w(Py),f&&t(lqe),f&&t(jo),w(By),w(qy),w(GF),w(Ny),w(e6),f&&t(iqe),f&&t(sd),w(jy),f&&t(dqe),f&&t(Do),w(Dy),w(Oy),w(r6),w(Vy),w(n6),f&&t(cqe),f&&t(dd),w(Xy),f&&t(fqe),f&&t(Go),w(zy),w(Qy),w(l6),w(Hy),w(b6),f&&t(mqe),f&&t(md),w(Uy),f&&t(gqe),f&&t(Oo),w(Jy),w(Ky),w(F6),w(Zy),w(y6),f&&t(hqe),f&&t(pd),w(eL),f&&t(pqe),f&&t(Vo),w(oL),w(tL),w(x6),w(aL),w(D6),f&&t(uqe),f&&t(bd),w(nL),f&&t(_qe),f&&t(Xo),w(sL),w(iL),w(O6),w(dL),w(W6),f&&t(bqe),f&&t(Td),w(fL),f&&t(vqe),f&&t(zo),w(mL),w(hL),w(H6),w(pL),w(o0),f&&t(Fqe),f&&t(Cd),w(uL),f&&t(Tqe),f&&t(Wo),w(_L),w(vL),w(t0),w(FL),w(i0),f&&t(Mqe),f&&t(Ld),w(TL),f&&t(Eqe),f&&t(Qo),w(ML),w(CL),w(c0),w(wL),w(h0),f&&t(Cqe),f&&t(kd),w(yL),f&&t(wqe),f&&t(Ho),w(LL),w($L),w(u0),w(kL),w(v0),f&&t(Aqe),f&&t(Pd),w(SL),f&&t(yqe),f&&t(Uo),w(RL),w(BL),w(T0),w(IL),w(y0),f&&t(Lqe),f&&t(qd),w(qL),f&&t(xqe),f&&t(Jo),w(NL),w(DL),w(x0),w(GL),w(S0),f&&t($qe),f&&t(Dd),w(OL),f&&t(kqe),f&&t(Yo),w(VL),w(zL),w(P0),w(WL),w(AT),f&&t(Sqe),f&&t(Vd),w(QL),f&&t(Rqe),f&&t(Ko),w(HL),w(JL),w(LT),w(YL),w(KT),f&&t(Pqe),f&&t(Wd),w(KL),f&&t(Bqe),f&&t(Zo),w(ZL),w(o8),w(e7),w(r8),w(g7),f&&t(Iqe),f&&t(Ud),w(t8),f&&t(qqe),f&&t(er),w(a8),w(s8),w(p7),w(l8),w(F7),f&&t(Nqe),f&&t(Kd),w(i8),f&&t(jqe),f&&t(or),w(d8),w(f8),w(M7),w(m8),w(V7),f&&t(Dqe),f&&t(oc),w(g8),f&&t(Gqe),f&&t(rr),w(h8),w(u8),w(z7),w(_8),w(rM),f&&t(Oqe),f&&t(ac),w(b8),f&&t(Vqe),f&&t(tr),w(v8),w(T8),w(aM),w(M8),w(kM),f&&t(Xqe),f&&t(lc),w(E8),f&&t(zqe),f&&t(ar),w(C8),w(A8),w(RM),w(y8),w(YM),f&&t(Wqe),f&&t(cc),w(L8),f&&t(Qqe),f&&t(nr),w(x8),w(k8),w(ZM),w(S8),w(r4),f&&t(Hqe),f&&t(gc),w(P8),f&&t(Uqe),f&&t(sr),w(B8),w(q8),w(a4),w(N8),w(s4),f&&t(Jqe),f&&t(uc),w(j8),f&&t(Yqe),f&&t(lr),w(D8),w(O8),w(i4),w(V8),w(x4),f&&t(Kqe),f&&t(vc),w(X8),f&&t(Zqe),f&&t(ir),w(z8),w(Q8),w(k4),w(H8),w(K4),f&&t(eNe),f&&t(Mc),w(U8),f&&t(oNe),f&&t(dr),w(J8),w(K8),w(eE),w(Z8),w(rE),f&&t(rNe),f&&t(wc),w(ex),f&&t(tNe),f&&t(cr),w(ox),w(tx),w(aE),w(ax),w(sE),f&&t(aNe),f&&t(Lc),w(nx),f&&t(nNe),f&&t(fr),w(sx),w(ix),w(iE),w(dx),w(PE),f&&t(sNe),f&&t(kc),w(cx),f&&t(lNe),f&&t(mr),w(fx),w(gx),w(IE),w(hx),w(WE),f&&t(iNe),f&&t(Pc),w(px),f&&t(dNe),f&&t(gr),w(ux),w(bx),w(HE),w(vx),w(lC),f&&t(cNe),f&&t(qc),w(Fx),f&&t(fNe),f&&t(hr),w(Tx),w(Ex),w(dC),w(Cx),w(FC),f&&t(mNe),f&&t(Dc),w(wx),f&&t(gNe),f&&t(pr),w(Ax),w(Lx),w(MC),w(xx),w(SC),f&&t(hNe),f&&t(Vc),w($x),f&&t(pNe),f&&t(ur),w(kx),w(Rx),w(PC),w(Px),w(zC),f&&t(uNe),f&&t(Wc),w(Bx),f&&t(_Ne),f&&t(_r),w(Ix),w(Nx),w(QC),w(jx),w(a5),f&&t(bNe),f&&t(Uc),w(Dx),f&&t(vNe),f&&t(br),w(Gx),w(Vx),w(s5),w(Xx),w(p5),f&&t(FNe),f&&t(Kc),w(zx),f&&t(TNe),f&&t(vr),w(Wx),w(Hx),w(_5),w(Ux),w(A5),f&&t(MNe),f&&t(of),w(Jx),f&&t(ENe),f&&t(Fr),w(Yx),w(Zx),w(L5),w(e9),w($5),f&&t(CNe),f&&t(af),w(o9),f&&t(wNe),f&&t(Tr),w(r9),w(a9),w(S5),w(n9),w(B5),f&&t(ANe),f&&t(lf),w(l9),f&&t(yNe),f&&t(Mr),w(i9),w(c9),w(q5),w(f9),w(j5)}}}const oxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function rxt(L){return rLt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dxt extends Kyt{constructor(g){super();Zyt(this,g,rxt,ext,eLt,{})}}export{dxt as default,oxt as metadata};
