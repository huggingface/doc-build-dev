import{S as zQt,i as QQt,s as WQt,e as a,k as l,w as F,t as o,M as HQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as UQt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as htt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function JQt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,oL,Nf,Oe,We,ki,Pn,rL,Bn,Nn,tL,Si,In,aL,Ri,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),oL=o(")."),Nf=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),rL=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),tL=o(`, make sure its
`),Si=a("code"),In=o("config_class"),aL=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var IS=s(p);m=r(IS,"NewModelConfig"),IS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var qS=s(yi);Bf=r(qS,"model_type"),qS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var jS=s(xi);$i=r(jS,'"new-model"'),jS.forEach(t),oL=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),rL=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var DS=s(Bn);Nn=r(DS,"PreTrainedModel"),DS.forEach(t),tL=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var qf=s(Si);In=r(qf,"config_class"),qf.forEach(t),aL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var GS=s(Ri);If=r(GS,"NewModelConfig"),GS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Bf),e(g,lt),e(g,xi),e(xi,$i),e(g,oL),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,rL),e(Oe,Bn),e(Bn,Nn),e(Oe,tL),e(Oe,Si),e(Si,In),e(Oe,aL),e(Oe,Ri),e(Ri,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,oL,Nf,Oe,We,ki,Pn,rL,Bn,Nn,tL,Si,In,aL,Ri,If,Sa,He,Ae,IS,Pi,qS,jS,wo,Ra,DS,qf,GS,uHe,rXe,Bi,jf,yae,nL,bHe,xae,vHe,tXe,qn,FHe,$ae,THe,MHe,kae,EHe,CHe,aXe,sL,nXe,OS,wHe,sXe,Df,lXe,Ni,Gf,Sae,lL,AHe,Rae,LHe,iXe,Ao,iL,yHe,dL,xHe,VS,$He,kHe,SHe,cL,RHe,Pae,PHe,BHe,NHe,Lr,fL,IHe,Bae,qHe,jHe,Ii,DHe,Nae,GHe,OHe,Iae,VHe,XHe,zHe,A,Of,qae,QHe,WHe,XS,HHe,UHe,JHe,Vf,jae,YHe,KHe,zS,ZHe,eUe,oUe,Xf,Dae,rUe,tUe,QS,aUe,nUe,sUe,zf,Gae,lUe,iUe,WS,dUe,cUe,fUe,Qf,Oae,mUe,gUe,HS,hUe,pUe,_Ue,Wf,Vae,uUe,bUe,US,vUe,FUe,TUe,Hf,Xae,MUe,EUe,JS,CUe,wUe,AUe,Uf,zae,LUe,yUe,YS,xUe,$Ue,kUe,Jf,Qae,SUe,RUe,KS,PUe,BUe,NUe,Yf,Wae,IUe,qUe,ZS,jUe,DUe,GUe,Kf,Hae,OUe,VUe,eR,XUe,zUe,QUe,Zf,Uae,WUe,HUe,oR,UUe,JUe,YUe,em,Jae,KUe,ZUe,rR,eJe,oJe,rJe,om,Yae,tJe,aJe,tR,nJe,sJe,lJe,rm,Kae,iJe,dJe,aR,cJe,fJe,mJe,tm,Zae,gJe,hJe,nR,pJe,_Je,uJe,am,ene,bJe,vJe,sR,FJe,TJe,MJe,nm,one,EJe,CJe,lR,wJe,AJe,LJe,sm,rne,yJe,xJe,iR,$Je,kJe,SJe,lm,tne,RJe,PJe,dR,BJe,NJe,IJe,im,ane,qJe,jJe,cR,DJe,GJe,OJe,dm,nne,VJe,XJe,fR,zJe,QJe,WJe,cm,sne,HJe,UJe,mR,JJe,YJe,KJe,fm,lne,ZJe,eYe,gR,oYe,rYe,tYe,mm,ine,aYe,nYe,hR,sYe,lYe,iYe,gm,dne,dYe,cYe,pR,fYe,mYe,gYe,hm,cne,hYe,pYe,_R,_Ye,uYe,bYe,pm,fne,vYe,FYe,uR,TYe,MYe,EYe,_m,mne,CYe,wYe,bR,AYe,LYe,yYe,um,gne,xYe,$Ye,vR,kYe,SYe,RYe,bm,hne,PYe,BYe,FR,NYe,IYe,qYe,vm,pne,jYe,DYe,TR,GYe,OYe,VYe,Fm,_ne,XYe,zYe,MR,QYe,WYe,HYe,Tm,une,UYe,JYe,ER,YYe,KYe,ZYe,Mm,bne,eKe,oKe,CR,rKe,tKe,aKe,Em,vne,nKe,sKe,wR,lKe,iKe,dKe,Cm,Fne,cKe,fKe,AR,mKe,gKe,hKe,wm,Tne,pKe,_Ke,LR,uKe,bKe,vKe,Am,Mne,FKe,TKe,yR,MKe,EKe,CKe,Lm,Ene,wKe,AKe,xR,LKe,yKe,xKe,ym,Cne,$Ke,kKe,$R,SKe,RKe,PKe,xm,wne,BKe,NKe,kR,IKe,qKe,jKe,$m,Ane,DKe,GKe,SR,OKe,VKe,XKe,km,Lne,zKe,QKe,RR,WKe,HKe,UKe,Sm,yne,JKe,YKe,PR,KKe,ZKe,eZe,Rm,xne,oZe,rZe,BR,tZe,aZe,nZe,Pm,$ne,sZe,lZe,NR,iZe,dZe,cZe,Bm,kne,fZe,mZe,IR,gZe,hZe,pZe,Nm,Sne,_Ze,uZe,qR,bZe,vZe,FZe,Im,Rne,TZe,MZe,jR,EZe,CZe,wZe,qm,Pne,AZe,LZe,DR,yZe,xZe,$Ze,jm,Bne,kZe,SZe,GR,RZe,PZe,BZe,Dm,Nne,NZe,IZe,OR,qZe,jZe,DZe,Gm,Ine,GZe,OZe,VR,VZe,XZe,zZe,Om,qne,QZe,WZe,XR,HZe,UZe,JZe,Vm,jne,YZe,KZe,zR,ZZe,eeo,oeo,Xm,Dne,reo,teo,QR,aeo,neo,seo,zm,Gne,leo,ieo,WR,deo,ceo,feo,Qm,One,meo,geo,HR,heo,peo,_eo,Wm,Vne,ueo,beo,UR,veo,Feo,Teo,Hm,Xne,Meo,Eeo,JR,Ceo,weo,Aeo,Um,zne,Leo,yeo,YR,xeo,$eo,keo,Jm,Qne,Seo,Reo,KR,Peo,Beo,Neo,Ym,Wne,Ieo,qeo,ZR,jeo,Deo,Geo,Km,Hne,Oeo,Veo,eP,Xeo,zeo,Qeo,Zm,Une,Weo,Heo,oP,Ueo,Jeo,Yeo,eg,Jne,Keo,Zeo,rP,eoo,ooo,roo,og,Yne,too,aoo,tP,noo,soo,loo,rg,Kne,ioo,doo,aP,coo,foo,moo,tg,Zne,goo,hoo,nP,poo,_oo,uoo,ag,ese,boo,voo,sP,Foo,Too,Moo,ng,ose,Eoo,Coo,lP,woo,Aoo,Loo,sg,rse,yoo,xoo,iP,$oo,koo,Soo,lg,tse,Roo,Poo,dP,Boo,Noo,Ioo,ig,ase,qoo,joo,cP,Doo,Goo,Ooo,dg,nse,Voo,Xoo,fP,zoo,Qoo,Woo,cg,sse,Hoo,Uoo,mP,Joo,Yoo,Koo,fg,lse,Zoo,ero,gP,oro,rro,tro,mg,ise,aro,nro,hP,sro,lro,iro,gg,dse,dro,cro,pP,fro,mro,gro,hg,cse,hro,pro,_P,_ro,uro,bro,pg,fse,vro,Fro,uP,Tro,Mro,Ero,_g,mse,Cro,wro,bP,Aro,Lro,yro,ug,gse,xro,$ro,vP,kro,Sro,Rro,bg,hse,Pro,Bro,FP,Nro,Iro,qro,vg,pse,jro,Dro,TP,Gro,Oro,Vro,Fg,_se,Xro,zro,MP,Qro,Wro,Hro,Tg,use,Uro,Jro,EP,Yro,Kro,Zro,Mg,bse,eto,oto,CP,rto,tto,ato,Eg,vse,nto,sto,wP,lto,ito,dto,Cg,Fse,cto,fto,AP,mto,gto,hto,wg,Tse,pto,_to,LP,uto,bto,vto,Ag,Mse,Fto,Tto,yP,Mto,Eto,Cto,Lg,Ese,wto,Ato,xP,Lto,yto,xto,yg,Cse,$to,kto,$P,Sto,Rto,Pto,xg,wse,Bto,Nto,kP,Ito,qto,jto,$g,Ase,Dto,Gto,SP,Oto,Vto,Xto,kg,Lse,zto,Qto,RP,Wto,Hto,Uto,Sg,yse,Jto,Yto,PP,Kto,Zto,eao,Rg,xse,oao,rao,BP,tao,aao,nao,Pg,$se,sao,lao,NP,iao,dao,cao,Bg,kse,fao,mao,IP,gao,hao,pao,Ng,Sse,_ao,uao,qP,bao,vao,Fao,Ig,Rse,Tao,Mao,jP,Eao,Cao,wao,qg,Pse,Aao,Lao,DP,yao,xao,$ao,jg,Bse,kao,Sao,GP,Rao,Pao,Bao,Dg,Nse,Nao,Iao,OP,qao,jao,Dao,Gg,Ise,Gao,Oao,VP,Vao,Xao,zao,Og,qse,Qao,Wao,XP,Hao,Uao,Jao,Vg,jse,Yao,Kao,zP,Zao,eno,ono,Xg,Dse,rno,tno,QP,ano,nno,sno,zg,Gse,lno,ino,WP,dno,cno,fno,Qg,Ose,mno,gno,HP,hno,pno,_no,Wg,Vse,uno,bno,UP,vno,Fno,Tno,Hg,Xse,Mno,Eno,JP,Cno,wno,Ano,Ug,zse,Lno,yno,YP,xno,$no,kno,Jg,Qse,Sno,Rno,KP,Pno,Bno,Nno,Yg,Wse,Ino,qno,ZP,jno,Dno,Gno,Kg,Ono,Zg,mL,Vno,Hse,Xno,dXe,qi,eh,Use,gL,zno,Jse,Qno,cXe,Lo,hL,Wno,pL,Hno,eB,Uno,Jno,Yno,_L,Kno,Yse,Zno,eso,oso,yr,uL,rso,Kse,tso,aso,Pa,nso,Zse,sso,lso,ele,iso,dso,ole,cso,fso,mso,k,jn,rle,gso,hso,oB,pso,_so,rB,uso,bso,vso,Dn,tle,Fso,Tso,tB,Mso,Eso,aB,Cso,wso,Aso,Gn,ale,Lso,yso,nB,xso,$so,sB,kso,Sso,Rso,oh,nle,Pso,Bso,lB,Nso,Iso,qso,On,sle,jso,Dso,iB,Gso,Oso,dB,Vso,Xso,zso,rh,lle,Qso,Wso,cB,Hso,Uso,Jso,th,ile,Yso,Kso,fB,Zso,elo,olo,ah,dle,rlo,tlo,mB,alo,nlo,slo,Vn,cle,llo,ilo,gB,dlo,clo,hB,flo,mlo,glo,Xn,fle,hlo,plo,pB,_lo,ulo,_B,blo,vlo,Flo,zn,mle,Tlo,Mlo,uB,Elo,Clo,bB,wlo,Alo,Llo,nh,gle,ylo,xlo,vB,$lo,klo,Slo,sh,hle,Rlo,Plo,FB,Blo,Nlo,Ilo,lh,ple,qlo,jlo,TB,Dlo,Glo,Olo,Qn,_le,Vlo,Xlo,MB,zlo,Qlo,EB,Wlo,Hlo,Ulo,ih,ule,Jlo,Ylo,CB,Klo,Zlo,eio,Wn,ble,oio,rio,wB,tio,aio,AB,nio,sio,lio,Hn,vle,iio,dio,LB,cio,fio,yB,mio,gio,hio,Un,Fle,pio,_io,xB,uio,bio,$B,vio,Fio,Tio,Jn,Tle,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,dh,Mle,xio,$io,RB,kio,Sio,Rio,Yn,Ele,Pio,Bio,PB,Nio,Iio,BB,qio,jio,Dio,Kn,Cle,Gio,Oio,NB,Vio,Xio,IB,zio,Qio,Wio,Zn,wle,Hio,Uio,qB,Jio,Yio,jB,Kio,Zio,edo,es,Ale,odo,rdo,DB,tdo,ado,GB,ndo,sdo,ldo,os,Lle,ido,ddo,OB,cdo,fdo,VB,mdo,gdo,hdo,rs,yle,pdo,_do,XB,udo,bdo,zB,vdo,Fdo,Tdo,ch,xle,Mdo,Edo,QB,Cdo,wdo,Ado,ts,$le,Ldo,ydo,WB,xdo,$do,HB,kdo,Sdo,Rdo,fh,kle,Pdo,Bdo,UB,Ndo,Ido,qdo,as,Sle,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,ns,Rle,Qdo,Wdo,KB,Hdo,Udo,ZB,Jdo,Ydo,Kdo,ss,Ple,Zdo,eco,eN,oco,rco,oN,tco,aco,nco,mh,Ble,sco,lco,rN,ico,dco,cco,ls,Nle,fco,mco,tN,gco,hco,aN,pco,_co,uco,is,Ile,bco,vco,nN,Fco,Tco,sN,Mco,Eco,Cco,ds,qle,wco,Aco,lN,Lco,yco,iN,xco,$co,kco,gh,jle,Sco,Rco,dN,Pco,Bco,Nco,cs,Dle,Ico,qco,cN,jco,Dco,fN,Gco,Oco,Vco,fs,Gle,Xco,zco,mN,Qco,Wco,gN,Hco,Uco,Jco,ms,Ole,Yco,Kco,hN,Zco,efo,pN,ofo,rfo,tfo,gs,Vle,afo,nfo,_N,sfo,lfo,uN,ifo,dfo,cfo,hs,Xle,ffo,mfo,bN,gfo,hfo,vN,pfo,_fo,ufo,ps,zle,bfo,vfo,FN,Ffo,Tfo,TN,Mfo,Efo,Cfo,_s,Qle,wfo,Afo,MN,Lfo,yfo,EN,xfo,$fo,kfo,us,Wle,Sfo,Rfo,CN,Pfo,Bfo,wN,Nfo,Ifo,qfo,hh,Hle,jfo,Dfo,AN,Gfo,Ofo,Vfo,bs,Ule,Xfo,zfo,LN,Qfo,Wfo,yN,Hfo,Ufo,Jfo,ph,Jle,Yfo,Kfo,xN,Zfo,emo,omo,_h,Yle,rmo,tmo,$N,amo,nmo,smo,vs,Kle,lmo,imo,kN,dmo,cmo,SN,fmo,mmo,gmo,Fs,Zle,hmo,pmo,RN,_mo,umo,PN,bmo,vmo,Fmo,Ts,eie,Tmo,Mmo,BN,Emo,Cmo,NN,wmo,Amo,Lmo,uh,oie,ymo,xmo,IN,$mo,kmo,Smo,Ms,rie,Rmo,Pmo,qN,Bmo,Nmo,jN,Imo,qmo,jmo,Es,tie,Dmo,Gmo,DN,Omo,Vmo,GN,Xmo,zmo,Qmo,Cs,aie,Wmo,Hmo,ON,Umo,Jmo,VN,Ymo,Kmo,Zmo,ws,nie,ego,ogo,XN,rgo,tgo,zN,ago,ngo,sgo,As,sie,lgo,igo,QN,dgo,cgo,WN,fgo,mgo,ggo,Ls,lie,hgo,pgo,HN,_go,ugo,UN,bgo,vgo,Fgo,ys,iie,Tgo,Mgo,JN,Ego,Cgo,YN,wgo,Ago,Lgo,xs,die,ygo,xgo,KN,$go,kgo,ZN,Sgo,Rgo,Pgo,bh,cie,Bgo,Ngo,eI,Igo,qgo,jgo,$s,fie,Dgo,Ggo,oI,Ogo,Vgo,rI,Xgo,zgo,Qgo,vh,mie,Wgo,Hgo,tI,Ugo,Jgo,Ygo,Fh,gie,Kgo,Zgo,aI,eho,oho,rho,Th,hie,tho,aho,nI,nho,sho,lho,Mh,pie,iho,dho,sI,cho,fho,mho,ks,_ie,gho,hho,lI,pho,_ho,iI,uho,bho,vho,Eh,uie,Fho,Tho,dI,Mho,Eho,Cho,Ss,bie,who,Aho,cI,Lho,yho,fI,xho,$ho,kho,Rs,vie,Sho,Rho,mI,Pho,Bho,gI,Nho,Iho,qho,Ps,Fie,jho,Dho,hI,Gho,Oho,pI,Vho,Xho,zho,Bs,Tie,Qho,Who,_I,Hho,Uho,uI,Jho,Yho,Kho,Ns,Mie,Zho,epo,bI,opo,rpo,vI,tpo,apo,npo,Is,Eie,spo,lpo,FI,ipo,dpo,TI,cpo,fpo,mpo,Ch,Cie,gpo,hpo,MI,ppo,_po,upo,wh,wie,bpo,vpo,EI,Fpo,Tpo,Mpo,qs,Aie,Epo,Cpo,CI,wpo,Apo,wI,Lpo,ypo,xpo,js,Lie,$po,kpo,AI,Spo,Rpo,LI,Ppo,Bpo,Npo,Ds,yie,Ipo,qpo,yI,jpo,Dpo,xI,Gpo,Opo,Vpo,Ah,xie,Xpo,zpo,$I,Qpo,Wpo,Hpo,Lh,$ie,Upo,Jpo,kI,Ypo,Kpo,Zpo,yh,kie,e_o,o_o,SI,r_o,t_o,a_o,Gs,Sie,n_o,s_o,RI,l_o,i_o,PI,d_o,c_o,f_o,Os,Rie,m_o,g_o,BI,h_o,p_o,NI,__o,u_o,b_o,xh,Pie,v_o,F_o,II,T_o,M_o,E_o,$h,Bie,C_o,w_o,qI,A_o,L_o,y_o,kh,Nie,x_o,$_o,jI,k_o,S_o,R_o,Vs,Iie,P_o,B_o,DI,N_o,I_o,GI,q_o,j_o,D_o,Sh,qie,G_o,O_o,OI,V_o,X_o,z_o,Rh,jie,Q_o,W_o,VI,H_o,U_o,J_o,Xs,Die,Y_o,K_o,XI,Z_o,euo,zI,ouo,ruo,tuo,zs,Gie,auo,nuo,QI,suo,luo,WI,iuo,duo,cuo,Qs,Oie,fuo,muo,HI,guo,huo,UI,puo,_uo,uuo,Ws,Vie,buo,vuo,JI,Fuo,Tuo,YI,Muo,Euo,Cuo,Ph,wuo,Bh,bL,Auo,Xie,Luo,fXe,ji,Nh,zie,vL,yuo,Qie,xuo,mXe,yo,FL,$uo,TL,kuo,KI,Suo,Ruo,Puo,ML,Buo,Wie,Nuo,Iuo,quo,Ue,EL,juo,Hie,Duo,Guo,Ba,Ouo,Uie,Vuo,Xuo,Jie,zuo,Quo,Yie,Wuo,Huo,Uuo,Y,Ih,Kie,Juo,Yuo,ZI,Kuo,Zuo,e1o,qh,Zie,o1o,r1o,eq,t1o,a1o,n1o,jh,ede,s1o,l1o,oq,i1o,d1o,c1o,Dh,ode,f1o,m1o,rq,g1o,h1o,p1o,Gh,rde,_1o,u1o,tq,b1o,v1o,F1o,Oh,tde,T1o,M1o,aq,E1o,C1o,w1o,Vh,ade,A1o,L1o,nq,y1o,x1o,$1o,Xh,nde,k1o,S1o,sq,R1o,P1o,B1o,zh,sde,N1o,I1o,lq,q1o,j1o,D1o,Qh,lde,G1o,O1o,iq,V1o,X1o,z1o,Wh,ide,Q1o,W1o,dq,H1o,U1o,J1o,Hh,dde,Y1o,K1o,cq,Z1o,e2o,o2o,Uh,cde,r2o,t2o,fq,a2o,n2o,s2o,Jh,fde,l2o,i2o,mq,d2o,c2o,f2o,Yh,mde,m2o,g2o,gq,h2o,p2o,_2o,Kh,gde,u2o,b2o,hq,v2o,F2o,T2o,Zh,hde,M2o,E2o,pq,C2o,w2o,A2o,ep,pde,L2o,y2o,_q,x2o,$2o,k2o,op,_de,S2o,R2o,uq,P2o,B2o,N2o,rp,ude,I2o,q2o,bq,j2o,D2o,G2o,tp,bde,O2o,V2o,vq,X2o,z2o,Q2o,ap,vde,W2o,H2o,Fq,U2o,J2o,Y2o,np,Fde,K2o,Z2o,Tq,ebo,obo,rbo,sp,Tde,tbo,abo,Mq,nbo,sbo,lbo,lp,Mde,ibo,dbo,Eq,cbo,fbo,mbo,ip,Ede,gbo,hbo,Cq,pbo,_bo,ubo,dp,Cde,bbo,vbo,wq,Fbo,Tbo,Mbo,cp,wde,Ebo,Cbo,Aq,wbo,Abo,Lbo,fp,Ade,ybo,xbo,Lq,$bo,kbo,Sbo,mp,Lde,Rbo,Pbo,yq,Bbo,Nbo,Ibo,gp,yde,qbo,jbo,xq,Dbo,Gbo,Obo,hp,xde,Vbo,Xbo,$q,zbo,Qbo,Wbo,pp,$de,Hbo,Ubo,kq,Jbo,Ybo,Kbo,_p,kde,Zbo,evo,Sq,ovo,rvo,tvo,up,avo,bp,nvo,vp,CL,svo,Sde,lvo,gXe,Di,Fp,Rde,wL,ivo,Pde,dvo,hXe,xo,AL,cvo,LL,fvo,Rq,mvo,gvo,hvo,yL,pvo,Bde,_vo,uvo,bvo,Je,xL,vvo,Nde,Fvo,Tvo,Gi,Mvo,Ide,Evo,Cvo,qde,wvo,Avo,Lvo,he,Tp,jde,yvo,xvo,Pq,$vo,kvo,Svo,Mp,Dde,Rvo,Pvo,Gde,Bvo,Nvo,Ivo,Ep,Ode,qvo,jvo,Bq,Dvo,Gvo,Ovo,Cp,Vde,Vvo,Xvo,Nq,zvo,Qvo,Wvo,wp,Xde,Hvo,Uvo,Iq,Jvo,Yvo,Kvo,Ap,zde,Zvo,eFo,qq,oFo,rFo,tFo,Lp,Qde,aFo,nFo,jq,sFo,lFo,iFo,yp,Wde,dFo,cFo,Dq,fFo,mFo,gFo,xp,Hde,hFo,pFo,Gq,_Fo,uFo,bFo,$p,Ude,vFo,FFo,Oq,TFo,MFo,EFo,kp,Jde,CFo,wFo,Vq,AFo,LFo,yFo,Sp,Yde,xFo,$Fo,Xq,kFo,SFo,RFo,Rp,Kde,PFo,BFo,zq,NFo,IFo,qFo,Pp,Zde,jFo,DFo,Qq,GFo,OFo,VFo,Bp,ece,XFo,zFo,Wq,QFo,WFo,HFo,Np,oce,UFo,JFo,Hq,YFo,KFo,ZFo,Ip,rce,e6o,o6o,Uq,r6o,t6o,a6o,qp,tce,n6o,s6o,Jq,l6o,i6o,d6o,jp,c6o,Dp,f6o,Gp,$L,m6o,ace,g6o,pXe,Oi,Op,nce,kL,h6o,sce,p6o,_Xe,$o,SL,_6o,Vi,u6o,Yq,b6o,v6o,Kq,F6o,T6o,M6o,RL,E6o,lce,C6o,w6o,A6o,it,PL,L6o,ice,y6o,x6o,Xi,$6o,dce,k6o,S6o,Zq,R6o,P6o,B6o,Vp,N6o,Ye,BL,I6o,cce,q6o,j6o,Na,D6o,fce,G6o,O6o,mce,V6o,X6o,gce,z6o,Q6o,W6o,y,Xp,hce,H6o,U6o,ej,J6o,Y6o,K6o,zp,pce,Z6o,eTo,oj,oTo,rTo,tTo,Qp,_ce,aTo,nTo,rj,sTo,lTo,iTo,Wp,uce,dTo,cTo,tj,fTo,mTo,gTo,Hp,bce,hTo,pTo,aj,_To,uTo,bTo,Up,vce,vTo,FTo,nj,TTo,MTo,ETo,Jp,Fce,CTo,wTo,sj,ATo,LTo,yTo,Yp,Tce,xTo,$To,lj,kTo,STo,RTo,Kp,Mce,PTo,BTo,ij,NTo,ITo,qTo,Zp,Ece,jTo,DTo,dj,GTo,OTo,VTo,e_,Cce,XTo,zTo,cj,QTo,WTo,HTo,o_,wce,UTo,JTo,fj,YTo,KTo,ZTo,r_,Ace,e8o,o8o,mj,r8o,t8o,a8o,t_,Lce,n8o,s8o,gj,l8o,i8o,d8o,a_,yce,c8o,f8o,hj,m8o,g8o,h8o,n_,xce,p8o,_8o,pj,u8o,b8o,v8o,s_,$ce,F8o,T8o,_j,M8o,E8o,C8o,l_,kce,w8o,A8o,uj,L8o,y8o,x8o,i_,Sce,$8o,k8o,bj,S8o,R8o,P8o,d_,Rce,B8o,N8o,vj,I8o,q8o,j8o,c_,Pce,D8o,G8o,Fj,O8o,V8o,X8o,f_,Bce,z8o,Q8o,Tj,W8o,H8o,U8o,m_,Nce,J8o,Y8o,Mj,K8o,Z8o,eMo,g_,Ice,oMo,rMo,Ej,tMo,aMo,nMo,h_,qce,sMo,lMo,Cj,iMo,dMo,cMo,p_,jce,fMo,mMo,wj,gMo,hMo,pMo,__,Dce,_Mo,uMo,Aj,bMo,vMo,FMo,u_,Gce,TMo,MMo,Lj,EMo,CMo,wMo,b_,Oce,AMo,LMo,yj,yMo,xMo,$Mo,v_,Vce,kMo,SMo,xj,RMo,PMo,BMo,F_,Xce,NMo,IMo,$j,qMo,jMo,DMo,T_,zce,GMo,OMo,kj,VMo,XMo,zMo,M_,Qce,QMo,WMo,Sj,HMo,UMo,JMo,E_,Wce,YMo,KMo,Rj,ZMo,e4o,o4o,Hs,Hce,r4o,t4o,Pj,a4o,n4o,Bj,s4o,l4o,i4o,C_,Uce,d4o,c4o,Nj,f4o,m4o,g4o,w_,Jce,h4o,p4o,Ij,_4o,u4o,b4o,A_,Yce,v4o,F4o,qj,T4o,M4o,E4o,L_,Kce,C4o,w4o,jj,A4o,L4o,y4o,y_,Zce,x4o,$4o,Dj,k4o,S4o,R4o,x_,efe,P4o,B4o,Gj,N4o,I4o,q4o,$_,ofe,j4o,D4o,Oj,G4o,O4o,V4o,k_,rfe,X4o,z4o,Vj,Q4o,W4o,H4o,S_,tfe,U4o,J4o,Xj,Y4o,K4o,Z4o,R_,afe,eEo,oEo,zj,rEo,tEo,aEo,P_,nfe,nEo,sEo,Qj,lEo,iEo,dEo,B_,sfe,cEo,fEo,Wj,mEo,gEo,hEo,N_,lfe,pEo,_Eo,Hj,uEo,bEo,vEo,I_,ife,FEo,TEo,Uj,MEo,EEo,CEo,q_,dfe,wEo,AEo,Jj,LEo,yEo,xEo,j_,cfe,$Eo,kEo,Yj,SEo,REo,PEo,D_,ffe,BEo,NEo,Kj,IEo,qEo,jEo,G_,mfe,DEo,GEo,Zj,OEo,VEo,XEo,O_,gfe,zEo,QEo,eD,WEo,HEo,UEo,V_,hfe,JEo,YEo,oD,KEo,ZEo,eCo,X_,pfe,oCo,rCo,rD,tCo,aCo,nCo,z_,_fe,sCo,lCo,tD,iCo,dCo,cCo,Q_,ufe,fCo,mCo,aD,gCo,hCo,pCo,W_,bfe,_Co,uCo,nD,bCo,vCo,FCo,H_,vfe,TCo,MCo,sD,ECo,CCo,wCo,U_,Ffe,ACo,LCo,lD,yCo,xCo,$Co,J_,Tfe,kCo,SCo,iD,RCo,PCo,BCo,Y_,Mfe,NCo,ICo,dD,qCo,jCo,DCo,K_,Efe,GCo,OCo,cD,VCo,XCo,zCo,Z_,Cfe,QCo,WCo,fD,HCo,UCo,JCo,eu,wfe,YCo,KCo,mD,ZCo,e3o,o3o,ou,Afe,r3o,t3o,gD,a3o,n3o,s3o,ru,Lfe,l3o,i3o,hD,d3o,c3o,f3o,tu,yfe,m3o,g3o,pD,h3o,p3o,_3o,au,xfe,u3o,b3o,_D,v3o,F3o,T3o,nu,$fe,M3o,E3o,uD,C3o,w3o,A3o,su,kfe,L3o,y3o,bD,x3o,$3o,k3o,lu,Sfe,S3o,R3o,vD,P3o,B3o,N3o,iu,Rfe,I3o,q3o,FD,j3o,D3o,G3o,du,Pfe,O3o,V3o,TD,X3o,z3o,Q3o,cu,Bfe,W3o,H3o,MD,U3o,J3o,Y3o,fu,Nfe,K3o,Z3o,ED,e5o,o5o,r5o,mu,Ife,t5o,a5o,CD,n5o,s5o,l5o,gu,qfe,i5o,d5o,wD,c5o,f5o,m5o,hu,jfe,g5o,h5o,AD,p5o,_5o,u5o,pu,Dfe,b5o,v5o,LD,F5o,T5o,M5o,_u,Gfe,E5o,C5o,yD,w5o,A5o,L5o,uu,Ofe,y5o,x5o,xD,$5o,k5o,S5o,bu,Vfe,R5o,P5o,$D,B5o,N5o,I5o,vu,Xfe,q5o,j5o,kD,D5o,G5o,O5o,Fu,zfe,V5o,X5o,SD,z5o,Q5o,W5o,Tu,Qfe,H5o,U5o,RD,J5o,Y5o,K5o,Mu,Wfe,Z5o,e0o,PD,o0o,r0o,t0o,Eu,Hfe,a0o,n0o,BD,s0o,l0o,i0o,Cu,Ufe,d0o,c0o,ND,f0o,m0o,g0o,wu,Jfe,h0o,p0o,ID,_0o,u0o,b0o,Au,Yfe,v0o,F0o,qD,T0o,M0o,E0o,Lu,Kfe,C0o,w0o,jD,A0o,L0o,y0o,yu,Zfe,x0o,$0o,DD,k0o,S0o,R0o,xu,eme,P0o,B0o,GD,N0o,I0o,q0o,$u,ome,j0o,D0o,OD,G0o,O0o,V0o,ku,rme,X0o,z0o,VD,Q0o,W0o,H0o,Su,tme,U0o,J0o,XD,Y0o,K0o,Z0o,Ru,ame,ewo,owo,zD,rwo,two,awo,Pu,nme,nwo,swo,QD,lwo,iwo,dwo,Bu,sme,cwo,fwo,WD,mwo,gwo,hwo,Nu,lme,pwo,_wo,HD,uwo,bwo,vwo,Iu,ime,Fwo,Two,UD,Mwo,Ewo,Cwo,qu,dme,wwo,Awo,JD,Lwo,ywo,xwo,ju,cme,$wo,kwo,YD,Swo,Rwo,Pwo,Du,fme,Bwo,Nwo,KD,Iwo,qwo,jwo,Gu,mme,Dwo,Gwo,ZD,Owo,Vwo,Xwo,Ou,gme,zwo,Qwo,eG,Wwo,Hwo,Uwo,Vu,hme,Jwo,Ywo,oG,Kwo,Zwo,eAo,Xu,pme,oAo,rAo,rG,tAo,aAo,nAo,zu,_me,sAo,lAo,tG,iAo,dAo,cAo,Qu,fAo,ume,mAo,gAo,bme,hAo,pAo,Wu,uXe,zi,Hu,vme,NL,_Ao,Fme,uAo,bXe,ko,IL,bAo,Qi,vAo,aG,FAo,TAo,nG,MAo,EAo,CAo,qL,wAo,Tme,AAo,LAo,yAo,dt,jL,xAo,Mme,$Ao,kAo,Wi,SAo,Eme,RAo,PAo,sG,BAo,NAo,IAo,Uu,qAo,Ke,DL,jAo,Cme,DAo,GAo,Ia,OAo,wme,VAo,XAo,Ame,zAo,QAo,Lme,WAo,HAo,UAo,G,Ju,yme,JAo,YAo,lG,KAo,ZAo,e7o,Yu,xme,o7o,r7o,iG,t7o,a7o,n7o,Ku,$me,s7o,l7o,dG,i7o,d7o,c7o,Zu,kme,f7o,m7o,cG,g7o,h7o,p7o,e1,Sme,_7o,u7o,fG,b7o,v7o,F7o,o1,Rme,T7o,M7o,mG,E7o,C7o,w7o,r1,Pme,A7o,L7o,gG,y7o,x7o,$7o,t1,Bme,k7o,S7o,hG,R7o,P7o,B7o,a1,Nme,N7o,I7o,pG,q7o,j7o,D7o,n1,Ime,G7o,O7o,_G,V7o,X7o,z7o,s1,qme,Q7o,W7o,uG,H7o,U7o,J7o,l1,jme,Y7o,K7o,bG,Z7o,eLo,oLo,i1,Dme,rLo,tLo,vG,aLo,nLo,sLo,d1,Gme,lLo,iLo,FG,dLo,cLo,fLo,c1,Ome,mLo,gLo,TG,hLo,pLo,_Lo,f1,Vme,uLo,bLo,MG,vLo,FLo,TLo,m1,Xme,MLo,ELo,EG,CLo,wLo,ALo,g1,zme,LLo,yLo,CG,xLo,$Lo,kLo,h1,Qme,SLo,RLo,wG,PLo,BLo,NLo,p1,Wme,ILo,qLo,AG,jLo,DLo,GLo,_1,Hme,OLo,VLo,LG,XLo,zLo,QLo,u1,Ume,WLo,HLo,yG,ULo,JLo,YLo,b1,Jme,KLo,ZLo,xG,eyo,oyo,ryo,v1,Yme,tyo,ayo,$G,nyo,syo,lyo,F1,Kme,iyo,dyo,kG,cyo,fyo,myo,T1,Zme,gyo,hyo,SG,pyo,_yo,uyo,M1,ege,byo,vyo,RG,Fyo,Tyo,Myo,E1,oge,Eyo,Cyo,PG,wyo,Ayo,Lyo,C1,rge,yyo,xyo,BG,$yo,kyo,Syo,w1,tge,Ryo,Pyo,NG,Byo,Nyo,Iyo,A1,age,qyo,jyo,IG,Dyo,Gyo,Oyo,L1,nge,Vyo,Xyo,qG,zyo,Qyo,Wyo,y1,sge,Hyo,Uyo,jG,Jyo,Yyo,Kyo,x1,lge,Zyo,e9o,DG,o9o,r9o,t9o,$1,ige,a9o,n9o,GG,s9o,l9o,i9o,k1,dge,d9o,c9o,OG,f9o,m9o,g9o,S1,cge,h9o,p9o,VG,_9o,u9o,b9o,R1,fge,v9o,F9o,XG,T9o,M9o,E9o,P1,mge,C9o,w9o,zG,A9o,L9o,y9o,B1,gge,x9o,$9o,QG,k9o,S9o,R9o,N1,hge,P9o,B9o,WG,N9o,I9o,q9o,I1,pge,j9o,D9o,HG,G9o,O9o,V9o,q1,_ge,X9o,z9o,UG,Q9o,W9o,H9o,j1,uge,U9o,J9o,JG,Y9o,K9o,Z9o,D1,bge,exo,oxo,YG,rxo,txo,axo,G1,nxo,vge,sxo,lxo,Fge,ixo,dxo,O1,vXe,Hi,V1,Tge,GL,cxo,Mge,fxo,FXe,So,OL,mxo,Ui,gxo,KG,hxo,pxo,ZG,_xo,uxo,bxo,VL,vxo,Ege,Fxo,Txo,Mxo,ct,XL,Exo,Cge,Cxo,wxo,Ji,Axo,wge,Lxo,yxo,eO,xxo,$xo,kxo,X1,Sxo,Ze,zL,Rxo,Age,Pxo,Bxo,qa,Nxo,Lge,Ixo,qxo,yge,jxo,Dxo,xge,Gxo,Oxo,Vxo,z,z1,$ge,Xxo,zxo,oO,Qxo,Wxo,Hxo,Q1,kge,Uxo,Jxo,rO,Yxo,Kxo,Zxo,W1,Sge,e$o,o$o,tO,r$o,t$o,a$o,H1,Rge,n$o,s$o,aO,l$o,i$o,d$o,U1,Pge,c$o,f$o,nO,m$o,g$o,h$o,J1,Bge,p$o,_$o,sO,u$o,b$o,v$o,Y1,Nge,F$o,T$o,lO,M$o,E$o,C$o,K1,Ige,w$o,A$o,iO,L$o,y$o,x$o,Z1,qge,$$o,k$o,dO,S$o,R$o,P$o,e2,jge,B$o,N$o,cO,I$o,q$o,j$o,o2,Dge,D$o,G$o,fO,O$o,V$o,X$o,r2,Gge,z$o,Q$o,mO,W$o,H$o,U$o,t2,Oge,J$o,Y$o,gO,K$o,Z$o,eko,a2,Vge,oko,rko,hO,tko,ako,nko,n2,Xge,sko,lko,pO,iko,dko,cko,s2,zge,fko,mko,_O,gko,hko,pko,l2,Qge,_ko,uko,uO,bko,vko,Fko,i2,Wge,Tko,Mko,bO,Eko,Cko,wko,d2,Hge,Ako,Lko,vO,yko,xko,$ko,c2,Uge,kko,Sko,FO,Rko,Pko,Bko,f2,Jge,Nko,Iko,TO,qko,jko,Dko,m2,Yge,Gko,Oko,MO,Vko,Xko,zko,g2,Kge,Qko,Wko,EO,Hko,Uko,Jko,h2,Zge,Yko,Kko,CO,Zko,eSo,oSo,p2,ehe,rSo,tSo,wO,aSo,nSo,sSo,_2,ohe,lSo,iSo,AO,dSo,cSo,fSo,u2,rhe,mSo,gSo,LO,hSo,pSo,_So,b2,the,uSo,bSo,yO,vSo,FSo,TSo,v2,ahe,MSo,ESo,xO,CSo,wSo,ASo,F2,nhe,LSo,ySo,$O,xSo,$So,kSo,T2,she,SSo,RSo,kO,PSo,BSo,NSo,M2,lhe,ISo,qSo,SO,jSo,DSo,GSo,E2,ihe,OSo,VSo,RO,XSo,zSo,QSo,C2,dhe,WSo,HSo,PO,USo,JSo,YSo,w2,che,KSo,ZSo,BO,eRo,oRo,rRo,A2,fhe,tRo,aRo,NO,nRo,sRo,lRo,L2,mhe,iRo,dRo,IO,cRo,fRo,mRo,y2,ghe,gRo,hRo,qO,pRo,_Ro,uRo,x2,hhe,bRo,vRo,jO,FRo,TRo,MRo,$2,phe,ERo,CRo,DO,wRo,ARo,LRo,k2,yRo,_he,xRo,$Ro,uhe,kRo,SRo,S2,TXe,Yi,R2,bhe,QL,RRo,vhe,PRo,MXe,Ro,WL,BRo,Ki,NRo,GO,IRo,qRo,OO,jRo,DRo,GRo,HL,ORo,Fhe,VRo,XRo,zRo,ft,UL,QRo,The,WRo,HRo,Zi,URo,Mhe,JRo,YRo,VO,KRo,ZRo,ePo,P2,oPo,eo,JL,rPo,Ehe,tPo,aPo,ja,nPo,Che,sPo,lPo,whe,iPo,dPo,Ahe,cPo,fPo,mPo,W,B2,Lhe,gPo,hPo,XO,pPo,_Po,uPo,N2,yhe,bPo,vPo,zO,FPo,TPo,MPo,I2,xhe,EPo,CPo,QO,wPo,APo,LPo,q2,$he,yPo,xPo,WO,$Po,kPo,SPo,j2,khe,RPo,PPo,HO,BPo,NPo,IPo,D2,She,qPo,jPo,UO,DPo,GPo,OPo,G2,Rhe,VPo,XPo,JO,zPo,QPo,WPo,O2,Phe,HPo,UPo,YO,JPo,YPo,KPo,V2,Bhe,ZPo,eBo,KO,oBo,rBo,tBo,X2,Nhe,aBo,nBo,ZO,sBo,lBo,iBo,z2,Ihe,dBo,cBo,eV,fBo,mBo,gBo,Q2,qhe,hBo,pBo,oV,_Bo,uBo,bBo,W2,jhe,vBo,FBo,rV,TBo,MBo,EBo,H2,Dhe,CBo,wBo,tV,ABo,LBo,yBo,U2,Ghe,xBo,$Bo,aV,kBo,SBo,RBo,J2,Ohe,PBo,BBo,nV,NBo,IBo,qBo,Y2,Vhe,jBo,DBo,sV,GBo,OBo,VBo,K2,Xhe,XBo,zBo,lV,QBo,WBo,HBo,Z2,zhe,UBo,JBo,iV,YBo,KBo,ZBo,eb,Qhe,eNo,oNo,dV,rNo,tNo,aNo,ob,Whe,nNo,sNo,cV,lNo,iNo,dNo,rb,Hhe,cNo,fNo,fV,mNo,gNo,hNo,tb,Uhe,pNo,_No,mV,uNo,bNo,vNo,ab,Jhe,FNo,TNo,gV,MNo,ENo,CNo,nb,Yhe,wNo,ANo,hV,LNo,yNo,xNo,sb,Khe,$No,kNo,pV,SNo,RNo,PNo,lb,Zhe,BNo,NNo,_V,INo,qNo,jNo,ib,epe,DNo,GNo,uV,ONo,VNo,XNo,db,ope,zNo,QNo,bV,WNo,HNo,UNo,cb,rpe,JNo,YNo,vV,KNo,ZNo,eIo,fb,tpe,oIo,rIo,FV,tIo,aIo,nIo,mb,ape,sIo,lIo,TV,iIo,dIo,cIo,gb,npe,fIo,mIo,MV,gIo,hIo,pIo,hb,spe,_Io,uIo,lpe,bIo,vIo,FIo,pb,ipe,TIo,MIo,EV,EIo,CIo,wIo,_b,dpe,AIo,LIo,CV,yIo,xIo,$Io,ub,cpe,kIo,SIo,wV,RIo,PIo,BIo,bb,fpe,NIo,IIo,AV,qIo,jIo,DIo,vb,GIo,mpe,OIo,VIo,gpe,XIo,zIo,Fb,EXe,ed,Tb,hpe,YL,QIo,ppe,WIo,CXe,Po,KL,HIo,od,UIo,LV,JIo,YIo,yV,KIo,ZIo,eqo,ZL,oqo,_pe,rqo,tqo,aqo,mt,ey,nqo,upe,sqo,lqo,rd,iqo,bpe,dqo,cqo,xV,fqo,mqo,gqo,Mb,hqo,oo,oy,pqo,vpe,_qo,uqo,Da,bqo,Fpe,vqo,Fqo,Tpe,Tqo,Mqo,Mpe,Eqo,Cqo,wqo,pe,Eb,Epe,Aqo,Lqo,$V,yqo,xqo,$qo,Cb,Cpe,kqo,Sqo,kV,Rqo,Pqo,Bqo,wb,wpe,Nqo,Iqo,SV,qqo,jqo,Dqo,Ab,Ape,Gqo,Oqo,RV,Vqo,Xqo,zqo,Lb,Lpe,Qqo,Wqo,PV,Hqo,Uqo,Jqo,yb,ype,Yqo,Kqo,BV,Zqo,ejo,ojo,xb,xpe,rjo,tjo,NV,ajo,njo,sjo,$b,$pe,ljo,ijo,IV,djo,cjo,fjo,kb,kpe,mjo,gjo,qV,hjo,pjo,_jo,Sb,Spe,ujo,bjo,jV,vjo,Fjo,Tjo,Rb,Rpe,Mjo,Ejo,DV,Cjo,wjo,Ajo,Pb,Ppe,Ljo,yjo,GV,xjo,$jo,kjo,Bb,Bpe,Sjo,Rjo,OV,Pjo,Bjo,Njo,Nb,Npe,Ijo,qjo,VV,jjo,Djo,Gjo,Ib,Ipe,Ojo,Vjo,XV,Xjo,zjo,Qjo,qb,qpe,Wjo,Hjo,zV,Ujo,Jjo,Yjo,jb,jpe,Kjo,Zjo,QV,eDo,oDo,rDo,Db,Dpe,tDo,aDo,WV,nDo,sDo,lDo,Gb,iDo,Gpe,dDo,cDo,Ope,fDo,mDo,Ob,wXe,td,Vb,Vpe,ry,gDo,Xpe,hDo,AXe,Bo,ty,pDo,ad,_Do,HV,uDo,bDo,UV,vDo,FDo,TDo,ay,MDo,zpe,EDo,CDo,wDo,gt,ny,ADo,Qpe,LDo,yDo,nd,xDo,Wpe,$Do,kDo,JV,SDo,RDo,PDo,Xb,BDo,ro,sy,NDo,Hpe,IDo,qDo,Ga,jDo,Upe,DDo,GDo,Jpe,ODo,VDo,Ype,XDo,zDo,QDo,I,zb,Kpe,WDo,HDo,YV,UDo,JDo,YDo,Qb,Zpe,KDo,ZDo,KV,eGo,oGo,rGo,Wb,e_e,tGo,aGo,ZV,nGo,sGo,lGo,Hb,o_e,iGo,dGo,eX,cGo,fGo,mGo,Ub,r_e,gGo,hGo,oX,pGo,_Go,uGo,Jb,t_e,bGo,vGo,rX,FGo,TGo,MGo,Yb,a_e,EGo,CGo,tX,wGo,AGo,LGo,Kb,n_e,yGo,xGo,aX,$Go,kGo,SGo,Zb,s_e,RGo,PGo,nX,BGo,NGo,IGo,ev,l_e,qGo,jGo,sX,DGo,GGo,OGo,ov,i_e,VGo,XGo,lX,zGo,QGo,WGo,rv,d_e,HGo,UGo,iX,JGo,YGo,KGo,tv,c_e,ZGo,eOo,dX,oOo,rOo,tOo,av,f_e,aOo,nOo,cX,sOo,lOo,iOo,nv,m_e,dOo,cOo,fX,fOo,mOo,gOo,sv,g_e,hOo,pOo,mX,_Oo,uOo,bOo,lv,h_e,vOo,FOo,gX,TOo,MOo,EOo,iv,p_e,COo,wOo,hX,AOo,LOo,yOo,dv,__e,xOo,$Oo,pX,kOo,SOo,ROo,cv,u_e,POo,BOo,_X,NOo,IOo,qOo,fv,b_e,jOo,DOo,uX,GOo,OOo,VOo,mv,v_e,XOo,zOo,bX,QOo,WOo,HOo,gv,F_e,UOo,JOo,vX,YOo,KOo,ZOo,hv,T_e,eVo,oVo,FX,rVo,tVo,aVo,pv,M_e,nVo,sVo,TX,lVo,iVo,dVo,_v,E_e,cVo,fVo,MX,mVo,gVo,hVo,uv,C_e,pVo,_Vo,EX,uVo,bVo,vVo,bv,w_e,FVo,TVo,CX,MVo,EVo,CVo,vv,A_e,wVo,AVo,wX,LVo,yVo,xVo,Fv,L_e,$Vo,kVo,AX,SVo,RVo,PVo,Tv,y_e,BVo,NVo,LX,IVo,qVo,jVo,Mv,x_e,DVo,GVo,yX,OVo,VVo,XVo,Ev,$_e,zVo,QVo,xX,WVo,HVo,UVo,Cv,k_e,JVo,YVo,$X,KVo,ZVo,eXo,wv,S_e,oXo,rXo,kX,tXo,aXo,nXo,Av,R_e,sXo,lXo,SX,iXo,dXo,cXo,Lv,P_e,fXo,mXo,RX,gXo,hXo,pXo,yv,B_e,_Xo,uXo,PX,bXo,vXo,FXo,xv,N_e,TXo,MXo,BX,EXo,CXo,wXo,$v,I_e,AXo,LXo,NX,yXo,xXo,$Xo,kv,q_e,kXo,SXo,IX,RXo,PXo,BXo,Sv,j_e,NXo,IXo,qX,qXo,jXo,DXo,Rv,D_e,GXo,OXo,jX,VXo,XXo,zXo,Pv,G_e,QXo,WXo,DX,HXo,UXo,JXo,Bv,O_e,YXo,KXo,GX,ZXo,ezo,ozo,Nv,V_e,rzo,tzo,OX,azo,nzo,szo,Iv,X_e,lzo,izo,VX,dzo,czo,fzo,qv,z_e,mzo,gzo,XX,hzo,pzo,_zo,jv,Q_e,uzo,bzo,zX,vzo,Fzo,Tzo,Dv,W_e,Mzo,Ezo,QX,Czo,wzo,Azo,Gv,Lzo,H_e,yzo,xzo,U_e,$zo,kzo,Ov,LXe,sd,Vv,J_e,ly,Szo,Y_e,Rzo,yXe,No,iy,Pzo,ld,Bzo,WX,Nzo,Izo,HX,qzo,jzo,Dzo,dy,Gzo,K_e,Ozo,Vzo,Xzo,ht,cy,zzo,Z_e,Qzo,Wzo,id,Hzo,eue,Uzo,Jzo,UX,Yzo,Kzo,Zzo,Xv,eQo,to,fy,oQo,oue,rQo,tQo,Oa,aQo,rue,nQo,sQo,tue,lQo,iQo,aue,dQo,cQo,fQo,Z,zv,nue,mQo,gQo,JX,hQo,pQo,_Qo,Qv,sue,uQo,bQo,YX,vQo,FQo,TQo,Wv,lue,MQo,EQo,KX,CQo,wQo,AQo,Hv,iue,LQo,yQo,ZX,xQo,$Qo,kQo,Uv,due,SQo,RQo,ez,PQo,BQo,NQo,Jv,cue,IQo,qQo,oz,jQo,DQo,GQo,Yv,fue,OQo,VQo,rz,XQo,zQo,QQo,Kv,mue,WQo,HQo,tz,UQo,JQo,YQo,Zv,gue,KQo,ZQo,az,eWo,oWo,rWo,eF,hue,tWo,aWo,nz,nWo,sWo,lWo,oF,pue,iWo,dWo,sz,cWo,fWo,mWo,rF,_ue,gWo,hWo,lz,pWo,_Wo,uWo,tF,uue,bWo,vWo,iz,FWo,TWo,MWo,aF,bue,EWo,CWo,dz,wWo,AWo,LWo,nF,vue,yWo,xWo,cz,$Wo,kWo,SWo,sF,Fue,RWo,PWo,fz,BWo,NWo,IWo,lF,Tue,qWo,jWo,mz,DWo,GWo,OWo,iF,Mue,VWo,XWo,gz,zWo,QWo,WWo,dF,Eue,HWo,UWo,hz,JWo,YWo,KWo,cF,Cue,ZWo,eHo,pz,oHo,rHo,tHo,fF,wue,aHo,nHo,_z,sHo,lHo,iHo,mF,Aue,dHo,cHo,uz,fHo,mHo,gHo,gF,Lue,hHo,pHo,bz,_Ho,uHo,bHo,hF,yue,vHo,FHo,vz,THo,MHo,EHo,pF,xue,CHo,wHo,Fz,AHo,LHo,yHo,_F,$ue,xHo,$Ho,Tz,kHo,SHo,RHo,uF,kue,PHo,BHo,Mz,NHo,IHo,qHo,bF,Sue,jHo,DHo,Ez,GHo,OHo,VHo,vF,Rue,XHo,zHo,Cz,QHo,WHo,HHo,FF,Pue,UHo,JHo,wz,YHo,KHo,ZHo,TF,eUo,Bue,oUo,rUo,Nue,tUo,aUo,MF,xXe,dd,EF,Iue,my,nUo,que,sUo,$Xe,Io,gy,lUo,cd,iUo,Az,dUo,cUo,Lz,fUo,mUo,gUo,hy,hUo,jue,pUo,_Uo,uUo,pt,py,bUo,Due,vUo,FUo,fd,TUo,Gue,MUo,EUo,yz,CUo,wUo,AUo,CF,LUo,ao,_y,yUo,Oue,xUo,$Uo,Va,kUo,Vue,SUo,RUo,Xue,PUo,BUo,zue,NUo,IUo,qUo,qo,wF,Que,jUo,DUo,xz,GUo,OUo,VUo,AF,Wue,XUo,zUo,$z,QUo,WUo,HUo,LF,Hue,UUo,JUo,kz,YUo,KUo,ZUo,yF,Uue,eJo,oJo,Sz,rJo,tJo,aJo,xF,Jue,nJo,sJo,Rz,lJo,iJo,dJo,$F,Yue,cJo,fJo,Pz,mJo,gJo,hJo,kF,pJo,Kue,_Jo,uJo,Zue,bJo,vJo,SF,kXe,md,RF,e1e,uy,FJo,o1e,TJo,SXe,jo,by,MJo,gd,EJo,Bz,CJo,wJo,Nz,AJo,LJo,yJo,vy,xJo,r1e,$Jo,kJo,SJo,_t,Fy,RJo,t1e,PJo,BJo,hd,NJo,a1e,IJo,qJo,Iz,jJo,DJo,GJo,PF,OJo,no,Ty,VJo,n1e,XJo,zJo,Xa,QJo,s1e,WJo,HJo,l1e,UJo,JJo,i1e,YJo,KJo,ZJo,U,BF,d1e,eYo,oYo,qz,rYo,tYo,aYo,NF,c1e,nYo,sYo,jz,lYo,iYo,dYo,IF,f1e,cYo,fYo,Dz,mYo,gYo,hYo,qF,m1e,pYo,_Yo,Gz,uYo,bYo,vYo,jF,g1e,FYo,TYo,Oz,MYo,EYo,CYo,DF,h1e,wYo,AYo,Vz,LYo,yYo,xYo,GF,p1e,$Yo,kYo,Xz,SYo,RYo,PYo,OF,_1e,BYo,NYo,zz,IYo,qYo,jYo,VF,u1e,DYo,GYo,Qz,OYo,VYo,XYo,XF,b1e,zYo,QYo,Wz,WYo,HYo,UYo,zF,v1e,JYo,YYo,Hz,KYo,ZYo,eKo,QF,F1e,oKo,rKo,Uz,tKo,aKo,nKo,WF,T1e,sKo,lKo,Jz,iKo,dKo,cKo,HF,M1e,fKo,mKo,Yz,gKo,hKo,pKo,UF,E1e,_Ko,uKo,Kz,bKo,vKo,FKo,JF,C1e,TKo,MKo,Zz,EKo,CKo,wKo,YF,w1e,AKo,LKo,eQ,yKo,xKo,$Ko,KF,A1e,kKo,SKo,oQ,RKo,PKo,BKo,ZF,L1e,NKo,IKo,rQ,qKo,jKo,DKo,e6,y1e,GKo,OKo,tQ,VKo,XKo,zKo,o6,x1e,QKo,WKo,aQ,HKo,UKo,JKo,r6,$1e,YKo,KKo,nQ,ZKo,eZo,oZo,t6,k1e,rZo,tZo,sQ,aZo,nZo,sZo,a6,S1e,lZo,iZo,lQ,dZo,cZo,fZo,n6,R1e,mZo,gZo,iQ,hZo,pZo,_Zo,s6,P1e,uZo,bZo,dQ,vZo,FZo,TZo,l6,B1e,MZo,EZo,cQ,CZo,wZo,AZo,i6,N1e,LZo,yZo,fQ,xZo,$Zo,kZo,d6,I1e,SZo,RZo,mQ,PZo,BZo,NZo,c6,q1e,IZo,qZo,gQ,jZo,DZo,GZo,f6,j1e,OZo,VZo,hQ,XZo,zZo,QZo,m6,D1e,WZo,HZo,pQ,UZo,JZo,YZo,g6,G1e,KZo,ZZo,_Q,eer,oer,rer,h6,O1e,ter,aer,uQ,ner,ser,ler,p6,V1e,ier,der,bQ,cer,fer,mer,_6,X1e,ger,her,vQ,per,_er,uer,u6,ber,z1e,ver,Fer,Q1e,Ter,Mer,b6,RXe,pd,v6,W1e,My,Eer,H1e,Cer,PXe,Do,Ey,wer,_d,Aer,FQ,Ler,yer,TQ,xer,$er,ker,Cy,Ser,U1e,Rer,Per,Ber,ut,wy,Ner,J1e,Ier,qer,ud,jer,Y1e,Der,Ger,MQ,Oer,Ver,Xer,F6,zer,so,Ay,Qer,K1e,Wer,Her,za,Uer,Z1e,Jer,Yer,e2e,Ker,Zer,o2e,eor,oor,ror,V,T6,r2e,tor,aor,EQ,nor,sor,lor,M6,t2e,ior,dor,CQ,cor,mor,gor,E6,a2e,hor,por,wQ,_or,uor,bor,C6,n2e,vor,For,AQ,Tor,Mor,Eor,w6,s2e,Cor,wor,LQ,Aor,Lor,yor,A6,l2e,xor,$or,yQ,kor,Sor,Ror,L6,i2e,Por,Bor,xQ,Nor,Ior,qor,y6,d2e,jor,Dor,$Q,Gor,Oor,Vor,x6,c2e,Xor,zor,kQ,Qor,Wor,Hor,$6,f2e,Uor,Jor,SQ,Yor,Kor,Zor,k6,m2e,err,orr,RQ,rrr,trr,arr,S6,g2e,nrr,srr,PQ,lrr,irr,drr,R6,h2e,crr,frr,BQ,mrr,grr,hrr,P6,p2e,prr,_rr,NQ,urr,brr,vrr,B6,_2e,Frr,Trr,IQ,Mrr,Err,Crr,N6,u2e,wrr,Arr,qQ,Lrr,yrr,xrr,I6,b2e,$rr,krr,jQ,Srr,Rrr,Prr,q6,v2e,Brr,Nrr,DQ,Irr,qrr,jrr,j6,F2e,Drr,Grr,GQ,Orr,Vrr,Xrr,D6,T2e,zrr,Qrr,OQ,Wrr,Hrr,Urr,G6,M2e,Jrr,Yrr,VQ,Krr,Zrr,etr,O6,E2e,otr,rtr,XQ,ttr,atr,ntr,V6,C2e,str,ltr,zQ,itr,dtr,ctr,X6,w2e,ftr,mtr,QQ,gtr,htr,ptr,z6,A2e,_tr,utr,WQ,btr,vtr,Ftr,Q6,L2e,Ttr,Mtr,HQ,Etr,Ctr,wtr,W6,y2e,Atr,Ltr,UQ,ytr,xtr,$tr,H6,x2e,ktr,Str,JQ,Rtr,Ptr,Btr,U6,$2e,Ntr,Itr,YQ,qtr,jtr,Dtr,J6,k2e,Gtr,Otr,KQ,Vtr,Xtr,ztr,Y6,S2e,Qtr,Wtr,ZQ,Htr,Utr,Jtr,K6,R2e,Ytr,Ktr,eW,Ztr,ear,oar,Z6,P2e,rar,tar,oW,aar,nar,sar,eT,B2e,lar,iar,rW,dar,car,far,oT,N2e,mar,gar,tW,har,par,_ar,rT,I2e,uar,bar,aW,Far,Tar,Mar,tT,q2e,Ear,Car,nW,war,Aar,Lar,aT,j2e,yar,xar,sW,$ar,kar,Sar,nT,D2e,Rar,Par,lW,Bar,Nar,Iar,sT,G2e,qar,jar,iW,Dar,Gar,Oar,lT,O2e,Var,Xar,dW,zar,Qar,War,iT,V2e,Har,Uar,cW,Jar,Yar,Kar,dT,Zar,X2e,enr,onr,z2e,rnr,tnr,cT,BXe,bd,fT,Q2e,Ly,anr,W2e,nnr,NXe,Go,yy,snr,vd,lnr,fW,inr,dnr,mW,cnr,fnr,mnr,xy,gnr,H2e,hnr,pnr,_nr,bt,$y,unr,U2e,bnr,vnr,Fd,Fnr,J2e,Tnr,Mnr,gW,Enr,Cnr,wnr,mT,Anr,lo,ky,Lnr,Y2e,ynr,xnr,Qa,$nr,K2e,knr,Snr,Z2e,Rnr,Pnr,ebe,Bnr,Nnr,Inr,obe,gT,rbe,qnr,jnr,hW,Dnr,Gnr,Onr,hT,Vnr,tbe,Xnr,znr,abe,Qnr,Wnr,pT,IXe,Td,_T,nbe,Sy,Hnr,sbe,Unr,qXe,Oo,Ry,Jnr,Md,Ynr,pW,Knr,Znr,_W,esr,osr,rsr,Py,tsr,lbe,asr,nsr,ssr,vt,By,lsr,ibe,isr,dsr,Ed,csr,dbe,fsr,msr,uW,gsr,hsr,psr,uT,_sr,io,Ny,usr,cbe,bsr,vsr,Wa,Fsr,fbe,Tsr,Msr,mbe,Esr,Csr,gbe,wsr,Asr,Lsr,ve,bT,hbe,ysr,xsr,bW,$sr,ksr,Ssr,vT,pbe,Rsr,Psr,vW,Bsr,Nsr,Isr,FT,_be,qsr,jsr,FW,Dsr,Gsr,Osr,TT,ube,Vsr,Xsr,TW,zsr,Qsr,Wsr,Us,bbe,Hsr,Usr,MW,Jsr,Ysr,EW,Ksr,Zsr,elr,MT,vbe,olr,rlr,CW,tlr,alr,nlr,Js,Fbe,slr,llr,wW,ilr,dlr,AW,clr,flr,mlr,ET,Tbe,glr,hlr,LW,plr,_lr,ulr,Ft,Mbe,blr,vlr,yW,Flr,Tlr,xW,Mlr,Elr,$W,Clr,wlr,Alr,CT,Ebe,Llr,ylr,kW,xlr,$lr,klr,wT,Cbe,Slr,Rlr,SW,Plr,Blr,Nlr,AT,wbe,Ilr,qlr,RW,jlr,Dlr,Glr,LT,Abe,Olr,Vlr,PW,Xlr,zlr,Qlr,yT,Lbe,Wlr,Hlr,BW,Ulr,Jlr,Ylr,xT,ybe,Klr,Zlr,NW,eir,oir,rir,$T,xbe,tir,air,IW,nir,sir,lir,kT,iir,$be,dir,cir,kbe,fir,mir,ST,jXe,Cd,RT,Sbe,Iy,gir,Rbe,hir,DXe,Vo,qy,pir,wd,_ir,qW,uir,bir,jW,vir,Fir,Tir,jy,Mir,Pbe,Eir,Cir,wir,Tt,Dy,Air,Bbe,Lir,yir,Ad,xir,Nbe,$ir,kir,DW,Sir,Rir,Pir,PT,Bir,co,Gy,Nir,Ibe,Iir,qir,Ha,jir,qbe,Dir,Gir,jbe,Oir,Vir,Dbe,Xir,zir,Qir,Gbe,BT,Obe,Wir,Hir,GW,Uir,Jir,Yir,NT,Kir,Vbe,Zir,edr,Xbe,odr,rdr,IT,GXe,Ld,qT,zbe,Oy,tdr,Qbe,adr,OXe,Xo,Vy,ndr,yd,sdr,OW,ldr,idr,VW,ddr,cdr,fdr,Xy,mdr,Wbe,gdr,hdr,pdr,Mt,zy,_dr,Hbe,udr,bdr,xd,vdr,Ube,Fdr,Tdr,XW,Mdr,Edr,Cdr,jT,wdr,fo,Qy,Adr,Jbe,Ldr,ydr,Ua,xdr,Ybe,$dr,kdr,Kbe,Sdr,Rdr,Zbe,Pdr,Bdr,Ndr,eve,DT,ove,Idr,qdr,zW,jdr,Ddr,Gdr,GT,Odr,rve,Vdr,Xdr,tve,zdr,Qdr,OT,VXe,$d,VT,ave,Wy,Wdr,nve,Hdr,XXe,zo,Hy,Udr,kd,Jdr,QW,Ydr,Kdr,WW,Zdr,ecr,ocr,Uy,rcr,sve,tcr,acr,ncr,Et,Jy,scr,lve,lcr,icr,Sd,dcr,ive,ccr,fcr,HW,mcr,gcr,hcr,XT,pcr,mo,Yy,_cr,dve,ucr,bcr,Ja,vcr,cve,Fcr,Tcr,fve,Mcr,Ecr,mve,Ccr,wcr,Acr,Pe,zT,gve,Lcr,ycr,UW,xcr,$cr,kcr,QT,hve,Scr,Rcr,JW,Pcr,Bcr,Ncr,WT,pve,Icr,qcr,YW,jcr,Dcr,Gcr,HT,_ve,Ocr,Vcr,KW,Xcr,zcr,Qcr,UT,uve,Wcr,Hcr,ZW,Ucr,Jcr,Ycr,JT,bve,Kcr,Zcr,eH,efr,ofr,rfr,YT,vve,tfr,afr,oH,nfr,sfr,lfr,KT,Fve,ifr,dfr,rH,cfr,ffr,mfr,ZT,Tve,gfr,hfr,tH,pfr,_fr,ufr,e8,bfr,Mve,vfr,Ffr,Eve,Tfr,Mfr,o8,zXe,Rd,r8,Cve,Ky,Efr,wve,Cfr,QXe,Qo,Zy,wfr,Pd,Afr,aH,Lfr,yfr,nH,xfr,$fr,kfr,e9,Sfr,Ave,Rfr,Pfr,Bfr,Ct,o9,Nfr,Lve,Ifr,qfr,Bd,jfr,yve,Dfr,Gfr,sH,Ofr,Vfr,Xfr,t8,zfr,go,r9,Qfr,xve,Wfr,Hfr,Ya,Ufr,$ve,Jfr,Yfr,kve,Kfr,Zfr,Sve,emr,omr,rmr,rt,a8,Rve,tmr,amr,lH,nmr,smr,lmr,n8,Pve,imr,dmr,iH,cmr,fmr,mmr,s8,Bve,gmr,hmr,dH,pmr,_mr,umr,l8,Nve,bmr,vmr,cH,Fmr,Tmr,Mmr,i8,Ive,Emr,Cmr,fH,wmr,Amr,Lmr,d8,ymr,qve,xmr,$mr,jve,kmr,Smr,c8,WXe,Nd,f8,Dve,t9,Rmr,Gve,Pmr,HXe,Wo,a9,Bmr,Id,Nmr,mH,Imr,qmr,gH,jmr,Dmr,Gmr,n9,Omr,Ove,Vmr,Xmr,zmr,wt,s9,Qmr,Vve,Wmr,Hmr,qd,Umr,Xve,Jmr,Ymr,hH,Kmr,Zmr,egr,m8,ogr,ho,l9,rgr,zve,tgr,agr,Ka,ngr,Qve,sgr,lgr,Wve,igr,dgr,Hve,cgr,fgr,mgr,Le,g8,Uve,ggr,hgr,pH,pgr,_gr,ugr,h8,Jve,bgr,vgr,_H,Fgr,Tgr,Mgr,p8,Yve,Egr,Cgr,uH,wgr,Agr,Lgr,_8,Kve,ygr,xgr,bH,$gr,kgr,Sgr,u8,Zve,Rgr,Pgr,vH,Bgr,Ngr,Igr,b8,eFe,qgr,jgr,FH,Dgr,Ggr,Ogr,v8,oFe,Vgr,Xgr,TH,zgr,Qgr,Wgr,F8,rFe,Hgr,Ugr,MH,Jgr,Ygr,Kgr,T8,tFe,Zgr,ehr,EH,ohr,rhr,thr,M8,aFe,ahr,nhr,CH,shr,lhr,ihr,E8,dhr,nFe,chr,fhr,sFe,mhr,ghr,C8,UXe,jd,w8,lFe,i9,hhr,iFe,phr,JXe,Ho,d9,_hr,Dd,uhr,wH,bhr,vhr,AH,Fhr,Thr,Mhr,c9,Ehr,dFe,Chr,whr,Ahr,At,f9,Lhr,cFe,yhr,xhr,Gd,$hr,fFe,khr,Shr,LH,Rhr,Phr,Bhr,A8,Nhr,po,m9,Ihr,mFe,qhr,jhr,Za,Dhr,gFe,Ghr,Ohr,hFe,Vhr,Xhr,pFe,zhr,Qhr,Whr,g9,L8,_Fe,Hhr,Uhr,yH,Jhr,Yhr,Khr,y8,uFe,Zhr,epr,xH,opr,rpr,tpr,x8,apr,bFe,npr,spr,vFe,lpr,ipr,$8,YXe,Od,k8,FFe,h9,dpr,TFe,cpr,KXe,Uo,p9,fpr,Vd,mpr,$H,gpr,hpr,kH,ppr,_pr,upr,_9,bpr,MFe,vpr,Fpr,Tpr,Lt,u9,Mpr,EFe,Epr,Cpr,Xd,wpr,CFe,Apr,Lpr,SH,ypr,xpr,$pr,S8,kpr,_o,b9,Spr,wFe,Rpr,Ppr,en,Bpr,AFe,Npr,Ipr,LFe,qpr,jpr,yFe,Dpr,Gpr,Opr,tt,R8,xFe,Vpr,Xpr,RH,zpr,Qpr,Wpr,P8,$Fe,Hpr,Upr,PH,Jpr,Ypr,Kpr,B8,kFe,Zpr,e_r,BH,o_r,r_r,t_r,N8,SFe,a_r,n_r,NH,s_r,l_r,i_r,I8,RFe,d_r,c_r,IH,f_r,m_r,g_r,q8,h_r,PFe,p_r,__r,BFe,u_r,b_r,j8,ZXe,zd,D8,NFe,v9,v_r,IFe,F_r,eze,Jo,F9,T_r,Qd,M_r,qH,E_r,C_r,jH,w_r,A_r,L_r,T9,y_r,qFe,x_r,$_r,k_r,yt,M9,S_r,jFe,R_r,P_r,Wd,B_r,DFe,N_r,I_r,DH,q_r,j_r,D_r,G8,G_r,uo,E9,O_r,GFe,V_r,X_r,on,z_r,OFe,Q_r,W_r,VFe,H_r,U_r,XFe,J_r,Y_r,K_r,Hd,O8,zFe,Z_r,eur,GH,our,rur,tur,V8,QFe,aur,nur,OH,sur,lur,iur,X8,WFe,dur,cur,VH,fur,mur,gur,z8,hur,HFe,pur,_ur,UFe,uur,bur,Q8,oze,Ud,W8,JFe,C9,vur,YFe,Fur,rze,Yo,w9,Tur,Jd,Mur,XH,Eur,Cur,zH,wur,Aur,Lur,A9,yur,KFe,xur,$ur,kur,xt,L9,Sur,ZFe,Rur,Pur,Yd,Bur,e6e,Nur,Iur,QH,qur,jur,Dur,H8,Gur,bo,y9,Our,o6e,Vur,Xur,rn,zur,r6e,Qur,Wur,t6e,Hur,Uur,a6e,Jur,Yur,Kur,x9,U8,n6e,Zur,e1r,WH,o1r,r1r,t1r,J8,s6e,a1r,n1r,HH,s1r,l1r,i1r,Y8,d1r,l6e,c1r,f1r,i6e,m1r,g1r,K8,tze,Kd,Z8,d6e,$9,h1r,c6e,p1r,aze,Ko,k9,_1r,Zd,u1r,UH,b1r,v1r,JH,F1r,T1r,M1r,S9,E1r,f6e,C1r,w1r,A1r,$t,R9,L1r,m6e,y1r,x1r,ec,$1r,g6e,k1r,S1r,YH,R1r,P1r,B1r,eM,N1r,vo,P9,I1r,h6e,q1r,j1r,tn,D1r,p6e,G1r,O1r,_6e,V1r,X1r,u6e,z1r,Q1r,W1r,b6e,oM,v6e,H1r,U1r,KH,J1r,Y1r,K1r,rM,Z1r,F6e,e2r,o2r,T6e,r2r,t2r,tM,nze,oc,aM,M6e,B9,a2r,E6e,n2r,sze,Zo,N9,s2r,rc,l2r,ZH,i2r,d2r,eU,c2r,f2r,m2r,I9,g2r,C6e,h2r,p2r,_2r,kt,q9,u2r,w6e,b2r,v2r,tc,F2r,A6e,T2r,M2r,oU,E2r,C2r,w2r,nM,A2r,Fo,j9,L2r,L6e,y2r,x2r,an,$2r,y6e,k2r,S2r,x6e,R2r,P2r,$6e,B2r,N2r,I2r,at,sM,k6e,q2r,j2r,rU,D2r,G2r,O2r,lM,S6e,V2r,X2r,tU,z2r,Q2r,W2r,iM,R6e,H2r,U2r,aU,J2r,Y2r,K2r,dM,P6e,Z2r,ebr,nU,obr,rbr,tbr,cM,B6e,abr,nbr,sU,sbr,lbr,ibr,fM,dbr,N6e,cbr,fbr,I6e,mbr,gbr,mM,lze,ac,gM,q6e,D9,hbr,j6e,pbr,ize,er,G9,_br,nc,ubr,lU,bbr,vbr,iU,Fbr,Tbr,Mbr,O9,Ebr,D6e,Cbr,wbr,Abr,St,V9,Lbr,G6e,ybr,xbr,sc,$br,O6e,kbr,Sbr,dU,Rbr,Pbr,Bbr,hM,Nbr,To,X9,Ibr,V6e,qbr,jbr,nn,Dbr,X6e,Gbr,Obr,z6e,Vbr,Xbr,Q6e,zbr,Qbr,Wbr,W6e,pM,H6e,Hbr,Ubr,cU,Jbr,Ybr,Kbr,_M,Zbr,U6e,evr,ovr,J6e,rvr,tvr,uM,dze,lc,bM,Y6e,z9,avr,K6e,nvr,cze,or,Q9,svr,ic,lvr,fU,ivr,dvr,mU,cvr,fvr,mvr,W9,gvr,Z6e,hvr,pvr,_vr,Rt,H9,uvr,eTe,bvr,vvr,dc,Fvr,oTe,Tvr,Mvr,gU,Evr,Cvr,wvr,vM,Avr,xr,U9,Lvr,rTe,yvr,xvr,sn,$vr,tTe,kvr,Svr,aTe,Rvr,Pvr,nTe,Bvr,Nvr,Ivr,q,FM,sTe,qvr,jvr,hU,Dvr,Gvr,Ovr,TM,lTe,Vvr,Xvr,pU,zvr,Qvr,Wvr,MM,iTe,Hvr,Uvr,_U,Jvr,Yvr,Kvr,EM,dTe,Zvr,eFr,uU,oFr,rFr,tFr,CM,cTe,aFr,nFr,bU,sFr,lFr,iFr,wM,fTe,dFr,cFr,vU,fFr,mFr,gFr,AM,mTe,hFr,pFr,FU,_Fr,uFr,bFr,LM,gTe,vFr,FFr,TU,TFr,MFr,EFr,yM,hTe,CFr,wFr,MU,AFr,LFr,yFr,xM,pTe,xFr,$Fr,EU,kFr,SFr,RFr,$M,_Te,PFr,BFr,CU,NFr,IFr,qFr,kM,uTe,jFr,DFr,wU,GFr,OFr,VFr,SM,bTe,XFr,zFr,AU,QFr,WFr,HFr,RM,vTe,UFr,JFr,LU,YFr,KFr,ZFr,PM,FTe,e6r,o6r,yU,r6r,t6r,a6r,BM,TTe,n6r,s6r,xU,l6r,i6r,d6r,NM,MTe,c6r,f6r,$U,m6r,g6r,h6r,IM,ETe,p6r,_6r,kU,u6r,b6r,v6r,Ys,CTe,F6r,T6r,SU,M6r,E6r,RU,C6r,w6r,A6r,qM,wTe,L6r,y6r,PU,x6r,$6r,k6r,jM,ATe,S6r,R6r,BU,P6r,B6r,N6r,DM,LTe,I6r,q6r,NU,j6r,D6r,G6r,GM,yTe,O6r,V6r,IU,X6r,z6r,Q6r,OM,xTe,W6r,H6r,qU,U6r,J6r,Y6r,VM,$Te,K6r,Z6r,jU,eTr,oTr,rTr,XM,kTe,tTr,aTr,DU,nTr,sTr,lTr,zM,STe,iTr,dTr,GU,cTr,fTr,mTr,QM,RTe,gTr,hTr,OU,pTr,_Tr,uTr,WM,PTe,bTr,vTr,VU,FTr,TTr,MTr,HM,BTe,ETr,CTr,XU,wTr,ATr,LTr,UM,NTe,yTr,xTr,zU,$Tr,kTr,STr,JM,ITe,RTr,PTr,QU,BTr,NTr,ITr,YM,qTe,qTr,jTr,WU,DTr,GTr,OTr,KM,jTe,VTr,XTr,HU,zTr,QTr,WTr,ZM,DTe,HTr,UTr,UU,JTr,YTr,KTr,e4,GTe,ZTr,e8r,JU,o8r,r8r,t8r,o4,OTe,a8r,n8r,YU,s8r,l8r,i8r,r4,VTe,d8r,c8r,KU,f8r,m8r,g8r,t4,XTe,h8r,p8r,ZU,_8r,u8r,b8r,a4,zTe,v8r,F8r,eJ,T8r,M8r,E8r,n4,QTe,C8r,w8r,oJ,A8r,L8r,y8r,s4,WTe,x8r,$8r,rJ,k8r,S8r,R8r,l4,HTe,P8r,B8r,tJ,N8r,I8r,q8r,i4,UTe,j8r,D8r,aJ,G8r,O8r,V8r,d4,JTe,X8r,z8r,nJ,Q8r,W8r,H8r,c4,YTe,U8r,J8r,sJ,Y8r,K8r,Z8r,f4,KTe,eMr,oMr,lJ,rMr,tMr,aMr,m4,ZTe,nMr,sMr,iJ,lMr,iMr,dMr,g4,e8e,cMr,fMr,dJ,mMr,gMr,hMr,h4,o8e,pMr,_Mr,cJ,uMr,bMr,vMr,p4,fze,cc,_4,r8e,J9,FMr,t8e,TMr,mze,rr,Y9,MMr,fc,EMr,fJ,CMr,wMr,mJ,AMr,LMr,yMr,K9,xMr,a8e,$Mr,kMr,SMr,Pt,Z9,RMr,n8e,PMr,BMr,mc,NMr,s8e,IMr,qMr,gJ,jMr,DMr,GMr,u4,OMr,$r,ex,VMr,l8e,XMr,zMr,ln,QMr,i8e,WMr,HMr,d8e,UMr,JMr,c8e,YMr,KMr,ZMr,se,b4,f8e,e4r,o4r,hJ,r4r,t4r,a4r,v4,m8e,n4r,s4r,pJ,l4r,i4r,d4r,F4,g8e,c4r,f4r,_J,m4r,g4r,h4r,T4,h8e,p4r,_4r,uJ,u4r,b4r,v4r,M4,p8e,F4r,T4r,bJ,M4r,E4r,C4r,E4,_8e,w4r,A4r,vJ,L4r,y4r,x4r,C4,u8e,$4r,k4r,FJ,S4r,R4r,P4r,w4,b8e,B4r,N4r,TJ,I4r,q4r,j4r,A4,v8e,D4r,G4r,MJ,O4r,V4r,X4r,L4,F8e,z4r,Q4r,EJ,W4r,H4r,U4r,y4,T8e,J4r,Y4r,CJ,K4r,Z4r,eEr,x4,M8e,oEr,rEr,wJ,tEr,aEr,nEr,$4,E8e,sEr,lEr,AJ,iEr,dEr,cEr,k4,C8e,fEr,mEr,LJ,gEr,hEr,pEr,S4,w8e,_Er,uEr,yJ,bEr,vEr,FEr,R4,A8e,TEr,MEr,xJ,EEr,CEr,wEr,P4,L8e,AEr,LEr,$J,yEr,xEr,$Er,B4,y8e,kEr,SEr,kJ,REr,PEr,BEr,N4,x8e,NEr,IEr,SJ,qEr,jEr,DEr,I4,$8e,GEr,OEr,RJ,VEr,XEr,zEr,q4,k8e,QEr,WEr,PJ,HEr,UEr,JEr,j4,S8e,YEr,KEr,BJ,ZEr,eCr,oCr,D4,R8e,rCr,tCr,NJ,aCr,nCr,sCr,G4,gze,gc,O4,P8e,ox,lCr,B8e,iCr,hze,tr,rx,dCr,hc,cCr,IJ,fCr,mCr,qJ,gCr,hCr,pCr,tx,_Cr,N8e,uCr,bCr,vCr,Bt,ax,FCr,I8e,TCr,MCr,pc,ECr,q8e,CCr,wCr,jJ,ACr,LCr,yCr,V4,xCr,kr,nx,$Cr,j8e,kCr,SCr,dn,RCr,D8e,PCr,BCr,G8e,NCr,ICr,O8e,qCr,jCr,DCr,Me,X4,V8e,GCr,OCr,DJ,VCr,XCr,zCr,z4,X8e,QCr,WCr,GJ,HCr,UCr,JCr,Q4,z8e,YCr,KCr,OJ,ZCr,e3r,o3r,W4,Q8e,r3r,t3r,VJ,a3r,n3r,s3r,H4,W8e,l3r,i3r,XJ,d3r,c3r,f3r,U4,H8e,m3r,g3r,zJ,h3r,p3r,_3r,J4,U8e,u3r,b3r,QJ,v3r,F3r,T3r,Y4,J8e,M3r,E3r,WJ,C3r,w3r,A3r,K4,Y8e,L3r,y3r,HJ,x3r,$3r,k3r,Z4,K8e,S3r,R3r,UJ,P3r,B3r,N3r,eE,Z8e,I3r,q3r,JJ,j3r,D3r,G3r,oE,eMe,O3r,V3r,YJ,X3r,z3r,Q3r,rE,oMe,W3r,H3r,KJ,U3r,J3r,Y3r,tE,pze,_c,aE,rMe,sx,K3r,tMe,Z3r,_ze,ar,lx,e5r,uc,o5r,ZJ,r5r,t5r,eY,a5r,n5r,s5r,ix,l5r,aMe,i5r,d5r,c5r,Nt,dx,f5r,nMe,m5r,g5r,bc,h5r,sMe,p5r,_5r,oY,u5r,b5r,v5r,nE,F5r,Sr,cx,T5r,lMe,M5r,E5r,cn,C5r,iMe,w5r,A5r,dMe,L5r,y5r,cMe,x5r,$5r,k5r,Qe,sE,fMe,S5r,R5r,rY,P5r,B5r,N5r,lE,mMe,I5r,q5r,tY,j5r,D5r,G5r,Ks,gMe,O5r,V5r,aY,X5r,z5r,nY,Q5r,W5r,H5r,iE,hMe,U5r,J5r,sY,Y5r,K5r,Z5r,dE,pMe,e0r,o0r,lY,r0r,t0r,a0r,cE,_Me,n0r,s0r,iY,l0r,i0r,d0r,fE,uMe,c0r,f0r,dY,m0r,g0r,h0r,mE,uze,vc,gE,bMe,fx,p0r,vMe,_0r,bze,nr,mx,u0r,Fc,b0r,cY,v0r,F0r,fY,T0r,M0r,E0r,gx,C0r,FMe,w0r,A0r,L0r,It,hx,y0r,TMe,x0r,$0r,Tc,k0r,MMe,S0r,R0r,mY,P0r,B0r,N0r,hE,I0r,Rr,px,q0r,EMe,j0r,D0r,fn,G0r,CMe,O0r,V0r,wMe,X0r,z0r,AMe,Q0r,W0r,H0r,ie,pE,LMe,U0r,J0r,gY,Y0r,K0r,Z0r,_E,yMe,ewr,owr,hY,rwr,twr,awr,uE,xMe,nwr,swr,pY,lwr,iwr,dwr,bE,$Me,cwr,fwr,_Y,mwr,gwr,hwr,vE,kMe,pwr,_wr,uY,uwr,bwr,vwr,FE,SMe,Fwr,Twr,bY,Mwr,Ewr,Cwr,TE,RMe,wwr,Awr,vY,Lwr,ywr,xwr,ME,PMe,$wr,kwr,FY,Swr,Rwr,Pwr,EE,BMe,Bwr,Nwr,TY,Iwr,qwr,jwr,CE,NMe,Dwr,Gwr,MY,Owr,Vwr,Xwr,wE,IMe,zwr,Qwr,EY,Wwr,Hwr,Uwr,AE,qMe,Jwr,Ywr,CY,Kwr,Zwr,eAr,LE,jMe,oAr,rAr,wY,tAr,aAr,nAr,yE,DMe,sAr,lAr,AY,iAr,dAr,cAr,xE,GMe,fAr,mAr,LY,gAr,hAr,pAr,$E,OMe,_Ar,uAr,yY,bAr,vAr,FAr,kE,VMe,TAr,MAr,xY,EAr,CAr,wAr,SE,XMe,AAr,LAr,$Y,yAr,xAr,$Ar,RE,zMe,kAr,SAr,kY,RAr,PAr,BAr,PE,QMe,NAr,IAr,SY,qAr,jAr,DAr,BE,vze,Mc,NE,WMe,_x,GAr,HMe,OAr,Fze,sr,ux,VAr,Ec,XAr,RY,zAr,QAr,PY,WAr,HAr,UAr,bx,JAr,UMe,YAr,KAr,ZAr,qt,vx,e7r,JMe,o7r,r7r,Cc,t7r,YMe,a7r,n7r,BY,s7r,l7r,i7r,IE,d7r,Pr,Fx,c7r,KMe,f7r,m7r,mn,g7r,ZMe,h7r,p7r,e4e,_7r,u7r,o4e,b7r,v7r,F7r,ye,qE,r4e,T7r,M7r,NY,E7r,C7r,w7r,jE,t4e,A7r,L7r,IY,y7r,x7r,$7r,DE,a4e,k7r,S7r,qY,R7r,P7r,B7r,GE,n4e,N7r,I7r,jY,q7r,j7r,D7r,OE,s4e,G7r,O7r,DY,V7r,X7r,z7r,VE,l4e,Q7r,W7r,GY,H7r,U7r,J7r,XE,i4e,Y7r,K7r,OY,Z7r,eLr,oLr,zE,d4e,rLr,tLr,VY,aLr,nLr,sLr,QE,c4e,lLr,iLr,XY,dLr,cLr,fLr,WE,f4e,mLr,gLr,zY,hLr,pLr,_Lr,HE,Tze,wc,UE,m4e,Tx,uLr,g4e,bLr,Mze,lr,Mx,vLr,Ac,FLr,QY,TLr,MLr,WY,ELr,CLr,wLr,Ex,ALr,h4e,LLr,yLr,xLr,jt,Cx,$Lr,p4e,kLr,SLr,Lc,RLr,_4e,PLr,BLr,HY,NLr,ILr,qLr,JE,jLr,Br,wx,DLr,u4e,GLr,OLr,gn,VLr,b4e,XLr,zLr,v4e,QLr,WLr,F4e,HLr,ULr,JLr,te,YE,T4e,YLr,KLr,UY,ZLr,eyr,oyr,KE,M4e,ryr,tyr,JY,ayr,nyr,syr,ZE,E4e,lyr,iyr,YY,dyr,cyr,fyr,eC,C4e,myr,gyr,KY,hyr,pyr,_yr,oC,w4e,uyr,byr,ZY,vyr,Fyr,Tyr,rC,A4e,Myr,Eyr,eK,Cyr,wyr,Ayr,tC,L4e,Lyr,yyr,oK,xyr,$yr,kyr,aC,y4e,Syr,Ryr,rK,Pyr,Byr,Nyr,nC,x4e,Iyr,qyr,tK,jyr,Dyr,Gyr,sC,$4e,Oyr,Vyr,aK,Xyr,zyr,Qyr,lC,k4e,Wyr,Hyr,nK,Uyr,Jyr,Yyr,iC,S4e,Kyr,Zyr,sK,e9r,o9r,r9r,dC,R4e,t9r,a9r,lK,n9r,s9r,l9r,cC,P4e,i9r,d9r,iK,c9r,f9r,m9r,fC,B4e,g9r,h9r,dK,p9r,_9r,u9r,mC,N4e,b9r,v9r,cK,F9r,T9r,M9r,gC,I4e,E9r,C9r,fK,w9r,A9r,L9r,hC,q4e,y9r,x9r,mK,$9r,k9r,S9r,pC,j4e,R9r,P9r,gK,B9r,N9r,I9r,_C,D4e,q9r,j9r,hK,D9r,G9r,O9r,uC,G4e,V9r,X9r,pK,z9r,Q9r,W9r,bC,O4e,H9r,U9r,_K,J9r,Y9r,K9r,vC,V4e,Z9r,exr,uK,oxr,rxr,txr,FC,X4e,axr,nxr,bK,sxr,lxr,ixr,TC,z4e,dxr,cxr,vK,fxr,mxr,gxr,MC,Q4e,hxr,pxr,FK,_xr,uxr,bxr,EC,Eze,yc,CC,W4e,Ax,vxr,H4e,Fxr,Cze,ir,Lx,Txr,xc,Mxr,TK,Exr,Cxr,MK,wxr,Axr,Lxr,yx,yxr,U4e,xxr,$xr,kxr,Dt,xx,Sxr,J4e,Rxr,Pxr,$c,Bxr,Y4e,Nxr,Ixr,EK,qxr,jxr,Dxr,wC,Gxr,Nr,$x,Oxr,K4e,Vxr,Xxr,hn,zxr,Z4e,Qxr,Wxr,eEe,Hxr,Uxr,oEe,Jxr,Yxr,Kxr,_e,AC,rEe,Zxr,e$r,CK,o$r,r$r,t$r,LC,tEe,a$r,n$r,wK,s$r,l$r,i$r,yC,aEe,d$r,c$r,AK,f$r,m$r,g$r,xC,nEe,h$r,p$r,LK,_$r,u$r,b$r,$C,sEe,v$r,F$r,yK,T$r,M$r,E$r,kC,lEe,C$r,w$r,xK,A$r,L$r,y$r,SC,iEe,x$r,$$r,$K,k$r,S$r,R$r,RC,dEe,P$r,B$r,kK,N$r,I$r,q$r,PC,cEe,j$r,D$r,SK,G$r,O$r,V$r,BC,fEe,X$r,z$r,RK,Q$r,W$r,H$r,NC,mEe,U$r,J$r,PK,Y$r,K$r,Z$r,IC,gEe,ekr,okr,BK,rkr,tkr,akr,qC,hEe,nkr,skr,NK,lkr,ikr,dkr,jC,pEe,ckr,fkr,IK,mkr,gkr,hkr,DC,_Ee,pkr,_kr,qK,ukr,bkr,vkr,GC,uEe,Fkr,Tkr,jK,Mkr,Ekr,Ckr,OC,bEe,wkr,Akr,DK,Lkr,ykr,xkr,VC,wze,kc,XC,vEe,kx,$kr,FEe,kkr,Aze,dr,Sx,Skr,Sc,Rkr,GK,Pkr,Bkr,OK,Nkr,Ikr,qkr,Rx,jkr,TEe,Dkr,Gkr,Okr,Gt,Px,Vkr,MEe,Xkr,zkr,Rc,Qkr,EEe,Wkr,Hkr,VK,Ukr,Jkr,Ykr,zC,Kkr,Ir,Bx,Zkr,CEe,eSr,oSr,pn,rSr,wEe,tSr,aSr,AEe,nSr,sSr,LEe,lSr,iSr,dSr,Nx,QC,yEe,cSr,fSr,XK,mSr,gSr,hSr,WC,xEe,pSr,_Sr,zK,uSr,bSr,vSr,HC,Lze,Pc,UC,$Ee,Ix,FSr,kEe,TSr,yze,cr,qx,MSr,Bc,ESr,QK,CSr,wSr,WK,ASr,LSr,ySr,jx,xSr,SEe,$Sr,kSr,SSr,Ot,Dx,RSr,REe,PSr,BSr,Nc,NSr,PEe,ISr,qSr,HK,jSr,DSr,GSr,JC,OSr,qr,Gx,VSr,BEe,XSr,zSr,_n,QSr,NEe,WSr,HSr,IEe,USr,JSr,qEe,YSr,KSr,ZSr,jEe,YC,DEe,eRr,oRr,UK,rRr,tRr,aRr,KC,xze,Ic,ZC,GEe,Ox,nRr,OEe,sRr,$ze,fr,Vx,lRr,qc,iRr,JK,dRr,cRr,YK,fRr,mRr,gRr,Xx,hRr,VEe,pRr,_Rr,uRr,Vt,zx,bRr,XEe,vRr,FRr,jc,TRr,zEe,MRr,ERr,KK,CRr,wRr,ARr,e3,LRr,jr,Qx,yRr,QEe,xRr,$Rr,un,kRr,WEe,SRr,RRr,HEe,PRr,BRr,UEe,NRr,IRr,qRr,de,o3,JEe,jRr,DRr,ZK,GRr,ORr,VRr,r3,YEe,XRr,zRr,eZ,QRr,WRr,HRr,t3,KEe,URr,JRr,oZ,YRr,KRr,ZRr,a3,ZEe,ePr,oPr,rZ,rPr,tPr,aPr,n3,eCe,nPr,sPr,tZ,lPr,iPr,dPr,s3,oCe,cPr,fPr,aZ,mPr,gPr,hPr,l3,rCe,pPr,_Pr,nZ,uPr,bPr,vPr,i3,tCe,FPr,TPr,sZ,MPr,EPr,CPr,d3,aCe,wPr,APr,lZ,LPr,yPr,xPr,c3,nCe,$Pr,kPr,iZ,SPr,RPr,PPr,f3,sCe,BPr,NPr,dZ,IPr,qPr,jPr,m3,lCe,DPr,GPr,cZ,OPr,VPr,XPr,g3,iCe,zPr,QPr,fZ,WPr,HPr,UPr,h3,dCe,JPr,YPr,mZ,KPr,ZPr,eBr,p3,cCe,oBr,rBr,gZ,tBr,aBr,nBr,_3,fCe,sBr,lBr,hZ,iBr,dBr,cBr,u3,mCe,fBr,mBr,pZ,gBr,hBr,pBr,b3,gCe,_Br,uBr,_Z,bBr,vBr,FBr,v3,hCe,TBr,MBr,uZ,EBr,CBr,wBr,F3,pCe,ABr,LBr,bZ,yBr,xBr,$Br,T3,kze,Dc,M3,_Ce,Wx,kBr,uCe,SBr,Sze,mr,Hx,RBr,Gc,PBr,vZ,BBr,NBr,FZ,IBr,qBr,jBr,Ux,DBr,bCe,GBr,OBr,VBr,Xt,Jx,XBr,vCe,zBr,QBr,Oc,WBr,FCe,HBr,UBr,TZ,JBr,YBr,KBr,E3,ZBr,Dr,Yx,eNr,TCe,oNr,rNr,bn,tNr,MCe,aNr,nNr,ECe,sNr,lNr,CCe,iNr,dNr,cNr,ce,C3,wCe,fNr,mNr,MZ,gNr,hNr,pNr,w3,ACe,_Nr,uNr,EZ,bNr,vNr,FNr,A3,LCe,TNr,MNr,CZ,ENr,CNr,wNr,L3,yCe,ANr,LNr,wZ,yNr,xNr,$Nr,y3,xCe,kNr,SNr,AZ,RNr,PNr,BNr,x3,$Ce,NNr,INr,LZ,qNr,jNr,DNr,$3,kCe,GNr,ONr,yZ,VNr,XNr,zNr,k3,SCe,QNr,WNr,xZ,HNr,UNr,JNr,S3,RCe,YNr,KNr,$Z,ZNr,eIr,oIr,R3,PCe,rIr,tIr,kZ,aIr,nIr,sIr,P3,BCe,lIr,iIr,SZ,dIr,cIr,fIr,B3,NCe,mIr,gIr,RZ,hIr,pIr,_Ir,N3,ICe,uIr,bIr,PZ,vIr,FIr,TIr,I3,qCe,MIr,EIr,BZ,CIr,wIr,AIr,q3,jCe,LIr,yIr,NZ,xIr,$Ir,kIr,j3,DCe,SIr,RIr,IZ,PIr,BIr,NIr,D3,GCe,IIr,qIr,qZ,jIr,DIr,GIr,G3,OCe,OIr,VIr,jZ,XIr,zIr,QIr,O3,VCe,WIr,HIr,DZ,UIr,JIr,YIr,V3,XCe,KIr,ZIr,GZ,eqr,oqr,rqr,X3,Rze,Vc,z3,zCe,Kx,tqr,QCe,aqr,Pze,gr,Zx,nqr,Xc,sqr,OZ,lqr,iqr,VZ,dqr,cqr,fqr,e$,mqr,WCe,gqr,hqr,pqr,zt,o$,_qr,HCe,uqr,bqr,zc,vqr,UCe,Fqr,Tqr,XZ,Mqr,Eqr,Cqr,Q3,wqr,Gr,r$,Aqr,JCe,Lqr,yqr,vn,xqr,YCe,$qr,kqr,KCe,Sqr,Rqr,ZCe,Pqr,Bqr,Nqr,e3e,W3,o3e,Iqr,qqr,zZ,jqr,Dqr,Gqr,H3,Bze,Qc,U3,r3e,t$,Oqr,t3e,Vqr,Nze,hr,a$,Xqr,Wc,zqr,QZ,Qqr,Wqr,WZ,Hqr,Uqr,Jqr,n$,Yqr,a3e,Kqr,Zqr,ejr,Qt,s$,ojr,n3e,rjr,tjr,Hc,ajr,s3e,njr,sjr,HZ,ljr,ijr,djr,J3,cjr,Or,l$,fjr,l3e,mjr,gjr,Fn,hjr,i3e,pjr,_jr,d3e,ujr,bjr,c3e,vjr,Fjr,Tjr,f3e,Y3,m3e,Mjr,Ejr,UZ,Cjr,wjr,Ajr,K3,Ize,Uc,Z3,g3e,i$,Ljr,h3e,yjr,qze,pr,d$,xjr,Jc,$jr,JZ,kjr,Sjr,YZ,Rjr,Pjr,Bjr,c$,Njr,p3e,Ijr,qjr,jjr,Wt,f$,Djr,_3e,Gjr,Ojr,Yc,Vjr,u3e,Xjr,zjr,KZ,Qjr,Wjr,Hjr,e5,Ujr,Vr,m$,Jjr,b3e,Yjr,Kjr,Tn,Zjr,v3e,eDr,oDr,F3e,rDr,tDr,T3e,aDr,nDr,sDr,oe,o5,M3e,lDr,iDr,ZZ,dDr,cDr,fDr,r5,E3e,mDr,gDr,eee,hDr,pDr,_Dr,t5,C3e,uDr,bDr,oee,vDr,FDr,TDr,a5,w3e,MDr,EDr,ree,CDr,wDr,ADr,n5,A3e,LDr,yDr,tee,xDr,$Dr,kDr,s5,L3e,SDr,RDr,aee,PDr,BDr,NDr,l5,y3e,IDr,qDr,nee,jDr,DDr,GDr,i5,x3e,ODr,VDr,see,XDr,zDr,QDr,d5,$3e,WDr,HDr,lee,UDr,JDr,YDr,c5,k3e,KDr,ZDr,iee,eGr,oGr,rGr,f5,S3e,tGr,aGr,dee,nGr,sGr,lGr,m5,R3e,iGr,dGr,cee,cGr,fGr,mGr,g5,P3e,gGr,hGr,fee,pGr,_Gr,uGr,h5,B3e,bGr,vGr,mee,FGr,TGr,MGr,p5,N3e,EGr,CGr,gee,wGr,AGr,LGr,_5,I3e,yGr,xGr,hee,$Gr,kGr,SGr,u5,q3e,RGr,PGr,pee,BGr,NGr,IGr,b5,j3e,qGr,jGr,_ee,DGr,GGr,OGr,v5,D3e,VGr,XGr,uee,zGr,QGr,WGr,F5,G3e,HGr,UGr,bee,JGr,YGr,KGr,T5,O3e,ZGr,eOr,vee,oOr,rOr,tOr,M5,V3e,aOr,nOr,Fee,sOr,lOr,iOr,E5,X3e,dOr,cOr,Tee,fOr,mOr,gOr,C5,z3e,hOr,pOr,Mee,_Or,uOr,bOr,w5,Q3e,vOr,FOr,Eee,TOr,MOr,EOr,A5,W3e,COr,wOr,Cee,AOr,LOr,yOr,L5,H3e,xOr,$Or,wee,kOr,SOr,ROr,y5,jze,Kc,x5,U3e,g$,POr,J3e,BOr,Dze,_r,h$,NOr,Zc,IOr,Aee,qOr,jOr,Lee,DOr,GOr,OOr,p$,VOr,Y3e,XOr,zOr,QOr,Ht,_$,WOr,K3e,HOr,UOr,ef,JOr,Z3e,YOr,KOr,yee,ZOr,eVr,oVr,$5,rVr,Xr,u$,tVr,e5e,aVr,nVr,Mn,sVr,o5e,lVr,iVr,r5e,dVr,cVr,t5e,fVr,mVr,gVr,xe,k5,a5e,hVr,pVr,xee,_Vr,uVr,bVr,S5,n5e,vVr,FVr,$ee,TVr,MVr,EVr,R5,s5e,CVr,wVr,kee,AVr,LVr,yVr,P5,l5e,xVr,$Vr,See,kVr,SVr,RVr,B5,i5e,PVr,BVr,Ree,NVr,IVr,qVr,N5,d5e,jVr,DVr,Pee,GVr,OVr,VVr,I5,c5e,XVr,zVr,Bee,QVr,WVr,HVr,q5,f5e,UVr,JVr,Nee,YVr,KVr,ZVr,j5,m5e,eXr,oXr,Iee,rXr,tXr,aXr,D5,g5e,nXr,sXr,qee,lXr,iXr,dXr,G5,Gze,of,O5,h5e,b$,cXr,p5e,fXr,Oze,ur,v$,mXr,rf,gXr,jee,hXr,pXr,Dee,_Xr,uXr,bXr,F$,vXr,_5e,FXr,TXr,MXr,Ut,T$,EXr,u5e,CXr,wXr,tf,AXr,b5e,LXr,yXr,Gee,xXr,$Xr,kXr,V5,SXr,zr,M$,RXr,v5e,PXr,BXr,En,NXr,F5e,IXr,qXr,T5e,jXr,DXr,M5e,GXr,OXr,VXr,Ee,X5,E5e,XXr,zXr,Oee,QXr,WXr,HXr,z5,C5e,UXr,JXr,Vee,YXr,KXr,ZXr,Q5,w5e,ezr,ozr,Xee,rzr,tzr,azr,W5,A5e,nzr,szr,zee,lzr,izr,dzr,H5,L5e,czr,fzr,Qee,mzr,gzr,hzr,U5,y5e,pzr,_zr,Wee,uzr,bzr,vzr,J5,x5e,Fzr,Tzr,Hee,Mzr,Ezr,Czr,Y5,$5e,wzr,Azr,Uee,Lzr,yzr,xzr,K5,k5e,$zr,kzr,Jee,Szr,Rzr,Pzr,Z5,S5e,Bzr,Nzr,Yee,Izr,qzr,jzr,e0,R5e,Dzr,Gzr,Kee,Ozr,Vzr,Xzr,o0,P5e,zzr,Qzr,Zee,Wzr,Hzr,Uzr,r0,B5e,Jzr,Yzr,eoe,Kzr,Zzr,eQr,t0,Vze,af,a0,N5e,E$,oQr,I5e,rQr,Xze,br,C$,tQr,nf,aQr,ooe,nQr,sQr,roe,lQr,iQr,dQr,w$,cQr,q5e,fQr,mQr,gQr,Jt,A$,hQr,j5e,pQr,_Qr,sf,uQr,D5e,bQr,vQr,toe,FQr,TQr,MQr,n0,EQr,Qr,L$,CQr,G5e,wQr,AQr,Cn,LQr,O5e,yQr,xQr,V5e,$Qr,kQr,X5e,SQr,RQr,PQr,$e,s0,z5e,BQr,NQr,aoe,IQr,qQr,jQr,l0,Q5e,DQr,GQr,noe,OQr,VQr,XQr,i0,W5e,zQr,QQr,soe,WQr,HQr,UQr,d0,H5e,JQr,YQr,loe,KQr,ZQr,eWr,c0,U5e,oWr,rWr,ioe,tWr,aWr,nWr,f0,J5e,sWr,lWr,doe,iWr,dWr,cWr,m0,Y5e,fWr,mWr,coe,gWr,hWr,pWr,g0,K5e,_Wr,uWr,foe,bWr,vWr,FWr,h0,Z5e,TWr,MWr,moe,EWr,CWr,wWr,p0,e0e,AWr,LWr,goe,yWr,xWr,$Wr,_0,zze,lf,u0,o0e,y$,kWr,r0e,SWr,Qze,vr,x$,RWr,df,PWr,hoe,BWr,NWr,poe,IWr,qWr,jWr,$$,DWr,t0e,GWr,OWr,VWr,Yt,k$,XWr,a0e,zWr,QWr,cf,WWr,n0e,HWr,UWr,_oe,JWr,YWr,KWr,b0,ZWr,Wr,S$,eHr,s0e,oHr,rHr,wn,tHr,l0e,aHr,nHr,i0e,sHr,lHr,d0e,iHr,dHr,cHr,ke,v0,c0e,fHr,mHr,uoe,gHr,hHr,pHr,F0,f0e,_Hr,uHr,boe,bHr,vHr,FHr,T0,m0e,THr,MHr,voe,EHr,CHr,wHr,M0,g0e,AHr,LHr,Foe,yHr,xHr,$Hr,E0,h0e,kHr,SHr,Toe,RHr,PHr,BHr,C0,p0e,NHr,IHr,Moe,qHr,jHr,DHr,w0,_0e,GHr,OHr,Eoe,VHr,XHr,zHr,A0,u0e,QHr,WHr,Coe,HHr,UHr,JHr,L0,b0e,YHr,KHr,woe,ZHr,eUr,oUr,y0,v0e,rUr,tUr,Aoe,aUr,nUr,sUr,x0,Wze,ff,$0,F0e,R$,lUr,T0e,iUr,Hze,Fr,P$,dUr,mf,cUr,Loe,fUr,mUr,yoe,gUr,hUr,pUr,B$,_Ur,M0e,uUr,bUr,vUr,Kt,N$,FUr,E0e,TUr,MUr,gf,EUr,C0e,CUr,wUr,xoe,AUr,LUr,yUr,k0,xUr,Hr,I$,$Ur,w0e,kUr,SUr,An,RUr,A0e,PUr,BUr,L0e,NUr,IUr,y0e,qUr,jUr,DUr,Se,S0,x0e,GUr,OUr,$oe,VUr,XUr,zUr,R0,$0e,QUr,WUr,koe,HUr,UUr,JUr,P0,k0e,YUr,KUr,Soe,ZUr,eJr,oJr,B0,S0e,rJr,tJr,Roe,aJr,nJr,sJr,N0,R0e,lJr,iJr,Poe,dJr,cJr,fJr,I0,P0e,mJr,gJr,Boe,hJr,pJr,_Jr,q0,B0e,uJr,bJr,Noe,vJr,FJr,TJr,j0,N0e,MJr,EJr,Ioe,CJr,wJr,AJr,D0,I0e,LJr,yJr,qoe,xJr,$Jr,kJr,G0,q0e,SJr,RJr,joe,PJr,BJr,NJr,O0,Uze,hf,V0,j0e,q$,IJr,D0e,qJr,Jze,Tr,j$,jJr,pf,DJr,Doe,GJr,OJr,Goe,VJr,XJr,zJr,D$,QJr,G0e,WJr,HJr,UJr,Zt,G$,JJr,O0e,YJr,KJr,_f,ZJr,V0e,eYr,oYr,Ooe,rYr,tYr,aYr,X0,nYr,Ur,O$,sYr,X0e,lYr,iYr,Ln,dYr,z0e,cYr,fYr,Q0e,mYr,gYr,W0e,hYr,pYr,_Yr,Re,z0,H0e,uYr,bYr,Voe,vYr,FYr,TYr,Q0,U0e,MYr,EYr,Xoe,CYr,wYr,AYr,W0,J0e,LYr,yYr,zoe,xYr,$Yr,kYr,H0,Y0e,SYr,RYr,Qoe,PYr,BYr,NYr,U0,K0e,IYr,qYr,Woe,jYr,DYr,GYr,J0,Z0e,OYr,VYr,Hoe,XYr,zYr,QYr,Y0,ewe,WYr,HYr,Uoe,UYr,JYr,YYr,K0,owe,KYr,ZYr,Joe,eKr,oKr,rKr,Z0,rwe,tKr,aKr,Yoe,nKr,sKr,lKr,ew,twe,iKr,dKr,Koe,cKr,fKr,mKr,ow,Yze,uf,rw,awe,V$,gKr,nwe,hKr,Kze,Mr,X$,pKr,bf,_Kr,Zoe,uKr,bKr,ere,vKr,FKr,TKr,z$,MKr,swe,EKr,CKr,wKr,ea,Q$,AKr,lwe,LKr,yKr,vf,xKr,iwe,$Kr,kKr,ore,SKr,RKr,PKr,tw,BKr,Jr,W$,NKr,dwe,IKr,qKr,yn,jKr,cwe,DKr,GKr,fwe,OKr,VKr,mwe,XKr,zKr,QKr,Ve,aw,gwe,WKr,HKr,rre,UKr,JKr,YKr,nw,hwe,KKr,ZKr,tre,eZr,oZr,rZr,sw,pwe,tZr,aZr,are,nZr,sZr,lZr,lw,_we,iZr,dZr,nre,cZr,fZr,mZr,iw,uwe,gZr,hZr,sre,pZr,_Zr,uZr,dw,bwe,bZr,vZr,lre,FZr,TZr,MZr,cw,vwe,EZr,CZr,ire,wZr,AZr,LZr,fw,Fwe,yZr,xZr,dre,$Zr,kZr,SZr,mw,Zze,Ff,gw,Twe,H$,RZr,Mwe,PZr,eQe,Er,U$,BZr,Tf,NZr,cre,IZr,qZr,fre,jZr,DZr,GZr,J$,OZr,Ewe,VZr,XZr,zZr,oa,Y$,QZr,Cwe,WZr,HZr,Mf,UZr,wwe,JZr,YZr,mre,KZr,ZZr,eet,hw,oet,Yr,K$,ret,Awe,tet,aet,xn,net,Lwe,set,iet,ywe,det,cet,xwe,fet,met,get,Xe,pw,$we,het,pet,gre,_et,uet,bet,_w,kwe,vet,Fet,hre,Tet,Met,Eet,uw,Swe,Cet,wet,pre,Aet,Let,yet,bw,Rwe,xet,$et,_re,ket,Set,Ret,vw,Pwe,Pet,Bet,ure,Net,Iet,qet,Fw,Bwe,jet,Det,bre,Get,Oet,Vet,Tw,Nwe,Xet,zet,vre,Qet,Wet,Het,Mw,Iwe,Uet,Jet,Fre,Yet,Ket,Zet,Ew,oQe,Ef,Cw,qwe,Z$,eot,jwe,oot,rQe,Cr,ek,rot,Cf,tot,Tre,aot,not,Mre,sot,lot,iot,ok,dot,Dwe,cot,fot,mot,ra,rk,got,Gwe,hot,pot,wf,_ot,Owe,uot,bot,Ere,vot,Fot,Tot,ww,Mot,Kr,tk,Eot,Vwe,Cot,wot,$n,Aot,Xwe,Lot,yot,zwe,xot,$ot,Qwe,kot,Sot,Rot,Wwe,Aw,Hwe,Pot,Bot,Cre,Not,Iot,qot,Lw,tQe,Af,yw,Uwe,ak,jot,Jwe,Dot,aQe,wr,nk,Got,Lf,Oot,wre,Vot,Xot,Are,zot,Qot,Wot,sk,Hot,Ywe,Uot,Jot,Yot,ta,lk,Kot,Kwe,Zot,ert,yf,ort,Zwe,rrt,trt,Lre,art,nrt,srt,xw,lrt,Zr,ik,irt,eAe,drt,crt,kn,frt,oAe,mrt,grt,rAe,hrt,prt,tAe,_rt,urt,brt,dk,$w,aAe,vrt,Frt,yre,Trt,Mrt,Ert,kw,nAe,Crt,wrt,xre,Art,Lrt,yrt,Sw,nQe,xf,Rw,sAe,ck,xrt,lAe,$rt,sQe,Ar,fk,krt,$f,Srt,$re,Rrt,Prt,kre,Brt,Nrt,Irt,mk,qrt,iAe,jrt,Drt,Grt,aa,gk,Ort,dAe,Vrt,Xrt,kf,zrt,cAe,Qrt,Wrt,Sre,Hrt,Urt,Jrt,Pw,Yrt,et,hk,Krt,fAe,Zrt,ett,Sn,ott,mAe,rtt,ttt,gAe,att,ntt,hAe,stt,ltt,itt,pAe,Bw,_Ae,dtt,ctt,Rre,ftt,mtt,gtt,Nw,lQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),nL=new re({}),sL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new htt({props:{warning:!0,$$slots:{default:[JQt]},$$scope:{ctx:$}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/configuration_auto.py#L611"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/configuration_auto.py#L634"}}),Kg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/configuration_auto.py#L757"}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/tokenization_auto.py#L410"}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18126/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/tokenization_auto.py#L424"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/tokenization_auto.py#L623"}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18126/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),up=new htt({props:{$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),bp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),CL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/processing_auto.py#L89"}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new htt({props:{$$slots:{default:[oWt]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/processing_auto.py#L256"}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L782"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Wu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),NL=new re({}),IL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L789"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),Uu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),O1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L804"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),X1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),S2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L811"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),P2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L818"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L827"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L872"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L879"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L865"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L836"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L843"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L888"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L927"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L854"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L934"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),o8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L957"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),t8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L941"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L948"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),A8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),$8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L966"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),S8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),j8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L973"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),G8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L920"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),$9=new re({}),k9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L895"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),B9=new re({}),N9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L902"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_auto.py#L911"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18126/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),Ix=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),ck=new re({}),fk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18126/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18126/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Bf=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),oL=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),rL=o("AutoConfig"),Bn=o(", "),Nn=a("a"),tL=o("AutoModel"),Si=o(`, and
`),In=a("a"),aL=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),IS=o("will create a model that is an instance of "),Pi=a("a"),qS=o("BertModel"),jS=o("."),wo=l(),Ra=a("p"),DS=o("There is one class of "),qf=a("code"),GS=o("AutoModel"),uHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rXe=l(),Bi=a("h2"),jf=a("a"),yae=a("span"),F(nL.$$.fragment),bHe=l(),xae=a("span"),vHe=o("Extending the Auto Classes"),tXe=l(),qn=a("p"),FHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ae=a("code"),THe=o("NewModel"),MHe=o(", make sure you have a "),kae=a("code"),EHe=o("NewModelConfig"),CHe=o(` then you can add those to the auto
classes like this:`),aXe=l(),F(sL.$$.fragment),nXe=l(),OS=a("p"),wHe=o("You will then be able to use the auto classes like you would usually do!"),sXe=l(),F(Df.$$.fragment),lXe=l(),Ni=a("h2"),Gf=a("a"),Sae=a("span"),F(lL.$$.fragment),AHe=l(),Rae=a("span"),LHe=o("AutoConfig"),iXe=l(),Ao=a("div"),F(iL.$$.fragment),yHe=l(),dL=a("p"),xHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),VS=a("a"),$He=o("from_pretrained()"),kHe=o(" class method."),SHe=l(),cL=a("p"),RHe=o("This class cannot be instantiated directly using "),Pae=a("code"),PHe=o("__init__()"),BHe=o(" (throws an error)."),NHe=l(),Lr=a("div"),F(fL.$$.fragment),IHe=l(),Bae=a("p"),qHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jHe=l(),Ii=a("p"),DHe=o("The configuration class to instantiate is selected based on the "),Nae=a("code"),GHe=o("model_type"),OHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Iae=a("code"),VHe=o("pretrained_model_name_or_path"),XHe=o(":"),zHe=l(),A=a("ul"),Of=a("li"),qae=a("strong"),QHe=o("albert"),WHe=o(" \u2014 "),XS=a("a"),HHe=o("AlbertConfig"),UHe=o(" (ALBERT model)"),JHe=l(),Vf=a("li"),jae=a("strong"),YHe=o("bart"),KHe=o(" \u2014 "),zS=a("a"),ZHe=o("BartConfig"),eUe=o(" (BART model)"),oUe=l(),Xf=a("li"),Dae=a("strong"),rUe=o("beit"),tUe=o(" \u2014 "),QS=a("a"),aUe=o("BeitConfig"),nUe=o(" (BEiT model)"),sUe=l(),zf=a("li"),Gae=a("strong"),lUe=o("bert"),iUe=o(" \u2014 "),WS=a("a"),dUe=o("BertConfig"),cUe=o(" (BERT model)"),fUe=l(),Qf=a("li"),Oae=a("strong"),mUe=o("bert-generation"),gUe=o(" \u2014 "),HS=a("a"),hUe=o("BertGenerationConfig"),pUe=o(" (Bert Generation model)"),_Ue=l(),Wf=a("li"),Vae=a("strong"),uUe=o("big_bird"),bUe=o(" \u2014 "),US=a("a"),vUe=o("BigBirdConfig"),FUe=o(" (BigBird model)"),TUe=l(),Hf=a("li"),Xae=a("strong"),MUe=o("bigbird_pegasus"),EUe=o(" \u2014 "),JS=a("a"),CUe=o("BigBirdPegasusConfig"),wUe=o(" (BigBird-Pegasus model)"),AUe=l(),Uf=a("li"),zae=a("strong"),LUe=o("blenderbot"),yUe=o(" \u2014 "),YS=a("a"),xUe=o("BlenderbotConfig"),$Ue=o(" (Blenderbot model)"),kUe=l(),Jf=a("li"),Qae=a("strong"),SUe=o("blenderbot-small"),RUe=o(" \u2014 "),KS=a("a"),PUe=o("BlenderbotSmallConfig"),BUe=o(" (BlenderbotSmall model)"),NUe=l(),Yf=a("li"),Wae=a("strong"),IUe=o("bloom"),qUe=o(" \u2014 "),ZS=a("a"),jUe=o("BloomConfig"),DUe=o(" (BLOOM model)"),GUe=l(),Kf=a("li"),Hae=a("strong"),OUe=o("camembert"),VUe=o(" \u2014 "),eR=a("a"),XUe=o("CamembertConfig"),zUe=o(" (CamemBERT model)"),QUe=l(),Zf=a("li"),Uae=a("strong"),WUe=o("canine"),HUe=o(" \u2014 "),oR=a("a"),UUe=o("CanineConfig"),JUe=o(" (CANINE model)"),YUe=l(),em=a("li"),Jae=a("strong"),KUe=o("clip"),ZUe=o(" \u2014 "),rR=a("a"),eJe=o("CLIPConfig"),oJe=o(" (CLIP model)"),rJe=l(),om=a("li"),Yae=a("strong"),tJe=o("codegen"),aJe=o(" \u2014 "),tR=a("a"),nJe=o("CodeGenConfig"),sJe=o(" (CodeGen model)"),lJe=l(),rm=a("li"),Kae=a("strong"),iJe=o("convbert"),dJe=o(" \u2014 "),aR=a("a"),cJe=o("ConvBertConfig"),fJe=o(" (ConvBERT model)"),mJe=l(),tm=a("li"),Zae=a("strong"),gJe=o("convnext"),hJe=o(" \u2014 "),nR=a("a"),pJe=o("ConvNextConfig"),_Je=o(" (ConvNeXT model)"),uJe=l(),am=a("li"),ene=a("strong"),bJe=o("ctrl"),vJe=o(" \u2014 "),sR=a("a"),FJe=o("CTRLConfig"),TJe=o(" (CTRL model)"),MJe=l(),nm=a("li"),one=a("strong"),EJe=o("cvt"),CJe=o(" \u2014 "),lR=a("a"),wJe=o("CvtConfig"),AJe=o(" (CvT model)"),LJe=l(),sm=a("li"),rne=a("strong"),yJe=o("data2vec-audio"),xJe=o(" \u2014 "),iR=a("a"),$Je=o("Data2VecAudioConfig"),kJe=o(" (Data2VecAudio model)"),SJe=l(),lm=a("li"),tne=a("strong"),RJe=o("data2vec-text"),PJe=o(" \u2014 "),dR=a("a"),BJe=o("Data2VecTextConfig"),NJe=o(" (Data2VecText model)"),IJe=l(),im=a("li"),ane=a("strong"),qJe=o("data2vec-vision"),jJe=o(" \u2014 "),cR=a("a"),DJe=o("Data2VecVisionConfig"),GJe=o(" (Data2VecVision model)"),OJe=l(),dm=a("li"),nne=a("strong"),VJe=o("deberta"),XJe=o(" \u2014 "),fR=a("a"),zJe=o("DebertaConfig"),QJe=o(" (DeBERTa model)"),WJe=l(),cm=a("li"),sne=a("strong"),HJe=o("deberta-v2"),UJe=o(" \u2014 "),mR=a("a"),JJe=o("DebertaV2Config"),YJe=o(" (DeBERTa-v2 model)"),KJe=l(),fm=a("li"),lne=a("strong"),ZJe=o("decision_transformer"),eYe=o(" \u2014 "),gR=a("a"),oYe=o("DecisionTransformerConfig"),rYe=o(" (Decision Transformer model)"),tYe=l(),mm=a("li"),ine=a("strong"),aYe=o("deit"),nYe=o(" \u2014 "),hR=a("a"),sYe=o("DeiTConfig"),lYe=o(" (DeiT model)"),iYe=l(),gm=a("li"),dne=a("strong"),dYe=o("detr"),cYe=o(" \u2014 "),pR=a("a"),fYe=o("DetrConfig"),mYe=o(" (DETR model)"),gYe=l(),hm=a("li"),cne=a("strong"),hYe=o("distilbert"),pYe=o(" \u2014 "),_R=a("a"),_Ye=o("DistilBertConfig"),uYe=o(" (DistilBERT model)"),bYe=l(),pm=a("li"),fne=a("strong"),vYe=o("dpr"),FYe=o(" \u2014 "),uR=a("a"),TYe=o("DPRConfig"),MYe=o(" (DPR model)"),EYe=l(),_m=a("li"),mne=a("strong"),CYe=o("dpt"),wYe=o(" \u2014 "),bR=a("a"),AYe=o("DPTConfig"),LYe=o(" (DPT model)"),yYe=l(),um=a("li"),gne=a("strong"),xYe=o("electra"),$Ye=o(" \u2014 "),vR=a("a"),kYe=o("ElectraConfig"),SYe=o(" (ELECTRA model)"),RYe=l(),bm=a("li"),hne=a("strong"),PYe=o("encoder-decoder"),BYe=o(" \u2014 "),FR=a("a"),NYe=o("EncoderDecoderConfig"),IYe=o(" (Encoder decoder model)"),qYe=l(),vm=a("li"),pne=a("strong"),jYe=o("flaubert"),DYe=o(" \u2014 "),TR=a("a"),GYe=o("FlaubertConfig"),OYe=o(" (FlauBERT model)"),VYe=l(),Fm=a("li"),_ne=a("strong"),XYe=o("flava"),zYe=o(" \u2014 "),MR=a("a"),QYe=o("FlavaConfig"),WYe=o(" (FLAVA model)"),HYe=l(),Tm=a("li"),une=a("strong"),UYe=o("fnet"),JYe=o(" \u2014 "),ER=a("a"),YYe=o("FNetConfig"),KYe=o(" (FNet model)"),ZYe=l(),Mm=a("li"),bne=a("strong"),eKe=o("fsmt"),oKe=o(" \u2014 "),CR=a("a"),rKe=o("FSMTConfig"),tKe=o(" (FairSeq Machine-Translation model)"),aKe=l(),Em=a("li"),vne=a("strong"),nKe=o("funnel"),sKe=o(" \u2014 "),wR=a("a"),lKe=o("FunnelConfig"),iKe=o(" (Funnel Transformer model)"),dKe=l(),Cm=a("li"),Fne=a("strong"),cKe=o("glpn"),fKe=o(" \u2014 "),AR=a("a"),mKe=o("GLPNConfig"),gKe=o(" (GLPN model)"),hKe=l(),wm=a("li"),Tne=a("strong"),pKe=o("gpt2"),_Ke=o(" \u2014 "),LR=a("a"),uKe=o("GPT2Config"),bKe=o(" (OpenAI GPT-2 model)"),vKe=l(),Am=a("li"),Mne=a("strong"),FKe=o("gpt_neo"),TKe=o(" \u2014 "),yR=a("a"),MKe=o("GPTNeoConfig"),EKe=o(" (GPT Neo model)"),CKe=l(),Lm=a("li"),Ene=a("strong"),wKe=o("gpt_neox"),AKe=o(" \u2014 "),xR=a("a"),LKe=o("GPTNeoXConfig"),yKe=o(" (GPT NeoX model)"),xKe=l(),ym=a("li"),Cne=a("strong"),$Ke=o("gptj"),kKe=o(" \u2014 "),$R=a("a"),SKe=o("GPTJConfig"),RKe=o(" (GPT-J model)"),PKe=l(),xm=a("li"),wne=a("strong"),BKe=o("groupvit"),NKe=o(" \u2014 "),kR=a("a"),IKe=o("GroupViTConfig"),qKe=o(" (GroupViT model)"),jKe=l(),$m=a("li"),Ane=a("strong"),DKe=o("hubert"),GKe=o(" \u2014 "),SR=a("a"),OKe=o("HubertConfig"),VKe=o(" (Hubert model)"),XKe=l(),km=a("li"),Lne=a("strong"),zKe=o("ibert"),QKe=o(" \u2014 "),RR=a("a"),WKe=o("IBertConfig"),HKe=o(" (I-BERT model)"),UKe=l(),Sm=a("li"),yne=a("strong"),JKe=o("imagegpt"),YKe=o(" \u2014 "),PR=a("a"),KKe=o("ImageGPTConfig"),ZKe=o(" (ImageGPT model)"),eZe=l(),Rm=a("li"),xne=a("strong"),oZe=o("layoutlm"),rZe=o(" \u2014 "),BR=a("a"),tZe=o("LayoutLMConfig"),aZe=o(" (LayoutLM model)"),nZe=l(),Pm=a("li"),$ne=a("strong"),sZe=o("layoutlmv2"),lZe=o(" \u2014 "),NR=a("a"),iZe=o("LayoutLMv2Config"),dZe=o(" (LayoutLMv2 model)"),cZe=l(),Bm=a("li"),kne=a("strong"),fZe=o("layoutlmv3"),mZe=o(" \u2014 "),IR=a("a"),gZe=o("LayoutLMv3Config"),hZe=o(" (LayoutLMv3 model)"),pZe=l(),Nm=a("li"),Sne=a("strong"),_Ze=o("led"),uZe=o(" \u2014 "),qR=a("a"),bZe=o("LEDConfig"),vZe=o(" (LED model)"),FZe=l(),Im=a("li"),Rne=a("strong"),TZe=o("levit"),MZe=o(" \u2014 "),jR=a("a"),EZe=o("LevitConfig"),CZe=o(" (LeViT model)"),wZe=l(),qm=a("li"),Pne=a("strong"),AZe=o("longformer"),LZe=o(" \u2014 "),DR=a("a"),yZe=o("LongformerConfig"),xZe=o(" (Longformer model)"),$Ze=l(),jm=a("li"),Bne=a("strong"),kZe=o("longt5"),SZe=o(" \u2014 "),GR=a("a"),RZe=o("LongT5Config"),PZe=o(" (LongT5 model)"),BZe=l(),Dm=a("li"),Nne=a("strong"),NZe=o("luke"),IZe=o(" \u2014 "),OR=a("a"),qZe=o("LukeConfig"),jZe=o(" (LUKE model)"),DZe=l(),Gm=a("li"),Ine=a("strong"),GZe=o("lxmert"),OZe=o(" \u2014 "),VR=a("a"),VZe=o("LxmertConfig"),XZe=o(" (LXMERT model)"),zZe=l(),Om=a("li"),qne=a("strong"),QZe=o("m2m_100"),WZe=o(" \u2014 "),XR=a("a"),HZe=o("M2M100Config"),UZe=o(" (M2M100 model)"),JZe=l(),Vm=a("li"),jne=a("strong"),YZe=o("marian"),KZe=o(" \u2014 "),zR=a("a"),ZZe=o("MarianConfig"),eeo=o(" (Marian model)"),oeo=l(),Xm=a("li"),Dne=a("strong"),reo=o("maskformer"),teo=o(" \u2014 "),QR=a("a"),aeo=o("MaskFormerConfig"),neo=o(" (MaskFormer model)"),seo=l(),zm=a("li"),Gne=a("strong"),leo=o("mbart"),ieo=o(" \u2014 "),WR=a("a"),deo=o("MBartConfig"),ceo=o(" (mBART model)"),feo=l(),Qm=a("li"),One=a("strong"),meo=o("mctct"),geo=o(" \u2014 "),HR=a("a"),heo=o("MCTCTConfig"),peo=o(" (M-CTC-T model)"),_eo=l(),Wm=a("li"),Vne=a("strong"),ueo=o("megatron-bert"),beo=o(" \u2014 "),UR=a("a"),veo=o("MegatronBertConfig"),Feo=o(" (Megatron-BERT model)"),Teo=l(),Hm=a("li"),Xne=a("strong"),Meo=o("mobilebert"),Eeo=o(" \u2014 "),JR=a("a"),Ceo=o("MobileBertConfig"),weo=o(" (MobileBERT model)"),Aeo=l(),Um=a("li"),zne=a("strong"),Leo=o("mobilevit"),yeo=o(" \u2014 "),YR=a("a"),xeo=o("MobileViTConfig"),$eo=o(" (MobileViT model)"),keo=l(),Jm=a("li"),Qne=a("strong"),Seo=o("mpnet"),Reo=o(" \u2014 "),KR=a("a"),Peo=o("MPNetConfig"),Beo=o(" (MPNet model)"),Neo=l(),Ym=a("li"),Wne=a("strong"),Ieo=o("mt5"),qeo=o(" \u2014 "),ZR=a("a"),jeo=o("MT5Config"),Deo=o(" (MT5 model)"),Geo=l(),Km=a("li"),Hne=a("strong"),Oeo=o("mvp"),Veo=o(" \u2014 "),eP=a("a"),Xeo=o("MvpConfig"),zeo=o(" (MVP model)"),Qeo=l(),Zm=a("li"),Une=a("strong"),Weo=o("nezha"),Heo=o(" \u2014 "),oP=a("a"),Ueo=o("NezhaConfig"),Jeo=o(" (Nezha model)"),Yeo=l(),eg=a("li"),Jne=a("strong"),Keo=o("nystromformer"),Zeo=o(" \u2014 "),rP=a("a"),eoo=o("NystromformerConfig"),ooo=o(" (Nystr\xF6mformer model)"),roo=l(),og=a("li"),Yne=a("strong"),too=o("openai-gpt"),aoo=o(" \u2014 "),tP=a("a"),noo=o("OpenAIGPTConfig"),soo=o(" (OpenAI GPT model)"),loo=l(),rg=a("li"),Kne=a("strong"),ioo=o("opt"),doo=o(" \u2014 "),aP=a("a"),coo=o("OPTConfig"),foo=o(" (OPT model)"),moo=l(),tg=a("li"),Zne=a("strong"),goo=o("pegasus"),hoo=o(" \u2014 "),nP=a("a"),poo=o("PegasusConfig"),_oo=o(" (Pegasus model)"),uoo=l(),ag=a("li"),ese=a("strong"),boo=o("perceiver"),voo=o(" \u2014 "),sP=a("a"),Foo=o("PerceiverConfig"),Too=o(" (Perceiver model)"),Moo=l(),ng=a("li"),ose=a("strong"),Eoo=o("plbart"),Coo=o(" \u2014 "),lP=a("a"),woo=o("PLBartConfig"),Aoo=o(" (PLBart model)"),Loo=l(),sg=a("li"),rse=a("strong"),yoo=o("poolformer"),xoo=o(" \u2014 "),iP=a("a"),$oo=o("PoolFormerConfig"),koo=o(" (PoolFormer model)"),Soo=l(),lg=a("li"),tse=a("strong"),Roo=o("prophetnet"),Poo=o(" \u2014 "),dP=a("a"),Boo=o("ProphetNetConfig"),Noo=o(" (ProphetNet model)"),Ioo=l(),ig=a("li"),ase=a("strong"),qoo=o("qdqbert"),joo=o(" \u2014 "),cP=a("a"),Doo=o("QDQBertConfig"),Goo=o(" (QDQBert model)"),Ooo=l(),dg=a("li"),nse=a("strong"),Voo=o("rag"),Xoo=o(" \u2014 "),fP=a("a"),zoo=o("RagConfig"),Qoo=o(" (RAG model)"),Woo=l(),cg=a("li"),sse=a("strong"),Hoo=o("realm"),Uoo=o(" \u2014 "),mP=a("a"),Joo=o("RealmConfig"),Yoo=o(" (REALM model)"),Koo=l(),fg=a("li"),lse=a("strong"),Zoo=o("reformer"),ero=o(" \u2014 "),gP=a("a"),oro=o("ReformerConfig"),rro=o(" (Reformer model)"),tro=l(),mg=a("li"),ise=a("strong"),aro=o("regnet"),nro=o(" \u2014 "),hP=a("a"),sro=o("RegNetConfig"),lro=o(" (RegNet model)"),iro=l(),gg=a("li"),dse=a("strong"),dro=o("rembert"),cro=o(" \u2014 "),pP=a("a"),fro=o("RemBertConfig"),mro=o(" (RemBERT model)"),gro=l(),hg=a("li"),cse=a("strong"),hro=o("resnet"),pro=o(" \u2014 "),_P=a("a"),_ro=o("ResNetConfig"),uro=o(" (ResNet model)"),bro=l(),pg=a("li"),fse=a("strong"),vro=o("retribert"),Fro=o(" \u2014 "),uP=a("a"),Tro=o("RetriBertConfig"),Mro=o(" (RetriBERT model)"),Ero=l(),_g=a("li"),mse=a("strong"),Cro=o("roberta"),wro=o(" \u2014 "),bP=a("a"),Aro=o("RobertaConfig"),Lro=o(" (RoBERTa model)"),yro=l(),ug=a("li"),gse=a("strong"),xro=o("roformer"),$ro=o(" \u2014 "),vP=a("a"),kro=o("RoFormerConfig"),Sro=o(" (RoFormer model)"),Rro=l(),bg=a("li"),hse=a("strong"),Pro=o("segformer"),Bro=o(" \u2014 "),FP=a("a"),Nro=o("SegformerConfig"),Iro=o(" (SegFormer model)"),qro=l(),vg=a("li"),pse=a("strong"),jro=o("sew"),Dro=o(" \u2014 "),TP=a("a"),Gro=o("SEWConfig"),Oro=o(" (SEW model)"),Vro=l(),Fg=a("li"),_se=a("strong"),Xro=o("sew-d"),zro=o(" \u2014 "),MP=a("a"),Qro=o("SEWDConfig"),Wro=o(" (SEW-D model)"),Hro=l(),Tg=a("li"),use=a("strong"),Uro=o("speech-encoder-decoder"),Jro=o(" \u2014 "),EP=a("a"),Yro=o("SpeechEncoderDecoderConfig"),Kro=o(" (Speech Encoder decoder model)"),Zro=l(),Mg=a("li"),bse=a("strong"),eto=o("speech_to_text"),oto=o(" \u2014 "),CP=a("a"),rto=o("Speech2TextConfig"),tto=o(" (Speech2Text model)"),ato=l(),Eg=a("li"),vse=a("strong"),nto=o("speech_to_text_2"),sto=o(" \u2014 "),wP=a("a"),lto=o("Speech2Text2Config"),ito=o(" (Speech2Text2 model)"),dto=l(),Cg=a("li"),Fse=a("strong"),cto=o("splinter"),fto=o(" \u2014 "),AP=a("a"),mto=o("SplinterConfig"),gto=o(" (Splinter model)"),hto=l(),wg=a("li"),Tse=a("strong"),pto=o("squeezebert"),_to=o(" \u2014 "),LP=a("a"),uto=o("SqueezeBertConfig"),bto=o(" (SqueezeBERT model)"),vto=l(),Ag=a("li"),Mse=a("strong"),Fto=o("swin"),Tto=o(" \u2014 "),yP=a("a"),Mto=o("SwinConfig"),Eto=o(" (Swin Transformer model)"),Cto=l(),Lg=a("li"),Ese=a("strong"),wto=o("t5"),Ato=o(" \u2014 "),xP=a("a"),Lto=o("T5Config"),yto=o(" (T5 model)"),xto=l(),yg=a("li"),Cse=a("strong"),$to=o("tapas"),kto=o(" \u2014 "),$P=a("a"),Sto=o("TapasConfig"),Rto=o(" (TAPAS model)"),Pto=l(),xg=a("li"),wse=a("strong"),Bto=o("trajectory_transformer"),Nto=o(" \u2014 "),kP=a("a"),Ito=o("TrajectoryTransformerConfig"),qto=o(" (Trajectory Transformer model)"),jto=l(),$g=a("li"),Ase=a("strong"),Dto=o("transfo-xl"),Gto=o(" \u2014 "),SP=a("a"),Oto=o("TransfoXLConfig"),Vto=o(" (Transformer-XL model)"),Xto=l(),kg=a("li"),Lse=a("strong"),zto=o("trocr"),Qto=o(" \u2014 "),RP=a("a"),Wto=o("TrOCRConfig"),Hto=o(" (TrOCR model)"),Uto=l(),Sg=a("li"),yse=a("strong"),Jto=o("unispeech"),Yto=o(" \u2014 "),PP=a("a"),Kto=o("UniSpeechConfig"),Zto=o(" (UniSpeech model)"),eao=l(),Rg=a("li"),xse=a("strong"),oao=o("unispeech-sat"),rao=o(" \u2014 "),BP=a("a"),tao=o("UniSpeechSatConfig"),aao=o(" (UniSpeechSat model)"),nao=l(),Pg=a("li"),$se=a("strong"),sao=o("van"),lao=o(" \u2014 "),NP=a("a"),iao=o("VanConfig"),dao=o(" (VAN model)"),cao=l(),Bg=a("li"),kse=a("strong"),fao=o("vilt"),mao=o(" \u2014 "),IP=a("a"),gao=o("ViltConfig"),hao=o(" (ViLT model)"),pao=l(),Ng=a("li"),Sse=a("strong"),_ao=o("vision-encoder-decoder"),uao=o(" \u2014 "),qP=a("a"),bao=o("VisionEncoderDecoderConfig"),vao=o(" (Vision Encoder decoder model)"),Fao=l(),Ig=a("li"),Rse=a("strong"),Tao=o("vision-text-dual-encoder"),Mao=o(" \u2014 "),jP=a("a"),Eao=o("VisionTextDualEncoderConfig"),Cao=o(" (VisionTextDualEncoder model)"),wao=l(),qg=a("li"),Pse=a("strong"),Aao=o("visual_bert"),Lao=o(" \u2014 "),DP=a("a"),yao=o("VisualBertConfig"),xao=o(" (VisualBERT model)"),$ao=l(),jg=a("li"),Bse=a("strong"),kao=o("vit"),Sao=o(" \u2014 "),GP=a("a"),Rao=o("ViTConfig"),Pao=o(" (ViT model)"),Bao=l(),Dg=a("li"),Nse=a("strong"),Nao=o("vit_mae"),Iao=o(" \u2014 "),OP=a("a"),qao=o("ViTMAEConfig"),jao=o(" (ViTMAE model)"),Dao=l(),Gg=a("li"),Ise=a("strong"),Gao=o("wav2vec2"),Oao=o(" \u2014 "),VP=a("a"),Vao=o("Wav2Vec2Config"),Xao=o(" (Wav2Vec2 model)"),zao=l(),Og=a("li"),qse=a("strong"),Qao=o("wav2vec2-conformer"),Wao=o(" \u2014 "),XP=a("a"),Hao=o("Wav2Vec2ConformerConfig"),Uao=o(" (Wav2Vec2-Conformer model)"),Jao=l(),Vg=a("li"),jse=a("strong"),Yao=o("wavlm"),Kao=o(" \u2014 "),zP=a("a"),Zao=o("WavLMConfig"),eno=o(" (WavLM model)"),ono=l(),Xg=a("li"),Dse=a("strong"),rno=o("xglm"),tno=o(" \u2014 "),QP=a("a"),ano=o("XGLMConfig"),nno=o(" (XGLM model)"),sno=l(),zg=a("li"),Gse=a("strong"),lno=o("xlm"),ino=o(" \u2014 "),WP=a("a"),dno=o("XLMConfig"),cno=o(" (XLM model)"),fno=l(),Qg=a("li"),Ose=a("strong"),mno=o("xlm-prophetnet"),gno=o(" \u2014 "),HP=a("a"),hno=o("XLMProphetNetConfig"),pno=o(" (XLM-ProphetNet model)"),_no=l(),Wg=a("li"),Vse=a("strong"),uno=o("xlm-roberta"),bno=o(" \u2014 "),UP=a("a"),vno=o("XLMRobertaConfig"),Fno=o(" (XLM-RoBERTa model)"),Tno=l(),Hg=a("li"),Xse=a("strong"),Mno=o("xlm-roberta-xl"),Eno=o(" \u2014 "),JP=a("a"),Cno=o("XLMRobertaXLConfig"),wno=o(" (XLM-RoBERTa-XL model)"),Ano=l(),Ug=a("li"),zse=a("strong"),Lno=o("xlnet"),yno=o(" \u2014 "),YP=a("a"),xno=o("XLNetConfig"),$no=o(" (XLNet model)"),kno=l(),Jg=a("li"),Qse=a("strong"),Sno=o("yolos"),Rno=o(" \u2014 "),KP=a("a"),Pno=o("YolosConfig"),Bno=o(" (YOLOS model)"),Nno=l(),Yg=a("li"),Wse=a("strong"),Ino=o("yoso"),qno=o(" \u2014 "),ZP=a("a"),jno=o("YosoConfig"),Dno=o(" (YOSO model)"),Gno=l(),F(Kg.$$.fragment),Ono=l(),Zg=a("div"),F(mL.$$.fragment),Vno=l(),Hse=a("p"),Xno=o("Register a new configuration for this class."),dXe=l(),qi=a("h2"),eh=a("a"),Use=a("span"),F(gL.$$.fragment),zno=l(),Jse=a("span"),Qno=o("AutoTokenizer"),cXe=l(),Lo=a("div"),F(hL.$$.fragment),Wno=l(),pL=a("p"),Hno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=a("a"),Uno=o("AutoTokenizer.from_pretrained()"),Jno=o(" class method."),Yno=l(),_L=a("p"),Kno=o("This class cannot be instantiated directly using "),Yse=a("code"),Zno=o("__init__()"),eso=o(" (throws an error)."),oso=l(),yr=a("div"),F(uL.$$.fragment),rso=l(),Kse=a("p"),tso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),aso=l(),Pa=a("p"),nso=o("The tokenizer class to instantiate is selected based on the "),Zse=a("code"),sso=o("model_type"),lso=o(` property of the config object (either
passed as an argument or loaded from `),ele=a("code"),iso=o("pretrained_model_name_or_path"),dso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=a("code"),cso=o("pretrained_model_name_or_path"),fso=o(":"),mso=l(),k=a("ul"),jn=a("li"),rle=a("strong"),gso=o("albert"),hso=o(" \u2014 "),oB=a("a"),pso=o("AlbertTokenizer"),_so=o(" or "),rB=a("a"),uso=o("AlbertTokenizerFast"),bso=o(" (ALBERT model)"),vso=l(),Dn=a("li"),tle=a("strong"),Fso=o("bart"),Tso=o(" \u2014 "),tB=a("a"),Mso=o("BartTokenizer"),Eso=o(" or "),aB=a("a"),Cso=o("BartTokenizerFast"),wso=o(" (BART model)"),Aso=l(),Gn=a("li"),ale=a("strong"),Lso=o("barthez"),yso=o(" \u2014 "),nB=a("a"),xso=o("BarthezTokenizer"),$so=o(" or "),sB=a("a"),kso=o("BarthezTokenizerFast"),Sso=o(" (BARThez model)"),Rso=l(),oh=a("li"),nle=a("strong"),Pso=o("bartpho"),Bso=o(" \u2014 "),lB=a("a"),Nso=o("BartphoTokenizer"),Iso=o(" (BARTpho model)"),qso=l(),On=a("li"),sle=a("strong"),jso=o("bert"),Dso=o(" \u2014 "),iB=a("a"),Gso=o("BertTokenizer"),Oso=o(" or "),dB=a("a"),Vso=o("BertTokenizerFast"),Xso=o(" (BERT model)"),zso=l(),rh=a("li"),lle=a("strong"),Qso=o("bert-generation"),Wso=o(" \u2014 "),cB=a("a"),Hso=o("BertGenerationTokenizer"),Uso=o(" (Bert Generation model)"),Jso=l(),th=a("li"),ile=a("strong"),Yso=o("bert-japanese"),Kso=o(" \u2014 "),fB=a("a"),Zso=o("BertJapaneseTokenizer"),elo=o(" (BertJapanese model)"),olo=l(),ah=a("li"),dle=a("strong"),rlo=o("bertweet"),tlo=o(" \u2014 "),mB=a("a"),alo=o("BertweetTokenizer"),nlo=o(" (BERTweet model)"),slo=l(),Vn=a("li"),cle=a("strong"),llo=o("big_bird"),ilo=o(" \u2014 "),gB=a("a"),dlo=o("BigBirdTokenizer"),clo=o(" or "),hB=a("a"),flo=o("BigBirdTokenizerFast"),mlo=o(" (BigBird model)"),glo=l(),Xn=a("li"),fle=a("strong"),hlo=o("bigbird_pegasus"),plo=o(" \u2014 "),pB=a("a"),_lo=o("PegasusTokenizer"),ulo=o(" or "),_B=a("a"),blo=o("PegasusTokenizerFast"),vlo=o(" (BigBird-Pegasus model)"),Flo=l(),zn=a("li"),mle=a("strong"),Tlo=o("blenderbot"),Mlo=o(" \u2014 "),uB=a("a"),Elo=o("BlenderbotTokenizer"),Clo=o(" or "),bB=a("a"),wlo=o("BlenderbotTokenizerFast"),Alo=o(" (Blenderbot model)"),Llo=l(),nh=a("li"),gle=a("strong"),ylo=o("blenderbot-small"),xlo=o(" \u2014 "),vB=a("a"),$lo=o("BlenderbotSmallTokenizer"),klo=o(" (BlenderbotSmall model)"),Slo=l(),sh=a("li"),hle=a("strong"),Rlo=o("bloom"),Plo=o(" \u2014 "),FB=a("a"),Blo=o("BloomTokenizerFast"),Nlo=o(" (BLOOM model)"),Ilo=l(),lh=a("li"),ple=a("strong"),qlo=o("byt5"),jlo=o(" \u2014 "),TB=a("a"),Dlo=o("ByT5Tokenizer"),Glo=o(" (ByT5 model)"),Olo=l(),Qn=a("li"),_le=a("strong"),Vlo=o("camembert"),Xlo=o(" \u2014 "),MB=a("a"),zlo=o("CamembertTokenizer"),Qlo=o(" or "),EB=a("a"),Wlo=o("CamembertTokenizerFast"),Hlo=o(" (CamemBERT model)"),Ulo=l(),ih=a("li"),ule=a("strong"),Jlo=o("canine"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("CanineTokenizer"),Zlo=o(" (CANINE model)"),eio=l(),Wn=a("li"),ble=a("strong"),oio=o("clip"),rio=o(" \u2014 "),wB=a("a"),tio=o("CLIPTokenizer"),aio=o(" or "),AB=a("a"),nio=o("CLIPTokenizerFast"),sio=o(" (CLIP model)"),lio=l(),Hn=a("li"),vle=a("strong"),iio=o("codegen"),dio=o(" \u2014 "),LB=a("a"),cio=o("CodeGenTokenizer"),fio=o(" or "),yB=a("a"),mio=o("CodeGenTokenizerFast"),gio=o(" (CodeGen model)"),hio=l(),Un=a("li"),Fle=a("strong"),pio=o("convbert"),_io=o(" \u2014 "),xB=a("a"),uio=o("ConvBertTokenizer"),bio=o(" or "),$B=a("a"),vio=o("ConvBertTokenizerFast"),Fio=o(" (ConvBERT model)"),Tio=l(),Jn=a("li"),Tle=a("strong"),Mio=o("cpm"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("CpmTokenizer"),wio=o(" or "),SB=a("a"),Aio=o("CpmTokenizerFast"),Lio=o(" (CPM model)"),yio=l(),dh=a("li"),Mle=a("strong"),xio=o("ctrl"),$io=o(" \u2014 "),RB=a("a"),kio=o("CTRLTokenizer"),Sio=o(" (CTRL model)"),Rio=l(),Yn=a("li"),Ele=a("strong"),Pio=o("data2vec-text"),Bio=o(" \u2014 "),PB=a("a"),Nio=o("RobertaTokenizer"),Iio=o(" or "),BB=a("a"),qio=o("RobertaTokenizerFast"),jio=o(" (Data2VecText model)"),Dio=l(),Kn=a("li"),Cle=a("strong"),Gio=o("deberta"),Oio=o(" \u2014 "),NB=a("a"),Vio=o("DebertaTokenizer"),Xio=o(" or "),IB=a("a"),zio=o("DebertaTokenizerFast"),Qio=o(" (DeBERTa model)"),Wio=l(),Zn=a("li"),wle=a("strong"),Hio=o("deberta-v2"),Uio=o(" \u2014 "),qB=a("a"),Jio=o("DebertaV2Tokenizer"),Yio=o(" or "),jB=a("a"),Kio=o("DebertaV2TokenizerFast"),Zio=o(" (DeBERTa-v2 model)"),edo=l(),es=a("li"),Ale=a("strong"),odo=o("distilbert"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("DistilBertTokenizer"),ado=o(" or "),GB=a("a"),ndo=o("DistilBertTokenizerFast"),sdo=o(" (DistilBERT model)"),ldo=l(),os=a("li"),Lle=a("strong"),ido=o("dpr"),ddo=o(" \u2014 "),OB=a("a"),cdo=o("DPRQuestionEncoderTokenizer"),fdo=o(" or "),VB=a("a"),mdo=o("DPRQuestionEncoderTokenizerFast"),gdo=o(" (DPR model)"),hdo=l(),rs=a("li"),yle=a("strong"),pdo=o("electra"),_do=o(" \u2014 "),XB=a("a"),udo=o("ElectraTokenizer"),bdo=o(" or "),zB=a("a"),vdo=o("ElectraTokenizerFast"),Fdo=o(" (ELECTRA model)"),Tdo=l(),ch=a("li"),xle=a("strong"),Mdo=o("flaubert"),Edo=o(" \u2014 "),QB=a("a"),Cdo=o("FlaubertTokenizer"),wdo=o(" (FlauBERT model)"),Ado=l(),ts=a("li"),$le=a("strong"),Ldo=o("fnet"),ydo=o(" \u2014 "),WB=a("a"),xdo=o("FNetTokenizer"),$do=o(" or "),HB=a("a"),kdo=o("FNetTokenizerFast"),Sdo=o(" (FNet model)"),Rdo=l(),fh=a("li"),kle=a("strong"),Pdo=o("fsmt"),Bdo=o(" \u2014 "),UB=a("a"),Ndo=o("FSMTTokenizer"),Ido=o(" (FairSeq Machine-Translation model)"),qdo=l(),as=a("li"),Sle=a("strong"),jdo=o("funnel"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("FunnelTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("FunnelTokenizerFast"),Xdo=o(" (Funnel Transformer model)"),zdo=l(),ns=a("li"),Rle=a("strong"),Qdo=o("gpt2"),Wdo=o(" \u2014 "),KB=a("a"),Hdo=o("GPT2Tokenizer"),Udo=o(" or "),ZB=a("a"),Jdo=o("GPT2TokenizerFast"),Ydo=o(" (OpenAI GPT-2 model)"),Kdo=l(),ss=a("li"),Ple=a("strong"),Zdo=o("gpt_neo"),eco=o(" \u2014 "),eN=a("a"),oco=o("GPT2Tokenizer"),rco=o(" or "),oN=a("a"),tco=o("GPT2TokenizerFast"),aco=o(" (GPT Neo model)"),nco=l(),mh=a("li"),Ble=a("strong"),sco=o("gpt_neox"),lco=o(" \u2014 "),rN=a("a"),ico=o("GPTNeoXTokenizerFast"),dco=o(" (GPT NeoX model)"),cco=l(),ls=a("li"),Nle=a("strong"),fco=o("gptj"),mco=o(" \u2014 "),tN=a("a"),gco=o("GPT2Tokenizer"),hco=o(" or "),aN=a("a"),pco=o("GPT2TokenizerFast"),_co=o(" (GPT-J model)"),uco=l(),is=a("li"),Ile=a("strong"),bco=o("groupvit"),vco=o(" \u2014 "),nN=a("a"),Fco=o("CLIPTokenizer"),Tco=o(" or "),sN=a("a"),Mco=o("CLIPTokenizerFast"),Eco=o(" (GroupViT model)"),Cco=l(),ds=a("li"),qle=a("strong"),wco=o("herbert"),Aco=o(" \u2014 "),lN=a("a"),Lco=o("HerbertTokenizer"),yco=o(" or "),iN=a("a"),xco=o("HerbertTokenizerFast"),$co=o(" (HerBERT model)"),kco=l(),gh=a("li"),jle=a("strong"),Sco=o("hubert"),Rco=o(" \u2014 "),dN=a("a"),Pco=o("Wav2Vec2CTCTokenizer"),Bco=o(" (Hubert model)"),Nco=l(),cs=a("li"),Dle=a("strong"),Ico=o("ibert"),qco=o(" \u2014 "),cN=a("a"),jco=o("RobertaTokenizer"),Dco=o(" or "),fN=a("a"),Gco=o("RobertaTokenizerFast"),Oco=o(" (I-BERT model)"),Vco=l(),fs=a("li"),Gle=a("strong"),Xco=o("layoutlm"),zco=o(" \u2014 "),mN=a("a"),Qco=o("LayoutLMTokenizer"),Wco=o(" or "),gN=a("a"),Hco=o("LayoutLMTokenizerFast"),Uco=o(" (LayoutLM model)"),Jco=l(),ms=a("li"),Ole=a("strong"),Yco=o("layoutlmv2"),Kco=o(" \u2014 "),hN=a("a"),Zco=o("LayoutLMv2Tokenizer"),efo=o(" or "),pN=a("a"),ofo=o("LayoutLMv2TokenizerFast"),rfo=o(" (LayoutLMv2 model)"),tfo=l(),gs=a("li"),Vle=a("strong"),afo=o("layoutlmv3"),nfo=o(" \u2014 "),_N=a("a"),sfo=o("LayoutLMv3Tokenizer"),lfo=o(" or "),uN=a("a"),ifo=o("LayoutLMv3TokenizerFast"),dfo=o(" (LayoutLMv3 model)"),cfo=l(),hs=a("li"),Xle=a("strong"),ffo=o("layoutxlm"),mfo=o(" \u2014 "),bN=a("a"),gfo=o("LayoutXLMTokenizer"),hfo=o(" or "),vN=a("a"),pfo=o("LayoutXLMTokenizerFast"),_fo=o(" (LayoutXLM model)"),ufo=l(),ps=a("li"),zle=a("strong"),bfo=o("led"),vfo=o(" \u2014 "),FN=a("a"),Ffo=o("LEDTokenizer"),Tfo=o(" or "),TN=a("a"),Mfo=o("LEDTokenizerFast"),Efo=o(" (LED model)"),Cfo=l(),_s=a("li"),Qle=a("strong"),wfo=o("longformer"),Afo=o(" \u2014 "),MN=a("a"),Lfo=o("LongformerTokenizer"),yfo=o(" or "),EN=a("a"),xfo=o("LongformerTokenizerFast"),$fo=o(" (Longformer model)"),kfo=l(),us=a("li"),Wle=a("strong"),Sfo=o("longt5"),Rfo=o(" \u2014 "),CN=a("a"),Pfo=o("T5Tokenizer"),Bfo=o(" or "),wN=a("a"),Nfo=o("T5TokenizerFast"),Ifo=o(" (LongT5 model)"),qfo=l(),hh=a("li"),Hle=a("strong"),jfo=o("luke"),Dfo=o(" \u2014 "),AN=a("a"),Gfo=o("LukeTokenizer"),Ofo=o(" (LUKE model)"),Vfo=l(),bs=a("li"),Ule=a("strong"),Xfo=o("lxmert"),zfo=o(" \u2014 "),LN=a("a"),Qfo=o("LxmertTokenizer"),Wfo=o(" or "),yN=a("a"),Hfo=o("LxmertTokenizerFast"),Ufo=o(" (LXMERT model)"),Jfo=l(),ph=a("li"),Jle=a("strong"),Yfo=o("m2m_100"),Kfo=o(" \u2014 "),xN=a("a"),Zfo=o("M2M100Tokenizer"),emo=o(" (M2M100 model)"),omo=l(),_h=a("li"),Yle=a("strong"),rmo=o("marian"),tmo=o(" \u2014 "),$N=a("a"),amo=o("MarianTokenizer"),nmo=o(" (Marian model)"),smo=l(),vs=a("li"),Kle=a("strong"),lmo=o("mbart"),imo=o(" \u2014 "),kN=a("a"),dmo=o("MBartTokenizer"),cmo=o(" or "),SN=a("a"),fmo=o("MBartTokenizerFast"),mmo=o(" (mBART model)"),gmo=l(),Fs=a("li"),Zle=a("strong"),hmo=o("mbart50"),pmo=o(" \u2014 "),RN=a("a"),_mo=o("MBart50Tokenizer"),umo=o(" or "),PN=a("a"),bmo=o("MBart50TokenizerFast"),vmo=o(" (mBART-50 model)"),Fmo=l(),Ts=a("li"),eie=a("strong"),Tmo=o("megatron-bert"),Mmo=o(" \u2014 "),BN=a("a"),Emo=o("BertTokenizer"),Cmo=o(" or "),NN=a("a"),wmo=o("BertTokenizerFast"),Amo=o(" (Megatron-BERT model)"),Lmo=l(),uh=a("li"),oie=a("strong"),ymo=o("mluke"),xmo=o(" \u2014 "),IN=a("a"),$mo=o("MLukeTokenizer"),kmo=o(" (mLUKE model)"),Smo=l(),Ms=a("li"),rie=a("strong"),Rmo=o("mobilebert"),Pmo=o(" \u2014 "),qN=a("a"),Bmo=o("MobileBertTokenizer"),Nmo=o(" or "),jN=a("a"),Imo=o("MobileBertTokenizerFast"),qmo=o(" (MobileBERT model)"),jmo=l(),Es=a("li"),tie=a("strong"),Dmo=o("mpnet"),Gmo=o(" \u2014 "),DN=a("a"),Omo=o("MPNetTokenizer"),Vmo=o(" or "),GN=a("a"),Xmo=o("MPNetTokenizerFast"),zmo=o(" (MPNet model)"),Qmo=l(),Cs=a("li"),aie=a("strong"),Wmo=o("mt5"),Hmo=o(" \u2014 "),ON=a("a"),Umo=o("MT5Tokenizer"),Jmo=o(" or "),VN=a("a"),Ymo=o("MT5TokenizerFast"),Kmo=o(" (MT5 model)"),Zmo=l(),ws=a("li"),nie=a("strong"),ego=o("mvp"),ogo=o(" \u2014 "),XN=a("a"),rgo=o("MvpTokenizer"),tgo=o(" or "),zN=a("a"),ago=o("MvpTokenizerFast"),ngo=o(" (MVP model)"),sgo=l(),As=a("li"),sie=a("strong"),lgo=o("nezha"),igo=o(" \u2014 "),QN=a("a"),dgo=o("BertTokenizer"),cgo=o(" or "),WN=a("a"),fgo=o("BertTokenizerFast"),mgo=o(" (Nezha model)"),ggo=l(),Ls=a("li"),lie=a("strong"),hgo=o("nllb"),pgo=o(" \u2014 "),HN=a("a"),_go=o("NllbTokenizer"),ugo=o(" or "),UN=a("a"),bgo=o("NllbTokenizerFast"),vgo=o(" (NLLB model)"),Fgo=l(),ys=a("li"),iie=a("strong"),Tgo=o("nystromformer"),Mgo=o(" \u2014 "),JN=a("a"),Ego=o("AlbertTokenizer"),Cgo=o(" or "),YN=a("a"),wgo=o("AlbertTokenizerFast"),Ago=o(" (Nystr\xF6mformer model)"),Lgo=l(),xs=a("li"),die=a("strong"),ygo=o("openai-gpt"),xgo=o(" \u2014 "),KN=a("a"),$go=o("OpenAIGPTTokenizer"),kgo=o(" or "),ZN=a("a"),Sgo=o("OpenAIGPTTokenizerFast"),Rgo=o(" (OpenAI GPT model)"),Pgo=l(),bh=a("li"),cie=a("strong"),Bgo=o("opt"),Ngo=o(" \u2014 "),eI=a("a"),Igo=o("GPT2Tokenizer"),qgo=o(" (OPT model)"),jgo=l(),$s=a("li"),fie=a("strong"),Dgo=o("pegasus"),Ggo=o(" \u2014 "),oI=a("a"),Ogo=o("PegasusTokenizer"),Vgo=o(" or "),rI=a("a"),Xgo=o("PegasusTokenizerFast"),zgo=o(" (Pegasus model)"),Qgo=l(),vh=a("li"),mie=a("strong"),Wgo=o("perceiver"),Hgo=o(" \u2014 "),tI=a("a"),Ugo=o("PerceiverTokenizer"),Jgo=o(" (Perceiver model)"),Ygo=l(),Fh=a("li"),gie=a("strong"),Kgo=o("phobert"),Zgo=o(" \u2014 "),aI=a("a"),eho=o("PhobertTokenizer"),oho=o(" (PhoBERT model)"),rho=l(),Th=a("li"),hie=a("strong"),tho=o("plbart"),aho=o(" \u2014 "),nI=a("a"),nho=o("PLBartTokenizer"),sho=o(" (PLBart model)"),lho=l(),Mh=a("li"),pie=a("strong"),iho=o("prophetnet"),dho=o(" \u2014 "),sI=a("a"),cho=o("ProphetNetTokenizer"),fho=o(" (ProphetNet model)"),mho=l(),ks=a("li"),_ie=a("strong"),gho=o("qdqbert"),hho=o(" \u2014 "),lI=a("a"),pho=o("BertTokenizer"),_ho=o(" or "),iI=a("a"),uho=o("BertTokenizerFast"),bho=o(" (QDQBert model)"),vho=l(),Eh=a("li"),uie=a("strong"),Fho=o("rag"),Tho=o(" \u2014 "),dI=a("a"),Mho=o("RagTokenizer"),Eho=o(" (RAG model)"),Cho=l(),Ss=a("li"),bie=a("strong"),who=o("realm"),Aho=o(" \u2014 "),cI=a("a"),Lho=o("RealmTokenizer"),yho=o(" or "),fI=a("a"),xho=o("RealmTokenizerFast"),$ho=o(" (REALM model)"),kho=l(),Rs=a("li"),vie=a("strong"),Sho=o("reformer"),Rho=o(" \u2014 "),mI=a("a"),Pho=o("ReformerTokenizer"),Bho=o(" or "),gI=a("a"),Nho=o("ReformerTokenizerFast"),Iho=o(" (Reformer model)"),qho=l(),Ps=a("li"),Fie=a("strong"),jho=o("rembert"),Dho=o(" \u2014 "),hI=a("a"),Gho=o("RemBertTokenizer"),Oho=o(" or "),pI=a("a"),Vho=o("RemBertTokenizerFast"),Xho=o(" (RemBERT model)"),zho=l(),Bs=a("li"),Tie=a("strong"),Qho=o("retribert"),Who=o(" \u2014 "),_I=a("a"),Hho=o("RetriBertTokenizer"),Uho=o(" or "),uI=a("a"),Jho=o("RetriBertTokenizerFast"),Yho=o(" (RetriBERT model)"),Kho=l(),Ns=a("li"),Mie=a("strong"),Zho=o("roberta"),epo=o(" \u2014 "),bI=a("a"),opo=o("RobertaTokenizer"),rpo=o(" or "),vI=a("a"),tpo=o("RobertaTokenizerFast"),apo=o(" (RoBERTa model)"),npo=l(),Is=a("li"),Eie=a("strong"),spo=o("roformer"),lpo=o(" \u2014 "),FI=a("a"),ipo=o("RoFormerTokenizer"),dpo=o(" or "),TI=a("a"),cpo=o("RoFormerTokenizerFast"),fpo=o(" (RoFormer model)"),mpo=l(),Ch=a("li"),Cie=a("strong"),gpo=o("speech_to_text"),hpo=o(" \u2014 "),MI=a("a"),ppo=o("Speech2TextTokenizer"),_po=o(" (Speech2Text model)"),upo=l(),wh=a("li"),wie=a("strong"),bpo=o("speech_to_text_2"),vpo=o(" \u2014 "),EI=a("a"),Fpo=o("Speech2Text2Tokenizer"),Tpo=o(" (Speech2Text2 model)"),Mpo=l(),qs=a("li"),Aie=a("strong"),Epo=o("splinter"),Cpo=o(" \u2014 "),CI=a("a"),wpo=o("SplinterTokenizer"),Apo=o(" or "),wI=a("a"),Lpo=o("SplinterTokenizerFast"),ypo=o(" (Splinter model)"),xpo=l(),js=a("li"),Lie=a("strong"),$po=o("squeezebert"),kpo=o(" \u2014 "),AI=a("a"),Spo=o("SqueezeBertTokenizer"),Rpo=o(" or "),LI=a("a"),Ppo=o("SqueezeBertTokenizerFast"),Bpo=o(" (SqueezeBERT model)"),Npo=l(),Ds=a("li"),yie=a("strong"),Ipo=o("t5"),qpo=o(" \u2014 "),yI=a("a"),jpo=o("T5Tokenizer"),Dpo=o(" or "),xI=a("a"),Gpo=o("T5TokenizerFast"),Opo=o(" (T5 model)"),Vpo=l(),Ah=a("li"),xie=a("strong"),Xpo=o("tapas"),zpo=o(" \u2014 "),$I=a("a"),Qpo=o("TapasTokenizer"),Wpo=o(" (TAPAS model)"),Hpo=l(),Lh=a("li"),$ie=a("strong"),Upo=o("tapex"),Jpo=o(" \u2014 "),kI=a("a"),Ypo=o("TapexTokenizer"),Kpo=o(" (TAPEX model)"),Zpo=l(),yh=a("li"),kie=a("strong"),e_o=o("transfo-xl"),o_o=o(" \u2014 "),SI=a("a"),r_o=o("TransfoXLTokenizer"),t_o=o(" (Transformer-XL model)"),a_o=l(),Gs=a("li"),Sie=a("strong"),n_o=o("vilt"),s_o=o(" \u2014 "),RI=a("a"),l_o=o("BertTokenizer"),i_o=o(" or "),PI=a("a"),d_o=o("BertTokenizerFast"),c_o=o(" (ViLT model)"),f_o=l(),Os=a("li"),Rie=a("strong"),m_o=o("visual_bert"),g_o=o(" \u2014 "),BI=a("a"),h_o=o("BertTokenizer"),p_o=o(" or "),NI=a("a"),__o=o("BertTokenizerFast"),u_o=o(" (VisualBERT model)"),b_o=l(),xh=a("li"),Pie=a("strong"),v_o=o("wav2vec2"),F_o=o(" \u2014 "),II=a("a"),T_o=o("Wav2Vec2CTCTokenizer"),M_o=o(" (Wav2Vec2 model)"),E_o=l(),$h=a("li"),Bie=a("strong"),C_o=o("wav2vec2-conformer"),w_o=o(" \u2014 "),qI=a("a"),A_o=o("Wav2Vec2CTCTokenizer"),L_o=o(" (Wav2Vec2-Conformer model)"),y_o=l(),kh=a("li"),Nie=a("strong"),x_o=o("wav2vec2_phoneme"),$_o=o(" \u2014 "),jI=a("a"),k_o=o("Wav2Vec2PhonemeCTCTokenizer"),S_o=o(" (Wav2Vec2Phoneme model)"),R_o=l(),Vs=a("li"),Iie=a("strong"),P_o=o("xglm"),B_o=o(" \u2014 "),DI=a("a"),N_o=o("XGLMTokenizer"),I_o=o(" or "),GI=a("a"),q_o=o("XGLMTokenizerFast"),j_o=o(" (XGLM model)"),D_o=l(),Sh=a("li"),qie=a("strong"),G_o=o("xlm"),O_o=o(" \u2014 "),OI=a("a"),V_o=o("XLMTokenizer"),X_o=o(" (XLM model)"),z_o=l(),Rh=a("li"),jie=a("strong"),Q_o=o("xlm-prophetnet"),W_o=o(" \u2014 "),VI=a("a"),H_o=o("XLMProphetNetTokenizer"),U_o=o(" (XLM-ProphetNet model)"),J_o=l(),Xs=a("li"),Die=a("strong"),Y_o=o("xlm-roberta"),K_o=o(" \u2014 "),XI=a("a"),Z_o=o("XLMRobertaTokenizer"),euo=o(" or "),zI=a("a"),ouo=o("XLMRobertaTokenizerFast"),ruo=o(" (XLM-RoBERTa model)"),tuo=l(),zs=a("li"),Gie=a("strong"),auo=o("xlm-roberta-xl"),nuo=o(" \u2014 "),QI=a("a"),suo=o("RobertaTokenizer"),luo=o(" or "),WI=a("a"),iuo=o("RobertaTokenizerFast"),duo=o(" (XLM-RoBERTa-XL model)"),cuo=l(),Qs=a("li"),Oie=a("strong"),fuo=o("xlnet"),muo=o(" \u2014 "),HI=a("a"),guo=o("XLNetTokenizer"),huo=o(" or "),UI=a("a"),puo=o("XLNetTokenizerFast"),_uo=o(" (XLNet model)"),uuo=l(),Ws=a("li"),Vie=a("strong"),buo=o("yoso"),vuo=o(" \u2014 "),JI=a("a"),Fuo=o("AlbertTokenizer"),Tuo=o(" or "),YI=a("a"),Muo=o("AlbertTokenizerFast"),Euo=o(" (YOSO model)"),Cuo=l(),F(Ph.$$.fragment),wuo=l(),Bh=a("div"),F(bL.$$.fragment),Auo=l(),Xie=a("p"),Luo=o("Register a new tokenizer in this mapping."),fXe=l(),ji=a("h2"),Nh=a("a"),zie=a("span"),F(vL.$$.fragment),yuo=l(),Qie=a("span"),xuo=o("AutoFeatureExtractor"),mXe=l(),yo=a("div"),F(FL.$$.fragment),$uo=l(),TL=a("p"),kuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KI=a("a"),Suo=o("AutoFeatureExtractor.from_pretrained()"),Ruo=o(" class method."),Puo=l(),ML=a("p"),Buo=o("This class cannot be instantiated directly using "),Wie=a("code"),Nuo=o("__init__()"),Iuo=o(" (throws an error)."),quo=l(),Ue=a("div"),F(EL.$$.fragment),juo=l(),Hie=a("p"),Duo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Guo=l(),Ba=a("p"),Ouo=o("The feature extractor class to instantiate is selected based on the "),Uie=a("code"),Vuo=o("model_type"),Xuo=o(` property of the config object
(either passed as an argument or loaded from `),Jie=a("code"),zuo=o("pretrained_model_name_or_path"),Quo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Yie=a("code"),Wuo=o("pretrained_model_name_or_path"),Huo=o(":"),Uuo=l(),Y=a("ul"),Ih=a("li"),Kie=a("strong"),Juo=o("beit"),Yuo=o(" \u2014 "),ZI=a("a"),Kuo=o("BeitFeatureExtractor"),Zuo=o(" (BEiT model)"),e1o=l(),qh=a("li"),Zie=a("strong"),o1o=o("clip"),r1o=o(" \u2014 "),eq=a("a"),t1o=o("CLIPFeatureExtractor"),a1o=o(" (CLIP model)"),n1o=l(),jh=a("li"),ede=a("strong"),s1o=o("convnext"),l1o=o(" \u2014 "),oq=a("a"),i1o=o("ConvNextFeatureExtractor"),d1o=o(" (ConvNeXT model)"),c1o=l(),Dh=a("li"),ode=a("strong"),f1o=o("cvt"),m1o=o(" \u2014 "),rq=a("a"),g1o=o("ConvNextFeatureExtractor"),h1o=o(" (CvT model)"),p1o=l(),Gh=a("li"),rde=a("strong"),_1o=o("data2vec-audio"),u1o=o(" \u2014 "),tq=a("a"),b1o=o("Wav2Vec2FeatureExtractor"),v1o=o(" (Data2VecAudio model)"),F1o=l(),Oh=a("li"),tde=a("strong"),T1o=o("data2vec-vision"),M1o=o(" \u2014 "),aq=a("a"),E1o=o("BeitFeatureExtractor"),C1o=o(" (Data2VecVision model)"),w1o=l(),Vh=a("li"),ade=a("strong"),A1o=o("deit"),L1o=o(" \u2014 "),nq=a("a"),y1o=o("DeiTFeatureExtractor"),x1o=o(" (DeiT model)"),$1o=l(),Xh=a("li"),nde=a("strong"),k1o=o("detr"),S1o=o(" \u2014 "),sq=a("a"),R1o=o("DetrFeatureExtractor"),P1o=o(" (DETR model)"),B1o=l(),zh=a("li"),sde=a("strong"),N1o=o("dpt"),I1o=o(" \u2014 "),lq=a("a"),q1o=o("DPTFeatureExtractor"),j1o=o(" (DPT model)"),D1o=l(),Qh=a("li"),lde=a("strong"),G1o=o("flava"),O1o=o(" \u2014 "),iq=a("a"),V1o=o("FlavaFeatureExtractor"),X1o=o(" (FLAVA model)"),z1o=l(),Wh=a("li"),ide=a("strong"),Q1o=o("glpn"),W1o=o(" \u2014 "),dq=a("a"),H1o=o("GLPNFeatureExtractor"),U1o=o(" (GLPN model)"),J1o=l(),Hh=a("li"),dde=a("strong"),Y1o=o("groupvit"),K1o=o(" \u2014 "),cq=a("a"),Z1o=o("CLIPFeatureExtractor"),e2o=o(" (GroupViT model)"),o2o=l(),Uh=a("li"),cde=a("strong"),r2o=o("hubert"),t2o=o(" \u2014 "),fq=a("a"),a2o=o("Wav2Vec2FeatureExtractor"),n2o=o(" (Hubert model)"),s2o=l(),Jh=a("li"),fde=a("strong"),l2o=o("imagegpt"),i2o=o(" \u2014 "),mq=a("a"),d2o=o("ImageGPTFeatureExtractor"),c2o=o(" (ImageGPT model)"),f2o=l(),Yh=a("li"),mde=a("strong"),m2o=o("layoutlmv2"),g2o=o(" \u2014 "),gq=a("a"),h2o=o("LayoutLMv2FeatureExtractor"),p2o=o(" (LayoutLMv2 model)"),_2o=l(),Kh=a("li"),gde=a("strong"),u2o=o("layoutlmv3"),b2o=o(" \u2014 "),hq=a("a"),v2o=o("LayoutLMv3FeatureExtractor"),F2o=o(" (LayoutLMv3 model)"),T2o=l(),Zh=a("li"),hde=a("strong"),M2o=o("levit"),E2o=o(" \u2014 "),pq=a("a"),C2o=o("LevitFeatureExtractor"),w2o=o(" (LeViT model)"),A2o=l(),ep=a("li"),pde=a("strong"),L2o=o("maskformer"),y2o=o(" \u2014 "),_q=a("a"),x2o=o("MaskFormerFeatureExtractor"),$2o=o(" (MaskFormer model)"),k2o=l(),op=a("li"),_de=a("strong"),S2o=o("mctct"),R2o=o(" \u2014 "),uq=a("a"),P2o=o("MCTCTFeatureExtractor"),B2o=o(" (M-CTC-T model)"),N2o=l(),rp=a("li"),ude=a("strong"),I2o=o("mobilevit"),q2o=o(" \u2014 "),bq=a("a"),j2o=o("MobileViTFeatureExtractor"),D2o=o(" (MobileViT model)"),G2o=l(),tp=a("li"),bde=a("strong"),O2o=o("perceiver"),V2o=o(" \u2014 "),vq=a("a"),X2o=o("PerceiverFeatureExtractor"),z2o=o(" (Perceiver model)"),Q2o=l(),ap=a("li"),vde=a("strong"),W2o=o("poolformer"),H2o=o(" \u2014 "),Fq=a("a"),U2o=o("PoolFormerFeatureExtractor"),J2o=o(" (PoolFormer model)"),Y2o=l(),np=a("li"),Fde=a("strong"),K2o=o("regnet"),Z2o=o(" \u2014 "),Tq=a("a"),ebo=o("ConvNextFeatureExtractor"),obo=o(" (RegNet model)"),rbo=l(),sp=a("li"),Tde=a("strong"),tbo=o("resnet"),abo=o(" \u2014 "),Mq=a("a"),nbo=o("ConvNextFeatureExtractor"),sbo=o(" (ResNet model)"),lbo=l(),lp=a("li"),Mde=a("strong"),ibo=o("segformer"),dbo=o(" \u2014 "),Eq=a("a"),cbo=o("SegformerFeatureExtractor"),fbo=o(" (SegFormer model)"),mbo=l(),ip=a("li"),Ede=a("strong"),gbo=o("speech_to_text"),hbo=o(" \u2014 "),Cq=a("a"),pbo=o("Speech2TextFeatureExtractor"),_bo=o(" (Speech2Text model)"),ubo=l(),dp=a("li"),Cde=a("strong"),bbo=o("swin"),vbo=o(" \u2014 "),wq=a("a"),Fbo=o("ViTFeatureExtractor"),Tbo=o(" (Swin Transformer model)"),Mbo=l(),cp=a("li"),wde=a("strong"),Ebo=o("van"),Cbo=o(" \u2014 "),Aq=a("a"),wbo=o("ConvNextFeatureExtractor"),Abo=o(" (VAN model)"),Lbo=l(),fp=a("li"),Ade=a("strong"),ybo=o("vilt"),xbo=o(" \u2014 "),Lq=a("a"),$bo=o("ViltFeatureExtractor"),kbo=o(" (ViLT model)"),Sbo=l(),mp=a("li"),Lde=a("strong"),Rbo=o("vit"),Pbo=o(" \u2014 "),yq=a("a"),Bbo=o("ViTFeatureExtractor"),Nbo=o(" (ViT model)"),Ibo=l(),gp=a("li"),yde=a("strong"),qbo=o("vit_mae"),jbo=o(" \u2014 "),xq=a("a"),Dbo=o("ViTFeatureExtractor"),Gbo=o(" (ViTMAE model)"),Obo=l(),hp=a("li"),xde=a("strong"),Vbo=o("wav2vec2"),Xbo=o(" \u2014 "),$q=a("a"),zbo=o("Wav2Vec2FeatureExtractor"),Qbo=o(" (Wav2Vec2 model)"),Wbo=l(),pp=a("li"),$de=a("strong"),Hbo=o("wav2vec2-conformer"),Ubo=o(" \u2014 "),kq=a("a"),Jbo=o("Wav2Vec2FeatureExtractor"),Ybo=o(" (Wav2Vec2-Conformer model)"),Kbo=l(),_p=a("li"),kde=a("strong"),Zbo=o("yolos"),evo=o(" \u2014 "),Sq=a("a"),ovo=o("YolosFeatureExtractor"),rvo=o(" (YOLOS model)"),tvo=l(),F(up.$$.fragment),avo=l(),F(bp.$$.fragment),nvo=l(),vp=a("div"),F(CL.$$.fragment),svo=l(),Sde=a("p"),lvo=o("Register a new feature extractor for this class."),gXe=l(),Di=a("h2"),Fp=a("a"),Rde=a("span"),F(wL.$$.fragment),ivo=l(),Pde=a("span"),dvo=o("AutoProcessor"),hXe=l(),xo=a("div"),F(AL.$$.fragment),cvo=l(),LL=a("p"),fvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Rq=a("a"),mvo=o("AutoProcessor.from_pretrained()"),gvo=o(" class method."),hvo=l(),yL=a("p"),pvo=o("This class cannot be instantiated directly using "),Bde=a("code"),_vo=o("__init__()"),uvo=o(" (throws an error)."),bvo=l(),Je=a("div"),F(xL.$$.fragment),vvo=l(),Nde=a("p"),Fvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Tvo=l(),Gi=a("p"),Mvo=o("The processor class to instantiate is selected based on the "),Ide=a("code"),Evo=o("model_type"),Cvo=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),wvo=o("pretrained_model_name_or_path"),Avo=o(" if possible):"),Lvo=l(),he=a("ul"),Tp=a("li"),jde=a("strong"),yvo=o("clip"),xvo=o(" \u2014 "),Pq=a("a"),$vo=o("CLIPProcessor"),kvo=o(" (CLIP model)"),Svo=l(),Mp=a("li"),Dde=a("strong"),Rvo=o("flava"),Pvo=o(" \u2014 "),Gde=a("code"),Bvo=o("FLAVAProcessor"),Nvo=o(" (FLAVA model)"),Ivo=l(),Ep=a("li"),Ode=a("strong"),qvo=o("groupvit"),jvo=o(" \u2014 "),Bq=a("a"),Dvo=o("CLIPProcessor"),Gvo=o(" (GroupViT model)"),Ovo=l(),Cp=a("li"),Vde=a("strong"),Vvo=o("layoutlmv2"),Xvo=o(" \u2014 "),Nq=a("a"),zvo=o("LayoutLMv2Processor"),Qvo=o(" (LayoutLMv2 model)"),Wvo=l(),wp=a("li"),Xde=a("strong"),Hvo=o("layoutlmv3"),Uvo=o(" \u2014 "),Iq=a("a"),Jvo=o("LayoutLMv3Processor"),Yvo=o(" (LayoutLMv3 model)"),Kvo=l(),Ap=a("li"),zde=a("strong"),Zvo=o("layoutxlm"),eFo=o(" \u2014 "),qq=a("a"),oFo=o("LayoutXLMProcessor"),rFo=o(" (LayoutXLM model)"),tFo=l(),Lp=a("li"),Qde=a("strong"),aFo=o("sew"),nFo=o(" \u2014 "),jq=a("a"),sFo=o("Wav2Vec2Processor"),lFo=o(" (SEW model)"),iFo=l(),yp=a("li"),Wde=a("strong"),dFo=o("sew-d"),cFo=o(" \u2014 "),Dq=a("a"),fFo=o("Wav2Vec2Processor"),mFo=o(" (SEW-D model)"),gFo=l(),xp=a("li"),Hde=a("strong"),hFo=o("speech_to_text"),pFo=o(" \u2014 "),Gq=a("a"),_Fo=o("Speech2TextProcessor"),uFo=o(" (Speech2Text model)"),bFo=l(),$p=a("li"),Ude=a("strong"),vFo=o("speech_to_text_2"),FFo=o(" \u2014 "),Oq=a("a"),TFo=o("Speech2Text2Processor"),MFo=o(" (Speech2Text2 model)"),EFo=l(),kp=a("li"),Jde=a("strong"),CFo=o("trocr"),wFo=o(" \u2014 "),Vq=a("a"),AFo=o("TrOCRProcessor"),LFo=o(" (TrOCR model)"),yFo=l(),Sp=a("li"),Yde=a("strong"),xFo=o("unispeech"),$Fo=o(" \u2014 "),Xq=a("a"),kFo=o("Wav2Vec2Processor"),SFo=o(" (UniSpeech model)"),RFo=l(),Rp=a("li"),Kde=a("strong"),PFo=o("unispeech-sat"),BFo=o(" \u2014 "),zq=a("a"),NFo=o("Wav2Vec2Processor"),IFo=o(" (UniSpeechSat model)"),qFo=l(),Pp=a("li"),Zde=a("strong"),jFo=o("vilt"),DFo=o(" \u2014 "),Qq=a("a"),GFo=o("ViltProcessor"),OFo=o(" (ViLT model)"),VFo=l(),Bp=a("li"),ece=a("strong"),XFo=o("vision-text-dual-encoder"),zFo=o(" \u2014 "),Wq=a("a"),QFo=o("VisionTextDualEncoderProcessor"),WFo=o(" (VisionTextDualEncoder model)"),HFo=l(),Np=a("li"),oce=a("strong"),UFo=o("wav2vec2"),JFo=o(" \u2014 "),Hq=a("a"),YFo=o("Wav2Vec2Processor"),KFo=o(" (Wav2Vec2 model)"),ZFo=l(),Ip=a("li"),rce=a("strong"),e6o=o("wav2vec2-conformer"),o6o=o(" \u2014 "),Uq=a("a"),r6o=o("Wav2Vec2Processor"),t6o=o(" (Wav2Vec2-Conformer model)"),a6o=l(),qp=a("li"),tce=a("strong"),n6o=o("wavlm"),s6o=o(" \u2014 "),Jq=a("a"),l6o=o("Wav2Vec2Processor"),i6o=o(" (WavLM model)"),d6o=l(),F(jp.$$.fragment),c6o=l(),F(Dp.$$.fragment),f6o=l(),Gp=a("div"),F($L.$$.fragment),m6o=l(),ace=a("p"),g6o=o("Register a new processor for this class."),pXe=l(),Oi=a("h2"),Op=a("a"),nce=a("span"),F(kL.$$.fragment),h6o=l(),sce=a("span"),p6o=o("AutoModel"),_Xe=l(),$o=a("div"),F(SL.$$.fragment),_6o=l(),Vi=a("p"),u6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yq=a("a"),b6o=o("from_pretrained()"),v6o=o(" class method or the "),Kq=a("a"),F6o=o("from_config()"),T6o=o(` class
method.`),M6o=l(),RL=a("p"),E6o=o("This class cannot be instantiated directly using "),lce=a("code"),C6o=o("__init__()"),w6o=o(" (throws an error)."),A6o=l(),it=a("div"),F(PL.$$.fragment),L6o=l(),ice=a("p"),y6o=o("Instantiates one of the base model classes of the library from a configuration."),x6o=l(),Xi=a("p"),$6o=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),k6o=o("not"),S6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zq=a("a"),R6o=o("from_pretrained()"),P6o=o(" to load the model weights."),B6o=l(),F(Vp.$$.fragment),N6o=l(),Ye=a("div"),F(BL.$$.fragment),I6o=l(),cce=a("p"),q6o=o("Instantiate one of the base model classes of the library from a pretrained model."),j6o=l(),Na=a("p"),D6o=o("The model class to instantiate is selected based on the "),fce=a("code"),G6o=o("model_type"),O6o=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),V6o=o("pretrained_model_name_or_path"),X6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=a("code"),z6o=o("pretrained_model_name_or_path"),Q6o=o(":"),W6o=l(),y=a("ul"),Xp=a("li"),hce=a("strong"),H6o=o("albert"),U6o=o(" \u2014 "),ej=a("a"),J6o=o("AlbertModel"),Y6o=o(" (ALBERT model)"),K6o=l(),zp=a("li"),pce=a("strong"),Z6o=o("bart"),eTo=o(" \u2014 "),oj=a("a"),oTo=o("BartModel"),rTo=o(" (BART model)"),tTo=l(),Qp=a("li"),_ce=a("strong"),aTo=o("beit"),nTo=o(" \u2014 "),rj=a("a"),sTo=o("BeitModel"),lTo=o(" (BEiT model)"),iTo=l(),Wp=a("li"),uce=a("strong"),dTo=o("bert"),cTo=o(" \u2014 "),tj=a("a"),fTo=o("BertModel"),mTo=o(" (BERT model)"),gTo=l(),Hp=a("li"),bce=a("strong"),hTo=o("bert-generation"),pTo=o(" \u2014 "),aj=a("a"),_To=o("BertGenerationEncoder"),uTo=o(" (Bert Generation model)"),bTo=l(),Up=a("li"),vce=a("strong"),vTo=o("big_bird"),FTo=o(" \u2014 "),nj=a("a"),TTo=o("BigBirdModel"),MTo=o(" (BigBird model)"),ETo=l(),Jp=a("li"),Fce=a("strong"),CTo=o("bigbird_pegasus"),wTo=o(" \u2014 "),sj=a("a"),ATo=o("BigBirdPegasusModel"),LTo=o(" (BigBird-Pegasus model)"),yTo=l(),Yp=a("li"),Tce=a("strong"),xTo=o("blenderbot"),$To=o(" \u2014 "),lj=a("a"),kTo=o("BlenderbotModel"),STo=o(" (Blenderbot model)"),RTo=l(),Kp=a("li"),Mce=a("strong"),PTo=o("blenderbot-small"),BTo=o(" \u2014 "),ij=a("a"),NTo=o("BlenderbotSmallModel"),ITo=o(" (BlenderbotSmall model)"),qTo=l(),Zp=a("li"),Ece=a("strong"),jTo=o("bloom"),DTo=o(" \u2014 "),dj=a("a"),GTo=o("BloomModel"),OTo=o(" (BLOOM model)"),VTo=l(),e_=a("li"),Cce=a("strong"),XTo=o("camembert"),zTo=o(" \u2014 "),cj=a("a"),QTo=o("CamembertModel"),WTo=o(" (CamemBERT model)"),HTo=l(),o_=a("li"),wce=a("strong"),UTo=o("canine"),JTo=o(" \u2014 "),fj=a("a"),YTo=o("CanineModel"),KTo=o(" (CANINE model)"),ZTo=l(),r_=a("li"),Ace=a("strong"),e8o=o("clip"),o8o=o(" \u2014 "),mj=a("a"),r8o=o("CLIPModel"),t8o=o(" (CLIP model)"),a8o=l(),t_=a("li"),Lce=a("strong"),n8o=o("codegen"),s8o=o(" \u2014 "),gj=a("a"),l8o=o("CodeGenModel"),i8o=o(" (CodeGen model)"),d8o=l(),a_=a("li"),yce=a("strong"),c8o=o("convbert"),f8o=o(" \u2014 "),hj=a("a"),m8o=o("ConvBertModel"),g8o=o(" (ConvBERT model)"),h8o=l(),n_=a("li"),xce=a("strong"),p8o=o("convnext"),_8o=o(" \u2014 "),pj=a("a"),u8o=o("ConvNextModel"),b8o=o(" (ConvNeXT model)"),v8o=l(),s_=a("li"),$ce=a("strong"),F8o=o("ctrl"),T8o=o(" \u2014 "),_j=a("a"),M8o=o("CTRLModel"),E8o=o(" (CTRL model)"),C8o=l(),l_=a("li"),kce=a("strong"),w8o=o("cvt"),A8o=o(" \u2014 "),uj=a("a"),L8o=o("CvtModel"),y8o=o(" (CvT model)"),x8o=l(),i_=a("li"),Sce=a("strong"),$8o=o("data2vec-audio"),k8o=o(" \u2014 "),bj=a("a"),S8o=o("Data2VecAudioModel"),R8o=o(" (Data2VecAudio model)"),P8o=l(),d_=a("li"),Rce=a("strong"),B8o=o("data2vec-text"),N8o=o(" \u2014 "),vj=a("a"),I8o=o("Data2VecTextModel"),q8o=o(" (Data2VecText model)"),j8o=l(),c_=a("li"),Pce=a("strong"),D8o=o("data2vec-vision"),G8o=o(" \u2014 "),Fj=a("a"),O8o=o("Data2VecVisionModel"),V8o=o(" (Data2VecVision model)"),X8o=l(),f_=a("li"),Bce=a("strong"),z8o=o("deberta"),Q8o=o(" \u2014 "),Tj=a("a"),W8o=o("DebertaModel"),H8o=o(" (DeBERTa model)"),U8o=l(),m_=a("li"),Nce=a("strong"),J8o=o("deberta-v2"),Y8o=o(" \u2014 "),Mj=a("a"),K8o=o("DebertaV2Model"),Z8o=o(" (DeBERTa-v2 model)"),eMo=l(),g_=a("li"),Ice=a("strong"),oMo=o("decision_transformer"),rMo=o(" \u2014 "),Ej=a("a"),tMo=o("DecisionTransformerModel"),aMo=o(" (Decision Transformer model)"),nMo=l(),h_=a("li"),qce=a("strong"),sMo=o("deit"),lMo=o(" \u2014 "),Cj=a("a"),iMo=o("DeiTModel"),dMo=o(" (DeiT model)"),cMo=l(),p_=a("li"),jce=a("strong"),fMo=o("detr"),mMo=o(" \u2014 "),wj=a("a"),gMo=o("DetrModel"),hMo=o(" (DETR model)"),pMo=l(),__=a("li"),Dce=a("strong"),_Mo=o("distilbert"),uMo=o(" \u2014 "),Aj=a("a"),bMo=o("DistilBertModel"),vMo=o(" (DistilBERT model)"),FMo=l(),u_=a("li"),Gce=a("strong"),TMo=o("dpr"),MMo=o(" \u2014 "),Lj=a("a"),EMo=o("DPRQuestionEncoder"),CMo=o(" (DPR model)"),wMo=l(),b_=a("li"),Oce=a("strong"),AMo=o("dpt"),LMo=o(" \u2014 "),yj=a("a"),yMo=o("DPTModel"),xMo=o(" (DPT model)"),$Mo=l(),v_=a("li"),Vce=a("strong"),kMo=o("electra"),SMo=o(" \u2014 "),xj=a("a"),RMo=o("ElectraModel"),PMo=o(" (ELECTRA model)"),BMo=l(),F_=a("li"),Xce=a("strong"),NMo=o("flaubert"),IMo=o(" \u2014 "),$j=a("a"),qMo=o("FlaubertModel"),jMo=o(" (FlauBERT model)"),DMo=l(),T_=a("li"),zce=a("strong"),GMo=o("flava"),OMo=o(" \u2014 "),kj=a("a"),VMo=o("FlavaModel"),XMo=o(" (FLAVA model)"),zMo=l(),M_=a("li"),Qce=a("strong"),QMo=o("fnet"),WMo=o(" \u2014 "),Sj=a("a"),HMo=o("FNetModel"),UMo=o(" (FNet model)"),JMo=l(),E_=a("li"),Wce=a("strong"),YMo=o("fsmt"),KMo=o(" \u2014 "),Rj=a("a"),ZMo=o("FSMTModel"),e4o=o(" (FairSeq Machine-Translation model)"),o4o=l(),Hs=a("li"),Hce=a("strong"),r4o=o("funnel"),t4o=o(" \u2014 "),Pj=a("a"),a4o=o("FunnelModel"),n4o=o(" or "),Bj=a("a"),s4o=o("FunnelBaseModel"),l4o=o(" (Funnel Transformer model)"),i4o=l(),C_=a("li"),Uce=a("strong"),d4o=o("glpn"),c4o=o(" \u2014 "),Nj=a("a"),f4o=o("GLPNModel"),m4o=o(" (GLPN model)"),g4o=l(),w_=a("li"),Jce=a("strong"),h4o=o("gpt2"),p4o=o(" \u2014 "),Ij=a("a"),_4o=o("GPT2Model"),u4o=o(" (OpenAI GPT-2 model)"),b4o=l(),A_=a("li"),Yce=a("strong"),v4o=o("gpt_neo"),F4o=o(" \u2014 "),qj=a("a"),T4o=o("GPTNeoModel"),M4o=o(" (GPT Neo model)"),E4o=l(),L_=a("li"),Kce=a("strong"),C4o=o("gpt_neox"),w4o=o(" \u2014 "),jj=a("a"),A4o=o("GPTNeoXModel"),L4o=o(" (GPT NeoX model)"),y4o=l(),y_=a("li"),Zce=a("strong"),x4o=o("gptj"),$4o=o(" \u2014 "),Dj=a("a"),k4o=o("GPTJModel"),S4o=o(" (GPT-J model)"),R4o=l(),x_=a("li"),efe=a("strong"),P4o=o("groupvit"),B4o=o(" \u2014 "),Gj=a("a"),N4o=o("GroupViTModel"),I4o=o(" (GroupViT model)"),q4o=l(),$_=a("li"),ofe=a("strong"),j4o=o("hubert"),D4o=o(" \u2014 "),Oj=a("a"),G4o=o("HubertModel"),O4o=o(" (Hubert model)"),V4o=l(),k_=a("li"),rfe=a("strong"),X4o=o("ibert"),z4o=o(" \u2014 "),Vj=a("a"),Q4o=o("IBertModel"),W4o=o(" (I-BERT model)"),H4o=l(),S_=a("li"),tfe=a("strong"),U4o=o("imagegpt"),J4o=o(" \u2014 "),Xj=a("a"),Y4o=o("ImageGPTModel"),K4o=o(" (ImageGPT model)"),Z4o=l(),R_=a("li"),afe=a("strong"),eEo=o("layoutlm"),oEo=o(" \u2014 "),zj=a("a"),rEo=o("LayoutLMModel"),tEo=o(" (LayoutLM model)"),aEo=l(),P_=a("li"),nfe=a("strong"),nEo=o("layoutlmv2"),sEo=o(" \u2014 "),Qj=a("a"),lEo=o("LayoutLMv2Model"),iEo=o(" (LayoutLMv2 model)"),dEo=l(),B_=a("li"),sfe=a("strong"),cEo=o("layoutlmv3"),fEo=o(" \u2014 "),Wj=a("a"),mEo=o("LayoutLMv3Model"),gEo=o(" (LayoutLMv3 model)"),hEo=l(),N_=a("li"),lfe=a("strong"),pEo=o("led"),_Eo=o(" \u2014 "),Hj=a("a"),uEo=o("LEDModel"),bEo=o(" (LED model)"),vEo=l(),I_=a("li"),ife=a("strong"),FEo=o("levit"),TEo=o(" \u2014 "),Uj=a("a"),MEo=o("LevitModel"),EEo=o(" (LeViT model)"),CEo=l(),q_=a("li"),dfe=a("strong"),wEo=o("longformer"),AEo=o(" \u2014 "),Jj=a("a"),LEo=o("LongformerModel"),yEo=o(" (Longformer model)"),xEo=l(),j_=a("li"),cfe=a("strong"),$Eo=o("longt5"),kEo=o(" \u2014 "),Yj=a("a"),SEo=o("LongT5Model"),REo=o(" (LongT5 model)"),PEo=l(),D_=a("li"),ffe=a("strong"),BEo=o("luke"),NEo=o(" \u2014 "),Kj=a("a"),IEo=o("LukeModel"),qEo=o(" (LUKE model)"),jEo=l(),G_=a("li"),mfe=a("strong"),DEo=o("lxmert"),GEo=o(" \u2014 "),Zj=a("a"),OEo=o("LxmertModel"),VEo=o(" (LXMERT model)"),XEo=l(),O_=a("li"),gfe=a("strong"),zEo=o("m2m_100"),QEo=o(" \u2014 "),eD=a("a"),WEo=o("M2M100Model"),HEo=o(" (M2M100 model)"),UEo=l(),V_=a("li"),hfe=a("strong"),JEo=o("marian"),YEo=o(" \u2014 "),oD=a("a"),KEo=o("MarianModel"),ZEo=o(" (Marian model)"),eCo=l(),X_=a("li"),pfe=a("strong"),oCo=o("maskformer"),rCo=o(" \u2014 "),rD=a("a"),tCo=o("MaskFormerModel"),aCo=o(" (MaskFormer model)"),nCo=l(),z_=a("li"),_fe=a("strong"),sCo=o("mbart"),lCo=o(" \u2014 "),tD=a("a"),iCo=o("MBartModel"),dCo=o(" (mBART model)"),cCo=l(),Q_=a("li"),ufe=a("strong"),fCo=o("mctct"),mCo=o(" \u2014 "),aD=a("a"),gCo=o("MCTCTModel"),hCo=o(" (M-CTC-T model)"),pCo=l(),W_=a("li"),bfe=a("strong"),_Co=o("megatron-bert"),uCo=o(" \u2014 "),nD=a("a"),bCo=o("MegatronBertModel"),vCo=o(" (Megatron-BERT model)"),FCo=l(),H_=a("li"),vfe=a("strong"),TCo=o("mobilebert"),MCo=o(" \u2014 "),sD=a("a"),ECo=o("MobileBertModel"),CCo=o(" (MobileBERT model)"),wCo=l(),U_=a("li"),Ffe=a("strong"),ACo=o("mobilevit"),LCo=o(" \u2014 "),lD=a("a"),yCo=o("MobileViTModel"),xCo=o(" (MobileViT model)"),$Co=l(),J_=a("li"),Tfe=a("strong"),kCo=o("mpnet"),SCo=o(" \u2014 "),iD=a("a"),RCo=o("MPNetModel"),PCo=o(" (MPNet model)"),BCo=l(),Y_=a("li"),Mfe=a("strong"),NCo=o("mt5"),ICo=o(" \u2014 "),dD=a("a"),qCo=o("MT5Model"),jCo=o(" (MT5 model)"),DCo=l(),K_=a("li"),Efe=a("strong"),GCo=o("mvp"),OCo=o(" \u2014 "),cD=a("a"),VCo=o("MvpModel"),XCo=o(" (MVP model)"),zCo=l(),Z_=a("li"),Cfe=a("strong"),QCo=o("nezha"),WCo=o(" \u2014 "),fD=a("a"),HCo=o("NezhaModel"),UCo=o(" (Nezha model)"),JCo=l(),eu=a("li"),wfe=a("strong"),YCo=o("nystromformer"),KCo=o(" \u2014 "),mD=a("a"),ZCo=o("NystromformerModel"),e3o=o(" (Nystr\xF6mformer model)"),o3o=l(),ou=a("li"),Afe=a("strong"),r3o=o("openai-gpt"),t3o=o(" \u2014 "),gD=a("a"),a3o=o("OpenAIGPTModel"),n3o=o(" (OpenAI GPT model)"),s3o=l(),ru=a("li"),Lfe=a("strong"),l3o=o("opt"),i3o=o(" \u2014 "),hD=a("a"),d3o=o("OPTModel"),c3o=o(" (OPT model)"),f3o=l(),tu=a("li"),yfe=a("strong"),m3o=o("pegasus"),g3o=o(" \u2014 "),pD=a("a"),h3o=o("PegasusModel"),p3o=o(" (Pegasus model)"),_3o=l(),au=a("li"),xfe=a("strong"),u3o=o("perceiver"),b3o=o(" \u2014 "),_D=a("a"),v3o=o("PerceiverModel"),F3o=o(" (Perceiver model)"),T3o=l(),nu=a("li"),$fe=a("strong"),M3o=o("plbart"),E3o=o(" \u2014 "),uD=a("a"),C3o=o("PLBartModel"),w3o=o(" (PLBart model)"),A3o=l(),su=a("li"),kfe=a("strong"),L3o=o("poolformer"),y3o=o(" \u2014 "),bD=a("a"),x3o=o("PoolFormerModel"),$3o=o(" (PoolFormer model)"),k3o=l(),lu=a("li"),Sfe=a("strong"),S3o=o("prophetnet"),R3o=o(" \u2014 "),vD=a("a"),P3o=o("ProphetNetModel"),B3o=o(" (ProphetNet model)"),N3o=l(),iu=a("li"),Rfe=a("strong"),I3o=o("qdqbert"),q3o=o(" \u2014 "),FD=a("a"),j3o=o("QDQBertModel"),D3o=o(" (QDQBert model)"),G3o=l(),du=a("li"),Pfe=a("strong"),O3o=o("reformer"),V3o=o(" \u2014 "),TD=a("a"),X3o=o("ReformerModel"),z3o=o(" (Reformer model)"),Q3o=l(),cu=a("li"),Bfe=a("strong"),W3o=o("regnet"),H3o=o(" \u2014 "),MD=a("a"),U3o=o("RegNetModel"),J3o=o(" (RegNet model)"),Y3o=l(),fu=a("li"),Nfe=a("strong"),K3o=o("rembert"),Z3o=o(" \u2014 "),ED=a("a"),e5o=o("RemBertModel"),o5o=o(" (RemBERT model)"),r5o=l(),mu=a("li"),Ife=a("strong"),t5o=o("resnet"),a5o=o(" \u2014 "),CD=a("a"),n5o=o("ResNetModel"),s5o=o(" (ResNet model)"),l5o=l(),gu=a("li"),qfe=a("strong"),i5o=o("retribert"),d5o=o(" \u2014 "),wD=a("a"),c5o=o("RetriBertModel"),f5o=o(" (RetriBERT model)"),m5o=l(),hu=a("li"),jfe=a("strong"),g5o=o("roberta"),h5o=o(" \u2014 "),AD=a("a"),p5o=o("RobertaModel"),_5o=o(" (RoBERTa model)"),u5o=l(),pu=a("li"),Dfe=a("strong"),b5o=o("roformer"),v5o=o(" \u2014 "),LD=a("a"),F5o=o("RoFormerModel"),T5o=o(" (RoFormer model)"),M5o=l(),_u=a("li"),Gfe=a("strong"),E5o=o("segformer"),C5o=o(" \u2014 "),yD=a("a"),w5o=o("SegformerModel"),A5o=o(" (SegFormer model)"),L5o=l(),uu=a("li"),Ofe=a("strong"),y5o=o("sew"),x5o=o(" \u2014 "),xD=a("a"),$5o=o("SEWModel"),k5o=o(" (SEW model)"),S5o=l(),bu=a("li"),Vfe=a("strong"),R5o=o("sew-d"),P5o=o(" \u2014 "),$D=a("a"),B5o=o("SEWDModel"),N5o=o(" (SEW-D model)"),I5o=l(),vu=a("li"),Xfe=a("strong"),q5o=o("speech_to_text"),j5o=o(" \u2014 "),kD=a("a"),D5o=o("Speech2TextModel"),G5o=o(" (Speech2Text model)"),O5o=l(),Fu=a("li"),zfe=a("strong"),V5o=o("splinter"),X5o=o(" \u2014 "),SD=a("a"),z5o=o("SplinterModel"),Q5o=o(" (Splinter model)"),W5o=l(),Tu=a("li"),Qfe=a("strong"),H5o=o("squeezebert"),U5o=o(" \u2014 "),RD=a("a"),J5o=o("SqueezeBertModel"),Y5o=o(" (SqueezeBERT model)"),K5o=l(),Mu=a("li"),Wfe=a("strong"),Z5o=o("swin"),e0o=o(" \u2014 "),PD=a("a"),o0o=o("SwinModel"),r0o=o(" (Swin Transformer model)"),t0o=l(),Eu=a("li"),Hfe=a("strong"),a0o=o("t5"),n0o=o(" \u2014 "),BD=a("a"),s0o=o("T5Model"),l0o=o(" (T5 model)"),i0o=l(),Cu=a("li"),Ufe=a("strong"),d0o=o("tapas"),c0o=o(" \u2014 "),ND=a("a"),f0o=o("TapasModel"),m0o=o(" (TAPAS model)"),g0o=l(),wu=a("li"),Jfe=a("strong"),h0o=o("trajectory_transformer"),p0o=o(" \u2014 "),ID=a("a"),_0o=o("TrajectoryTransformerModel"),u0o=o(" (Trajectory Transformer model)"),b0o=l(),Au=a("li"),Yfe=a("strong"),v0o=o("transfo-xl"),F0o=o(" \u2014 "),qD=a("a"),T0o=o("TransfoXLModel"),M0o=o(" (Transformer-XL model)"),E0o=l(),Lu=a("li"),Kfe=a("strong"),C0o=o("unispeech"),w0o=o(" \u2014 "),jD=a("a"),A0o=o("UniSpeechModel"),L0o=o(" (UniSpeech model)"),y0o=l(),yu=a("li"),Zfe=a("strong"),x0o=o("unispeech-sat"),$0o=o(" \u2014 "),DD=a("a"),k0o=o("UniSpeechSatModel"),S0o=o(" (UniSpeechSat model)"),R0o=l(),xu=a("li"),eme=a("strong"),P0o=o("van"),B0o=o(" \u2014 "),GD=a("a"),N0o=o("VanModel"),I0o=o(" (VAN model)"),q0o=l(),$u=a("li"),ome=a("strong"),j0o=o("vilt"),D0o=o(" \u2014 "),OD=a("a"),G0o=o("ViltModel"),O0o=o(" (ViLT model)"),V0o=l(),ku=a("li"),rme=a("strong"),X0o=o("vision-text-dual-encoder"),z0o=o(" \u2014 "),VD=a("a"),Q0o=o("VisionTextDualEncoderModel"),W0o=o(" (VisionTextDualEncoder model)"),H0o=l(),Su=a("li"),tme=a("strong"),U0o=o("visual_bert"),J0o=o(" \u2014 "),XD=a("a"),Y0o=o("VisualBertModel"),K0o=o(" (VisualBERT model)"),Z0o=l(),Ru=a("li"),ame=a("strong"),ewo=o("vit"),owo=o(" \u2014 "),zD=a("a"),rwo=o("ViTModel"),two=o(" (ViT model)"),awo=l(),Pu=a("li"),nme=a("strong"),nwo=o("vit_mae"),swo=o(" \u2014 "),QD=a("a"),lwo=o("ViTMAEModel"),iwo=o(" (ViTMAE model)"),dwo=l(),Bu=a("li"),sme=a("strong"),cwo=o("wav2vec2"),fwo=o(" \u2014 "),WD=a("a"),mwo=o("Wav2Vec2Model"),gwo=o(" (Wav2Vec2 model)"),hwo=l(),Nu=a("li"),lme=a("strong"),pwo=o("wav2vec2-conformer"),_wo=o(" \u2014 "),HD=a("a"),uwo=o("Wav2Vec2ConformerModel"),bwo=o(" (Wav2Vec2-Conformer model)"),vwo=l(),Iu=a("li"),ime=a("strong"),Fwo=o("wavlm"),Two=o(" \u2014 "),UD=a("a"),Mwo=o("WavLMModel"),Ewo=o(" (WavLM model)"),Cwo=l(),qu=a("li"),dme=a("strong"),wwo=o("xglm"),Awo=o(" \u2014 "),JD=a("a"),Lwo=o("XGLMModel"),ywo=o(" (XGLM model)"),xwo=l(),ju=a("li"),cme=a("strong"),$wo=o("xlm"),kwo=o(" \u2014 "),YD=a("a"),Swo=o("XLMModel"),Rwo=o(" (XLM model)"),Pwo=l(),Du=a("li"),fme=a("strong"),Bwo=o("xlm-prophetnet"),Nwo=o(" \u2014 "),KD=a("a"),Iwo=o("XLMProphetNetModel"),qwo=o(" (XLM-ProphetNet model)"),jwo=l(),Gu=a("li"),mme=a("strong"),Dwo=o("xlm-roberta"),Gwo=o(" \u2014 "),ZD=a("a"),Owo=o("XLMRobertaModel"),Vwo=o(" (XLM-RoBERTa model)"),Xwo=l(),Ou=a("li"),gme=a("strong"),zwo=o("xlm-roberta-xl"),Qwo=o(" \u2014 "),eG=a("a"),Wwo=o("XLMRobertaXLModel"),Hwo=o(" (XLM-RoBERTa-XL model)"),Uwo=l(),Vu=a("li"),hme=a("strong"),Jwo=o("xlnet"),Ywo=o(" \u2014 "),oG=a("a"),Kwo=o("XLNetModel"),Zwo=o(" (XLNet model)"),eAo=l(),Xu=a("li"),pme=a("strong"),oAo=o("yolos"),rAo=o(" \u2014 "),rG=a("a"),tAo=o("YolosModel"),aAo=o(" (YOLOS model)"),nAo=l(),zu=a("li"),_me=a("strong"),sAo=o("yoso"),lAo=o(" \u2014 "),tG=a("a"),iAo=o("YosoModel"),dAo=o(" (YOSO model)"),cAo=l(),Qu=a("p"),fAo=o("The model is set in evaluation mode by default using "),ume=a("code"),mAo=o("model.eval()"),gAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),hAo=o("model.train()"),pAo=l(),F(Wu.$$.fragment),uXe=l(),zi=a("h2"),Hu=a("a"),vme=a("span"),F(NL.$$.fragment),_Ao=l(),Fme=a("span"),uAo=o("AutoModelForPreTraining"),bXe=l(),ko=a("div"),F(IL.$$.fragment),bAo=l(),Qi=a("p"),vAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aG=a("a"),FAo=o("from_pretrained()"),TAo=o(" class method or the "),nG=a("a"),MAo=o("from_config()"),EAo=o(` class
method.`),CAo=l(),qL=a("p"),wAo=o("This class cannot be instantiated directly using "),Tme=a("code"),AAo=o("__init__()"),LAo=o(" (throws an error)."),yAo=l(),dt=a("div"),F(jL.$$.fragment),xAo=l(),Mme=a("p"),$Ao=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kAo=l(),Wi=a("p"),SAo=o(`Note:
Loading a model from its configuration file does `),Eme=a("strong"),RAo=o("not"),PAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=a("a"),BAo=o("from_pretrained()"),NAo=o(" to load the model weights."),IAo=l(),F(Uu.$$.fragment),qAo=l(),Ke=a("div"),F(DL.$$.fragment),jAo=l(),Cme=a("p"),DAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GAo=l(),Ia=a("p"),OAo=o("The model class to instantiate is selected based on the "),wme=a("code"),VAo=o("model_type"),XAo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),zAo=o("pretrained_model_name_or_path"),QAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),WAo=o("pretrained_model_name_or_path"),HAo=o(":"),UAo=l(),G=a("ul"),Ju=a("li"),yme=a("strong"),JAo=o("albert"),YAo=o(" \u2014 "),lG=a("a"),KAo=o("AlbertForPreTraining"),ZAo=o(" (ALBERT model)"),e7o=l(),Yu=a("li"),xme=a("strong"),o7o=o("bart"),r7o=o(" \u2014 "),iG=a("a"),t7o=o("BartForConditionalGeneration"),a7o=o(" (BART model)"),n7o=l(),Ku=a("li"),$me=a("strong"),s7o=o("bert"),l7o=o(" \u2014 "),dG=a("a"),i7o=o("BertForPreTraining"),d7o=o(" (BERT model)"),c7o=l(),Zu=a("li"),kme=a("strong"),f7o=o("big_bird"),m7o=o(" \u2014 "),cG=a("a"),g7o=o("BigBirdForPreTraining"),h7o=o(" (BigBird model)"),p7o=l(),e1=a("li"),Sme=a("strong"),_7o=o("bloom"),u7o=o(" \u2014 "),fG=a("a"),b7o=o("BloomForCausalLM"),v7o=o(" (BLOOM model)"),F7o=l(),o1=a("li"),Rme=a("strong"),T7o=o("camembert"),M7o=o(" \u2014 "),mG=a("a"),E7o=o("CamembertForMaskedLM"),C7o=o(" (CamemBERT model)"),w7o=l(),r1=a("li"),Pme=a("strong"),A7o=o("ctrl"),L7o=o(" \u2014 "),gG=a("a"),y7o=o("CTRLLMHeadModel"),x7o=o(" (CTRL model)"),$7o=l(),t1=a("li"),Bme=a("strong"),k7o=o("data2vec-text"),S7o=o(" \u2014 "),hG=a("a"),R7o=o("Data2VecTextForMaskedLM"),P7o=o(" (Data2VecText model)"),B7o=l(),a1=a("li"),Nme=a("strong"),N7o=o("deberta"),I7o=o(" \u2014 "),pG=a("a"),q7o=o("DebertaForMaskedLM"),j7o=o(" (DeBERTa model)"),D7o=l(),n1=a("li"),Ime=a("strong"),G7o=o("deberta-v2"),O7o=o(" \u2014 "),_G=a("a"),V7o=o("DebertaV2ForMaskedLM"),X7o=o(" (DeBERTa-v2 model)"),z7o=l(),s1=a("li"),qme=a("strong"),Q7o=o("distilbert"),W7o=o(" \u2014 "),uG=a("a"),H7o=o("DistilBertForMaskedLM"),U7o=o(" (DistilBERT model)"),J7o=l(),l1=a("li"),jme=a("strong"),Y7o=o("electra"),K7o=o(" \u2014 "),bG=a("a"),Z7o=o("ElectraForPreTraining"),eLo=o(" (ELECTRA model)"),oLo=l(),i1=a("li"),Dme=a("strong"),rLo=o("flaubert"),tLo=o(" \u2014 "),vG=a("a"),aLo=o("FlaubertWithLMHeadModel"),nLo=o(" (FlauBERT model)"),sLo=l(),d1=a("li"),Gme=a("strong"),lLo=o("flava"),iLo=o(" \u2014 "),FG=a("a"),dLo=o("FlavaForPreTraining"),cLo=o(" (FLAVA model)"),fLo=l(),c1=a("li"),Ome=a("strong"),mLo=o("fnet"),gLo=o(" \u2014 "),TG=a("a"),hLo=o("FNetForPreTraining"),pLo=o(" (FNet model)"),_Lo=l(),f1=a("li"),Vme=a("strong"),uLo=o("fsmt"),bLo=o(" \u2014 "),MG=a("a"),vLo=o("FSMTForConditionalGeneration"),FLo=o(" (FairSeq Machine-Translation model)"),TLo=l(),m1=a("li"),Xme=a("strong"),MLo=o("funnel"),ELo=o(" \u2014 "),EG=a("a"),CLo=o("FunnelForPreTraining"),wLo=o(" (Funnel Transformer model)"),ALo=l(),g1=a("li"),zme=a("strong"),LLo=o("gpt2"),yLo=o(" \u2014 "),CG=a("a"),xLo=o("GPT2LMHeadModel"),$Lo=o(" (OpenAI GPT-2 model)"),kLo=l(),h1=a("li"),Qme=a("strong"),SLo=o("ibert"),RLo=o(" \u2014 "),wG=a("a"),PLo=o("IBertForMaskedLM"),BLo=o(" (I-BERT model)"),NLo=l(),p1=a("li"),Wme=a("strong"),ILo=o("layoutlm"),qLo=o(" \u2014 "),AG=a("a"),jLo=o("LayoutLMForMaskedLM"),DLo=o(" (LayoutLM model)"),GLo=l(),_1=a("li"),Hme=a("strong"),OLo=o("longformer"),VLo=o(" \u2014 "),LG=a("a"),XLo=o("LongformerForMaskedLM"),zLo=o(" (Longformer model)"),QLo=l(),u1=a("li"),Ume=a("strong"),WLo=o("lxmert"),HLo=o(" \u2014 "),yG=a("a"),ULo=o("LxmertForPreTraining"),JLo=o(" (LXMERT model)"),YLo=l(),b1=a("li"),Jme=a("strong"),KLo=o("megatron-bert"),ZLo=o(" \u2014 "),xG=a("a"),eyo=o("MegatronBertForPreTraining"),oyo=o(" (Megatron-BERT model)"),ryo=l(),v1=a("li"),Yme=a("strong"),tyo=o("mobilebert"),ayo=o(" \u2014 "),$G=a("a"),nyo=o("MobileBertForPreTraining"),syo=o(" (MobileBERT model)"),lyo=l(),F1=a("li"),Kme=a("strong"),iyo=o("mpnet"),dyo=o(" \u2014 "),kG=a("a"),cyo=o("MPNetForMaskedLM"),fyo=o(" (MPNet model)"),myo=l(),T1=a("li"),Zme=a("strong"),gyo=o("mvp"),hyo=o(" \u2014 "),SG=a("a"),pyo=o("MvpForConditionalGeneration"),_yo=o(" (MVP model)"),uyo=l(),M1=a("li"),ege=a("strong"),byo=o("nezha"),vyo=o(" \u2014 "),RG=a("a"),Fyo=o("NezhaForPreTraining"),Tyo=o(" (Nezha model)"),Myo=l(),E1=a("li"),oge=a("strong"),Eyo=o("openai-gpt"),Cyo=o(" \u2014 "),PG=a("a"),wyo=o("OpenAIGPTLMHeadModel"),Ayo=o(" (OpenAI GPT model)"),Lyo=l(),C1=a("li"),rge=a("strong"),yyo=o("retribert"),xyo=o(" \u2014 "),BG=a("a"),$yo=o("RetriBertModel"),kyo=o(" (RetriBERT model)"),Syo=l(),w1=a("li"),tge=a("strong"),Ryo=o("roberta"),Pyo=o(" \u2014 "),NG=a("a"),Byo=o("RobertaForMaskedLM"),Nyo=o(" (RoBERTa model)"),Iyo=l(),A1=a("li"),age=a("strong"),qyo=o("splinter"),jyo=o(" \u2014 "),IG=a("a"),Dyo=o("SplinterForPreTraining"),Gyo=o(" (Splinter model)"),Oyo=l(),L1=a("li"),nge=a("strong"),Vyo=o("squeezebert"),Xyo=o(" \u2014 "),qG=a("a"),zyo=o("SqueezeBertForMaskedLM"),Qyo=o(" (SqueezeBERT model)"),Wyo=l(),y1=a("li"),sge=a("strong"),Hyo=o("t5"),Uyo=o(" \u2014 "),jG=a("a"),Jyo=o("T5ForConditionalGeneration"),Yyo=o(" (T5 model)"),Kyo=l(),x1=a("li"),lge=a("strong"),Zyo=o("tapas"),e9o=o(" \u2014 "),DG=a("a"),o9o=o("TapasForMaskedLM"),r9o=o(" (TAPAS model)"),t9o=l(),$1=a("li"),ige=a("strong"),a9o=o("transfo-xl"),n9o=o(" \u2014 "),GG=a("a"),s9o=o("TransfoXLLMHeadModel"),l9o=o(" (Transformer-XL model)"),i9o=l(),k1=a("li"),dge=a("strong"),d9o=o("unispeech"),c9o=o(" \u2014 "),OG=a("a"),f9o=o("UniSpeechForPreTraining"),m9o=o(" (UniSpeech model)"),g9o=l(),S1=a("li"),cge=a("strong"),h9o=o("unispeech-sat"),p9o=o(" \u2014 "),VG=a("a"),_9o=o("UniSpeechSatForPreTraining"),u9o=o(" (UniSpeechSat model)"),b9o=l(),R1=a("li"),fge=a("strong"),v9o=o("visual_bert"),F9o=o(" \u2014 "),XG=a("a"),T9o=o("VisualBertForPreTraining"),M9o=o(" (VisualBERT model)"),E9o=l(),P1=a("li"),mge=a("strong"),C9o=o("vit_mae"),w9o=o(" \u2014 "),zG=a("a"),A9o=o("ViTMAEForPreTraining"),L9o=o(" (ViTMAE model)"),y9o=l(),B1=a("li"),gge=a("strong"),x9o=o("wav2vec2"),$9o=o(" \u2014 "),QG=a("a"),k9o=o("Wav2Vec2ForPreTraining"),S9o=o(" (Wav2Vec2 model)"),R9o=l(),N1=a("li"),hge=a("strong"),P9o=o("wav2vec2-conformer"),B9o=o(" \u2014 "),WG=a("a"),N9o=o("Wav2Vec2ConformerForPreTraining"),I9o=o(" (Wav2Vec2-Conformer model)"),q9o=l(),I1=a("li"),pge=a("strong"),j9o=o("xlm"),D9o=o(" \u2014 "),HG=a("a"),G9o=o("XLMWithLMHeadModel"),O9o=o(" (XLM model)"),V9o=l(),q1=a("li"),_ge=a("strong"),X9o=o("xlm-roberta"),z9o=o(" \u2014 "),UG=a("a"),Q9o=o("XLMRobertaForMaskedLM"),W9o=o(" (XLM-RoBERTa model)"),H9o=l(),j1=a("li"),uge=a("strong"),U9o=o("xlm-roberta-xl"),J9o=o(" \u2014 "),JG=a("a"),Y9o=o("XLMRobertaXLForMaskedLM"),K9o=o(" (XLM-RoBERTa-XL model)"),Z9o=l(),D1=a("li"),bge=a("strong"),exo=o("xlnet"),oxo=o(" \u2014 "),YG=a("a"),rxo=o("XLNetLMHeadModel"),txo=o(" (XLNet model)"),axo=l(),G1=a("p"),nxo=o("The model is set in evaluation mode by default using "),vge=a("code"),sxo=o("model.eval()"),lxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fge=a("code"),ixo=o("model.train()"),dxo=l(),F(O1.$$.fragment),vXe=l(),Hi=a("h2"),V1=a("a"),Tge=a("span"),F(GL.$$.fragment),cxo=l(),Mge=a("span"),fxo=o("AutoModelForCausalLM"),FXe=l(),So=a("div"),F(OL.$$.fragment),mxo=l(),Ui=a("p"),gxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KG=a("a"),hxo=o("from_pretrained()"),pxo=o(" class method or the "),ZG=a("a"),_xo=o("from_config()"),uxo=o(` class
method.`),bxo=l(),VL=a("p"),vxo=o("This class cannot be instantiated directly using "),Ege=a("code"),Fxo=o("__init__()"),Txo=o(" (throws an error)."),Mxo=l(),ct=a("div"),F(XL.$$.fragment),Exo=l(),Cge=a("p"),Cxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wxo=l(),Ji=a("p"),Axo=o(`Note:
Loading a model from its configuration file does `),wge=a("strong"),Lxo=o("not"),yxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),xxo=o("from_pretrained()"),$xo=o(" to load the model weights."),kxo=l(),F(X1.$$.fragment),Sxo=l(),Ze=a("div"),F(zL.$$.fragment),Rxo=l(),Age=a("p"),Pxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bxo=l(),qa=a("p"),Nxo=o("The model class to instantiate is selected based on the "),Lge=a("code"),Ixo=o("model_type"),qxo=o(` property of the config object (either
passed as an argument or loaded from `),yge=a("code"),jxo=o("pretrained_model_name_or_path"),Dxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=a("code"),Gxo=o("pretrained_model_name_or_path"),Oxo=o(":"),Vxo=l(),z=a("ul"),z1=a("li"),$ge=a("strong"),Xxo=o("bart"),zxo=o(" \u2014 "),oO=a("a"),Qxo=o("BartForCausalLM"),Wxo=o(" (BART model)"),Hxo=l(),Q1=a("li"),kge=a("strong"),Uxo=o("bert"),Jxo=o(" \u2014 "),rO=a("a"),Yxo=o("BertLMHeadModel"),Kxo=o(" (BERT model)"),Zxo=l(),W1=a("li"),Sge=a("strong"),e$o=o("bert-generation"),o$o=o(" \u2014 "),tO=a("a"),r$o=o("BertGenerationDecoder"),t$o=o(" (Bert Generation model)"),a$o=l(),H1=a("li"),Rge=a("strong"),n$o=o("big_bird"),s$o=o(" \u2014 "),aO=a("a"),l$o=o("BigBirdForCausalLM"),i$o=o(" (BigBird model)"),d$o=l(),U1=a("li"),Pge=a("strong"),c$o=o("bigbird_pegasus"),f$o=o(" \u2014 "),nO=a("a"),m$o=o("BigBirdPegasusForCausalLM"),g$o=o(" (BigBird-Pegasus model)"),h$o=l(),J1=a("li"),Bge=a("strong"),p$o=o("blenderbot"),_$o=o(" \u2014 "),sO=a("a"),u$o=o("BlenderbotForCausalLM"),b$o=o(" (Blenderbot model)"),v$o=l(),Y1=a("li"),Nge=a("strong"),F$o=o("blenderbot-small"),T$o=o(" \u2014 "),lO=a("a"),M$o=o("BlenderbotSmallForCausalLM"),E$o=o(" (BlenderbotSmall model)"),C$o=l(),K1=a("li"),Ige=a("strong"),w$o=o("bloom"),A$o=o(" \u2014 "),iO=a("a"),L$o=o("BloomForCausalLM"),y$o=o(" (BLOOM model)"),x$o=l(),Z1=a("li"),qge=a("strong"),$$o=o("camembert"),k$o=o(" \u2014 "),dO=a("a"),S$o=o("CamembertForCausalLM"),R$o=o(" (CamemBERT model)"),P$o=l(),e2=a("li"),jge=a("strong"),B$o=o("codegen"),N$o=o(" \u2014 "),cO=a("a"),I$o=o("CodeGenForCausalLM"),q$o=o(" (CodeGen model)"),j$o=l(),o2=a("li"),Dge=a("strong"),D$o=o("ctrl"),G$o=o(" \u2014 "),fO=a("a"),O$o=o("CTRLLMHeadModel"),V$o=o(" (CTRL model)"),X$o=l(),r2=a("li"),Gge=a("strong"),z$o=o("data2vec-text"),Q$o=o(" \u2014 "),mO=a("a"),W$o=o("Data2VecTextForCausalLM"),H$o=o(" (Data2VecText model)"),U$o=l(),t2=a("li"),Oge=a("strong"),J$o=o("electra"),Y$o=o(" \u2014 "),gO=a("a"),K$o=o("ElectraForCausalLM"),Z$o=o(" (ELECTRA model)"),eko=l(),a2=a("li"),Vge=a("strong"),oko=o("gpt2"),rko=o(" \u2014 "),hO=a("a"),tko=o("GPT2LMHeadModel"),ako=o(" (OpenAI GPT-2 model)"),nko=l(),n2=a("li"),Xge=a("strong"),sko=o("gpt_neo"),lko=o(" \u2014 "),pO=a("a"),iko=o("GPTNeoForCausalLM"),dko=o(" (GPT Neo model)"),cko=l(),s2=a("li"),zge=a("strong"),fko=o("gpt_neox"),mko=o(" \u2014 "),_O=a("a"),gko=o("GPTNeoXForCausalLM"),hko=o(" (GPT NeoX model)"),pko=l(),l2=a("li"),Qge=a("strong"),_ko=o("gptj"),uko=o(" \u2014 "),uO=a("a"),bko=o("GPTJForCausalLM"),vko=o(" (GPT-J model)"),Fko=l(),i2=a("li"),Wge=a("strong"),Tko=o("marian"),Mko=o(" \u2014 "),bO=a("a"),Eko=o("MarianForCausalLM"),Cko=o(" (Marian model)"),wko=l(),d2=a("li"),Hge=a("strong"),Ako=o("mbart"),Lko=o(" \u2014 "),vO=a("a"),yko=o("MBartForCausalLM"),xko=o(" (mBART model)"),$ko=l(),c2=a("li"),Uge=a("strong"),kko=o("megatron-bert"),Sko=o(" \u2014 "),FO=a("a"),Rko=o("MegatronBertForCausalLM"),Pko=o(" (Megatron-BERT model)"),Bko=l(),f2=a("li"),Jge=a("strong"),Nko=o("mvp"),Iko=o(" \u2014 "),TO=a("a"),qko=o("MvpForCausalLM"),jko=o(" (MVP model)"),Dko=l(),m2=a("li"),Yge=a("strong"),Gko=o("openai-gpt"),Oko=o(" \u2014 "),MO=a("a"),Vko=o("OpenAIGPTLMHeadModel"),Xko=o(" (OpenAI GPT model)"),zko=l(),g2=a("li"),Kge=a("strong"),Qko=o("opt"),Wko=o(" \u2014 "),EO=a("a"),Hko=o("OPTForCausalLM"),Uko=o(" (OPT model)"),Jko=l(),h2=a("li"),Zge=a("strong"),Yko=o("pegasus"),Kko=o(" \u2014 "),CO=a("a"),Zko=o("PegasusForCausalLM"),eSo=o(" (Pegasus model)"),oSo=l(),p2=a("li"),ehe=a("strong"),rSo=o("plbart"),tSo=o(" \u2014 "),wO=a("a"),aSo=o("PLBartForCausalLM"),nSo=o(" (PLBart model)"),sSo=l(),_2=a("li"),ohe=a("strong"),lSo=o("prophetnet"),iSo=o(" \u2014 "),AO=a("a"),dSo=o("ProphetNetForCausalLM"),cSo=o(" (ProphetNet model)"),fSo=l(),u2=a("li"),rhe=a("strong"),mSo=o("qdqbert"),gSo=o(" \u2014 "),LO=a("a"),hSo=o("QDQBertLMHeadModel"),pSo=o(" (QDQBert model)"),_So=l(),b2=a("li"),the=a("strong"),uSo=o("reformer"),bSo=o(" \u2014 "),yO=a("a"),vSo=o("ReformerModelWithLMHead"),FSo=o(" (Reformer model)"),TSo=l(),v2=a("li"),ahe=a("strong"),MSo=o("rembert"),ESo=o(" \u2014 "),xO=a("a"),CSo=o("RemBertForCausalLM"),wSo=o(" (RemBERT model)"),ASo=l(),F2=a("li"),nhe=a("strong"),LSo=o("roberta"),ySo=o(" \u2014 "),$O=a("a"),xSo=o("RobertaForCausalLM"),$So=o(" (RoBERTa model)"),kSo=l(),T2=a("li"),she=a("strong"),SSo=o("roformer"),RSo=o(" \u2014 "),kO=a("a"),PSo=o("RoFormerForCausalLM"),BSo=o(" (RoFormer model)"),NSo=l(),M2=a("li"),lhe=a("strong"),ISo=o("speech_to_text_2"),qSo=o(" \u2014 "),SO=a("a"),jSo=o("Speech2Text2ForCausalLM"),DSo=o(" (Speech2Text2 model)"),GSo=l(),E2=a("li"),ihe=a("strong"),OSo=o("transfo-xl"),VSo=o(" \u2014 "),RO=a("a"),XSo=o("TransfoXLLMHeadModel"),zSo=o(" (Transformer-XL model)"),QSo=l(),C2=a("li"),dhe=a("strong"),WSo=o("trocr"),HSo=o(" \u2014 "),PO=a("a"),USo=o("TrOCRForCausalLM"),JSo=o(" (TrOCR model)"),YSo=l(),w2=a("li"),che=a("strong"),KSo=o("xglm"),ZSo=o(" \u2014 "),BO=a("a"),eRo=o("XGLMForCausalLM"),oRo=o(" (XGLM model)"),rRo=l(),A2=a("li"),fhe=a("strong"),tRo=o("xlm"),aRo=o(" \u2014 "),NO=a("a"),nRo=o("XLMWithLMHeadModel"),sRo=o(" (XLM model)"),lRo=l(),L2=a("li"),mhe=a("strong"),iRo=o("xlm-prophetnet"),dRo=o(" \u2014 "),IO=a("a"),cRo=o("XLMProphetNetForCausalLM"),fRo=o(" (XLM-ProphetNet model)"),mRo=l(),y2=a("li"),ghe=a("strong"),gRo=o("xlm-roberta"),hRo=o(" \u2014 "),qO=a("a"),pRo=o("XLMRobertaForCausalLM"),_Ro=o(" (XLM-RoBERTa model)"),uRo=l(),x2=a("li"),hhe=a("strong"),bRo=o("xlm-roberta-xl"),vRo=o(" \u2014 "),jO=a("a"),FRo=o("XLMRobertaXLForCausalLM"),TRo=o(" (XLM-RoBERTa-XL model)"),MRo=l(),$2=a("li"),phe=a("strong"),ERo=o("xlnet"),CRo=o(" \u2014 "),DO=a("a"),wRo=o("XLNetLMHeadModel"),ARo=o(" (XLNet model)"),LRo=l(),k2=a("p"),yRo=o("The model is set in evaluation mode by default using "),_he=a("code"),xRo=o("model.eval()"),$Ro=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=a("code"),kRo=o("model.train()"),SRo=l(),F(S2.$$.fragment),TXe=l(),Yi=a("h2"),R2=a("a"),bhe=a("span"),F(QL.$$.fragment),RRo=l(),vhe=a("span"),PRo=o("AutoModelForMaskedLM"),MXe=l(),Ro=a("div"),F(WL.$$.fragment),BRo=l(),Ki=a("p"),NRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GO=a("a"),IRo=o("from_pretrained()"),qRo=o(" class method or the "),OO=a("a"),jRo=o("from_config()"),DRo=o(` class
method.`),GRo=l(),HL=a("p"),ORo=o("This class cannot be instantiated directly using "),Fhe=a("code"),VRo=o("__init__()"),XRo=o(" (throws an error)."),zRo=l(),ft=a("div"),F(UL.$$.fragment),QRo=l(),The=a("p"),WRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HRo=l(),Zi=a("p"),URo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),JRo=o("not"),YRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),KRo=o("from_pretrained()"),ZRo=o(" to load the model weights."),ePo=l(),F(P2.$$.fragment),oPo=l(),eo=a("div"),F(JL.$$.fragment),rPo=l(),Ehe=a("p"),tPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aPo=l(),ja=a("p"),nPo=o("The model class to instantiate is selected based on the "),Che=a("code"),sPo=o("model_type"),lPo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),iPo=o("pretrained_model_name_or_path"),dPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),cPo=o("pretrained_model_name_or_path"),fPo=o(":"),mPo=l(),W=a("ul"),B2=a("li"),Lhe=a("strong"),gPo=o("albert"),hPo=o(" \u2014 "),XO=a("a"),pPo=o("AlbertForMaskedLM"),_Po=o(" (ALBERT model)"),uPo=l(),N2=a("li"),yhe=a("strong"),bPo=o("bart"),vPo=o(" \u2014 "),zO=a("a"),FPo=o("BartForConditionalGeneration"),TPo=o(" (BART model)"),MPo=l(),I2=a("li"),xhe=a("strong"),EPo=o("bert"),CPo=o(" \u2014 "),QO=a("a"),wPo=o("BertForMaskedLM"),APo=o(" (BERT model)"),LPo=l(),q2=a("li"),$he=a("strong"),yPo=o("big_bird"),xPo=o(" \u2014 "),WO=a("a"),$Po=o("BigBirdForMaskedLM"),kPo=o(" (BigBird model)"),SPo=l(),j2=a("li"),khe=a("strong"),RPo=o("camembert"),PPo=o(" \u2014 "),HO=a("a"),BPo=o("CamembertForMaskedLM"),NPo=o(" (CamemBERT model)"),IPo=l(),D2=a("li"),She=a("strong"),qPo=o("convbert"),jPo=o(" \u2014 "),UO=a("a"),DPo=o("ConvBertForMaskedLM"),GPo=o(" (ConvBERT model)"),OPo=l(),G2=a("li"),Rhe=a("strong"),VPo=o("data2vec-text"),XPo=o(" \u2014 "),JO=a("a"),zPo=o("Data2VecTextForMaskedLM"),QPo=o(" (Data2VecText model)"),WPo=l(),O2=a("li"),Phe=a("strong"),HPo=o("deberta"),UPo=o(" \u2014 "),YO=a("a"),JPo=o("DebertaForMaskedLM"),YPo=o(" (DeBERTa model)"),KPo=l(),V2=a("li"),Bhe=a("strong"),ZPo=o("deberta-v2"),eBo=o(" \u2014 "),KO=a("a"),oBo=o("DebertaV2ForMaskedLM"),rBo=o(" (DeBERTa-v2 model)"),tBo=l(),X2=a("li"),Nhe=a("strong"),aBo=o("distilbert"),nBo=o(" \u2014 "),ZO=a("a"),sBo=o("DistilBertForMaskedLM"),lBo=o(" (DistilBERT model)"),iBo=l(),z2=a("li"),Ihe=a("strong"),dBo=o("electra"),cBo=o(" \u2014 "),eV=a("a"),fBo=o("ElectraForMaskedLM"),mBo=o(" (ELECTRA model)"),gBo=l(),Q2=a("li"),qhe=a("strong"),hBo=o("flaubert"),pBo=o(" \u2014 "),oV=a("a"),_Bo=o("FlaubertWithLMHeadModel"),uBo=o(" (FlauBERT model)"),bBo=l(),W2=a("li"),jhe=a("strong"),vBo=o("fnet"),FBo=o(" \u2014 "),rV=a("a"),TBo=o("FNetForMaskedLM"),MBo=o(" (FNet model)"),EBo=l(),H2=a("li"),Dhe=a("strong"),CBo=o("funnel"),wBo=o(" \u2014 "),tV=a("a"),ABo=o("FunnelForMaskedLM"),LBo=o(" (Funnel Transformer model)"),yBo=l(),U2=a("li"),Ghe=a("strong"),xBo=o("ibert"),$Bo=o(" \u2014 "),aV=a("a"),kBo=o("IBertForMaskedLM"),SBo=o(" (I-BERT model)"),RBo=l(),J2=a("li"),Ohe=a("strong"),PBo=o("layoutlm"),BBo=o(" \u2014 "),nV=a("a"),NBo=o("LayoutLMForMaskedLM"),IBo=o(" (LayoutLM model)"),qBo=l(),Y2=a("li"),Vhe=a("strong"),jBo=o("longformer"),DBo=o(" \u2014 "),sV=a("a"),GBo=o("LongformerForMaskedLM"),OBo=o(" (Longformer model)"),VBo=l(),K2=a("li"),Xhe=a("strong"),XBo=o("luke"),zBo=o(" \u2014 "),lV=a("a"),QBo=o("LukeForMaskedLM"),WBo=o(" (LUKE model)"),HBo=l(),Z2=a("li"),zhe=a("strong"),UBo=o("mbart"),JBo=o(" \u2014 "),iV=a("a"),YBo=o("MBartForConditionalGeneration"),KBo=o(" (mBART model)"),ZBo=l(),eb=a("li"),Qhe=a("strong"),eNo=o("megatron-bert"),oNo=o(" \u2014 "),dV=a("a"),rNo=o("MegatronBertForMaskedLM"),tNo=o(" (Megatron-BERT model)"),aNo=l(),ob=a("li"),Whe=a("strong"),nNo=o("mobilebert"),sNo=o(" \u2014 "),cV=a("a"),lNo=o("MobileBertForMaskedLM"),iNo=o(" (MobileBERT model)"),dNo=l(),rb=a("li"),Hhe=a("strong"),cNo=o("mpnet"),fNo=o(" \u2014 "),fV=a("a"),mNo=o("MPNetForMaskedLM"),gNo=o(" (MPNet model)"),hNo=l(),tb=a("li"),Uhe=a("strong"),pNo=o("mvp"),_No=o(" \u2014 "),mV=a("a"),uNo=o("MvpForConditionalGeneration"),bNo=o(" (MVP model)"),vNo=l(),ab=a("li"),Jhe=a("strong"),FNo=o("nezha"),TNo=o(" \u2014 "),gV=a("a"),MNo=o("NezhaForMaskedLM"),ENo=o(" (Nezha model)"),CNo=l(),nb=a("li"),Yhe=a("strong"),wNo=o("nystromformer"),ANo=o(" \u2014 "),hV=a("a"),LNo=o("NystromformerForMaskedLM"),yNo=o(" (Nystr\xF6mformer model)"),xNo=l(),sb=a("li"),Khe=a("strong"),$No=o("perceiver"),kNo=o(" \u2014 "),pV=a("a"),SNo=o("PerceiverForMaskedLM"),RNo=o(" (Perceiver model)"),PNo=l(),lb=a("li"),Zhe=a("strong"),BNo=o("qdqbert"),NNo=o(" \u2014 "),_V=a("a"),INo=o("QDQBertForMaskedLM"),qNo=o(" (QDQBert model)"),jNo=l(),ib=a("li"),epe=a("strong"),DNo=o("reformer"),GNo=o(" \u2014 "),uV=a("a"),ONo=o("ReformerForMaskedLM"),VNo=o(" (Reformer model)"),XNo=l(),db=a("li"),ope=a("strong"),zNo=o("rembert"),QNo=o(" \u2014 "),bV=a("a"),WNo=o("RemBertForMaskedLM"),HNo=o(" (RemBERT model)"),UNo=l(),cb=a("li"),rpe=a("strong"),JNo=o("roberta"),YNo=o(" \u2014 "),vV=a("a"),KNo=o("RobertaForMaskedLM"),ZNo=o(" (RoBERTa model)"),eIo=l(),fb=a("li"),tpe=a("strong"),oIo=o("roformer"),rIo=o(" \u2014 "),FV=a("a"),tIo=o("RoFormerForMaskedLM"),aIo=o(" (RoFormer model)"),nIo=l(),mb=a("li"),ape=a("strong"),sIo=o("squeezebert"),lIo=o(" \u2014 "),TV=a("a"),iIo=o("SqueezeBertForMaskedLM"),dIo=o(" (SqueezeBERT model)"),cIo=l(),gb=a("li"),npe=a("strong"),fIo=o("tapas"),mIo=o(" \u2014 "),MV=a("a"),gIo=o("TapasForMaskedLM"),hIo=o(" (TAPAS model)"),pIo=l(),hb=a("li"),spe=a("strong"),_Io=o("wav2vec2"),uIo=o(" \u2014 "),lpe=a("code"),bIo=o("Wav2Vec2ForMaskedLM"),vIo=o(" (Wav2Vec2 model)"),FIo=l(),pb=a("li"),ipe=a("strong"),TIo=o("xlm"),MIo=o(" \u2014 "),EV=a("a"),EIo=o("XLMWithLMHeadModel"),CIo=o(" (XLM model)"),wIo=l(),_b=a("li"),dpe=a("strong"),AIo=o("xlm-roberta"),LIo=o(" \u2014 "),CV=a("a"),yIo=o("XLMRobertaForMaskedLM"),xIo=o(" (XLM-RoBERTa model)"),$Io=l(),ub=a("li"),cpe=a("strong"),kIo=o("xlm-roberta-xl"),SIo=o(" \u2014 "),wV=a("a"),RIo=o("XLMRobertaXLForMaskedLM"),PIo=o(" (XLM-RoBERTa-XL model)"),BIo=l(),bb=a("li"),fpe=a("strong"),NIo=o("yoso"),IIo=o(" \u2014 "),AV=a("a"),qIo=o("YosoForMaskedLM"),jIo=o(" (YOSO model)"),DIo=l(),vb=a("p"),GIo=o("The model is set in evaluation mode by default using "),mpe=a("code"),OIo=o("model.eval()"),VIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),XIo=o("model.train()"),zIo=l(),F(Fb.$$.fragment),EXe=l(),ed=a("h2"),Tb=a("a"),hpe=a("span"),F(YL.$$.fragment),QIo=l(),ppe=a("span"),WIo=o("AutoModelForSeq2SeqLM"),CXe=l(),Po=a("div"),F(KL.$$.fragment),HIo=l(),od=a("p"),UIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LV=a("a"),JIo=o("from_pretrained()"),YIo=o(" class method or the "),yV=a("a"),KIo=o("from_config()"),ZIo=o(` class
method.`),eqo=l(),ZL=a("p"),oqo=o("This class cannot be instantiated directly using "),_pe=a("code"),rqo=o("__init__()"),tqo=o(" (throws an error)."),aqo=l(),mt=a("div"),F(ey.$$.fragment),nqo=l(),upe=a("p"),sqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lqo=l(),rd=a("p"),iqo=o(`Note:
Loading a model from its configuration file does `),bpe=a("strong"),dqo=o("not"),cqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),fqo=o("from_pretrained()"),mqo=o(" to load the model weights."),gqo=l(),F(Mb.$$.fragment),hqo=l(),oo=a("div"),F(oy.$$.fragment),pqo=l(),vpe=a("p"),_qo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uqo=l(),Da=a("p"),bqo=o("The model class to instantiate is selected based on the "),Fpe=a("code"),vqo=o("model_type"),Fqo=o(` property of the config object (either
passed as an argument or loaded from `),Tpe=a("code"),Tqo=o("pretrained_model_name_or_path"),Mqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),Eqo=o("pretrained_model_name_or_path"),Cqo=o(":"),wqo=l(),pe=a("ul"),Eb=a("li"),Epe=a("strong"),Aqo=o("bart"),Lqo=o(" \u2014 "),$V=a("a"),yqo=o("BartForConditionalGeneration"),xqo=o(" (BART model)"),$qo=l(),Cb=a("li"),Cpe=a("strong"),kqo=o("bigbird_pegasus"),Sqo=o(" \u2014 "),kV=a("a"),Rqo=o("BigBirdPegasusForConditionalGeneration"),Pqo=o(" (BigBird-Pegasus model)"),Bqo=l(),wb=a("li"),wpe=a("strong"),Nqo=o("blenderbot"),Iqo=o(" \u2014 "),SV=a("a"),qqo=o("BlenderbotForConditionalGeneration"),jqo=o(" (Blenderbot model)"),Dqo=l(),Ab=a("li"),Ape=a("strong"),Gqo=o("blenderbot-small"),Oqo=o(" \u2014 "),RV=a("a"),Vqo=o("BlenderbotSmallForConditionalGeneration"),Xqo=o(" (BlenderbotSmall model)"),zqo=l(),Lb=a("li"),Lpe=a("strong"),Qqo=o("encoder-decoder"),Wqo=o(" \u2014 "),PV=a("a"),Hqo=o("EncoderDecoderModel"),Uqo=o(" (Encoder decoder model)"),Jqo=l(),yb=a("li"),ype=a("strong"),Yqo=o("fsmt"),Kqo=o(" \u2014 "),BV=a("a"),Zqo=o("FSMTForConditionalGeneration"),ejo=o(" (FairSeq Machine-Translation model)"),ojo=l(),xb=a("li"),xpe=a("strong"),rjo=o("led"),tjo=o(" \u2014 "),NV=a("a"),ajo=o("LEDForConditionalGeneration"),njo=o(" (LED model)"),sjo=l(),$b=a("li"),$pe=a("strong"),ljo=o("longt5"),ijo=o(" \u2014 "),IV=a("a"),djo=o("LongT5ForConditionalGeneration"),cjo=o(" (LongT5 model)"),fjo=l(),kb=a("li"),kpe=a("strong"),mjo=o("m2m_100"),gjo=o(" \u2014 "),qV=a("a"),hjo=o("M2M100ForConditionalGeneration"),pjo=o(" (M2M100 model)"),_jo=l(),Sb=a("li"),Spe=a("strong"),ujo=o("marian"),bjo=o(" \u2014 "),jV=a("a"),vjo=o("MarianMTModel"),Fjo=o(" (Marian model)"),Tjo=l(),Rb=a("li"),Rpe=a("strong"),Mjo=o("mbart"),Ejo=o(" \u2014 "),DV=a("a"),Cjo=o("MBartForConditionalGeneration"),wjo=o(" (mBART model)"),Ajo=l(),Pb=a("li"),Ppe=a("strong"),Ljo=o("mt5"),yjo=o(" \u2014 "),GV=a("a"),xjo=o("MT5ForConditionalGeneration"),$jo=o(" (MT5 model)"),kjo=l(),Bb=a("li"),Bpe=a("strong"),Sjo=o("mvp"),Rjo=o(" \u2014 "),OV=a("a"),Pjo=o("MvpForConditionalGeneration"),Bjo=o(" (MVP model)"),Njo=l(),Nb=a("li"),Npe=a("strong"),Ijo=o("pegasus"),qjo=o(" \u2014 "),VV=a("a"),jjo=o("PegasusForConditionalGeneration"),Djo=o(" (Pegasus model)"),Gjo=l(),Ib=a("li"),Ipe=a("strong"),Ojo=o("plbart"),Vjo=o(" \u2014 "),XV=a("a"),Xjo=o("PLBartForConditionalGeneration"),zjo=o(" (PLBart model)"),Qjo=l(),qb=a("li"),qpe=a("strong"),Wjo=o("prophetnet"),Hjo=o(" \u2014 "),zV=a("a"),Ujo=o("ProphetNetForConditionalGeneration"),Jjo=o(" (ProphetNet model)"),Yjo=l(),jb=a("li"),jpe=a("strong"),Kjo=o("t5"),Zjo=o(" \u2014 "),QV=a("a"),eDo=o("T5ForConditionalGeneration"),oDo=o(" (T5 model)"),rDo=l(),Db=a("li"),Dpe=a("strong"),tDo=o("xlm-prophetnet"),aDo=o(" \u2014 "),WV=a("a"),nDo=o("XLMProphetNetForConditionalGeneration"),sDo=o(" (XLM-ProphetNet model)"),lDo=l(),Gb=a("p"),iDo=o("The model is set in evaluation mode by default using "),Gpe=a("code"),dDo=o("model.eval()"),cDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=a("code"),fDo=o("model.train()"),mDo=l(),F(Ob.$$.fragment),wXe=l(),td=a("h2"),Vb=a("a"),Vpe=a("span"),F(ry.$$.fragment),gDo=l(),Xpe=a("span"),hDo=o("AutoModelForSequenceClassification"),AXe=l(),Bo=a("div"),F(ty.$$.fragment),pDo=l(),ad=a("p"),_Do=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HV=a("a"),uDo=o("from_pretrained()"),bDo=o(" class method or the "),UV=a("a"),vDo=o("from_config()"),FDo=o(` class
method.`),TDo=l(),ay=a("p"),MDo=o("This class cannot be instantiated directly using "),zpe=a("code"),EDo=o("__init__()"),CDo=o(" (throws an error)."),wDo=l(),gt=a("div"),F(ny.$$.fragment),ADo=l(),Qpe=a("p"),LDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yDo=l(),nd=a("p"),xDo=o(`Note:
Loading a model from its configuration file does `),Wpe=a("strong"),$Do=o("not"),kDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),SDo=o("from_pretrained()"),RDo=o(" to load the model weights."),PDo=l(),F(Xb.$$.fragment),BDo=l(),ro=a("div"),F(sy.$$.fragment),NDo=l(),Hpe=a("p"),IDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qDo=l(),Ga=a("p"),jDo=o("The model class to instantiate is selected based on the "),Upe=a("code"),DDo=o("model_type"),GDo=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),ODo=o("pretrained_model_name_or_path"),VDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),XDo=o("pretrained_model_name_or_path"),zDo=o(":"),QDo=l(),I=a("ul"),zb=a("li"),Kpe=a("strong"),WDo=o("albert"),HDo=o(" \u2014 "),YV=a("a"),UDo=o("AlbertForSequenceClassification"),JDo=o(" (ALBERT model)"),YDo=l(),Qb=a("li"),Zpe=a("strong"),KDo=o("bart"),ZDo=o(" \u2014 "),KV=a("a"),eGo=o("BartForSequenceClassification"),oGo=o(" (BART model)"),rGo=l(),Wb=a("li"),e_e=a("strong"),tGo=o("bert"),aGo=o(" \u2014 "),ZV=a("a"),nGo=o("BertForSequenceClassification"),sGo=o(" (BERT model)"),lGo=l(),Hb=a("li"),o_e=a("strong"),iGo=o("big_bird"),dGo=o(" \u2014 "),eX=a("a"),cGo=o("BigBirdForSequenceClassification"),fGo=o(" (BigBird model)"),mGo=l(),Ub=a("li"),r_e=a("strong"),gGo=o("bigbird_pegasus"),hGo=o(" \u2014 "),oX=a("a"),pGo=o("BigBirdPegasusForSequenceClassification"),_Go=o(" (BigBird-Pegasus model)"),uGo=l(),Jb=a("li"),t_e=a("strong"),bGo=o("bloom"),vGo=o(" \u2014 "),rX=a("a"),FGo=o("BloomForSequenceClassification"),TGo=o(" (BLOOM model)"),MGo=l(),Yb=a("li"),a_e=a("strong"),EGo=o("camembert"),CGo=o(" \u2014 "),tX=a("a"),wGo=o("CamembertForSequenceClassification"),AGo=o(" (CamemBERT model)"),LGo=l(),Kb=a("li"),n_e=a("strong"),yGo=o("canine"),xGo=o(" \u2014 "),aX=a("a"),$Go=o("CanineForSequenceClassification"),kGo=o(" (CANINE model)"),SGo=l(),Zb=a("li"),s_e=a("strong"),RGo=o("convbert"),PGo=o(" \u2014 "),nX=a("a"),BGo=o("ConvBertForSequenceClassification"),NGo=o(" (ConvBERT model)"),IGo=l(),ev=a("li"),l_e=a("strong"),qGo=o("ctrl"),jGo=o(" \u2014 "),sX=a("a"),DGo=o("CTRLForSequenceClassification"),GGo=o(" (CTRL model)"),OGo=l(),ov=a("li"),i_e=a("strong"),VGo=o("data2vec-text"),XGo=o(" \u2014 "),lX=a("a"),zGo=o("Data2VecTextForSequenceClassification"),QGo=o(" (Data2VecText model)"),WGo=l(),rv=a("li"),d_e=a("strong"),HGo=o("deberta"),UGo=o(" \u2014 "),iX=a("a"),JGo=o("DebertaForSequenceClassification"),YGo=o(" (DeBERTa model)"),KGo=l(),tv=a("li"),c_e=a("strong"),ZGo=o("deberta-v2"),eOo=o(" \u2014 "),dX=a("a"),oOo=o("DebertaV2ForSequenceClassification"),rOo=o(" (DeBERTa-v2 model)"),tOo=l(),av=a("li"),f_e=a("strong"),aOo=o("distilbert"),nOo=o(" \u2014 "),cX=a("a"),sOo=o("DistilBertForSequenceClassification"),lOo=o(" (DistilBERT model)"),iOo=l(),nv=a("li"),m_e=a("strong"),dOo=o("electra"),cOo=o(" \u2014 "),fX=a("a"),fOo=o("ElectraForSequenceClassification"),mOo=o(" (ELECTRA model)"),gOo=l(),sv=a("li"),g_e=a("strong"),hOo=o("flaubert"),pOo=o(" \u2014 "),mX=a("a"),_Oo=o("FlaubertForSequenceClassification"),uOo=o(" (FlauBERT model)"),bOo=l(),lv=a("li"),h_e=a("strong"),vOo=o("fnet"),FOo=o(" \u2014 "),gX=a("a"),TOo=o("FNetForSequenceClassification"),MOo=o(" (FNet model)"),EOo=l(),iv=a("li"),p_e=a("strong"),COo=o("funnel"),wOo=o(" \u2014 "),hX=a("a"),AOo=o("FunnelForSequenceClassification"),LOo=o(" (Funnel Transformer model)"),yOo=l(),dv=a("li"),__e=a("strong"),xOo=o("gpt2"),$Oo=o(" \u2014 "),pX=a("a"),kOo=o("GPT2ForSequenceClassification"),SOo=o(" (OpenAI GPT-2 model)"),ROo=l(),cv=a("li"),u_e=a("strong"),POo=o("gpt_neo"),BOo=o(" \u2014 "),_X=a("a"),NOo=o("GPTNeoForSequenceClassification"),IOo=o(" (GPT Neo model)"),qOo=l(),fv=a("li"),b_e=a("strong"),jOo=o("gptj"),DOo=o(" \u2014 "),uX=a("a"),GOo=o("GPTJForSequenceClassification"),OOo=o(" (GPT-J model)"),VOo=l(),mv=a("li"),v_e=a("strong"),XOo=o("ibert"),zOo=o(" \u2014 "),bX=a("a"),QOo=o("IBertForSequenceClassification"),WOo=o(" (I-BERT model)"),HOo=l(),gv=a("li"),F_e=a("strong"),UOo=o("layoutlm"),JOo=o(" \u2014 "),vX=a("a"),YOo=o("LayoutLMForSequenceClassification"),KOo=o(" (LayoutLM model)"),ZOo=l(),hv=a("li"),T_e=a("strong"),eVo=o("layoutlmv2"),oVo=o(" \u2014 "),FX=a("a"),rVo=o("LayoutLMv2ForSequenceClassification"),tVo=o(" (LayoutLMv2 model)"),aVo=l(),pv=a("li"),M_e=a("strong"),nVo=o("layoutlmv3"),sVo=o(" \u2014 "),TX=a("a"),lVo=o("LayoutLMv3ForSequenceClassification"),iVo=o(" (LayoutLMv3 model)"),dVo=l(),_v=a("li"),E_e=a("strong"),cVo=o("led"),fVo=o(" \u2014 "),MX=a("a"),mVo=o("LEDForSequenceClassification"),gVo=o(" (LED model)"),hVo=l(),uv=a("li"),C_e=a("strong"),pVo=o("longformer"),_Vo=o(" \u2014 "),EX=a("a"),uVo=o("LongformerForSequenceClassification"),bVo=o(" (Longformer model)"),vVo=l(),bv=a("li"),w_e=a("strong"),FVo=o("mbart"),TVo=o(" \u2014 "),CX=a("a"),MVo=o("MBartForSequenceClassification"),EVo=o(" (mBART model)"),CVo=l(),vv=a("li"),A_e=a("strong"),wVo=o("megatron-bert"),AVo=o(" \u2014 "),wX=a("a"),LVo=o("MegatronBertForSequenceClassification"),yVo=o(" (Megatron-BERT model)"),xVo=l(),Fv=a("li"),L_e=a("strong"),$Vo=o("mobilebert"),kVo=o(" \u2014 "),AX=a("a"),SVo=o("MobileBertForSequenceClassification"),RVo=o(" (MobileBERT model)"),PVo=l(),Tv=a("li"),y_e=a("strong"),BVo=o("mpnet"),NVo=o(" \u2014 "),LX=a("a"),IVo=o("MPNetForSequenceClassification"),qVo=o(" (MPNet model)"),jVo=l(),Mv=a("li"),x_e=a("strong"),DVo=o("mvp"),GVo=o(" \u2014 "),yX=a("a"),OVo=o("MvpForSequenceClassification"),VVo=o(" (MVP model)"),XVo=l(),Ev=a("li"),$_e=a("strong"),zVo=o("nezha"),QVo=o(" \u2014 "),xX=a("a"),WVo=o("NezhaForSequenceClassification"),HVo=o(" (Nezha model)"),UVo=l(),Cv=a("li"),k_e=a("strong"),JVo=o("nystromformer"),YVo=o(" \u2014 "),$X=a("a"),KVo=o("NystromformerForSequenceClassification"),ZVo=o(" (Nystr\xF6mformer model)"),eXo=l(),wv=a("li"),S_e=a("strong"),oXo=o("openai-gpt"),rXo=o(" \u2014 "),kX=a("a"),tXo=o("OpenAIGPTForSequenceClassification"),aXo=o(" (OpenAI GPT model)"),nXo=l(),Av=a("li"),R_e=a("strong"),sXo=o("perceiver"),lXo=o(" \u2014 "),SX=a("a"),iXo=o("PerceiverForSequenceClassification"),dXo=o(" (Perceiver model)"),cXo=l(),Lv=a("li"),P_e=a("strong"),fXo=o("plbart"),mXo=o(" \u2014 "),RX=a("a"),gXo=o("PLBartForSequenceClassification"),hXo=o(" (PLBart model)"),pXo=l(),yv=a("li"),B_e=a("strong"),_Xo=o("qdqbert"),uXo=o(" \u2014 "),PX=a("a"),bXo=o("QDQBertForSequenceClassification"),vXo=o(" (QDQBert model)"),FXo=l(),xv=a("li"),N_e=a("strong"),TXo=o("reformer"),MXo=o(" \u2014 "),BX=a("a"),EXo=o("ReformerForSequenceClassification"),CXo=o(" (Reformer model)"),wXo=l(),$v=a("li"),I_e=a("strong"),AXo=o("rembert"),LXo=o(" \u2014 "),NX=a("a"),yXo=o("RemBertForSequenceClassification"),xXo=o(" (RemBERT model)"),$Xo=l(),kv=a("li"),q_e=a("strong"),kXo=o("roberta"),SXo=o(" \u2014 "),IX=a("a"),RXo=o("RobertaForSequenceClassification"),PXo=o(" (RoBERTa model)"),BXo=l(),Sv=a("li"),j_e=a("strong"),NXo=o("roformer"),IXo=o(" \u2014 "),qX=a("a"),qXo=o("RoFormerForSequenceClassification"),jXo=o(" (RoFormer model)"),DXo=l(),Rv=a("li"),D_e=a("strong"),GXo=o("squeezebert"),OXo=o(" \u2014 "),jX=a("a"),VXo=o("SqueezeBertForSequenceClassification"),XXo=o(" (SqueezeBERT model)"),zXo=l(),Pv=a("li"),G_e=a("strong"),QXo=o("tapas"),WXo=o(" \u2014 "),DX=a("a"),HXo=o("TapasForSequenceClassification"),UXo=o(" (TAPAS model)"),JXo=l(),Bv=a("li"),O_e=a("strong"),YXo=o("transfo-xl"),KXo=o(" \u2014 "),GX=a("a"),ZXo=o("TransfoXLForSequenceClassification"),ezo=o(" (Transformer-XL model)"),ozo=l(),Nv=a("li"),V_e=a("strong"),rzo=o("xlm"),tzo=o(" \u2014 "),OX=a("a"),azo=o("XLMForSequenceClassification"),nzo=o(" (XLM model)"),szo=l(),Iv=a("li"),X_e=a("strong"),lzo=o("xlm-roberta"),izo=o(" \u2014 "),VX=a("a"),dzo=o("XLMRobertaForSequenceClassification"),czo=o(" (XLM-RoBERTa model)"),fzo=l(),qv=a("li"),z_e=a("strong"),mzo=o("xlm-roberta-xl"),gzo=o(" \u2014 "),XX=a("a"),hzo=o("XLMRobertaXLForSequenceClassification"),pzo=o(" (XLM-RoBERTa-XL model)"),_zo=l(),jv=a("li"),Q_e=a("strong"),uzo=o("xlnet"),bzo=o(" \u2014 "),zX=a("a"),vzo=o("XLNetForSequenceClassification"),Fzo=o(" (XLNet model)"),Tzo=l(),Dv=a("li"),W_e=a("strong"),Mzo=o("yoso"),Ezo=o(" \u2014 "),QX=a("a"),Czo=o("YosoForSequenceClassification"),wzo=o(" (YOSO model)"),Azo=l(),Gv=a("p"),Lzo=o("The model is set in evaluation mode by default using "),H_e=a("code"),yzo=o("model.eval()"),xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),$zo=o("model.train()"),kzo=l(),F(Ov.$$.fragment),LXe=l(),sd=a("h2"),Vv=a("a"),J_e=a("span"),F(ly.$$.fragment),Szo=l(),Y_e=a("span"),Rzo=o("AutoModelForMultipleChoice"),yXe=l(),No=a("div"),F(iy.$$.fragment),Pzo=l(),ld=a("p"),Bzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WX=a("a"),Nzo=o("from_pretrained()"),Izo=o(" class method or the "),HX=a("a"),qzo=o("from_config()"),jzo=o(` class
method.`),Dzo=l(),dy=a("p"),Gzo=o("This class cannot be instantiated directly using "),K_e=a("code"),Ozo=o("__init__()"),Vzo=o(" (throws an error)."),Xzo=l(),ht=a("div"),F(cy.$$.fragment),zzo=l(),Z_e=a("p"),Qzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wzo=l(),id=a("p"),Hzo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),Uzo=o("not"),Jzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),Yzo=o("from_pretrained()"),Kzo=o(" to load the model weights."),Zzo=l(),F(Xv.$$.fragment),eQo=l(),to=a("div"),F(fy.$$.fragment),oQo=l(),oue=a("p"),rQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tQo=l(),Oa=a("p"),aQo=o("The model class to instantiate is selected based on the "),rue=a("code"),nQo=o("model_type"),sQo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),lQo=o("pretrained_model_name_or_path"),iQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),dQo=o("pretrained_model_name_or_path"),cQo=o(":"),fQo=l(),Z=a("ul"),zv=a("li"),nue=a("strong"),mQo=o("albert"),gQo=o(" \u2014 "),JX=a("a"),hQo=o("AlbertForMultipleChoice"),pQo=o(" (ALBERT model)"),_Qo=l(),Qv=a("li"),sue=a("strong"),uQo=o("bert"),bQo=o(" \u2014 "),YX=a("a"),vQo=o("BertForMultipleChoice"),FQo=o(" (BERT model)"),TQo=l(),Wv=a("li"),lue=a("strong"),MQo=o("big_bird"),EQo=o(" \u2014 "),KX=a("a"),CQo=o("BigBirdForMultipleChoice"),wQo=o(" (BigBird model)"),AQo=l(),Hv=a("li"),iue=a("strong"),LQo=o("camembert"),yQo=o(" \u2014 "),ZX=a("a"),xQo=o("CamembertForMultipleChoice"),$Qo=o(" (CamemBERT model)"),kQo=l(),Uv=a("li"),due=a("strong"),SQo=o("canine"),RQo=o(" \u2014 "),ez=a("a"),PQo=o("CanineForMultipleChoice"),BQo=o(" (CANINE model)"),NQo=l(),Jv=a("li"),cue=a("strong"),IQo=o("convbert"),qQo=o(" \u2014 "),oz=a("a"),jQo=o("ConvBertForMultipleChoice"),DQo=o(" (ConvBERT model)"),GQo=l(),Yv=a("li"),fue=a("strong"),OQo=o("data2vec-text"),VQo=o(" \u2014 "),rz=a("a"),XQo=o("Data2VecTextForMultipleChoice"),zQo=o(" (Data2VecText model)"),QQo=l(),Kv=a("li"),mue=a("strong"),WQo=o("deberta-v2"),HQo=o(" \u2014 "),tz=a("a"),UQo=o("DebertaV2ForMultipleChoice"),JQo=o(" (DeBERTa-v2 model)"),YQo=l(),Zv=a("li"),gue=a("strong"),KQo=o("distilbert"),ZQo=o(" \u2014 "),az=a("a"),eWo=o("DistilBertForMultipleChoice"),oWo=o(" (DistilBERT model)"),rWo=l(),eF=a("li"),hue=a("strong"),tWo=o("electra"),aWo=o(" \u2014 "),nz=a("a"),nWo=o("ElectraForMultipleChoice"),sWo=o(" (ELECTRA model)"),lWo=l(),oF=a("li"),pue=a("strong"),iWo=o("flaubert"),dWo=o(" \u2014 "),sz=a("a"),cWo=o("FlaubertForMultipleChoice"),fWo=o(" (FlauBERT model)"),mWo=l(),rF=a("li"),_ue=a("strong"),gWo=o("fnet"),hWo=o(" \u2014 "),lz=a("a"),pWo=o("FNetForMultipleChoice"),_Wo=o(" (FNet model)"),uWo=l(),tF=a("li"),uue=a("strong"),bWo=o("funnel"),vWo=o(" \u2014 "),iz=a("a"),FWo=o("FunnelForMultipleChoice"),TWo=o(" (Funnel Transformer model)"),MWo=l(),aF=a("li"),bue=a("strong"),EWo=o("ibert"),CWo=o(" \u2014 "),dz=a("a"),wWo=o("IBertForMultipleChoice"),AWo=o(" (I-BERT model)"),LWo=l(),nF=a("li"),vue=a("strong"),yWo=o("longformer"),xWo=o(" \u2014 "),cz=a("a"),$Wo=o("LongformerForMultipleChoice"),kWo=o(" (Longformer model)"),SWo=l(),sF=a("li"),Fue=a("strong"),RWo=o("megatron-bert"),PWo=o(" \u2014 "),fz=a("a"),BWo=o("MegatronBertForMultipleChoice"),NWo=o(" (Megatron-BERT model)"),IWo=l(),lF=a("li"),Tue=a("strong"),qWo=o("mobilebert"),jWo=o(" \u2014 "),mz=a("a"),DWo=o("MobileBertForMultipleChoice"),GWo=o(" (MobileBERT model)"),OWo=l(),iF=a("li"),Mue=a("strong"),VWo=o("mpnet"),XWo=o(" \u2014 "),gz=a("a"),zWo=o("MPNetForMultipleChoice"),QWo=o(" (MPNet model)"),WWo=l(),dF=a("li"),Eue=a("strong"),HWo=o("nezha"),UWo=o(" \u2014 "),hz=a("a"),JWo=o("NezhaForMultipleChoice"),YWo=o(" (Nezha model)"),KWo=l(),cF=a("li"),Cue=a("strong"),ZWo=o("nystromformer"),eHo=o(" \u2014 "),pz=a("a"),oHo=o("NystromformerForMultipleChoice"),rHo=o(" (Nystr\xF6mformer model)"),tHo=l(),fF=a("li"),wue=a("strong"),aHo=o("qdqbert"),nHo=o(" \u2014 "),_z=a("a"),sHo=o("QDQBertForMultipleChoice"),lHo=o(" (QDQBert model)"),iHo=l(),mF=a("li"),Aue=a("strong"),dHo=o("rembert"),cHo=o(" \u2014 "),uz=a("a"),fHo=o("RemBertForMultipleChoice"),mHo=o(" (RemBERT model)"),gHo=l(),gF=a("li"),Lue=a("strong"),hHo=o("roberta"),pHo=o(" \u2014 "),bz=a("a"),_Ho=o("RobertaForMultipleChoice"),uHo=o(" (RoBERTa model)"),bHo=l(),hF=a("li"),yue=a("strong"),vHo=o("roformer"),FHo=o(" \u2014 "),vz=a("a"),THo=o("RoFormerForMultipleChoice"),MHo=o(" (RoFormer model)"),EHo=l(),pF=a("li"),xue=a("strong"),CHo=o("squeezebert"),wHo=o(" \u2014 "),Fz=a("a"),AHo=o("SqueezeBertForMultipleChoice"),LHo=o(" (SqueezeBERT model)"),yHo=l(),_F=a("li"),$ue=a("strong"),xHo=o("xlm"),$Ho=o(" \u2014 "),Tz=a("a"),kHo=o("XLMForMultipleChoice"),SHo=o(" (XLM model)"),RHo=l(),uF=a("li"),kue=a("strong"),PHo=o("xlm-roberta"),BHo=o(" \u2014 "),Mz=a("a"),NHo=o("XLMRobertaForMultipleChoice"),IHo=o(" (XLM-RoBERTa model)"),qHo=l(),bF=a("li"),Sue=a("strong"),jHo=o("xlm-roberta-xl"),DHo=o(" \u2014 "),Ez=a("a"),GHo=o("XLMRobertaXLForMultipleChoice"),OHo=o(" (XLM-RoBERTa-XL model)"),VHo=l(),vF=a("li"),Rue=a("strong"),XHo=o("xlnet"),zHo=o(" \u2014 "),Cz=a("a"),QHo=o("XLNetForMultipleChoice"),WHo=o(" (XLNet model)"),HHo=l(),FF=a("li"),Pue=a("strong"),UHo=o("yoso"),JHo=o(" \u2014 "),wz=a("a"),YHo=o("YosoForMultipleChoice"),KHo=o(" (YOSO model)"),ZHo=l(),TF=a("p"),eUo=o("The model is set in evaluation mode by default using "),Bue=a("code"),oUo=o("model.eval()"),rUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),tUo=o("model.train()"),aUo=l(),F(MF.$$.fragment),xXe=l(),dd=a("h2"),EF=a("a"),Iue=a("span"),F(my.$$.fragment),nUo=l(),que=a("span"),sUo=o("AutoModelForNextSentencePrediction"),$Xe=l(),Io=a("div"),F(gy.$$.fragment),lUo=l(),cd=a("p"),iUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Az=a("a"),dUo=o("from_pretrained()"),cUo=o(" class method or the "),Lz=a("a"),fUo=o("from_config()"),mUo=o(` class
method.`),gUo=l(),hy=a("p"),hUo=o("This class cannot be instantiated directly using "),jue=a("code"),pUo=o("__init__()"),_Uo=o(" (throws an error)."),uUo=l(),pt=a("div"),F(py.$$.fragment),bUo=l(),Due=a("p"),vUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FUo=l(),fd=a("p"),TUo=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),MUo=o("not"),EUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),CUo=o("from_pretrained()"),wUo=o(" to load the model weights."),AUo=l(),F(CF.$$.fragment),LUo=l(),ao=a("div"),F(_y.$$.fragment),yUo=l(),Oue=a("p"),xUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Uo=l(),Va=a("p"),kUo=o("The model class to instantiate is selected based on the "),Vue=a("code"),SUo=o("model_type"),RUo=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),PUo=o("pretrained_model_name_or_path"),BUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),NUo=o("pretrained_model_name_or_path"),IUo=o(":"),qUo=l(),qo=a("ul"),wF=a("li"),Que=a("strong"),jUo=o("bert"),DUo=o(" \u2014 "),xz=a("a"),GUo=o("BertForNextSentencePrediction"),OUo=o(" (BERT model)"),VUo=l(),AF=a("li"),Wue=a("strong"),XUo=o("fnet"),zUo=o(" \u2014 "),$z=a("a"),QUo=o("FNetForNextSentencePrediction"),WUo=o(" (FNet model)"),HUo=l(),LF=a("li"),Hue=a("strong"),UUo=o("megatron-bert"),JUo=o(" \u2014 "),kz=a("a"),YUo=o("MegatronBertForNextSentencePrediction"),KUo=o(" (Megatron-BERT model)"),ZUo=l(),yF=a("li"),Uue=a("strong"),eJo=o("mobilebert"),oJo=o(" \u2014 "),Sz=a("a"),rJo=o("MobileBertForNextSentencePrediction"),tJo=o(" (MobileBERT model)"),aJo=l(),xF=a("li"),Jue=a("strong"),nJo=o("nezha"),sJo=o(" \u2014 "),Rz=a("a"),lJo=o("NezhaForNextSentencePrediction"),iJo=o(" (Nezha model)"),dJo=l(),$F=a("li"),Yue=a("strong"),cJo=o("qdqbert"),fJo=o(" \u2014 "),Pz=a("a"),mJo=o("QDQBertForNextSentencePrediction"),gJo=o(" (QDQBert model)"),hJo=l(),kF=a("p"),pJo=o("The model is set in evaluation mode by default using "),Kue=a("code"),_Jo=o("model.eval()"),uJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),bJo=o("model.train()"),vJo=l(),F(SF.$$.fragment),kXe=l(),md=a("h2"),RF=a("a"),e1e=a("span"),F(uy.$$.fragment),FJo=l(),o1e=a("span"),TJo=o("AutoModelForTokenClassification"),SXe=l(),jo=a("div"),F(by.$$.fragment),MJo=l(),gd=a("p"),EJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=a("a"),CJo=o("from_pretrained()"),wJo=o(" class method or the "),Nz=a("a"),AJo=o("from_config()"),LJo=o(` class
method.`),yJo=l(),vy=a("p"),xJo=o("This class cannot be instantiated directly using "),r1e=a("code"),$Jo=o("__init__()"),kJo=o(" (throws an error)."),SJo=l(),_t=a("div"),F(Fy.$$.fragment),RJo=l(),t1e=a("p"),PJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),BJo=l(),hd=a("p"),NJo=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),IJo=o("not"),qJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),jJo=o("from_pretrained()"),DJo=o(" to load the model weights."),GJo=l(),F(PF.$$.fragment),OJo=l(),no=a("div"),F(Ty.$$.fragment),VJo=l(),n1e=a("p"),XJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zJo=l(),Xa=a("p"),QJo=o("The model class to instantiate is selected based on the "),s1e=a("code"),WJo=o("model_type"),HJo=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),UJo=o("pretrained_model_name_or_path"),JJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),YJo=o("pretrained_model_name_or_path"),KJo=o(":"),ZJo=l(),U=a("ul"),BF=a("li"),d1e=a("strong"),eYo=o("albert"),oYo=o(" \u2014 "),qz=a("a"),rYo=o("AlbertForTokenClassification"),tYo=o(" (ALBERT model)"),aYo=l(),NF=a("li"),c1e=a("strong"),nYo=o("bert"),sYo=o(" \u2014 "),jz=a("a"),lYo=o("BertForTokenClassification"),iYo=o(" (BERT model)"),dYo=l(),IF=a("li"),f1e=a("strong"),cYo=o("big_bird"),fYo=o(" \u2014 "),Dz=a("a"),mYo=o("BigBirdForTokenClassification"),gYo=o(" (BigBird model)"),hYo=l(),qF=a("li"),m1e=a("strong"),pYo=o("bloom"),_Yo=o(" \u2014 "),Gz=a("a"),uYo=o("BloomForTokenClassification"),bYo=o(" (BLOOM model)"),vYo=l(),jF=a("li"),g1e=a("strong"),FYo=o("camembert"),TYo=o(" \u2014 "),Oz=a("a"),MYo=o("CamembertForTokenClassification"),EYo=o(" (CamemBERT model)"),CYo=l(),DF=a("li"),h1e=a("strong"),wYo=o("canine"),AYo=o(" \u2014 "),Vz=a("a"),LYo=o("CanineForTokenClassification"),yYo=o(" (CANINE model)"),xYo=l(),GF=a("li"),p1e=a("strong"),$Yo=o("convbert"),kYo=o(" \u2014 "),Xz=a("a"),SYo=o("ConvBertForTokenClassification"),RYo=o(" (ConvBERT model)"),PYo=l(),OF=a("li"),_1e=a("strong"),BYo=o("data2vec-text"),NYo=o(" \u2014 "),zz=a("a"),IYo=o("Data2VecTextForTokenClassification"),qYo=o(" (Data2VecText model)"),jYo=l(),VF=a("li"),u1e=a("strong"),DYo=o("deberta"),GYo=o(" \u2014 "),Qz=a("a"),OYo=o("DebertaForTokenClassification"),VYo=o(" (DeBERTa model)"),XYo=l(),XF=a("li"),b1e=a("strong"),zYo=o("deberta-v2"),QYo=o(" \u2014 "),Wz=a("a"),WYo=o("DebertaV2ForTokenClassification"),HYo=o(" (DeBERTa-v2 model)"),UYo=l(),zF=a("li"),v1e=a("strong"),JYo=o("distilbert"),YYo=o(" \u2014 "),Hz=a("a"),KYo=o("DistilBertForTokenClassification"),ZYo=o(" (DistilBERT model)"),eKo=l(),QF=a("li"),F1e=a("strong"),oKo=o("electra"),rKo=o(" \u2014 "),Uz=a("a"),tKo=o("ElectraForTokenClassification"),aKo=o(" (ELECTRA model)"),nKo=l(),WF=a("li"),T1e=a("strong"),sKo=o("flaubert"),lKo=o(" \u2014 "),Jz=a("a"),iKo=o("FlaubertForTokenClassification"),dKo=o(" (FlauBERT model)"),cKo=l(),HF=a("li"),M1e=a("strong"),fKo=o("fnet"),mKo=o(" \u2014 "),Yz=a("a"),gKo=o("FNetForTokenClassification"),hKo=o(" (FNet model)"),pKo=l(),UF=a("li"),E1e=a("strong"),_Ko=o("funnel"),uKo=o(" \u2014 "),Kz=a("a"),bKo=o("FunnelForTokenClassification"),vKo=o(" (Funnel Transformer model)"),FKo=l(),JF=a("li"),C1e=a("strong"),TKo=o("gpt2"),MKo=o(" \u2014 "),Zz=a("a"),EKo=o("GPT2ForTokenClassification"),CKo=o(" (OpenAI GPT-2 model)"),wKo=l(),YF=a("li"),w1e=a("strong"),AKo=o("ibert"),LKo=o(" \u2014 "),eQ=a("a"),yKo=o("IBertForTokenClassification"),xKo=o(" (I-BERT model)"),$Ko=l(),KF=a("li"),A1e=a("strong"),kKo=o("layoutlm"),SKo=o(" \u2014 "),oQ=a("a"),RKo=o("LayoutLMForTokenClassification"),PKo=o(" (LayoutLM model)"),BKo=l(),ZF=a("li"),L1e=a("strong"),NKo=o("layoutlmv2"),IKo=o(" \u2014 "),rQ=a("a"),qKo=o("LayoutLMv2ForTokenClassification"),jKo=o(" (LayoutLMv2 model)"),DKo=l(),e6=a("li"),y1e=a("strong"),GKo=o("layoutlmv3"),OKo=o(" \u2014 "),tQ=a("a"),VKo=o("LayoutLMv3ForTokenClassification"),XKo=o(" (LayoutLMv3 model)"),zKo=l(),o6=a("li"),x1e=a("strong"),QKo=o("longformer"),WKo=o(" \u2014 "),aQ=a("a"),HKo=o("LongformerForTokenClassification"),UKo=o(" (Longformer model)"),JKo=l(),r6=a("li"),$1e=a("strong"),YKo=o("megatron-bert"),KKo=o(" \u2014 "),nQ=a("a"),ZKo=o("MegatronBertForTokenClassification"),eZo=o(" (Megatron-BERT model)"),oZo=l(),t6=a("li"),k1e=a("strong"),rZo=o("mobilebert"),tZo=o(" \u2014 "),sQ=a("a"),aZo=o("MobileBertForTokenClassification"),nZo=o(" (MobileBERT model)"),sZo=l(),a6=a("li"),S1e=a("strong"),lZo=o("mpnet"),iZo=o(" \u2014 "),lQ=a("a"),dZo=o("MPNetForTokenClassification"),cZo=o(" (MPNet model)"),fZo=l(),n6=a("li"),R1e=a("strong"),mZo=o("nezha"),gZo=o(" \u2014 "),iQ=a("a"),hZo=o("NezhaForTokenClassification"),pZo=o(" (Nezha model)"),_Zo=l(),s6=a("li"),P1e=a("strong"),uZo=o("nystromformer"),bZo=o(" \u2014 "),dQ=a("a"),vZo=o("NystromformerForTokenClassification"),FZo=o(" (Nystr\xF6mformer model)"),TZo=l(),l6=a("li"),B1e=a("strong"),MZo=o("qdqbert"),EZo=o(" \u2014 "),cQ=a("a"),CZo=o("QDQBertForTokenClassification"),wZo=o(" (QDQBert model)"),AZo=l(),i6=a("li"),N1e=a("strong"),LZo=o("rembert"),yZo=o(" \u2014 "),fQ=a("a"),xZo=o("RemBertForTokenClassification"),$Zo=o(" (RemBERT model)"),kZo=l(),d6=a("li"),I1e=a("strong"),SZo=o("roberta"),RZo=o(" \u2014 "),mQ=a("a"),PZo=o("RobertaForTokenClassification"),BZo=o(" (RoBERTa model)"),NZo=l(),c6=a("li"),q1e=a("strong"),IZo=o("roformer"),qZo=o(" \u2014 "),gQ=a("a"),jZo=o("RoFormerForTokenClassification"),DZo=o(" (RoFormer model)"),GZo=l(),f6=a("li"),j1e=a("strong"),OZo=o("squeezebert"),VZo=o(" \u2014 "),hQ=a("a"),XZo=o("SqueezeBertForTokenClassification"),zZo=o(" (SqueezeBERT model)"),QZo=l(),m6=a("li"),D1e=a("strong"),WZo=o("xlm"),HZo=o(" \u2014 "),pQ=a("a"),UZo=o("XLMForTokenClassification"),JZo=o(" (XLM model)"),YZo=l(),g6=a("li"),G1e=a("strong"),KZo=o("xlm-roberta"),ZZo=o(" \u2014 "),_Q=a("a"),eer=o("XLMRobertaForTokenClassification"),oer=o(" (XLM-RoBERTa model)"),rer=l(),h6=a("li"),O1e=a("strong"),ter=o("xlm-roberta-xl"),aer=o(" \u2014 "),uQ=a("a"),ner=o("XLMRobertaXLForTokenClassification"),ser=o(" (XLM-RoBERTa-XL model)"),ler=l(),p6=a("li"),V1e=a("strong"),ier=o("xlnet"),der=o(" \u2014 "),bQ=a("a"),cer=o("XLNetForTokenClassification"),fer=o(" (XLNet model)"),mer=l(),_6=a("li"),X1e=a("strong"),ger=o("yoso"),her=o(" \u2014 "),vQ=a("a"),per=o("YosoForTokenClassification"),_er=o(" (YOSO model)"),uer=l(),u6=a("p"),ber=o("The model is set in evaluation mode by default using "),z1e=a("code"),ver=o("model.eval()"),Fer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=a("code"),Ter=o("model.train()"),Mer=l(),F(b6.$$.fragment),RXe=l(),pd=a("h2"),v6=a("a"),W1e=a("span"),F(My.$$.fragment),Eer=l(),H1e=a("span"),Cer=o("AutoModelForQuestionAnswering"),PXe=l(),Do=a("div"),F(Ey.$$.fragment),wer=l(),_d=a("p"),Aer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FQ=a("a"),Ler=o("from_pretrained()"),yer=o(" class method or the "),TQ=a("a"),xer=o("from_config()"),$er=o(` class
method.`),ker=l(),Cy=a("p"),Ser=o("This class cannot be instantiated directly using "),U1e=a("code"),Rer=o("__init__()"),Per=o(" (throws an error)."),Ber=l(),ut=a("div"),F(wy.$$.fragment),Ner=l(),J1e=a("p"),Ier=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qer=l(),ud=a("p"),jer=o(`Note:
Loading a model from its configuration file does `),Y1e=a("strong"),Der=o("not"),Ger=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),Oer=o("from_pretrained()"),Ver=o(" to load the model weights."),Xer=l(),F(F6.$$.fragment),zer=l(),so=a("div"),F(Ay.$$.fragment),Qer=l(),K1e=a("p"),Wer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Her=l(),za=a("p"),Uer=o("The model class to instantiate is selected based on the "),Z1e=a("code"),Jer=o("model_type"),Yer=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),Ker=o("pretrained_model_name_or_path"),Zer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(":"),ror=l(),V=a("ul"),T6=a("li"),r2e=a("strong"),tor=o("albert"),aor=o(" \u2014 "),EQ=a("a"),nor=o("AlbertForQuestionAnswering"),sor=o(" (ALBERT model)"),lor=l(),M6=a("li"),t2e=a("strong"),ior=o("bart"),dor=o(" \u2014 "),CQ=a("a"),cor=o("BartForQuestionAnswering"),mor=o(" (BART model)"),gor=l(),E6=a("li"),a2e=a("strong"),hor=o("bert"),por=o(" \u2014 "),wQ=a("a"),_or=o("BertForQuestionAnswering"),uor=o(" (BERT model)"),bor=l(),C6=a("li"),n2e=a("strong"),vor=o("big_bird"),For=o(" \u2014 "),AQ=a("a"),Tor=o("BigBirdForQuestionAnswering"),Mor=o(" (BigBird model)"),Eor=l(),w6=a("li"),s2e=a("strong"),Cor=o("bigbird_pegasus"),wor=o(" \u2014 "),LQ=a("a"),Aor=o("BigBirdPegasusForQuestionAnswering"),Lor=o(" (BigBird-Pegasus model)"),yor=l(),A6=a("li"),l2e=a("strong"),xor=o("camembert"),$or=o(" \u2014 "),yQ=a("a"),kor=o("CamembertForQuestionAnswering"),Sor=o(" (CamemBERT model)"),Ror=l(),L6=a("li"),i2e=a("strong"),Por=o("canine"),Bor=o(" \u2014 "),xQ=a("a"),Nor=o("CanineForQuestionAnswering"),Ior=o(" (CANINE model)"),qor=l(),y6=a("li"),d2e=a("strong"),jor=o("convbert"),Dor=o(" \u2014 "),$Q=a("a"),Gor=o("ConvBertForQuestionAnswering"),Oor=o(" (ConvBERT model)"),Vor=l(),x6=a("li"),c2e=a("strong"),Xor=o("data2vec-text"),zor=o(" \u2014 "),kQ=a("a"),Qor=o("Data2VecTextForQuestionAnswering"),Wor=o(" (Data2VecText model)"),Hor=l(),$6=a("li"),f2e=a("strong"),Uor=o("deberta"),Jor=o(" \u2014 "),SQ=a("a"),Yor=o("DebertaForQuestionAnswering"),Kor=o(" (DeBERTa model)"),Zor=l(),k6=a("li"),m2e=a("strong"),err=o("deberta-v2"),orr=o(" \u2014 "),RQ=a("a"),rrr=o("DebertaV2ForQuestionAnswering"),trr=o(" (DeBERTa-v2 model)"),arr=l(),S6=a("li"),g2e=a("strong"),nrr=o("distilbert"),srr=o(" \u2014 "),PQ=a("a"),lrr=o("DistilBertForQuestionAnswering"),irr=o(" (DistilBERT model)"),drr=l(),R6=a("li"),h2e=a("strong"),crr=o("electra"),frr=o(" \u2014 "),BQ=a("a"),mrr=o("ElectraForQuestionAnswering"),grr=o(" (ELECTRA model)"),hrr=l(),P6=a("li"),p2e=a("strong"),prr=o("flaubert"),_rr=o(" \u2014 "),NQ=a("a"),urr=o("FlaubertForQuestionAnsweringSimple"),brr=o(" (FlauBERT model)"),vrr=l(),B6=a("li"),_2e=a("strong"),Frr=o("fnet"),Trr=o(" \u2014 "),IQ=a("a"),Mrr=o("FNetForQuestionAnswering"),Err=o(" (FNet model)"),Crr=l(),N6=a("li"),u2e=a("strong"),wrr=o("funnel"),Arr=o(" \u2014 "),qQ=a("a"),Lrr=o("FunnelForQuestionAnswering"),yrr=o(" (Funnel Transformer model)"),xrr=l(),I6=a("li"),b2e=a("strong"),$rr=o("gptj"),krr=o(" \u2014 "),jQ=a("a"),Srr=o("GPTJForQuestionAnswering"),Rrr=o(" (GPT-J model)"),Prr=l(),q6=a("li"),v2e=a("strong"),Brr=o("ibert"),Nrr=o(" \u2014 "),DQ=a("a"),Irr=o("IBertForQuestionAnswering"),qrr=o(" (I-BERT model)"),jrr=l(),j6=a("li"),F2e=a("strong"),Drr=o("layoutlmv2"),Grr=o(" \u2014 "),GQ=a("a"),Orr=o("LayoutLMv2ForQuestionAnswering"),Vrr=o(" (LayoutLMv2 model)"),Xrr=l(),D6=a("li"),T2e=a("strong"),zrr=o("layoutlmv3"),Qrr=o(" \u2014 "),OQ=a("a"),Wrr=o("LayoutLMv3ForQuestionAnswering"),Hrr=o(" (LayoutLMv3 model)"),Urr=l(),G6=a("li"),M2e=a("strong"),Jrr=o("led"),Yrr=o(" \u2014 "),VQ=a("a"),Krr=o("LEDForQuestionAnswering"),Zrr=o(" (LED model)"),etr=l(),O6=a("li"),E2e=a("strong"),otr=o("longformer"),rtr=o(" \u2014 "),XQ=a("a"),ttr=o("LongformerForQuestionAnswering"),atr=o(" (Longformer model)"),ntr=l(),V6=a("li"),C2e=a("strong"),str=o("lxmert"),ltr=o(" \u2014 "),zQ=a("a"),itr=o("LxmertForQuestionAnswering"),dtr=o(" (LXMERT model)"),ctr=l(),X6=a("li"),w2e=a("strong"),ftr=o("mbart"),mtr=o(" \u2014 "),QQ=a("a"),gtr=o("MBartForQuestionAnswering"),htr=o(" (mBART model)"),ptr=l(),z6=a("li"),A2e=a("strong"),_tr=o("megatron-bert"),utr=o(" \u2014 "),WQ=a("a"),btr=o("MegatronBertForQuestionAnswering"),vtr=o(" (Megatron-BERT model)"),Ftr=l(),Q6=a("li"),L2e=a("strong"),Ttr=o("mobilebert"),Mtr=o(" \u2014 "),HQ=a("a"),Etr=o("MobileBertForQuestionAnswering"),Ctr=o(" (MobileBERT model)"),wtr=l(),W6=a("li"),y2e=a("strong"),Atr=o("mpnet"),Ltr=o(" \u2014 "),UQ=a("a"),ytr=o("MPNetForQuestionAnswering"),xtr=o(" (MPNet model)"),$tr=l(),H6=a("li"),x2e=a("strong"),ktr=o("mvp"),Str=o(" \u2014 "),JQ=a("a"),Rtr=o("MvpForQuestionAnswering"),Ptr=o(" (MVP model)"),Btr=l(),U6=a("li"),$2e=a("strong"),Ntr=o("nezha"),Itr=o(" \u2014 "),YQ=a("a"),qtr=o("NezhaForQuestionAnswering"),jtr=o(" (Nezha model)"),Dtr=l(),J6=a("li"),k2e=a("strong"),Gtr=o("nystromformer"),Otr=o(" \u2014 "),KQ=a("a"),Vtr=o("NystromformerForQuestionAnswering"),Xtr=o(" (Nystr\xF6mformer model)"),ztr=l(),Y6=a("li"),S2e=a("strong"),Qtr=o("qdqbert"),Wtr=o(" \u2014 "),ZQ=a("a"),Htr=o("QDQBertForQuestionAnswering"),Utr=o(" (QDQBert model)"),Jtr=l(),K6=a("li"),R2e=a("strong"),Ytr=o("reformer"),Ktr=o(" \u2014 "),eW=a("a"),Ztr=o("ReformerForQuestionAnswering"),ear=o(" (Reformer model)"),oar=l(),Z6=a("li"),P2e=a("strong"),rar=o("rembert"),tar=o(" \u2014 "),oW=a("a"),aar=o("RemBertForQuestionAnswering"),nar=o(" (RemBERT model)"),sar=l(),eT=a("li"),B2e=a("strong"),lar=o("roberta"),iar=o(" \u2014 "),rW=a("a"),dar=o("RobertaForQuestionAnswering"),car=o(" (RoBERTa model)"),far=l(),oT=a("li"),N2e=a("strong"),mar=o("roformer"),gar=o(" \u2014 "),tW=a("a"),har=o("RoFormerForQuestionAnswering"),par=o(" (RoFormer model)"),_ar=l(),rT=a("li"),I2e=a("strong"),uar=o("splinter"),bar=o(" \u2014 "),aW=a("a"),Far=o("SplinterForQuestionAnswering"),Tar=o(" (Splinter model)"),Mar=l(),tT=a("li"),q2e=a("strong"),Ear=o("squeezebert"),Car=o(" \u2014 "),nW=a("a"),war=o("SqueezeBertForQuestionAnswering"),Aar=o(" (SqueezeBERT model)"),Lar=l(),aT=a("li"),j2e=a("strong"),yar=o("xlm"),xar=o(" \u2014 "),sW=a("a"),$ar=o("XLMForQuestionAnsweringSimple"),kar=o(" (XLM model)"),Sar=l(),nT=a("li"),D2e=a("strong"),Rar=o("xlm-roberta"),Par=o(" \u2014 "),lW=a("a"),Bar=o("XLMRobertaForQuestionAnswering"),Nar=o(" (XLM-RoBERTa model)"),Iar=l(),sT=a("li"),G2e=a("strong"),qar=o("xlm-roberta-xl"),jar=o(" \u2014 "),iW=a("a"),Dar=o("XLMRobertaXLForQuestionAnswering"),Gar=o(" (XLM-RoBERTa-XL model)"),Oar=l(),lT=a("li"),O2e=a("strong"),Var=o("xlnet"),Xar=o(" \u2014 "),dW=a("a"),zar=o("XLNetForQuestionAnsweringSimple"),Qar=o(" (XLNet model)"),War=l(),iT=a("li"),V2e=a("strong"),Har=o("yoso"),Uar=o(" \u2014 "),cW=a("a"),Jar=o("YosoForQuestionAnswering"),Yar=o(" (YOSO model)"),Kar=l(),dT=a("p"),Zar=o("The model is set in evaluation mode by default using "),X2e=a("code"),enr=o("model.eval()"),onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=a("code"),rnr=o("model.train()"),tnr=l(),F(cT.$$.fragment),BXe=l(),bd=a("h2"),fT=a("a"),Q2e=a("span"),F(Ly.$$.fragment),anr=l(),W2e=a("span"),nnr=o("AutoModelForTableQuestionAnswering"),NXe=l(),Go=a("div"),F(yy.$$.fragment),snr=l(),vd=a("p"),lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fW=a("a"),inr=o("from_pretrained()"),dnr=o(" class method or the "),mW=a("a"),cnr=o("from_config()"),fnr=o(` class
method.`),mnr=l(),xy=a("p"),gnr=o("This class cannot be instantiated directly using "),H2e=a("code"),hnr=o("__init__()"),pnr=o(" (throws an error)."),_nr=l(),bt=a("div"),F($y.$$.fragment),unr=l(),U2e=a("p"),bnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vnr=l(),Fd=a("p"),Fnr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),Tnr=o("not"),Mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),Enr=o("from_pretrained()"),Cnr=o(" to load the model weights."),wnr=l(),F(mT.$$.fragment),Anr=l(),lo=a("div"),F(ky.$$.fragment),Lnr=l(),Y2e=a("p"),ynr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xnr=l(),Qa=a("p"),$nr=o("The model class to instantiate is selected based on the "),K2e=a("code"),knr=o("model_type"),Snr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),Rnr=o("pretrained_model_name_or_path"),Pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),Bnr=o("pretrained_model_name_or_path"),Nnr=o(":"),Inr=l(),obe=a("ul"),gT=a("li"),rbe=a("strong"),qnr=o("tapas"),jnr=o(" \u2014 "),hW=a("a"),Dnr=o("TapasForQuestionAnswering"),Gnr=o(" (TAPAS model)"),Onr=l(),hT=a("p"),Vnr=o("The model is set in evaluation mode by default using "),tbe=a("code"),Xnr=o("model.eval()"),znr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=a("code"),Qnr=o("model.train()"),Wnr=l(),F(pT.$$.fragment),IXe=l(),Td=a("h2"),_T=a("a"),nbe=a("span"),F(Sy.$$.fragment),Hnr=l(),sbe=a("span"),Unr=o("AutoModelForImageClassification"),qXe=l(),Oo=a("div"),F(Ry.$$.fragment),Jnr=l(),Md=a("p"),Ynr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pW=a("a"),Knr=o("from_pretrained()"),Znr=o(" class method or the "),_W=a("a"),esr=o("from_config()"),osr=o(` class
method.`),rsr=l(),Py=a("p"),tsr=o("This class cannot be instantiated directly using "),lbe=a("code"),asr=o("__init__()"),nsr=o(" (throws an error)."),ssr=l(),vt=a("div"),F(By.$$.fragment),lsr=l(),ibe=a("p"),isr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dsr=l(),Ed=a("p"),csr=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),fsr=o("not"),msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),gsr=o("from_pretrained()"),hsr=o(" to load the model weights."),psr=l(),F(uT.$$.fragment),_sr=l(),io=a("div"),F(Ny.$$.fragment),usr=l(),cbe=a("p"),bsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vsr=l(),Wa=a("p"),Fsr=o("The model class to instantiate is selected based on the "),fbe=a("code"),Tsr=o("model_type"),Msr=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(":"),Lsr=l(),ve=a("ul"),bT=a("li"),hbe=a("strong"),ysr=o("beit"),xsr=o(" \u2014 "),bW=a("a"),$sr=o("BeitForImageClassification"),ksr=o(" (BEiT model)"),Ssr=l(),vT=a("li"),pbe=a("strong"),Rsr=o("convnext"),Psr=o(" \u2014 "),vW=a("a"),Bsr=o("ConvNextForImageClassification"),Nsr=o(" (ConvNeXT model)"),Isr=l(),FT=a("li"),_be=a("strong"),qsr=o("cvt"),jsr=o(" \u2014 "),FW=a("a"),Dsr=o("CvtForImageClassification"),Gsr=o(" (CvT model)"),Osr=l(),TT=a("li"),ube=a("strong"),Vsr=o("data2vec-vision"),Xsr=o(" \u2014 "),TW=a("a"),zsr=o("Data2VecVisionForImageClassification"),Qsr=o(" (Data2VecVision model)"),Wsr=l(),Us=a("li"),bbe=a("strong"),Hsr=o("deit"),Usr=o(" \u2014 "),MW=a("a"),Jsr=o("DeiTForImageClassification"),Ysr=o(" or "),EW=a("a"),Ksr=o("DeiTForImageClassificationWithTeacher"),Zsr=o(" (DeiT model)"),elr=l(),MT=a("li"),vbe=a("strong"),olr=o("imagegpt"),rlr=o(" \u2014 "),CW=a("a"),tlr=o("ImageGPTForImageClassification"),alr=o(" (ImageGPT model)"),nlr=l(),Js=a("li"),Fbe=a("strong"),slr=o("levit"),llr=o(" \u2014 "),wW=a("a"),ilr=o("LevitForImageClassification"),dlr=o(" or "),AW=a("a"),clr=o("LevitForImageClassificationWithTeacher"),flr=o(" (LeViT model)"),mlr=l(),ET=a("li"),Tbe=a("strong"),glr=o("mobilevit"),hlr=o(" \u2014 "),LW=a("a"),plr=o("MobileViTForImageClassification"),_lr=o(" (MobileViT model)"),ulr=l(),Ft=a("li"),Mbe=a("strong"),blr=o("perceiver"),vlr=o(" \u2014 "),yW=a("a"),Flr=o("PerceiverForImageClassificationLearned"),Tlr=o(" or "),xW=a("a"),Mlr=o("PerceiverForImageClassificationFourier"),Elr=o(" or "),$W=a("a"),Clr=o("PerceiverForImageClassificationConvProcessing"),wlr=o(" (Perceiver model)"),Alr=l(),CT=a("li"),Ebe=a("strong"),Llr=o("poolformer"),ylr=o(" \u2014 "),kW=a("a"),xlr=o("PoolFormerForImageClassification"),$lr=o(" (PoolFormer model)"),klr=l(),wT=a("li"),Cbe=a("strong"),Slr=o("regnet"),Rlr=o(" \u2014 "),SW=a("a"),Plr=o("RegNetForImageClassification"),Blr=o(" (RegNet model)"),Nlr=l(),AT=a("li"),wbe=a("strong"),Ilr=o("resnet"),qlr=o(" \u2014 "),RW=a("a"),jlr=o("ResNetForImageClassification"),Dlr=o(" (ResNet model)"),Glr=l(),LT=a("li"),Abe=a("strong"),Olr=o("segformer"),Vlr=o(" \u2014 "),PW=a("a"),Xlr=o("SegformerForImageClassification"),zlr=o(" (SegFormer model)"),Qlr=l(),yT=a("li"),Lbe=a("strong"),Wlr=o("swin"),Hlr=o(" \u2014 "),BW=a("a"),Ulr=o("SwinForImageClassification"),Jlr=o(" (Swin Transformer model)"),Ylr=l(),xT=a("li"),ybe=a("strong"),Klr=o("van"),Zlr=o(" \u2014 "),NW=a("a"),eir=o("VanForImageClassification"),oir=o(" (VAN model)"),rir=l(),$T=a("li"),xbe=a("strong"),tir=o("vit"),air=o(" \u2014 "),IW=a("a"),nir=o("ViTForImageClassification"),sir=o(" (ViT model)"),lir=l(),kT=a("p"),iir=o("The model is set in evaluation mode by default using "),$be=a("code"),dir=o("model.eval()"),cir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=a("code"),fir=o("model.train()"),mir=l(),F(ST.$$.fragment),jXe=l(),Cd=a("h2"),RT=a("a"),Sbe=a("span"),F(Iy.$$.fragment),gir=l(),Rbe=a("span"),hir=o("AutoModelForVision2Seq"),DXe=l(),Vo=a("div"),F(qy.$$.fragment),pir=l(),wd=a("p"),_ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qW=a("a"),uir=o("from_pretrained()"),bir=o(" class method or the "),jW=a("a"),vir=o("from_config()"),Fir=o(` class
method.`),Tir=l(),jy=a("p"),Mir=o("This class cannot be instantiated directly using "),Pbe=a("code"),Eir=o("__init__()"),Cir=o(" (throws an error)."),wir=l(),Tt=a("div"),F(Dy.$$.fragment),Air=l(),Bbe=a("p"),Lir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yir=l(),Ad=a("p"),xir=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),$ir=o("not"),kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),Sir=o("from_pretrained()"),Rir=o(" to load the model weights."),Pir=l(),F(PT.$$.fragment),Bir=l(),co=a("div"),F(Gy.$$.fragment),Nir=l(),Ibe=a("p"),Iir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qir=l(),Ha=a("p"),jir=o("The model class to instantiate is selected based on the "),qbe=a("code"),Dir=o("model_type"),Gir=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),Oir=o("pretrained_model_name_or_path"),Vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(":"),Qir=l(),Gbe=a("ul"),BT=a("li"),Obe=a("strong"),Wir=o("vision-encoder-decoder"),Hir=o(" \u2014 "),GW=a("a"),Uir=o("VisionEncoderDecoderModel"),Jir=o(" (Vision Encoder decoder model)"),Yir=l(),NT=a("p"),Kir=o("The model is set in evaluation mode by default using "),Vbe=a("code"),Zir=o("model.eval()"),edr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xbe=a("code"),odr=o("model.train()"),rdr=l(),F(IT.$$.fragment),GXe=l(),Ld=a("h2"),qT=a("a"),zbe=a("span"),F(Oy.$$.fragment),tdr=l(),Qbe=a("span"),adr=o("AutoModelForVisualQuestionAnswering"),OXe=l(),Xo=a("div"),F(Vy.$$.fragment),ndr=l(),yd=a("p"),sdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OW=a("a"),ldr=o("from_pretrained()"),idr=o(" class method or the "),VW=a("a"),ddr=o("from_config()"),cdr=o(` class
method.`),fdr=l(),Xy=a("p"),mdr=o("This class cannot be instantiated directly using "),Wbe=a("code"),gdr=o("__init__()"),hdr=o(" (throws an error)."),pdr=l(),Mt=a("div"),F(zy.$$.fragment),_dr=l(),Hbe=a("p"),udr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),bdr=l(),xd=a("p"),vdr=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),Fdr=o("not"),Tdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Mdr=o("from_pretrained()"),Edr=o(" to load the model weights."),Cdr=l(),F(jT.$$.fragment),wdr=l(),fo=a("div"),F(Qy.$$.fragment),Adr=l(),Jbe=a("p"),Ldr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ydr=l(),Ua=a("p"),xdr=o("The model class to instantiate is selected based on the "),Ybe=a("code"),$dr=o("model_type"),kdr=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),Sdr=o("pretrained_model_name_or_path"),Rdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),Pdr=o("pretrained_model_name_or_path"),Bdr=o(":"),Ndr=l(),eve=a("ul"),DT=a("li"),ove=a("strong"),Idr=o("vilt"),qdr=o(" \u2014 "),zW=a("a"),jdr=o("ViltForQuestionAnswering"),Ddr=o(" (ViLT model)"),Gdr=l(),GT=a("p"),Odr=o("The model is set in evaluation mode by default using "),rve=a("code"),Vdr=o("model.eval()"),Xdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tve=a("code"),zdr=o("model.train()"),Qdr=l(),F(OT.$$.fragment),VXe=l(),$d=a("h2"),VT=a("a"),ave=a("span"),F(Wy.$$.fragment),Wdr=l(),nve=a("span"),Hdr=o("AutoModelForAudioClassification"),XXe=l(),zo=a("div"),F(Hy.$$.fragment),Udr=l(),kd=a("p"),Jdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QW=a("a"),Ydr=o("from_pretrained()"),Kdr=o(" class method or the "),WW=a("a"),Zdr=o("from_config()"),ecr=o(` class
method.`),ocr=l(),Uy=a("p"),rcr=o("This class cannot be instantiated directly using "),sve=a("code"),tcr=o("__init__()"),acr=o(" (throws an error)."),ncr=l(),Et=a("div"),F(Jy.$$.fragment),scr=l(),lve=a("p"),lcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),icr=l(),Sd=a("p"),dcr=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),ccr=o("not"),fcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),mcr=o("from_pretrained()"),gcr=o(" to load the model weights."),hcr=l(),F(XT.$$.fragment),pcr=l(),mo=a("div"),F(Yy.$$.fragment),_cr=l(),dve=a("p"),ucr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),bcr=l(),Ja=a("p"),vcr=o("The model class to instantiate is selected based on the "),cve=a("code"),Fcr=o("model_type"),Tcr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),Mcr=o("pretrained_model_name_or_path"),Ecr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),Ccr=o("pretrained_model_name_or_path"),wcr=o(":"),Acr=l(),Pe=a("ul"),zT=a("li"),gve=a("strong"),Lcr=o("data2vec-audio"),ycr=o(" \u2014 "),UW=a("a"),xcr=o("Data2VecAudioForSequenceClassification"),$cr=o(" (Data2VecAudio model)"),kcr=l(),QT=a("li"),hve=a("strong"),Scr=o("hubert"),Rcr=o(" \u2014 "),JW=a("a"),Pcr=o("HubertForSequenceClassification"),Bcr=o(" (Hubert model)"),Ncr=l(),WT=a("li"),pve=a("strong"),Icr=o("sew"),qcr=o(" \u2014 "),YW=a("a"),jcr=o("SEWForSequenceClassification"),Dcr=o(" (SEW model)"),Gcr=l(),HT=a("li"),_ve=a("strong"),Ocr=o("sew-d"),Vcr=o(" \u2014 "),KW=a("a"),Xcr=o("SEWDForSequenceClassification"),zcr=o(" (SEW-D model)"),Qcr=l(),UT=a("li"),uve=a("strong"),Wcr=o("unispeech"),Hcr=o(" \u2014 "),ZW=a("a"),Ucr=o("UniSpeechForSequenceClassification"),Jcr=o(" (UniSpeech model)"),Ycr=l(),JT=a("li"),bve=a("strong"),Kcr=o("unispeech-sat"),Zcr=o(" \u2014 "),eH=a("a"),efr=o("UniSpeechSatForSequenceClassification"),ofr=o(" (UniSpeechSat model)"),rfr=l(),YT=a("li"),vve=a("strong"),tfr=o("wav2vec2"),afr=o(" \u2014 "),oH=a("a"),nfr=o("Wav2Vec2ForSequenceClassification"),sfr=o(" (Wav2Vec2 model)"),lfr=l(),KT=a("li"),Fve=a("strong"),ifr=o("wav2vec2-conformer"),dfr=o(" \u2014 "),rH=a("a"),cfr=o("Wav2Vec2ConformerForSequenceClassification"),ffr=o(" (Wav2Vec2-Conformer model)"),mfr=l(),ZT=a("li"),Tve=a("strong"),gfr=o("wavlm"),hfr=o(" \u2014 "),tH=a("a"),pfr=o("WavLMForSequenceClassification"),_fr=o(" (WavLM model)"),ufr=l(),e8=a("p"),bfr=o("The model is set in evaluation mode by default using "),Mve=a("code"),vfr=o("model.eval()"),Ffr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eve=a("code"),Tfr=o("model.train()"),Mfr=l(),F(o8.$$.fragment),zXe=l(),Rd=a("h2"),r8=a("a"),Cve=a("span"),F(Ky.$$.fragment),Efr=l(),wve=a("span"),Cfr=o("AutoModelForAudioFrameClassification"),QXe=l(),Qo=a("div"),F(Zy.$$.fragment),wfr=l(),Pd=a("p"),Afr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aH=a("a"),Lfr=o("from_pretrained()"),yfr=o(" class method or the "),nH=a("a"),xfr=o("from_config()"),$fr=o(` class
method.`),kfr=l(),e9=a("p"),Sfr=o("This class cannot be instantiated directly using "),Ave=a("code"),Rfr=o("__init__()"),Pfr=o(" (throws an error)."),Bfr=l(),Ct=a("div"),F(o9.$$.fragment),Nfr=l(),Lve=a("p"),Ifr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qfr=l(),Bd=a("p"),jfr=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),Dfr=o("not"),Gfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),Ofr=o("from_pretrained()"),Vfr=o(" to load the model weights."),Xfr=l(),F(t8.$$.fragment),zfr=l(),go=a("div"),F(r9.$$.fragment),Qfr=l(),xve=a("p"),Wfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Hfr=l(),Ya=a("p"),Ufr=o("The model class to instantiate is selected based on the "),$ve=a("code"),Jfr=o("model_type"),Yfr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(":"),rmr=l(),rt=a("ul"),a8=a("li"),Rve=a("strong"),tmr=o("data2vec-audio"),amr=o(" \u2014 "),lH=a("a"),nmr=o("Data2VecAudioForAudioFrameClassification"),smr=o(" (Data2VecAudio model)"),lmr=l(),n8=a("li"),Pve=a("strong"),imr=o("unispeech-sat"),dmr=o(" \u2014 "),iH=a("a"),cmr=o("UniSpeechSatForAudioFrameClassification"),fmr=o(" (UniSpeechSat model)"),mmr=l(),s8=a("li"),Bve=a("strong"),gmr=o("wav2vec2"),hmr=o(" \u2014 "),dH=a("a"),pmr=o("Wav2Vec2ForAudioFrameClassification"),_mr=o(" (Wav2Vec2 model)"),umr=l(),l8=a("li"),Nve=a("strong"),bmr=o("wav2vec2-conformer"),vmr=o(" \u2014 "),cH=a("a"),Fmr=o("Wav2Vec2ConformerForAudioFrameClassification"),Tmr=o(" (Wav2Vec2-Conformer model)"),Mmr=l(),i8=a("li"),Ive=a("strong"),Emr=o("wavlm"),Cmr=o(" \u2014 "),fH=a("a"),wmr=o("WavLMForAudioFrameClassification"),Amr=o(" (WavLM model)"),Lmr=l(),d8=a("p"),ymr=o("The model is set in evaluation mode by default using "),qve=a("code"),xmr=o("model.eval()"),$mr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=a("code"),kmr=o("model.train()"),Smr=l(),F(c8.$$.fragment),WXe=l(),Nd=a("h2"),f8=a("a"),Dve=a("span"),F(t9.$$.fragment),Rmr=l(),Gve=a("span"),Pmr=o("AutoModelForCTC"),HXe=l(),Wo=a("div"),F(a9.$$.fragment),Bmr=l(),Id=a("p"),Nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mH=a("a"),Imr=o("from_pretrained()"),qmr=o(" class method or the "),gH=a("a"),jmr=o("from_config()"),Dmr=o(` class
method.`),Gmr=l(),n9=a("p"),Omr=o("This class cannot be instantiated directly using "),Ove=a("code"),Vmr=o("__init__()"),Xmr=o(" (throws an error)."),zmr=l(),wt=a("div"),F(s9.$$.fragment),Qmr=l(),Vve=a("p"),Wmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Hmr=l(),qd=a("p"),Umr=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),Jmr=o("not"),Ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),Kmr=o("from_pretrained()"),Zmr=o(" to load the model weights."),egr=l(),F(m8.$$.fragment),ogr=l(),ho=a("div"),F(l9.$$.fragment),rgr=l(),zve=a("p"),tgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),agr=l(),Ka=a("p"),ngr=o("The model class to instantiate is selected based on the "),Qve=a("code"),sgr=o("model_type"),lgr=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),igr=o("pretrained_model_name_or_path"),dgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(":"),mgr=l(),Le=a("ul"),g8=a("li"),Uve=a("strong"),ggr=o("data2vec-audio"),hgr=o(" \u2014 "),pH=a("a"),pgr=o("Data2VecAudioForCTC"),_gr=o(" (Data2VecAudio model)"),ugr=l(),h8=a("li"),Jve=a("strong"),bgr=o("hubert"),vgr=o(" \u2014 "),_H=a("a"),Fgr=o("HubertForCTC"),Tgr=o(" (Hubert model)"),Mgr=l(),p8=a("li"),Yve=a("strong"),Egr=o("mctct"),Cgr=o(" \u2014 "),uH=a("a"),wgr=o("MCTCTForCTC"),Agr=o(" (M-CTC-T model)"),Lgr=l(),_8=a("li"),Kve=a("strong"),ygr=o("sew"),xgr=o(" \u2014 "),bH=a("a"),$gr=o("SEWForCTC"),kgr=o(" (SEW model)"),Sgr=l(),u8=a("li"),Zve=a("strong"),Rgr=o("sew-d"),Pgr=o(" \u2014 "),vH=a("a"),Bgr=o("SEWDForCTC"),Ngr=o(" (SEW-D model)"),Igr=l(),b8=a("li"),eFe=a("strong"),qgr=o("unispeech"),jgr=o(" \u2014 "),FH=a("a"),Dgr=o("UniSpeechForCTC"),Ggr=o(" (UniSpeech model)"),Ogr=l(),v8=a("li"),oFe=a("strong"),Vgr=o("unispeech-sat"),Xgr=o(" \u2014 "),TH=a("a"),zgr=o("UniSpeechSatForCTC"),Qgr=o(" (UniSpeechSat model)"),Wgr=l(),F8=a("li"),rFe=a("strong"),Hgr=o("wav2vec2"),Ugr=o(" \u2014 "),MH=a("a"),Jgr=o("Wav2Vec2ForCTC"),Ygr=o(" (Wav2Vec2 model)"),Kgr=l(),T8=a("li"),tFe=a("strong"),Zgr=o("wav2vec2-conformer"),ehr=o(" \u2014 "),EH=a("a"),ohr=o("Wav2Vec2ConformerForCTC"),rhr=o(" (Wav2Vec2-Conformer model)"),thr=l(),M8=a("li"),aFe=a("strong"),ahr=o("wavlm"),nhr=o(" \u2014 "),CH=a("a"),shr=o("WavLMForCTC"),lhr=o(" (WavLM model)"),ihr=l(),E8=a("p"),dhr=o("The model is set in evaluation mode by default using "),nFe=a("code"),chr=o("model.eval()"),fhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=a("code"),mhr=o("model.train()"),ghr=l(),F(C8.$$.fragment),UXe=l(),jd=a("h2"),w8=a("a"),lFe=a("span"),F(i9.$$.fragment),hhr=l(),iFe=a("span"),phr=o("AutoModelForSpeechSeq2Seq"),JXe=l(),Ho=a("div"),F(d9.$$.fragment),_hr=l(),Dd=a("p"),uhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wH=a("a"),bhr=o("from_pretrained()"),vhr=o(" class method or the "),AH=a("a"),Fhr=o("from_config()"),Thr=o(` class
method.`),Mhr=l(),c9=a("p"),Ehr=o("This class cannot be instantiated directly using "),dFe=a("code"),Chr=o("__init__()"),whr=o(" (throws an error)."),Ahr=l(),At=a("div"),F(f9.$$.fragment),Lhr=l(),cFe=a("p"),yhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xhr=l(),Gd=a("p"),$hr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),khr=o("not"),Shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),Rhr=o("from_pretrained()"),Phr=o(" to load the model weights."),Bhr=l(),F(A8.$$.fragment),Nhr=l(),po=a("div"),F(m9.$$.fragment),Ihr=l(),mFe=a("p"),qhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jhr=l(),Za=a("p"),Dhr=o("The model class to instantiate is selected based on the "),gFe=a("code"),Ghr=o("model_type"),Ohr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),zhr=o("pretrained_model_name_or_path"),Qhr=o(":"),Whr=l(),g9=a("ul"),L8=a("li"),_Fe=a("strong"),Hhr=o("speech-encoder-decoder"),Uhr=o(" \u2014 "),yH=a("a"),Jhr=o("SpeechEncoderDecoderModel"),Yhr=o(" (Speech Encoder decoder model)"),Khr=l(),y8=a("li"),uFe=a("strong"),Zhr=o("speech_to_text"),epr=o(" \u2014 "),xH=a("a"),opr=o("Speech2TextForConditionalGeneration"),rpr=o(" (Speech2Text model)"),tpr=l(),x8=a("p"),apr=o("The model is set in evaluation mode by default using "),bFe=a("code"),npr=o("model.eval()"),spr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vFe=a("code"),lpr=o("model.train()"),ipr=l(),F($8.$$.fragment),YXe=l(),Od=a("h2"),k8=a("a"),FFe=a("span"),F(h9.$$.fragment),dpr=l(),TFe=a("span"),cpr=o("AutoModelForAudioXVector"),KXe=l(),Uo=a("div"),F(p9.$$.fragment),fpr=l(),Vd=a("p"),mpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$H=a("a"),gpr=o("from_pretrained()"),hpr=o(" class method or the "),kH=a("a"),ppr=o("from_config()"),_pr=o(` class
method.`),upr=l(),_9=a("p"),bpr=o("This class cannot be instantiated directly using "),MFe=a("code"),vpr=o("__init__()"),Fpr=o(" (throws an error)."),Tpr=l(),Lt=a("div"),F(u9.$$.fragment),Mpr=l(),EFe=a("p"),Epr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Cpr=l(),Xd=a("p"),wpr=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),Apr=o("not"),Lpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),ypr=o("from_pretrained()"),xpr=o(" to load the model weights."),$pr=l(),F(S8.$$.fragment),kpr=l(),_o=a("div"),F(b9.$$.fragment),Spr=l(),wFe=a("p"),Rpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ppr=l(),en=a("p"),Bpr=o("The model class to instantiate is selected based on the "),AFe=a("code"),Npr=o("model_type"),Ipr=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),qpr=o("pretrained_model_name_or_path"),jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(":"),Opr=l(),tt=a("ul"),R8=a("li"),xFe=a("strong"),Vpr=o("data2vec-audio"),Xpr=o(" \u2014 "),RH=a("a"),zpr=o("Data2VecAudioForXVector"),Qpr=o(" (Data2VecAudio model)"),Wpr=l(),P8=a("li"),$Fe=a("strong"),Hpr=o("unispeech-sat"),Upr=o(" \u2014 "),PH=a("a"),Jpr=o("UniSpeechSatForXVector"),Ypr=o(" (UniSpeechSat model)"),Kpr=l(),B8=a("li"),kFe=a("strong"),Zpr=o("wav2vec2"),e_r=o(" \u2014 "),BH=a("a"),o_r=o("Wav2Vec2ForXVector"),r_r=o(" (Wav2Vec2 model)"),t_r=l(),N8=a("li"),SFe=a("strong"),a_r=o("wav2vec2-conformer"),n_r=o(" \u2014 "),NH=a("a"),s_r=o("Wav2Vec2ConformerForXVector"),l_r=o(" (Wav2Vec2-Conformer model)"),i_r=l(),I8=a("li"),RFe=a("strong"),d_r=o("wavlm"),c_r=o(" \u2014 "),IH=a("a"),f_r=o("WavLMForXVector"),m_r=o(" (WavLM model)"),g_r=l(),q8=a("p"),h_r=o("The model is set in evaluation mode by default using "),PFe=a("code"),p_r=o("model.eval()"),__r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BFe=a("code"),u_r=o("model.train()"),b_r=l(),F(j8.$$.fragment),ZXe=l(),zd=a("h2"),D8=a("a"),NFe=a("span"),F(v9.$$.fragment),v_r=l(),IFe=a("span"),F_r=o("AutoModelForMaskedImageModeling"),eze=l(),Jo=a("div"),F(F9.$$.fragment),T_r=l(),Qd=a("p"),M_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qH=a("a"),E_r=o("from_pretrained()"),C_r=o(" class method or the "),jH=a("a"),w_r=o("from_config()"),A_r=o(` class
method.`),L_r=l(),T9=a("p"),y_r=o("This class cannot be instantiated directly using "),qFe=a("code"),x_r=o("__init__()"),$_r=o(" (throws an error)."),k_r=l(),yt=a("div"),F(M9.$$.fragment),S_r=l(),jFe=a("p"),R_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),P_r=l(),Wd=a("p"),B_r=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),N_r=o("not"),I_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),q_r=o("from_pretrained()"),j_r=o(" to load the model weights."),D_r=l(),F(G8.$$.fragment),G_r=l(),uo=a("div"),F(E9.$$.fragment),O_r=l(),GFe=a("p"),V_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),X_r=l(),on=a("p"),z_r=o("The model class to instantiate is selected based on the "),OFe=a("code"),Q_r=o("model_type"),W_r=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),H_r=o("pretrained_model_name_or_path"),U_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(":"),K_r=l(),Hd=a("ul"),O8=a("li"),zFe=a("strong"),Z_r=o("deit"),eur=o(" \u2014 "),GH=a("a"),our=o("DeiTForMaskedImageModeling"),rur=o(" (DeiT model)"),tur=l(),V8=a("li"),QFe=a("strong"),aur=o("swin"),nur=o(" \u2014 "),OH=a("a"),sur=o("SwinForMaskedImageModeling"),lur=o(" (Swin Transformer model)"),iur=l(),X8=a("li"),WFe=a("strong"),dur=o("vit"),cur=o(" \u2014 "),VH=a("a"),fur=o("ViTForMaskedImageModeling"),mur=o(" (ViT model)"),gur=l(),z8=a("p"),hur=o("The model is set in evaluation mode by default using "),HFe=a("code"),pur=o("model.eval()"),_ur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=a("code"),uur=o("model.train()"),bur=l(),F(Q8.$$.fragment),oze=l(),Ud=a("h2"),W8=a("a"),JFe=a("span"),F(C9.$$.fragment),vur=l(),YFe=a("span"),Fur=o("AutoModelForObjectDetection"),rze=l(),Yo=a("div"),F(w9.$$.fragment),Tur=l(),Jd=a("p"),Mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XH=a("a"),Eur=o("from_pretrained()"),Cur=o(" class method or the "),zH=a("a"),wur=o("from_config()"),Aur=o(` class
method.`),Lur=l(),A9=a("p"),yur=o("This class cannot be instantiated directly using "),KFe=a("code"),xur=o("__init__()"),$ur=o(" (throws an error)."),kur=l(),xt=a("div"),F(L9.$$.fragment),Sur=l(),ZFe=a("p"),Rur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Pur=l(),Yd=a("p"),Bur=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),Nur=o("not"),Iur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),qur=o("from_pretrained()"),jur=o(" to load the model weights."),Dur=l(),F(H8.$$.fragment),Gur=l(),bo=a("div"),F(y9.$$.fragment),Our=l(),o6e=a("p"),Vur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Xur=l(),rn=a("p"),zur=o("The model class to instantiate is selected based on the "),r6e=a("code"),Qur=o("model_type"),Wur=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),Jur=o("pretrained_model_name_or_path"),Yur=o(":"),Kur=l(),x9=a("ul"),U8=a("li"),n6e=a("strong"),Zur=o("detr"),e1r=o(" \u2014 "),WH=a("a"),o1r=o("DetrForObjectDetection"),r1r=o(" (DETR model)"),t1r=l(),J8=a("li"),s6e=a("strong"),a1r=o("yolos"),n1r=o(" \u2014 "),HH=a("a"),s1r=o("YolosForObjectDetection"),l1r=o(" (YOLOS model)"),i1r=l(),Y8=a("p"),d1r=o("The model is set in evaluation mode by default using "),l6e=a("code"),c1r=o("model.eval()"),f1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i6e=a("code"),m1r=o("model.train()"),g1r=l(),F(K8.$$.fragment),tze=l(),Kd=a("h2"),Z8=a("a"),d6e=a("span"),F($9.$$.fragment),h1r=l(),c6e=a("span"),p1r=o("AutoModelForImageSegmentation"),aze=l(),Ko=a("div"),F(k9.$$.fragment),_1r=l(),Zd=a("p"),u1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UH=a("a"),b1r=o("from_pretrained()"),v1r=o(" class method or the "),JH=a("a"),F1r=o("from_config()"),T1r=o(` class
method.`),M1r=l(),S9=a("p"),E1r=o("This class cannot be instantiated directly using "),f6e=a("code"),C1r=o("__init__()"),w1r=o(" (throws an error)."),A1r=l(),$t=a("div"),F(R9.$$.fragment),L1r=l(),m6e=a("p"),y1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),x1r=l(),ec=a("p"),$1r=o(`Note:
Loading a model from its configuration file does `),g6e=a("strong"),k1r=o("not"),S1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),R1r=o("from_pretrained()"),P1r=o(" to load the model weights."),B1r=l(),F(eM.$$.fragment),N1r=l(),vo=a("div"),F(P9.$$.fragment),I1r=l(),h6e=a("p"),q1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),j1r=l(),tn=a("p"),D1r=o("The model class to instantiate is selected based on the "),p6e=a("code"),G1r=o("model_type"),O1r=o(` property of the config object (either
passed as an argument or loaded from `),_6e=a("code"),V1r=o("pretrained_model_name_or_path"),X1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),z1r=o("pretrained_model_name_or_path"),Q1r=o(":"),W1r=l(),b6e=a("ul"),oM=a("li"),v6e=a("strong"),H1r=o("detr"),U1r=o(" \u2014 "),KH=a("a"),J1r=o("DetrForSegmentation"),Y1r=o(" (DETR model)"),K1r=l(),rM=a("p"),Z1r=o("The model is set in evaluation mode by default using "),F6e=a("code"),e2r=o("model.eval()"),o2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T6e=a("code"),r2r=o("model.train()"),t2r=l(),F(tM.$$.fragment),nze=l(),oc=a("h2"),aM=a("a"),M6e=a("span"),F(B9.$$.fragment),a2r=l(),E6e=a("span"),n2r=o("AutoModelForSemanticSegmentation"),sze=l(),Zo=a("div"),F(N9.$$.fragment),s2r=l(),rc=a("p"),l2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZH=a("a"),i2r=o("from_pretrained()"),d2r=o(" class method or the "),eU=a("a"),c2r=o("from_config()"),f2r=o(` class
method.`),m2r=l(),I9=a("p"),g2r=o("This class cannot be instantiated directly using "),C6e=a("code"),h2r=o("__init__()"),p2r=o(" (throws an error)."),_2r=l(),kt=a("div"),F(q9.$$.fragment),u2r=l(),w6e=a("p"),b2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),v2r=l(),tc=a("p"),F2r=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),T2r=o("not"),M2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),E2r=o("from_pretrained()"),C2r=o(" to load the model weights."),w2r=l(),F(nM.$$.fragment),A2r=l(),Fo=a("div"),F(j9.$$.fragment),L2r=l(),L6e=a("p"),y2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),x2r=l(),an=a("p"),$2r=o("The model class to instantiate is selected based on the "),y6e=a("code"),k2r=o("model_type"),S2r=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),R2r=o("pretrained_model_name_or_path"),P2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),B2r=o("pretrained_model_name_or_path"),N2r=o(":"),I2r=l(),at=a("ul"),sM=a("li"),k6e=a("strong"),q2r=o("beit"),j2r=o(" \u2014 "),rU=a("a"),D2r=o("BeitForSemanticSegmentation"),G2r=o(" (BEiT model)"),O2r=l(),lM=a("li"),S6e=a("strong"),V2r=o("data2vec-vision"),X2r=o(" \u2014 "),tU=a("a"),z2r=o("Data2VecVisionForSemanticSegmentation"),Q2r=o(" (Data2VecVision model)"),W2r=l(),iM=a("li"),R6e=a("strong"),H2r=o("dpt"),U2r=o(" \u2014 "),aU=a("a"),J2r=o("DPTForSemanticSegmentation"),Y2r=o(" (DPT model)"),K2r=l(),dM=a("li"),P6e=a("strong"),Z2r=o("mobilevit"),ebr=o(" \u2014 "),nU=a("a"),obr=o("MobileViTForSemanticSegmentation"),rbr=o(" (MobileViT model)"),tbr=l(),cM=a("li"),B6e=a("strong"),abr=o("segformer"),nbr=o(" \u2014 "),sU=a("a"),sbr=o("SegformerForSemanticSegmentation"),lbr=o(" (SegFormer model)"),ibr=l(),fM=a("p"),dbr=o("The model is set in evaluation mode by default using "),N6e=a("code"),cbr=o("model.eval()"),fbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I6e=a("code"),mbr=o("model.train()"),gbr=l(),F(mM.$$.fragment),lze=l(),ac=a("h2"),gM=a("a"),q6e=a("span"),F(D9.$$.fragment),hbr=l(),j6e=a("span"),pbr=o("AutoModelForInstanceSegmentation"),ize=l(),er=a("div"),F(G9.$$.fragment),_br=l(),nc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lU=a("a"),bbr=o("from_pretrained()"),vbr=o(" class method or the "),iU=a("a"),Fbr=o("from_config()"),Tbr=o(` class
method.`),Mbr=l(),O9=a("p"),Ebr=o("This class cannot be instantiated directly using "),D6e=a("code"),Cbr=o("__init__()"),wbr=o(" (throws an error)."),Abr=l(),St=a("div"),F(V9.$$.fragment),Lbr=l(),G6e=a("p"),ybr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xbr=l(),sc=a("p"),$br=o(`Note:
Loading a model from its configuration file does `),O6e=a("strong"),kbr=o("not"),Sbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),Rbr=o("from_pretrained()"),Pbr=o(" to load the model weights."),Bbr=l(),F(hM.$$.fragment),Nbr=l(),To=a("div"),F(X9.$$.fragment),Ibr=l(),V6e=a("p"),qbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jbr=l(),nn=a("p"),Dbr=o("The model class to instantiate is selected based on the "),X6e=a("code"),Gbr=o("model_type"),Obr=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),Vbr=o("pretrained_model_name_or_path"),Xbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=a("code"),zbr=o("pretrained_model_name_or_path"),Qbr=o(":"),Wbr=l(),W6e=a("ul"),pM=a("li"),H6e=a("strong"),Hbr=o("maskformer"),Ubr=o(" \u2014 "),cU=a("a"),Jbr=o("MaskFormerForInstanceSegmentation"),Ybr=o(" (MaskFormer model)"),Kbr=l(),_M=a("p"),Zbr=o("The model is set in evaluation mode by default using "),U6e=a("code"),evr=o("model.eval()"),ovr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J6e=a("code"),rvr=o("model.train()"),tvr=l(),F(uM.$$.fragment),dze=l(),lc=a("h2"),bM=a("a"),Y6e=a("span"),F(z9.$$.fragment),avr=l(),K6e=a("span"),nvr=o("TFAutoModel"),cze=l(),or=a("div"),F(Q9.$$.fragment),svr=l(),ic=a("p"),lvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fU=a("a"),ivr=o("from_pretrained()"),dvr=o(" class method or the "),mU=a("a"),cvr=o("from_config()"),fvr=o(` class
method.`),mvr=l(),W9=a("p"),gvr=o("This class cannot be instantiated directly using "),Z6e=a("code"),hvr=o("__init__()"),pvr=o(" (throws an error)."),_vr=l(),Rt=a("div"),F(H9.$$.fragment),uvr=l(),eTe=a("p"),bvr=o("Instantiates one of the base model classes of the library from a configuration."),vvr=l(),dc=a("p"),Fvr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),Tvr=o("not"),Mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),Evr=o("from_pretrained()"),Cvr=o(" to load the model weights."),wvr=l(),F(vM.$$.fragment),Avr=l(),xr=a("div"),F(U9.$$.fragment),Lvr=l(),rTe=a("p"),yvr=o("Instantiate one of the base model classes of the library from a pretrained model."),xvr=l(),sn=a("p"),$vr=o("The model class to instantiate is selected based on the "),tTe=a("code"),kvr=o("model_type"),Svr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),Rvr=o("pretrained_model_name_or_path"),Pvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),Bvr=o("pretrained_model_name_or_path"),Nvr=o(":"),Ivr=l(),q=a("ul"),FM=a("li"),sTe=a("strong"),qvr=o("albert"),jvr=o(" \u2014 "),hU=a("a"),Dvr=o("TFAlbertModel"),Gvr=o(" (ALBERT model)"),Ovr=l(),TM=a("li"),lTe=a("strong"),Vvr=o("bart"),Xvr=o(" \u2014 "),pU=a("a"),zvr=o("TFBartModel"),Qvr=o(" (BART model)"),Wvr=l(),MM=a("li"),iTe=a("strong"),Hvr=o("bert"),Uvr=o(" \u2014 "),_U=a("a"),Jvr=o("TFBertModel"),Yvr=o(" (BERT model)"),Kvr=l(),EM=a("li"),dTe=a("strong"),Zvr=o("blenderbot"),eFr=o(" \u2014 "),uU=a("a"),oFr=o("TFBlenderbotModel"),rFr=o(" (Blenderbot model)"),tFr=l(),CM=a("li"),cTe=a("strong"),aFr=o("blenderbot-small"),nFr=o(" \u2014 "),bU=a("a"),sFr=o("TFBlenderbotSmallModel"),lFr=o(" (BlenderbotSmall model)"),iFr=l(),wM=a("li"),fTe=a("strong"),dFr=o("camembert"),cFr=o(" \u2014 "),vU=a("a"),fFr=o("TFCamembertModel"),mFr=o(" (CamemBERT model)"),gFr=l(),AM=a("li"),mTe=a("strong"),hFr=o("clip"),pFr=o(" \u2014 "),FU=a("a"),_Fr=o("TFCLIPModel"),uFr=o(" (CLIP model)"),bFr=l(),LM=a("li"),gTe=a("strong"),vFr=o("convbert"),FFr=o(" \u2014 "),TU=a("a"),TFr=o("TFConvBertModel"),MFr=o(" (ConvBERT model)"),EFr=l(),yM=a("li"),hTe=a("strong"),CFr=o("convnext"),wFr=o(" \u2014 "),MU=a("a"),AFr=o("TFConvNextModel"),LFr=o(" (ConvNeXT model)"),yFr=l(),xM=a("li"),pTe=a("strong"),xFr=o("ctrl"),$Fr=o(" \u2014 "),EU=a("a"),kFr=o("TFCTRLModel"),SFr=o(" (CTRL model)"),RFr=l(),$M=a("li"),_Te=a("strong"),PFr=o("data2vec-vision"),BFr=o(" \u2014 "),CU=a("a"),NFr=o("TFData2VecVisionModel"),IFr=o(" (Data2VecVision model)"),qFr=l(),kM=a("li"),uTe=a("strong"),jFr=o("deberta"),DFr=o(" \u2014 "),wU=a("a"),GFr=o("TFDebertaModel"),OFr=o(" (DeBERTa model)"),VFr=l(),SM=a("li"),bTe=a("strong"),XFr=o("deberta-v2"),zFr=o(" \u2014 "),AU=a("a"),QFr=o("TFDebertaV2Model"),WFr=o(" (DeBERTa-v2 model)"),HFr=l(),RM=a("li"),vTe=a("strong"),UFr=o("deit"),JFr=o(" \u2014 "),LU=a("a"),YFr=o("TFDeiTModel"),KFr=o(" (DeiT model)"),ZFr=l(),PM=a("li"),FTe=a("strong"),e6r=o("distilbert"),o6r=o(" \u2014 "),yU=a("a"),r6r=o("TFDistilBertModel"),t6r=o(" (DistilBERT model)"),a6r=l(),BM=a("li"),TTe=a("strong"),n6r=o("dpr"),s6r=o(" \u2014 "),xU=a("a"),l6r=o("TFDPRQuestionEncoder"),i6r=o(" (DPR model)"),d6r=l(),NM=a("li"),MTe=a("strong"),c6r=o("electra"),f6r=o(" \u2014 "),$U=a("a"),m6r=o("TFElectraModel"),g6r=o(" (ELECTRA model)"),h6r=l(),IM=a("li"),ETe=a("strong"),p6r=o("flaubert"),_6r=o(" \u2014 "),kU=a("a"),u6r=o("TFFlaubertModel"),b6r=o(" (FlauBERT model)"),v6r=l(),Ys=a("li"),CTe=a("strong"),F6r=o("funnel"),T6r=o(" \u2014 "),SU=a("a"),M6r=o("TFFunnelModel"),E6r=o(" or "),RU=a("a"),C6r=o("TFFunnelBaseModel"),w6r=o(" (Funnel Transformer model)"),A6r=l(),qM=a("li"),wTe=a("strong"),L6r=o("gpt2"),y6r=o(" \u2014 "),PU=a("a"),x6r=o("TFGPT2Model"),$6r=o(" (OpenAI GPT-2 model)"),k6r=l(),jM=a("li"),ATe=a("strong"),S6r=o("gptj"),R6r=o(" \u2014 "),BU=a("a"),P6r=o("TFGPTJModel"),B6r=o(" (GPT-J model)"),N6r=l(),DM=a("li"),LTe=a("strong"),I6r=o("hubert"),q6r=o(" \u2014 "),NU=a("a"),j6r=o("TFHubertModel"),D6r=o(" (Hubert model)"),G6r=l(),GM=a("li"),yTe=a("strong"),O6r=o("layoutlm"),V6r=o(" \u2014 "),IU=a("a"),X6r=o("TFLayoutLMModel"),z6r=o(" (LayoutLM model)"),Q6r=l(),OM=a("li"),xTe=a("strong"),W6r=o("led"),H6r=o(" \u2014 "),qU=a("a"),U6r=o("TFLEDModel"),J6r=o(" (LED model)"),Y6r=l(),VM=a("li"),$Te=a("strong"),K6r=o("longformer"),Z6r=o(" \u2014 "),jU=a("a"),eTr=o("TFLongformerModel"),oTr=o(" (Longformer model)"),rTr=l(),XM=a("li"),kTe=a("strong"),tTr=o("lxmert"),aTr=o(" \u2014 "),DU=a("a"),nTr=o("TFLxmertModel"),sTr=o(" (LXMERT model)"),lTr=l(),zM=a("li"),STe=a("strong"),iTr=o("marian"),dTr=o(" \u2014 "),GU=a("a"),cTr=o("TFMarianModel"),fTr=o(" (Marian model)"),mTr=l(),QM=a("li"),RTe=a("strong"),gTr=o("mbart"),hTr=o(" \u2014 "),OU=a("a"),pTr=o("TFMBartModel"),_Tr=o(" (mBART model)"),uTr=l(),WM=a("li"),PTe=a("strong"),bTr=o("mobilebert"),vTr=o(" \u2014 "),VU=a("a"),FTr=o("TFMobileBertModel"),TTr=o(" (MobileBERT model)"),MTr=l(),HM=a("li"),BTe=a("strong"),ETr=o("mpnet"),CTr=o(" \u2014 "),XU=a("a"),wTr=o("TFMPNetModel"),ATr=o(" (MPNet model)"),LTr=l(),UM=a("li"),NTe=a("strong"),yTr=o("mt5"),xTr=o(" \u2014 "),zU=a("a"),$Tr=o("TFMT5Model"),kTr=o(" (MT5 model)"),STr=l(),JM=a("li"),ITe=a("strong"),RTr=o("openai-gpt"),PTr=o(" \u2014 "),QU=a("a"),BTr=o("TFOpenAIGPTModel"),NTr=o(" (OpenAI GPT model)"),ITr=l(),YM=a("li"),qTe=a("strong"),qTr=o("opt"),jTr=o(" \u2014 "),WU=a("a"),DTr=o("TFOPTModel"),GTr=o(" (OPT model)"),OTr=l(),KM=a("li"),jTe=a("strong"),VTr=o("pegasus"),XTr=o(" \u2014 "),HU=a("a"),zTr=o("TFPegasusModel"),QTr=o(" (Pegasus model)"),WTr=l(),ZM=a("li"),DTe=a("strong"),HTr=o("regnet"),UTr=o(" \u2014 "),UU=a("a"),JTr=o("TFRegNetModel"),YTr=o(" (RegNet model)"),KTr=l(),e4=a("li"),GTe=a("strong"),ZTr=o("rembert"),e8r=o(" \u2014 "),JU=a("a"),o8r=o("TFRemBertModel"),r8r=o(" (RemBERT model)"),t8r=l(),o4=a("li"),OTe=a("strong"),a8r=o("resnet"),n8r=o(" \u2014 "),YU=a("a"),s8r=o("TFResNetModel"),l8r=o(" (ResNet model)"),i8r=l(),r4=a("li"),VTe=a("strong"),d8r=o("roberta"),c8r=o(" \u2014 "),KU=a("a"),f8r=o("TFRobertaModel"),m8r=o(" (RoBERTa model)"),g8r=l(),t4=a("li"),XTe=a("strong"),h8r=o("roformer"),p8r=o(" \u2014 "),ZU=a("a"),_8r=o("TFRoFormerModel"),u8r=o(" (RoFormer model)"),b8r=l(),a4=a("li"),zTe=a("strong"),v8r=o("speech_to_text"),F8r=o(" \u2014 "),eJ=a("a"),T8r=o("TFSpeech2TextModel"),M8r=o(" (Speech2Text model)"),E8r=l(),n4=a("li"),QTe=a("strong"),C8r=o("swin"),w8r=o(" \u2014 "),oJ=a("a"),A8r=o("TFSwinModel"),L8r=o(" (Swin Transformer model)"),y8r=l(),s4=a("li"),WTe=a("strong"),x8r=o("t5"),$8r=o(" \u2014 "),rJ=a("a"),k8r=o("TFT5Model"),S8r=o(" (T5 model)"),R8r=l(),l4=a("li"),HTe=a("strong"),P8r=o("tapas"),B8r=o(" \u2014 "),tJ=a("a"),N8r=o("TFTapasModel"),I8r=o(" (TAPAS model)"),q8r=l(),i4=a("li"),UTe=a("strong"),j8r=o("transfo-xl"),D8r=o(" \u2014 "),aJ=a("a"),G8r=o("TFTransfoXLModel"),O8r=o(" (Transformer-XL model)"),V8r=l(),d4=a("li"),JTe=a("strong"),X8r=o("vit"),z8r=o(" \u2014 "),nJ=a("a"),Q8r=o("TFViTModel"),W8r=o(" (ViT model)"),H8r=l(),c4=a("li"),YTe=a("strong"),U8r=o("vit_mae"),J8r=o(" \u2014 "),sJ=a("a"),Y8r=o("TFViTMAEModel"),K8r=o(" (ViTMAE model)"),Z8r=l(),f4=a("li"),KTe=a("strong"),eMr=o("wav2vec2"),oMr=o(" \u2014 "),lJ=a("a"),rMr=o("TFWav2Vec2Model"),tMr=o(" (Wav2Vec2 model)"),aMr=l(),m4=a("li"),ZTe=a("strong"),nMr=o("xlm"),sMr=o(" \u2014 "),iJ=a("a"),lMr=o("TFXLMModel"),iMr=o(" (XLM model)"),dMr=l(),g4=a("li"),e8e=a("strong"),cMr=o("xlm-roberta"),fMr=o(" \u2014 "),dJ=a("a"),mMr=o("TFXLMRobertaModel"),gMr=o(" (XLM-RoBERTa model)"),hMr=l(),h4=a("li"),o8e=a("strong"),pMr=o("xlnet"),_Mr=o(" \u2014 "),cJ=a("a"),uMr=o("TFXLNetModel"),bMr=o(" (XLNet model)"),vMr=l(),F(p4.$$.fragment),fze=l(),cc=a("h2"),_4=a("a"),r8e=a("span"),F(J9.$$.fragment),FMr=l(),t8e=a("span"),TMr=o("TFAutoModelForPreTraining"),mze=l(),rr=a("div"),F(Y9.$$.fragment),MMr=l(),fc=a("p"),EMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fJ=a("a"),CMr=o("from_pretrained()"),wMr=o(" class method or the "),mJ=a("a"),AMr=o("from_config()"),LMr=o(` class
method.`),yMr=l(),K9=a("p"),xMr=o("This class cannot be instantiated directly using "),a8e=a("code"),$Mr=o("__init__()"),kMr=o(" (throws an error)."),SMr=l(),Pt=a("div"),F(Z9.$$.fragment),RMr=l(),n8e=a("p"),PMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BMr=l(),mc=a("p"),NMr=o(`Note:
Loading a model from its configuration file does `),s8e=a("strong"),IMr=o("not"),qMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),jMr=o("from_pretrained()"),DMr=o(" to load the model weights."),GMr=l(),F(u4.$$.fragment),OMr=l(),$r=a("div"),F(ex.$$.fragment),VMr=l(),l8e=a("p"),XMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zMr=l(),ln=a("p"),QMr=o("The model class to instantiate is selected based on the "),i8e=a("code"),WMr=o("model_type"),HMr=o(` property of the config object (either
passed as an argument or loaded from `),d8e=a("code"),UMr=o("pretrained_model_name_or_path"),JMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(":"),ZMr=l(),se=a("ul"),b4=a("li"),f8e=a("strong"),e4r=o("albert"),o4r=o(" \u2014 "),hJ=a("a"),r4r=o("TFAlbertForPreTraining"),t4r=o(" (ALBERT model)"),a4r=l(),v4=a("li"),m8e=a("strong"),n4r=o("bart"),s4r=o(" \u2014 "),pJ=a("a"),l4r=o("TFBartForConditionalGeneration"),i4r=o(" (BART model)"),d4r=l(),F4=a("li"),g8e=a("strong"),c4r=o("bert"),f4r=o(" \u2014 "),_J=a("a"),m4r=o("TFBertForPreTraining"),g4r=o(" (BERT model)"),h4r=l(),T4=a("li"),h8e=a("strong"),p4r=o("camembert"),_4r=o(" \u2014 "),uJ=a("a"),u4r=o("TFCamembertForMaskedLM"),b4r=o(" (CamemBERT model)"),v4r=l(),M4=a("li"),p8e=a("strong"),F4r=o("ctrl"),T4r=o(" \u2014 "),bJ=a("a"),M4r=o("TFCTRLLMHeadModel"),E4r=o(" (CTRL model)"),C4r=l(),E4=a("li"),_8e=a("strong"),w4r=o("distilbert"),A4r=o(" \u2014 "),vJ=a("a"),L4r=o("TFDistilBertForMaskedLM"),y4r=o(" (DistilBERT model)"),x4r=l(),C4=a("li"),u8e=a("strong"),$4r=o("electra"),k4r=o(" \u2014 "),FJ=a("a"),S4r=o("TFElectraForPreTraining"),R4r=o(" (ELECTRA model)"),P4r=l(),w4=a("li"),b8e=a("strong"),B4r=o("flaubert"),N4r=o(" \u2014 "),TJ=a("a"),I4r=o("TFFlaubertWithLMHeadModel"),q4r=o(" (FlauBERT model)"),j4r=l(),A4=a("li"),v8e=a("strong"),D4r=o("funnel"),G4r=o(" \u2014 "),MJ=a("a"),O4r=o("TFFunnelForPreTraining"),V4r=o(" (Funnel Transformer model)"),X4r=l(),L4=a("li"),F8e=a("strong"),z4r=o("gpt2"),Q4r=o(" \u2014 "),EJ=a("a"),W4r=o("TFGPT2LMHeadModel"),H4r=o(" (OpenAI GPT-2 model)"),U4r=l(),y4=a("li"),T8e=a("strong"),J4r=o("layoutlm"),Y4r=o(" \u2014 "),CJ=a("a"),K4r=o("TFLayoutLMForMaskedLM"),Z4r=o(" (LayoutLM model)"),eEr=l(),x4=a("li"),M8e=a("strong"),oEr=o("lxmert"),rEr=o(" \u2014 "),wJ=a("a"),tEr=o("TFLxmertForPreTraining"),aEr=o(" (LXMERT model)"),nEr=l(),$4=a("li"),E8e=a("strong"),sEr=o("mobilebert"),lEr=o(" \u2014 "),AJ=a("a"),iEr=o("TFMobileBertForPreTraining"),dEr=o(" (MobileBERT model)"),cEr=l(),k4=a("li"),C8e=a("strong"),fEr=o("mpnet"),mEr=o(" \u2014 "),LJ=a("a"),gEr=o("TFMPNetForMaskedLM"),hEr=o(" (MPNet model)"),pEr=l(),S4=a("li"),w8e=a("strong"),_Er=o("openai-gpt"),uEr=o(" \u2014 "),yJ=a("a"),bEr=o("TFOpenAIGPTLMHeadModel"),vEr=o(" (OpenAI GPT model)"),FEr=l(),R4=a("li"),A8e=a("strong"),TEr=o("roberta"),MEr=o(" \u2014 "),xJ=a("a"),EEr=o("TFRobertaForMaskedLM"),CEr=o(" (RoBERTa model)"),wEr=l(),P4=a("li"),L8e=a("strong"),AEr=o("t5"),LEr=o(" \u2014 "),$J=a("a"),yEr=o("TFT5ForConditionalGeneration"),xEr=o(" (T5 model)"),$Er=l(),B4=a("li"),y8e=a("strong"),kEr=o("tapas"),SEr=o(" \u2014 "),kJ=a("a"),REr=o("TFTapasForMaskedLM"),PEr=o(" (TAPAS model)"),BEr=l(),N4=a("li"),x8e=a("strong"),NEr=o("transfo-xl"),IEr=o(" \u2014 "),SJ=a("a"),qEr=o("TFTransfoXLLMHeadModel"),jEr=o(" (Transformer-XL model)"),DEr=l(),I4=a("li"),$8e=a("strong"),GEr=o("vit_mae"),OEr=o(" \u2014 "),RJ=a("a"),VEr=o("TFViTMAEForPreTraining"),XEr=o(" (ViTMAE model)"),zEr=l(),q4=a("li"),k8e=a("strong"),QEr=o("xlm"),WEr=o(" \u2014 "),PJ=a("a"),HEr=o("TFXLMWithLMHeadModel"),UEr=o(" (XLM model)"),JEr=l(),j4=a("li"),S8e=a("strong"),YEr=o("xlm-roberta"),KEr=o(" \u2014 "),BJ=a("a"),ZEr=o("TFXLMRobertaForMaskedLM"),eCr=o(" (XLM-RoBERTa model)"),oCr=l(),D4=a("li"),R8e=a("strong"),rCr=o("xlnet"),tCr=o(" \u2014 "),NJ=a("a"),aCr=o("TFXLNetLMHeadModel"),nCr=o(" (XLNet model)"),sCr=l(),F(G4.$$.fragment),gze=l(),gc=a("h2"),O4=a("a"),P8e=a("span"),F(ox.$$.fragment),lCr=l(),B8e=a("span"),iCr=o("TFAutoModelForCausalLM"),hze=l(),tr=a("div"),F(rx.$$.fragment),dCr=l(),hc=a("p"),cCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IJ=a("a"),fCr=o("from_pretrained()"),mCr=o(" class method or the "),qJ=a("a"),gCr=o("from_config()"),hCr=o(` class
method.`),pCr=l(),tx=a("p"),_Cr=o("This class cannot be instantiated directly using "),N8e=a("code"),uCr=o("__init__()"),bCr=o(" (throws an error)."),vCr=l(),Bt=a("div"),F(ax.$$.fragment),FCr=l(),I8e=a("p"),TCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MCr=l(),pc=a("p"),ECr=o(`Note:
Loading a model from its configuration file does `),q8e=a("strong"),CCr=o("not"),wCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),ACr=o("from_pretrained()"),LCr=o(" to load the model weights."),yCr=l(),F(V4.$$.fragment),xCr=l(),kr=a("div"),F(nx.$$.fragment),$Cr=l(),j8e=a("p"),kCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SCr=l(),dn=a("p"),RCr=o("The model class to instantiate is selected based on the "),D8e=a("code"),PCr=o("model_type"),BCr=o(` property of the config object (either
passed as an argument or loaded from `),G8e=a("code"),NCr=o("pretrained_model_name_or_path"),ICr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=a("code"),qCr=o("pretrained_model_name_or_path"),jCr=o(":"),DCr=l(),Me=a("ul"),X4=a("li"),V8e=a("strong"),GCr=o("bert"),OCr=o(" \u2014 "),DJ=a("a"),VCr=o("TFBertLMHeadModel"),XCr=o(" (BERT model)"),zCr=l(),z4=a("li"),X8e=a("strong"),QCr=o("camembert"),WCr=o(" \u2014 "),GJ=a("a"),HCr=o("TFCamembertForCausalLM"),UCr=o(" (CamemBERT model)"),JCr=l(),Q4=a("li"),z8e=a("strong"),YCr=o("ctrl"),KCr=o(" \u2014 "),OJ=a("a"),ZCr=o("TFCTRLLMHeadModel"),e3r=o(" (CTRL model)"),o3r=l(),W4=a("li"),Q8e=a("strong"),r3r=o("gpt2"),t3r=o(" \u2014 "),VJ=a("a"),a3r=o("TFGPT2LMHeadModel"),n3r=o(" (OpenAI GPT-2 model)"),s3r=l(),H4=a("li"),W8e=a("strong"),l3r=o("gptj"),i3r=o(" \u2014 "),XJ=a("a"),d3r=o("TFGPTJForCausalLM"),c3r=o(" (GPT-J model)"),f3r=l(),U4=a("li"),H8e=a("strong"),m3r=o("openai-gpt"),g3r=o(" \u2014 "),zJ=a("a"),h3r=o("TFOpenAIGPTLMHeadModel"),p3r=o(" (OpenAI GPT model)"),_3r=l(),J4=a("li"),U8e=a("strong"),u3r=o("opt"),b3r=o(" \u2014 "),QJ=a("a"),v3r=o("TFOPTForCausalLM"),F3r=o(" (OPT model)"),T3r=l(),Y4=a("li"),J8e=a("strong"),M3r=o("rembert"),E3r=o(" \u2014 "),WJ=a("a"),C3r=o("TFRemBertForCausalLM"),w3r=o(" (RemBERT model)"),A3r=l(),K4=a("li"),Y8e=a("strong"),L3r=o("roberta"),y3r=o(" \u2014 "),HJ=a("a"),x3r=o("TFRobertaForCausalLM"),$3r=o(" (RoBERTa model)"),k3r=l(),Z4=a("li"),K8e=a("strong"),S3r=o("roformer"),R3r=o(" \u2014 "),UJ=a("a"),P3r=o("TFRoFormerForCausalLM"),B3r=o(" (RoFormer model)"),N3r=l(),eE=a("li"),Z8e=a("strong"),I3r=o("transfo-xl"),q3r=o(" \u2014 "),JJ=a("a"),j3r=o("TFTransfoXLLMHeadModel"),D3r=o(" (Transformer-XL model)"),G3r=l(),oE=a("li"),eMe=a("strong"),O3r=o("xlm"),V3r=o(" \u2014 "),YJ=a("a"),X3r=o("TFXLMWithLMHeadModel"),z3r=o(" (XLM model)"),Q3r=l(),rE=a("li"),oMe=a("strong"),W3r=o("xlnet"),H3r=o(" \u2014 "),KJ=a("a"),U3r=o("TFXLNetLMHeadModel"),J3r=o(" (XLNet model)"),Y3r=l(),F(tE.$$.fragment),pze=l(),_c=a("h2"),aE=a("a"),rMe=a("span"),F(sx.$$.fragment),K3r=l(),tMe=a("span"),Z3r=o("TFAutoModelForImageClassification"),_ze=l(),ar=a("div"),F(lx.$$.fragment),e5r=l(),uc=a("p"),o5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZJ=a("a"),r5r=o("from_pretrained()"),t5r=o(" class method or the "),eY=a("a"),a5r=o("from_config()"),n5r=o(` class
method.`),s5r=l(),ix=a("p"),l5r=o("This class cannot be instantiated directly using "),aMe=a("code"),i5r=o("__init__()"),d5r=o(" (throws an error)."),c5r=l(),Nt=a("div"),F(dx.$$.fragment),f5r=l(),nMe=a("p"),m5r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g5r=l(),bc=a("p"),h5r=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),p5r=o("not"),_5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),u5r=o("from_pretrained()"),b5r=o(" to load the model weights."),v5r=l(),F(nE.$$.fragment),F5r=l(),Sr=a("div"),F(cx.$$.fragment),T5r=l(),lMe=a("p"),M5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E5r=l(),cn=a("p"),C5r=o("The model class to instantiate is selected based on the "),iMe=a("code"),w5r=o("model_type"),A5r=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),L5r=o("pretrained_model_name_or_path"),y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),x5r=o("pretrained_model_name_or_path"),$5r=o(":"),k5r=l(),Qe=a("ul"),sE=a("li"),fMe=a("strong"),S5r=o("convnext"),R5r=o(" \u2014 "),rY=a("a"),P5r=o("TFConvNextForImageClassification"),B5r=o(" (ConvNeXT model)"),N5r=l(),lE=a("li"),mMe=a("strong"),I5r=o("data2vec-vision"),q5r=o(" \u2014 "),tY=a("a"),j5r=o("TFData2VecVisionForImageClassification"),D5r=o(" (Data2VecVision model)"),G5r=l(),Ks=a("li"),gMe=a("strong"),O5r=o("deit"),V5r=o(" \u2014 "),aY=a("a"),X5r=o("TFDeiTForImageClassification"),z5r=o(" or "),nY=a("a"),Q5r=o("TFDeiTForImageClassificationWithTeacher"),W5r=o(" (DeiT model)"),H5r=l(),iE=a("li"),hMe=a("strong"),U5r=o("regnet"),J5r=o(" \u2014 "),sY=a("a"),Y5r=o("TFRegNetForImageClassification"),K5r=o(" (RegNet model)"),Z5r=l(),dE=a("li"),pMe=a("strong"),e0r=o("resnet"),o0r=o(" \u2014 "),lY=a("a"),r0r=o("TFResNetForImageClassification"),t0r=o(" (ResNet model)"),a0r=l(),cE=a("li"),_Me=a("strong"),n0r=o("swin"),s0r=o(" \u2014 "),iY=a("a"),l0r=o("TFSwinForImageClassification"),i0r=o(" (Swin Transformer model)"),d0r=l(),fE=a("li"),uMe=a("strong"),c0r=o("vit"),f0r=o(" \u2014 "),dY=a("a"),m0r=o("TFViTForImageClassification"),g0r=o(" (ViT model)"),h0r=l(),F(mE.$$.fragment),uze=l(),vc=a("h2"),gE=a("a"),bMe=a("span"),F(fx.$$.fragment),p0r=l(),vMe=a("span"),_0r=o("TFAutoModelForMaskedLM"),bze=l(),nr=a("div"),F(mx.$$.fragment),u0r=l(),Fc=a("p"),b0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=a("a"),v0r=o("from_pretrained()"),F0r=o(" class method or the "),fY=a("a"),T0r=o("from_config()"),M0r=o(` class
method.`),E0r=l(),gx=a("p"),C0r=o("This class cannot be instantiated directly using "),FMe=a("code"),w0r=o("__init__()"),A0r=o(" (throws an error)."),L0r=l(),It=a("div"),F(hx.$$.fragment),y0r=l(),TMe=a("p"),x0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$0r=l(),Tc=a("p"),k0r=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),S0r=o("not"),R0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),P0r=o("from_pretrained()"),B0r=o(" to load the model weights."),N0r=l(),F(hE.$$.fragment),I0r=l(),Rr=a("div"),F(px.$$.fragment),q0r=l(),EMe=a("p"),j0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D0r=l(),fn=a("p"),G0r=o("The model class to instantiate is selected based on the "),CMe=a("code"),O0r=o("model_type"),V0r=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),X0r=o("pretrained_model_name_or_path"),z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),Q0r=o("pretrained_model_name_or_path"),W0r=o(":"),H0r=l(),ie=a("ul"),pE=a("li"),LMe=a("strong"),U0r=o("albert"),J0r=o(" \u2014 "),gY=a("a"),Y0r=o("TFAlbertForMaskedLM"),K0r=o(" (ALBERT model)"),Z0r=l(),_E=a("li"),yMe=a("strong"),ewr=o("bert"),owr=o(" \u2014 "),hY=a("a"),rwr=o("TFBertForMaskedLM"),twr=o(" (BERT model)"),awr=l(),uE=a("li"),xMe=a("strong"),nwr=o("camembert"),swr=o(" \u2014 "),pY=a("a"),lwr=o("TFCamembertForMaskedLM"),iwr=o(" (CamemBERT model)"),dwr=l(),bE=a("li"),$Me=a("strong"),cwr=o("convbert"),fwr=o(" \u2014 "),_Y=a("a"),mwr=o("TFConvBertForMaskedLM"),gwr=o(" (ConvBERT model)"),hwr=l(),vE=a("li"),kMe=a("strong"),pwr=o("deberta"),_wr=o(" \u2014 "),uY=a("a"),uwr=o("TFDebertaForMaskedLM"),bwr=o(" (DeBERTa model)"),vwr=l(),FE=a("li"),SMe=a("strong"),Fwr=o("deberta-v2"),Twr=o(" \u2014 "),bY=a("a"),Mwr=o("TFDebertaV2ForMaskedLM"),Ewr=o(" (DeBERTa-v2 model)"),Cwr=l(),TE=a("li"),RMe=a("strong"),wwr=o("distilbert"),Awr=o(" \u2014 "),vY=a("a"),Lwr=o("TFDistilBertForMaskedLM"),ywr=o(" (DistilBERT model)"),xwr=l(),ME=a("li"),PMe=a("strong"),$wr=o("electra"),kwr=o(" \u2014 "),FY=a("a"),Swr=o("TFElectraForMaskedLM"),Rwr=o(" (ELECTRA model)"),Pwr=l(),EE=a("li"),BMe=a("strong"),Bwr=o("flaubert"),Nwr=o(" \u2014 "),TY=a("a"),Iwr=o("TFFlaubertWithLMHeadModel"),qwr=o(" (FlauBERT model)"),jwr=l(),CE=a("li"),NMe=a("strong"),Dwr=o("funnel"),Gwr=o(" \u2014 "),MY=a("a"),Owr=o("TFFunnelForMaskedLM"),Vwr=o(" (Funnel Transformer model)"),Xwr=l(),wE=a("li"),IMe=a("strong"),zwr=o("layoutlm"),Qwr=o(" \u2014 "),EY=a("a"),Wwr=o("TFLayoutLMForMaskedLM"),Hwr=o(" (LayoutLM model)"),Uwr=l(),AE=a("li"),qMe=a("strong"),Jwr=o("longformer"),Ywr=o(" \u2014 "),CY=a("a"),Kwr=o("TFLongformerForMaskedLM"),Zwr=o(" (Longformer model)"),eAr=l(),LE=a("li"),jMe=a("strong"),oAr=o("mobilebert"),rAr=o(" \u2014 "),wY=a("a"),tAr=o("TFMobileBertForMaskedLM"),aAr=o(" (MobileBERT model)"),nAr=l(),yE=a("li"),DMe=a("strong"),sAr=o("mpnet"),lAr=o(" \u2014 "),AY=a("a"),iAr=o("TFMPNetForMaskedLM"),dAr=o(" (MPNet model)"),cAr=l(),xE=a("li"),GMe=a("strong"),fAr=o("rembert"),mAr=o(" \u2014 "),LY=a("a"),gAr=o("TFRemBertForMaskedLM"),hAr=o(" (RemBERT model)"),pAr=l(),$E=a("li"),OMe=a("strong"),_Ar=o("roberta"),uAr=o(" \u2014 "),yY=a("a"),bAr=o("TFRobertaForMaskedLM"),vAr=o(" (RoBERTa model)"),FAr=l(),kE=a("li"),VMe=a("strong"),TAr=o("roformer"),MAr=o(" \u2014 "),xY=a("a"),EAr=o("TFRoFormerForMaskedLM"),CAr=o(" (RoFormer model)"),wAr=l(),SE=a("li"),XMe=a("strong"),AAr=o("tapas"),LAr=o(" \u2014 "),$Y=a("a"),yAr=o("TFTapasForMaskedLM"),xAr=o(" (TAPAS model)"),$Ar=l(),RE=a("li"),zMe=a("strong"),kAr=o("xlm"),SAr=o(" \u2014 "),kY=a("a"),RAr=o("TFXLMWithLMHeadModel"),PAr=o(" (XLM model)"),BAr=l(),PE=a("li"),QMe=a("strong"),NAr=o("xlm-roberta"),IAr=o(" \u2014 "),SY=a("a"),qAr=o("TFXLMRobertaForMaskedLM"),jAr=o(" (XLM-RoBERTa model)"),DAr=l(),F(BE.$$.fragment),vze=l(),Mc=a("h2"),NE=a("a"),WMe=a("span"),F(_x.$$.fragment),GAr=l(),HMe=a("span"),OAr=o("TFAutoModelForSeq2SeqLM"),Fze=l(),sr=a("div"),F(ux.$$.fragment),VAr=l(),Ec=a("p"),XAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RY=a("a"),zAr=o("from_pretrained()"),QAr=o(" class method or the "),PY=a("a"),WAr=o("from_config()"),HAr=o(` class
method.`),UAr=l(),bx=a("p"),JAr=o("This class cannot be instantiated directly using "),UMe=a("code"),YAr=o("__init__()"),KAr=o(" (throws an error)."),ZAr=l(),qt=a("div"),F(vx.$$.fragment),e7r=l(),JMe=a("p"),o7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r7r=l(),Cc=a("p"),t7r=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),a7r=o("not"),n7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),s7r=o("from_pretrained()"),l7r=o(" to load the model weights."),i7r=l(),F(IE.$$.fragment),d7r=l(),Pr=a("div"),F(Fx.$$.fragment),c7r=l(),KMe=a("p"),f7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m7r=l(),mn=a("p"),g7r=o("The model class to instantiate is selected based on the "),ZMe=a("code"),h7r=o("model_type"),p7r=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),_7r=o("pretrained_model_name_or_path"),u7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(":"),F7r=l(),ye=a("ul"),qE=a("li"),r4e=a("strong"),T7r=o("bart"),M7r=o(" \u2014 "),NY=a("a"),E7r=o("TFBartForConditionalGeneration"),C7r=o(" (BART model)"),w7r=l(),jE=a("li"),t4e=a("strong"),A7r=o("blenderbot"),L7r=o(" \u2014 "),IY=a("a"),y7r=o("TFBlenderbotForConditionalGeneration"),x7r=o(" (Blenderbot model)"),$7r=l(),DE=a("li"),a4e=a("strong"),k7r=o("blenderbot-small"),S7r=o(" \u2014 "),qY=a("a"),R7r=o("TFBlenderbotSmallForConditionalGeneration"),P7r=o(" (BlenderbotSmall model)"),B7r=l(),GE=a("li"),n4e=a("strong"),N7r=o("encoder-decoder"),I7r=o(" \u2014 "),jY=a("a"),q7r=o("TFEncoderDecoderModel"),j7r=o(" (Encoder decoder model)"),D7r=l(),OE=a("li"),s4e=a("strong"),G7r=o("led"),O7r=o(" \u2014 "),DY=a("a"),V7r=o("TFLEDForConditionalGeneration"),X7r=o(" (LED model)"),z7r=l(),VE=a("li"),l4e=a("strong"),Q7r=o("marian"),W7r=o(" \u2014 "),GY=a("a"),H7r=o("TFMarianMTModel"),U7r=o(" (Marian model)"),J7r=l(),XE=a("li"),i4e=a("strong"),Y7r=o("mbart"),K7r=o(" \u2014 "),OY=a("a"),Z7r=o("TFMBartForConditionalGeneration"),eLr=o(" (mBART model)"),oLr=l(),zE=a("li"),d4e=a("strong"),rLr=o("mt5"),tLr=o(" \u2014 "),VY=a("a"),aLr=o("TFMT5ForConditionalGeneration"),nLr=o(" (MT5 model)"),sLr=l(),QE=a("li"),c4e=a("strong"),lLr=o("pegasus"),iLr=o(" \u2014 "),XY=a("a"),dLr=o("TFPegasusForConditionalGeneration"),cLr=o(" (Pegasus model)"),fLr=l(),WE=a("li"),f4e=a("strong"),mLr=o("t5"),gLr=o(" \u2014 "),zY=a("a"),hLr=o("TFT5ForConditionalGeneration"),pLr=o(" (T5 model)"),_Lr=l(),F(HE.$$.fragment),Tze=l(),wc=a("h2"),UE=a("a"),m4e=a("span"),F(Tx.$$.fragment),uLr=l(),g4e=a("span"),bLr=o("TFAutoModelForSequenceClassification"),Mze=l(),lr=a("div"),F(Mx.$$.fragment),vLr=l(),Ac=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QY=a("a"),TLr=o("from_pretrained()"),MLr=o(" class method or the "),WY=a("a"),ELr=o("from_config()"),CLr=o(` class
method.`),wLr=l(),Ex=a("p"),ALr=o("This class cannot be instantiated directly using "),h4e=a("code"),LLr=o("__init__()"),yLr=o(" (throws an error)."),xLr=l(),jt=a("div"),F(Cx.$$.fragment),$Lr=l(),p4e=a("p"),kLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SLr=l(),Lc=a("p"),RLr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),PLr=o("not"),BLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),NLr=o("from_pretrained()"),ILr=o(" to load the model weights."),qLr=l(),F(JE.$$.fragment),jLr=l(),Br=a("div"),F(wx.$$.fragment),DLr=l(),u4e=a("p"),GLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OLr=l(),gn=a("p"),VLr=o("The model class to instantiate is selected based on the "),b4e=a("code"),XLr=o("model_type"),zLr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),QLr=o("pretrained_model_name_or_path"),WLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(":"),JLr=l(),te=a("ul"),YE=a("li"),T4e=a("strong"),YLr=o("albert"),KLr=o(" \u2014 "),UY=a("a"),ZLr=o("TFAlbertForSequenceClassification"),eyr=o(" (ALBERT model)"),oyr=l(),KE=a("li"),M4e=a("strong"),ryr=o("bert"),tyr=o(" \u2014 "),JY=a("a"),ayr=o("TFBertForSequenceClassification"),nyr=o(" (BERT model)"),syr=l(),ZE=a("li"),E4e=a("strong"),lyr=o("camembert"),iyr=o(" \u2014 "),YY=a("a"),dyr=o("TFCamembertForSequenceClassification"),cyr=o(" (CamemBERT model)"),fyr=l(),eC=a("li"),C4e=a("strong"),myr=o("convbert"),gyr=o(" \u2014 "),KY=a("a"),hyr=o("TFConvBertForSequenceClassification"),pyr=o(" (ConvBERT model)"),_yr=l(),oC=a("li"),w4e=a("strong"),uyr=o("ctrl"),byr=o(" \u2014 "),ZY=a("a"),vyr=o("TFCTRLForSequenceClassification"),Fyr=o(" (CTRL model)"),Tyr=l(),rC=a("li"),A4e=a("strong"),Myr=o("deberta"),Eyr=o(" \u2014 "),eK=a("a"),Cyr=o("TFDebertaForSequenceClassification"),wyr=o(" (DeBERTa model)"),Ayr=l(),tC=a("li"),L4e=a("strong"),Lyr=o("deberta-v2"),yyr=o(" \u2014 "),oK=a("a"),xyr=o("TFDebertaV2ForSequenceClassification"),$yr=o(" (DeBERTa-v2 model)"),kyr=l(),aC=a("li"),y4e=a("strong"),Syr=o("distilbert"),Ryr=o(" \u2014 "),rK=a("a"),Pyr=o("TFDistilBertForSequenceClassification"),Byr=o(" (DistilBERT model)"),Nyr=l(),nC=a("li"),x4e=a("strong"),Iyr=o("electra"),qyr=o(" \u2014 "),tK=a("a"),jyr=o("TFElectraForSequenceClassification"),Dyr=o(" (ELECTRA model)"),Gyr=l(),sC=a("li"),$4e=a("strong"),Oyr=o("flaubert"),Vyr=o(" \u2014 "),aK=a("a"),Xyr=o("TFFlaubertForSequenceClassification"),zyr=o(" (FlauBERT model)"),Qyr=l(),lC=a("li"),k4e=a("strong"),Wyr=o("funnel"),Hyr=o(" \u2014 "),nK=a("a"),Uyr=o("TFFunnelForSequenceClassification"),Jyr=o(" (Funnel Transformer model)"),Yyr=l(),iC=a("li"),S4e=a("strong"),Kyr=o("gpt2"),Zyr=o(" \u2014 "),sK=a("a"),e9r=o("TFGPT2ForSequenceClassification"),o9r=o(" (OpenAI GPT-2 model)"),r9r=l(),dC=a("li"),R4e=a("strong"),t9r=o("gptj"),a9r=o(" \u2014 "),lK=a("a"),n9r=o("TFGPTJForSequenceClassification"),s9r=o(" (GPT-J model)"),l9r=l(),cC=a("li"),P4e=a("strong"),i9r=o("layoutlm"),d9r=o(" \u2014 "),iK=a("a"),c9r=o("TFLayoutLMForSequenceClassification"),f9r=o(" (LayoutLM model)"),m9r=l(),fC=a("li"),B4e=a("strong"),g9r=o("longformer"),h9r=o(" \u2014 "),dK=a("a"),p9r=o("TFLongformerForSequenceClassification"),_9r=o(" (Longformer model)"),u9r=l(),mC=a("li"),N4e=a("strong"),b9r=o("mobilebert"),v9r=o(" \u2014 "),cK=a("a"),F9r=o("TFMobileBertForSequenceClassification"),T9r=o(" (MobileBERT model)"),M9r=l(),gC=a("li"),I4e=a("strong"),E9r=o("mpnet"),C9r=o(" \u2014 "),fK=a("a"),w9r=o("TFMPNetForSequenceClassification"),A9r=o(" (MPNet model)"),L9r=l(),hC=a("li"),q4e=a("strong"),y9r=o("openai-gpt"),x9r=o(" \u2014 "),mK=a("a"),$9r=o("TFOpenAIGPTForSequenceClassification"),k9r=o(" (OpenAI GPT model)"),S9r=l(),pC=a("li"),j4e=a("strong"),R9r=o("rembert"),P9r=o(" \u2014 "),gK=a("a"),B9r=o("TFRemBertForSequenceClassification"),N9r=o(" (RemBERT model)"),I9r=l(),_C=a("li"),D4e=a("strong"),q9r=o("roberta"),j9r=o(" \u2014 "),hK=a("a"),D9r=o("TFRobertaForSequenceClassification"),G9r=o(" (RoBERTa model)"),O9r=l(),uC=a("li"),G4e=a("strong"),V9r=o("roformer"),X9r=o(" \u2014 "),pK=a("a"),z9r=o("TFRoFormerForSequenceClassification"),Q9r=o(" (RoFormer model)"),W9r=l(),bC=a("li"),O4e=a("strong"),H9r=o("tapas"),U9r=o(" \u2014 "),_K=a("a"),J9r=o("TFTapasForSequenceClassification"),Y9r=o(" (TAPAS model)"),K9r=l(),vC=a("li"),V4e=a("strong"),Z9r=o("transfo-xl"),exr=o(" \u2014 "),uK=a("a"),oxr=o("TFTransfoXLForSequenceClassification"),rxr=o(" (Transformer-XL model)"),txr=l(),FC=a("li"),X4e=a("strong"),axr=o("xlm"),nxr=o(" \u2014 "),bK=a("a"),sxr=o("TFXLMForSequenceClassification"),lxr=o(" (XLM model)"),ixr=l(),TC=a("li"),z4e=a("strong"),dxr=o("xlm-roberta"),cxr=o(" \u2014 "),vK=a("a"),fxr=o("TFXLMRobertaForSequenceClassification"),mxr=o(" (XLM-RoBERTa model)"),gxr=l(),MC=a("li"),Q4e=a("strong"),hxr=o("xlnet"),pxr=o(" \u2014 "),FK=a("a"),_xr=o("TFXLNetForSequenceClassification"),uxr=o(" (XLNet model)"),bxr=l(),F(EC.$$.fragment),Eze=l(),yc=a("h2"),CC=a("a"),W4e=a("span"),F(Ax.$$.fragment),vxr=l(),H4e=a("span"),Fxr=o("TFAutoModelForMultipleChoice"),Cze=l(),ir=a("div"),F(Lx.$$.fragment),Txr=l(),xc=a("p"),Mxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TK=a("a"),Exr=o("from_pretrained()"),Cxr=o(" class method or the "),MK=a("a"),wxr=o("from_config()"),Axr=o(` class
method.`),Lxr=l(),yx=a("p"),yxr=o("This class cannot be instantiated directly using "),U4e=a("code"),xxr=o("__init__()"),$xr=o(" (throws an error)."),kxr=l(),Dt=a("div"),F(xx.$$.fragment),Sxr=l(),J4e=a("p"),Rxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pxr=l(),$c=a("p"),Bxr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),Nxr=o("not"),Ixr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),qxr=o("from_pretrained()"),jxr=o(" to load the model weights."),Dxr=l(),F(wC.$$.fragment),Gxr=l(),Nr=a("div"),F($x.$$.fragment),Oxr=l(),K4e=a("p"),Vxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xxr=l(),hn=a("p"),zxr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),Qxr=o("model_type"),Wxr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),Hxr=o("pretrained_model_name_or_path"),Uxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),Jxr=o("pretrained_model_name_or_path"),Yxr=o(":"),Kxr=l(),_e=a("ul"),AC=a("li"),rEe=a("strong"),Zxr=o("albert"),e$r=o(" \u2014 "),CK=a("a"),o$r=o("TFAlbertForMultipleChoice"),r$r=o(" (ALBERT model)"),t$r=l(),LC=a("li"),tEe=a("strong"),a$r=o("bert"),n$r=o(" \u2014 "),wK=a("a"),s$r=o("TFBertForMultipleChoice"),l$r=o(" (BERT model)"),i$r=l(),yC=a("li"),aEe=a("strong"),d$r=o("camembert"),c$r=o(" \u2014 "),AK=a("a"),f$r=o("TFCamembertForMultipleChoice"),m$r=o(" (CamemBERT model)"),g$r=l(),xC=a("li"),nEe=a("strong"),h$r=o("convbert"),p$r=o(" \u2014 "),LK=a("a"),_$r=o("TFConvBertForMultipleChoice"),u$r=o(" (ConvBERT model)"),b$r=l(),$C=a("li"),sEe=a("strong"),v$r=o("distilbert"),F$r=o(" \u2014 "),yK=a("a"),T$r=o("TFDistilBertForMultipleChoice"),M$r=o(" (DistilBERT model)"),E$r=l(),kC=a("li"),lEe=a("strong"),C$r=o("electra"),w$r=o(" \u2014 "),xK=a("a"),A$r=o("TFElectraForMultipleChoice"),L$r=o(" (ELECTRA model)"),y$r=l(),SC=a("li"),iEe=a("strong"),x$r=o("flaubert"),$$r=o(" \u2014 "),$K=a("a"),k$r=o("TFFlaubertForMultipleChoice"),S$r=o(" (FlauBERT model)"),R$r=l(),RC=a("li"),dEe=a("strong"),P$r=o("funnel"),B$r=o(" \u2014 "),kK=a("a"),N$r=o("TFFunnelForMultipleChoice"),I$r=o(" (Funnel Transformer model)"),q$r=l(),PC=a("li"),cEe=a("strong"),j$r=o("longformer"),D$r=o(" \u2014 "),SK=a("a"),G$r=o("TFLongformerForMultipleChoice"),O$r=o(" (Longformer model)"),V$r=l(),BC=a("li"),fEe=a("strong"),X$r=o("mobilebert"),z$r=o(" \u2014 "),RK=a("a"),Q$r=o("TFMobileBertForMultipleChoice"),W$r=o(" (MobileBERT model)"),H$r=l(),NC=a("li"),mEe=a("strong"),U$r=o("mpnet"),J$r=o(" \u2014 "),PK=a("a"),Y$r=o("TFMPNetForMultipleChoice"),K$r=o(" (MPNet model)"),Z$r=l(),IC=a("li"),gEe=a("strong"),ekr=o("rembert"),okr=o(" \u2014 "),BK=a("a"),rkr=o("TFRemBertForMultipleChoice"),tkr=o(" (RemBERT model)"),akr=l(),qC=a("li"),hEe=a("strong"),nkr=o("roberta"),skr=o(" \u2014 "),NK=a("a"),lkr=o("TFRobertaForMultipleChoice"),ikr=o(" (RoBERTa model)"),dkr=l(),jC=a("li"),pEe=a("strong"),ckr=o("roformer"),fkr=o(" \u2014 "),IK=a("a"),mkr=o("TFRoFormerForMultipleChoice"),gkr=o(" (RoFormer model)"),hkr=l(),DC=a("li"),_Ee=a("strong"),pkr=o("xlm"),_kr=o(" \u2014 "),qK=a("a"),ukr=o("TFXLMForMultipleChoice"),bkr=o(" (XLM model)"),vkr=l(),GC=a("li"),uEe=a("strong"),Fkr=o("xlm-roberta"),Tkr=o(" \u2014 "),jK=a("a"),Mkr=o("TFXLMRobertaForMultipleChoice"),Ekr=o(" (XLM-RoBERTa model)"),Ckr=l(),OC=a("li"),bEe=a("strong"),wkr=o("xlnet"),Akr=o(" \u2014 "),DK=a("a"),Lkr=o("TFXLNetForMultipleChoice"),ykr=o(" (XLNet model)"),xkr=l(),F(VC.$$.fragment),wze=l(),kc=a("h2"),XC=a("a"),vEe=a("span"),F(kx.$$.fragment),$kr=l(),FEe=a("span"),kkr=o("TFAutoModelForNextSentencePrediction"),Aze=l(),dr=a("div"),F(Sx.$$.fragment),Skr=l(),Sc=a("p"),Rkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GK=a("a"),Pkr=o("from_pretrained()"),Bkr=o(" class method or the "),OK=a("a"),Nkr=o("from_config()"),Ikr=o(` class
method.`),qkr=l(),Rx=a("p"),jkr=o("This class cannot be instantiated directly using "),TEe=a("code"),Dkr=o("__init__()"),Gkr=o(" (throws an error)."),Okr=l(),Gt=a("div"),F(Px.$$.fragment),Vkr=l(),MEe=a("p"),Xkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zkr=l(),Rc=a("p"),Qkr=o(`Note:
Loading a model from its configuration file does `),EEe=a("strong"),Wkr=o("not"),Hkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" to load the model weights."),Ykr=l(),F(zC.$$.fragment),Kkr=l(),Ir=a("div"),F(Bx.$$.fragment),Zkr=l(),CEe=a("p"),eSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oSr=l(),pn=a("p"),rSr=o("The model class to instantiate is selected based on the "),wEe=a("code"),tSr=o("model_type"),aSr=o(` property of the config object (either
passed as an argument or loaded from `),AEe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),lSr=o("pretrained_model_name_or_path"),iSr=o(":"),dSr=l(),Nx=a("ul"),QC=a("li"),yEe=a("strong"),cSr=o("bert"),fSr=o(" \u2014 "),XK=a("a"),mSr=o("TFBertForNextSentencePrediction"),gSr=o(" (BERT model)"),hSr=l(),WC=a("li"),xEe=a("strong"),pSr=o("mobilebert"),_Sr=o(" \u2014 "),zK=a("a"),uSr=o("TFMobileBertForNextSentencePrediction"),bSr=o(" (MobileBERT model)"),vSr=l(),F(HC.$$.fragment),Lze=l(),Pc=a("h2"),UC=a("a"),$Ee=a("span"),F(Ix.$$.fragment),FSr=l(),kEe=a("span"),TSr=o("TFAutoModelForTableQuestionAnswering"),yze=l(),cr=a("div"),F(qx.$$.fragment),MSr=l(),Bc=a("p"),ESr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QK=a("a"),CSr=o("from_pretrained()"),wSr=o(" class method or the "),WK=a("a"),ASr=o("from_config()"),LSr=o(` class
method.`),ySr=l(),jx=a("p"),xSr=o("This class cannot be instantiated directly using "),SEe=a("code"),$Sr=o("__init__()"),kSr=o(" (throws an error)."),SSr=l(),Ot=a("div"),F(Dx.$$.fragment),RSr=l(),REe=a("p"),PSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BSr=l(),Nc=a("p"),NSr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),ISr=o("not"),qSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),jSr=o("from_pretrained()"),DSr=o(" to load the model weights."),GSr=l(),F(JC.$$.fragment),OSr=l(),qr=a("div"),F(Gx.$$.fragment),VSr=l(),BEe=a("p"),XSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zSr=l(),_n=a("p"),QSr=o("The model class to instantiate is selected based on the "),NEe=a("code"),WSr=o("model_type"),HSr=o(` property of the config object (either
passed as an argument or loaded from `),IEe=a("code"),USr=o("pretrained_model_name_or_path"),JSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),YSr=o("pretrained_model_name_or_path"),KSr=o(":"),ZSr=l(),jEe=a("ul"),YC=a("li"),DEe=a("strong"),eRr=o("tapas"),oRr=o(" \u2014 "),UK=a("a"),rRr=o("TFTapasForQuestionAnswering"),tRr=o(" (TAPAS model)"),aRr=l(),F(KC.$$.fragment),xze=l(),Ic=a("h2"),ZC=a("a"),GEe=a("span"),F(Ox.$$.fragment),nRr=l(),OEe=a("span"),sRr=o("TFAutoModelForTokenClassification"),$ze=l(),fr=a("div"),F(Vx.$$.fragment),lRr=l(),qc=a("p"),iRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JK=a("a"),dRr=o("from_pretrained()"),cRr=o(" class method or the "),YK=a("a"),fRr=o("from_config()"),mRr=o(` class
method.`),gRr=l(),Xx=a("p"),hRr=o("This class cannot be instantiated directly using "),VEe=a("code"),pRr=o("__init__()"),_Rr=o(" (throws an error)."),uRr=l(),Vt=a("div"),F(zx.$$.fragment),bRr=l(),XEe=a("p"),vRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FRr=l(),jc=a("p"),TRr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),MRr=o("not"),ERr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),CRr=o("from_pretrained()"),wRr=o(" to load the model weights."),ARr=l(),F(e3.$$.fragment),LRr=l(),jr=a("div"),F(Qx.$$.fragment),yRr=l(),QEe=a("p"),xRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$Rr=l(),un=a("p"),kRr=o("The model class to instantiate is selected based on the "),WEe=a("code"),SRr=o("model_type"),RRr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),PRr=o("pretrained_model_name_or_path"),BRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),NRr=o("pretrained_model_name_or_path"),IRr=o(":"),qRr=l(),de=a("ul"),o3=a("li"),JEe=a("strong"),jRr=o("albert"),DRr=o(" \u2014 "),ZK=a("a"),GRr=o("TFAlbertForTokenClassification"),ORr=o(" (ALBERT model)"),VRr=l(),r3=a("li"),YEe=a("strong"),XRr=o("bert"),zRr=o(" \u2014 "),eZ=a("a"),QRr=o("TFBertForTokenClassification"),WRr=o(" (BERT model)"),HRr=l(),t3=a("li"),KEe=a("strong"),URr=o("camembert"),JRr=o(" \u2014 "),oZ=a("a"),YRr=o("TFCamembertForTokenClassification"),KRr=o(" (CamemBERT model)"),ZRr=l(),a3=a("li"),ZEe=a("strong"),ePr=o("convbert"),oPr=o(" \u2014 "),rZ=a("a"),rPr=o("TFConvBertForTokenClassification"),tPr=o(" (ConvBERT model)"),aPr=l(),n3=a("li"),eCe=a("strong"),nPr=o("deberta"),sPr=o(" \u2014 "),tZ=a("a"),lPr=o("TFDebertaForTokenClassification"),iPr=o(" (DeBERTa model)"),dPr=l(),s3=a("li"),oCe=a("strong"),cPr=o("deberta-v2"),fPr=o(" \u2014 "),aZ=a("a"),mPr=o("TFDebertaV2ForTokenClassification"),gPr=o(" (DeBERTa-v2 model)"),hPr=l(),l3=a("li"),rCe=a("strong"),pPr=o("distilbert"),_Pr=o(" \u2014 "),nZ=a("a"),uPr=o("TFDistilBertForTokenClassification"),bPr=o(" (DistilBERT model)"),vPr=l(),i3=a("li"),tCe=a("strong"),FPr=o("electra"),TPr=o(" \u2014 "),sZ=a("a"),MPr=o("TFElectraForTokenClassification"),EPr=o(" (ELECTRA model)"),CPr=l(),d3=a("li"),aCe=a("strong"),wPr=o("flaubert"),APr=o(" \u2014 "),lZ=a("a"),LPr=o("TFFlaubertForTokenClassification"),yPr=o(" (FlauBERT model)"),xPr=l(),c3=a("li"),nCe=a("strong"),$Pr=o("funnel"),kPr=o(" \u2014 "),iZ=a("a"),SPr=o("TFFunnelForTokenClassification"),RPr=o(" (Funnel Transformer model)"),PPr=l(),f3=a("li"),sCe=a("strong"),BPr=o("layoutlm"),NPr=o(" \u2014 "),dZ=a("a"),IPr=o("TFLayoutLMForTokenClassification"),qPr=o(" (LayoutLM model)"),jPr=l(),m3=a("li"),lCe=a("strong"),DPr=o("longformer"),GPr=o(" \u2014 "),cZ=a("a"),OPr=o("TFLongformerForTokenClassification"),VPr=o(" (Longformer model)"),XPr=l(),g3=a("li"),iCe=a("strong"),zPr=o("mobilebert"),QPr=o(" \u2014 "),fZ=a("a"),WPr=o("TFMobileBertForTokenClassification"),HPr=o(" (MobileBERT model)"),UPr=l(),h3=a("li"),dCe=a("strong"),JPr=o("mpnet"),YPr=o(" \u2014 "),mZ=a("a"),KPr=o("TFMPNetForTokenClassification"),ZPr=o(" (MPNet model)"),eBr=l(),p3=a("li"),cCe=a("strong"),oBr=o("rembert"),rBr=o(" \u2014 "),gZ=a("a"),tBr=o("TFRemBertForTokenClassification"),aBr=o(" (RemBERT model)"),nBr=l(),_3=a("li"),fCe=a("strong"),sBr=o("roberta"),lBr=o(" \u2014 "),hZ=a("a"),iBr=o("TFRobertaForTokenClassification"),dBr=o(" (RoBERTa model)"),cBr=l(),u3=a("li"),mCe=a("strong"),fBr=o("roformer"),mBr=o(" \u2014 "),pZ=a("a"),gBr=o("TFRoFormerForTokenClassification"),hBr=o(" (RoFormer model)"),pBr=l(),b3=a("li"),gCe=a("strong"),_Br=o("xlm"),uBr=o(" \u2014 "),_Z=a("a"),bBr=o("TFXLMForTokenClassification"),vBr=o(" (XLM model)"),FBr=l(),v3=a("li"),hCe=a("strong"),TBr=o("xlm-roberta"),MBr=o(" \u2014 "),uZ=a("a"),EBr=o("TFXLMRobertaForTokenClassification"),CBr=o(" (XLM-RoBERTa model)"),wBr=l(),F3=a("li"),pCe=a("strong"),ABr=o("xlnet"),LBr=o(" \u2014 "),bZ=a("a"),yBr=o("TFXLNetForTokenClassification"),xBr=o(" (XLNet model)"),$Br=l(),F(T3.$$.fragment),kze=l(),Dc=a("h2"),M3=a("a"),_Ce=a("span"),F(Wx.$$.fragment),kBr=l(),uCe=a("span"),SBr=o("TFAutoModelForQuestionAnswering"),Sze=l(),mr=a("div"),F(Hx.$$.fragment),RBr=l(),Gc=a("p"),PBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vZ=a("a"),BBr=o("from_pretrained()"),NBr=o(" class method or the "),FZ=a("a"),IBr=o("from_config()"),qBr=o(` class
method.`),jBr=l(),Ux=a("p"),DBr=o("This class cannot be instantiated directly using "),bCe=a("code"),GBr=o("__init__()"),OBr=o(" (throws an error)."),VBr=l(),Xt=a("div"),F(Jx.$$.fragment),XBr=l(),vCe=a("p"),zBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QBr=l(),Oc=a("p"),WBr=o(`Note:
Loading a model from its configuration file does `),FCe=a("strong"),HBr=o("not"),UBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),JBr=o("from_pretrained()"),YBr=o(" to load the model weights."),KBr=l(),F(E3.$$.fragment),ZBr=l(),Dr=a("div"),F(Yx.$$.fragment),eNr=l(),TCe=a("p"),oNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rNr=l(),bn=a("p"),tNr=o("The model class to instantiate is selected based on the "),MCe=a("code"),aNr=o("model_type"),nNr=o(` property of the config object (either
passed as an argument or loaded from `),ECe=a("code"),sNr=o("pretrained_model_name_or_path"),lNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=a("code"),iNr=o("pretrained_model_name_or_path"),dNr=o(":"),cNr=l(),ce=a("ul"),C3=a("li"),wCe=a("strong"),fNr=o("albert"),mNr=o(" \u2014 "),MZ=a("a"),gNr=o("TFAlbertForQuestionAnswering"),hNr=o(" (ALBERT model)"),pNr=l(),w3=a("li"),ACe=a("strong"),_Nr=o("bert"),uNr=o(" \u2014 "),EZ=a("a"),bNr=o("TFBertForQuestionAnswering"),vNr=o(" (BERT model)"),FNr=l(),A3=a("li"),LCe=a("strong"),TNr=o("camembert"),MNr=o(" \u2014 "),CZ=a("a"),ENr=o("TFCamembertForQuestionAnswering"),CNr=o(" (CamemBERT model)"),wNr=l(),L3=a("li"),yCe=a("strong"),ANr=o("convbert"),LNr=o(" \u2014 "),wZ=a("a"),yNr=o("TFConvBertForQuestionAnswering"),xNr=o(" (ConvBERT model)"),$Nr=l(),y3=a("li"),xCe=a("strong"),kNr=o("deberta"),SNr=o(" \u2014 "),AZ=a("a"),RNr=o("TFDebertaForQuestionAnswering"),PNr=o(" (DeBERTa model)"),BNr=l(),x3=a("li"),$Ce=a("strong"),NNr=o("deberta-v2"),INr=o(" \u2014 "),LZ=a("a"),qNr=o("TFDebertaV2ForQuestionAnswering"),jNr=o(" (DeBERTa-v2 model)"),DNr=l(),$3=a("li"),kCe=a("strong"),GNr=o("distilbert"),ONr=o(" \u2014 "),yZ=a("a"),VNr=o("TFDistilBertForQuestionAnswering"),XNr=o(" (DistilBERT model)"),zNr=l(),k3=a("li"),SCe=a("strong"),QNr=o("electra"),WNr=o(" \u2014 "),xZ=a("a"),HNr=o("TFElectraForQuestionAnswering"),UNr=o(" (ELECTRA model)"),JNr=l(),S3=a("li"),RCe=a("strong"),YNr=o("flaubert"),KNr=o(" \u2014 "),$Z=a("a"),ZNr=o("TFFlaubertForQuestionAnsweringSimple"),eIr=o(" (FlauBERT model)"),oIr=l(),R3=a("li"),PCe=a("strong"),rIr=o("funnel"),tIr=o(" \u2014 "),kZ=a("a"),aIr=o("TFFunnelForQuestionAnswering"),nIr=o(" (Funnel Transformer model)"),sIr=l(),P3=a("li"),BCe=a("strong"),lIr=o("gptj"),iIr=o(" \u2014 "),SZ=a("a"),dIr=o("TFGPTJForQuestionAnswering"),cIr=o(" (GPT-J model)"),fIr=l(),B3=a("li"),NCe=a("strong"),mIr=o("longformer"),gIr=o(" \u2014 "),RZ=a("a"),hIr=o("TFLongformerForQuestionAnswering"),pIr=o(" (Longformer model)"),_Ir=l(),N3=a("li"),ICe=a("strong"),uIr=o("mobilebert"),bIr=o(" \u2014 "),PZ=a("a"),vIr=o("TFMobileBertForQuestionAnswering"),FIr=o(" (MobileBERT model)"),TIr=l(),I3=a("li"),qCe=a("strong"),MIr=o("mpnet"),EIr=o(" \u2014 "),BZ=a("a"),CIr=o("TFMPNetForQuestionAnswering"),wIr=o(" (MPNet model)"),AIr=l(),q3=a("li"),jCe=a("strong"),LIr=o("rembert"),yIr=o(" \u2014 "),NZ=a("a"),xIr=o("TFRemBertForQuestionAnswering"),$Ir=o(" (RemBERT model)"),kIr=l(),j3=a("li"),DCe=a("strong"),SIr=o("roberta"),RIr=o(" \u2014 "),IZ=a("a"),PIr=o("TFRobertaForQuestionAnswering"),BIr=o(" (RoBERTa model)"),NIr=l(),D3=a("li"),GCe=a("strong"),IIr=o("roformer"),qIr=o(" \u2014 "),qZ=a("a"),jIr=o("TFRoFormerForQuestionAnswering"),DIr=o(" (RoFormer model)"),GIr=l(),G3=a("li"),OCe=a("strong"),OIr=o("xlm"),VIr=o(" \u2014 "),jZ=a("a"),XIr=o("TFXLMForQuestionAnsweringSimple"),zIr=o(" (XLM model)"),QIr=l(),O3=a("li"),VCe=a("strong"),WIr=o("xlm-roberta"),HIr=o(" \u2014 "),DZ=a("a"),UIr=o("TFXLMRobertaForQuestionAnswering"),JIr=o(" (XLM-RoBERTa model)"),YIr=l(),V3=a("li"),XCe=a("strong"),KIr=o("xlnet"),ZIr=o(" \u2014 "),GZ=a("a"),eqr=o("TFXLNetForQuestionAnsweringSimple"),oqr=o(" (XLNet model)"),rqr=l(),F(X3.$$.fragment),Rze=l(),Vc=a("h2"),z3=a("a"),zCe=a("span"),F(Kx.$$.fragment),tqr=l(),QCe=a("span"),aqr=o("TFAutoModelForVision2Seq"),Pze=l(),gr=a("div"),F(Zx.$$.fragment),nqr=l(),Xc=a("p"),sqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OZ=a("a"),lqr=o("from_pretrained()"),iqr=o(" class method or the "),VZ=a("a"),dqr=o("from_config()"),cqr=o(` class
method.`),fqr=l(),e$=a("p"),mqr=o("This class cannot be instantiated directly using "),WCe=a("code"),gqr=o("__init__()"),hqr=o(" (throws an error)."),pqr=l(),zt=a("div"),F(o$.$$.fragment),_qr=l(),HCe=a("p"),uqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bqr=l(),zc=a("p"),vqr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),Fqr=o("not"),Tqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),Mqr=o("from_pretrained()"),Eqr=o(" to load the model weights."),Cqr=l(),F(Q3.$$.fragment),wqr=l(),Gr=a("div"),F(r$.$$.fragment),Aqr=l(),JCe=a("p"),Lqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yqr=l(),vn=a("p"),xqr=o("The model class to instantiate is selected based on the "),YCe=a("code"),$qr=o("model_type"),kqr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),Sqr=o("pretrained_model_name_or_path"),Rqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),Pqr=o("pretrained_model_name_or_path"),Bqr=o(":"),Nqr=l(),e3e=a("ul"),W3=a("li"),o3e=a("strong"),Iqr=o("vision-encoder-decoder"),qqr=o(" \u2014 "),zZ=a("a"),jqr=o("TFVisionEncoderDecoderModel"),Dqr=o(" (Vision Encoder decoder model)"),Gqr=l(),F(H3.$$.fragment),Bze=l(),Qc=a("h2"),U3=a("a"),r3e=a("span"),F(t$.$$.fragment),Oqr=l(),t3e=a("span"),Vqr=o("TFAutoModelForSpeechSeq2Seq"),Nze=l(),hr=a("div"),F(a$.$$.fragment),Xqr=l(),Wc=a("p"),zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QZ=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" class method or the "),WZ=a("a"),Hqr=o("from_config()"),Uqr=o(` class
method.`),Jqr=l(),n$=a("p"),Yqr=o("This class cannot be instantiated directly using "),a3e=a("code"),Kqr=o("__init__()"),Zqr=o(" (throws an error)."),ejr=l(),Qt=a("div"),F(s$.$$.fragment),ojr=l(),n3e=a("p"),rjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tjr=l(),Hc=a("p"),ajr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),njr=o("not"),sjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),ljr=o("from_pretrained()"),ijr=o(" to load the model weights."),djr=l(),F(J3.$$.fragment),cjr=l(),Or=a("div"),F(l$.$$.fragment),fjr=l(),l3e=a("p"),mjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gjr=l(),Fn=a("p"),hjr=o("The model class to instantiate is selected based on the "),i3e=a("code"),pjr=o("model_type"),_jr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),ujr=o("pretrained_model_name_or_path"),bjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),vjr=o("pretrained_model_name_or_path"),Fjr=o(":"),Tjr=l(),f3e=a("ul"),Y3=a("li"),m3e=a("strong"),Mjr=o("speech_to_text"),Ejr=o(" \u2014 "),UZ=a("a"),Cjr=o("TFSpeech2TextForConditionalGeneration"),wjr=o(" (Speech2Text model)"),Ajr=l(),F(K3.$$.fragment),Ize=l(),Uc=a("h2"),Z3=a("a"),g3e=a("span"),F(i$.$$.fragment),Ljr=l(),h3e=a("span"),yjr=o("FlaxAutoModel"),qze=l(),pr=a("div"),F(d$.$$.fragment),xjr=l(),Jc=a("p"),$jr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JZ=a("a"),kjr=o("from_pretrained()"),Sjr=o(" class method or the "),YZ=a("a"),Rjr=o("from_config()"),Pjr=o(` class
method.`),Bjr=l(),c$=a("p"),Njr=o("This class cannot be instantiated directly using "),p3e=a("code"),Ijr=o("__init__()"),qjr=o(" (throws an error)."),jjr=l(),Wt=a("div"),F(f$.$$.fragment),Djr=l(),_3e=a("p"),Gjr=o("Instantiates one of the base model classes of the library from a configuration."),Ojr=l(),Yc=a("p"),Vjr=o(`Note:
Loading a model from its configuration file does `),u3e=a("strong"),Xjr=o("not"),zjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),Qjr=o("from_pretrained()"),Wjr=o(" to load the model weights."),Hjr=l(),F(e5.$$.fragment),Ujr=l(),Vr=a("div"),F(m$.$$.fragment),Jjr=l(),b3e=a("p"),Yjr=o("Instantiate one of the base model classes of the library from a pretrained model."),Kjr=l(),Tn=a("p"),Zjr=o("The model class to instantiate is selected based on the "),v3e=a("code"),eDr=o("model_type"),oDr=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),rDr=o("pretrained_model_name_or_path"),tDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=a("code"),aDr=o("pretrained_model_name_or_path"),nDr=o(":"),sDr=l(),oe=a("ul"),o5=a("li"),M3e=a("strong"),lDr=o("albert"),iDr=o(" \u2014 "),ZZ=a("a"),dDr=o("FlaxAlbertModel"),cDr=o(" (ALBERT model)"),fDr=l(),r5=a("li"),E3e=a("strong"),mDr=o("bart"),gDr=o(" \u2014 "),eee=a("a"),hDr=o("FlaxBartModel"),pDr=o(" (BART model)"),_Dr=l(),t5=a("li"),C3e=a("strong"),uDr=o("beit"),bDr=o(" \u2014 "),oee=a("a"),vDr=o("FlaxBeitModel"),FDr=o(" (BEiT model)"),TDr=l(),a5=a("li"),w3e=a("strong"),MDr=o("bert"),EDr=o(" \u2014 "),ree=a("a"),CDr=o("FlaxBertModel"),wDr=o(" (BERT model)"),ADr=l(),n5=a("li"),A3e=a("strong"),LDr=o("big_bird"),yDr=o(" \u2014 "),tee=a("a"),xDr=o("FlaxBigBirdModel"),$Dr=o(" (BigBird model)"),kDr=l(),s5=a("li"),L3e=a("strong"),SDr=o("blenderbot"),RDr=o(" \u2014 "),aee=a("a"),PDr=o("FlaxBlenderbotModel"),BDr=o(" (Blenderbot model)"),NDr=l(),l5=a("li"),y3e=a("strong"),IDr=o("blenderbot-small"),qDr=o(" \u2014 "),nee=a("a"),jDr=o("FlaxBlenderbotSmallModel"),DDr=o(" (BlenderbotSmall model)"),GDr=l(),i5=a("li"),x3e=a("strong"),ODr=o("clip"),VDr=o(" \u2014 "),see=a("a"),XDr=o("FlaxCLIPModel"),zDr=o(" (CLIP model)"),QDr=l(),d5=a("li"),$3e=a("strong"),WDr=o("distilbert"),HDr=o(" \u2014 "),lee=a("a"),UDr=o("FlaxDistilBertModel"),JDr=o(" (DistilBERT model)"),YDr=l(),c5=a("li"),k3e=a("strong"),KDr=o("electra"),ZDr=o(" \u2014 "),iee=a("a"),eGr=o("FlaxElectraModel"),oGr=o(" (ELECTRA model)"),rGr=l(),f5=a("li"),S3e=a("strong"),tGr=o("gpt2"),aGr=o(" \u2014 "),dee=a("a"),nGr=o("FlaxGPT2Model"),sGr=o(" (OpenAI GPT-2 model)"),lGr=l(),m5=a("li"),R3e=a("strong"),iGr=o("gpt_neo"),dGr=o(" \u2014 "),cee=a("a"),cGr=o("FlaxGPTNeoModel"),fGr=o(" (GPT Neo model)"),mGr=l(),g5=a("li"),P3e=a("strong"),gGr=o("gptj"),hGr=o(" \u2014 "),fee=a("a"),pGr=o("FlaxGPTJModel"),_Gr=o(" (GPT-J model)"),uGr=l(),h5=a("li"),B3e=a("strong"),bGr=o("longt5"),vGr=o(" \u2014 "),mee=a("a"),FGr=o("FlaxLongT5Model"),TGr=o(" (LongT5 model)"),MGr=l(),p5=a("li"),N3e=a("strong"),EGr=o("marian"),CGr=o(" \u2014 "),gee=a("a"),wGr=o("FlaxMarianModel"),AGr=o(" (Marian model)"),LGr=l(),_5=a("li"),I3e=a("strong"),yGr=o("mbart"),xGr=o(" \u2014 "),hee=a("a"),$Gr=o("FlaxMBartModel"),kGr=o(" (mBART model)"),SGr=l(),u5=a("li"),q3e=a("strong"),RGr=o("mt5"),PGr=o(" \u2014 "),pee=a("a"),BGr=o("FlaxMT5Model"),NGr=o(" (MT5 model)"),IGr=l(),b5=a("li"),j3e=a("strong"),qGr=o("opt"),jGr=o(" \u2014 "),_ee=a("a"),DGr=o("FlaxOPTModel"),GGr=o(" (OPT model)"),OGr=l(),v5=a("li"),D3e=a("strong"),VGr=o("pegasus"),XGr=o(" \u2014 "),uee=a("a"),zGr=o("FlaxPegasusModel"),QGr=o(" (Pegasus model)"),WGr=l(),F5=a("li"),G3e=a("strong"),HGr=o("roberta"),UGr=o(" \u2014 "),bee=a("a"),JGr=o("FlaxRobertaModel"),YGr=o(" (RoBERTa model)"),KGr=l(),T5=a("li"),O3e=a("strong"),ZGr=o("roformer"),eOr=o(" \u2014 "),vee=a("a"),oOr=o("FlaxRoFormerModel"),rOr=o(" (RoFormer model)"),tOr=l(),M5=a("li"),V3e=a("strong"),aOr=o("t5"),nOr=o(" \u2014 "),Fee=a("a"),sOr=o("FlaxT5Model"),lOr=o(" (T5 model)"),iOr=l(),E5=a("li"),X3e=a("strong"),dOr=o("vision-text-dual-encoder"),cOr=o(" \u2014 "),Tee=a("a"),fOr=o("FlaxVisionTextDualEncoderModel"),mOr=o(" (VisionTextDualEncoder model)"),gOr=l(),C5=a("li"),z3e=a("strong"),hOr=o("vit"),pOr=o(" \u2014 "),Mee=a("a"),_Or=o("FlaxViTModel"),uOr=o(" (ViT model)"),bOr=l(),w5=a("li"),Q3e=a("strong"),vOr=o("wav2vec2"),FOr=o(" \u2014 "),Eee=a("a"),TOr=o("FlaxWav2Vec2Model"),MOr=o(" (Wav2Vec2 model)"),EOr=l(),A5=a("li"),W3e=a("strong"),COr=o("xglm"),wOr=o(" \u2014 "),Cee=a("a"),AOr=o("FlaxXGLMModel"),LOr=o(" (XGLM model)"),yOr=l(),L5=a("li"),H3e=a("strong"),xOr=o("xlm-roberta"),$Or=o(" \u2014 "),wee=a("a"),kOr=o("FlaxXLMRobertaModel"),SOr=o(" (XLM-RoBERTa model)"),ROr=l(),F(y5.$$.fragment),jze=l(),Kc=a("h2"),x5=a("a"),U3e=a("span"),F(g$.$$.fragment),POr=l(),J3e=a("span"),BOr=o("FlaxAutoModelForCausalLM"),Dze=l(),_r=a("div"),F(h$.$$.fragment),NOr=l(),Zc=a("p"),IOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=a("a"),qOr=o("from_pretrained()"),jOr=o(" class method or the "),Lee=a("a"),DOr=o("from_config()"),GOr=o(` class
method.`),OOr=l(),p$=a("p"),VOr=o("This class cannot be instantiated directly using "),Y3e=a("code"),XOr=o("__init__()"),zOr=o(" (throws an error)."),QOr=l(),Ht=a("div"),F(_$.$$.fragment),WOr=l(),K3e=a("p"),HOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UOr=l(),ef=a("p"),JOr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),YOr=o("not"),KOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),ZOr=o("from_pretrained()"),eVr=o(" to load the model weights."),oVr=l(),F($5.$$.fragment),rVr=l(),Xr=a("div"),F(u$.$$.fragment),tVr=l(),e5e=a("p"),aVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nVr=l(),Mn=a("p"),sVr=o("The model class to instantiate is selected based on the "),o5e=a("code"),lVr=o("model_type"),iVr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),dVr=o("pretrained_model_name_or_path"),cVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),fVr=o("pretrained_model_name_or_path"),mVr=o(":"),gVr=l(),xe=a("ul"),k5=a("li"),a5e=a("strong"),hVr=o("bart"),pVr=o(" \u2014 "),xee=a("a"),_Vr=o("FlaxBartForCausalLM"),uVr=o(" (BART model)"),bVr=l(),S5=a("li"),n5e=a("strong"),vVr=o("bert"),FVr=o(" \u2014 "),$ee=a("a"),TVr=o("FlaxBertForCausalLM"),MVr=o(" (BERT model)"),EVr=l(),R5=a("li"),s5e=a("strong"),CVr=o("big_bird"),wVr=o(" \u2014 "),kee=a("a"),AVr=o("FlaxBigBirdForCausalLM"),LVr=o(" (BigBird model)"),yVr=l(),P5=a("li"),l5e=a("strong"),xVr=o("electra"),$Vr=o(" \u2014 "),See=a("a"),kVr=o("FlaxElectraForCausalLM"),SVr=o(" (ELECTRA model)"),RVr=l(),B5=a("li"),i5e=a("strong"),PVr=o("gpt2"),BVr=o(" \u2014 "),Ree=a("a"),NVr=o("FlaxGPT2LMHeadModel"),IVr=o(" (OpenAI GPT-2 model)"),qVr=l(),N5=a("li"),d5e=a("strong"),jVr=o("gpt_neo"),DVr=o(" \u2014 "),Pee=a("a"),GVr=o("FlaxGPTNeoForCausalLM"),OVr=o(" (GPT Neo model)"),VVr=l(),I5=a("li"),c5e=a("strong"),XVr=o("gptj"),zVr=o(" \u2014 "),Bee=a("a"),QVr=o("FlaxGPTJForCausalLM"),WVr=o(" (GPT-J model)"),HVr=l(),q5=a("li"),f5e=a("strong"),UVr=o("opt"),JVr=o(" \u2014 "),Nee=a("a"),YVr=o("FlaxOPTForCausalLM"),KVr=o(" (OPT model)"),ZVr=l(),j5=a("li"),m5e=a("strong"),eXr=o("roberta"),oXr=o(" \u2014 "),Iee=a("a"),rXr=o("FlaxRobertaForCausalLM"),tXr=o(" (RoBERTa model)"),aXr=l(),D5=a("li"),g5e=a("strong"),nXr=o("xglm"),sXr=o(" \u2014 "),qee=a("a"),lXr=o("FlaxXGLMForCausalLM"),iXr=o(" (XGLM model)"),dXr=l(),F(G5.$$.fragment),Gze=l(),of=a("h2"),O5=a("a"),h5e=a("span"),F(b$.$$.fragment),cXr=l(),p5e=a("span"),fXr=o("FlaxAutoModelForPreTraining"),Oze=l(),ur=a("div"),F(v$.$$.fragment),mXr=l(),rf=a("p"),gXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jee=a("a"),hXr=o("from_pretrained()"),pXr=o(" class method or the "),Dee=a("a"),_Xr=o("from_config()"),uXr=o(` class
method.`),bXr=l(),F$=a("p"),vXr=o("This class cannot be instantiated directly using "),_5e=a("code"),FXr=o("__init__()"),TXr=o(" (throws an error)."),MXr=l(),Ut=a("div"),F(T$.$$.fragment),EXr=l(),u5e=a("p"),CXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wXr=l(),tf=a("p"),AXr=o(`Note:
Loading a model from its configuration file does `),b5e=a("strong"),LXr=o("not"),yXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=a("a"),xXr=o("from_pretrained()"),$Xr=o(" to load the model weights."),kXr=l(),F(V5.$$.fragment),SXr=l(),zr=a("div"),F(M$.$$.fragment),RXr=l(),v5e=a("p"),PXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BXr=l(),En=a("p"),NXr=o("The model class to instantiate is selected based on the "),F5e=a("code"),IXr=o("model_type"),qXr=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),jXr=o("pretrained_model_name_or_path"),DXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=a("code"),GXr=o("pretrained_model_name_or_path"),OXr=o(":"),VXr=l(),Ee=a("ul"),X5=a("li"),E5e=a("strong"),XXr=o("albert"),zXr=o(" \u2014 "),Oee=a("a"),QXr=o("FlaxAlbertForPreTraining"),WXr=o(" (ALBERT model)"),HXr=l(),z5=a("li"),C5e=a("strong"),UXr=o("bart"),JXr=o(" \u2014 "),Vee=a("a"),YXr=o("FlaxBartForConditionalGeneration"),KXr=o(" (BART model)"),ZXr=l(),Q5=a("li"),w5e=a("strong"),ezr=o("bert"),ozr=o(" \u2014 "),Xee=a("a"),rzr=o("FlaxBertForPreTraining"),tzr=o(" (BERT model)"),azr=l(),W5=a("li"),A5e=a("strong"),nzr=o("big_bird"),szr=o(" \u2014 "),zee=a("a"),lzr=o("FlaxBigBirdForPreTraining"),izr=o(" (BigBird model)"),dzr=l(),H5=a("li"),L5e=a("strong"),czr=o("electra"),fzr=o(" \u2014 "),Qee=a("a"),mzr=o("FlaxElectraForPreTraining"),gzr=o(" (ELECTRA model)"),hzr=l(),U5=a("li"),y5e=a("strong"),pzr=o("longt5"),_zr=o(" \u2014 "),Wee=a("a"),uzr=o("FlaxLongT5ForConditionalGeneration"),bzr=o(" (LongT5 model)"),vzr=l(),J5=a("li"),x5e=a("strong"),Fzr=o("mbart"),Tzr=o(" \u2014 "),Hee=a("a"),Mzr=o("FlaxMBartForConditionalGeneration"),Ezr=o(" (mBART model)"),Czr=l(),Y5=a("li"),$5e=a("strong"),wzr=o("mt5"),Azr=o(" \u2014 "),Uee=a("a"),Lzr=o("FlaxMT5ForConditionalGeneration"),yzr=o(" (MT5 model)"),xzr=l(),K5=a("li"),k5e=a("strong"),$zr=o("roberta"),kzr=o(" \u2014 "),Jee=a("a"),Szr=o("FlaxRobertaForMaskedLM"),Rzr=o(" (RoBERTa model)"),Pzr=l(),Z5=a("li"),S5e=a("strong"),Bzr=o("roformer"),Nzr=o(" \u2014 "),Yee=a("a"),Izr=o("FlaxRoFormerForMaskedLM"),qzr=o(" (RoFormer model)"),jzr=l(),e0=a("li"),R5e=a("strong"),Dzr=o("t5"),Gzr=o(" \u2014 "),Kee=a("a"),Ozr=o("FlaxT5ForConditionalGeneration"),Vzr=o(" (T5 model)"),Xzr=l(),o0=a("li"),P5e=a("strong"),zzr=o("wav2vec2"),Qzr=o(" \u2014 "),Zee=a("a"),Wzr=o("FlaxWav2Vec2ForPreTraining"),Hzr=o(" (Wav2Vec2 model)"),Uzr=l(),r0=a("li"),B5e=a("strong"),Jzr=o("xlm-roberta"),Yzr=o(" \u2014 "),eoe=a("a"),Kzr=o("FlaxXLMRobertaForMaskedLM"),Zzr=o(" (XLM-RoBERTa model)"),eQr=l(),F(t0.$$.fragment),Vze=l(),af=a("h2"),a0=a("a"),N5e=a("span"),F(E$.$$.fragment),oQr=l(),I5e=a("span"),rQr=o("FlaxAutoModelForMaskedLM"),Xze=l(),br=a("div"),F(C$.$$.fragment),tQr=l(),nf=a("p"),aQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ooe=a("a"),nQr=o("from_pretrained()"),sQr=o(" class method or the "),roe=a("a"),lQr=o("from_config()"),iQr=o(` class
method.`),dQr=l(),w$=a("p"),cQr=o("This class cannot be instantiated directly using "),q5e=a("code"),fQr=o("__init__()"),mQr=o(" (throws an error)."),gQr=l(),Jt=a("div"),F(A$.$$.fragment),hQr=l(),j5e=a("p"),pQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Qr=l(),sf=a("p"),uQr=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),bQr=o("not"),vQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),FQr=o("from_pretrained()"),TQr=o(" to load the model weights."),MQr=l(),F(n0.$$.fragment),EQr=l(),Qr=a("div"),F(L$.$$.fragment),CQr=l(),G5e=a("p"),wQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),AQr=l(),Cn=a("p"),LQr=o("The model class to instantiate is selected based on the "),O5e=a("code"),yQr=o("model_type"),xQr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),$Qr=o("pretrained_model_name_or_path"),kQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),SQr=o("pretrained_model_name_or_path"),RQr=o(":"),PQr=l(),$e=a("ul"),s0=a("li"),z5e=a("strong"),BQr=o("albert"),NQr=o(" \u2014 "),aoe=a("a"),IQr=o("FlaxAlbertForMaskedLM"),qQr=o(" (ALBERT model)"),jQr=l(),l0=a("li"),Q5e=a("strong"),DQr=o("bart"),GQr=o(" \u2014 "),noe=a("a"),OQr=o("FlaxBartForConditionalGeneration"),VQr=o(" (BART model)"),XQr=l(),i0=a("li"),W5e=a("strong"),zQr=o("bert"),QQr=o(" \u2014 "),soe=a("a"),WQr=o("FlaxBertForMaskedLM"),HQr=o(" (BERT model)"),UQr=l(),d0=a("li"),H5e=a("strong"),JQr=o("big_bird"),YQr=o(" \u2014 "),loe=a("a"),KQr=o("FlaxBigBirdForMaskedLM"),ZQr=o(" (BigBird model)"),eWr=l(),c0=a("li"),U5e=a("strong"),oWr=o("distilbert"),rWr=o(" \u2014 "),ioe=a("a"),tWr=o("FlaxDistilBertForMaskedLM"),aWr=o(" (DistilBERT model)"),nWr=l(),f0=a("li"),J5e=a("strong"),sWr=o("electra"),lWr=o(" \u2014 "),doe=a("a"),iWr=o("FlaxElectraForMaskedLM"),dWr=o(" (ELECTRA model)"),cWr=l(),m0=a("li"),Y5e=a("strong"),fWr=o("mbart"),mWr=o(" \u2014 "),coe=a("a"),gWr=o("FlaxMBartForConditionalGeneration"),hWr=o(" (mBART model)"),pWr=l(),g0=a("li"),K5e=a("strong"),_Wr=o("roberta"),uWr=o(" \u2014 "),foe=a("a"),bWr=o("FlaxRobertaForMaskedLM"),vWr=o(" (RoBERTa model)"),FWr=l(),h0=a("li"),Z5e=a("strong"),TWr=o("roformer"),MWr=o(" \u2014 "),moe=a("a"),EWr=o("FlaxRoFormerForMaskedLM"),CWr=o(" (RoFormer model)"),wWr=l(),p0=a("li"),e0e=a("strong"),AWr=o("xlm-roberta"),LWr=o(" \u2014 "),goe=a("a"),yWr=o("FlaxXLMRobertaForMaskedLM"),xWr=o(" (XLM-RoBERTa model)"),$Wr=l(),F(_0.$$.fragment),zze=l(),lf=a("h2"),u0=a("a"),o0e=a("span"),F(y$.$$.fragment),kWr=l(),r0e=a("span"),SWr=o("FlaxAutoModelForSeq2SeqLM"),Qze=l(),vr=a("div"),F(x$.$$.fragment),RWr=l(),df=a("p"),PWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hoe=a("a"),BWr=o("from_pretrained()"),NWr=o(" class method or the "),poe=a("a"),IWr=o("from_config()"),qWr=o(` class
method.`),jWr=l(),$$=a("p"),DWr=o("This class cannot be instantiated directly using "),t0e=a("code"),GWr=o("__init__()"),OWr=o(" (throws an error)."),VWr=l(),Yt=a("div"),F(k$.$$.fragment),XWr=l(),a0e=a("p"),zWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QWr=l(),cf=a("p"),WWr=o(`Note:
Loading a model from its configuration file does `),n0e=a("strong"),HWr=o("not"),UWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=a("a"),JWr=o("from_pretrained()"),YWr=o(" to load the model weights."),KWr=l(),F(b0.$$.fragment),ZWr=l(),Wr=a("div"),F(S$.$$.fragment),eHr=l(),s0e=a("p"),oHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rHr=l(),wn=a("p"),tHr=o("The model class to instantiate is selected based on the "),l0e=a("code"),aHr=o("model_type"),nHr=o(` property of the config object (either
passed as an argument or loaded from `),i0e=a("code"),sHr=o("pretrained_model_name_or_path"),lHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=a("code"),iHr=o("pretrained_model_name_or_path"),dHr=o(":"),cHr=l(),ke=a("ul"),v0=a("li"),c0e=a("strong"),fHr=o("bart"),mHr=o(" \u2014 "),uoe=a("a"),gHr=o("FlaxBartForConditionalGeneration"),hHr=o(" (BART model)"),pHr=l(),F0=a("li"),f0e=a("strong"),_Hr=o("blenderbot"),uHr=o(" \u2014 "),boe=a("a"),bHr=o("FlaxBlenderbotForConditionalGeneration"),vHr=o(" (Blenderbot model)"),FHr=l(),T0=a("li"),m0e=a("strong"),THr=o("blenderbot-small"),MHr=o(" \u2014 "),voe=a("a"),EHr=o("FlaxBlenderbotSmallForConditionalGeneration"),CHr=o(" (BlenderbotSmall model)"),wHr=l(),M0=a("li"),g0e=a("strong"),AHr=o("encoder-decoder"),LHr=o(" \u2014 "),Foe=a("a"),yHr=o("FlaxEncoderDecoderModel"),xHr=o(" (Encoder decoder model)"),$Hr=l(),E0=a("li"),h0e=a("strong"),kHr=o("longt5"),SHr=o(" \u2014 "),Toe=a("a"),RHr=o("FlaxLongT5ForConditionalGeneration"),PHr=o(" (LongT5 model)"),BHr=l(),C0=a("li"),p0e=a("strong"),NHr=o("marian"),IHr=o(" \u2014 "),Moe=a("a"),qHr=o("FlaxMarianMTModel"),jHr=o(" (Marian model)"),DHr=l(),w0=a("li"),_0e=a("strong"),GHr=o("mbart"),OHr=o(" \u2014 "),Eoe=a("a"),VHr=o("FlaxMBartForConditionalGeneration"),XHr=o(" (mBART model)"),zHr=l(),A0=a("li"),u0e=a("strong"),QHr=o("mt5"),WHr=o(" \u2014 "),Coe=a("a"),HHr=o("FlaxMT5ForConditionalGeneration"),UHr=o(" (MT5 model)"),JHr=l(),L0=a("li"),b0e=a("strong"),YHr=o("pegasus"),KHr=o(" \u2014 "),woe=a("a"),ZHr=o("FlaxPegasusForConditionalGeneration"),eUr=o(" (Pegasus model)"),oUr=l(),y0=a("li"),v0e=a("strong"),rUr=o("t5"),tUr=o(" \u2014 "),Aoe=a("a"),aUr=o("FlaxT5ForConditionalGeneration"),nUr=o(" (T5 model)"),sUr=l(),F(x0.$$.fragment),Wze=l(),ff=a("h2"),$0=a("a"),F0e=a("span"),F(R$.$$.fragment),lUr=l(),T0e=a("span"),iUr=o("FlaxAutoModelForSequenceClassification"),Hze=l(),Fr=a("div"),F(P$.$$.fragment),dUr=l(),mf=a("p"),cUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Loe=a("a"),fUr=o("from_pretrained()"),mUr=o(" class method or the "),yoe=a("a"),gUr=o("from_config()"),hUr=o(` class
method.`),pUr=l(),B$=a("p"),_Ur=o("This class cannot be instantiated directly using "),M0e=a("code"),uUr=o("__init__()"),bUr=o(" (throws an error)."),vUr=l(),Kt=a("div"),F(N$.$$.fragment),FUr=l(),E0e=a("p"),TUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MUr=l(),gf=a("p"),EUr=o(`Note:
Loading a model from its configuration file does `),C0e=a("strong"),CUr=o("not"),wUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=a("a"),AUr=o("from_pretrained()"),LUr=o(" to load the model weights."),yUr=l(),F(k0.$$.fragment),xUr=l(),Hr=a("div"),F(I$.$$.fragment),$Ur=l(),w0e=a("p"),kUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SUr=l(),An=a("p"),RUr=o("The model class to instantiate is selected based on the "),A0e=a("code"),PUr=o("model_type"),BUr=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),NUr=o("pretrained_model_name_or_path"),IUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=a("code"),qUr=o("pretrained_model_name_or_path"),jUr=o(":"),DUr=l(),Se=a("ul"),S0=a("li"),x0e=a("strong"),GUr=o("albert"),OUr=o(" \u2014 "),$oe=a("a"),VUr=o("FlaxAlbertForSequenceClassification"),XUr=o(" (ALBERT model)"),zUr=l(),R0=a("li"),$0e=a("strong"),QUr=o("bart"),WUr=o(" \u2014 "),koe=a("a"),HUr=o("FlaxBartForSequenceClassification"),UUr=o(" (BART model)"),JUr=l(),P0=a("li"),k0e=a("strong"),YUr=o("bert"),KUr=o(" \u2014 "),Soe=a("a"),ZUr=o("FlaxBertForSequenceClassification"),eJr=o(" (BERT model)"),oJr=l(),B0=a("li"),S0e=a("strong"),rJr=o("big_bird"),tJr=o(" \u2014 "),Roe=a("a"),aJr=o("FlaxBigBirdForSequenceClassification"),nJr=o(" (BigBird model)"),sJr=l(),N0=a("li"),R0e=a("strong"),lJr=o("distilbert"),iJr=o(" \u2014 "),Poe=a("a"),dJr=o("FlaxDistilBertForSequenceClassification"),cJr=o(" (DistilBERT model)"),fJr=l(),I0=a("li"),P0e=a("strong"),mJr=o("electra"),gJr=o(" \u2014 "),Boe=a("a"),hJr=o("FlaxElectraForSequenceClassification"),pJr=o(" (ELECTRA model)"),_Jr=l(),q0=a("li"),B0e=a("strong"),uJr=o("mbart"),bJr=o(" \u2014 "),Noe=a("a"),vJr=o("FlaxMBartForSequenceClassification"),FJr=o(" (mBART model)"),TJr=l(),j0=a("li"),N0e=a("strong"),MJr=o("roberta"),EJr=o(" \u2014 "),Ioe=a("a"),CJr=o("FlaxRobertaForSequenceClassification"),wJr=o(" (RoBERTa model)"),AJr=l(),D0=a("li"),I0e=a("strong"),LJr=o("roformer"),yJr=o(" \u2014 "),qoe=a("a"),xJr=o("FlaxRoFormerForSequenceClassification"),$Jr=o(" (RoFormer model)"),kJr=l(),G0=a("li"),q0e=a("strong"),SJr=o("xlm-roberta"),RJr=o(" \u2014 "),joe=a("a"),PJr=o("FlaxXLMRobertaForSequenceClassification"),BJr=o(" (XLM-RoBERTa model)"),NJr=l(),F(O0.$$.fragment),Uze=l(),hf=a("h2"),V0=a("a"),j0e=a("span"),F(q$.$$.fragment),IJr=l(),D0e=a("span"),qJr=o("FlaxAutoModelForQuestionAnswering"),Jze=l(),Tr=a("div"),F(j$.$$.fragment),jJr=l(),pf=a("p"),DJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Doe=a("a"),GJr=o("from_pretrained()"),OJr=o(" class method or the "),Goe=a("a"),VJr=o("from_config()"),XJr=o(` class
method.`),zJr=l(),D$=a("p"),QJr=o("This class cannot be instantiated directly using "),G0e=a("code"),WJr=o("__init__()"),HJr=o(" (throws an error)."),UJr=l(),Zt=a("div"),F(G$.$$.fragment),JJr=l(),O0e=a("p"),YJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KJr=l(),_f=a("p"),ZJr=o(`Note:
Loading a model from its configuration file does `),V0e=a("strong"),eYr=o("not"),oYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),rYr=o("from_pretrained()"),tYr=o(" to load the model weights."),aYr=l(),F(X0.$$.fragment),nYr=l(),Ur=a("div"),F(O$.$$.fragment),sYr=l(),X0e=a("p"),lYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iYr=l(),Ln=a("p"),dYr=o("The model class to instantiate is selected based on the "),z0e=a("code"),cYr=o("model_type"),fYr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),mYr=o("pretrained_model_name_or_path"),gYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=a("code"),hYr=o("pretrained_model_name_or_path"),pYr=o(":"),_Yr=l(),Re=a("ul"),z0=a("li"),H0e=a("strong"),uYr=o("albert"),bYr=o(" \u2014 "),Voe=a("a"),vYr=o("FlaxAlbertForQuestionAnswering"),FYr=o(" (ALBERT model)"),TYr=l(),Q0=a("li"),U0e=a("strong"),MYr=o("bart"),EYr=o(" \u2014 "),Xoe=a("a"),CYr=o("FlaxBartForQuestionAnswering"),wYr=o(" (BART model)"),AYr=l(),W0=a("li"),J0e=a("strong"),LYr=o("bert"),yYr=o(" \u2014 "),zoe=a("a"),xYr=o("FlaxBertForQuestionAnswering"),$Yr=o(" (BERT model)"),kYr=l(),H0=a("li"),Y0e=a("strong"),SYr=o("big_bird"),RYr=o(" \u2014 "),Qoe=a("a"),PYr=o("FlaxBigBirdForQuestionAnswering"),BYr=o(" (BigBird model)"),NYr=l(),U0=a("li"),K0e=a("strong"),IYr=o("distilbert"),qYr=o(" \u2014 "),Woe=a("a"),jYr=o("FlaxDistilBertForQuestionAnswering"),DYr=o(" (DistilBERT model)"),GYr=l(),J0=a("li"),Z0e=a("strong"),OYr=o("electra"),VYr=o(" \u2014 "),Hoe=a("a"),XYr=o("FlaxElectraForQuestionAnswering"),zYr=o(" (ELECTRA model)"),QYr=l(),Y0=a("li"),ewe=a("strong"),WYr=o("mbart"),HYr=o(" \u2014 "),Uoe=a("a"),UYr=o("FlaxMBartForQuestionAnswering"),JYr=o(" (mBART model)"),YYr=l(),K0=a("li"),owe=a("strong"),KYr=o("roberta"),ZYr=o(" \u2014 "),Joe=a("a"),eKr=o("FlaxRobertaForQuestionAnswering"),oKr=o(" (RoBERTa model)"),rKr=l(),Z0=a("li"),rwe=a("strong"),tKr=o("roformer"),aKr=o(" \u2014 "),Yoe=a("a"),nKr=o("FlaxRoFormerForQuestionAnswering"),sKr=o(" (RoFormer model)"),lKr=l(),ew=a("li"),twe=a("strong"),iKr=o("xlm-roberta"),dKr=o(" \u2014 "),Koe=a("a"),cKr=o("FlaxXLMRobertaForQuestionAnswering"),fKr=o(" (XLM-RoBERTa model)"),mKr=l(),F(ow.$$.fragment),Yze=l(),uf=a("h2"),rw=a("a"),awe=a("span"),F(V$.$$.fragment),gKr=l(),nwe=a("span"),hKr=o("FlaxAutoModelForTokenClassification"),Kze=l(),Mr=a("div"),F(X$.$$.fragment),pKr=l(),bf=a("p"),_Kr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zoe=a("a"),uKr=o("from_pretrained()"),bKr=o(" class method or the "),ere=a("a"),vKr=o("from_config()"),FKr=o(` class
method.`),TKr=l(),z$=a("p"),MKr=o("This class cannot be instantiated directly using "),swe=a("code"),EKr=o("__init__()"),CKr=o(" (throws an error)."),wKr=l(),ea=a("div"),F(Q$.$$.fragment),AKr=l(),lwe=a("p"),LKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yKr=l(),vf=a("p"),xKr=o(`Note:
Loading a model from its configuration file does `),iwe=a("strong"),$Kr=o("not"),kKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=a("a"),SKr=o("from_pretrained()"),RKr=o(" to load the model weights."),PKr=l(),F(tw.$$.fragment),BKr=l(),Jr=a("div"),F(W$.$$.fragment),NKr=l(),dwe=a("p"),IKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qKr=l(),yn=a("p"),jKr=o("The model class to instantiate is selected based on the "),cwe=a("code"),DKr=o("model_type"),GKr=o(` property of the config object (either
passed as an argument or loaded from `),fwe=a("code"),OKr=o("pretrained_model_name_or_path"),VKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mwe=a("code"),XKr=o("pretrained_model_name_or_path"),zKr=o(":"),QKr=l(),Ve=a("ul"),aw=a("li"),gwe=a("strong"),WKr=o("albert"),HKr=o(" \u2014 "),rre=a("a"),UKr=o("FlaxAlbertForTokenClassification"),JKr=o(" (ALBERT model)"),YKr=l(),nw=a("li"),hwe=a("strong"),KKr=o("bert"),ZKr=o(" \u2014 "),tre=a("a"),eZr=o("FlaxBertForTokenClassification"),oZr=o(" (BERT model)"),rZr=l(),sw=a("li"),pwe=a("strong"),tZr=o("big_bird"),aZr=o(" \u2014 "),are=a("a"),nZr=o("FlaxBigBirdForTokenClassification"),sZr=o(" (BigBird model)"),lZr=l(),lw=a("li"),_we=a("strong"),iZr=o("distilbert"),dZr=o(" \u2014 "),nre=a("a"),cZr=o("FlaxDistilBertForTokenClassification"),fZr=o(" (DistilBERT model)"),mZr=l(),iw=a("li"),uwe=a("strong"),gZr=o("electra"),hZr=o(" \u2014 "),sre=a("a"),pZr=o("FlaxElectraForTokenClassification"),_Zr=o(" (ELECTRA model)"),uZr=l(),dw=a("li"),bwe=a("strong"),bZr=o("roberta"),vZr=o(" \u2014 "),lre=a("a"),FZr=o("FlaxRobertaForTokenClassification"),TZr=o(" (RoBERTa model)"),MZr=l(),cw=a("li"),vwe=a("strong"),EZr=o("roformer"),CZr=o(" \u2014 "),ire=a("a"),wZr=o("FlaxRoFormerForTokenClassification"),AZr=o(" (RoFormer model)"),LZr=l(),fw=a("li"),Fwe=a("strong"),yZr=o("xlm-roberta"),xZr=o(" \u2014 "),dre=a("a"),$Zr=o("FlaxXLMRobertaForTokenClassification"),kZr=o(" (XLM-RoBERTa model)"),SZr=l(),F(mw.$$.fragment),Zze=l(),Ff=a("h2"),gw=a("a"),Twe=a("span"),F(H$.$$.fragment),RZr=l(),Mwe=a("span"),PZr=o("FlaxAutoModelForMultipleChoice"),eQe=l(),Er=a("div"),F(U$.$$.fragment),BZr=l(),Tf=a("p"),NZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cre=a("a"),IZr=o("from_pretrained()"),qZr=o(" class method or the "),fre=a("a"),jZr=o("from_config()"),DZr=o(` class
method.`),GZr=l(),J$=a("p"),OZr=o("This class cannot be instantiated directly using "),Ewe=a("code"),VZr=o("__init__()"),XZr=o(" (throws an error)."),zZr=l(),oa=a("div"),F(Y$.$$.fragment),QZr=l(),Cwe=a("p"),WZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HZr=l(),Mf=a("p"),UZr=o(`Note:
Loading a model from its configuration file does `),wwe=a("strong"),JZr=o("not"),YZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("a"),KZr=o("from_pretrained()"),ZZr=o(" to load the model weights."),eet=l(),F(hw.$$.fragment),oet=l(),Yr=a("div"),F(K$.$$.fragment),ret=l(),Awe=a("p"),tet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aet=l(),xn=a("p"),net=o("The model class to instantiate is selected based on the "),Lwe=a("code"),set=o("model_type"),iet=o(` property of the config object (either
passed as an argument or loaded from `),ywe=a("code"),det=o("pretrained_model_name_or_path"),cet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=a("code"),fet=o("pretrained_model_name_or_path"),met=o(":"),get=l(),Xe=a("ul"),pw=a("li"),$we=a("strong"),het=o("albert"),pet=o(" \u2014 "),gre=a("a"),_et=o("FlaxAlbertForMultipleChoice"),uet=o(" (ALBERT model)"),bet=l(),_w=a("li"),kwe=a("strong"),vet=o("bert"),Fet=o(" \u2014 "),hre=a("a"),Tet=o("FlaxBertForMultipleChoice"),Met=o(" (BERT model)"),Eet=l(),uw=a("li"),Swe=a("strong"),Cet=o("big_bird"),wet=o(" \u2014 "),pre=a("a"),Aet=o("FlaxBigBirdForMultipleChoice"),Let=o(" (BigBird model)"),yet=l(),bw=a("li"),Rwe=a("strong"),xet=o("distilbert"),$et=o(" \u2014 "),_re=a("a"),ket=o("FlaxDistilBertForMultipleChoice"),Set=o(" (DistilBERT model)"),Ret=l(),vw=a("li"),Pwe=a("strong"),Pet=o("electra"),Bet=o(" \u2014 "),ure=a("a"),Net=o("FlaxElectraForMultipleChoice"),Iet=o(" (ELECTRA model)"),qet=l(),Fw=a("li"),Bwe=a("strong"),jet=o("roberta"),Det=o(" \u2014 "),bre=a("a"),Get=o("FlaxRobertaForMultipleChoice"),Oet=o(" (RoBERTa model)"),Vet=l(),Tw=a("li"),Nwe=a("strong"),Xet=o("roformer"),zet=o(" \u2014 "),vre=a("a"),Qet=o("FlaxRoFormerForMultipleChoice"),Wet=o(" (RoFormer model)"),Het=l(),Mw=a("li"),Iwe=a("strong"),Uet=o("xlm-roberta"),Jet=o(" \u2014 "),Fre=a("a"),Yet=o("FlaxXLMRobertaForMultipleChoice"),Ket=o(" (XLM-RoBERTa model)"),Zet=l(),F(Ew.$$.fragment),oQe=l(),Ef=a("h2"),Cw=a("a"),qwe=a("span"),F(Z$.$$.fragment),eot=l(),jwe=a("span"),oot=o("FlaxAutoModelForNextSentencePrediction"),rQe=l(),Cr=a("div"),F(ek.$$.fragment),rot=l(),Cf=a("p"),tot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tre=a("a"),aot=o("from_pretrained()"),not=o(" class method or the "),Mre=a("a"),sot=o("from_config()"),lot=o(` class
method.`),iot=l(),ok=a("p"),dot=o("This class cannot be instantiated directly using "),Dwe=a("code"),cot=o("__init__()"),fot=o(" (throws an error)."),mot=l(),ra=a("div"),F(rk.$$.fragment),got=l(),Gwe=a("p"),hot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pot=l(),wf=a("p"),_ot=o(`Note:
Loading a model from its configuration file does `),Owe=a("strong"),uot=o("not"),bot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),vot=o("from_pretrained()"),Fot=o(" to load the model weights."),Tot=l(),F(ww.$$.fragment),Mot=l(),Kr=a("div"),F(tk.$$.fragment),Eot=l(),Vwe=a("p"),Cot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wot=l(),$n=a("p"),Aot=o("The model class to instantiate is selected based on the "),Xwe=a("code"),Lot=o("model_type"),yot=o(` property of the config object (either
passed as an argument or loaded from `),zwe=a("code"),xot=o("pretrained_model_name_or_path"),$ot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qwe=a("code"),kot=o("pretrained_model_name_or_path"),Sot=o(":"),Rot=l(),Wwe=a("ul"),Aw=a("li"),Hwe=a("strong"),Pot=o("bert"),Bot=o(" \u2014 "),Cre=a("a"),Not=o("FlaxBertForNextSentencePrediction"),Iot=o(" (BERT model)"),qot=l(),F(Lw.$$.fragment),tQe=l(),Af=a("h2"),yw=a("a"),Uwe=a("span"),F(ak.$$.fragment),jot=l(),Jwe=a("span"),Dot=o("FlaxAutoModelForImageClassification"),aQe=l(),wr=a("div"),F(nk.$$.fragment),Got=l(),Lf=a("p"),Oot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wre=a("a"),Vot=o("from_pretrained()"),Xot=o(" class method or the "),Are=a("a"),zot=o("from_config()"),Qot=o(` class
method.`),Wot=l(),sk=a("p"),Hot=o("This class cannot be instantiated directly using "),Ywe=a("code"),Uot=o("__init__()"),Jot=o(" (throws an error)."),Yot=l(),ta=a("div"),F(lk.$$.fragment),Kot=l(),Kwe=a("p"),Zot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ert=l(),yf=a("p"),ort=o(`Note:
Loading a model from its configuration file does `),Zwe=a("strong"),rrt=o("not"),trt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("a"),art=o("from_pretrained()"),nrt=o(" to load the model weights."),srt=l(),F(xw.$$.fragment),lrt=l(),Zr=a("div"),F(ik.$$.fragment),irt=l(),eAe=a("p"),drt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),crt=l(),kn=a("p"),frt=o("The model class to instantiate is selected based on the "),oAe=a("code"),mrt=o("model_type"),grt=o(` property of the config object (either
passed as an argument or loaded from `),rAe=a("code"),hrt=o("pretrained_model_name_or_path"),prt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tAe=a("code"),_rt=o("pretrained_model_name_or_path"),urt=o(":"),brt=l(),dk=a("ul"),$w=a("li"),aAe=a("strong"),vrt=o("beit"),Frt=o(" \u2014 "),yre=a("a"),Trt=o("FlaxBeitForImageClassification"),Mrt=o(" (BEiT model)"),Ert=l(),kw=a("li"),nAe=a("strong"),Crt=o("vit"),wrt=o(" \u2014 "),xre=a("a"),Art=o("FlaxViTForImageClassification"),Lrt=o(" (ViT model)"),yrt=l(),F(Sw.$$.fragment),nQe=l(),xf=a("h2"),Rw=a("a"),sAe=a("span"),F(ck.$$.fragment),xrt=l(),lAe=a("span"),$rt=o("FlaxAutoModelForVision2Seq"),sQe=l(),Ar=a("div"),F(fk.$$.fragment),krt=l(),$f=a("p"),Srt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$re=a("a"),Rrt=o("from_pretrained()"),Prt=o(" class method or the "),kre=a("a"),Brt=o("from_config()"),Nrt=o(` class
method.`),Irt=l(),mk=a("p"),qrt=o("This class cannot be instantiated directly using "),iAe=a("code"),jrt=o("__init__()"),Drt=o(" (throws an error)."),Grt=l(),aa=a("div"),F(gk.$$.fragment),Ort=l(),dAe=a("p"),Vrt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xrt=l(),kf=a("p"),zrt=o(`Note:
Loading a model from its configuration file does `),cAe=a("strong"),Qrt=o("not"),Wrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),Hrt=o("from_pretrained()"),Urt=o(" to load the model weights."),Jrt=l(),F(Pw.$$.fragment),Yrt=l(),et=a("div"),F(hk.$$.fragment),Krt=l(),fAe=a("p"),Zrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ett=l(),Sn=a("p"),ott=o("The model class to instantiate is selected based on the "),mAe=a("code"),rtt=o("model_type"),ttt=o(` property of the config object (either
passed as an argument or loaded from `),gAe=a("code"),att=o("pretrained_model_name_or_path"),ntt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=a("code"),stt=o("pretrained_model_name_or_path"),ltt=o(":"),itt=l(),pAe=a("ul"),Bw=a("li"),_Ae=a("strong"),dtt=o("vision-encoder-decoder"),ctt=o(" \u2014 "),Rre=a("a"),ftt=o("FlaxVisionEncoderDecoderModel"),mtt=o(" (Vision Encoder decoder model)"),gtt=l(),F(Nw.$$.fragment),this.h()},l(f){const u=HQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var pk=s(p);m=n(pk,"A",{id:!0,class:!0,href:!0});var uAe=s(m);_=n(uAe,"SPAN",{});var bAe=s(_);T(d.$$.fragment,bAe),bAe.forEach(t),uAe.forEach(t),h=i(pk),Co=n(pk,"SPAN",{});var vAe=s(Co);yi=r(vAe,"Auto Classes"),vAe.forEach(t),pk.forEach(t),Bf=i(f),lt=n(f,"P",{});var _k=s(lt);xi=r(_k,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(_k,"CODE",{});var FAe=s($i);oL=r(FAe,"from_pretrained()"),FAe.forEach(t),Nf=r(_k,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_k.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var TAe=s(Pn);rL=r(TAe,"AutoConfig"),TAe.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var MAe=s(Nn);tL=r(MAe,"AutoModel"),MAe.forEach(t),Si=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var EAe=s(In);aL=r(EAe,"AutoTokenizer"),EAe.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var uk=s(Ae);IS=r(uk,"will create a model that is an instance of "),Pi=n(uk,"A",{href:!0});var CAe=s(Pi);qS=r(CAe,"BertModel"),CAe.forEach(t),jS=r(uk,"."),uk.forEach(t),wo=i(f),Ra=n(f,"P",{});var bk=s(Ra);DS=r(bk,"There is one class of "),qf=n(bk,"CODE",{});var wAe=s(qf);GS=r(wAe,"AutoModel"),wAe.forEach(t),uHe=r(bk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bk.forEach(t),rXe=i(f),Bi=n(f,"H2",{class:!0});var vk=s(Bi);jf=n(vk,"A",{id:!0,class:!0,href:!0});var AAe=s(jf);yae=n(AAe,"SPAN",{});var LAe=s(yae);T(nL.$$.fragment,LAe),LAe.forEach(t),AAe.forEach(t),bHe=i(vk),xae=n(vk,"SPAN",{});var yAe=s(xae);vHe=r(yAe,"Extending the Auto Classes"),yAe.forEach(t),vk.forEach(t),tXe=i(f),qn=n(f,"P",{});var Sf=s(qn);FHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ae=n(Sf,"CODE",{});var xAe=s($ae);THe=r(xAe,"NewModel"),xAe.forEach(t),MHe=r(Sf,", make sure you have a "),kae=n(Sf,"CODE",{});var $Ae=s(kae);EHe=r($Ae,"NewModelConfig"),$Ae.forEach(t),CHe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),aXe=i(f),T(sL.$$.fragment,f),nXe=i(f),OS=n(f,"P",{});var kAe=s(OS);wHe=r(kAe,"You will then be able to use the auto classes like you would usually do!"),kAe.forEach(t),sXe=i(f),T(Df.$$.fragment,f),lXe=i(f),Ni=n(f,"H2",{class:!0});var Fk=s(Ni);Gf=n(Fk,"A",{id:!0,class:!0,href:!0});var SAe=s(Gf);Sae=n(SAe,"SPAN",{});var RAe=s(Sae);T(lL.$$.fragment,RAe),RAe.forEach(t),SAe.forEach(t),AHe=i(Fk),Rae=n(Fk,"SPAN",{});var PAe=s(Rae);LHe=r(PAe,"AutoConfig"),PAe.forEach(t),Fk.forEach(t),iXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(iL.$$.fragment,nt),yHe=i(nt),dL=n(nt,"P",{});var Tk=s(dL);xHe=r(Tk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),VS=n(Tk,"A",{href:!0});var BAe=s(VS);$He=r(BAe,"from_pretrained()"),BAe.forEach(t),kHe=r(Tk," class method."),Tk.forEach(t),SHe=i(nt),cL=n(nt,"P",{});var Mk=s(cL);RHe=r(Mk,"This class cannot be instantiated directly using "),Pae=n(Mk,"CODE",{});var NAe=s(Pae);PHe=r(NAe,"__init__()"),NAe.forEach(t),BHe=r(Mk," (throws an error)."),Mk.forEach(t),NHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(fL.$$.fragment,st),IHe=i(st),Bae=n(st,"P",{});var IAe=s(Bae);qHe=r(IAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IAe.forEach(t),jHe=i(st),Ii=n(st,"P",{});var Rf=s(Ii);DHe=r(Rf,"The configuration class to instantiate is selected based on the "),Nae=n(Rf,"CODE",{});var qAe=s(Nae);GHe=r(qAe,"model_type"),qAe.forEach(t),OHe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Iae=n(Rf,"CODE",{});var jAe=s(Iae);VHe=r(jAe,"pretrained_model_name_or_path"),jAe.forEach(t),XHe=r(Rf,":"),Rf.forEach(t),zHe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var Iw=s(Of);qae=n(Iw,"STRONG",{});var DAe=s(qae);QHe=r(DAe,"albert"),DAe.forEach(t),WHe=r(Iw," \u2014 "),XS=n(Iw,"A",{href:!0});var GAe=s(XS);HHe=r(GAe,"AlbertConfig"),GAe.forEach(t),UHe=r(Iw," (ALBERT model)"),Iw.forEach(t),JHe=i(L),Vf=n(L,"LI",{});var qw=s(Vf);jae=n(qw,"STRONG",{});var OAe=s(jae);YHe=r(OAe,"bart"),OAe.forEach(t),KHe=r(qw," \u2014 "),zS=n(qw,"A",{href:!0});var VAe=s(zS);ZHe=r(VAe,"BartConfig"),VAe.forEach(t),eUe=r(qw," (BART model)"),qw.forEach(t),oUe=i(L),Xf=n(L,"LI",{});var jw=s(Xf);Dae=n(jw,"STRONG",{});var XAe=s(Dae);rUe=r(XAe,"beit"),XAe.forEach(t),tUe=r(jw," \u2014 "),QS=n(jw,"A",{href:!0});var zAe=s(QS);aUe=r(zAe,"BeitConfig"),zAe.forEach(t),nUe=r(jw," (BEiT model)"),jw.forEach(t),sUe=i(L),zf=n(L,"LI",{});var Dw=s(zf);Gae=n(Dw,"STRONG",{});var QAe=s(Gae);lUe=r(QAe,"bert"),QAe.forEach(t),iUe=r(Dw," \u2014 "),WS=n(Dw,"A",{href:!0});var WAe=s(WS);dUe=r(WAe,"BertConfig"),WAe.forEach(t),cUe=r(Dw," (BERT model)"),Dw.forEach(t),fUe=i(L),Qf=n(L,"LI",{});var Gw=s(Qf);Oae=n(Gw,"STRONG",{});var HAe=s(Oae);mUe=r(HAe,"bert-generation"),HAe.forEach(t),gUe=r(Gw," \u2014 "),HS=n(Gw,"A",{href:!0});var UAe=s(HS);hUe=r(UAe,"BertGenerationConfig"),UAe.forEach(t),pUe=r(Gw," (Bert Generation model)"),Gw.forEach(t),_Ue=i(L),Wf=n(L,"LI",{});var Ow=s(Wf);Vae=n(Ow,"STRONG",{});var JAe=s(Vae);uUe=r(JAe,"big_bird"),JAe.forEach(t),bUe=r(Ow," \u2014 "),US=n(Ow,"A",{href:!0});var YAe=s(US);vUe=r(YAe,"BigBirdConfig"),YAe.forEach(t),FUe=r(Ow," (BigBird model)"),Ow.forEach(t),TUe=i(L),Hf=n(L,"LI",{});var Vw=s(Hf);Xae=n(Vw,"STRONG",{});var KAe=s(Xae);MUe=r(KAe,"bigbird_pegasus"),KAe.forEach(t),EUe=r(Vw," \u2014 "),JS=n(Vw,"A",{href:!0});var ZAe=s(JS);CUe=r(ZAe,"BigBirdPegasusConfig"),ZAe.forEach(t),wUe=r(Vw," (BigBird-Pegasus model)"),Vw.forEach(t),AUe=i(L),Uf=n(L,"LI",{});var Xw=s(Uf);zae=n(Xw,"STRONG",{});var e7e=s(zae);LUe=r(e7e,"blenderbot"),e7e.forEach(t),yUe=r(Xw," \u2014 "),YS=n(Xw,"A",{href:!0});var o7e=s(YS);xUe=r(o7e,"BlenderbotConfig"),o7e.forEach(t),$Ue=r(Xw," (Blenderbot model)"),Xw.forEach(t),kUe=i(L),Jf=n(L,"LI",{});var zw=s(Jf);Qae=n(zw,"STRONG",{});var r7e=s(Qae);SUe=r(r7e,"blenderbot-small"),r7e.forEach(t),RUe=r(zw," \u2014 "),KS=n(zw,"A",{href:!0});var t7e=s(KS);PUe=r(t7e,"BlenderbotSmallConfig"),t7e.forEach(t),BUe=r(zw," (BlenderbotSmall model)"),zw.forEach(t),NUe=i(L),Yf=n(L,"LI",{});var Qw=s(Yf);Wae=n(Qw,"STRONG",{});var a7e=s(Wae);IUe=r(a7e,"bloom"),a7e.forEach(t),qUe=r(Qw," \u2014 "),ZS=n(Qw,"A",{href:!0});var n7e=s(ZS);jUe=r(n7e,"BloomConfig"),n7e.forEach(t),DUe=r(Qw," (BLOOM model)"),Qw.forEach(t),GUe=i(L),Kf=n(L,"LI",{});var Ww=s(Kf);Hae=n(Ww,"STRONG",{});var s7e=s(Hae);OUe=r(s7e,"camembert"),s7e.forEach(t),VUe=r(Ww," \u2014 "),eR=n(Ww,"A",{href:!0});var l7e=s(eR);XUe=r(l7e,"CamembertConfig"),l7e.forEach(t),zUe=r(Ww," (CamemBERT model)"),Ww.forEach(t),QUe=i(L),Zf=n(L,"LI",{});var Hw=s(Zf);Uae=n(Hw,"STRONG",{});var i7e=s(Uae);WUe=r(i7e,"canine"),i7e.forEach(t),HUe=r(Hw," \u2014 "),oR=n(Hw,"A",{href:!0});var d7e=s(oR);UUe=r(d7e,"CanineConfig"),d7e.forEach(t),JUe=r(Hw," (CANINE model)"),Hw.forEach(t),YUe=i(L),em=n(L,"LI",{});var Uw=s(em);Jae=n(Uw,"STRONG",{});var c7e=s(Jae);KUe=r(c7e,"clip"),c7e.forEach(t),ZUe=r(Uw," \u2014 "),rR=n(Uw,"A",{href:!0});var f7e=s(rR);eJe=r(f7e,"CLIPConfig"),f7e.forEach(t),oJe=r(Uw," (CLIP model)"),Uw.forEach(t),rJe=i(L),om=n(L,"LI",{});var Jw=s(om);Yae=n(Jw,"STRONG",{});var m7e=s(Yae);tJe=r(m7e,"codegen"),m7e.forEach(t),aJe=r(Jw," \u2014 "),tR=n(Jw,"A",{href:!0});var g7e=s(tR);nJe=r(g7e,"CodeGenConfig"),g7e.forEach(t),sJe=r(Jw," (CodeGen model)"),Jw.forEach(t),lJe=i(L),rm=n(L,"LI",{});var Yw=s(rm);Kae=n(Yw,"STRONG",{});var h7e=s(Kae);iJe=r(h7e,"convbert"),h7e.forEach(t),dJe=r(Yw," \u2014 "),aR=n(Yw,"A",{href:!0});var p7e=s(aR);cJe=r(p7e,"ConvBertConfig"),p7e.forEach(t),fJe=r(Yw," (ConvBERT model)"),Yw.forEach(t),mJe=i(L),tm=n(L,"LI",{});var Kw=s(tm);Zae=n(Kw,"STRONG",{});var _7e=s(Zae);gJe=r(_7e,"convnext"),_7e.forEach(t),hJe=r(Kw," \u2014 "),nR=n(Kw,"A",{href:!0});var u7e=s(nR);pJe=r(u7e,"ConvNextConfig"),u7e.forEach(t),_Je=r(Kw," (ConvNeXT model)"),Kw.forEach(t),uJe=i(L),am=n(L,"LI",{});var Zw=s(am);ene=n(Zw,"STRONG",{});var b7e=s(ene);bJe=r(b7e,"ctrl"),b7e.forEach(t),vJe=r(Zw," \u2014 "),sR=n(Zw,"A",{href:!0});var v7e=s(sR);FJe=r(v7e,"CTRLConfig"),v7e.forEach(t),TJe=r(Zw," (CTRL model)"),Zw.forEach(t),MJe=i(L),nm=n(L,"LI",{});var eA=s(nm);one=n(eA,"STRONG",{});var F7e=s(one);EJe=r(F7e,"cvt"),F7e.forEach(t),CJe=r(eA," \u2014 "),lR=n(eA,"A",{href:!0});var T7e=s(lR);wJe=r(T7e,"CvtConfig"),T7e.forEach(t),AJe=r(eA," (CvT model)"),eA.forEach(t),LJe=i(L),sm=n(L,"LI",{});var oA=s(sm);rne=n(oA,"STRONG",{});var M7e=s(rne);yJe=r(M7e,"data2vec-audio"),M7e.forEach(t),xJe=r(oA," \u2014 "),iR=n(oA,"A",{href:!0});var E7e=s(iR);$Je=r(E7e,"Data2VecAudioConfig"),E7e.forEach(t),kJe=r(oA," (Data2VecAudio model)"),oA.forEach(t),SJe=i(L),lm=n(L,"LI",{});var rA=s(lm);tne=n(rA,"STRONG",{});var C7e=s(tne);RJe=r(C7e,"data2vec-text"),C7e.forEach(t),PJe=r(rA," \u2014 "),dR=n(rA,"A",{href:!0});var w7e=s(dR);BJe=r(w7e,"Data2VecTextConfig"),w7e.forEach(t),NJe=r(rA," (Data2VecText model)"),rA.forEach(t),IJe=i(L),im=n(L,"LI",{});var tA=s(im);ane=n(tA,"STRONG",{});var A7e=s(ane);qJe=r(A7e,"data2vec-vision"),A7e.forEach(t),jJe=r(tA," \u2014 "),cR=n(tA,"A",{href:!0});var L7e=s(cR);DJe=r(L7e,"Data2VecVisionConfig"),L7e.forEach(t),GJe=r(tA," (Data2VecVision model)"),tA.forEach(t),OJe=i(L),dm=n(L,"LI",{});var aA=s(dm);nne=n(aA,"STRONG",{});var y7e=s(nne);VJe=r(y7e,"deberta"),y7e.forEach(t),XJe=r(aA," \u2014 "),fR=n(aA,"A",{href:!0});var x7e=s(fR);zJe=r(x7e,"DebertaConfig"),x7e.forEach(t),QJe=r(aA," (DeBERTa model)"),aA.forEach(t),WJe=i(L),cm=n(L,"LI",{});var nA=s(cm);sne=n(nA,"STRONG",{});var $7e=s(sne);HJe=r($7e,"deberta-v2"),$7e.forEach(t),UJe=r(nA," \u2014 "),mR=n(nA,"A",{href:!0});var k7e=s(mR);JJe=r(k7e,"DebertaV2Config"),k7e.forEach(t),YJe=r(nA," (DeBERTa-v2 model)"),nA.forEach(t),KJe=i(L),fm=n(L,"LI",{});var sA=s(fm);lne=n(sA,"STRONG",{});var ptt=s(lne);ZJe=r(ptt,"decision_transformer"),ptt.forEach(t),eYe=r(sA," \u2014 "),gR=n(sA,"A",{href:!0});var _tt=s(gR);oYe=r(_tt,"DecisionTransformerConfig"),_tt.forEach(t),rYe=r(sA," (Decision Transformer model)"),sA.forEach(t),tYe=i(L),mm=n(L,"LI",{});var S7e=s(mm);ine=n(S7e,"STRONG",{});var utt=s(ine);aYe=r(utt,"deit"),utt.forEach(t),nYe=r(S7e," \u2014 "),hR=n(S7e,"A",{href:!0});var btt=s(hR);sYe=r(btt,"DeiTConfig"),btt.forEach(t),lYe=r(S7e," (DeiT model)"),S7e.forEach(t),iYe=i(L),gm=n(L,"LI",{});var R7e=s(gm);dne=n(R7e,"STRONG",{});var vtt=s(dne);dYe=r(vtt,"detr"),vtt.forEach(t),cYe=r(R7e," \u2014 "),pR=n(R7e,"A",{href:!0});var Ftt=s(pR);fYe=r(Ftt,"DetrConfig"),Ftt.forEach(t),mYe=r(R7e," (DETR model)"),R7e.forEach(t),gYe=i(L),hm=n(L,"LI",{});var P7e=s(hm);cne=n(P7e,"STRONG",{});var Ttt=s(cne);hYe=r(Ttt,"distilbert"),Ttt.forEach(t),pYe=r(P7e," \u2014 "),_R=n(P7e,"A",{href:!0});var Mtt=s(_R);_Ye=r(Mtt,"DistilBertConfig"),Mtt.forEach(t),uYe=r(P7e," (DistilBERT model)"),P7e.forEach(t),bYe=i(L),pm=n(L,"LI",{});var B7e=s(pm);fne=n(B7e,"STRONG",{});var Ett=s(fne);vYe=r(Ett,"dpr"),Ett.forEach(t),FYe=r(B7e," \u2014 "),uR=n(B7e,"A",{href:!0});var Ctt=s(uR);TYe=r(Ctt,"DPRConfig"),Ctt.forEach(t),MYe=r(B7e," (DPR model)"),B7e.forEach(t),EYe=i(L),_m=n(L,"LI",{});var N7e=s(_m);mne=n(N7e,"STRONG",{});var wtt=s(mne);CYe=r(wtt,"dpt"),wtt.forEach(t),wYe=r(N7e," \u2014 "),bR=n(N7e,"A",{href:!0});var Att=s(bR);AYe=r(Att,"DPTConfig"),Att.forEach(t),LYe=r(N7e," (DPT model)"),N7e.forEach(t),yYe=i(L),um=n(L,"LI",{});var I7e=s(um);gne=n(I7e,"STRONG",{});var Ltt=s(gne);xYe=r(Ltt,"electra"),Ltt.forEach(t),$Ye=r(I7e," \u2014 "),vR=n(I7e,"A",{href:!0});var ytt=s(vR);kYe=r(ytt,"ElectraConfig"),ytt.forEach(t),SYe=r(I7e," (ELECTRA model)"),I7e.forEach(t),RYe=i(L),bm=n(L,"LI",{});var q7e=s(bm);hne=n(q7e,"STRONG",{});var xtt=s(hne);PYe=r(xtt,"encoder-decoder"),xtt.forEach(t),BYe=r(q7e," \u2014 "),FR=n(q7e,"A",{href:!0});var $tt=s(FR);NYe=r($tt,"EncoderDecoderConfig"),$tt.forEach(t),IYe=r(q7e," (Encoder decoder model)"),q7e.forEach(t),qYe=i(L),vm=n(L,"LI",{});var j7e=s(vm);pne=n(j7e,"STRONG",{});var ktt=s(pne);jYe=r(ktt,"flaubert"),ktt.forEach(t),DYe=r(j7e," \u2014 "),TR=n(j7e,"A",{href:!0});var Stt=s(TR);GYe=r(Stt,"FlaubertConfig"),Stt.forEach(t),OYe=r(j7e," (FlauBERT model)"),j7e.forEach(t),VYe=i(L),Fm=n(L,"LI",{});var D7e=s(Fm);_ne=n(D7e,"STRONG",{});var Rtt=s(_ne);XYe=r(Rtt,"flava"),Rtt.forEach(t),zYe=r(D7e," \u2014 "),MR=n(D7e,"A",{href:!0});var Ptt=s(MR);QYe=r(Ptt,"FlavaConfig"),Ptt.forEach(t),WYe=r(D7e," (FLAVA model)"),D7e.forEach(t),HYe=i(L),Tm=n(L,"LI",{});var G7e=s(Tm);une=n(G7e,"STRONG",{});var Btt=s(une);UYe=r(Btt,"fnet"),Btt.forEach(t),JYe=r(G7e," \u2014 "),ER=n(G7e,"A",{href:!0});var Ntt=s(ER);YYe=r(Ntt,"FNetConfig"),Ntt.forEach(t),KYe=r(G7e," (FNet model)"),G7e.forEach(t),ZYe=i(L),Mm=n(L,"LI",{});var O7e=s(Mm);bne=n(O7e,"STRONG",{});var Itt=s(bne);eKe=r(Itt,"fsmt"),Itt.forEach(t),oKe=r(O7e," \u2014 "),CR=n(O7e,"A",{href:!0});var qtt=s(CR);rKe=r(qtt,"FSMTConfig"),qtt.forEach(t),tKe=r(O7e," (FairSeq Machine-Translation model)"),O7e.forEach(t),aKe=i(L),Em=n(L,"LI",{});var V7e=s(Em);vne=n(V7e,"STRONG",{});var jtt=s(vne);nKe=r(jtt,"funnel"),jtt.forEach(t),sKe=r(V7e," \u2014 "),wR=n(V7e,"A",{href:!0});var Dtt=s(wR);lKe=r(Dtt,"FunnelConfig"),Dtt.forEach(t),iKe=r(V7e," (Funnel Transformer model)"),V7e.forEach(t),dKe=i(L),Cm=n(L,"LI",{});var X7e=s(Cm);Fne=n(X7e,"STRONG",{});var Gtt=s(Fne);cKe=r(Gtt,"glpn"),Gtt.forEach(t),fKe=r(X7e," \u2014 "),AR=n(X7e,"A",{href:!0});var Ott=s(AR);mKe=r(Ott,"GLPNConfig"),Ott.forEach(t),gKe=r(X7e," (GLPN model)"),X7e.forEach(t),hKe=i(L),wm=n(L,"LI",{});var z7e=s(wm);Tne=n(z7e,"STRONG",{});var Vtt=s(Tne);pKe=r(Vtt,"gpt2"),Vtt.forEach(t),_Ke=r(z7e," \u2014 "),LR=n(z7e,"A",{href:!0});var Xtt=s(LR);uKe=r(Xtt,"GPT2Config"),Xtt.forEach(t),bKe=r(z7e," (OpenAI GPT-2 model)"),z7e.forEach(t),vKe=i(L),Am=n(L,"LI",{});var Q7e=s(Am);Mne=n(Q7e,"STRONG",{});var ztt=s(Mne);FKe=r(ztt,"gpt_neo"),ztt.forEach(t),TKe=r(Q7e," \u2014 "),yR=n(Q7e,"A",{href:!0});var Qtt=s(yR);MKe=r(Qtt,"GPTNeoConfig"),Qtt.forEach(t),EKe=r(Q7e," (GPT Neo model)"),Q7e.forEach(t),CKe=i(L),Lm=n(L,"LI",{});var W7e=s(Lm);Ene=n(W7e,"STRONG",{});var Wtt=s(Ene);wKe=r(Wtt,"gpt_neox"),Wtt.forEach(t),AKe=r(W7e," \u2014 "),xR=n(W7e,"A",{href:!0});var Htt=s(xR);LKe=r(Htt,"GPTNeoXConfig"),Htt.forEach(t),yKe=r(W7e," (GPT NeoX model)"),W7e.forEach(t),xKe=i(L),ym=n(L,"LI",{});var H7e=s(ym);Cne=n(H7e,"STRONG",{});var Utt=s(Cne);$Ke=r(Utt,"gptj"),Utt.forEach(t),kKe=r(H7e," \u2014 "),$R=n(H7e,"A",{href:!0});var Jtt=s($R);SKe=r(Jtt,"GPTJConfig"),Jtt.forEach(t),RKe=r(H7e," (GPT-J model)"),H7e.forEach(t),PKe=i(L),xm=n(L,"LI",{});var U7e=s(xm);wne=n(U7e,"STRONG",{});var Ytt=s(wne);BKe=r(Ytt,"groupvit"),Ytt.forEach(t),NKe=r(U7e," \u2014 "),kR=n(U7e,"A",{href:!0});var Ktt=s(kR);IKe=r(Ktt,"GroupViTConfig"),Ktt.forEach(t),qKe=r(U7e," (GroupViT model)"),U7e.forEach(t),jKe=i(L),$m=n(L,"LI",{});var J7e=s($m);Ane=n(J7e,"STRONG",{});var Ztt=s(Ane);DKe=r(Ztt,"hubert"),Ztt.forEach(t),GKe=r(J7e," \u2014 "),SR=n(J7e,"A",{href:!0});var eat=s(SR);OKe=r(eat,"HubertConfig"),eat.forEach(t),VKe=r(J7e," (Hubert model)"),J7e.forEach(t),XKe=i(L),km=n(L,"LI",{});var Y7e=s(km);Lne=n(Y7e,"STRONG",{});var oat=s(Lne);zKe=r(oat,"ibert"),oat.forEach(t),QKe=r(Y7e," \u2014 "),RR=n(Y7e,"A",{href:!0});var rat=s(RR);WKe=r(rat,"IBertConfig"),rat.forEach(t),HKe=r(Y7e," (I-BERT model)"),Y7e.forEach(t),UKe=i(L),Sm=n(L,"LI",{});var K7e=s(Sm);yne=n(K7e,"STRONG",{});var tat=s(yne);JKe=r(tat,"imagegpt"),tat.forEach(t),YKe=r(K7e," \u2014 "),PR=n(K7e,"A",{href:!0});var aat=s(PR);KKe=r(aat,"ImageGPTConfig"),aat.forEach(t),ZKe=r(K7e," (ImageGPT model)"),K7e.forEach(t),eZe=i(L),Rm=n(L,"LI",{});var Z7e=s(Rm);xne=n(Z7e,"STRONG",{});var nat=s(xne);oZe=r(nat,"layoutlm"),nat.forEach(t),rZe=r(Z7e," \u2014 "),BR=n(Z7e,"A",{href:!0});var sat=s(BR);tZe=r(sat,"LayoutLMConfig"),sat.forEach(t),aZe=r(Z7e," (LayoutLM model)"),Z7e.forEach(t),nZe=i(L),Pm=n(L,"LI",{});var eLe=s(Pm);$ne=n(eLe,"STRONG",{});var lat=s($ne);sZe=r(lat,"layoutlmv2"),lat.forEach(t),lZe=r(eLe," \u2014 "),NR=n(eLe,"A",{href:!0});var iat=s(NR);iZe=r(iat,"LayoutLMv2Config"),iat.forEach(t),dZe=r(eLe," (LayoutLMv2 model)"),eLe.forEach(t),cZe=i(L),Bm=n(L,"LI",{});var oLe=s(Bm);kne=n(oLe,"STRONG",{});var dat=s(kne);fZe=r(dat,"layoutlmv3"),dat.forEach(t),mZe=r(oLe," \u2014 "),IR=n(oLe,"A",{href:!0});var cat=s(IR);gZe=r(cat,"LayoutLMv3Config"),cat.forEach(t),hZe=r(oLe," (LayoutLMv3 model)"),oLe.forEach(t),pZe=i(L),Nm=n(L,"LI",{});var rLe=s(Nm);Sne=n(rLe,"STRONG",{});var fat=s(Sne);_Ze=r(fat,"led"),fat.forEach(t),uZe=r(rLe," \u2014 "),qR=n(rLe,"A",{href:!0});var mat=s(qR);bZe=r(mat,"LEDConfig"),mat.forEach(t),vZe=r(rLe," (LED model)"),rLe.forEach(t),FZe=i(L),Im=n(L,"LI",{});var tLe=s(Im);Rne=n(tLe,"STRONG",{});var gat=s(Rne);TZe=r(gat,"levit"),gat.forEach(t),MZe=r(tLe," \u2014 "),jR=n(tLe,"A",{href:!0});var hat=s(jR);EZe=r(hat,"LevitConfig"),hat.forEach(t),CZe=r(tLe," (LeViT model)"),tLe.forEach(t),wZe=i(L),qm=n(L,"LI",{});var aLe=s(qm);Pne=n(aLe,"STRONG",{});var pat=s(Pne);AZe=r(pat,"longformer"),pat.forEach(t),LZe=r(aLe," \u2014 "),DR=n(aLe,"A",{href:!0});var _at=s(DR);yZe=r(_at,"LongformerConfig"),_at.forEach(t),xZe=r(aLe," (Longformer model)"),aLe.forEach(t),$Ze=i(L),jm=n(L,"LI",{});var nLe=s(jm);Bne=n(nLe,"STRONG",{});var uat=s(Bne);kZe=r(uat,"longt5"),uat.forEach(t),SZe=r(nLe," \u2014 "),GR=n(nLe,"A",{href:!0});var bat=s(GR);RZe=r(bat,"LongT5Config"),bat.forEach(t),PZe=r(nLe," (LongT5 model)"),nLe.forEach(t),BZe=i(L),Dm=n(L,"LI",{});var sLe=s(Dm);Nne=n(sLe,"STRONG",{});var vat=s(Nne);NZe=r(vat,"luke"),vat.forEach(t),IZe=r(sLe," \u2014 "),OR=n(sLe,"A",{href:!0});var Fat=s(OR);qZe=r(Fat,"LukeConfig"),Fat.forEach(t),jZe=r(sLe," (LUKE model)"),sLe.forEach(t),DZe=i(L),Gm=n(L,"LI",{});var lLe=s(Gm);Ine=n(lLe,"STRONG",{});var Tat=s(Ine);GZe=r(Tat,"lxmert"),Tat.forEach(t),OZe=r(lLe," \u2014 "),VR=n(lLe,"A",{href:!0});var Mat=s(VR);VZe=r(Mat,"LxmertConfig"),Mat.forEach(t),XZe=r(lLe," (LXMERT model)"),lLe.forEach(t),zZe=i(L),Om=n(L,"LI",{});var iLe=s(Om);qne=n(iLe,"STRONG",{});var Eat=s(qne);QZe=r(Eat,"m2m_100"),Eat.forEach(t),WZe=r(iLe," \u2014 "),XR=n(iLe,"A",{href:!0});var Cat=s(XR);HZe=r(Cat,"M2M100Config"),Cat.forEach(t),UZe=r(iLe," (M2M100 model)"),iLe.forEach(t),JZe=i(L),Vm=n(L,"LI",{});var dLe=s(Vm);jne=n(dLe,"STRONG",{});var wat=s(jne);YZe=r(wat,"marian"),wat.forEach(t),KZe=r(dLe," \u2014 "),zR=n(dLe,"A",{href:!0});var Aat=s(zR);ZZe=r(Aat,"MarianConfig"),Aat.forEach(t),eeo=r(dLe," (Marian model)"),dLe.forEach(t),oeo=i(L),Xm=n(L,"LI",{});var cLe=s(Xm);Dne=n(cLe,"STRONG",{});var Lat=s(Dne);reo=r(Lat,"maskformer"),Lat.forEach(t),teo=r(cLe," \u2014 "),QR=n(cLe,"A",{href:!0});var yat=s(QR);aeo=r(yat,"MaskFormerConfig"),yat.forEach(t),neo=r(cLe," (MaskFormer model)"),cLe.forEach(t),seo=i(L),zm=n(L,"LI",{});var fLe=s(zm);Gne=n(fLe,"STRONG",{});var xat=s(Gne);leo=r(xat,"mbart"),xat.forEach(t),ieo=r(fLe," \u2014 "),WR=n(fLe,"A",{href:!0});var $at=s(WR);deo=r($at,"MBartConfig"),$at.forEach(t),ceo=r(fLe," (mBART model)"),fLe.forEach(t),feo=i(L),Qm=n(L,"LI",{});var mLe=s(Qm);One=n(mLe,"STRONG",{});var kat=s(One);meo=r(kat,"mctct"),kat.forEach(t),geo=r(mLe," \u2014 "),HR=n(mLe,"A",{href:!0});var Sat=s(HR);heo=r(Sat,"MCTCTConfig"),Sat.forEach(t),peo=r(mLe," (M-CTC-T model)"),mLe.forEach(t),_eo=i(L),Wm=n(L,"LI",{});var gLe=s(Wm);Vne=n(gLe,"STRONG",{});var Rat=s(Vne);ueo=r(Rat,"megatron-bert"),Rat.forEach(t),beo=r(gLe," \u2014 "),UR=n(gLe,"A",{href:!0});var Pat=s(UR);veo=r(Pat,"MegatronBertConfig"),Pat.forEach(t),Feo=r(gLe," (Megatron-BERT model)"),gLe.forEach(t),Teo=i(L),Hm=n(L,"LI",{});var hLe=s(Hm);Xne=n(hLe,"STRONG",{});var Bat=s(Xne);Meo=r(Bat,"mobilebert"),Bat.forEach(t),Eeo=r(hLe," \u2014 "),JR=n(hLe,"A",{href:!0});var Nat=s(JR);Ceo=r(Nat,"MobileBertConfig"),Nat.forEach(t),weo=r(hLe," (MobileBERT model)"),hLe.forEach(t),Aeo=i(L),Um=n(L,"LI",{});var pLe=s(Um);zne=n(pLe,"STRONG",{});var Iat=s(zne);Leo=r(Iat,"mobilevit"),Iat.forEach(t),yeo=r(pLe," \u2014 "),YR=n(pLe,"A",{href:!0});var qat=s(YR);xeo=r(qat,"MobileViTConfig"),qat.forEach(t),$eo=r(pLe," (MobileViT model)"),pLe.forEach(t),keo=i(L),Jm=n(L,"LI",{});var _Le=s(Jm);Qne=n(_Le,"STRONG",{});var jat=s(Qne);Seo=r(jat,"mpnet"),jat.forEach(t),Reo=r(_Le," \u2014 "),KR=n(_Le,"A",{href:!0});var Dat=s(KR);Peo=r(Dat,"MPNetConfig"),Dat.forEach(t),Beo=r(_Le," (MPNet model)"),_Le.forEach(t),Neo=i(L),Ym=n(L,"LI",{});var uLe=s(Ym);Wne=n(uLe,"STRONG",{});var Gat=s(Wne);Ieo=r(Gat,"mt5"),Gat.forEach(t),qeo=r(uLe," \u2014 "),ZR=n(uLe,"A",{href:!0});var Oat=s(ZR);jeo=r(Oat,"MT5Config"),Oat.forEach(t),Deo=r(uLe," (MT5 model)"),uLe.forEach(t),Geo=i(L),Km=n(L,"LI",{});var bLe=s(Km);Hne=n(bLe,"STRONG",{});var Vat=s(Hne);Oeo=r(Vat,"mvp"),Vat.forEach(t),Veo=r(bLe," \u2014 "),eP=n(bLe,"A",{href:!0});var Xat=s(eP);Xeo=r(Xat,"MvpConfig"),Xat.forEach(t),zeo=r(bLe," (MVP model)"),bLe.forEach(t),Qeo=i(L),Zm=n(L,"LI",{});var vLe=s(Zm);Une=n(vLe,"STRONG",{});var zat=s(Une);Weo=r(zat,"nezha"),zat.forEach(t),Heo=r(vLe," \u2014 "),oP=n(vLe,"A",{href:!0});var Qat=s(oP);Ueo=r(Qat,"NezhaConfig"),Qat.forEach(t),Jeo=r(vLe," (Nezha model)"),vLe.forEach(t),Yeo=i(L),eg=n(L,"LI",{});var FLe=s(eg);Jne=n(FLe,"STRONG",{});var Wat=s(Jne);Keo=r(Wat,"nystromformer"),Wat.forEach(t),Zeo=r(FLe," \u2014 "),rP=n(FLe,"A",{href:!0});var Hat=s(rP);eoo=r(Hat,"NystromformerConfig"),Hat.forEach(t),ooo=r(FLe," (Nystr\xF6mformer model)"),FLe.forEach(t),roo=i(L),og=n(L,"LI",{});var TLe=s(og);Yne=n(TLe,"STRONG",{});var Uat=s(Yne);too=r(Uat,"openai-gpt"),Uat.forEach(t),aoo=r(TLe," \u2014 "),tP=n(TLe,"A",{href:!0});var Jat=s(tP);noo=r(Jat,"OpenAIGPTConfig"),Jat.forEach(t),soo=r(TLe," (OpenAI GPT model)"),TLe.forEach(t),loo=i(L),rg=n(L,"LI",{});var MLe=s(rg);Kne=n(MLe,"STRONG",{});var Yat=s(Kne);ioo=r(Yat,"opt"),Yat.forEach(t),doo=r(MLe," \u2014 "),aP=n(MLe,"A",{href:!0});var Kat=s(aP);coo=r(Kat,"OPTConfig"),Kat.forEach(t),foo=r(MLe," (OPT model)"),MLe.forEach(t),moo=i(L),tg=n(L,"LI",{});var ELe=s(tg);Zne=n(ELe,"STRONG",{});var Zat=s(Zne);goo=r(Zat,"pegasus"),Zat.forEach(t),hoo=r(ELe," \u2014 "),nP=n(ELe,"A",{href:!0});var ent=s(nP);poo=r(ent,"PegasusConfig"),ent.forEach(t),_oo=r(ELe," (Pegasus model)"),ELe.forEach(t),uoo=i(L),ag=n(L,"LI",{});var CLe=s(ag);ese=n(CLe,"STRONG",{});var ont=s(ese);boo=r(ont,"perceiver"),ont.forEach(t),voo=r(CLe," \u2014 "),sP=n(CLe,"A",{href:!0});var rnt=s(sP);Foo=r(rnt,"PerceiverConfig"),rnt.forEach(t),Too=r(CLe," (Perceiver model)"),CLe.forEach(t),Moo=i(L),ng=n(L,"LI",{});var wLe=s(ng);ose=n(wLe,"STRONG",{});var tnt=s(ose);Eoo=r(tnt,"plbart"),tnt.forEach(t),Coo=r(wLe," \u2014 "),lP=n(wLe,"A",{href:!0});var ant=s(lP);woo=r(ant,"PLBartConfig"),ant.forEach(t),Aoo=r(wLe," (PLBart model)"),wLe.forEach(t),Loo=i(L),sg=n(L,"LI",{});var ALe=s(sg);rse=n(ALe,"STRONG",{});var nnt=s(rse);yoo=r(nnt,"poolformer"),nnt.forEach(t),xoo=r(ALe," \u2014 "),iP=n(ALe,"A",{href:!0});var snt=s(iP);$oo=r(snt,"PoolFormerConfig"),snt.forEach(t),koo=r(ALe," (PoolFormer model)"),ALe.forEach(t),Soo=i(L),lg=n(L,"LI",{});var LLe=s(lg);tse=n(LLe,"STRONG",{});var lnt=s(tse);Roo=r(lnt,"prophetnet"),lnt.forEach(t),Poo=r(LLe," \u2014 "),dP=n(LLe,"A",{href:!0});var int=s(dP);Boo=r(int,"ProphetNetConfig"),int.forEach(t),Noo=r(LLe," (ProphetNet model)"),LLe.forEach(t),Ioo=i(L),ig=n(L,"LI",{});var yLe=s(ig);ase=n(yLe,"STRONG",{});var dnt=s(ase);qoo=r(dnt,"qdqbert"),dnt.forEach(t),joo=r(yLe," \u2014 "),cP=n(yLe,"A",{href:!0});var cnt=s(cP);Doo=r(cnt,"QDQBertConfig"),cnt.forEach(t),Goo=r(yLe," (QDQBert model)"),yLe.forEach(t),Ooo=i(L),dg=n(L,"LI",{});var xLe=s(dg);nse=n(xLe,"STRONG",{});var fnt=s(nse);Voo=r(fnt,"rag"),fnt.forEach(t),Xoo=r(xLe," \u2014 "),fP=n(xLe,"A",{href:!0});var mnt=s(fP);zoo=r(mnt,"RagConfig"),mnt.forEach(t),Qoo=r(xLe," (RAG model)"),xLe.forEach(t),Woo=i(L),cg=n(L,"LI",{});var $Le=s(cg);sse=n($Le,"STRONG",{});var gnt=s(sse);Hoo=r(gnt,"realm"),gnt.forEach(t),Uoo=r($Le," \u2014 "),mP=n($Le,"A",{href:!0});var hnt=s(mP);Joo=r(hnt,"RealmConfig"),hnt.forEach(t),Yoo=r($Le," (REALM model)"),$Le.forEach(t),Koo=i(L),fg=n(L,"LI",{});var kLe=s(fg);lse=n(kLe,"STRONG",{});var pnt=s(lse);Zoo=r(pnt,"reformer"),pnt.forEach(t),ero=r(kLe," \u2014 "),gP=n(kLe,"A",{href:!0});var _nt=s(gP);oro=r(_nt,"ReformerConfig"),_nt.forEach(t),rro=r(kLe," (Reformer model)"),kLe.forEach(t),tro=i(L),mg=n(L,"LI",{});var SLe=s(mg);ise=n(SLe,"STRONG",{});var unt=s(ise);aro=r(unt,"regnet"),unt.forEach(t),nro=r(SLe," \u2014 "),hP=n(SLe,"A",{href:!0});var bnt=s(hP);sro=r(bnt,"RegNetConfig"),bnt.forEach(t),lro=r(SLe," (RegNet model)"),SLe.forEach(t),iro=i(L),gg=n(L,"LI",{});var RLe=s(gg);dse=n(RLe,"STRONG",{});var vnt=s(dse);dro=r(vnt,"rembert"),vnt.forEach(t),cro=r(RLe," \u2014 "),pP=n(RLe,"A",{href:!0});var Fnt=s(pP);fro=r(Fnt,"RemBertConfig"),Fnt.forEach(t),mro=r(RLe," (RemBERT model)"),RLe.forEach(t),gro=i(L),hg=n(L,"LI",{});var PLe=s(hg);cse=n(PLe,"STRONG",{});var Tnt=s(cse);hro=r(Tnt,"resnet"),Tnt.forEach(t),pro=r(PLe," \u2014 "),_P=n(PLe,"A",{href:!0});var Mnt=s(_P);_ro=r(Mnt,"ResNetConfig"),Mnt.forEach(t),uro=r(PLe," (ResNet model)"),PLe.forEach(t),bro=i(L),pg=n(L,"LI",{});var BLe=s(pg);fse=n(BLe,"STRONG",{});var Ent=s(fse);vro=r(Ent,"retribert"),Ent.forEach(t),Fro=r(BLe," \u2014 "),uP=n(BLe,"A",{href:!0});var Cnt=s(uP);Tro=r(Cnt,"RetriBertConfig"),Cnt.forEach(t),Mro=r(BLe," (RetriBERT model)"),BLe.forEach(t),Ero=i(L),_g=n(L,"LI",{});var NLe=s(_g);mse=n(NLe,"STRONG",{});var wnt=s(mse);Cro=r(wnt,"roberta"),wnt.forEach(t),wro=r(NLe," \u2014 "),bP=n(NLe,"A",{href:!0});var Ant=s(bP);Aro=r(Ant,"RobertaConfig"),Ant.forEach(t),Lro=r(NLe," (RoBERTa model)"),NLe.forEach(t),yro=i(L),ug=n(L,"LI",{});var ILe=s(ug);gse=n(ILe,"STRONG",{});var Lnt=s(gse);xro=r(Lnt,"roformer"),Lnt.forEach(t),$ro=r(ILe," \u2014 "),vP=n(ILe,"A",{href:!0});var ynt=s(vP);kro=r(ynt,"RoFormerConfig"),ynt.forEach(t),Sro=r(ILe," (RoFormer model)"),ILe.forEach(t),Rro=i(L),bg=n(L,"LI",{});var qLe=s(bg);hse=n(qLe,"STRONG",{});var xnt=s(hse);Pro=r(xnt,"segformer"),xnt.forEach(t),Bro=r(qLe," \u2014 "),FP=n(qLe,"A",{href:!0});var $nt=s(FP);Nro=r($nt,"SegformerConfig"),$nt.forEach(t),Iro=r(qLe," (SegFormer model)"),qLe.forEach(t),qro=i(L),vg=n(L,"LI",{});var jLe=s(vg);pse=n(jLe,"STRONG",{});var knt=s(pse);jro=r(knt,"sew"),knt.forEach(t),Dro=r(jLe," \u2014 "),TP=n(jLe,"A",{href:!0});var Snt=s(TP);Gro=r(Snt,"SEWConfig"),Snt.forEach(t),Oro=r(jLe," (SEW model)"),jLe.forEach(t),Vro=i(L),Fg=n(L,"LI",{});var DLe=s(Fg);_se=n(DLe,"STRONG",{});var Rnt=s(_se);Xro=r(Rnt,"sew-d"),Rnt.forEach(t),zro=r(DLe," \u2014 "),MP=n(DLe,"A",{href:!0});var Pnt=s(MP);Qro=r(Pnt,"SEWDConfig"),Pnt.forEach(t),Wro=r(DLe," (SEW-D model)"),DLe.forEach(t),Hro=i(L),Tg=n(L,"LI",{});var GLe=s(Tg);use=n(GLe,"STRONG",{});var Bnt=s(use);Uro=r(Bnt,"speech-encoder-decoder"),Bnt.forEach(t),Jro=r(GLe," \u2014 "),EP=n(GLe,"A",{href:!0});var Nnt=s(EP);Yro=r(Nnt,"SpeechEncoderDecoderConfig"),Nnt.forEach(t),Kro=r(GLe," (Speech Encoder decoder model)"),GLe.forEach(t),Zro=i(L),Mg=n(L,"LI",{});var OLe=s(Mg);bse=n(OLe,"STRONG",{});var Int=s(bse);eto=r(Int,"speech_to_text"),Int.forEach(t),oto=r(OLe," \u2014 "),CP=n(OLe,"A",{href:!0});var qnt=s(CP);rto=r(qnt,"Speech2TextConfig"),qnt.forEach(t),tto=r(OLe," (Speech2Text model)"),OLe.forEach(t),ato=i(L),Eg=n(L,"LI",{});var VLe=s(Eg);vse=n(VLe,"STRONG",{});var jnt=s(vse);nto=r(jnt,"speech_to_text_2"),jnt.forEach(t),sto=r(VLe," \u2014 "),wP=n(VLe,"A",{href:!0});var Dnt=s(wP);lto=r(Dnt,"Speech2Text2Config"),Dnt.forEach(t),ito=r(VLe," (Speech2Text2 model)"),VLe.forEach(t),dto=i(L),Cg=n(L,"LI",{});var XLe=s(Cg);Fse=n(XLe,"STRONG",{});var Gnt=s(Fse);cto=r(Gnt,"splinter"),Gnt.forEach(t),fto=r(XLe," \u2014 "),AP=n(XLe,"A",{href:!0});var Ont=s(AP);mto=r(Ont,"SplinterConfig"),Ont.forEach(t),gto=r(XLe," (Splinter model)"),XLe.forEach(t),hto=i(L),wg=n(L,"LI",{});var zLe=s(wg);Tse=n(zLe,"STRONG",{});var Vnt=s(Tse);pto=r(Vnt,"squeezebert"),Vnt.forEach(t),_to=r(zLe," \u2014 "),LP=n(zLe,"A",{href:!0});var Xnt=s(LP);uto=r(Xnt,"SqueezeBertConfig"),Xnt.forEach(t),bto=r(zLe," (SqueezeBERT model)"),zLe.forEach(t),vto=i(L),Ag=n(L,"LI",{});var QLe=s(Ag);Mse=n(QLe,"STRONG",{});var znt=s(Mse);Fto=r(znt,"swin"),znt.forEach(t),Tto=r(QLe," \u2014 "),yP=n(QLe,"A",{href:!0});var Qnt=s(yP);Mto=r(Qnt,"SwinConfig"),Qnt.forEach(t),Eto=r(QLe," (Swin Transformer model)"),QLe.forEach(t),Cto=i(L),Lg=n(L,"LI",{});var WLe=s(Lg);Ese=n(WLe,"STRONG",{});var Wnt=s(Ese);wto=r(Wnt,"t5"),Wnt.forEach(t),Ato=r(WLe," \u2014 "),xP=n(WLe,"A",{href:!0});var Hnt=s(xP);Lto=r(Hnt,"T5Config"),Hnt.forEach(t),yto=r(WLe," (T5 model)"),WLe.forEach(t),xto=i(L),yg=n(L,"LI",{});var HLe=s(yg);Cse=n(HLe,"STRONG",{});var Unt=s(Cse);$to=r(Unt,"tapas"),Unt.forEach(t),kto=r(HLe," \u2014 "),$P=n(HLe,"A",{href:!0});var Jnt=s($P);Sto=r(Jnt,"TapasConfig"),Jnt.forEach(t),Rto=r(HLe," (TAPAS model)"),HLe.forEach(t),Pto=i(L),xg=n(L,"LI",{});var ULe=s(xg);wse=n(ULe,"STRONG",{});var Ynt=s(wse);Bto=r(Ynt,"trajectory_transformer"),Ynt.forEach(t),Nto=r(ULe," \u2014 "),kP=n(ULe,"A",{href:!0});var Knt=s(kP);Ito=r(Knt,"TrajectoryTransformerConfig"),Knt.forEach(t),qto=r(ULe," (Trajectory Transformer model)"),ULe.forEach(t),jto=i(L),$g=n(L,"LI",{});var JLe=s($g);Ase=n(JLe,"STRONG",{});var Znt=s(Ase);Dto=r(Znt,"transfo-xl"),Znt.forEach(t),Gto=r(JLe," \u2014 "),SP=n(JLe,"A",{href:!0});var est=s(SP);Oto=r(est,"TransfoXLConfig"),est.forEach(t),Vto=r(JLe," (Transformer-XL model)"),JLe.forEach(t),Xto=i(L),kg=n(L,"LI",{});var YLe=s(kg);Lse=n(YLe,"STRONG",{});var ost=s(Lse);zto=r(ost,"trocr"),ost.forEach(t),Qto=r(YLe," \u2014 "),RP=n(YLe,"A",{href:!0});var rst=s(RP);Wto=r(rst,"TrOCRConfig"),rst.forEach(t),Hto=r(YLe," (TrOCR model)"),YLe.forEach(t),Uto=i(L),Sg=n(L,"LI",{});var KLe=s(Sg);yse=n(KLe,"STRONG",{});var tst=s(yse);Jto=r(tst,"unispeech"),tst.forEach(t),Yto=r(KLe," \u2014 "),PP=n(KLe,"A",{href:!0});var ast=s(PP);Kto=r(ast,"UniSpeechConfig"),ast.forEach(t),Zto=r(KLe," (UniSpeech model)"),KLe.forEach(t),eao=i(L),Rg=n(L,"LI",{});var ZLe=s(Rg);xse=n(ZLe,"STRONG",{});var nst=s(xse);oao=r(nst,"unispeech-sat"),nst.forEach(t),rao=r(ZLe," \u2014 "),BP=n(ZLe,"A",{href:!0});var sst=s(BP);tao=r(sst,"UniSpeechSatConfig"),sst.forEach(t),aao=r(ZLe," (UniSpeechSat model)"),ZLe.forEach(t),nao=i(L),Pg=n(L,"LI",{});var eye=s(Pg);$se=n(eye,"STRONG",{});var lst=s($se);sao=r(lst,"van"),lst.forEach(t),lao=r(eye," \u2014 "),NP=n(eye,"A",{href:!0});var ist=s(NP);iao=r(ist,"VanConfig"),ist.forEach(t),dao=r(eye," (VAN model)"),eye.forEach(t),cao=i(L),Bg=n(L,"LI",{});var oye=s(Bg);kse=n(oye,"STRONG",{});var dst=s(kse);fao=r(dst,"vilt"),dst.forEach(t),mao=r(oye," \u2014 "),IP=n(oye,"A",{href:!0});var cst=s(IP);gao=r(cst,"ViltConfig"),cst.forEach(t),hao=r(oye," (ViLT model)"),oye.forEach(t),pao=i(L),Ng=n(L,"LI",{});var rye=s(Ng);Sse=n(rye,"STRONG",{});var fst=s(Sse);_ao=r(fst,"vision-encoder-decoder"),fst.forEach(t),uao=r(rye," \u2014 "),qP=n(rye,"A",{href:!0});var mst=s(qP);bao=r(mst,"VisionEncoderDecoderConfig"),mst.forEach(t),vao=r(rye," (Vision Encoder decoder model)"),rye.forEach(t),Fao=i(L),Ig=n(L,"LI",{});var tye=s(Ig);Rse=n(tye,"STRONG",{});var gst=s(Rse);Tao=r(gst,"vision-text-dual-encoder"),gst.forEach(t),Mao=r(tye," \u2014 "),jP=n(tye,"A",{href:!0});var hst=s(jP);Eao=r(hst,"VisionTextDualEncoderConfig"),hst.forEach(t),Cao=r(tye," (VisionTextDualEncoder model)"),tye.forEach(t),wao=i(L),qg=n(L,"LI",{});var aye=s(qg);Pse=n(aye,"STRONG",{});var pst=s(Pse);Aao=r(pst,"visual_bert"),pst.forEach(t),Lao=r(aye," \u2014 "),DP=n(aye,"A",{href:!0});var _st=s(DP);yao=r(_st,"VisualBertConfig"),_st.forEach(t),xao=r(aye," (VisualBERT model)"),aye.forEach(t),$ao=i(L),jg=n(L,"LI",{});var nye=s(jg);Bse=n(nye,"STRONG",{});var ust=s(Bse);kao=r(ust,"vit"),ust.forEach(t),Sao=r(nye," \u2014 "),GP=n(nye,"A",{href:!0});var bst=s(GP);Rao=r(bst,"ViTConfig"),bst.forEach(t),Pao=r(nye," (ViT model)"),nye.forEach(t),Bao=i(L),Dg=n(L,"LI",{});var sye=s(Dg);Nse=n(sye,"STRONG",{});var vst=s(Nse);Nao=r(vst,"vit_mae"),vst.forEach(t),Iao=r(sye," \u2014 "),OP=n(sye,"A",{href:!0});var Fst=s(OP);qao=r(Fst,"ViTMAEConfig"),Fst.forEach(t),jao=r(sye," (ViTMAE model)"),sye.forEach(t),Dao=i(L),Gg=n(L,"LI",{});var lye=s(Gg);Ise=n(lye,"STRONG",{});var Tst=s(Ise);Gao=r(Tst,"wav2vec2"),Tst.forEach(t),Oao=r(lye," \u2014 "),VP=n(lye,"A",{href:!0});var Mst=s(VP);Vao=r(Mst,"Wav2Vec2Config"),Mst.forEach(t),Xao=r(lye," (Wav2Vec2 model)"),lye.forEach(t),zao=i(L),Og=n(L,"LI",{});var iye=s(Og);qse=n(iye,"STRONG",{});var Est=s(qse);Qao=r(Est,"wav2vec2-conformer"),Est.forEach(t),Wao=r(iye," \u2014 "),XP=n(iye,"A",{href:!0});var Cst=s(XP);Hao=r(Cst,"Wav2Vec2ConformerConfig"),Cst.forEach(t),Uao=r(iye," (Wav2Vec2-Conformer model)"),iye.forEach(t),Jao=i(L),Vg=n(L,"LI",{});var dye=s(Vg);jse=n(dye,"STRONG",{});var wst=s(jse);Yao=r(wst,"wavlm"),wst.forEach(t),Kao=r(dye," \u2014 "),zP=n(dye,"A",{href:!0});var Ast=s(zP);Zao=r(Ast,"WavLMConfig"),Ast.forEach(t),eno=r(dye," (WavLM model)"),dye.forEach(t),ono=i(L),Xg=n(L,"LI",{});var cye=s(Xg);Dse=n(cye,"STRONG",{});var Lst=s(Dse);rno=r(Lst,"xglm"),Lst.forEach(t),tno=r(cye," \u2014 "),QP=n(cye,"A",{href:!0});var yst=s(QP);ano=r(yst,"XGLMConfig"),yst.forEach(t),nno=r(cye," (XGLM model)"),cye.forEach(t),sno=i(L),zg=n(L,"LI",{});var fye=s(zg);Gse=n(fye,"STRONG",{});var xst=s(Gse);lno=r(xst,"xlm"),xst.forEach(t),ino=r(fye," \u2014 "),WP=n(fye,"A",{href:!0});var $st=s(WP);dno=r($st,"XLMConfig"),$st.forEach(t),cno=r(fye," (XLM model)"),fye.forEach(t),fno=i(L),Qg=n(L,"LI",{});var mye=s(Qg);Ose=n(mye,"STRONG",{});var kst=s(Ose);mno=r(kst,"xlm-prophetnet"),kst.forEach(t),gno=r(mye," \u2014 "),HP=n(mye,"A",{href:!0});var Sst=s(HP);hno=r(Sst,"XLMProphetNetConfig"),Sst.forEach(t),pno=r(mye," (XLM-ProphetNet model)"),mye.forEach(t),_no=i(L),Wg=n(L,"LI",{});var gye=s(Wg);Vse=n(gye,"STRONG",{});var Rst=s(Vse);uno=r(Rst,"xlm-roberta"),Rst.forEach(t),bno=r(gye," \u2014 "),UP=n(gye,"A",{href:!0});var Pst=s(UP);vno=r(Pst,"XLMRobertaConfig"),Pst.forEach(t),Fno=r(gye," (XLM-RoBERTa model)"),gye.forEach(t),Tno=i(L),Hg=n(L,"LI",{});var hye=s(Hg);Xse=n(hye,"STRONG",{});var Bst=s(Xse);Mno=r(Bst,"xlm-roberta-xl"),Bst.forEach(t),Eno=r(hye," \u2014 "),JP=n(hye,"A",{href:!0});var Nst=s(JP);Cno=r(Nst,"XLMRobertaXLConfig"),Nst.forEach(t),wno=r(hye," (XLM-RoBERTa-XL model)"),hye.forEach(t),Ano=i(L),Ug=n(L,"LI",{});var pye=s(Ug);zse=n(pye,"STRONG",{});var Ist=s(zse);Lno=r(Ist,"xlnet"),Ist.forEach(t),yno=r(pye," \u2014 "),YP=n(pye,"A",{href:!0});var qst=s(YP);xno=r(qst,"XLNetConfig"),qst.forEach(t),$no=r(pye," (XLNet model)"),pye.forEach(t),kno=i(L),Jg=n(L,"LI",{});var _ye=s(Jg);Qse=n(_ye,"STRONG",{});var jst=s(Qse);Sno=r(jst,"yolos"),jst.forEach(t),Rno=r(_ye," \u2014 "),KP=n(_ye,"A",{href:!0});var Dst=s(KP);Pno=r(Dst,"YolosConfig"),Dst.forEach(t),Bno=r(_ye," (YOLOS model)"),_ye.forEach(t),Nno=i(L),Yg=n(L,"LI",{});var uye=s(Yg);Wse=n(uye,"STRONG",{});var Gst=s(Wse);Ino=r(Gst,"yoso"),Gst.forEach(t),qno=r(uye," \u2014 "),ZP=n(uye,"A",{href:!0});var Ost=s(ZP);jno=r(Ost,"YosoConfig"),Ost.forEach(t),Dno=r(uye," (YOSO model)"),uye.forEach(t),L.forEach(t),Gno=i(st),T(Kg.$$.fragment,st),st.forEach(t),Ono=i(nt),Zg=n(nt,"DIV",{class:!0});var iQe=s(Zg);T(mL.$$.fragment,iQe),Vno=i(iQe),Hse=n(iQe,"P",{});var Vst=s(Hse);Xno=r(Vst,"Register a new configuration for this class."),Vst.forEach(t),iQe.forEach(t),nt.forEach(t),dXe=i(f),qi=n(f,"H2",{class:!0});var dQe=s(qi);eh=n(dQe,"A",{id:!0,class:!0,href:!0});var Xst=s(eh);Use=n(Xst,"SPAN",{});var zst=s(Use);T(gL.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),zno=i(dQe),Jse=n(dQe,"SPAN",{});var Qst=s(Jse);Qno=r(Qst,"AutoTokenizer"),Qst.forEach(t),dQe.forEach(t),cXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(hL.$$.fragment,Zs),Wno=i(Zs),pL=n(Zs,"P",{});var cQe=s(pL);Hno=r(cQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=n(cQe,"A",{href:!0});var Wst=s(eB);Uno=r(Wst,"AutoTokenizer.from_pretrained()"),Wst.forEach(t),Jno=r(cQe," class method."),cQe.forEach(t),Yno=i(Zs),_L=n(Zs,"P",{});var fQe=s(_L);Kno=r(fQe,"This class cannot be instantiated directly using "),Yse=n(fQe,"CODE",{});var Hst=s(Yse);Zno=r(Hst,"__init__()"),Hst.forEach(t),eso=r(fQe," (throws an error)."),fQe.forEach(t),oso=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(uL.$$.fragment,el),rso=i(el),Kse=n(el,"P",{});var Ust=s(Kse);tso=r(Ust,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ust.forEach(t),aso=i(el),Pa=n(el,"P",{});var lA=s(Pa);nso=r(lA,"The tokenizer class to instantiate is selected based on the "),Zse=n(lA,"CODE",{});var Jst=s(Zse);sso=r(Jst,"model_type"),Jst.forEach(t),lso=r(lA,` property of the config object (either
passed as an argument or loaded from `),ele=n(lA,"CODE",{});var Yst=s(ele);iso=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),dso=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=n(lA,"CODE",{});var Kst=s(ole);cso=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),fso=r(lA,":"),lA.forEach(t),mso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ek=s(jn);rle=n(Ek,"STRONG",{});var Zst=s(rle);gso=r(Zst,"albert"),Zst.forEach(t),hso=r(Ek," \u2014 "),oB=n(Ek,"A",{href:!0});var elt=s(oB);pso=r(elt,"AlbertTokenizer"),elt.forEach(t),_so=r(Ek," or "),rB=n(Ek,"A",{href:!0});var olt=s(rB);uso=r(olt,"AlbertTokenizerFast"),olt.forEach(t),bso=r(Ek," (ALBERT model)"),Ek.forEach(t),vso=i(S),Dn=n(S,"LI",{});var Ck=s(Dn);tle=n(Ck,"STRONG",{});var rlt=s(tle);Fso=r(rlt,"bart"),rlt.forEach(t),Tso=r(Ck," \u2014 "),tB=n(Ck,"A",{href:!0});var tlt=s(tB);Mso=r(tlt,"BartTokenizer"),tlt.forEach(t),Eso=r(Ck," or "),aB=n(Ck,"A",{href:!0});var alt=s(aB);Cso=r(alt,"BartTokenizerFast"),alt.forEach(t),wso=r(Ck," (BART model)"),Ck.forEach(t),Aso=i(S),Gn=n(S,"LI",{});var wk=s(Gn);ale=n(wk,"STRONG",{});var nlt=s(ale);Lso=r(nlt,"barthez"),nlt.forEach(t),yso=r(wk," \u2014 "),nB=n(wk,"A",{href:!0});var slt=s(nB);xso=r(slt,"BarthezTokenizer"),slt.forEach(t),$so=r(wk," or "),sB=n(wk,"A",{href:!0});var llt=s(sB);kso=r(llt,"BarthezTokenizerFast"),llt.forEach(t),Sso=r(wk," (BARThez model)"),wk.forEach(t),Rso=i(S),oh=n(S,"LI",{});var bye=s(oh);nle=n(bye,"STRONG",{});var ilt=s(nle);Pso=r(ilt,"bartpho"),ilt.forEach(t),Bso=r(bye," \u2014 "),lB=n(bye,"A",{href:!0});var dlt=s(lB);Nso=r(dlt,"BartphoTokenizer"),dlt.forEach(t),Iso=r(bye," (BARTpho model)"),bye.forEach(t),qso=i(S),On=n(S,"LI",{});var Ak=s(On);sle=n(Ak,"STRONG",{});var clt=s(sle);jso=r(clt,"bert"),clt.forEach(t),Dso=r(Ak," \u2014 "),iB=n(Ak,"A",{href:!0});var flt=s(iB);Gso=r(flt,"BertTokenizer"),flt.forEach(t),Oso=r(Ak," or "),dB=n(Ak,"A",{href:!0});var mlt=s(dB);Vso=r(mlt,"BertTokenizerFast"),mlt.forEach(t),Xso=r(Ak," (BERT model)"),Ak.forEach(t),zso=i(S),rh=n(S,"LI",{});var vye=s(rh);lle=n(vye,"STRONG",{});var glt=s(lle);Qso=r(glt,"bert-generation"),glt.forEach(t),Wso=r(vye," \u2014 "),cB=n(vye,"A",{href:!0});var hlt=s(cB);Hso=r(hlt,"BertGenerationTokenizer"),hlt.forEach(t),Uso=r(vye," (Bert Generation model)"),vye.forEach(t),Jso=i(S),th=n(S,"LI",{});var Fye=s(th);ile=n(Fye,"STRONG",{});var plt=s(ile);Yso=r(plt,"bert-japanese"),plt.forEach(t),Kso=r(Fye," \u2014 "),fB=n(Fye,"A",{href:!0});var _lt=s(fB);Zso=r(_lt,"BertJapaneseTokenizer"),_lt.forEach(t),elo=r(Fye," (BertJapanese model)"),Fye.forEach(t),olo=i(S),ah=n(S,"LI",{});var Tye=s(ah);dle=n(Tye,"STRONG",{});var ult=s(dle);rlo=r(ult,"bertweet"),ult.forEach(t),tlo=r(Tye," \u2014 "),mB=n(Tye,"A",{href:!0});var blt=s(mB);alo=r(blt,"BertweetTokenizer"),blt.forEach(t),nlo=r(Tye," (BERTweet model)"),Tye.forEach(t),slo=i(S),Vn=n(S,"LI",{});var Lk=s(Vn);cle=n(Lk,"STRONG",{});var vlt=s(cle);llo=r(vlt,"big_bird"),vlt.forEach(t),ilo=r(Lk," \u2014 "),gB=n(Lk,"A",{href:!0});var Flt=s(gB);dlo=r(Flt,"BigBirdTokenizer"),Flt.forEach(t),clo=r(Lk," or "),hB=n(Lk,"A",{href:!0});var Tlt=s(hB);flo=r(Tlt,"BigBirdTokenizerFast"),Tlt.forEach(t),mlo=r(Lk," (BigBird model)"),Lk.forEach(t),glo=i(S),Xn=n(S,"LI",{});var yk=s(Xn);fle=n(yk,"STRONG",{});var Mlt=s(fle);hlo=r(Mlt,"bigbird_pegasus"),Mlt.forEach(t),plo=r(yk," \u2014 "),pB=n(yk,"A",{href:!0});var Elt=s(pB);_lo=r(Elt,"PegasusTokenizer"),Elt.forEach(t),ulo=r(yk," or "),_B=n(yk,"A",{href:!0});var Clt=s(_B);blo=r(Clt,"PegasusTokenizerFast"),Clt.forEach(t),vlo=r(yk," (BigBird-Pegasus model)"),yk.forEach(t),Flo=i(S),zn=n(S,"LI",{});var xk=s(zn);mle=n(xk,"STRONG",{});var wlt=s(mle);Tlo=r(wlt,"blenderbot"),wlt.forEach(t),Mlo=r(xk," \u2014 "),uB=n(xk,"A",{href:!0});var Alt=s(uB);Elo=r(Alt,"BlenderbotTokenizer"),Alt.forEach(t),Clo=r(xk," or "),bB=n(xk,"A",{href:!0});var Llt=s(bB);wlo=r(Llt,"BlenderbotTokenizerFast"),Llt.forEach(t),Alo=r(xk," (Blenderbot model)"),xk.forEach(t),Llo=i(S),nh=n(S,"LI",{});var Mye=s(nh);gle=n(Mye,"STRONG",{});var ylt=s(gle);ylo=r(ylt,"blenderbot-small"),ylt.forEach(t),xlo=r(Mye," \u2014 "),vB=n(Mye,"A",{href:!0});var xlt=s(vB);$lo=r(xlt,"BlenderbotSmallTokenizer"),xlt.forEach(t),klo=r(Mye," (BlenderbotSmall model)"),Mye.forEach(t),Slo=i(S),sh=n(S,"LI",{});var Eye=s(sh);hle=n(Eye,"STRONG",{});var $lt=s(hle);Rlo=r($lt,"bloom"),$lt.forEach(t),Plo=r(Eye," \u2014 "),FB=n(Eye,"A",{href:!0});var klt=s(FB);Blo=r(klt,"BloomTokenizerFast"),klt.forEach(t),Nlo=r(Eye," (BLOOM model)"),Eye.forEach(t),Ilo=i(S),lh=n(S,"LI",{});var Cye=s(lh);ple=n(Cye,"STRONG",{});var Slt=s(ple);qlo=r(Slt,"byt5"),Slt.forEach(t),jlo=r(Cye," \u2014 "),TB=n(Cye,"A",{href:!0});var Rlt=s(TB);Dlo=r(Rlt,"ByT5Tokenizer"),Rlt.forEach(t),Glo=r(Cye," (ByT5 model)"),Cye.forEach(t),Olo=i(S),Qn=n(S,"LI",{});var $k=s(Qn);_le=n($k,"STRONG",{});var Plt=s(_le);Vlo=r(Plt,"camembert"),Plt.forEach(t),Xlo=r($k," \u2014 "),MB=n($k,"A",{href:!0});var Blt=s(MB);zlo=r(Blt,"CamembertTokenizer"),Blt.forEach(t),Qlo=r($k," or "),EB=n($k,"A",{href:!0});var Nlt=s(EB);Wlo=r(Nlt,"CamembertTokenizerFast"),Nlt.forEach(t),Hlo=r($k," (CamemBERT model)"),$k.forEach(t),Ulo=i(S),ih=n(S,"LI",{});var wye=s(ih);ule=n(wye,"STRONG",{});var Ilt=s(ule);Jlo=r(Ilt,"canine"),Ilt.forEach(t),Ylo=r(wye," \u2014 "),CB=n(wye,"A",{href:!0});var qlt=s(CB);Klo=r(qlt,"CanineTokenizer"),qlt.forEach(t),Zlo=r(wye," (CANINE model)"),wye.forEach(t),eio=i(S),Wn=n(S,"LI",{});var kk=s(Wn);ble=n(kk,"STRONG",{});var jlt=s(ble);oio=r(jlt,"clip"),jlt.forEach(t),rio=r(kk," \u2014 "),wB=n(kk,"A",{href:!0});var Dlt=s(wB);tio=r(Dlt,"CLIPTokenizer"),Dlt.forEach(t),aio=r(kk," or "),AB=n(kk,"A",{href:!0});var Glt=s(AB);nio=r(Glt,"CLIPTokenizerFast"),Glt.forEach(t),sio=r(kk," (CLIP model)"),kk.forEach(t),lio=i(S),Hn=n(S,"LI",{});var Sk=s(Hn);vle=n(Sk,"STRONG",{});var Olt=s(vle);iio=r(Olt,"codegen"),Olt.forEach(t),dio=r(Sk," \u2014 "),LB=n(Sk,"A",{href:!0});var Vlt=s(LB);cio=r(Vlt,"CodeGenTokenizer"),Vlt.forEach(t),fio=r(Sk," or "),yB=n(Sk,"A",{href:!0});var Xlt=s(yB);mio=r(Xlt,"CodeGenTokenizerFast"),Xlt.forEach(t),gio=r(Sk," (CodeGen model)"),Sk.forEach(t),hio=i(S),Un=n(S,"LI",{});var Rk=s(Un);Fle=n(Rk,"STRONG",{});var zlt=s(Fle);pio=r(zlt,"convbert"),zlt.forEach(t),_io=r(Rk," \u2014 "),xB=n(Rk,"A",{href:!0});var Qlt=s(xB);uio=r(Qlt,"ConvBertTokenizer"),Qlt.forEach(t),bio=r(Rk," or "),$B=n(Rk,"A",{href:!0});var Wlt=s($B);vio=r(Wlt,"ConvBertTokenizerFast"),Wlt.forEach(t),Fio=r(Rk," (ConvBERT model)"),Rk.forEach(t),Tio=i(S),Jn=n(S,"LI",{});var Pk=s(Jn);Tle=n(Pk,"STRONG",{});var Hlt=s(Tle);Mio=r(Hlt,"cpm"),Hlt.forEach(t),Eio=r(Pk," \u2014 "),kB=n(Pk,"A",{href:!0});var Ult=s(kB);Cio=r(Ult,"CpmTokenizer"),Ult.forEach(t),wio=r(Pk," or "),SB=n(Pk,"A",{href:!0});var Jlt=s(SB);Aio=r(Jlt,"CpmTokenizerFast"),Jlt.forEach(t),Lio=r(Pk," (CPM model)"),Pk.forEach(t),yio=i(S),dh=n(S,"LI",{});var Aye=s(dh);Mle=n(Aye,"STRONG",{});var Ylt=s(Mle);xio=r(Ylt,"ctrl"),Ylt.forEach(t),$io=r(Aye," \u2014 "),RB=n(Aye,"A",{href:!0});var Klt=s(RB);kio=r(Klt,"CTRLTokenizer"),Klt.forEach(t),Sio=r(Aye," (CTRL model)"),Aye.forEach(t),Rio=i(S),Yn=n(S,"LI",{});var Bk=s(Yn);Ele=n(Bk,"STRONG",{});var Zlt=s(Ele);Pio=r(Zlt,"data2vec-text"),Zlt.forEach(t),Bio=r(Bk," \u2014 "),PB=n(Bk,"A",{href:!0});var eit=s(PB);Nio=r(eit,"RobertaTokenizer"),eit.forEach(t),Iio=r(Bk," or "),BB=n(Bk,"A",{href:!0});var oit=s(BB);qio=r(oit,"RobertaTokenizerFast"),oit.forEach(t),jio=r(Bk," (Data2VecText model)"),Bk.forEach(t),Dio=i(S),Kn=n(S,"LI",{});var Nk=s(Kn);Cle=n(Nk,"STRONG",{});var rit=s(Cle);Gio=r(rit,"deberta"),rit.forEach(t),Oio=r(Nk," \u2014 "),NB=n(Nk,"A",{href:!0});var tit=s(NB);Vio=r(tit,"DebertaTokenizer"),tit.forEach(t),Xio=r(Nk," or "),IB=n(Nk,"A",{href:!0});var ait=s(IB);zio=r(ait,"DebertaTokenizerFast"),ait.forEach(t),Qio=r(Nk," (DeBERTa model)"),Nk.forEach(t),Wio=i(S),Zn=n(S,"LI",{});var Ik=s(Zn);wle=n(Ik,"STRONG",{});var nit=s(wle);Hio=r(nit,"deberta-v2"),nit.forEach(t),Uio=r(Ik," \u2014 "),qB=n(Ik,"A",{href:!0});var sit=s(qB);Jio=r(sit,"DebertaV2Tokenizer"),sit.forEach(t),Yio=r(Ik," or "),jB=n(Ik,"A",{href:!0});var lit=s(jB);Kio=r(lit,"DebertaV2TokenizerFast"),lit.forEach(t),Zio=r(Ik," (DeBERTa-v2 model)"),Ik.forEach(t),edo=i(S),es=n(S,"LI",{});var qk=s(es);Ale=n(qk,"STRONG",{});var iit=s(Ale);odo=r(iit,"distilbert"),iit.forEach(t),rdo=r(qk," \u2014 "),DB=n(qk,"A",{href:!0});var dit=s(DB);tdo=r(dit,"DistilBertTokenizer"),dit.forEach(t),ado=r(qk," or "),GB=n(qk,"A",{href:!0});var cit=s(GB);ndo=r(cit,"DistilBertTokenizerFast"),cit.forEach(t),sdo=r(qk," (DistilBERT model)"),qk.forEach(t),ldo=i(S),os=n(S,"LI",{});var jk=s(os);Lle=n(jk,"STRONG",{});var fit=s(Lle);ido=r(fit,"dpr"),fit.forEach(t),ddo=r(jk," \u2014 "),OB=n(jk,"A",{href:!0});var mit=s(OB);cdo=r(mit,"DPRQuestionEncoderTokenizer"),mit.forEach(t),fdo=r(jk," or "),VB=n(jk,"A",{href:!0});var git=s(VB);mdo=r(git,"DPRQuestionEncoderTokenizerFast"),git.forEach(t),gdo=r(jk," (DPR model)"),jk.forEach(t),hdo=i(S),rs=n(S,"LI",{});var Dk=s(rs);yle=n(Dk,"STRONG",{});var hit=s(yle);pdo=r(hit,"electra"),hit.forEach(t),_do=r(Dk," \u2014 "),XB=n(Dk,"A",{href:!0});var pit=s(XB);udo=r(pit,"ElectraTokenizer"),pit.forEach(t),bdo=r(Dk," or "),zB=n(Dk,"A",{href:!0});var _it=s(zB);vdo=r(_it,"ElectraTokenizerFast"),_it.forEach(t),Fdo=r(Dk," (ELECTRA model)"),Dk.forEach(t),Tdo=i(S),ch=n(S,"LI",{});var Lye=s(ch);xle=n(Lye,"STRONG",{});var uit=s(xle);Mdo=r(uit,"flaubert"),uit.forEach(t),Edo=r(Lye," \u2014 "),QB=n(Lye,"A",{href:!0});var bit=s(QB);Cdo=r(bit,"FlaubertTokenizer"),bit.forEach(t),wdo=r(Lye," (FlauBERT model)"),Lye.forEach(t),Ado=i(S),ts=n(S,"LI",{});var Gk=s(ts);$le=n(Gk,"STRONG",{});var vit=s($le);Ldo=r(vit,"fnet"),vit.forEach(t),ydo=r(Gk," \u2014 "),WB=n(Gk,"A",{href:!0});var Fit=s(WB);xdo=r(Fit,"FNetTokenizer"),Fit.forEach(t),$do=r(Gk," or "),HB=n(Gk,"A",{href:!0});var Tit=s(HB);kdo=r(Tit,"FNetTokenizerFast"),Tit.forEach(t),Sdo=r(Gk," (FNet model)"),Gk.forEach(t),Rdo=i(S),fh=n(S,"LI",{});var yye=s(fh);kle=n(yye,"STRONG",{});var Mit=s(kle);Pdo=r(Mit,"fsmt"),Mit.forEach(t),Bdo=r(yye," \u2014 "),UB=n(yye,"A",{href:!0});var Eit=s(UB);Ndo=r(Eit,"FSMTTokenizer"),Eit.forEach(t),Ido=r(yye," (FairSeq Machine-Translation model)"),yye.forEach(t),qdo=i(S),as=n(S,"LI",{});var Ok=s(as);Sle=n(Ok,"STRONG",{});var Cit=s(Sle);jdo=r(Cit,"funnel"),Cit.forEach(t),Ddo=r(Ok," \u2014 "),JB=n(Ok,"A",{href:!0});var wit=s(JB);Gdo=r(wit,"FunnelTokenizer"),wit.forEach(t),Odo=r(Ok," or "),YB=n(Ok,"A",{href:!0});var Ait=s(YB);Vdo=r(Ait,"FunnelTokenizerFast"),Ait.forEach(t),Xdo=r(Ok," (Funnel Transformer model)"),Ok.forEach(t),zdo=i(S),ns=n(S,"LI",{});var Vk=s(ns);Rle=n(Vk,"STRONG",{});var Lit=s(Rle);Qdo=r(Lit,"gpt2"),Lit.forEach(t),Wdo=r(Vk," \u2014 "),KB=n(Vk,"A",{href:!0});var yit=s(KB);Hdo=r(yit,"GPT2Tokenizer"),yit.forEach(t),Udo=r(Vk," or "),ZB=n(Vk,"A",{href:!0});var xit=s(ZB);Jdo=r(xit,"GPT2TokenizerFast"),xit.forEach(t),Ydo=r(Vk," (OpenAI GPT-2 model)"),Vk.forEach(t),Kdo=i(S),ss=n(S,"LI",{});var Xk=s(ss);Ple=n(Xk,"STRONG",{});var $it=s(Ple);Zdo=r($it,"gpt_neo"),$it.forEach(t),eco=r(Xk," \u2014 "),eN=n(Xk,"A",{href:!0});var kit=s(eN);oco=r(kit,"GPT2Tokenizer"),kit.forEach(t),rco=r(Xk," or "),oN=n(Xk,"A",{href:!0});var Sit=s(oN);tco=r(Sit,"GPT2TokenizerFast"),Sit.forEach(t),aco=r(Xk," (GPT Neo model)"),Xk.forEach(t),nco=i(S),mh=n(S,"LI",{});var xye=s(mh);Ble=n(xye,"STRONG",{});var Rit=s(Ble);sco=r(Rit,"gpt_neox"),Rit.forEach(t),lco=r(xye," \u2014 "),rN=n(xye,"A",{href:!0});var Pit=s(rN);ico=r(Pit,"GPTNeoXTokenizerFast"),Pit.forEach(t),dco=r(xye," (GPT NeoX model)"),xye.forEach(t),cco=i(S),ls=n(S,"LI",{});var zk=s(ls);Nle=n(zk,"STRONG",{});var Bit=s(Nle);fco=r(Bit,"gptj"),Bit.forEach(t),mco=r(zk," \u2014 "),tN=n(zk,"A",{href:!0});var Nit=s(tN);gco=r(Nit,"GPT2Tokenizer"),Nit.forEach(t),hco=r(zk," or "),aN=n(zk,"A",{href:!0});var Iit=s(aN);pco=r(Iit,"GPT2TokenizerFast"),Iit.forEach(t),_co=r(zk," (GPT-J model)"),zk.forEach(t),uco=i(S),is=n(S,"LI",{});var Qk=s(is);Ile=n(Qk,"STRONG",{});var qit=s(Ile);bco=r(qit,"groupvit"),qit.forEach(t),vco=r(Qk," \u2014 "),nN=n(Qk,"A",{href:!0});var jit=s(nN);Fco=r(jit,"CLIPTokenizer"),jit.forEach(t),Tco=r(Qk," or "),sN=n(Qk,"A",{href:!0});var Dit=s(sN);Mco=r(Dit,"CLIPTokenizerFast"),Dit.forEach(t),Eco=r(Qk," (GroupViT model)"),Qk.forEach(t),Cco=i(S),ds=n(S,"LI",{});var Wk=s(ds);qle=n(Wk,"STRONG",{});var Git=s(qle);wco=r(Git,"herbert"),Git.forEach(t),Aco=r(Wk," \u2014 "),lN=n(Wk,"A",{href:!0});var Oit=s(lN);Lco=r(Oit,"HerbertTokenizer"),Oit.forEach(t),yco=r(Wk," or "),iN=n(Wk,"A",{href:!0});var Vit=s(iN);xco=r(Vit,"HerbertTokenizerFast"),Vit.forEach(t),$co=r(Wk," (HerBERT model)"),Wk.forEach(t),kco=i(S),gh=n(S,"LI",{});var $ye=s(gh);jle=n($ye,"STRONG",{});var Xit=s(jle);Sco=r(Xit,"hubert"),Xit.forEach(t),Rco=r($ye," \u2014 "),dN=n($ye,"A",{href:!0});var zit=s(dN);Pco=r(zit,"Wav2Vec2CTCTokenizer"),zit.forEach(t),Bco=r($ye," (Hubert model)"),$ye.forEach(t),Nco=i(S),cs=n(S,"LI",{});var Hk=s(cs);Dle=n(Hk,"STRONG",{});var Qit=s(Dle);Ico=r(Qit,"ibert"),Qit.forEach(t),qco=r(Hk," \u2014 "),cN=n(Hk,"A",{href:!0});var Wit=s(cN);jco=r(Wit,"RobertaTokenizer"),Wit.forEach(t),Dco=r(Hk," or "),fN=n(Hk,"A",{href:!0});var Hit=s(fN);Gco=r(Hit,"RobertaTokenizerFast"),Hit.forEach(t),Oco=r(Hk," (I-BERT model)"),Hk.forEach(t),Vco=i(S),fs=n(S,"LI",{});var Uk=s(fs);Gle=n(Uk,"STRONG",{});var Uit=s(Gle);Xco=r(Uit,"layoutlm"),Uit.forEach(t),zco=r(Uk," \u2014 "),mN=n(Uk,"A",{href:!0});var Jit=s(mN);Qco=r(Jit,"LayoutLMTokenizer"),Jit.forEach(t),Wco=r(Uk," or "),gN=n(Uk,"A",{href:!0});var Yit=s(gN);Hco=r(Yit,"LayoutLMTokenizerFast"),Yit.forEach(t),Uco=r(Uk," (LayoutLM model)"),Uk.forEach(t),Jco=i(S),ms=n(S,"LI",{});var Jk=s(ms);Ole=n(Jk,"STRONG",{});var Kit=s(Ole);Yco=r(Kit,"layoutlmv2"),Kit.forEach(t),Kco=r(Jk," \u2014 "),hN=n(Jk,"A",{href:!0});var Zit=s(hN);Zco=r(Zit,"LayoutLMv2Tokenizer"),Zit.forEach(t),efo=r(Jk," or "),pN=n(Jk,"A",{href:!0});var edt=s(pN);ofo=r(edt,"LayoutLMv2TokenizerFast"),edt.forEach(t),rfo=r(Jk," (LayoutLMv2 model)"),Jk.forEach(t),tfo=i(S),gs=n(S,"LI",{});var Yk=s(gs);Vle=n(Yk,"STRONG",{});var odt=s(Vle);afo=r(odt,"layoutlmv3"),odt.forEach(t),nfo=r(Yk," \u2014 "),_N=n(Yk,"A",{href:!0});var rdt=s(_N);sfo=r(rdt,"LayoutLMv3Tokenizer"),rdt.forEach(t),lfo=r(Yk," or "),uN=n(Yk,"A",{href:!0});var tdt=s(uN);ifo=r(tdt,"LayoutLMv3TokenizerFast"),tdt.forEach(t),dfo=r(Yk," (LayoutLMv3 model)"),Yk.forEach(t),cfo=i(S),hs=n(S,"LI",{});var Kk=s(hs);Xle=n(Kk,"STRONG",{});var adt=s(Xle);ffo=r(adt,"layoutxlm"),adt.forEach(t),mfo=r(Kk," \u2014 "),bN=n(Kk,"A",{href:!0});var ndt=s(bN);gfo=r(ndt,"LayoutXLMTokenizer"),ndt.forEach(t),hfo=r(Kk," or "),vN=n(Kk,"A",{href:!0});var sdt=s(vN);pfo=r(sdt,"LayoutXLMTokenizerFast"),sdt.forEach(t),_fo=r(Kk," (LayoutXLM model)"),Kk.forEach(t),ufo=i(S),ps=n(S,"LI",{});var Zk=s(ps);zle=n(Zk,"STRONG",{});var ldt=s(zle);bfo=r(ldt,"led"),ldt.forEach(t),vfo=r(Zk," \u2014 "),FN=n(Zk,"A",{href:!0});var idt=s(FN);Ffo=r(idt,"LEDTokenizer"),idt.forEach(t),Tfo=r(Zk," or "),TN=n(Zk,"A",{href:!0});var ddt=s(TN);Mfo=r(ddt,"LEDTokenizerFast"),ddt.forEach(t),Efo=r(Zk," (LED model)"),Zk.forEach(t),Cfo=i(S),_s=n(S,"LI",{});var eS=s(_s);Qle=n(eS,"STRONG",{});var cdt=s(Qle);wfo=r(cdt,"longformer"),cdt.forEach(t),Afo=r(eS," \u2014 "),MN=n(eS,"A",{href:!0});var fdt=s(MN);Lfo=r(fdt,"LongformerTokenizer"),fdt.forEach(t),yfo=r(eS," or "),EN=n(eS,"A",{href:!0});var mdt=s(EN);xfo=r(mdt,"LongformerTokenizerFast"),mdt.forEach(t),$fo=r(eS," (Longformer model)"),eS.forEach(t),kfo=i(S),us=n(S,"LI",{});var oS=s(us);Wle=n(oS,"STRONG",{});var gdt=s(Wle);Sfo=r(gdt,"longt5"),gdt.forEach(t),Rfo=r(oS," \u2014 "),CN=n(oS,"A",{href:!0});var hdt=s(CN);Pfo=r(hdt,"T5Tokenizer"),hdt.forEach(t),Bfo=r(oS," or "),wN=n(oS,"A",{href:!0});var pdt=s(wN);Nfo=r(pdt,"T5TokenizerFast"),pdt.forEach(t),Ifo=r(oS," (LongT5 model)"),oS.forEach(t),qfo=i(S),hh=n(S,"LI",{});var kye=s(hh);Hle=n(kye,"STRONG",{});var _dt=s(Hle);jfo=r(_dt,"luke"),_dt.forEach(t),Dfo=r(kye," \u2014 "),AN=n(kye,"A",{href:!0});var udt=s(AN);Gfo=r(udt,"LukeTokenizer"),udt.forEach(t),Ofo=r(kye," (LUKE model)"),kye.forEach(t),Vfo=i(S),bs=n(S,"LI",{});var rS=s(bs);Ule=n(rS,"STRONG",{});var bdt=s(Ule);Xfo=r(bdt,"lxmert"),bdt.forEach(t),zfo=r(rS," \u2014 "),LN=n(rS,"A",{href:!0});var vdt=s(LN);Qfo=r(vdt,"LxmertTokenizer"),vdt.forEach(t),Wfo=r(rS," or "),yN=n(rS,"A",{href:!0});var Fdt=s(yN);Hfo=r(Fdt,"LxmertTokenizerFast"),Fdt.forEach(t),Ufo=r(rS," (LXMERT model)"),rS.forEach(t),Jfo=i(S),ph=n(S,"LI",{});var Sye=s(ph);Jle=n(Sye,"STRONG",{});var Tdt=s(Jle);Yfo=r(Tdt,"m2m_100"),Tdt.forEach(t),Kfo=r(Sye," \u2014 "),xN=n(Sye,"A",{href:!0});var Mdt=s(xN);Zfo=r(Mdt,"M2M100Tokenizer"),Mdt.forEach(t),emo=r(Sye," (M2M100 model)"),Sye.forEach(t),omo=i(S),_h=n(S,"LI",{});var Rye=s(_h);Yle=n(Rye,"STRONG",{});var Edt=s(Yle);rmo=r(Edt,"marian"),Edt.forEach(t),tmo=r(Rye," \u2014 "),$N=n(Rye,"A",{href:!0});var Cdt=s($N);amo=r(Cdt,"MarianTokenizer"),Cdt.forEach(t),nmo=r(Rye," (Marian model)"),Rye.forEach(t),smo=i(S),vs=n(S,"LI",{});var tS=s(vs);Kle=n(tS,"STRONG",{});var wdt=s(Kle);lmo=r(wdt,"mbart"),wdt.forEach(t),imo=r(tS," \u2014 "),kN=n(tS,"A",{href:!0});var Adt=s(kN);dmo=r(Adt,"MBartTokenizer"),Adt.forEach(t),cmo=r(tS," or "),SN=n(tS,"A",{href:!0});var Ldt=s(SN);fmo=r(Ldt,"MBartTokenizerFast"),Ldt.forEach(t),mmo=r(tS," (mBART model)"),tS.forEach(t),gmo=i(S),Fs=n(S,"LI",{});var aS=s(Fs);Zle=n(aS,"STRONG",{});var ydt=s(Zle);hmo=r(ydt,"mbart50"),ydt.forEach(t),pmo=r(aS," \u2014 "),RN=n(aS,"A",{href:!0});var xdt=s(RN);_mo=r(xdt,"MBart50Tokenizer"),xdt.forEach(t),umo=r(aS," or "),PN=n(aS,"A",{href:!0});var $dt=s(PN);bmo=r($dt,"MBart50TokenizerFast"),$dt.forEach(t),vmo=r(aS," (mBART-50 model)"),aS.forEach(t),Fmo=i(S),Ts=n(S,"LI",{});var nS=s(Ts);eie=n(nS,"STRONG",{});var kdt=s(eie);Tmo=r(kdt,"megatron-bert"),kdt.forEach(t),Mmo=r(nS," \u2014 "),BN=n(nS,"A",{href:!0});var Sdt=s(BN);Emo=r(Sdt,"BertTokenizer"),Sdt.forEach(t),Cmo=r(nS," or "),NN=n(nS,"A",{href:!0});var Rdt=s(NN);wmo=r(Rdt,"BertTokenizerFast"),Rdt.forEach(t),Amo=r(nS," (Megatron-BERT model)"),nS.forEach(t),Lmo=i(S),uh=n(S,"LI",{});var Pye=s(uh);oie=n(Pye,"STRONG",{});var Pdt=s(oie);ymo=r(Pdt,"mluke"),Pdt.forEach(t),xmo=r(Pye," \u2014 "),IN=n(Pye,"A",{href:!0});var Bdt=s(IN);$mo=r(Bdt,"MLukeTokenizer"),Bdt.forEach(t),kmo=r(Pye," (mLUKE model)"),Pye.forEach(t),Smo=i(S),Ms=n(S,"LI",{});var sS=s(Ms);rie=n(sS,"STRONG",{});var Ndt=s(rie);Rmo=r(Ndt,"mobilebert"),Ndt.forEach(t),Pmo=r(sS," \u2014 "),qN=n(sS,"A",{href:!0});var Idt=s(qN);Bmo=r(Idt,"MobileBertTokenizer"),Idt.forEach(t),Nmo=r(sS," or "),jN=n(sS,"A",{href:!0});var qdt=s(jN);Imo=r(qdt,"MobileBertTokenizerFast"),qdt.forEach(t),qmo=r(sS," (MobileBERT model)"),sS.forEach(t),jmo=i(S),Es=n(S,"LI",{});var lS=s(Es);tie=n(lS,"STRONG",{});var jdt=s(tie);Dmo=r(jdt,"mpnet"),jdt.forEach(t),Gmo=r(lS," \u2014 "),DN=n(lS,"A",{href:!0});var Ddt=s(DN);Omo=r(Ddt,"MPNetTokenizer"),Ddt.forEach(t),Vmo=r(lS," or "),GN=n(lS,"A",{href:!0});var Gdt=s(GN);Xmo=r(Gdt,"MPNetTokenizerFast"),Gdt.forEach(t),zmo=r(lS," (MPNet model)"),lS.forEach(t),Qmo=i(S),Cs=n(S,"LI",{});var iS=s(Cs);aie=n(iS,"STRONG",{});var Odt=s(aie);Wmo=r(Odt,"mt5"),Odt.forEach(t),Hmo=r(iS," \u2014 "),ON=n(iS,"A",{href:!0});var Vdt=s(ON);Umo=r(Vdt,"MT5Tokenizer"),Vdt.forEach(t),Jmo=r(iS," or "),VN=n(iS,"A",{href:!0});var Xdt=s(VN);Ymo=r(Xdt,"MT5TokenizerFast"),Xdt.forEach(t),Kmo=r(iS," (MT5 model)"),iS.forEach(t),Zmo=i(S),ws=n(S,"LI",{});var dS=s(ws);nie=n(dS,"STRONG",{});var zdt=s(nie);ego=r(zdt,"mvp"),zdt.forEach(t),ogo=r(dS," \u2014 "),XN=n(dS,"A",{href:!0});var Qdt=s(XN);rgo=r(Qdt,"MvpTokenizer"),Qdt.forEach(t),tgo=r(dS," or "),zN=n(dS,"A",{href:!0});var Wdt=s(zN);ago=r(Wdt,"MvpTokenizerFast"),Wdt.forEach(t),ngo=r(dS," (MVP model)"),dS.forEach(t),sgo=i(S),As=n(S,"LI",{});var cS=s(As);sie=n(cS,"STRONG",{});var Hdt=s(sie);lgo=r(Hdt,"nezha"),Hdt.forEach(t),igo=r(cS," \u2014 "),QN=n(cS,"A",{href:!0});var Udt=s(QN);dgo=r(Udt,"BertTokenizer"),Udt.forEach(t),cgo=r(cS," or "),WN=n(cS,"A",{href:!0});var Jdt=s(WN);fgo=r(Jdt,"BertTokenizerFast"),Jdt.forEach(t),mgo=r(cS," (Nezha model)"),cS.forEach(t),ggo=i(S),Ls=n(S,"LI",{});var fS=s(Ls);lie=n(fS,"STRONG",{});var Ydt=s(lie);hgo=r(Ydt,"nllb"),Ydt.forEach(t),pgo=r(fS," \u2014 "),HN=n(fS,"A",{href:!0});var Kdt=s(HN);_go=r(Kdt,"NllbTokenizer"),Kdt.forEach(t),ugo=r(fS," or "),UN=n(fS,"A",{href:!0});var Zdt=s(UN);bgo=r(Zdt,"NllbTokenizerFast"),Zdt.forEach(t),vgo=r(fS," (NLLB model)"),fS.forEach(t),Fgo=i(S),ys=n(S,"LI",{});var mS=s(ys);iie=n(mS,"STRONG",{});var ect=s(iie);Tgo=r(ect,"nystromformer"),ect.forEach(t),Mgo=r(mS," \u2014 "),JN=n(mS,"A",{href:!0});var oct=s(JN);Ego=r(oct,"AlbertTokenizer"),oct.forEach(t),Cgo=r(mS," or "),YN=n(mS,"A",{href:!0});var rct=s(YN);wgo=r(rct,"AlbertTokenizerFast"),rct.forEach(t),Ago=r(mS," (Nystr\xF6mformer model)"),mS.forEach(t),Lgo=i(S),xs=n(S,"LI",{});var gS=s(xs);die=n(gS,"STRONG",{});var tct=s(die);ygo=r(tct,"openai-gpt"),tct.forEach(t),xgo=r(gS," \u2014 "),KN=n(gS,"A",{href:!0});var act=s(KN);$go=r(act,"OpenAIGPTTokenizer"),act.forEach(t),kgo=r(gS," or "),ZN=n(gS,"A",{href:!0});var nct=s(ZN);Sgo=r(nct,"OpenAIGPTTokenizerFast"),nct.forEach(t),Rgo=r(gS," (OpenAI GPT model)"),gS.forEach(t),Pgo=i(S),bh=n(S,"LI",{});var Bye=s(bh);cie=n(Bye,"STRONG",{});var sct=s(cie);Bgo=r(sct,"opt"),sct.forEach(t),Ngo=r(Bye," \u2014 "),eI=n(Bye,"A",{href:!0});var lct=s(eI);Igo=r(lct,"GPT2Tokenizer"),lct.forEach(t),qgo=r(Bye," (OPT model)"),Bye.forEach(t),jgo=i(S),$s=n(S,"LI",{});var hS=s($s);fie=n(hS,"STRONG",{});var ict=s(fie);Dgo=r(ict,"pegasus"),ict.forEach(t),Ggo=r(hS," \u2014 "),oI=n(hS,"A",{href:!0});var dct=s(oI);Ogo=r(dct,"PegasusTokenizer"),dct.forEach(t),Vgo=r(hS," or "),rI=n(hS,"A",{href:!0});var cct=s(rI);Xgo=r(cct,"PegasusTokenizerFast"),cct.forEach(t),zgo=r(hS," (Pegasus model)"),hS.forEach(t),Qgo=i(S),vh=n(S,"LI",{});var Nye=s(vh);mie=n(Nye,"STRONG",{});var fct=s(mie);Wgo=r(fct,"perceiver"),fct.forEach(t),Hgo=r(Nye," \u2014 "),tI=n(Nye,"A",{href:!0});var mct=s(tI);Ugo=r(mct,"PerceiverTokenizer"),mct.forEach(t),Jgo=r(Nye," (Perceiver model)"),Nye.forEach(t),Ygo=i(S),Fh=n(S,"LI",{});var Iye=s(Fh);gie=n(Iye,"STRONG",{});var gct=s(gie);Kgo=r(gct,"phobert"),gct.forEach(t),Zgo=r(Iye," \u2014 "),aI=n(Iye,"A",{href:!0});var hct=s(aI);eho=r(hct,"PhobertTokenizer"),hct.forEach(t),oho=r(Iye," (PhoBERT model)"),Iye.forEach(t),rho=i(S),Th=n(S,"LI",{});var qye=s(Th);hie=n(qye,"STRONG",{});var pct=s(hie);tho=r(pct,"plbart"),pct.forEach(t),aho=r(qye," \u2014 "),nI=n(qye,"A",{href:!0});var _ct=s(nI);nho=r(_ct,"PLBartTokenizer"),_ct.forEach(t),sho=r(qye," (PLBart model)"),qye.forEach(t),lho=i(S),Mh=n(S,"LI",{});var jye=s(Mh);pie=n(jye,"STRONG",{});var uct=s(pie);iho=r(uct,"prophetnet"),uct.forEach(t),dho=r(jye," \u2014 "),sI=n(jye,"A",{href:!0});var bct=s(sI);cho=r(bct,"ProphetNetTokenizer"),bct.forEach(t),fho=r(jye," (ProphetNet model)"),jye.forEach(t),mho=i(S),ks=n(S,"LI",{});var pS=s(ks);_ie=n(pS,"STRONG",{});var vct=s(_ie);gho=r(vct,"qdqbert"),vct.forEach(t),hho=r(pS," \u2014 "),lI=n(pS,"A",{href:!0});var Fct=s(lI);pho=r(Fct,"BertTokenizer"),Fct.forEach(t),_ho=r(pS," or "),iI=n(pS,"A",{href:!0});var Tct=s(iI);uho=r(Tct,"BertTokenizerFast"),Tct.forEach(t),bho=r(pS," (QDQBert model)"),pS.forEach(t),vho=i(S),Eh=n(S,"LI",{});var Dye=s(Eh);uie=n(Dye,"STRONG",{});var Mct=s(uie);Fho=r(Mct,"rag"),Mct.forEach(t),Tho=r(Dye," \u2014 "),dI=n(Dye,"A",{href:!0});var Ect=s(dI);Mho=r(Ect,"RagTokenizer"),Ect.forEach(t),Eho=r(Dye," (RAG model)"),Dye.forEach(t),Cho=i(S),Ss=n(S,"LI",{});var _S=s(Ss);bie=n(_S,"STRONG",{});var Cct=s(bie);who=r(Cct,"realm"),Cct.forEach(t),Aho=r(_S," \u2014 "),cI=n(_S,"A",{href:!0});var wct=s(cI);Lho=r(wct,"RealmTokenizer"),wct.forEach(t),yho=r(_S," or "),fI=n(_S,"A",{href:!0});var Act=s(fI);xho=r(Act,"RealmTokenizerFast"),Act.forEach(t),$ho=r(_S," (REALM model)"),_S.forEach(t),kho=i(S),Rs=n(S,"LI",{});var uS=s(Rs);vie=n(uS,"STRONG",{});var Lct=s(vie);Sho=r(Lct,"reformer"),Lct.forEach(t),Rho=r(uS," \u2014 "),mI=n(uS,"A",{href:!0});var yct=s(mI);Pho=r(yct,"ReformerTokenizer"),yct.forEach(t),Bho=r(uS," or "),gI=n(uS,"A",{href:!0});var xct=s(gI);Nho=r(xct,"ReformerTokenizerFast"),xct.forEach(t),Iho=r(uS," (Reformer model)"),uS.forEach(t),qho=i(S),Ps=n(S,"LI",{});var bS=s(Ps);Fie=n(bS,"STRONG",{});var $ct=s(Fie);jho=r($ct,"rembert"),$ct.forEach(t),Dho=r(bS," \u2014 "),hI=n(bS,"A",{href:!0});var kct=s(hI);Gho=r(kct,"RemBertTokenizer"),kct.forEach(t),Oho=r(bS," or "),pI=n(bS,"A",{href:!0});var Sct=s(pI);Vho=r(Sct,"RemBertTokenizerFast"),Sct.forEach(t),Xho=r(bS," (RemBERT model)"),bS.forEach(t),zho=i(S),Bs=n(S,"LI",{});var vS=s(Bs);Tie=n(vS,"STRONG",{});var Rct=s(Tie);Qho=r(Rct,"retribert"),Rct.forEach(t),Who=r(vS," \u2014 "),_I=n(vS,"A",{href:!0});var Pct=s(_I);Hho=r(Pct,"RetriBertTokenizer"),Pct.forEach(t),Uho=r(vS," or "),uI=n(vS,"A",{href:!0});var Bct=s(uI);Jho=r(Bct,"RetriBertTokenizerFast"),Bct.forEach(t),Yho=r(vS," (RetriBERT model)"),vS.forEach(t),Kho=i(S),Ns=n(S,"LI",{});var FS=s(Ns);Mie=n(FS,"STRONG",{});var Nct=s(Mie);Zho=r(Nct,"roberta"),Nct.forEach(t),epo=r(FS," \u2014 "),bI=n(FS,"A",{href:!0});var Ict=s(bI);opo=r(Ict,"RobertaTokenizer"),Ict.forEach(t),rpo=r(FS," or "),vI=n(FS,"A",{href:!0});var qct=s(vI);tpo=r(qct,"RobertaTokenizerFast"),qct.forEach(t),apo=r(FS," (RoBERTa model)"),FS.forEach(t),npo=i(S),Is=n(S,"LI",{});var TS=s(Is);Eie=n(TS,"STRONG",{});var jct=s(Eie);spo=r(jct,"roformer"),jct.forEach(t),lpo=r(TS," \u2014 "),FI=n(TS,"A",{href:!0});var Dct=s(FI);ipo=r(Dct,"RoFormerTokenizer"),Dct.forEach(t),dpo=r(TS," or "),TI=n(TS,"A",{href:!0});var Gct=s(TI);cpo=r(Gct,"RoFormerTokenizerFast"),Gct.forEach(t),fpo=r(TS," (RoFormer model)"),TS.forEach(t),mpo=i(S),Ch=n(S,"LI",{});var Gye=s(Ch);Cie=n(Gye,"STRONG",{});var Oct=s(Cie);gpo=r(Oct,"speech_to_text"),Oct.forEach(t),hpo=r(Gye," \u2014 "),MI=n(Gye,"A",{href:!0});var Vct=s(MI);ppo=r(Vct,"Speech2TextTokenizer"),Vct.forEach(t),_po=r(Gye," (Speech2Text model)"),Gye.forEach(t),upo=i(S),wh=n(S,"LI",{});var Oye=s(wh);wie=n(Oye,"STRONG",{});var Xct=s(wie);bpo=r(Xct,"speech_to_text_2"),Xct.forEach(t),vpo=r(Oye," \u2014 "),EI=n(Oye,"A",{href:!0});var zct=s(EI);Fpo=r(zct,"Speech2Text2Tokenizer"),zct.forEach(t),Tpo=r(Oye," (Speech2Text2 model)"),Oye.forEach(t),Mpo=i(S),qs=n(S,"LI",{});var MS=s(qs);Aie=n(MS,"STRONG",{});var Qct=s(Aie);Epo=r(Qct,"splinter"),Qct.forEach(t),Cpo=r(MS," \u2014 "),CI=n(MS,"A",{href:!0});var Wct=s(CI);wpo=r(Wct,"SplinterTokenizer"),Wct.forEach(t),Apo=r(MS," or "),wI=n(MS,"A",{href:!0});var Hct=s(wI);Lpo=r(Hct,"SplinterTokenizerFast"),Hct.forEach(t),ypo=r(MS," (Splinter model)"),MS.forEach(t),xpo=i(S),js=n(S,"LI",{});var ES=s(js);Lie=n(ES,"STRONG",{});var Uct=s(Lie);$po=r(Uct,"squeezebert"),Uct.forEach(t),kpo=r(ES," \u2014 "),AI=n(ES,"A",{href:!0});var Jct=s(AI);Spo=r(Jct,"SqueezeBertTokenizer"),Jct.forEach(t),Rpo=r(ES," or "),LI=n(ES,"A",{href:!0});var Yct=s(LI);Ppo=r(Yct,"SqueezeBertTokenizerFast"),Yct.forEach(t),Bpo=r(ES," (SqueezeBERT model)"),ES.forEach(t),Npo=i(S),Ds=n(S,"LI",{});var CS=s(Ds);yie=n(CS,"STRONG",{});var Kct=s(yie);Ipo=r(Kct,"t5"),Kct.forEach(t),qpo=r(CS," \u2014 "),yI=n(CS,"A",{href:!0});var Zct=s(yI);jpo=r(Zct,"T5Tokenizer"),Zct.forEach(t),Dpo=r(CS," or "),xI=n(CS,"A",{href:!0});var eft=s(xI);Gpo=r(eft,"T5TokenizerFast"),eft.forEach(t),Opo=r(CS," (T5 model)"),CS.forEach(t),Vpo=i(S),Ah=n(S,"LI",{});var Vye=s(Ah);xie=n(Vye,"STRONG",{});var oft=s(xie);Xpo=r(oft,"tapas"),oft.forEach(t),zpo=r(Vye," \u2014 "),$I=n(Vye,"A",{href:!0});var rft=s($I);Qpo=r(rft,"TapasTokenizer"),rft.forEach(t),Wpo=r(Vye," (TAPAS model)"),Vye.forEach(t),Hpo=i(S),Lh=n(S,"LI",{});var Xye=s(Lh);$ie=n(Xye,"STRONG",{});var tft=s($ie);Upo=r(tft,"tapex"),tft.forEach(t),Jpo=r(Xye," \u2014 "),kI=n(Xye,"A",{href:!0});var aft=s(kI);Ypo=r(aft,"TapexTokenizer"),aft.forEach(t),Kpo=r(Xye," (TAPEX model)"),Xye.forEach(t),Zpo=i(S),yh=n(S,"LI",{});var zye=s(yh);kie=n(zye,"STRONG",{});var nft=s(kie);e_o=r(nft,"transfo-xl"),nft.forEach(t),o_o=r(zye," \u2014 "),SI=n(zye,"A",{href:!0});var sft=s(SI);r_o=r(sft,"TransfoXLTokenizer"),sft.forEach(t),t_o=r(zye," (Transformer-XL model)"),zye.forEach(t),a_o=i(S),Gs=n(S,"LI",{});var wS=s(Gs);Sie=n(wS,"STRONG",{});var lft=s(Sie);n_o=r(lft,"vilt"),lft.forEach(t),s_o=r(wS," \u2014 "),RI=n(wS,"A",{href:!0});var ift=s(RI);l_o=r(ift,"BertTokenizer"),ift.forEach(t),i_o=r(wS," or "),PI=n(wS,"A",{href:!0});var dft=s(PI);d_o=r(dft,"BertTokenizerFast"),dft.forEach(t),c_o=r(wS," (ViLT model)"),wS.forEach(t),f_o=i(S),Os=n(S,"LI",{});var AS=s(Os);Rie=n(AS,"STRONG",{});var cft=s(Rie);m_o=r(cft,"visual_bert"),cft.forEach(t),g_o=r(AS," \u2014 "),BI=n(AS,"A",{href:!0});var fft=s(BI);h_o=r(fft,"BertTokenizer"),fft.forEach(t),p_o=r(AS," or "),NI=n(AS,"A",{href:!0});var mft=s(NI);__o=r(mft,"BertTokenizerFast"),mft.forEach(t),u_o=r(AS," (VisualBERT model)"),AS.forEach(t),b_o=i(S),xh=n(S,"LI",{});var Qye=s(xh);Pie=n(Qye,"STRONG",{});var gft=s(Pie);v_o=r(gft,"wav2vec2"),gft.forEach(t),F_o=r(Qye," \u2014 "),II=n(Qye,"A",{href:!0});var hft=s(II);T_o=r(hft,"Wav2Vec2CTCTokenizer"),hft.forEach(t),M_o=r(Qye," (Wav2Vec2 model)"),Qye.forEach(t),E_o=i(S),$h=n(S,"LI",{});var Wye=s($h);Bie=n(Wye,"STRONG",{});var pft=s(Bie);C_o=r(pft,"wav2vec2-conformer"),pft.forEach(t),w_o=r(Wye," \u2014 "),qI=n(Wye,"A",{href:!0});var _ft=s(qI);A_o=r(_ft,"Wav2Vec2CTCTokenizer"),_ft.forEach(t),L_o=r(Wye," (Wav2Vec2-Conformer model)"),Wye.forEach(t),y_o=i(S),kh=n(S,"LI",{});var Hye=s(kh);Nie=n(Hye,"STRONG",{});var uft=s(Nie);x_o=r(uft,"wav2vec2_phoneme"),uft.forEach(t),$_o=r(Hye," \u2014 "),jI=n(Hye,"A",{href:!0});var bft=s(jI);k_o=r(bft,"Wav2Vec2PhonemeCTCTokenizer"),bft.forEach(t),S_o=r(Hye," (Wav2Vec2Phoneme model)"),Hye.forEach(t),R_o=i(S),Vs=n(S,"LI",{});var LS=s(Vs);Iie=n(LS,"STRONG",{});var vft=s(Iie);P_o=r(vft,"xglm"),vft.forEach(t),B_o=r(LS," \u2014 "),DI=n(LS,"A",{href:!0});var Fft=s(DI);N_o=r(Fft,"XGLMTokenizer"),Fft.forEach(t),I_o=r(LS," or "),GI=n(LS,"A",{href:!0});var Tft=s(GI);q_o=r(Tft,"XGLMTokenizerFast"),Tft.forEach(t),j_o=r(LS," (XGLM model)"),LS.forEach(t),D_o=i(S),Sh=n(S,"LI",{});var Uye=s(Sh);qie=n(Uye,"STRONG",{});var Mft=s(qie);G_o=r(Mft,"xlm"),Mft.forEach(t),O_o=r(Uye," \u2014 "),OI=n(Uye,"A",{href:!0});var Eft=s(OI);V_o=r(Eft,"XLMTokenizer"),Eft.forEach(t),X_o=r(Uye," (XLM model)"),Uye.forEach(t),z_o=i(S),Rh=n(S,"LI",{});var Jye=s(Rh);jie=n(Jye,"STRONG",{});var Cft=s(jie);Q_o=r(Cft,"xlm-prophetnet"),Cft.forEach(t),W_o=r(Jye," \u2014 "),VI=n(Jye,"A",{href:!0});var wft=s(VI);H_o=r(wft,"XLMProphetNetTokenizer"),wft.forEach(t),U_o=r(Jye," (XLM-ProphetNet model)"),Jye.forEach(t),J_o=i(S),Xs=n(S,"LI",{});var yS=s(Xs);Die=n(yS,"STRONG",{});var Aft=s(Die);Y_o=r(Aft,"xlm-roberta"),Aft.forEach(t),K_o=r(yS," \u2014 "),XI=n(yS,"A",{href:!0});var Lft=s(XI);Z_o=r(Lft,"XLMRobertaTokenizer"),Lft.forEach(t),euo=r(yS," or "),zI=n(yS,"A",{href:!0});var yft=s(zI);ouo=r(yft,"XLMRobertaTokenizerFast"),yft.forEach(t),ruo=r(yS," (XLM-RoBERTa model)"),yS.forEach(t),tuo=i(S),zs=n(S,"LI",{});var xS=s(zs);Gie=n(xS,"STRONG",{});var xft=s(Gie);auo=r(xft,"xlm-roberta-xl"),xft.forEach(t),nuo=r(xS," \u2014 "),QI=n(xS,"A",{href:!0});var $ft=s(QI);suo=r($ft,"RobertaTokenizer"),$ft.forEach(t),luo=r(xS," or "),WI=n(xS,"A",{href:!0});var kft=s(WI);iuo=r(kft,"RobertaTokenizerFast"),kft.forEach(t),duo=r(xS," (XLM-RoBERTa-XL model)"),xS.forEach(t),cuo=i(S),Qs=n(S,"LI",{});var $S=s(Qs);Oie=n($S,"STRONG",{});var Sft=s(Oie);fuo=r(Sft,"xlnet"),Sft.forEach(t),muo=r($S," \u2014 "),HI=n($S,"A",{href:!0});var Rft=s(HI);guo=r(Rft,"XLNetTokenizer"),Rft.forEach(t),huo=r($S," or "),UI=n($S,"A",{href:!0});var Pft=s(UI);puo=r(Pft,"XLNetTokenizerFast"),Pft.forEach(t),_uo=r($S," (XLNet model)"),$S.forEach(t),uuo=i(S),Ws=n(S,"LI",{});var kS=s(Ws);Vie=n(kS,"STRONG",{});var Bft=s(Vie);buo=r(Bft,"yoso"),Bft.forEach(t),vuo=r(kS," \u2014 "),JI=n(kS,"A",{href:!0});var Nft=s(JI);Fuo=r(Nft,"AlbertTokenizer"),Nft.forEach(t),Tuo=r(kS," or "),YI=n(kS,"A",{href:!0});var Ift=s(YI);Muo=r(Ift,"AlbertTokenizerFast"),Ift.forEach(t),Euo=r(kS," (YOSO model)"),kS.forEach(t),S.forEach(t),Cuo=i(el),T(Ph.$$.fragment,el),el.forEach(t),wuo=i(Zs),Bh=n(Zs,"DIV",{class:!0});var mQe=s(Bh);T(bL.$$.fragment,mQe),Auo=i(mQe),Xie=n(mQe,"P",{});var qft=s(Xie);Luo=r(qft,"Register a new tokenizer in this mapping."),qft.forEach(t),mQe.forEach(t),Zs.forEach(t),fXe=i(f),ji=n(f,"H2",{class:!0});var gQe=s(ji);Nh=n(gQe,"A",{id:!0,class:!0,href:!0});var jft=s(Nh);zie=n(jft,"SPAN",{});var Dft=s(zie);T(vL.$$.fragment,Dft),Dft.forEach(t),jft.forEach(t),yuo=i(gQe),Qie=n(gQe,"SPAN",{});var Gft=s(Qie);xuo=r(Gft,"AutoFeatureExtractor"),Gft.forEach(t),gQe.forEach(t),mXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(FL.$$.fragment,ol),$uo=i(ol),TL=n(ol,"P",{});var hQe=s(TL);kuo=r(hQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KI=n(hQe,"A",{href:!0});var Oft=s(KI);Suo=r(Oft,"AutoFeatureExtractor.from_pretrained()"),Oft.forEach(t),Ruo=r(hQe," class method."),hQe.forEach(t),Puo=i(ol),ML=n(ol,"P",{});var pQe=s(ML);Buo=r(pQe,"This class cannot be instantiated directly using "),Wie=n(pQe,"CODE",{});var Vft=s(Wie);Nuo=r(Vft,"__init__()"),Vft.forEach(t),Iuo=r(pQe," (throws an error)."),pQe.forEach(t),quo=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(EL.$$.fragment,na),juo=i(na),Hie=n(na,"P",{});var Xft=s(Hie);Duo=r(Xft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Xft.forEach(t),Guo=i(na),Ba=n(na,"P",{});var iA=s(Ba);Ouo=r(iA,"The feature extractor class to instantiate is selected based on the "),Uie=n(iA,"CODE",{});var zft=s(Uie);Vuo=r(zft,"model_type"),zft.forEach(t),Xuo=r(iA,` property of the config object
(either passed as an argument or loaded from `),Jie=n(iA,"CODE",{});var Qft=s(Jie);zuo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),Quo=r(iA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Yie=n(iA,"CODE",{});var Wft=s(Yie);Wuo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),Huo=r(iA,":"),iA.forEach(t),Uuo=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var Yye=s(Ih);Kie=n(Yye,"STRONG",{});var Hft=s(Kie);Juo=r(Hft,"beit"),Hft.forEach(t),Yuo=r(Yye," \u2014 "),ZI=n(Yye,"A",{href:!0});var Uft=s(ZI);Kuo=r(Uft,"BeitFeatureExtractor"),Uft.forEach(t),Zuo=r(Yye," (BEiT model)"),Yye.forEach(t),e1o=i(K),qh=n(K,"LI",{});var Kye=s(qh);Zie=n(Kye,"STRONG",{});var Jft=s(Zie);o1o=r(Jft,"clip"),Jft.forEach(t),r1o=r(Kye," \u2014 "),eq=n(Kye,"A",{href:!0});var Yft=s(eq);t1o=r(Yft,"CLIPFeatureExtractor"),Yft.forEach(t),a1o=r(Kye," (CLIP model)"),Kye.forEach(t),n1o=i(K),jh=n(K,"LI",{});var Zye=s(jh);ede=n(Zye,"STRONG",{});var Kft=s(ede);s1o=r(Kft,"convnext"),Kft.forEach(t),l1o=r(Zye," \u2014 "),oq=n(Zye,"A",{href:!0});var Zft=s(oq);i1o=r(Zft,"ConvNextFeatureExtractor"),Zft.forEach(t),d1o=r(Zye," (ConvNeXT model)"),Zye.forEach(t),c1o=i(K),Dh=n(K,"LI",{});var e9e=s(Dh);ode=n(e9e,"STRONG",{});var emt=s(ode);f1o=r(emt,"cvt"),emt.forEach(t),m1o=r(e9e," \u2014 "),rq=n(e9e,"A",{href:!0});var omt=s(rq);g1o=r(omt,"ConvNextFeatureExtractor"),omt.forEach(t),h1o=r(e9e," (CvT model)"),e9e.forEach(t),p1o=i(K),Gh=n(K,"LI",{});var o9e=s(Gh);rde=n(o9e,"STRONG",{});var rmt=s(rde);_1o=r(rmt,"data2vec-audio"),rmt.forEach(t),u1o=r(o9e," \u2014 "),tq=n(o9e,"A",{href:!0});var tmt=s(tq);b1o=r(tmt,"Wav2Vec2FeatureExtractor"),tmt.forEach(t),v1o=r(o9e," (Data2VecAudio model)"),o9e.forEach(t),F1o=i(K),Oh=n(K,"LI",{});var r9e=s(Oh);tde=n(r9e,"STRONG",{});var amt=s(tde);T1o=r(amt,"data2vec-vision"),amt.forEach(t),M1o=r(r9e," \u2014 "),aq=n(r9e,"A",{href:!0});var nmt=s(aq);E1o=r(nmt,"BeitFeatureExtractor"),nmt.forEach(t),C1o=r(r9e," (Data2VecVision model)"),r9e.forEach(t),w1o=i(K),Vh=n(K,"LI",{});var t9e=s(Vh);ade=n(t9e,"STRONG",{});var smt=s(ade);A1o=r(smt,"deit"),smt.forEach(t),L1o=r(t9e," \u2014 "),nq=n(t9e,"A",{href:!0});var lmt=s(nq);y1o=r(lmt,"DeiTFeatureExtractor"),lmt.forEach(t),x1o=r(t9e," (DeiT model)"),t9e.forEach(t),$1o=i(K),Xh=n(K,"LI",{});var a9e=s(Xh);nde=n(a9e,"STRONG",{});var imt=s(nde);k1o=r(imt,"detr"),imt.forEach(t),S1o=r(a9e," \u2014 "),sq=n(a9e,"A",{href:!0});var dmt=s(sq);R1o=r(dmt,"DetrFeatureExtractor"),dmt.forEach(t),P1o=r(a9e," (DETR model)"),a9e.forEach(t),B1o=i(K),zh=n(K,"LI",{});var n9e=s(zh);sde=n(n9e,"STRONG",{});var cmt=s(sde);N1o=r(cmt,"dpt"),cmt.forEach(t),I1o=r(n9e," \u2014 "),lq=n(n9e,"A",{href:!0});var fmt=s(lq);q1o=r(fmt,"DPTFeatureExtractor"),fmt.forEach(t),j1o=r(n9e," (DPT model)"),n9e.forEach(t),D1o=i(K),Qh=n(K,"LI",{});var s9e=s(Qh);lde=n(s9e,"STRONG",{});var mmt=s(lde);G1o=r(mmt,"flava"),mmt.forEach(t),O1o=r(s9e," \u2014 "),iq=n(s9e,"A",{href:!0});var gmt=s(iq);V1o=r(gmt,"FlavaFeatureExtractor"),gmt.forEach(t),X1o=r(s9e," (FLAVA model)"),s9e.forEach(t),z1o=i(K),Wh=n(K,"LI",{});var l9e=s(Wh);ide=n(l9e,"STRONG",{});var hmt=s(ide);Q1o=r(hmt,"glpn"),hmt.forEach(t),W1o=r(l9e," \u2014 "),dq=n(l9e,"A",{href:!0});var pmt=s(dq);H1o=r(pmt,"GLPNFeatureExtractor"),pmt.forEach(t),U1o=r(l9e," (GLPN model)"),l9e.forEach(t),J1o=i(K),Hh=n(K,"LI",{});var i9e=s(Hh);dde=n(i9e,"STRONG",{});var _mt=s(dde);Y1o=r(_mt,"groupvit"),_mt.forEach(t),K1o=r(i9e," \u2014 "),cq=n(i9e,"A",{href:!0});var umt=s(cq);Z1o=r(umt,"CLIPFeatureExtractor"),umt.forEach(t),e2o=r(i9e," (GroupViT model)"),i9e.forEach(t),o2o=i(K),Uh=n(K,"LI",{});var d9e=s(Uh);cde=n(d9e,"STRONG",{});var bmt=s(cde);r2o=r(bmt,"hubert"),bmt.forEach(t),t2o=r(d9e," \u2014 "),fq=n(d9e,"A",{href:!0});var vmt=s(fq);a2o=r(vmt,"Wav2Vec2FeatureExtractor"),vmt.forEach(t),n2o=r(d9e," (Hubert model)"),d9e.forEach(t),s2o=i(K),Jh=n(K,"LI",{});var c9e=s(Jh);fde=n(c9e,"STRONG",{});var Fmt=s(fde);l2o=r(Fmt,"imagegpt"),Fmt.forEach(t),i2o=r(c9e," \u2014 "),mq=n(c9e,"A",{href:!0});var Tmt=s(mq);d2o=r(Tmt,"ImageGPTFeatureExtractor"),Tmt.forEach(t),c2o=r(c9e," (ImageGPT model)"),c9e.forEach(t),f2o=i(K),Yh=n(K,"LI",{});var f9e=s(Yh);mde=n(f9e,"STRONG",{});var Mmt=s(mde);m2o=r(Mmt,"layoutlmv2"),Mmt.forEach(t),g2o=r(f9e," \u2014 "),gq=n(f9e,"A",{href:!0});var Emt=s(gq);h2o=r(Emt,"LayoutLMv2FeatureExtractor"),Emt.forEach(t),p2o=r(f9e," (LayoutLMv2 model)"),f9e.forEach(t),_2o=i(K),Kh=n(K,"LI",{});var m9e=s(Kh);gde=n(m9e,"STRONG",{});var Cmt=s(gde);u2o=r(Cmt,"layoutlmv3"),Cmt.forEach(t),b2o=r(m9e," \u2014 "),hq=n(m9e,"A",{href:!0});var wmt=s(hq);v2o=r(wmt,"LayoutLMv3FeatureExtractor"),wmt.forEach(t),F2o=r(m9e," (LayoutLMv3 model)"),m9e.forEach(t),T2o=i(K),Zh=n(K,"LI",{});var g9e=s(Zh);hde=n(g9e,"STRONG",{});var Amt=s(hde);M2o=r(Amt,"levit"),Amt.forEach(t),E2o=r(g9e," \u2014 "),pq=n(g9e,"A",{href:!0});var Lmt=s(pq);C2o=r(Lmt,"LevitFeatureExtractor"),Lmt.forEach(t),w2o=r(g9e," (LeViT model)"),g9e.forEach(t),A2o=i(K),ep=n(K,"LI",{});var h9e=s(ep);pde=n(h9e,"STRONG",{});var ymt=s(pde);L2o=r(ymt,"maskformer"),ymt.forEach(t),y2o=r(h9e," \u2014 "),_q=n(h9e,"A",{href:!0});var xmt=s(_q);x2o=r(xmt,"MaskFormerFeatureExtractor"),xmt.forEach(t),$2o=r(h9e," (MaskFormer model)"),h9e.forEach(t),k2o=i(K),op=n(K,"LI",{});var p9e=s(op);_de=n(p9e,"STRONG",{});var $mt=s(_de);S2o=r($mt,"mctct"),$mt.forEach(t),R2o=r(p9e," \u2014 "),uq=n(p9e,"A",{href:!0});var kmt=s(uq);P2o=r(kmt,"MCTCTFeatureExtractor"),kmt.forEach(t),B2o=r(p9e," (M-CTC-T model)"),p9e.forEach(t),N2o=i(K),rp=n(K,"LI",{});var _9e=s(rp);ude=n(_9e,"STRONG",{});var Smt=s(ude);I2o=r(Smt,"mobilevit"),Smt.forEach(t),q2o=r(_9e," \u2014 "),bq=n(_9e,"A",{href:!0});var Rmt=s(bq);j2o=r(Rmt,"MobileViTFeatureExtractor"),Rmt.forEach(t),D2o=r(_9e," (MobileViT model)"),_9e.forEach(t),G2o=i(K),tp=n(K,"LI",{});var u9e=s(tp);bde=n(u9e,"STRONG",{});var Pmt=s(bde);O2o=r(Pmt,"perceiver"),Pmt.forEach(t),V2o=r(u9e," \u2014 "),vq=n(u9e,"A",{href:!0});var Bmt=s(vq);X2o=r(Bmt,"PerceiverFeatureExtractor"),Bmt.forEach(t),z2o=r(u9e," (Perceiver model)"),u9e.forEach(t),Q2o=i(K),ap=n(K,"LI",{});var b9e=s(ap);vde=n(b9e,"STRONG",{});var Nmt=s(vde);W2o=r(Nmt,"poolformer"),Nmt.forEach(t),H2o=r(b9e," \u2014 "),Fq=n(b9e,"A",{href:!0});var Imt=s(Fq);U2o=r(Imt,"PoolFormerFeatureExtractor"),Imt.forEach(t),J2o=r(b9e," (PoolFormer model)"),b9e.forEach(t),Y2o=i(K),np=n(K,"LI",{});var v9e=s(np);Fde=n(v9e,"STRONG",{});var qmt=s(Fde);K2o=r(qmt,"regnet"),qmt.forEach(t),Z2o=r(v9e," \u2014 "),Tq=n(v9e,"A",{href:!0});var jmt=s(Tq);ebo=r(jmt,"ConvNextFeatureExtractor"),jmt.forEach(t),obo=r(v9e," (RegNet model)"),v9e.forEach(t),rbo=i(K),sp=n(K,"LI",{});var F9e=s(sp);Tde=n(F9e,"STRONG",{});var Dmt=s(Tde);tbo=r(Dmt,"resnet"),Dmt.forEach(t),abo=r(F9e," \u2014 "),Mq=n(F9e,"A",{href:!0});var Gmt=s(Mq);nbo=r(Gmt,"ConvNextFeatureExtractor"),Gmt.forEach(t),sbo=r(F9e," (ResNet model)"),F9e.forEach(t),lbo=i(K),lp=n(K,"LI",{});var T9e=s(lp);Mde=n(T9e,"STRONG",{});var Omt=s(Mde);ibo=r(Omt,"segformer"),Omt.forEach(t),dbo=r(T9e," \u2014 "),Eq=n(T9e,"A",{href:!0});var Vmt=s(Eq);cbo=r(Vmt,"SegformerFeatureExtractor"),Vmt.forEach(t),fbo=r(T9e," (SegFormer model)"),T9e.forEach(t),mbo=i(K),ip=n(K,"LI",{});var M9e=s(ip);Ede=n(M9e,"STRONG",{});var Xmt=s(Ede);gbo=r(Xmt,"speech_to_text"),Xmt.forEach(t),hbo=r(M9e," \u2014 "),Cq=n(M9e,"A",{href:!0});var zmt=s(Cq);pbo=r(zmt,"Speech2TextFeatureExtractor"),zmt.forEach(t),_bo=r(M9e," (Speech2Text model)"),M9e.forEach(t),ubo=i(K),dp=n(K,"LI",{});var E9e=s(dp);Cde=n(E9e,"STRONG",{});var Qmt=s(Cde);bbo=r(Qmt,"swin"),Qmt.forEach(t),vbo=r(E9e," \u2014 "),wq=n(E9e,"A",{href:!0});var Wmt=s(wq);Fbo=r(Wmt,"ViTFeatureExtractor"),Wmt.forEach(t),Tbo=r(E9e," (Swin Transformer model)"),E9e.forEach(t),Mbo=i(K),cp=n(K,"LI",{});var C9e=s(cp);wde=n(C9e,"STRONG",{});var Hmt=s(wde);Ebo=r(Hmt,"van"),Hmt.forEach(t),Cbo=r(C9e," \u2014 "),Aq=n(C9e,"A",{href:!0});var Umt=s(Aq);wbo=r(Umt,"ConvNextFeatureExtractor"),Umt.forEach(t),Abo=r(C9e," (VAN model)"),C9e.forEach(t),Lbo=i(K),fp=n(K,"LI",{});var w9e=s(fp);Ade=n(w9e,"STRONG",{});var Jmt=s(Ade);ybo=r(Jmt,"vilt"),Jmt.forEach(t),xbo=r(w9e," \u2014 "),Lq=n(w9e,"A",{href:!0});var Ymt=s(Lq);$bo=r(Ymt,"ViltFeatureExtractor"),Ymt.forEach(t),kbo=r(w9e," (ViLT model)"),w9e.forEach(t),Sbo=i(K),mp=n(K,"LI",{});var A9e=s(mp);Lde=n(A9e,"STRONG",{});var Kmt=s(Lde);Rbo=r(Kmt,"vit"),Kmt.forEach(t),Pbo=r(A9e," \u2014 "),yq=n(A9e,"A",{href:!0});var Zmt=s(yq);Bbo=r(Zmt,"ViTFeatureExtractor"),Zmt.forEach(t),Nbo=r(A9e," (ViT model)"),A9e.forEach(t),Ibo=i(K),gp=n(K,"LI",{});var L9e=s(gp);yde=n(L9e,"STRONG",{});var egt=s(yde);qbo=r(egt,"vit_mae"),egt.forEach(t),jbo=r(L9e," \u2014 "),xq=n(L9e,"A",{href:!0});var ogt=s(xq);Dbo=r(ogt,"ViTFeatureExtractor"),ogt.forEach(t),Gbo=r(L9e," (ViTMAE model)"),L9e.forEach(t),Obo=i(K),hp=n(K,"LI",{});var y9e=s(hp);xde=n(y9e,"STRONG",{});var rgt=s(xde);Vbo=r(rgt,"wav2vec2"),rgt.forEach(t),Xbo=r(y9e," \u2014 "),$q=n(y9e,"A",{href:!0});var tgt=s($q);zbo=r(tgt,"Wav2Vec2FeatureExtractor"),tgt.forEach(t),Qbo=r(y9e," (Wav2Vec2 model)"),y9e.forEach(t),Wbo=i(K),pp=n(K,"LI",{});var x9e=s(pp);$de=n(x9e,"STRONG",{});var agt=s($de);Hbo=r(agt,"wav2vec2-conformer"),agt.forEach(t),Ubo=r(x9e," \u2014 "),kq=n(x9e,"A",{href:!0});var ngt=s(kq);Jbo=r(ngt,"Wav2Vec2FeatureExtractor"),ngt.forEach(t),Ybo=r(x9e," (Wav2Vec2-Conformer model)"),x9e.forEach(t),Kbo=i(K),_p=n(K,"LI",{});var $9e=s(_p);kde=n($9e,"STRONG",{});var sgt=s(kde);Zbo=r(sgt,"yolos"),sgt.forEach(t),evo=r($9e," \u2014 "),Sq=n($9e,"A",{href:!0});var lgt=s(Sq);ovo=r(lgt,"YolosFeatureExtractor"),lgt.forEach(t),rvo=r($9e," (YOLOS model)"),$9e.forEach(t),K.forEach(t),tvo=i(na),T(up.$$.fragment,na),avo=i(na),T(bp.$$.fragment,na),na.forEach(t),nvo=i(ol),vp=n(ol,"DIV",{class:!0});var _Qe=s(vp);T(CL.$$.fragment,_Qe),svo=i(_Qe),Sde=n(_Qe,"P",{});var igt=s(Sde);lvo=r(igt,"Register a new feature extractor for this class."),igt.forEach(t),_Qe.forEach(t),ol.forEach(t),gXe=i(f),Di=n(f,"H2",{class:!0});var uQe=s(Di);Fp=n(uQe,"A",{id:!0,class:!0,href:!0});var dgt=s(Fp);Rde=n(dgt,"SPAN",{});var cgt=s(Rde);T(wL.$$.fragment,cgt),cgt.forEach(t),dgt.forEach(t),ivo=i(uQe),Pde=n(uQe,"SPAN",{});var fgt=s(Pde);dvo=r(fgt,"AutoProcessor"),fgt.forEach(t),uQe.forEach(t),hXe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T(AL.$$.fragment,rl),cvo=i(rl),LL=n(rl,"P",{});var bQe=s(LL);fvo=r(bQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Rq=n(bQe,"A",{href:!0});var mgt=s(Rq);mvo=r(mgt,"AutoProcessor.from_pretrained()"),mgt.forEach(t),gvo=r(bQe," class method."),bQe.forEach(t),hvo=i(rl),yL=n(rl,"P",{});var vQe=s(yL);pvo=r(vQe,"This class cannot be instantiated directly using "),Bde=n(vQe,"CODE",{});var ggt=s(Bde);_vo=r(ggt,"__init__()"),ggt.forEach(t),uvo=r(vQe," (throws an error)."),vQe.forEach(t),bvo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(xL.$$.fragment,sa),vvo=i(sa),Nde=n(sa,"P",{});var hgt=s(Nde);Fvo=r(hgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hgt.forEach(t),Tvo=i(sa),Gi=n(sa,"P",{});var Pre=s(Gi);Mvo=r(Pre,"The processor class to instantiate is selected based on the "),Ide=n(Pre,"CODE",{});var pgt=s(Ide);Evo=r(pgt,"model_type"),pgt.forEach(t),Cvo=r(Pre,` property of the config object (either
passed as an argument or loaded from `),qde=n(Pre,"CODE",{});var _gt=s(qde);wvo=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),Avo=r(Pre," if possible):"),Pre.forEach(t),Lvo=i(sa),he=n(sa,"UL",{});var ue=s(he);Tp=n(ue,"LI",{});var k9e=s(Tp);jde=n(k9e,"STRONG",{});var ugt=s(jde);yvo=r(ugt,"clip"),ugt.forEach(t),xvo=r(k9e," \u2014 "),Pq=n(k9e,"A",{href:!0});var bgt=s(Pq);$vo=r(bgt,"CLIPProcessor"),bgt.forEach(t),kvo=r(k9e," (CLIP model)"),k9e.forEach(t),Svo=i(ue),Mp=n(ue,"LI",{});var S9e=s(Mp);Dde=n(S9e,"STRONG",{});var vgt=s(Dde);Rvo=r(vgt,"flava"),vgt.forEach(t),Pvo=r(S9e," \u2014 "),Gde=n(S9e,"CODE",{});var Fgt=s(Gde);Bvo=r(Fgt,"FLAVAProcessor"),Fgt.forEach(t),Nvo=r(S9e," (FLAVA model)"),S9e.forEach(t),Ivo=i(ue),Ep=n(ue,"LI",{});var R9e=s(Ep);Ode=n(R9e,"STRONG",{});var Tgt=s(Ode);qvo=r(Tgt,"groupvit"),Tgt.forEach(t),jvo=r(R9e," \u2014 "),Bq=n(R9e,"A",{href:!0});var Mgt=s(Bq);Dvo=r(Mgt,"CLIPProcessor"),Mgt.forEach(t),Gvo=r(R9e," (GroupViT model)"),R9e.forEach(t),Ovo=i(ue),Cp=n(ue,"LI",{});var P9e=s(Cp);Vde=n(P9e,"STRONG",{});var Egt=s(Vde);Vvo=r(Egt,"layoutlmv2"),Egt.forEach(t),Xvo=r(P9e," \u2014 "),Nq=n(P9e,"A",{href:!0});var Cgt=s(Nq);zvo=r(Cgt,"LayoutLMv2Processor"),Cgt.forEach(t),Qvo=r(P9e," (LayoutLMv2 model)"),P9e.forEach(t),Wvo=i(ue),wp=n(ue,"LI",{});var B9e=s(wp);Xde=n(B9e,"STRONG",{});var wgt=s(Xde);Hvo=r(wgt,"layoutlmv3"),wgt.forEach(t),Uvo=r(B9e," \u2014 "),Iq=n(B9e,"A",{href:!0});var Agt=s(Iq);Jvo=r(Agt,"LayoutLMv3Processor"),Agt.forEach(t),Yvo=r(B9e," (LayoutLMv3 model)"),B9e.forEach(t),Kvo=i(ue),Ap=n(ue,"LI",{});var N9e=s(Ap);zde=n(N9e,"STRONG",{});var Lgt=s(zde);Zvo=r(Lgt,"layoutxlm"),Lgt.forEach(t),eFo=r(N9e," \u2014 "),qq=n(N9e,"A",{href:!0});var ygt=s(qq);oFo=r(ygt,"LayoutXLMProcessor"),ygt.forEach(t),rFo=r(N9e," (LayoutXLM model)"),N9e.forEach(t),tFo=i(ue),Lp=n(ue,"LI",{});var I9e=s(Lp);Qde=n(I9e,"STRONG",{});var xgt=s(Qde);aFo=r(xgt,"sew"),xgt.forEach(t),nFo=r(I9e," \u2014 "),jq=n(I9e,"A",{href:!0});var $gt=s(jq);sFo=r($gt,"Wav2Vec2Processor"),$gt.forEach(t),lFo=r(I9e," (SEW model)"),I9e.forEach(t),iFo=i(ue),yp=n(ue,"LI",{});var q9e=s(yp);Wde=n(q9e,"STRONG",{});var kgt=s(Wde);dFo=r(kgt,"sew-d"),kgt.forEach(t),cFo=r(q9e," \u2014 "),Dq=n(q9e,"A",{href:!0});var Sgt=s(Dq);fFo=r(Sgt,"Wav2Vec2Processor"),Sgt.forEach(t),mFo=r(q9e," (SEW-D model)"),q9e.forEach(t),gFo=i(ue),xp=n(ue,"LI",{});var j9e=s(xp);Hde=n(j9e,"STRONG",{});var Rgt=s(Hde);hFo=r(Rgt,"speech_to_text"),Rgt.forEach(t),pFo=r(j9e," \u2014 "),Gq=n(j9e,"A",{href:!0});var Pgt=s(Gq);_Fo=r(Pgt,"Speech2TextProcessor"),Pgt.forEach(t),uFo=r(j9e," (Speech2Text model)"),j9e.forEach(t),bFo=i(ue),$p=n(ue,"LI",{});var D9e=s($p);Ude=n(D9e,"STRONG",{});var Bgt=s(Ude);vFo=r(Bgt,"speech_to_text_2"),Bgt.forEach(t),FFo=r(D9e," \u2014 "),Oq=n(D9e,"A",{href:!0});var Ngt=s(Oq);TFo=r(Ngt,"Speech2Text2Processor"),Ngt.forEach(t),MFo=r(D9e," (Speech2Text2 model)"),D9e.forEach(t),EFo=i(ue),kp=n(ue,"LI",{});var G9e=s(kp);Jde=n(G9e,"STRONG",{});var Igt=s(Jde);CFo=r(Igt,"trocr"),Igt.forEach(t),wFo=r(G9e," \u2014 "),Vq=n(G9e,"A",{href:!0});var qgt=s(Vq);AFo=r(qgt,"TrOCRProcessor"),qgt.forEach(t),LFo=r(G9e," (TrOCR model)"),G9e.forEach(t),yFo=i(ue),Sp=n(ue,"LI",{});var O9e=s(Sp);Yde=n(O9e,"STRONG",{});var jgt=s(Yde);xFo=r(jgt,"unispeech"),jgt.forEach(t),$Fo=r(O9e," \u2014 "),Xq=n(O9e,"A",{href:!0});var Dgt=s(Xq);kFo=r(Dgt,"Wav2Vec2Processor"),Dgt.forEach(t),SFo=r(O9e," (UniSpeech model)"),O9e.forEach(t),RFo=i(ue),Rp=n(ue,"LI",{});var V9e=s(Rp);Kde=n(V9e,"STRONG",{});var Ggt=s(Kde);PFo=r(Ggt,"unispeech-sat"),Ggt.forEach(t),BFo=r(V9e," \u2014 "),zq=n(V9e,"A",{href:!0});var Ogt=s(zq);NFo=r(Ogt,"Wav2Vec2Processor"),Ogt.forEach(t),IFo=r(V9e," (UniSpeechSat model)"),V9e.forEach(t),qFo=i(ue),Pp=n(ue,"LI",{});var X9e=s(Pp);Zde=n(X9e,"STRONG",{});var Vgt=s(Zde);jFo=r(Vgt,"vilt"),Vgt.forEach(t),DFo=r(X9e," \u2014 "),Qq=n(X9e,"A",{href:!0});var Xgt=s(Qq);GFo=r(Xgt,"ViltProcessor"),Xgt.forEach(t),OFo=r(X9e," (ViLT model)"),X9e.forEach(t),VFo=i(ue),Bp=n(ue,"LI",{});var z9e=s(Bp);ece=n(z9e,"STRONG",{});var zgt=s(ece);XFo=r(zgt,"vision-text-dual-encoder"),zgt.forEach(t),zFo=r(z9e," \u2014 "),Wq=n(z9e,"A",{href:!0});var Qgt=s(Wq);QFo=r(Qgt,"VisionTextDualEncoderProcessor"),Qgt.forEach(t),WFo=r(z9e," (VisionTextDualEncoder model)"),z9e.forEach(t),HFo=i(ue),Np=n(ue,"LI",{});var Q9e=s(Np);oce=n(Q9e,"STRONG",{});var Wgt=s(oce);UFo=r(Wgt,"wav2vec2"),Wgt.forEach(t),JFo=r(Q9e," \u2014 "),Hq=n(Q9e,"A",{href:!0});var Hgt=s(Hq);YFo=r(Hgt,"Wav2Vec2Processor"),Hgt.forEach(t),KFo=r(Q9e," (Wav2Vec2 model)"),Q9e.forEach(t),ZFo=i(ue),Ip=n(ue,"LI",{});var W9e=s(Ip);rce=n(W9e,"STRONG",{});var Ugt=s(rce);e6o=r(Ugt,"wav2vec2-conformer"),Ugt.forEach(t),o6o=r(W9e," \u2014 "),Uq=n(W9e,"A",{href:!0});var Jgt=s(Uq);r6o=r(Jgt,"Wav2Vec2Processor"),Jgt.forEach(t),t6o=r(W9e," (Wav2Vec2-Conformer model)"),W9e.forEach(t),a6o=i(ue),qp=n(ue,"LI",{});var H9e=s(qp);tce=n(H9e,"STRONG",{});var Ygt=s(tce);n6o=r(Ygt,"wavlm"),Ygt.forEach(t),s6o=r(H9e," \u2014 "),Jq=n(H9e,"A",{href:!0});var Kgt=s(Jq);l6o=r(Kgt,"Wav2Vec2Processor"),Kgt.forEach(t),i6o=r(H9e," (WavLM model)"),H9e.forEach(t),ue.forEach(t),d6o=i(sa),T(jp.$$.fragment,sa),c6o=i(sa),T(Dp.$$.fragment,sa),sa.forEach(t),f6o=i(rl),Gp=n(rl,"DIV",{class:!0});var FQe=s(Gp);T($L.$$.fragment,FQe),m6o=i(FQe),ace=n(FQe,"P",{});var Zgt=s(ace);g6o=r(Zgt,"Register a new processor for this class."),Zgt.forEach(t),FQe.forEach(t),rl.forEach(t),pXe=i(f),Oi=n(f,"H2",{class:!0});var TQe=s(Oi);Op=n(TQe,"A",{id:!0,class:!0,href:!0});var eht=s(Op);nce=n(eht,"SPAN",{});var oht=s(nce);T(kL.$$.fragment,oht),oht.forEach(t),eht.forEach(t),h6o=i(TQe),sce=n(TQe,"SPAN",{});var rht=s(sce);p6o=r(rht,"AutoModel"),rht.forEach(t),TQe.forEach(t),_Xe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(SL.$$.fragment,tl),_6o=i(tl),Vi=n(tl,"P",{});var Bre=s(Vi);u6o=r(Bre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yq=n(Bre,"A",{href:!0});var tht=s(Yq);b6o=r(tht,"from_pretrained()"),tht.forEach(t),v6o=r(Bre," class method or the "),Kq=n(Bre,"A",{href:!0});var aht=s(Kq);F6o=r(aht,"from_config()"),aht.forEach(t),T6o=r(Bre,` class
method.`),Bre.forEach(t),M6o=i(tl),RL=n(tl,"P",{});var MQe=s(RL);E6o=r(MQe,"This class cannot be instantiated directly using "),lce=n(MQe,"CODE",{});var nht=s(lce);C6o=r(nht,"__init__()"),nht.forEach(t),w6o=r(MQe," (throws an error)."),MQe.forEach(t),A6o=i(tl),it=n(tl,"DIV",{class:!0});var dA=s(it);T(PL.$$.fragment,dA),L6o=i(dA),ice=n(dA,"P",{});var sht=s(ice);y6o=r(sht,"Instantiates one of the base model classes of the library from a configuration."),sht.forEach(t),x6o=i(dA),Xi=n(dA,"P",{});var Nre=s(Xi);$6o=r(Nre,`Note:
Loading a model from its configuration file does `),dce=n(Nre,"STRONG",{});var lht=s(dce);k6o=r(lht,"not"),lht.forEach(t),S6o=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zq=n(Nre,"A",{href:!0});var iht=s(Zq);R6o=r(iht,"from_pretrained()"),iht.forEach(t),P6o=r(Nre," to load the model weights."),Nre.forEach(t),B6o=i(dA),T(Vp.$$.fragment,dA),dA.forEach(t),N6o=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(BL.$$.fragment,la),I6o=i(la),cce=n(la,"P",{});var dht=s(cce);q6o=r(dht,"Instantiate one of the base model classes of the library from a pretrained model."),dht.forEach(t),j6o=i(la),Na=n(la,"P",{});var cA=s(Na);D6o=r(cA,"The model class to instantiate is selected based on the "),fce=n(cA,"CODE",{});var cht=s(fce);G6o=r(cht,"model_type"),cht.forEach(t),O6o=r(cA,` property of the config object (either
passed as an argument or loaded from `),mce=n(cA,"CODE",{});var fht=s(mce);V6o=r(fht,"pretrained_model_name_or_path"),fht.forEach(t),X6o=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=n(cA,"CODE",{});var mht=s(gce);z6o=r(mht,"pretrained_model_name_or_path"),mht.forEach(t),Q6o=r(cA,":"),cA.forEach(t),W6o=i(la),y=n(la,"UL",{});var x=s(y);Xp=n(x,"LI",{});var U9e=s(Xp);hce=n(U9e,"STRONG",{});var ght=s(hce);H6o=r(ght,"albert"),ght.forEach(t),U6o=r(U9e," \u2014 "),ej=n(U9e,"A",{href:!0});var hht=s(ej);J6o=r(hht,"AlbertModel"),hht.forEach(t),Y6o=r(U9e," (ALBERT model)"),U9e.forEach(t),K6o=i(x),zp=n(x,"LI",{});var J9e=s(zp);pce=n(J9e,"STRONG",{});var pht=s(pce);Z6o=r(pht,"bart"),pht.forEach(t),eTo=r(J9e," \u2014 "),oj=n(J9e,"A",{href:!0});var _ht=s(oj);oTo=r(_ht,"BartModel"),_ht.forEach(t),rTo=r(J9e," (BART model)"),J9e.forEach(t),tTo=i(x),Qp=n(x,"LI",{});var Y9e=s(Qp);_ce=n(Y9e,"STRONG",{});var uht=s(_ce);aTo=r(uht,"beit"),uht.forEach(t),nTo=r(Y9e," \u2014 "),rj=n(Y9e,"A",{href:!0});var bht=s(rj);sTo=r(bht,"BeitModel"),bht.forEach(t),lTo=r(Y9e," (BEiT model)"),Y9e.forEach(t),iTo=i(x),Wp=n(x,"LI",{});var K9e=s(Wp);uce=n(K9e,"STRONG",{});var vht=s(uce);dTo=r(vht,"bert"),vht.forEach(t),cTo=r(K9e," \u2014 "),tj=n(K9e,"A",{href:!0});var Fht=s(tj);fTo=r(Fht,"BertModel"),Fht.forEach(t),mTo=r(K9e," (BERT model)"),K9e.forEach(t),gTo=i(x),Hp=n(x,"LI",{});var Z9e=s(Hp);bce=n(Z9e,"STRONG",{});var Tht=s(bce);hTo=r(Tht,"bert-generation"),Tht.forEach(t),pTo=r(Z9e," \u2014 "),aj=n(Z9e,"A",{href:!0});var Mht=s(aj);_To=r(Mht,"BertGenerationEncoder"),Mht.forEach(t),uTo=r(Z9e," (Bert Generation model)"),Z9e.forEach(t),bTo=i(x),Up=n(x,"LI",{});var exe=s(Up);vce=n(exe,"STRONG",{});var Eht=s(vce);vTo=r(Eht,"big_bird"),Eht.forEach(t),FTo=r(exe," \u2014 "),nj=n(exe,"A",{href:!0});var Cht=s(nj);TTo=r(Cht,"BigBirdModel"),Cht.forEach(t),MTo=r(exe," (BigBird model)"),exe.forEach(t),ETo=i(x),Jp=n(x,"LI",{});var oxe=s(Jp);Fce=n(oxe,"STRONG",{});var wht=s(Fce);CTo=r(wht,"bigbird_pegasus"),wht.forEach(t),wTo=r(oxe," \u2014 "),sj=n(oxe,"A",{href:!0});var Aht=s(sj);ATo=r(Aht,"BigBirdPegasusModel"),Aht.forEach(t),LTo=r(oxe," (BigBird-Pegasus model)"),oxe.forEach(t),yTo=i(x),Yp=n(x,"LI",{});var rxe=s(Yp);Tce=n(rxe,"STRONG",{});var Lht=s(Tce);xTo=r(Lht,"blenderbot"),Lht.forEach(t),$To=r(rxe," \u2014 "),lj=n(rxe,"A",{href:!0});var yht=s(lj);kTo=r(yht,"BlenderbotModel"),yht.forEach(t),STo=r(rxe," (Blenderbot model)"),rxe.forEach(t),RTo=i(x),Kp=n(x,"LI",{});var txe=s(Kp);Mce=n(txe,"STRONG",{});var xht=s(Mce);PTo=r(xht,"blenderbot-small"),xht.forEach(t),BTo=r(txe," \u2014 "),ij=n(txe,"A",{href:!0});var $ht=s(ij);NTo=r($ht,"BlenderbotSmallModel"),$ht.forEach(t),ITo=r(txe," (BlenderbotSmall model)"),txe.forEach(t),qTo=i(x),Zp=n(x,"LI",{});var axe=s(Zp);Ece=n(axe,"STRONG",{});var kht=s(Ece);jTo=r(kht,"bloom"),kht.forEach(t),DTo=r(axe," \u2014 "),dj=n(axe,"A",{href:!0});var Sht=s(dj);GTo=r(Sht,"BloomModel"),Sht.forEach(t),OTo=r(axe," (BLOOM model)"),axe.forEach(t),VTo=i(x),e_=n(x,"LI",{});var nxe=s(e_);Cce=n(nxe,"STRONG",{});var Rht=s(Cce);XTo=r(Rht,"camembert"),Rht.forEach(t),zTo=r(nxe," \u2014 "),cj=n(nxe,"A",{href:!0});var Pht=s(cj);QTo=r(Pht,"CamembertModel"),Pht.forEach(t),WTo=r(nxe," (CamemBERT model)"),nxe.forEach(t),HTo=i(x),o_=n(x,"LI",{});var sxe=s(o_);wce=n(sxe,"STRONG",{});var Bht=s(wce);UTo=r(Bht,"canine"),Bht.forEach(t),JTo=r(sxe," \u2014 "),fj=n(sxe,"A",{href:!0});var Nht=s(fj);YTo=r(Nht,"CanineModel"),Nht.forEach(t),KTo=r(sxe," (CANINE model)"),sxe.forEach(t),ZTo=i(x),r_=n(x,"LI",{});var lxe=s(r_);Ace=n(lxe,"STRONG",{});var Iht=s(Ace);e8o=r(Iht,"clip"),Iht.forEach(t),o8o=r(lxe," \u2014 "),mj=n(lxe,"A",{href:!0});var qht=s(mj);r8o=r(qht,"CLIPModel"),qht.forEach(t),t8o=r(lxe," (CLIP model)"),lxe.forEach(t),a8o=i(x),t_=n(x,"LI",{});var ixe=s(t_);Lce=n(ixe,"STRONG",{});var jht=s(Lce);n8o=r(jht,"codegen"),jht.forEach(t),s8o=r(ixe," \u2014 "),gj=n(ixe,"A",{href:!0});var Dht=s(gj);l8o=r(Dht,"CodeGenModel"),Dht.forEach(t),i8o=r(ixe," (CodeGen model)"),ixe.forEach(t),d8o=i(x),a_=n(x,"LI",{});var dxe=s(a_);yce=n(dxe,"STRONG",{});var Ght=s(yce);c8o=r(Ght,"convbert"),Ght.forEach(t),f8o=r(dxe," \u2014 "),hj=n(dxe,"A",{href:!0});var Oht=s(hj);m8o=r(Oht,"ConvBertModel"),Oht.forEach(t),g8o=r(dxe," (ConvBERT model)"),dxe.forEach(t),h8o=i(x),n_=n(x,"LI",{});var cxe=s(n_);xce=n(cxe,"STRONG",{});var Vht=s(xce);p8o=r(Vht,"convnext"),Vht.forEach(t),_8o=r(cxe," \u2014 "),pj=n(cxe,"A",{href:!0});var Xht=s(pj);u8o=r(Xht,"ConvNextModel"),Xht.forEach(t),b8o=r(cxe," (ConvNeXT model)"),cxe.forEach(t),v8o=i(x),s_=n(x,"LI",{});var fxe=s(s_);$ce=n(fxe,"STRONG",{});var zht=s($ce);F8o=r(zht,"ctrl"),zht.forEach(t),T8o=r(fxe," \u2014 "),_j=n(fxe,"A",{href:!0});var Qht=s(_j);M8o=r(Qht,"CTRLModel"),Qht.forEach(t),E8o=r(fxe," (CTRL model)"),fxe.forEach(t),C8o=i(x),l_=n(x,"LI",{});var mxe=s(l_);kce=n(mxe,"STRONG",{});var Wht=s(kce);w8o=r(Wht,"cvt"),Wht.forEach(t),A8o=r(mxe," \u2014 "),uj=n(mxe,"A",{href:!0});var Hht=s(uj);L8o=r(Hht,"CvtModel"),Hht.forEach(t),y8o=r(mxe," (CvT model)"),mxe.forEach(t),x8o=i(x),i_=n(x,"LI",{});var gxe=s(i_);Sce=n(gxe,"STRONG",{});var Uht=s(Sce);$8o=r(Uht,"data2vec-audio"),Uht.forEach(t),k8o=r(gxe," \u2014 "),bj=n(gxe,"A",{href:!0});var Jht=s(bj);S8o=r(Jht,"Data2VecAudioModel"),Jht.forEach(t),R8o=r(gxe," (Data2VecAudio model)"),gxe.forEach(t),P8o=i(x),d_=n(x,"LI",{});var hxe=s(d_);Rce=n(hxe,"STRONG",{});var Yht=s(Rce);B8o=r(Yht,"data2vec-text"),Yht.forEach(t),N8o=r(hxe," \u2014 "),vj=n(hxe,"A",{href:!0});var Kht=s(vj);I8o=r(Kht,"Data2VecTextModel"),Kht.forEach(t),q8o=r(hxe," (Data2VecText model)"),hxe.forEach(t),j8o=i(x),c_=n(x,"LI",{});var pxe=s(c_);Pce=n(pxe,"STRONG",{});var Zht=s(Pce);D8o=r(Zht,"data2vec-vision"),Zht.forEach(t),G8o=r(pxe," \u2014 "),Fj=n(pxe,"A",{href:!0});var ept=s(Fj);O8o=r(ept,"Data2VecVisionModel"),ept.forEach(t),V8o=r(pxe," (Data2VecVision model)"),pxe.forEach(t),X8o=i(x),f_=n(x,"LI",{});var _xe=s(f_);Bce=n(_xe,"STRONG",{});var opt=s(Bce);z8o=r(opt,"deberta"),opt.forEach(t),Q8o=r(_xe," \u2014 "),Tj=n(_xe,"A",{href:!0});var rpt=s(Tj);W8o=r(rpt,"DebertaModel"),rpt.forEach(t),H8o=r(_xe," (DeBERTa model)"),_xe.forEach(t),U8o=i(x),m_=n(x,"LI",{});var uxe=s(m_);Nce=n(uxe,"STRONG",{});var tpt=s(Nce);J8o=r(tpt,"deberta-v2"),tpt.forEach(t),Y8o=r(uxe," \u2014 "),Mj=n(uxe,"A",{href:!0});var apt=s(Mj);K8o=r(apt,"DebertaV2Model"),apt.forEach(t),Z8o=r(uxe," (DeBERTa-v2 model)"),uxe.forEach(t),eMo=i(x),g_=n(x,"LI",{});var bxe=s(g_);Ice=n(bxe,"STRONG",{});var npt=s(Ice);oMo=r(npt,"decision_transformer"),npt.forEach(t),rMo=r(bxe," \u2014 "),Ej=n(bxe,"A",{href:!0});var spt=s(Ej);tMo=r(spt,"DecisionTransformerModel"),spt.forEach(t),aMo=r(bxe," (Decision Transformer model)"),bxe.forEach(t),nMo=i(x),h_=n(x,"LI",{});var vxe=s(h_);qce=n(vxe,"STRONG",{});var lpt=s(qce);sMo=r(lpt,"deit"),lpt.forEach(t),lMo=r(vxe," \u2014 "),Cj=n(vxe,"A",{href:!0});var ipt=s(Cj);iMo=r(ipt,"DeiTModel"),ipt.forEach(t),dMo=r(vxe," (DeiT model)"),vxe.forEach(t),cMo=i(x),p_=n(x,"LI",{});var Fxe=s(p_);jce=n(Fxe,"STRONG",{});var dpt=s(jce);fMo=r(dpt,"detr"),dpt.forEach(t),mMo=r(Fxe," \u2014 "),wj=n(Fxe,"A",{href:!0});var cpt=s(wj);gMo=r(cpt,"DetrModel"),cpt.forEach(t),hMo=r(Fxe," (DETR model)"),Fxe.forEach(t),pMo=i(x),__=n(x,"LI",{});var Txe=s(__);Dce=n(Txe,"STRONG",{});var fpt=s(Dce);_Mo=r(fpt,"distilbert"),fpt.forEach(t),uMo=r(Txe," \u2014 "),Aj=n(Txe,"A",{href:!0});var mpt=s(Aj);bMo=r(mpt,"DistilBertModel"),mpt.forEach(t),vMo=r(Txe," (DistilBERT model)"),Txe.forEach(t),FMo=i(x),u_=n(x,"LI",{});var Mxe=s(u_);Gce=n(Mxe,"STRONG",{});var gpt=s(Gce);TMo=r(gpt,"dpr"),gpt.forEach(t),MMo=r(Mxe," \u2014 "),Lj=n(Mxe,"A",{href:!0});var hpt=s(Lj);EMo=r(hpt,"DPRQuestionEncoder"),hpt.forEach(t),CMo=r(Mxe," (DPR model)"),Mxe.forEach(t),wMo=i(x),b_=n(x,"LI",{});var Exe=s(b_);Oce=n(Exe,"STRONG",{});var ppt=s(Oce);AMo=r(ppt,"dpt"),ppt.forEach(t),LMo=r(Exe," \u2014 "),yj=n(Exe,"A",{href:!0});var _pt=s(yj);yMo=r(_pt,"DPTModel"),_pt.forEach(t),xMo=r(Exe," (DPT model)"),Exe.forEach(t),$Mo=i(x),v_=n(x,"LI",{});var Cxe=s(v_);Vce=n(Cxe,"STRONG",{});var upt=s(Vce);kMo=r(upt,"electra"),upt.forEach(t),SMo=r(Cxe," \u2014 "),xj=n(Cxe,"A",{href:!0});var bpt=s(xj);RMo=r(bpt,"ElectraModel"),bpt.forEach(t),PMo=r(Cxe," (ELECTRA model)"),Cxe.forEach(t),BMo=i(x),F_=n(x,"LI",{});var wxe=s(F_);Xce=n(wxe,"STRONG",{});var vpt=s(Xce);NMo=r(vpt,"flaubert"),vpt.forEach(t),IMo=r(wxe," \u2014 "),$j=n(wxe,"A",{href:!0});var Fpt=s($j);qMo=r(Fpt,"FlaubertModel"),Fpt.forEach(t),jMo=r(wxe," (FlauBERT model)"),wxe.forEach(t),DMo=i(x),T_=n(x,"LI",{});var Axe=s(T_);zce=n(Axe,"STRONG",{});var Tpt=s(zce);GMo=r(Tpt,"flava"),Tpt.forEach(t),OMo=r(Axe," \u2014 "),kj=n(Axe,"A",{href:!0});var Mpt=s(kj);VMo=r(Mpt,"FlavaModel"),Mpt.forEach(t),XMo=r(Axe," (FLAVA model)"),Axe.forEach(t),zMo=i(x),M_=n(x,"LI",{});var Lxe=s(M_);Qce=n(Lxe,"STRONG",{});var Ept=s(Qce);QMo=r(Ept,"fnet"),Ept.forEach(t),WMo=r(Lxe," \u2014 "),Sj=n(Lxe,"A",{href:!0});var Cpt=s(Sj);HMo=r(Cpt,"FNetModel"),Cpt.forEach(t),UMo=r(Lxe," (FNet model)"),Lxe.forEach(t),JMo=i(x),E_=n(x,"LI",{});var yxe=s(E_);Wce=n(yxe,"STRONG",{});var wpt=s(Wce);YMo=r(wpt,"fsmt"),wpt.forEach(t),KMo=r(yxe," \u2014 "),Rj=n(yxe,"A",{href:!0});var Apt=s(Rj);ZMo=r(Apt,"FSMTModel"),Apt.forEach(t),e4o=r(yxe," (FairSeq Machine-Translation model)"),yxe.forEach(t),o4o=i(x),Hs=n(x,"LI",{});var SS=s(Hs);Hce=n(SS,"STRONG",{});var Lpt=s(Hce);r4o=r(Lpt,"funnel"),Lpt.forEach(t),t4o=r(SS," \u2014 "),Pj=n(SS,"A",{href:!0});var ypt=s(Pj);a4o=r(ypt,"FunnelModel"),ypt.forEach(t),n4o=r(SS," or "),Bj=n(SS,"A",{href:!0});var xpt=s(Bj);s4o=r(xpt,"FunnelBaseModel"),xpt.forEach(t),l4o=r(SS," (Funnel Transformer model)"),SS.forEach(t),i4o=i(x),C_=n(x,"LI",{});var xxe=s(C_);Uce=n(xxe,"STRONG",{});var $pt=s(Uce);d4o=r($pt,"glpn"),$pt.forEach(t),c4o=r(xxe," \u2014 "),Nj=n(xxe,"A",{href:!0});var kpt=s(Nj);f4o=r(kpt,"GLPNModel"),kpt.forEach(t),m4o=r(xxe," (GLPN model)"),xxe.forEach(t),g4o=i(x),w_=n(x,"LI",{});var $xe=s(w_);Jce=n($xe,"STRONG",{});var Spt=s(Jce);h4o=r(Spt,"gpt2"),Spt.forEach(t),p4o=r($xe," \u2014 "),Ij=n($xe,"A",{href:!0});var Rpt=s(Ij);_4o=r(Rpt,"GPT2Model"),Rpt.forEach(t),u4o=r($xe," (OpenAI GPT-2 model)"),$xe.forEach(t),b4o=i(x),A_=n(x,"LI",{});var kxe=s(A_);Yce=n(kxe,"STRONG",{});var Ppt=s(Yce);v4o=r(Ppt,"gpt_neo"),Ppt.forEach(t),F4o=r(kxe," \u2014 "),qj=n(kxe,"A",{href:!0});var Bpt=s(qj);T4o=r(Bpt,"GPTNeoModel"),Bpt.forEach(t),M4o=r(kxe," (GPT Neo model)"),kxe.forEach(t),E4o=i(x),L_=n(x,"LI",{});var Sxe=s(L_);Kce=n(Sxe,"STRONG",{});var Npt=s(Kce);C4o=r(Npt,"gpt_neox"),Npt.forEach(t),w4o=r(Sxe," \u2014 "),jj=n(Sxe,"A",{href:!0});var Ipt=s(jj);A4o=r(Ipt,"GPTNeoXModel"),Ipt.forEach(t),L4o=r(Sxe," (GPT NeoX model)"),Sxe.forEach(t),y4o=i(x),y_=n(x,"LI",{});var Rxe=s(y_);Zce=n(Rxe,"STRONG",{});var qpt=s(Zce);x4o=r(qpt,"gptj"),qpt.forEach(t),$4o=r(Rxe," \u2014 "),Dj=n(Rxe,"A",{href:!0});var jpt=s(Dj);k4o=r(jpt,"GPTJModel"),jpt.forEach(t),S4o=r(Rxe," (GPT-J model)"),Rxe.forEach(t),R4o=i(x),x_=n(x,"LI",{});var Pxe=s(x_);efe=n(Pxe,"STRONG",{});var Dpt=s(efe);P4o=r(Dpt,"groupvit"),Dpt.forEach(t),B4o=r(Pxe," \u2014 "),Gj=n(Pxe,"A",{href:!0});var Gpt=s(Gj);N4o=r(Gpt,"GroupViTModel"),Gpt.forEach(t),I4o=r(Pxe," (GroupViT model)"),Pxe.forEach(t),q4o=i(x),$_=n(x,"LI",{});var Bxe=s($_);ofe=n(Bxe,"STRONG",{});var Opt=s(ofe);j4o=r(Opt,"hubert"),Opt.forEach(t),D4o=r(Bxe," \u2014 "),Oj=n(Bxe,"A",{href:!0});var Vpt=s(Oj);G4o=r(Vpt,"HubertModel"),Vpt.forEach(t),O4o=r(Bxe," (Hubert model)"),Bxe.forEach(t),V4o=i(x),k_=n(x,"LI",{});var Nxe=s(k_);rfe=n(Nxe,"STRONG",{});var Xpt=s(rfe);X4o=r(Xpt,"ibert"),Xpt.forEach(t),z4o=r(Nxe," \u2014 "),Vj=n(Nxe,"A",{href:!0});var zpt=s(Vj);Q4o=r(zpt,"IBertModel"),zpt.forEach(t),W4o=r(Nxe," (I-BERT model)"),Nxe.forEach(t),H4o=i(x),S_=n(x,"LI",{});var Ixe=s(S_);tfe=n(Ixe,"STRONG",{});var Qpt=s(tfe);U4o=r(Qpt,"imagegpt"),Qpt.forEach(t),J4o=r(Ixe," \u2014 "),Xj=n(Ixe,"A",{href:!0});var Wpt=s(Xj);Y4o=r(Wpt,"ImageGPTModel"),Wpt.forEach(t),K4o=r(Ixe," (ImageGPT model)"),Ixe.forEach(t),Z4o=i(x),R_=n(x,"LI",{});var qxe=s(R_);afe=n(qxe,"STRONG",{});var Hpt=s(afe);eEo=r(Hpt,"layoutlm"),Hpt.forEach(t),oEo=r(qxe," \u2014 "),zj=n(qxe,"A",{href:!0});var Upt=s(zj);rEo=r(Upt,"LayoutLMModel"),Upt.forEach(t),tEo=r(qxe," (LayoutLM model)"),qxe.forEach(t),aEo=i(x),P_=n(x,"LI",{});var jxe=s(P_);nfe=n(jxe,"STRONG",{});var Jpt=s(nfe);nEo=r(Jpt,"layoutlmv2"),Jpt.forEach(t),sEo=r(jxe," \u2014 "),Qj=n(jxe,"A",{href:!0});var Ypt=s(Qj);lEo=r(Ypt,"LayoutLMv2Model"),Ypt.forEach(t),iEo=r(jxe," (LayoutLMv2 model)"),jxe.forEach(t),dEo=i(x),B_=n(x,"LI",{});var Dxe=s(B_);sfe=n(Dxe,"STRONG",{});var Kpt=s(sfe);cEo=r(Kpt,"layoutlmv3"),Kpt.forEach(t),fEo=r(Dxe," \u2014 "),Wj=n(Dxe,"A",{href:!0});var Zpt=s(Wj);mEo=r(Zpt,"LayoutLMv3Model"),Zpt.forEach(t),gEo=r(Dxe," (LayoutLMv3 model)"),Dxe.forEach(t),hEo=i(x),N_=n(x,"LI",{});var Gxe=s(N_);lfe=n(Gxe,"STRONG",{});var e_t=s(lfe);pEo=r(e_t,"led"),e_t.forEach(t),_Eo=r(Gxe," \u2014 "),Hj=n(Gxe,"A",{href:!0});var o_t=s(Hj);uEo=r(o_t,"LEDModel"),o_t.forEach(t),bEo=r(Gxe," (LED model)"),Gxe.forEach(t),vEo=i(x),I_=n(x,"LI",{});var Oxe=s(I_);ife=n(Oxe,"STRONG",{});var r_t=s(ife);FEo=r(r_t,"levit"),r_t.forEach(t),TEo=r(Oxe," \u2014 "),Uj=n(Oxe,"A",{href:!0});var t_t=s(Uj);MEo=r(t_t,"LevitModel"),t_t.forEach(t),EEo=r(Oxe," (LeViT model)"),Oxe.forEach(t),CEo=i(x),q_=n(x,"LI",{});var Vxe=s(q_);dfe=n(Vxe,"STRONG",{});var a_t=s(dfe);wEo=r(a_t,"longformer"),a_t.forEach(t),AEo=r(Vxe," \u2014 "),Jj=n(Vxe,"A",{href:!0});var n_t=s(Jj);LEo=r(n_t,"LongformerModel"),n_t.forEach(t),yEo=r(Vxe," (Longformer model)"),Vxe.forEach(t),xEo=i(x),j_=n(x,"LI",{});var Xxe=s(j_);cfe=n(Xxe,"STRONG",{});var s_t=s(cfe);$Eo=r(s_t,"longt5"),s_t.forEach(t),kEo=r(Xxe," \u2014 "),Yj=n(Xxe,"A",{href:!0});var l_t=s(Yj);SEo=r(l_t,"LongT5Model"),l_t.forEach(t),REo=r(Xxe," (LongT5 model)"),Xxe.forEach(t),PEo=i(x),D_=n(x,"LI",{});var zxe=s(D_);ffe=n(zxe,"STRONG",{});var i_t=s(ffe);BEo=r(i_t,"luke"),i_t.forEach(t),NEo=r(zxe," \u2014 "),Kj=n(zxe,"A",{href:!0});var d_t=s(Kj);IEo=r(d_t,"LukeModel"),d_t.forEach(t),qEo=r(zxe," (LUKE model)"),zxe.forEach(t),jEo=i(x),G_=n(x,"LI",{});var Qxe=s(G_);mfe=n(Qxe,"STRONG",{});var c_t=s(mfe);DEo=r(c_t,"lxmert"),c_t.forEach(t),GEo=r(Qxe," \u2014 "),Zj=n(Qxe,"A",{href:!0});var f_t=s(Zj);OEo=r(f_t,"LxmertModel"),f_t.forEach(t),VEo=r(Qxe," (LXMERT model)"),Qxe.forEach(t),XEo=i(x),O_=n(x,"LI",{});var Wxe=s(O_);gfe=n(Wxe,"STRONG",{});var m_t=s(gfe);zEo=r(m_t,"m2m_100"),m_t.forEach(t),QEo=r(Wxe," \u2014 "),eD=n(Wxe,"A",{href:!0});var g_t=s(eD);WEo=r(g_t,"M2M100Model"),g_t.forEach(t),HEo=r(Wxe," (M2M100 model)"),Wxe.forEach(t),UEo=i(x),V_=n(x,"LI",{});var Hxe=s(V_);hfe=n(Hxe,"STRONG",{});var h_t=s(hfe);JEo=r(h_t,"marian"),h_t.forEach(t),YEo=r(Hxe," \u2014 "),oD=n(Hxe,"A",{href:!0});var p_t=s(oD);KEo=r(p_t,"MarianModel"),p_t.forEach(t),ZEo=r(Hxe," (Marian model)"),Hxe.forEach(t),eCo=i(x),X_=n(x,"LI",{});var Uxe=s(X_);pfe=n(Uxe,"STRONG",{});var __t=s(pfe);oCo=r(__t,"maskformer"),__t.forEach(t),rCo=r(Uxe," \u2014 "),rD=n(Uxe,"A",{href:!0});var u_t=s(rD);tCo=r(u_t,"MaskFormerModel"),u_t.forEach(t),aCo=r(Uxe," (MaskFormer model)"),Uxe.forEach(t),nCo=i(x),z_=n(x,"LI",{});var Jxe=s(z_);_fe=n(Jxe,"STRONG",{});var b_t=s(_fe);sCo=r(b_t,"mbart"),b_t.forEach(t),lCo=r(Jxe," \u2014 "),tD=n(Jxe,"A",{href:!0});var v_t=s(tD);iCo=r(v_t,"MBartModel"),v_t.forEach(t),dCo=r(Jxe," (mBART model)"),Jxe.forEach(t),cCo=i(x),Q_=n(x,"LI",{});var Yxe=s(Q_);ufe=n(Yxe,"STRONG",{});var F_t=s(ufe);fCo=r(F_t,"mctct"),F_t.forEach(t),mCo=r(Yxe," \u2014 "),aD=n(Yxe,"A",{href:!0});var T_t=s(aD);gCo=r(T_t,"MCTCTModel"),T_t.forEach(t),hCo=r(Yxe," (M-CTC-T model)"),Yxe.forEach(t),pCo=i(x),W_=n(x,"LI",{});var Kxe=s(W_);bfe=n(Kxe,"STRONG",{});var M_t=s(bfe);_Co=r(M_t,"megatron-bert"),M_t.forEach(t),uCo=r(Kxe," \u2014 "),nD=n(Kxe,"A",{href:!0});var E_t=s(nD);bCo=r(E_t,"MegatronBertModel"),E_t.forEach(t),vCo=r(Kxe," (Megatron-BERT model)"),Kxe.forEach(t),FCo=i(x),H_=n(x,"LI",{});var Zxe=s(H_);vfe=n(Zxe,"STRONG",{});var C_t=s(vfe);TCo=r(C_t,"mobilebert"),C_t.forEach(t),MCo=r(Zxe," \u2014 "),sD=n(Zxe,"A",{href:!0});var w_t=s(sD);ECo=r(w_t,"MobileBertModel"),w_t.forEach(t),CCo=r(Zxe," (MobileBERT model)"),Zxe.forEach(t),wCo=i(x),U_=n(x,"LI",{});var e$e=s(U_);Ffe=n(e$e,"STRONG",{});var A_t=s(Ffe);ACo=r(A_t,"mobilevit"),A_t.forEach(t),LCo=r(e$e," \u2014 "),lD=n(e$e,"A",{href:!0});var L_t=s(lD);yCo=r(L_t,"MobileViTModel"),L_t.forEach(t),xCo=r(e$e," (MobileViT model)"),e$e.forEach(t),$Co=i(x),J_=n(x,"LI",{});var o$e=s(J_);Tfe=n(o$e,"STRONG",{});var y_t=s(Tfe);kCo=r(y_t,"mpnet"),y_t.forEach(t),SCo=r(o$e," \u2014 "),iD=n(o$e,"A",{href:!0});var x_t=s(iD);RCo=r(x_t,"MPNetModel"),x_t.forEach(t),PCo=r(o$e," (MPNet model)"),o$e.forEach(t),BCo=i(x),Y_=n(x,"LI",{});var r$e=s(Y_);Mfe=n(r$e,"STRONG",{});var $_t=s(Mfe);NCo=r($_t,"mt5"),$_t.forEach(t),ICo=r(r$e," \u2014 "),dD=n(r$e,"A",{href:!0});var k_t=s(dD);qCo=r(k_t,"MT5Model"),k_t.forEach(t),jCo=r(r$e," (MT5 model)"),r$e.forEach(t),DCo=i(x),K_=n(x,"LI",{});var t$e=s(K_);Efe=n(t$e,"STRONG",{});var S_t=s(Efe);GCo=r(S_t,"mvp"),S_t.forEach(t),OCo=r(t$e," \u2014 "),cD=n(t$e,"A",{href:!0});var R_t=s(cD);VCo=r(R_t,"MvpModel"),R_t.forEach(t),XCo=r(t$e," (MVP model)"),t$e.forEach(t),zCo=i(x),Z_=n(x,"LI",{});var a$e=s(Z_);Cfe=n(a$e,"STRONG",{});var P_t=s(Cfe);QCo=r(P_t,"nezha"),P_t.forEach(t),WCo=r(a$e," \u2014 "),fD=n(a$e,"A",{href:!0});var B_t=s(fD);HCo=r(B_t,"NezhaModel"),B_t.forEach(t),UCo=r(a$e," (Nezha model)"),a$e.forEach(t),JCo=i(x),eu=n(x,"LI",{});var n$e=s(eu);wfe=n(n$e,"STRONG",{});var N_t=s(wfe);YCo=r(N_t,"nystromformer"),N_t.forEach(t),KCo=r(n$e," \u2014 "),mD=n(n$e,"A",{href:!0});var I_t=s(mD);ZCo=r(I_t,"NystromformerModel"),I_t.forEach(t),e3o=r(n$e," (Nystr\xF6mformer model)"),n$e.forEach(t),o3o=i(x),ou=n(x,"LI",{});var s$e=s(ou);Afe=n(s$e,"STRONG",{});var q_t=s(Afe);r3o=r(q_t,"openai-gpt"),q_t.forEach(t),t3o=r(s$e," \u2014 "),gD=n(s$e,"A",{href:!0});var j_t=s(gD);a3o=r(j_t,"OpenAIGPTModel"),j_t.forEach(t),n3o=r(s$e," (OpenAI GPT model)"),s$e.forEach(t),s3o=i(x),ru=n(x,"LI",{});var l$e=s(ru);Lfe=n(l$e,"STRONG",{});var D_t=s(Lfe);l3o=r(D_t,"opt"),D_t.forEach(t),i3o=r(l$e," \u2014 "),hD=n(l$e,"A",{href:!0});var G_t=s(hD);d3o=r(G_t,"OPTModel"),G_t.forEach(t),c3o=r(l$e," (OPT model)"),l$e.forEach(t),f3o=i(x),tu=n(x,"LI",{});var i$e=s(tu);yfe=n(i$e,"STRONG",{});var O_t=s(yfe);m3o=r(O_t,"pegasus"),O_t.forEach(t),g3o=r(i$e," \u2014 "),pD=n(i$e,"A",{href:!0});var V_t=s(pD);h3o=r(V_t,"PegasusModel"),V_t.forEach(t),p3o=r(i$e," (Pegasus model)"),i$e.forEach(t),_3o=i(x),au=n(x,"LI",{});var d$e=s(au);xfe=n(d$e,"STRONG",{});var X_t=s(xfe);u3o=r(X_t,"perceiver"),X_t.forEach(t),b3o=r(d$e," \u2014 "),_D=n(d$e,"A",{href:!0});var z_t=s(_D);v3o=r(z_t,"PerceiverModel"),z_t.forEach(t),F3o=r(d$e," (Perceiver model)"),d$e.forEach(t),T3o=i(x),nu=n(x,"LI",{});var c$e=s(nu);$fe=n(c$e,"STRONG",{});var Q_t=s($fe);M3o=r(Q_t,"plbart"),Q_t.forEach(t),E3o=r(c$e," \u2014 "),uD=n(c$e,"A",{href:!0});var W_t=s(uD);C3o=r(W_t,"PLBartModel"),W_t.forEach(t),w3o=r(c$e," (PLBart model)"),c$e.forEach(t),A3o=i(x),su=n(x,"LI",{});var f$e=s(su);kfe=n(f$e,"STRONG",{});var H_t=s(kfe);L3o=r(H_t,"poolformer"),H_t.forEach(t),y3o=r(f$e," \u2014 "),bD=n(f$e,"A",{href:!0});var U_t=s(bD);x3o=r(U_t,"PoolFormerModel"),U_t.forEach(t),$3o=r(f$e," (PoolFormer model)"),f$e.forEach(t),k3o=i(x),lu=n(x,"LI",{});var m$e=s(lu);Sfe=n(m$e,"STRONG",{});var J_t=s(Sfe);S3o=r(J_t,"prophetnet"),J_t.forEach(t),R3o=r(m$e," \u2014 "),vD=n(m$e,"A",{href:!0});var Y_t=s(vD);P3o=r(Y_t,"ProphetNetModel"),Y_t.forEach(t),B3o=r(m$e," (ProphetNet model)"),m$e.forEach(t),N3o=i(x),iu=n(x,"LI",{});var g$e=s(iu);Rfe=n(g$e,"STRONG",{});var K_t=s(Rfe);I3o=r(K_t,"qdqbert"),K_t.forEach(t),q3o=r(g$e," \u2014 "),FD=n(g$e,"A",{href:!0});var Z_t=s(FD);j3o=r(Z_t,"QDQBertModel"),Z_t.forEach(t),D3o=r(g$e," (QDQBert model)"),g$e.forEach(t),G3o=i(x),du=n(x,"LI",{});var h$e=s(du);Pfe=n(h$e,"STRONG",{});var eut=s(Pfe);O3o=r(eut,"reformer"),eut.forEach(t),V3o=r(h$e," \u2014 "),TD=n(h$e,"A",{href:!0});var out=s(TD);X3o=r(out,"ReformerModel"),out.forEach(t),z3o=r(h$e," (Reformer model)"),h$e.forEach(t),Q3o=i(x),cu=n(x,"LI",{});var p$e=s(cu);Bfe=n(p$e,"STRONG",{});var rut=s(Bfe);W3o=r(rut,"regnet"),rut.forEach(t),H3o=r(p$e," \u2014 "),MD=n(p$e,"A",{href:!0});var tut=s(MD);U3o=r(tut,"RegNetModel"),tut.forEach(t),J3o=r(p$e," (RegNet model)"),p$e.forEach(t),Y3o=i(x),fu=n(x,"LI",{});var _$e=s(fu);Nfe=n(_$e,"STRONG",{});var aut=s(Nfe);K3o=r(aut,"rembert"),aut.forEach(t),Z3o=r(_$e," \u2014 "),ED=n(_$e,"A",{href:!0});var nut=s(ED);e5o=r(nut,"RemBertModel"),nut.forEach(t),o5o=r(_$e," (RemBERT model)"),_$e.forEach(t),r5o=i(x),mu=n(x,"LI",{});var u$e=s(mu);Ife=n(u$e,"STRONG",{});var sut=s(Ife);t5o=r(sut,"resnet"),sut.forEach(t),a5o=r(u$e," \u2014 "),CD=n(u$e,"A",{href:!0});var lut=s(CD);n5o=r(lut,"ResNetModel"),lut.forEach(t),s5o=r(u$e," (ResNet model)"),u$e.forEach(t),l5o=i(x),gu=n(x,"LI",{});var b$e=s(gu);qfe=n(b$e,"STRONG",{});var iut=s(qfe);i5o=r(iut,"retribert"),iut.forEach(t),d5o=r(b$e," \u2014 "),wD=n(b$e,"A",{href:!0});var dut=s(wD);c5o=r(dut,"RetriBertModel"),dut.forEach(t),f5o=r(b$e," (RetriBERT model)"),b$e.forEach(t),m5o=i(x),hu=n(x,"LI",{});var v$e=s(hu);jfe=n(v$e,"STRONG",{});var cut=s(jfe);g5o=r(cut,"roberta"),cut.forEach(t),h5o=r(v$e," \u2014 "),AD=n(v$e,"A",{href:!0});var fut=s(AD);p5o=r(fut,"RobertaModel"),fut.forEach(t),_5o=r(v$e," (RoBERTa model)"),v$e.forEach(t),u5o=i(x),pu=n(x,"LI",{});var F$e=s(pu);Dfe=n(F$e,"STRONG",{});var mut=s(Dfe);b5o=r(mut,"roformer"),mut.forEach(t),v5o=r(F$e," \u2014 "),LD=n(F$e,"A",{href:!0});var gut=s(LD);F5o=r(gut,"RoFormerModel"),gut.forEach(t),T5o=r(F$e," (RoFormer model)"),F$e.forEach(t),M5o=i(x),_u=n(x,"LI",{});var T$e=s(_u);Gfe=n(T$e,"STRONG",{});var hut=s(Gfe);E5o=r(hut,"segformer"),hut.forEach(t),C5o=r(T$e," \u2014 "),yD=n(T$e,"A",{href:!0});var put=s(yD);w5o=r(put,"SegformerModel"),put.forEach(t),A5o=r(T$e," (SegFormer model)"),T$e.forEach(t),L5o=i(x),uu=n(x,"LI",{});var M$e=s(uu);Ofe=n(M$e,"STRONG",{});var _ut=s(Ofe);y5o=r(_ut,"sew"),_ut.forEach(t),x5o=r(M$e," \u2014 "),xD=n(M$e,"A",{href:!0});var uut=s(xD);$5o=r(uut,"SEWModel"),uut.forEach(t),k5o=r(M$e," (SEW model)"),M$e.forEach(t),S5o=i(x),bu=n(x,"LI",{});var E$e=s(bu);Vfe=n(E$e,"STRONG",{});var but=s(Vfe);R5o=r(but,"sew-d"),but.forEach(t),P5o=r(E$e," \u2014 "),$D=n(E$e,"A",{href:!0});var vut=s($D);B5o=r(vut,"SEWDModel"),vut.forEach(t),N5o=r(E$e," (SEW-D model)"),E$e.forEach(t),I5o=i(x),vu=n(x,"LI",{});var C$e=s(vu);Xfe=n(C$e,"STRONG",{});var Fut=s(Xfe);q5o=r(Fut,"speech_to_text"),Fut.forEach(t),j5o=r(C$e," \u2014 "),kD=n(C$e,"A",{href:!0});var Tut=s(kD);D5o=r(Tut,"Speech2TextModel"),Tut.forEach(t),G5o=r(C$e," (Speech2Text model)"),C$e.forEach(t),O5o=i(x),Fu=n(x,"LI",{});var w$e=s(Fu);zfe=n(w$e,"STRONG",{});var Mut=s(zfe);V5o=r(Mut,"splinter"),Mut.forEach(t),X5o=r(w$e," \u2014 "),SD=n(w$e,"A",{href:!0});var Eut=s(SD);z5o=r(Eut,"SplinterModel"),Eut.forEach(t),Q5o=r(w$e," (Splinter model)"),w$e.forEach(t),W5o=i(x),Tu=n(x,"LI",{});var A$e=s(Tu);Qfe=n(A$e,"STRONG",{});var Cut=s(Qfe);H5o=r(Cut,"squeezebert"),Cut.forEach(t),U5o=r(A$e," \u2014 "),RD=n(A$e,"A",{href:!0});var wut=s(RD);J5o=r(wut,"SqueezeBertModel"),wut.forEach(t),Y5o=r(A$e," (SqueezeBERT model)"),A$e.forEach(t),K5o=i(x),Mu=n(x,"LI",{});var L$e=s(Mu);Wfe=n(L$e,"STRONG",{});var Aut=s(Wfe);Z5o=r(Aut,"swin"),Aut.forEach(t),e0o=r(L$e," \u2014 "),PD=n(L$e,"A",{href:!0});var Lut=s(PD);o0o=r(Lut,"SwinModel"),Lut.forEach(t),r0o=r(L$e," (Swin Transformer model)"),L$e.forEach(t),t0o=i(x),Eu=n(x,"LI",{});var y$e=s(Eu);Hfe=n(y$e,"STRONG",{});var yut=s(Hfe);a0o=r(yut,"t5"),yut.forEach(t),n0o=r(y$e," \u2014 "),BD=n(y$e,"A",{href:!0});var xut=s(BD);s0o=r(xut,"T5Model"),xut.forEach(t),l0o=r(y$e," (T5 model)"),y$e.forEach(t),i0o=i(x),Cu=n(x,"LI",{});var x$e=s(Cu);Ufe=n(x$e,"STRONG",{});var $ut=s(Ufe);d0o=r($ut,"tapas"),$ut.forEach(t),c0o=r(x$e," \u2014 "),ND=n(x$e,"A",{href:!0});var kut=s(ND);f0o=r(kut,"TapasModel"),kut.forEach(t),m0o=r(x$e," (TAPAS model)"),x$e.forEach(t),g0o=i(x),wu=n(x,"LI",{});var $$e=s(wu);Jfe=n($$e,"STRONG",{});var Sut=s(Jfe);h0o=r(Sut,"trajectory_transformer"),Sut.forEach(t),p0o=r($$e," \u2014 "),ID=n($$e,"A",{href:!0});var Rut=s(ID);_0o=r(Rut,"TrajectoryTransformerModel"),Rut.forEach(t),u0o=r($$e," (Trajectory Transformer model)"),$$e.forEach(t),b0o=i(x),Au=n(x,"LI",{});var k$e=s(Au);Yfe=n(k$e,"STRONG",{});var Put=s(Yfe);v0o=r(Put,"transfo-xl"),Put.forEach(t),F0o=r(k$e," \u2014 "),qD=n(k$e,"A",{href:!0});var But=s(qD);T0o=r(But,"TransfoXLModel"),But.forEach(t),M0o=r(k$e," (Transformer-XL model)"),k$e.forEach(t),E0o=i(x),Lu=n(x,"LI",{});var S$e=s(Lu);Kfe=n(S$e,"STRONG",{});var Nut=s(Kfe);C0o=r(Nut,"unispeech"),Nut.forEach(t),w0o=r(S$e," \u2014 "),jD=n(S$e,"A",{href:!0});var Iut=s(jD);A0o=r(Iut,"UniSpeechModel"),Iut.forEach(t),L0o=r(S$e," (UniSpeech model)"),S$e.forEach(t),y0o=i(x),yu=n(x,"LI",{});var R$e=s(yu);Zfe=n(R$e,"STRONG",{});var qut=s(Zfe);x0o=r(qut,"unispeech-sat"),qut.forEach(t),$0o=r(R$e," \u2014 "),DD=n(R$e,"A",{href:!0});var jut=s(DD);k0o=r(jut,"UniSpeechSatModel"),jut.forEach(t),S0o=r(R$e," (UniSpeechSat model)"),R$e.forEach(t),R0o=i(x),xu=n(x,"LI",{});var P$e=s(xu);eme=n(P$e,"STRONG",{});var Dut=s(eme);P0o=r(Dut,"van"),Dut.forEach(t),B0o=r(P$e," \u2014 "),GD=n(P$e,"A",{href:!0});var Gut=s(GD);N0o=r(Gut,"VanModel"),Gut.forEach(t),I0o=r(P$e," (VAN model)"),P$e.forEach(t),q0o=i(x),$u=n(x,"LI",{});var B$e=s($u);ome=n(B$e,"STRONG",{});var Out=s(ome);j0o=r(Out,"vilt"),Out.forEach(t),D0o=r(B$e," \u2014 "),OD=n(B$e,"A",{href:!0});var Vut=s(OD);G0o=r(Vut,"ViltModel"),Vut.forEach(t),O0o=r(B$e," (ViLT model)"),B$e.forEach(t),V0o=i(x),ku=n(x,"LI",{});var N$e=s(ku);rme=n(N$e,"STRONG",{});var Xut=s(rme);X0o=r(Xut,"vision-text-dual-encoder"),Xut.forEach(t),z0o=r(N$e," \u2014 "),VD=n(N$e,"A",{href:!0});var zut=s(VD);Q0o=r(zut,"VisionTextDualEncoderModel"),zut.forEach(t),W0o=r(N$e," (VisionTextDualEncoder model)"),N$e.forEach(t),H0o=i(x),Su=n(x,"LI",{});var I$e=s(Su);tme=n(I$e,"STRONG",{});var Qut=s(tme);U0o=r(Qut,"visual_bert"),Qut.forEach(t),J0o=r(I$e," \u2014 "),XD=n(I$e,"A",{href:!0});var Wut=s(XD);Y0o=r(Wut,"VisualBertModel"),Wut.forEach(t),K0o=r(I$e," (VisualBERT model)"),I$e.forEach(t),Z0o=i(x),Ru=n(x,"LI",{});var q$e=s(Ru);ame=n(q$e,"STRONG",{});var Hut=s(ame);ewo=r(Hut,"vit"),Hut.forEach(t),owo=r(q$e," \u2014 "),zD=n(q$e,"A",{href:!0});var Uut=s(zD);rwo=r(Uut,"ViTModel"),Uut.forEach(t),two=r(q$e," (ViT model)"),q$e.forEach(t),awo=i(x),Pu=n(x,"LI",{});var j$e=s(Pu);nme=n(j$e,"STRONG",{});var Jut=s(nme);nwo=r(Jut,"vit_mae"),Jut.forEach(t),swo=r(j$e," \u2014 "),QD=n(j$e,"A",{href:!0});var Yut=s(QD);lwo=r(Yut,"ViTMAEModel"),Yut.forEach(t),iwo=r(j$e," (ViTMAE model)"),j$e.forEach(t),dwo=i(x),Bu=n(x,"LI",{});var D$e=s(Bu);sme=n(D$e,"STRONG",{});var Kut=s(sme);cwo=r(Kut,"wav2vec2"),Kut.forEach(t),fwo=r(D$e," \u2014 "),WD=n(D$e,"A",{href:!0});var Zut=s(WD);mwo=r(Zut,"Wav2Vec2Model"),Zut.forEach(t),gwo=r(D$e," (Wav2Vec2 model)"),D$e.forEach(t),hwo=i(x),Nu=n(x,"LI",{});var G$e=s(Nu);lme=n(G$e,"STRONG",{});var e1t=s(lme);pwo=r(e1t,"wav2vec2-conformer"),e1t.forEach(t),_wo=r(G$e," \u2014 "),HD=n(G$e,"A",{href:!0});var o1t=s(HD);uwo=r(o1t,"Wav2Vec2ConformerModel"),o1t.forEach(t),bwo=r(G$e," (Wav2Vec2-Conformer model)"),G$e.forEach(t),vwo=i(x),Iu=n(x,"LI",{});var O$e=s(Iu);ime=n(O$e,"STRONG",{});var r1t=s(ime);Fwo=r(r1t,"wavlm"),r1t.forEach(t),Two=r(O$e," \u2014 "),UD=n(O$e,"A",{href:!0});var t1t=s(UD);Mwo=r(t1t,"WavLMModel"),t1t.forEach(t),Ewo=r(O$e," (WavLM model)"),O$e.forEach(t),Cwo=i(x),qu=n(x,"LI",{});var V$e=s(qu);dme=n(V$e,"STRONG",{});var a1t=s(dme);wwo=r(a1t,"xglm"),a1t.forEach(t),Awo=r(V$e," \u2014 "),JD=n(V$e,"A",{href:!0});var n1t=s(JD);Lwo=r(n1t,"XGLMModel"),n1t.forEach(t),ywo=r(V$e," (XGLM model)"),V$e.forEach(t),xwo=i(x),ju=n(x,"LI",{});var X$e=s(ju);cme=n(X$e,"STRONG",{});var s1t=s(cme);$wo=r(s1t,"xlm"),s1t.forEach(t),kwo=r(X$e," \u2014 "),YD=n(X$e,"A",{href:!0});var l1t=s(YD);Swo=r(l1t,"XLMModel"),l1t.forEach(t),Rwo=r(X$e," (XLM model)"),X$e.forEach(t),Pwo=i(x),Du=n(x,"LI",{});var z$e=s(Du);fme=n(z$e,"STRONG",{});var i1t=s(fme);Bwo=r(i1t,"xlm-prophetnet"),i1t.forEach(t),Nwo=r(z$e," \u2014 "),KD=n(z$e,"A",{href:!0});var d1t=s(KD);Iwo=r(d1t,"XLMProphetNetModel"),d1t.forEach(t),qwo=r(z$e," (XLM-ProphetNet model)"),z$e.forEach(t),jwo=i(x),Gu=n(x,"LI",{});var Q$e=s(Gu);mme=n(Q$e,"STRONG",{});var c1t=s(mme);Dwo=r(c1t,"xlm-roberta"),c1t.forEach(t),Gwo=r(Q$e," \u2014 "),ZD=n(Q$e,"A",{href:!0});var f1t=s(ZD);Owo=r(f1t,"XLMRobertaModel"),f1t.forEach(t),Vwo=r(Q$e," (XLM-RoBERTa model)"),Q$e.forEach(t),Xwo=i(x),Ou=n(x,"LI",{});var W$e=s(Ou);gme=n(W$e,"STRONG",{});var m1t=s(gme);zwo=r(m1t,"xlm-roberta-xl"),m1t.forEach(t),Qwo=r(W$e," \u2014 "),eG=n(W$e,"A",{href:!0});var g1t=s(eG);Wwo=r(g1t,"XLMRobertaXLModel"),g1t.forEach(t),Hwo=r(W$e," (XLM-RoBERTa-XL model)"),W$e.forEach(t),Uwo=i(x),Vu=n(x,"LI",{});var H$e=s(Vu);hme=n(H$e,"STRONG",{});var h1t=s(hme);Jwo=r(h1t,"xlnet"),h1t.forEach(t),Ywo=r(H$e," \u2014 "),oG=n(H$e,"A",{href:!0});var p1t=s(oG);Kwo=r(p1t,"XLNetModel"),p1t.forEach(t),Zwo=r(H$e," (XLNet model)"),H$e.forEach(t),eAo=i(x),Xu=n(x,"LI",{});var U$e=s(Xu);pme=n(U$e,"STRONG",{});var _1t=s(pme);oAo=r(_1t,"yolos"),_1t.forEach(t),rAo=r(U$e," \u2014 "),rG=n(U$e,"A",{href:!0});var u1t=s(rG);tAo=r(u1t,"YolosModel"),u1t.forEach(t),aAo=r(U$e," (YOLOS model)"),U$e.forEach(t),nAo=i(x),zu=n(x,"LI",{});var J$e=s(zu);_me=n(J$e,"STRONG",{});var b1t=s(_me);sAo=r(b1t,"yoso"),b1t.forEach(t),lAo=r(J$e," \u2014 "),tG=n(J$e,"A",{href:!0});var v1t=s(tG);iAo=r(v1t,"YosoModel"),v1t.forEach(t),dAo=r(J$e," (YOSO model)"),J$e.forEach(t),x.forEach(t),cAo=i(la),Qu=n(la,"P",{});var Y$e=s(Qu);fAo=r(Y$e,"The model is set in evaluation mode by default using "),ume=n(Y$e,"CODE",{});var F1t=s(ume);mAo=r(F1t,"model.eval()"),F1t.forEach(t),gAo=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(Y$e,"CODE",{});var T1t=s(bme);hAo=r(T1t,"model.train()"),T1t.forEach(t),Y$e.forEach(t),pAo=i(la),T(Wu.$$.fragment,la),la.forEach(t),tl.forEach(t),uXe=i(f),zi=n(f,"H2",{class:!0});var EQe=s(zi);Hu=n(EQe,"A",{id:!0,class:!0,href:!0});var M1t=s(Hu);vme=n(M1t,"SPAN",{});var E1t=s(vme);T(NL.$$.fragment,E1t),E1t.forEach(t),M1t.forEach(t),_Ao=i(EQe),Fme=n(EQe,"SPAN",{});var C1t=s(Fme);uAo=r(C1t,"AutoModelForPreTraining"),C1t.forEach(t),EQe.forEach(t),bXe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(IL.$$.fragment,al),bAo=i(al),Qi=n(al,"P",{});var Ire=s(Qi);vAo=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aG=n(Ire,"A",{href:!0});var w1t=s(aG);FAo=r(w1t,"from_pretrained()"),w1t.forEach(t),TAo=r(Ire," class method or the "),nG=n(Ire,"A",{href:!0});var A1t=s(nG);MAo=r(A1t,"from_config()"),A1t.forEach(t),EAo=r(Ire,` class
method.`),Ire.forEach(t),CAo=i(al),qL=n(al,"P",{});var CQe=s(qL);wAo=r(CQe,"This class cannot be instantiated directly using "),Tme=n(CQe,"CODE",{});var L1t=s(Tme);AAo=r(L1t,"__init__()"),L1t.forEach(t),LAo=r(CQe," (throws an error)."),CQe.forEach(t),yAo=i(al),dt=n(al,"DIV",{class:!0});var fA=s(dt);T(jL.$$.fragment,fA),xAo=i(fA),Mme=n(fA,"P",{});var y1t=s(Mme);$Ao=r(y1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),y1t.forEach(t),kAo=i(fA),Wi=n(fA,"P",{});var qre=s(Wi);SAo=r(qre,`Note:
Loading a model from its configuration file does `),Eme=n(qre,"STRONG",{});var x1t=s(Eme);RAo=r(x1t,"not"),x1t.forEach(t),PAo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=n(qre,"A",{href:!0});var $1t=s(sG);BAo=r($1t,"from_pretrained()"),$1t.forEach(t),NAo=r(qre," to load the model weights."),qre.forEach(t),IAo=i(fA),T(Uu.$$.fragment,fA),fA.forEach(t),qAo=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(DL.$$.fragment,ia),jAo=i(ia),Cme=n(ia,"P",{});var k1t=s(Cme);DAo=r(k1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),k1t.forEach(t),GAo=i(ia),Ia=n(ia,"P",{});var mA=s(Ia);OAo=r(mA,"The model class to instantiate is selected based on the "),wme=n(mA,"CODE",{});var S1t=s(wme);VAo=r(S1t,"model_type"),S1t.forEach(t),XAo=r(mA,` property of the config object (either
passed as an argument or loaded from `),Ame=n(mA,"CODE",{});var R1t=s(Ame);zAo=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),QAo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(mA,"CODE",{});var P1t=s(Lme);WAo=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),HAo=r(mA,":"),mA.forEach(t),UAo=i(ia),G=n(ia,"UL",{});var O=s(G);Ju=n(O,"LI",{});var K$e=s(Ju);yme=n(K$e,"STRONG",{});var B1t=s(yme);JAo=r(B1t,"albert"),B1t.forEach(t),YAo=r(K$e," \u2014 "),lG=n(K$e,"A",{href:!0});var N1t=s(lG);KAo=r(N1t,"AlbertForPreTraining"),N1t.forEach(t),ZAo=r(K$e," (ALBERT model)"),K$e.forEach(t),e7o=i(O),Yu=n(O,"LI",{});var Z$e=s(Yu);xme=n(Z$e,"STRONG",{});var I1t=s(xme);o7o=r(I1t,"bart"),I1t.forEach(t),r7o=r(Z$e," \u2014 "),iG=n(Z$e,"A",{href:!0});var q1t=s(iG);t7o=r(q1t,"BartForConditionalGeneration"),q1t.forEach(t),a7o=r(Z$e," (BART model)"),Z$e.forEach(t),n7o=i(O),Ku=n(O,"LI",{});var eke=s(Ku);$me=n(eke,"STRONG",{});var j1t=s($me);s7o=r(j1t,"bert"),j1t.forEach(t),l7o=r(eke," \u2014 "),dG=n(eke,"A",{href:!0});var D1t=s(dG);i7o=r(D1t,"BertForPreTraining"),D1t.forEach(t),d7o=r(eke," (BERT model)"),eke.forEach(t),c7o=i(O),Zu=n(O,"LI",{});var oke=s(Zu);kme=n(oke,"STRONG",{});var G1t=s(kme);f7o=r(G1t,"big_bird"),G1t.forEach(t),m7o=r(oke," \u2014 "),cG=n(oke,"A",{href:!0});var O1t=s(cG);g7o=r(O1t,"BigBirdForPreTraining"),O1t.forEach(t),h7o=r(oke," (BigBird model)"),oke.forEach(t),p7o=i(O),e1=n(O,"LI",{});var rke=s(e1);Sme=n(rke,"STRONG",{});var V1t=s(Sme);_7o=r(V1t,"bloom"),V1t.forEach(t),u7o=r(rke," \u2014 "),fG=n(rke,"A",{href:!0});var X1t=s(fG);b7o=r(X1t,"BloomForCausalLM"),X1t.forEach(t),v7o=r(rke," (BLOOM model)"),rke.forEach(t),F7o=i(O),o1=n(O,"LI",{});var tke=s(o1);Rme=n(tke,"STRONG",{});var z1t=s(Rme);T7o=r(z1t,"camembert"),z1t.forEach(t),M7o=r(tke," \u2014 "),mG=n(tke,"A",{href:!0});var Q1t=s(mG);E7o=r(Q1t,"CamembertForMaskedLM"),Q1t.forEach(t),C7o=r(tke," (CamemBERT model)"),tke.forEach(t),w7o=i(O),r1=n(O,"LI",{});var ake=s(r1);Pme=n(ake,"STRONG",{});var W1t=s(Pme);A7o=r(W1t,"ctrl"),W1t.forEach(t),L7o=r(ake," \u2014 "),gG=n(ake,"A",{href:!0});var H1t=s(gG);y7o=r(H1t,"CTRLLMHeadModel"),H1t.forEach(t),x7o=r(ake," (CTRL model)"),ake.forEach(t),$7o=i(O),t1=n(O,"LI",{});var nke=s(t1);Bme=n(nke,"STRONG",{});var U1t=s(Bme);k7o=r(U1t,"data2vec-text"),U1t.forEach(t),S7o=r(nke," \u2014 "),hG=n(nke,"A",{href:!0});var J1t=s(hG);R7o=r(J1t,"Data2VecTextForMaskedLM"),J1t.forEach(t),P7o=r(nke," (Data2VecText model)"),nke.forEach(t),B7o=i(O),a1=n(O,"LI",{});var ske=s(a1);Nme=n(ske,"STRONG",{});var Y1t=s(Nme);N7o=r(Y1t,"deberta"),Y1t.forEach(t),I7o=r(ske," \u2014 "),pG=n(ske,"A",{href:!0});var K1t=s(pG);q7o=r(K1t,"DebertaForMaskedLM"),K1t.forEach(t),j7o=r(ske," (DeBERTa model)"),ske.forEach(t),D7o=i(O),n1=n(O,"LI",{});var lke=s(n1);Ime=n(lke,"STRONG",{});var Z1t=s(Ime);G7o=r(Z1t,"deberta-v2"),Z1t.forEach(t),O7o=r(lke," \u2014 "),_G=n(lke,"A",{href:!0});var e2t=s(_G);V7o=r(e2t,"DebertaV2ForMaskedLM"),e2t.forEach(t),X7o=r(lke," (DeBERTa-v2 model)"),lke.forEach(t),z7o=i(O),s1=n(O,"LI",{});var ike=s(s1);qme=n(ike,"STRONG",{});var o2t=s(qme);Q7o=r(o2t,"distilbert"),o2t.forEach(t),W7o=r(ike," \u2014 "),uG=n(ike,"A",{href:!0});var r2t=s(uG);H7o=r(r2t,"DistilBertForMaskedLM"),r2t.forEach(t),U7o=r(ike," (DistilBERT model)"),ike.forEach(t),J7o=i(O),l1=n(O,"LI",{});var dke=s(l1);jme=n(dke,"STRONG",{});var t2t=s(jme);Y7o=r(t2t,"electra"),t2t.forEach(t),K7o=r(dke," \u2014 "),bG=n(dke,"A",{href:!0});var a2t=s(bG);Z7o=r(a2t,"ElectraForPreTraining"),a2t.forEach(t),eLo=r(dke," (ELECTRA model)"),dke.forEach(t),oLo=i(O),i1=n(O,"LI",{});var cke=s(i1);Dme=n(cke,"STRONG",{});var n2t=s(Dme);rLo=r(n2t,"flaubert"),n2t.forEach(t),tLo=r(cke," \u2014 "),vG=n(cke,"A",{href:!0});var s2t=s(vG);aLo=r(s2t,"FlaubertWithLMHeadModel"),s2t.forEach(t),nLo=r(cke," (FlauBERT model)"),cke.forEach(t),sLo=i(O),d1=n(O,"LI",{});var fke=s(d1);Gme=n(fke,"STRONG",{});var l2t=s(Gme);lLo=r(l2t,"flava"),l2t.forEach(t),iLo=r(fke," \u2014 "),FG=n(fke,"A",{href:!0});var i2t=s(FG);dLo=r(i2t,"FlavaForPreTraining"),i2t.forEach(t),cLo=r(fke," (FLAVA model)"),fke.forEach(t),fLo=i(O),c1=n(O,"LI",{});var mke=s(c1);Ome=n(mke,"STRONG",{});var d2t=s(Ome);mLo=r(d2t,"fnet"),d2t.forEach(t),gLo=r(mke," \u2014 "),TG=n(mke,"A",{href:!0});var c2t=s(TG);hLo=r(c2t,"FNetForPreTraining"),c2t.forEach(t),pLo=r(mke," (FNet model)"),mke.forEach(t),_Lo=i(O),f1=n(O,"LI",{});var gke=s(f1);Vme=n(gke,"STRONG",{});var f2t=s(Vme);uLo=r(f2t,"fsmt"),f2t.forEach(t),bLo=r(gke," \u2014 "),MG=n(gke,"A",{href:!0});var m2t=s(MG);vLo=r(m2t,"FSMTForConditionalGeneration"),m2t.forEach(t),FLo=r(gke," (FairSeq Machine-Translation model)"),gke.forEach(t),TLo=i(O),m1=n(O,"LI",{});var hke=s(m1);Xme=n(hke,"STRONG",{});var g2t=s(Xme);MLo=r(g2t,"funnel"),g2t.forEach(t),ELo=r(hke," \u2014 "),EG=n(hke,"A",{href:!0});var h2t=s(EG);CLo=r(h2t,"FunnelForPreTraining"),h2t.forEach(t),wLo=r(hke," (Funnel Transformer model)"),hke.forEach(t),ALo=i(O),g1=n(O,"LI",{});var pke=s(g1);zme=n(pke,"STRONG",{});var p2t=s(zme);LLo=r(p2t,"gpt2"),p2t.forEach(t),yLo=r(pke," \u2014 "),CG=n(pke,"A",{href:!0});var _2t=s(CG);xLo=r(_2t,"GPT2LMHeadModel"),_2t.forEach(t),$Lo=r(pke," (OpenAI GPT-2 model)"),pke.forEach(t),kLo=i(O),h1=n(O,"LI",{});var _ke=s(h1);Qme=n(_ke,"STRONG",{});var u2t=s(Qme);SLo=r(u2t,"ibert"),u2t.forEach(t),RLo=r(_ke," \u2014 "),wG=n(_ke,"A",{href:!0});var b2t=s(wG);PLo=r(b2t,"IBertForMaskedLM"),b2t.forEach(t),BLo=r(_ke," (I-BERT model)"),_ke.forEach(t),NLo=i(O),p1=n(O,"LI",{});var uke=s(p1);Wme=n(uke,"STRONG",{});var v2t=s(Wme);ILo=r(v2t,"layoutlm"),v2t.forEach(t),qLo=r(uke," \u2014 "),AG=n(uke,"A",{href:!0});var F2t=s(AG);jLo=r(F2t,"LayoutLMForMaskedLM"),F2t.forEach(t),DLo=r(uke," (LayoutLM model)"),uke.forEach(t),GLo=i(O),_1=n(O,"LI",{});var bke=s(_1);Hme=n(bke,"STRONG",{});var T2t=s(Hme);OLo=r(T2t,"longformer"),T2t.forEach(t),VLo=r(bke," \u2014 "),LG=n(bke,"A",{href:!0});var M2t=s(LG);XLo=r(M2t,"LongformerForMaskedLM"),M2t.forEach(t),zLo=r(bke," (Longformer model)"),bke.forEach(t),QLo=i(O),u1=n(O,"LI",{});var vke=s(u1);Ume=n(vke,"STRONG",{});var E2t=s(Ume);WLo=r(E2t,"lxmert"),E2t.forEach(t),HLo=r(vke," \u2014 "),yG=n(vke,"A",{href:!0});var C2t=s(yG);ULo=r(C2t,"LxmertForPreTraining"),C2t.forEach(t),JLo=r(vke," (LXMERT model)"),vke.forEach(t),YLo=i(O),b1=n(O,"LI",{});var Fke=s(b1);Jme=n(Fke,"STRONG",{});var w2t=s(Jme);KLo=r(w2t,"megatron-bert"),w2t.forEach(t),ZLo=r(Fke," \u2014 "),xG=n(Fke,"A",{href:!0});var A2t=s(xG);eyo=r(A2t,"MegatronBertForPreTraining"),A2t.forEach(t),oyo=r(Fke," (Megatron-BERT model)"),Fke.forEach(t),ryo=i(O),v1=n(O,"LI",{});var Tke=s(v1);Yme=n(Tke,"STRONG",{});var L2t=s(Yme);tyo=r(L2t,"mobilebert"),L2t.forEach(t),ayo=r(Tke," \u2014 "),$G=n(Tke,"A",{href:!0});var y2t=s($G);nyo=r(y2t,"MobileBertForPreTraining"),y2t.forEach(t),syo=r(Tke," (MobileBERT model)"),Tke.forEach(t),lyo=i(O),F1=n(O,"LI",{});var Mke=s(F1);Kme=n(Mke,"STRONG",{});var x2t=s(Kme);iyo=r(x2t,"mpnet"),x2t.forEach(t),dyo=r(Mke," \u2014 "),kG=n(Mke,"A",{href:!0});var $2t=s(kG);cyo=r($2t,"MPNetForMaskedLM"),$2t.forEach(t),fyo=r(Mke," (MPNet model)"),Mke.forEach(t),myo=i(O),T1=n(O,"LI",{});var Eke=s(T1);Zme=n(Eke,"STRONG",{});var k2t=s(Zme);gyo=r(k2t,"mvp"),k2t.forEach(t),hyo=r(Eke," \u2014 "),SG=n(Eke,"A",{href:!0});var S2t=s(SG);pyo=r(S2t,"MvpForConditionalGeneration"),S2t.forEach(t),_yo=r(Eke," (MVP model)"),Eke.forEach(t),uyo=i(O),M1=n(O,"LI",{});var Cke=s(M1);ege=n(Cke,"STRONG",{});var R2t=s(ege);byo=r(R2t,"nezha"),R2t.forEach(t),vyo=r(Cke," \u2014 "),RG=n(Cke,"A",{href:!0});var P2t=s(RG);Fyo=r(P2t,"NezhaForPreTraining"),P2t.forEach(t),Tyo=r(Cke," (Nezha model)"),Cke.forEach(t),Myo=i(O),E1=n(O,"LI",{});var wke=s(E1);oge=n(wke,"STRONG",{});var B2t=s(oge);Eyo=r(B2t,"openai-gpt"),B2t.forEach(t),Cyo=r(wke," \u2014 "),PG=n(wke,"A",{href:!0});var N2t=s(PG);wyo=r(N2t,"OpenAIGPTLMHeadModel"),N2t.forEach(t),Ayo=r(wke," (OpenAI GPT model)"),wke.forEach(t),Lyo=i(O),C1=n(O,"LI",{});var Ake=s(C1);rge=n(Ake,"STRONG",{});var I2t=s(rge);yyo=r(I2t,"retribert"),I2t.forEach(t),xyo=r(Ake," \u2014 "),BG=n(Ake,"A",{href:!0});var q2t=s(BG);$yo=r(q2t,"RetriBertModel"),q2t.forEach(t),kyo=r(Ake," (RetriBERT model)"),Ake.forEach(t),Syo=i(O),w1=n(O,"LI",{});var Lke=s(w1);tge=n(Lke,"STRONG",{});var j2t=s(tge);Ryo=r(j2t,"roberta"),j2t.forEach(t),Pyo=r(Lke," \u2014 "),NG=n(Lke,"A",{href:!0});var D2t=s(NG);Byo=r(D2t,"RobertaForMaskedLM"),D2t.forEach(t),Nyo=r(Lke," (RoBERTa model)"),Lke.forEach(t),Iyo=i(O),A1=n(O,"LI",{});var yke=s(A1);age=n(yke,"STRONG",{});var G2t=s(age);qyo=r(G2t,"splinter"),G2t.forEach(t),jyo=r(yke," \u2014 "),IG=n(yke,"A",{href:!0});var O2t=s(IG);Dyo=r(O2t,"SplinterForPreTraining"),O2t.forEach(t),Gyo=r(yke," (Splinter model)"),yke.forEach(t),Oyo=i(O),L1=n(O,"LI",{});var xke=s(L1);nge=n(xke,"STRONG",{});var V2t=s(nge);Vyo=r(V2t,"squeezebert"),V2t.forEach(t),Xyo=r(xke," \u2014 "),qG=n(xke,"A",{href:!0});var X2t=s(qG);zyo=r(X2t,"SqueezeBertForMaskedLM"),X2t.forEach(t),Qyo=r(xke," (SqueezeBERT model)"),xke.forEach(t),Wyo=i(O),y1=n(O,"LI",{});var $ke=s(y1);sge=n($ke,"STRONG",{});var z2t=s(sge);Hyo=r(z2t,"t5"),z2t.forEach(t),Uyo=r($ke," \u2014 "),jG=n($ke,"A",{href:!0});var Q2t=s(jG);Jyo=r(Q2t,"T5ForConditionalGeneration"),Q2t.forEach(t),Yyo=r($ke," (T5 model)"),$ke.forEach(t),Kyo=i(O),x1=n(O,"LI",{});var kke=s(x1);lge=n(kke,"STRONG",{});var W2t=s(lge);Zyo=r(W2t,"tapas"),W2t.forEach(t),e9o=r(kke," \u2014 "),DG=n(kke,"A",{href:!0});var H2t=s(DG);o9o=r(H2t,"TapasForMaskedLM"),H2t.forEach(t),r9o=r(kke," (TAPAS model)"),kke.forEach(t),t9o=i(O),$1=n(O,"LI",{});var Ske=s($1);ige=n(Ske,"STRONG",{});var U2t=s(ige);a9o=r(U2t,"transfo-xl"),U2t.forEach(t),n9o=r(Ske," \u2014 "),GG=n(Ske,"A",{href:!0});var J2t=s(GG);s9o=r(J2t,"TransfoXLLMHeadModel"),J2t.forEach(t),l9o=r(Ske," (Transformer-XL model)"),Ske.forEach(t),i9o=i(O),k1=n(O,"LI",{});var Rke=s(k1);dge=n(Rke,"STRONG",{});var Y2t=s(dge);d9o=r(Y2t,"unispeech"),Y2t.forEach(t),c9o=r(Rke," \u2014 "),OG=n(Rke,"A",{href:!0});var K2t=s(OG);f9o=r(K2t,"UniSpeechForPreTraining"),K2t.forEach(t),m9o=r(Rke," (UniSpeech model)"),Rke.forEach(t),g9o=i(O),S1=n(O,"LI",{});var Pke=s(S1);cge=n(Pke,"STRONG",{});var Z2t=s(cge);h9o=r(Z2t,"unispeech-sat"),Z2t.forEach(t),p9o=r(Pke," \u2014 "),VG=n(Pke,"A",{href:!0});var ebt=s(VG);_9o=r(ebt,"UniSpeechSatForPreTraining"),ebt.forEach(t),u9o=r(Pke," (UniSpeechSat model)"),Pke.forEach(t),b9o=i(O),R1=n(O,"LI",{});var Bke=s(R1);fge=n(Bke,"STRONG",{});var obt=s(fge);v9o=r(obt,"visual_bert"),obt.forEach(t),F9o=r(Bke," \u2014 "),XG=n(Bke,"A",{href:!0});var rbt=s(XG);T9o=r(rbt,"VisualBertForPreTraining"),rbt.forEach(t),M9o=r(Bke," (VisualBERT model)"),Bke.forEach(t),E9o=i(O),P1=n(O,"LI",{});var Nke=s(P1);mge=n(Nke,"STRONG",{});var tbt=s(mge);C9o=r(tbt,"vit_mae"),tbt.forEach(t),w9o=r(Nke," \u2014 "),zG=n(Nke,"A",{href:!0});var abt=s(zG);A9o=r(abt,"ViTMAEForPreTraining"),abt.forEach(t),L9o=r(Nke," (ViTMAE model)"),Nke.forEach(t),y9o=i(O),B1=n(O,"LI",{});var Ike=s(B1);gge=n(Ike,"STRONG",{});var nbt=s(gge);x9o=r(nbt,"wav2vec2"),nbt.forEach(t),$9o=r(Ike," \u2014 "),QG=n(Ike,"A",{href:!0});var sbt=s(QG);k9o=r(sbt,"Wav2Vec2ForPreTraining"),sbt.forEach(t),S9o=r(Ike," (Wav2Vec2 model)"),Ike.forEach(t),R9o=i(O),N1=n(O,"LI",{});var qke=s(N1);hge=n(qke,"STRONG",{});var lbt=s(hge);P9o=r(lbt,"wav2vec2-conformer"),lbt.forEach(t),B9o=r(qke," \u2014 "),WG=n(qke,"A",{href:!0});var ibt=s(WG);N9o=r(ibt,"Wav2Vec2ConformerForPreTraining"),ibt.forEach(t),I9o=r(qke," (Wav2Vec2-Conformer model)"),qke.forEach(t),q9o=i(O),I1=n(O,"LI",{});var jke=s(I1);pge=n(jke,"STRONG",{});var dbt=s(pge);j9o=r(dbt,"xlm"),dbt.forEach(t),D9o=r(jke," \u2014 "),HG=n(jke,"A",{href:!0});var cbt=s(HG);G9o=r(cbt,"XLMWithLMHeadModel"),cbt.forEach(t),O9o=r(jke," (XLM model)"),jke.forEach(t),V9o=i(O),q1=n(O,"LI",{});var Dke=s(q1);_ge=n(Dke,"STRONG",{});var fbt=s(_ge);X9o=r(fbt,"xlm-roberta"),fbt.forEach(t),z9o=r(Dke," \u2014 "),UG=n(Dke,"A",{href:!0});var mbt=s(UG);Q9o=r(mbt,"XLMRobertaForMaskedLM"),mbt.forEach(t),W9o=r(Dke," (XLM-RoBERTa model)"),Dke.forEach(t),H9o=i(O),j1=n(O,"LI",{});var Gke=s(j1);uge=n(Gke,"STRONG",{});var gbt=s(uge);U9o=r(gbt,"xlm-roberta-xl"),gbt.forEach(t),J9o=r(Gke," \u2014 "),JG=n(Gke,"A",{href:!0});var hbt=s(JG);Y9o=r(hbt,"XLMRobertaXLForMaskedLM"),hbt.forEach(t),K9o=r(Gke," (XLM-RoBERTa-XL model)"),Gke.forEach(t),Z9o=i(O),D1=n(O,"LI",{});var Oke=s(D1);bge=n(Oke,"STRONG",{});var pbt=s(bge);exo=r(pbt,"xlnet"),pbt.forEach(t),oxo=r(Oke," \u2014 "),YG=n(Oke,"A",{href:!0});var _bt=s(YG);rxo=r(_bt,"XLNetLMHeadModel"),_bt.forEach(t),txo=r(Oke," (XLNet model)"),Oke.forEach(t),O.forEach(t),axo=i(ia),G1=n(ia,"P",{});var Vke=s(G1);nxo=r(Vke,"The model is set in evaluation mode by default using "),vge=n(Vke,"CODE",{});var ubt=s(vge);sxo=r(ubt,"model.eval()"),ubt.forEach(t),lxo=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fge=n(Vke,"CODE",{});var bbt=s(Fge);ixo=r(bbt,"model.train()"),bbt.forEach(t),Vke.forEach(t),dxo=i(ia),T(O1.$$.fragment,ia),ia.forEach(t),al.forEach(t),vXe=i(f),Hi=n(f,"H2",{class:!0});var wQe=s(Hi);V1=n(wQe,"A",{id:!0,class:!0,href:!0});var vbt=s(V1);Tge=n(vbt,"SPAN",{});var Fbt=s(Tge);T(GL.$$.fragment,Fbt),Fbt.forEach(t),vbt.forEach(t),cxo=i(wQe),Mge=n(wQe,"SPAN",{});var Tbt=s(Mge);fxo=r(Tbt,"AutoModelForCausalLM"),Tbt.forEach(t),wQe.forEach(t),FXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(OL.$$.fragment,nl),mxo=i(nl),Ui=n(nl,"P",{});var jre=s(Ui);gxo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KG=n(jre,"A",{href:!0});var Mbt=s(KG);hxo=r(Mbt,"from_pretrained()"),Mbt.forEach(t),pxo=r(jre," class method or the "),ZG=n(jre,"A",{href:!0});var Ebt=s(ZG);_xo=r(Ebt,"from_config()"),Ebt.forEach(t),uxo=r(jre,` class
method.`),jre.forEach(t),bxo=i(nl),VL=n(nl,"P",{});var AQe=s(VL);vxo=r(AQe,"This class cannot be instantiated directly using "),Ege=n(AQe,"CODE",{});var Cbt=s(Ege);Fxo=r(Cbt,"__init__()"),Cbt.forEach(t),Txo=r(AQe," (throws an error)."),AQe.forEach(t),Mxo=i(nl),ct=n(nl,"DIV",{class:!0});var gA=s(ct);T(XL.$$.fragment,gA),Exo=i(gA),Cge=n(gA,"P",{});var wbt=s(Cge);Cxo=r(wbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wbt.forEach(t),wxo=i(gA),Ji=n(gA,"P",{});var Dre=s(Ji);Axo=r(Dre,`Note:
Loading a model from its configuration file does `),wge=n(Dre,"STRONG",{});var Abt=s(wge);Lxo=r(Abt,"not"),Abt.forEach(t),yxo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(Dre,"A",{href:!0});var Lbt=s(eO);xxo=r(Lbt,"from_pretrained()"),Lbt.forEach(t),$xo=r(Dre," to load the model weights."),Dre.forEach(t),kxo=i(gA),T(X1.$$.fragment,gA),gA.forEach(t),Sxo=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(zL.$$.fragment,da),Rxo=i(da),Age=n(da,"P",{});var ybt=s(Age);Pxo=r(ybt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ybt.forEach(t),Bxo=i(da),qa=n(da,"P",{});var hA=s(qa);Nxo=r(hA,"The model class to instantiate is selected based on the "),Lge=n(hA,"CODE",{});var xbt=s(Lge);Ixo=r(xbt,"model_type"),xbt.forEach(t),qxo=r(hA,` property of the config object (either
passed as an argument or loaded from `),yge=n(hA,"CODE",{});var $bt=s(yge);jxo=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),Dxo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=n(hA,"CODE",{});var kbt=s(xge);Gxo=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),Oxo=r(hA,":"),hA.forEach(t),Vxo=i(da),z=n(da,"UL",{});var Q=s(z);z1=n(Q,"LI",{});var Xke=s(z1);$ge=n(Xke,"STRONG",{});var Sbt=s($ge);Xxo=r(Sbt,"bart"),Sbt.forEach(t),zxo=r(Xke," \u2014 "),oO=n(Xke,"A",{href:!0});var Rbt=s(oO);Qxo=r(Rbt,"BartForCausalLM"),Rbt.forEach(t),Wxo=r(Xke," (BART model)"),Xke.forEach(t),Hxo=i(Q),Q1=n(Q,"LI",{});var zke=s(Q1);kge=n(zke,"STRONG",{});var Pbt=s(kge);Uxo=r(Pbt,"bert"),Pbt.forEach(t),Jxo=r(zke," \u2014 "),rO=n(zke,"A",{href:!0});var Bbt=s(rO);Yxo=r(Bbt,"BertLMHeadModel"),Bbt.forEach(t),Kxo=r(zke," (BERT model)"),zke.forEach(t),Zxo=i(Q),W1=n(Q,"LI",{});var Qke=s(W1);Sge=n(Qke,"STRONG",{});var Nbt=s(Sge);e$o=r(Nbt,"bert-generation"),Nbt.forEach(t),o$o=r(Qke," \u2014 "),tO=n(Qke,"A",{href:!0});var Ibt=s(tO);r$o=r(Ibt,"BertGenerationDecoder"),Ibt.forEach(t),t$o=r(Qke," (Bert Generation model)"),Qke.forEach(t),a$o=i(Q),H1=n(Q,"LI",{});var Wke=s(H1);Rge=n(Wke,"STRONG",{});var qbt=s(Rge);n$o=r(qbt,"big_bird"),qbt.forEach(t),s$o=r(Wke," \u2014 "),aO=n(Wke,"A",{href:!0});var jbt=s(aO);l$o=r(jbt,"BigBirdForCausalLM"),jbt.forEach(t),i$o=r(Wke," (BigBird model)"),Wke.forEach(t),d$o=i(Q),U1=n(Q,"LI",{});var Hke=s(U1);Pge=n(Hke,"STRONG",{});var Dbt=s(Pge);c$o=r(Dbt,"bigbird_pegasus"),Dbt.forEach(t),f$o=r(Hke," \u2014 "),nO=n(Hke,"A",{href:!0});var Gbt=s(nO);m$o=r(Gbt,"BigBirdPegasusForCausalLM"),Gbt.forEach(t),g$o=r(Hke," (BigBird-Pegasus model)"),Hke.forEach(t),h$o=i(Q),J1=n(Q,"LI",{});var Uke=s(J1);Bge=n(Uke,"STRONG",{});var Obt=s(Bge);p$o=r(Obt,"blenderbot"),Obt.forEach(t),_$o=r(Uke," \u2014 "),sO=n(Uke,"A",{href:!0});var Vbt=s(sO);u$o=r(Vbt,"BlenderbotForCausalLM"),Vbt.forEach(t),b$o=r(Uke," (Blenderbot model)"),Uke.forEach(t),v$o=i(Q),Y1=n(Q,"LI",{});var Jke=s(Y1);Nge=n(Jke,"STRONG",{});var Xbt=s(Nge);F$o=r(Xbt,"blenderbot-small"),Xbt.forEach(t),T$o=r(Jke," \u2014 "),lO=n(Jke,"A",{href:!0});var zbt=s(lO);M$o=r(zbt,"BlenderbotSmallForCausalLM"),zbt.forEach(t),E$o=r(Jke," (BlenderbotSmall model)"),Jke.forEach(t),C$o=i(Q),K1=n(Q,"LI",{});var Yke=s(K1);Ige=n(Yke,"STRONG",{});var Qbt=s(Ige);w$o=r(Qbt,"bloom"),Qbt.forEach(t),A$o=r(Yke," \u2014 "),iO=n(Yke,"A",{href:!0});var Wbt=s(iO);L$o=r(Wbt,"BloomForCausalLM"),Wbt.forEach(t),y$o=r(Yke," (BLOOM model)"),Yke.forEach(t),x$o=i(Q),Z1=n(Q,"LI",{});var Kke=s(Z1);qge=n(Kke,"STRONG",{});var Hbt=s(qge);$$o=r(Hbt,"camembert"),Hbt.forEach(t),k$o=r(Kke," \u2014 "),dO=n(Kke,"A",{href:!0});var Ubt=s(dO);S$o=r(Ubt,"CamembertForCausalLM"),Ubt.forEach(t),R$o=r(Kke," (CamemBERT model)"),Kke.forEach(t),P$o=i(Q),e2=n(Q,"LI",{});var Zke=s(e2);jge=n(Zke,"STRONG",{});var Jbt=s(jge);B$o=r(Jbt,"codegen"),Jbt.forEach(t),N$o=r(Zke," \u2014 "),cO=n(Zke,"A",{href:!0});var Ybt=s(cO);I$o=r(Ybt,"CodeGenForCausalLM"),Ybt.forEach(t),q$o=r(Zke," (CodeGen model)"),Zke.forEach(t),j$o=i(Q),o2=n(Q,"LI",{});var eSe=s(o2);Dge=n(eSe,"STRONG",{});var Kbt=s(Dge);D$o=r(Kbt,"ctrl"),Kbt.forEach(t),G$o=r(eSe," \u2014 "),fO=n(eSe,"A",{href:!0});var Zbt=s(fO);O$o=r(Zbt,"CTRLLMHeadModel"),Zbt.forEach(t),V$o=r(eSe," (CTRL model)"),eSe.forEach(t),X$o=i(Q),r2=n(Q,"LI",{});var oSe=s(r2);Gge=n(oSe,"STRONG",{});var evt=s(Gge);z$o=r(evt,"data2vec-text"),evt.forEach(t),Q$o=r(oSe," \u2014 "),mO=n(oSe,"A",{href:!0});var ovt=s(mO);W$o=r(ovt,"Data2VecTextForCausalLM"),ovt.forEach(t),H$o=r(oSe," (Data2VecText model)"),oSe.forEach(t),U$o=i(Q),t2=n(Q,"LI",{});var rSe=s(t2);Oge=n(rSe,"STRONG",{});var rvt=s(Oge);J$o=r(rvt,"electra"),rvt.forEach(t),Y$o=r(rSe," \u2014 "),gO=n(rSe,"A",{href:!0});var tvt=s(gO);K$o=r(tvt,"ElectraForCausalLM"),tvt.forEach(t),Z$o=r(rSe," (ELECTRA model)"),rSe.forEach(t),eko=i(Q),a2=n(Q,"LI",{});var tSe=s(a2);Vge=n(tSe,"STRONG",{});var avt=s(Vge);oko=r(avt,"gpt2"),avt.forEach(t),rko=r(tSe," \u2014 "),hO=n(tSe,"A",{href:!0});var nvt=s(hO);tko=r(nvt,"GPT2LMHeadModel"),nvt.forEach(t),ako=r(tSe," (OpenAI GPT-2 model)"),tSe.forEach(t),nko=i(Q),n2=n(Q,"LI",{});var aSe=s(n2);Xge=n(aSe,"STRONG",{});var svt=s(Xge);sko=r(svt,"gpt_neo"),svt.forEach(t),lko=r(aSe," \u2014 "),pO=n(aSe,"A",{href:!0});var lvt=s(pO);iko=r(lvt,"GPTNeoForCausalLM"),lvt.forEach(t),dko=r(aSe," (GPT Neo model)"),aSe.forEach(t),cko=i(Q),s2=n(Q,"LI",{});var nSe=s(s2);zge=n(nSe,"STRONG",{});var ivt=s(zge);fko=r(ivt,"gpt_neox"),ivt.forEach(t),mko=r(nSe," \u2014 "),_O=n(nSe,"A",{href:!0});var dvt=s(_O);gko=r(dvt,"GPTNeoXForCausalLM"),dvt.forEach(t),hko=r(nSe," (GPT NeoX model)"),nSe.forEach(t),pko=i(Q),l2=n(Q,"LI",{});var sSe=s(l2);Qge=n(sSe,"STRONG",{});var cvt=s(Qge);_ko=r(cvt,"gptj"),cvt.forEach(t),uko=r(sSe," \u2014 "),uO=n(sSe,"A",{href:!0});var fvt=s(uO);bko=r(fvt,"GPTJForCausalLM"),fvt.forEach(t),vko=r(sSe," (GPT-J model)"),sSe.forEach(t),Fko=i(Q),i2=n(Q,"LI",{});var lSe=s(i2);Wge=n(lSe,"STRONG",{});var mvt=s(Wge);Tko=r(mvt,"marian"),mvt.forEach(t),Mko=r(lSe," \u2014 "),bO=n(lSe,"A",{href:!0});var gvt=s(bO);Eko=r(gvt,"MarianForCausalLM"),gvt.forEach(t),Cko=r(lSe," (Marian model)"),lSe.forEach(t),wko=i(Q),d2=n(Q,"LI",{});var iSe=s(d2);Hge=n(iSe,"STRONG",{});var hvt=s(Hge);Ako=r(hvt,"mbart"),hvt.forEach(t),Lko=r(iSe," \u2014 "),vO=n(iSe,"A",{href:!0});var pvt=s(vO);yko=r(pvt,"MBartForCausalLM"),pvt.forEach(t),xko=r(iSe," (mBART model)"),iSe.forEach(t),$ko=i(Q),c2=n(Q,"LI",{});var dSe=s(c2);Uge=n(dSe,"STRONG",{});var _vt=s(Uge);kko=r(_vt,"megatron-bert"),_vt.forEach(t),Sko=r(dSe," \u2014 "),FO=n(dSe,"A",{href:!0});var uvt=s(FO);Rko=r(uvt,"MegatronBertForCausalLM"),uvt.forEach(t),Pko=r(dSe," (Megatron-BERT model)"),dSe.forEach(t),Bko=i(Q),f2=n(Q,"LI",{});var cSe=s(f2);Jge=n(cSe,"STRONG",{});var bvt=s(Jge);Nko=r(bvt,"mvp"),bvt.forEach(t),Iko=r(cSe," \u2014 "),TO=n(cSe,"A",{href:!0});var vvt=s(TO);qko=r(vvt,"MvpForCausalLM"),vvt.forEach(t),jko=r(cSe," (MVP model)"),cSe.forEach(t),Dko=i(Q),m2=n(Q,"LI",{});var fSe=s(m2);Yge=n(fSe,"STRONG",{});var Fvt=s(Yge);Gko=r(Fvt,"openai-gpt"),Fvt.forEach(t),Oko=r(fSe," \u2014 "),MO=n(fSe,"A",{href:!0});var Tvt=s(MO);Vko=r(Tvt,"OpenAIGPTLMHeadModel"),Tvt.forEach(t),Xko=r(fSe," (OpenAI GPT model)"),fSe.forEach(t),zko=i(Q),g2=n(Q,"LI",{});var mSe=s(g2);Kge=n(mSe,"STRONG",{});var Mvt=s(Kge);Qko=r(Mvt,"opt"),Mvt.forEach(t),Wko=r(mSe," \u2014 "),EO=n(mSe,"A",{href:!0});var Evt=s(EO);Hko=r(Evt,"OPTForCausalLM"),Evt.forEach(t),Uko=r(mSe," (OPT model)"),mSe.forEach(t),Jko=i(Q),h2=n(Q,"LI",{});var gSe=s(h2);Zge=n(gSe,"STRONG",{});var Cvt=s(Zge);Yko=r(Cvt,"pegasus"),Cvt.forEach(t),Kko=r(gSe," \u2014 "),CO=n(gSe,"A",{href:!0});var wvt=s(CO);Zko=r(wvt,"PegasusForCausalLM"),wvt.forEach(t),eSo=r(gSe," (Pegasus model)"),gSe.forEach(t),oSo=i(Q),p2=n(Q,"LI",{});var hSe=s(p2);ehe=n(hSe,"STRONG",{});var Avt=s(ehe);rSo=r(Avt,"plbart"),Avt.forEach(t),tSo=r(hSe," \u2014 "),wO=n(hSe,"A",{href:!0});var Lvt=s(wO);aSo=r(Lvt,"PLBartForCausalLM"),Lvt.forEach(t),nSo=r(hSe," (PLBart model)"),hSe.forEach(t),sSo=i(Q),_2=n(Q,"LI",{});var pSe=s(_2);ohe=n(pSe,"STRONG",{});var yvt=s(ohe);lSo=r(yvt,"prophetnet"),yvt.forEach(t),iSo=r(pSe," \u2014 "),AO=n(pSe,"A",{href:!0});var xvt=s(AO);dSo=r(xvt,"ProphetNetForCausalLM"),xvt.forEach(t),cSo=r(pSe," (ProphetNet model)"),pSe.forEach(t),fSo=i(Q),u2=n(Q,"LI",{});var _Se=s(u2);rhe=n(_Se,"STRONG",{});var $vt=s(rhe);mSo=r($vt,"qdqbert"),$vt.forEach(t),gSo=r(_Se," \u2014 "),LO=n(_Se,"A",{href:!0});var kvt=s(LO);hSo=r(kvt,"QDQBertLMHeadModel"),kvt.forEach(t),pSo=r(_Se," (QDQBert model)"),_Se.forEach(t),_So=i(Q),b2=n(Q,"LI",{});var uSe=s(b2);the=n(uSe,"STRONG",{});var Svt=s(the);uSo=r(Svt,"reformer"),Svt.forEach(t),bSo=r(uSe," \u2014 "),yO=n(uSe,"A",{href:!0});var Rvt=s(yO);vSo=r(Rvt,"ReformerModelWithLMHead"),Rvt.forEach(t),FSo=r(uSe," (Reformer model)"),uSe.forEach(t),TSo=i(Q),v2=n(Q,"LI",{});var bSe=s(v2);ahe=n(bSe,"STRONG",{});var Pvt=s(ahe);MSo=r(Pvt,"rembert"),Pvt.forEach(t),ESo=r(bSe," \u2014 "),xO=n(bSe,"A",{href:!0});var Bvt=s(xO);CSo=r(Bvt,"RemBertForCausalLM"),Bvt.forEach(t),wSo=r(bSe," (RemBERT model)"),bSe.forEach(t),ASo=i(Q),F2=n(Q,"LI",{});var vSe=s(F2);nhe=n(vSe,"STRONG",{});var Nvt=s(nhe);LSo=r(Nvt,"roberta"),Nvt.forEach(t),ySo=r(vSe," \u2014 "),$O=n(vSe,"A",{href:!0});var Ivt=s($O);xSo=r(Ivt,"RobertaForCausalLM"),Ivt.forEach(t),$So=r(vSe," (RoBERTa model)"),vSe.forEach(t),kSo=i(Q),T2=n(Q,"LI",{});var FSe=s(T2);she=n(FSe,"STRONG",{});var qvt=s(she);SSo=r(qvt,"roformer"),qvt.forEach(t),RSo=r(FSe," \u2014 "),kO=n(FSe,"A",{href:!0});var jvt=s(kO);PSo=r(jvt,"RoFormerForCausalLM"),jvt.forEach(t),BSo=r(FSe," (RoFormer model)"),FSe.forEach(t),NSo=i(Q),M2=n(Q,"LI",{});var TSe=s(M2);lhe=n(TSe,"STRONG",{});var Dvt=s(lhe);ISo=r(Dvt,"speech_to_text_2"),Dvt.forEach(t),qSo=r(TSe," \u2014 "),SO=n(TSe,"A",{href:!0});var Gvt=s(SO);jSo=r(Gvt,"Speech2Text2ForCausalLM"),Gvt.forEach(t),DSo=r(TSe," (Speech2Text2 model)"),TSe.forEach(t),GSo=i(Q),E2=n(Q,"LI",{});var MSe=s(E2);ihe=n(MSe,"STRONG",{});var Ovt=s(ihe);OSo=r(Ovt,"transfo-xl"),Ovt.forEach(t),VSo=r(MSe," \u2014 "),RO=n(MSe,"A",{href:!0});var Vvt=s(RO);XSo=r(Vvt,"TransfoXLLMHeadModel"),Vvt.forEach(t),zSo=r(MSe," (Transformer-XL model)"),MSe.forEach(t),QSo=i(Q),C2=n(Q,"LI",{});var ESe=s(C2);dhe=n(ESe,"STRONG",{});var Xvt=s(dhe);WSo=r(Xvt,"trocr"),Xvt.forEach(t),HSo=r(ESe," \u2014 "),PO=n(ESe,"A",{href:!0});var zvt=s(PO);USo=r(zvt,"TrOCRForCausalLM"),zvt.forEach(t),JSo=r(ESe," (TrOCR model)"),ESe.forEach(t),YSo=i(Q),w2=n(Q,"LI",{});var CSe=s(w2);che=n(CSe,"STRONG",{});var Qvt=s(che);KSo=r(Qvt,"xglm"),Qvt.forEach(t),ZSo=r(CSe," \u2014 "),BO=n(CSe,"A",{href:!0});var Wvt=s(BO);eRo=r(Wvt,"XGLMForCausalLM"),Wvt.forEach(t),oRo=r(CSe," (XGLM model)"),CSe.forEach(t),rRo=i(Q),A2=n(Q,"LI",{});var wSe=s(A2);fhe=n(wSe,"STRONG",{});var Hvt=s(fhe);tRo=r(Hvt,"xlm"),Hvt.forEach(t),aRo=r(wSe," \u2014 "),NO=n(wSe,"A",{href:!0});var Uvt=s(NO);nRo=r(Uvt,"XLMWithLMHeadModel"),Uvt.forEach(t),sRo=r(wSe," (XLM model)"),wSe.forEach(t),lRo=i(Q),L2=n(Q,"LI",{});var ASe=s(L2);mhe=n(ASe,"STRONG",{});var Jvt=s(mhe);iRo=r(Jvt,"xlm-prophetnet"),Jvt.forEach(t),dRo=r(ASe," \u2014 "),IO=n(ASe,"A",{href:!0});var Yvt=s(IO);cRo=r(Yvt,"XLMProphetNetForCausalLM"),Yvt.forEach(t),fRo=r(ASe," (XLM-ProphetNet model)"),ASe.forEach(t),mRo=i(Q),y2=n(Q,"LI",{});var LSe=s(y2);ghe=n(LSe,"STRONG",{});var Kvt=s(ghe);gRo=r(Kvt,"xlm-roberta"),Kvt.forEach(t),hRo=r(LSe," \u2014 "),qO=n(LSe,"A",{href:!0});var Zvt=s(qO);pRo=r(Zvt,"XLMRobertaForCausalLM"),Zvt.forEach(t),_Ro=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),uRo=i(Q),x2=n(Q,"LI",{});var ySe=s(x2);hhe=n(ySe,"STRONG",{});var eFt=s(hhe);bRo=r(eFt,"xlm-roberta-xl"),eFt.forEach(t),vRo=r(ySe," \u2014 "),jO=n(ySe,"A",{href:!0});var oFt=s(jO);FRo=r(oFt,"XLMRobertaXLForCausalLM"),oFt.forEach(t),TRo=r(ySe," (XLM-RoBERTa-XL model)"),ySe.forEach(t),MRo=i(Q),$2=n(Q,"LI",{});var xSe=s($2);phe=n(xSe,"STRONG",{});var rFt=s(phe);ERo=r(rFt,"xlnet"),rFt.forEach(t),CRo=r(xSe," \u2014 "),DO=n(xSe,"A",{href:!0});var tFt=s(DO);wRo=r(tFt,"XLNetLMHeadModel"),tFt.forEach(t),ARo=r(xSe," (XLNet model)"),xSe.forEach(t),Q.forEach(t),LRo=i(da),k2=n(da,"P",{});var $Se=s(k2);yRo=r($Se,"The model is set in evaluation mode by default using "),_he=n($Se,"CODE",{});var aFt=s(_he);xRo=r(aFt,"model.eval()"),aFt.forEach(t),$Ro=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=n($Se,"CODE",{});var nFt=s(uhe);kRo=r(nFt,"model.train()"),nFt.forEach(t),$Se.forEach(t),SRo=i(da),T(S2.$$.fragment,da),da.forEach(t),nl.forEach(t),TXe=i(f),Yi=n(f,"H2",{class:!0});var LQe=s(Yi);R2=n(LQe,"A",{id:!0,class:!0,href:!0});var sFt=s(R2);bhe=n(sFt,"SPAN",{});var lFt=s(bhe);T(QL.$$.fragment,lFt),lFt.forEach(t),sFt.forEach(t),RRo=i(LQe),vhe=n(LQe,"SPAN",{});var iFt=s(vhe);PRo=r(iFt,"AutoModelForMaskedLM"),iFt.forEach(t),LQe.forEach(t),MXe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(WL.$$.fragment,sl),BRo=i(sl),Ki=n(sl,"P",{});var Gre=s(Ki);NRo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GO=n(Gre,"A",{href:!0});var dFt=s(GO);IRo=r(dFt,"from_pretrained()"),dFt.forEach(t),qRo=r(Gre," class method or the "),OO=n(Gre,"A",{href:!0});var cFt=s(OO);jRo=r(cFt,"from_config()"),cFt.forEach(t),DRo=r(Gre,` class
method.`),Gre.forEach(t),GRo=i(sl),HL=n(sl,"P",{});var yQe=s(HL);ORo=r(yQe,"This class cannot be instantiated directly using "),Fhe=n(yQe,"CODE",{});var fFt=s(Fhe);VRo=r(fFt,"__init__()"),fFt.forEach(t),XRo=r(yQe," (throws an error)."),yQe.forEach(t),zRo=i(sl),ft=n(sl,"DIV",{class:!0});var pA=s(ft);T(UL.$$.fragment,pA),QRo=i(pA),The=n(pA,"P",{});var mFt=s(The);WRo=r(mFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mFt.forEach(t),HRo=i(pA),Zi=n(pA,"P",{});var Ore=s(Zi);URo=r(Ore,`Note:
Loading a model from its configuration file does `),Mhe=n(Ore,"STRONG",{});var gFt=s(Mhe);JRo=r(gFt,"not"),gFt.forEach(t),YRo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(Ore,"A",{href:!0});var hFt=s(VO);KRo=r(hFt,"from_pretrained()"),hFt.forEach(t),ZRo=r(Ore," to load the model weights."),Ore.forEach(t),ePo=i(pA),T(P2.$$.fragment,pA),pA.forEach(t),oPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(JL.$$.fragment,ca),rPo=i(ca),Ehe=n(ca,"P",{});var pFt=s(Ehe);tPo=r(pFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pFt.forEach(t),aPo=i(ca),ja=n(ca,"P",{});var _A=s(ja);nPo=r(_A,"The model class to instantiate is selected based on the "),Che=n(_A,"CODE",{});var _Ft=s(Che);sPo=r(_Ft,"model_type"),_Ft.forEach(t),lPo=r(_A,` property of the config object (either
passed as an argument or loaded from `),whe=n(_A,"CODE",{});var uFt=s(whe);iPo=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),dPo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(_A,"CODE",{});var bFt=s(Ahe);cPo=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),fPo=r(_A,":"),_A.forEach(t),mPo=i(ca),W=n(ca,"UL",{});var H=s(W);B2=n(H,"LI",{});var kSe=s(B2);Lhe=n(kSe,"STRONG",{});var vFt=s(Lhe);gPo=r(vFt,"albert"),vFt.forEach(t),hPo=r(kSe," \u2014 "),XO=n(kSe,"A",{href:!0});var FFt=s(XO);pPo=r(FFt,"AlbertForMaskedLM"),FFt.forEach(t),_Po=r(kSe," (ALBERT model)"),kSe.forEach(t),uPo=i(H),N2=n(H,"LI",{});var SSe=s(N2);yhe=n(SSe,"STRONG",{});var TFt=s(yhe);bPo=r(TFt,"bart"),TFt.forEach(t),vPo=r(SSe," \u2014 "),zO=n(SSe,"A",{href:!0});var MFt=s(zO);FPo=r(MFt,"BartForConditionalGeneration"),MFt.forEach(t),TPo=r(SSe," (BART model)"),SSe.forEach(t),MPo=i(H),I2=n(H,"LI",{});var RSe=s(I2);xhe=n(RSe,"STRONG",{});var EFt=s(xhe);EPo=r(EFt,"bert"),EFt.forEach(t),CPo=r(RSe," \u2014 "),QO=n(RSe,"A",{href:!0});var CFt=s(QO);wPo=r(CFt,"BertForMaskedLM"),CFt.forEach(t),APo=r(RSe," (BERT model)"),RSe.forEach(t),LPo=i(H),q2=n(H,"LI",{});var PSe=s(q2);$he=n(PSe,"STRONG",{});var wFt=s($he);yPo=r(wFt,"big_bird"),wFt.forEach(t),xPo=r(PSe," \u2014 "),WO=n(PSe,"A",{href:!0});var AFt=s(WO);$Po=r(AFt,"BigBirdForMaskedLM"),AFt.forEach(t),kPo=r(PSe," (BigBird model)"),PSe.forEach(t),SPo=i(H),j2=n(H,"LI",{});var BSe=s(j2);khe=n(BSe,"STRONG",{});var LFt=s(khe);RPo=r(LFt,"camembert"),LFt.forEach(t),PPo=r(BSe," \u2014 "),HO=n(BSe,"A",{href:!0});var yFt=s(HO);BPo=r(yFt,"CamembertForMaskedLM"),yFt.forEach(t),NPo=r(BSe," (CamemBERT model)"),BSe.forEach(t),IPo=i(H),D2=n(H,"LI",{});var NSe=s(D2);She=n(NSe,"STRONG",{});var xFt=s(She);qPo=r(xFt,"convbert"),xFt.forEach(t),jPo=r(NSe," \u2014 "),UO=n(NSe,"A",{href:!0});var $Ft=s(UO);DPo=r($Ft,"ConvBertForMaskedLM"),$Ft.forEach(t),GPo=r(NSe," (ConvBERT model)"),NSe.forEach(t),OPo=i(H),G2=n(H,"LI",{});var ISe=s(G2);Rhe=n(ISe,"STRONG",{});var kFt=s(Rhe);VPo=r(kFt,"data2vec-text"),kFt.forEach(t),XPo=r(ISe," \u2014 "),JO=n(ISe,"A",{href:!0});var SFt=s(JO);zPo=r(SFt,"Data2VecTextForMaskedLM"),SFt.forEach(t),QPo=r(ISe," (Data2VecText model)"),ISe.forEach(t),WPo=i(H),O2=n(H,"LI",{});var qSe=s(O2);Phe=n(qSe,"STRONG",{});var RFt=s(Phe);HPo=r(RFt,"deberta"),RFt.forEach(t),UPo=r(qSe," \u2014 "),YO=n(qSe,"A",{href:!0});var PFt=s(YO);JPo=r(PFt,"DebertaForMaskedLM"),PFt.forEach(t),YPo=r(qSe," (DeBERTa model)"),qSe.forEach(t),KPo=i(H),V2=n(H,"LI",{});var jSe=s(V2);Bhe=n(jSe,"STRONG",{});var BFt=s(Bhe);ZPo=r(BFt,"deberta-v2"),BFt.forEach(t),eBo=r(jSe," \u2014 "),KO=n(jSe,"A",{href:!0});var NFt=s(KO);oBo=r(NFt,"DebertaV2ForMaskedLM"),NFt.forEach(t),rBo=r(jSe," (DeBERTa-v2 model)"),jSe.forEach(t),tBo=i(H),X2=n(H,"LI",{});var DSe=s(X2);Nhe=n(DSe,"STRONG",{});var IFt=s(Nhe);aBo=r(IFt,"distilbert"),IFt.forEach(t),nBo=r(DSe," \u2014 "),ZO=n(DSe,"A",{href:!0});var qFt=s(ZO);sBo=r(qFt,"DistilBertForMaskedLM"),qFt.forEach(t),lBo=r(DSe," (DistilBERT model)"),DSe.forEach(t),iBo=i(H),z2=n(H,"LI",{});var GSe=s(z2);Ihe=n(GSe,"STRONG",{});var jFt=s(Ihe);dBo=r(jFt,"electra"),jFt.forEach(t),cBo=r(GSe," \u2014 "),eV=n(GSe,"A",{href:!0});var DFt=s(eV);fBo=r(DFt,"ElectraForMaskedLM"),DFt.forEach(t),mBo=r(GSe," (ELECTRA model)"),GSe.forEach(t),gBo=i(H),Q2=n(H,"LI",{});var OSe=s(Q2);qhe=n(OSe,"STRONG",{});var GFt=s(qhe);hBo=r(GFt,"flaubert"),GFt.forEach(t),pBo=r(OSe," \u2014 "),oV=n(OSe,"A",{href:!0});var OFt=s(oV);_Bo=r(OFt,"FlaubertWithLMHeadModel"),OFt.forEach(t),uBo=r(OSe," (FlauBERT model)"),OSe.forEach(t),bBo=i(H),W2=n(H,"LI",{});var VSe=s(W2);jhe=n(VSe,"STRONG",{});var VFt=s(jhe);vBo=r(VFt,"fnet"),VFt.forEach(t),FBo=r(VSe," \u2014 "),rV=n(VSe,"A",{href:!0});var XFt=s(rV);TBo=r(XFt,"FNetForMaskedLM"),XFt.forEach(t),MBo=r(VSe," (FNet model)"),VSe.forEach(t),EBo=i(H),H2=n(H,"LI",{});var XSe=s(H2);Dhe=n(XSe,"STRONG",{});var zFt=s(Dhe);CBo=r(zFt,"funnel"),zFt.forEach(t),wBo=r(XSe," \u2014 "),tV=n(XSe,"A",{href:!0});var QFt=s(tV);ABo=r(QFt,"FunnelForMaskedLM"),QFt.forEach(t),LBo=r(XSe," (Funnel Transformer model)"),XSe.forEach(t),yBo=i(H),U2=n(H,"LI",{});var zSe=s(U2);Ghe=n(zSe,"STRONG",{});var WFt=s(Ghe);xBo=r(WFt,"ibert"),WFt.forEach(t),$Bo=r(zSe," \u2014 "),aV=n(zSe,"A",{href:!0});var HFt=s(aV);kBo=r(HFt,"IBertForMaskedLM"),HFt.forEach(t),SBo=r(zSe," (I-BERT model)"),zSe.forEach(t),RBo=i(H),J2=n(H,"LI",{});var QSe=s(J2);Ohe=n(QSe,"STRONG",{});var UFt=s(Ohe);PBo=r(UFt,"layoutlm"),UFt.forEach(t),BBo=r(QSe," \u2014 "),nV=n(QSe,"A",{href:!0});var JFt=s(nV);NBo=r(JFt,"LayoutLMForMaskedLM"),JFt.forEach(t),IBo=r(QSe," (LayoutLM model)"),QSe.forEach(t),qBo=i(H),Y2=n(H,"LI",{});var WSe=s(Y2);Vhe=n(WSe,"STRONG",{});var YFt=s(Vhe);jBo=r(YFt,"longformer"),YFt.forEach(t),DBo=r(WSe," \u2014 "),sV=n(WSe,"A",{href:!0});var KFt=s(sV);GBo=r(KFt,"LongformerForMaskedLM"),KFt.forEach(t),OBo=r(WSe," (Longformer model)"),WSe.forEach(t),VBo=i(H),K2=n(H,"LI",{});var HSe=s(K2);Xhe=n(HSe,"STRONG",{});var ZFt=s(Xhe);XBo=r(ZFt,"luke"),ZFt.forEach(t),zBo=r(HSe," \u2014 "),lV=n(HSe,"A",{href:!0});var e6t=s(lV);QBo=r(e6t,"LukeForMaskedLM"),e6t.forEach(t),WBo=r(HSe," (LUKE model)"),HSe.forEach(t),HBo=i(H),Z2=n(H,"LI",{});var USe=s(Z2);zhe=n(USe,"STRONG",{});var o6t=s(zhe);UBo=r(o6t,"mbart"),o6t.forEach(t),JBo=r(USe," \u2014 "),iV=n(USe,"A",{href:!0});var r6t=s(iV);YBo=r(r6t,"MBartForConditionalGeneration"),r6t.forEach(t),KBo=r(USe," (mBART model)"),USe.forEach(t),ZBo=i(H),eb=n(H,"LI",{});var JSe=s(eb);Qhe=n(JSe,"STRONG",{});var t6t=s(Qhe);eNo=r(t6t,"megatron-bert"),t6t.forEach(t),oNo=r(JSe," \u2014 "),dV=n(JSe,"A",{href:!0});var a6t=s(dV);rNo=r(a6t,"MegatronBertForMaskedLM"),a6t.forEach(t),tNo=r(JSe," (Megatron-BERT model)"),JSe.forEach(t),aNo=i(H),ob=n(H,"LI",{});var YSe=s(ob);Whe=n(YSe,"STRONG",{});var n6t=s(Whe);nNo=r(n6t,"mobilebert"),n6t.forEach(t),sNo=r(YSe," \u2014 "),cV=n(YSe,"A",{href:!0});var s6t=s(cV);lNo=r(s6t,"MobileBertForMaskedLM"),s6t.forEach(t),iNo=r(YSe," (MobileBERT model)"),YSe.forEach(t),dNo=i(H),rb=n(H,"LI",{});var KSe=s(rb);Hhe=n(KSe,"STRONG",{});var l6t=s(Hhe);cNo=r(l6t,"mpnet"),l6t.forEach(t),fNo=r(KSe," \u2014 "),fV=n(KSe,"A",{href:!0});var i6t=s(fV);mNo=r(i6t,"MPNetForMaskedLM"),i6t.forEach(t),gNo=r(KSe," (MPNet model)"),KSe.forEach(t),hNo=i(H),tb=n(H,"LI",{});var ZSe=s(tb);Uhe=n(ZSe,"STRONG",{});var d6t=s(Uhe);pNo=r(d6t,"mvp"),d6t.forEach(t),_No=r(ZSe," \u2014 "),mV=n(ZSe,"A",{href:!0});var c6t=s(mV);uNo=r(c6t,"MvpForConditionalGeneration"),c6t.forEach(t),bNo=r(ZSe," (MVP model)"),ZSe.forEach(t),vNo=i(H),ab=n(H,"LI",{});var eRe=s(ab);Jhe=n(eRe,"STRONG",{});var f6t=s(Jhe);FNo=r(f6t,"nezha"),f6t.forEach(t),TNo=r(eRe," \u2014 "),gV=n(eRe,"A",{href:!0});var m6t=s(gV);MNo=r(m6t,"NezhaForMaskedLM"),m6t.forEach(t),ENo=r(eRe," (Nezha model)"),eRe.forEach(t),CNo=i(H),nb=n(H,"LI",{});var oRe=s(nb);Yhe=n(oRe,"STRONG",{});var g6t=s(Yhe);wNo=r(g6t,"nystromformer"),g6t.forEach(t),ANo=r(oRe," \u2014 "),hV=n(oRe,"A",{href:!0});var h6t=s(hV);LNo=r(h6t,"NystromformerForMaskedLM"),h6t.forEach(t),yNo=r(oRe," (Nystr\xF6mformer model)"),oRe.forEach(t),xNo=i(H),sb=n(H,"LI",{});var rRe=s(sb);Khe=n(rRe,"STRONG",{});var p6t=s(Khe);$No=r(p6t,"perceiver"),p6t.forEach(t),kNo=r(rRe," \u2014 "),pV=n(rRe,"A",{href:!0});var _6t=s(pV);SNo=r(_6t,"PerceiverForMaskedLM"),_6t.forEach(t),RNo=r(rRe," (Perceiver model)"),rRe.forEach(t),PNo=i(H),lb=n(H,"LI",{});var tRe=s(lb);Zhe=n(tRe,"STRONG",{});var u6t=s(Zhe);BNo=r(u6t,"qdqbert"),u6t.forEach(t),NNo=r(tRe," \u2014 "),_V=n(tRe,"A",{href:!0});var b6t=s(_V);INo=r(b6t,"QDQBertForMaskedLM"),b6t.forEach(t),qNo=r(tRe," (QDQBert model)"),tRe.forEach(t),jNo=i(H),ib=n(H,"LI",{});var aRe=s(ib);epe=n(aRe,"STRONG",{});var v6t=s(epe);DNo=r(v6t,"reformer"),v6t.forEach(t),GNo=r(aRe," \u2014 "),uV=n(aRe,"A",{href:!0});var F6t=s(uV);ONo=r(F6t,"ReformerForMaskedLM"),F6t.forEach(t),VNo=r(aRe," (Reformer model)"),aRe.forEach(t),XNo=i(H),db=n(H,"LI",{});var nRe=s(db);ope=n(nRe,"STRONG",{});var T6t=s(ope);zNo=r(T6t,"rembert"),T6t.forEach(t),QNo=r(nRe," \u2014 "),bV=n(nRe,"A",{href:!0});var M6t=s(bV);WNo=r(M6t,"RemBertForMaskedLM"),M6t.forEach(t),HNo=r(nRe," (RemBERT model)"),nRe.forEach(t),UNo=i(H),cb=n(H,"LI",{});var sRe=s(cb);rpe=n(sRe,"STRONG",{});var E6t=s(rpe);JNo=r(E6t,"roberta"),E6t.forEach(t),YNo=r(sRe," \u2014 "),vV=n(sRe,"A",{href:!0});var C6t=s(vV);KNo=r(C6t,"RobertaForMaskedLM"),C6t.forEach(t),ZNo=r(sRe," (RoBERTa model)"),sRe.forEach(t),eIo=i(H),fb=n(H,"LI",{});var lRe=s(fb);tpe=n(lRe,"STRONG",{});var w6t=s(tpe);oIo=r(w6t,"roformer"),w6t.forEach(t),rIo=r(lRe," \u2014 "),FV=n(lRe,"A",{href:!0});var A6t=s(FV);tIo=r(A6t,"RoFormerForMaskedLM"),A6t.forEach(t),aIo=r(lRe," (RoFormer model)"),lRe.forEach(t),nIo=i(H),mb=n(H,"LI",{});var iRe=s(mb);ape=n(iRe,"STRONG",{});var L6t=s(ape);sIo=r(L6t,"squeezebert"),L6t.forEach(t),lIo=r(iRe," \u2014 "),TV=n(iRe,"A",{href:!0});var y6t=s(TV);iIo=r(y6t,"SqueezeBertForMaskedLM"),y6t.forEach(t),dIo=r(iRe," (SqueezeBERT model)"),iRe.forEach(t),cIo=i(H),gb=n(H,"LI",{});var dRe=s(gb);npe=n(dRe,"STRONG",{});var x6t=s(npe);fIo=r(x6t,"tapas"),x6t.forEach(t),mIo=r(dRe," \u2014 "),MV=n(dRe,"A",{href:!0});var $6t=s(MV);gIo=r($6t,"TapasForMaskedLM"),$6t.forEach(t),hIo=r(dRe," (TAPAS model)"),dRe.forEach(t),pIo=i(H),hb=n(H,"LI",{});var cRe=s(hb);spe=n(cRe,"STRONG",{});var k6t=s(spe);_Io=r(k6t,"wav2vec2"),k6t.forEach(t),uIo=r(cRe," \u2014 "),lpe=n(cRe,"CODE",{});var S6t=s(lpe);bIo=r(S6t,"Wav2Vec2ForMaskedLM"),S6t.forEach(t),vIo=r(cRe," (Wav2Vec2 model)"),cRe.forEach(t),FIo=i(H),pb=n(H,"LI",{});var fRe=s(pb);ipe=n(fRe,"STRONG",{});var R6t=s(ipe);TIo=r(R6t,"xlm"),R6t.forEach(t),MIo=r(fRe," \u2014 "),EV=n(fRe,"A",{href:!0});var P6t=s(EV);EIo=r(P6t,"XLMWithLMHeadModel"),P6t.forEach(t),CIo=r(fRe," (XLM model)"),fRe.forEach(t),wIo=i(H),_b=n(H,"LI",{});var mRe=s(_b);dpe=n(mRe,"STRONG",{});var B6t=s(dpe);AIo=r(B6t,"xlm-roberta"),B6t.forEach(t),LIo=r(mRe," \u2014 "),CV=n(mRe,"A",{href:!0});var N6t=s(CV);yIo=r(N6t,"XLMRobertaForMaskedLM"),N6t.forEach(t),xIo=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),$Io=i(H),ub=n(H,"LI",{});var gRe=s(ub);cpe=n(gRe,"STRONG",{});var I6t=s(cpe);kIo=r(I6t,"xlm-roberta-xl"),I6t.forEach(t),SIo=r(gRe," \u2014 "),wV=n(gRe,"A",{href:!0});var q6t=s(wV);RIo=r(q6t,"XLMRobertaXLForMaskedLM"),q6t.forEach(t),PIo=r(gRe," (XLM-RoBERTa-XL model)"),gRe.forEach(t),BIo=i(H),bb=n(H,"LI",{});var hRe=s(bb);fpe=n(hRe,"STRONG",{});var j6t=s(fpe);NIo=r(j6t,"yoso"),j6t.forEach(t),IIo=r(hRe," \u2014 "),AV=n(hRe,"A",{href:!0});var D6t=s(AV);qIo=r(D6t,"YosoForMaskedLM"),D6t.forEach(t),jIo=r(hRe," (YOSO model)"),hRe.forEach(t),H.forEach(t),DIo=i(ca),vb=n(ca,"P",{});var pRe=s(vb);GIo=r(pRe,"The model is set in evaluation mode by default using "),mpe=n(pRe,"CODE",{});var G6t=s(mpe);OIo=r(G6t,"model.eval()"),G6t.forEach(t),VIo=r(pRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(pRe,"CODE",{});var O6t=s(gpe);XIo=r(O6t,"model.train()"),O6t.forEach(t),pRe.forEach(t),zIo=i(ca),T(Fb.$$.fragment,ca),ca.forEach(t),sl.forEach(t),EXe=i(f),ed=n(f,"H2",{class:!0});var xQe=s(ed);Tb=n(xQe,"A",{id:!0,class:!0,href:!0});var V6t=s(Tb);hpe=n(V6t,"SPAN",{});var X6t=s(hpe);T(YL.$$.fragment,X6t),X6t.forEach(t),V6t.forEach(t),QIo=i(xQe),ppe=n(xQe,"SPAN",{});var z6t=s(ppe);WIo=r(z6t,"AutoModelForSeq2SeqLM"),z6t.forEach(t),xQe.forEach(t),CXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(KL.$$.fragment,ll),HIo=i(ll),od=n(ll,"P",{});var Vre=s(od);UIo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LV=n(Vre,"A",{href:!0});var Q6t=s(LV);JIo=r(Q6t,"from_pretrained()"),Q6t.forEach(t),YIo=r(Vre," class method or the "),yV=n(Vre,"A",{href:!0});var W6t=s(yV);KIo=r(W6t,"from_config()"),W6t.forEach(t),ZIo=r(Vre,` class
method.`),Vre.forEach(t),eqo=i(ll),ZL=n(ll,"P",{});var $Qe=s(ZL);oqo=r($Qe,"This class cannot be instantiated directly using "),_pe=n($Qe,"CODE",{});var H6t=s(_pe);rqo=r(H6t,"__init__()"),H6t.forEach(t),tqo=r($Qe," (throws an error)."),$Qe.forEach(t),aqo=i(ll),mt=n(ll,"DIV",{class:!0});var uA=s(mt);T(ey.$$.fragment,uA),nqo=i(uA),upe=n(uA,"P",{});var U6t=s(upe);sqo=r(U6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U6t.forEach(t),lqo=i(uA),rd=n(uA,"P",{});var Xre=s(rd);iqo=r(Xre,`Note:
Loading a model from its configuration file does `),bpe=n(Xre,"STRONG",{});var J6t=s(bpe);dqo=r(J6t,"not"),J6t.forEach(t),cqo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(Xre,"A",{href:!0});var Y6t=s(xV);fqo=r(Y6t,"from_pretrained()"),Y6t.forEach(t),mqo=r(Xre," to load the model weights."),Xre.forEach(t),gqo=i(uA),T(Mb.$$.fragment,uA),uA.forEach(t),hqo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(oy.$$.fragment,fa),pqo=i(fa),vpe=n(fa,"P",{});var K6t=s(vpe);_qo=r(K6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K6t.forEach(t),uqo=i(fa),Da=n(fa,"P",{});var bA=s(Da);bqo=r(bA,"The model class to instantiate is selected based on the "),Fpe=n(bA,"CODE",{});var Z6t=s(Fpe);vqo=r(Z6t,"model_type"),Z6t.forEach(t),Fqo=r(bA,` property of the config object (either
passed as an argument or loaded from `),Tpe=n(bA,"CODE",{});var eTt=s(Tpe);Tqo=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),Mqo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=n(bA,"CODE",{});var oTt=s(Mpe);Eqo=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),Cqo=r(bA,":"),bA.forEach(t),wqo=i(fa),pe=n(fa,"UL",{});var be=s(pe);Eb=n(be,"LI",{});var _Re=s(Eb);Epe=n(_Re,"STRONG",{});var rTt=s(Epe);Aqo=r(rTt,"bart"),rTt.forEach(t),Lqo=r(_Re," \u2014 "),$V=n(_Re,"A",{href:!0});var tTt=s($V);yqo=r(tTt,"BartForConditionalGeneration"),tTt.forEach(t),xqo=r(_Re," (BART model)"),_Re.forEach(t),$qo=i(be),Cb=n(be,"LI",{});var uRe=s(Cb);Cpe=n(uRe,"STRONG",{});var aTt=s(Cpe);kqo=r(aTt,"bigbird_pegasus"),aTt.forEach(t),Sqo=r(uRe," \u2014 "),kV=n(uRe,"A",{href:!0});var nTt=s(kV);Rqo=r(nTt,"BigBirdPegasusForConditionalGeneration"),nTt.forEach(t),Pqo=r(uRe," (BigBird-Pegasus model)"),uRe.forEach(t),Bqo=i(be),wb=n(be,"LI",{});var bRe=s(wb);wpe=n(bRe,"STRONG",{});var sTt=s(wpe);Nqo=r(sTt,"blenderbot"),sTt.forEach(t),Iqo=r(bRe," \u2014 "),SV=n(bRe,"A",{href:!0});var lTt=s(SV);qqo=r(lTt,"BlenderbotForConditionalGeneration"),lTt.forEach(t),jqo=r(bRe," (Blenderbot model)"),bRe.forEach(t),Dqo=i(be),Ab=n(be,"LI",{});var vRe=s(Ab);Ape=n(vRe,"STRONG",{});var iTt=s(Ape);Gqo=r(iTt,"blenderbot-small"),iTt.forEach(t),Oqo=r(vRe," \u2014 "),RV=n(vRe,"A",{href:!0});var dTt=s(RV);Vqo=r(dTt,"BlenderbotSmallForConditionalGeneration"),dTt.forEach(t),Xqo=r(vRe," (BlenderbotSmall model)"),vRe.forEach(t),zqo=i(be),Lb=n(be,"LI",{});var FRe=s(Lb);Lpe=n(FRe,"STRONG",{});var cTt=s(Lpe);Qqo=r(cTt,"encoder-decoder"),cTt.forEach(t),Wqo=r(FRe," \u2014 "),PV=n(FRe,"A",{href:!0});var fTt=s(PV);Hqo=r(fTt,"EncoderDecoderModel"),fTt.forEach(t),Uqo=r(FRe," (Encoder decoder model)"),FRe.forEach(t),Jqo=i(be),yb=n(be,"LI",{});var TRe=s(yb);ype=n(TRe,"STRONG",{});var mTt=s(ype);Yqo=r(mTt,"fsmt"),mTt.forEach(t),Kqo=r(TRe," \u2014 "),BV=n(TRe,"A",{href:!0});var gTt=s(BV);Zqo=r(gTt,"FSMTForConditionalGeneration"),gTt.forEach(t),ejo=r(TRe," (FairSeq Machine-Translation model)"),TRe.forEach(t),ojo=i(be),xb=n(be,"LI",{});var MRe=s(xb);xpe=n(MRe,"STRONG",{});var hTt=s(xpe);rjo=r(hTt,"led"),hTt.forEach(t),tjo=r(MRe," \u2014 "),NV=n(MRe,"A",{href:!0});var pTt=s(NV);ajo=r(pTt,"LEDForConditionalGeneration"),pTt.forEach(t),njo=r(MRe," (LED model)"),MRe.forEach(t),sjo=i(be),$b=n(be,"LI",{});var ERe=s($b);$pe=n(ERe,"STRONG",{});var _Tt=s($pe);ljo=r(_Tt,"longt5"),_Tt.forEach(t),ijo=r(ERe," \u2014 "),IV=n(ERe,"A",{href:!0});var uTt=s(IV);djo=r(uTt,"LongT5ForConditionalGeneration"),uTt.forEach(t),cjo=r(ERe," (LongT5 model)"),ERe.forEach(t),fjo=i(be),kb=n(be,"LI",{});var CRe=s(kb);kpe=n(CRe,"STRONG",{});var bTt=s(kpe);mjo=r(bTt,"m2m_100"),bTt.forEach(t),gjo=r(CRe," \u2014 "),qV=n(CRe,"A",{href:!0});var vTt=s(qV);hjo=r(vTt,"M2M100ForConditionalGeneration"),vTt.forEach(t),pjo=r(CRe," (M2M100 model)"),CRe.forEach(t),_jo=i(be),Sb=n(be,"LI",{});var wRe=s(Sb);Spe=n(wRe,"STRONG",{});var FTt=s(Spe);ujo=r(FTt,"marian"),FTt.forEach(t),bjo=r(wRe," \u2014 "),jV=n(wRe,"A",{href:!0});var TTt=s(jV);vjo=r(TTt,"MarianMTModel"),TTt.forEach(t),Fjo=r(wRe," (Marian model)"),wRe.forEach(t),Tjo=i(be),Rb=n(be,"LI",{});var ARe=s(Rb);Rpe=n(ARe,"STRONG",{});var MTt=s(Rpe);Mjo=r(MTt,"mbart"),MTt.forEach(t),Ejo=r(ARe," \u2014 "),DV=n(ARe,"A",{href:!0});var ETt=s(DV);Cjo=r(ETt,"MBartForConditionalGeneration"),ETt.forEach(t),wjo=r(ARe," (mBART model)"),ARe.forEach(t),Ajo=i(be),Pb=n(be,"LI",{});var LRe=s(Pb);Ppe=n(LRe,"STRONG",{});var CTt=s(Ppe);Ljo=r(CTt,"mt5"),CTt.forEach(t),yjo=r(LRe," \u2014 "),GV=n(LRe,"A",{href:!0});var wTt=s(GV);xjo=r(wTt,"MT5ForConditionalGeneration"),wTt.forEach(t),$jo=r(LRe," (MT5 model)"),LRe.forEach(t),kjo=i(be),Bb=n(be,"LI",{});var yRe=s(Bb);Bpe=n(yRe,"STRONG",{});var ATt=s(Bpe);Sjo=r(ATt,"mvp"),ATt.forEach(t),Rjo=r(yRe," \u2014 "),OV=n(yRe,"A",{href:!0});var LTt=s(OV);Pjo=r(LTt,"MvpForConditionalGeneration"),LTt.forEach(t),Bjo=r(yRe," (MVP model)"),yRe.forEach(t),Njo=i(be),Nb=n(be,"LI",{});var xRe=s(Nb);Npe=n(xRe,"STRONG",{});var yTt=s(Npe);Ijo=r(yTt,"pegasus"),yTt.forEach(t),qjo=r(xRe," \u2014 "),VV=n(xRe,"A",{href:!0});var xTt=s(VV);jjo=r(xTt,"PegasusForConditionalGeneration"),xTt.forEach(t),Djo=r(xRe," (Pegasus model)"),xRe.forEach(t),Gjo=i(be),Ib=n(be,"LI",{});var $Re=s(Ib);Ipe=n($Re,"STRONG",{});var $Tt=s(Ipe);Ojo=r($Tt,"plbart"),$Tt.forEach(t),Vjo=r($Re," \u2014 "),XV=n($Re,"A",{href:!0});var kTt=s(XV);Xjo=r(kTt,"PLBartForConditionalGeneration"),kTt.forEach(t),zjo=r($Re," (PLBart model)"),$Re.forEach(t),Qjo=i(be),qb=n(be,"LI",{});var kRe=s(qb);qpe=n(kRe,"STRONG",{});var STt=s(qpe);Wjo=r(STt,"prophetnet"),STt.forEach(t),Hjo=r(kRe," \u2014 "),zV=n(kRe,"A",{href:!0});var RTt=s(zV);Ujo=r(RTt,"ProphetNetForConditionalGeneration"),RTt.forEach(t),Jjo=r(kRe," (ProphetNet model)"),kRe.forEach(t),Yjo=i(be),jb=n(be,"LI",{});var SRe=s(jb);jpe=n(SRe,"STRONG",{});var PTt=s(jpe);Kjo=r(PTt,"t5"),PTt.forEach(t),Zjo=r(SRe," \u2014 "),QV=n(SRe,"A",{href:!0});var BTt=s(QV);eDo=r(BTt,"T5ForConditionalGeneration"),BTt.forEach(t),oDo=r(SRe," (T5 model)"),SRe.forEach(t),rDo=i(be),Db=n(be,"LI",{});var RRe=s(Db);Dpe=n(RRe,"STRONG",{});var NTt=s(Dpe);tDo=r(NTt,"xlm-prophetnet"),NTt.forEach(t),aDo=r(RRe," \u2014 "),WV=n(RRe,"A",{href:!0});var ITt=s(WV);nDo=r(ITt,"XLMProphetNetForConditionalGeneration"),ITt.forEach(t),sDo=r(RRe," (XLM-ProphetNet model)"),RRe.forEach(t),be.forEach(t),lDo=i(fa),Gb=n(fa,"P",{});var PRe=s(Gb);iDo=r(PRe,"The model is set in evaluation mode by default using "),Gpe=n(PRe,"CODE",{});var qTt=s(Gpe);dDo=r(qTt,"model.eval()"),qTt.forEach(t),cDo=r(PRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=n(PRe,"CODE",{});var jTt=s(Ope);fDo=r(jTt,"model.train()"),jTt.forEach(t),PRe.forEach(t),mDo=i(fa),T(Ob.$$.fragment,fa),fa.forEach(t),ll.forEach(t),wXe=i(f),td=n(f,"H2",{class:!0});var kQe=s(td);Vb=n(kQe,"A",{id:!0,class:!0,href:!0});var DTt=s(Vb);Vpe=n(DTt,"SPAN",{});var GTt=s(Vpe);T(ry.$$.fragment,GTt),GTt.forEach(t),DTt.forEach(t),gDo=i(kQe),Xpe=n(kQe,"SPAN",{});var OTt=s(Xpe);hDo=r(OTt,"AutoModelForSequenceClassification"),OTt.forEach(t),kQe.forEach(t),AXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(ty.$$.fragment,il),pDo=i(il),ad=n(il,"P",{});var zre=s(ad);_Do=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HV=n(zre,"A",{href:!0});var VTt=s(HV);uDo=r(VTt,"from_pretrained()"),VTt.forEach(t),bDo=r(zre," class method or the "),UV=n(zre,"A",{href:!0});var XTt=s(UV);vDo=r(XTt,"from_config()"),XTt.forEach(t),FDo=r(zre,` class
method.`),zre.forEach(t),TDo=i(il),ay=n(il,"P",{});var SQe=s(ay);MDo=r(SQe,"This class cannot be instantiated directly using "),zpe=n(SQe,"CODE",{});var zTt=s(zpe);EDo=r(zTt,"__init__()"),zTt.forEach(t),CDo=r(SQe," (throws an error)."),SQe.forEach(t),wDo=i(il),gt=n(il,"DIV",{class:!0});var vA=s(gt);T(ny.$$.fragment,vA),ADo=i(vA),Qpe=n(vA,"P",{});var QTt=s(Qpe);LDo=r(QTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QTt.forEach(t),yDo=i(vA),nd=n(vA,"P",{});var Qre=s(nd);xDo=r(Qre,`Note:
Loading a model from its configuration file does `),Wpe=n(Qre,"STRONG",{});var WTt=s(Wpe);$Do=r(WTt,"not"),WTt.forEach(t),kDo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(Qre,"A",{href:!0});var HTt=s(JV);SDo=r(HTt,"from_pretrained()"),HTt.forEach(t),RDo=r(Qre," to load the model weights."),Qre.forEach(t),PDo=i(vA),T(Xb.$$.fragment,vA),vA.forEach(t),BDo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(sy.$$.fragment,ma),NDo=i(ma),Hpe=n(ma,"P",{});var UTt=s(Hpe);IDo=r(UTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UTt.forEach(t),qDo=i(ma),Ga=n(ma,"P",{});var FA=s(Ga);jDo=r(FA,"The model class to instantiate is selected based on the "),Upe=n(FA,"CODE",{});var JTt=s(Upe);DDo=r(JTt,"model_type"),JTt.forEach(t),GDo=r(FA,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(FA,"CODE",{});var YTt=s(Jpe);ODo=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),VDo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(FA,"CODE",{});var KTt=s(Ype);XDo=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),zDo=r(FA,":"),FA.forEach(t),QDo=i(ma),I=n(ma,"UL",{});var j=s(I);zb=n(j,"LI",{});var BRe=s(zb);Kpe=n(BRe,"STRONG",{});var ZTt=s(Kpe);WDo=r(ZTt,"albert"),ZTt.forEach(t),HDo=r(BRe," \u2014 "),YV=n(BRe,"A",{href:!0});var e8t=s(YV);UDo=r(e8t,"AlbertForSequenceClassification"),e8t.forEach(t),JDo=r(BRe," (ALBERT model)"),BRe.forEach(t),YDo=i(j),Qb=n(j,"LI",{});var NRe=s(Qb);Zpe=n(NRe,"STRONG",{});var o8t=s(Zpe);KDo=r(o8t,"bart"),o8t.forEach(t),ZDo=r(NRe," \u2014 "),KV=n(NRe,"A",{href:!0});var r8t=s(KV);eGo=r(r8t,"BartForSequenceClassification"),r8t.forEach(t),oGo=r(NRe," (BART model)"),NRe.forEach(t),rGo=i(j),Wb=n(j,"LI",{});var IRe=s(Wb);e_e=n(IRe,"STRONG",{});var t8t=s(e_e);tGo=r(t8t,"bert"),t8t.forEach(t),aGo=r(IRe," \u2014 "),ZV=n(IRe,"A",{href:!0});var a8t=s(ZV);nGo=r(a8t,"BertForSequenceClassification"),a8t.forEach(t),sGo=r(IRe," (BERT model)"),IRe.forEach(t),lGo=i(j),Hb=n(j,"LI",{});var qRe=s(Hb);o_e=n(qRe,"STRONG",{});var n8t=s(o_e);iGo=r(n8t,"big_bird"),n8t.forEach(t),dGo=r(qRe," \u2014 "),eX=n(qRe,"A",{href:!0});var s8t=s(eX);cGo=r(s8t,"BigBirdForSequenceClassification"),s8t.forEach(t),fGo=r(qRe," (BigBird model)"),qRe.forEach(t),mGo=i(j),Ub=n(j,"LI",{});var jRe=s(Ub);r_e=n(jRe,"STRONG",{});var l8t=s(r_e);gGo=r(l8t,"bigbird_pegasus"),l8t.forEach(t),hGo=r(jRe," \u2014 "),oX=n(jRe,"A",{href:!0});var i8t=s(oX);pGo=r(i8t,"BigBirdPegasusForSequenceClassification"),i8t.forEach(t),_Go=r(jRe," (BigBird-Pegasus model)"),jRe.forEach(t),uGo=i(j),Jb=n(j,"LI",{});var DRe=s(Jb);t_e=n(DRe,"STRONG",{});var d8t=s(t_e);bGo=r(d8t,"bloom"),d8t.forEach(t),vGo=r(DRe," \u2014 "),rX=n(DRe,"A",{href:!0});var c8t=s(rX);FGo=r(c8t,"BloomForSequenceClassification"),c8t.forEach(t),TGo=r(DRe," (BLOOM model)"),DRe.forEach(t),MGo=i(j),Yb=n(j,"LI",{});var GRe=s(Yb);a_e=n(GRe,"STRONG",{});var f8t=s(a_e);EGo=r(f8t,"camembert"),f8t.forEach(t),CGo=r(GRe," \u2014 "),tX=n(GRe,"A",{href:!0});var m8t=s(tX);wGo=r(m8t,"CamembertForSequenceClassification"),m8t.forEach(t),AGo=r(GRe," (CamemBERT model)"),GRe.forEach(t),LGo=i(j),Kb=n(j,"LI",{});var ORe=s(Kb);n_e=n(ORe,"STRONG",{});var g8t=s(n_e);yGo=r(g8t,"canine"),g8t.forEach(t),xGo=r(ORe," \u2014 "),aX=n(ORe,"A",{href:!0});var h8t=s(aX);$Go=r(h8t,"CanineForSequenceClassification"),h8t.forEach(t),kGo=r(ORe," (CANINE model)"),ORe.forEach(t),SGo=i(j),Zb=n(j,"LI",{});var VRe=s(Zb);s_e=n(VRe,"STRONG",{});var p8t=s(s_e);RGo=r(p8t,"convbert"),p8t.forEach(t),PGo=r(VRe," \u2014 "),nX=n(VRe,"A",{href:!0});var _8t=s(nX);BGo=r(_8t,"ConvBertForSequenceClassification"),_8t.forEach(t),NGo=r(VRe," (ConvBERT model)"),VRe.forEach(t),IGo=i(j),ev=n(j,"LI",{});var XRe=s(ev);l_e=n(XRe,"STRONG",{});var u8t=s(l_e);qGo=r(u8t,"ctrl"),u8t.forEach(t),jGo=r(XRe," \u2014 "),sX=n(XRe,"A",{href:!0});var b8t=s(sX);DGo=r(b8t,"CTRLForSequenceClassification"),b8t.forEach(t),GGo=r(XRe," (CTRL model)"),XRe.forEach(t),OGo=i(j),ov=n(j,"LI",{});var zRe=s(ov);i_e=n(zRe,"STRONG",{});var v8t=s(i_e);VGo=r(v8t,"data2vec-text"),v8t.forEach(t),XGo=r(zRe," \u2014 "),lX=n(zRe,"A",{href:!0});var F8t=s(lX);zGo=r(F8t,"Data2VecTextForSequenceClassification"),F8t.forEach(t),QGo=r(zRe," (Data2VecText model)"),zRe.forEach(t),WGo=i(j),rv=n(j,"LI",{});var QRe=s(rv);d_e=n(QRe,"STRONG",{});var T8t=s(d_e);HGo=r(T8t,"deberta"),T8t.forEach(t),UGo=r(QRe," \u2014 "),iX=n(QRe,"A",{href:!0});var M8t=s(iX);JGo=r(M8t,"DebertaForSequenceClassification"),M8t.forEach(t),YGo=r(QRe," (DeBERTa model)"),QRe.forEach(t),KGo=i(j),tv=n(j,"LI",{});var WRe=s(tv);c_e=n(WRe,"STRONG",{});var E8t=s(c_e);ZGo=r(E8t,"deberta-v2"),E8t.forEach(t),eOo=r(WRe," \u2014 "),dX=n(WRe,"A",{href:!0});var C8t=s(dX);oOo=r(C8t,"DebertaV2ForSequenceClassification"),C8t.forEach(t),rOo=r(WRe," (DeBERTa-v2 model)"),WRe.forEach(t),tOo=i(j),av=n(j,"LI",{});var HRe=s(av);f_e=n(HRe,"STRONG",{});var w8t=s(f_e);aOo=r(w8t,"distilbert"),w8t.forEach(t),nOo=r(HRe," \u2014 "),cX=n(HRe,"A",{href:!0});var A8t=s(cX);sOo=r(A8t,"DistilBertForSequenceClassification"),A8t.forEach(t),lOo=r(HRe," (DistilBERT model)"),HRe.forEach(t),iOo=i(j),nv=n(j,"LI",{});var URe=s(nv);m_e=n(URe,"STRONG",{});var L8t=s(m_e);dOo=r(L8t,"electra"),L8t.forEach(t),cOo=r(URe," \u2014 "),fX=n(URe,"A",{href:!0});var y8t=s(fX);fOo=r(y8t,"ElectraForSequenceClassification"),y8t.forEach(t),mOo=r(URe," (ELECTRA model)"),URe.forEach(t),gOo=i(j),sv=n(j,"LI",{});var JRe=s(sv);g_e=n(JRe,"STRONG",{});var x8t=s(g_e);hOo=r(x8t,"flaubert"),x8t.forEach(t),pOo=r(JRe," \u2014 "),mX=n(JRe,"A",{href:!0});var $8t=s(mX);_Oo=r($8t,"FlaubertForSequenceClassification"),$8t.forEach(t),uOo=r(JRe," (FlauBERT model)"),JRe.forEach(t),bOo=i(j),lv=n(j,"LI",{});var YRe=s(lv);h_e=n(YRe,"STRONG",{});var k8t=s(h_e);vOo=r(k8t,"fnet"),k8t.forEach(t),FOo=r(YRe," \u2014 "),gX=n(YRe,"A",{href:!0});var S8t=s(gX);TOo=r(S8t,"FNetForSequenceClassification"),S8t.forEach(t),MOo=r(YRe," (FNet model)"),YRe.forEach(t),EOo=i(j),iv=n(j,"LI",{});var KRe=s(iv);p_e=n(KRe,"STRONG",{});var R8t=s(p_e);COo=r(R8t,"funnel"),R8t.forEach(t),wOo=r(KRe," \u2014 "),hX=n(KRe,"A",{href:!0});var P8t=s(hX);AOo=r(P8t,"FunnelForSequenceClassification"),P8t.forEach(t),LOo=r(KRe," (Funnel Transformer model)"),KRe.forEach(t),yOo=i(j),dv=n(j,"LI",{});var ZRe=s(dv);__e=n(ZRe,"STRONG",{});var B8t=s(__e);xOo=r(B8t,"gpt2"),B8t.forEach(t),$Oo=r(ZRe," \u2014 "),pX=n(ZRe,"A",{href:!0});var N8t=s(pX);kOo=r(N8t,"GPT2ForSequenceClassification"),N8t.forEach(t),SOo=r(ZRe," (OpenAI GPT-2 model)"),ZRe.forEach(t),ROo=i(j),cv=n(j,"LI",{});var ePe=s(cv);u_e=n(ePe,"STRONG",{});var I8t=s(u_e);POo=r(I8t,"gpt_neo"),I8t.forEach(t),BOo=r(ePe," \u2014 "),_X=n(ePe,"A",{href:!0});var q8t=s(_X);NOo=r(q8t,"GPTNeoForSequenceClassification"),q8t.forEach(t),IOo=r(ePe," (GPT Neo model)"),ePe.forEach(t),qOo=i(j),fv=n(j,"LI",{});var oPe=s(fv);b_e=n(oPe,"STRONG",{});var j8t=s(b_e);jOo=r(j8t,"gptj"),j8t.forEach(t),DOo=r(oPe," \u2014 "),uX=n(oPe,"A",{href:!0});var D8t=s(uX);GOo=r(D8t,"GPTJForSequenceClassification"),D8t.forEach(t),OOo=r(oPe," (GPT-J model)"),oPe.forEach(t),VOo=i(j),mv=n(j,"LI",{});var rPe=s(mv);v_e=n(rPe,"STRONG",{});var G8t=s(v_e);XOo=r(G8t,"ibert"),G8t.forEach(t),zOo=r(rPe," \u2014 "),bX=n(rPe,"A",{href:!0});var O8t=s(bX);QOo=r(O8t,"IBertForSequenceClassification"),O8t.forEach(t),WOo=r(rPe," (I-BERT model)"),rPe.forEach(t),HOo=i(j),gv=n(j,"LI",{});var tPe=s(gv);F_e=n(tPe,"STRONG",{});var V8t=s(F_e);UOo=r(V8t,"layoutlm"),V8t.forEach(t),JOo=r(tPe," \u2014 "),vX=n(tPe,"A",{href:!0});var X8t=s(vX);YOo=r(X8t,"LayoutLMForSequenceClassification"),X8t.forEach(t),KOo=r(tPe," (LayoutLM model)"),tPe.forEach(t),ZOo=i(j),hv=n(j,"LI",{});var aPe=s(hv);T_e=n(aPe,"STRONG",{});var z8t=s(T_e);eVo=r(z8t,"layoutlmv2"),z8t.forEach(t),oVo=r(aPe," \u2014 "),FX=n(aPe,"A",{href:!0});var Q8t=s(FX);rVo=r(Q8t,"LayoutLMv2ForSequenceClassification"),Q8t.forEach(t),tVo=r(aPe," (LayoutLMv2 model)"),aPe.forEach(t),aVo=i(j),pv=n(j,"LI",{});var nPe=s(pv);M_e=n(nPe,"STRONG",{});var W8t=s(M_e);nVo=r(W8t,"layoutlmv3"),W8t.forEach(t),sVo=r(nPe," \u2014 "),TX=n(nPe,"A",{href:!0});var H8t=s(TX);lVo=r(H8t,"LayoutLMv3ForSequenceClassification"),H8t.forEach(t),iVo=r(nPe," (LayoutLMv3 model)"),nPe.forEach(t),dVo=i(j),_v=n(j,"LI",{});var sPe=s(_v);E_e=n(sPe,"STRONG",{});var U8t=s(E_e);cVo=r(U8t,"led"),U8t.forEach(t),fVo=r(sPe," \u2014 "),MX=n(sPe,"A",{href:!0});var J8t=s(MX);mVo=r(J8t,"LEDForSequenceClassification"),J8t.forEach(t),gVo=r(sPe," (LED model)"),sPe.forEach(t),hVo=i(j),uv=n(j,"LI",{});var lPe=s(uv);C_e=n(lPe,"STRONG",{});var Y8t=s(C_e);pVo=r(Y8t,"longformer"),Y8t.forEach(t),_Vo=r(lPe," \u2014 "),EX=n(lPe,"A",{href:!0});var K8t=s(EX);uVo=r(K8t,"LongformerForSequenceClassification"),K8t.forEach(t),bVo=r(lPe," (Longformer model)"),lPe.forEach(t),vVo=i(j),bv=n(j,"LI",{});var iPe=s(bv);w_e=n(iPe,"STRONG",{});var Z8t=s(w_e);FVo=r(Z8t,"mbart"),Z8t.forEach(t),TVo=r(iPe," \u2014 "),CX=n(iPe,"A",{href:!0});var eMt=s(CX);MVo=r(eMt,"MBartForSequenceClassification"),eMt.forEach(t),EVo=r(iPe," (mBART model)"),iPe.forEach(t),CVo=i(j),vv=n(j,"LI",{});var dPe=s(vv);A_e=n(dPe,"STRONG",{});var oMt=s(A_e);wVo=r(oMt,"megatron-bert"),oMt.forEach(t),AVo=r(dPe," \u2014 "),wX=n(dPe,"A",{href:!0});var rMt=s(wX);LVo=r(rMt,"MegatronBertForSequenceClassification"),rMt.forEach(t),yVo=r(dPe," (Megatron-BERT model)"),dPe.forEach(t),xVo=i(j),Fv=n(j,"LI",{});var cPe=s(Fv);L_e=n(cPe,"STRONG",{});var tMt=s(L_e);$Vo=r(tMt,"mobilebert"),tMt.forEach(t),kVo=r(cPe," \u2014 "),AX=n(cPe,"A",{href:!0});var aMt=s(AX);SVo=r(aMt,"MobileBertForSequenceClassification"),aMt.forEach(t),RVo=r(cPe," (MobileBERT model)"),cPe.forEach(t),PVo=i(j),Tv=n(j,"LI",{});var fPe=s(Tv);y_e=n(fPe,"STRONG",{});var nMt=s(y_e);BVo=r(nMt,"mpnet"),nMt.forEach(t),NVo=r(fPe," \u2014 "),LX=n(fPe,"A",{href:!0});var sMt=s(LX);IVo=r(sMt,"MPNetForSequenceClassification"),sMt.forEach(t),qVo=r(fPe," (MPNet model)"),fPe.forEach(t),jVo=i(j),Mv=n(j,"LI",{});var mPe=s(Mv);x_e=n(mPe,"STRONG",{});var lMt=s(x_e);DVo=r(lMt,"mvp"),lMt.forEach(t),GVo=r(mPe," \u2014 "),yX=n(mPe,"A",{href:!0});var iMt=s(yX);OVo=r(iMt,"MvpForSequenceClassification"),iMt.forEach(t),VVo=r(mPe," (MVP model)"),mPe.forEach(t),XVo=i(j),Ev=n(j,"LI",{});var gPe=s(Ev);$_e=n(gPe,"STRONG",{});var dMt=s($_e);zVo=r(dMt,"nezha"),dMt.forEach(t),QVo=r(gPe," \u2014 "),xX=n(gPe,"A",{href:!0});var cMt=s(xX);WVo=r(cMt,"NezhaForSequenceClassification"),cMt.forEach(t),HVo=r(gPe," (Nezha model)"),gPe.forEach(t),UVo=i(j),Cv=n(j,"LI",{});var hPe=s(Cv);k_e=n(hPe,"STRONG",{});var fMt=s(k_e);JVo=r(fMt,"nystromformer"),fMt.forEach(t),YVo=r(hPe," \u2014 "),$X=n(hPe,"A",{href:!0});var mMt=s($X);KVo=r(mMt,"NystromformerForSequenceClassification"),mMt.forEach(t),ZVo=r(hPe," (Nystr\xF6mformer model)"),hPe.forEach(t),eXo=i(j),wv=n(j,"LI",{});var pPe=s(wv);S_e=n(pPe,"STRONG",{});var gMt=s(S_e);oXo=r(gMt,"openai-gpt"),gMt.forEach(t),rXo=r(pPe," \u2014 "),kX=n(pPe,"A",{href:!0});var hMt=s(kX);tXo=r(hMt,"OpenAIGPTForSequenceClassification"),hMt.forEach(t),aXo=r(pPe," (OpenAI GPT model)"),pPe.forEach(t),nXo=i(j),Av=n(j,"LI",{});var _Pe=s(Av);R_e=n(_Pe,"STRONG",{});var pMt=s(R_e);sXo=r(pMt,"perceiver"),pMt.forEach(t),lXo=r(_Pe," \u2014 "),SX=n(_Pe,"A",{href:!0});var _Mt=s(SX);iXo=r(_Mt,"PerceiverForSequenceClassification"),_Mt.forEach(t),dXo=r(_Pe," (Perceiver model)"),_Pe.forEach(t),cXo=i(j),Lv=n(j,"LI",{});var uPe=s(Lv);P_e=n(uPe,"STRONG",{});var uMt=s(P_e);fXo=r(uMt,"plbart"),uMt.forEach(t),mXo=r(uPe," \u2014 "),RX=n(uPe,"A",{href:!0});var bMt=s(RX);gXo=r(bMt,"PLBartForSequenceClassification"),bMt.forEach(t),hXo=r(uPe," (PLBart model)"),uPe.forEach(t),pXo=i(j),yv=n(j,"LI",{});var bPe=s(yv);B_e=n(bPe,"STRONG",{});var vMt=s(B_e);_Xo=r(vMt,"qdqbert"),vMt.forEach(t),uXo=r(bPe," \u2014 "),PX=n(bPe,"A",{href:!0});var FMt=s(PX);bXo=r(FMt,"QDQBertForSequenceClassification"),FMt.forEach(t),vXo=r(bPe," (QDQBert model)"),bPe.forEach(t),FXo=i(j),xv=n(j,"LI",{});var vPe=s(xv);N_e=n(vPe,"STRONG",{});var TMt=s(N_e);TXo=r(TMt,"reformer"),TMt.forEach(t),MXo=r(vPe," \u2014 "),BX=n(vPe,"A",{href:!0});var MMt=s(BX);EXo=r(MMt,"ReformerForSequenceClassification"),MMt.forEach(t),CXo=r(vPe," (Reformer model)"),vPe.forEach(t),wXo=i(j),$v=n(j,"LI",{});var FPe=s($v);I_e=n(FPe,"STRONG",{});var EMt=s(I_e);AXo=r(EMt,"rembert"),EMt.forEach(t),LXo=r(FPe," \u2014 "),NX=n(FPe,"A",{href:!0});var CMt=s(NX);yXo=r(CMt,"RemBertForSequenceClassification"),CMt.forEach(t),xXo=r(FPe," (RemBERT model)"),FPe.forEach(t),$Xo=i(j),kv=n(j,"LI",{});var TPe=s(kv);q_e=n(TPe,"STRONG",{});var wMt=s(q_e);kXo=r(wMt,"roberta"),wMt.forEach(t),SXo=r(TPe," \u2014 "),IX=n(TPe,"A",{href:!0});var AMt=s(IX);RXo=r(AMt,"RobertaForSequenceClassification"),AMt.forEach(t),PXo=r(TPe," (RoBERTa model)"),TPe.forEach(t),BXo=i(j),Sv=n(j,"LI",{});var MPe=s(Sv);j_e=n(MPe,"STRONG",{});var LMt=s(j_e);NXo=r(LMt,"roformer"),LMt.forEach(t),IXo=r(MPe," \u2014 "),qX=n(MPe,"A",{href:!0});var yMt=s(qX);qXo=r(yMt,"RoFormerForSequenceClassification"),yMt.forEach(t),jXo=r(MPe," (RoFormer model)"),MPe.forEach(t),DXo=i(j),Rv=n(j,"LI",{});var EPe=s(Rv);D_e=n(EPe,"STRONG",{});var xMt=s(D_e);GXo=r(xMt,"squeezebert"),xMt.forEach(t),OXo=r(EPe," \u2014 "),jX=n(EPe,"A",{href:!0});var $Mt=s(jX);VXo=r($Mt,"SqueezeBertForSequenceClassification"),$Mt.forEach(t),XXo=r(EPe," (SqueezeBERT model)"),EPe.forEach(t),zXo=i(j),Pv=n(j,"LI",{});var CPe=s(Pv);G_e=n(CPe,"STRONG",{});var kMt=s(G_e);QXo=r(kMt,"tapas"),kMt.forEach(t),WXo=r(CPe," \u2014 "),DX=n(CPe,"A",{href:!0});var SMt=s(DX);HXo=r(SMt,"TapasForSequenceClassification"),SMt.forEach(t),UXo=r(CPe," (TAPAS model)"),CPe.forEach(t),JXo=i(j),Bv=n(j,"LI",{});var wPe=s(Bv);O_e=n(wPe,"STRONG",{});var RMt=s(O_e);YXo=r(RMt,"transfo-xl"),RMt.forEach(t),KXo=r(wPe," \u2014 "),GX=n(wPe,"A",{href:!0});var PMt=s(GX);ZXo=r(PMt,"TransfoXLForSequenceClassification"),PMt.forEach(t),ezo=r(wPe," (Transformer-XL model)"),wPe.forEach(t),ozo=i(j),Nv=n(j,"LI",{});var APe=s(Nv);V_e=n(APe,"STRONG",{});var BMt=s(V_e);rzo=r(BMt,"xlm"),BMt.forEach(t),tzo=r(APe," \u2014 "),OX=n(APe,"A",{href:!0});var NMt=s(OX);azo=r(NMt,"XLMForSequenceClassification"),NMt.forEach(t),nzo=r(APe," (XLM model)"),APe.forEach(t),szo=i(j),Iv=n(j,"LI",{});var LPe=s(Iv);X_e=n(LPe,"STRONG",{});var IMt=s(X_e);lzo=r(IMt,"xlm-roberta"),IMt.forEach(t),izo=r(LPe," \u2014 "),VX=n(LPe,"A",{href:!0});var qMt=s(VX);dzo=r(qMt,"XLMRobertaForSequenceClassification"),qMt.forEach(t),czo=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),fzo=i(j),qv=n(j,"LI",{});var yPe=s(qv);z_e=n(yPe,"STRONG",{});var jMt=s(z_e);mzo=r(jMt,"xlm-roberta-xl"),jMt.forEach(t),gzo=r(yPe," \u2014 "),XX=n(yPe,"A",{href:!0});var DMt=s(XX);hzo=r(DMt,"XLMRobertaXLForSequenceClassification"),DMt.forEach(t),pzo=r(yPe," (XLM-RoBERTa-XL model)"),yPe.forEach(t),_zo=i(j),jv=n(j,"LI",{});var xPe=s(jv);Q_e=n(xPe,"STRONG",{});var GMt=s(Q_e);uzo=r(GMt,"xlnet"),GMt.forEach(t),bzo=r(xPe," \u2014 "),zX=n(xPe,"A",{href:!0});var OMt=s(zX);vzo=r(OMt,"XLNetForSequenceClassification"),OMt.forEach(t),Fzo=r(xPe," (XLNet model)"),xPe.forEach(t),Tzo=i(j),Dv=n(j,"LI",{});var $Pe=s(Dv);W_e=n($Pe,"STRONG",{});var VMt=s(W_e);Mzo=r(VMt,"yoso"),VMt.forEach(t),Ezo=r($Pe," \u2014 "),QX=n($Pe,"A",{href:!0});var XMt=s(QX);Czo=r(XMt,"YosoForSequenceClassification"),XMt.forEach(t),wzo=r($Pe," (YOSO model)"),$Pe.forEach(t),j.forEach(t),Azo=i(ma),Gv=n(ma,"P",{});var kPe=s(Gv);Lzo=r(kPe,"The model is set in evaluation mode by default using "),H_e=n(kPe,"CODE",{});var zMt=s(H_e);yzo=r(zMt,"model.eval()"),zMt.forEach(t),xzo=r(kPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(kPe,"CODE",{});var QMt=s(U_e);$zo=r(QMt,"model.train()"),QMt.forEach(t),kPe.forEach(t),kzo=i(ma),T(Ov.$$.fragment,ma),ma.forEach(t),il.forEach(t),LXe=i(f),sd=n(f,"H2",{class:!0});var RQe=s(sd);Vv=n(RQe,"A",{id:!0,class:!0,href:!0});var WMt=s(Vv);J_e=n(WMt,"SPAN",{});var HMt=s(J_e);T(ly.$$.fragment,HMt),HMt.forEach(t),WMt.forEach(t),Szo=i(RQe),Y_e=n(RQe,"SPAN",{});var UMt=s(Y_e);Rzo=r(UMt,"AutoModelForMultipleChoice"),UMt.forEach(t),RQe.forEach(t),yXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(iy.$$.fragment,dl),Pzo=i(dl),ld=n(dl,"P",{});var Wre=s(ld);Bzo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WX=n(Wre,"A",{href:!0});var JMt=s(WX);Nzo=r(JMt,"from_pretrained()"),JMt.forEach(t),Izo=r(Wre," class method or the "),HX=n(Wre,"A",{href:!0});var YMt=s(HX);qzo=r(YMt,"from_config()"),YMt.forEach(t),jzo=r(Wre,` class
method.`),Wre.forEach(t),Dzo=i(dl),dy=n(dl,"P",{});var PQe=s(dy);Gzo=r(PQe,"This class cannot be instantiated directly using "),K_e=n(PQe,"CODE",{});var KMt=s(K_e);Ozo=r(KMt,"__init__()"),KMt.forEach(t),Vzo=r(PQe," (throws an error)."),PQe.forEach(t),Xzo=i(dl),ht=n(dl,"DIV",{class:!0});var TA=s(ht);T(cy.$$.fragment,TA),zzo=i(TA),Z_e=n(TA,"P",{});var ZMt=s(Z_e);Qzo=r(ZMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZMt.forEach(t),Wzo=i(TA),id=n(TA,"P",{});var Hre=s(id);Hzo=r(Hre,`Note:
Loading a model from its configuration file does `),eue=n(Hre,"STRONG",{});var e4t=s(eue);Uzo=r(e4t,"not"),e4t.forEach(t),Jzo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(Hre,"A",{href:!0});var o4t=s(UX);Yzo=r(o4t,"from_pretrained()"),o4t.forEach(t),Kzo=r(Hre," to load the model weights."),Hre.forEach(t),Zzo=i(TA),T(Xv.$$.fragment,TA),TA.forEach(t),eQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(fy.$$.fragment,ga),oQo=i(ga),oue=n(ga,"P",{});var r4t=s(oue);rQo=r(r4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r4t.forEach(t),tQo=i(ga),Oa=n(ga,"P",{});var MA=s(Oa);aQo=r(MA,"The model class to instantiate is selected based on the "),rue=n(MA,"CODE",{});var t4t=s(rue);nQo=r(t4t,"model_type"),t4t.forEach(t),sQo=r(MA,` property of the config object (either
passed as an argument or loaded from `),tue=n(MA,"CODE",{});var a4t=s(tue);lQo=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),iQo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(MA,"CODE",{});var n4t=s(aue);dQo=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),cQo=r(MA,":"),MA.forEach(t),fQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);zv=n(ee,"LI",{});var SPe=s(zv);nue=n(SPe,"STRONG",{});var s4t=s(nue);mQo=r(s4t,"albert"),s4t.forEach(t),gQo=r(SPe," \u2014 "),JX=n(SPe,"A",{href:!0});var l4t=s(JX);hQo=r(l4t,"AlbertForMultipleChoice"),l4t.forEach(t),pQo=r(SPe," (ALBERT model)"),SPe.forEach(t),_Qo=i(ee),Qv=n(ee,"LI",{});var RPe=s(Qv);sue=n(RPe,"STRONG",{});var i4t=s(sue);uQo=r(i4t,"bert"),i4t.forEach(t),bQo=r(RPe," \u2014 "),YX=n(RPe,"A",{href:!0});var d4t=s(YX);vQo=r(d4t,"BertForMultipleChoice"),d4t.forEach(t),FQo=r(RPe," (BERT model)"),RPe.forEach(t),TQo=i(ee),Wv=n(ee,"LI",{});var PPe=s(Wv);lue=n(PPe,"STRONG",{});var c4t=s(lue);MQo=r(c4t,"big_bird"),c4t.forEach(t),EQo=r(PPe," \u2014 "),KX=n(PPe,"A",{href:!0});var f4t=s(KX);CQo=r(f4t,"BigBirdForMultipleChoice"),f4t.forEach(t),wQo=r(PPe," (BigBird model)"),PPe.forEach(t),AQo=i(ee),Hv=n(ee,"LI",{});var BPe=s(Hv);iue=n(BPe,"STRONG",{});var m4t=s(iue);LQo=r(m4t,"camembert"),m4t.forEach(t),yQo=r(BPe," \u2014 "),ZX=n(BPe,"A",{href:!0});var g4t=s(ZX);xQo=r(g4t,"CamembertForMultipleChoice"),g4t.forEach(t),$Qo=r(BPe," (CamemBERT model)"),BPe.forEach(t),kQo=i(ee),Uv=n(ee,"LI",{});var NPe=s(Uv);due=n(NPe,"STRONG",{});var h4t=s(due);SQo=r(h4t,"canine"),h4t.forEach(t),RQo=r(NPe," \u2014 "),ez=n(NPe,"A",{href:!0});var p4t=s(ez);PQo=r(p4t,"CanineForMultipleChoice"),p4t.forEach(t),BQo=r(NPe," (CANINE model)"),NPe.forEach(t),NQo=i(ee),Jv=n(ee,"LI",{});var IPe=s(Jv);cue=n(IPe,"STRONG",{});var _4t=s(cue);IQo=r(_4t,"convbert"),_4t.forEach(t),qQo=r(IPe," \u2014 "),oz=n(IPe,"A",{href:!0});var u4t=s(oz);jQo=r(u4t,"ConvBertForMultipleChoice"),u4t.forEach(t),DQo=r(IPe," (ConvBERT model)"),IPe.forEach(t),GQo=i(ee),Yv=n(ee,"LI",{});var qPe=s(Yv);fue=n(qPe,"STRONG",{});var b4t=s(fue);OQo=r(b4t,"data2vec-text"),b4t.forEach(t),VQo=r(qPe," \u2014 "),rz=n(qPe,"A",{href:!0});var v4t=s(rz);XQo=r(v4t,"Data2VecTextForMultipleChoice"),v4t.forEach(t),zQo=r(qPe," (Data2VecText model)"),qPe.forEach(t),QQo=i(ee),Kv=n(ee,"LI",{});var jPe=s(Kv);mue=n(jPe,"STRONG",{});var F4t=s(mue);WQo=r(F4t,"deberta-v2"),F4t.forEach(t),HQo=r(jPe," \u2014 "),tz=n(jPe,"A",{href:!0});var T4t=s(tz);UQo=r(T4t,"DebertaV2ForMultipleChoice"),T4t.forEach(t),JQo=r(jPe," (DeBERTa-v2 model)"),jPe.forEach(t),YQo=i(ee),Zv=n(ee,"LI",{});var DPe=s(Zv);gue=n(DPe,"STRONG",{});var M4t=s(gue);KQo=r(M4t,"distilbert"),M4t.forEach(t),ZQo=r(DPe," \u2014 "),az=n(DPe,"A",{href:!0});var E4t=s(az);eWo=r(E4t,"DistilBertForMultipleChoice"),E4t.forEach(t),oWo=r(DPe," (DistilBERT model)"),DPe.forEach(t),rWo=i(ee),eF=n(ee,"LI",{});var GPe=s(eF);hue=n(GPe,"STRONG",{});var C4t=s(hue);tWo=r(C4t,"electra"),C4t.forEach(t),aWo=r(GPe," \u2014 "),nz=n(GPe,"A",{href:!0});var w4t=s(nz);nWo=r(w4t,"ElectraForMultipleChoice"),w4t.forEach(t),sWo=r(GPe," (ELECTRA model)"),GPe.forEach(t),lWo=i(ee),oF=n(ee,"LI",{});var OPe=s(oF);pue=n(OPe,"STRONG",{});var A4t=s(pue);iWo=r(A4t,"flaubert"),A4t.forEach(t),dWo=r(OPe," \u2014 "),sz=n(OPe,"A",{href:!0});var L4t=s(sz);cWo=r(L4t,"FlaubertForMultipleChoice"),L4t.forEach(t),fWo=r(OPe," (FlauBERT model)"),OPe.forEach(t),mWo=i(ee),rF=n(ee,"LI",{});var VPe=s(rF);_ue=n(VPe,"STRONG",{});var y4t=s(_ue);gWo=r(y4t,"fnet"),y4t.forEach(t),hWo=r(VPe," \u2014 "),lz=n(VPe,"A",{href:!0});var x4t=s(lz);pWo=r(x4t,"FNetForMultipleChoice"),x4t.forEach(t),_Wo=r(VPe," (FNet model)"),VPe.forEach(t),uWo=i(ee),tF=n(ee,"LI",{});var XPe=s(tF);uue=n(XPe,"STRONG",{});var $4t=s(uue);bWo=r($4t,"funnel"),$4t.forEach(t),vWo=r(XPe," \u2014 "),iz=n(XPe,"A",{href:!0});var k4t=s(iz);FWo=r(k4t,"FunnelForMultipleChoice"),k4t.forEach(t),TWo=r(XPe," (Funnel Transformer model)"),XPe.forEach(t),MWo=i(ee),aF=n(ee,"LI",{});var zPe=s(aF);bue=n(zPe,"STRONG",{});var S4t=s(bue);EWo=r(S4t,"ibert"),S4t.forEach(t),CWo=r(zPe," \u2014 "),dz=n(zPe,"A",{href:!0});var R4t=s(dz);wWo=r(R4t,"IBertForMultipleChoice"),R4t.forEach(t),AWo=r(zPe," (I-BERT model)"),zPe.forEach(t),LWo=i(ee),nF=n(ee,"LI",{});var QPe=s(nF);vue=n(QPe,"STRONG",{});var P4t=s(vue);yWo=r(P4t,"longformer"),P4t.forEach(t),xWo=r(QPe," \u2014 "),cz=n(QPe,"A",{href:!0});var B4t=s(cz);$Wo=r(B4t,"LongformerForMultipleChoice"),B4t.forEach(t),kWo=r(QPe," (Longformer model)"),QPe.forEach(t),SWo=i(ee),sF=n(ee,"LI",{});var WPe=s(sF);Fue=n(WPe,"STRONG",{});var N4t=s(Fue);RWo=r(N4t,"megatron-bert"),N4t.forEach(t),PWo=r(WPe," \u2014 "),fz=n(WPe,"A",{href:!0});var I4t=s(fz);BWo=r(I4t,"MegatronBertForMultipleChoice"),I4t.forEach(t),NWo=r(WPe," (Megatron-BERT model)"),WPe.forEach(t),IWo=i(ee),lF=n(ee,"LI",{});var HPe=s(lF);Tue=n(HPe,"STRONG",{});var q4t=s(Tue);qWo=r(q4t,"mobilebert"),q4t.forEach(t),jWo=r(HPe," \u2014 "),mz=n(HPe,"A",{href:!0});var j4t=s(mz);DWo=r(j4t,"MobileBertForMultipleChoice"),j4t.forEach(t),GWo=r(HPe," (MobileBERT model)"),HPe.forEach(t),OWo=i(ee),iF=n(ee,"LI",{});var UPe=s(iF);Mue=n(UPe,"STRONG",{});var D4t=s(Mue);VWo=r(D4t,"mpnet"),D4t.forEach(t),XWo=r(UPe," \u2014 "),gz=n(UPe,"A",{href:!0});var G4t=s(gz);zWo=r(G4t,"MPNetForMultipleChoice"),G4t.forEach(t),QWo=r(UPe," (MPNet model)"),UPe.forEach(t),WWo=i(ee),dF=n(ee,"LI",{});var JPe=s(dF);Eue=n(JPe,"STRONG",{});var O4t=s(Eue);HWo=r(O4t,"nezha"),O4t.forEach(t),UWo=r(JPe," \u2014 "),hz=n(JPe,"A",{href:!0});var V4t=s(hz);JWo=r(V4t,"NezhaForMultipleChoice"),V4t.forEach(t),YWo=r(JPe," (Nezha model)"),JPe.forEach(t),KWo=i(ee),cF=n(ee,"LI",{});var YPe=s(cF);Cue=n(YPe,"STRONG",{});var X4t=s(Cue);ZWo=r(X4t,"nystromformer"),X4t.forEach(t),eHo=r(YPe," \u2014 "),pz=n(YPe,"A",{href:!0});var z4t=s(pz);oHo=r(z4t,"NystromformerForMultipleChoice"),z4t.forEach(t),rHo=r(YPe," (Nystr\xF6mformer model)"),YPe.forEach(t),tHo=i(ee),fF=n(ee,"LI",{});var KPe=s(fF);wue=n(KPe,"STRONG",{});var Q4t=s(wue);aHo=r(Q4t,"qdqbert"),Q4t.forEach(t),nHo=r(KPe," \u2014 "),_z=n(KPe,"A",{href:!0});var W4t=s(_z);sHo=r(W4t,"QDQBertForMultipleChoice"),W4t.forEach(t),lHo=r(KPe," (QDQBert model)"),KPe.forEach(t),iHo=i(ee),mF=n(ee,"LI",{});var ZPe=s(mF);Aue=n(ZPe,"STRONG",{});var H4t=s(Aue);dHo=r(H4t,"rembert"),H4t.forEach(t),cHo=r(ZPe," \u2014 "),uz=n(ZPe,"A",{href:!0});var U4t=s(uz);fHo=r(U4t,"RemBertForMultipleChoice"),U4t.forEach(t),mHo=r(ZPe," (RemBERT model)"),ZPe.forEach(t),gHo=i(ee),gF=n(ee,"LI",{});var eBe=s(gF);Lue=n(eBe,"STRONG",{});var J4t=s(Lue);hHo=r(J4t,"roberta"),J4t.forEach(t),pHo=r(eBe," \u2014 "),bz=n(eBe,"A",{href:!0});var Y4t=s(bz);_Ho=r(Y4t,"RobertaForMultipleChoice"),Y4t.forEach(t),uHo=r(eBe," (RoBERTa model)"),eBe.forEach(t),bHo=i(ee),hF=n(ee,"LI",{});var oBe=s(hF);yue=n(oBe,"STRONG",{});var K4t=s(yue);vHo=r(K4t,"roformer"),K4t.forEach(t),FHo=r(oBe," \u2014 "),vz=n(oBe,"A",{href:!0});var Z4t=s(vz);THo=r(Z4t,"RoFormerForMultipleChoice"),Z4t.forEach(t),MHo=r(oBe," (RoFormer model)"),oBe.forEach(t),EHo=i(ee),pF=n(ee,"LI",{});var rBe=s(pF);xue=n(rBe,"STRONG",{});var eEt=s(xue);CHo=r(eEt,"squeezebert"),eEt.forEach(t),wHo=r(rBe," \u2014 "),Fz=n(rBe,"A",{href:!0});var oEt=s(Fz);AHo=r(oEt,"SqueezeBertForMultipleChoice"),oEt.forEach(t),LHo=r(rBe," (SqueezeBERT model)"),rBe.forEach(t),yHo=i(ee),_F=n(ee,"LI",{});var tBe=s(_F);$ue=n(tBe,"STRONG",{});var rEt=s($ue);xHo=r(rEt,"xlm"),rEt.forEach(t),$Ho=r(tBe," \u2014 "),Tz=n(tBe,"A",{href:!0});var tEt=s(Tz);kHo=r(tEt,"XLMForMultipleChoice"),tEt.forEach(t),SHo=r(tBe," (XLM model)"),tBe.forEach(t),RHo=i(ee),uF=n(ee,"LI",{});var aBe=s(uF);kue=n(aBe,"STRONG",{});var aEt=s(kue);PHo=r(aEt,"xlm-roberta"),aEt.forEach(t),BHo=r(aBe," \u2014 "),Mz=n(aBe,"A",{href:!0});var nEt=s(Mz);NHo=r(nEt,"XLMRobertaForMultipleChoice"),nEt.forEach(t),IHo=r(aBe," (XLM-RoBERTa model)"),aBe.forEach(t),qHo=i(ee),bF=n(ee,"LI",{});var nBe=s(bF);Sue=n(nBe,"STRONG",{});var sEt=s(Sue);jHo=r(sEt,"xlm-roberta-xl"),sEt.forEach(t),DHo=r(nBe," \u2014 "),Ez=n(nBe,"A",{href:!0});var lEt=s(Ez);GHo=r(lEt,"XLMRobertaXLForMultipleChoice"),lEt.forEach(t),OHo=r(nBe," (XLM-RoBERTa-XL model)"),nBe.forEach(t),VHo=i(ee),vF=n(ee,"LI",{});var sBe=s(vF);Rue=n(sBe,"STRONG",{});var iEt=s(Rue);XHo=r(iEt,"xlnet"),iEt.forEach(t),zHo=r(sBe," \u2014 "),Cz=n(sBe,"A",{href:!0});var dEt=s(Cz);QHo=r(dEt,"XLNetForMultipleChoice"),dEt.forEach(t),WHo=r(sBe," (XLNet model)"),sBe.forEach(t),HHo=i(ee),FF=n(ee,"LI",{});var lBe=s(FF);Pue=n(lBe,"STRONG",{});var cEt=s(Pue);UHo=r(cEt,"yoso"),cEt.forEach(t),JHo=r(lBe," \u2014 "),wz=n(lBe,"A",{href:!0});var fEt=s(wz);YHo=r(fEt,"YosoForMultipleChoice"),fEt.forEach(t),KHo=r(lBe," (YOSO model)"),lBe.forEach(t),ee.forEach(t),ZHo=i(ga),TF=n(ga,"P",{});var iBe=s(TF);eUo=r(iBe,"The model is set in evaluation mode by default using "),Bue=n(iBe,"CODE",{});var mEt=s(Bue);oUo=r(mEt,"model.eval()"),mEt.forEach(t),rUo=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(iBe,"CODE",{});var gEt=s(Nue);tUo=r(gEt,"model.train()"),gEt.forEach(t),iBe.forEach(t),aUo=i(ga),T(MF.$$.fragment,ga),ga.forEach(t),dl.forEach(t),xXe=i(f),dd=n(f,"H2",{class:!0});var BQe=s(dd);EF=n(BQe,"A",{id:!0,class:!0,href:!0});var hEt=s(EF);Iue=n(hEt,"SPAN",{});var pEt=s(Iue);T(my.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),nUo=i(BQe),que=n(BQe,"SPAN",{});var _Et=s(que);sUo=r(_Et,"AutoModelForNextSentencePrediction"),_Et.forEach(t),BQe.forEach(t),$Xe=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(gy.$$.fragment,cl),lUo=i(cl),cd=n(cl,"P",{});var Ure=s(cd);iUo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Az=n(Ure,"A",{href:!0});var uEt=s(Az);dUo=r(uEt,"from_pretrained()"),uEt.forEach(t),cUo=r(Ure," class method or the "),Lz=n(Ure,"A",{href:!0});var bEt=s(Lz);fUo=r(bEt,"from_config()"),bEt.forEach(t),mUo=r(Ure,` class
method.`),Ure.forEach(t),gUo=i(cl),hy=n(cl,"P",{});var NQe=s(hy);hUo=r(NQe,"This class cannot be instantiated directly using "),jue=n(NQe,"CODE",{});var vEt=s(jue);pUo=r(vEt,"__init__()"),vEt.forEach(t),_Uo=r(NQe," (throws an error)."),NQe.forEach(t),uUo=i(cl),pt=n(cl,"DIV",{class:!0});var EA=s(pt);T(py.$$.fragment,EA),bUo=i(EA),Due=n(EA,"P",{});var FEt=s(Due);vUo=r(FEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FEt.forEach(t),FUo=i(EA),fd=n(EA,"P",{});var Jre=s(fd);TUo=r(Jre,`Note:
Loading a model from its configuration file does `),Gue=n(Jre,"STRONG",{});var TEt=s(Gue);MUo=r(TEt,"not"),TEt.forEach(t),EUo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(Jre,"A",{href:!0});var MEt=s(yz);CUo=r(MEt,"from_pretrained()"),MEt.forEach(t),wUo=r(Jre," to load the model weights."),Jre.forEach(t),AUo=i(EA),T(CF.$$.fragment,EA),EA.forEach(t),LUo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(_y.$$.fragment,ha),yUo=i(ha),Oue=n(ha,"P",{});var EEt=s(Oue);xUo=r(EEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EEt.forEach(t),$Uo=i(ha),Va=n(ha,"P",{});var CA=s(Va);kUo=r(CA,"The model class to instantiate is selected based on the "),Vue=n(CA,"CODE",{});var CEt=s(Vue);SUo=r(CEt,"model_type"),CEt.forEach(t),RUo=r(CA,` property of the config object (either
passed as an argument or loaded from `),Xue=n(CA,"CODE",{});var wEt=s(Xue);PUo=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),BUo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(CA,"CODE",{});var AEt=s(zue);NUo=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),IUo=r(CA,":"),CA.forEach(t),qUo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);wF=n(pa,"LI",{});var dBe=s(wF);Que=n(dBe,"STRONG",{});var LEt=s(Que);jUo=r(LEt,"bert"),LEt.forEach(t),DUo=r(dBe," \u2014 "),xz=n(dBe,"A",{href:!0});var yEt=s(xz);GUo=r(yEt,"BertForNextSentencePrediction"),yEt.forEach(t),OUo=r(dBe," (BERT model)"),dBe.forEach(t),VUo=i(pa),AF=n(pa,"LI",{});var cBe=s(AF);Wue=n(cBe,"STRONG",{});var xEt=s(Wue);XUo=r(xEt,"fnet"),xEt.forEach(t),zUo=r(cBe," \u2014 "),$z=n(cBe,"A",{href:!0});var $Et=s($z);QUo=r($Et,"FNetForNextSentencePrediction"),$Et.forEach(t),WUo=r(cBe," (FNet model)"),cBe.forEach(t),HUo=i(pa),LF=n(pa,"LI",{});var fBe=s(LF);Hue=n(fBe,"STRONG",{});var kEt=s(Hue);UUo=r(kEt,"megatron-bert"),kEt.forEach(t),JUo=r(fBe," \u2014 "),kz=n(fBe,"A",{href:!0});var SEt=s(kz);YUo=r(SEt,"MegatronBertForNextSentencePrediction"),SEt.forEach(t),KUo=r(fBe," (Megatron-BERT model)"),fBe.forEach(t),ZUo=i(pa),yF=n(pa,"LI",{});var mBe=s(yF);Uue=n(mBe,"STRONG",{});var REt=s(Uue);eJo=r(REt,"mobilebert"),REt.forEach(t),oJo=r(mBe," \u2014 "),Sz=n(mBe,"A",{href:!0});var PEt=s(Sz);rJo=r(PEt,"MobileBertForNextSentencePrediction"),PEt.forEach(t),tJo=r(mBe," (MobileBERT model)"),mBe.forEach(t),aJo=i(pa),xF=n(pa,"LI",{});var gBe=s(xF);Jue=n(gBe,"STRONG",{});var BEt=s(Jue);nJo=r(BEt,"nezha"),BEt.forEach(t),sJo=r(gBe," \u2014 "),Rz=n(gBe,"A",{href:!0});var NEt=s(Rz);lJo=r(NEt,"NezhaForNextSentencePrediction"),NEt.forEach(t),iJo=r(gBe," (Nezha model)"),gBe.forEach(t),dJo=i(pa),$F=n(pa,"LI",{});var hBe=s($F);Yue=n(hBe,"STRONG",{});var IEt=s(Yue);cJo=r(IEt,"qdqbert"),IEt.forEach(t),fJo=r(hBe," \u2014 "),Pz=n(hBe,"A",{href:!0});var qEt=s(Pz);mJo=r(qEt,"QDQBertForNextSentencePrediction"),qEt.forEach(t),gJo=r(hBe," (QDQBert model)"),hBe.forEach(t),pa.forEach(t),hJo=i(ha),kF=n(ha,"P",{});var pBe=s(kF);pJo=r(pBe,"The model is set in evaluation mode by default using "),Kue=n(pBe,"CODE",{});var jEt=s(Kue);_Jo=r(jEt,"model.eval()"),jEt.forEach(t),uJo=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(pBe,"CODE",{});var DEt=s(Zue);bJo=r(DEt,"model.train()"),DEt.forEach(t),pBe.forEach(t),vJo=i(ha),T(SF.$$.fragment,ha),ha.forEach(t),cl.forEach(t),kXe=i(f),md=n(f,"H2",{class:!0});var IQe=s(md);RF=n(IQe,"A",{id:!0,class:!0,href:!0});var GEt=s(RF);e1e=n(GEt,"SPAN",{});var OEt=s(e1e);T(uy.$$.fragment,OEt),OEt.forEach(t),GEt.forEach(t),FJo=i(IQe),o1e=n(IQe,"SPAN",{});var VEt=s(o1e);TJo=r(VEt,"AutoModelForTokenClassification"),VEt.forEach(t),IQe.forEach(t),SXe=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(by.$$.fragment,fl),MJo=i(fl),gd=n(fl,"P",{});var Yre=s(gd);EJo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=n(Yre,"A",{href:!0});var XEt=s(Bz);CJo=r(XEt,"from_pretrained()"),XEt.forEach(t),wJo=r(Yre," class method or the "),Nz=n(Yre,"A",{href:!0});var zEt=s(Nz);AJo=r(zEt,"from_config()"),zEt.forEach(t),LJo=r(Yre,` class
method.`),Yre.forEach(t),yJo=i(fl),vy=n(fl,"P",{});var qQe=s(vy);xJo=r(qQe,"This class cannot be instantiated directly using "),r1e=n(qQe,"CODE",{});var QEt=s(r1e);$Jo=r(QEt,"__init__()"),QEt.forEach(t),kJo=r(qQe," (throws an error)."),qQe.forEach(t),SJo=i(fl),_t=n(fl,"DIV",{class:!0});var wA=s(_t);T(Fy.$$.fragment,wA),RJo=i(wA),t1e=n(wA,"P",{});var WEt=s(t1e);PJo=r(WEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WEt.forEach(t),BJo=i(wA),hd=n(wA,"P",{});var Kre=s(hd);NJo=r(Kre,`Note:
Loading a model from its configuration file does `),a1e=n(Kre,"STRONG",{});var HEt=s(a1e);IJo=r(HEt,"not"),HEt.forEach(t),qJo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(Kre,"A",{href:!0});var UEt=s(Iz);jJo=r(UEt,"from_pretrained()"),UEt.forEach(t),DJo=r(Kre," to load the model weights."),Kre.forEach(t),GJo=i(wA),T(PF.$$.fragment,wA),wA.forEach(t),OJo=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(Ty.$$.fragment,_a),VJo=i(_a),n1e=n(_a,"P",{});var JEt=s(n1e);XJo=r(JEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JEt.forEach(t),zJo=i(_a),Xa=n(_a,"P",{});var AA=s(Xa);QJo=r(AA,"The model class to instantiate is selected based on the "),s1e=n(AA,"CODE",{});var YEt=s(s1e);WJo=r(YEt,"model_type"),YEt.forEach(t),HJo=r(AA,` property of the config object (either
passed as an argument or loaded from `),l1e=n(AA,"CODE",{});var KEt=s(l1e);UJo=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),JJo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(AA,"CODE",{});var ZEt=s(i1e);YJo=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),KJo=r(AA,":"),AA.forEach(t),ZJo=i(_a),U=n(_a,"UL",{});var J=s(U);BF=n(J,"LI",{});var _Be=s(BF);d1e=n(_Be,"STRONG",{});var eCt=s(d1e);eYo=r(eCt,"albert"),eCt.forEach(t),oYo=r(_Be," \u2014 "),qz=n(_Be,"A",{href:!0});var oCt=s(qz);rYo=r(oCt,"AlbertForTokenClassification"),oCt.forEach(t),tYo=r(_Be," (ALBERT model)"),_Be.forEach(t),aYo=i(J),NF=n(J,"LI",{});var uBe=s(NF);c1e=n(uBe,"STRONG",{});var rCt=s(c1e);nYo=r(rCt,"bert"),rCt.forEach(t),sYo=r(uBe," \u2014 "),jz=n(uBe,"A",{href:!0});var tCt=s(jz);lYo=r(tCt,"BertForTokenClassification"),tCt.forEach(t),iYo=r(uBe," (BERT model)"),uBe.forEach(t),dYo=i(J),IF=n(J,"LI",{});var bBe=s(IF);f1e=n(bBe,"STRONG",{});var aCt=s(f1e);cYo=r(aCt,"big_bird"),aCt.forEach(t),fYo=r(bBe," \u2014 "),Dz=n(bBe,"A",{href:!0});var nCt=s(Dz);mYo=r(nCt,"BigBirdForTokenClassification"),nCt.forEach(t),gYo=r(bBe," (BigBird model)"),bBe.forEach(t),hYo=i(J),qF=n(J,"LI",{});var vBe=s(qF);m1e=n(vBe,"STRONG",{});var sCt=s(m1e);pYo=r(sCt,"bloom"),sCt.forEach(t),_Yo=r(vBe," \u2014 "),Gz=n(vBe,"A",{href:!0});var lCt=s(Gz);uYo=r(lCt,"BloomForTokenClassification"),lCt.forEach(t),bYo=r(vBe," (BLOOM model)"),vBe.forEach(t),vYo=i(J),jF=n(J,"LI",{});var FBe=s(jF);g1e=n(FBe,"STRONG",{});var iCt=s(g1e);FYo=r(iCt,"camembert"),iCt.forEach(t),TYo=r(FBe," \u2014 "),Oz=n(FBe,"A",{href:!0});var dCt=s(Oz);MYo=r(dCt,"CamembertForTokenClassification"),dCt.forEach(t),EYo=r(FBe," (CamemBERT model)"),FBe.forEach(t),CYo=i(J),DF=n(J,"LI",{});var TBe=s(DF);h1e=n(TBe,"STRONG",{});var cCt=s(h1e);wYo=r(cCt,"canine"),cCt.forEach(t),AYo=r(TBe," \u2014 "),Vz=n(TBe,"A",{href:!0});var fCt=s(Vz);LYo=r(fCt,"CanineForTokenClassification"),fCt.forEach(t),yYo=r(TBe," (CANINE model)"),TBe.forEach(t),xYo=i(J),GF=n(J,"LI",{});var MBe=s(GF);p1e=n(MBe,"STRONG",{});var mCt=s(p1e);$Yo=r(mCt,"convbert"),mCt.forEach(t),kYo=r(MBe," \u2014 "),Xz=n(MBe,"A",{href:!0});var gCt=s(Xz);SYo=r(gCt,"ConvBertForTokenClassification"),gCt.forEach(t),RYo=r(MBe," (ConvBERT model)"),MBe.forEach(t),PYo=i(J),OF=n(J,"LI",{});var EBe=s(OF);_1e=n(EBe,"STRONG",{});var hCt=s(_1e);BYo=r(hCt,"data2vec-text"),hCt.forEach(t),NYo=r(EBe," \u2014 "),zz=n(EBe,"A",{href:!0});var pCt=s(zz);IYo=r(pCt,"Data2VecTextForTokenClassification"),pCt.forEach(t),qYo=r(EBe," (Data2VecText model)"),EBe.forEach(t),jYo=i(J),VF=n(J,"LI",{});var CBe=s(VF);u1e=n(CBe,"STRONG",{});var _Ct=s(u1e);DYo=r(_Ct,"deberta"),_Ct.forEach(t),GYo=r(CBe," \u2014 "),Qz=n(CBe,"A",{href:!0});var uCt=s(Qz);OYo=r(uCt,"DebertaForTokenClassification"),uCt.forEach(t),VYo=r(CBe," (DeBERTa model)"),CBe.forEach(t),XYo=i(J),XF=n(J,"LI",{});var wBe=s(XF);b1e=n(wBe,"STRONG",{});var bCt=s(b1e);zYo=r(bCt,"deberta-v2"),bCt.forEach(t),QYo=r(wBe," \u2014 "),Wz=n(wBe,"A",{href:!0});var vCt=s(Wz);WYo=r(vCt,"DebertaV2ForTokenClassification"),vCt.forEach(t),HYo=r(wBe," (DeBERTa-v2 model)"),wBe.forEach(t),UYo=i(J),zF=n(J,"LI",{});var ABe=s(zF);v1e=n(ABe,"STRONG",{});var FCt=s(v1e);JYo=r(FCt,"distilbert"),FCt.forEach(t),YYo=r(ABe," \u2014 "),Hz=n(ABe,"A",{href:!0});var TCt=s(Hz);KYo=r(TCt,"DistilBertForTokenClassification"),TCt.forEach(t),ZYo=r(ABe," (DistilBERT model)"),ABe.forEach(t),eKo=i(J),QF=n(J,"LI",{});var LBe=s(QF);F1e=n(LBe,"STRONG",{});var MCt=s(F1e);oKo=r(MCt,"electra"),MCt.forEach(t),rKo=r(LBe," \u2014 "),Uz=n(LBe,"A",{href:!0});var ECt=s(Uz);tKo=r(ECt,"ElectraForTokenClassification"),ECt.forEach(t),aKo=r(LBe," (ELECTRA model)"),LBe.forEach(t),nKo=i(J),WF=n(J,"LI",{});var yBe=s(WF);T1e=n(yBe,"STRONG",{});var CCt=s(T1e);sKo=r(CCt,"flaubert"),CCt.forEach(t),lKo=r(yBe," \u2014 "),Jz=n(yBe,"A",{href:!0});var wCt=s(Jz);iKo=r(wCt,"FlaubertForTokenClassification"),wCt.forEach(t),dKo=r(yBe," (FlauBERT model)"),yBe.forEach(t),cKo=i(J),HF=n(J,"LI",{});var xBe=s(HF);M1e=n(xBe,"STRONG",{});var ACt=s(M1e);fKo=r(ACt,"fnet"),ACt.forEach(t),mKo=r(xBe," \u2014 "),Yz=n(xBe,"A",{href:!0});var LCt=s(Yz);gKo=r(LCt,"FNetForTokenClassification"),LCt.forEach(t),hKo=r(xBe," (FNet model)"),xBe.forEach(t),pKo=i(J),UF=n(J,"LI",{});var $Be=s(UF);E1e=n($Be,"STRONG",{});var yCt=s(E1e);_Ko=r(yCt,"funnel"),yCt.forEach(t),uKo=r($Be," \u2014 "),Kz=n($Be,"A",{href:!0});var xCt=s(Kz);bKo=r(xCt,"FunnelForTokenClassification"),xCt.forEach(t),vKo=r($Be," (Funnel Transformer model)"),$Be.forEach(t),FKo=i(J),JF=n(J,"LI",{});var kBe=s(JF);C1e=n(kBe,"STRONG",{});var $Ct=s(C1e);TKo=r($Ct,"gpt2"),$Ct.forEach(t),MKo=r(kBe," \u2014 "),Zz=n(kBe,"A",{href:!0});var kCt=s(Zz);EKo=r(kCt,"GPT2ForTokenClassification"),kCt.forEach(t),CKo=r(kBe," (OpenAI GPT-2 model)"),kBe.forEach(t),wKo=i(J),YF=n(J,"LI",{});var SBe=s(YF);w1e=n(SBe,"STRONG",{});var SCt=s(w1e);AKo=r(SCt,"ibert"),SCt.forEach(t),LKo=r(SBe," \u2014 "),eQ=n(SBe,"A",{href:!0});var RCt=s(eQ);yKo=r(RCt,"IBertForTokenClassification"),RCt.forEach(t),xKo=r(SBe," (I-BERT model)"),SBe.forEach(t),$Ko=i(J),KF=n(J,"LI",{});var RBe=s(KF);A1e=n(RBe,"STRONG",{});var PCt=s(A1e);kKo=r(PCt,"layoutlm"),PCt.forEach(t),SKo=r(RBe," \u2014 "),oQ=n(RBe,"A",{href:!0});var BCt=s(oQ);RKo=r(BCt,"LayoutLMForTokenClassification"),BCt.forEach(t),PKo=r(RBe," (LayoutLM model)"),RBe.forEach(t),BKo=i(J),ZF=n(J,"LI",{});var PBe=s(ZF);L1e=n(PBe,"STRONG",{});var NCt=s(L1e);NKo=r(NCt,"layoutlmv2"),NCt.forEach(t),IKo=r(PBe," \u2014 "),rQ=n(PBe,"A",{href:!0});var ICt=s(rQ);qKo=r(ICt,"LayoutLMv2ForTokenClassification"),ICt.forEach(t),jKo=r(PBe," (LayoutLMv2 model)"),PBe.forEach(t),DKo=i(J),e6=n(J,"LI",{});var BBe=s(e6);y1e=n(BBe,"STRONG",{});var qCt=s(y1e);GKo=r(qCt,"layoutlmv3"),qCt.forEach(t),OKo=r(BBe," \u2014 "),tQ=n(BBe,"A",{href:!0});var jCt=s(tQ);VKo=r(jCt,"LayoutLMv3ForTokenClassification"),jCt.forEach(t),XKo=r(BBe," (LayoutLMv3 model)"),BBe.forEach(t),zKo=i(J),o6=n(J,"LI",{});var NBe=s(o6);x1e=n(NBe,"STRONG",{});var DCt=s(x1e);QKo=r(DCt,"longformer"),DCt.forEach(t),WKo=r(NBe," \u2014 "),aQ=n(NBe,"A",{href:!0});var GCt=s(aQ);HKo=r(GCt,"LongformerForTokenClassification"),GCt.forEach(t),UKo=r(NBe," (Longformer model)"),NBe.forEach(t),JKo=i(J),r6=n(J,"LI",{});var IBe=s(r6);$1e=n(IBe,"STRONG",{});var OCt=s($1e);YKo=r(OCt,"megatron-bert"),OCt.forEach(t),KKo=r(IBe," \u2014 "),nQ=n(IBe,"A",{href:!0});var VCt=s(nQ);ZKo=r(VCt,"MegatronBertForTokenClassification"),VCt.forEach(t),eZo=r(IBe," (Megatron-BERT model)"),IBe.forEach(t),oZo=i(J),t6=n(J,"LI",{});var qBe=s(t6);k1e=n(qBe,"STRONG",{});var XCt=s(k1e);rZo=r(XCt,"mobilebert"),XCt.forEach(t),tZo=r(qBe," \u2014 "),sQ=n(qBe,"A",{href:!0});var zCt=s(sQ);aZo=r(zCt,"MobileBertForTokenClassification"),zCt.forEach(t),nZo=r(qBe," (MobileBERT model)"),qBe.forEach(t),sZo=i(J),a6=n(J,"LI",{});var jBe=s(a6);S1e=n(jBe,"STRONG",{});var QCt=s(S1e);lZo=r(QCt,"mpnet"),QCt.forEach(t),iZo=r(jBe," \u2014 "),lQ=n(jBe,"A",{href:!0});var WCt=s(lQ);dZo=r(WCt,"MPNetForTokenClassification"),WCt.forEach(t),cZo=r(jBe," (MPNet model)"),jBe.forEach(t),fZo=i(J),n6=n(J,"LI",{});var DBe=s(n6);R1e=n(DBe,"STRONG",{});var HCt=s(R1e);mZo=r(HCt,"nezha"),HCt.forEach(t),gZo=r(DBe," \u2014 "),iQ=n(DBe,"A",{href:!0});var UCt=s(iQ);hZo=r(UCt,"NezhaForTokenClassification"),UCt.forEach(t),pZo=r(DBe," (Nezha model)"),DBe.forEach(t),_Zo=i(J),s6=n(J,"LI",{});var GBe=s(s6);P1e=n(GBe,"STRONG",{});var JCt=s(P1e);uZo=r(JCt,"nystromformer"),JCt.forEach(t),bZo=r(GBe," \u2014 "),dQ=n(GBe,"A",{href:!0});var YCt=s(dQ);vZo=r(YCt,"NystromformerForTokenClassification"),YCt.forEach(t),FZo=r(GBe," (Nystr\xF6mformer model)"),GBe.forEach(t),TZo=i(J),l6=n(J,"LI",{});var OBe=s(l6);B1e=n(OBe,"STRONG",{});var KCt=s(B1e);MZo=r(KCt,"qdqbert"),KCt.forEach(t),EZo=r(OBe," \u2014 "),cQ=n(OBe,"A",{href:!0});var ZCt=s(cQ);CZo=r(ZCt,"QDQBertForTokenClassification"),ZCt.forEach(t),wZo=r(OBe," (QDQBert model)"),OBe.forEach(t),AZo=i(J),i6=n(J,"LI",{});var VBe=s(i6);N1e=n(VBe,"STRONG",{});var e3t=s(N1e);LZo=r(e3t,"rembert"),e3t.forEach(t),yZo=r(VBe," \u2014 "),fQ=n(VBe,"A",{href:!0});var o3t=s(fQ);xZo=r(o3t,"RemBertForTokenClassification"),o3t.forEach(t),$Zo=r(VBe," (RemBERT model)"),VBe.forEach(t),kZo=i(J),d6=n(J,"LI",{});var XBe=s(d6);I1e=n(XBe,"STRONG",{});var r3t=s(I1e);SZo=r(r3t,"roberta"),r3t.forEach(t),RZo=r(XBe," \u2014 "),mQ=n(XBe,"A",{href:!0});var t3t=s(mQ);PZo=r(t3t,"RobertaForTokenClassification"),t3t.forEach(t),BZo=r(XBe," (RoBERTa model)"),XBe.forEach(t),NZo=i(J),c6=n(J,"LI",{});var zBe=s(c6);q1e=n(zBe,"STRONG",{});var a3t=s(q1e);IZo=r(a3t,"roformer"),a3t.forEach(t),qZo=r(zBe," \u2014 "),gQ=n(zBe,"A",{href:!0});var n3t=s(gQ);jZo=r(n3t,"RoFormerForTokenClassification"),n3t.forEach(t),DZo=r(zBe," (RoFormer model)"),zBe.forEach(t),GZo=i(J),f6=n(J,"LI",{});var QBe=s(f6);j1e=n(QBe,"STRONG",{});var s3t=s(j1e);OZo=r(s3t,"squeezebert"),s3t.forEach(t),VZo=r(QBe," \u2014 "),hQ=n(QBe,"A",{href:!0});var l3t=s(hQ);XZo=r(l3t,"SqueezeBertForTokenClassification"),l3t.forEach(t),zZo=r(QBe," (SqueezeBERT model)"),QBe.forEach(t),QZo=i(J),m6=n(J,"LI",{});var WBe=s(m6);D1e=n(WBe,"STRONG",{});var i3t=s(D1e);WZo=r(i3t,"xlm"),i3t.forEach(t),HZo=r(WBe," \u2014 "),pQ=n(WBe,"A",{href:!0});var d3t=s(pQ);UZo=r(d3t,"XLMForTokenClassification"),d3t.forEach(t),JZo=r(WBe," (XLM model)"),WBe.forEach(t),YZo=i(J),g6=n(J,"LI",{});var HBe=s(g6);G1e=n(HBe,"STRONG",{});var c3t=s(G1e);KZo=r(c3t,"xlm-roberta"),c3t.forEach(t),ZZo=r(HBe," \u2014 "),_Q=n(HBe,"A",{href:!0});var f3t=s(_Q);eer=r(f3t,"XLMRobertaForTokenClassification"),f3t.forEach(t),oer=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),rer=i(J),h6=n(J,"LI",{});var UBe=s(h6);O1e=n(UBe,"STRONG",{});var m3t=s(O1e);ter=r(m3t,"xlm-roberta-xl"),m3t.forEach(t),aer=r(UBe," \u2014 "),uQ=n(UBe,"A",{href:!0});var g3t=s(uQ);ner=r(g3t,"XLMRobertaXLForTokenClassification"),g3t.forEach(t),ser=r(UBe," (XLM-RoBERTa-XL model)"),UBe.forEach(t),ler=i(J),p6=n(J,"LI",{});var JBe=s(p6);V1e=n(JBe,"STRONG",{});var h3t=s(V1e);ier=r(h3t,"xlnet"),h3t.forEach(t),der=r(JBe," \u2014 "),bQ=n(JBe,"A",{href:!0});var p3t=s(bQ);cer=r(p3t,"XLNetForTokenClassification"),p3t.forEach(t),fer=r(JBe," (XLNet model)"),JBe.forEach(t),mer=i(J),_6=n(J,"LI",{});var YBe=s(_6);X1e=n(YBe,"STRONG",{});var _3t=s(X1e);ger=r(_3t,"yoso"),_3t.forEach(t),her=r(YBe," \u2014 "),vQ=n(YBe,"A",{href:!0});var u3t=s(vQ);per=r(u3t,"YosoForTokenClassification"),u3t.forEach(t),_er=r(YBe," (YOSO model)"),YBe.forEach(t),J.forEach(t),uer=i(_a),u6=n(_a,"P",{});var KBe=s(u6);ber=r(KBe,"The model is set in evaluation mode by default using "),z1e=n(KBe,"CODE",{});var b3t=s(z1e);ver=r(b3t,"model.eval()"),b3t.forEach(t),Fer=r(KBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=n(KBe,"CODE",{});var v3t=s(Q1e);Ter=r(v3t,"model.train()"),v3t.forEach(t),KBe.forEach(t),Mer=i(_a),T(b6.$$.fragment,_a),_a.forEach(t),fl.forEach(t),RXe=i(f),pd=n(f,"H2",{class:!0});var jQe=s(pd);v6=n(jQe,"A",{id:!0,class:!0,href:!0});var F3t=s(v6);W1e=n(F3t,"SPAN",{});var T3t=s(W1e);T(My.$$.fragment,T3t),T3t.forEach(t),F3t.forEach(t),Eer=i(jQe),H1e=n(jQe,"SPAN",{});var M3t=s(H1e);Cer=r(M3t,"AutoModelForQuestionAnswering"),M3t.forEach(t),jQe.forEach(t),PXe=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(Ey.$$.fragment,ml),wer=i(ml),_d=n(ml,"P",{});var Zre=s(_d);Aer=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FQ=n(Zre,"A",{href:!0});var E3t=s(FQ);Ler=r(E3t,"from_pretrained()"),E3t.forEach(t),yer=r(Zre," class method or the "),TQ=n(Zre,"A",{href:!0});var C3t=s(TQ);xer=r(C3t,"from_config()"),C3t.forEach(t),$er=r(Zre,` class
method.`),Zre.forEach(t),ker=i(ml),Cy=n(ml,"P",{});var DQe=s(Cy);Ser=r(DQe,"This class cannot be instantiated directly using "),U1e=n(DQe,"CODE",{});var w3t=s(U1e);Rer=r(w3t,"__init__()"),w3t.forEach(t),Per=r(DQe," (throws an error)."),DQe.forEach(t),Ber=i(ml),ut=n(ml,"DIV",{class:!0});var LA=s(ut);T(wy.$$.fragment,LA),Ner=i(LA),J1e=n(LA,"P",{});var A3t=s(J1e);Ier=r(A3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A3t.forEach(t),qer=i(LA),ud=n(LA,"P",{});var ete=s(ud);jer=r(ete,`Note:
Loading a model from its configuration file does `),Y1e=n(ete,"STRONG",{});var L3t=s(Y1e);Der=r(L3t,"not"),L3t.forEach(t),Ger=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(ete,"A",{href:!0});var y3t=s(MQ);Oer=r(y3t,"from_pretrained()"),y3t.forEach(t),Ver=r(ete," to load the model weights."),ete.forEach(t),Xer=i(LA),T(F6.$$.fragment,LA),LA.forEach(t),zer=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T(Ay.$$.fragment,ua),Qer=i(ua),K1e=n(ua,"P",{});var x3t=s(K1e);Wer=r(x3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x3t.forEach(t),Her=i(ua),za=n(ua,"P",{});var yA=s(za);Uer=r(yA,"The model class to instantiate is selected based on the "),Z1e=n(yA,"CODE",{});var $3t=s(Z1e);Jer=r($3t,"model_type"),$3t.forEach(t),Yer=r(yA,` property of the config object (either
passed as an argument or loaded from `),e2e=n(yA,"CODE",{});var k3t=s(e2e);Ker=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),Zer=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(yA,"CODE",{});var S3t=s(o2e);eor=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),oor=r(yA,":"),yA.forEach(t),ror=i(ua),V=n(ua,"UL",{});var X=s(V);T6=n(X,"LI",{});var ZBe=s(T6);r2e=n(ZBe,"STRONG",{});var R3t=s(r2e);tor=r(R3t,"albert"),R3t.forEach(t),aor=r(ZBe," \u2014 "),EQ=n(ZBe,"A",{href:!0});var P3t=s(EQ);nor=r(P3t,"AlbertForQuestionAnswering"),P3t.forEach(t),sor=r(ZBe," (ALBERT model)"),ZBe.forEach(t),lor=i(X),M6=n(X,"LI",{});var eNe=s(M6);t2e=n(eNe,"STRONG",{});var B3t=s(t2e);ior=r(B3t,"bart"),B3t.forEach(t),dor=r(eNe," \u2014 "),CQ=n(eNe,"A",{href:!0});var N3t=s(CQ);cor=r(N3t,"BartForQuestionAnswering"),N3t.forEach(t),mor=r(eNe," (BART model)"),eNe.forEach(t),gor=i(X),E6=n(X,"LI",{});var oNe=s(E6);a2e=n(oNe,"STRONG",{});var I3t=s(a2e);hor=r(I3t,"bert"),I3t.forEach(t),por=r(oNe," \u2014 "),wQ=n(oNe,"A",{href:!0});var q3t=s(wQ);_or=r(q3t,"BertForQuestionAnswering"),q3t.forEach(t),uor=r(oNe," (BERT model)"),oNe.forEach(t),bor=i(X),C6=n(X,"LI",{});var rNe=s(C6);n2e=n(rNe,"STRONG",{});var j3t=s(n2e);vor=r(j3t,"big_bird"),j3t.forEach(t),For=r(rNe," \u2014 "),AQ=n(rNe,"A",{href:!0});var D3t=s(AQ);Tor=r(D3t,"BigBirdForQuestionAnswering"),D3t.forEach(t),Mor=r(rNe," (BigBird model)"),rNe.forEach(t),Eor=i(X),w6=n(X,"LI",{});var tNe=s(w6);s2e=n(tNe,"STRONG",{});var G3t=s(s2e);Cor=r(G3t,"bigbird_pegasus"),G3t.forEach(t),wor=r(tNe," \u2014 "),LQ=n(tNe,"A",{href:!0});var O3t=s(LQ);Aor=r(O3t,"BigBirdPegasusForQuestionAnswering"),O3t.forEach(t),Lor=r(tNe," (BigBird-Pegasus model)"),tNe.forEach(t),yor=i(X),A6=n(X,"LI",{});var aNe=s(A6);l2e=n(aNe,"STRONG",{});var V3t=s(l2e);xor=r(V3t,"camembert"),V3t.forEach(t),$or=r(aNe," \u2014 "),yQ=n(aNe,"A",{href:!0});var X3t=s(yQ);kor=r(X3t,"CamembertForQuestionAnswering"),X3t.forEach(t),Sor=r(aNe," (CamemBERT model)"),aNe.forEach(t),Ror=i(X),L6=n(X,"LI",{});var nNe=s(L6);i2e=n(nNe,"STRONG",{});var z3t=s(i2e);Por=r(z3t,"canine"),z3t.forEach(t),Bor=r(nNe," \u2014 "),xQ=n(nNe,"A",{href:!0});var Q3t=s(xQ);Nor=r(Q3t,"CanineForQuestionAnswering"),Q3t.forEach(t),Ior=r(nNe," (CANINE model)"),nNe.forEach(t),qor=i(X),y6=n(X,"LI",{});var sNe=s(y6);d2e=n(sNe,"STRONG",{});var W3t=s(d2e);jor=r(W3t,"convbert"),W3t.forEach(t),Dor=r(sNe," \u2014 "),$Q=n(sNe,"A",{href:!0});var H3t=s($Q);Gor=r(H3t,"ConvBertForQuestionAnswering"),H3t.forEach(t),Oor=r(sNe," (ConvBERT model)"),sNe.forEach(t),Vor=i(X),x6=n(X,"LI",{});var lNe=s(x6);c2e=n(lNe,"STRONG",{});var U3t=s(c2e);Xor=r(U3t,"data2vec-text"),U3t.forEach(t),zor=r(lNe," \u2014 "),kQ=n(lNe,"A",{href:!0});var J3t=s(kQ);Qor=r(J3t,"Data2VecTextForQuestionAnswering"),J3t.forEach(t),Wor=r(lNe," (Data2VecText model)"),lNe.forEach(t),Hor=i(X),$6=n(X,"LI",{});var iNe=s($6);f2e=n(iNe,"STRONG",{});var Y3t=s(f2e);Uor=r(Y3t,"deberta"),Y3t.forEach(t),Jor=r(iNe," \u2014 "),SQ=n(iNe,"A",{href:!0});var K3t=s(SQ);Yor=r(K3t,"DebertaForQuestionAnswering"),K3t.forEach(t),Kor=r(iNe," (DeBERTa model)"),iNe.forEach(t),Zor=i(X),k6=n(X,"LI",{});var dNe=s(k6);m2e=n(dNe,"STRONG",{});var Z3t=s(m2e);err=r(Z3t,"deberta-v2"),Z3t.forEach(t),orr=r(dNe," \u2014 "),RQ=n(dNe,"A",{href:!0});var e5t=s(RQ);rrr=r(e5t,"DebertaV2ForQuestionAnswering"),e5t.forEach(t),trr=r(dNe," (DeBERTa-v2 model)"),dNe.forEach(t),arr=i(X),S6=n(X,"LI",{});var cNe=s(S6);g2e=n(cNe,"STRONG",{});var o5t=s(g2e);nrr=r(o5t,"distilbert"),o5t.forEach(t),srr=r(cNe," \u2014 "),PQ=n(cNe,"A",{href:!0});var r5t=s(PQ);lrr=r(r5t,"DistilBertForQuestionAnswering"),r5t.forEach(t),irr=r(cNe," (DistilBERT model)"),cNe.forEach(t),drr=i(X),R6=n(X,"LI",{});var fNe=s(R6);h2e=n(fNe,"STRONG",{});var t5t=s(h2e);crr=r(t5t,"electra"),t5t.forEach(t),frr=r(fNe," \u2014 "),BQ=n(fNe,"A",{href:!0});var a5t=s(BQ);mrr=r(a5t,"ElectraForQuestionAnswering"),a5t.forEach(t),grr=r(fNe," (ELECTRA model)"),fNe.forEach(t),hrr=i(X),P6=n(X,"LI",{});var mNe=s(P6);p2e=n(mNe,"STRONG",{});var n5t=s(p2e);prr=r(n5t,"flaubert"),n5t.forEach(t),_rr=r(mNe," \u2014 "),NQ=n(mNe,"A",{href:!0});var s5t=s(NQ);urr=r(s5t,"FlaubertForQuestionAnsweringSimple"),s5t.forEach(t),brr=r(mNe," (FlauBERT model)"),mNe.forEach(t),vrr=i(X),B6=n(X,"LI",{});var gNe=s(B6);_2e=n(gNe,"STRONG",{});var l5t=s(_2e);Frr=r(l5t,"fnet"),l5t.forEach(t),Trr=r(gNe," \u2014 "),IQ=n(gNe,"A",{href:!0});var i5t=s(IQ);Mrr=r(i5t,"FNetForQuestionAnswering"),i5t.forEach(t),Err=r(gNe," (FNet model)"),gNe.forEach(t),Crr=i(X),N6=n(X,"LI",{});var hNe=s(N6);u2e=n(hNe,"STRONG",{});var d5t=s(u2e);wrr=r(d5t,"funnel"),d5t.forEach(t),Arr=r(hNe," \u2014 "),qQ=n(hNe,"A",{href:!0});var c5t=s(qQ);Lrr=r(c5t,"FunnelForQuestionAnswering"),c5t.forEach(t),yrr=r(hNe," (Funnel Transformer model)"),hNe.forEach(t),xrr=i(X),I6=n(X,"LI",{});var pNe=s(I6);b2e=n(pNe,"STRONG",{});var f5t=s(b2e);$rr=r(f5t,"gptj"),f5t.forEach(t),krr=r(pNe," \u2014 "),jQ=n(pNe,"A",{href:!0});var m5t=s(jQ);Srr=r(m5t,"GPTJForQuestionAnswering"),m5t.forEach(t),Rrr=r(pNe," (GPT-J model)"),pNe.forEach(t),Prr=i(X),q6=n(X,"LI",{});var _Ne=s(q6);v2e=n(_Ne,"STRONG",{});var g5t=s(v2e);Brr=r(g5t,"ibert"),g5t.forEach(t),Nrr=r(_Ne," \u2014 "),DQ=n(_Ne,"A",{href:!0});var h5t=s(DQ);Irr=r(h5t,"IBertForQuestionAnswering"),h5t.forEach(t),qrr=r(_Ne," (I-BERT model)"),_Ne.forEach(t),jrr=i(X),j6=n(X,"LI",{});var uNe=s(j6);F2e=n(uNe,"STRONG",{});var p5t=s(F2e);Drr=r(p5t,"layoutlmv2"),p5t.forEach(t),Grr=r(uNe," \u2014 "),GQ=n(uNe,"A",{href:!0});var _5t=s(GQ);Orr=r(_5t,"LayoutLMv2ForQuestionAnswering"),_5t.forEach(t),Vrr=r(uNe," (LayoutLMv2 model)"),uNe.forEach(t),Xrr=i(X),D6=n(X,"LI",{});var bNe=s(D6);T2e=n(bNe,"STRONG",{});var u5t=s(T2e);zrr=r(u5t,"layoutlmv3"),u5t.forEach(t),Qrr=r(bNe," \u2014 "),OQ=n(bNe,"A",{href:!0});var b5t=s(OQ);Wrr=r(b5t,"LayoutLMv3ForQuestionAnswering"),b5t.forEach(t),Hrr=r(bNe," (LayoutLMv3 model)"),bNe.forEach(t),Urr=i(X),G6=n(X,"LI",{});var vNe=s(G6);M2e=n(vNe,"STRONG",{});var v5t=s(M2e);Jrr=r(v5t,"led"),v5t.forEach(t),Yrr=r(vNe," \u2014 "),VQ=n(vNe,"A",{href:!0});var F5t=s(VQ);Krr=r(F5t,"LEDForQuestionAnswering"),F5t.forEach(t),Zrr=r(vNe," (LED model)"),vNe.forEach(t),etr=i(X),O6=n(X,"LI",{});var FNe=s(O6);E2e=n(FNe,"STRONG",{});var T5t=s(E2e);otr=r(T5t,"longformer"),T5t.forEach(t),rtr=r(FNe," \u2014 "),XQ=n(FNe,"A",{href:!0});var M5t=s(XQ);ttr=r(M5t,"LongformerForQuestionAnswering"),M5t.forEach(t),atr=r(FNe," (Longformer model)"),FNe.forEach(t),ntr=i(X),V6=n(X,"LI",{});var TNe=s(V6);C2e=n(TNe,"STRONG",{});var E5t=s(C2e);str=r(E5t,"lxmert"),E5t.forEach(t),ltr=r(TNe," \u2014 "),zQ=n(TNe,"A",{href:!0});var C5t=s(zQ);itr=r(C5t,"LxmertForQuestionAnswering"),C5t.forEach(t),dtr=r(TNe," (LXMERT model)"),TNe.forEach(t),ctr=i(X),X6=n(X,"LI",{});var MNe=s(X6);w2e=n(MNe,"STRONG",{});var w5t=s(w2e);ftr=r(w5t,"mbart"),w5t.forEach(t),mtr=r(MNe," \u2014 "),QQ=n(MNe,"A",{href:!0});var A5t=s(QQ);gtr=r(A5t,"MBartForQuestionAnswering"),A5t.forEach(t),htr=r(MNe," (mBART model)"),MNe.forEach(t),ptr=i(X),z6=n(X,"LI",{});var ENe=s(z6);A2e=n(ENe,"STRONG",{});var L5t=s(A2e);_tr=r(L5t,"megatron-bert"),L5t.forEach(t),utr=r(ENe," \u2014 "),WQ=n(ENe,"A",{href:!0});var y5t=s(WQ);btr=r(y5t,"MegatronBertForQuestionAnswering"),y5t.forEach(t),vtr=r(ENe," (Megatron-BERT model)"),ENe.forEach(t),Ftr=i(X),Q6=n(X,"LI",{});var CNe=s(Q6);L2e=n(CNe,"STRONG",{});var x5t=s(L2e);Ttr=r(x5t,"mobilebert"),x5t.forEach(t),Mtr=r(CNe," \u2014 "),HQ=n(CNe,"A",{href:!0});var $5t=s(HQ);Etr=r($5t,"MobileBertForQuestionAnswering"),$5t.forEach(t),Ctr=r(CNe," (MobileBERT model)"),CNe.forEach(t),wtr=i(X),W6=n(X,"LI",{});var wNe=s(W6);y2e=n(wNe,"STRONG",{});var k5t=s(y2e);Atr=r(k5t,"mpnet"),k5t.forEach(t),Ltr=r(wNe," \u2014 "),UQ=n(wNe,"A",{href:!0});var S5t=s(UQ);ytr=r(S5t,"MPNetForQuestionAnswering"),S5t.forEach(t),xtr=r(wNe," (MPNet model)"),wNe.forEach(t),$tr=i(X),H6=n(X,"LI",{});var ANe=s(H6);x2e=n(ANe,"STRONG",{});var R5t=s(x2e);ktr=r(R5t,"mvp"),R5t.forEach(t),Str=r(ANe," \u2014 "),JQ=n(ANe,"A",{href:!0});var P5t=s(JQ);Rtr=r(P5t,"MvpForQuestionAnswering"),P5t.forEach(t),Ptr=r(ANe," (MVP model)"),ANe.forEach(t),Btr=i(X),U6=n(X,"LI",{});var LNe=s(U6);$2e=n(LNe,"STRONG",{});var B5t=s($2e);Ntr=r(B5t,"nezha"),B5t.forEach(t),Itr=r(LNe," \u2014 "),YQ=n(LNe,"A",{href:!0});var N5t=s(YQ);qtr=r(N5t,"NezhaForQuestionAnswering"),N5t.forEach(t),jtr=r(LNe," (Nezha model)"),LNe.forEach(t),Dtr=i(X),J6=n(X,"LI",{});var yNe=s(J6);k2e=n(yNe,"STRONG",{});var I5t=s(k2e);Gtr=r(I5t,"nystromformer"),I5t.forEach(t),Otr=r(yNe," \u2014 "),KQ=n(yNe,"A",{href:!0});var q5t=s(KQ);Vtr=r(q5t,"NystromformerForQuestionAnswering"),q5t.forEach(t),Xtr=r(yNe," (Nystr\xF6mformer model)"),yNe.forEach(t),ztr=i(X),Y6=n(X,"LI",{});var xNe=s(Y6);S2e=n(xNe,"STRONG",{});var j5t=s(S2e);Qtr=r(j5t,"qdqbert"),j5t.forEach(t),Wtr=r(xNe," \u2014 "),ZQ=n(xNe,"A",{href:!0});var D5t=s(ZQ);Htr=r(D5t,"QDQBertForQuestionAnswering"),D5t.forEach(t),Utr=r(xNe," (QDQBert model)"),xNe.forEach(t),Jtr=i(X),K6=n(X,"LI",{});var $Ne=s(K6);R2e=n($Ne,"STRONG",{});var G5t=s(R2e);Ytr=r(G5t,"reformer"),G5t.forEach(t),Ktr=r($Ne," \u2014 "),eW=n($Ne,"A",{href:!0});var O5t=s(eW);Ztr=r(O5t,"ReformerForQuestionAnswering"),O5t.forEach(t),ear=r($Ne," (Reformer model)"),$Ne.forEach(t),oar=i(X),Z6=n(X,"LI",{});var kNe=s(Z6);P2e=n(kNe,"STRONG",{});var V5t=s(P2e);rar=r(V5t,"rembert"),V5t.forEach(t),tar=r(kNe," \u2014 "),oW=n(kNe,"A",{href:!0});var X5t=s(oW);aar=r(X5t,"RemBertForQuestionAnswering"),X5t.forEach(t),nar=r(kNe," (RemBERT model)"),kNe.forEach(t),sar=i(X),eT=n(X,"LI",{});var SNe=s(eT);B2e=n(SNe,"STRONG",{});var z5t=s(B2e);lar=r(z5t,"roberta"),z5t.forEach(t),iar=r(SNe," \u2014 "),rW=n(SNe,"A",{href:!0});var Q5t=s(rW);dar=r(Q5t,"RobertaForQuestionAnswering"),Q5t.forEach(t),car=r(SNe," (RoBERTa model)"),SNe.forEach(t),far=i(X),oT=n(X,"LI",{});var RNe=s(oT);N2e=n(RNe,"STRONG",{});var W5t=s(N2e);mar=r(W5t,"roformer"),W5t.forEach(t),gar=r(RNe," \u2014 "),tW=n(RNe,"A",{href:!0});var H5t=s(tW);har=r(H5t,"RoFormerForQuestionAnswering"),H5t.forEach(t),par=r(RNe," (RoFormer model)"),RNe.forEach(t),_ar=i(X),rT=n(X,"LI",{});var PNe=s(rT);I2e=n(PNe,"STRONG",{});var U5t=s(I2e);uar=r(U5t,"splinter"),U5t.forEach(t),bar=r(PNe," \u2014 "),aW=n(PNe,"A",{href:!0});var J5t=s(aW);Far=r(J5t,"SplinterForQuestionAnswering"),J5t.forEach(t),Tar=r(PNe," (Splinter model)"),PNe.forEach(t),Mar=i(X),tT=n(X,"LI",{});var BNe=s(tT);q2e=n(BNe,"STRONG",{});var Y5t=s(q2e);Ear=r(Y5t,"squeezebert"),Y5t.forEach(t),Car=r(BNe," \u2014 "),nW=n(BNe,"A",{href:!0});var K5t=s(nW);war=r(K5t,"SqueezeBertForQuestionAnswering"),K5t.forEach(t),Aar=r(BNe," (SqueezeBERT model)"),BNe.forEach(t),Lar=i(X),aT=n(X,"LI",{});var NNe=s(aT);j2e=n(NNe,"STRONG",{});var Z5t=s(j2e);yar=r(Z5t,"xlm"),Z5t.forEach(t),xar=r(NNe," \u2014 "),sW=n(NNe,"A",{href:!0});var e0t=s(sW);$ar=r(e0t,"XLMForQuestionAnsweringSimple"),e0t.forEach(t),kar=r(NNe," (XLM model)"),NNe.forEach(t),Sar=i(X),nT=n(X,"LI",{});var INe=s(nT);D2e=n(INe,"STRONG",{});var o0t=s(D2e);Rar=r(o0t,"xlm-roberta"),o0t.forEach(t),Par=r(INe," \u2014 "),lW=n(INe,"A",{href:!0});var r0t=s(lW);Bar=r(r0t,"XLMRobertaForQuestionAnswering"),r0t.forEach(t),Nar=r(INe," (XLM-RoBERTa model)"),INe.forEach(t),Iar=i(X),sT=n(X,"LI",{});var qNe=s(sT);G2e=n(qNe,"STRONG",{});var t0t=s(G2e);qar=r(t0t,"xlm-roberta-xl"),t0t.forEach(t),jar=r(qNe," \u2014 "),iW=n(qNe,"A",{href:!0});var a0t=s(iW);Dar=r(a0t,"XLMRobertaXLForQuestionAnswering"),a0t.forEach(t),Gar=r(qNe," (XLM-RoBERTa-XL model)"),qNe.forEach(t),Oar=i(X),lT=n(X,"LI",{});var jNe=s(lT);O2e=n(jNe,"STRONG",{});var n0t=s(O2e);Var=r(n0t,"xlnet"),n0t.forEach(t),Xar=r(jNe," \u2014 "),dW=n(jNe,"A",{href:!0});var s0t=s(dW);zar=r(s0t,"XLNetForQuestionAnsweringSimple"),s0t.forEach(t),Qar=r(jNe," (XLNet model)"),jNe.forEach(t),War=i(X),iT=n(X,"LI",{});var DNe=s(iT);V2e=n(DNe,"STRONG",{});var l0t=s(V2e);Har=r(l0t,"yoso"),l0t.forEach(t),Uar=r(DNe," \u2014 "),cW=n(DNe,"A",{href:!0});var i0t=s(cW);Jar=r(i0t,"YosoForQuestionAnswering"),i0t.forEach(t),Yar=r(DNe," (YOSO model)"),DNe.forEach(t),X.forEach(t),Kar=i(ua),dT=n(ua,"P",{});var GNe=s(dT);Zar=r(GNe,"The model is set in evaluation mode by default using "),X2e=n(GNe,"CODE",{});var d0t=s(X2e);enr=r(d0t,"model.eval()"),d0t.forEach(t),onr=r(GNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=n(GNe,"CODE",{});var c0t=s(z2e);rnr=r(c0t,"model.train()"),c0t.forEach(t),GNe.forEach(t),tnr=i(ua),T(cT.$$.fragment,ua),ua.forEach(t),ml.forEach(t),BXe=i(f),bd=n(f,"H2",{class:!0});var GQe=s(bd);fT=n(GQe,"A",{id:!0,class:!0,href:!0});var f0t=s(fT);Q2e=n(f0t,"SPAN",{});var m0t=s(Q2e);T(Ly.$$.fragment,m0t),m0t.forEach(t),f0t.forEach(t),anr=i(GQe),W2e=n(GQe,"SPAN",{});var g0t=s(W2e);nnr=r(g0t,"AutoModelForTableQuestionAnswering"),g0t.forEach(t),GQe.forEach(t),NXe=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(yy.$$.fragment,gl),snr=i(gl),vd=n(gl,"P",{});var ote=s(vd);lnr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fW=n(ote,"A",{href:!0});var h0t=s(fW);inr=r(h0t,"from_pretrained()"),h0t.forEach(t),dnr=r(ote," class method or the "),mW=n(ote,"A",{href:!0});var p0t=s(mW);cnr=r(p0t,"from_config()"),p0t.forEach(t),fnr=r(ote,` class
method.`),ote.forEach(t),mnr=i(gl),xy=n(gl,"P",{});var OQe=s(xy);gnr=r(OQe,"This class cannot be instantiated directly using "),H2e=n(OQe,"CODE",{});var _0t=s(H2e);hnr=r(_0t,"__init__()"),_0t.forEach(t),pnr=r(OQe," (throws an error)."),OQe.forEach(t),_nr=i(gl),bt=n(gl,"DIV",{class:!0});var xA=s(bt);T($y.$$.fragment,xA),unr=i(xA),U2e=n(xA,"P",{});var u0t=s(U2e);bnr=r(u0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),u0t.forEach(t),vnr=i(xA),Fd=n(xA,"P",{});var rte=s(Fd);Fnr=r(rte,`Note:
Loading a model from its configuration file does `),J2e=n(rte,"STRONG",{});var b0t=s(J2e);Tnr=r(b0t,"not"),b0t.forEach(t),Mnr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(rte,"A",{href:!0});var v0t=s(gW);Enr=r(v0t,"from_pretrained()"),v0t.forEach(t),Cnr=r(rte," to load the model weights."),rte.forEach(t),wnr=i(xA),T(mT.$$.fragment,xA),xA.forEach(t),Anr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(ky.$$.fragment,ba),Lnr=i(ba),Y2e=n(ba,"P",{});var F0t=s(Y2e);ynr=r(F0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),F0t.forEach(t),xnr=i(ba),Qa=n(ba,"P",{});var $A=s(Qa);$nr=r($A,"The model class to instantiate is selected based on the "),K2e=n($A,"CODE",{});var T0t=s(K2e);knr=r(T0t,"model_type"),T0t.forEach(t),Snr=r($A,` property of the config object (either
passed as an argument or loaded from `),Z2e=n($A,"CODE",{});var M0t=s(Z2e);Rnr=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),Pnr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n($A,"CODE",{});var E0t=s(ebe);Bnr=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),Nnr=r($A,":"),$A.forEach(t),Inr=i(ba),obe=n(ba,"UL",{});var C0t=s(obe);gT=n(C0t,"LI",{});var ONe=s(gT);rbe=n(ONe,"STRONG",{});var w0t=s(rbe);qnr=r(w0t,"tapas"),w0t.forEach(t),jnr=r(ONe," \u2014 "),hW=n(ONe,"A",{href:!0});var A0t=s(hW);Dnr=r(A0t,"TapasForQuestionAnswering"),A0t.forEach(t),Gnr=r(ONe," (TAPAS model)"),ONe.forEach(t),C0t.forEach(t),Onr=i(ba),hT=n(ba,"P",{});var VNe=s(hT);Vnr=r(VNe,"The model is set in evaluation mode by default using "),tbe=n(VNe,"CODE",{});var L0t=s(tbe);Xnr=r(L0t,"model.eval()"),L0t.forEach(t),znr=r(VNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=n(VNe,"CODE",{});var y0t=s(abe);Qnr=r(y0t,"model.train()"),y0t.forEach(t),VNe.forEach(t),Wnr=i(ba),T(pT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),IXe=i(f),Td=n(f,"H2",{class:!0});var VQe=s(Td);_T=n(VQe,"A",{id:!0,class:!0,href:!0});var x0t=s(_T);nbe=n(x0t,"SPAN",{});var $0t=s(nbe);T(Sy.$$.fragment,$0t),$0t.forEach(t),x0t.forEach(t),Hnr=i(VQe),sbe=n(VQe,"SPAN",{});var k0t=s(sbe);Unr=r(k0t,"AutoModelForImageClassification"),k0t.forEach(t),VQe.forEach(t),qXe=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(Ry.$$.fragment,hl),Jnr=i(hl),Md=n(hl,"P",{});var tte=s(Md);Ynr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pW=n(tte,"A",{href:!0});var S0t=s(pW);Knr=r(S0t,"from_pretrained()"),S0t.forEach(t),Znr=r(tte," class method or the "),_W=n(tte,"A",{href:!0});var R0t=s(_W);esr=r(R0t,"from_config()"),R0t.forEach(t),osr=r(tte,` class
method.`),tte.forEach(t),rsr=i(hl),Py=n(hl,"P",{});var XQe=s(Py);tsr=r(XQe,"This class cannot be instantiated directly using "),lbe=n(XQe,"CODE",{});var P0t=s(lbe);asr=r(P0t,"__init__()"),P0t.forEach(t),nsr=r(XQe," (throws an error)."),XQe.forEach(t),ssr=i(hl),vt=n(hl,"DIV",{class:!0});var kA=s(vt);T(By.$$.fragment,kA),lsr=i(kA),ibe=n(kA,"P",{});var B0t=s(ibe);isr=r(B0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B0t.forEach(t),dsr=i(kA),Ed=n(kA,"P",{});var ate=s(Ed);csr=r(ate,`Note:
Loading a model from its configuration file does `),dbe=n(ate,"STRONG",{});var N0t=s(dbe);fsr=r(N0t,"not"),N0t.forEach(t),msr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(ate,"A",{href:!0});var I0t=s(uW);gsr=r(I0t,"from_pretrained()"),I0t.forEach(t),hsr=r(ate," to load the model weights."),ate.forEach(t),psr=i(kA),T(uT.$$.fragment,kA),kA.forEach(t),_sr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(Ny.$$.fragment,va),usr=i(va),cbe=n(va,"P",{});var q0t=s(cbe);bsr=r(q0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q0t.forEach(t),vsr=i(va),Wa=n(va,"P",{});var SA=s(Wa);Fsr=r(SA,"The model class to instantiate is selected based on the "),fbe=n(SA,"CODE",{});var j0t=s(fbe);Tsr=r(j0t,"model_type"),j0t.forEach(t),Msr=r(SA,` property of the config object (either
passed as an argument or loaded from `),mbe=n(SA,"CODE",{});var D0t=s(mbe);Esr=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),Csr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(SA,"CODE",{});var G0t=s(gbe);wsr=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),Asr=r(SA,":"),SA.forEach(t),Lsr=i(va),ve=n(va,"UL",{});var Te=s(ve);bT=n(Te,"LI",{});var XNe=s(bT);hbe=n(XNe,"STRONG",{});var O0t=s(hbe);ysr=r(O0t,"beit"),O0t.forEach(t),xsr=r(XNe," \u2014 "),bW=n(XNe,"A",{href:!0});var V0t=s(bW);$sr=r(V0t,"BeitForImageClassification"),V0t.forEach(t),ksr=r(XNe," (BEiT model)"),XNe.forEach(t),Ssr=i(Te),vT=n(Te,"LI",{});var zNe=s(vT);pbe=n(zNe,"STRONG",{});var X0t=s(pbe);Rsr=r(X0t,"convnext"),X0t.forEach(t),Psr=r(zNe," \u2014 "),vW=n(zNe,"A",{href:!0});var z0t=s(vW);Bsr=r(z0t,"ConvNextForImageClassification"),z0t.forEach(t),Nsr=r(zNe," (ConvNeXT model)"),zNe.forEach(t),Isr=i(Te),FT=n(Te,"LI",{});var QNe=s(FT);_be=n(QNe,"STRONG",{});var Q0t=s(_be);qsr=r(Q0t,"cvt"),Q0t.forEach(t),jsr=r(QNe," \u2014 "),FW=n(QNe,"A",{href:!0});var W0t=s(FW);Dsr=r(W0t,"CvtForImageClassification"),W0t.forEach(t),Gsr=r(QNe," (CvT model)"),QNe.forEach(t),Osr=i(Te),TT=n(Te,"LI",{});var WNe=s(TT);ube=n(WNe,"STRONG",{});var H0t=s(ube);Vsr=r(H0t,"data2vec-vision"),H0t.forEach(t),Xsr=r(WNe," \u2014 "),TW=n(WNe,"A",{href:!0});var U0t=s(TW);zsr=r(U0t,"Data2VecVisionForImageClassification"),U0t.forEach(t),Qsr=r(WNe," (Data2VecVision model)"),WNe.forEach(t),Wsr=i(Te),Us=n(Te,"LI",{});var RS=s(Us);bbe=n(RS,"STRONG",{});var J0t=s(bbe);Hsr=r(J0t,"deit"),J0t.forEach(t),Usr=r(RS," \u2014 "),MW=n(RS,"A",{href:!0});var Y0t=s(MW);Jsr=r(Y0t,"DeiTForImageClassification"),Y0t.forEach(t),Ysr=r(RS," or "),EW=n(RS,"A",{href:!0});var K0t=s(EW);Ksr=r(K0t,"DeiTForImageClassificationWithTeacher"),K0t.forEach(t),Zsr=r(RS," (DeiT model)"),RS.forEach(t),elr=i(Te),MT=n(Te,"LI",{});var HNe=s(MT);vbe=n(HNe,"STRONG",{});var Z0t=s(vbe);olr=r(Z0t,"imagegpt"),Z0t.forEach(t),rlr=r(HNe," \u2014 "),CW=n(HNe,"A",{href:!0});var ewt=s(CW);tlr=r(ewt,"ImageGPTForImageClassification"),ewt.forEach(t),alr=r(HNe," (ImageGPT model)"),HNe.forEach(t),nlr=i(Te),Js=n(Te,"LI",{});var PS=s(Js);Fbe=n(PS,"STRONG",{});var owt=s(Fbe);slr=r(owt,"levit"),owt.forEach(t),llr=r(PS," \u2014 "),wW=n(PS,"A",{href:!0});var rwt=s(wW);ilr=r(rwt,"LevitForImageClassification"),rwt.forEach(t),dlr=r(PS," or "),AW=n(PS,"A",{href:!0});var twt=s(AW);clr=r(twt,"LevitForImageClassificationWithTeacher"),twt.forEach(t),flr=r(PS," (LeViT model)"),PS.forEach(t),mlr=i(Te),ET=n(Te,"LI",{});var UNe=s(ET);Tbe=n(UNe,"STRONG",{});var awt=s(Tbe);glr=r(awt,"mobilevit"),awt.forEach(t),hlr=r(UNe," \u2014 "),LW=n(UNe,"A",{href:!0});var nwt=s(LW);plr=r(nwt,"MobileViTForImageClassification"),nwt.forEach(t),_lr=r(UNe," (MobileViT model)"),UNe.forEach(t),ulr=i(Te),Ft=n(Te,"LI",{});var Pf=s(Ft);Mbe=n(Pf,"STRONG",{});var swt=s(Mbe);blr=r(swt,"perceiver"),swt.forEach(t),vlr=r(Pf," \u2014 "),yW=n(Pf,"A",{href:!0});var lwt=s(yW);Flr=r(lwt,"PerceiverForImageClassificationLearned"),lwt.forEach(t),Tlr=r(Pf," or "),xW=n(Pf,"A",{href:!0});var iwt=s(xW);Mlr=r(iwt,"PerceiverForImageClassificationFourier"),iwt.forEach(t),Elr=r(Pf," or "),$W=n(Pf,"A",{href:!0});var dwt=s($W);Clr=r(dwt,"PerceiverForImageClassificationConvProcessing"),dwt.forEach(t),wlr=r(Pf," (Perceiver model)"),Pf.forEach(t),Alr=i(Te),CT=n(Te,"LI",{});var JNe=s(CT);Ebe=n(JNe,"STRONG",{});var cwt=s(Ebe);Llr=r(cwt,"poolformer"),cwt.forEach(t),ylr=r(JNe," \u2014 "),kW=n(JNe,"A",{href:!0});var fwt=s(kW);xlr=r(fwt,"PoolFormerForImageClassification"),fwt.forEach(t),$lr=r(JNe," (PoolFormer model)"),JNe.forEach(t),klr=i(Te),wT=n(Te,"LI",{});var YNe=s(wT);Cbe=n(YNe,"STRONG",{});var mwt=s(Cbe);Slr=r(mwt,"regnet"),mwt.forEach(t),Rlr=r(YNe," \u2014 "),SW=n(YNe,"A",{href:!0});var gwt=s(SW);Plr=r(gwt,"RegNetForImageClassification"),gwt.forEach(t),Blr=r(YNe," (RegNet model)"),YNe.forEach(t),Nlr=i(Te),AT=n(Te,"LI",{});var KNe=s(AT);wbe=n(KNe,"STRONG",{});var hwt=s(wbe);Ilr=r(hwt,"resnet"),hwt.forEach(t),qlr=r(KNe," \u2014 "),RW=n(KNe,"A",{href:!0});var pwt=s(RW);jlr=r(pwt,"ResNetForImageClassification"),pwt.forEach(t),Dlr=r(KNe," (ResNet model)"),KNe.forEach(t),Glr=i(Te),LT=n(Te,"LI",{});var ZNe=s(LT);Abe=n(ZNe,"STRONG",{});var _wt=s(Abe);Olr=r(_wt,"segformer"),_wt.forEach(t),Vlr=r(ZNe," \u2014 "),PW=n(ZNe,"A",{href:!0});var uwt=s(PW);Xlr=r(uwt,"SegformerForImageClassification"),uwt.forEach(t),zlr=r(ZNe," (SegFormer model)"),ZNe.forEach(t),Qlr=i(Te),yT=n(Te,"LI",{});var eIe=s(yT);Lbe=n(eIe,"STRONG",{});var bwt=s(Lbe);Wlr=r(bwt,"swin"),bwt.forEach(t),Hlr=r(eIe," \u2014 "),BW=n(eIe,"A",{href:!0});var vwt=s(BW);Ulr=r(vwt,"SwinForImageClassification"),vwt.forEach(t),Jlr=r(eIe," (Swin Transformer model)"),eIe.forEach(t),Ylr=i(Te),xT=n(Te,"LI",{});var oIe=s(xT);ybe=n(oIe,"STRONG",{});var Fwt=s(ybe);Klr=r(Fwt,"van"),Fwt.forEach(t),Zlr=r(oIe," \u2014 "),NW=n(oIe,"A",{href:!0});var Twt=s(NW);eir=r(Twt,"VanForImageClassification"),Twt.forEach(t),oir=r(oIe," (VAN model)"),oIe.forEach(t),rir=i(Te),$T=n(Te,"LI",{});var rIe=s($T);xbe=n(rIe,"STRONG",{});var Mwt=s(xbe);tir=r(Mwt,"vit"),Mwt.forEach(t),air=r(rIe," \u2014 "),IW=n(rIe,"A",{href:!0});var Ewt=s(IW);nir=r(Ewt,"ViTForImageClassification"),Ewt.forEach(t),sir=r(rIe," (ViT model)"),rIe.forEach(t),Te.forEach(t),lir=i(va),kT=n(va,"P",{});var tIe=s(kT);iir=r(tIe,"The model is set in evaluation mode by default using "),$be=n(tIe,"CODE",{});var Cwt=s($be);dir=r(Cwt,"model.eval()"),Cwt.forEach(t),cir=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=n(tIe,"CODE",{});var wwt=s(kbe);fir=r(wwt,"model.train()"),wwt.forEach(t),tIe.forEach(t),mir=i(va),T(ST.$$.fragment,va),va.forEach(t),hl.forEach(t),jXe=i(f),Cd=n(f,"H2",{class:!0});var zQe=s(Cd);RT=n(zQe,"A",{id:!0,class:!0,href:!0});var Awt=s(RT);Sbe=n(Awt,"SPAN",{});var Lwt=s(Sbe);T(Iy.$$.fragment,Lwt),Lwt.forEach(t),Awt.forEach(t),gir=i(zQe),Rbe=n(zQe,"SPAN",{});var ywt=s(Rbe);hir=r(ywt,"AutoModelForVision2Seq"),ywt.forEach(t),zQe.forEach(t),DXe=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(qy.$$.fragment,pl),pir=i(pl),wd=n(pl,"P",{});var nte=s(wd);_ir=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qW=n(nte,"A",{href:!0});var xwt=s(qW);uir=r(xwt,"from_pretrained()"),xwt.forEach(t),bir=r(nte," class method or the "),jW=n(nte,"A",{href:!0});var $wt=s(jW);vir=r($wt,"from_config()"),$wt.forEach(t),Fir=r(nte,` class
method.`),nte.forEach(t),Tir=i(pl),jy=n(pl,"P",{});var QQe=s(jy);Mir=r(QQe,"This class cannot be instantiated directly using "),Pbe=n(QQe,"CODE",{});var kwt=s(Pbe);Eir=r(kwt,"__init__()"),kwt.forEach(t),Cir=r(QQe," (throws an error)."),QQe.forEach(t),wir=i(pl),Tt=n(pl,"DIV",{class:!0});var RA=s(Tt);T(Dy.$$.fragment,RA),Air=i(RA),Bbe=n(RA,"P",{});var Swt=s(Bbe);Lir=r(Swt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Swt.forEach(t),yir=i(RA),Ad=n(RA,"P",{});var ste=s(Ad);xir=r(ste,`Note:
Loading a model from its configuration file does `),Nbe=n(ste,"STRONG",{});var Rwt=s(Nbe);$ir=r(Rwt,"not"),Rwt.forEach(t),kir=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(ste,"A",{href:!0});var Pwt=s(DW);Sir=r(Pwt,"from_pretrained()"),Pwt.forEach(t),Rir=r(ste," to load the model weights."),ste.forEach(t),Pir=i(RA),T(PT.$$.fragment,RA),RA.forEach(t),Bir=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(Gy.$$.fragment,Fa),Nir=i(Fa),Ibe=n(Fa,"P",{});var Bwt=s(Ibe);Iir=r(Bwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bwt.forEach(t),qir=i(Fa),Ha=n(Fa,"P",{});var PA=s(Ha);jir=r(PA,"The model class to instantiate is selected based on the "),qbe=n(PA,"CODE",{});var Nwt=s(qbe);Dir=r(Nwt,"model_type"),Nwt.forEach(t),Gir=r(PA,` property of the config object (either
passed as an argument or loaded from `),jbe=n(PA,"CODE",{});var Iwt=s(jbe);Oir=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),Vir=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(PA,"CODE",{});var qwt=s(Dbe);Xir=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),zir=r(PA,":"),PA.forEach(t),Qir=i(Fa),Gbe=n(Fa,"UL",{});var jwt=s(Gbe);BT=n(jwt,"LI",{});var aIe=s(BT);Obe=n(aIe,"STRONG",{});var Dwt=s(Obe);Wir=r(Dwt,"vision-encoder-decoder"),Dwt.forEach(t),Hir=r(aIe," \u2014 "),GW=n(aIe,"A",{href:!0});var Gwt=s(GW);Uir=r(Gwt,"VisionEncoderDecoderModel"),Gwt.forEach(t),Jir=r(aIe," (Vision Encoder decoder model)"),aIe.forEach(t),jwt.forEach(t),Yir=i(Fa),NT=n(Fa,"P",{});var nIe=s(NT);Kir=r(nIe,"The model is set in evaluation mode by default using "),Vbe=n(nIe,"CODE",{});var Owt=s(Vbe);Zir=r(Owt,"model.eval()"),Owt.forEach(t),edr=r(nIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xbe=n(nIe,"CODE",{});var Vwt=s(Xbe);odr=r(Vwt,"model.train()"),Vwt.forEach(t),nIe.forEach(t),rdr=i(Fa),T(IT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),GXe=i(f),Ld=n(f,"H2",{class:!0});var WQe=s(Ld);qT=n(WQe,"A",{id:!0,class:!0,href:!0});var Xwt=s(qT);zbe=n(Xwt,"SPAN",{});var zwt=s(zbe);T(Oy.$$.fragment,zwt),zwt.forEach(t),Xwt.forEach(t),tdr=i(WQe),Qbe=n(WQe,"SPAN",{});var Qwt=s(Qbe);adr=r(Qwt,"AutoModelForVisualQuestionAnswering"),Qwt.forEach(t),WQe.forEach(t),OXe=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(Vy.$$.fragment,_l),ndr=i(_l),yd=n(_l,"P",{});var lte=s(yd);sdr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OW=n(lte,"A",{href:!0});var Wwt=s(OW);ldr=r(Wwt,"from_pretrained()"),Wwt.forEach(t),idr=r(lte," class method or the "),VW=n(lte,"A",{href:!0});var Hwt=s(VW);ddr=r(Hwt,"from_config()"),Hwt.forEach(t),cdr=r(lte,` class
method.`),lte.forEach(t),fdr=i(_l),Xy=n(_l,"P",{});var HQe=s(Xy);mdr=r(HQe,"This class cannot be instantiated directly using "),Wbe=n(HQe,"CODE",{});var Uwt=s(Wbe);gdr=r(Uwt,"__init__()"),Uwt.forEach(t),hdr=r(HQe," (throws an error)."),HQe.forEach(t),pdr=i(_l),Mt=n(_l,"DIV",{class:!0});var BA=s(Mt);T(zy.$$.fragment,BA),_dr=i(BA),Hbe=n(BA,"P",{});var Jwt=s(Hbe);udr=r(Jwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Jwt.forEach(t),bdr=i(BA),xd=n(BA,"P",{});var ite=s(xd);vdr=r(ite,`Note:
Loading a model from its configuration file does `),Ube=n(ite,"STRONG",{});var Ywt=s(Ube);Fdr=r(Ywt,"not"),Ywt.forEach(t),Tdr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(ite,"A",{href:!0});var Kwt=s(XW);Mdr=r(Kwt,"from_pretrained()"),Kwt.forEach(t),Edr=r(ite," to load the model weights."),ite.forEach(t),Cdr=i(BA),T(jT.$$.fragment,BA),BA.forEach(t),wdr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(Qy.$$.fragment,Ta),Adr=i(Ta),Jbe=n(Ta,"P",{});var Zwt=s(Jbe);Ldr=r(Zwt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Zwt.forEach(t),ydr=i(Ta),Ua=n(Ta,"P",{});var NA=s(Ua);xdr=r(NA,"The model class to instantiate is selected based on the "),Ybe=n(NA,"CODE",{});var eAt=s(Ybe);$dr=r(eAt,"model_type"),eAt.forEach(t),kdr=r(NA,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(NA,"CODE",{});var oAt=s(Kbe);Sdr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),Rdr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(NA,"CODE",{});var rAt=s(Zbe);Pdr=r(rAt,"pretrained_model_name_or_path"),rAt.forEach(t),Bdr=r(NA,":"),NA.forEach(t),Ndr=i(Ta),eve=n(Ta,"UL",{});var tAt=s(eve);DT=n(tAt,"LI",{});var sIe=s(DT);ove=n(sIe,"STRONG",{});var aAt=s(ove);Idr=r(aAt,"vilt"),aAt.forEach(t),qdr=r(sIe," \u2014 "),zW=n(sIe,"A",{href:!0});var nAt=s(zW);jdr=r(nAt,"ViltForQuestionAnswering"),nAt.forEach(t),Ddr=r(sIe," (ViLT model)"),sIe.forEach(t),tAt.forEach(t),Gdr=i(Ta),GT=n(Ta,"P",{});var lIe=s(GT);Odr=r(lIe,"The model is set in evaluation mode by default using "),rve=n(lIe,"CODE",{});var sAt=s(rve);Vdr=r(sAt,"model.eval()"),sAt.forEach(t),Xdr=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tve=n(lIe,"CODE",{});var lAt=s(tve);zdr=r(lAt,"model.train()"),lAt.forEach(t),lIe.forEach(t),Qdr=i(Ta),T(OT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),VXe=i(f),$d=n(f,"H2",{class:!0});var UQe=s($d);VT=n(UQe,"A",{id:!0,class:!0,href:!0});var iAt=s(VT);ave=n(iAt,"SPAN",{});var dAt=s(ave);T(Wy.$$.fragment,dAt),dAt.forEach(t),iAt.forEach(t),Wdr=i(UQe),nve=n(UQe,"SPAN",{});var cAt=s(nve);Hdr=r(cAt,"AutoModelForAudioClassification"),cAt.forEach(t),UQe.forEach(t),XXe=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(Hy.$$.fragment,ul),Udr=i(ul),kd=n(ul,"P",{});var dte=s(kd);Jdr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QW=n(dte,"A",{href:!0});var fAt=s(QW);Ydr=r(fAt,"from_pretrained()"),fAt.forEach(t),Kdr=r(dte," class method or the "),WW=n(dte,"A",{href:!0});var mAt=s(WW);Zdr=r(mAt,"from_config()"),mAt.forEach(t),ecr=r(dte,` class
method.`),dte.forEach(t),ocr=i(ul),Uy=n(ul,"P",{});var JQe=s(Uy);rcr=r(JQe,"This class cannot be instantiated directly using "),sve=n(JQe,"CODE",{});var gAt=s(sve);tcr=r(gAt,"__init__()"),gAt.forEach(t),acr=r(JQe," (throws an error)."),JQe.forEach(t),ncr=i(ul),Et=n(ul,"DIV",{class:!0});var IA=s(Et);T(Jy.$$.fragment,IA),scr=i(IA),lve=n(IA,"P",{});var hAt=s(lve);lcr=r(hAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hAt.forEach(t),icr=i(IA),Sd=n(IA,"P",{});var cte=s(Sd);dcr=r(cte,`Note:
Loading a model from its configuration file does `),ive=n(cte,"STRONG",{});var pAt=s(ive);ccr=r(pAt,"not"),pAt.forEach(t),fcr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(cte,"A",{href:!0});var _At=s(HW);mcr=r(_At,"from_pretrained()"),_At.forEach(t),gcr=r(cte," to load the model weights."),cte.forEach(t),hcr=i(IA),T(XT.$$.fragment,IA),IA.forEach(t),pcr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(Yy.$$.fragment,Ma),_cr=i(Ma),dve=n(Ma,"P",{});var uAt=s(dve);ucr=r(uAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uAt.forEach(t),bcr=i(Ma),Ja=n(Ma,"P",{});var qA=s(Ja);vcr=r(qA,"The model class to instantiate is selected based on the "),cve=n(qA,"CODE",{});var bAt=s(cve);Fcr=r(bAt,"model_type"),bAt.forEach(t),Tcr=r(qA,` property of the config object (either
passed as an argument or loaded from `),fve=n(qA,"CODE",{});var vAt=s(fve);Mcr=r(vAt,"pretrained_model_name_or_path"),vAt.forEach(t),Ecr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(qA,"CODE",{});var FAt=s(mve);Ccr=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),wcr=r(qA,":"),qA.forEach(t),Acr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);zT=n(ze,"LI",{});var iIe=s(zT);gve=n(iIe,"STRONG",{});var TAt=s(gve);Lcr=r(TAt,"data2vec-audio"),TAt.forEach(t),ycr=r(iIe," \u2014 "),UW=n(iIe,"A",{href:!0});var MAt=s(UW);xcr=r(MAt,"Data2VecAudioForSequenceClassification"),MAt.forEach(t),$cr=r(iIe," (Data2VecAudio model)"),iIe.forEach(t),kcr=i(ze),QT=n(ze,"LI",{});var dIe=s(QT);hve=n(dIe,"STRONG",{});var EAt=s(hve);Scr=r(EAt,"hubert"),EAt.forEach(t),Rcr=r(dIe," \u2014 "),JW=n(dIe,"A",{href:!0});var CAt=s(JW);Pcr=r(CAt,"HubertForSequenceClassification"),CAt.forEach(t),Bcr=r(dIe," (Hubert model)"),dIe.forEach(t),Ncr=i(ze),WT=n(ze,"LI",{});var cIe=s(WT);pve=n(cIe,"STRONG",{});var wAt=s(pve);Icr=r(wAt,"sew"),wAt.forEach(t),qcr=r(cIe," \u2014 "),YW=n(cIe,"A",{href:!0});var AAt=s(YW);jcr=r(AAt,"SEWForSequenceClassification"),AAt.forEach(t),Dcr=r(cIe," (SEW model)"),cIe.forEach(t),Gcr=i(ze),HT=n(ze,"LI",{});var fIe=s(HT);_ve=n(fIe,"STRONG",{});var LAt=s(_ve);Ocr=r(LAt,"sew-d"),LAt.forEach(t),Vcr=r(fIe," \u2014 "),KW=n(fIe,"A",{href:!0});var yAt=s(KW);Xcr=r(yAt,"SEWDForSequenceClassification"),yAt.forEach(t),zcr=r(fIe," (SEW-D model)"),fIe.forEach(t),Qcr=i(ze),UT=n(ze,"LI",{});var mIe=s(UT);uve=n(mIe,"STRONG",{});var xAt=s(uve);Wcr=r(xAt,"unispeech"),xAt.forEach(t),Hcr=r(mIe," \u2014 "),ZW=n(mIe,"A",{href:!0});var $At=s(ZW);Ucr=r($At,"UniSpeechForSequenceClassification"),$At.forEach(t),Jcr=r(mIe," (UniSpeech model)"),mIe.forEach(t),Ycr=i(ze),JT=n(ze,"LI",{});var gIe=s(JT);bve=n(gIe,"STRONG",{});var kAt=s(bve);Kcr=r(kAt,"unispeech-sat"),kAt.forEach(t),Zcr=r(gIe," \u2014 "),eH=n(gIe,"A",{href:!0});var SAt=s(eH);efr=r(SAt,"UniSpeechSatForSequenceClassification"),SAt.forEach(t),ofr=r(gIe," (UniSpeechSat model)"),gIe.forEach(t),rfr=i(ze),YT=n(ze,"LI",{});var hIe=s(YT);vve=n(hIe,"STRONG",{});var RAt=s(vve);tfr=r(RAt,"wav2vec2"),RAt.forEach(t),afr=r(hIe," \u2014 "),oH=n(hIe,"A",{href:!0});var PAt=s(oH);nfr=r(PAt,"Wav2Vec2ForSequenceClassification"),PAt.forEach(t),sfr=r(hIe," (Wav2Vec2 model)"),hIe.forEach(t),lfr=i(ze),KT=n(ze,"LI",{});var pIe=s(KT);Fve=n(pIe,"STRONG",{});var BAt=s(Fve);ifr=r(BAt,"wav2vec2-conformer"),BAt.forEach(t),dfr=r(pIe," \u2014 "),rH=n(pIe,"A",{href:!0});var NAt=s(rH);cfr=r(NAt,"Wav2Vec2ConformerForSequenceClassification"),NAt.forEach(t),ffr=r(pIe," (Wav2Vec2-Conformer model)"),pIe.forEach(t),mfr=i(ze),ZT=n(ze,"LI",{});var _Ie=s(ZT);Tve=n(_Ie,"STRONG",{});var IAt=s(Tve);gfr=r(IAt,"wavlm"),IAt.forEach(t),hfr=r(_Ie," \u2014 "),tH=n(_Ie,"A",{href:!0});var qAt=s(tH);pfr=r(qAt,"WavLMForSequenceClassification"),qAt.forEach(t),_fr=r(_Ie," (WavLM model)"),_Ie.forEach(t),ze.forEach(t),ufr=i(Ma),e8=n(Ma,"P",{});var uIe=s(e8);bfr=r(uIe,"The model is set in evaluation mode by default using "),Mve=n(uIe,"CODE",{});var jAt=s(Mve);vfr=r(jAt,"model.eval()"),jAt.forEach(t),Ffr=r(uIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eve=n(uIe,"CODE",{});var DAt=s(Eve);Tfr=r(DAt,"model.train()"),DAt.forEach(t),uIe.forEach(t),Mfr=i(Ma),T(o8.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),zXe=i(f),Rd=n(f,"H2",{class:!0});var YQe=s(Rd);r8=n(YQe,"A",{id:!0,class:!0,href:!0});var GAt=s(r8);Cve=n(GAt,"SPAN",{});var OAt=s(Cve);T(Ky.$$.fragment,OAt),OAt.forEach(t),GAt.forEach(t),Efr=i(YQe),wve=n(YQe,"SPAN",{});var VAt=s(wve);Cfr=r(VAt,"AutoModelForAudioFrameClassification"),VAt.forEach(t),YQe.forEach(t),QXe=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(Zy.$$.fragment,bl),wfr=i(bl),Pd=n(bl,"P",{});var fte=s(Pd);Afr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aH=n(fte,"A",{href:!0});var XAt=s(aH);Lfr=r(XAt,"from_pretrained()"),XAt.forEach(t),yfr=r(fte," class method or the "),nH=n(fte,"A",{href:!0});var zAt=s(nH);xfr=r(zAt,"from_config()"),zAt.forEach(t),$fr=r(fte,` class
method.`),fte.forEach(t),kfr=i(bl),e9=n(bl,"P",{});var KQe=s(e9);Sfr=r(KQe,"This class cannot be instantiated directly using "),Ave=n(KQe,"CODE",{});var QAt=s(Ave);Rfr=r(QAt,"__init__()"),QAt.forEach(t),Pfr=r(KQe," (throws an error)."),KQe.forEach(t),Bfr=i(bl),Ct=n(bl,"DIV",{class:!0});var jA=s(Ct);T(o9.$$.fragment,jA),Nfr=i(jA),Lve=n(jA,"P",{});var WAt=s(Lve);Ifr=r(WAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),WAt.forEach(t),qfr=i(jA),Bd=n(jA,"P",{});var mte=s(Bd);jfr=r(mte,`Note:
Loading a model from its configuration file does `),yve=n(mte,"STRONG",{});var HAt=s(yve);Dfr=r(HAt,"not"),HAt.forEach(t),Gfr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(mte,"A",{href:!0});var UAt=s(sH);Ofr=r(UAt,"from_pretrained()"),UAt.forEach(t),Vfr=r(mte," to load the model weights."),mte.forEach(t),Xfr=i(jA),T(t8.$$.fragment,jA),jA.forEach(t),zfr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(r9.$$.fragment,Ea),Qfr=i(Ea),xve=n(Ea,"P",{});var JAt=s(xve);Wfr=r(JAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),JAt.forEach(t),Hfr=i(Ea),Ya=n(Ea,"P",{});var DA=s(Ya);Ufr=r(DA,"The model class to instantiate is selected based on the "),$ve=n(DA,"CODE",{});var YAt=s($ve);Jfr=r(YAt,"model_type"),YAt.forEach(t),Yfr=r(DA,` property of the config object (either
passed as an argument or loaded from `),kve=n(DA,"CODE",{});var KAt=s(kve);Kfr=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),Zfr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(DA,"CODE",{});var ZAt=s(Sve);emr=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),omr=r(DA,":"),DA.forEach(t),rmr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);a8=n(vl,"LI",{});var bIe=s(a8);Rve=n(bIe,"STRONG",{});var e7t=s(Rve);tmr=r(e7t,"data2vec-audio"),e7t.forEach(t),amr=r(bIe," \u2014 "),lH=n(bIe,"A",{href:!0});var o7t=s(lH);nmr=r(o7t,"Data2VecAudioForAudioFrameClassification"),o7t.forEach(t),smr=r(bIe," (Data2VecAudio model)"),bIe.forEach(t),lmr=i(vl),n8=n(vl,"LI",{});var vIe=s(n8);Pve=n(vIe,"STRONG",{});var r7t=s(Pve);imr=r(r7t,"unispeech-sat"),r7t.forEach(t),dmr=r(vIe," \u2014 "),iH=n(vIe,"A",{href:!0});var t7t=s(iH);cmr=r(t7t,"UniSpeechSatForAudioFrameClassification"),t7t.forEach(t),fmr=r(vIe," (UniSpeechSat model)"),vIe.forEach(t),mmr=i(vl),s8=n(vl,"LI",{});var FIe=s(s8);Bve=n(FIe,"STRONG",{});var a7t=s(Bve);gmr=r(a7t,"wav2vec2"),a7t.forEach(t),hmr=r(FIe," \u2014 "),dH=n(FIe,"A",{href:!0});var n7t=s(dH);pmr=r(n7t,"Wav2Vec2ForAudioFrameClassification"),n7t.forEach(t),_mr=r(FIe," (Wav2Vec2 model)"),FIe.forEach(t),umr=i(vl),l8=n(vl,"LI",{});var TIe=s(l8);Nve=n(TIe,"STRONG",{});var s7t=s(Nve);bmr=r(s7t,"wav2vec2-conformer"),s7t.forEach(t),vmr=r(TIe," \u2014 "),cH=n(TIe,"A",{href:!0});var l7t=s(cH);Fmr=r(l7t,"Wav2Vec2ConformerForAudioFrameClassification"),l7t.forEach(t),Tmr=r(TIe," (Wav2Vec2-Conformer model)"),TIe.forEach(t),Mmr=i(vl),i8=n(vl,"LI",{});var MIe=s(i8);Ive=n(MIe,"STRONG",{});var i7t=s(Ive);Emr=r(i7t,"wavlm"),i7t.forEach(t),Cmr=r(MIe," \u2014 "),fH=n(MIe,"A",{href:!0});var d7t=s(fH);wmr=r(d7t,"WavLMForAudioFrameClassification"),d7t.forEach(t),Amr=r(MIe," (WavLM model)"),MIe.forEach(t),vl.forEach(t),Lmr=i(Ea),d8=n(Ea,"P",{});var EIe=s(d8);ymr=r(EIe,"The model is set in evaluation mode by default using "),qve=n(EIe,"CODE",{});var c7t=s(qve);xmr=r(c7t,"model.eval()"),c7t.forEach(t),$mr=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=n(EIe,"CODE",{});var f7t=s(jve);kmr=r(f7t,"model.train()"),f7t.forEach(t),EIe.forEach(t),Smr=i(Ea),T(c8.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),WXe=i(f),Nd=n(f,"H2",{class:!0});var ZQe=s(Nd);f8=n(ZQe,"A",{id:!0,class:!0,href:!0});var m7t=s(f8);Dve=n(m7t,"SPAN",{});var g7t=s(Dve);T(t9.$$.fragment,g7t),g7t.forEach(t),m7t.forEach(t),Rmr=i(ZQe),Gve=n(ZQe,"SPAN",{});var h7t=s(Gve);Pmr=r(h7t,"AutoModelForCTC"),h7t.forEach(t),ZQe.forEach(t),HXe=i(f),Wo=n(f,"DIV",{class:!0});var Fl=s(Wo);T(a9.$$.fragment,Fl),Bmr=i(Fl),Id=n(Fl,"P",{});var gte=s(Id);Nmr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mH=n(gte,"A",{href:!0});var p7t=s(mH);Imr=r(p7t,"from_pretrained()"),p7t.forEach(t),qmr=r(gte," class method or the "),gH=n(gte,"A",{href:!0});var _7t=s(gH);jmr=r(_7t,"from_config()"),_7t.forEach(t),Dmr=r(gte,` class
method.`),gte.forEach(t),Gmr=i(Fl),n9=n(Fl,"P",{});var eWe=s(n9);Omr=r(eWe,"This class cannot be instantiated directly using "),Ove=n(eWe,"CODE",{});var u7t=s(Ove);Vmr=r(u7t,"__init__()"),u7t.forEach(t),Xmr=r(eWe," (throws an error)."),eWe.forEach(t),zmr=i(Fl),wt=n(Fl,"DIV",{class:!0});var GA=s(wt);T(s9.$$.fragment,GA),Qmr=i(GA),Vve=n(GA,"P",{});var b7t=s(Vve);Wmr=r(b7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),b7t.forEach(t),Hmr=i(GA),qd=n(GA,"P",{});var hte=s(qd);Umr=r(hte,`Note:
Loading a model from its configuration file does `),Xve=n(hte,"STRONG",{});var v7t=s(Xve);Jmr=r(v7t,"not"),v7t.forEach(t),Ymr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(hte,"A",{href:!0});var F7t=s(hH);Kmr=r(F7t,"from_pretrained()"),F7t.forEach(t),Zmr=r(hte," to load the model weights."),hte.forEach(t),egr=i(GA),T(m8.$$.fragment,GA),GA.forEach(t),ogr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(l9.$$.fragment,Ca),rgr=i(Ca),zve=n(Ca,"P",{});var T7t=s(zve);tgr=r(T7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),T7t.forEach(t),agr=i(Ca),Ka=n(Ca,"P",{});var OA=s(Ka);ngr=r(OA,"The model class to instantiate is selected based on the "),Qve=n(OA,"CODE",{});var M7t=s(Qve);sgr=r(M7t,"model_type"),M7t.forEach(t),lgr=r(OA,` property of the config object (either
passed as an argument or loaded from `),Wve=n(OA,"CODE",{});var E7t=s(Wve);igr=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),dgr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(OA,"CODE",{});var C7t=s(Hve);cgr=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),fgr=r(OA,":"),OA.forEach(t),mgr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);g8=n(Be,"LI",{});var CIe=s(g8);Uve=n(CIe,"STRONG",{});var w7t=s(Uve);ggr=r(w7t,"data2vec-audio"),w7t.forEach(t),hgr=r(CIe," \u2014 "),pH=n(CIe,"A",{href:!0});var A7t=s(pH);pgr=r(A7t,"Data2VecAudioForCTC"),A7t.forEach(t),_gr=r(CIe," (Data2VecAudio model)"),CIe.forEach(t),ugr=i(Be),h8=n(Be,"LI",{});var wIe=s(h8);Jve=n(wIe,"STRONG",{});var L7t=s(Jve);bgr=r(L7t,"hubert"),L7t.forEach(t),vgr=r(wIe," \u2014 "),_H=n(wIe,"A",{href:!0});var y7t=s(_H);Fgr=r(y7t,"HubertForCTC"),y7t.forEach(t),Tgr=r(wIe," (Hubert model)"),wIe.forEach(t),Mgr=i(Be),p8=n(Be,"LI",{});var AIe=s(p8);Yve=n(AIe,"STRONG",{});var x7t=s(Yve);Egr=r(x7t,"mctct"),x7t.forEach(t),Cgr=r(AIe," \u2014 "),uH=n(AIe,"A",{href:!0});var $7t=s(uH);wgr=r($7t,"MCTCTForCTC"),$7t.forEach(t),Agr=r(AIe," (M-CTC-T model)"),AIe.forEach(t),Lgr=i(Be),_8=n(Be,"LI",{});var LIe=s(_8);Kve=n(LIe,"STRONG",{});var k7t=s(Kve);ygr=r(k7t,"sew"),k7t.forEach(t),xgr=r(LIe," \u2014 "),bH=n(LIe,"A",{href:!0});var S7t=s(bH);$gr=r(S7t,"SEWForCTC"),S7t.forEach(t),kgr=r(LIe," (SEW model)"),LIe.forEach(t),Sgr=i(Be),u8=n(Be,"LI",{});var yIe=s(u8);Zve=n(yIe,"STRONG",{});var R7t=s(Zve);Rgr=r(R7t,"sew-d"),R7t.forEach(t),Pgr=r(yIe," \u2014 "),vH=n(yIe,"A",{href:!0});var P7t=s(vH);Bgr=r(P7t,"SEWDForCTC"),P7t.forEach(t),Ngr=r(yIe," (SEW-D model)"),yIe.forEach(t),Igr=i(Be),b8=n(Be,"LI",{});var xIe=s(b8);eFe=n(xIe,"STRONG",{});var B7t=s(eFe);qgr=r(B7t,"unispeech"),B7t.forEach(t),jgr=r(xIe," \u2014 "),FH=n(xIe,"A",{href:!0});var N7t=s(FH);Dgr=r(N7t,"UniSpeechForCTC"),N7t.forEach(t),Ggr=r(xIe," (UniSpeech model)"),xIe.forEach(t),Ogr=i(Be),v8=n(Be,"LI",{});var $Ie=s(v8);oFe=n($Ie,"STRONG",{});var I7t=s(oFe);Vgr=r(I7t,"unispeech-sat"),I7t.forEach(t),Xgr=r($Ie," \u2014 "),TH=n($Ie,"A",{href:!0});var q7t=s(TH);zgr=r(q7t,"UniSpeechSatForCTC"),q7t.forEach(t),Qgr=r($Ie," (UniSpeechSat model)"),$Ie.forEach(t),Wgr=i(Be),F8=n(Be,"LI",{});var kIe=s(F8);rFe=n(kIe,"STRONG",{});var j7t=s(rFe);Hgr=r(j7t,"wav2vec2"),j7t.forEach(t),Ugr=r(kIe," \u2014 "),MH=n(kIe,"A",{href:!0});var D7t=s(MH);Jgr=r(D7t,"Wav2Vec2ForCTC"),D7t.forEach(t),Ygr=r(kIe," (Wav2Vec2 model)"),kIe.forEach(t),Kgr=i(Be),T8=n(Be,"LI",{});var SIe=s(T8);tFe=n(SIe,"STRONG",{});var G7t=s(tFe);Zgr=r(G7t,"wav2vec2-conformer"),G7t.forEach(t),ehr=r(SIe," \u2014 "),EH=n(SIe,"A",{href:!0});var O7t=s(EH);ohr=r(O7t,"Wav2Vec2ConformerForCTC"),O7t.forEach(t),rhr=r(SIe," (Wav2Vec2-Conformer model)"),SIe.forEach(t),thr=i(Be),M8=n(Be,"LI",{});var RIe=s(M8);aFe=n(RIe,"STRONG",{});var V7t=s(aFe);ahr=r(V7t,"wavlm"),V7t.forEach(t),nhr=r(RIe," \u2014 "),CH=n(RIe,"A",{href:!0});var X7t=s(CH);shr=r(X7t,"WavLMForCTC"),X7t.forEach(t),lhr=r(RIe," (WavLM model)"),RIe.forEach(t),Be.forEach(t),ihr=i(Ca),E8=n(Ca,"P",{});var PIe=s(E8);dhr=r(PIe,"The model is set in evaluation mode by default using "),nFe=n(PIe,"CODE",{});var z7t=s(nFe);chr=r(z7t,"model.eval()"),z7t.forEach(t),fhr=r(PIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=n(PIe,"CODE",{});var Q7t=s(sFe);mhr=r(Q7t,"model.train()"),Q7t.forEach(t),PIe.forEach(t),ghr=i(Ca),T(C8.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),UXe=i(f),jd=n(f,"H2",{class:!0});var oWe=s(jd);w8=n(oWe,"A",{id:!0,class:!0,href:!0});var W7t=s(w8);lFe=n(W7t,"SPAN",{});var H7t=s(lFe);T(i9.$$.fragment,H7t),H7t.forEach(t),W7t.forEach(t),hhr=i(oWe),iFe=n(oWe,"SPAN",{});var U7t=s(iFe);phr=r(U7t,"AutoModelForSpeechSeq2Seq"),U7t.forEach(t),oWe.forEach(t),JXe=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(d9.$$.fragment,Tl),_hr=i(Tl),Dd=n(Tl,"P",{});var pte=s(Dd);uhr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wH=n(pte,"A",{href:!0});var J7t=s(wH);bhr=r(J7t,"from_pretrained()"),J7t.forEach(t),vhr=r(pte," class method or the "),AH=n(pte,"A",{href:!0});var Y7t=s(AH);Fhr=r(Y7t,"from_config()"),Y7t.forEach(t),Thr=r(pte,` class
method.`),pte.forEach(t),Mhr=i(Tl),c9=n(Tl,"P",{});var rWe=s(c9);Ehr=r(rWe,"This class cannot be instantiated directly using "),dFe=n(rWe,"CODE",{});var K7t=s(dFe);Chr=r(K7t,"__init__()"),K7t.forEach(t),whr=r(rWe," (throws an error)."),rWe.forEach(t),Ahr=i(Tl),At=n(Tl,"DIV",{class:!0});var VA=s(At);T(f9.$$.fragment,VA),Lhr=i(VA),cFe=n(VA,"P",{});var Z7t=s(cFe);yhr=r(Z7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Z7t.forEach(t),xhr=i(VA),Gd=n(VA,"P",{});var _te=s(Gd);$hr=r(_te,`Note:
Loading a model from its configuration file does `),fFe=n(_te,"STRONG",{});var eLt=s(fFe);khr=r(eLt,"not"),eLt.forEach(t),Shr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(_te,"A",{href:!0});var oLt=s(LH);Rhr=r(oLt,"from_pretrained()"),oLt.forEach(t),Phr=r(_te," to load the model weights."),_te.forEach(t),Bhr=i(VA),T(A8.$$.fragment,VA),VA.forEach(t),Nhr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(m9.$$.fragment,wa),Ihr=i(wa),mFe=n(wa,"P",{});var rLt=s(mFe);qhr=r(rLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rLt.forEach(t),jhr=i(wa),Za=n(wa,"P",{});var XA=s(Za);Dhr=r(XA,"The model class to instantiate is selected based on the "),gFe=n(XA,"CODE",{});var tLt=s(gFe);Ghr=r(tLt,"model_type"),tLt.forEach(t),Ohr=r(XA,` property of the config object (either
passed as an argument or loaded from `),hFe=n(XA,"CODE",{});var aLt=s(hFe);Vhr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),Xhr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(XA,"CODE",{});var nLt=s(pFe);zhr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),Qhr=r(XA,":"),XA.forEach(t),Whr=i(wa),g9=n(wa,"UL",{});var tWe=s(g9);L8=n(tWe,"LI",{});var BIe=s(L8);_Fe=n(BIe,"STRONG",{});var sLt=s(_Fe);Hhr=r(sLt,"speech-encoder-decoder"),sLt.forEach(t),Uhr=r(BIe," \u2014 "),yH=n(BIe,"A",{href:!0});var lLt=s(yH);Jhr=r(lLt,"SpeechEncoderDecoderModel"),lLt.forEach(t),Yhr=r(BIe," (Speech Encoder decoder model)"),BIe.forEach(t),Khr=i(tWe),y8=n(tWe,"LI",{});var NIe=s(y8);uFe=n(NIe,"STRONG",{});var iLt=s(uFe);Zhr=r(iLt,"speech_to_text"),iLt.forEach(t),epr=r(NIe," \u2014 "),xH=n(NIe,"A",{href:!0});var dLt=s(xH);opr=r(dLt,"Speech2TextForConditionalGeneration"),dLt.forEach(t),rpr=r(NIe," (Speech2Text model)"),NIe.forEach(t),tWe.forEach(t),tpr=i(wa),x8=n(wa,"P",{});var IIe=s(x8);apr=r(IIe,"The model is set in evaluation mode by default using "),bFe=n(IIe,"CODE",{});var cLt=s(bFe);npr=r(cLt,"model.eval()"),cLt.forEach(t),spr=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vFe=n(IIe,"CODE",{});var fLt=s(vFe);lpr=r(fLt,"model.train()"),fLt.forEach(t),IIe.forEach(t),ipr=i(wa),T($8.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),YXe=i(f),Od=n(f,"H2",{class:!0});var aWe=s(Od);k8=n(aWe,"A",{id:!0,class:!0,href:!0});var mLt=s(k8);FFe=n(mLt,"SPAN",{});var gLt=s(FFe);T(h9.$$.fragment,gLt),gLt.forEach(t),mLt.forEach(t),dpr=i(aWe),TFe=n(aWe,"SPAN",{});var hLt=s(TFe);cpr=r(hLt,"AutoModelForAudioXVector"),hLt.forEach(t),aWe.forEach(t),KXe=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(p9.$$.fragment,Ml),fpr=i(Ml),Vd=n(Ml,"P",{});var ute=s(Vd);mpr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$H=n(ute,"A",{href:!0});var pLt=s($H);gpr=r(pLt,"from_pretrained()"),pLt.forEach(t),hpr=r(ute," class method or the "),kH=n(ute,"A",{href:!0});var _Lt=s(kH);ppr=r(_Lt,"from_config()"),_Lt.forEach(t),_pr=r(ute,` class
method.`),ute.forEach(t),upr=i(Ml),_9=n(Ml,"P",{});var nWe=s(_9);bpr=r(nWe,"This class cannot be instantiated directly using "),MFe=n(nWe,"CODE",{});var uLt=s(MFe);vpr=r(uLt,"__init__()"),uLt.forEach(t),Fpr=r(nWe," (throws an error)."),nWe.forEach(t),Tpr=i(Ml),Lt=n(Ml,"DIV",{class:!0});var zA=s(Lt);T(u9.$$.fragment,zA),Mpr=i(zA),EFe=n(zA,"P",{});var bLt=s(EFe);Epr=r(bLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bLt.forEach(t),Cpr=i(zA),Xd=n(zA,"P",{});var bte=s(Xd);wpr=r(bte,`Note:
Loading a model from its configuration file does `),CFe=n(bte,"STRONG",{});var vLt=s(CFe);Apr=r(vLt,"not"),vLt.forEach(t),Lpr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(bte,"A",{href:!0});var FLt=s(SH);ypr=r(FLt,"from_pretrained()"),FLt.forEach(t),xpr=r(bte," to load the model weights."),bte.forEach(t),$pr=i(zA),T(S8.$$.fragment,zA),zA.forEach(t),kpr=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(b9.$$.fragment,Aa),Spr=i(Aa),wFe=n(Aa,"P",{});var TLt=s(wFe);Rpr=r(TLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TLt.forEach(t),Ppr=i(Aa),en=n(Aa,"P",{});var QA=s(en);Bpr=r(QA,"The model class to instantiate is selected based on the "),AFe=n(QA,"CODE",{});var MLt=s(AFe);Npr=r(MLt,"model_type"),MLt.forEach(t),Ipr=r(QA,` property of the config object (either
passed as an argument or loaded from `),LFe=n(QA,"CODE",{});var ELt=s(LFe);qpr=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),jpr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(QA,"CODE",{});var CLt=s(yFe);Dpr=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),Gpr=r(QA,":"),QA.forEach(t),Opr=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);R8=n(El,"LI",{});var qIe=s(R8);xFe=n(qIe,"STRONG",{});var wLt=s(xFe);Vpr=r(wLt,"data2vec-audio"),wLt.forEach(t),Xpr=r(qIe," \u2014 "),RH=n(qIe,"A",{href:!0});var ALt=s(RH);zpr=r(ALt,"Data2VecAudioForXVector"),ALt.forEach(t),Qpr=r(qIe," (Data2VecAudio model)"),qIe.forEach(t),Wpr=i(El),P8=n(El,"LI",{});var jIe=s(P8);$Fe=n(jIe,"STRONG",{});var LLt=s($Fe);Hpr=r(LLt,"unispeech-sat"),LLt.forEach(t),Upr=r(jIe," \u2014 "),PH=n(jIe,"A",{href:!0});var yLt=s(PH);Jpr=r(yLt,"UniSpeechSatForXVector"),yLt.forEach(t),Ypr=r(jIe," (UniSpeechSat model)"),jIe.forEach(t),Kpr=i(El),B8=n(El,"LI",{});var DIe=s(B8);kFe=n(DIe,"STRONG",{});var xLt=s(kFe);Zpr=r(xLt,"wav2vec2"),xLt.forEach(t),e_r=r(DIe," \u2014 "),BH=n(DIe,"A",{href:!0});var $Lt=s(BH);o_r=r($Lt,"Wav2Vec2ForXVector"),$Lt.forEach(t),r_r=r(DIe," (Wav2Vec2 model)"),DIe.forEach(t),t_r=i(El),N8=n(El,"LI",{});var GIe=s(N8);SFe=n(GIe,"STRONG",{});var kLt=s(SFe);a_r=r(kLt,"wav2vec2-conformer"),kLt.forEach(t),n_r=r(GIe," \u2014 "),NH=n(GIe,"A",{href:!0});var SLt=s(NH);s_r=r(SLt,"Wav2Vec2ConformerForXVector"),SLt.forEach(t),l_r=r(GIe," (Wav2Vec2-Conformer model)"),GIe.forEach(t),i_r=i(El),I8=n(El,"LI",{});var OIe=s(I8);RFe=n(OIe,"STRONG",{});var RLt=s(RFe);d_r=r(RLt,"wavlm"),RLt.forEach(t),c_r=r(OIe," \u2014 "),IH=n(OIe,"A",{href:!0});var PLt=s(IH);f_r=r(PLt,"WavLMForXVector"),PLt.forEach(t),m_r=r(OIe," (WavLM model)"),OIe.forEach(t),El.forEach(t),g_r=i(Aa),q8=n(Aa,"P",{});var VIe=s(q8);h_r=r(VIe,"The model is set in evaluation mode by default using "),PFe=n(VIe,"CODE",{});var BLt=s(PFe);p_r=r(BLt,"model.eval()"),BLt.forEach(t),__r=r(VIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BFe=n(VIe,"CODE",{});var NLt=s(BFe);u_r=r(NLt,"model.train()"),NLt.forEach(t),VIe.forEach(t),b_r=i(Aa),T(j8.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),ZXe=i(f),zd=n(f,"H2",{class:!0});var sWe=s(zd);D8=n(sWe,"A",{id:!0,class:!0,href:!0});var ILt=s(D8);NFe=n(ILt,"SPAN",{});var qLt=s(NFe);T(v9.$$.fragment,qLt),qLt.forEach(t),ILt.forEach(t),v_r=i(sWe),IFe=n(sWe,"SPAN",{});var jLt=s(IFe);F_r=r(jLt,"AutoModelForMaskedImageModeling"),jLt.forEach(t),sWe.forEach(t),eze=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(F9.$$.fragment,Cl),T_r=i(Cl),Qd=n(Cl,"P",{});var vte=s(Qd);M_r=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qH=n(vte,"A",{href:!0});var DLt=s(qH);E_r=r(DLt,"from_pretrained()"),DLt.forEach(t),C_r=r(vte," class method or the "),jH=n(vte,"A",{href:!0});var GLt=s(jH);w_r=r(GLt,"from_config()"),GLt.forEach(t),A_r=r(vte,` class
method.`),vte.forEach(t),L_r=i(Cl),T9=n(Cl,"P",{});var lWe=s(T9);y_r=r(lWe,"This class cannot be instantiated directly using "),qFe=n(lWe,"CODE",{});var OLt=s(qFe);x_r=r(OLt,"__init__()"),OLt.forEach(t),$_r=r(lWe," (throws an error)."),lWe.forEach(t),k_r=i(Cl),yt=n(Cl,"DIV",{class:!0});var WA=s(yt);T(M9.$$.fragment,WA),S_r=i(WA),jFe=n(WA,"P",{});var VLt=s(jFe);R_r=r(VLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),VLt.forEach(t),P_r=i(WA),Wd=n(WA,"P",{});var Fte=s(Wd);B_r=r(Fte,`Note:
Loading a model from its configuration file does `),DFe=n(Fte,"STRONG",{});var XLt=s(DFe);N_r=r(XLt,"not"),XLt.forEach(t),I_r=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(Fte,"A",{href:!0});var zLt=s(DH);q_r=r(zLt,"from_pretrained()"),zLt.forEach(t),j_r=r(Fte," to load the model weights."),Fte.forEach(t),D_r=i(WA),T(G8.$$.fragment,WA),WA.forEach(t),G_r=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(E9.$$.fragment,La),O_r=i(La),GFe=n(La,"P",{});var QLt=s(GFe);V_r=r(QLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),QLt.forEach(t),X_r=i(La),on=n(La,"P",{});var HA=s(on);z_r=r(HA,"The model class to instantiate is selected based on the "),OFe=n(HA,"CODE",{});var WLt=s(OFe);Q_r=r(WLt,"model_type"),WLt.forEach(t),W_r=r(HA,` property of the config object (either
passed as an argument or loaded from `),VFe=n(HA,"CODE",{});var HLt=s(VFe);H_r=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),U_r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(HA,"CODE",{});var ULt=s(XFe);J_r=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),Y_r=r(HA,":"),HA.forEach(t),K_r=i(La),Hd=n(La,"UL",{});var Tte=s(Hd);O8=n(Tte,"LI",{});var XIe=s(O8);zFe=n(XIe,"STRONG",{});var JLt=s(zFe);Z_r=r(JLt,"deit"),JLt.forEach(t),eur=r(XIe," \u2014 "),GH=n(XIe,"A",{href:!0});var YLt=s(GH);our=r(YLt,"DeiTForMaskedImageModeling"),YLt.forEach(t),rur=r(XIe," (DeiT model)"),XIe.forEach(t),tur=i(Tte),V8=n(Tte,"LI",{});var zIe=s(V8);QFe=n(zIe,"STRONG",{});var KLt=s(QFe);aur=r(KLt,"swin"),KLt.forEach(t),nur=r(zIe," \u2014 "),OH=n(zIe,"A",{href:!0});var ZLt=s(OH);sur=r(ZLt,"SwinForMaskedImageModeling"),ZLt.forEach(t),lur=r(zIe," (Swin Transformer model)"),zIe.forEach(t),iur=i(Tte),X8=n(Tte,"LI",{});var QIe=s(X8);WFe=n(QIe,"STRONG",{});var eyt=s(WFe);dur=r(eyt,"vit"),eyt.forEach(t),cur=r(QIe," \u2014 "),VH=n(QIe,"A",{href:!0});var oyt=s(VH);fur=r(oyt,"ViTForMaskedImageModeling"),oyt.forEach(t),mur=r(QIe," (ViT model)"),QIe.forEach(t),Tte.forEach(t),gur=i(La),z8=n(La,"P",{});var WIe=s(z8);hur=r(WIe,"The model is set in evaluation mode by default using "),HFe=n(WIe,"CODE",{});var ryt=s(HFe);pur=r(ryt,"model.eval()"),ryt.forEach(t),_ur=r(WIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=n(WIe,"CODE",{});var tyt=s(UFe);uur=r(tyt,"model.train()"),tyt.forEach(t),WIe.forEach(t),bur=i(La),T(Q8.$$.fragment,La),La.forEach(t),Cl.forEach(t),oze=i(f),Ud=n(f,"H2",{class:!0});var iWe=s(Ud);W8=n(iWe,"A",{id:!0,class:!0,href:!0});var ayt=s(W8);JFe=n(ayt,"SPAN",{});var nyt=s(JFe);T(C9.$$.fragment,nyt),nyt.forEach(t),ayt.forEach(t),vur=i(iWe),YFe=n(iWe,"SPAN",{});var syt=s(YFe);Fur=r(syt,"AutoModelForObjectDetection"),syt.forEach(t),iWe.forEach(t),rze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(w9.$$.fragment,wl),Tur=i(wl),Jd=n(wl,"P",{});var Mte=s(Jd);Mur=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XH=n(Mte,"A",{href:!0});var lyt=s(XH);Eur=r(lyt,"from_pretrained()"),lyt.forEach(t),Cur=r(Mte," class method or the "),zH=n(Mte,"A",{href:!0});var iyt=s(zH);wur=r(iyt,"from_config()"),iyt.forEach(t),Aur=r(Mte,` class
method.`),Mte.forEach(t),Lur=i(wl),A9=n(wl,"P",{});var dWe=s(A9);yur=r(dWe,"This class cannot be instantiated directly using "),KFe=n(dWe,"CODE",{});var dyt=s(KFe);xur=r(dyt,"__init__()"),dyt.forEach(t),$ur=r(dWe," (throws an error)."),dWe.forEach(t),kur=i(wl),xt=n(wl,"DIV",{class:!0});var UA=s(xt);T(L9.$$.fragment,UA),Sur=i(UA),ZFe=n(UA,"P",{});var cyt=s(ZFe);Rur=r(cyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cyt.forEach(t),Pur=i(UA),Yd=n(UA,"P",{});var Ete=s(Yd);Bur=r(Ete,`Note:
Loading a model from its configuration file does `),e6e=n(Ete,"STRONG",{});var fyt=s(e6e);Nur=r(fyt,"not"),fyt.forEach(t),Iur=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Ete,"A",{href:!0});var myt=s(QH);qur=r(myt,"from_pretrained()"),myt.forEach(t),jur=r(Ete," to load the model weights."),Ete.forEach(t),Dur=i(UA),T(H8.$$.fragment,UA),UA.forEach(t),Gur=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(y9.$$.fragment,ya),Our=i(ya),o6e=n(ya,"P",{});var gyt=s(o6e);Vur=r(gyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gyt.forEach(t),Xur=i(ya),rn=n(ya,"P",{});var JA=s(rn);zur=r(JA,"The model class to instantiate is selected based on the "),r6e=n(JA,"CODE",{});var hyt=s(r6e);Qur=r(hyt,"model_type"),hyt.forEach(t),Wur=r(JA,` property of the config object (either
passed as an argument or loaded from `),t6e=n(JA,"CODE",{});var pyt=s(t6e);Hur=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),Uur=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(JA,"CODE",{});var _yt=s(a6e);Jur=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),Yur=r(JA,":"),JA.forEach(t),Kur=i(ya),x9=n(ya,"UL",{});var cWe=s(x9);U8=n(cWe,"LI",{});var HIe=s(U8);n6e=n(HIe,"STRONG",{});var uyt=s(n6e);Zur=r(uyt,"detr"),uyt.forEach(t),e1r=r(HIe," \u2014 "),WH=n(HIe,"A",{href:!0});var byt=s(WH);o1r=r(byt,"DetrForObjectDetection"),byt.forEach(t),r1r=r(HIe," (DETR model)"),HIe.forEach(t),t1r=i(cWe),J8=n(cWe,"LI",{});var UIe=s(J8);s6e=n(UIe,"STRONG",{});var vyt=s(s6e);a1r=r(vyt,"yolos"),vyt.forEach(t),n1r=r(UIe," \u2014 "),HH=n(UIe,"A",{href:!0});var Fyt=s(HH);s1r=r(Fyt,"YolosForObjectDetection"),Fyt.forEach(t),l1r=r(UIe," (YOLOS model)"),UIe.forEach(t),cWe.forEach(t),i1r=i(ya),Y8=n(ya,"P",{});var JIe=s(Y8);d1r=r(JIe,"The model is set in evaluation mode by default using "),l6e=n(JIe,"CODE",{});var Tyt=s(l6e);c1r=r(Tyt,"model.eval()"),Tyt.forEach(t),f1r=r(JIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i6e=n(JIe,"CODE",{});var Myt=s(i6e);m1r=r(Myt,"model.train()"),Myt.forEach(t),JIe.forEach(t),g1r=i(ya),T(K8.$$.fragment,ya),ya.forEach(t),wl.forEach(t),tze=i(f),Kd=n(f,"H2",{class:!0});var fWe=s(Kd);Z8=n(fWe,"A",{id:!0,class:!0,href:!0});var Eyt=s(Z8);d6e=n(Eyt,"SPAN",{});var Cyt=s(d6e);T($9.$$.fragment,Cyt),Cyt.forEach(t),Eyt.forEach(t),h1r=i(fWe),c6e=n(fWe,"SPAN",{});var wyt=s(c6e);p1r=r(wyt,"AutoModelForImageSegmentation"),wyt.forEach(t),fWe.forEach(t),aze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(k9.$$.fragment,Al),_1r=i(Al),Zd=n(Al,"P",{});var Cte=s(Zd);u1r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UH=n(Cte,"A",{href:!0});var Ayt=s(UH);b1r=r(Ayt,"from_pretrained()"),Ayt.forEach(t),v1r=r(Cte," class method or the "),JH=n(Cte,"A",{href:!0});var Lyt=s(JH);F1r=r(Lyt,"from_config()"),Lyt.forEach(t),T1r=r(Cte,` class
method.`),Cte.forEach(t),M1r=i(Al),S9=n(Al,"P",{});var mWe=s(S9);E1r=r(mWe,"This class cannot be instantiated directly using "),f6e=n(mWe,"CODE",{});var yyt=s(f6e);C1r=r(yyt,"__init__()"),yyt.forEach(t),w1r=r(mWe," (throws an error)."),mWe.forEach(t),A1r=i(Al),$t=n(Al,"DIV",{class:!0});var YA=s($t);T(R9.$$.fragment,YA),L1r=i(YA),m6e=n(YA,"P",{});var xyt=s(m6e);y1r=r(xyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xyt.forEach(t),x1r=i(YA),ec=n(YA,"P",{});var wte=s(ec);$1r=r(wte,`Note:
Loading a model from its configuration file does `),g6e=n(wte,"STRONG",{});var $yt=s(g6e);k1r=r($yt,"not"),$yt.forEach(t),S1r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(wte,"A",{href:!0});var kyt=s(YH);R1r=r(kyt,"from_pretrained()"),kyt.forEach(t),P1r=r(wte," to load the model weights."),wte.forEach(t),B1r=i(YA),T(eM.$$.fragment,YA),YA.forEach(t),N1r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(P9.$$.fragment,xa),I1r=i(xa),h6e=n(xa,"P",{});var Syt=s(h6e);q1r=r(Syt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Syt.forEach(t),j1r=i(xa),tn=n(xa,"P",{});var KA=s(tn);D1r=r(KA,"The model class to instantiate is selected based on the "),p6e=n(KA,"CODE",{});var Ryt=s(p6e);G1r=r(Ryt,"model_type"),Ryt.forEach(t),O1r=r(KA,` property of the config object (either
passed as an argument or loaded from `),_6e=n(KA,"CODE",{});var Pyt=s(_6e);V1r=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),X1r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(KA,"CODE",{});var Byt=s(u6e);z1r=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),Q1r=r(KA,":"),KA.forEach(t),W1r=i(xa),b6e=n(xa,"UL",{});var Nyt=s(b6e);oM=n(Nyt,"LI",{});var YIe=s(oM);v6e=n(YIe,"STRONG",{});var Iyt=s(v6e);H1r=r(Iyt,"detr"),Iyt.forEach(t),U1r=r(YIe," \u2014 "),KH=n(YIe,"A",{href:!0});var qyt=s(KH);J1r=r(qyt,"DetrForSegmentation"),qyt.forEach(t),Y1r=r(YIe," (DETR model)"),YIe.forEach(t),Nyt.forEach(t),K1r=i(xa),rM=n(xa,"P",{});var KIe=s(rM);Z1r=r(KIe,"The model is set in evaluation mode by default using "),F6e=n(KIe,"CODE",{});var jyt=s(F6e);e2r=r(jyt,"model.eval()"),jyt.forEach(t),o2r=r(KIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T6e=n(KIe,"CODE",{});var Dyt=s(T6e);r2r=r(Dyt,"model.train()"),Dyt.forEach(t),KIe.forEach(t),t2r=i(xa),T(tM.$$.fragment,xa),xa.forEach(t),Al.forEach(t),nze=i(f),oc=n(f,"H2",{class:!0});var gWe=s(oc);aM=n(gWe,"A",{id:!0,class:!0,href:!0});var Gyt=s(aM);M6e=n(Gyt,"SPAN",{});var Oyt=s(M6e);T(B9.$$.fragment,Oyt),Oyt.forEach(t),Gyt.forEach(t),a2r=i(gWe),E6e=n(gWe,"SPAN",{});var Vyt=s(E6e);n2r=r(Vyt,"AutoModelForSemanticSegmentation"),Vyt.forEach(t),gWe.forEach(t),sze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(N9.$$.fragment,Ll),s2r=i(Ll),rc=n(Ll,"P",{});var Ate=s(rc);l2r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZH=n(Ate,"A",{href:!0});var Xyt=s(ZH);i2r=r(Xyt,"from_pretrained()"),Xyt.forEach(t),d2r=r(Ate," class method or the "),eU=n(Ate,"A",{href:!0});var zyt=s(eU);c2r=r(zyt,"from_config()"),zyt.forEach(t),f2r=r(Ate,` class
method.`),Ate.forEach(t),m2r=i(Ll),I9=n(Ll,"P",{});var hWe=s(I9);g2r=r(hWe,"This class cannot be instantiated directly using "),C6e=n(hWe,"CODE",{});var Qyt=s(C6e);h2r=r(Qyt,"__init__()"),Qyt.forEach(t),p2r=r(hWe," (throws an error)."),hWe.forEach(t),_2r=i(Ll),kt=n(Ll,"DIV",{class:!0});var ZA=s(kt);T(q9.$$.fragment,ZA),u2r=i(ZA),w6e=n(ZA,"P",{});var Wyt=s(w6e);b2r=r(Wyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Wyt.forEach(t),v2r=i(ZA),tc=n(ZA,"P",{});var Lte=s(tc);F2r=r(Lte,`Note:
Loading a model from its configuration file does `),A6e=n(Lte,"STRONG",{});var Hyt=s(A6e);T2r=r(Hyt,"not"),Hyt.forEach(t),M2r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(Lte,"A",{href:!0});var Uyt=s(oU);E2r=r(Uyt,"from_pretrained()"),Uyt.forEach(t),C2r=r(Lte," to load the model weights."),Lte.forEach(t),w2r=i(ZA),T(nM.$$.fragment,ZA),ZA.forEach(t),A2r=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(j9.$$.fragment,$a),L2r=i($a),L6e=n($a,"P",{});var Jyt=s(L6e);y2r=r(Jyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jyt.forEach(t),x2r=i($a),an=n($a,"P",{});var e7=s(an);$2r=r(e7,"The model class to instantiate is selected based on the "),y6e=n(e7,"CODE",{});var Yyt=s(y6e);k2r=r(Yyt,"model_type"),Yyt.forEach(t),S2r=r(e7,` property of the config object (either
passed as an argument or loaded from `),x6e=n(e7,"CODE",{});var Kyt=s(x6e);R2r=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),P2r=r(e7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(e7,"CODE",{});var Zyt=s($6e);B2r=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),N2r=r(e7,":"),e7.forEach(t),I2r=i($a),at=n($a,"UL",{});var yl=s(at);sM=n(yl,"LI",{});var ZIe=s(sM);k6e=n(ZIe,"STRONG",{});var e9t=s(k6e);q2r=r(e9t,"beit"),e9t.forEach(t),j2r=r(ZIe," \u2014 "),rU=n(ZIe,"A",{href:!0});var o9t=s(rU);D2r=r(o9t,"BeitForSemanticSegmentation"),o9t.forEach(t),G2r=r(ZIe," (BEiT model)"),ZIe.forEach(t),O2r=i(yl),lM=n(yl,"LI",{});var eqe=s(lM);S6e=n(eqe,"STRONG",{});var r9t=s(S6e);V2r=r(r9t,"data2vec-vision"),r9t.forEach(t),X2r=r(eqe," \u2014 "),tU=n(eqe,"A",{href:!0});var t9t=s(tU);z2r=r(t9t,"Data2VecVisionForSemanticSegmentation"),t9t.forEach(t),Q2r=r(eqe," (Data2VecVision model)"),eqe.forEach(t),W2r=i(yl),iM=n(yl,"LI",{});var oqe=s(iM);R6e=n(oqe,"STRONG",{});var a9t=s(R6e);H2r=r(a9t,"dpt"),a9t.forEach(t),U2r=r(oqe," \u2014 "),aU=n(oqe,"A",{href:!0});var n9t=s(aU);J2r=r(n9t,"DPTForSemanticSegmentation"),n9t.forEach(t),Y2r=r(oqe," (DPT model)"),oqe.forEach(t),K2r=i(yl),dM=n(yl,"LI",{});var rqe=s(dM);P6e=n(rqe,"STRONG",{});var s9t=s(P6e);Z2r=r(s9t,"mobilevit"),s9t.forEach(t),ebr=r(rqe," \u2014 "),nU=n(rqe,"A",{href:!0});var l9t=s(nU);obr=r(l9t,"MobileViTForSemanticSegmentation"),l9t.forEach(t),rbr=r(rqe," (MobileViT model)"),rqe.forEach(t),tbr=i(yl),cM=n(yl,"LI",{});var tqe=s(cM);B6e=n(tqe,"STRONG",{});var i9t=s(B6e);abr=r(i9t,"segformer"),i9t.forEach(t),nbr=r(tqe," \u2014 "),sU=n(tqe,"A",{href:!0});var d9t=s(sU);sbr=r(d9t,"SegformerForSemanticSegmentation"),d9t.forEach(t),lbr=r(tqe," (SegFormer model)"),tqe.forEach(t),yl.forEach(t),ibr=i($a),fM=n($a,"P",{});var aqe=s(fM);dbr=r(aqe,"The model is set in evaluation mode by default using "),N6e=n(aqe,"CODE",{});var c9t=s(N6e);cbr=r(c9t,"model.eval()"),c9t.forEach(t),fbr=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I6e=n(aqe,"CODE",{});var f9t=s(I6e);mbr=r(f9t,"model.train()"),f9t.forEach(t),aqe.forEach(t),gbr=i($a),T(mM.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),lze=i(f),ac=n(f,"H2",{class:!0});var pWe=s(ac);gM=n(pWe,"A",{id:!0,class:!0,href:!0});var m9t=s(gM);q6e=n(m9t,"SPAN",{});var g9t=s(q6e);T(D9.$$.fragment,g9t),g9t.forEach(t),m9t.forEach(t),hbr=i(pWe),j6e=n(pWe,"SPAN",{});var h9t=s(j6e);pbr=r(h9t,"AutoModelForInstanceSegmentation"),h9t.forEach(t),pWe.forEach(t),ize=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(G9.$$.fragment,xl),_br=i(xl),nc=n(xl,"P",{});var yte=s(nc);ubr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lU=n(yte,"A",{href:!0});var p9t=s(lU);bbr=r(p9t,"from_pretrained()"),p9t.forEach(t),vbr=r(yte," class method or the "),iU=n(yte,"A",{href:!0});var _9t=s(iU);Fbr=r(_9t,"from_config()"),_9t.forEach(t),Tbr=r(yte,` class
method.`),yte.forEach(t),Mbr=i(xl),O9=n(xl,"P",{});var _We=s(O9);Ebr=r(_We,"This class cannot be instantiated directly using "),D6e=n(_We,"CODE",{});var u9t=s(D6e);Cbr=r(u9t,"__init__()"),u9t.forEach(t),wbr=r(_We," (throws an error)."),_We.forEach(t),Abr=i(xl),St=n(xl,"DIV",{class:!0});var o7=s(St);T(V9.$$.fragment,o7),Lbr=i(o7),G6e=n(o7,"P",{});var b9t=s(G6e);ybr=r(b9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),b9t.forEach(t),xbr=i(o7),sc=n(o7,"P",{});var xte=s(sc);$br=r(xte,`Note:
Loading a model from its configuration file does `),O6e=n(xte,"STRONG",{});var v9t=s(O6e);kbr=r(v9t,"not"),v9t.forEach(t),Sbr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(xte,"A",{href:!0});var F9t=s(dU);Rbr=r(F9t,"from_pretrained()"),F9t.forEach(t),Pbr=r(xte," to load the model weights."),xte.forEach(t),Bbr=i(o7),T(hM.$$.fragment,o7),o7.forEach(t),Nbr=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(X9.$$.fragment,ka),Ibr=i(ka),V6e=n(ka,"P",{});var T9t=s(V6e);qbr=r(T9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),T9t.forEach(t),jbr=i(ka),nn=n(ka,"P",{});var r7=s(nn);Dbr=r(r7,"The model class to instantiate is selected based on the "),X6e=n(r7,"CODE",{});var M9t=s(X6e);Gbr=r(M9t,"model_type"),M9t.forEach(t),Obr=r(r7,` property of the config object (either
passed as an argument or loaded from `),z6e=n(r7,"CODE",{});var E9t=s(z6e);Vbr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),Xbr=r(r7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=n(r7,"CODE",{});var C9t=s(Q6e);zbr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),Qbr=r(r7,":"),r7.forEach(t),Wbr=i(ka),W6e=n(ka,"UL",{});var w9t=s(W6e);pM=n(w9t,"LI",{});var nqe=s(pM);H6e=n(nqe,"STRONG",{});var A9t=s(H6e);Hbr=r(A9t,"maskformer"),A9t.forEach(t),Ubr=r(nqe," \u2014 "),cU=n(nqe,"A",{href:!0});var L9t=s(cU);Jbr=r(L9t,"MaskFormerForInstanceSegmentation"),L9t.forEach(t),Ybr=r(nqe," (MaskFormer model)"),nqe.forEach(t),w9t.forEach(t),Kbr=i(ka),_M=n(ka,"P",{});var sqe=s(_M);Zbr=r(sqe,"The model is set in evaluation mode by default using "),U6e=n(sqe,"CODE",{});var y9t=s(U6e);evr=r(y9t,"model.eval()"),y9t.forEach(t),ovr=r(sqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J6e=n(sqe,"CODE",{});var x9t=s(J6e);rvr=r(x9t,"model.train()"),x9t.forEach(t),sqe.forEach(t),tvr=i(ka),T(uM.$$.fragment,ka),ka.forEach(t),xl.forEach(t),dze=i(f),lc=n(f,"H2",{class:!0});var uWe=s(lc);bM=n(uWe,"A",{id:!0,class:!0,href:!0});var $9t=s(bM);Y6e=n($9t,"SPAN",{});var k9t=s(Y6e);T(z9.$$.fragment,k9t),k9t.forEach(t),$9t.forEach(t),avr=i(uWe),K6e=n(uWe,"SPAN",{});var S9t=s(K6e);nvr=r(S9t,"TFAutoModel"),S9t.forEach(t),uWe.forEach(t),cze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(Q9.$$.fragment,$l),svr=i($l),ic=n($l,"P",{});var $te=s(ic);lvr=r($te,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fU=n($te,"A",{href:!0});var R9t=s(fU);ivr=r(R9t,"from_pretrained()"),R9t.forEach(t),dvr=r($te," class method or the "),mU=n($te,"A",{href:!0});var P9t=s(mU);cvr=r(P9t,"from_config()"),P9t.forEach(t),fvr=r($te,` class
method.`),$te.forEach(t),mvr=i($l),W9=n($l,"P",{});var bWe=s(W9);gvr=r(bWe,"This class cannot be instantiated directly using "),Z6e=n(bWe,"CODE",{});var B9t=s(Z6e);hvr=r(B9t,"__init__()"),B9t.forEach(t),pvr=r(bWe," (throws an error)."),bWe.forEach(t),_vr=i($l),Rt=n($l,"DIV",{class:!0});var t7=s(Rt);T(H9.$$.fragment,t7),uvr=i(t7),eTe=n(t7,"P",{});var N9t=s(eTe);bvr=r(N9t,"Instantiates one of the base model classes of the library from a configuration."),N9t.forEach(t),vvr=i(t7),dc=n(t7,"P",{});var kte=s(dc);Fvr=r(kte,`Note:
Loading a model from its configuration file does `),oTe=n(kte,"STRONG",{});var I9t=s(oTe);Tvr=r(I9t,"not"),I9t.forEach(t),Mvr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(kte,"A",{href:!0});var q9t=s(gU);Evr=r(q9t,"from_pretrained()"),q9t.forEach(t),Cvr=r(kte," to load the model weights."),kte.forEach(t),wvr=i(t7),T(vM.$$.fragment,t7),t7.forEach(t),Avr=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(U9.$$.fragment,kl),Lvr=i(kl),rTe=n(kl,"P",{});var j9t=s(rTe);yvr=r(j9t,"Instantiate one of the base model classes of the library from a pretrained model."),j9t.forEach(t),xvr=i(kl),sn=n(kl,"P",{});var a7=s(sn);$vr=r(a7,"The model class to instantiate is selected based on the "),tTe=n(a7,"CODE",{});var D9t=s(tTe);kvr=r(D9t,"model_type"),D9t.forEach(t),Svr=r(a7,` property of the config object (either
passed as an argument or loaded from `),aTe=n(a7,"CODE",{});var G9t=s(aTe);Rvr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Pvr=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(a7,"CODE",{});var O9t=s(nTe);Bvr=r(O9t,"pretrained_model_name_or_path"),O9t.forEach(t),Nvr=r(a7,":"),a7.forEach(t),Ivr=i(kl),q=n(kl,"UL",{});var D=s(q);FM=n(D,"LI",{});var lqe=s(FM);sTe=n(lqe,"STRONG",{});var V9t=s(sTe);qvr=r(V9t,"albert"),V9t.forEach(t),jvr=r(lqe," \u2014 "),hU=n(lqe,"A",{href:!0});var X9t=s(hU);Dvr=r(X9t,"TFAlbertModel"),X9t.forEach(t),Gvr=r(lqe," (ALBERT model)"),lqe.forEach(t),Ovr=i(D),TM=n(D,"LI",{});var iqe=s(TM);lTe=n(iqe,"STRONG",{});var z9t=s(lTe);Vvr=r(z9t,"bart"),z9t.forEach(t),Xvr=r(iqe," \u2014 "),pU=n(iqe,"A",{href:!0});var Q9t=s(pU);zvr=r(Q9t,"TFBartModel"),Q9t.forEach(t),Qvr=r(iqe," (BART model)"),iqe.forEach(t),Wvr=i(D),MM=n(D,"LI",{});var dqe=s(MM);iTe=n(dqe,"STRONG",{});var W9t=s(iTe);Hvr=r(W9t,"bert"),W9t.forEach(t),Uvr=r(dqe," \u2014 "),_U=n(dqe,"A",{href:!0});var H9t=s(_U);Jvr=r(H9t,"TFBertModel"),H9t.forEach(t),Yvr=r(dqe," (BERT model)"),dqe.forEach(t),Kvr=i(D),EM=n(D,"LI",{});var cqe=s(EM);dTe=n(cqe,"STRONG",{});var U9t=s(dTe);Zvr=r(U9t,"blenderbot"),U9t.forEach(t),eFr=r(cqe," \u2014 "),uU=n(cqe,"A",{href:!0});var J9t=s(uU);oFr=r(J9t,"TFBlenderbotModel"),J9t.forEach(t),rFr=r(cqe," (Blenderbot model)"),cqe.forEach(t),tFr=i(D),CM=n(D,"LI",{});var fqe=s(CM);cTe=n(fqe,"STRONG",{});var Y9t=s(cTe);aFr=r(Y9t,"blenderbot-small"),Y9t.forEach(t),nFr=r(fqe," \u2014 "),bU=n(fqe,"A",{href:!0});var K9t=s(bU);sFr=r(K9t,"TFBlenderbotSmallModel"),K9t.forEach(t),lFr=r(fqe," (BlenderbotSmall model)"),fqe.forEach(t),iFr=i(D),wM=n(D,"LI",{});var mqe=s(wM);fTe=n(mqe,"STRONG",{});var Z9t=s(fTe);dFr=r(Z9t,"camembert"),Z9t.forEach(t),cFr=r(mqe," \u2014 "),vU=n(mqe,"A",{href:!0});var ext=s(vU);fFr=r(ext,"TFCamembertModel"),ext.forEach(t),mFr=r(mqe," (CamemBERT model)"),mqe.forEach(t),gFr=i(D),AM=n(D,"LI",{});var gqe=s(AM);mTe=n(gqe,"STRONG",{});var oxt=s(mTe);hFr=r(oxt,"clip"),oxt.forEach(t),pFr=r(gqe," \u2014 "),FU=n(gqe,"A",{href:!0});var rxt=s(FU);_Fr=r(rxt,"TFCLIPModel"),rxt.forEach(t),uFr=r(gqe," (CLIP model)"),gqe.forEach(t),bFr=i(D),LM=n(D,"LI",{});var hqe=s(LM);gTe=n(hqe,"STRONG",{});var txt=s(gTe);vFr=r(txt,"convbert"),txt.forEach(t),FFr=r(hqe," \u2014 "),TU=n(hqe,"A",{href:!0});var axt=s(TU);TFr=r(axt,"TFConvBertModel"),axt.forEach(t),MFr=r(hqe," (ConvBERT model)"),hqe.forEach(t),EFr=i(D),yM=n(D,"LI",{});var pqe=s(yM);hTe=n(pqe,"STRONG",{});var nxt=s(hTe);CFr=r(nxt,"convnext"),nxt.forEach(t),wFr=r(pqe," \u2014 "),MU=n(pqe,"A",{href:!0});var sxt=s(MU);AFr=r(sxt,"TFConvNextModel"),sxt.forEach(t),LFr=r(pqe," (ConvNeXT model)"),pqe.forEach(t),yFr=i(D),xM=n(D,"LI",{});var _qe=s(xM);pTe=n(_qe,"STRONG",{});var lxt=s(pTe);xFr=r(lxt,"ctrl"),lxt.forEach(t),$Fr=r(_qe," \u2014 "),EU=n(_qe,"A",{href:!0});var ixt=s(EU);kFr=r(ixt,"TFCTRLModel"),ixt.forEach(t),SFr=r(_qe," (CTRL model)"),_qe.forEach(t),RFr=i(D),$M=n(D,"LI",{});var uqe=s($M);_Te=n(uqe,"STRONG",{});var dxt=s(_Te);PFr=r(dxt,"data2vec-vision"),dxt.forEach(t),BFr=r(uqe," \u2014 "),CU=n(uqe,"A",{href:!0});var cxt=s(CU);NFr=r(cxt,"TFData2VecVisionModel"),cxt.forEach(t),IFr=r(uqe," (Data2VecVision model)"),uqe.forEach(t),qFr=i(D),kM=n(D,"LI",{});var bqe=s(kM);uTe=n(bqe,"STRONG",{});var fxt=s(uTe);jFr=r(fxt,"deberta"),fxt.forEach(t),DFr=r(bqe," \u2014 "),wU=n(bqe,"A",{href:!0});var mxt=s(wU);GFr=r(mxt,"TFDebertaModel"),mxt.forEach(t),OFr=r(bqe," (DeBERTa model)"),bqe.forEach(t),VFr=i(D),SM=n(D,"LI",{});var vqe=s(SM);bTe=n(vqe,"STRONG",{});var gxt=s(bTe);XFr=r(gxt,"deberta-v2"),gxt.forEach(t),zFr=r(vqe," \u2014 "),AU=n(vqe,"A",{href:!0});var hxt=s(AU);QFr=r(hxt,"TFDebertaV2Model"),hxt.forEach(t),WFr=r(vqe," (DeBERTa-v2 model)"),vqe.forEach(t),HFr=i(D),RM=n(D,"LI",{});var Fqe=s(RM);vTe=n(Fqe,"STRONG",{});var pxt=s(vTe);UFr=r(pxt,"deit"),pxt.forEach(t),JFr=r(Fqe," \u2014 "),LU=n(Fqe,"A",{href:!0});var _xt=s(LU);YFr=r(_xt,"TFDeiTModel"),_xt.forEach(t),KFr=r(Fqe," (DeiT model)"),Fqe.forEach(t),ZFr=i(D),PM=n(D,"LI",{});var Tqe=s(PM);FTe=n(Tqe,"STRONG",{});var uxt=s(FTe);e6r=r(uxt,"distilbert"),uxt.forEach(t),o6r=r(Tqe," \u2014 "),yU=n(Tqe,"A",{href:!0});var bxt=s(yU);r6r=r(bxt,"TFDistilBertModel"),bxt.forEach(t),t6r=r(Tqe," (DistilBERT model)"),Tqe.forEach(t),a6r=i(D),BM=n(D,"LI",{});var Mqe=s(BM);TTe=n(Mqe,"STRONG",{});var vxt=s(TTe);n6r=r(vxt,"dpr"),vxt.forEach(t),s6r=r(Mqe," \u2014 "),xU=n(Mqe,"A",{href:!0});var Fxt=s(xU);l6r=r(Fxt,"TFDPRQuestionEncoder"),Fxt.forEach(t),i6r=r(Mqe," (DPR model)"),Mqe.forEach(t),d6r=i(D),NM=n(D,"LI",{});var Eqe=s(NM);MTe=n(Eqe,"STRONG",{});var Txt=s(MTe);c6r=r(Txt,"electra"),Txt.forEach(t),f6r=r(Eqe," \u2014 "),$U=n(Eqe,"A",{href:!0});var Mxt=s($U);m6r=r(Mxt,"TFElectraModel"),Mxt.forEach(t),g6r=r(Eqe," (ELECTRA model)"),Eqe.forEach(t),h6r=i(D),IM=n(D,"LI",{});var Cqe=s(IM);ETe=n(Cqe,"STRONG",{});var Ext=s(ETe);p6r=r(Ext,"flaubert"),Ext.forEach(t),_6r=r(Cqe," \u2014 "),kU=n(Cqe,"A",{href:!0});var Cxt=s(kU);u6r=r(Cxt,"TFFlaubertModel"),Cxt.forEach(t),b6r=r(Cqe," (FlauBERT model)"),Cqe.forEach(t),v6r=i(D),Ys=n(D,"LI",{});var BS=s(Ys);CTe=n(BS,"STRONG",{});var wxt=s(CTe);F6r=r(wxt,"funnel"),wxt.forEach(t),T6r=r(BS," \u2014 "),SU=n(BS,"A",{href:!0});var Axt=s(SU);M6r=r(Axt,"TFFunnelModel"),Axt.forEach(t),E6r=r(BS," or "),RU=n(BS,"A",{href:!0});var Lxt=s(RU);C6r=r(Lxt,"TFFunnelBaseModel"),Lxt.forEach(t),w6r=r(BS," (Funnel Transformer model)"),BS.forEach(t),A6r=i(D),qM=n(D,"LI",{});var wqe=s(qM);wTe=n(wqe,"STRONG",{});var yxt=s(wTe);L6r=r(yxt,"gpt2"),yxt.forEach(t),y6r=r(wqe," \u2014 "),PU=n(wqe,"A",{href:!0});var xxt=s(PU);x6r=r(xxt,"TFGPT2Model"),xxt.forEach(t),$6r=r(wqe," (OpenAI GPT-2 model)"),wqe.forEach(t),k6r=i(D),jM=n(D,"LI",{});var Aqe=s(jM);ATe=n(Aqe,"STRONG",{});var $xt=s(ATe);S6r=r($xt,"gptj"),$xt.forEach(t),R6r=r(Aqe," \u2014 "),BU=n(Aqe,"A",{href:!0});var kxt=s(BU);P6r=r(kxt,"TFGPTJModel"),kxt.forEach(t),B6r=r(Aqe," (GPT-J model)"),Aqe.forEach(t),N6r=i(D),DM=n(D,"LI",{});var Lqe=s(DM);LTe=n(Lqe,"STRONG",{});var Sxt=s(LTe);I6r=r(Sxt,"hubert"),Sxt.forEach(t),q6r=r(Lqe," \u2014 "),NU=n(Lqe,"A",{href:!0});var Rxt=s(NU);j6r=r(Rxt,"TFHubertModel"),Rxt.forEach(t),D6r=r(Lqe," (Hubert model)"),Lqe.forEach(t),G6r=i(D),GM=n(D,"LI",{});var yqe=s(GM);yTe=n(yqe,"STRONG",{});var Pxt=s(yTe);O6r=r(Pxt,"layoutlm"),Pxt.forEach(t),V6r=r(yqe," \u2014 "),IU=n(yqe,"A",{href:!0});var Bxt=s(IU);X6r=r(Bxt,"TFLayoutLMModel"),Bxt.forEach(t),z6r=r(yqe," (LayoutLM model)"),yqe.forEach(t),Q6r=i(D),OM=n(D,"LI",{});var xqe=s(OM);xTe=n(xqe,"STRONG",{});var Nxt=s(xTe);W6r=r(Nxt,"led"),Nxt.forEach(t),H6r=r(xqe," \u2014 "),qU=n(xqe,"A",{href:!0});var Ixt=s(qU);U6r=r(Ixt,"TFLEDModel"),Ixt.forEach(t),J6r=r(xqe," (LED model)"),xqe.forEach(t),Y6r=i(D),VM=n(D,"LI",{});var $qe=s(VM);$Te=n($qe,"STRONG",{});var qxt=s($Te);K6r=r(qxt,"longformer"),qxt.forEach(t),Z6r=r($qe," \u2014 "),jU=n($qe,"A",{href:!0});var jxt=s(jU);eTr=r(jxt,"TFLongformerModel"),jxt.forEach(t),oTr=r($qe," (Longformer model)"),$qe.forEach(t),rTr=i(D),XM=n(D,"LI",{});var kqe=s(XM);kTe=n(kqe,"STRONG",{});var Dxt=s(kTe);tTr=r(Dxt,"lxmert"),Dxt.forEach(t),aTr=r(kqe," \u2014 "),DU=n(kqe,"A",{href:!0});var Gxt=s(DU);nTr=r(Gxt,"TFLxmertModel"),Gxt.forEach(t),sTr=r(kqe," (LXMERT model)"),kqe.forEach(t),lTr=i(D),zM=n(D,"LI",{});var Sqe=s(zM);STe=n(Sqe,"STRONG",{});var Oxt=s(STe);iTr=r(Oxt,"marian"),Oxt.forEach(t),dTr=r(Sqe," \u2014 "),GU=n(Sqe,"A",{href:!0});var Vxt=s(GU);cTr=r(Vxt,"TFMarianModel"),Vxt.forEach(t),fTr=r(Sqe," (Marian model)"),Sqe.forEach(t),mTr=i(D),QM=n(D,"LI",{});var Rqe=s(QM);RTe=n(Rqe,"STRONG",{});var Xxt=s(RTe);gTr=r(Xxt,"mbart"),Xxt.forEach(t),hTr=r(Rqe," \u2014 "),OU=n(Rqe,"A",{href:!0});var zxt=s(OU);pTr=r(zxt,"TFMBartModel"),zxt.forEach(t),_Tr=r(Rqe," (mBART model)"),Rqe.forEach(t),uTr=i(D),WM=n(D,"LI",{});var Pqe=s(WM);PTe=n(Pqe,"STRONG",{});var Qxt=s(PTe);bTr=r(Qxt,"mobilebert"),Qxt.forEach(t),vTr=r(Pqe," \u2014 "),VU=n(Pqe,"A",{href:!0});var Wxt=s(VU);FTr=r(Wxt,"TFMobileBertModel"),Wxt.forEach(t),TTr=r(Pqe," (MobileBERT model)"),Pqe.forEach(t),MTr=i(D),HM=n(D,"LI",{});var Bqe=s(HM);BTe=n(Bqe,"STRONG",{});var Hxt=s(BTe);ETr=r(Hxt,"mpnet"),Hxt.forEach(t),CTr=r(Bqe," \u2014 "),XU=n(Bqe,"A",{href:!0});var Uxt=s(XU);wTr=r(Uxt,"TFMPNetModel"),Uxt.forEach(t),ATr=r(Bqe," (MPNet model)"),Bqe.forEach(t),LTr=i(D),UM=n(D,"LI",{});var Nqe=s(UM);NTe=n(Nqe,"STRONG",{});var Jxt=s(NTe);yTr=r(Jxt,"mt5"),Jxt.forEach(t),xTr=r(Nqe," \u2014 "),zU=n(Nqe,"A",{href:!0});var Yxt=s(zU);$Tr=r(Yxt,"TFMT5Model"),Yxt.forEach(t),kTr=r(Nqe," (MT5 model)"),Nqe.forEach(t),STr=i(D),JM=n(D,"LI",{});var Iqe=s(JM);ITe=n(Iqe,"STRONG",{});var Kxt=s(ITe);RTr=r(Kxt,"openai-gpt"),Kxt.forEach(t),PTr=r(Iqe," \u2014 "),QU=n(Iqe,"A",{href:!0});var Zxt=s(QU);BTr=r(Zxt,"TFOpenAIGPTModel"),Zxt.forEach(t),NTr=r(Iqe," (OpenAI GPT model)"),Iqe.forEach(t),ITr=i(D),YM=n(D,"LI",{});var qqe=s(YM);qTe=n(qqe,"STRONG",{});var e$t=s(qTe);qTr=r(e$t,"opt"),e$t.forEach(t),jTr=r(qqe," \u2014 "),WU=n(qqe,"A",{href:!0});var o$t=s(WU);DTr=r(o$t,"TFOPTModel"),o$t.forEach(t),GTr=r(qqe," (OPT model)"),qqe.forEach(t),OTr=i(D),KM=n(D,"LI",{});var jqe=s(KM);jTe=n(jqe,"STRONG",{});var r$t=s(jTe);VTr=r(r$t,"pegasus"),r$t.forEach(t),XTr=r(jqe," \u2014 "),HU=n(jqe,"A",{href:!0});var t$t=s(HU);zTr=r(t$t,"TFPegasusModel"),t$t.forEach(t),QTr=r(jqe," (Pegasus model)"),jqe.forEach(t),WTr=i(D),ZM=n(D,"LI",{});var Dqe=s(ZM);DTe=n(Dqe,"STRONG",{});var a$t=s(DTe);HTr=r(a$t,"regnet"),a$t.forEach(t),UTr=r(Dqe," \u2014 "),UU=n(Dqe,"A",{href:!0});var n$t=s(UU);JTr=r(n$t,"TFRegNetModel"),n$t.forEach(t),YTr=r(Dqe," (RegNet model)"),Dqe.forEach(t),KTr=i(D),e4=n(D,"LI",{});var Gqe=s(e4);GTe=n(Gqe,"STRONG",{});var s$t=s(GTe);ZTr=r(s$t,"rembert"),s$t.forEach(t),e8r=r(Gqe," \u2014 "),JU=n(Gqe,"A",{href:!0});var l$t=s(JU);o8r=r(l$t,"TFRemBertModel"),l$t.forEach(t),r8r=r(Gqe," (RemBERT model)"),Gqe.forEach(t),t8r=i(D),o4=n(D,"LI",{});var Oqe=s(o4);OTe=n(Oqe,"STRONG",{});var i$t=s(OTe);a8r=r(i$t,"resnet"),i$t.forEach(t),n8r=r(Oqe," \u2014 "),YU=n(Oqe,"A",{href:!0});var d$t=s(YU);s8r=r(d$t,"TFResNetModel"),d$t.forEach(t),l8r=r(Oqe," (ResNet model)"),Oqe.forEach(t),i8r=i(D),r4=n(D,"LI",{});var Vqe=s(r4);VTe=n(Vqe,"STRONG",{});var c$t=s(VTe);d8r=r(c$t,"roberta"),c$t.forEach(t),c8r=r(Vqe," \u2014 "),KU=n(Vqe,"A",{href:!0});var f$t=s(KU);f8r=r(f$t,"TFRobertaModel"),f$t.forEach(t),m8r=r(Vqe," (RoBERTa model)"),Vqe.forEach(t),g8r=i(D),t4=n(D,"LI",{});var Xqe=s(t4);XTe=n(Xqe,"STRONG",{});var m$t=s(XTe);h8r=r(m$t,"roformer"),m$t.forEach(t),p8r=r(Xqe," \u2014 "),ZU=n(Xqe,"A",{href:!0});var g$t=s(ZU);_8r=r(g$t,"TFRoFormerModel"),g$t.forEach(t),u8r=r(Xqe," (RoFormer model)"),Xqe.forEach(t),b8r=i(D),a4=n(D,"LI",{});var zqe=s(a4);zTe=n(zqe,"STRONG",{});var h$t=s(zTe);v8r=r(h$t,"speech_to_text"),h$t.forEach(t),F8r=r(zqe," \u2014 "),eJ=n(zqe,"A",{href:!0});var p$t=s(eJ);T8r=r(p$t,"TFSpeech2TextModel"),p$t.forEach(t),M8r=r(zqe," (Speech2Text model)"),zqe.forEach(t),E8r=i(D),n4=n(D,"LI",{});var Qqe=s(n4);QTe=n(Qqe,"STRONG",{});var _$t=s(QTe);C8r=r(_$t,"swin"),_$t.forEach(t),w8r=r(Qqe," \u2014 "),oJ=n(Qqe,"A",{href:!0});var u$t=s(oJ);A8r=r(u$t,"TFSwinModel"),u$t.forEach(t),L8r=r(Qqe," (Swin Transformer model)"),Qqe.forEach(t),y8r=i(D),s4=n(D,"LI",{});var Wqe=s(s4);WTe=n(Wqe,"STRONG",{});var b$t=s(WTe);x8r=r(b$t,"t5"),b$t.forEach(t),$8r=r(Wqe," \u2014 "),rJ=n(Wqe,"A",{href:!0});var v$t=s(rJ);k8r=r(v$t,"TFT5Model"),v$t.forEach(t),S8r=r(Wqe," (T5 model)"),Wqe.forEach(t),R8r=i(D),l4=n(D,"LI",{});var Hqe=s(l4);HTe=n(Hqe,"STRONG",{});var F$t=s(HTe);P8r=r(F$t,"tapas"),F$t.forEach(t),B8r=r(Hqe," \u2014 "),tJ=n(Hqe,"A",{href:!0});var T$t=s(tJ);N8r=r(T$t,"TFTapasModel"),T$t.forEach(t),I8r=r(Hqe," (TAPAS model)"),Hqe.forEach(t),q8r=i(D),i4=n(D,"LI",{});var Uqe=s(i4);UTe=n(Uqe,"STRONG",{});var M$t=s(UTe);j8r=r(M$t,"transfo-xl"),M$t.forEach(t),D8r=r(Uqe," \u2014 "),aJ=n(Uqe,"A",{href:!0});var E$t=s(aJ);G8r=r(E$t,"TFTransfoXLModel"),E$t.forEach(t),O8r=r(Uqe," (Transformer-XL model)"),Uqe.forEach(t),V8r=i(D),d4=n(D,"LI",{});var Jqe=s(d4);JTe=n(Jqe,"STRONG",{});var C$t=s(JTe);X8r=r(C$t,"vit"),C$t.forEach(t),z8r=r(Jqe," \u2014 "),nJ=n(Jqe,"A",{href:!0});var w$t=s(nJ);Q8r=r(w$t,"TFViTModel"),w$t.forEach(t),W8r=r(Jqe," (ViT model)"),Jqe.forEach(t),H8r=i(D),c4=n(D,"LI",{});var Yqe=s(c4);YTe=n(Yqe,"STRONG",{});var A$t=s(YTe);U8r=r(A$t,"vit_mae"),A$t.forEach(t),J8r=r(Yqe," \u2014 "),sJ=n(Yqe,"A",{href:!0});var L$t=s(sJ);Y8r=r(L$t,"TFViTMAEModel"),L$t.forEach(t),K8r=r(Yqe," (ViTMAE model)"),Yqe.forEach(t),Z8r=i(D),f4=n(D,"LI",{});var Kqe=s(f4);KTe=n(Kqe,"STRONG",{});var y$t=s(KTe);eMr=r(y$t,"wav2vec2"),y$t.forEach(t),oMr=r(Kqe," \u2014 "),lJ=n(Kqe,"A",{href:!0});var x$t=s(lJ);rMr=r(x$t,"TFWav2Vec2Model"),x$t.forEach(t),tMr=r(Kqe," (Wav2Vec2 model)"),Kqe.forEach(t),aMr=i(D),m4=n(D,"LI",{});var Zqe=s(m4);ZTe=n(Zqe,"STRONG",{});var $$t=s(ZTe);nMr=r($$t,"xlm"),$$t.forEach(t),sMr=r(Zqe," \u2014 "),iJ=n(Zqe,"A",{href:!0});var k$t=s(iJ);lMr=r(k$t,"TFXLMModel"),k$t.forEach(t),iMr=r(Zqe," (XLM model)"),Zqe.forEach(t),dMr=i(D),g4=n(D,"LI",{});var eje=s(g4);e8e=n(eje,"STRONG",{});var S$t=s(e8e);cMr=r(S$t,"xlm-roberta"),S$t.forEach(t),fMr=r(eje," \u2014 "),dJ=n(eje,"A",{href:!0});var R$t=s(dJ);mMr=r(R$t,"TFXLMRobertaModel"),R$t.forEach(t),gMr=r(eje," (XLM-RoBERTa model)"),eje.forEach(t),hMr=i(D),h4=n(D,"LI",{});var oje=s(h4);o8e=n(oje,"STRONG",{});var P$t=s(o8e);pMr=r(P$t,"xlnet"),P$t.forEach(t),_Mr=r(oje," \u2014 "),cJ=n(oje,"A",{href:!0});var B$t=s(cJ);uMr=r(B$t,"TFXLNetModel"),B$t.forEach(t),bMr=r(oje," (XLNet model)"),oje.forEach(t),D.forEach(t),vMr=i(kl),T(p4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),fze=i(f),cc=n(f,"H2",{class:!0});var vWe=s(cc);_4=n(vWe,"A",{id:!0,class:!0,href:!0});var N$t=s(_4);r8e=n(N$t,"SPAN",{});var I$t=s(r8e);T(J9.$$.fragment,I$t),I$t.forEach(t),N$t.forEach(t),FMr=i(vWe),t8e=n(vWe,"SPAN",{});var q$t=s(t8e);TMr=r(q$t,"TFAutoModelForPreTraining"),q$t.forEach(t),vWe.forEach(t),mze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(Y9.$$.fragment,Sl),MMr=i(Sl),fc=n(Sl,"P",{});var Ste=s(fc);EMr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fJ=n(Ste,"A",{href:!0});var j$t=s(fJ);CMr=r(j$t,"from_pretrained()"),j$t.forEach(t),wMr=r(Ste," class method or the "),mJ=n(Ste,"A",{href:!0});var D$t=s(mJ);AMr=r(D$t,"from_config()"),D$t.forEach(t),LMr=r(Ste,` class
method.`),Ste.forEach(t),yMr=i(Sl),K9=n(Sl,"P",{});var FWe=s(K9);xMr=r(FWe,"This class cannot be instantiated directly using "),a8e=n(FWe,"CODE",{});var G$t=s(a8e);$Mr=r(G$t,"__init__()"),G$t.forEach(t),kMr=r(FWe," (throws an error)."),FWe.forEach(t),SMr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var n7=s(Pt);T(Z9.$$.fragment,n7),RMr=i(n7),n8e=n(n7,"P",{});var O$t=s(n8e);PMr=r(O$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),O$t.forEach(t),BMr=i(n7),mc=n(n7,"P",{});var Rte=s(mc);NMr=r(Rte,`Note:
Loading a model from its configuration file does `),s8e=n(Rte,"STRONG",{});var V$t=s(s8e);IMr=r(V$t,"not"),V$t.forEach(t),qMr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(Rte,"A",{href:!0});var X$t=s(gJ);jMr=r(X$t,"from_pretrained()"),X$t.forEach(t),DMr=r(Rte," to load the model weights."),Rte.forEach(t),GMr=i(n7),T(u4.$$.fragment,n7),n7.forEach(t),OMr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(ex.$$.fragment,Rl),VMr=i(Rl),l8e=n(Rl,"P",{});var z$t=s(l8e);XMr=r(z$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z$t.forEach(t),zMr=i(Rl),ln=n(Rl,"P",{});var s7=s(ln);QMr=r(s7,"The model class to instantiate is selected based on the "),i8e=n(s7,"CODE",{});var Q$t=s(i8e);WMr=r(Q$t,"model_type"),Q$t.forEach(t),HMr=r(s7,` property of the config object (either
passed as an argument or loaded from `),d8e=n(s7,"CODE",{});var W$t=s(d8e);UMr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),JMr=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=n(s7,"CODE",{});var H$t=s(c8e);YMr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),KMr=r(s7,":"),s7.forEach(t),ZMr=i(Rl),se=n(Rl,"UL",{});var le=s(se);b4=n(le,"LI",{});var rje=s(b4);f8e=n(rje,"STRONG",{});var U$t=s(f8e);e4r=r(U$t,"albert"),U$t.forEach(t),o4r=r(rje," \u2014 "),hJ=n(rje,"A",{href:!0});var J$t=s(hJ);r4r=r(J$t,"TFAlbertForPreTraining"),J$t.forEach(t),t4r=r(rje," (ALBERT model)"),rje.forEach(t),a4r=i(le),v4=n(le,"LI",{});var tje=s(v4);m8e=n(tje,"STRONG",{});var Y$t=s(m8e);n4r=r(Y$t,"bart"),Y$t.forEach(t),s4r=r(tje," \u2014 "),pJ=n(tje,"A",{href:!0});var K$t=s(pJ);l4r=r(K$t,"TFBartForConditionalGeneration"),K$t.forEach(t),i4r=r(tje," (BART model)"),tje.forEach(t),d4r=i(le),F4=n(le,"LI",{});var aje=s(F4);g8e=n(aje,"STRONG",{});var Z$t=s(g8e);c4r=r(Z$t,"bert"),Z$t.forEach(t),f4r=r(aje," \u2014 "),_J=n(aje,"A",{href:!0});var ekt=s(_J);m4r=r(ekt,"TFBertForPreTraining"),ekt.forEach(t),g4r=r(aje," (BERT model)"),aje.forEach(t),h4r=i(le),T4=n(le,"LI",{});var nje=s(T4);h8e=n(nje,"STRONG",{});var okt=s(h8e);p4r=r(okt,"camembert"),okt.forEach(t),_4r=r(nje," \u2014 "),uJ=n(nje,"A",{href:!0});var rkt=s(uJ);u4r=r(rkt,"TFCamembertForMaskedLM"),rkt.forEach(t),b4r=r(nje," (CamemBERT model)"),nje.forEach(t),v4r=i(le),M4=n(le,"LI",{});var sje=s(M4);p8e=n(sje,"STRONG",{});var tkt=s(p8e);F4r=r(tkt,"ctrl"),tkt.forEach(t),T4r=r(sje," \u2014 "),bJ=n(sje,"A",{href:!0});var akt=s(bJ);M4r=r(akt,"TFCTRLLMHeadModel"),akt.forEach(t),E4r=r(sje," (CTRL model)"),sje.forEach(t),C4r=i(le),E4=n(le,"LI",{});var lje=s(E4);_8e=n(lje,"STRONG",{});var nkt=s(_8e);w4r=r(nkt,"distilbert"),nkt.forEach(t),A4r=r(lje," \u2014 "),vJ=n(lje,"A",{href:!0});var skt=s(vJ);L4r=r(skt,"TFDistilBertForMaskedLM"),skt.forEach(t),y4r=r(lje," (DistilBERT model)"),lje.forEach(t),x4r=i(le),C4=n(le,"LI",{});var ije=s(C4);u8e=n(ije,"STRONG",{});var lkt=s(u8e);$4r=r(lkt,"electra"),lkt.forEach(t),k4r=r(ije," \u2014 "),FJ=n(ije,"A",{href:!0});var ikt=s(FJ);S4r=r(ikt,"TFElectraForPreTraining"),ikt.forEach(t),R4r=r(ije," (ELECTRA model)"),ije.forEach(t),P4r=i(le),w4=n(le,"LI",{});var dje=s(w4);b8e=n(dje,"STRONG",{});var dkt=s(b8e);B4r=r(dkt,"flaubert"),dkt.forEach(t),N4r=r(dje," \u2014 "),TJ=n(dje,"A",{href:!0});var ckt=s(TJ);I4r=r(ckt,"TFFlaubertWithLMHeadModel"),ckt.forEach(t),q4r=r(dje," (FlauBERT model)"),dje.forEach(t),j4r=i(le),A4=n(le,"LI",{});var cje=s(A4);v8e=n(cje,"STRONG",{});var fkt=s(v8e);D4r=r(fkt,"funnel"),fkt.forEach(t),G4r=r(cje," \u2014 "),MJ=n(cje,"A",{href:!0});var mkt=s(MJ);O4r=r(mkt,"TFFunnelForPreTraining"),mkt.forEach(t),V4r=r(cje," (Funnel Transformer model)"),cje.forEach(t),X4r=i(le),L4=n(le,"LI",{});var fje=s(L4);F8e=n(fje,"STRONG",{});var gkt=s(F8e);z4r=r(gkt,"gpt2"),gkt.forEach(t),Q4r=r(fje," \u2014 "),EJ=n(fje,"A",{href:!0});var hkt=s(EJ);W4r=r(hkt,"TFGPT2LMHeadModel"),hkt.forEach(t),H4r=r(fje," (OpenAI GPT-2 model)"),fje.forEach(t),U4r=i(le),y4=n(le,"LI",{});var mje=s(y4);T8e=n(mje,"STRONG",{});var pkt=s(T8e);J4r=r(pkt,"layoutlm"),pkt.forEach(t),Y4r=r(mje," \u2014 "),CJ=n(mje,"A",{href:!0});var _kt=s(CJ);K4r=r(_kt,"TFLayoutLMForMaskedLM"),_kt.forEach(t),Z4r=r(mje," (LayoutLM model)"),mje.forEach(t),eEr=i(le),x4=n(le,"LI",{});var gje=s(x4);M8e=n(gje,"STRONG",{});var ukt=s(M8e);oEr=r(ukt,"lxmert"),ukt.forEach(t),rEr=r(gje," \u2014 "),wJ=n(gje,"A",{href:!0});var bkt=s(wJ);tEr=r(bkt,"TFLxmertForPreTraining"),bkt.forEach(t),aEr=r(gje," (LXMERT model)"),gje.forEach(t),nEr=i(le),$4=n(le,"LI",{});var hje=s($4);E8e=n(hje,"STRONG",{});var vkt=s(E8e);sEr=r(vkt,"mobilebert"),vkt.forEach(t),lEr=r(hje," \u2014 "),AJ=n(hje,"A",{href:!0});var Fkt=s(AJ);iEr=r(Fkt,"TFMobileBertForPreTraining"),Fkt.forEach(t),dEr=r(hje," (MobileBERT model)"),hje.forEach(t),cEr=i(le),k4=n(le,"LI",{});var pje=s(k4);C8e=n(pje,"STRONG",{});var Tkt=s(C8e);fEr=r(Tkt,"mpnet"),Tkt.forEach(t),mEr=r(pje," \u2014 "),LJ=n(pje,"A",{href:!0});var Mkt=s(LJ);gEr=r(Mkt,"TFMPNetForMaskedLM"),Mkt.forEach(t),hEr=r(pje," (MPNet model)"),pje.forEach(t),pEr=i(le),S4=n(le,"LI",{});var _je=s(S4);w8e=n(_je,"STRONG",{});var Ekt=s(w8e);_Er=r(Ekt,"openai-gpt"),Ekt.forEach(t),uEr=r(_je," \u2014 "),yJ=n(_je,"A",{href:!0});var Ckt=s(yJ);bEr=r(Ckt,"TFOpenAIGPTLMHeadModel"),Ckt.forEach(t),vEr=r(_je," (OpenAI GPT model)"),_je.forEach(t),FEr=i(le),R4=n(le,"LI",{});var uje=s(R4);A8e=n(uje,"STRONG",{});var wkt=s(A8e);TEr=r(wkt,"roberta"),wkt.forEach(t),MEr=r(uje," \u2014 "),xJ=n(uje,"A",{href:!0});var Akt=s(xJ);EEr=r(Akt,"TFRobertaForMaskedLM"),Akt.forEach(t),CEr=r(uje," (RoBERTa model)"),uje.forEach(t),wEr=i(le),P4=n(le,"LI",{});var bje=s(P4);L8e=n(bje,"STRONG",{});var Lkt=s(L8e);AEr=r(Lkt,"t5"),Lkt.forEach(t),LEr=r(bje," \u2014 "),$J=n(bje,"A",{href:!0});var ykt=s($J);yEr=r(ykt,"TFT5ForConditionalGeneration"),ykt.forEach(t),xEr=r(bje," (T5 model)"),bje.forEach(t),$Er=i(le),B4=n(le,"LI",{});var vje=s(B4);y8e=n(vje,"STRONG",{});var xkt=s(y8e);kEr=r(xkt,"tapas"),xkt.forEach(t),SEr=r(vje," \u2014 "),kJ=n(vje,"A",{href:!0});var $kt=s(kJ);REr=r($kt,"TFTapasForMaskedLM"),$kt.forEach(t),PEr=r(vje," (TAPAS model)"),vje.forEach(t),BEr=i(le),N4=n(le,"LI",{});var Fje=s(N4);x8e=n(Fje,"STRONG",{});var kkt=s(x8e);NEr=r(kkt,"transfo-xl"),kkt.forEach(t),IEr=r(Fje," \u2014 "),SJ=n(Fje,"A",{href:!0});var Skt=s(SJ);qEr=r(Skt,"TFTransfoXLLMHeadModel"),Skt.forEach(t),jEr=r(Fje," (Transformer-XL model)"),Fje.forEach(t),DEr=i(le),I4=n(le,"LI",{});var Tje=s(I4);$8e=n(Tje,"STRONG",{});var Rkt=s($8e);GEr=r(Rkt,"vit_mae"),Rkt.forEach(t),OEr=r(Tje," \u2014 "),RJ=n(Tje,"A",{href:!0});var Pkt=s(RJ);VEr=r(Pkt,"TFViTMAEForPreTraining"),Pkt.forEach(t),XEr=r(Tje," (ViTMAE model)"),Tje.forEach(t),zEr=i(le),q4=n(le,"LI",{});var Mje=s(q4);k8e=n(Mje,"STRONG",{});var Bkt=s(k8e);QEr=r(Bkt,"xlm"),Bkt.forEach(t),WEr=r(Mje," \u2014 "),PJ=n(Mje,"A",{href:!0});var Nkt=s(PJ);HEr=r(Nkt,"TFXLMWithLMHeadModel"),Nkt.forEach(t),UEr=r(Mje," (XLM model)"),Mje.forEach(t),JEr=i(le),j4=n(le,"LI",{});var Eje=s(j4);S8e=n(Eje,"STRONG",{});var Ikt=s(S8e);YEr=r(Ikt,"xlm-roberta"),Ikt.forEach(t),KEr=r(Eje," \u2014 "),BJ=n(Eje,"A",{href:!0});var qkt=s(BJ);ZEr=r(qkt,"TFXLMRobertaForMaskedLM"),qkt.forEach(t),eCr=r(Eje," (XLM-RoBERTa model)"),Eje.forEach(t),oCr=i(le),D4=n(le,"LI",{});var Cje=s(D4);R8e=n(Cje,"STRONG",{});var jkt=s(R8e);rCr=r(jkt,"xlnet"),jkt.forEach(t),tCr=r(Cje," \u2014 "),NJ=n(Cje,"A",{href:!0});var Dkt=s(NJ);aCr=r(Dkt,"TFXLNetLMHeadModel"),Dkt.forEach(t),nCr=r(Cje," (XLNet model)"),Cje.forEach(t),le.forEach(t),sCr=i(Rl),T(G4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),gze=i(f),gc=n(f,"H2",{class:!0});var TWe=s(gc);O4=n(TWe,"A",{id:!0,class:!0,href:!0});var Gkt=s(O4);P8e=n(Gkt,"SPAN",{});var Okt=s(P8e);T(ox.$$.fragment,Okt),Okt.forEach(t),Gkt.forEach(t),lCr=i(TWe),B8e=n(TWe,"SPAN",{});var Vkt=s(B8e);iCr=r(Vkt,"TFAutoModelForCausalLM"),Vkt.forEach(t),TWe.forEach(t),hze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(rx.$$.fragment,Pl),dCr=i(Pl),hc=n(Pl,"P",{});var Pte=s(hc);cCr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IJ=n(Pte,"A",{href:!0});var Xkt=s(IJ);fCr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),mCr=r(Pte," class method or the "),qJ=n(Pte,"A",{href:!0});var zkt=s(qJ);gCr=r(zkt,"from_config()"),zkt.forEach(t),hCr=r(Pte,` class
method.`),Pte.forEach(t),pCr=i(Pl),tx=n(Pl,"P",{});var MWe=s(tx);_Cr=r(MWe,"This class cannot be instantiated directly using "),N8e=n(MWe,"CODE",{});var Qkt=s(N8e);uCr=r(Qkt,"__init__()"),Qkt.forEach(t),bCr=r(MWe," (throws an error)."),MWe.forEach(t),vCr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var l7=s(Bt);T(ax.$$.fragment,l7),FCr=i(l7),I8e=n(l7,"P",{});var Wkt=s(I8e);TCr=r(Wkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wkt.forEach(t),MCr=i(l7),pc=n(l7,"P",{});var Bte=s(pc);ECr=r(Bte,`Note:
Loading a model from its configuration file does `),q8e=n(Bte,"STRONG",{});var Hkt=s(q8e);CCr=r(Hkt,"not"),Hkt.forEach(t),wCr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(Bte,"A",{href:!0});var Ukt=s(jJ);ACr=r(Ukt,"from_pretrained()"),Ukt.forEach(t),LCr=r(Bte," to load the model weights."),Bte.forEach(t),yCr=i(l7),T(V4.$$.fragment,l7),l7.forEach(t),xCr=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(nx.$$.fragment,Bl),$Cr=i(Bl),j8e=n(Bl,"P",{});var Jkt=s(j8e);kCr=r(Jkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jkt.forEach(t),SCr=i(Bl),dn=n(Bl,"P",{});var i7=s(dn);RCr=r(i7,"The model class to instantiate is selected based on the "),D8e=n(i7,"CODE",{});var Ykt=s(D8e);PCr=r(Ykt,"model_type"),Ykt.forEach(t),BCr=r(i7,` property of the config object (either
passed as an argument or loaded from `),G8e=n(i7,"CODE",{});var Kkt=s(G8e);NCr=r(Kkt,"pretrained_model_name_or_path"),Kkt.forEach(t),ICr=r(i7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=n(i7,"CODE",{});var Zkt=s(O8e);qCr=r(Zkt,"pretrained_model_name_or_path"),Zkt.forEach(t),jCr=r(i7,":"),i7.forEach(t),DCr=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);X4=n(Ce,"LI",{});var wje=s(X4);V8e=n(wje,"STRONG",{});var eSt=s(V8e);GCr=r(eSt,"bert"),eSt.forEach(t),OCr=r(wje," \u2014 "),DJ=n(wje,"A",{href:!0});var oSt=s(DJ);VCr=r(oSt,"TFBertLMHeadModel"),oSt.forEach(t),XCr=r(wje," (BERT model)"),wje.forEach(t),zCr=i(Ce),z4=n(Ce,"LI",{});var Aje=s(z4);X8e=n(Aje,"STRONG",{});var rSt=s(X8e);QCr=r(rSt,"camembert"),rSt.forEach(t),WCr=r(Aje," \u2014 "),GJ=n(Aje,"A",{href:!0});var tSt=s(GJ);HCr=r(tSt,"TFCamembertForCausalLM"),tSt.forEach(t),UCr=r(Aje," (CamemBERT model)"),Aje.forEach(t),JCr=i(Ce),Q4=n(Ce,"LI",{});var Lje=s(Q4);z8e=n(Lje,"STRONG",{});var aSt=s(z8e);YCr=r(aSt,"ctrl"),aSt.forEach(t),KCr=r(Lje," \u2014 "),OJ=n(Lje,"A",{href:!0});var nSt=s(OJ);ZCr=r(nSt,"TFCTRLLMHeadModel"),nSt.forEach(t),e3r=r(Lje," (CTRL model)"),Lje.forEach(t),o3r=i(Ce),W4=n(Ce,"LI",{});var yje=s(W4);Q8e=n(yje,"STRONG",{});var sSt=s(Q8e);r3r=r(sSt,"gpt2"),sSt.forEach(t),t3r=r(yje," \u2014 "),VJ=n(yje,"A",{href:!0});var lSt=s(VJ);a3r=r(lSt,"TFGPT2LMHeadModel"),lSt.forEach(t),n3r=r(yje," (OpenAI GPT-2 model)"),yje.forEach(t),s3r=i(Ce),H4=n(Ce,"LI",{});var xje=s(H4);W8e=n(xje,"STRONG",{});var iSt=s(W8e);l3r=r(iSt,"gptj"),iSt.forEach(t),i3r=r(xje," \u2014 "),XJ=n(xje,"A",{href:!0});var dSt=s(XJ);d3r=r(dSt,"TFGPTJForCausalLM"),dSt.forEach(t),c3r=r(xje," (GPT-J model)"),xje.forEach(t),f3r=i(Ce),U4=n(Ce,"LI",{});var $je=s(U4);H8e=n($je,"STRONG",{});var cSt=s(H8e);m3r=r(cSt,"openai-gpt"),cSt.forEach(t),g3r=r($je," \u2014 "),zJ=n($je,"A",{href:!0});var fSt=s(zJ);h3r=r(fSt,"TFOpenAIGPTLMHeadModel"),fSt.forEach(t),p3r=r($je," (OpenAI GPT model)"),$je.forEach(t),_3r=i(Ce),J4=n(Ce,"LI",{});var kje=s(J4);U8e=n(kje,"STRONG",{});var mSt=s(U8e);u3r=r(mSt,"opt"),mSt.forEach(t),b3r=r(kje," \u2014 "),QJ=n(kje,"A",{href:!0});var gSt=s(QJ);v3r=r(gSt,"TFOPTForCausalLM"),gSt.forEach(t),F3r=r(kje," (OPT model)"),kje.forEach(t),T3r=i(Ce),Y4=n(Ce,"LI",{});var Sje=s(Y4);J8e=n(Sje,"STRONG",{});var hSt=s(J8e);M3r=r(hSt,"rembert"),hSt.forEach(t),E3r=r(Sje," \u2014 "),WJ=n(Sje,"A",{href:!0});var pSt=s(WJ);C3r=r(pSt,"TFRemBertForCausalLM"),pSt.forEach(t),w3r=r(Sje," (RemBERT model)"),Sje.forEach(t),A3r=i(Ce),K4=n(Ce,"LI",{});var Rje=s(K4);Y8e=n(Rje,"STRONG",{});var _St=s(Y8e);L3r=r(_St,"roberta"),_St.forEach(t),y3r=r(Rje," \u2014 "),HJ=n(Rje,"A",{href:!0});var uSt=s(HJ);x3r=r(uSt,"TFRobertaForCausalLM"),uSt.forEach(t),$3r=r(Rje," (RoBERTa model)"),Rje.forEach(t),k3r=i(Ce),Z4=n(Ce,"LI",{});var Pje=s(Z4);K8e=n(Pje,"STRONG",{});var bSt=s(K8e);S3r=r(bSt,"roformer"),bSt.forEach(t),R3r=r(Pje," \u2014 "),UJ=n(Pje,"A",{href:!0});var vSt=s(UJ);P3r=r(vSt,"TFRoFormerForCausalLM"),vSt.forEach(t),B3r=r(Pje," (RoFormer model)"),Pje.forEach(t),N3r=i(Ce),eE=n(Ce,"LI",{});var Bje=s(eE);Z8e=n(Bje,"STRONG",{});var FSt=s(Z8e);I3r=r(FSt,"transfo-xl"),FSt.forEach(t),q3r=r(Bje," \u2014 "),JJ=n(Bje,"A",{href:!0});var TSt=s(JJ);j3r=r(TSt,"TFTransfoXLLMHeadModel"),TSt.forEach(t),D3r=r(Bje," (Transformer-XL model)"),Bje.forEach(t),G3r=i(Ce),oE=n(Ce,"LI",{});var Nje=s(oE);eMe=n(Nje,"STRONG",{});var MSt=s(eMe);O3r=r(MSt,"xlm"),MSt.forEach(t),V3r=r(Nje," \u2014 "),YJ=n(Nje,"A",{href:!0});var ESt=s(YJ);X3r=r(ESt,"TFXLMWithLMHeadModel"),ESt.forEach(t),z3r=r(Nje," (XLM model)"),Nje.forEach(t),Q3r=i(Ce),rE=n(Ce,"LI",{});var Ije=s(rE);oMe=n(Ije,"STRONG",{});var CSt=s(oMe);W3r=r(CSt,"xlnet"),CSt.forEach(t),H3r=r(Ije," \u2014 "),KJ=n(Ije,"A",{href:!0});var wSt=s(KJ);U3r=r(wSt,"TFXLNetLMHeadModel"),wSt.forEach(t),J3r=r(Ije," (XLNet model)"),Ije.forEach(t),Ce.forEach(t),Y3r=i(Bl),T(tE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),pze=i(f),_c=n(f,"H2",{class:!0});var EWe=s(_c);aE=n(EWe,"A",{id:!0,class:!0,href:!0});var ASt=s(aE);rMe=n(ASt,"SPAN",{});var LSt=s(rMe);T(sx.$$.fragment,LSt),LSt.forEach(t),ASt.forEach(t),K3r=i(EWe),tMe=n(EWe,"SPAN",{});var ySt=s(tMe);Z3r=r(ySt,"TFAutoModelForImageClassification"),ySt.forEach(t),EWe.forEach(t),_ze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(lx.$$.fragment,Nl),e5r=i(Nl),uc=n(Nl,"P",{});var Nte=s(uc);o5r=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZJ=n(Nte,"A",{href:!0});var xSt=s(ZJ);r5r=r(xSt,"from_pretrained()"),xSt.forEach(t),t5r=r(Nte," class method or the "),eY=n(Nte,"A",{href:!0});var $St=s(eY);a5r=r($St,"from_config()"),$St.forEach(t),n5r=r(Nte,` class
method.`),Nte.forEach(t),s5r=i(Nl),ix=n(Nl,"P",{});var CWe=s(ix);l5r=r(CWe,"This class cannot be instantiated directly using "),aMe=n(CWe,"CODE",{});var kSt=s(aMe);i5r=r(kSt,"__init__()"),kSt.forEach(t),d5r=r(CWe," (throws an error)."),CWe.forEach(t),c5r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var d7=s(Nt);T(dx.$$.fragment,d7),f5r=i(d7),nMe=n(d7,"P",{});var SSt=s(nMe);m5r=r(SSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SSt.forEach(t),g5r=i(d7),bc=n(d7,"P",{});var Ite=s(bc);h5r=r(Ite,`Note:
Loading a model from its configuration file does `),sMe=n(Ite,"STRONG",{});var RSt=s(sMe);p5r=r(RSt,"not"),RSt.forEach(t),_5r=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(Ite,"A",{href:!0});var PSt=s(oY);u5r=r(PSt,"from_pretrained()"),PSt.forEach(t),b5r=r(Ite," to load the model weights."),Ite.forEach(t),v5r=i(d7),T(nE.$$.fragment,d7),d7.forEach(t),F5r=i(Nl),Sr=n(Nl,"DIV",{class:!0});var Il=s(Sr);T(cx.$$.fragment,Il),T5r=i(Il),lMe=n(Il,"P",{});var BSt=s(lMe);M5r=r(BSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BSt.forEach(t),E5r=i(Il),cn=n(Il,"P",{});var c7=s(cn);C5r=r(c7,"The model class to instantiate is selected based on the "),iMe=n(c7,"CODE",{});var NSt=s(iMe);w5r=r(NSt,"model_type"),NSt.forEach(t),A5r=r(c7,` property of the config object (either
passed as an argument or loaded from `),dMe=n(c7,"CODE",{});var ISt=s(dMe);L5r=r(ISt,"pretrained_model_name_or_path"),ISt.forEach(t),y5r=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(c7,"CODE",{});var qSt=s(cMe);x5r=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),$5r=r(c7,":"),c7.forEach(t),k5r=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);sE=n(ot,"LI",{});var qje=s(sE);fMe=n(qje,"STRONG",{});var jSt=s(fMe);S5r=r(jSt,"convnext"),jSt.forEach(t),R5r=r(qje," \u2014 "),rY=n(qje,"A",{href:!0});var DSt=s(rY);P5r=r(DSt,"TFConvNextForImageClassification"),DSt.forEach(t),B5r=r(qje," (ConvNeXT model)"),qje.forEach(t),N5r=i(ot),lE=n(ot,"LI",{});var jje=s(lE);mMe=n(jje,"STRONG",{});var GSt=s(mMe);I5r=r(GSt,"data2vec-vision"),GSt.forEach(t),q5r=r(jje," \u2014 "),tY=n(jje,"A",{href:!0});var OSt=s(tY);j5r=r(OSt,"TFData2VecVisionForImageClassification"),OSt.forEach(t),D5r=r(jje," (Data2VecVision model)"),jje.forEach(t),G5r=i(ot),Ks=n(ot,"LI",{});var NS=s(Ks);gMe=n(NS,"STRONG",{});var VSt=s(gMe);O5r=r(VSt,"deit"),VSt.forEach(t),V5r=r(NS," \u2014 "),aY=n(NS,"A",{href:!0});var XSt=s(aY);X5r=r(XSt,"TFDeiTForImageClassification"),XSt.forEach(t),z5r=r(NS," or "),nY=n(NS,"A",{href:!0});var zSt=s(nY);Q5r=r(zSt,"TFDeiTForImageClassificationWithTeacher"),zSt.forEach(t),W5r=r(NS," (DeiT model)"),NS.forEach(t),H5r=i(ot),iE=n(ot,"LI",{});var Dje=s(iE);hMe=n(Dje,"STRONG",{});var QSt=s(hMe);U5r=r(QSt,"regnet"),QSt.forEach(t),J5r=r(Dje," \u2014 "),sY=n(Dje,"A",{href:!0});var WSt=s(sY);Y5r=r(WSt,"TFRegNetForImageClassification"),WSt.forEach(t),K5r=r(Dje," (RegNet model)"),Dje.forEach(t),Z5r=i(ot),dE=n(ot,"LI",{});var Gje=s(dE);pMe=n(Gje,"STRONG",{});var HSt=s(pMe);e0r=r(HSt,"resnet"),HSt.forEach(t),o0r=r(Gje," \u2014 "),lY=n(Gje,"A",{href:!0});var USt=s(lY);r0r=r(USt,"TFResNetForImageClassification"),USt.forEach(t),t0r=r(Gje," (ResNet model)"),Gje.forEach(t),a0r=i(ot),cE=n(ot,"LI",{});var Oje=s(cE);_Me=n(Oje,"STRONG",{});var JSt=s(_Me);n0r=r(JSt,"swin"),JSt.forEach(t),s0r=r(Oje," \u2014 "),iY=n(Oje,"A",{href:!0});var YSt=s(iY);l0r=r(YSt,"TFSwinForImageClassification"),YSt.forEach(t),i0r=r(Oje," (Swin Transformer model)"),Oje.forEach(t),d0r=i(ot),fE=n(ot,"LI",{});var Vje=s(fE);uMe=n(Vje,"STRONG",{});var KSt=s(uMe);c0r=r(KSt,"vit"),KSt.forEach(t),f0r=r(Vje," \u2014 "),dY=n(Vje,"A",{href:!0});var ZSt=s(dY);m0r=r(ZSt,"TFViTForImageClassification"),ZSt.forEach(t),g0r=r(Vje," (ViT model)"),Vje.forEach(t),ot.forEach(t),h0r=i(Il),T(mE.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),uze=i(f),vc=n(f,"H2",{class:!0});var wWe=s(vc);gE=n(wWe,"A",{id:!0,class:!0,href:!0});var eRt=s(gE);bMe=n(eRt,"SPAN",{});var oRt=s(bMe);T(fx.$$.fragment,oRt),oRt.forEach(t),eRt.forEach(t),p0r=i(wWe),vMe=n(wWe,"SPAN",{});var rRt=s(vMe);_0r=r(rRt,"TFAutoModelForMaskedLM"),rRt.forEach(t),wWe.forEach(t),bze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(mx.$$.fragment,ql),u0r=i(ql),Fc=n(ql,"P",{});var qte=s(Fc);b0r=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=n(qte,"A",{href:!0});var tRt=s(cY);v0r=r(tRt,"from_pretrained()"),tRt.forEach(t),F0r=r(qte," class method or the "),fY=n(qte,"A",{href:!0});var aRt=s(fY);T0r=r(aRt,"from_config()"),aRt.forEach(t),M0r=r(qte,` class
method.`),qte.forEach(t),E0r=i(ql),gx=n(ql,"P",{});var AWe=s(gx);C0r=r(AWe,"This class cannot be instantiated directly using "),FMe=n(AWe,"CODE",{});var nRt=s(FMe);w0r=r(nRt,"__init__()"),nRt.forEach(t),A0r=r(AWe," (throws an error)."),AWe.forEach(t),L0r=i(ql),It=n(ql,"DIV",{class:!0});var f7=s(It);T(hx.$$.fragment,f7),y0r=i(f7),TMe=n(f7,"P",{});var sRt=s(TMe);x0r=r(sRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sRt.forEach(t),$0r=i(f7),Tc=n(f7,"P",{});var jte=s(Tc);k0r=r(jte,`Note:
Loading a model from its configuration file does `),MMe=n(jte,"STRONG",{});var lRt=s(MMe);S0r=r(lRt,"not"),lRt.forEach(t),R0r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(jte,"A",{href:!0});var iRt=s(mY);P0r=r(iRt,"from_pretrained()"),iRt.forEach(t),B0r=r(jte," to load the model weights."),jte.forEach(t),N0r=i(f7),T(hE.$$.fragment,f7),f7.forEach(t),I0r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(px.$$.fragment,jl),q0r=i(jl),EMe=n(jl,"P",{});var dRt=s(EMe);j0r=r(dRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dRt.forEach(t),D0r=i(jl),fn=n(jl,"P",{});var m7=s(fn);G0r=r(m7,"The model class to instantiate is selected based on the "),CMe=n(m7,"CODE",{});var cRt=s(CMe);O0r=r(cRt,"model_type"),cRt.forEach(t),V0r=r(m7,` property of the config object (either
passed as an argument or loaded from `),wMe=n(m7,"CODE",{});var fRt=s(wMe);X0r=r(fRt,"pretrained_model_name_or_path"),fRt.forEach(t),z0r=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(m7,"CODE",{});var mRt=s(AMe);Q0r=r(mRt,"pretrained_model_name_or_path"),mRt.forEach(t),W0r=r(m7,":"),m7.forEach(t),H0r=i(jl),ie=n(jl,"UL",{});var fe=s(ie);pE=n(fe,"LI",{});var Xje=s(pE);LMe=n(Xje,"STRONG",{});var gRt=s(LMe);U0r=r(gRt,"albert"),gRt.forEach(t),J0r=r(Xje," \u2014 "),gY=n(Xje,"A",{href:!0});var hRt=s(gY);Y0r=r(hRt,"TFAlbertForMaskedLM"),hRt.forEach(t),K0r=r(Xje," (ALBERT model)"),Xje.forEach(t),Z0r=i(fe),_E=n(fe,"LI",{});var zje=s(_E);yMe=n(zje,"STRONG",{});var pRt=s(yMe);ewr=r(pRt,"bert"),pRt.forEach(t),owr=r(zje," \u2014 "),hY=n(zje,"A",{href:!0});var _Rt=s(hY);rwr=r(_Rt,"TFBertForMaskedLM"),_Rt.forEach(t),twr=r(zje," (BERT model)"),zje.forEach(t),awr=i(fe),uE=n(fe,"LI",{});var Qje=s(uE);xMe=n(Qje,"STRONG",{});var uRt=s(xMe);nwr=r(uRt,"camembert"),uRt.forEach(t),swr=r(Qje," \u2014 "),pY=n(Qje,"A",{href:!0});var bRt=s(pY);lwr=r(bRt,"TFCamembertForMaskedLM"),bRt.forEach(t),iwr=r(Qje," (CamemBERT model)"),Qje.forEach(t),dwr=i(fe),bE=n(fe,"LI",{});var Wje=s(bE);$Me=n(Wje,"STRONG",{});var vRt=s($Me);cwr=r(vRt,"convbert"),vRt.forEach(t),fwr=r(Wje," \u2014 "),_Y=n(Wje,"A",{href:!0});var FRt=s(_Y);mwr=r(FRt,"TFConvBertForMaskedLM"),FRt.forEach(t),gwr=r(Wje," (ConvBERT model)"),Wje.forEach(t),hwr=i(fe),vE=n(fe,"LI",{});var Hje=s(vE);kMe=n(Hje,"STRONG",{});var TRt=s(kMe);pwr=r(TRt,"deberta"),TRt.forEach(t),_wr=r(Hje," \u2014 "),uY=n(Hje,"A",{href:!0});var MRt=s(uY);uwr=r(MRt,"TFDebertaForMaskedLM"),MRt.forEach(t),bwr=r(Hje," (DeBERTa model)"),Hje.forEach(t),vwr=i(fe),FE=n(fe,"LI",{});var Uje=s(FE);SMe=n(Uje,"STRONG",{});var ERt=s(SMe);Fwr=r(ERt,"deberta-v2"),ERt.forEach(t),Twr=r(Uje," \u2014 "),bY=n(Uje,"A",{href:!0});var CRt=s(bY);Mwr=r(CRt,"TFDebertaV2ForMaskedLM"),CRt.forEach(t),Ewr=r(Uje," (DeBERTa-v2 model)"),Uje.forEach(t),Cwr=i(fe),TE=n(fe,"LI",{});var Jje=s(TE);RMe=n(Jje,"STRONG",{});var wRt=s(RMe);wwr=r(wRt,"distilbert"),wRt.forEach(t),Awr=r(Jje," \u2014 "),vY=n(Jje,"A",{href:!0});var ARt=s(vY);Lwr=r(ARt,"TFDistilBertForMaskedLM"),ARt.forEach(t),ywr=r(Jje," (DistilBERT model)"),Jje.forEach(t),xwr=i(fe),ME=n(fe,"LI",{});var Yje=s(ME);PMe=n(Yje,"STRONG",{});var LRt=s(PMe);$wr=r(LRt,"electra"),LRt.forEach(t),kwr=r(Yje," \u2014 "),FY=n(Yje,"A",{href:!0});var yRt=s(FY);Swr=r(yRt,"TFElectraForMaskedLM"),yRt.forEach(t),Rwr=r(Yje," (ELECTRA model)"),Yje.forEach(t),Pwr=i(fe),EE=n(fe,"LI",{});var Kje=s(EE);BMe=n(Kje,"STRONG",{});var xRt=s(BMe);Bwr=r(xRt,"flaubert"),xRt.forEach(t),Nwr=r(Kje," \u2014 "),TY=n(Kje,"A",{href:!0});var $Rt=s(TY);Iwr=r($Rt,"TFFlaubertWithLMHeadModel"),$Rt.forEach(t),qwr=r(Kje," (FlauBERT model)"),Kje.forEach(t),jwr=i(fe),CE=n(fe,"LI",{});var Zje=s(CE);NMe=n(Zje,"STRONG",{});var kRt=s(NMe);Dwr=r(kRt,"funnel"),kRt.forEach(t),Gwr=r(Zje," \u2014 "),MY=n(Zje,"A",{href:!0});var SRt=s(MY);Owr=r(SRt,"TFFunnelForMaskedLM"),SRt.forEach(t),Vwr=r(Zje," (Funnel Transformer model)"),Zje.forEach(t),Xwr=i(fe),wE=n(fe,"LI",{});var eDe=s(wE);IMe=n(eDe,"STRONG",{});var RRt=s(IMe);zwr=r(RRt,"layoutlm"),RRt.forEach(t),Qwr=r(eDe," \u2014 "),EY=n(eDe,"A",{href:!0});var PRt=s(EY);Wwr=r(PRt,"TFLayoutLMForMaskedLM"),PRt.forEach(t),Hwr=r(eDe," (LayoutLM model)"),eDe.forEach(t),Uwr=i(fe),AE=n(fe,"LI",{});var oDe=s(AE);qMe=n(oDe,"STRONG",{});var BRt=s(qMe);Jwr=r(BRt,"longformer"),BRt.forEach(t),Ywr=r(oDe," \u2014 "),CY=n(oDe,"A",{href:!0});var NRt=s(CY);Kwr=r(NRt,"TFLongformerForMaskedLM"),NRt.forEach(t),Zwr=r(oDe," (Longformer model)"),oDe.forEach(t),eAr=i(fe),LE=n(fe,"LI",{});var rDe=s(LE);jMe=n(rDe,"STRONG",{});var IRt=s(jMe);oAr=r(IRt,"mobilebert"),IRt.forEach(t),rAr=r(rDe," \u2014 "),wY=n(rDe,"A",{href:!0});var qRt=s(wY);tAr=r(qRt,"TFMobileBertForMaskedLM"),qRt.forEach(t),aAr=r(rDe," (MobileBERT model)"),rDe.forEach(t),nAr=i(fe),yE=n(fe,"LI",{});var tDe=s(yE);DMe=n(tDe,"STRONG",{});var jRt=s(DMe);sAr=r(jRt,"mpnet"),jRt.forEach(t),lAr=r(tDe," \u2014 "),AY=n(tDe,"A",{href:!0});var DRt=s(AY);iAr=r(DRt,"TFMPNetForMaskedLM"),DRt.forEach(t),dAr=r(tDe," (MPNet model)"),tDe.forEach(t),cAr=i(fe),xE=n(fe,"LI",{});var aDe=s(xE);GMe=n(aDe,"STRONG",{});var GRt=s(GMe);fAr=r(GRt,"rembert"),GRt.forEach(t),mAr=r(aDe," \u2014 "),LY=n(aDe,"A",{href:!0});var ORt=s(LY);gAr=r(ORt,"TFRemBertForMaskedLM"),ORt.forEach(t),hAr=r(aDe," (RemBERT model)"),aDe.forEach(t),pAr=i(fe),$E=n(fe,"LI",{});var nDe=s($E);OMe=n(nDe,"STRONG",{});var VRt=s(OMe);_Ar=r(VRt,"roberta"),VRt.forEach(t),uAr=r(nDe," \u2014 "),yY=n(nDe,"A",{href:!0});var XRt=s(yY);bAr=r(XRt,"TFRobertaForMaskedLM"),XRt.forEach(t),vAr=r(nDe," (RoBERTa model)"),nDe.forEach(t),FAr=i(fe),kE=n(fe,"LI",{});var sDe=s(kE);VMe=n(sDe,"STRONG",{});var zRt=s(VMe);TAr=r(zRt,"roformer"),zRt.forEach(t),MAr=r(sDe," \u2014 "),xY=n(sDe,"A",{href:!0});var QRt=s(xY);EAr=r(QRt,"TFRoFormerForMaskedLM"),QRt.forEach(t),CAr=r(sDe," (RoFormer model)"),sDe.forEach(t),wAr=i(fe),SE=n(fe,"LI",{});var lDe=s(SE);XMe=n(lDe,"STRONG",{});var WRt=s(XMe);AAr=r(WRt,"tapas"),WRt.forEach(t),LAr=r(lDe," \u2014 "),$Y=n(lDe,"A",{href:!0});var HRt=s($Y);yAr=r(HRt,"TFTapasForMaskedLM"),HRt.forEach(t),xAr=r(lDe," (TAPAS model)"),lDe.forEach(t),$Ar=i(fe),RE=n(fe,"LI",{});var iDe=s(RE);zMe=n(iDe,"STRONG",{});var URt=s(zMe);kAr=r(URt,"xlm"),URt.forEach(t),SAr=r(iDe," \u2014 "),kY=n(iDe,"A",{href:!0});var JRt=s(kY);RAr=r(JRt,"TFXLMWithLMHeadModel"),JRt.forEach(t),PAr=r(iDe," (XLM model)"),iDe.forEach(t),BAr=i(fe),PE=n(fe,"LI",{});var dDe=s(PE);QMe=n(dDe,"STRONG",{});var YRt=s(QMe);NAr=r(YRt,"xlm-roberta"),YRt.forEach(t),IAr=r(dDe," \u2014 "),SY=n(dDe,"A",{href:!0});var KRt=s(SY);qAr=r(KRt,"TFXLMRobertaForMaskedLM"),KRt.forEach(t),jAr=r(dDe," (XLM-RoBERTa model)"),dDe.forEach(t),fe.forEach(t),DAr=i(jl),T(BE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),vze=i(f),Mc=n(f,"H2",{class:!0});var LWe=s(Mc);NE=n(LWe,"A",{id:!0,class:!0,href:!0});var ZRt=s(NE);WMe=n(ZRt,"SPAN",{});var ePt=s(WMe);T(_x.$$.fragment,ePt),ePt.forEach(t),ZRt.forEach(t),GAr=i(LWe),HMe=n(LWe,"SPAN",{});var oPt=s(HMe);OAr=r(oPt,"TFAutoModelForSeq2SeqLM"),oPt.forEach(t),LWe.forEach(t),Fze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(ux.$$.fragment,Dl),VAr=i(Dl),Ec=n(Dl,"P",{});var Dte=s(Ec);XAr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RY=n(Dte,"A",{href:!0});var rPt=s(RY);zAr=r(rPt,"from_pretrained()"),rPt.forEach(t),QAr=r(Dte," class method or the "),PY=n(Dte,"A",{href:!0});var tPt=s(PY);WAr=r(tPt,"from_config()"),tPt.forEach(t),HAr=r(Dte,` class
method.`),Dte.forEach(t),UAr=i(Dl),bx=n(Dl,"P",{});var yWe=s(bx);JAr=r(yWe,"This class cannot be instantiated directly using "),UMe=n(yWe,"CODE",{});var aPt=s(UMe);YAr=r(aPt,"__init__()"),aPt.forEach(t),KAr=r(yWe," (throws an error)."),yWe.forEach(t),ZAr=i(Dl),qt=n(Dl,"DIV",{class:!0});var g7=s(qt);T(vx.$$.fragment,g7),e7r=i(g7),JMe=n(g7,"P",{});var nPt=s(JMe);o7r=r(nPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nPt.forEach(t),r7r=i(g7),Cc=n(g7,"P",{});var Gte=s(Cc);t7r=r(Gte,`Note:
Loading a model from its configuration file does `),YMe=n(Gte,"STRONG",{});var sPt=s(YMe);a7r=r(sPt,"not"),sPt.forEach(t),n7r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(Gte,"A",{href:!0});var lPt=s(BY);s7r=r(lPt,"from_pretrained()"),lPt.forEach(t),l7r=r(Gte," to load the model weights."),Gte.forEach(t),i7r=i(g7),T(IE.$$.fragment,g7),g7.forEach(t),d7r=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Fx.$$.fragment,Gl),c7r=i(Gl),KMe=n(Gl,"P",{});var iPt=s(KMe);f7r=r(iPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iPt.forEach(t),m7r=i(Gl),mn=n(Gl,"P",{});var h7=s(mn);g7r=r(h7,"The model class to instantiate is selected based on the "),ZMe=n(h7,"CODE",{});var dPt=s(ZMe);h7r=r(dPt,"model_type"),dPt.forEach(t),p7r=r(h7,` property of the config object (either
passed as an argument or loaded from `),e4e=n(h7,"CODE",{});var cPt=s(e4e);_7r=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),u7r=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(h7,"CODE",{});var fPt=s(o4e);b7r=r(fPt,"pretrained_model_name_or_path"),fPt.forEach(t),v7r=r(h7,":"),h7.forEach(t),F7r=i(Gl),ye=n(Gl,"UL",{});var Ne=s(ye);qE=n(Ne,"LI",{});var cDe=s(qE);r4e=n(cDe,"STRONG",{});var mPt=s(r4e);T7r=r(mPt,"bart"),mPt.forEach(t),M7r=r(cDe," \u2014 "),NY=n(cDe,"A",{href:!0});var gPt=s(NY);E7r=r(gPt,"TFBartForConditionalGeneration"),gPt.forEach(t),C7r=r(cDe," (BART model)"),cDe.forEach(t),w7r=i(Ne),jE=n(Ne,"LI",{});var fDe=s(jE);t4e=n(fDe,"STRONG",{});var hPt=s(t4e);A7r=r(hPt,"blenderbot"),hPt.forEach(t),L7r=r(fDe," \u2014 "),IY=n(fDe,"A",{href:!0});var pPt=s(IY);y7r=r(pPt,"TFBlenderbotForConditionalGeneration"),pPt.forEach(t),x7r=r(fDe," (Blenderbot model)"),fDe.forEach(t),$7r=i(Ne),DE=n(Ne,"LI",{});var mDe=s(DE);a4e=n(mDe,"STRONG",{});var _Pt=s(a4e);k7r=r(_Pt,"blenderbot-small"),_Pt.forEach(t),S7r=r(mDe," \u2014 "),qY=n(mDe,"A",{href:!0});var uPt=s(qY);R7r=r(uPt,"TFBlenderbotSmallForConditionalGeneration"),uPt.forEach(t),P7r=r(mDe," (BlenderbotSmall model)"),mDe.forEach(t),B7r=i(Ne),GE=n(Ne,"LI",{});var gDe=s(GE);n4e=n(gDe,"STRONG",{});var bPt=s(n4e);N7r=r(bPt,"encoder-decoder"),bPt.forEach(t),I7r=r(gDe," \u2014 "),jY=n(gDe,"A",{href:!0});var vPt=s(jY);q7r=r(vPt,"TFEncoderDecoderModel"),vPt.forEach(t),j7r=r(gDe," (Encoder decoder model)"),gDe.forEach(t),D7r=i(Ne),OE=n(Ne,"LI",{});var hDe=s(OE);s4e=n(hDe,"STRONG",{});var FPt=s(s4e);G7r=r(FPt,"led"),FPt.forEach(t),O7r=r(hDe," \u2014 "),DY=n(hDe,"A",{href:!0});var TPt=s(DY);V7r=r(TPt,"TFLEDForConditionalGeneration"),TPt.forEach(t),X7r=r(hDe," (LED model)"),hDe.forEach(t),z7r=i(Ne),VE=n(Ne,"LI",{});var pDe=s(VE);l4e=n(pDe,"STRONG",{});var MPt=s(l4e);Q7r=r(MPt,"marian"),MPt.forEach(t),W7r=r(pDe," \u2014 "),GY=n(pDe,"A",{href:!0});var EPt=s(GY);H7r=r(EPt,"TFMarianMTModel"),EPt.forEach(t),U7r=r(pDe," (Marian model)"),pDe.forEach(t),J7r=i(Ne),XE=n(Ne,"LI",{});var _De=s(XE);i4e=n(_De,"STRONG",{});var CPt=s(i4e);Y7r=r(CPt,"mbart"),CPt.forEach(t),K7r=r(_De," \u2014 "),OY=n(_De,"A",{href:!0});var wPt=s(OY);Z7r=r(wPt,"TFMBartForConditionalGeneration"),wPt.forEach(t),eLr=r(_De," (mBART model)"),_De.forEach(t),oLr=i(Ne),zE=n(Ne,"LI",{});var uDe=s(zE);d4e=n(uDe,"STRONG",{});var APt=s(d4e);rLr=r(APt,"mt5"),APt.forEach(t),tLr=r(uDe," \u2014 "),VY=n(uDe,"A",{href:!0});var LPt=s(VY);aLr=r(LPt,"TFMT5ForConditionalGeneration"),LPt.forEach(t),nLr=r(uDe," (MT5 model)"),uDe.forEach(t),sLr=i(Ne),QE=n(Ne,"LI",{});var bDe=s(QE);c4e=n(bDe,"STRONG",{});var yPt=s(c4e);lLr=r(yPt,"pegasus"),yPt.forEach(t),iLr=r(bDe," \u2014 "),XY=n(bDe,"A",{href:!0});var xPt=s(XY);dLr=r(xPt,"TFPegasusForConditionalGeneration"),xPt.forEach(t),cLr=r(bDe," (Pegasus model)"),bDe.forEach(t),fLr=i(Ne),WE=n(Ne,"LI",{});var vDe=s(WE);f4e=n(vDe,"STRONG",{});var $Pt=s(f4e);mLr=r($Pt,"t5"),$Pt.forEach(t),gLr=r(vDe," \u2014 "),zY=n(vDe,"A",{href:!0});var kPt=s(zY);hLr=r(kPt,"TFT5ForConditionalGeneration"),kPt.forEach(t),pLr=r(vDe," (T5 model)"),vDe.forEach(t),Ne.forEach(t),_Lr=i(Gl),T(HE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Tze=i(f),wc=n(f,"H2",{class:!0});var xWe=s(wc);UE=n(xWe,"A",{id:!0,class:!0,href:!0});var SPt=s(UE);m4e=n(SPt,"SPAN",{});var RPt=s(m4e);T(Tx.$$.fragment,RPt),RPt.forEach(t),SPt.forEach(t),uLr=i(xWe),g4e=n(xWe,"SPAN",{});var PPt=s(g4e);bLr=r(PPt,"TFAutoModelForSequenceClassification"),PPt.forEach(t),xWe.forEach(t),Mze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Mx.$$.fragment,Ol),vLr=i(Ol),Ac=n(Ol,"P",{});var Ote=s(Ac);FLr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QY=n(Ote,"A",{href:!0});var BPt=s(QY);TLr=r(BPt,"from_pretrained()"),BPt.forEach(t),MLr=r(Ote," class method or the "),WY=n(Ote,"A",{href:!0});var NPt=s(WY);ELr=r(NPt,"from_config()"),NPt.forEach(t),CLr=r(Ote,` class
method.`),Ote.forEach(t),wLr=i(Ol),Ex=n(Ol,"P",{});var $We=s(Ex);ALr=r($We,"This class cannot be instantiated directly using "),h4e=n($We,"CODE",{});var IPt=s(h4e);LLr=r(IPt,"__init__()"),IPt.forEach(t),yLr=r($We," (throws an error)."),$We.forEach(t),xLr=i(Ol),jt=n(Ol,"DIV",{class:!0});var p7=s(jt);T(Cx.$$.fragment,p7),$Lr=i(p7),p4e=n(p7,"P",{});var qPt=s(p4e);kLr=r(qPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qPt.forEach(t),SLr=i(p7),Lc=n(p7,"P",{});var Vte=s(Lc);RLr=r(Vte,`Note:
Loading a model from its configuration file does `),_4e=n(Vte,"STRONG",{});var jPt=s(_4e);PLr=r(jPt,"not"),jPt.forEach(t),BLr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Vte,"A",{href:!0});var DPt=s(HY);NLr=r(DPt,"from_pretrained()"),DPt.forEach(t),ILr=r(Vte," to load the model weights."),Vte.forEach(t),qLr=i(p7),T(JE.$$.fragment,p7),p7.forEach(t),jLr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(wx.$$.fragment,Vl),DLr=i(Vl),u4e=n(Vl,"P",{});var GPt=s(u4e);GLr=r(GPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GPt.forEach(t),OLr=i(Vl),gn=n(Vl,"P",{});var _7=s(gn);VLr=r(_7,"The model class to instantiate is selected based on the "),b4e=n(_7,"CODE",{});var OPt=s(b4e);XLr=r(OPt,"model_type"),OPt.forEach(t),zLr=r(_7,` property of the config object (either
passed as an argument or loaded from `),v4e=n(_7,"CODE",{});var VPt=s(v4e);QLr=r(VPt,"pretrained_model_name_or_path"),VPt.forEach(t),WLr=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(_7,"CODE",{});var XPt=s(F4e);HLr=r(XPt,"pretrained_model_name_or_path"),XPt.forEach(t),ULr=r(_7,":"),_7.forEach(t),JLr=i(Vl),te=n(Vl,"UL",{});var ne=s(te);YE=n(ne,"LI",{});var FDe=s(YE);T4e=n(FDe,"STRONG",{});var zPt=s(T4e);YLr=r(zPt,"albert"),zPt.forEach(t),KLr=r(FDe," \u2014 "),UY=n(FDe,"A",{href:!0});var QPt=s(UY);ZLr=r(QPt,"TFAlbertForSequenceClassification"),QPt.forEach(t),eyr=r(FDe," (ALBERT model)"),FDe.forEach(t),oyr=i(ne),KE=n(ne,"LI",{});var TDe=s(KE);M4e=n(TDe,"STRONG",{});var WPt=s(M4e);ryr=r(WPt,"bert"),WPt.forEach(t),tyr=r(TDe," \u2014 "),JY=n(TDe,"A",{href:!0});var HPt=s(JY);ayr=r(HPt,"TFBertForSequenceClassification"),HPt.forEach(t),nyr=r(TDe," (BERT model)"),TDe.forEach(t),syr=i(ne),ZE=n(ne,"LI",{});var MDe=s(ZE);E4e=n(MDe,"STRONG",{});var UPt=s(E4e);lyr=r(UPt,"camembert"),UPt.forEach(t),iyr=r(MDe," \u2014 "),YY=n(MDe,"A",{href:!0});var JPt=s(YY);dyr=r(JPt,"TFCamembertForSequenceClassification"),JPt.forEach(t),cyr=r(MDe," (CamemBERT model)"),MDe.forEach(t),fyr=i(ne),eC=n(ne,"LI",{});var EDe=s(eC);C4e=n(EDe,"STRONG",{});var YPt=s(C4e);myr=r(YPt,"convbert"),YPt.forEach(t),gyr=r(EDe," \u2014 "),KY=n(EDe,"A",{href:!0});var KPt=s(KY);hyr=r(KPt,"TFConvBertForSequenceClassification"),KPt.forEach(t),pyr=r(EDe," (ConvBERT model)"),EDe.forEach(t),_yr=i(ne),oC=n(ne,"LI",{});var CDe=s(oC);w4e=n(CDe,"STRONG",{});var ZPt=s(w4e);uyr=r(ZPt,"ctrl"),ZPt.forEach(t),byr=r(CDe," \u2014 "),ZY=n(CDe,"A",{href:!0});var eBt=s(ZY);vyr=r(eBt,"TFCTRLForSequenceClassification"),eBt.forEach(t),Fyr=r(CDe," (CTRL model)"),CDe.forEach(t),Tyr=i(ne),rC=n(ne,"LI",{});var wDe=s(rC);A4e=n(wDe,"STRONG",{});var oBt=s(A4e);Myr=r(oBt,"deberta"),oBt.forEach(t),Eyr=r(wDe," \u2014 "),eK=n(wDe,"A",{href:!0});var rBt=s(eK);Cyr=r(rBt,"TFDebertaForSequenceClassification"),rBt.forEach(t),wyr=r(wDe," (DeBERTa model)"),wDe.forEach(t),Ayr=i(ne),tC=n(ne,"LI",{});var ADe=s(tC);L4e=n(ADe,"STRONG",{});var tBt=s(L4e);Lyr=r(tBt,"deberta-v2"),tBt.forEach(t),yyr=r(ADe," \u2014 "),oK=n(ADe,"A",{href:!0});var aBt=s(oK);xyr=r(aBt,"TFDebertaV2ForSequenceClassification"),aBt.forEach(t),$yr=r(ADe," (DeBERTa-v2 model)"),ADe.forEach(t),kyr=i(ne),aC=n(ne,"LI",{});var LDe=s(aC);y4e=n(LDe,"STRONG",{});var nBt=s(y4e);Syr=r(nBt,"distilbert"),nBt.forEach(t),Ryr=r(LDe," \u2014 "),rK=n(LDe,"A",{href:!0});var sBt=s(rK);Pyr=r(sBt,"TFDistilBertForSequenceClassification"),sBt.forEach(t),Byr=r(LDe," (DistilBERT model)"),LDe.forEach(t),Nyr=i(ne),nC=n(ne,"LI",{});var yDe=s(nC);x4e=n(yDe,"STRONG",{});var lBt=s(x4e);Iyr=r(lBt,"electra"),lBt.forEach(t),qyr=r(yDe," \u2014 "),tK=n(yDe,"A",{href:!0});var iBt=s(tK);jyr=r(iBt,"TFElectraForSequenceClassification"),iBt.forEach(t),Dyr=r(yDe," (ELECTRA model)"),yDe.forEach(t),Gyr=i(ne),sC=n(ne,"LI",{});var xDe=s(sC);$4e=n(xDe,"STRONG",{});var dBt=s($4e);Oyr=r(dBt,"flaubert"),dBt.forEach(t),Vyr=r(xDe," \u2014 "),aK=n(xDe,"A",{href:!0});var cBt=s(aK);Xyr=r(cBt,"TFFlaubertForSequenceClassification"),cBt.forEach(t),zyr=r(xDe," (FlauBERT model)"),xDe.forEach(t),Qyr=i(ne),lC=n(ne,"LI",{});var $De=s(lC);k4e=n($De,"STRONG",{});var fBt=s(k4e);Wyr=r(fBt,"funnel"),fBt.forEach(t),Hyr=r($De," \u2014 "),nK=n($De,"A",{href:!0});var mBt=s(nK);Uyr=r(mBt,"TFFunnelForSequenceClassification"),mBt.forEach(t),Jyr=r($De," (Funnel Transformer model)"),$De.forEach(t),Yyr=i(ne),iC=n(ne,"LI",{});var kDe=s(iC);S4e=n(kDe,"STRONG",{});var gBt=s(S4e);Kyr=r(gBt,"gpt2"),gBt.forEach(t),Zyr=r(kDe," \u2014 "),sK=n(kDe,"A",{href:!0});var hBt=s(sK);e9r=r(hBt,"TFGPT2ForSequenceClassification"),hBt.forEach(t),o9r=r(kDe," (OpenAI GPT-2 model)"),kDe.forEach(t),r9r=i(ne),dC=n(ne,"LI",{});var SDe=s(dC);R4e=n(SDe,"STRONG",{});var pBt=s(R4e);t9r=r(pBt,"gptj"),pBt.forEach(t),a9r=r(SDe," \u2014 "),lK=n(SDe,"A",{href:!0});var _Bt=s(lK);n9r=r(_Bt,"TFGPTJForSequenceClassification"),_Bt.forEach(t),s9r=r(SDe," (GPT-J model)"),SDe.forEach(t),l9r=i(ne),cC=n(ne,"LI",{});var RDe=s(cC);P4e=n(RDe,"STRONG",{});var uBt=s(P4e);i9r=r(uBt,"layoutlm"),uBt.forEach(t),d9r=r(RDe," \u2014 "),iK=n(RDe,"A",{href:!0});var bBt=s(iK);c9r=r(bBt,"TFLayoutLMForSequenceClassification"),bBt.forEach(t),f9r=r(RDe," (LayoutLM model)"),RDe.forEach(t),m9r=i(ne),fC=n(ne,"LI",{});var PDe=s(fC);B4e=n(PDe,"STRONG",{});var vBt=s(B4e);g9r=r(vBt,"longformer"),vBt.forEach(t),h9r=r(PDe," \u2014 "),dK=n(PDe,"A",{href:!0});var FBt=s(dK);p9r=r(FBt,"TFLongformerForSequenceClassification"),FBt.forEach(t),_9r=r(PDe," (Longformer model)"),PDe.forEach(t),u9r=i(ne),mC=n(ne,"LI",{});var BDe=s(mC);N4e=n(BDe,"STRONG",{});var TBt=s(N4e);b9r=r(TBt,"mobilebert"),TBt.forEach(t),v9r=r(BDe," \u2014 "),cK=n(BDe,"A",{href:!0});var MBt=s(cK);F9r=r(MBt,"TFMobileBertForSequenceClassification"),MBt.forEach(t),T9r=r(BDe," (MobileBERT model)"),BDe.forEach(t),M9r=i(ne),gC=n(ne,"LI",{});var NDe=s(gC);I4e=n(NDe,"STRONG",{});var EBt=s(I4e);E9r=r(EBt,"mpnet"),EBt.forEach(t),C9r=r(NDe," \u2014 "),fK=n(NDe,"A",{href:!0});var CBt=s(fK);w9r=r(CBt,"TFMPNetForSequenceClassification"),CBt.forEach(t),A9r=r(NDe," (MPNet model)"),NDe.forEach(t),L9r=i(ne),hC=n(ne,"LI",{});var IDe=s(hC);q4e=n(IDe,"STRONG",{});var wBt=s(q4e);y9r=r(wBt,"openai-gpt"),wBt.forEach(t),x9r=r(IDe," \u2014 "),mK=n(IDe,"A",{href:!0});var ABt=s(mK);$9r=r(ABt,"TFOpenAIGPTForSequenceClassification"),ABt.forEach(t),k9r=r(IDe," (OpenAI GPT model)"),IDe.forEach(t),S9r=i(ne),pC=n(ne,"LI",{});var qDe=s(pC);j4e=n(qDe,"STRONG",{});var LBt=s(j4e);R9r=r(LBt,"rembert"),LBt.forEach(t),P9r=r(qDe," \u2014 "),gK=n(qDe,"A",{href:!0});var yBt=s(gK);B9r=r(yBt,"TFRemBertForSequenceClassification"),yBt.forEach(t),N9r=r(qDe," (RemBERT model)"),qDe.forEach(t),I9r=i(ne),_C=n(ne,"LI",{});var jDe=s(_C);D4e=n(jDe,"STRONG",{});var xBt=s(D4e);q9r=r(xBt,"roberta"),xBt.forEach(t),j9r=r(jDe," \u2014 "),hK=n(jDe,"A",{href:!0});var $Bt=s(hK);D9r=r($Bt,"TFRobertaForSequenceClassification"),$Bt.forEach(t),G9r=r(jDe," (RoBERTa model)"),jDe.forEach(t),O9r=i(ne),uC=n(ne,"LI",{});var DDe=s(uC);G4e=n(DDe,"STRONG",{});var kBt=s(G4e);V9r=r(kBt,"roformer"),kBt.forEach(t),X9r=r(DDe," \u2014 "),pK=n(DDe,"A",{href:!0});var SBt=s(pK);z9r=r(SBt,"TFRoFormerForSequenceClassification"),SBt.forEach(t),Q9r=r(DDe," (RoFormer model)"),DDe.forEach(t),W9r=i(ne),bC=n(ne,"LI",{});var GDe=s(bC);O4e=n(GDe,"STRONG",{});var RBt=s(O4e);H9r=r(RBt,"tapas"),RBt.forEach(t),U9r=r(GDe," \u2014 "),_K=n(GDe,"A",{href:!0});var PBt=s(_K);J9r=r(PBt,"TFTapasForSequenceClassification"),PBt.forEach(t),Y9r=r(GDe," (TAPAS model)"),GDe.forEach(t),K9r=i(ne),vC=n(ne,"LI",{});var ODe=s(vC);V4e=n(ODe,"STRONG",{});var BBt=s(V4e);Z9r=r(BBt,"transfo-xl"),BBt.forEach(t),exr=r(ODe," \u2014 "),uK=n(ODe,"A",{href:!0});var NBt=s(uK);oxr=r(NBt,"TFTransfoXLForSequenceClassification"),NBt.forEach(t),rxr=r(ODe," (Transformer-XL model)"),ODe.forEach(t),txr=i(ne),FC=n(ne,"LI",{});var VDe=s(FC);X4e=n(VDe,"STRONG",{});var IBt=s(X4e);axr=r(IBt,"xlm"),IBt.forEach(t),nxr=r(VDe," \u2014 "),bK=n(VDe,"A",{href:!0});var qBt=s(bK);sxr=r(qBt,"TFXLMForSequenceClassification"),qBt.forEach(t),lxr=r(VDe," (XLM model)"),VDe.forEach(t),ixr=i(ne),TC=n(ne,"LI",{});var XDe=s(TC);z4e=n(XDe,"STRONG",{});var jBt=s(z4e);dxr=r(jBt,"xlm-roberta"),jBt.forEach(t),cxr=r(XDe," \u2014 "),vK=n(XDe,"A",{href:!0});var DBt=s(vK);fxr=r(DBt,"TFXLMRobertaForSequenceClassification"),DBt.forEach(t),mxr=r(XDe," (XLM-RoBERTa model)"),XDe.forEach(t),gxr=i(ne),MC=n(ne,"LI",{});var zDe=s(MC);Q4e=n(zDe,"STRONG",{});var GBt=s(Q4e);hxr=r(GBt,"xlnet"),GBt.forEach(t),pxr=r(zDe," \u2014 "),FK=n(zDe,"A",{href:!0});var OBt=s(FK);_xr=r(OBt,"TFXLNetForSequenceClassification"),OBt.forEach(t),uxr=r(zDe," (XLNet model)"),zDe.forEach(t),ne.forEach(t),bxr=i(Vl),T(EC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Eze=i(f),yc=n(f,"H2",{class:!0});var kWe=s(yc);CC=n(kWe,"A",{id:!0,class:!0,href:!0});var VBt=s(CC);W4e=n(VBt,"SPAN",{});var XBt=s(W4e);T(Ax.$$.fragment,XBt),XBt.forEach(t),VBt.forEach(t),vxr=i(kWe),H4e=n(kWe,"SPAN",{});var zBt=s(H4e);Fxr=r(zBt,"TFAutoModelForMultipleChoice"),zBt.forEach(t),kWe.forEach(t),Cze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(Lx.$$.fragment,Xl),Txr=i(Xl),xc=n(Xl,"P",{});var Xte=s(xc);Mxr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TK=n(Xte,"A",{href:!0});var QBt=s(TK);Exr=r(QBt,"from_pretrained()"),QBt.forEach(t),Cxr=r(Xte," class method or the "),MK=n(Xte,"A",{href:!0});var WBt=s(MK);wxr=r(WBt,"from_config()"),WBt.forEach(t),Axr=r(Xte,` class
method.`),Xte.forEach(t),Lxr=i(Xl),yx=n(Xl,"P",{});var SWe=s(yx);yxr=r(SWe,"This class cannot be instantiated directly using "),U4e=n(SWe,"CODE",{});var HBt=s(U4e);xxr=r(HBt,"__init__()"),HBt.forEach(t),$xr=r(SWe," (throws an error)."),SWe.forEach(t),kxr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var u7=s(Dt);T(xx.$$.fragment,u7),Sxr=i(u7),J4e=n(u7,"P",{});var UBt=s(J4e);Rxr=r(UBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UBt.forEach(t),Pxr=i(u7),$c=n(u7,"P",{});var zte=s($c);Bxr=r(zte,`Note:
Loading a model from its configuration file does `),Y4e=n(zte,"STRONG",{});var JBt=s(Y4e);Nxr=r(JBt,"not"),JBt.forEach(t),Ixr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(zte,"A",{href:!0});var YBt=s(EK);qxr=r(YBt,"from_pretrained()"),YBt.forEach(t),jxr=r(zte," to load the model weights."),zte.forEach(t),Dxr=i(u7),T(wC.$$.fragment,u7),u7.forEach(t),Gxr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T($x.$$.fragment,zl),Oxr=i(zl),K4e=n(zl,"P",{});var KBt=s(K4e);Vxr=r(KBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KBt.forEach(t),Xxr=i(zl),hn=n(zl,"P",{});var b7=s(hn);zxr=r(b7,"The model class to instantiate is selected based on the "),Z4e=n(b7,"CODE",{});var ZBt=s(Z4e);Qxr=r(ZBt,"model_type"),ZBt.forEach(t),Wxr=r(b7,` property of the config object (either
passed as an argument or loaded from `),eEe=n(b7,"CODE",{});var eNt=s(eEe);Hxr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),Uxr=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(b7,"CODE",{});var oNt=s(oEe);Jxr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),Yxr=r(b7,":"),b7.forEach(t),Kxr=i(zl),_e=n(zl,"UL",{});var Fe=s(_e);AC=n(Fe,"LI",{});var QDe=s(AC);rEe=n(QDe,"STRONG",{});var rNt=s(rEe);Zxr=r(rNt,"albert"),rNt.forEach(t),e$r=r(QDe," \u2014 "),CK=n(QDe,"A",{href:!0});var tNt=s(CK);o$r=r(tNt,"TFAlbertForMultipleChoice"),tNt.forEach(t),r$r=r(QDe," (ALBERT model)"),QDe.forEach(t),t$r=i(Fe),LC=n(Fe,"LI",{});var WDe=s(LC);tEe=n(WDe,"STRONG",{});var aNt=s(tEe);a$r=r(aNt,"bert"),aNt.forEach(t),n$r=r(WDe," \u2014 "),wK=n(WDe,"A",{href:!0});var nNt=s(wK);s$r=r(nNt,"TFBertForMultipleChoice"),nNt.forEach(t),l$r=r(WDe," (BERT model)"),WDe.forEach(t),i$r=i(Fe),yC=n(Fe,"LI",{});var HDe=s(yC);aEe=n(HDe,"STRONG",{});var sNt=s(aEe);d$r=r(sNt,"camembert"),sNt.forEach(t),c$r=r(HDe," \u2014 "),AK=n(HDe,"A",{href:!0});var lNt=s(AK);f$r=r(lNt,"TFCamembertForMultipleChoice"),lNt.forEach(t),m$r=r(HDe," (CamemBERT model)"),HDe.forEach(t),g$r=i(Fe),xC=n(Fe,"LI",{});var UDe=s(xC);nEe=n(UDe,"STRONG",{});var iNt=s(nEe);h$r=r(iNt,"convbert"),iNt.forEach(t),p$r=r(UDe," \u2014 "),LK=n(UDe,"A",{href:!0});var dNt=s(LK);_$r=r(dNt,"TFConvBertForMultipleChoice"),dNt.forEach(t),u$r=r(UDe," (ConvBERT model)"),UDe.forEach(t),b$r=i(Fe),$C=n(Fe,"LI",{});var JDe=s($C);sEe=n(JDe,"STRONG",{});var cNt=s(sEe);v$r=r(cNt,"distilbert"),cNt.forEach(t),F$r=r(JDe," \u2014 "),yK=n(JDe,"A",{href:!0});var fNt=s(yK);T$r=r(fNt,"TFDistilBertForMultipleChoice"),fNt.forEach(t),M$r=r(JDe," (DistilBERT model)"),JDe.forEach(t),E$r=i(Fe),kC=n(Fe,"LI",{});var YDe=s(kC);lEe=n(YDe,"STRONG",{});var mNt=s(lEe);C$r=r(mNt,"electra"),mNt.forEach(t),w$r=r(YDe," \u2014 "),xK=n(YDe,"A",{href:!0});var gNt=s(xK);A$r=r(gNt,"TFElectraForMultipleChoice"),gNt.forEach(t),L$r=r(YDe," (ELECTRA model)"),YDe.forEach(t),y$r=i(Fe),SC=n(Fe,"LI",{});var KDe=s(SC);iEe=n(KDe,"STRONG",{});var hNt=s(iEe);x$r=r(hNt,"flaubert"),hNt.forEach(t),$$r=r(KDe," \u2014 "),$K=n(KDe,"A",{href:!0});var pNt=s($K);k$r=r(pNt,"TFFlaubertForMultipleChoice"),pNt.forEach(t),S$r=r(KDe," (FlauBERT model)"),KDe.forEach(t),R$r=i(Fe),RC=n(Fe,"LI",{});var ZDe=s(RC);dEe=n(ZDe,"STRONG",{});var _Nt=s(dEe);P$r=r(_Nt,"funnel"),_Nt.forEach(t),B$r=r(ZDe," \u2014 "),kK=n(ZDe,"A",{href:!0});var uNt=s(kK);N$r=r(uNt,"TFFunnelForMultipleChoice"),uNt.forEach(t),I$r=r(ZDe," (Funnel Transformer model)"),ZDe.forEach(t),q$r=i(Fe),PC=n(Fe,"LI",{});var eGe=s(PC);cEe=n(eGe,"STRONG",{});var bNt=s(cEe);j$r=r(bNt,"longformer"),bNt.forEach(t),D$r=r(eGe," \u2014 "),SK=n(eGe,"A",{href:!0});var vNt=s(SK);G$r=r(vNt,"TFLongformerForMultipleChoice"),vNt.forEach(t),O$r=r(eGe," (Longformer model)"),eGe.forEach(t),V$r=i(Fe),BC=n(Fe,"LI",{});var oGe=s(BC);fEe=n(oGe,"STRONG",{});var FNt=s(fEe);X$r=r(FNt,"mobilebert"),FNt.forEach(t),z$r=r(oGe," \u2014 "),RK=n(oGe,"A",{href:!0});var TNt=s(RK);Q$r=r(TNt,"TFMobileBertForMultipleChoice"),TNt.forEach(t),W$r=r(oGe," (MobileBERT model)"),oGe.forEach(t),H$r=i(Fe),NC=n(Fe,"LI",{});var rGe=s(NC);mEe=n(rGe,"STRONG",{});var MNt=s(mEe);U$r=r(MNt,"mpnet"),MNt.forEach(t),J$r=r(rGe," \u2014 "),PK=n(rGe,"A",{href:!0});var ENt=s(PK);Y$r=r(ENt,"TFMPNetForMultipleChoice"),ENt.forEach(t),K$r=r(rGe," (MPNet model)"),rGe.forEach(t),Z$r=i(Fe),IC=n(Fe,"LI",{});var tGe=s(IC);gEe=n(tGe,"STRONG",{});var CNt=s(gEe);ekr=r(CNt,"rembert"),CNt.forEach(t),okr=r(tGe," \u2014 "),BK=n(tGe,"A",{href:!0});var wNt=s(BK);rkr=r(wNt,"TFRemBertForMultipleChoice"),wNt.forEach(t),tkr=r(tGe," (RemBERT model)"),tGe.forEach(t),akr=i(Fe),qC=n(Fe,"LI",{});var aGe=s(qC);hEe=n(aGe,"STRONG",{});var ANt=s(hEe);nkr=r(ANt,"roberta"),ANt.forEach(t),skr=r(aGe," \u2014 "),NK=n(aGe,"A",{href:!0});var LNt=s(NK);lkr=r(LNt,"TFRobertaForMultipleChoice"),LNt.forEach(t),ikr=r(aGe," (RoBERTa model)"),aGe.forEach(t),dkr=i(Fe),jC=n(Fe,"LI",{});var nGe=s(jC);pEe=n(nGe,"STRONG",{});var yNt=s(pEe);ckr=r(yNt,"roformer"),yNt.forEach(t),fkr=r(nGe," \u2014 "),IK=n(nGe,"A",{href:!0});var xNt=s(IK);mkr=r(xNt,"TFRoFormerForMultipleChoice"),xNt.forEach(t),gkr=r(nGe," (RoFormer model)"),nGe.forEach(t),hkr=i(Fe),DC=n(Fe,"LI",{});var sGe=s(DC);_Ee=n(sGe,"STRONG",{});var $Nt=s(_Ee);pkr=r($Nt,"xlm"),$Nt.forEach(t),_kr=r(sGe," \u2014 "),qK=n(sGe,"A",{href:!0});var kNt=s(qK);ukr=r(kNt,"TFXLMForMultipleChoice"),kNt.forEach(t),bkr=r(sGe," (XLM model)"),sGe.forEach(t),vkr=i(Fe),GC=n(Fe,"LI",{});var lGe=s(GC);uEe=n(lGe,"STRONG",{});var SNt=s(uEe);Fkr=r(SNt,"xlm-roberta"),SNt.forEach(t),Tkr=r(lGe," \u2014 "),jK=n(lGe,"A",{href:!0});var RNt=s(jK);Mkr=r(RNt,"TFXLMRobertaForMultipleChoice"),RNt.forEach(t),Ekr=r(lGe," (XLM-RoBERTa model)"),lGe.forEach(t),Ckr=i(Fe),OC=n(Fe,"LI",{});var iGe=s(OC);bEe=n(iGe,"STRONG",{});var PNt=s(bEe);wkr=r(PNt,"xlnet"),PNt.forEach(t),Akr=r(iGe," \u2014 "),DK=n(iGe,"A",{href:!0});var BNt=s(DK);Lkr=r(BNt,"TFXLNetForMultipleChoice"),BNt.forEach(t),ykr=r(iGe," (XLNet model)"),iGe.forEach(t),Fe.forEach(t),xkr=i(zl),T(VC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),wze=i(f),kc=n(f,"H2",{class:!0});var RWe=s(kc);XC=n(RWe,"A",{id:!0,class:!0,href:!0});var NNt=s(XC);vEe=n(NNt,"SPAN",{});var INt=s(vEe);T(kx.$$.fragment,INt),INt.forEach(t),NNt.forEach(t),$kr=i(RWe),FEe=n(RWe,"SPAN",{});var qNt=s(FEe);kkr=r(qNt,"TFAutoModelForNextSentencePrediction"),qNt.forEach(t),RWe.forEach(t),Aze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Sx.$$.fragment,Ql),Skr=i(Ql),Sc=n(Ql,"P",{});var Qte=s(Sc);Rkr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GK=n(Qte,"A",{href:!0});var jNt=s(GK);Pkr=r(jNt,"from_pretrained()"),jNt.forEach(t),Bkr=r(Qte," class method or the "),OK=n(Qte,"A",{href:!0});var DNt=s(OK);Nkr=r(DNt,"from_config()"),DNt.forEach(t),Ikr=r(Qte,` class
method.`),Qte.forEach(t),qkr=i(Ql),Rx=n(Ql,"P",{});var PWe=s(Rx);jkr=r(PWe,"This class cannot be instantiated directly using "),TEe=n(PWe,"CODE",{});var GNt=s(TEe);Dkr=r(GNt,"__init__()"),GNt.forEach(t),Gkr=r(PWe," (throws an error)."),PWe.forEach(t),Okr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var v7=s(Gt);T(Px.$$.fragment,v7),Vkr=i(v7),MEe=n(v7,"P",{});var ONt=s(MEe);Xkr=r(ONt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ONt.forEach(t),zkr=i(v7),Rc=n(v7,"P",{});var Wte=s(Rc);Qkr=r(Wte,`Note:
Loading a model from its configuration file does `),EEe=n(Wte,"STRONG",{});var VNt=s(EEe);Wkr=r(VNt,"not"),VNt.forEach(t),Hkr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(Wte,"A",{href:!0});var XNt=s(VK);Ukr=r(XNt,"from_pretrained()"),XNt.forEach(t),Jkr=r(Wte," to load the model weights."),Wte.forEach(t),Ykr=i(v7),T(zC.$$.fragment,v7),v7.forEach(t),Kkr=i(Ql),Ir=n(Ql,"DIV",{class:!0});var Wl=s(Ir);T(Bx.$$.fragment,Wl),Zkr=i(Wl),CEe=n(Wl,"P",{});var zNt=s(CEe);eSr=r(zNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zNt.forEach(t),oSr=i(Wl),pn=n(Wl,"P",{});var F7=s(pn);rSr=r(F7,"The model class to instantiate is selected based on the "),wEe=n(F7,"CODE",{});var QNt=s(wEe);tSr=r(QNt,"model_type"),QNt.forEach(t),aSr=r(F7,` property of the config object (either
passed as an argument or loaded from `),AEe=n(F7,"CODE",{});var WNt=s(AEe);nSr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),sSr=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(F7,"CODE",{});var HNt=s(LEe);lSr=r(HNt,"pretrained_model_name_or_path"),HNt.forEach(t),iSr=r(F7,":"),F7.forEach(t),dSr=i(Wl),Nx=n(Wl,"UL",{});var BWe=s(Nx);QC=n(BWe,"LI",{});var dGe=s(QC);yEe=n(dGe,"STRONG",{});var UNt=s(yEe);cSr=r(UNt,"bert"),UNt.forEach(t),fSr=r(dGe," \u2014 "),XK=n(dGe,"A",{href:!0});var JNt=s(XK);mSr=r(JNt,"TFBertForNextSentencePrediction"),JNt.forEach(t),gSr=r(dGe," (BERT model)"),dGe.forEach(t),hSr=i(BWe),WC=n(BWe,"LI",{});var cGe=s(WC);xEe=n(cGe,"STRONG",{});var YNt=s(xEe);pSr=r(YNt,"mobilebert"),YNt.forEach(t),_Sr=r(cGe," \u2014 "),zK=n(cGe,"A",{href:!0});var KNt=s(zK);uSr=r(KNt,"TFMobileBertForNextSentencePrediction"),KNt.forEach(t),bSr=r(cGe," (MobileBERT model)"),cGe.forEach(t),BWe.forEach(t),vSr=i(Wl),T(HC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Lze=i(f),Pc=n(f,"H2",{class:!0});var NWe=s(Pc);UC=n(NWe,"A",{id:!0,class:!0,href:!0});var ZNt=s(UC);$Ee=n(ZNt,"SPAN",{});var eIt=s($Ee);T(Ix.$$.fragment,eIt),eIt.forEach(t),ZNt.forEach(t),FSr=i(NWe),kEe=n(NWe,"SPAN",{});var oIt=s(kEe);TSr=r(oIt,"TFAutoModelForTableQuestionAnswering"),oIt.forEach(t),NWe.forEach(t),yze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(qx.$$.fragment,Hl),MSr=i(Hl),Bc=n(Hl,"P",{});var Hte=s(Bc);ESr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QK=n(Hte,"A",{href:!0});var rIt=s(QK);CSr=r(rIt,"from_pretrained()"),rIt.forEach(t),wSr=r(Hte," class method or the "),WK=n(Hte,"A",{href:!0});var tIt=s(WK);ASr=r(tIt,"from_config()"),tIt.forEach(t),LSr=r(Hte,` class
method.`),Hte.forEach(t),ySr=i(Hl),jx=n(Hl,"P",{});var IWe=s(jx);xSr=r(IWe,"This class cannot be instantiated directly using "),SEe=n(IWe,"CODE",{});var aIt=s(SEe);$Sr=r(aIt,"__init__()"),aIt.forEach(t),kSr=r(IWe," (throws an error)."),IWe.forEach(t),SSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var T7=s(Ot);T(Dx.$$.fragment,T7),RSr=i(T7),REe=n(T7,"P",{});var nIt=s(REe);PSr=r(nIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nIt.forEach(t),BSr=i(T7),Nc=n(T7,"P",{});var Ute=s(Nc);NSr=r(Ute,`Note:
Loading a model from its configuration file does `),PEe=n(Ute,"STRONG",{});var sIt=s(PEe);ISr=r(sIt,"not"),sIt.forEach(t),qSr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Ute,"A",{href:!0});var lIt=s(HK);jSr=r(lIt,"from_pretrained()"),lIt.forEach(t),DSr=r(Ute," to load the model weights."),Ute.forEach(t),GSr=i(T7),T(JC.$$.fragment,T7),T7.forEach(t),OSr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Gx.$$.fragment,Ul),VSr=i(Ul),BEe=n(Ul,"P",{});var iIt=s(BEe);XSr=r(iIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),iIt.forEach(t),zSr=i(Ul),_n=n(Ul,"P",{});var M7=s(_n);QSr=r(M7,"The model class to instantiate is selected based on the "),NEe=n(M7,"CODE",{});var dIt=s(NEe);WSr=r(dIt,"model_type"),dIt.forEach(t),HSr=r(M7,` property of the config object (either
passed as an argument or loaded from `),IEe=n(M7,"CODE",{});var cIt=s(IEe);USr=r(cIt,"pretrained_model_name_or_path"),cIt.forEach(t),JSr=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(M7,"CODE",{});var fIt=s(qEe);YSr=r(fIt,"pretrained_model_name_or_path"),fIt.forEach(t),KSr=r(M7,":"),M7.forEach(t),ZSr=i(Ul),jEe=n(Ul,"UL",{});var mIt=s(jEe);YC=n(mIt,"LI",{});var fGe=s(YC);DEe=n(fGe,"STRONG",{});var gIt=s(DEe);eRr=r(gIt,"tapas"),gIt.forEach(t),oRr=r(fGe," \u2014 "),UK=n(fGe,"A",{href:!0});var hIt=s(UK);rRr=r(hIt,"TFTapasForQuestionAnswering"),hIt.forEach(t),tRr=r(fGe," (TAPAS model)"),fGe.forEach(t),mIt.forEach(t),aRr=i(Ul),T(KC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),xze=i(f),Ic=n(f,"H2",{class:!0});var qWe=s(Ic);ZC=n(qWe,"A",{id:!0,class:!0,href:!0});var pIt=s(ZC);GEe=n(pIt,"SPAN",{});var _It=s(GEe);T(Ox.$$.fragment,_It),_It.forEach(t),pIt.forEach(t),nRr=i(qWe),OEe=n(qWe,"SPAN",{});var uIt=s(OEe);sRr=r(uIt,"TFAutoModelForTokenClassification"),uIt.forEach(t),qWe.forEach(t),$ze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Vx.$$.fragment,Jl),lRr=i(Jl),qc=n(Jl,"P",{});var Jte=s(qc);iRr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JK=n(Jte,"A",{href:!0});var bIt=s(JK);dRr=r(bIt,"from_pretrained()"),bIt.forEach(t),cRr=r(Jte," class method or the "),YK=n(Jte,"A",{href:!0});var vIt=s(YK);fRr=r(vIt,"from_config()"),vIt.forEach(t),mRr=r(Jte,` class
method.`),Jte.forEach(t),gRr=i(Jl),Xx=n(Jl,"P",{});var jWe=s(Xx);hRr=r(jWe,"This class cannot be instantiated directly using "),VEe=n(jWe,"CODE",{});var FIt=s(VEe);pRr=r(FIt,"__init__()"),FIt.forEach(t),_Rr=r(jWe," (throws an error)."),jWe.forEach(t),uRr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var E7=s(Vt);T(zx.$$.fragment,E7),bRr=i(E7),XEe=n(E7,"P",{});var TIt=s(XEe);vRr=r(TIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TIt.forEach(t),FRr=i(E7),jc=n(E7,"P",{});var Yte=s(jc);TRr=r(Yte,`Note:
Loading a model from its configuration file does `),zEe=n(Yte,"STRONG",{});var MIt=s(zEe);MRr=r(MIt,"not"),MIt.forEach(t),ERr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(Yte,"A",{href:!0});var EIt=s(KK);CRr=r(EIt,"from_pretrained()"),EIt.forEach(t),wRr=r(Yte," to load the model weights."),Yte.forEach(t),ARr=i(E7),T(e3.$$.fragment,E7),E7.forEach(t),LRr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Qx.$$.fragment,Yl),yRr=i(Yl),QEe=n(Yl,"P",{});var CIt=s(QEe);xRr=r(CIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CIt.forEach(t),$Rr=i(Yl),un=n(Yl,"P",{});var C7=s(un);kRr=r(C7,"The model class to instantiate is selected based on the "),WEe=n(C7,"CODE",{});var wIt=s(WEe);SRr=r(wIt,"model_type"),wIt.forEach(t),RRr=r(C7,` property of the config object (either
passed as an argument or loaded from `),HEe=n(C7,"CODE",{});var AIt=s(HEe);PRr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),BRr=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(C7,"CODE",{});var LIt=s(UEe);NRr=r(LIt,"pretrained_model_name_or_path"),LIt.forEach(t),IRr=r(C7,":"),C7.forEach(t),qRr=i(Yl),de=n(Yl,"UL",{});var me=s(de);o3=n(me,"LI",{});var mGe=s(o3);JEe=n(mGe,"STRONG",{});var yIt=s(JEe);jRr=r(yIt,"albert"),yIt.forEach(t),DRr=r(mGe," \u2014 "),ZK=n(mGe,"A",{href:!0});var xIt=s(ZK);GRr=r(xIt,"TFAlbertForTokenClassification"),xIt.forEach(t),ORr=r(mGe," (ALBERT model)"),mGe.forEach(t),VRr=i(me),r3=n(me,"LI",{});var gGe=s(r3);YEe=n(gGe,"STRONG",{});var $It=s(YEe);XRr=r($It,"bert"),$It.forEach(t),zRr=r(gGe," \u2014 "),eZ=n(gGe,"A",{href:!0});var kIt=s(eZ);QRr=r(kIt,"TFBertForTokenClassification"),kIt.forEach(t),WRr=r(gGe," (BERT model)"),gGe.forEach(t),HRr=i(me),t3=n(me,"LI",{});var hGe=s(t3);KEe=n(hGe,"STRONG",{});var SIt=s(KEe);URr=r(SIt,"camembert"),SIt.forEach(t),JRr=r(hGe," \u2014 "),oZ=n(hGe,"A",{href:!0});var RIt=s(oZ);YRr=r(RIt,"TFCamembertForTokenClassification"),RIt.forEach(t),KRr=r(hGe," (CamemBERT model)"),hGe.forEach(t),ZRr=i(me),a3=n(me,"LI",{});var pGe=s(a3);ZEe=n(pGe,"STRONG",{});var PIt=s(ZEe);ePr=r(PIt,"convbert"),PIt.forEach(t),oPr=r(pGe," \u2014 "),rZ=n(pGe,"A",{href:!0});var BIt=s(rZ);rPr=r(BIt,"TFConvBertForTokenClassification"),BIt.forEach(t),tPr=r(pGe," (ConvBERT model)"),pGe.forEach(t),aPr=i(me),n3=n(me,"LI",{});var _Ge=s(n3);eCe=n(_Ge,"STRONG",{});var NIt=s(eCe);nPr=r(NIt,"deberta"),NIt.forEach(t),sPr=r(_Ge," \u2014 "),tZ=n(_Ge,"A",{href:!0});var IIt=s(tZ);lPr=r(IIt,"TFDebertaForTokenClassification"),IIt.forEach(t),iPr=r(_Ge," (DeBERTa model)"),_Ge.forEach(t),dPr=i(me),s3=n(me,"LI",{});var uGe=s(s3);oCe=n(uGe,"STRONG",{});var qIt=s(oCe);cPr=r(qIt,"deberta-v2"),qIt.forEach(t),fPr=r(uGe," \u2014 "),aZ=n(uGe,"A",{href:!0});var jIt=s(aZ);mPr=r(jIt,"TFDebertaV2ForTokenClassification"),jIt.forEach(t),gPr=r(uGe," (DeBERTa-v2 model)"),uGe.forEach(t),hPr=i(me),l3=n(me,"LI",{});var bGe=s(l3);rCe=n(bGe,"STRONG",{});var DIt=s(rCe);pPr=r(DIt,"distilbert"),DIt.forEach(t),_Pr=r(bGe," \u2014 "),nZ=n(bGe,"A",{href:!0});var GIt=s(nZ);uPr=r(GIt,"TFDistilBertForTokenClassification"),GIt.forEach(t),bPr=r(bGe," (DistilBERT model)"),bGe.forEach(t),vPr=i(me),i3=n(me,"LI",{});var vGe=s(i3);tCe=n(vGe,"STRONG",{});var OIt=s(tCe);FPr=r(OIt,"electra"),OIt.forEach(t),TPr=r(vGe," \u2014 "),sZ=n(vGe,"A",{href:!0});var VIt=s(sZ);MPr=r(VIt,"TFElectraForTokenClassification"),VIt.forEach(t),EPr=r(vGe," (ELECTRA model)"),vGe.forEach(t),CPr=i(me),d3=n(me,"LI",{});var FGe=s(d3);aCe=n(FGe,"STRONG",{});var XIt=s(aCe);wPr=r(XIt,"flaubert"),XIt.forEach(t),APr=r(FGe," \u2014 "),lZ=n(FGe,"A",{href:!0});var zIt=s(lZ);LPr=r(zIt,"TFFlaubertForTokenClassification"),zIt.forEach(t),yPr=r(FGe," (FlauBERT model)"),FGe.forEach(t),xPr=i(me),c3=n(me,"LI",{});var TGe=s(c3);nCe=n(TGe,"STRONG",{});var QIt=s(nCe);$Pr=r(QIt,"funnel"),QIt.forEach(t),kPr=r(TGe," \u2014 "),iZ=n(TGe,"A",{href:!0});var WIt=s(iZ);SPr=r(WIt,"TFFunnelForTokenClassification"),WIt.forEach(t),RPr=r(TGe," (Funnel Transformer model)"),TGe.forEach(t),PPr=i(me),f3=n(me,"LI",{});var MGe=s(f3);sCe=n(MGe,"STRONG",{});var HIt=s(sCe);BPr=r(HIt,"layoutlm"),HIt.forEach(t),NPr=r(MGe," \u2014 "),dZ=n(MGe,"A",{href:!0});var UIt=s(dZ);IPr=r(UIt,"TFLayoutLMForTokenClassification"),UIt.forEach(t),qPr=r(MGe," (LayoutLM model)"),MGe.forEach(t),jPr=i(me),m3=n(me,"LI",{});var EGe=s(m3);lCe=n(EGe,"STRONG",{});var JIt=s(lCe);DPr=r(JIt,"longformer"),JIt.forEach(t),GPr=r(EGe," \u2014 "),cZ=n(EGe,"A",{href:!0});var YIt=s(cZ);OPr=r(YIt,"TFLongformerForTokenClassification"),YIt.forEach(t),VPr=r(EGe," (Longformer model)"),EGe.forEach(t),XPr=i(me),g3=n(me,"LI",{});var CGe=s(g3);iCe=n(CGe,"STRONG",{});var KIt=s(iCe);zPr=r(KIt,"mobilebert"),KIt.forEach(t),QPr=r(CGe," \u2014 "),fZ=n(CGe,"A",{href:!0});var ZIt=s(fZ);WPr=r(ZIt,"TFMobileBertForTokenClassification"),ZIt.forEach(t),HPr=r(CGe," (MobileBERT model)"),CGe.forEach(t),UPr=i(me),h3=n(me,"LI",{});var wGe=s(h3);dCe=n(wGe,"STRONG",{});var eqt=s(dCe);JPr=r(eqt,"mpnet"),eqt.forEach(t),YPr=r(wGe," \u2014 "),mZ=n(wGe,"A",{href:!0});var oqt=s(mZ);KPr=r(oqt,"TFMPNetForTokenClassification"),oqt.forEach(t),ZPr=r(wGe," (MPNet model)"),wGe.forEach(t),eBr=i(me),p3=n(me,"LI",{});var AGe=s(p3);cCe=n(AGe,"STRONG",{});var rqt=s(cCe);oBr=r(rqt,"rembert"),rqt.forEach(t),rBr=r(AGe," \u2014 "),gZ=n(AGe,"A",{href:!0});var tqt=s(gZ);tBr=r(tqt,"TFRemBertForTokenClassification"),tqt.forEach(t),aBr=r(AGe," (RemBERT model)"),AGe.forEach(t),nBr=i(me),_3=n(me,"LI",{});var LGe=s(_3);fCe=n(LGe,"STRONG",{});var aqt=s(fCe);sBr=r(aqt,"roberta"),aqt.forEach(t),lBr=r(LGe," \u2014 "),hZ=n(LGe,"A",{href:!0});var nqt=s(hZ);iBr=r(nqt,"TFRobertaForTokenClassification"),nqt.forEach(t),dBr=r(LGe," (RoBERTa model)"),LGe.forEach(t),cBr=i(me),u3=n(me,"LI",{});var yGe=s(u3);mCe=n(yGe,"STRONG",{});var sqt=s(mCe);fBr=r(sqt,"roformer"),sqt.forEach(t),mBr=r(yGe," \u2014 "),pZ=n(yGe,"A",{href:!0});var lqt=s(pZ);gBr=r(lqt,"TFRoFormerForTokenClassification"),lqt.forEach(t),hBr=r(yGe," (RoFormer model)"),yGe.forEach(t),pBr=i(me),b3=n(me,"LI",{});var xGe=s(b3);gCe=n(xGe,"STRONG",{});var iqt=s(gCe);_Br=r(iqt,"xlm"),iqt.forEach(t),uBr=r(xGe," \u2014 "),_Z=n(xGe,"A",{href:!0});var dqt=s(_Z);bBr=r(dqt,"TFXLMForTokenClassification"),dqt.forEach(t),vBr=r(xGe," (XLM model)"),xGe.forEach(t),FBr=i(me),v3=n(me,"LI",{});var $Ge=s(v3);hCe=n($Ge,"STRONG",{});var cqt=s(hCe);TBr=r(cqt,"xlm-roberta"),cqt.forEach(t),MBr=r($Ge," \u2014 "),uZ=n($Ge,"A",{href:!0});var fqt=s(uZ);EBr=r(fqt,"TFXLMRobertaForTokenClassification"),fqt.forEach(t),CBr=r($Ge," (XLM-RoBERTa model)"),$Ge.forEach(t),wBr=i(me),F3=n(me,"LI",{});var kGe=s(F3);pCe=n(kGe,"STRONG",{});var mqt=s(pCe);ABr=r(mqt,"xlnet"),mqt.forEach(t),LBr=r(kGe," \u2014 "),bZ=n(kGe,"A",{href:!0});var gqt=s(bZ);yBr=r(gqt,"TFXLNetForTokenClassification"),gqt.forEach(t),xBr=r(kGe," (XLNet model)"),kGe.forEach(t),me.forEach(t),$Br=i(Yl),T(T3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),kze=i(f),Dc=n(f,"H2",{class:!0});var DWe=s(Dc);M3=n(DWe,"A",{id:!0,class:!0,href:!0});var hqt=s(M3);_Ce=n(hqt,"SPAN",{});var pqt=s(_Ce);T(Wx.$$.fragment,pqt),pqt.forEach(t),hqt.forEach(t),kBr=i(DWe),uCe=n(DWe,"SPAN",{});var _qt=s(uCe);SBr=r(_qt,"TFAutoModelForQuestionAnswering"),_qt.forEach(t),DWe.forEach(t),Sze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Hx.$$.fragment,Kl),RBr=i(Kl),Gc=n(Kl,"P",{});var Kte=s(Gc);PBr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vZ=n(Kte,"A",{href:!0});var uqt=s(vZ);BBr=r(uqt,"from_pretrained()"),uqt.forEach(t),NBr=r(Kte," class method or the "),FZ=n(Kte,"A",{href:!0});var bqt=s(FZ);IBr=r(bqt,"from_config()"),bqt.forEach(t),qBr=r(Kte,` class
method.`),Kte.forEach(t),jBr=i(Kl),Ux=n(Kl,"P",{});var GWe=s(Ux);DBr=r(GWe,"This class cannot be instantiated directly using "),bCe=n(GWe,"CODE",{});var vqt=s(bCe);GBr=r(vqt,"__init__()"),vqt.forEach(t),OBr=r(GWe," (throws an error)."),GWe.forEach(t),VBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var w7=s(Xt);T(Jx.$$.fragment,w7),XBr=i(w7),vCe=n(w7,"P",{});var Fqt=s(vCe);zBr=r(Fqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fqt.forEach(t),QBr=i(w7),Oc=n(w7,"P",{});var Zte=s(Oc);WBr=r(Zte,`Note:
Loading a model from its configuration file does `),FCe=n(Zte,"STRONG",{});var Tqt=s(FCe);HBr=r(Tqt,"not"),Tqt.forEach(t),UBr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Zte,"A",{href:!0});var Mqt=s(TZ);JBr=r(Mqt,"from_pretrained()"),Mqt.forEach(t),YBr=r(Zte," to load the model weights."),Zte.forEach(t),KBr=i(w7),T(E3.$$.fragment,w7),w7.forEach(t),ZBr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(Yx.$$.fragment,Zl),eNr=i(Zl),TCe=n(Zl,"P",{});var Eqt=s(TCe);oNr=r(Eqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Eqt.forEach(t),rNr=i(Zl),bn=n(Zl,"P",{});var A7=s(bn);tNr=r(A7,"The model class to instantiate is selected based on the "),MCe=n(A7,"CODE",{});var Cqt=s(MCe);aNr=r(Cqt,"model_type"),Cqt.forEach(t),nNr=r(A7,` property of the config object (either
passed as an argument or loaded from `),ECe=n(A7,"CODE",{});var wqt=s(ECe);sNr=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),lNr=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=n(A7,"CODE",{});var Aqt=s(CCe);iNr=r(Aqt,"pretrained_model_name_or_path"),Aqt.forEach(t),dNr=r(A7,":"),A7.forEach(t),cNr=i(Zl),ce=n(Zl,"UL",{});var ge=s(ce);C3=n(ge,"LI",{});var SGe=s(C3);wCe=n(SGe,"STRONG",{});var Lqt=s(wCe);fNr=r(Lqt,"albert"),Lqt.forEach(t),mNr=r(SGe," \u2014 "),MZ=n(SGe,"A",{href:!0});var yqt=s(MZ);gNr=r(yqt,"TFAlbertForQuestionAnswering"),yqt.forEach(t),hNr=r(SGe," (ALBERT model)"),SGe.forEach(t),pNr=i(ge),w3=n(ge,"LI",{});var RGe=s(w3);ACe=n(RGe,"STRONG",{});var xqt=s(ACe);_Nr=r(xqt,"bert"),xqt.forEach(t),uNr=r(RGe," \u2014 "),EZ=n(RGe,"A",{href:!0});var $qt=s(EZ);bNr=r($qt,"TFBertForQuestionAnswering"),$qt.forEach(t),vNr=r(RGe," (BERT model)"),RGe.forEach(t),FNr=i(ge),A3=n(ge,"LI",{});var PGe=s(A3);LCe=n(PGe,"STRONG",{});var kqt=s(LCe);TNr=r(kqt,"camembert"),kqt.forEach(t),MNr=r(PGe," \u2014 "),CZ=n(PGe,"A",{href:!0});var Sqt=s(CZ);ENr=r(Sqt,"TFCamembertForQuestionAnswering"),Sqt.forEach(t),CNr=r(PGe," (CamemBERT model)"),PGe.forEach(t),wNr=i(ge),L3=n(ge,"LI",{});var BGe=s(L3);yCe=n(BGe,"STRONG",{});var Rqt=s(yCe);ANr=r(Rqt,"convbert"),Rqt.forEach(t),LNr=r(BGe," \u2014 "),wZ=n(BGe,"A",{href:!0});var Pqt=s(wZ);yNr=r(Pqt,"TFConvBertForQuestionAnswering"),Pqt.forEach(t),xNr=r(BGe," (ConvBERT model)"),BGe.forEach(t),$Nr=i(ge),y3=n(ge,"LI",{});var NGe=s(y3);xCe=n(NGe,"STRONG",{});var Bqt=s(xCe);kNr=r(Bqt,"deberta"),Bqt.forEach(t),SNr=r(NGe," \u2014 "),AZ=n(NGe,"A",{href:!0});var Nqt=s(AZ);RNr=r(Nqt,"TFDebertaForQuestionAnswering"),Nqt.forEach(t),PNr=r(NGe," (DeBERTa model)"),NGe.forEach(t),BNr=i(ge),x3=n(ge,"LI",{});var IGe=s(x3);$Ce=n(IGe,"STRONG",{});var Iqt=s($Ce);NNr=r(Iqt,"deberta-v2"),Iqt.forEach(t),INr=r(IGe," \u2014 "),LZ=n(IGe,"A",{href:!0});var qqt=s(LZ);qNr=r(qqt,"TFDebertaV2ForQuestionAnswering"),qqt.forEach(t),jNr=r(IGe," (DeBERTa-v2 model)"),IGe.forEach(t),DNr=i(ge),$3=n(ge,"LI",{});var qGe=s($3);kCe=n(qGe,"STRONG",{});var jqt=s(kCe);GNr=r(jqt,"distilbert"),jqt.forEach(t),ONr=r(qGe," \u2014 "),yZ=n(qGe,"A",{href:!0});var Dqt=s(yZ);VNr=r(Dqt,"TFDistilBertForQuestionAnswering"),Dqt.forEach(t),XNr=r(qGe," (DistilBERT model)"),qGe.forEach(t),zNr=i(ge),k3=n(ge,"LI",{});var jGe=s(k3);SCe=n(jGe,"STRONG",{});var Gqt=s(SCe);QNr=r(Gqt,"electra"),Gqt.forEach(t),WNr=r(jGe," \u2014 "),xZ=n(jGe,"A",{href:!0});var Oqt=s(xZ);HNr=r(Oqt,"TFElectraForQuestionAnswering"),Oqt.forEach(t),UNr=r(jGe," (ELECTRA model)"),jGe.forEach(t),JNr=i(ge),S3=n(ge,"LI",{});var DGe=s(S3);RCe=n(DGe,"STRONG",{});var Vqt=s(RCe);YNr=r(Vqt,"flaubert"),Vqt.forEach(t),KNr=r(DGe," \u2014 "),$Z=n(DGe,"A",{href:!0});var Xqt=s($Z);ZNr=r(Xqt,"TFFlaubertForQuestionAnsweringSimple"),Xqt.forEach(t),eIr=r(DGe," (FlauBERT model)"),DGe.forEach(t),oIr=i(ge),R3=n(ge,"LI",{});var GGe=s(R3);PCe=n(GGe,"STRONG",{});var zqt=s(PCe);rIr=r(zqt,"funnel"),zqt.forEach(t),tIr=r(GGe," \u2014 "),kZ=n(GGe,"A",{href:!0});var Qqt=s(kZ);aIr=r(Qqt,"TFFunnelForQuestionAnswering"),Qqt.forEach(t),nIr=r(GGe," (Funnel Transformer model)"),GGe.forEach(t),sIr=i(ge),P3=n(ge,"LI",{});var OGe=s(P3);BCe=n(OGe,"STRONG",{});var Wqt=s(BCe);lIr=r(Wqt,"gptj"),Wqt.forEach(t),iIr=r(OGe," \u2014 "),SZ=n(OGe,"A",{href:!0});var Hqt=s(SZ);dIr=r(Hqt,"TFGPTJForQuestionAnswering"),Hqt.forEach(t),cIr=r(OGe," (GPT-J model)"),OGe.forEach(t),fIr=i(ge),B3=n(ge,"LI",{});var VGe=s(B3);NCe=n(VGe,"STRONG",{});var Uqt=s(NCe);mIr=r(Uqt,"longformer"),Uqt.forEach(t),gIr=r(VGe," \u2014 "),RZ=n(VGe,"A",{href:!0});var Jqt=s(RZ);hIr=r(Jqt,"TFLongformerForQuestionAnswering"),Jqt.forEach(t),pIr=r(VGe," (Longformer model)"),VGe.forEach(t),_Ir=i(ge),N3=n(ge,"LI",{});var XGe=s(N3);ICe=n(XGe,"STRONG",{});var Yqt=s(ICe);uIr=r(Yqt,"mobilebert"),Yqt.forEach(t),bIr=r(XGe," \u2014 "),PZ=n(XGe,"A",{href:!0});var Kqt=s(PZ);vIr=r(Kqt,"TFMobileBertForQuestionAnswering"),Kqt.forEach(t),FIr=r(XGe," (MobileBERT model)"),XGe.forEach(t),TIr=i(ge),I3=n(ge,"LI",{});var zGe=s(I3);qCe=n(zGe,"STRONG",{});var Zqt=s(qCe);MIr=r(Zqt,"mpnet"),Zqt.forEach(t),EIr=r(zGe," \u2014 "),BZ=n(zGe,"A",{href:!0});var ejt=s(BZ);CIr=r(ejt,"TFMPNetForQuestionAnswering"),ejt.forEach(t),wIr=r(zGe," (MPNet model)"),zGe.forEach(t),AIr=i(ge),q3=n(ge,"LI",{});var QGe=s(q3);jCe=n(QGe,"STRONG",{});var ojt=s(jCe);LIr=r(ojt,"rembert"),ojt.forEach(t),yIr=r(QGe," \u2014 "),NZ=n(QGe,"A",{href:!0});var rjt=s(NZ);xIr=r(rjt,"TFRemBertForQuestionAnswering"),rjt.forEach(t),$Ir=r(QGe," (RemBERT model)"),QGe.forEach(t),kIr=i(ge),j3=n(ge,"LI",{});var WGe=s(j3);DCe=n(WGe,"STRONG",{});var tjt=s(DCe);SIr=r(tjt,"roberta"),tjt.forEach(t),RIr=r(WGe," \u2014 "),IZ=n(WGe,"A",{href:!0});var ajt=s(IZ);PIr=r(ajt,"TFRobertaForQuestionAnswering"),ajt.forEach(t),BIr=r(WGe," (RoBERTa model)"),WGe.forEach(t),NIr=i(ge),D3=n(ge,"LI",{});var HGe=s(D3);GCe=n(HGe,"STRONG",{});var njt=s(GCe);IIr=r(njt,"roformer"),njt.forEach(t),qIr=r(HGe," \u2014 "),qZ=n(HGe,"A",{href:!0});var sjt=s(qZ);jIr=r(sjt,"TFRoFormerForQuestionAnswering"),sjt.forEach(t),DIr=r(HGe," (RoFormer model)"),HGe.forEach(t),GIr=i(ge),G3=n(ge,"LI",{});var UGe=s(G3);OCe=n(UGe,"STRONG",{});var ljt=s(OCe);OIr=r(ljt,"xlm"),ljt.forEach(t),VIr=r(UGe," \u2014 "),jZ=n(UGe,"A",{href:!0});var ijt=s(jZ);XIr=r(ijt,"TFXLMForQuestionAnsweringSimple"),ijt.forEach(t),zIr=r(UGe," (XLM model)"),UGe.forEach(t),QIr=i(ge),O3=n(ge,"LI",{});var JGe=s(O3);VCe=n(JGe,"STRONG",{});var djt=s(VCe);WIr=r(djt,"xlm-roberta"),djt.forEach(t),HIr=r(JGe," \u2014 "),DZ=n(JGe,"A",{href:!0});var cjt=s(DZ);UIr=r(cjt,"TFXLMRobertaForQuestionAnswering"),cjt.forEach(t),JIr=r(JGe," (XLM-RoBERTa model)"),JGe.forEach(t),YIr=i(ge),V3=n(ge,"LI",{});var YGe=s(V3);XCe=n(YGe,"STRONG",{});var fjt=s(XCe);KIr=r(fjt,"xlnet"),fjt.forEach(t),ZIr=r(YGe," \u2014 "),GZ=n(YGe,"A",{href:!0});var mjt=s(GZ);eqr=r(mjt,"TFXLNetForQuestionAnsweringSimple"),mjt.forEach(t),oqr=r(YGe," (XLNet model)"),YGe.forEach(t),ge.forEach(t),rqr=i(Zl),T(X3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Rze=i(f),Vc=n(f,"H2",{class:!0});var OWe=s(Vc);z3=n(OWe,"A",{id:!0,class:!0,href:!0});var gjt=s(z3);zCe=n(gjt,"SPAN",{});var hjt=s(zCe);T(Kx.$$.fragment,hjt),hjt.forEach(t),gjt.forEach(t),tqr=i(OWe),QCe=n(OWe,"SPAN",{});var pjt=s(QCe);aqr=r(pjt,"TFAutoModelForVision2Seq"),pjt.forEach(t),OWe.forEach(t),Pze=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(Zx.$$.fragment,ei),nqr=i(ei),Xc=n(ei,"P",{});var eae=s(Xc);sqr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OZ=n(eae,"A",{href:!0});var _jt=s(OZ);lqr=r(_jt,"from_pretrained()"),_jt.forEach(t),iqr=r(eae," class method or the "),VZ=n(eae,"A",{href:!0});var ujt=s(VZ);dqr=r(ujt,"from_config()"),ujt.forEach(t),cqr=r(eae,` class
method.`),eae.forEach(t),fqr=i(ei),e$=n(ei,"P",{});var VWe=s(e$);mqr=r(VWe,"This class cannot be instantiated directly using "),WCe=n(VWe,"CODE",{});var bjt=s(WCe);gqr=r(bjt,"__init__()"),bjt.forEach(t),hqr=r(VWe," (throws an error)."),VWe.forEach(t),pqr=i(ei),zt=n(ei,"DIV",{class:!0});var L7=s(zt);T(o$.$$.fragment,L7),_qr=i(L7),HCe=n(L7,"P",{});var vjt=s(HCe);uqr=r(vjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vjt.forEach(t),bqr=i(L7),zc=n(L7,"P",{});var oae=s(zc);vqr=r(oae,`Note:
Loading a model from its configuration file does `),UCe=n(oae,"STRONG",{});var Fjt=s(UCe);Fqr=r(Fjt,"not"),Fjt.forEach(t),Tqr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(oae,"A",{href:!0});var Tjt=s(XZ);Mqr=r(Tjt,"from_pretrained()"),Tjt.forEach(t),Eqr=r(oae," to load the model weights."),oae.forEach(t),Cqr=i(L7),T(Q3.$$.fragment,L7),L7.forEach(t),wqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(r$.$$.fragment,oi),Aqr=i(oi),JCe=n(oi,"P",{});var Mjt=s(JCe);Lqr=r(Mjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mjt.forEach(t),yqr=i(oi),vn=n(oi,"P",{});var y7=s(vn);xqr=r(y7,"The model class to instantiate is selected based on the "),YCe=n(y7,"CODE",{});var Ejt=s(YCe);$qr=r(Ejt,"model_type"),Ejt.forEach(t),kqr=r(y7,` property of the config object (either
passed as an argument or loaded from `),KCe=n(y7,"CODE",{});var Cjt=s(KCe);Sqr=r(Cjt,"pretrained_model_name_or_path"),Cjt.forEach(t),Rqr=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(y7,"CODE",{});var wjt=s(ZCe);Pqr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),Bqr=r(y7,":"),y7.forEach(t),Nqr=i(oi),e3e=n(oi,"UL",{});var Ajt=s(e3e);W3=n(Ajt,"LI",{});var KGe=s(W3);o3e=n(KGe,"STRONG",{});var Ljt=s(o3e);Iqr=r(Ljt,"vision-encoder-decoder"),Ljt.forEach(t),qqr=r(KGe," \u2014 "),zZ=n(KGe,"A",{href:!0});var yjt=s(zZ);jqr=r(yjt,"TFVisionEncoderDecoderModel"),yjt.forEach(t),Dqr=r(KGe," (Vision Encoder decoder model)"),KGe.forEach(t),Ajt.forEach(t),Gqr=i(oi),T(H3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Bze=i(f),Qc=n(f,"H2",{class:!0});var XWe=s(Qc);U3=n(XWe,"A",{id:!0,class:!0,href:!0});var xjt=s(U3);r3e=n(xjt,"SPAN",{});var $jt=s(r3e);T(t$.$$.fragment,$jt),$jt.forEach(t),xjt.forEach(t),Oqr=i(XWe),t3e=n(XWe,"SPAN",{});var kjt=s(t3e);Vqr=r(kjt,"TFAutoModelForSpeechSeq2Seq"),kjt.forEach(t),XWe.forEach(t),Nze=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(a$.$$.fragment,ri),Xqr=i(ri),Wc=n(ri,"P",{});var rae=s(Wc);zqr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QZ=n(rae,"A",{href:!0});var Sjt=s(QZ);Qqr=r(Sjt,"from_pretrained()"),Sjt.forEach(t),Wqr=r(rae," class method or the "),WZ=n(rae,"A",{href:!0});var Rjt=s(WZ);Hqr=r(Rjt,"from_config()"),Rjt.forEach(t),Uqr=r(rae,` class
method.`),rae.forEach(t),Jqr=i(ri),n$=n(ri,"P",{});var zWe=s(n$);Yqr=r(zWe,"This class cannot be instantiated directly using "),a3e=n(zWe,"CODE",{});var Pjt=s(a3e);Kqr=r(Pjt,"__init__()"),Pjt.forEach(t),Zqr=r(zWe," (throws an error)."),zWe.forEach(t),ejr=i(ri),Qt=n(ri,"DIV",{class:!0});var x7=s(Qt);T(s$.$$.fragment,x7),ojr=i(x7),n3e=n(x7,"P",{});var Bjt=s(n3e);rjr=r(Bjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bjt.forEach(t),tjr=i(x7),Hc=n(x7,"P",{});var tae=s(Hc);ajr=r(tae,`Note:
Loading a model from its configuration file does `),s3e=n(tae,"STRONG",{});var Njt=s(s3e);njr=r(Njt,"not"),Njt.forEach(t),sjr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(tae,"A",{href:!0});var Ijt=s(HZ);ljr=r(Ijt,"from_pretrained()"),Ijt.forEach(t),ijr=r(tae," to load the model weights."),tae.forEach(t),djr=i(x7),T(J3.$$.fragment,x7),x7.forEach(t),cjr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(l$.$$.fragment,ti),fjr=i(ti),l3e=n(ti,"P",{});var qjt=s(l3e);mjr=r(qjt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qjt.forEach(t),gjr=i(ti),Fn=n(ti,"P",{});var $7=s(Fn);hjr=r($7,"The model class to instantiate is selected based on the "),i3e=n($7,"CODE",{});var jjt=s(i3e);pjr=r(jjt,"model_type"),jjt.forEach(t),_jr=r($7,` property of the config object (either
passed as an argument or loaded from `),d3e=n($7,"CODE",{});var Djt=s(d3e);ujr=r(Djt,"pretrained_model_name_or_path"),Djt.forEach(t),bjr=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n($7,"CODE",{});var Gjt=s(c3e);vjr=r(Gjt,"pretrained_model_name_or_path"),Gjt.forEach(t),Fjr=r($7,":"),$7.forEach(t),Tjr=i(ti),f3e=n(ti,"UL",{});var Ojt=s(f3e);Y3=n(Ojt,"LI",{});var ZGe=s(Y3);m3e=n(ZGe,"STRONG",{});var Vjt=s(m3e);Mjr=r(Vjt,"speech_to_text"),Vjt.forEach(t),Ejr=r(ZGe," \u2014 "),UZ=n(ZGe,"A",{href:!0});var Xjt=s(UZ);Cjr=r(Xjt,"TFSpeech2TextForConditionalGeneration"),Xjt.forEach(t),wjr=r(ZGe," (Speech2Text model)"),ZGe.forEach(t),Ojt.forEach(t),Ajr=i(ti),T(K3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Ize=i(f),Uc=n(f,"H2",{class:!0});var QWe=s(Uc);Z3=n(QWe,"A",{id:!0,class:!0,href:!0});var zjt=s(Z3);g3e=n(zjt,"SPAN",{});var Qjt=s(g3e);T(i$.$$.fragment,Qjt),Qjt.forEach(t),zjt.forEach(t),Ljr=i(QWe),h3e=n(QWe,"SPAN",{});var Wjt=s(h3e);yjr=r(Wjt,"FlaxAutoModel"),Wjt.forEach(t),QWe.forEach(t),qze=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(d$.$$.fragment,ai),xjr=i(ai),Jc=n(ai,"P",{});var aae=s(Jc);$jr=r(aae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JZ=n(aae,"A",{href:!0});var Hjt=s(JZ);kjr=r(Hjt,"from_pretrained()"),Hjt.forEach(t),Sjr=r(aae," class method or the "),YZ=n(aae,"A",{href:!0});var Ujt=s(YZ);Rjr=r(Ujt,"from_config()"),Ujt.forEach(t),Pjr=r(aae,` class
method.`),aae.forEach(t),Bjr=i(ai),c$=n(ai,"P",{});var WWe=s(c$);Njr=r(WWe,"This class cannot be instantiated directly using "),p3e=n(WWe,"CODE",{});var Jjt=s(p3e);Ijr=r(Jjt,"__init__()"),Jjt.forEach(t),qjr=r(WWe," (throws an error)."),WWe.forEach(t),jjr=i(ai),Wt=n(ai,"DIV",{class:!0});var k7=s(Wt);T(f$.$$.fragment,k7),Djr=i(k7),_3e=n(k7,"P",{});var Yjt=s(_3e);Gjr=r(Yjt,"Instantiates one of the base model classes of the library from a configuration."),Yjt.forEach(t),Ojr=i(k7),Yc=n(k7,"P",{});var nae=s(Yc);Vjr=r(nae,`Note:
Loading a model from its configuration file does `),u3e=n(nae,"STRONG",{});var Kjt=s(u3e);Xjr=r(Kjt,"not"),Kjt.forEach(t),zjr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(nae,"A",{href:!0});var Zjt=s(KZ);Qjr=r(Zjt,"from_pretrained()"),Zjt.forEach(t),Wjr=r(nae," to load the model weights."),nae.forEach(t),Hjr=i(k7),T(e5.$$.fragment,k7),k7.forEach(t),Ujr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(m$.$$.fragment,ni),Jjr=i(ni),b3e=n(ni,"P",{});var eDt=s(b3e);Yjr=r(eDt,"Instantiate one of the base model classes of the library from a pretrained model."),eDt.forEach(t),Kjr=i(ni),Tn=n(ni,"P",{});var S7=s(Tn);Zjr=r(S7,"The model class to instantiate is selected based on the "),v3e=n(S7,"CODE",{});var oDt=s(v3e);eDr=r(oDt,"model_type"),oDt.forEach(t),oDr=r(S7,` property of the config object (either
passed as an argument or loaded from `),F3e=n(S7,"CODE",{});var rDt=s(F3e);rDr=r(rDt,"pretrained_model_name_or_path"),rDt.forEach(t),tDr=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=n(S7,"CODE",{});var tDt=s(T3e);aDr=r(tDt,"pretrained_model_name_or_path"),tDt.forEach(t),nDr=r(S7,":"),S7.forEach(t),sDr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);o5=n(ae,"LI",{});var eOe=s(o5);M3e=n(eOe,"STRONG",{});var aDt=s(M3e);lDr=r(aDt,"albert"),aDt.forEach(t),iDr=r(eOe," \u2014 "),ZZ=n(eOe,"A",{href:!0});var nDt=s(ZZ);dDr=r(nDt,"FlaxAlbertModel"),nDt.forEach(t),cDr=r(eOe," (ALBERT model)"),eOe.forEach(t),fDr=i(ae),r5=n(ae,"LI",{});var oOe=s(r5);E3e=n(oOe,"STRONG",{});var sDt=s(E3e);mDr=r(sDt,"bart"),sDt.forEach(t),gDr=r(oOe," \u2014 "),eee=n(oOe,"A",{href:!0});var lDt=s(eee);hDr=r(lDt,"FlaxBartModel"),lDt.forEach(t),pDr=r(oOe," (BART model)"),oOe.forEach(t),_Dr=i(ae),t5=n(ae,"LI",{});var rOe=s(t5);C3e=n(rOe,"STRONG",{});var iDt=s(C3e);uDr=r(iDt,"beit"),iDt.forEach(t),bDr=r(rOe," \u2014 "),oee=n(rOe,"A",{href:!0});var dDt=s(oee);vDr=r(dDt,"FlaxBeitModel"),dDt.forEach(t),FDr=r(rOe," (BEiT model)"),rOe.forEach(t),TDr=i(ae),a5=n(ae,"LI",{});var tOe=s(a5);w3e=n(tOe,"STRONG",{});var cDt=s(w3e);MDr=r(cDt,"bert"),cDt.forEach(t),EDr=r(tOe," \u2014 "),ree=n(tOe,"A",{href:!0});var fDt=s(ree);CDr=r(fDt,"FlaxBertModel"),fDt.forEach(t),wDr=r(tOe," (BERT model)"),tOe.forEach(t),ADr=i(ae),n5=n(ae,"LI",{});var aOe=s(n5);A3e=n(aOe,"STRONG",{});var mDt=s(A3e);LDr=r(mDt,"big_bird"),mDt.forEach(t),yDr=r(aOe," \u2014 "),tee=n(aOe,"A",{href:!0});var gDt=s(tee);xDr=r(gDt,"FlaxBigBirdModel"),gDt.forEach(t),$Dr=r(aOe," (BigBird model)"),aOe.forEach(t),kDr=i(ae),s5=n(ae,"LI",{});var nOe=s(s5);L3e=n(nOe,"STRONG",{});var hDt=s(L3e);SDr=r(hDt,"blenderbot"),hDt.forEach(t),RDr=r(nOe," \u2014 "),aee=n(nOe,"A",{href:!0});var pDt=s(aee);PDr=r(pDt,"FlaxBlenderbotModel"),pDt.forEach(t),BDr=r(nOe," (Blenderbot model)"),nOe.forEach(t),NDr=i(ae),l5=n(ae,"LI",{});var sOe=s(l5);y3e=n(sOe,"STRONG",{});var _Dt=s(y3e);IDr=r(_Dt,"blenderbot-small"),_Dt.forEach(t),qDr=r(sOe," \u2014 "),nee=n(sOe,"A",{href:!0});var uDt=s(nee);jDr=r(uDt,"FlaxBlenderbotSmallModel"),uDt.forEach(t),DDr=r(sOe," (BlenderbotSmall model)"),sOe.forEach(t),GDr=i(ae),i5=n(ae,"LI",{});var lOe=s(i5);x3e=n(lOe,"STRONG",{});var bDt=s(x3e);ODr=r(bDt,"clip"),bDt.forEach(t),VDr=r(lOe," \u2014 "),see=n(lOe,"A",{href:!0});var vDt=s(see);XDr=r(vDt,"FlaxCLIPModel"),vDt.forEach(t),zDr=r(lOe," (CLIP model)"),lOe.forEach(t),QDr=i(ae),d5=n(ae,"LI",{});var iOe=s(d5);$3e=n(iOe,"STRONG",{});var FDt=s($3e);WDr=r(FDt,"distilbert"),FDt.forEach(t),HDr=r(iOe," \u2014 "),lee=n(iOe,"A",{href:!0});var TDt=s(lee);UDr=r(TDt,"FlaxDistilBertModel"),TDt.forEach(t),JDr=r(iOe," (DistilBERT model)"),iOe.forEach(t),YDr=i(ae),c5=n(ae,"LI",{});var dOe=s(c5);k3e=n(dOe,"STRONG",{});var MDt=s(k3e);KDr=r(MDt,"electra"),MDt.forEach(t),ZDr=r(dOe," \u2014 "),iee=n(dOe,"A",{href:!0});var EDt=s(iee);eGr=r(EDt,"FlaxElectraModel"),EDt.forEach(t),oGr=r(dOe," (ELECTRA model)"),dOe.forEach(t),rGr=i(ae),f5=n(ae,"LI",{});var cOe=s(f5);S3e=n(cOe,"STRONG",{});var CDt=s(S3e);tGr=r(CDt,"gpt2"),CDt.forEach(t),aGr=r(cOe," \u2014 "),dee=n(cOe,"A",{href:!0});var wDt=s(dee);nGr=r(wDt,"FlaxGPT2Model"),wDt.forEach(t),sGr=r(cOe," (OpenAI GPT-2 model)"),cOe.forEach(t),lGr=i(ae),m5=n(ae,"LI",{});var fOe=s(m5);R3e=n(fOe,"STRONG",{});var ADt=s(R3e);iGr=r(ADt,"gpt_neo"),ADt.forEach(t),dGr=r(fOe," \u2014 "),cee=n(fOe,"A",{href:!0});var LDt=s(cee);cGr=r(LDt,"FlaxGPTNeoModel"),LDt.forEach(t),fGr=r(fOe," (GPT Neo model)"),fOe.forEach(t),mGr=i(ae),g5=n(ae,"LI",{});var mOe=s(g5);P3e=n(mOe,"STRONG",{});var yDt=s(P3e);gGr=r(yDt,"gptj"),yDt.forEach(t),hGr=r(mOe," \u2014 "),fee=n(mOe,"A",{href:!0});var xDt=s(fee);pGr=r(xDt,"FlaxGPTJModel"),xDt.forEach(t),_Gr=r(mOe," (GPT-J model)"),mOe.forEach(t),uGr=i(ae),h5=n(ae,"LI",{});var gOe=s(h5);B3e=n(gOe,"STRONG",{});var $Dt=s(B3e);bGr=r($Dt,"longt5"),$Dt.forEach(t),vGr=r(gOe," \u2014 "),mee=n(gOe,"A",{href:!0});var kDt=s(mee);FGr=r(kDt,"FlaxLongT5Model"),kDt.forEach(t),TGr=r(gOe," (LongT5 model)"),gOe.forEach(t),MGr=i(ae),p5=n(ae,"LI",{});var hOe=s(p5);N3e=n(hOe,"STRONG",{});var SDt=s(N3e);EGr=r(SDt,"marian"),SDt.forEach(t),CGr=r(hOe," \u2014 "),gee=n(hOe,"A",{href:!0});var RDt=s(gee);wGr=r(RDt,"FlaxMarianModel"),RDt.forEach(t),AGr=r(hOe," (Marian model)"),hOe.forEach(t),LGr=i(ae),_5=n(ae,"LI",{});var pOe=s(_5);I3e=n(pOe,"STRONG",{});var PDt=s(I3e);yGr=r(PDt,"mbart"),PDt.forEach(t),xGr=r(pOe," \u2014 "),hee=n(pOe,"A",{href:!0});var BDt=s(hee);$Gr=r(BDt,"FlaxMBartModel"),BDt.forEach(t),kGr=r(pOe," (mBART model)"),pOe.forEach(t),SGr=i(ae),u5=n(ae,"LI",{});var _Oe=s(u5);q3e=n(_Oe,"STRONG",{});var NDt=s(q3e);RGr=r(NDt,"mt5"),NDt.forEach(t),PGr=r(_Oe," \u2014 "),pee=n(_Oe,"A",{href:!0});var IDt=s(pee);BGr=r(IDt,"FlaxMT5Model"),IDt.forEach(t),NGr=r(_Oe," (MT5 model)"),_Oe.forEach(t),IGr=i(ae),b5=n(ae,"LI",{});var uOe=s(b5);j3e=n(uOe,"STRONG",{});var qDt=s(j3e);qGr=r(qDt,"opt"),qDt.forEach(t),jGr=r(uOe," \u2014 "),_ee=n(uOe,"A",{href:!0});var jDt=s(_ee);DGr=r(jDt,"FlaxOPTModel"),jDt.forEach(t),GGr=r(uOe," (OPT model)"),uOe.forEach(t),OGr=i(ae),v5=n(ae,"LI",{});var bOe=s(v5);D3e=n(bOe,"STRONG",{});var DDt=s(D3e);VGr=r(DDt,"pegasus"),DDt.forEach(t),XGr=r(bOe," \u2014 "),uee=n(bOe,"A",{href:!0});var GDt=s(uee);zGr=r(GDt,"FlaxPegasusModel"),GDt.forEach(t),QGr=r(bOe," (Pegasus model)"),bOe.forEach(t),WGr=i(ae),F5=n(ae,"LI",{});var vOe=s(F5);G3e=n(vOe,"STRONG",{});var ODt=s(G3e);HGr=r(ODt,"roberta"),ODt.forEach(t),UGr=r(vOe," \u2014 "),bee=n(vOe,"A",{href:!0});var VDt=s(bee);JGr=r(VDt,"FlaxRobertaModel"),VDt.forEach(t),YGr=r(vOe," (RoBERTa model)"),vOe.forEach(t),KGr=i(ae),T5=n(ae,"LI",{});var FOe=s(T5);O3e=n(FOe,"STRONG",{});var XDt=s(O3e);ZGr=r(XDt,"roformer"),XDt.forEach(t),eOr=r(FOe," \u2014 "),vee=n(FOe,"A",{href:!0});var zDt=s(vee);oOr=r(zDt,"FlaxRoFormerModel"),zDt.forEach(t),rOr=r(FOe," (RoFormer model)"),FOe.forEach(t),tOr=i(ae),M5=n(ae,"LI",{});var TOe=s(M5);V3e=n(TOe,"STRONG",{});var QDt=s(V3e);aOr=r(QDt,"t5"),QDt.forEach(t),nOr=r(TOe," \u2014 "),Fee=n(TOe,"A",{href:!0});var WDt=s(Fee);sOr=r(WDt,"FlaxT5Model"),WDt.forEach(t),lOr=r(TOe," (T5 model)"),TOe.forEach(t),iOr=i(ae),E5=n(ae,"LI",{});var MOe=s(E5);X3e=n(MOe,"STRONG",{});var HDt=s(X3e);dOr=r(HDt,"vision-text-dual-encoder"),HDt.forEach(t),cOr=r(MOe," \u2014 "),Tee=n(MOe,"A",{href:!0});var UDt=s(Tee);fOr=r(UDt,"FlaxVisionTextDualEncoderModel"),UDt.forEach(t),mOr=r(MOe," (VisionTextDualEncoder model)"),MOe.forEach(t),gOr=i(ae),C5=n(ae,"LI",{});var EOe=s(C5);z3e=n(EOe,"STRONG",{});var JDt=s(z3e);hOr=r(JDt,"vit"),JDt.forEach(t),pOr=r(EOe," \u2014 "),Mee=n(EOe,"A",{href:!0});var YDt=s(Mee);_Or=r(YDt,"FlaxViTModel"),YDt.forEach(t),uOr=r(EOe," (ViT model)"),EOe.forEach(t),bOr=i(ae),w5=n(ae,"LI",{});var COe=s(w5);Q3e=n(COe,"STRONG",{});var KDt=s(Q3e);vOr=r(KDt,"wav2vec2"),KDt.forEach(t),FOr=r(COe," \u2014 "),Eee=n(COe,"A",{href:!0});var ZDt=s(Eee);TOr=r(ZDt,"FlaxWav2Vec2Model"),ZDt.forEach(t),MOr=r(COe," (Wav2Vec2 model)"),COe.forEach(t),EOr=i(ae),A5=n(ae,"LI",{});var wOe=s(A5);W3e=n(wOe,"STRONG",{});var eGt=s(W3e);COr=r(eGt,"xglm"),eGt.forEach(t),wOr=r(wOe," \u2014 "),Cee=n(wOe,"A",{href:!0});var oGt=s(Cee);AOr=r(oGt,"FlaxXGLMModel"),oGt.forEach(t),LOr=r(wOe," (XGLM model)"),wOe.forEach(t),yOr=i(ae),L5=n(ae,"LI",{});var AOe=s(L5);H3e=n(AOe,"STRONG",{});var rGt=s(H3e);xOr=r(rGt,"xlm-roberta"),rGt.forEach(t),$Or=r(AOe," \u2014 "),wee=n(AOe,"A",{href:!0});var tGt=s(wee);kOr=r(tGt,"FlaxXLMRobertaModel"),tGt.forEach(t),SOr=r(AOe," (XLM-RoBERTa model)"),AOe.forEach(t),ae.forEach(t),ROr=i(ni),T(y5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),jze=i(f),Kc=n(f,"H2",{class:!0});var HWe=s(Kc);x5=n(HWe,"A",{id:!0,class:!0,href:!0});var aGt=s(x5);U3e=n(aGt,"SPAN",{});var nGt=s(U3e);T(g$.$$.fragment,nGt),nGt.forEach(t),aGt.forEach(t),POr=i(HWe),J3e=n(HWe,"SPAN",{});var sGt=s(J3e);BOr=r(sGt,"FlaxAutoModelForCausalLM"),sGt.forEach(t),HWe.forEach(t),Dze=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(h$.$$.fragment,si),NOr=i(si),Zc=n(si,"P",{});var sae=s(Zc);IOr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=n(sae,"A",{href:!0});var lGt=s(Aee);qOr=r(lGt,"from_pretrained()"),lGt.forEach(t),jOr=r(sae," class method or the "),Lee=n(sae,"A",{href:!0});var iGt=s(Lee);DOr=r(iGt,"from_config()"),iGt.forEach(t),GOr=r(sae,` class
method.`),sae.forEach(t),OOr=i(si),p$=n(si,"P",{});var UWe=s(p$);VOr=r(UWe,"This class cannot be instantiated directly using "),Y3e=n(UWe,"CODE",{});var dGt=s(Y3e);XOr=r(dGt,"__init__()"),dGt.forEach(t),zOr=r(UWe," (throws an error)."),UWe.forEach(t),QOr=i(si),Ht=n(si,"DIV",{class:!0});var R7=s(Ht);T(_$.$$.fragment,R7),WOr=i(R7),K3e=n(R7,"P",{});var cGt=s(K3e);HOr=r(cGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cGt.forEach(t),UOr=i(R7),ef=n(R7,"P",{});var lae=s(ef);JOr=r(lae,`Note:
Loading a model from its configuration file does `),Z3e=n(lae,"STRONG",{});var fGt=s(Z3e);YOr=r(fGt,"not"),fGt.forEach(t),KOr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(lae,"A",{href:!0});var mGt=s(yee);ZOr=r(mGt,"from_pretrained()"),mGt.forEach(t),eVr=r(lae," to load the model weights."),lae.forEach(t),oVr=i(R7),T($5.$$.fragment,R7),R7.forEach(t),rVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(u$.$$.fragment,li),tVr=i(li),e5e=n(li,"P",{});var gGt=s(e5e);aVr=r(gGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gGt.forEach(t),nVr=i(li),Mn=n(li,"P",{});var P7=s(Mn);sVr=r(P7,"The model class to instantiate is selected based on the "),o5e=n(P7,"CODE",{});var hGt=s(o5e);lVr=r(hGt,"model_type"),hGt.forEach(t),iVr=r(P7,` property of the config object (either
passed as an argument or loaded from `),r5e=n(P7,"CODE",{});var pGt=s(r5e);dVr=r(pGt,"pretrained_model_name_or_path"),pGt.forEach(t),cVr=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(P7,"CODE",{});var _Gt=s(t5e);fVr=r(_Gt,"pretrained_model_name_or_path"),_Gt.forEach(t),mVr=r(P7,":"),P7.forEach(t),gVr=i(li),xe=n(li,"UL",{});var Ie=s(xe);k5=n(Ie,"LI",{});var LOe=s(k5);a5e=n(LOe,"STRONG",{});var uGt=s(a5e);hVr=r(uGt,"bart"),uGt.forEach(t),pVr=r(LOe," \u2014 "),xee=n(LOe,"A",{href:!0});var bGt=s(xee);_Vr=r(bGt,"FlaxBartForCausalLM"),bGt.forEach(t),uVr=r(LOe," (BART model)"),LOe.forEach(t),bVr=i(Ie),S5=n(Ie,"LI",{});var yOe=s(S5);n5e=n(yOe,"STRONG",{});var vGt=s(n5e);vVr=r(vGt,"bert"),vGt.forEach(t),FVr=r(yOe," \u2014 "),$ee=n(yOe,"A",{href:!0});var FGt=s($ee);TVr=r(FGt,"FlaxBertForCausalLM"),FGt.forEach(t),MVr=r(yOe," (BERT model)"),yOe.forEach(t),EVr=i(Ie),R5=n(Ie,"LI",{});var xOe=s(R5);s5e=n(xOe,"STRONG",{});var TGt=s(s5e);CVr=r(TGt,"big_bird"),TGt.forEach(t),wVr=r(xOe," \u2014 "),kee=n(xOe,"A",{href:!0});var MGt=s(kee);AVr=r(MGt,"FlaxBigBirdForCausalLM"),MGt.forEach(t),LVr=r(xOe," (BigBird model)"),xOe.forEach(t),yVr=i(Ie),P5=n(Ie,"LI",{});var $Oe=s(P5);l5e=n($Oe,"STRONG",{});var EGt=s(l5e);xVr=r(EGt,"electra"),EGt.forEach(t),$Vr=r($Oe," \u2014 "),See=n($Oe,"A",{href:!0});var CGt=s(See);kVr=r(CGt,"FlaxElectraForCausalLM"),CGt.forEach(t),SVr=r($Oe," (ELECTRA model)"),$Oe.forEach(t),RVr=i(Ie),B5=n(Ie,"LI",{});var kOe=s(B5);i5e=n(kOe,"STRONG",{});var wGt=s(i5e);PVr=r(wGt,"gpt2"),wGt.forEach(t),BVr=r(kOe," \u2014 "),Ree=n(kOe,"A",{href:!0});var AGt=s(Ree);NVr=r(AGt,"FlaxGPT2LMHeadModel"),AGt.forEach(t),IVr=r(kOe," (OpenAI GPT-2 model)"),kOe.forEach(t),qVr=i(Ie),N5=n(Ie,"LI",{});var SOe=s(N5);d5e=n(SOe,"STRONG",{});var LGt=s(d5e);jVr=r(LGt,"gpt_neo"),LGt.forEach(t),DVr=r(SOe," \u2014 "),Pee=n(SOe,"A",{href:!0});var yGt=s(Pee);GVr=r(yGt,"FlaxGPTNeoForCausalLM"),yGt.forEach(t),OVr=r(SOe," (GPT Neo model)"),SOe.forEach(t),VVr=i(Ie),I5=n(Ie,"LI",{});var ROe=s(I5);c5e=n(ROe,"STRONG",{});var xGt=s(c5e);XVr=r(xGt,"gptj"),xGt.forEach(t),zVr=r(ROe," \u2014 "),Bee=n(ROe,"A",{href:!0});var $Gt=s(Bee);QVr=r($Gt,"FlaxGPTJForCausalLM"),$Gt.forEach(t),WVr=r(ROe," (GPT-J model)"),ROe.forEach(t),HVr=i(Ie),q5=n(Ie,"LI",{});var POe=s(q5);f5e=n(POe,"STRONG",{});var kGt=s(f5e);UVr=r(kGt,"opt"),kGt.forEach(t),JVr=r(POe," \u2014 "),Nee=n(POe,"A",{href:!0});var SGt=s(Nee);YVr=r(SGt,"FlaxOPTForCausalLM"),SGt.forEach(t),KVr=r(POe," (OPT model)"),POe.forEach(t),ZVr=i(Ie),j5=n(Ie,"LI",{});var BOe=s(j5);m5e=n(BOe,"STRONG",{});var RGt=s(m5e);eXr=r(RGt,"roberta"),RGt.forEach(t),oXr=r(BOe," \u2014 "),Iee=n(BOe,"A",{href:!0});var PGt=s(Iee);rXr=r(PGt,"FlaxRobertaForCausalLM"),PGt.forEach(t),tXr=r(BOe," (RoBERTa model)"),BOe.forEach(t),aXr=i(Ie),D5=n(Ie,"LI",{});var NOe=s(D5);g5e=n(NOe,"STRONG",{});var BGt=s(g5e);nXr=r(BGt,"xglm"),BGt.forEach(t),sXr=r(NOe," \u2014 "),qee=n(NOe,"A",{href:!0});var NGt=s(qee);lXr=r(NGt,"FlaxXGLMForCausalLM"),NGt.forEach(t),iXr=r(NOe," (XGLM model)"),NOe.forEach(t),Ie.forEach(t),dXr=i(li),T(G5.$$.fragment,li),li.forEach(t),si.forEach(t),Gze=i(f),of=n(f,"H2",{class:!0});var JWe=s(of);O5=n(JWe,"A",{id:!0,class:!0,href:!0});var IGt=s(O5);h5e=n(IGt,"SPAN",{});var qGt=s(h5e);T(b$.$$.fragment,qGt),qGt.forEach(t),IGt.forEach(t),cXr=i(JWe),p5e=n(JWe,"SPAN",{});var jGt=s(p5e);fXr=r(jGt,"FlaxAutoModelForPreTraining"),jGt.forEach(t),JWe.forEach(t),Oze=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(v$.$$.fragment,ii),mXr=i(ii),rf=n(ii,"P",{});var iae=s(rf);gXr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jee=n(iae,"A",{href:!0});var DGt=s(jee);hXr=r(DGt,"from_pretrained()"),DGt.forEach(t),pXr=r(iae," class method or the "),Dee=n(iae,"A",{href:!0});var GGt=s(Dee);_Xr=r(GGt,"from_config()"),GGt.forEach(t),uXr=r(iae,` class
method.`),iae.forEach(t),bXr=i(ii),F$=n(ii,"P",{});var YWe=s(F$);vXr=r(YWe,"This class cannot be instantiated directly using "),_5e=n(YWe,"CODE",{});var OGt=s(_5e);FXr=r(OGt,"__init__()"),OGt.forEach(t),TXr=r(YWe," (throws an error)."),YWe.forEach(t),MXr=i(ii),Ut=n(ii,"DIV",{class:!0});var B7=s(Ut);T(T$.$$.fragment,B7),EXr=i(B7),u5e=n(B7,"P",{});var VGt=s(u5e);CXr=r(VGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VGt.forEach(t),wXr=i(B7),tf=n(B7,"P",{});var dae=s(tf);AXr=r(dae,`Note:
Loading a model from its configuration file does `),b5e=n(dae,"STRONG",{});var XGt=s(b5e);LXr=r(XGt,"not"),XGt.forEach(t),yXr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=n(dae,"A",{href:!0});var zGt=s(Gee);xXr=r(zGt,"from_pretrained()"),zGt.forEach(t),$Xr=r(dae," to load the model weights."),dae.forEach(t),kXr=i(B7),T(V5.$$.fragment,B7),B7.forEach(t),SXr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(M$.$$.fragment,di),RXr=i(di),v5e=n(di,"P",{});var QGt=s(v5e);PXr=r(QGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QGt.forEach(t),BXr=i(di),En=n(di,"P",{});var N7=s(En);NXr=r(N7,"The model class to instantiate is selected based on the "),F5e=n(N7,"CODE",{});var WGt=s(F5e);IXr=r(WGt,"model_type"),WGt.forEach(t),qXr=r(N7,` property of the config object (either
passed as an argument or loaded from `),T5e=n(N7,"CODE",{});var HGt=s(T5e);jXr=r(HGt,"pretrained_model_name_or_path"),HGt.forEach(t),DXr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=n(N7,"CODE",{});var UGt=s(M5e);GXr=r(UGt,"pretrained_model_name_or_path"),UGt.forEach(t),OXr=r(N7,":"),N7.forEach(t),VXr=i(di),Ee=n(di,"UL",{});var we=s(Ee);X5=n(we,"LI",{});var IOe=s(X5);E5e=n(IOe,"STRONG",{});var JGt=s(E5e);XXr=r(JGt,"albert"),JGt.forEach(t),zXr=r(IOe," \u2014 "),Oee=n(IOe,"A",{href:!0});var YGt=s(Oee);QXr=r(YGt,"FlaxAlbertForPreTraining"),YGt.forEach(t),WXr=r(IOe," (ALBERT model)"),IOe.forEach(t),HXr=i(we),z5=n(we,"LI",{});var qOe=s(z5);C5e=n(qOe,"STRONG",{});var KGt=s(C5e);UXr=r(KGt,"bart"),KGt.forEach(t),JXr=r(qOe," \u2014 "),Vee=n(qOe,"A",{href:!0});var ZGt=s(Vee);YXr=r(ZGt,"FlaxBartForConditionalGeneration"),ZGt.forEach(t),KXr=r(qOe," (BART model)"),qOe.forEach(t),ZXr=i(we),Q5=n(we,"LI",{});var jOe=s(Q5);w5e=n(jOe,"STRONG",{});var eOt=s(w5e);ezr=r(eOt,"bert"),eOt.forEach(t),ozr=r(jOe," \u2014 "),Xee=n(jOe,"A",{href:!0});var oOt=s(Xee);rzr=r(oOt,"FlaxBertForPreTraining"),oOt.forEach(t),tzr=r(jOe," (BERT model)"),jOe.forEach(t),azr=i(we),W5=n(we,"LI",{});var DOe=s(W5);A5e=n(DOe,"STRONG",{});var rOt=s(A5e);nzr=r(rOt,"big_bird"),rOt.forEach(t),szr=r(DOe," \u2014 "),zee=n(DOe,"A",{href:!0});var tOt=s(zee);lzr=r(tOt,"FlaxBigBirdForPreTraining"),tOt.forEach(t),izr=r(DOe," (BigBird model)"),DOe.forEach(t),dzr=i(we),H5=n(we,"LI",{});var GOe=s(H5);L5e=n(GOe,"STRONG",{});var aOt=s(L5e);czr=r(aOt,"electra"),aOt.forEach(t),fzr=r(GOe," \u2014 "),Qee=n(GOe,"A",{href:!0});var nOt=s(Qee);mzr=r(nOt,"FlaxElectraForPreTraining"),nOt.forEach(t),gzr=r(GOe," (ELECTRA model)"),GOe.forEach(t),hzr=i(we),U5=n(we,"LI",{});var OOe=s(U5);y5e=n(OOe,"STRONG",{});var sOt=s(y5e);pzr=r(sOt,"longt5"),sOt.forEach(t),_zr=r(OOe," \u2014 "),Wee=n(OOe,"A",{href:!0});var lOt=s(Wee);uzr=r(lOt,"FlaxLongT5ForConditionalGeneration"),lOt.forEach(t),bzr=r(OOe," (LongT5 model)"),OOe.forEach(t),vzr=i(we),J5=n(we,"LI",{});var VOe=s(J5);x5e=n(VOe,"STRONG",{});var iOt=s(x5e);Fzr=r(iOt,"mbart"),iOt.forEach(t),Tzr=r(VOe," \u2014 "),Hee=n(VOe,"A",{href:!0});var dOt=s(Hee);Mzr=r(dOt,"FlaxMBartForConditionalGeneration"),dOt.forEach(t),Ezr=r(VOe," (mBART model)"),VOe.forEach(t),Czr=i(we),Y5=n(we,"LI",{});var XOe=s(Y5);$5e=n(XOe,"STRONG",{});var cOt=s($5e);wzr=r(cOt,"mt5"),cOt.forEach(t),Azr=r(XOe," \u2014 "),Uee=n(XOe,"A",{href:!0});var fOt=s(Uee);Lzr=r(fOt,"FlaxMT5ForConditionalGeneration"),fOt.forEach(t),yzr=r(XOe," (MT5 model)"),XOe.forEach(t),xzr=i(we),K5=n(we,"LI",{});var zOe=s(K5);k5e=n(zOe,"STRONG",{});var mOt=s(k5e);$zr=r(mOt,"roberta"),mOt.forEach(t),kzr=r(zOe," \u2014 "),Jee=n(zOe,"A",{href:!0});var gOt=s(Jee);Szr=r(gOt,"FlaxRobertaForMaskedLM"),gOt.forEach(t),Rzr=r(zOe," (RoBERTa model)"),zOe.forEach(t),Pzr=i(we),Z5=n(we,"LI",{});var QOe=s(Z5);S5e=n(QOe,"STRONG",{});var hOt=s(S5e);Bzr=r(hOt,"roformer"),hOt.forEach(t),Nzr=r(QOe," \u2014 "),Yee=n(QOe,"A",{href:!0});var pOt=s(Yee);Izr=r(pOt,"FlaxRoFormerForMaskedLM"),pOt.forEach(t),qzr=r(QOe," (RoFormer model)"),QOe.forEach(t),jzr=i(we),e0=n(we,"LI",{});var WOe=s(e0);R5e=n(WOe,"STRONG",{});var _Ot=s(R5e);Dzr=r(_Ot,"t5"),_Ot.forEach(t),Gzr=r(WOe," \u2014 "),Kee=n(WOe,"A",{href:!0});var uOt=s(Kee);Ozr=r(uOt,"FlaxT5ForConditionalGeneration"),uOt.forEach(t),Vzr=r(WOe," (T5 model)"),WOe.forEach(t),Xzr=i(we),o0=n(we,"LI",{});var HOe=s(o0);P5e=n(HOe,"STRONG",{});var bOt=s(P5e);zzr=r(bOt,"wav2vec2"),bOt.forEach(t),Qzr=r(HOe," \u2014 "),Zee=n(HOe,"A",{href:!0});var vOt=s(Zee);Wzr=r(vOt,"FlaxWav2Vec2ForPreTraining"),vOt.forEach(t),Hzr=r(HOe," (Wav2Vec2 model)"),HOe.forEach(t),Uzr=i(we),r0=n(we,"LI",{});var UOe=s(r0);B5e=n(UOe,"STRONG",{});var FOt=s(B5e);Jzr=r(FOt,"xlm-roberta"),FOt.forEach(t),Yzr=r(UOe," \u2014 "),eoe=n(UOe,"A",{href:!0});var TOt=s(eoe);Kzr=r(TOt,"FlaxXLMRobertaForMaskedLM"),TOt.forEach(t),Zzr=r(UOe," (XLM-RoBERTa model)"),UOe.forEach(t),we.forEach(t),eQr=i(di),T(t0.$$.fragment,di),di.forEach(t),ii.forEach(t),Vze=i(f),af=n(f,"H2",{class:!0});var KWe=s(af);a0=n(KWe,"A",{id:!0,class:!0,href:!0});var MOt=s(a0);N5e=n(MOt,"SPAN",{});var EOt=s(N5e);T(E$.$$.fragment,EOt),EOt.forEach(t),MOt.forEach(t),oQr=i(KWe),I5e=n(KWe,"SPAN",{});var COt=s(I5e);rQr=r(COt,"FlaxAutoModelForMaskedLM"),COt.forEach(t),KWe.forEach(t),Xze=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(C$.$$.fragment,ci),tQr=i(ci),nf=n(ci,"P",{});var cae=s(nf);aQr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ooe=n(cae,"A",{href:!0});var wOt=s(ooe);nQr=r(wOt,"from_pretrained()"),wOt.forEach(t),sQr=r(cae," class method or the "),roe=n(cae,"A",{href:!0});var AOt=s(roe);lQr=r(AOt,"from_config()"),AOt.forEach(t),iQr=r(cae,` class
method.`),cae.forEach(t),dQr=i(ci),w$=n(ci,"P",{});var ZWe=s(w$);cQr=r(ZWe,"This class cannot be instantiated directly using "),q5e=n(ZWe,"CODE",{});var LOt=s(q5e);fQr=r(LOt,"__init__()"),LOt.forEach(t),mQr=r(ZWe," (throws an error)."),ZWe.forEach(t),gQr=i(ci),Jt=n(ci,"DIV",{class:!0});var I7=s(Jt);T(A$.$$.fragment,I7),hQr=i(I7),j5e=n(I7,"P",{});var yOt=s(j5e);pQr=r(yOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yOt.forEach(t),_Qr=i(I7),sf=n(I7,"P",{});var fae=s(sf);uQr=r(fae,`Note:
Loading a model from its configuration file does `),D5e=n(fae,"STRONG",{});var xOt=s(D5e);bQr=r(xOt,"not"),xOt.forEach(t),vQr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(fae,"A",{href:!0});var $Ot=s(toe);FQr=r($Ot,"from_pretrained()"),$Ot.forEach(t),TQr=r(fae," to load the model weights."),fae.forEach(t),MQr=i(I7),T(n0.$$.fragment,I7),I7.forEach(t),EQr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(L$.$$.fragment,fi),CQr=i(fi),G5e=n(fi,"P",{});var kOt=s(G5e);wQr=r(kOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kOt.forEach(t),AQr=i(fi),Cn=n(fi,"P",{});var q7=s(Cn);LQr=r(q7,"The model class to instantiate is selected based on the "),O5e=n(q7,"CODE",{});var SOt=s(O5e);yQr=r(SOt,"model_type"),SOt.forEach(t),xQr=r(q7,` property of the config object (either
passed as an argument or loaded from `),V5e=n(q7,"CODE",{});var ROt=s(V5e);$Qr=r(ROt,"pretrained_model_name_or_path"),ROt.forEach(t),kQr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(q7,"CODE",{});var POt=s(X5e);SQr=r(POt,"pretrained_model_name_or_path"),POt.forEach(t),RQr=r(q7,":"),q7.forEach(t),PQr=i(fi),$e=n(fi,"UL",{});var qe=s($e);s0=n(qe,"LI",{});var JOe=s(s0);z5e=n(JOe,"STRONG",{});var BOt=s(z5e);BQr=r(BOt,"albert"),BOt.forEach(t),NQr=r(JOe," \u2014 "),aoe=n(JOe,"A",{href:!0});var NOt=s(aoe);IQr=r(NOt,"FlaxAlbertForMaskedLM"),NOt.forEach(t),qQr=r(JOe," (ALBERT model)"),JOe.forEach(t),jQr=i(qe),l0=n(qe,"LI",{});var YOe=s(l0);Q5e=n(YOe,"STRONG",{});var IOt=s(Q5e);DQr=r(IOt,"bart"),IOt.forEach(t),GQr=r(YOe," \u2014 "),noe=n(YOe,"A",{href:!0});var qOt=s(noe);OQr=r(qOt,"FlaxBartForConditionalGeneration"),qOt.forEach(t),VQr=r(YOe," (BART model)"),YOe.forEach(t),XQr=i(qe),i0=n(qe,"LI",{});var KOe=s(i0);W5e=n(KOe,"STRONG",{});var jOt=s(W5e);zQr=r(jOt,"bert"),jOt.forEach(t),QQr=r(KOe," \u2014 "),soe=n(KOe,"A",{href:!0});var DOt=s(soe);WQr=r(DOt,"FlaxBertForMaskedLM"),DOt.forEach(t),HQr=r(KOe," (BERT model)"),KOe.forEach(t),UQr=i(qe),d0=n(qe,"LI",{});var ZOe=s(d0);H5e=n(ZOe,"STRONG",{});var GOt=s(H5e);JQr=r(GOt,"big_bird"),GOt.forEach(t),YQr=r(ZOe," \u2014 "),loe=n(ZOe,"A",{href:!0});var OOt=s(loe);KQr=r(OOt,"FlaxBigBirdForMaskedLM"),OOt.forEach(t),ZQr=r(ZOe," (BigBird model)"),ZOe.forEach(t),eWr=i(qe),c0=n(qe,"LI",{});var eVe=s(c0);U5e=n(eVe,"STRONG",{});var VOt=s(U5e);oWr=r(VOt,"distilbert"),VOt.forEach(t),rWr=r(eVe," \u2014 "),ioe=n(eVe,"A",{href:!0});var XOt=s(ioe);tWr=r(XOt,"FlaxDistilBertForMaskedLM"),XOt.forEach(t),aWr=r(eVe," (DistilBERT model)"),eVe.forEach(t),nWr=i(qe),f0=n(qe,"LI",{});var oVe=s(f0);J5e=n(oVe,"STRONG",{});var zOt=s(J5e);sWr=r(zOt,"electra"),zOt.forEach(t),lWr=r(oVe," \u2014 "),doe=n(oVe,"A",{href:!0});var QOt=s(doe);iWr=r(QOt,"FlaxElectraForMaskedLM"),QOt.forEach(t),dWr=r(oVe," (ELECTRA model)"),oVe.forEach(t),cWr=i(qe),m0=n(qe,"LI",{});var rVe=s(m0);Y5e=n(rVe,"STRONG",{});var WOt=s(Y5e);fWr=r(WOt,"mbart"),WOt.forEach(t),mWr=r(rVe," \u2014 "),coe=n(rVe,"A",{href:!0});var HOt=s(coe);gWr=r(HOt,"FlaxMBartForConditionalGeneration"),HOt.forEach(t),hWr=r(rVe," (mBART model)"),rVe.forEach(t),pWr=i(qe),g0=n(qe,"LI",{});var tVe=s(g0);K5e=n(tVe,"STRONG",{});var UOt=s(K5e);_Wr=r(UOt,"roberta"),UOt.forEach(t),uWr=r(tVe," \u2014 "),foe=n(tVe,"A",{href:!0});var JOt=s(foe);bWr=r(JOt,"FlaxRobertaForMaskedLM"),JOt.forEach(t),vWr=r(tVe," (RoBERTa model)"),tVe.forEach(t),FWr=i(qe),h0=n(qe,"LI",{});var aVe=s(h0);Z5e=n(aVe,"STRONG",{});var YOt=s(Z5e);TWr=r(YOt,"roformer"),YOt.forEach(t),MWr=r(aVe," \u2014 "),moe=n(aVe,"A",{href:!0});var KOt=s(moe);EWr=r(KOt,"FlaxRoFormerForMaskedLM"),KOt.forEach(t),CWr=r(aVe," (RoFormer model)"),aVe.forEach(t),wWr=i(qe),p0=n(qe,"LI",{});var nVe=s(p0);e0e=n(nVe,"STRONG",{});var ZOt=s(e0e);AWr=r(ZOt,"xlm-roberta"),ZOt.forEach(t),LWr=r(nVe," \u2014 "),goe=n(nVe,"A",{href:!0});var eVt=s(goe);yWr=r(eVt,"FlaxXLMRobertaForMaskedLM"),eVt.forEach(t),xWr=r(nVe," (XLM-RoBERTa model)"),nVe.forEach(t),qe.forEach(t),$Wr=i(fi),T(_0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),zze=i(f),lf=n(f,"H2",{class:!0});var eHe=s(lf);u0=n(eHe,"A",{id:!0,class:!0,href:!0});var oVt=s(u0);o0e=n(oVt,"SPAN",{});var rVt=s(o0e);T(y$.$$.fragment,rVt),rVt.forEach(t),oVt.forEach(t),kWr=i(eHe),r0e=n(eHe,"SPAN",{});var tVt=s(r0e);SWr=r(tVt,"FlaxAutoModelForSeq2SeqLM"),tVt.forEach(t),eHe.forEach(t),Qze=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(x$.$$.fragment,mi),RWr=i(mi),df=n(mi,"P",{});var mae=s(df);PWr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hoe=n(mae,"A",{href:!0});var aVt=s(hoe);BWr=r(aVt,"from_pretrained()"),aVt.forEach(t),NWr=r(mae," class method or the "),poe=n(mae,"A",{href:!0});var nVt=s(poe);IWr=r(nVt,"from_config()"),nVt.forEach(t),qWr=r(mae,` class
method.`),mae.forEach(t),jWr=i(mi),$$=n(mi,"P",{});var oHe=s($$);DWr=r(oHe,"This class cannot be instantiated directly using "),t0e=n(oHe,"CODE",{});var sVt=s(t0e);GWr=r(sVt,"__init__()"),sVt.forEach(t),OWr=r(oHe," (throws an error)."),oHe.forEach(t),VWr=i(mi),Yt=n(mi,"DIV",{class:!0});var j7=s(Yt);T(k$.$$.fragment,j7),XWr=i(j7),a0e=n(j7,"P",{});var lVt=s(a0e);zWr=r(lVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lVt.forEach(t),QWr=i(j7),cf=n(j7,"P",{});var gae=s(cf);WWr=r(gae,`Note:
Loading a model from its configuration file does `),n0e=n(gae,"STRONG",{});var iVt=s(n0e);HWr=r(iVt,"not"),iVt.forEach(t),UWr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=n(gae,"A",{href:!0});var dVt=s(_oe);JWr=r(dVt,"from_pretrained()"),dVt.forEach(t),YWr=r(gae," to load the model weights."),gae.forEach(t),KWr=i(j7),T(b0.$$.fragment,j7),j7.forEach(t),ZWr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(S$.$$.fragment,gi),eHr=i(gi),s0e=n(gi,"P",{});var cVt=s(s0e);oHr=r(cVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cVt.forEach(t),rHr=i(gi),wn=n(gi,"P",{});var D7=s(wn);tHr=r(D7,"The model class to instantiate is selected based on the "),l0e=n(D7,"CODE",{});var fVt=s(l0e);aHr=r(fVt,"model_type"),fVt.forEach(t),nHr=r(D7,` property of the config object (either
passed as an argument or loaded from `),i0e=n(D7,"CODE",{});var mVt=s(i0e);sHr=r(mVt,"pretrained_model_name_or_path"),mVt.forEach(t),lHr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=n(D7,"CODE",{});var gVt=s(d0e);iHr=r(gVt,"pretrained_model_name_or_path"),gVt.forEach(t),dHr=r(D7,":"),D7.forEach(t),cHr=i(gi),ke=n(gi,"UL",{});var je=s(ke);v0=n(je,"LI",{});var sVe=s(v0);c0e=n(sVe,"STRONG",{});var hVt=s(c0e);fHr=r(hVt,"bart"),hVt.forEach(t),mHr=r(sVe," \u2014 "),uoe=n(sVe,"A",{href:!0});var pVt=s(uoe);gHr=r(pVt,"FlaxBartForConditionalGeneration"),pVt.forEach(t),hHr=r(sVe," (BART model)"),sVe.forEach(t),pHr=i(je),F0=n(je,"LI",{});var lVe=s(F0);f0e=n(lVe,"STRONG",{});var _Vt=s(f0e);_Hr=r(_Vt,"blenderbot"),_Vt.forEach(t),uHr=r(lVe," \u2014 "),boe=n(lVe,"A",{href:!0});var uVt=s(boe);bHr=r(uVt,"FlaxBlenderbotForConditionalGeneration"),uVt.forEach(t),vHr=r(lVe," (Blenderbot model)"),lVe.forEach(t),FHr=i(je),T0=n(je,"LI",{});var iVe=s(T0);m0e=n(iVe,"STRONG",{});var bVt=s(m0e);THr=r(bVt,"blenderbot-small"),bVt.forEach(t),MHr=r(iVe," \u2014 "),voe=n(iVe,"A",{href:!0});var vVt=s(voe);EHr=r(vVt,"FlaxBlenderbotSmallForConditionalGeneration"),vVt.forEach(t),CHr=r(iVe," (BlenderbotSmall model)"),iVe.forEach(t),wHr=i(je),M0=n(je,"LI",{});var dVe=s(M0);g0e=n(dVe,"STRONG",{});var FVt=s(g0e);AHr=r(FVt,"encoder-decoder"),FVt.forEach(t),LHr=r(dVe," \u2014 "),Foe=n(dVe,"A",{href:!0});var TVt=s(Foe);yHr=r(TVt,"FlaxEncoderDecoderModel"),TVt.forEach(t),xHr=r(dVe," (Encoder decoder model)"),dVe.forEach(t),$Hr=i(je),E0=n(je,"LI",{});var cVe=s(E0);h0e=n(cVe,"STRONG",{});var MVt=s(h0e);kHr=r(MVt,"longt5"),MVt.forEach(t),SHr=r(cVe," \u2014 "),Toe=n(cVe,"A",{href:!0});var EVt=s(Toe);RHr=r(EVt,"FlaxLongT5ForConditionalGeneration"),EVt.forEach(t),PHr=r(cVe," (LongT5 model)"),cVe.forEach(t),BHr=i(je),C0=n(je,"LI",{});var fVe=s(C0);p0e=n(fVe,"STRONG",{});var CVt=s(p0e);NHr=r(CVt,"marian"),CVt.forEach(t),IHr=r(fVe," \u2014 "),Moe=n(fVe,"A",{href:!0});var wVt=s(Moe);qHr=r(wVt,"FlaxMarianMTModel"),wVt.forEach(t),jHr=r(fVe," (Marian model)"),fVe.forEach(t),DHr=i(je),w0=n(je,"LI",{});var mVe=s(w0);_0e=n(mVe,"STRONG",{});var AVt=s(_0e);GHr=r(AVt,"mbart"),AVt.forEach(t),OHr=r(mVe," \u2014 "),Eoe=n(mVe,"A",{href:!0});var LVt=s(Eoe);VHr=r(LVt,"FlaxMBartForConditionalGeneration"),LVt.forEach(t),XHr=r(mVe," (mBART model)"),mVe.forEach(t),zHr=i(je),A0=n(je,"LI",{});var gVe=s(A0);u0e=n(gVe,"STRONG",{});var yVt=s(u0e);QHr=r(yVt,"mt5"),yVt.forEach(t),WHr=r(gVe," \u2014 "),Coe=n(gVe,"A",{href:!0});var xVt=s(Coe);HHr=r(xVt,"FlaxMT5ForConditionalGeneration"),xVt.forEach(t),UHr=r(gVe," (MT5 model)"),gVe.forEach(t),JHr=i(je),L0=n(je,"LI",{});var hVe=s(L0);b0e=n(hVe,"STRONG",{});var $Vt=s(b0e);YHr=r($Vt,"pegasus"),$Vt.forEach(t),KHr=r(hVe," \u2014 "),woe=n(hVe,"A",{href:!0});var kVt=s(woe);ZHr=r(kVt,"FlaxPegasusForConditionalGeneration"),kVt.forEach(t),eUr=r(hVe," (Pegasus model)"),hVe.forEach(t),oUr=i(je),y0=n(je,"LI",{});var pVe=s(y0);v0e=n(pVe,"STRONG",{});var SVt=s(v0e);rUr=r(SVt,"t5"),SVt.forEach(t),tUr=r(pVe," \u2014 "),Aoe=n(pVe,"A",{href:!0});var RVt=s(Aoe);aUr=r(RVt,"FlaxT5ForConditionalGeneration"),RVt.forEach(t),nUr=r(pVe," (T5 model)"),pVe.forEach(t),je.forEach(t),sUr=i(gi),T(x0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Wze=i(f),ff=n(f,"H2",{class:!0});var rHe=s(ff);$0=n(rHe,"A",{id:!0,class:!0,href:!0});var PVt=s($0);F0e=n(PVt,"SPAN",{});var BVt=s(F0e);T(R$.$$.fragment,BVt),BVt.forEach(t),PVt.forEach(t),lUr=i(rHe),T0e=n(rHe,"SPAN",{});var NVt=s(T0e);iUr=r(NVt,"FlaxAutoModelForSequenceClassification"),NVt.forEach(t),rHe.forEach(t),Hze=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(P$.$$.fragment,hi),dUr=i(hi),mf=n(hi,"P",{});var hae=s(mf);cUr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Loe=n(hae,"A",{href:!0});var IVt=s(Loe);fUr=r(IVt,"from_pretrained()"),IVt.forEach(t),mUr=r(hae," class method or the "),yoe=n(hae,"A",{href:!0});var qVt=s(yoe);gUr=r(qVt,"from_config()"),qVt.forEach(t),hUr=r(hae,` class
method.`),hae.forEach(t),pUr=i(hi),B$=n(hi,"P",{});var tHe=s(B$);_Ur=r(tHe,"This class cannot be instantiated directly using "),M0e=n(tHe,"CODE",{});var jVt=s(M0e);uUr=r(jVt,"__init__()"),jVt.forEach(t),bUr=r(tHe," (throws an error)."),tHe.forEach(t),vUr=i(hi),Kt=n(hi,"DIV",{class:!0});var G7=s(Kt);T(N$.$$.fragment,G7),FUr=i(G7),E0e=n(G7,"P",{});var DVt=s(E0e);TUr=r(DVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DVt.forEach(t),MUr=i(G7),gf=n(G7,"P",{});var pae=s(gf);EUr=r(pae,`Note:
Loading a model from its configuration file does `),C0e=n(pae,"STRONG",{});var GVt=s(C0e);CUr=r(GVt,"not"),GVt.forEach(t),wUr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=n(pae,"A",{href:!0});var OVt=s(xoe);AUr=r(OVt,"from_pretrained()"),OVt.forEach(t),LUr=r(pae," to load the model weights."),pae.forEach(t),yUr=i(G7),T(k0.$$.fragment,G7),G7.forEach(t),xUr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(I$.$$.fragment,pi),$Ur=i(pi),w0e=n(pi,"P",{});var VVt=s(w0e);kUr=r(VVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VVt.forEach(t),SUr=i(pi),An=n(pi,"P",{});var O7=s(An);RUr=r(O7,"The model class to instantiate is selected based on the "),A0e=n(O7,"CODE",{});var XVt=s(A0e);PUr=r(XVt,"model_type"),XVt.forEach(t),BUr=r(O7,` property of the config object (either
passed as an argument or loaded from `),L0e=n(O7,"CODE",{});var zVt=s(L0e);NUr=r(zVt,"pretrained_model_name_or_path"),zVt.forEach(t),IUr=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=n(O7,"CODE",{});var QVt=s(y0e);qUr=r(QVt,"pretrained_model_name_or_path"),QVt.forEach(t),jUr=r(O7,":"),O7.forEach(t),DUr=i(pi),Se=n(pi,"UL",{});var De=s(Se);S0=n(De,"LI",{});var _Ve=s(S0);x0e=n(_Ve,"STRONG",{});var WVt=s(x0e);GUr=r(WVt,"albert"),WVt.forEach(t),OUr=r(_Ve," \u2014 "),$oe=n(_Ve,"A",{href:!0});var HVt=s($oe);VUr=r(HVt,"FlaxAlbertForSequenceClassification"),HVt.forEach(t),XUr=r(_Ve," (ALBERT model)"),_Ve.forEach(t),zUr=i(De),R0=n(De,"LI",{});var uVe=s(R0);$0e=n(uVe,"STRONG",{});var UVt=s($0e);QUr=r(UVt,"bart"),UVt.forEach(t),WUr=r(uVe," \u2014 "),koe=n(uVe,"A",{href:!0});var JVt=s(koe);HUr=r(JVt,"FlaxBartForSequenceClassification"),JVt.forEach(t),UUr=r(uVe," (BART model)"),uVe.forEach(t),JUr=i(De),P0=n(De,"LI",{});var bVe=s(P0);k0e=n(bVe,"STRONG",{});var YVt=s(k0e);YUr=r(YVt,"bert"),YVt.forEach(t),KUr=r(bVe," \u2014 "),Soe=n(bVe,"A",{href:!0});var KVt=s(Soe);ZUr=r(KVt,"FlaxBertForSequenceClassification"),KVt.forEach(t),eJr=r(bVe," (BERT model)"),bVe.forEach(t),oJr=i(De),B0=n(De,"LI",{});var vVe=s(B0);S0e=n(vVe,"STRONG",{});var ZVt=s(S0e);rJr=r(ZVt,"big_bird"),ZVt.forEach(t),tJr=r(vVe," \u2014 "),Roe=n(vVe,"A",{href:!0});var eXt=s(Roe);aJr=r(eXt,"FlaxBigBirdForSequenceClassification"),eXt.forEach(t),nJr=r(vVe," (BigBird model)"),vVe.forEach(t),sJr=i(De),N0=n(De,"LI",{});var FVe=s(N0);R0e=n(FVe,"STRONG",{});var oXt=s(R0e);lJr=r(oXt,"distilbert"),oXt.forEach(t),iJr=r(FVe," \u2014 "),Poe=n(FVe,"A",{href:!0});var rXt=s(Poe);dJr=r(rXt,"FlaxDistilBertForSequenceClassification"),rXt.forEach(t),cJr=r(FVe," (DistilBERT model)"),FVe.forEach(t),fJr=i(De),I0=n(De,"LI",{});var TVe=s(I0);P0e=n(TVe,"STRONG",{});var tXt=s(P0e);mJr=r(tXt,"electra"),tXt.forEach(t),gJr=r(TVe," \u2014 "),Boe=n(TVe,"A",{href:!0});var aXt=s(Boe);hJr=r(aXt,"FlaxElectraForSequenceClassification"),aXt.forEach(t),pJr=r(TVe," (ELECTRA model)"),TVe.forEach(t),_Jr=i(De),q0=n(De,"LI",{});var MVe=s(q0);B0e=n(MVe,"STRONG",{});var nXt=s(B0e);uJr=r(nXt,"mbart"),nXt.forEach(t),bJr=r(MVe," \u2014 "),Noe=n(MVe,"A",{href:!0});var sXt=s(Noe);vJr=r(sXt,"FlaxMBartForSequenceClassification"),sXt.forEach(t),FJr=r(MVe," (mBART model)"),MVe.forEach(t),TJr=i(De),j0=n(De,"LI",{});var EVe=s(j0);N0e=n(EVe,"STRONG",{});var lXt=s(N0e);MJr=r(lXt,"roberta"),lXt.forEach(t),EJr=r(EVe," \u2014 "),Ioe=n(EVe,"A",{href:!0});var iXt=s(Ioe);CJr=r(iXt,"FlaxRobertaForSequenceClassification"),iXt.forEach(t),wJr=r(EVe," (RoBERTa model)"),EVe.forEach(t),AJr=i(De),D0=n(De,"LI",{});var CVe=s(D0);I0e=n(CVe,"STRONG",{});var dXt=s(I0e);LJr=r(dXt,"roformer"),dXt.forEach(t),yJr=r(CVe," \u2014 "),qoe=n(CVe,"A",{href:!0});var cXt=s(qoe);xJr=r(cXt,"FlaxRoFormerForSequenceClassification"),cXt.forEach(t),$Jr=r(CVe," (RoFormer model)"),CVe.forEach(t),kJr=i(De),G0=n(De,"LI",{});var wVe=s(G0);q0e=n(wVe,"STRONG",{});var fXt=s(q0e);SJr=r(fXt,"xlm-roberta"),fXt.forEach(t),RJr=r(wVe," \u2014 "),joe=n(wVe,"A",{href:!0});var mXt=s(joe);PJr=r(mXt,"FlaxXLMRobertaForSequenceClassification"),mXt.forEach(t),BJr=r(wVe," (XLM-RoBERTa model)"),wVe.forEach(t),De.forEach(t),NJr=i(pi),T(O0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),Uze=i(f),hf=n(f,"H2",{class:!0});var aHe=s(hf);V0=n(aHe,"A",{id:!0,class:!0,href:!0});var gXt=s(V0);j0e=n(gXt,"SPAN",{});var hXt=s(j0e);T(q$.$$.fragment,hXt),hXt.forEach(t),gXt.forEach(t),IJr=i(aHe),D0e=n(aHe,"SPAN",{});var pXt=s(D0e);qJr=r(pXt,"FlaxAutoModelForQuestionAnswering"),pXt.forEach(t),aHe.forEach(t),Jze=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(j$.$$.fragment,_i),jJr=i(_i),pf=n(_i,"P",{});var _ae=s(pf);DJr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Doe=n(_ae,"A",{href:!0});var _Xt=s(Doe);GJr=r(_Xt,"from_pretrained()"),_Xt.forEach(t),OJr=r(_ae," class method or the "),Goe=n(_ae,"A",{href:!0});var uXt=s(Goe);VJr=r(uXt,"from_config()"),uXt.forEach(t),XJr=r(_ae,` class
method.`),_ae.forEach(t),zJr=i(_i),D$=n(_i,"P",{});var nHe=s(D$);QJr=r(nHe,"This class cannot be instantiated directly using "),G0e=n(nHe,"CODE",{});var bXt=s(G0e);WJr=r(bXt,"__init__()"),bXt.forEach(t),HJr=r(nHe," (throws an error)."),nHe.forEach(t),UJr=i(_i),Zt=n(_i,"DIV",{class:!0});var V7=s(Zt);T(G$.$$.fragment,V7),JJr=i(V7),O0e=n(V7,"P",{});var vXt=s(O0e);YJr=r(vXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vXt.forEach(t),KJr=i(V7),_f=n(V7,"P",{});var uae=s(_f);ZJr=r(uae,`Note:
Loading a model from its configuration file does `),V0e=n(uae,"STRONG",{});var FXt=s(V0e);eYr=r(FXt,"not"),FXt.forEach(t),oYr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(uae,"A",{href:!0});var TXt=s(Ooe);rYr=r(TXt,"from_pretrained()"),TXt.forEach(t),tYr=r(uae," to load the model weights."),uae.forEach(t),aYr=i(V7),T(X0.$$.fragment,V7),V7.forEach(t),nYr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(O$.$$.fragment,ui),sYr=i(ui),X0e=n(ui,"P",{});var MXt=s(X0e);lYr=r(MXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MXt.forEach(t),iYr=i(ui),Ln=n(ui,"P",{});var X7=s(Ln);dYr=r(X7,"The model class to instantiate is selected based on the "),z0e=n(X7,"CODE",{});var EXt=s(z0e);cYr=r(EXt,"model_type"),EXt.forEach(t),fYr=r(X7,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(X7,"CODE",{});var CXt=s(Q0e);mYr=r(CXt,"pretrained_model_name_or_path"),CXt.forEach(t),gYr=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=n(X7,"CODE",{});var wXt=s(W0e);hYr=r(wXt,"pretrained_model_name_or_path"),wXt.forEach(t),pYr=r(X7,":"),X7.forEach(t),_Yr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);z0=n(Ge,"LI",{});var AVe=s(z0);H0e=n(AVe,"STRONG",{});var AXt=s(H0e);uYr=r(AXt,"albert"),AXt.forEach(t),bYr=r(AVe," \u2014 "),Voe=n(AVe,"A",{href:!0});var LXt=s(Voe);vYr=r(LXt,"FlaxAlbertForQuestionAnswering"),LXt.forEach(t),FYr=r(AVe," (ALBERT model)"),AVe.forEach(t),TYr=i(Ge),Q0=n(Ge,"LI",{});var LVe=s(Q0);U0e=n(LVe,"STRONG",{});var yXt=s(U0e);MYr=r(yXt,"bart"),yXt.forEach(t),EYr=r(LVe," \u2014 "),Xoe=n(LVe,"A",{href:!0});var xXt=s(Xoe);CYr=r(xXt,"FlaxBartForQuestionAnswering"),xXt.forEach(t),wYr=r(LVe," (BART model)"),LVe.forEach(t),AYr=i(Ge),W0=n(Ge,"LI",{});var yVe=s(W0);J0e=n(yVe,"STRONG",{});var $Xt=s(J0e);LYr=r($Xt,"bert"),$Xt.forEach(t),yYr=r(yVe," \u2014 "),zoe=n(yVe,"A",{href:!0});var kXt=s(zoe);xYr=r(kXt,"FlaxBertForQuestionAnswering"),kXt.forEach(t),$Yr=r(yVe," (BERT model)"),yVe.forEach(t),kYr=i(Ge),H0=n(Ge,"LI",{});var xVe=s(H0);Y0e=n(xVe,"STRONG",{});var SXt=s(Y0e);SYr=r(SXt,"big_bird"),SXt.forEach(t),RYr=r(xVe," \u2014 "),Qoe=n(xVe,"A",{href:!0});var RXt=s(Qoe);PYr=r(RXt,"FlaxBigBirdForQuestionAnswering"),RXt.forEach(t),BYr=r(xVe," (BigBird model)"),xVe.forEach(t),NYr=i(Ge),U0=n(Ge,"LI",{});var $Ve=s(U0);K0e=n($Ve,"STRONG",{});var PXt=s(K0e);IYr=r(PXt,"distilbert"),PXt.forEach(t),qYr=r($Ve," \u2014 "),Woe=n($Ve,"A",{href:!0});var BXt=s(Woe);jYr=r(BXt,"FlaxDistilBertForQuestionAnswering"),BXt.forEach(t),DYr=r($Ve," (DistilBERT model)"),$Ve.forEach(t),GYr=i(Ge),J0=n(Ge,"LI",{});var kVe=s(J0);Z0e=n(kVe,"STRONG",{});var NXt=s(Z0e);OYr=r(NXt,"electra"),NXt.forEach(t),VYr=r(kVe," \u2014 "),Hoe=n(kVe,"A",{href:!0});var IXt=s(Hoe);XYr=r(IXt,"FlaxElectraForQuestionAnswering"),IXt.forEach(t),zYr=r(kVe," (ELECTRA model)"),kVe.forEach(t),QYr=i(Ge),Y0=n(Ge,"LI",{});var SVe=s(Y0);ewe=n(SVe,"STRONG",{});var qXt=s(ewe);WYr=r(qXt,"mbart"),qXt.forEach(t),HYr=r(SVe," \u2014 "),Uoe=n(SVe,"A",{href:!0});var jXt=s(Uoe);UYr=r(jXt,"FlaxMBartForQuestionAnswering"),jXt.forEach(t),JYr=r(SVe," (mBART model)"),SVe.forEach(t),YYr=i(Ge),K0=n(Ge,"LI",{});var RVe=s(K0);owe=n(RVe,"STRONG",{});var DXt=s(owe);KYr=r(DXt,"roberta"),DXt.forEach(t),ZYr=r(RVe," \u2014 "),Joe=n(RVe,"A",{href:!0});var GXt=s(Joe);eKr=r(GXt,"FlaxRobertaForQuestionAnswering"),GXt.forEach(t),oKr=r(RVe," (RoBERTa model)"),RVe.forEach(t),rKr=i(Ge),Z0=n(Ge,"LI",{});var PVe=s(Z0);rwe=n(PVe,"STRONG",{});var OXt=s(rwe);tKr=r(OXt,"roformer"),OXt.forEach(t),aKr=r(PVe," \u2014 "),Yoe=n(PVe,"A",{href:!0});var VXt=s(Yoe);nKr=r(VXt,"FlaxRoFormerForQuestionAnswering"),VXt.forEach(t),sKr=r(PVe," (RoFormer model)"),PVe.forEach(t),lKr=i(Ge),ew=n(Ge,"LI",{});var BVe=s(ew);twe=n(BVe,"STRONG",{});var XXt=s(twe);iKr=r(XXt,"xlm-roberta"),XXt.forEach(t),dKr=r(BVe," \u2014 "),Koe=n(BVe,"A",{href:!0});var zXt=s(Koe);cKr=r(zXt,"FlaxXLMRobertaForQuestionAnswering"),zXt.forEach(t),fKr=r(BVe," (XLM-RoBERTa model)"),BVe.forEach(t),Ge.forEach(t),mKr=i(ui),T(ow.$$.fragment,ui),ui.forEach(t),_i.forEach(t),Yze=i(f),uf=n(f,"H2",{class:!0});var sHe=s(uf);rw=n(sHe,"A",{id:!0,class:!0,href:!0});var QXt=s(rw);awe=n(QXt,"SPAN",{});var WXt=s(awe);T(V$.$$.fragment,WXt),WXt.forEach(t),QXt.forEach(t),gKr=i(sHe),nwe=n(sHe,"SPAN",{});var HXt=s(nwe);hKr=r(HXt,"FlaxAutoModelForTokenClassification"),HXt.forEach(t),sHe.forEach(t),Kze=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(X$.$$.fragment,bi),pKr=i(bi),bf=n(bi,"P",{});var bae=s(bf);_Kr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zoe=n(bae,"A",{href:!0});var UXt=s(Zoe);uKr=r(UXt,"from_pretrained()"),UXt.forEach(t),bKr=r(bae," class method or the "),ere=n(bae,"A",{href:!0});var JXt=s(ere);vKr=r(JXt,"from_config()"),JXt.forEach(t),FKr=r(bae,` class
method.`),bae.forEach(t),TKr=i(bi),z$=n(bi,"P",{});var lHe=s(z$);MKr=r(lHe,"This class cannot be instantiated directly using "),swe=n(lHe,"CODE",{});var YXt=s(swe);EKr=r(YXt,"__init__()"),YXt.forEach(t),CKr=r(lHe," (throws an error)."),lHe.forEach(t),wKr=i(bi),ea=n(bi,"DIV",{class:!0});var z7=s(ea);T(Q$.$$.fragment,z7),AKr=i(z7),lwe=n(z7,"P",{});var KXt=s(lwe);LKr=r(KXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KXt.forEach(t),yKr=i(z7),vf=n(z7,"P",{});var vae=s(vf);xKr=r(vae,`Note:
Loading a model from its configuration file does `),iwe=n(vae,"STRONG",{});var ZXt=s(iwe);$Kr=r(ZXt,"not"),ZXt.forEach(t),kKr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=n(vae,"A",{href:!0});var ezt=s(ore);SKr=r(ezt,"from_pretrained()"),ezt.forEach(t),RKr=r(vae," to load the model weights."),vae.forEach(t),PKr=i(z7),T(tw.$$.fragment,z7),z7.forEach(t),BKr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(W$.$$.fragment,vi),NKr=i(vi),dwe=n(vi,"P",{});var ozt=s(dwe);IKr=r(ozt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ozt.forEach(t),qKr=i(vi),yn=n(vi,"P",{});var Q7=s(yn);jKr=r(Q7,"The model class to instantiate is selected based on the "),cwe=n(Q7,"CODE",{});var rzt=s(cwe);DKr=r(rzt,"model_type"),rzt.forEach(t),GKr=r(Q7,` property of the config object (either
passed as an argument or loaded from `),fwe=n(Q7,"CODE",{});var tzt=s(fwe);OKr=r(tzt,"pretrained_model_name_or_path"),tzt.forEach(t),VKr=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mwe=n(Q7,"CODE",{});var azt=s(mwe);XKr=r(azt,"pretrained_model_name_or_path"),azt.forEach(t),zKr=r(Q7,":"),Q7.forEach(t),QKr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);aw=n(Mo,"LI",{});var NVe=s(aw);gwe=n(NVe,"STRONG",{});var nzt=s(gwe);WKr=r(nzt,"albert"),nzt.forEach(t),HKr=r(NVe," \u2014 "),rre=n(NVe,"A",{href:!0});var szt=s(rre);UKr=r(szt,"FlaxAlbertForTokenClassification"),szt.forEach(t),JKr=r(NVe," (ALBERT model)"),NVe.forEach(t),YKr=i(Mo),nw=n(Mo,"LI",{});var IVe=s(nw);hwe=n(IVe,"STRONG",{});var lzt=s(hwe);KKr=r(lzt,"bert"),lzt.forEach(t),ZKr=r(IVe," \u2014 "),tre=n(IVe,"A",{href:!0});var izt=s(tre);eZr=r(izt,"FlaxBertForTokenClassification"),izt.forEach(t),oZr=r(IVe," (BERT model)"),IVe.forEach(t),rZr=i(Mo),sw=n(Mo,"LI",{});var qVe=s(sw);pwe=n(qVe,"STRONG",{});var dzt=s(pwe);tZr=r(dzt,"big_bird"),dzt.forEach(t),aZr=r(qVe," \u2014 "),are=n(qVe,"A",{href:!0});var czt=s(are);nZr=r(czt,"FlaxBigBirdForTokenClassification"),czt.forEach(t),sZr=r(qVe," (BigBird model)"),qVe.forEach(t),lZr=i(Mo),lw=n(Mo,"LI",{});var jVe=s(lw);_we=n(jVe,"STRONG",{});var fzt=s(_we);iZr=r(fzt,"distilbert"),fzt.forEach(t),dZr=r(jVe," \u2014 "),nre=n(jVe,"A",{href:!0});var mzt=s(nre);cZr=r(mzt,"FlaxDistilBertForTokenClassification"),mzt.forEach(t),fZr=r(jVe," (DistilBERT model)"),jVe.forEach(t),mZr=i(Mo),iw=n(Mo,"LI",{});var DVe=s(iw);uwe=n(DVe,"STRONG",{});var gzt=s(uwe);gZr=r(gzt,"electra"),gzt.forEach(t),hZr=r(DVe," \u2014 "),sre=n(DVe,"A",{href:!0});var hzt=s(sre);pZr=r(hzt,"FlaxElectraForTokenClassification"),hzt.forEach(t),_Zr=r(DVe," (ELECTRA model)"),DVe.forEach(t),uZr=i(Mo),dw=n(Mo,"LI",{});var GVe=s(dw);bwe=n(GVe,"STRONG",{});var pzt=s(bwe);bZr=r(pzt,"roberta"),pzt.forEach(t),vZr=r(GVe," \u2014 "),lre=n(GVe,"A",{href:!0});var _zt=s(lre);FZr=r(_zt,"FlaxRobertaForTokenClassification"),_zt.forEach(t),TZr=r(GVe," (RoBERTa model)"),GVe.forEach(t),MZr=i(Mo),cw=n(Mo,"LI",{});var OVe=s(cw);vwe=n(OVe,"STRONG",{});var uzt=s(vwe);EZr=r(uzt,"roformer"),uzt.forEach(t),CZr=r(OVe," \u2014 "),ire=n(OVe,"A",{href:!0});var bzt=s(ire);wZr=r(bzt,"FlaxRoFormerForTokenClassification"),bzt.forEach(t),AZr=r(OVe," (RoFormer model)"),OVe.forEach(t),LZr=i(Mo),fw=n(Mo,"LI",{});var VVe=s(fw);Fwe=n(VVe,"STRONG",{});var vzt=s(Fwe);yZr=r(vzt,"xlm-roberta"),vzt.forEach(t),xZr=r(VVe," \u2014 "),dre=n(VVe,"A",{href:!0});var Fzt=s(dre);$Zr=r(Fzt,"FlaxXLMRobertaForTokenClassification"),Fzt.forEach(t),kZr=r(VVe," (XLM-RoBERTa model)"),VVe.forEach(t),Mo.forEach(t),SZr=i(vi),T(mw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Zze=i(f),Ff=n(f,"H2",{class:!0});var iHe=s(Ff);gw=n(iHe,"A",{id:!0,class:!0,href:!0});var Tzt=s(gw);Twe=n(Tzt,"SPAN",{});var Mzt=s(Twe);T(H$.$$.fragment,Mzt),Mzt.forEach(t),Tzt.forEach(t),RZr=i(iHe),Mwe=n(iHe,"SPAN",{});var Ezt=s(Mwe);PZr=r(Ezt,"FlaxAutoModelForMultipleChoice"),Ezt.forEach(t),iHe.forEach(t),eQe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(U$.$$.fragment,Fi),BZr=i(Fi),Tf=n(Fi,"P",{});var Fae=s(Tf);NZr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cre=n(Fae,"A",{href:!0});var Czt=s(cre);IZr=r(Czt,"from_pretrained()"),Czt.forEach(t),qZr=r(Fae," class method or the "),fre=n(Fae,"A",{href:!0});var wzt=s(fre);jZr=r(wzt,"from_config()"),wzt.forEach(t),DZr=r(Fae,` class
method.`),Fae.forEach(t),GZr=i(Fi),J$=n(Fi,"P",{});var dHe=s(J$);OZr=r(dHe,"This class cannot be instantiated directly using "),Ewe=n(dHe,"CODE",{});var Azt=s(Ewe);VZr=r(Azt,"__init__()"),Azt.forEach(t),XZr=r(dHe," (throws an error)."),dHe.forEach(t),zZr=i(Fi),oa=n(Fi,"DIV",{class:!0});var W7=s(oa);T(Y$.$$.fragment,W7),QZr=i(W7),Cwe=n(W7,"P",{});var Lzt=s(Cwe);WZr=r(Lzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lzt.forEach(t),HZr=i(W7),Mf=n(W7,"P",{});var Tae=s(Mf);UZr=r(Tae,`Note:
Loading a model from its configuration file does `),wwe=n(Tae,"STRONG",{});var yzt=s(wwe);JZr=r(yzt,"not"),yzt.forEach(t),YZr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=n(Tae,"A",{href:!0});var xzt=s(mre);KZr=r(xzt,"from_pretrained()"),xzt.forEach(t),ZZr=r(Tae," to load the model weights."),Tae.forEach(t),eet=i(W7),T(hw.$$.fragment,W7),W7.forEach(t),oet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(K$.$$.fragment,Ti),ret=i(Ti),Awe=n(Ti,"P",{});var $zt=s(Awe);tet=r($zt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$zt.forEach(t),aet=i(Ti),xn=n(Ti,"P",{});var H7=s(xn);net=r(H7,"The model class to instantiate is selected based on the "),Lwe=n(H7,"CODE",{});var kzt=s(Lwe);set=r(kzt,"model_type"),kzt.forEach(t),iet=r(H7,` property of the config object (either
passed as an argument or loaded from `),ywe=n(H7,"CODE",{});var Szt=s(ywe);det=r(Szt,"pretrained_model_name_or_path"),Szt.forEach(t),cet=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=n(H7,"CODE",{});var Rzt=s(xwe);fet=r(Rzt,"pretrained_model_name_or_path"),Rzt.forEach(t),met=r(H7,":"),H7.forEach(t),get=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);pw=n(Eo,"LI",{});var XVe=s(pw);$we=n(XVe,"STRONG",{});var Pzt=s($we);het=r(Pzt,"albert"),Pzt.forEach(t),pet=r(XVe," \u2014 "),gre=n(XVe,"A",{href:!0});var Bzt=s(gre);_et=r(Bzt,"FlaxAlbertForMultipleChoice"),Bzt.forEach(t),uet=r(XVe," (ALBERT model)"),XVe.forEach(t),bet=i(Eo),_w=n(Eo,"LI",{});var zVe=s(_w);kwe=n(zVe,"STRONG",{});var Nzt=s(kwe);vet=r(Nzt,"bert"),Nzt.forEach(t),Fet=r(zVe," \u2014 "),hre=n(zVe,"A",{href:!0});var Izt=s(hre);Tet=r(Izt,"FlaxBertForMultipleChoice"),Izt.forEach(t),Met=r(zVe," (BERT model)"),zVe.forEach(t),Eet=i(Eo),uw=n(Eo,"LI",{});var QVe=s(uw);Swe=n(QVe,"STRONG",{});var qzt=s(Swe);Cet=r(qzt,"big_bird"),qzt.forEach(t),wet=r(QVe," \u2014 "),pre=n(QVe,"A",{href:!0});var jzt=s(pre);Aet=r(jzt,"FlaxBigBirdForMultipleChoice"),jzt.forEach(t),Let=r(QVe," (BigBird model)"),QVe.forEach(t),yet=i(Eo),bw=n(Eo,"LI",{});var WVe=s(bw);Rwe=n(WVe,"STRONG",{});var Dzt=s(Rwe);xet=r(Dzt,"distilbert"),Dzt.forEach(t),$et=r(WVe," \u2014 "),_re=n(WVe,"A",{href:!0});var Gzt=s(_re);ket=r(Gzt,"FlaxDistilBertForMultipleChoice"),Gzt.forEach(t),Set=r(WVe," (DistilBERT model)"),WVe.forEach(t),Ret=i(Eo),vw=n(Eo,"LI",{});var HVe=s(vw);Pwe=n(HVe,"STRONG",{});var Ozt=s(Pwe);Pet=r(Ozt,"electra"),Ozt.forEach(t),Bet=r(HVe," \u2014 "),ure=n(HVe,"A",{href:!0});var Vzt=s(ure);Net=r(Vzt,"FlaxElectraForMultipleChoice"),Vzt.forEach(t),Iet=r(HVe," (ELECTRA model)"),HVe.forEach(t),qet=i(Eo),Fw=n(Eo,"LI",{});var UVe=s(Fw);Bwe=n(UVe,"STRONG",{});var Xzt=s(Bwe);jet=r(Xzt,"roberta"),Xzt.forEach(t),Det=r(UVe," \u2014 "),bre=n(UVe,"A",{href:!0});var zzt=s(bre);Get=r(zzt,"FlaxRobertaForMultipleChoice"),zzt.forEach(t),Oet=r(UVe," (RoBERTa model)"),UVe.forEach(t),Vet=i(Eo),Tw=n(Eo,"LI",{});var JVe=s(Tw);Nwe=n(JVe,"STRONG",{});var Qzt=s(Nwe);Xet=r(Qzt,"roformer"),Qzt.forEach(t),zet=r(JVe," \u2014 "),vre=n(JVe,"A",{href:!0});var Wzt=s(vre);Qet=r(Wzt,"FlaxRoFormerForMultipleChoice"),Wzt.forEach(t),Wet=r(JVe," (RoFormer model)"),JVe.forEach(t),Het=i(Eo),Mw=n(Eo,"LI",{});var YVe=s(Mw);Iwe=n(YVe,"STRONG",{});var Hzt=s(Iwe);Uet=r(Hzt,"xlm-roberta"),Hzt.forEach(t),Jet=r(YVe," \u2014 "),Fre=n(YVe,"A",{href:!0});var Uzt=s(Fre);Yet=r(Uzt,"FlaxXLMRobertaForMultipleChoice"),Uzt.forEach(t),Ket=r(YVe," (XLM-RoBERTa model)"),YVe.forEach(t),Eo.forEach(t),Zet=i(Ti),T(Ew.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),oQe=i(f),Ef=n(f,"H2",{class:!0});var cHe=s(Ef);Cw=n(cHe,"A",{id:!0,class:!0,href:!0});var Jzt=s(Cw);qwe=n(Jzt,"SPAN",{});var Yzt=s(qwe);T(Z$.$$.fragment,Yzt),Yzt.forEach(t),Jzt.forEach(t),eot=i(cHe),jwe=n(cHe,"SPAN",{});var Kzt=s(jwe);oot=r(Kzt,"FlaxAutoModelForNextSentencePrediction"),Kzt.forEach(t),cHe.forEach(t),rQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(ek.$$.fragment,Mi),rot=i(Mi),Cf=n(Mi,"P",{});var Mae=s(Cf);tot=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tre=n(Mae,"A",{href:!0});var Zzt=s(Tre);aot=r(Zzt,"from_pretrained()"),Zzt.forEach(t),not=r(Mae," class method or the "),Mre=n(Mae,"A",{href:!0});var eQt=s(Mre);sot=r(eQt,"from_config()"),eQt.forEach(t),lot=r(Mae,` class
method.`),Mae.forEach(t),iot=i(Mi),ok=n(Mi,"P",{});var fHe=s(ok);dot=r(fHe,"This class cannot be instantiated directly using "),Dwe=n(fHe,"CODE",{});var oQt=s(Dwe);cot=r(oQt,"__init__()"),oQt.forEach(t),fot=r(fHe," (throws an error)."),fHe.forEach(t),mot=i(Mi),ra=n(Mi,"DIV",{class:!0});var U7=s(ra);T(rk.$$.fragment,U7),got=i(U7),Gwe=n(U7,"P",{});var rQt=s(Gwe);hot=r(rQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rQt.forEach(t),pot=i(U7),wf=n(U7,"P",{});var Eae=s(wf);_ot=r(Eae,`Note:
Loading a model from its configuration file does `),Owe=n(Eae,"STRONG",{});var tQt=s(Owe);uot=r(tQt,"not"),tQt.forEach(t),bot=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Eae,"A",{href:!0});var aQt=s(Ere);vot=r(aQt,"from_pretrained()"),aQt.forEach(t),Fot=r(Eae," to load the model weights."),Eae.forEach(t),Tot=i(U7),T(ww.$$.fragment,U7),U7.forEach(t),Mot=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(tk.$$.fragment,Ei),Eot=i(Ei),Vwe=n(Ei,"P",{});var nQt=s(Vwe);Cot=r(nQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nQt.forEach(t),wot=i(Ei),$n=n(Ei,"P",{});var J7=s($n);Aot=r(J7,"The model class to instantiate is selected based on the "),Xwe=n(J7,"CODE",{});var sQt=s(Xwe);Lot=r(sQt,"model_type"),sQt.forEach(t),yot=r(J7,` property of the config object (either
passed as an argument or loaded from `),zwe=n(J7,"CODE",{});var lQt=s(zwe);xot=r(lQt,"pretrained_model_name_or_path"),lQt.forEach(t),$ot=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qwe=n(J7,"CODE",{});var iQt=s(Qwe);kot=r(iQt,"pretrained_model_name_or_path"),iQt.forEach(t),Sot=r(J7,":"),J7.forEach(t),Rot=i(Ei),Wwe=n(Ei,"UL",{});var dQt=s(Wwe);Aw=n(dQt,"LI",{});var KVe=s(Aw);Hwe=n(KVe,"STRONG",{});var cQt=s(Hwe);Pot=r(cQt,"bert"),cQt.forEach(t),Bot=r(KVe," \u2014 "),Cre=n(KVe,"A",{href:!0});var fQt=s(Cre);Not=r(fQt,"FlaxBertForNextSentencePrediction"),fQt.forEach(t),Iot=r(KVe," (BERT model)"),KVe.forEach(t),dQt.forEach(t),qot=i(Ei),T(Lw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),tQe=i(f),Af=n(f,"H2",{class:!0});var mHe=s(Af);yw=n(mHe,"A",{id:!0,class:!0,href:!0});var mQt=s(yw);Uwe=n(mQt,"SPAN",{});var gQt=s(Uwe);T(ak.$$.fragment,gQt),gQt.forEach(t),mQt.forEach(t),jot=i(mHe),Jwe=n(mHe,"SPAN",{});var hQt=s(Jwe);Dot=r(hQt,"FlaxAutoModelForImageClassification"),hQt.forEach(t),mHe.forEach(t),aQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(nk.$$.fragment,Ci),Got=i(Ci),Lf=n(Ci,"P",{});var Cae=s(Lf);Oot=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wre=n(Cae,"A",{href:!0});var pQt=s(wre);Vot=r(pQt,"from_pretrained()"),pQt.forEach(t),Xot=r(Cae," class method or the "),Are=n(Cae,"A",{href:!0});var _Qt=s(Are);zot=r(_Qt,"from_config()"),_Qt.forEach(t),Qot=r(Cae,` class
method.`),Cae.forEach(t),Wot=i(Ci),sk=n(Ci,"P",{});var gHe=s(sk);Hot=r(gHe,"This class cannot be instantiated directly using "),Ywe=n(gHe,"CODE",{});var uQt=s(Ywe);Uot=r(uQt,"__init__()"),uQt.forEach(t),Jot=r(gHe," (throws an error)."),gHe.forEach(t),Yot=i(Ci),ta=n(Ci,"DIV",{class:!0});var Y7=s(ta);T(lk.$$.fragment,Y7),Kot=i(Y7),Kwe=n(Y7,"P",{});var bQt=s(Kwe);Zot=r(bQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bQt.forEach(t),ert=i(Y7),yf=n(Y7,"P",{});var wae=s(yf);ort=r(wae,`Note:
Loading a model from its configuration file does `),Zwe=n(wae,"STRONG",{});var vQt=s(Zwe);rrt=r(vQt,"not"),vQt.forEach(t),trt=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(wae,"A",{href:!0});var FQt=s(Lre);art=r(FQt,"from_pretrained()"),FQt.forEach(t),nrt=r(wae," to load the model weights."),wae.forEach(t),srt=i(Y7),T(xw.$$.fragment,Y7),Y7.forEach(t),lrt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(ik.$$.fragment,wi),irt=i(wi),eAe=n(wi,"P",{});var TQt=s(eAe);drt=r(TQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TQt.forEach(t),crt=i(wi),kn=n(wi,"P",{});var K7=s(kn);frt=r(K7,"The model class to instantiate is selected based on the "),oAe=n(K7,"CODE",{});var MQt=s(oAe);mrt=r(MQt,"model_type"),MQt.forEach(t),grt=r(K7,` property of the config object (either
passed as an argument or loaded from `),rAe=n(K7,"CODE",{});var EQt=s(rAe);hrt=r(EQt,"pretrained_model_name_or_path"),EQt.forEach(t),prt=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tAe=n(K7,"CODE",{});var CQt=s(tAe);_rt=r(CQt,"pretrained_model_name_or_path"),CQt.forEach(t),urt=r(K7,":"),K7.forEach(t),brt=i(wi),dk=n(wi,"UL",{});var hHe=s(dk);$w=n(hHe,"LI",{});var ZVe=s($w);aAe=n(ZVe,"STRONG",{});var wQt=s(aAe);vrt=r(wQt,"beit"),wQt.forEach(t),Frt=r(ZVe," \u2014 "),yre=n(ZVe,"A",{href:!0});var AQt=s(yre);Trt=r(AQt,"FlaxBeitForImageClassification"),AQt.forEach(t),Mrt=r(ZVe," (BEiT model)"),ZVe.forEach(t),Ert=i(hHe),kw=n(hHe,"LI",{});var eXe=s(kw);nAe=n(eXe,"STRONG",{});var LQt=s(nAe);Crt=r(LQt,"vit"),LQt.forEach(t),wrt=r(eXe," \u2014 "),xre=n(eXe,"A",{href:!0});var yQt=s(xre);Art=r(yQt,"FlaxViTForImageClassification"),yQt.forEach(t),Lrt=r(eXe," (ViT model)"),eXe.forEach(t),hHe.forEach(t),yrt=i(wi),T(Sw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),nQe=i(f),xf=n(f,"H2",{class:!0});var pHe=s(xf);Rw=n(pHe,"A",{id:!0,class:!0,href:!0});var xQt=s(Rw);sAe=n(xQt,"SPAN",{});var $Qt=s(sAe);T(ck.$$.fragment,$Qt),$Qt.forEach(t),xQt.forEach(t),xrt=i(pHe),lAe=n(pHe,"SPAN",{});var kQt=s(lAe);$rt=r(kQt,"FlaxAutoModelForVision2Seq"),kQt.forEach(t),pHe.forEach(t),sQe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(fk.$$.fragment,Ai),krt=i(Ai),$f=n(Ai,"P",{});var Aae=s($f);Srt=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$re=n(Aae,"A",{href:!0});var SQt=s($re);Rrt=r(SQt,"from_pretrained()"),SQt.forEach(t),Prt=r(Aae," class method or the "),kre=n(Aae,"A",{href:!0});var RQt=s(kre);Brt=r(RQt,"from_config()"),RQt.forEach(t),Nrt=r(Aae,` class
method.`),Aae.forEach(t),Irt=i(Ai),mk=n(Ai,"P",{});var _He=s(mk);qrt=r(_He,"This class cannot be instantiated directly using "),iAe=n(_He,"CODE",{});var PQt=s(iAe);jrt=r(PQt,"__init__()"),PQt.forEach(t),Drt=r(_He," (throws an error)."),_He.forEach(t),Grt=i(Ai),aa=n(Ai,"DIV",{class:!0});var Z7=s(aa);T(gk.$$.fragment,Z7),Ort=i(Z7),dAe=n(Z7,"P",{});var BQt=s(dAe);Vrt=r(BQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BQt.forEach(t),Xrt=i(Z7),kf=n(Z7,"P",{});var Lae=s(kf);zrt=r(Lae,`Note:
Loading a model from its configuration file does `),cAe=n(Lae,"STRONG",{});var NQt=s(cAe);Qrt=r(NQt,"not"),NQt.forEach(t),Wrt=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(Lae,"A",{href:!0});var IQt=s(Sre);Hrt=r(IQt,"from_pretrained()"),IQt.forEach(t),Urt=r(Lae," to load the model weights."),Lae.forEach(t),Jrt=i(Z7),T(Pw.$$.fragment,Z7),Z7.forEach(t),Yrt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(hk.$$.fragment,Li),Krt=i(Li),fAe=n(Li,"P",{});var qQt=s(fAe);Zrt=r(qQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qQt.forEach(t),ett=i(Li),Sn=n(Li,"P",{});var eL=s(Sn);ott=r(eL,"The model class to instantiate is selected based on the "),mAe=n(eL,"CODE",{});var jQt=s(mAe);rtt=r(jQt,"model_type"),jQt.forEach(t),ttt=r(eL,` property of the config object (either
passed as an argument or loaded from `),gAe=n(eL,"CODE",{});var DQt=s(gAe);att=r(DQt,"pretrained_model_name_or_path"),DQt.forEach(t),ntt=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=n(eL,"CODE",{});var GQt=s(hAe);stt=r(GQt,"pretrained_model_name_or_path"),GQt.forEach(t),ltt=r(eL,":"),eL.forEach(t),itt=i(Li),pAe=n(Li,"UL",{});var OQt=s(pAe);Bw=n(OQt,"LI",{});var oXe=s(Bw);_Ae=n(oXe,"STRONG",{});var VQt=s(_Ae);dtt=r(VQt,"vision-encoder-decoder"),VQt.forEach(t),ctt=r(oXe," \u2014 "),Rre=n(oXe,"A",{href:!0});var XQt=s(Rre);ftt=r(XQt,"FlaxVisionEncoderDecoderModel"),XQt.forEach(t),mtt=r(oXe," (Vision Encoder decoder model)"),oXe.forEach(t),OQt.forEach(t),gtt=i(Li),T(Nw.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(JHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(VS,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(XS,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertConfig"),c(zS,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartConfig"),c(QS,"href","/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitConfig"),c(WS,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertConfig"),c(HS,"href","/docs/transformers/pr_18126/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(US,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdConfig"),c(JS,"href","/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(YS,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(KS,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(ZS,"href","/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomConfig"),c(eR,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertConfig"),c(oR,"href","/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineConfig"),c(rR,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPConfig"),c(tR,"href","/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenConfig"),c(aR,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertConfig"),c(nR,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextConfig"),c(sR,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLConfig"),c(lR,"href","/docs/transformers/pr_18126/en/model_doc/cvt#transformers.CvtConfig"),c(iR,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(dR,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(cR,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(fR,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaConfig"),c(mR,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(gR,"href","/docs/transformers/pr_18126/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(hR,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTConfig"),c(pR,"href","/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrConfig"),c(_R,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertConfig"),c(uR,"href","/docs/transformers/pr_18126/en/model_doc/dpr#transformers.DPRConfig"),c(bR,"href","/docs/transformers/pr_18126/en/model_doc/dpt#transformers.DPTConfig"),c(vR,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraConfig"),c(FR,"href","/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(TR,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertConfig"),c(MR,"href","/docs/transformers/pr_18126/en/model_doc/flava#transformers.FlavaConfig"),c(ER,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetConfig"),c(CR,"href","/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTConfig"),c(wR,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelConfig"),c(AR,"href","/docs/transformers/pr_18126/en/model_doc/glpn#transformers.GLPNConfig"),c(LR,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Config"),c(yR,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(xR,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c($R,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJConfig"),c(kR,"href","/docs/transformers/pr_18126/en/model_doc/groupvit#transformers.GroupViTConfig"),c(SR,"href","/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertConfig"),c(RR,"href","/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertConfig"),c(PR,"href","/docs/transformers/pr_18126/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(BR,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(NR,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(IR,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(qR,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDConfig"),c(jR,"href","/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitConfig"),c(DR,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerConfig"),c(GR,"href","/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5Config"),c(OR,"href","/docs/transformers/pr_18126/en/model_doc/luke#transformers.LukeConfig"),c(VR,"href","/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertConfig"),c(XR,"href","/docs/transformers/pr_18126/en/model_doc/m2m_100#transformers.M2M100Config"),c(zR,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianConfig"),c(QR,"href","/docs/transformers/pr_18126/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(WR,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartConfig"),c(HR,"href","/docs/transformers/pr_18126/en/model_doc/mctct#transformers.MCTCTConfig"),c(UR,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(JR,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(YR,"href","/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(KR,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetConfig"),c(ZR,"href","/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Config"),c(eP,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpConfig"),c(oP,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaConfig"),c(rP,"href","/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(tP,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(aP,"href","/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTConfig"),c(nP,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusConfig"),c(sP,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverConfig"),c(lP,"href","/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartConfig"),c(iP,"href","/docs/transformers/pr_18126/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(dP,"href","/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(cP,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fP,"href","/docs/transformers/pr_18126/en/model_doc/rag#transformers.RagConfig"),c(mP,"href","/docs/transformers/pr_18126/en/model_doc/realm#transformers.RealmConfig"),c(gP,"href","/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerConfig"),c(hP,"href","/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetConfig"),c(pP,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertConfig"),c(_P,"href","/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetConfig"),c(uP,"href","/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertConfig"),c(bP,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaConfig"),c(vP,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerConfig"),c(FP,"href","/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerConfig"),c(TP,"href","/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWConfig"),c(MP,"href","/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDConfig"),c(EP,"href","/docs/transformers/pr_18126/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(CP,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(wP,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(AP,"href","/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterConfig"),c(LP,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(yP,"href","/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinConfig"),c(xP,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Config"),c($P,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasConfig"),c(kP,"href","/docs/transformers/pr_18126/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(SP,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(RP,"href","/docs/transformers/pr_18126/en/model_doc/trocr#transformers.TrOCRConfig"),c(PP,"href","/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(BP,"href","/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(NP,"href","/docs/transformers/pr_18126/en/model_doc/van#transformers.VanConfig"),c(IP,"href","/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltConfig"),c(qP,"href","/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(jP,"href","/docs/transformers/pr_18126/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(DP,"href","/docs/transformers/pr_18126/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(GP,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTConfig"),c(OP,"href","/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(VP,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(XP,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(zP,"href","/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMConfig"),c(QP,"href","/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMConfig"),c(WP,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMConfig"),c(HP,"href","/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(UP,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(JP,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(YP,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetConfig"),c(KP,"href","/docs/transformers/pr_18126/en/model_doc/yolos#transformers.YolosConfig"),c(ZP,"href","/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(eB,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(oB,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertTokenizer"),c(rB,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tB,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartTokenizer"),c(aB,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartTokenizerFast"),c(nB,"href","/docs/transformers/pr_18126/en/model_doc/barthez#transformers.BarthezTokenizer"),c(sB,"href","/docs/transformers/pr_18126/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(lB,"href","/docs/transformers/pr_18126/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(iB,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizer"),c(dB,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizerFast"),c(cB,"href","/docs/transformers/pr_18126/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(fB,"href","/docs/transformers/pr_18126/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(mB,"href","/docs/transformers/pr_18126/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(gB,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(hB,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(pB,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_B,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uB,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(bB,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(vB,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(FB,"href","/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(TB,"href","/docs/transformers/pr_18126/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(MB,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertTokenizer"),c(EB,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(CB,"href","/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineTokenizer"),c(wB,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPTokenizer"),c(AB,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(LB,"href","/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(yB,"href","/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(xB,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertTokenizer"),c($B,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_18126/en/model_doc/cpm#transformers.CpmTokenizer"),c(SB,"href","/docs/transformers/pr_18126/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(RB,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(PB,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaTokenizer"),c(IB,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(jB,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(DB,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(GB,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(OB,"href","/docs/transformers/pr_18126/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(VB,"href","/docs/transformers/pr_18126/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(XB,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraTokenizer"),c(zB,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QB,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(WB,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetTokenizer"),c(HB,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(UB,"href","/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(JB,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelTokenizer"),c(YB,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(KB,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eN,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oN,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rN,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(tN,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aN,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nN,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPTokenizer"),c(sN,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(lN,"href","/docs/transformers/pr_18126/en/model_doc/herbert#transformers.HerbertTokenizer"),c(iN,"href","/docs/transformers/pr_18126/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dN,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cN,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fN,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mN,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gN,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hN,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pN,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_N,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uN,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(bN,"href","/docs/transformers/pr_18126/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(vN,"href","/docs/transformers/pr_18126/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(FN,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDTokenizer"),c(TN,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDTokenizerFast"),c(MN,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerTokenizer"),c(EN,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(CN,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Tokenizer"),c(wN,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5TokenizerFast"),c(AN,"href","/docs/transformers/pr_18126/en/model_doc/luke#transformers.LukeTokenizer"),c(LN,"href","/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(yN,"href","/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(xN,"href","/docs/transformers/pr_18126/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c($N,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianTokenizer"),c(kN,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartTokenizer"),c(SN,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(RN,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(PN,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(BN,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizer"),c(NN,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizerFast"),c(IN,"href","/docs/transformers/pr_18126/en/model_doc/mluke#transformers.MLukeTokenizer"),c(qN,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(jN,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(DN,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(GN,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ON,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Tokenizer"),c(VN,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5TokenizerFast"),c(XN,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpTokenizer"),c(zN,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(QN,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizer"),c(WN,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizerFast"),c(HN,"href","/docs/transformers/pr_18126/en/model_doc/nllb#transformers.NllbTokenizer"),c(UN,"href","/docs/transformers/pr_18126/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(JN,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertTokenizer"),c(YN,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(KN,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(ZN,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(eI,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oI,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(rI,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(tI,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(aI,"href","/docs/transformers/pr_18126/en/model_doc/phobert#transformers.PhobertTokenizer"),c(nI,"href","/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartTokenizer"),c(sI,"href","/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(lI,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizer"),c(iI,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizerFast"),c(dI,"href","/docs/transformers/pr_18126/en/model_doc/rag#transformers.RagTokenizer"),c(cI,"href","/docs/transformers/pr_18126/en/model_doc/realm#transformers.RealmTokenizer"),c(fI,"href","/docs/transformers/pr_18126/en/model_doc/realm#transformers.RealmTokenizerFast"),c(mI,"href","/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerTokenizer"),c(gI,"href","/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(hI,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertTokenizer"),c(pI,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(_I,"href","/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(uI,"href","/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(bI,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vI,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FI,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(TI,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(MI,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(EI,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(CI,"href","/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterTokenizer"),c(wI,"href","/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(AI,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(LI,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(yI,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Tokenizer"),c(xI,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5TokenizerFast"),c($I,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasTokenizer"),c(kI,"href","/docs/transformers/pr_18126/en/model_doc/tapex#transformers.TapexTokenizer"),c(SI,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(RI,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizer"),c(NI,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qI,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jI,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(DI,"href","/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMTokenizer"),c(GI,"href","/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(OI,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMTokenizer"),c(VI,"href","/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(XI,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zI,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(QI,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WI,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HI,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(UI,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(JI,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertTokenizer"),c(YI,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"id","transformers.AutoFeatureExtractor"),c(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(KI,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(ZI,"href","/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eq,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(oq,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rq,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aq,"href","/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(sq,"href","/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(lq,"href","/docs/transformers/pr_18126/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(iq,"href","/docs/transformers/pr_18126/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(dq,"href","/docs/transformers/pr_18126/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(cq,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mq,"href","/docs/transformers/pr_18126/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(hq,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(pq,"href","/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(_q,"href","/docs/transformers/pr_18126/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(uq,"href","/docs/transformers/pr_18126/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(bq,"href","/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(vq,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18126/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(yq,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xq,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($q,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Sq,"href","/docs/transformers/pr_18126/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(Rq,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Pq,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPProcessor"),c(Bq,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPProcessor"),c(Nq,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Iq,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(qq,"href","/docs/transformers/pr_18126/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(jq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Dq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Gq,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Oq,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Vq,"href","/docs/transformers/pr_18126/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Xq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltProcessor"),c(Wq,"href","/docs/transformers/pr_18126/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Hq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Jq,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(Yq,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kq,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zq,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ej,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertModel"),c(oj,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartModel"),c(rj,"href","/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitModel"),c(tj,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertModel"),c(aj,"href","/docs/transformers/pr_18126/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(nj,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdModel"),c(sj,"href","/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(lj,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(ij,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(dj,"href","/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomModel"),c(cj,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertModel"),c(fj,"href","/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineModel"),c(mj,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.CLIPModel"),c(gj,"href","/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenModel"),c(hj,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertModel"),c(pj,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextModel"),c(_j,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLModel"),c(uj,"href","/docs/transformers/pr_18126/en/model_doc/cvt#transformers.CvtModel"),c(bj,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(vj,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Fj,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Tj,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaModel"),c(Mj,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Ej,"href","/docs/transformers/pr_18126/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Cj,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTModel"),c(wj,"href","/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrModel"),c(Aj,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertModel"),c(Lj,"href","/docs/transformers/pr_18126/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(yj,"href","/docs/transformers/pr_18126/en/model_doc/dpt#transformers.DPTModel"),c(xj,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraModel"),c($j,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertModel"),c(kj,"href","/docs/transformers/pr_18126/en/model_doc/flava#transformers.FlavaModel"),c(Sj,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetModel"),c(Rj,"href","/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTModel"),c(Pj,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelModel"),c(Bj,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Nj,"href","/docs/transformers/pr_18126/en/model_doc/glpn#transformers.GLPNModel"),c(Ij,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2Model"),c(qj,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(jj,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Dj,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJModel"),c(Gj,"href","/docs/transformers/pr_18126/en/model_doc/groupvit#transformers.GroupViTModel"),c(Oj,"href","/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertModel"),c(Vj,"href","/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertModel"),c(Xj,"href","/docs/transformers/pr_18126/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(zj,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Qj,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Wj,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Hj,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDModel"),c(Uj,"href","/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitModel"),c(Jj,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerModel"),c(Yj,"href","/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5Model"),c(Kj,"href","/docs/transformers/pr_18126/en/model_doc/luke#transformers.LukeModel"),c(Zj,"href","/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertModel"),c(eD,"href","/docs/transformers/pr_18126/en/model_doc/m2m_100#transformers.M2M100Model"),c(oD,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianModel"),c(rD,"href","/docs/transformers/pr_18126/en/model_doc/maskformer#transformers.MaskFormerModel"),c(tD,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartModel"),c(aD,"href","/docs/transformers/pr_18126/en/model_doc/mctct#transformers.MCTCTModel"),c(nD,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(sD,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertModel"),c(lD,"href","/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTModel"),c(iD,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetModel"),c(dD,"href","/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5Model"),c(cD,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpModel"),c(fD,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaModel"),c(mD,"href","/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerModel"),c(gD,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(hD,"href","/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTModel"),c(pD,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusModel"),c(_D,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverModel"),c(uD,"href","/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartModel"),c(bD,"href","/docs/transformers/pr_18126/en/model_doc/poolformer#transformers.PoolFormerModel"),c(vD,"href","/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(FD,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertModel"),c(TD,"href","/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerModel"),c(MD,"href","/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetModel"),c(ED,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertModel"),c(CD,"href","/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetModel"),c(wD,"href","/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertModel"),c(AD,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaModel"),c(LD,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerModel"),c(yD,"href","/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerModel"),c(xD,"href","/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWModel"),c($D,"href","/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDModel"),c(kD,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(SD,"href","/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterModel"),c(RD,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(PD,"href","/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinModel"),c(BD,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5Model"),c(ND,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasModel"),c(ID,"href","/docs/transformers/pr_18126/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(qD,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(jD,"href","/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechModel"),c(DD,"href","/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(GD,"href","/docs/transformers/pr_18126/en/model_doc/van#transformers.VanModel"),c(OD,"href","/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltModel"),c(VD,"href","/docs/transformers/pr_18126/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(XD,"href","/docs/transformers/pr_18126/en/model_doc/visual_bert#transformers.VisualBertModel"),c(zD,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTModel"),c(QD,"href","/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(WD,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(HD,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(UD,"href","/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMModel"),c(JD,"href","/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMModel"),c(YD,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMModel"),c(KD,"href","/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(ZD,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(eG,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(oG,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetModel"),c(rG,"href","/docs/transformers/pr_18126/en/model_doc/yolos#transformers.YolosModel"),c(tG,"href","/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hu,"id","transformers.AutoModelForPreTraining"),c(Hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hu,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(aG,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nG,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sG,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lG,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForPreTraining"),c(iG,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForPreTraining"),c(cG,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(fG,"href","/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomForCausalLM"),c(mG,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gG,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hG,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pG,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_G,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uG,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bG,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForPreTraining"),c(vG,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(FG,"href","/docs/transformers/pr_18126/en/model_doc/flava#transformers.FlavaForPreTraining"),c(TG,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForPreTraining"),c(MG,"href","/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(CG,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wG,"href","/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AG,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LG,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yG,"href","/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(xG,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c($G,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(kG,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SG,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(PG,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(BG,"href","/docs/transformers/pr_18126/en/model_doc/retribert#transformers.RetriBertModel"),c(NG,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(IG,"href","/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(qG,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(jG,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(GG,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(OG,"href","/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(VG,"href","/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(XG,"href","/docs/transformers/pr_18126/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(zG,"href","/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(QG,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(WG,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(HG,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(UG,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(JG,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(YG,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V1,"id","transformers.AutoModelForCausalLM"),c(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V1,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(KG,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZG,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eO,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oO,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForCausalLM"),c(rO,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertLMHeadModel"),c(tO,"href","/docs/transformers/pr_18126/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(aO,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(nO,"href","/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(sO,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(lO,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(iO,"href","/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomForCausalLM"),c(dO,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(cO,"href","/docs/transformers/pr_18126/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(fO,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mO,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(gO,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForCausalLM"),c(hO,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pO,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(_O,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(uO,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(bO,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianForCausalLM"),c(vO,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForCausalLM"),c(FO,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(TO,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForCausalLM"),c(MO,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EO,"href","/docs/transformers/pr_18126/en/model_doc/opt#transformers.OPTForCausalLM"),c(CO,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wO,"href","/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(AO,"href","/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(LO,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(yO,"href","/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xO,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($O,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kO,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(SO,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(RO,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PO,"href","/docs/transformers/pr_18126/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(BO,"href","/docs/transformers/pr_18126/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(NO,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(IO,"href","/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(qO,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jO,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(DO,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R2,"id","transformers.AutoModelForMaskedLM"),c(R2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R2,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(GO,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zO,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForMaskedLM"),c(WO,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(HO,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(UO,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(JO,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(YO,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KO,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(eV,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oV,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rV,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tV,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(aV,"href","/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sV,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lV,"href","/docs/transformers/pr_18126/en/model_doc/luke#transformers.LukeForMaskedLM"),c(iV,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(fV,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mV,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(hV,"href","/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(pV,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(_V,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(bV,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(vV,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(FV,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(TV,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MV,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(EV,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(CV,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(wV,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(AV,"href","/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForSeq2SeqLM"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(LV,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(BV,"href","/docs/transformers/pr_18126/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_18126/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_18126/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.MarianMTModel"),c(DV,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18126/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_18126/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_18126/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForSequenceClassification"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(HV,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(KV,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(oX,"href","/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(rX,"href","/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(tX,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c($X,"href","/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18126/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(OX,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(VX,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(XX,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(zX,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(QX,"href","/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForMultipleChoice"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(WX,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(YX,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(oz,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(az,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(wz,"href","/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForNextSentencePrediction"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Az,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(kz,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Sz,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Rz,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Pz,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForTokenClassification"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(Bz,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(jz,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForTokenClassification"),c(Dz,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Gz,"href","/docs/transformers/pr_18126/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Oz,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Xz,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(zz,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(_Q,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(uQ,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bQ,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vQ,"href","/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForQuestionAnswering"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_18126/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_18126/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(IQ,"href","/docs/transformers/pr_18126/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18126/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18126/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18126/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18126/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18126/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18126/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18126/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18126/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18126/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_18126/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(lW,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(cW,"href","/docs/transformers/pr_18126/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForTableQuestionAnswering"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(fW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForImageClassification"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(pW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitForImageClassification"),c(vW,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(FW,"href","/docs/transformers/pr_18126/en/model_doc/cvt#transformers.CvtForImageClassification"),c(TW,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(MW,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTForImageClassification"),c(EW,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(CW,"href","/docs/transformers/pr_18126/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(wW,"href","/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitForImageClassification"),c(AW,"href","/docs/transformers/pr_18126/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(LW,"href","/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(yW,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xW,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($W,"href","/docs/transformers/pr_18126/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kW,"href","/docs/transformers/pr_18126/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SW,"href","/docs/transformers/pr_18126/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RW,"href","/docs/transformers/pr_18126/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PW,"href","/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BW,"href","/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinForImageClassification"),c(NW,"href","/docs/transformers/pr_18126/en/model_doc/van#transformers.VanForImageClassification"),c(IW,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForVision2Seq"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(qW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(OW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_18126/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForAudioClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(QW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JW,"href","/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KW,"href","/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(eH,"href","/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oH,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rH,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tH,"href","/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r8,"id","transformers.AutoModelForAudioFrameClassification"),c(r8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(aH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iH,"href","/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dH,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cH,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(fH,"href","/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f8,"id","transformers.AutoModelForCTC"),c(f8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f8,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(mH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(_H,"href","/docs/transformers/pr_18126/en/model_doc/hubert#transformers.HubertForCTC"),c(uH,"href","/docs/transformers/pr_18126/en/model_doc/mctct#transformers.MCTCTForCTC"),c(bH,"href","/docs/transformers/pr_18126/en/model_doc/sew#transformers.SEWForCTC"),c(vH,"href","/docs/transformers/pr_18126/en/model_doc/sew-d#transformers.SEWDForCTC"),c(FH,"href","/docs/transformers/pr_18126/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(TH,"href","/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(MH,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(EH,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(CH,"href","/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(w8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(wH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_18126/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(xH,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k8,"id","transformers.AutoModelForAudioXVector"),c(k8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k8,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c($H,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PH,"href","/docs/transformers/pr_18126/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(BH,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(NH,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(IH,"href","/docs/transformers/pr_18126/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D8,"id","transformers.AutoModelForMaskedImageModeling"),c(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D8,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(qH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OH,"href","/docs/transformers/pr_18126/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VH,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W8,"id","transformers.AutoModelForObjectDetection"),c(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W8,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(XH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrForObjectDetection"),c(HH,"href","/docs/transformers/pr_18126/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z8,"id","transformers.AutoModelForImageSegmentation"),c(Z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z8,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(UH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_18126/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.AutoModelForSemanticSegmentation"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_18126/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tU,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(aU,"href","/docs/transformers/pr_18126/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(nU,"href","/docs/transformers/pr_18126/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(sU,"href","/docs/transformers/pr_18126/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.AutoModelForInstanceSegmentation"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(lU,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_18126/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.TFAutoModel"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(fU,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertModel"),c(pU,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.TFBartModel"),c(_U,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertModel"),c(uU,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(bU,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(vU,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertModel"),c(FU,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.TFCLIPModel"),c(TU,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertModel"),c(MU,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.TFConvNextModel"),c(EU,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.TFCTRLModel"),c(CU,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(wU,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaModel"),c(AU,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(LU,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.TFDeiTModel"),c(yU,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xU,"href","/docs/transformers/pr_18126/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($U,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraModel"),c(kU,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(SU,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelModel"),c(RU,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(PU,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.TFGPT2Model"),c(BU,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.TFGPTJModel"),c(NU,"href","/docs/transformers/pr_18126/en/model_doc/hubert#transformers.TFHubertModel"),c(IU,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(qU,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.TFLEDModel"),c(jU,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerModel"),c(DU,"href","/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.TFLxmertModel"),c(GU,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.TFMarianModel"),c(OU,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.TFMBartModel"),c(VU,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(XU,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zU,"href","/docs/transformers/pr_18126/en/model_doc/mt5#transformers.TFMT5Model"),c(QU,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WU,"href","/docs/transformers/pr_18126/en/model_doc/opt#transformers.TFOPTModel"),c(HU,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.TFPegasusModel"),c(UU,"href","/docs/transformers/pr_18126/en/model_doc/regnet#transformers.TFRegNetModel"),c(JU,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertModel"),c(YU,"href","/docs/transformers/pr_18126/en/model_doc/resnet#transformers.TFResNetModel"),c(KU,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZU,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eJ,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oJ,"href","/docs/transformers/pr_18126/en/model_doc/swin#transformers.TFSwinModel"),c(rJ,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.TFT5Model"),c(tJ,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasModel"),c(aJ,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(nJ,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.TFViTModel"),c(sJ,"href","/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(lJ,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(iJ,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMModel"),c(dJ,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(cJ,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForPreTraining"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(fJ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(pJ,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForPreTraining"),c(uJ,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vJ,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FJ,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(TJ,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MJ,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(EJ,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CJ,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wJ,"href","/docs/transformers/pr_18126/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(AJ,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(LJ,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(yJ,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(xJ,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($J,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SJ,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(RJ,"href","/docs/transformers/pr_18126/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(PJ,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BJ,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(NJ,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForCausalLM"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(IJ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(GJ,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(OJ,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VJ,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XJ,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(zJ,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(QJ,"href","/docs/transformers/pr_18126/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(WJ,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(HJ,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(UJ,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(JJ,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YJ,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KJ,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForImageClassification"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_18126/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(tY,"href","/docs/transformers/pr_18126/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(aY,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(nY,"href","/docs/transformers/pr_18126/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(sY,"href","/docs/transformers/pr_18126/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(lY,"href","/docs/transformers/pr_18126/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(iY,"href","/docs/transformers/pr_18126/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(dY,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForMaskedLM"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(cY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(hY,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(pY,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uY,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(bY,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(vY,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(TY,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MY,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(EY,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CY,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(wY,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LY,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yY,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xY,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c($Y,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kY,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SY,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(RY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(DY,"href","/docs/transformers/pr_18126/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.TFMarianMTModel"),c(OY,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_18126/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForSequenceClassification"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(QY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(JY,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(KY,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_18126/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(eK,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(oK,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18126/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(gK,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(hK,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(pK,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(_K,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(uK,"href","/docs/transformers/pr_18126/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(bK,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(vK,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(FK,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForMultipleChoice"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(TK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c($K,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(SK,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(RK,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(BK,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(IK,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(qK,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(jK,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(DK,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(GK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(zK,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(QK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_18126/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForTokenClassification"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(JK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(tZ,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(aZ,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(nZ,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(dZ,"href","/docs/transformers/pr_18126/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(cZ,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(fZ,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(gZ,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(pZ,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(_Z,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uZ,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(bZ,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.TFAutoModelForQuestionAnswering"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(vZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_18126/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_18126/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_18126/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_18126/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_18126/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(kZ,"href","/docs/transformers/pr_18126/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_18126/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_18126/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_18126/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_18126/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_18126/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(DZ,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.TFAutoModelForVision2Seq"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(OZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(QZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/pr_18126/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModel"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(JZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertModel"),c(eee,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartModel"),c(oee,"href","/docs/transformers/pr_18126/en/model_doc/beit#transformers.FlaxBeitModel"),c(ree,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertModel"),c(tee,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(aee,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(nee,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(see,"href","/docs/transformers/pr_18126/en/model_doc/clip#transformers.FlaxCLIPModel"),c(lee,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(iee,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraModel"),c(dee,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(cee,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(fee,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(mee,"href","/docs/transformers/pr_18126/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(gee,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.FlaxMarianModel"),c(hee,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pee,"href","/docs/transformers/pr_18126/en/model_doc/mt5#transformers.FlaxMT5Model"),c(_ee,"href","/docs/transformers/pr_18126/en/model_doc/opt#transformers.FlaxOPTModel"),c(uee,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(bee,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(vee,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Fee,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.FlaxT5Model"),c(Tee,"href","/docs/transformers/pr_18126/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Mee,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.FlaxViTModel"),c(Eee,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Cee,"href","/docs/transformers/pr_18126/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wee,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForCausalLM"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(Aee,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c($ee,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(kee,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(See,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Ree,"href","/docs/transformers/pr_18126/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Pee,"href","/docs/transformers/pr_18126/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Bee,"href","/docs/transformers/pr_18126/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Nee,"href","/docs/transformers/pr_18126/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Iee,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(qee,"href","/docs/transformers/pr_18126/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForPreTraining"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(jee,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dee,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gee,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oee,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Vee,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Xee,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zee,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Qee,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Wee,"href","/docs/transformers/pr_18126/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Hee,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_18126/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Yee,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Kee,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Zee,"href","/docs/transformers/pr_18126/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(eoe,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForMaskedLM"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(ooe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(noe,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(soe,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(loe,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ioe,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(doe,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(coe,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(foe,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(moe,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(goe,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(hoe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(poe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_oe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uoe,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_18126/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_18126/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Toe,"href","/docs/transformers/pr_18126/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_18126/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Eoe,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_18126/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(woe,"href","/docs/transformers/pr_18126/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_18126/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForSequenceClassification"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(Loe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yoe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xoe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($oe,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(koe,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qoe,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(joe,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(Doe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18126/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18126/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForTokenClassification"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(Zoe,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ere,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ore,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rre,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tre,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(are,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nre,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sre,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lre,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(ire,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dre,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(cre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gre,"href","/docs/transformers/pr_18126/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hre,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pre,"href","/docs/transformers/pr_18126/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_re,"href","/docs/transformers/pr_18126/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(ure,"href","/docs/transformers/pr_18126/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bre,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vre,"href","/docs/transformers/pr_18126/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Fre,"href","/docs/transformers/pr_18126/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(Tre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/pr_18126/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForImageClassification"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(wre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Are,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yre,"href","/docs/transformers/pr_18126/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xre,"href","/docs/transformers/pr_18126/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c($re,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sre,"href","/docs/transformers/pr_18126/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rre,"href","/docs/transformers/pr_18126/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,yi),b(f,Bf,u),b(f,lt,u),e(lt,xi),e(lt,$i),e($i,oL),e(lt,Nf),b(f,Oe,u),b(f,We,u),e(We,ki),e(We,Pn),e(Pn,rL),e(We,Bn),e(We,Nn),e(Nn,tL),e(We,Si),e(We,In),e(In,aL),e(We,Ri),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,IS),e(Ae,Pi),e(Pi,qS),e(Ae,jS),b(f,wo,u),b(f,Ra,u),e(Ra,DS),e(Ra,qf),e(qf,GS),e(Ra,uHe),b(f,rXe,u),b(f,Bi,u),e(Bi,jf),e(jf,yae),M(nL,yae,null),e(Bi,bHe),e(Bi,xae),e(xae,vHe),b(f,tXe,u),b(f,qn,u),e(qn,FHe),e(qn,$ae),e($ae,THe),e(qn,MHe),e(qn,kae),e(kae,EHe),e(qn,CHe),b(f,aXe,u),M(sL,f,u),b(f,nXe,u),b(f,OS,u),e(OS,wHe),b(f,sXe,u),M(Df,f,u),b(f,lXe,u),b(f,Ni,u),e(Ni,Gf),e(Gf,Sae),M(lL,Sae,null),e(Ni,AHe),e(Ni,Rae),e(Rae,LHe),b(f,iXe,u),b(f,Ao,u),M(iL,Ao,null),e(Ao,yHe),e(Ao,dL),e(dL,xHe),e(dL,VS),e(VS,$He),e(dL,kHe),e(Ao,SHe),e(Ao,cL),e(cL,RHe),e(cL,Pae),e(Pae,PHe),e(cL,BHe),e(Ao,NHe),e(Ao,Lr),M(fL,Lr,null),e(Lr,IHe),e(Lr,Bae),e(Bae,qHe),e(Lr,jHe),e(Lr,Ii),e(Ii,DHe),e(Ii,Nae),e(Nae,GHe),e(Ii,OHe),e(Ii,Iae),e(Iae,VHe),e(Ii,XHe),e(Lr,zHe),e(Lr,A),e(A,Of),e(Of,qae),e(qae,QHe),e(Of,WHe),e(Of,XS),e(XS,HHe),e(Of,UHe),e(A,JHe),e(A,Vf),e(Vf,jae),e(jae,YHe),e(Vf,KHe),e(Vf,zS),e(zS,ZHe),e(Vf,eUe),e(A,oUe),e(A,Xf),e(Xf,Dae),e(Dae,rUe),e(Xf,tUe),e(Xf,QS),e(QS,aUe),e(Xf,nUe),e(A,sUe),e(A,zf),e(zf,Gae),e(Gae,lUe),e(zf,iUe),e(zf,WS),e(WS,dUe),e(zf,cUe),e(A,fUe),e(A,Qf),e(Qf,Oae),e(Oae,mUe),e(Qf,gUe),e(Qf,HS),e(HS,hUe),e(Qf,pUe),e(A,_Ue),e(A,Wf),e(Wf,Vae),e(Vae,uUe),e(Wf,bUe),e(Wf,US),e(US,vUe),e(Wf,FUe),e(A,TUe),e(A,Hf),e(Hf,Xae),e(Xae,MUe),e(Hf,EUe),e(Hf,JS),e(JS,CUe),e(Hf,wUe),e(A,AUe),e(A,Uf),e(Uf,zae),e(zae,LUe),e(Uf,yUe),e(Uf,YS),e(YS,xUe),e(Uf,$Ue),e(A,kUe),e(A,Jf),e(Jf,Qae),e(Qae,SUe),e(Jf,RUe),e(Jf,KS),e(KS,PUe),e(Jf,BUe),e(A,NUe),e(A,Yf),e(Yf,Wae),e(Wae,IUe),e(Yf,qUe),e(Yf,ZS),e(ZS,jUe),e(Yf,DUe),e(A,GUe),e(A,Kf),e(Kf,Hae),e(Hae,OUe),e(Kf,VUe),e(Kf,eR),e(eR,XUe),e(Kf,zUe),e(A,QUe),e(A,Zf),e(Zf,Uae),e(Uae,WUe),e(Zf,HUe),e(Zf,oR),e(oR,UUe),e(Zf,JUe),e(A,YUe),e(A,em),e(em,Jae),e(Jae,KUe),e(em,ZUe),e(em,rR),e(rR,eJe),e(em,oJe),e(A,rJe),e(A,om),e(om,Yae),e(Yae,tJe),e(om,aJe),e(om,tR),e(tR,nJe),e(om,sJe),e(A,lJe),e(A,rm),e(rm,Kae),e(Kae,iJe),e(rm,dJe),e(rm,aR),e(aR,cJe),e(rm,fJe),e(A,mJe),e(A,tm),e(tm,Zae),e(Zae,gJe),e(tm,hJe),e(tm,nR),e(nR,pJe),e(tm,_Je),e(A,uJe),e(A,am),e(am,ene),e(ene,bJe),e(am,vJe),e(am,sR),e(sR,FJe),e(am,TJe),e(A,MJe),e(A,nm),e(nm,one),e(one,EJe),e(nm,CJe),e(nm,lR),e(lR,wJe),e(nm,AJe),e(A,LJe),e(A,sm),e(sm,rne),e(rne,yJe),e(sm,xJe),e(sm,iR),e(iR,$Je),e(sm,kJe),e(A,SJe),e(A,lm),e(lm,tne),e(tne,RJe),e(lm,PJe),e(lm,dR),e(dR,BJe),e(lm,NJe),e(A,IJe),e(A,im),e(im,ane),e(ane,qJe),e(im,jJe),e(im,cR),e(cR,DJe),e(im,GJe),e(A,OJe),e(A,dm),e(dm,nne),e(nne,VJe),e(dm,XJe),e(dm,fR),e(fR,zJe),e(dm,QJe),e(A,WJe),e(A,cm),e(cm,sne),e(sne,HJe),e(cm,UJe),e(cm,mR),e(mR,JJe),e(cm,YJe),e(A,KJe),e(A,fm),e(fm,lne),e(lne,ZJe),e(fm,eYe),e(fm,gR),e(gR,oYe),e(fm,rYe),e(A,tYe),e(A,mm),e(mm,ine),e(ine,aYe),e(mm,nYe),e(mm,hR),e(hR,sYe),e(mm,lYe),e(A,iYe),e(A,gm),e(gm,dne),e(dne,dYe),e(gm,cYe),e(gm,pR),e(pR,fYe),e(gm,mYe),e(A,gYe),e(A,hm),e(hm,cne),e(cne,hYe),e(hm,pYe),e(hm,_R),e(_R,_Ye),e(hm,uYe),e(A,bYe),e(A,pm),e(pm,fne),e(fne,vYe),e(pm,FYe),e(pm,uR),e(uR,TYe),e(pm,MYe),e(A,EYe),e(A,_m),e(_m,mne),e(mne,CYe),e(_m,wYe),e(_m,bR),e(bR,AYe),e(_m,LYe),e(A,yYe),e(A,um),e(um,gne),e(gne,xYe),e(um,$Ye),e(um,vR),e(vR,kYe),e(um,SYe),e(A,RYe),e(A,bm),e(bm,hne),e(hne,PYe),e(bm,BYe),e(bm,FR),e(FR,NYe),e(bm,IYe),e(A,qYe),e(A,vm),e(vm,pne),e(pne,jYe),e(vm,DYe),e(vm,TR),e(TR,GYe),e(vm,OYe),e(A,VYe),e(A,Fm),e(Fm,_ne),e(_ne,XYe),e(Fm,zYe),e(Fm,MR),e(MR,QYe),e(Fm,WYe),e(A,HYe),e(A,Tm),e(Tm,une),e(une,UYe),e(Tm,JYe),e(Tm,ER),e(ER,YYe),e(Tm,KYe),e(A,ZYe),e(A,Mm),e(Mm,bne),e(bne,eKe),e(Mm,oKe),e(Mm,CR),e(CR,rKe),e(Mm,tKe),e(A,aKe),e(A,Em),e(Em,vne),e(vne,nKe),e(Em,sKe),e(Em,wR),e(wR,lKe),e(Em,iKe),e(A,dKe),e(A,Cm),e(Cm,Fne),e(Fne,cKe),e(Cm,fKe),e(Cm,AR),e(AR,mKe),e(Cm,gKe),e(A,hKe),e(A,wm),e(wm,Tne),e(Tne,pKe),e(wm,_Ke),e(wm,LR),e(LR,uKe),e(wm,bKe),e(A,vKe),e(A,Am),e(Am,Mne),e(Mne,FKe),e(Am,TKe),e(Am,yR),e(yR,MKe),e(Am,EKe),e(A,CKe),e(A,Lm),e(Lm,Ene),e(Ene,wKe),e(Lm,AKe),e(Lm,xR),e(xR,LKe),e(Lm,yKe),e(A,xKe),e(A,ym),e(ym,Cne),e(Cne,$Ke),e(ym,kKe),e(ym,$R),e($R,SKe),e(ym,RKe),e(A,PKe),e(A,xm),e(xm,wne),e(wne,BKe),e(xm,NKe),e(xm,kR),e(kR,IKe),e(xm,qKe),e(A,jKe),e(A,$m),e($m,Ane),e(Ane,DKe),e($m,GKe),e($m,SR),e(SR,OKe),e($m,VKe),e(A,XKe),e(A,km),e(km,Lne),e(Lne,zKe),e(km,QKe),e(km,RR),e(RR,WKe),e(km,HKe),e(A,UKe),e(A,Sm),e(Sm,yne),e(yne,JKe),e(Sm,YKe),e(Sm,PR),e(PR,KKe),e(Sm,ZKe),e(A,eZe),e(A,Rm),e(Rm,xne),e(xne,oZe),e(Rm,rZe),e(Rm,BR),e(BR,tZe),e(Rm,aZe),e(A,nZe),e(A,Pm),e(Pm,$ne),e($ne,sZe),e(Pm,lZe),e(Pm,NR),e(NR,iZe),e(Pm,dZe),e(A,cZe),e(A,Bm),e(Bm,kne),e(kne,fZe),e(Bm,mZe),e(Bm,IR),e(IR,gZe),e(Bm,hZe),e(A,pZe),e(A,Nm),e(Nm,Sne),e(Sne,_Ze),e(Nm,uZe),e(Nm,qR),e(qR,bZe),e(Nm,vZe),e(A,FZe),e(A,Im),e(Im,Rne),e(Rne,TZe),e(Im,MZe),e(Im,jR),e(jR,EZe),e(Im,CZe),e(A,wZe),e(A,qm),e(qm,Pne),e(Pne,AZe),e(qm,LZe),e(qm,DR),e(DR,yZe),e(qm,xZe),e(A,$Ze),e(A,jm),e(jm,Bne),e(Bne,kZe),e(jm,SZe),e(jm,GR),e(GR,RZe),e(jm,PZe),e(A,BZe),e(A,Dm),e(Dm,Nne),e(Nne,NZe),e(Dm,IZe),e(Dm,OR),e(OR,qZe),e(Dm,jZe),e(A,DZe),e(A,Gm),e(Gm,Ine),e(Ine,GZe),e(Gm,OZe),e(Gm,VR),e(VR,VZe),e(Gm,XZe),e(A,zZe),e(A,Om),e(Om,qne),e(qne,QZe),e(Om,WZe),e(Om,XR),e(XR,HZe),e(Om,UZe),e(A,JZe),e(A,Vm),e(Vm,jne),e(jne,YZe),e(Vm,KZe),e(Vm,zR),e(zR,ZZe),e(Vm,eeo),e(A,oeo),e(A,Xm),e(Xm,Dne),e(Dne,reo),e(Xm,teo),e(Xm,QR),e(QR,aeo),e(Xm,neo),e(A,seo),e(A,zm),e(zm,Gne),e(Gne,leo),e(zm,ieo),e(zm,WR),e(WR,deo),e(zm,ceo),e(A,feo),e(A,Qm),e(Qm,One),e(One,meo),e(Qm,geo),e(Qm,HR),e(HR,heo),e(Qm,peo),e(A,_eo),e(A,Wm),e(Wm,Vne),e(Vne,ueo),e(Wm,beo),e(Wm,UR),e(UR,veo),e(Wm,Feo),e(A,Teo),e(A,Hm),e(Hm,Xne),e(Xne,Meo),e(Hm,Eeo),e(Hm,JR),e(JR,Ceo),e(Hm,weo),e(A,Aeo),e(A,Um),e(Um,zne),e(zne,Leo),e(Um,yeo),e(Um,YR),e(YR,xeo),e(Um,$eo),e(A,keo),e(A,Jm),e(Jm,Qne),e(Qne,Seo),e(Jm,Reo),e(Jm,KR),e(KR,Peo),e(Jm,Beo),e(A,Neo),e(A,Ym),e(Ym,Wne),e(Wne,Ieo),e(Ym,qeo),e(Ym,ZR),e(ZR,jeo),e(Ym,Deo),e(A,Geo),e(A,Km),e(Km,Hne),e(Hne,Oeo),e(Km,Veo),e(Km,eP),e(eP,Xeo),e(Km,zeo),e(A,Qeo),e(A,Zm),e(Zm,Une),e(Une,Weo),e(Zm,Heo),e(Zm,oP),e(oP,Ueo),e(Zm,Jeo),e(A,Yeo),e(A,eg),e(eg,Jne),e(Jne,Keo),e(eg,Zeo),e(eg,rP),e(rP,eoo),e(eg,ooo),e(A,roo),e(A,og),e(og,Yne),e(Yne,too),e(og,aoo),e(og,tP),e(tP,noo),e(og,soo),e(A,loo),e(A,rg),e(rg,Kne),e(Kne,ioo),e(rg,doo),e(rg,aP),e(aP,coo),e(rg,foo),e(A,moo),e(A,tg),e(tg,Zne),e(Zne,goo),e(tg,hoo),e(tg,nP),e(nP,poo),e(tg,_oo),e(A,uoo),e(A,ag),e(ag,ese),e(ese,boo),e(ag,voo),e(ag,sP),e(sP,Foo),e(ag,Too),e(A,Moo),e(A,ng),e(ng,ose),e(ose,Eoo),e(ng,Coo),e(ng,lP),e(lP,woo),e(ng,Aoo),e(A,Loo),e(A,sg),e(sg,rse),e(rse,yoo),e(sg,xoo),e(sg,iP),e(iP,$oo),e(sg,koo),e(A,Soo),e(A,lg),e(lg,tse),e(tse,Roo),e(lg,Poo),e(lg,dP),e(dP,Boo),e(lg,Noo),e(A,Ioo),e(A,ig),e(ig,ase),e(ase,qoo),e(ig,joo),e(ig,cP),e(cP,Doo),e(ig,Goo),e(A,Ooo),e(A,dg),e(dg,nse),e(nse,Voo),e(dg,Xoo),e(dg,fP),e(fP,zoo),e(dg,Qoo),e(A,Woo),e(A,cg),e(cg,sse),e(sse,Hoo),e(cg,Uoo),e(cg,mP),e(mP,Joo),e(cg,Yoo),e(A,Koo),e(A,fg),e(fg,lse),e(lse,Zoo),e(fg,ero),e(fg,gP),e(gP,oro),e(fg,rro),e(A,tro),e(A,mg),e(mg,ise),e(ise,aro),e(mg,nro),e(mg,hP),e(hP,sro),e(mg,lro),e(A,iro),e(A,gg),e(gg,dse),e(dse,dro),e(gg,cro),e(gg,pP),e(pP,fro),e(gg,mro),e(A,gro),e(A,hg),e(hg,cse),e(cse,hro),e(hg,pro),e(hg,_P),e(_P,_ro),e(hg,uro),e(A,bro),e(A,pg),e(pg,fse),e(fse,vro),e(pg,Fro),e(pg,uP),e(uP,Tro),e(pg,Mro),e(A,Ero),e(A,_g),e(_g,mse),e(mse,Cro),e(_g,wro),e(_g,bP),e(bP,Aro),e(_g,Lro),e(A,yro),e(A,ug),e(ug,gse),e(gse,xro),e(ug,$ro),e(ug,vP),e(vP,kro),e(ug,Sro),e(A,Rro),e(A,bg),e(bg,hse),e(hse,Pro),e(bg,Bro),e(bg,FP),e(FP,Nro),e(bg,Iro),e(A,qro),e(A,vg),e(vg,pse),e(pse,jro),e(vg,Dro),e(vg,TP),e(TP,Gro),e(vg,Oro),e(A,Vro),e(A,Fg),e(Fg,_se),e(_se,Xro),e(Fg,zro),e(Fg,MP),e(MP,Qro),e(Fg,Wro),e(A,Hro),e(A,Tg),e(Tg,use),e(use,Uro),e(Tg,Jro),e(Tg,EP),e(EP,Yro),e(Tg,Kro),e(A,Zro),e(A,Mg),e(Mg,bse),e(bse,eto),e(Mg,oto),e(Mg,CP),e(CP,rto),e(Mg,tto),e(A,ato),e(A,Eg),e(Eg,vse),e(vse,nto),e(Eg,sto),e(Eg,wP),e(wP,lto),e(Eg,ito),e(A,dto),e(A,Cg),e(Cg,Fse),e(Fse,cto),e(Cg,fto),e(Cg,AP),e(AP,mto),e(Cg,gto),e(A,hto),e(A,wg),e(wg,Tse),e(Tse,pto),e(wg,_to),e(wg,LP),e(LP,uto),e(wg,bto),e(A,vto),e(A,Ag),e(Ag,Mse),e(Mse,Fto),e(Ag,Tto),e(Ag,yP),e(yP,Mto),e(Ag,Eto),e(A,Cto),e(A,Lg),e(Lg,Ese),e(Ese,wto),e(Lg,Ato),e(Lg,xP),e(xP,Lto),e(Lg,yto),e(A,xto),e(A,yg),e(yg,Cse),e(Cse,$to),e(yg,kto),e(yg,$P),e($P,Sto),e(yg,Rto),e(A,Pto),e(A,xg),e(xg,wse),e(wse,Bto),e(xg,Nto),e(xg,kP),e(kP,Ito),e(xg,qto),e(A,jto),e(A,$g),e($g,Ase),e(Ase,Dto),e($g,Gto),e($g,SP),e(SP,Oto),e($g,Vto),e(A,Xto),e(A,kg),e(kg,Lse),e(Lse,zto),e(kg,Qto),e(kg,RP),e(RP,Wto),e(kg,Hto),e(A,Uto),e(A,Sg),e(Sg,yse),e(yse,Jto),e(Sg,Yto),e(Sg,PP),e(PP,Kto),e(Sg,Zto),e(A,eao),e(A,Rg),e(Rg,xse),e(xse,oao),e(Rg,rao),e(Rg,BP),e(BP,tao),e(Rg,aao),e(A,nao),e(A,Pg),e(Pg,$se),e($se,sao),e(Pg,lao),e(Pg,NP),e(NP,iao),e(Pg,dao),e(A,cao),e(A,Bg),e(Bg,kse),e(kse,fao),e(Bg,mao),e(Bg,IP),e(IP,gao),e(Bg,hao),e(A,pao),e(A,Ng),e(Ng,Sse),e(Sse,_ao),e(Ng,uao),e(Ng,qP),e(qP,bao),e(Ng,vao),e(A,Fao),e(A,Ig),e(Ig,Rse),e(Rse,Tao),e(Ig,Mao),e(Ig,jP),e(jP,Eao),e(Ig,Cao),e(A,wao),e(A,qg),e(qg,Pse),e(Pse,Aao),e(qg,Lao),e(qg,DP),e(DP,yao),e(qg,xao),e(A,$ao),e(A,jg),e(jg,Bse),e(Bse,kao),e(jg,Sao),e(jg,GP),e(GP,Rao),e(jg,Pao),e(A,Bao),e(A,Dg),e(Dg,Nse),e(Nse,Nao),e(Dg,Iao),e(Dg,OP),e(OP,qao),e(Dg,jao),e(A,Dao),e(A,Gg),e(Gg,Ise),e(Ise,Gao),e(Gg,Oao),e(Gg,VP),e(VP,Vao),e(Gg,Xao),e(A,zao),e(A,Og),e(Og,qse),e(qse,Qao),e(Og,Wao),e(Og,XP),e(XP,Hao),e(Og,Uao),e(A,Jao),e(A,Vg),e(Vg,jse),e(jse,Yao),e(Vg,Kao),e(Vg,zP),e(zP,Zao),e(Vg,eno),e(A,ono),e(A,Xg),e(Xg,Dse),e(Dse,rno),e(Xg,tno),e(Xg,QP),e(QP,ano),e(Xg,nno),e(A,sno),e(A,zg),e(zg,Gse),e(Gse,lno),e(zg,ino),e(zg,WP),e(WP,dno),e(zg,cno),e(A,fno),e(A,Qg),e(Qg,Ose),e(Ose,mno),e(Qg,gno),e(Qg,HP),e(HP,hno),e(Qg,pno),e(A,_no),e(A,Wg),e(Wg,Vse),e(Vse,uno),e(Wg,bno),e(Wg,UP),e(UP,vno),e(Wg,Fno),e(A,Tno),e(A,Hg),e(Hg,Xse),e(Xse,Mno),e(Hg,Eno),e(Hg,JP),e(JP,Cno),e(Hg,wno),e(A,Ano),e(A,Ug),e(Ug,zse),e(zse,Lno),e(Ug,yno),e(Ug,YP),e(YP,xno),e(Ug,$no),e(A,kno),e(A,Jg),e(Jg,Qse),e(Qse,Sno),e(Jg,Rno),e(Jg,KP),e(KP,Pno),e(Jg,Bno),e(A,Nno),e(A,Yg),e(Yg,Wse),e(Wse,Ino),e(Yg,qno),e(Yg,ZP),e(ZP,jno),e(Yg,Dno),e(Lr,Gno),M(Kg,Lr,null),e(Ao,Ono),e(Ao,Zg),M(mL,Zg,null),e(Zg,Vno),e(Zg,Hse),e(Hse,Xno),b(f,dXe,u),b(f,qi,u),e(qi,eh),e(eh,Use),M(gL,Use,null),e(qi,zno),e(qi,Jse),e(Jse,Qno),b(f,cXe,u),b(f,Lo,u),M(hL,Lo,null),e(Lo,Wno),e(Lo,pL),e(pL,Hno),e(pL,eB),e(eB,Uno),e(pL,Jno),e(Lo,Yno),e(Lo,_L),e(_L,Kno),e(_L,Yse),e(Yse,Zno),e(_L,eso),e(Lo,oso),e(Lo,yr),M(uL,yr,null),e(yr,rso),e(yr,Kse),e(Kse,tso),e(yr,aso),e(yr,Pa),e(Pa,nso),e(Pa,Zse),e(Zse,sso),e(Pa,lso),e(Pa,ele),e(ele,iso),e(Pa,dso),e(Pa,ole),e(ole,cso),e(Pa,fso),e(yr,mso),e(yr,k),e(k,jn),e(jn,rle),e(rle,gso),e(jn,hso),e(jn,oB),e(oB,pso),e(jn,_so),e(jn,rB),e(rB,uso),e(jn,bso),e(k,vso),e(k,Dn),e(Dn,tle),e(tle,Fso),e(Dn,Tso),e(Dn,tB),e(tB,Mso),e(Dn,Eso),e(Dn,aB),e(aB,Cso),e(Dn,wso),e(k,Aso),e(k,Gn),e(Gn,ale),e(ale,Lso),e(Gn,yso),e(Gn,nB),e(nB,xso),e(Gn,$so),e(Gn,sB),e(sB,kso),e(Gn,Sso),e(k,Rso),e(k,oh),e(oh,nle),e(nle,Pso),e(oh,Bso),e(oh,lB),e(lB,Nso),e(oh,Iso),e(k,qso),e(k,On),e(On,sle),e(sle,jso),e(On,Dso),e(On,iB),e(iB,Gso),e(On,Oso),e(On,dB),e(dB,Vso),e(On,Xso),e(k,zso),e(k,rh),e(rh,lle),e(lle,Qso),e(rh,Wso),e(rh,cB),e(cB,Hso),e(rh,Uso),e(k,Jso),e(k,th),e(th,ile),e(ile,Yso),e(th,Kso),e(th,fB),e(fB,Zso),e(th,elo),e(k,olo),e(k,ah),e(ah,dle),e(dle,rlo),e(ah,tlo),e(ah,mB),e(mB,alo),e(ah,nlo),e(k,slo),e(k,Vn),e(Vn,cle),e(cle,llo),e(Vn,ilo),e(Vn,gB),e(gB,dlo),e(Vn,clo),e(Vn,hB),e(hB,flo),e(Vn,mlo),e(k,glo),e(k,Xn),e(Xn,fle),e(fle,hlo),e(Xn,plo),e(Xn,pB),e(pB,_lo),e(Xn,ulo),e(Xn,_B),e(_B,blo),e(Xn,vlo),e(k,Flo),e(k,zn),e(zn,mle),e(mle,Tlo),e(zn,Mlo),e(zn,uB),e(uB,Elo),e(zn,Clo),e(zn,bB),e(bB,wlo),e(zn,Alo),e(k,Llo),e(k,nh),e(nh,gle),e(gle,ylo),e(nh,xlo),e(nh,vB),e(vB,$lo),e(nh,klo),e(k,Slo),e(k,sh),e(sh,hle),e(hle,Rlo),e(sh,Plo),e(sh,FB),e(FB,Blo),e(sh,Nlo),e(k,Ilo),e(k,lh),e(lh,ple),e(ple,qlo),e(lh,jlo),e(lh,TB),e(TB,Dlo),e(lh,Glo),e(k,Olo),e(k,Qn),e(Qn,_le),e(_le,Vlo),e(Qn,Xlo),e(Qn,MB),e(MB,zlo),e(Qn,Qlo),e(Qn,EB),e(EB,Wlo),e(Qn,Hlo),e(k,Ulo),e(k,ih),e(ih,ule),e(ule,Jlo),e(ih,Ylo),e(ih,CB),e(CB,Klo),e(ih,Zlo),e(k,eio),e(k,Wn),e(Wn,ble),e(ble,oio),e(Wn,rio),e(Wn,wB),e(wB,tio),e(Wn,aio),e(Wn,AB),e(AB,nio),e(Wn,sio),e(k,lio),e(k,Hn),e(Hn,vle),e(vle,iio),e(Hn,dio),e(Hn,LB),e(LB,cio),e(Hn,fio),e(Hn,yB),e(yB,mio),e(Hn,gio),e(k,hio),e(k,Un),e(Un,Fle),e(Fle,pio),e(Un,_io),e(Un,xB),e(xB,uio),e(Un,bio),e(Un,$B),e($B,vio),e(Un,Fio),e(k,Tio),e(k,Jn),e(Jn,Tle),e(Tle,Mio),e(Jn,Eio),e(Jn,kB),e(kB,Cio),e(Jn,wio),e(Jn,SB),e(SB,Aio),e(Jn,Lio),e(k,yio),e(k,dh),e(dh,Mle),e(Mle,xio),e(dh,$io),e(dh,RB),e(RB,kio),e(dh,Sio),e(k,Rio),e(k,Yn),e(Yn,Ele),e(Ele,Pio),e(Yn,Bio),e(Yn,PB),e(PB,Nio),e(Yn,Iio),e(Yn,BB),e(BB,qio),e(Yn,jio),e(k,Dio),e(k,Kn),e(Kn,Cle),e(Cle,Gio),e(Kn,Oio),e(Kn,NB),e(NB,Vio),e(Kn,Xio),e(Kn,IB),e(IB,zio),e(Kn,Qio),e(k,Wio),e(k,Zn),e(Zn,wle),e(wle,Hio),e(Zn,Uio),e(Zn,qB),e(qB,Jio),e(Zn,Yio),e(Zn,jB),e(jB,Kio),e(Zn,Zio),e(k,edo),e(k,es),e(es,Ale),e(Ale,odo),e(es,rdo),e(es,DB),e(DB,tdo),e(es,ado),e(es,GB),e(GB,ndo),e(es,sdo),e(k,ldo),e(k,os),e(os,Lle),e(Lle,ido),e(os,ddo),e(os,OB),e(OB,cdo),e(os,fdo),e(os,VB),e(VB,mdo),e(os,gdo),e(k,hdo),e(k,rs),e(rs,yle),e(yle,pdo),e(rs,_do),e(rs,XB),e(XB,udo),e(rs,bdo),e(rs,zB),e(zB,vdo),e(rs,Fdo),e(k,Tdo),e(k,ch),e(ch,xle),e(xle,Mdo),e(ch,Edo),e(ch,QB),e(QB,Cdo),e(ch,wdo),e(k,Ado),e(k,ts),e(ts,$le),e($le,Ldo),e(ts,ydo),e(ts,WB),e(WB,xdo),e(ts,$do),e(ts,HB),e(HB,kdo),e(ts,Sdo),e(k,Rdo),e(k,fh),e(fh,kle),e(kle,Pdo),e(fh,Bdo),e(fh,UB),e(UB,Ndo),e(fh,Ido),e(k,qdo),e(k,as),e(as,Sle),e(Sle,jdo),e(as,Ddo),e(as,JB),e(JB,Gdo),e(as,Odo),e(as,YB),e(YB,Vdo),e(as,Xdo),e(k,zdo),e(k,ns),e(ns,Rle),e(Rle,Qdo),e(ns,Wdo),e(ns,KB),e(KB,Hdo),e(ns,Udo),e(ns,ZB),e(ZB,Jdo),e(ns,Ydo),e(k,Kdo),e(k,ss),e(ss,Ple),e(Ple,Zdo),e(ss,eco),e(ss,eN),e(eN,oco),e(ss,rco),e(ss,oN),e(oN,tco),e(ss,aco),e(k,nco),e(k,mh),e(mh,Ble),e(Ble,sco),e(mh,lco),e(mh,rN),e(rN,ico),e(mh,dco),e(k,cco),e(k,ls),e(ls,Nle),e(Nle,fco),e(ls,mco),e(ls,tN),e(tN,gco),e(ls,hco),e(ls,aN),e(aN,pco),e(ls,_co),e(k,uco),e(k,is),e(is,Ile),e(Ile,bco),e(is,vco),e(is,nN),e(nN,Fco),e(is,Tco),e(is,sN),e(sN,Mco),e(is,Eco),e(k,Cco),e(k,ds),e(ds,qle),e(qle,wco),e(ds,Aco),e(ds,lN),e(lN,Lco),e(ds,yco),e(ds,iN),e(iN,xco),e(ds,$co),e(k,kco),e(k,gh),e(gh,jle),e(jle,Sco),e(gh,Rco),e(gh,dN),e(dN,Pco),e(gh,Bco),e(k,Nco),e(k,cs),e(cs,Dle),e(Dle,Ico),e(cs,qco),e(cs,cN),e(cN,jco),e(cs,Dco),e(cs,fN),e(fN,Gco),e(cs,Oco),e(k,Vco),e(k,fs),e(fs,Gle),e(Gle,Xco),e(fs,zco),e(fs,mN),e(mN,Qco),e(fs,Wco),e(fs,gN),e(gN,Hco),e(fs,Uco),e(k,Jco),e(k,ms),e(ms,Ole),e(Ole,Yco),e(ms,Kco),e(ms,hN),e(hN,Zco),e(ms,efo),e(ms,pN),e(pN,ofo),e(ms,rfo),e(k,tfo),e(k,gs),e(gs,Vle),e(Vle,afo),e(gs,nfo),e(gs,_N),e(_N,sfo),e(gs,lfo),e(gs,uN),e(uN,ifo),e(gs,dfo),e(k,cfo),e(k,hs),e(hs,Xle),e(Xle,ffo),e(hs,mfo),e(hs,bN),e(bN,gfo),e(hs,hfo),e(hs,vN),e(vN,pfo),e(hs,_fo),e(k,ufo),e(k,ps),e(ps,zle),e(zle,bfo),e(ps,vfo),e(ps,FN),e(FN,Ffo),e(ps,Tfo),e(ps,TN),e(TN,Mfo),e(ps,Efo),e(k,Cfo),e(k,_s),e(_s,Qle),e(Qle,wfo),e(_s,Afo),e(_s,MN),e(MN,Lfo),e(_s,yfo),e(_s,EN),e(EN,xfo),e(_s,$fo),e(k,kfo),e(k,us),e(us,Wle),e(Wle,Sfo),e(us,Rfo),e(us,CN),e(CN,Pfo),e(us,Bfo),e(us,wN),e(wN,Nfo),e(us,Ifo),e(k,qfo),e(k,hh),e(hh,Hle),e(Hle,jfo),e(hh,Dfo),e(hh,AN),e(AN,Gfo),e(hh,Ofo),e(k,Vfo),e(k,bs),e(bs,Ule),e(Ule,Xfo),e(bs,zfo),e(bs,LN),e(LN,Qfo),e(bs,Wfo),e(bs,yN),e(yN,Hfo),e(bs,Ufo),e(k,Jfo),e(k,ph),e(ph,Jle),e(Jle,Yfo),e(ph,Kfo),e(ph,xN),e(xN,Zfo),e(ph,emo),e(k,omo),e(k,_h),e(_h,Yle),e(Yle,rmo),e(_h,tmo),e(_h,$N),e($N,amo),e(_h,nmo),e(k,smo),e(k,vs),e(vs,Kle),e(Kle,lmo),e(vs,imo),e(vs,kN),e(kN,dmo),e(vs,cmo),e(vs,SN),e(SN,fmo),e(vs,mmo),e(k,gmo),e(k,Fs),e(Fs,Zle),e(Zle,hmo),e(Fs,pmo),e(Fs,RN),e(RN,_mo),e(Fs,umo),e(Fs,PN),e(PN,bmo),e(Fs,vmo),e(k,Fmo),e(k,Ts),e(Ts,eie),e(eie,Tmo),e(Ts,Mmo),e(Ts,BN),e(BN,Emo),e(Ts,Cmo),e(Ts,NN),e(NN,wmo),e(Ts,Amo),e(k,Lmo),e(k,uh),e(uh,oie),e(oie,ymo),e(uh,xmo),e(uh,IN),e(IN,$mo),e(uh,kmo),e(k,Smo),e(k,Ms),e(Ms,rie),e(rie,Rmo),e(Ms,Pmo),e(Ms,qN),e(qN,Bmo),e(Ms,Nmo),e(Ms,jN),e(jN,Imo),e(Ms,qmo),e(k,jmo),e(k,Es),e(Es,tie),e(tie,Dmo),e(Es,Gmo),e(Es,DN),e(DN,Omo),e(Es,Vmo),e(Es,GN),e(GN,Xmo),e(Es,zmo),e(k,Qmo),e(k,Cs),e(Cs,aie),e(aie,Wmo),e(Cs,Hmo),e(Cs,ON),e(ON,Umo),e(Cs,Jmo),e(Cs,VN),e(VN,Ymo),e(Cs,Kmo),e(k,Zmo),e(k,ws),e(ws,nie),e(nie,ego),e(ws,ogo),e(ws,XN),e(XN,rgo),e(ws,tgo),e(ws,zN),e(zN,ago),e(ws,ngo),e(k,sgo),e(k,As),e(As,sie),e(sie,lgo),e(As,igo),e(As,QN),e(QN,dgo),e(As,cgo),e(As,WN),e(WN,fgo),e(As,mgo),e(k,ggo),e(k,Ls),e(Ls,lie),e(lie,hgo),e(Ls,pgo),e(Ls,HN),e(HN,_go),e(Ls,ugo),e(Ls,UN),e(UN,bgo),e(Ls,vgo),e(k,Fgo),e(k,ys),e(ys,iie),e(iie,Tgo),e(ys,Mgo),e(ys,JN),e(JN,Ego),e(ys,Cgo),e(ys,YN),e(YN,wgo),e(ys,Ago),e(k,Lgo),e(k,xs),e(xs,die),e(die,ygo),e(xs,xgo),e(xs,KN),e(KN,$go),e(xs,kgo),e(xs,ZN),e(ZN,Sgo),e(xs,Rgo),e(k,Pgo),e(k,bh),e(bh,cie),e(cie,Bgo),e(bh,Ngo),e(bh,eI),e(eI,Igo),e(bh,qgo),e(k,jgo),e(k,$s),e($s,fie),e(fie,Dgo),e($s,Ggo),e($s,oI),e(oI,Ogo),e($s,Vgo),e($s,rI),e(rI,Xgo),e($s,zgo),e(k,Qgo),e(k,vh),e(vh,mie),e(mie,Wgo),e(vh,Hgo),e(vh,tI),e(tI,Ugo),e(vh,Jgo),e(k,Ygo),e(k,Fh),e(Fh,gie),e(gie,Kgo),e(Fh,Zgo),e(Fh,aI),e(aI,eho),e(Fh,oho),e(k,rho),e(k,Th),e(Th,hie),e(hie,tho),e(Th,aho),e(Th,nI),e(nI,nho),e(Th,sho),e(k,lho),e(k,Mh),e(Mh,pie),e(pie,iho),e(Mh,dho),e(Mh,sI),e(sI,cho),e(Mh,fho),e(k,mho),e(k,ks),e(ks,_ie),e(_ie,gho),e(ks,hho),e(ks,lI),e(lI,pho),e(ks,_ho),e(ks,iI),e(iI,uho),e(ks,bho),e(k,vho),e(k,Eh),e(Eh,uie),e(uie,Fho),e(Eh,Tho),e(Eh,dI),e(dI,Mho),e(Eh,Eho),e(k,Cho),e(k,Ss),e(Ss,bie),e(bie,who),e(Ss,Aho),e(Ss,cI),e(cI,Lho),e(Ss,yho),e(Ss,fI),e(fI,xho),e(Ss,$ho),e(k,kho),e(k,Rs),e(Rs,vie),e(vie,Sho),e(Rs,Rho),e(Rs,mI),e(mI,Pho),e(Rs,Bho),e(Rs,gI),e(gI,Nho),e(Rs,Iho),e(k,qho),e(k,Ps),e(Ps,Fie),e(Fie,jho),e(Ps,Dho),e(Ps,hI),e(hI,Gho),e(Ps,Oho),e(Ps,pI),e(pI,Vho),e(Ps,Xho),e(k,zho),e(k,Bs),e(Bs,Tie),e(Tie,Qho),e(Bs,Who),e(Bs,_I),e(_I,Hho),e(Bs,Uho),e(Bs,uI),e(uI,Jho),e(Bs,Yho),e(k,Kho),e(k,Ns),e(Ns,Mie),e(Mie,Zho),e(Ns,epo),e(Ns,bI),e(bI,opo),e(Ns,rpo),e(Ns,vI),e(vI,tpo),e(Ns,apo),e(k,npo),e(k,Is),e(Is,Eie),e(Eie,spo),e(Is,lpo),e(Is,FI),e(FI,ipo),e(Is,dpo),e(Is,TI),e(TI,cpo),e(Is,fpo),e(k,mpo),e(k,Ch),e(Ch,Cie),e(Cie,gpo),e(Ch,hpo),e(Ch,MI),e(MI,ppo),e(Ch,_po),e(k,upo),e(k,wh),e(wh,wie),e(wie,bpo),e(wh,vpo),e(wh,EI),e(EI,Fpo),e(wh,Tpo),e(k,Mpo),e(k,qs),e(qs,Aie),e(Aie,Epo),e(qs,Cpo),e(qs,CI),e(CI,wpo),e(qs,Apo),e(qs,wI),e(wI,Lpo),e(qs,ypo),e(k,xpo),e(k,js),e(js,Lie),e(Lie,$po),e(js,kpo),e(js,AI),e(AI,Spo),e(js,Rpo),e(js,LI),e(LI,Ppo),e(js,Bpo),e(k,Npo),e(k,Ds),e(Ds,yie),e(yie,Ipo),e(Ds,qpo),e(Ds,yI),e(yI,jpo),e(Ds,Dpo),e(Ds,xI),e(xI,Gpo),e(Ds,Opo),e(k,Vpo),e(k,Ah),e(Ah,xie),e(xie,Xpo),e(Ah,zpo),e(Ah,$I),e($I,Qpo),e(Ah,Wpo),e(k,Hpo),e(k,Lh),e(Lh,$ie),e($ie,Upo),e(Lh,Jpo),e(Lh,kI),e(kI,Ypo),e(Lh,Kpo),e(k,Zpo),e(k,yh),e(yh,kie),e(kie,e_o),e(yh,o_o),e(yh,SI),e(SI,r_o),e(yh,t_o),e(k,a_o),e(k,Gs),e(Gs,Sie),e(Sie,n_o),e(Gs,s_o),e(Gs,RI),e(RI,l_o),e(Gs,i_o),e(Gs,PI),e(PI,d_o),e(Gs,c_o),e(k,f_o),e(k,Os),e(Os,Rie),e(Rie,m_o),e(Os,g_o),e(Os,BI),e(BI,h_o),e(Os,p_o),e(Os,NI),e(NI,__o),e(Os,u_o),e(k,b_o),e(k,xh),e(xh,Pie),e(Pie,v_o),e(xh,F_o),e(xh,II),e(II,T_o),e(xh,M_o),e(k,E_o),e(k,$h),e($h,Bie),e(Bie,C_o),e($h,w_o),e($h,qI),e(qI,A_o),e($h,L_o),e(k,y_o),e(k,kh),e(kh,Nie),e(Nie,x_o),e(kh,$_o),e(kh,jI),e(jI,k_o),e(kh,S_o),e(k,R_o),e(k,Vs),e(Vs,Iie),e(Iie,P_o),e(Vs,B_o),e(Vs,DI),e(DI,N_o),e(Vs,I_o),e(Vs,GI),e(GI,q_o),e(Vs,j_o),e(k,D_o),e(k,Sh),e(Sh,qie),e(qie,G_o),e(Sh,O_o),e(Sh,OI),e(OI,V_o),e(Sh,X_o),e(k,z_o),e(k,Rh),e(Rh,jie),e(jie,Q_o),e(Rh,W_o),e(Rh,VI),e(VI,H_o),e(Rh,U_o),e(k,J_o),e(k,Xs),e(Xs,Die),e(Die,Y_o),e(Xs,K_o),e(Xs,XI),e(XI,Z_o),e(Xs,euo),e(Xs,zI),e(zI,ouo),e(Xs,ruo),e(k,tuo),e(k,zs),e(zs,Gie),e(Gie,auo),e(zs,nuo),e(zs,QI),e(QI,suo),e(zs,luo),e(zs,WI),e(WI,iuo),e(zs,duo),e(k,cuo),e(k,Qs),e(Qs,Oie),e(Oie,fuo),e(Qs,muo),e(Qs,HI),e(HI,guo),e(Qs,huo),e(Qs,UI),e(UI,puo),e(Qs,_uo),e(k,uuo),e(k,Ws),e(Ws,Vie),e(Vie,buo),e(Ws,vuo),e(Ws,JI),e(JI,Fuo),e(Ws,Tuo),e(Ws,YI),e(YI,Muo),e(Ws,Euo),e(yr,Cuo),M(Ph,yr,null),e(Lo,wuo),e(Lo,Bh),M(bL,Bh,null),e(Bh,Auo),e(Bh,Xie),e(Xie,Luo),b(f,fXe,u),b(f,ji,u),e(ji,Nh),e(Nh,zie),M(vL,zie,null),e(ji,yuo),e(ji,Qie),e(Qie,xuo),b(f,mXe,u),b(f,yo,u),M(FL,yo,null),e(yo,$uo),e(yo,TL),e(TL,kuo),e(TL,KI),e(KI,Suo),e(TL,Ruo),e(yo,Puo),e(yo,ML),e(ML,Buo),e(ML,Wie),e(Wie,Nuo),e(ML,Iuo),e(yo,quo),e(yo,Ue),M(EL,Ue,null),e(Ue,juo),e(Ue,Hie),e(Hie,Duo),e(Ue,Guo),e(Ue,Ba),e(Ba,Ouo),e(Ba,Uie),e(Uie,Vuo),e(Ba,Xuo),e(Ba,Jie),e(Jie,zuo),e(Ba,Quo),e(Ba,Yie),e(Yie,Wuo),e(Ba,Huo),e(Ue,Uuo),e(Ue,Y),e(Y,Ih),e(Ih,Kie),e(Kie,Juo),e(Ih,Yuo),e(Ih,ZI),e(ZI,Kuo),e(Ih,Zuo),e(Y,e1o),e(Y,qh),e(qh,Zie),e(Zie,o1o),e(qh,r1o),e(qh,eq),e(eq,t1o),e(qh,a1o),e(Y,n1o),e(Y,jh),e(jh,ede),e(ede,s1o),e(jh,l1o),e(jh,oq),e(oq,i1o),e(jh,d1o),e(Y,c1o),e(Y,Dh),e(Dh,ode),e(ode,f1o),e(Dh,m1o),e(Dh,rq),e(rq,g1o),e(Dh,h1o),e(Y,p1o),e(Y,Gh),e(Gh,rde),e(rde,_1o),e(Gh,u1o),e(Gh,tq),e(tq,b1o),e(Gh,v1o),e(Y,F1o),e(Y,Oh),e(Oh,tde),e(tde,T1o),e(Oh,M1o),e(Oh,aq),e(aq,E1o),e(Oh,C1o),e(Y,w1o),e(Y,Vh),e(Vh,ade),e(ade,A1o),e(Vh,L1o),e(Vh,nq),e(nq,y1o),e(Vh,x1o),e(Y,$1o),e(Y,Xh),e(Xh,nde),e(nde,k1o),e(Xh,S1o),e(Xh,sq),e(sq,R1o),e(Xh,P1o),e(Y,B1o),e(Y,zh),e(zh,sde),e(sde,N1o),e(zh,I1o),e(zh,lq),e(lq,q1o),e(zh,j1o),e(Y,D1o),e(Y,Qh),e(Qh,lde),e(lde,G1o),e(Qh,O1o),e(Qh,iq),e(iq,V1o),e(Qh,X1o),e(Y,z1o),e(Y,Wh),e(Wh,ide),e(ide,Q1o),e(Wh,W1o),e(Wh,dq),e(dq,H1o),e(Wh,U1o),e(Y,J1o),e(Y,Hh),e(Hh,dde),e(dde,Y1o),e(Hh,K1o),e(Hh,cq),e(cq,Z1o),e(Hh,e2o),e(Y,o2o),e(Y,Uh),e(Uh,cde),e(cde,r2o),e(Uh,t2o),e(Uh,fq),e(fq,a2o),e(Uh,n2o),e(Y,s2o),e(Y,Jh),e(Jh,fde),e(fde,l2o),e(Jh,i2o),e(Jh,mq),e(mq,d2o),e(Jh,c2o),e(Y,f2o),e(Y,Yh),e(Yh,mde),e(mde,m2o),e(Yh,g2o),e(Yh,gq),e(gq,h2o),e(Yh,p2o),e(Y,_2o),e(Y,Kh),e(Kh,gde),e(gde,u2o),e(Kh,b2o),e(Kh,hq),e(hq,v2o),e(Kh,F2o),e(Y,T2o),e(Y,Zh),e(Zh,hde),e(hde,M2o),e(Zh,E2o),e(Zh,pq),e(pq,C2o),e(Zh,w2o),e(Y,A2o),e(Y,ep),e(ep,pde),e(pde,L2o),e(ep,y2o),e(ep,_q),e(_q,x2o),e(ep,$2o),e(Y,k2o),e(Y,op),e(op,_de),e(_de,S2o),e(op,R2o),e(op,uq),e(uq,P2o),e(op,B2o),e(Y,N2o),e(Y,rp),e(rp,ude),e(ude,I2o),e(rp,q2o),e(rp,bq),e(bq,j2o),e(rp,D2o),e(Y,G2o),e(Y,tp),e(tp,bde),e(bde,O2o),e(tp,V2o),e(tp,vq),e(vq,X2o),e(tp,z2o),e(Y,Q2o),e(Y,ap),e(ap,vde),e(vde,W2o),e(ap,H2o),e(ap,Fq),e(Fq,U2o),e(ap,J2o),e(Y,Y2o),e(Y,np),e(np,Fde),e(Fde,K2o),e(np,Z2o),e(np,Tq),e(Tq,ebo),e(np,obo),e(Y,rbo),e(Y,sp),e(sp,Tde),e(Tde,tbo),e(sp,abo),e(sp,Mq),e(Mq,nbo),e(sp,sbo),e(Y,lbo),e(Y,lp),e(lp,Mde),e(Mde,ibo),e(lp,dbo),e(lp,Eq),e(Eq,cbo),e(lp,fbo),e(Y,mbo),e(Y,ip),e(ip,Ede),e(Ede,gbo),e(ip,hbo),e(ip,Cq),e(Cq,pbo),e(ip,_bo),e(Y,ubo),e(Y,dp),e(dp,Cde),e(Cde,bbo),e(dp,vbo),e(dp,wq),e(wq,Fbo),e(dp,Tbo),e(Y,Mbo),e(Y,cp),e(cp,wde),e(wde,Ebo),e(cp,Cbo),e(cp,Aq),e(Aq,wbo),e(cp,Abo),e(Y,Lbo),e(Y,fp),e(fp,Ade),e(Ade,ybo),e(fp,xbo),e(fp,Lq),e(Lq,$bo),e(fp,kbo),e(Y,Sbo),e(Y,mp),e(mp,Lde),e(Lde,Rbo),e(mp,Pbo),e(mp,yq),e(yq,Bbo),e(mp,Nbo),e(Y,Ibo),e(Y,gp),e(gp,yde),e(yde,qbo),e(gp,jbo),e(gp,xq),e(xq,Dbo),e(gp,Gbo),e(Y,Obo),e(Y,hp),e(hp,xde),e(xde,Vbo),e(hp,Xbo),e(hp,$q),e($q,zbo),e(hp,Qbo),e(Y,Wbo),e(Y,pp),e(pp,$de),e($de,Hbo),e(pp,Ubo),e(pp,kq),e(kq,Jbo),e(pp,Ybo),e(Y,Kbo),e(Y,_p),e(_p,kde),e(kde,Zbo),e(_p,evo),e(_p,Sq),e(Sq,ovo),e(_p,rvo),e(Ue,tvo),M(up,Ue,null),e(Ue,avo),M(bp,Ue,null),e(yo,nvo),e(yo,vp),M(CL,vp,null),e(vp,svo),e(vp,Sde),e(Sde,lvo),b(f,gXe,u),b(f,Di,u),e(Di,Fp),e(Fp,Rde),M(wL,Rde,null),e(Di,ivo),e(Di,Pde),e(Pde,dvo),b(f,hXe,u),b(f,xo,u),M(AL,xo,null),e(xo,cvo),e(xo,LL),e(LL,fvo),e(LL,Rq),e(Rq,mvo),e(LL,gvo),e(xo,hvo),e(xo,yL),e(yL,pvo),e(yL,Bde),e(Bde,_vo),e(yL,uvo),e(xo,bvo),e(xo,Je),M(xL,Je,null),e(Je,vvo),e(Je,Nde),e(Nde,Fvo),e(Je,Tvo),e(Je,Gi),e(Gi,Mvo),e(Gi,Ide),e(Ide,Evo),e(Gi,Cvo),e(Gi,qde),e(qde,wvo),e(Gi,Avo),e(Je,Lvo),e(Je,he),e(he,Tp),e(Tp,jde),e(jde,yvo),e(Tp,xvo),e(Tp,Pq),e(Pq,$vo),e(Tp,kvo),e(he,Svo),e(he,Mp),e(Mp,Dde),e(Dde,Rvo),e(Mp,Pvo),e(Mp,Gde),e(Gde,Bvo),e(Mp,Nvo),e(he,Ivo),e(he,Ep),e(Ep,Ode),e(Ode,qvo),e(Ep,jvo),e(Ep,Bq),e(Bq,Dvo),e(Ep,Gvo),e(he,Ovo),e(he,Cp),e(Cp,Vde),e(Vde,Vvo),e(Cp,Xvo),e(Cp,Nq),e(Nq,zvo),e(Cp,Qvo),e(he,Wvo),e(he,wp),e(wp,Xde),e(Xde,Hvo),e(wp,Uvo),e(wp,Iq),e(Iq,Jvo),e(wp,Yvo),e(he,Kvo),e(he,Ap),e(Ap,zde),e(zde,Zvo),e(Ap,eFo),e(Ap,qq),e(qq,oFo),e(Ap,rFo),e(he,tFo),e(he,Lp),e(Lp,Qde),e(Qde,aFo),e(Lp,nFo),e(Lp,jq),e(jq,sFo),e(Lp,lFo),e(he,iFo),e(he,yp),e(yp,Wde),e(Wde,dFo),e(yp,cFo),e(yp,Dq),e(Dq,fFo),e(yp,mFo),e(he,gFo),e(he,xp),e(xp,Hde),e(Hde,hFo),e(xp,pFo),e(xp,Gq),e(Gq,_Fo),e(xp,uFo),e(he,bFo),e(he,$p),e($p,Ude),e(Ude,vFo),e($p,FFo),e($p,Oq),e(Oq,TFo),e($p,MFo),e(he,EFo),e(he,kp),e(kp,Jde),e(Jde,CFo),e(kp,wFo),e(kp,Vq),e(Vq,AFo),e(kp,LFo),e(he,yFo),e(he,Sp),e(Sp,Yde),e(Yde,xFo),e(Sp,$Fo),e(Sp,Xq),e(Xq,kFo),e(Sp,SFo),e(he,RFo),e(he,Rp),e(Rp,Kde),e(Kde,PFo),e(Rp,BFo),e(Rp,zq),e(zq,NFo),e(Rp,IFo),e(he,qFo),e(he,Pp),e(Pp,Zde),e(Zde,jFo),e(Pp,DFo),e(Pp,Qq),e(Qq,GFo),e(Pp,OFo),e(he,VFo),e(he,Bp),e(Bp,ece),e(ece,XFo),e(Bp,zFo),e(Bp,Wq),e(Wq,QFo),e(Bp,WFo),e(he,HFo),e(he,Np),e(Np,oce),e(oce,UFo),e(Np,JFo),e(Np,Hq),e(Hq,YFo),e(Np,KFo),e(he,ZFo),e(he,Ip),e(Ip,rce),e(rce,e6o),e(Ip,o6o),e(Ip,Uq),e(Uq,r6o),e(Ip,t6o),e(he,a6o),e(he,qp),e(qp,tce),e(tce,n6o),e(qp,s6o),e(qp,Jq),e(Jq,l6o),e(qp,i6o),e(Je,d6o),M(jp,Je,null),e(Je,c6o),M(Dp,Je,null),e(xo,f6o),e(xo,Gp),M($L,Gp,null),e(Gp,m6o),e(Gp,ace),e(ace,g6o),b(f,pXe,u),b(f,Oi,u),e(Oi,Op),e(Op,nce),M(kL,nce,null),e(Oi,h6o),e(Oi,sce),e(sce,p6o),b(f,_Xe,u),b(f,$o,u),M(SL,$o,null),e($o,_6o),e($o,Vi),e(Vi,u6o),e(Vi,Yq),e(Yq,b6o),e(Vi,v6o),e(Vi,Kq),e(Kq,F6o),e(Vi,T6o),e($o,M6o),e($o,RL),e(RL,E6o),e(RL,lce),e(lce,C6o),e(RL,w6o),e($o,A6o),e($o,it),M(PL,it,null),e(it,L6o),e(it,ice),e(ice,y6o),e(it,x6o),e(it,Xi),e(Xi,$6o),e(Xi,dce),e(dce,k6o),e(Xi,S6o),e(Xi,Zq),e(Zq,R6o),e(Xi,P6o),e(it,B6o),M(Vp,it,null),e($o,N6o),e($o,Ye),M(BL,Ye,null),e(Ye,I6o),e(Ye,cce),e(cce,q6o),e(Ye,j6o),e(Ye,Na),e(Na,D6o),e(Na,fce),e(fce,G6o),e(Na,O6o),e(Na,mce),e(mce,V6o),e(Na,X6o),e(Na,gce),e(gce,z6o),e(Na,Q6o),e(Ye,W6o),e(Ye,y),e(y,Xp),e(Xp,hce),e(hce,H6o),e(Xp,U6o),e(Xp,ej),e(ej,J6o),e(Xp,Y6o),e(y,K6o),e(y,zp),e(zp,pce),e(pce,Z6o),e(zp,eTo),e(zp,oj),e(oj,oTo),e(zp,rTo),e(y,tTo),e(y,Qp),e(Qp,_ce),e(_ce,aTo),e(Qp,nTo),e(Qp,rj),e(rj,sTo),e(Qp,lTo),e(y,iTo),e(y,Wp),e(Wp,uce),e(uce,dTo),e(Wp,cTo),e(Wp,tj),e(tj,fTo),e(Wp,mTo),e(y,gTo),e(y,Hp),e(Hp,bce),e(bce,hTo),e(Hp,pTo),e(Hp,aj),e(aj,_To),e(Hp,uTo),e(y,bTo),e(y,Up),e(Up,vce),e(vce,vTo),e(Up,FTo),e(Up,nj),e(nj,TTo),e(Up,MTo),e(y,ETo),e(y,Jp),e(Jp,Fce),e(Fce,CTo),e(Jp,wTo),e(Jp,sj),e(sj,ATo),e(Jp,LTo),e(y,yTo),e(y,Yp),e(Yp,Tce),e(Tce,xTo),e(Yp,$To),e(Yp,lj),e(lj,kTo),e(Yp,STo),e(y,RTo),e(y,Kp),e(Kp,Mce),e(Mce,PTo),e(Kp,BTo),e(Kp,ij),e(ij,NTo),e(Kp,ITo),e(y,qTo),e(y,Zp),e(Zp,Ece),e(Ece,jTo),e(Zp,DTo),e(Zp,dj),e(dj,GTo),e(Zp,OTo),e(y,VTo),e(y,e_),e(e_,Cce),e(Cce,XTo),e(e_,zTo),e(e_,cj),e(cj,QTo),e(e_,WTo),e(y,HTo),e(y,o_),e(o_,wce),e(wce,UTo),e(o_,JTo),e(o_,fj),e(fj,YTo),e(o_,KTo),e(y,ZTo),e(y,r_),e(r_,Ace),e(Ace,e8o),e(r_,o8o),e(r_,mj),e(mj,r8o),e(r_,t8o),e(y,a8o),e(y,t_),e(t_,Lce),e(Lce,n8o),e(t_,s8o),e(t_,gj),e(gj,l8o),e(t_,i8o),e(y,d8o),e(y,a_),e(a_,yce),e(yce,c8o),e(a_,f8o),e(a_,hj),e(hj,m8o),e(a_,g8o),e(y,h8o),e(y,n_),e(n_,xce),e(xce,p8o),e(n_,_8o),e(n_,pj),e(pj,u8o),e(n_,b8o),e(y,v8o),e(y,s_),e(s_,$ce),e($ce,F8o),e(s_,T8o),e(s_,_j),e(_j,M8o),e(s_,E8o),e(y,C8o),e(y,l_),e(l_,kce),e(kce,w8o),e(l_,A8o),e(l_,uj),e(uj,L8o),e(l_,y8o),e(y,x8o),e(y,i_),e(i_,Sce),e(Sce,$8o),e(i_,k8o),e(i_,bj),e(bj,S8o),e(i_,R8o),e(y,P8o),e(y,d_),e(d_,Rce),e(Rce,B8o),e(d_,N8o),e(d_,vj),e(vj,I8o),e(d_,q8o),e(y,j8o),e(y,c_),e(c_,Pce),e(Pce,D8o),e(c_,G8o),e(c_,Fj),e(Fj,O8o),e(c_,V8o),e(y,X8o),e(y,f_),e(f_,Bce),e(Bce,z8o),e(f_,Q8o),e(f_,Tj),e(Tj,W8o),e(f_,H8o),e(y,U8o),e(y,m_),e(m_,Nce),e(Nce,J8o),e(m_,Y8o),e(m_,Mj),e(Mj,K8o),e(m_,Z8o),e(y,eMo),e(y,g_),e(g_,Ice),e(Ice,oMo),e(g_,rMo),e(g_,Ej),e(Ej,tMo),e(g_,aMo),e(y,nMo),e(y,h_),e(h_,qce),e(qce,sMo),e(h_,lMo),e(h_,Cj),e(Cj,iMo),e(h_,dMo),e(y,cMo),e(y,p_),e(p_,jce),e(jce,fMo),e(p_,mMo),e(p_,wj),e(wj,gMo),e(p_,hMo),e(y,pMo),e(y,__),e(__,Dce),e(Dce,_Mo),e(__,uMo),e(__,Aj),e(Aj,bMo),e(__,vMo),e(y,FMo),e(y,u_),e(u_,Gce),e(Gce,TMo),e(u_,MMo),e(u_,Lj),e(Lj,EMo),e(u_,CMo),e(y,wMo),e(y,b_),e(b_,Oce),e(Oce,AMo),e(b_,LMo),e(b_,yj),e(yj,yMo),e(b_,xMo),e(y,$Mo),e(y,v_),e(v_,Vce),e(Vce,kMo),e(v_,SMo),e(v_,xj),e(xj,RMo),e(v_,PMo),e(y,BMo),e(y,F_),e(F_,Xce),e(Xce,NMo),e(F_,IMo),e(F_,$j),e($j,qMo),e(F_,jMo),e(y,DMo),e(y,T_),e(T_,zce),e(zce,GMo),e(T_,OMo),e(T_,kj),e(kj,VMo),e(T_,XMo),e(y,zMo),e(y,M_),e(M_,Qce),e(Qce,QMo),e(M_,WMo),e(M_,Sj),e(Sj,HMo),e(M_,UMo),e(y,JMo),e(y,E_),e(E_,Wce),e(Wce,YMo),e(E_,KMo),e(E_,Rj),e(Rj,ZMo),e(E_,e4o),e(y,o4o),e(y,Hs),e(Hs,Hce),e(Hce,r4o),e(Hs,t4o),e(Hs,Pj),e(Pj,a4o),e(Hs,n4o),e(Hs,Bj),e(Bj,s4o),e(Hs,l4o),e(y,i4o),e(y,C_),e(C_,Uce),e(Uce,d4o),e(C_,c4o),e(C_,Nj),e(Nj,f4o),e(C_,m4o),e(y,g4o),e(y,w_),e(w_,Jce),e(Jce,h4o),e(w_,p4o),e(w_,Ij),e(Ij,_4o),e(w_,u4o),e(y,b4o),e(y,A_),e(A_,Yce),e(Yce,v4o),e(A_,F4o),e(A_,qj),e(qj,T4o),e(A_,M4o),e(y,E4o),e(y,L_),e(L_,Kce),e(Kce,C4o),e(L_,w4o),e(L_,jj),e(jj,A4o),e(L_,L4o),e(y,y4o),e(y,y_),e(y_,Zce),e(Zce,x4o),e(y_,$4o),e(y_,Dj),e(Dj,k4o),e(y_,S4o),e(y,R4o),e(y,x_),e(x_,efe),e(efe,P4o),e(x_,B4o),e(x_,Gj),e(Gj,N4o),e(x_,I4o),e(y,q4o),e(y,$_),e($_,ofe),e(ofe,j4o),e($_,D4o),e($_,Oj),e(Oj,G4o),e($_,O4o),e(y,V4o),e(y,k_),e(k_,rfe),e(rfe,X4o),e(k_,z4o),e(k_,Vj),e(Vj,Q4o),e(k_,W4o),e(y,H4o),e(y,S_),e(S_,tfe),e(tfe,U4o),e(S_,J4o),e(S_,Xj),e(Xj,Y4o),e(S_,K4o),e(y,Z4o),e(y,R_),e(R_,afe),e(afe,eEo),e(R_,oEo),e(R_,zj),e(zj,rEo),e(R_,tEo),e(y,aEo),e(y,P_),e(P_,nfe),e(nfe,nEo),e(P_,sEo),e(P_,Qj),e(Qj,lEo),e(P_,iEo),e(y,dEo),e(y,B_),e(B_,sfe),e(sfe,cEo),e(B_,fEo),e(B_,Wj),e(Wj,mEo),e(B_,gEo),e(y,hEo),e(y,N_),e(N_,lfe),e(lfe,pEo),e(N_,_Eo),e(N_,Hj),e(Hj,uEo),e(N_,bEo),e(y,vEo),e(y,I_),e(I_,ife),e(ife,FEo),e(I_,TEo),e(I_,Uj),e(Uj,MEo),e(I_,EEo),e(y,CEo),e(y,q_),e(q_,dfe),e(dfe,wEo),e(q_,AEo),e(q_,Jj),e(Jj,LEo),e(q_,yEo),e(y,xEo),e(y,j_),e(j_,cfe),e(cfe,$Eo),e(j_,kEo),e(j_,Yj),e(Yj,SEo),e(j_,REo),e(y,PEo),e(y,D_),e(D_,ffe),e(ffe,BEo),e(D_,NEo),e(D_,Kj),e(Kj,IEo),e(D_,qEo),e(y,jEo),e(y,G_),e(G_,mfe),e(mfe,DEo),e(G_,GEo),e(G_,Zj),e(Zj,OEo),e(G_,VEo),e(y,XEo),e(y,O_),e(O_,gfe),e(gfe,zEo),e(O_,QEo),e(O_,eD),e(eD,WEo),e(O_,HEo),e(y,UEo),e(y,V_),e(V_,hfe),e(hfe,JEo),e(V_,YEo),e(V_,oD),e(oD,KEo),e(V_,ZEo),e(y,eCo),e(y,X_),e(X_,pfe),e(pfe,oCo),e(X_,rCo),e(X_,rD),e(rD,tCo),e(X_,aCo),e(y,nCo),e(y,z_),e(z_,_fe),e(_fe,sCo),e(z_,lCo),e(z_,tD),e(tD,iCo),e(z_,dCo),e(y,cCo),e(y,Q_),e(Q_,ufe),e(ufe,fCo),e(Q_,mCo),e(Q_,aD),e(aD,gCo),e(Q_,hCo),e(y,pCo),e(y,W_),e(W_,bfe),e(bfe,_Co),e(W_,uCo),e(W_,nD),e(nD,bCo),e(W_,vCo),e(y,FCo),e(y,H_),e(H_,vfe),e(vfe,TCo),e(H_,MCo),e(H_,sD),e(sD,ECo),e(H_,CCo),e(y,wCo),e(y,U_),e(U_,Ffe),e(Ffe,ACo),e(U_,LCo),e(U_,lD),e(lD,yCo),e(U_,xCo),e(y,$Co),e(y,J_),e(J_,Tfe),e(Tfe,kCo),e(J_,SCo),e(J_,iD),e(iD,RCo),e(J_,PCo),e(y,BCo),e(y,Y_),e(Y_,Mfe),e(Mfe,NCo),e(Y_,ICo),e(Y_,dD),e(dD,qCo),e(Y_,jCo),e(y,DCo),e(y,K_),e(K_,Efe),e(Efe,GCo),e(K_,OCo),e(K_,cD),e(cD,VCo),e(K_,XCo),e(y,zCo),e(y,Z_),e(Z_,Cfe),e(Cfe,QCo),e(Z_,WCo),e(Z_,fD),e(fD,HCo),e(Z_,UCo),e(y,JCo),e(y,eu),e(eu,wfe),e(wfe,YCo),e(eu,KCo),e(eu,mD),e(mD,ZCo),e(eu,e3o),e(y,o3o),e(y,ou),e(ou,Afe),e(Afe,r3o),e(ou,t3o),e(ou,gD),e(gD,a3o),e(ou,n3o),e(y,s3o),e(y,ru),e(ru,Lfe),e(Lfe,l3o),e(ru,i3o),e(ru,hD),e(hD,d3o),e(ru,c3o),e(y,f3o),e(y,tu),e(tu,yfe),e(yfe,m3o),e(tu,g3o),e(tu,pD),e(pD,h3o),e(tu,p3o),e(y,_3o),e(y,au),e(au,xfe),e(xfe,u3o),e(au,b3o),e(au,_D),e(_D,v3o),e(au,F3o),e(y,T3o),e(y,nu),e(nu,$fe),e($fe,M3o),e(nu,E3o),e(nu,uD),e(uD,C3o),e(nu,w3o),e(y,A3o),e(y,su),e(su,kfe),e(kfe,L3o),e(su,y3o),e(su,bD),e(bD,x3o),e(su,$3o),e(y,k3o),e(y,lu),e(lu,Sfe),e(Sfe,S3o),e(lu,R3o),e(lu,vD),e(vD,P3o),e(lu,B3o),e(y,N3o),e(y,iu),e(iu,Rfe),e(Rfe,I3o),e(iu,q3o),e(iu,FD),e(FD,j3o),e(iu,D3o),e(y,G3o),e(y,du),e(du,Pfe),e(Pfe,O3o),e(du,V3o),e(du,TD),e(TD,X3o),e(du,z3o),e(y,Q3o),e(y,cu),e(cu,Bfe),e(Bfe,W3o),e(cu,H3o),e(cu,MD),e(MD,U3o),e(cu,J3o),e(y,Y3o),e(y,fu),e(fu,Nfe),e(Nfe,K3o),e(fu,Z3o),e(fu,ED),e(ED,e5o),e(fu,o5o),e(y,r5o),e(y,mu),e(mu,Ife),e(Ife,t5o),e(mu,a5o),e(mu,CD),e(CD,n5o),e(mu,s5o),e(y,l5o),e(y,gu),e(gu,qfe),e(qfe,i5o),e(gu,d5o),e(gu,wD),e(wD,c5o),e(gu,f5o),e(y,m5o),e(y,hu),e(hu,jfe),e(jfe,g5o),e(hu,h5o),e(hu,AD),e(AD,p5o),e(hu,_5o),e(y,u5o),e(y,pu),e(pu,Dfe),e(Dfe,b5o),e(pu,v5o),e(pu,LD),e(LD,F5o),e(pu,T5o),e(y,M5o),e(y,_u),e(_u,Gfe),e(Gfe,E5o),e(_u,C5o),e(_u,yD),e(yD,w5o),e(_u,A5o),e(y,L5o),e(y,uu),e(uu,Ofe),e(Ofe,y5o),e(uu,x5o),e(uu,xD),e(xD,$5o),e(uu,k5o),e(y,S5o),e(y,bu),e(bu,Vfe),e(Vfe,R5o),e(bu,P5o),e(bu,$D),e($D,B5o),e(bu,N5o),e(y,I5o),e(y,vu),e(vu,Xfe),e(Xfe,q5o),e(vu,j5o),e(vu,kD),e(kD,D5o),e(vu,G5o),e(y,O5o),e(y,Fu),e(Fu,zfe),e(zfe,V5o),e(Fu,X5o),e(Fu,SD),e(SD,z5o),e(Fu,Q5o),e(y,W5o),e(y,Tu),e(Tu,Qfe),e(Qfe,H5o),e(Tu,U5o),e(Tu,RD),e(RD,J5o),e(Tu,Y5o),e(y,K5o),e(y,Mu),e(Mu,Wfe),e(Wfe,Z5o),e(Mu,e0o),e(Mu,PD),e(PD,o0o),e(Mu,r0o),e(y,t0o),e(y,Eu),e(Eu,Hfe),e(Hfe,a0o),e(Eu,n0o),e(Eu,BD),e(BD,s0o),e(Eu,l0o),e(y,i0o),e(y,Cu),e(Cu,Ufe),e(Ufe,d0o),e(Cu,c0o),e(Cu,ND),e(ND,f0o),e(Cu,m0o),e(y,g0o),e(y,wu),e(wu,Jfe),e(Jfe,h0o),e(wu,p0o),e(wu,ID),e(ID,_0o),e(wu,u0o),e(y,b0o),e(y,Au),e(Au,Yfe),e(Yfe,v0o),e(Au,F0o),e(Au,qD),e(qD,T0o),e(Au,M0o),e(y,E0o),e(y,Lu),e(Lu,Kfe),e(Kfe,C0o),e(Lu,w0o),e(Lu,jD),e(jD,A0o),e(Lu,L0o),e(y,y0o),e(y,yu),e(yu,Zfe),e(Zfe,x0o),e(yu,$0o),e(yu,DD),e(DD,k0o),e(yu,S0o),e(y,R0o),e(y,xu),e(xu,eme),e(eme,P0o),e(xu,B0o),e(xu,GD),e(GD,N0o),e(xu,I0o),e(y,q0o),e(y,$u),e($u,ome),e(ome,j0o),e($u,D0o),e($u,OD),e(OD,G0o),e($u,O0o),e(y,V0o),e(y,ku),e(ku,rme),e(rme,X0o),e(ku,z0o),e(ku,VD),e(VD,Q0o),e(ku,W0o),e(y,H0o),e(y,Su),e(Su,tme),e(tme,U0o),e(Su,J0o),e(Su,XD),e(XD,Y0o),e(Su,K0o),e(y,Z0o),e(y,Ru),e(Ru,ame),e(ame,ewo),e(Ru,owo),e(Ru,zD),e(zD,rwo),e(Ru,two),e(y,awo),e(y,Pu),e(Pu,nme),e(nme,nwo),e(Pu,swo),e(Pu,QD),e(QD,lwo),e(Pu,iwo),e(y,dwo),e(y,Bu),e(Bu,sme),e(sme,cwo),e(Bu,fwo),e(Bu,WD),e(WD,mwo),e(Bu,gwo),e(y,hwo),e(y,Nu),e(Nu,lme),e(lme,pwo),e(Nu,_wo),e(Nu,HD),e(HD,uwo),e(Nu,bwo),e(y,vwo),e(y,Iu),e(Iu,ime),e(ime,Fwo),e(Iu,Two),e(Iu,UD),e(UD,Mwo),e(Iu,Ewo),e(y,Cwo),e(y,qu),e(qu,dme),e(dme,wwo),e(qu,Awo),e(qu,JD),e(JD,Lwo),e(qu,ywo),e(y,xwo),e(y,ju),e(ju,cme),e(cme,$wo),e(ju,kwo),e(ju,YD),e(YD,Swo),e(ju,Rwo),e(y,Pwo),e(y,Du),e(Du,fme),e(fme,Bwo),e(Du,Nwo),e(Du,KD),e(KD,Iwo),e(Du,qwo),e(y,jwo),e(y,Gu),e(Gu,mme),e(mme,Dwo),e(Gu,Gwo),e(Gu,ZD),e(ZD,Owo),e(Gu,Vwo),e(y,Xwo),e(y,Ou),e(Ou,gme),e(gme,zwo),e(Ou,Qwo),e(Ou,eG),e(eG,Wwo),e(Ou,Hwo),e(y,Uwo),e(y,Vu),e(Vu,hme),e(hme,Jwo),e(Vu,Ywo),e(Vu,oG),e(oG,Kwo),e(Vu,Zwo),e(y,eAo),e(y,Xu),e(Xu,pme),e(pme,oAo),e(Xu,rAo),e(Xu,rG),e(rG,tAo),e(Xu,aAo),e(y,nAo),e(y,zu),e(zu,_me),e(_me,sAo),e(zu,lAo),e(zu,tG),e(tG,iAo),e(zu,dAo),e(Ye,cAo),e(Ye,Qu),e(Qu,fAo),e(Qu,ume),e(ume,mAo),e(Qu,gAo),e(Qu,bme),e(bme,hAo),e(Ye,pAo),M(Wu,Ye,null),b(f,uXe,u),b(f,zi,u),e(zi,Hu),e(Hu,vme),M(NL,vme,null),e(zi,_Ao),e(zi,Fme),e(Fme,uAo),b(f,bXe,u),b(f,ko,u),M(IL,ko,null),e(ko,bAo),e(ko,Qi),e(Qi,vAo),e(Qi,aG),e(aG,FAo),e(Qi,TAo),e(Qi,nG),e(nG,MAo),e(Qi,EAo),e(ko,CAo),e(ko,qL),e(qL,wAo),e(qL,Tme),e(Tme,AAo),e(qL,LAo),e(ko,yAo),e(ko,dt),M(jL,dt,null),e(dt,xAo),e(dt,Mme),e(Mme,$Ao),e(dt,kAo),e(dt,Wi),e(Wi,SAo),e(Wi,Eme),e(Eme,RAo),e(Wi,PAo),e(Wi,sG),e(sG,BAo),e(Wi,NAo),e(dt,IAo),M(Uu,dt,null),e(ko,qAo),e(ko,Ke),M(DL,Ke,null),e(Ke,jAo),e(Ke,Cme),e(Cme,DAo),e(Ke,GAo),e(Ke,Ia),e(Ia,OAo),e(Ia,wme),e(wme,VAo),e(Ia,XAo),e(Ia,Ame),e(Ame,zAo),e(Ia,QAo),e(Ia,Lme),e(Lme,WAo),e(Ia,HAo),e(Ke,UAo),e(Ke,G),e(G,Ju),e(Ju,yme),e(yme,JAo),e(Ju,YAo),e(Ju,lG),e(lG,KAo),e(Ju,ZAo),e(G,e7o),e(G,Yu),e(Yu,xme),e(xme,o7o),e(Yu,r7o),e(Yu,iG),e(iG,t7o),e(Yu,a7o),e(G,n7o),e(G,Ku),e(Ku,$me),e($me,s7o),e(Ku,l7o),e(Ku,dG),e(dG,i7o),e(Ku,d7o),e(G,c7o),e(G,Zu),e(Zu,kme),e(kme,f7o),e(Zu,m7o),e(Zu,cG),e(cG,g7o),e(Zu,h7o),e(G,p7o),e(G,e1),e(e1,Sme),e(Sme,_7o),e(e1,u7o),e(e1,fG),e(fG,b7o),e(e1,v7o),e(G,F7o),e(G,o1),e(o1,Rme),e(Rme,T7o),e(o1,M7o),e(o1,mG),e(mG,E7o),e(o1,C7o),e(G,w7o),e(G,r1),e(r1,Pme),e(Pme,A7o),e(r1,L7o),e(r1,gG),e(gG,y7o),e(r1,x7o),e(G,$7o),e(G,t1),e(t1,Bme),e(Bme,k7o),e(t1,S7o),e(t1,hG),e(hG,R7o),e(t1,P7o),e(G,B7o),e(G,a1),e(a1,Nme),e(Nme,N7o),e(a1,I7o),e(a1,pG),e(pG,q7o),e(a1,j7o),e(G,D7o),e(G,n1),e(n1,Ime),e(Ime,G7o),e(n1,O7o),e(n1,_G),e(_G,V7o),e(n1,X7o),e(G,z7o),e(G,s1),e(s1,qme),e(qme,Q7o),e(s1,W7o),e(s1,uG),e(uG,H7o),e(s1,U7o),e(G,J7o),e(G,l1),e(l1,jme),e(jme,Y7o),e(l1,K7o),e(l1,bG),e(bG,Z7o),e(l1,eLo),e(G,oLo),e(G,i1),e(i1,Dme),e(Dme,rLo),e(i1,tLo),e(i1,vG),e(vG,aLo),e(i1,nLo),e(G,sLo),e(G,d1),e(d1,Gme),e(Gme,lLo),e(d1,iLo),e(d1,FG),e(FG,dLo),e(d1,cLo),e(G,fLo),e(G,c1),e(c1,Ome),e(Ome,mLo),e(c1,gLo),e(c1,TG),e(TG,hLo),e(c1,pLo),e(G,_Lo),e(G,f1),e(f1,Vme),e(Vme,uLo),e(f1,bLo),e(f1,MG),e(MG,vLo),e(f1,FLo),e(G,TLo),e(G,m1),e(m1,Xme),e(Xme,MLo),e(m1,ELo),e(m1,EG),e(EG,CLo),e(m1,wLo),e(G,ALo),e(G,g1),e(g1,zme),e(zme,LLo),e(g1,yLo),e(g1,CG),e(CG,xLo),e(g1,$Lo),e(G,kLo),e(G,h1),e(h1,Qme),e(Qme,SLo),e(h1,RLo),e(h1,wG),e(wG,PLo),e(h1,BLo),e(G,NLo),e(G,p1),e(p1,Wme),e(Wme,ILo),e(p1,qLo),e(p1,AG),e(AG,jLo),e(p1,DLo),e(G,GLo),e(G,_1),e(_1,Hme),e(Hme,OLo),e(_1,VLo),e(_1,LG),e(LG,XLo),e(_1,zLo),e(G,QLo),e(G,u1),e(u1,Ume),e(Ume,WLo),e(u1,HLo),e(u1,yG),e(yG,ULo),e(u1,JLo),e(G,YLo),e(G,b1),e(b1,Jme),e(Jme,KLo),e(b1,ZLo),e(b1,xG),e(xG,eyo),e(b1,oyo),e(G,ryo),e(G,v1),e(v1,Yme),e(Yme,tyo),e(v1,ayo),e(v1,$G),e($G,nyo),e(v1,syo),e(G,lyo),e(G,F1),e(F1,Kme),e(Kme,iyo),e(F1,dyo),e(F1,kG),e(kG,cyo),e(F1,fyo),e(G,myo),e(G,T1),e(T1,Zme),e(Zme,gyo),e(T1,hyo),e(T1,SG),e(SG,pyo),e(T1,_yo),e(G,uyo),e(G,M1),e(M1,ege),e(ege,byo),e(M1,vyo),e(M1,RG),e(RG,Fyo),e(M1,Tyo),e(G,Myo),e(G,E1),e(E1,oge),e(oge,Eyo),e(E1,Cyo),e(E1,PG),e(PG,wyo),e(E1,Ayo),e(G,Lyo),e(G,C1),e(C1,rge),e(rge,yyo),e(C1,xyo),e(C1,BG),e(BG,$yo),e(C1,kyo),e(G,Syo),e(G,w1),e(w1,tge),e(tge,Ryo),e(w1,Pyo),e(w1,NG),e(NG,Byo),e(w1,Nyo),e(G,Iyo),e(G,A1),e(A1,age),e(age,qyo),e(A1,jyo),e(A1,IG),e(IG,Dyo),e(A1,Gyo),e(G,Oyo),e(G,L1),e(L1,nge),e(nge,Vyo),e(L1,Xyo),e(L1,qG),e(qG,zyo),e(L1,Qyo),e(G,Wyo),e(G,y1),e(y1,sge),e(sge,Hyo),e(y1,Uyo),e(y1,jG),e(jG,Jyo),e(y1,Yyo),e(G,Kyo),e(G,x1),e(x1,lge),e(lge,Zyo),e(x1,e9o),e(x1,DG),e(DG,o9o),e(x1,r9o),e(G,t9o),e(G,$1),e($1,ige),e(ige,a9o),e($1,n9o),e($1,GG),e(GG,s9o),e($1,l9o),e(G,i9o),e(G,k1),e(k1,dge),e(dge,d9o),e(k1,c9o),e(k1,OG),e(OG,f9o),e(k1,m9o),e(G,g9o),e(G,S1),e(S1,cge),e(cge,h9o),e(S1,p9o),e(S1,VG),e(VG,_9o),e(S1,u9o),e(G,b9o),e(G,R1),e(R1,fge),e(fge,v9o),e(R1,F9o),e(R1,XG),e(XG,T9o),e(R1,M9o),e(G,E9o),e(G,P1),e(P1,mge),e(mge,C9o),e(P1,w9o),e(P1,zG),e(zG,A9o),e(P1,L9o),e(G,y9o),e(G,B1),e(B1,gge),e(gge,x9o),e(B1,$9o),e(B1,QG),e(QG,k9o),e(B1,S9o),e(G,R9o),e(G,N1),e(N1,hge),e(hge,P9o),e(N1,B9o),e(N1,WG),e(WG,N9o),e(N1,I9o),e(G,q9o),e(G,I1),e(I1,pge),e(pge,j9o),e(I1,D9o),e(I1,HG),e(HG,G9o),e(I1,O9o),e(G,V9o),e(G,q1),e(q1,_ge),e(_ge,X9o),e(q1,z9o),e(q1,UG),e(UG,Q9o),e(q1,W9o),e(G,H9o),e(G,j1),e(j1,uge),e(uge,U9o),e(j1,J9o),e(j1,JG),e(JG,Y9o),e(j1,K9o),e(G,Z9o),e(G,D1),e(D1,bge),e(bge,exo),e(D1,oxo),e(D1,YG),e(YG,rxo),e(D1,txo),e(Ke,axo),e(Ke,G1),e(G1,nxo),e(G1,vge),e(vge,sxo),e(G1,lxo),e(G1,Fge),e(Fge,ixo),e(Ke,dxo),M(O1,Ke,null),b(f,vXe,u),b(f,Hi,u),e(Hi,V1),e(V1,Tge),M(GL,Tge,null),e(Hi,cxo),e(Hi,Mge),e(Mge,fxo),b(f,FXe,u),b(f,So,u),M(OL,So,null),e(So,mxo),e(So,Ui),e(Ui,gxo),e(Ui,KG),e(KG,hxo),e(Ui,pxo),e(Ui,ZG),e(ZG,_xo),e(Ui,uxo),e(So,bxo),e(So,VL),e(VL,vxo),e(VL,Ege),e(Ege,Fxo),e(VL,Txo),e(So,Mxo),e(So,ct),M(XL,ct,null),e(ct,Exo),e(ct,Cge),e(Cge,Cxo),e(ct,wxo),e(ct,Ji),e(Ji,Axo),e(Ji,wge),e(wge,Lxo),e(Ji,yxo),e(Ji,eO),e(eO,xxo),e(Ji,$xo),e(ct,kxo),M(X1,ct,null),e(So,Sxo),e(So,Ze),M(zL,Ze,null),e(Ze,Rxo),e(Ze,Age),e(Age,Pxo),e(Ze,Bxo),e(Ze,qa),e(qa,Nxo),e(qa,Lge),e(Lge,Ixo),e(qa,qxo),e(qa,yge),e(yge,jxo),e(qa,Dxo),e(qa,xge),e(xge,Gxo),e(qa,Oxo),e(Ze,Vxo),e(Ze,z),e(z,z1),e(z1,$ge),e($ge,Xxo),e(z1,zxo),e(z1,oO),e(oO,Qxo),e(z1,Wxo),e(z,Hxo),e(z,Q1),e(Q1,kge),e(kge,Uxo),e(Q1,Jxo),e(Q1,rO),e(rO,Yxo),e(Q1,Kxo),e(z,Zxo),e(z,W1),e(W1,Sge),e(Sge,e$o),e(W1,o$o),e(W1,tO),e(tO,r$o),e(W1,t$o),e(z,a$o),e(z,H1),e(H1,Rge),e(Rge,n$o),e(H1,s$o),e(H1,aO),e(aO,l$o),e(H1,i$o),e(z,d$o),e(z,U1),e(U1,Pge),e(Pge,c$o),e(U1,f$o),e(U1,nO),e(nO,m$o),e(U1,g$o),e(z,h$o),e(z,J1),e(J1,Bge),e(Bge,p$o),e(J1,_$o),e(J1,sO),e(sO,u$o),e(J1,b$o),e(z,v$o),e(z,Y1),e(Y1,Nge),e(Nge,F$o),e(Y1,T$o),e(Y1,lO),e(lO,M$o),e(Y1,E$o),e(z,C$o),e(z,K1),e(K1,Ige),e(Ige,w$o),e(K1,A$o),e(K1,iO),e(iO,L$o),e(K1,y$o),e(z,x$o),e(z,Z1),e(Z1,qge),e(qge,$$o),e(Z1,k$o),e(Z1,dO),e(dO,S$o),e(Z1,R$o),e(z,P$o),e(z,e2),e(e2,jge),e(jge,B$o),e(e2,N$o),e(e2,cO),e(cO,I$o),e(e2,q$o),e(z,j$o),e(z,o2),e(o2,Dge),e(Dge,D$o),e(o2,G$o),e(o2,fO),e(fO,O$o),e(o2,V$o),e(z,X$o),e(z,r2),e(r2,Gge),e(Gge,z$o),e(r2,Q$o),e(r2,mO),e(mO,W$o),e(r2,H$o),e(z,U$o),e(z,t2),e(t2,Oge),e(Oge,J$o),e(t2,Y$o),e(t2,gO),e(gO,K$o),e(t2,Z$o),e(z,eko),e(z,a2),e(a2,Vge),e(Vge,oko),e(a2,rko),e(a2,hO),e(hO,tko),e(a2,ako),e(z,nko),e(z,n2),e(n2,Xge),e(Xge,sko),e(n2,lko),e(n2,pO),e(pO,iko),e(n2,dko),e(z,cko),e(z,s2),e(s2,zge),e(zge,fko),e(s2,mko),e(s2,_O),e(_O,gko),e(s2,hko),e(z,pko),e(z,l2),e(l2,Qge),e(Qge,_ko),e(l2,uko),e(l2,uO),e(uO,bko),e(l2,vko),e(z,Fko),e(z,i2),e(i2,Wge),e(Wge,Tko),e(i2,Mko),e(i2,bO),e(bO,Eko),e(i2,Cko),e(z,wko),e(z,d2),e(d2,Hge),e(Hge,Ako),e(d2,Lko),e(d2,vO),e(vO,yko),e(d2,xko),e(z,$ko),e(z,c2),e(c2,Uge),e(Uge,kko),e(c2,Sko),e(c2,FO),e(FO,Rko),e(c2,Pko),e(z,Bko),e(z,f2),e(f2,Jge),e(Jge,Nko),e(f2,Iko),e(f2,TO),e(TO,qko),e(f2,jko),e(z,Dko),e(z,m2),e(m2,Yge),e(Yge,Gko),e(m2,Oko),e(m2,MO),e(MO,Vko),e(m2,Xko),e(z,zko),e(z,g2),e(g2,Kge),e(Kge,Qko),e(g2,Wko),e(g2,EO),e(EO,Hko),e(g2,Uko),e(z,Jko),e(z,h2),e(h2,Zge),e(Zge,Yko),e(h2,Kko),e(h2,CO),e(CO,Zko),e(h2,eSo),e(z,oSo),e(z,p2),e(p2,ehe),e(ehe,rSo),e(p2,tSo),e(p2,wO),e(wO,aSo),e(p2,nSo),e(z,sSo),e(z,_2),e(_2,ohe),e(ohe,lSo),e(_2,iSo),e(_2,AO),e(AO,dSo),e(_2,cSo),e(z,fSo),e(z,u2),e(u2,rhe),e(rhe,mSo),e(u2,gSo),e(u2,LO),e(LO,hSo),e(u2,pSo),e(z,_So),e(z,b2),e(b2,the),e(the,uSo),e(b2,bSo),e(b2,yO),e(yO,vSo),e(b2,FSo),e(z,TSo),e(z,v2),e(v2,ahe),e(ahe,MSo),e(v2,ESo),e(v2,xO),e(xO,CSo),e(v2,wSo),e(z,ASo),e(z,F2),e(F2,nhe),e(nhe,LSo),e(F2,ySo),e(F2,$O),e($O,xSo),e(F2,$So),e(z,kSo),e(z,T2),e(T2,she),e(she,SSo),e(T2,RSo),e(T2,kO),e(kO,PSo),e(T2,BSo),e(z,NSo),e(z,M2),e(M2,lhe),e(lhe,ISo),e(M2,qSo),e(M2,SO),e(SO,jSo),e(M2,DSo),e(z,GSo),e(z,E2),e(E2,ihe),e(ihe,OSo),e(E2,VSo),e(E2,RO),e(RO,XSo),e(E2,zSo),e(z,QSo),e(z,C2),e(C2,dhe),e(dhe,WSo),e(C2,HSo),e(C2,PO),e(PO,USo),e(C2,JSo),e(z,YSo),e(z,w2),e(w2,che),e(che,KSo),e(w2,ZSo),e(w2,BO),e(BO,eRo),e(w2,oRo),e(z,rRo),e(z,A2),e(A2,fhe),e(fhe,tRo),e(A2,aRo),e(A2,NO),e(NO,nRo),e(A2,sRo),e(z,lRo),e(z,L2),e(L2,mhe),e(mhe,iRo),e(L2,dRo),e(L2,IO),e(IO,cRo),e(L2,fRo),e(z,mRo),e(z,y2),e(y2,ghe),e(ghe,gRo),e(y2,hRo),e(y2,qO),e(qO,pRo),e(y2,_Ro),e(z,uRo),e(z,x2),e(x2,hhe),e(hhe,bRo),e(x2,vRo),e(x2,jO),e(jO,FRo),e(x2,TRo),e(z,MRo),e(z,$2),e($2,phe),e(phe,ERo),e($2,CRo),e($2,DO),e(DO,wRo),e($2,ARo),e(Ze,LRo),e(Ze,k2),e(k2,yRo),e(k2,_he),e(_he,xRo),e(k2,$Ro),e(k2,uhe),e(uhe,kRo),e(Ze,SRo),M(S2,Ze,null),b(f,TXe,u),b(f,Yi,u),e(Yi,R2),e(R2,bhe),M(QL,bhe,null),e(Yi,RRo),e(Yi,vhe),e(vhe,PRo),b(f,MXe,u),b(f,Ro,u),M(WL,Ro,null),e(Ro,BRo),e(Ro,Ki),e(Ki,NRo),e(Ki,GO),e(GO,IRo),e(Ki,qRo),e(Ki,OO),e(OO,jRo),e(Ki,DRo),e(Ro,GRo),e(Ro,HL),e(HL,ORo),e(HL,Fhe),e(Fhe,VRo),e(HL,XRo),e(Ro,zRo),e(Ro,ft),M(UL,ft,null),e(ft,QRo),e(ft,The),e(The,WRo),e(ft,HRo),e(ft,Zi),e(Zi,URo),e(Zi,Mhe),e(Mhe,JRo),e(Zi,YRo),e(Zi,VO),e(VO,KRo),e(Zi,ZRo),e(ft,ePo),M(P2,ft,null),e(Ro,oPo),e(Ro,eo),M(JL,eo,null),e(eo,rPo),e(eo,Ehe),e(Ehe,tPo),e(eo,aPo),e(eo,ja),e(ja,nPo),e(ja,Che),e(Che,sPo),e(ja,lPo),e(ja,whe),e(whe,iPo),e(ja,dPo),e(ja,Ahe),e(Ahe,cPo),e(ja,fPo),e(eo,mPo),e(eo,W),e(W,B2),e(B2,Lhe),e(Lhe,gPo),e(B2,hPo),e(B2,XO),e(XO,pPo),e(B2,_Po),e(W,uPo),e(W,N2),e(N2,yhe),e(yhe,bPo),e(N2,vPo),e(N2,zO),e(zO,FPo),e(N2,TPo),e(W,MPo),e(W,I2),e(I2,xhe),e(xhe,EPo),e(I2,CPo),e(I2,QO),e(QO,wPo),e(I2,APo),e(W,LPo),e(W,q2),e(q2,$he),e($he,yPo),e(q2,xPo),e(q2,WO),e(WO,$Po),e(q2,kPo),e(W,SPo),e(W,j2),e(j2,khe),e(khe,RPo),e(j2,PPo),e(j2,HO),e(HO,BPo),e(j2,NPo),e(W,IPo),e(W,D2),e(D2,She),e(She,qPo),e(D2,jPo),e(D2,UO),e(UO,DPo),e(D2,GPo),e(W,OPo),e(W,G2),e(G2,Rhe),e(Rhe,VPo),e(G2,XPo),e(G2,JO),e(JO,zPo),e(G2,QPo),e(W,WPo),e(W,O2),e(O2,Phe),e(Phe,HPo),e(O2,UPo),e(O2,YO),e(YO,JPo),e(O2,YPo),e(W,KPo),e(W,V2),e(V2,Bhe),e(Bhe,ZPo),e(V2,eBo),e(V2,KO),e(KO,oBo),e(V2,rBo),e(W,tBo),e(W,X2),e(X2,Nhe),e(Nhe,aBo),e(X2,nBo),e(X2,ZO),e(ZO,sBo),e(X2,lBo),e(W,iBo),e(W,z2),e(z2,Ihe),e(Ihe,dBo),e(z2,cBo),e(z2,eV),e(eV,fBo),e(z2,mBo),e(W,gBo),e(W,Q2),e(Q2,qhe),e(qhe,hBo),e(Q2,pBo),e(Q2,oV),e(oV,_Bo),e(Q2,uBo),e(W,bBo),e(W,W2),e(W2,jhe),e(jhe,vBo),e(W2,FBo),e(W2,rV),e(rV,TBo),e(W2,MBo),e(W,EBo),e(W,H2),e(H2,Dhe),e(Dhe,CBo),e(H2,wBo),e(H2,tV),e(tV,ABo),e(H2,LBo),e(W,yBo),e(W,U2),e(U2,Ghe),e(Ghe,xBo),e(U2,$Bo),e(U2,aV),e(aV,kBo),e(U2,SBo),e(W,RBo),e(W,J2),e(J2,Ohe),e(Ohe,PBo),e(J2,BBo),e(J2,nV),e(nV,NBo),e(J2,IBo),e(W,qBo),e(W,Y2),e(Y2,Vhe),e(Vhe,jBo),e(Y2,DBo),e(Y2,sV),e(sV,GBo),e(Y2,OBo),e(W,VBo),e(W,K2),e(K2,Xhe),e(Xhe,XBo),e(K2,zBo),e(K2,lV),e(lV,QBo),e(K2,WBo),e(W,HBo),e(W,Z2),e(Z2,zhe),e(zhe,UBo),e(Z2,JBo),e(Z2,iV),e(iV,YBo),e(Z2,KBo),e(W,ZBo),e(W,eb),e(eb,Qhe),e(Qhe,eNo),e(eb,oNo),e(eb,dV),e(dV,rNo),e(eb,tNo),e(W,aNo),e(W,ob),e(ob,Whe),e(Whe,nNo),e(ob,sNo),e(ob,cV),e(cV,lNo),e(ob,iNo),e(W,dNo),e(W,rb),e(rb,Hhe),e(Hhe,cNo),e(rb,fNo),e(rb,fV),e(fV,mNo),e(rb,gNo),e(W,hNo),e(W,tb),e(tb,Uhe),e(Uhe,pNo),e(tb,_No),e(tb,mV),e(mV,uNo),e(tb,bNo),e(W,vNo),e(W,ab),e(ab,Jhe),e(Jhe,FNo),e(ab,TNo),e(ab,gV),e(gV,MNo),e(ab,ENo),e(W,CNo),e(W,nb),e(nb,Yhe),e(Yhe,wNo),e(nb,ANo),e(nb,hV),e(hV,LNo),e(nb,yNo),e(W,xNo),e(W,sb),e(sb,Khe),e(Khe,$No),e(sb,kNo),e(sb,pV),e(pV,SNo),e(sb,RNo),e(W,PNo),e(W,lb),e(lb,Zhe),e(Zhe,BNo),e(lb,NNo),e(lb,_V),e(_V,INo),e(lb,qNo),e(W,jNo),e(W,ib),e(ib,epe),e(epe,DNo),e(ib,GNo),e(ib,uV),e(uV,ONo),e(ib,VNo),e(W,XNo),e(W,db),e(db,ope),e(ope,zNo),e(db,QNo),e(db,bV),e(bV,WNo),e(db,HNo),e(W,UNo),e(W,cb),e(cb,rpe),e(rpe,JNo),e(cb,YNo),e(cb,vV),e(vV,KNo),e(cb,ZNo),e(W,eIo),e(W,fb),e(fb,tpe),e(tpe,oIo),e(fb,rIo),e(fb,FV),e(FV,tIo),e(fb,aIo),e(W,nIo),e(W,mb),e(mb,ape),e(ape,sIo),e(mb,lIo),e(mb,TV),e(TV,iIo),e(mb,dIo),e(W,cIo),e(W,gb),e(gb,npe),e(npe,fIo),e(gb,mIo),e(gb,MV),e(MV,gIo),e(gb,hIo),e(W,pIo),e(W,hb),e(hb,spe),e(spe,_Io),e(hb,uIo),e(hb,lpe),e(lpe,bIo),e(hb,vIo),e(W,FIo),e(W,pb),e(pb,ipe),e(ipe,TIo),e(pb,MIo),e(pb,EV),e(EV,EIo),e(pb,CIo),e(W,wIo),e(W,_b),e(_b,dpe),e(dpe,AIo),e(_b,LIo),e(_b,CV),e(CV,yIo),e(_b,xIo),e(W,$Io),e(W,ub),e(ub,cpe),e(cpe,kIo),e(ub,SIo),e(ub,wV),e(wV,RIo),e(ub,PIo),e(W,BIo),e(W,bb),e(bb,fpe),e(fpe,NIo),e(bb,IIo),e(bb,AV),e(AV,qIo),e(bb,jIo),e(eo,DIo),e(eo,vb),e(vb,GIo),e(vb,mpe),e(mpe,OIo),e(vb,VIo),e(vb,gpe),e(gpe,XIo),e(eo,zIo),M(Fb,eo,null),b(f,EXe,u),b(f,ed,u),e(ed,Tb),e(Tb,hpe),M(YL,hpe,null),e(ed,QIo),e(ed,ppe),e(ppe,WIo),b(f,CXe,u),b(f,Po,u),M(KL,Po,null),e(Po,HIo),e(Po,od),e(od,UIo),e(od,LV),e(LV,JIo),e(od,YIo),e(od,yV),e(yV,KIo),e(od,ZIo),e(Po,eqo),e(Po,ZL),e(ZL,oqo),e(ZL,_pe),e(_pe,rqo),e(ZL,tqo),e(Po,aqo),e(Po,mt),M(ey,mt,null),e(mt,nqo),e(mt,upe),e(upe,sqo),e(mt,lqo),e(mt,rd),e(rd,iqo),e(rd,bpe),e(bpe,dqo),e(rd,cqo),e(rd,xV),e(xV,fqo),e(rd,mqo),e(mt,gqo),M(Mb,mt,null),e(Po,hqo),e(Po,oo),M(oy,oo,null),e(oo,pqo),e(oo,vpe),e(vpe,_qo),e(oo,uqo),e(oo,Da),e(Da,bqo),e(Da,Fpe),e(Fpe,vqo),e(Da,Fqo),e(Da,Tpe),e(Tpe,Tqo),e(Da,Mqo),e(Da,Mpe),e(Mpe,Eqo),e(Da,Cqo),e(oo,wqo),e(oo,pe),e(pe,Eb),e(Eb,Epe),e(Epe,Aqo),e(Eb,Lqo),e(Eb,$V),e($V,yqo),e(Eb,xqo),e(pe,$qo),e(pe,Cb),e(Cb,Cpe),e(Cpe,kqo),e(Cb,Sqo),e(Cb,kV),e(kV,Rqo),e(Cb,Pqo),e(pe,Bqo),e(pe,wb),e(wb,wpe),e(wpe,Nqo),e(wb,Iqo),e(wb,SV),e(SV,qqo),e(wb,jqo),e(pe,Dqo),e(pe,Ab),e(Ab,Ape),e(Ape,Gqo),e(Ab,Oqo),e(Ab,RV),e(RV,Vqo),e(Ab,Xqo),e(pe,zqo),e(pe,Lb),e(Lb,Lpe),e(Lpe,Qqo),e(Lb,Wqo),e(Lb,PV),e(PV,Hqo),e(Lb,Uqo),e(pe,Jqo),e(pe,yb),e(yb,ype),e(ype,Yqo),e(yb,Kqo),e(yb,BV),e(BV,Zqo),e(yb,ejo),e(pe,ojo),e(pe,xb),e(xb,xpe),e(xpe,rjo),e(xb,tjo),e(xb,NV),e(NV,ajo),e(xb,njo),e(pe,sjo),e(pe,$b),e($b,$pe),e($pe,ljo),e($b,ijo),e($b,IV),e(IV,djo),e($b,cjo),e(pe,fjo),e(pe,kb),e(kb,kpe),e(kpe,mjo),e(kb,gjo),e(kb,qV),e(qV,hjo),e(kb,pjo),e(pe,_jo),e(pe,Sb),e(Sb,Spe),e(Spe,ujo),e(Sb,bjo),e(Sb,jV),e(jV,vjo),e(Sb,Fjo),e(pe,Tjo),e(pe,Rb),e(Rb,Rpe),e(Rpe,Mjo),e(Rb,Ejo),e(Rb,DV),e(DV,Cjo),e(Rb,wjo),e(pe,Ajo),e(pe,Pb),e(Pb,Ppe),e(Ppe,Ljo),e(Pb,yjo),e(Pb,GV),e(GV,xjo),e(Pb,$jo),e(pe,kjo),e(pe,Bb),e(Bb,Bpe),e(Bpe,Sjo),e(Bb,Rjo),e(Bb,OV),e(OV,Pjo),e(Bb,Bjo),e(pe,Njo),e(pe,Nb),e(Nb,Npe),e(Npe,Ijo),e(Nb,qjo),e(Nb,VV),e(VV,jjo),e(Nb,Djo),e(pe,Gjo),e(pe,Ib),e(Ib,Ipe),e(Ipe,Ojo),e(Ib,Vjo),e(Ib,XV),e(XV,Xjo),e(Ib,zjo),e(pe,Qjo),e(pe,qb),e(qb,qpe),e(qpe,Wjo),e(qb,Hjo),e(qb,zV),e(zV,Ujo),e(qb,Jjo),e(pe,Yjo),e(pe,jb),e(jb,jpe),e(jpe,Kjo),e(jb,Zjo),e(jb,QV),e(QV,eDo),e(jb,oDo),e(pe,rDo),e(pe,Db),e(Db,Dpe),e(Dpe,tDo),e(Db,aDo),e(Db,WV),e(WV,nDo),e(Db,sDo),e(oo,lDo),e(oo,Gb),e(Gb,iDo),e(Gb,Gpe),e(Gpe,dDo),e(Gb,cDo),e(Gb,Ope),e(Ope,fDo),e(oo,mDo),M(Ob,oo,null),b(f,wXe,u),b(f,td,u),e(td,Vb),e(Vb,Vpe),M(ry,Vpe,null),e(td,gDo),e(td,Xpe),e(Xpe,hDo),b(f,AXe,u),b(f,Bo,u),M(ty,Bo,null),e(Bo,pDo),e(Bo,ad),e(ad,_Do),e(ad,HV),e(HV,uDo),e(ad,bDo),e(ad,UV),e(UV,vDo),e(ad,FDo),e(Bo,TDo),e(Bo,ay),e(ay,MDo),e(ay,zpe),e(zpe,EDo),e(ay,CDo),e(Bo,wDo),e(Bo,gt),M(ny,gt,null),e(gt,ADo),e(gt,Qpe),e(Qpe,LDo),e(gt,yDo),e(gt,nd),e(nd,xDo),e(nd,Wpe),e(Wpe,$Do),e(nd,kDo),e(nd,JV),e(JV,SDo),e(nd,RDo),e(gt,PDo),M(Xb,gt,null),e(Bo,BDo),e(Bo,ro),M(sy,ro,null),e(ro,NDo),e(ro,Hpe),e(Hpe,IDo),e(ro,qDo),e(ro,Ga),e(Ga,jDo),e(Ga,Upe),e(Upe,DDo),e(Ga,GDo),e(Ga,Jpe),e(Jpe,ODo),e(Ga,VDo),e(Ga,Ype),e(Ype,XDo),e(Ga,zDo),e(ro,QDo),e(ro,I),e(I,zb),e(zb,Kpe),e(Kpe,WDo),e(zb,HDo),e(zb,YV),e(YV,UDo),e(zb,JDo),e(I,YDo),e(I,Qb),e(Qb,Zpe),e(Zpe,KDo),e(Qb,ZDo),e(Qb,KV),e(KV,eGo),e(Qb,oGo),e(I,rGo),e(I,Wb),e(Wb,e_e),e(e_e,tGo),e(Wb,aGo),e(Wb,ZV),e(ZV,nGo),e(Wb,sGo),e(I,lGo),e(I,Hb),e(Hb,o_e),e(o_e,iGo),e(Hb,dGo),e(Hb,eX),e(eX,cGo),e(Hb,fGo),e(I,mGo),e(I,Ub),e(Ub,r_e),e(r_e,gGo),e(Ub,hGo),e(Ub,oX),e(oX,pGo),e(Ub,_Go),e(I,uGo),e(I,Jb),e(Jb,t_e),e(t_e,bGo),e(Jb,vGo),e(Jb,rX),e(rX,FGo),e(Jb,TGo),e(I,MGo),e(I,Yb),e(Yb,a_e),e(a_e,EGo),e(Yb,CGo),e(Yb,tX),e(tX,wGo),e(Yb,AGo),e(I,LGo),e(I,Kb),e(Kb,n_e),e(n_e,yGo),e(Kb,xGo),e(Kb,aX),e(aX,$Go),e(Kb,kGo),e(I,SGo),e(I,Zb),e(Zb,s_e),e(s_e,RGo),e(Zb,PGo),e(Zb,nX),e(nX,BGo),e(Zb,NGo),e(I,IGo),e(I,ev),e(ev,l_e),e(l_e,qGo),e(ev,jGo),e(ev,sX),e(sX,DGo),e(ev,GGo),e(I,OGo),e(I,ov),e(ov,i_e),e(i_e,VGo),e(ov,XGo),e(ov,lX),e(lX,zGo),e(ov,QGo),e(I,WGo),e(I,rv),e(rv,d_e),e(d_e,HGo),e(rv,UGo),e(rv,iX),e(iX,JGo),e(rv,YGo),e(I,KGo),e(I,tv),e(tv,c_e),e(c_e,ZGo),e(tv,eOo),e(tv,dX),e(dX,oOo),e(tv,rOo),e(I,tOo),e(I,av),e(av,f_e),e(f_e,aOo),e(av,nOo),e(av,cX),e(cX,sOo),e(av,lOo),e(I,iOo),e(I,nv),e(nv,m_e),e(m_e,dOo),e(nv,cOo),e(nv,fX),e(fX,fOo),e(nv,mOo),e(I,gOo),e(I,sv),e(sv,g_e),e(g_e,hOo),e(sv,pOo),e(sv,mX),e(mX,_Oo),e(sv,uOo),e(I,bOo),e(I,lv),e(lv,h_e),e(h_e,vOo),e(lv,FOo),e(lv,gX),e(gX,TOo),e(lv,MOo),e(I,EOo),e(I,iv),e(iv,p_e),e(p_e,COo),e(iv,wOo),e(iv,hX),e(hX,AOo),e(iv,LOo),e(I,yOo),e(I,dv),e(dv,__e),e(__e,xOo),e(dv,$Oo),e(dv,pX),e(pX,kOo),e(dv,SOo),e(I,ROo),e(I,cv),e(cv,u_e),e(u_e,POo),e(cv,BOo),e(cv,_X),e(_X,NOo),e(cv,IOo),e(I,qOo),e(I,fv),e(fv,b_e),e(b_e,jOo),e(fv,DOo),e(fv,uX),e(uX,GOo),e(fv,OOo),e(I,VOo),e(I,mv),e(mv,v_e),e(v_e,XOo),e(mv,zOo),e(mv,bX),e(bX,QOo),e(mv,WOo),e(I,HOo),e(I,gv),e(gv,F_e),e(F_e,UOo),e(gv,JOo),e(gv,vX),e(vX,YOo),e(gv,KOo),e(I,ZOo),e(I,hv),e(hv,T_e),e(T_e,eVo),e(hv,oVo),e(hv,FX),e(FX,rVo),e(hv,tVo),e(I,aVo),e(I,pv),e(pv,M_e),e(M_e,nVo),e(pv,sVo),e(pv,TX),e(TX,lVo),e(pv,iVo),e(I,dVo),e(I,_v),e(_v,E_e),e(E_e,cVo),e(_v,fVo),e(_v,MX),e(MX,mVo),e(_v,gVo),e(I,hVo),e(I,uv),e(uv,C_e),e(C_e,pVo),e(uv,_Vo),e(uv,EX),e(EX,uVo),e(uv,bVo),e(I,vVo),e(I,bv),e(bv,w_e),e(w_e,FVo),e(bv,TVo),e(bv,CX),e(CX,MVo),e(bv,EVo),e(I,CVo),e(I,vv),e(vv,A_e),e(A_e,wVo),e(vv,AVo),e(vv,wX),e(wX,LVo),e(vv,yVo),e(I,xVo),e(I,Fv),e(Fv,L_e),e(L_e,$Vo),e(Fv,kVo),e(Fv,AX),e(AX,SVo),e(Fv,RVo),e(I,PVo),e(I,Tv),e(Tv,y_e),e(y_e,BVo),e(Tv,NVo),e(Tv,LX),e(LX,IVo),e(Tv,qVo),e(I,jVo),e(I,Mv),e(Mv,x_e),e(x_e,DVo),e(Mv,GVo),e(Mv,yX),e(yX,OVo),e(Mv,VVo),e(I,XVo),e(I,Ev),e(Ev,$_e),e($_e,zVo),e(Ev,QVo),e(Ev,xX),e(xX,WVo),e(Ev,HVo),e(I,UVo),e(I,Cv),e(Cv,k_e),e(k_e,JVo),e(Cv,YVo),e(Cv,$X),e($X,KVo),e(Cv,ZVo),e(I,eXo),e(I,wv),e(wv,S_e),e(S_e,oXo),e(wv,rXo),e(wv,kX),e(kX,tXo),e(wv,aXo),e(I,nXo),e(I,Av),e(Av,R_e),e(R_e,sXo),e(Av,lXo),e(Av,SX),e(SX,iXo),e(Av,dXo),e(I,cXo),e(I,Lv),e(Lv,P_e),e(P_e,fXo),e(Lv,mXo),e(Lv,RX),e(RX,gXo),e(Lv,hXo),e(I,pXo),e(I,yv),e(yv,B_e),e(B_e,_Xo),e(yv,uXo),e(yv,PX),e(PX,bXo),e(yv,vXo),e(I,FXo),e(I,xv),e(xv,N_e),e(N_e,TXo),e(xv,MXo),e(xv,BX),e(BX,EXo),e(xv,CXo),e(I,wXo),e(I,$v),e($v,I_e),e(I_e,AXo),e($v,LXo),e($v,NX),e(NX,yXo),e($v,xXo),e(I,$Xo),e(I,kv),e(kv,q_e),e(q_e,kXo),e(kv,SXo),e(kv,IX),e(IX,RXo),e(kv,PXo),e(I,BXo),e(I,Sv),e(Sv,j_e),e(j_e,NXo),e(Sv,IXo),e(Sv,qX),e(qX,qXo),e(Sv,jXo),e(I,DXo),e(I,Rv),e(Rv,D_e),e(D_e,GXo),e(Rv,OXo),e(Rv,jX),e(jX,VXo),e(Rv,XXo),e(I,zXo),e(I,Pv),e(Pv,G_e),e(G_e,QXo),e(Pv,WXo),e(Pv,DX),e(DX,HXo),e(Pv,UXo),e(I,JXo),e(I,Bv),e(Bv,O_e),e(O_e,YXo),e(Bv,KXo),e(Bv,GX),e(GX,ZXo),e(Bv,ezo),e(I,ozo),e(I,Nv),e(Nv,V_e),e(V_e,rzo),e(Nv,tzo),e(Nv,OX),e(OX,azo),e(Nv,nzo),e(I,szo),e(I,Iv),e(Iv,X_e),e(X_e,lzo),e(Iv,izo),e(Iv,VX),e(VX,dzo),e(Iv,czo),e(I,fzo),e(I,qv),e(qv,z_e),e(z_e,mzo),e(qv,gzo),e(qv,XX),e(XX,hzo),e(qv,pzo),e(I,_zo),e(I,jv),e(jv,Q_e),e(Q_e,uzo),e(jv,bzo),e(jv,zX),e(zX,vzo),e(jv,Fzo),e(I,Tzo),e(I,Dv),e(Dv,W_e),e(W_e,Mzo),e(Dv,Ezo),e(Dv,QX),e(QX,Czo),e(Dv,wzo),e(ro,Azo),e(ro,Gv),e(Gv,Lzo),e(Gv,H_e),e(H_e,yzo),e(Gv,xzo),e(Gv,U_e),e(U_e,$zo),e(ro,kzo),M(Ov,ro,null),b(f,LXe,u),b(f,sd,u),e(sd,Vv),e(Vv,J_e),M(ly,J_e,null),e(sd,Szo),e(sd,Y_e),e(Y_e,Rzo),b(f,yXe,u),b(f,No,u),M(iy,No,null),e(No,Pzo),e(No,ld),e(ld,Bzo),e(ld,WX),e(WX,Nzo),e(ld,Izo),e(ld,HX),e(HX,qzo),e(ld,jzo),e(No,Dzo),e(No,dy),e(dy,Gzo),e(dy,K_e),e(K_e,Ozo),e(dy,Vzo),e(No,Xzo),e(No,ht),M(cy,ht,null),e(ht,zzo),e(ht,Z_e),e(Z_e,Qzo),e(ht,Wzo),e(ht,id),e(id,Hzo),e(id,eue),e(eue,Uzo),e(id,Jzo),e(id,UX),e(UX,Yzo),e(id,Kzo),e(ht,Zzo),M(Xv,ht,null),e(No,eQo),e(No,to),M(fy,to,null),e(to,oQo),e(to,oue),e(oue,rQo),e(to,tQo),e(to,Oa),e(Oa,aQo),e(Oa,rue),e(rue,nQo),e(Oa,sQo),e(Oa,tue),e(tue,lQo),e(Oa,iQo),e(Oa,aue),e(aue,dQo),e(Oa,cQo),e(to,fQo),e(to,Z),e(Z,zv),e(zv,nue),e(nue,mQo),e(zv,gQo),e(zv,JX),e(JX,hQo),e(zv,pQo),e(Z,_Qo),e(Z,Qv),e(Qv,sue),e(sue,uQo),e(Qv,bQo),e(Qv,YX),e(YX,vQo),e(Qv,FQo),e(Z,TQo),e(Z,Wv),e(Wv,lue),e(lue,MQo),e(Wv,EQo),e(Wv,KX),e(KX,CQo),e(Wv,wQo),e(Z,AQo),e(Z,Hv),e(Hv,iue),e(iue,LQo),e(Hv,yQo),e(Hv,ZX),e(ZX,xQo),e(Hv,$Qo),e(Z,kQo),e(Z,Uv),e(Uv,due),e(due,SQo),e(Uv,RQo),e(Uv,ez),e(ez,PQo),e(Uv,BQo),e(Z,NQo),e(Z,Jv),e(Jv,cue),e(cue,IQo),e(Jv,qQo),e(Jv,oz),e(oz,jQo),e(Jv,DQo),e(Z,GQo),e(Z,Yv),e(Yv,fue),e(fue,OQo),e(Yv,VQo),e(Yv,rz),e(rz,XQo),e(Yv,zQo),e(Z,QQo),e(Z,Kv),e(Kv,mue),e(mue,WQo),e(Kv,HQo),e(Kv,tz),e(tz,UQo),e(Kv,JQo),e(Z,YQo),e(Z,Zv),e(Zv,gue),e(gue,KQo),e(Zv,ZQo),e(Zv,az),e(az,eWo),e(Zv,oWo),e(Z,rWo),e(Z,eF),e(eF,hue),e(hue,tWo),e(eF,aWo),e(eF,nz),e(nz,nWo),e(eF,sWo),e(Z,lWo),e(Z,oF),e(oF,pue),e(pue,iWo),e(oF,dWo),e(oF,sz),e(sz,cWo),e(oF,fWo),e(Z,mWo),e(Z,rF),e(rF,_ue),e(_ue,gWo),e(rF,hWo),e(rF,lz),e(lz,pWo),e(rF,_Wo),e(Z,uWo),e(Z,tF),e(tF,uue),e(uue,bWo),e(tF,vWo),e(tF,iz),e(iz,FWo),e(tF,TWo),e(Z,MWo),e(Z,aF),e(aF,bue),e(bue,EWo),e(aF,CWo),e(aF,dz),e(dz,wWo),e(aF,AWo),e(Z,LWo),e(Z,nF),e(nF,vue),e(vue,yWo),e(nF,xWo),e(nF,cz),e(cz,$Wo),e(nF,kWo),e(Z,SWo),e(Z,sF),e(sF,Fue),e(Fue,RWo),e(sF,PWo),e(sF,fz),e(fz,BWo),e(sF,NWo),e(Z,IWo),e(Z,lF),e(lF,Tue),e(Tue,qWo),e(lF,jWo),e(lF,mz),e(mz,DWo),e(lF,GWo),e(Z,OWo),e(Z,iF),e(iF,Mue),e(Mue,VWo),e(iF,XWo),e(iF,gz),e(gz,zWo),e(iF,QWo),e(Z,WWo),e(Z,dF),e(dF,Eue),e(Eue,HWo),e(dF,UWo),e(dF,hz),e(hz,JWo),e(dF,YWo),e(Z,KWo),e(Z,cF),e(cF,Cue),e(Cue,ZWo),e(cF,eHo),e(cF,pz),e(pz,oHo),e(cF,rHo),e(Z,tHo),e(Z,fF),e(fF,wue),e(wue,aHo),e(fF,nHo),e(fF,_z),e(_z,sHo),e(fF,lHo),e(Z,iHo),e(Z,mF),e(mF,Aue),e(Aue,dHo),e(mF,cHo),e(mF,uz),e(uz,fHo),e(mF,mHo),e(Z,gHo),e(Z,gF),e(gF,Lue),e(Lue,hHo),e(gF,pHo),e(gF,bz),e(bz,_Ho),e(gF,uHo),e(Z,bHo),e(Z,hF),e(hF,yue),e(yue,vHo),e(hF,FHo),e(hF,vz),e(vz,THo),e(hF,MHo),e(Z,EHo),e(Z,pF),e(pF,xue),e(xue,CHo),e(pF,wHo),e(pF,Fz),e(Fz,AHo),e(pF,LHo),e(Z,yHo),e(Z,_F),e(_F,$ue),e($ue,xHo),e(_F,$Ho),e(_F,Tz),e(Tz,kHo),e(_F,SHo),e(Z,RHo),e(Z,uF),e(uF,kue),e(kue,PHo),e(uF,BHo),e(uF,Mz),e(Mz,NHo),e(uF,IHo),e(Z,qHo),e(Z,bF),e(bF,Sue),e(Sue,jHo),e(bF,DHo),e(bF,Ez),e(Ez,GHo),e(bF,OHo),e(Z,VHo),e(Z,vF),e(vF,Rue),e(Rue,XHo),e(vF,zHo),e(vF,Cz),e(Cz,QHo),e(vF,WHo),e(Z,HHo),e(Z,FF),e(FF,Pue),e(Pue,UHo),e(FF,JHo),e(FF,wz),e(wz,YHo),e(FF,KHo),e(to,ZHo),e(to,TF),e(TF,eUo),e(TF,Bue),e(Bue,oUo),e(TF,rUo),e(TF,Nue),e(Nue,tUo),e(to,aUo),M(MF,to,null),b(f,xXe,u),b(f,dd,u),e(dd,EF),e(EF,Iue),M(my,Iue,null),e(dd,nUo),e(dd,que),e(que,sUo),b(f,$Xe,u),b(f,Io,u),M(gy,Io,null),e(Io,lUo),e(Io,cd),e(cd,iUo),e(cd,Az),e(Az,dUo),e(cd,cUo),e(cd,Lz),e(Lz,fUo),e(cd,mUo),e(Io,gUo),e(Io,hy),e(hy,hUo),e(hy,jue),e(jue,pUo),e(hy,_Uo),e(Io,uUo),e(Io,pt),M(py,pt,null),e(pt,bUo),e(pt,Due),e(Due,vUo),e(pt,FUo),e(pt,fd),e(fd,TUo),e(fd,Gue),e(Gue,MUo),e(fd,EUo),e(fd,yz),e(yz,CUo),e(fd,wUo),e(pt,AUo),M(CF,pt,null),e(Io,LUo),e(Io,ao),M(_y,ao,null),e(ao,yUo),e(ao,Oue),e(Oue,xUo),e(ao,$Uo),e(ao,Va),e(Va,kUo),e(Va,Vue),e(Vue,SUo),e(Va,RUo),e(Va,Xue),e(Xue,PUo),e(Va,BUo),e(Va,zue),e(zue,NUo),e(Va,IUo),e(ao,qUo),e(ao,qo),e(qo,wF),e(wF,Que),e(Que,jUo),e(wF,DUo),e(wF,xz),e(xz,GUo),e(wF,OUo),e(qo,VUo),e(qo,AF),e(AF,Wue),e(Wue,XUo),e(AF,zUo),e(AF,$z),e($z,QUo),e(AF,WUo),e(qo,HUo),e(qo,LF),e(LF,Hue),e(Hue,UUo),e(LF,JUo),e(LF,kz),e(kz,YUo),e(LF,KUo),e(qo,ZUo),e(qo,yF),e(yF,Uue),e(Uue,eJo),e(yF,oJo),e(yF,Sz),e(Sz,rJo),e(yF,tJo),e(qo,aJo),e(qo,xF),e(xF,Jue),e(Jue,nJo),e(xF,sJo),e(xF,Rz),e(Rz,lJo),e(xF,iJo),e(qo,dJo),e(qo,$F),e($F,Yue),e(Yue,cJo),e($F,fJo),e($F,Pz),e(Pz,mJo),e($F,gJo),e(ao,hJo),e(ao,kF),e(kF,pJo),e(kF,Kue),e(Kue,_Jo),e(kF,uJo),e(kF,Zue),e(Zue,bJo),e(ao,vJo),M(SF,ao,null),b(f,kXe,u),b(f,md,u),e(md,RF),e(RF,e1e),M(uy,e1e,null),e(md,FJo),e(md,o1e),e(o1e,TJo),b(f,SXe,u),b(f,jo,u),M(by,jo,null),e(jo,MJo),e(jo,gd),e(gd,EJo),e(gd,Bz),e(Bz,CJo),e(gd,wJo),e(gd,Nz),e(Nz,AJo),e(gd,LJo),e(jo,yJo),e(jo,vy),e(vy,xJo),e(vy,r1e),e(r1e,$Jo),e(vy,kJo),e(jo,SJo),e(jo,_t),M(Fy,_t,null),e(_t,RJo),e(_t,t1e),e(t1e,PJo),e(_t,BJo),e(_t,hd),e(hd,NJo),e(hd,a1e),e(a1e,IJo),e(hd,qJo),e(hd,Iz),e(Iz,jJo),e(hd,DJo),e(_t,GJo),M(PF,_t,null),e(jo,OJo),e(jo,no),M(Ty,no,null),e(no,VJo),e(no,n1e),e(n1e,XJo),e(no,zJo),e(no,Xa),e(Xa,QJo),e(Xa,s1e),e(s1e,WJo),e(Xa,HJo),e(Xa,l1e),e(l1e,UJo),e(Xa,JJo),e(Xa,i1e),e(i1e,YJo),e(Xa,KJo),e(no,ZJo),e(no,U),e(U,BF),e(BF,d1e),e(d1e,eYo),e(BF,oYo),e(BF,qz),e(qz,rYo),e(BF,tYo),e(U,aYo),e(U,NF),e(NF,c1e),e(c1e,nYo),e(NF,sYo),e(NF,jz),e(jz,lYo),e(NF,iYo),e(U,dYo),e(U,IF),e(IF,f1e),e(f1e,cYo),e(IF,fYo),e(IF,Dz),e(Dz,mYo),e(IF,gYo),e(U,hYo),e(U,qF),e(qF,m1e),e(m1e,pYo),e(qF,_Yo),e(qF,Gz),e(Gz,uYo),e(qF,bYo),e(U,vYo),e(U,jF),e(jF,g1e),e(g1e,FYo),e(jF,TYo),e(jF,Oz),e(Oz,MYo),e(jF,EYo),e(U,CYo),e(U,DF),e(DF,h1e),e(h1e,wYo),e(DF,AYo),e(DF,Vz),e(Vz,LYo),e(DF,yYo),e(U,xYo),e(U,GF),e(GF,p1e),e(p1e,$Yo),e(GF,kYo),e(GF,Xz),e(Xz,SYo),e(GF,RYo),e(U,PYo),e(U,OF),e(OF,_1e),e(_1e,BYo),e(OF,NYo),e(OF,zz),e(zz,IYo),e(OF,qYo),e(U,jYo),e(U,VF),e(VF,u1e),e(u1e,DYo),e(VF,GYo),e(VF,Qz),e(Qz,OYo),e(VF,VYo),e(U,XYo),e(U,XF),e(XF,b1e),e(b1e,zYo),e(XF,QYo),e(XF,Wz),e(Wz,WYo),e(XF,HYo),e(U,UYo),e(U,zF),e(zF,v1e),e(v1e,JYo),e(zF,YYo),e(zF,Hz),e(Hz,KYo),e(zF,ZYo),e(U,eKo),e(U,QF),e(QF,F1e),e(F1e,oKo),e(QF,rKo),e(QF,Uz),e(Uz,tKo),e(QF,aKo),e(U,nKo),e(U,WF),e(WF,T1e),e(T1e,sKo),e(WF,lKo),e(WF,Jz),e(Jz,iKo),e(WF,dKo),e(U,cKo),e(U,HF),e(HF,M1e),e(M1e,fKo),e(HF,mKo),e(HF,Yz),e(Yz,gKo),e(HF,hKo),e(U,pKo),e(U,UF),e(UF,E1e),e(E1e,_Ko),e(UF,uKo),e(UF,Kz),e(Kz,bKo),e(UF,vKo),e(U,FKo),e(U,JF),e(JF,C1e),e(C1e,TKo),e(JF,MKo),e(JF,Zz),e(Zz,EKo),e(JF,CKo),e(U,wKo),e(U,YF),e(YF,w1e),e(w1e,AKo),e(YF,LKo),e(YF,eQ),e(eQ,yKo),e(YF,xKo),e(U,$Ko),e(U,KF),e(KF,A1e),e(A1e,kKo),e(KF,SKo),e(KF,oQ),e(oQ,RKo),e(KF,PKo),e(U,BKo),e(U,ZF),e(ZF,L1e),e(L1e,NKo),e(ZF,IKo),e(ZF,rQ),e(rQ,qKo),e(ZF,jKo),e(U,DKo),e(U,e6),e(e6,y1e),e(y1e,GKo),e(e6,OKo),e(e6,tQ),e(tQ,VKo),e(e6,XKo),e(U,zKo),e(U,o6),e(o6,x1e),e(x1e,QKo),e(o6,WKo),e(o6,aQ),e(aQ,HKo),e(o6,UKo),e(U,JKo),e(U,r6),e(r6,$1e),e($1e,YKo),e(r6,KKo),e(r6,nQ),e(nQ,ZKo),e(r6,eZo),e(U,oZo),e(U,t6),e(t6,k1e),e(k1e,rZo),e(t6,tZo),e(t6,sQ),e(sQ,aZo),e(t6,nZo),e(U,sZo),e(U,a6),e(a6,S1e),e(S1e,lZo),e(a6,iZo),e(a6,lQ),e(lQ,dZo),e(a6,cZo),e(U,fZo),e(U,n6),e(n6,R1e),e(R1e,mZo),e(n6,gZo),e(n6,iQ),e(iQ,hZo),e(n6,pZo),e(U,_Zo),e(U,s6),e(s6,P1e),e(P1e,uZo),e(s6,bZo),e(s6,dQ),e(dQ,vZo),e(s6,FZo),e(U,TZo),e(U,l6),e(l6,B1e),e(B1e,MZo),e(l6,EZo),e(l6,cQ),e(cQ,CZo),e(l6,wZo),e(U,AZo),e(U,i6),e(i6,N1e),e(N1e,LZo),e(i6,yZo),e(i6,fQ),e(fQ,xZo),e(i6,$Zo),e(U,kZo),e(U,d6),e(d6,I1e),e(I1e,SZo),e(d6,RZo),e(d6,mQ),e(mQ,PZo),e(d6,BZo),e(U,NZo),e(U,c6),e(c6,q1e),e(q1e,IZo),e(c6,qZo),e(c6,gQ),e(gQ,jZo),e(c6,DZo),e(U,GZo),e(U,f6),e(f6,j1e),e(j1e,OZo),e(f6,VZo),e(f6,hQ),e(hQ,XZo),e(f6,zZo),e(U,QZo),e(U,m6),e(m6,D1e),e(D1e,WZo),e(m6,HZo),e(m6,pQ),e(pQ,UZo),e(m6,JZo),e(U,YZo),e(U,g6),e(g6,G1e),e(G1e,KZo),e(g6,ZZo),e(g6,_Q),e(_Q,eer),e(g6,oer),e(U,rer),e(U,h6),e(h6,O1e),e(O1e,ter),e(h6,aer),e(h6,uQ),e(uQ,ner),e(h6,ser),e(U,ler),e(U,p6),e(p6,V1e),e(V1e,ier),e(p6,der),e(p6,bQ),e(bQ,cer),e(p6,fer),e(U,mer),e(U,_6),e(_6,X1e),e(X1e,ger),e(_6,her),e(_6,vQ),e(vQ,per),e(_6,_er),e(no,uer),e(no,u6),e(u6,ber),e(u6,z1e),e(z1e,ver),e(u6,Fer),e(u6,Q1e),e(Q1e,Ter),e(no,Mer),M(b6,no,null),b(f,RXe,u),b(f,pd,u),e(pd,v6),e(v6,W1e),M(My,W1e,null),e(pd,Eer),e(pd,H1e),e(H1e,Cer),b(f,PXe,u),b(f,Do,u),M(Ey,Do,null),e(Do,wer),e(Do,_d),e(_d,Aer),e(_d,FQ),e(FQ,Ler),e(_d,yer),e(_d,TQ),e(TQ,xer),e(_d,$er),e(Do,ker),e(Do,Cy),e(Cy,Ser),e(Cy,U1e),e(U1e,Rer),e(Cy,Per),e(Do,Ber),e(Do,ut),M(wy,ut,null),e(ut,Ner),e(ut,J1e),e(J1e,Ier),e(ut,qer),e(ut,ud),e(ud,jer),e(ud,Y1e),e(Y1e,Der),e(ud,Ger),e(ud,MQ),e(MQ,Oer),e(ud,Ver),e(ut,Xer),M(F6,ut,null),e(Do,zer),e(Do,so),M(Ay,so,null),e(so,Qer),e(so,K1e),e(K1e,Wer),e(so,Her),e(so,za),e(za,Uer),e(za,Z1e),e(Z1e,Jer),e(za,Yer),e(za,e2e),e(e2e,Ker),e(za,Zer),e(za,o2e),e(o2e,eor),e(za,oor),e(so,ror),e(so,V),e(V,T6),e(T6,r2e),e(r2e,tor),e(T6,aor),e(T6,EQ),e(EQ,nor),e(T6,sor),e(V,lor),e(V,M6),e(M6,t2e),e(t2e,ior),e(M6,dor),e(M6,CQ),e(CQ,cor),e(M6,mor),e(V,gor),e(V,E6),e(E6,a2e),e(a2e,hor),e(E6,por),e(E6,wQ),e(wQ,_or),e(E6,uor),e(V,bor),e(V,C6),e(C6,n2e),e(n2e,vor),e(C6,For),e(C6,AQ),e(AQ,Tor),e(C6,Mor),e(V,Eor),e(V,w6),e(w6,s2e),e(s2e,Cor),e(w6,wor),e(w6,LQ),e(LQ,Aor),e(w6,Lor),e(V,yor),e(V,A6),e(A6,l2e),e(l2e,xor),e(A6,$or),e(A6,yQ),e(yQ,kor),e(A6,Sor),e(V,Ror),e(V,L6),e(L6,i2e),e(i2e,Por),e(L6,Bor),e(L6,xQ),e(xQ,Nor),e(L6,Ior),e(V,qor),e(V,y6),e(y6,d2e),e(d2e,jor),e(y6,Dor),e(y6,$Q),e($Q,Gor),e(y6,Oor),e(V,Vor),e(V,x6),e(x6,c2e),e(c2e,Xor),e(x6,zor),e(x6,kQ),e(kQ,Qor),e(x6,Wor),e(V,Hor),e(V,$6),e($6,f2e),e(f2e,Uor),e($6,Jor),e($6,SQ),e(SQ,Yor),e($6,Kor),e(V,Zor),e(V,k6),e(k6,m2e),e(m2e,err),e(k6,orr),e(k6,RQ),e(RQ,rrr),e(k6,trr),e(V,arr),e(V,S6),e(S6,g2e),e(g2e,nrr),e(S6,srr),e(S6,PQ),e(PQ,lrr),e(S6,irr),e(V,drr),e(V,R6),e(R6,h2e),e(h2e,crr),e(R6,frr),e(R6,BQ),e(BQ,mrr),e(R6,grr),e(V,hrr),e(V,P6),e(P6,p2e),e(p2e,prr),e(P6,_rr),e(P6,NQ),e(NQ,urr),e(P6,brr),e(V,vrr),e(V,B6),e(B6,_2e),e(_2e,Frr),e(B6,Trr),e(B6,IQ),e(IQ,Mrr),e(B6,Err),e(V,Crr),e(V,N6),e(N6,u2e),e(u2e,wrr),e(N6,Arr),e(N6,qQ),e(qQ,Lrr),e(N6,yrr),e(V,xrr),e(V,I6),e(I6,b2e),e(b2e,$rr),e(I6,krr),e(I6,jQ),e(jQ,Srr),e(I6,Rrr),e(V,Prr),e(V,q6),e(q6,v2e),e(v2e,Brr),e(q6,Nrr),e(q6,DQ),e(DQ,Irr),e(q6,qrr),e(V,jrr),e(V,j6),e(j6,F2e),e(F2e,Drr),e(j6,Grr),e(j6,GQ),e(GQ,Orr),e(j6,Vrr),e(V,Xrr),e(V,D6),e(D6,T2e),e(T2e,zrr),e(D6,Qrr),e(D6,OQ),e(OQ,Wrr),e(D6,Hrr),e(V,Urr),e(V,G6),e(G6,M2e),e(M2e,Jrr),e(G6,Yrr),e(G6,VQ),e(VQ,Krr),e(G6,Zrr),e(V,etr),e(V,O6),e(O6,E2e),e(E2e,otr),e(O6,rtr),e(O6,XQ),e(XQ,ttr),e(O6,atr),e(V,ntr),e(V,V6),e(V6,C2e),e(C2e,str),e(V6,ltr),e(V6,zQ),e(zQ,itr),e(V6,dtr),e(V,ctr),e(V,X6),e(X6,w2e),e(w2e,ftr),e(X6,mtr),e(X6,QQ),e(QQ,gtr),e(X6,htr),e(V,ptr),e(V,z6),e(z6,A2e),e(A2e,_tr),e(z6,utr),e(z6,WQ),e(WQ,btr),e(z6,vtr),e(V,Ftr),e(V,Q6),e(Q6,L2e),e(L2e,Ttr),e(Q6,Mtr),e(Q6,HQ),e(HQ,Etr),e(Q6,Ctr),e(V,wtr),e(V,W6),e(W6,y2e),e(y2e,Atr),e(W6,Ltr),e(W6,UQ),e(UQ,ytr),e(W6,xtr),e(V,$tr),e(V,H6),e(H6,x2e),e(x2e,ktr),e(H6,Str),e(H6,JQ),e(JQ,Rtr),e(H6,Ptr),e(V,Btr),e(V,U6),e(U6,$2e),e($2e,Ntr),e(U6,Itr),e(U6,YQ),e(YQ,qtr),e(U6,jtr),e(V,Dtr),e(V,J6),e(J6,k2e),e(k2e,Gtr),e(J6,Otr),e(J6,KQ),e(KQ,Vtr),e(J6,Xtr),e(V,ztr),e(V,Y6),e(Y6,S2e),e(S2e,Qtr),e(Y6,Wtr),e(Y6,ZQ),e(ZQ,Htr),e(Y6,Utr),e(V,Jtr),e(V,K6),e(K6,R2e),e(R2e,Ytr),e(K6,Ktr),e(K6,eW),e(eW,Ztr),e(K6,ear),e(V,oar),e(V,Z6),e(Z6,P2e),e(P2e,rar),e(Z6,tar),e(Z6,oW),e(oW,aar),e(Z6,nar),e(V,sar),e(V,eT),e(eT,B2e),e(B2e,lar),e(eT,iar),e(eT,rW),e(rW,dar),e(eT,car),e(V,far),e(V,oT),e(oT,N2e),e(N2e,mar),e(oT,gar),e(oT,tW),e(tW,har),e(oT,par),e(V,_ar),e(V,rT),e(rT,I2e),e(I2e,uar),e(rT,bar),e(rT,aW),e(aW,Far),e(rT,Tar),e(V,Mar),e(V,tT),e(tT,q2e),e(q2e,Ear),e(tT,Car),e(tT,nW),e(nW,war),e(tT,Aar),e(V,Lar),e(V,aT),e(aT,j2e),e(j2e,yar),e(aT,xar),e(aT,sW),e(sW,$ar),e(aT,kar),e(V,Sar),e(V,nT),e(nT,D2e),e(D2e,Rar),e(nT,Par),e(nT,lW),e(lW,Bar),e(nT,Nar),e(V,Iar),e(V,sT),e(sT,G2e),e(G2e,qar),e(sT,jar),e(sT,iW),e(iW,Dar),e(sT,Gar),e(V,Oar),e(V,lT),e(lT,O2e),e(O2e,Var),e(lT,Xar),e(lT,dW),e(dW,zar),e(lT,Qar),e(V,War),e(V,iT),e(iT,V2e),e(V2e,Har),e(iT,Uar),e(iT,cW),e(cW,Jar),e(iT,Yar),e(so,Kar),e(so,dT),e(dT,Zar),e(dT,X2e),e(X2e,enr),e(dT,onr),e(dT,z2e),e(z2e,rnr),e(so,tnr),M(cT,so,null),b(f,BXe,u),b(f,bd,u),e(bd,fT),e(fT,Q2e),M(Ly,Q2e,null),e(bd,anr),e(bd,W2e),e(W2e,nnr),b(f,NXe,u),b(f,Go,u),M(yy,Go,null),e(Go,snr),e(Go,vd),e(vd,lnr),e(vd,fW),e(fW,inr),e(vd,dnr),e(vd,mW),e(mW,cnr),e(vd,fnr),e(Go,mnr),e(Go,xy),e(xy,gnr),e(xy,H2e),e(H2e,hnr),e(xy,pnr),e(Go,_nr),e(Go,bt),M($y,bt,null),e(bt,unr),e(bt,U2e),e(U2e,bnr),e(bt,vnr),e(bt,Fd),e(Fd,Fnr),e(Fd,J2e),e(J2e,Tnr),e(Fd,Mnr),e(Fd,gW),e(gW,Enr),e(Fd,Cnr),e(bt,wnr),M(mT,bt,null),e(Go,Anr),e(Go,lo),M(ky,lo,null),e(lo,Lnr),e(lo,Y2e),e(Y2e,ynr),e(lo,xnr),e(lo,Qa),e(Qa,$nr),e(Qa,K2e),e(K2e,knr),e(Qa,Snr),e(Qa,Z2e),e(Z2e,Rnr),e(Qa,Pnr),e(Qa,ebe),e(ebe,Bnr),e(Qa,Nnr),e(lo,Inr),e(lo,obe),e(obe,gT),e(gT,rbe),e(rbe,qnr),e(gT,jnr),e(gT,hW),e(hW,Dnr),e(gT,Gnr),e(lo,Onr),e(lo,hT),e(hT,Vnr),e(hT,tbe),e(tbe,Xnr),e(hT,znr),e(hT,abe),e(abe,Qnr),e(lo,Wnr),M(pT,lo,null),b(f,IXe,u),b(f,Td,u),e(Td,_T),e(_T,nbe),M(Sy,nbe,null),e(Td,Hnr),e(Td,sbe),e(sbe,Unr),b(f,qXe,u),b(f,Oo,u),M(Ry,Oo,null),e(Oo,Jnr),e(Oo,Md),e(Md,Ynr),e(Md,pW),e(pW,Knr),e(Md,Znr),e(Md,_W),e(_W,esr),e(Md,osr),e(Oo,rsr),e(Oo,Py),e(Py,tsr),e(Py,lbe),e(lbe,asr),e(Py,nsr),e(Oo,ssr),e(Oo,vt),M(By,vt,null),e(vt,lsr),e(vt,ibe),e(ibe,isr),e(vt,dsr),e(vt,Ed),e(Ed,csr),e(Ed,dbe),e(dbe,fsr),e(Ed,msr),e(Ed,uW),e(uW,gsr),e(Ed,hsr),e(vt,psr),M(uT,vt,null),e(Oo,_sr),e(Oo,io),M(Ny,io,null),e(io,usr),e(io,cbe),e(cbe,bsr),e(io,vsr),e(io,Wa),e(Wa,Fsr),e(Wa,fbe),e(fbe,Tsr),e(Wa,Msr),e(Wa,mbe),e(mbe,Esr),e(Wa,Csr),e(Wa,gbe),e(gbe,wsr),e(Wa,Asr),e(io,Lsr),e(io,ve),e(ve,bT),e(bT,hbe),e(hbe,ysr),e(bT,xsr),e(bT,bW),e(bW,$sr),e(bT,ksr),e(ve,Ssr),e(ve,vT),e(vT,pbe),e(pbe,Rsr),e(vT,Psr),e(vT,vW),e(vW,Bsr),e(vT,Nsr),e(ve,Isr),e(ve,FT),e(FT,_be),e(_be,qsr),e(FT,jsr),e(FT,FW),e(FW,Dsr),e(FT,Gsr),e(ve,Osr),e(ve,TT),e(TT,ube),e(ube,Vsr),e(TT,Xsr),e(TT,TW),e(TW,zsr),e(TT,Qsr),e(ve,Wsr),e(ve,Us),e(Us,bbe),e(bbe,Hsr),e(Us,Usr),e(Us,MW),e(MW,Jsr),e(Us,Ysr),e(Us,EW),e(EW,Ksr),e(Us,Zsr),e(ve,elr),e(ve,MT),e(MT,vbe),e(vbe,olr),e(MT,rlr),e(MT,CW),e(CW,tlr),e(MT,alr),e(ve,nlr),e(ve,Js),e(Js,Fbe),e(Fbe,slr),e(Js,llr),e(Js,wW),e(wW,ilr),e(Js,dlr),e(Js,AW),e(AW,clr),e(Js,flr),e(ve,mlr),e(ve,ET),e(ET,Tbe),e(Tbe,glr),e(ET,hlr),e(ET,LW),e(LW,plr),e(ET,_lr),e(ve,ulr),e(ve,Ft),e(Ft,Mbe),e(Mbe,blr),e(Ft,vlr),e(Ft,yW),e(yW,Flr),e(Ft,Tlr),e(Ft,xW),e(xW,Mlr),e(Ft,Elr),e(Ft,$W),e($W,Clr),e(Ft,wlr),e(ve,Alr),e(ve,CT),e(CT,Ebe),e(Ebe,Llr),e(CT,ylr),e(CT,kW),e(kW,xlr),e(CT,$lr),e(ve,klr),e(ve,wT),e(wT,Cbe),e(Cbe,Slr),e(wT,Rlr),e(wT,SW),e(SW,Plr),e(wT,Blr),e(ve,Nlr),e(ve,AT),e(AT,wbe),e(wbe,Ilr),e(AT,qlr),e(AT,RW),e(RW,jlr),e(AT,Dlr),e(ve,Glr),e(ve,LT),e(LT,Abe),e(Abe,Olr),e(LT,Vlr),e(LT,PW),e(PW,Xlr),e(LT,zlr),e(ve,Qlr),e(ve,yT),e(yT,Lbe),e(Lbe,Wlr),e(yT,Hlr),e(yT,BW),e(BW,Ulr),e(yT,Jlr),e(ve,Ylr),e(ve,xT),e(xT,ybe),e(ybe,Klr),e(xT,Zlr),e(xT,NW),e(NW,eir),e(xT,oir),e(ve,rir),e(ve,$T),e($T,xbe),e(xbe,tir),e($T,air),e($T,IW),e(IW,nir),e($T,sir),e(io,lir),e(io,kT),e(kT,iir),e(kT,$be),e($be,dir),e(kT,cir),e(kT,kbe),e(kbe,fir),e(io,mir),M(ST,io,null),b(f,jXe,u),b(f,Cd,u),e(Cd,RT),e(RT,Sbe),M(Iy,Sbe,null),e(Cd,gir),e(Cd,Rbe),e(Rbe,hir),b(f,DXe,u),b(f,Vo,u),M(qy,Vo,null),e(Vo,pir),e(Vo,wd),e(wd,_ir),e(wd,qW),e(qW,uir),e(wd,bir),e(wd,jW),e(jW,vir),e(wd,Fir),e(Vo,Tir),e(Vo,jy),e(jy,Mir),e(jy,Pbe),e(Pbe,Eir),e(jy,Cir),e(Vo,wir),e(Vo,Tt),M(Dy,Tt,null),e(Tt,Air),e(Tt,Bbe),e(Bbe,Lir),e(Tt,yir),e(Tt,Ad),e(Ad,xir),e(Ad,Nbe),e(Nbe,$ir),e(Ad,kir),e(Ad,DW),e(DW,Sir),e(Ad,Rir),e(Tt,Pir),M(PT,Tt,null),e(Vo,Bir),e(Vo,co),M(Gy,co,null),e(co,Nir),e(co,Ibe),e(Ibe,Iir),e(co,qir),e(co,Ha),e(Ha,jir),e(Ha,qbe),e(qbe,Dir),e(Ha,Gir),e(Ha,jbe),e(jbe,Oir),e(Ha,Vir),e(Ha,Dbe),e(Dbe,Xir),e(Ha,zir),e(co,Qir),e(co,Gbe),e(Gbe,BT),e(BT,Obe),e(Obe,Wir),e(BT,Hir),e(BT,GW),e(GW,Uir),e(BT,Jir),e(co,Yir),e(co,NT),e(NT,Kir),e(NT,Vbe),e(Vbe,Zir),e(NT,edr),e(NT,Xbe),e(Xbe,odr),e(co,rdr),M(IT,co,null),b(f,GXe,u),b(f,Ld,u),e(Ld,qT),e(qT,zbe),M(Oy,zbe,null),e(Ld,tdr),e(Ld,Qbe),e(Qbe,adr),b(f,OXe,u),b(f,Xo,u),M(Vy,Xo,null),e(Xo,ndr),e(Xo,yd),e(yd,sdr),e(yd,OW),e(OW,ldr),e(yd,idr),e(yd,VW),e(VW,ddr),e(yd,cdr),e(Xo,fdr),e(Xo,Xy),e(Xy,mdr),e(Xy,Wbe),e(Wbe,gdr),e(Xy,hdr),e(Xo,pdr),e(Xo,Mt),M(zy,Mt,null),e(Mt,_dr),e(Mt,Hbe),e(Hbe,udr),e(Mt,bdr),e(Mt,xd),e(xd,vdr),e(xd,Ube),e(Ube,Fdr),e(xd,Tdr),e(xd,XW),e(XW,Mdr),e(xd,Edr),e(Mt,Cdr),M(jT,Mt,null),e(Xo,wdr),e(Xo,fo),M(Qy,fo,null),e(fo,Adr),e(fo,Jbe),e(Jbe,Ldr),e(fo,ydr),e(fo,Ua),e(Ua,xdr),e(Ua,Ybe),e(Ybe,$dr),e(Ua,kdr),e(Ua,Kbe),e(Kbe,Sdr),e(Ua,Rdr),e(Ua,Zbe),e(Zbe,Pdr),e(Ua,Bdr),e(fo,Ndr),e(fo,eve),e(eve,DT),e(DT,ove),e(ove,Idr),e(DT,qdr),e(DT,zW),e(zW,jdr),e(DT,Ddr),e(fo,Gdr),e(fo,GT),e(GT,Odr),e(GT,rve),e(rve,Vdr),e(GT,Xdr),e(GT,tve),e(tve,zdr),e(fo,Qdr),M(OT,fo,null),b(f,VXe,u),b(f,$d,u),e($d,VT),e(VT,ave),M(Wy,ave,null),e($d,Wdr),e($d,nve),e(nve,Hdr),b(f,XXe,u),b(f,zo,u),M(Hy,zo,null),e(zo,Udr),e(zo,kd),e(kd,Jdr),e(kd,QW),e(QW,Ydr),e(kd,Kdr),e(kd,WW),e(WW,Zdr),e(kd,ecr),e(zo,ocr),e(zo,Uy),e(Uy,rcr),e(Uy,sve),e(sve,tcr),e(Uy,acr),e(zo,ncr),e(zo,Et),M(Jy,Et,null),e(Et,scr),e(Et,lve),e(lve,lcr),e(Et,icr),e(Et,Sd),e(Sd,dcr),e(Sd,ive),e(ive,ccr),e(Sd,fcr),e(Sd,HW),e(HW,mcr),e(Sd,gcr),e(Et,hcr),M(XT,Et,null),e(zo,pcr),e(zo,mo),M(Yy,mo,null),e(mo,_cr),e(mo,dve),e(dve,ucr),e(mo,bcr),e(mo,Ja),e(Ja,vcr),e(Ja,cve),e(cve,Fcr),e(Ja,Tcr),e(Ja,fve),e(fve,Mcr),e(Ja,Ecr),e(Ja,mve),e(mve,Ccr),e(Ja,wcr),e(mo,Acr),e(mo,Pe),e(Pe,zT),e(zT,gve),e(gve,Lcr),e(zT,ycr),e(zT,UW),e(UW,xcr),e(zT,$cr),e(Pe,kcr),e(Pe,QT),e(QT,hve),e(hve,Scr),e(QT,Rcr),e(QT,JW),e(JW,Pcr),e(QT,Bcr),e(Pe,Ncr),e(Pe,WT),e(WT,pve),e(pve,Icr),e(WT,qcr),e(WT,YW),e(YW,jcr),e(WT,Dcr),e(Pe,Gcr),e(Pe,HT),e(HT,_ve),e(_ve,Ocr),e(HT,Vcr),e(HT,KW),e(KW,Xcr),e(HT,zcr),e(Pe,Qcr),e(Pe,UT),e(UT,uve),e(uve,Wcr),e(UT,Hcr),e(UT,ZW),e(ZW,Ucr),e(UT,Jcr),e(Pe,Ycr),e(Pe,JT),e(JT,bve),e(bve,Kcr),e(JT,Zcr),e(JT,eH),e(eH,efr),e(JT,ofr),e(Pe,rfr),e(Pe,YT),e(YT,vve),e(vve,tfr),e(YT,afr),e(YT,oH),e(oH,nfr),e(YT,sfr),e(Pe,lfr),e(Pe,KT),e(KT,Fve),e(Fve,ifr),e(KT,dfr),e(KT,rH),e(rH,cfr),e(KT,ffr),e(Pe,mfr),e(Pe,ZT),e(ZT,Tve),e(Tve,gfr),e(ZT,hfr),e(ZT,tH),e(tH,pfr),e(ZT,_fr),e(mo,ufr),e(mo,e8),e(e8,bfr),e(e8,Mve),e(Mve,vfr),e(e8,Ffr),e(e8,Eve),e(Eve,Tfr),e(mo,Mfr),M(o8,mo,null),b(f,zXe,u),b(f,Rd,u),e(Rd,r8),e(r8,Cve),M(Ky,Cve,null),e(Rd,Efr),e(Rd,wve),e(wve,Cfr),b(f,QXe,u),b(f,Qo,u),M(Zy,Qo,null),e(Qo,wfr),e(Qo,Pd),e(Pd,Afr),e(Pd,aH),e(aH,Lfr),e(Pd,yfr),e(Pd,nH),e(nH,xfr),e(Pd,$fr),e(Qo,kfr),e(Qo,e9),e(e9,Sfr),e(e9,Ave),e(Ave,Rfr),e(e9,Pfr),e(Qo,Bfr),e(Qo,Ct),M(o9,Ct,null),e(Ct,Nfr),e(Ct,Lve),e(Lve,Ifr),e(Ct,qfr),e(Ct,Bd),e(Bd,jfr),e(Bd,yve),e(yve,Dfr),e(Bd,Gfr),e(Bd,sH),e(sH,Ofr),e(Bd,Vfr),e(Ct,Xfr),M(t8,Ct,null),e(Qo,zfr),e(Qo,go),M(r9,go,null),e(go,Qfr),e(go,xve),e(xve,Wfr),e(go,Hfr),e(go,Ya),e(Ya,Ufr),e(Ya,$ve),e($ve,Jfr),e(Ya,Yfr),e(Ya,kve),e(kve,Kfr),e(Ya,Zfr),e(Ya,Sve),e(Sve,emr),e(Ya,omr),e(go,rmr),e(go,rt),e(rt,a8),e(a8,Rve),e(Rve,tmr),e(a8,amr),e(a8,lH),e(lH,nmr),e(a8,smr),e(rt,lmr),e(rt,n8),e(n8,Pve),e(Pve,imr),e(n8,dmr),e(n8,iH),e(iH,cmr),e(n8,fmr),e(rt,mmr),e(rt,s8),e(s8,Bve),e(Bve,gmr),e(s8,hmr),e(s8,dH),e(dH,pmr),e(s8,_mr),e(rt,umr),e(rt,l8),e(l8,Nve),e(Nve,bmr),e(l8,vmr),e(l8,cH),e(cH,Fmr),e(l8,Tmr),e(rt,Mmr),e(rt,i8),e(i8,Ive),e(Ive,Emr),e(i8,Cmr),e(i8,fH),e(fH,wmr),e(i8,Amr),e(go,Lmr),e(go,d8),e(d8,ymr),e(d8,qve),e(qve,xmr),e(d8,$mr),e(d8,jve),e(jve,kmr),e(go,Smr),M(c8,go,null),b(f,WXe,u),b(f,Nd,u),e(Nd,f8),e(f8,Dve),M(t9,Dve,null),e(Nd,Rmr),e(Nd,Gve),e(Gve,Pmr),b(f,HXe,u),b(f,Wo,u),M(a9,Wo,null),e(Wo,Bmr),e(Wo,Id),e(Id,Nmr),e(Id,mH),e(mH,Imr),e(Id,qmr),e(Id,gH),e(gH,jmr),e(Id,Dmr),e(Wo,Gmr),e(Wo,n9),e(n9,Omr),e(n9,Ove),e(Ove,Vmr),e(n9,Xmr),e(Wo,zmr),e(Wo,wt),M(s9,wt,null),e(wt,Qmr),e(wt,Vve),e(Vve,Wmr),e(wt,Hmr),e(wt,qd),e(qd,Umr),e(qd,Xve),e(Xve,Jmr),e(qd,Ymr),e(qd,hH),e(hH,Kmr),e(qd,Zmr),e(wt,egr),M(m8,wt,null),e(Wo,ogr),e(Wo,ho),M(l9,ho,null),e(ho,rgr),e(ho,zve),e(zve,tgr),e(ho,agr),e(ho,Ka),e(Ka,ngr),e(Ka,Qve),e(Qve,sgr),e(Ka,lgr),e(Ka,Wve),e(Wve,igr),e(Ka,dgr),e(Ka,Hve),e(Hve,cgr),e(Ka,fgr),e(ho,mgr),e(ho,Le),e(Le,g8),e(g8,Uve),e(Uve,ggr),e(g8,hgr),e(g8,pH),e(pH,pgr),e(g8,_gr),e(Le,ugr),e(Le,h8),e(h8,Jve),e(Jve,bgr),e(h8,vgr),e(h8,_H),e(_H,Fgr),e(h8,Tgr),e(Le,Mgr),e(Le,p8),e(p8,Yve),e(Yve,Egr),e(p8,Cgr),e(p8,uH),e(uH,wgr),e(p8,Agr),e(Le,Lgr),e(Le,_8),e(_8,Kve),e(Kve,ygr),e(_8,xgr),e(_8,bH),e(bH,$gr),e(_8,kgr),e(Le,Sgr),e(Le,u8),e(u8,Zve),e(Zve,Rgr),e(u8,Pgr),e(u8,vH),e(vH,Bgr),e(u8,Ngr),e(Le,Igr),e(Le,b8),e(b8,eFe),e(eFe,qgr),e(b8,jgr),e(b8,FH),e(FH,Dgr),e(b8,Ggr),e(Le,Ogr),e(Le,v8),e(v8,oFe),e(oFe,Vgr),e(v8,Xgr),e(v8,TH),e(TH,zgr),e(v8,Qgr),e(Le,Wgr),e(Le,F8),e(F8,rFe),e(rFe,Hgr),e(F8,Ugr),e(F8,MH),e(MH,Jgr),e(F8,Ygr),e(Le,Kgr),e(Le,T8),e(T8,tFe),e(tFe,Zgr),e(T8,ehr),e(T8,EH),e(EH,ohr),e(T8,rhr),e(Le,thr),e(Le,M8),e(M8,aFe),e(aFe,ahr),e(M8,nhr),e(M8,CH),e(CH,shr),e(M8,lhr),e(ho,ihr),e(ho,E8),e(E8,dhr),e(E8,nFe),e(nFe,chr),e(E8,fhr),e(E8,sFe),e(sFe,mhr),e(ho,ghr),M(C8,ho,null),b(f,UXe,u),b(f,jd,u),e(jd,w8),e(w8,lFe),M(i9,lFe,null),e(jd,hhr),e(jd,iFe),e(iFe,phr),b(f,JXe,u),b(f,Ho,u),M(d9,Ho,null),e(Ho,_hr),e(Ho,Dd),e(Dd,uhr),e(Dd,wH),e(wH,bhr),e(Dd,vhr),e(Dd,AH),e(AH,Fhr),e(Dd,Thr),e(Ho,Mhr),e(Ho,c9),e(c9,Ehr),e(c9,dFe),e(dFe,Chr),e(c9,whr),e(Ho,Ahr),e(Ho,At),M(f9,At,null),e(At,Lhr),e(At,cFe),e(cFe,yhr),e(At,xhr),e(At,Gd),e(Gd,$hr),e(Gd,fFe),e(fFe,khr),e(Gd,Shr),e(Gd,LH),e(LH,Rhr),e(Gd,Phr),e(At,Bhr),M(A8,At,null),e(Ho,Nhr),e(Ho,po),M(m9,po,null),e(po,Ihr),e(po,mFe),e(mFe,qhr),e(po,jhr),e(po,Za),e(Za,Dhr),e(Za,gFe),e(gFe,Ghr),e(Za,Ohr),e(Za,hFe),e(hFe,Vhr),e(Za,Xhr),e(Za,pFe),e(pFe,zhr),e(Za,Qhr),e(po,Whr),e(po,g9),e(g9,L8),e(L8,_Fe),e(_Fe,Hhr),e(L8,Uhr),e(L8,yH),e(yH,Jhr),e(L8,Yhr),e(g9,Khr),e(g9,y8),e(y8,uFe),e(uFe,Zhr),e(y8,epr),e(y8,xH),e(xH,opr),e(y8,rpr),e(po,tpr),e(po,x8),e(x8,apr),e(x8,bFe),e(bFe,npr),e(x8,spr),e(x8,vFe),e(vFe,lpr),e(po,ipr),M($8,po,null),b(f,YXe,u),b(f,Od,u),e(Od,k8),e(k8,FFe),M(h9,FFe,null),e(Od,dpr),e(Od,TFe),e(TFe,cpr),b(f,KXe,u),b(f,Uo,u),M(p9,Uo,null),e(Uo,fpr),e(Uo,Vd),e(Vd,mpr),e(Vd,$H),e($H,gpr),e(Vd,hpr),e(Vd,kH),e(kH,ppr),e(Vd,_pr),e(Uo,upr),e(Uo,_9),e(_9,bpr),e(_9,MFe),e(MFe,vpr),e(_9,Fpr),e(Uo,Tpr),e(Uo,Lt),M(u9,Lt,null),e(Lt,Mpr),e(Lt,EFe),e(EFe,Epr),e(Lt,Cpr),e(Lt,Xd),e(Xd,wpr),e(Xd,CFe),e(CFe,Apr),e(Xd,Lpr),e(Xd,SH),e(SH,ypr),e(Xd,xpr),e(Lt,$pr),M(S8,Lt,null),e(Uo,kpr),e(Uo,_o),M(b9,_o,null),e(_o,Spr),e(_o,wFe),e(wFe,Rpr),e(_o,Ppr),e(_o,en),e(en,Bpr),e(en,AFe),e(AFe,Npr),e(en,Ipr),e(en,LFe),e(LFe,qpr),e(en,jpr),e(en,yFe),e(yFe,Dpr),e(en,Gpr),e(_o,Opr),e(_o,tt),e(tt,R8),e(R8,xFe),e(xFe,Vpr),e(R8,Xpr),e(R8,RH),e(RH,zpr),e(R8,Qpr),e(tt,Wpr),e(tt,P8),e(P8,$Fe),e($Fe,Hpr),e(P8,Upr),e(P8,PH),e(PH,Jpr),e(P8,Ypr),e(tt,Kpr),e(tt,B8),e(B8,kFe),e(kFe,Zpr),e(B8,e_r),e(B8,BH),e(BH,o_r),e(B8,r_r),e(tt,t_r),e(tt,N8),e(N8,SFe),e(SFe,a_r),e(N8,n_r),e(N8,NH),e(NH,s_r),e(N8,l_r),e(tt,i_r),e(tt,I8),e(I8,RFe),e(RFe,d_r),e(I8,c_r),e(I8,IH),e(IH,f_r),e(I8,m_r),e(_o,g_r),e(_o,q8),e(q8,h_r),e(q8,PFe),e(PFe,p_r),e(q8,__r),e(q8,BFe),e(BFe,u_r),e(_o,b_r),M(j8,_o,null),b(f,ZXe,u),b(f,zd,u),e(zd,D8),e(D8,NFe),M(v9,NFe,null),e(zd,v_r),e(zd,IFe),e(IFe,F_r),b(f,eze,u),b(f,Jo,u),M(F9,Jo,null),e(Jo,T_r),e(Jo,Qd),e(Qd,M_r),e(Qd,qH),e(qH,E_r),e(Qd,C_r),e(Qd,jH),e(jH,w_r),e(Qd,A_r),e(Jo,L_r),e(Jo,T9),e(T9,y_r),e(T9,qFe),e(qFe,x_r),e(T9,$_r),e(Jo,k_r),e(Jo,yt),M(M9,yt,null),e(yt,S_r),e(yt,jFe),e(jFe,R_r),e(yt,P_r),e(yt,Wd),e(Wd,B_r),e(Wd,DFe),e(DFe,N_r),e(Wd,I_r),e(Wd,DH),e(DH,q_r),e(Wd,j_r),e(yt,D_r),M(G8,yt,null),e(Jo,G_r),e(Jo,uo),M(E9,uo,null),e(uo,O_r),e(uo,GFe),e(GFe,V_r),e(uo,X_r),e(uo,on),e(on,z_r),e(on,OFe),e(OFe,Q_r),e(on,W_r),e(on,VFe),e(VFe,H_r),e(on,U_r),e(on,XFe),e(XFe,J_r),e(on,Y_r),e(uo,K_r),e(uo,Hd),e(Hd,O8),e(O8,zFe),e(zFe,Z_r),e(O8,eur),e(O8,GH),e(GH,our),e(O8,rur),e(Hd,tur),e(Hd,V8),e(V8,QFe),e(QFe,aur),e(V8,nur),e(V8,OH),e(OH,sur),e(V8,lur),e(Hd,iur),e(Hd,X8),e(X8,WFe),e(WFe,dur),e(X8,cur),e(X8,VH),e(VH,fur),e(X8,mur),e(uo,gur),e(uo,z8),e(z8,hur),e(z8,HFe),e(HFe,pur),e(z8,_ur),e(z8,UFe),e(UFe,uur),e(uo,bur),M(Q8,uo,null),b(f,oze,u),b(f,Ud,u),e(Ud,W8),e(W8,JFe),M(C9,JFe,null),e(Ud,vur),e(Ud,YFe),e(YFe,Fur),b(f,rze,u),b(f,Yo,u),M(w9,Yo,null),e(Yo,Tur),e(Yo,Jd),e(Jd,Mur),e(Jd,XH),e(XH,Eur),e(Jd,Cur),e(Jd,zH),e(zH,wur),e(Jd,Aur),e(Yo,Lur),e(Yo,A9),e(A9,yur),e(A9,KFe),e(KFe,xur),e(A9,$ur),e(Yo,kur),e(Yo,xt),M(L9,xt,null),e(xt,Sur),e(xt,ZFe),e(ZFe,Rur),e(xt,Pur),e(xt,Yd),e(Yd,Bur),e(Yd,e6e),e(e6e,Nur),e(Yd,Iur),e(Yd,QH),e(QH,qur),e(Yd,jur),e(xt,Dur),M(H8,xt,null),e(Yo,Gur),e(Yo,bo),M(y9,bo,null),e(bo,Our),e(bo,o6e),e(o6e,Vur),e(bo,Xur),e(bo,rn),e(rn,zur),e(rn,r6e),e(r6e,Qur),e(rn,Wur),e(rn,t6e),e(t6e,Hur),e(rn,Uur),e(rn,a6e),e(a6e,Jur),e(rn,Yur),e(bo,Kur),e(bo,x9),e(x9,U8),e(U8,n6e),e(n6e,Zur),e(U8,e1r),e(U8,WH),e(WH,o1r),e(U8,r1r),e(x9,t1r),e(x9,J8),e(J8,s6e),e(s6e,a1r),e(J8,n1r),e(J8,HH),e(HH,s1r),e(J8,l1r),e(bo,i1r),e(bo,Y8),e(Y8,d1r),e(Y8,l6e),e(l6e,c1r),e(Y8,f1r),e(Y8,i6e),e(i6e,m1r),e(bo,g1r),M(K8,bo,null),b(f,tze,u),b(f,Kd,u),e(Kd,Z8),e(Z8,d6e),M($9,d6e,null),e(Kd,h1r),e(Kd,c6e),e(c6e,p1r),b(f,aze,u),b(f,Ko,u),M(k9,Ko,null),e(Ko,_1r),e(Ko,Zd),e(Zd,u1r),e(Zd,UH),e(UH,b1r),e(Zd,v1r),e(Zd,JH),e(JH,F1r),e(Zd,T1r),e(Ko,M1r),e(Ko,S9),e(S9,E1r),e(S9,f6e),e(f6e,C1r),e(S9,w1r),e(Ko,A1r),e(Ko,$t),M(R9,$t,null),e($t,L1r),e($t,m6e),e(m6e,y1r),e($t,x1r),e($t,ec),e(ec,$1r),e(ec,g6e),e(g6e,k1r),e(ec,S1r),e(ec,YH),e(YH,R1r),e(ec,P1r),e($t,B1r),M(eM,$t,null),e(Ko,N1r),e(Ko,vo),M(P9,vo,null),e(vo,I1r),e(vo,h6e),e(h6e,q1r),e(vo,j1r),e(vo,tn),e(tn,D1r),e(tn,p6e),e(p6e,G1r),e(tn,O1r),e(tn,_6e),e(_6e,V1r),e(tn,X1r),e(tn,u6e),e(u6e,z1r),e(tn,Q1r),e(vo,W1r),e(vo,b6e),e(b6e,oM),e(oM,v6e),e(v6e,H1r),e(oM,U1r),e(oM,KH),e(KH,J1r),e(oM,Y1r),e(vo,K1r),e(vo,rM),e(rM,Z1r),e(rM,F6e),e(F6e,e2r),e(rM,o2r),e(rM,T6e),e(T6e,r2r),e(vo,t2r),M(tM,vo,null),b(f,nze,u),b(f,oc,u),e(oc,aM),e(aM,M6e),M(B9,M6e,null),e(oc,a2r),e(oc,E6e),e(E6e,n2r),b(f,sze,u),b(f,Zo,u),M(N9,Zo,null),e(Zo,s2r),e(Zo,rc),e(rc,l2r),e(rc,ZH),e(ZH,i2r),e(rc,d2r),e(rc,eU),e(eU,c2r),e(rc,f2r),e(Zo,m2r),e(Zo,I9),e(I9,g2r),e(I9,C6e),e(C6e,h2r),e(I9,p2r),e(Zo,_2r),e(Zo,kt),M(q9,kt,null),e(kt,u2r),e(kt,w6e),e(w6e,b2r),e(kt,v2r),e(kt,tc),e(tc,F2r),e(tc,A6e),e(A6e,T2r),e(tc,M2r),e(tc,oU),e(oU,E2r),e(tc,C2r),e(kt,w2r),M(nM,kt,null),e(Zo,A2r),e(Zo,Fo),M(j9,Fo,null),e(Fo,L2r),e(Fo,L6e),e(L6e,y2r),e(Fo,x2r),e(Fo,an),e(an,$2r),e(an,y6e),e(y6e,k2r),e(an,S2r),e(an,x6e),e(x6e,R2r),e(an,P2r),e(an,$6e),e($6e,B2r),e(an,N2r),e(Fo,I2r),e(Fo,at),e(at,sM),e(sM,k6e),e(k6e,q2r),e(sM,j2r),e(sM,rU),e(rU,D2r),e(sM,G2r),e(at,O2r),e(at,lM),e(lM,S6e),e(S6e,V2r),e(lM,X2r),e(lM,tU),e(tU,z2r),e(lM,Q2r),e(at,W2r),e(at,iM),e(iM,R6e),e(R6e,H2r),e(iM,U2r),e(iM,aU),e(aU,J2r),e(iM,Y2r),e(at,K2r),e(at,dM),e(dM,P6e),e(P6e,Z2r),e(dM,ebr),e(dM,nU),e(nU,obr),e(dM,rbr),e(at,tbr),e(at,cM),e(cM,B6e),e(B6e,abr),e(cM,nbr),e(cM,sU),e(sU,sbr),e(cM,lbr),e(Fo,ibr),e(Fo,fM),e(fM,dbr),e(fM,N6e),e(N6e,cbr),e(fM,fbr),e(fM,I6e),e(I6e,mbr),e(Fo,gbr),M(mM,Fo,null),b(f,lze,u),b(f,ac,u),e(ac,gM),e(gM,q6e),M(D9,q6e,null),e(ac,hbr),e(ac,j6e),e(j6e,pbr),b(f,ize,u),b(f,er,u),M(G9,er,null),e(er,_br),e(er,nc),e(nc,ubr),e(nc,lU),e(lU,bbr),e(nc,vbr),e(nc,iU),e(iU,Fbr),e(nc,Tbr),e(er,Mbr),e(er,O9),e(O9,Ebr),e(O9,D6e),e(D6e,Cbr),e(O9,wbr),e(er,Abr),e(er,St),M(V9,St,null),e(St,Lbr),e(St,G6e),e(G6e,ybr),e(St,xbr),e(St,sc),e(sc,$br),e(sc,O6e),e(O6e,kbr),e(sc,Sbr),e(sc,dU),e(dU,Rbr),e(sc,Pbr),e(St,Bbr),M(hM,St,null),e(er,Nbr),e(er,To),M(X9,To,null),e(To,Ibr),e(To,V6e),e(V6e,qbr),e(To,jbr),e(To,nn),e(nn,Dbr),e(nn,X6e),e(X6e,Gbr),e(nn,Obr),e(nn,z6e),e(z6e,Vbr),e(nn,Xbr),e(nn,Q6e),e(Q6e,zbr),e(nn,Qbr),e(To,Wbr),e(To,W6e),e(W6e,pM),e(pM,H6e),e(H6e,Hbr),e(pM,Ubr),e(pM,cU),e(cU,Jbr),e(pM,Ybr),e(To,Kbr),e(To,_M),e(_M,Zbr),e(_M,U6e),e(U6e,evr),e(_M,ovr),e(_M,J6e),e(J6e,rvr),e(To,tvr),M(uM,To,null),b(f,dze,u),b(f,lc,u),e(lc,bM),e(bM,Y6e),M(z9,Y6e,null),e(lc,avr),e(lc,K6e),e(K6e,nvr),b(f,cze,u),b(f,or,u),M(Q9,or,null),e(or,svr),e(or,ic),e(ic,lvr),e(ic,fU),e(fU,ivr),e(ic,dvr),e(ic,mU),e(mU,cvr),e(ic,fvr),e(or,mvr),e(or,W9),e(W9,gvr),e(W9,Z6e),e(Z6e,hvr),e(W9,pvr),e(or,_vr),e(or,Rt),M(H9,Rt,null),e(Rt,uvr),e(Rt,eTe),e(eTe,bvr),e(Rt,vvr),e(Rt,dc),e(dc,Fvr),e(dc,oTe),e(oTe,Tvr),e(dc,Mvr),e(dc,gU),e(gU,Evr),e(dc,Cvr),e(Rt,wvr),M(vM,Rt,null),e(or,Avr),e(or,xr),M(U9,xr,null),e(xr,Lvr),e(xr,rTe),e(rTe,yvr),e(xr,xvr),e(xr,sn),e(sn,$vr),e(sn,tTe),e(tTe,kvr),e(sn,Svr),e(sn,aTe),e(aTe,Rvr),e(sn,Pvr),e(sn,nTe),e(nTe,Bvr),e(sn,Nvr),e(xr,Ivr),e(xr,q),e(q,FM),e(FM,sTe),e(sTe,qvr),e(FM,jvr),e(FM,hU),e(hU,Dvr),e(FM,Gvr),e(q,Ovr),e(q,TM),e(TM,lTe),e(lTe,Vvr),e(TM,Xvr),e(TM,pU),e(pU,zvr),e(TM,Qvr),e(q,Wvr),e(q,MM),e(MM,iTe),e(iTe,Hvr),e(MM,Uvr),e(MM,_U),e(_U,Jvr),e(MM,Yvr),e(q,Kvr),e(q,EM),e(EM,dTe),e(dTe,Zvr),e(EM,eFr),e(EM,uU),e(uU,oFr),e(EM,rFr),e(q,tFr),e(q,CM),e(CM,cTe),e(cTe,aFr),e(CM,nFr),e(CM,bU),e(bU,sFr),e(CM,lFr),e(q,iFr),e(q,wM),e(wM,fTe),e(fTe,dFr),e(wM,cFr),e(wM,vU),e(vU,fFr),e(wM,mFr),e(q,gFr),e(q,AM),e(AM,mTe),e(mTe,hFr),e(AM,pFr),e(AM,FU),e(FU,_Fr),e(AM,uFr),e(q,bFr),e(q,LM),e(LM,gTe),e(gTe,vFr),e(LM,FFr),e(LM,TU),e(TU,TFr),e(LM,MFr),e(q,EFr),e(q,yM),e(yM,hTe),e(hTe,CFr),e(yM,wFr),e(yM,MU),e(MU,AFr),e(yM,LFr),e(q,yFr),e(q,xM),e(xM,pTe),e(pTe,xFr),e(xM,$Fr),e(xM,EU),e(EU,kFr),e(xM,SFr),e(q,RFr),e(q,$M),e($M,_Te),e(_Te,PFr),e($M,BFr),e($M,CU),e(CU,NFr),e($M,IFr),e(q,qFr),e(q,kM),e(kM,uTe),e(uTe,jFr),e(kM,DFr),e(kM,wU),e(wU,GFr),e(kM,OFr),e(q,VFr),e(q,SM),e(SM,bTe),e(bTe,XFr),e(SM,zFr),e(SM,AU),e(AU,QFr),e(SM,WFr),e(q,HFr),e(q,RM),e(RM,vTe),e(vTe,UFr),e(RM,JFr),e(RM,LU),e(LU,YFr),e(RM,KFr),e(q,ZFr),e(q,PM),e(PM,FTe),e(FTe,e6r),e(PM,o6r),e(PM,yU),e(yU,r6r),e(PM,t6r),e(q,a6r),e(q,BM),e(BM,TTe),e(TTe,n6r),e(BM,s6r),e(BM,xU),e(xU,l6r),e(BM,i6r),e(q,d6r),e(q,NM),e(NM,MTe),e(MTe,c6r),e(NM,f6r),e(NM,$U),e($U,m6r),e(NM,g6r),e(q,h6r),e(q,IM),e(IM,ETe),e(ETe,p6r),e(IM,_6r),e(IM,kU),e(kU,u6r),e(IM,b6r),e(q,v6r),e(q,Ys),e(Ys,CTe),e(CTe,F6r),e(Ys,T6r),e(Ys,SU),e(SU,M6r),e(Ys,E6r),e(Ys,RU),e(RU,C6r),e(Ys,w6r),e(q,A6r),e(q,qM),e(qM,wTe),e(wTe,L6r),e(qM,y6r),e(qM,PU),e(PU,x6r),e(qM,$6r),e(q,k6r),e(q,jM),e(jM,ATe),e(ATe,S6r),e(jM,R6r),e(jM,BU),e(BU,P6r),e(jM,B6r),e(q,N6r),e(q,DM),e(DM,LTe),e(LTe,I6r),e(DM,q6r),e(DM,NU),e(NU,j6r),e(DM,D6r),e(q,G6r),e(q,GM),e(GM,yTe),e(yTe,O6r),e(GM,V6r),e(GM,IU),e(IU,X6r),e(GM,z6r),e(q,Q6r),e(q,OM),e(OM,xTe),e(xTe,W6r),e(OM,H6r),e(OM,qU),e(qU,U6r),e(OM,J6r),e(q,Y6r),e(q,VM),e(VM,$Te),e($Te,K6r),e(VM,Z6r),e(VM,jU),e(jU,eTr),e(VM,oTr),e(q,rTr),e(q,XM),e(XM,kTe),e(kTe,tTr),e(XM,aTr),e(XM,DU),e(DU,nTr),e(XM,sTr),e(q,lTr),e(q,zM),e(zM,STe),e(STe,iTr),e(zM,dTr),e(zM,GU),e(GU,cTr),e(zM,fTr),e(q,mTr),e(q,QM),e(QM,RTe),e(RTe,gTr),e(QM,hTr),e(QM,OU),e(OU,pTr),e(QM,_Tr),e(q,uTr),e(q,WM),e(WM,PTe),e(PTe,bTr),e(WM,vTr),e(WM,VU),e(VU,FTr),e(WM,TTr),e(q,MTr),e(q,HM),e(HM,BTe),e(BTe,ETr),e(HM,CTr),e(HM,XU),e(XU,wTr),e(HM,ATr),e(q,LTr),e(q,UM),e(UM,NTe),e(NTe,yTr),e(UM,xTr),e(UM,zU),e(zU,$Tr),e(UM,kTr),e(q,STr),e(q,JM),e(JM,ITe),e(ITe,RTr),e(JM,PTr),e(JM,QU),e(QU,BTr),e(JM,NTr),e(q,ITr),e(q,YM),e(YM,qTe),e(qTe,qTr),e(YM,jTr),e(YM,WU),e(WU,DTr),e(YM,GTr),e(q,OTr),e(q,KM),e(KM,jTe),e(jTe,VTr),e(KM,XTr),e(KM,HU),e(HU,zTr),e(KM,QTr),e(q,WTr),e(q,ZM),e(ZM,DTe),e(DTe,HTr),e(ZM,UTr),e(ZM,UU),e(UU,JTr),e(ZM,YTr),e(q,KTr),e(q,e4),e(e4,GTe),e(GTe,ZTr),e(e4,e8r),e(e4,JU),e(JU,o8r),e(e4,r8r),e(q,t8r),e(q,o4),e(o4,OTe),e(OTe,a8r),e(o4,n8r),e(o4,YU),e(YU,s8r),e(o4,l8r),e(q,i8r),e(q,r4),e(r4,VTe),e(VTe,d8r),e(r4,c8r),e(r4,KU),e(KU,f8r),e(r4,m8r),e(q,g8r),e(q,t4),e(t4,XTe),e(XTe,h8r),e(t4,p8r),e(t4,ZU),e(ZU,_8r),e(t4,u8r),e(q,b8r),e(q,a4),e(a4,zTe),e(zTe,v8r),e(a4,F8r),e(a4,eJ),e(eJ,T8r),e(a4,M8r),e(q,E8r),e(q,n4),e(n4,QTe),e(QTe,C8r),e(n4,w8r),e(n4,oJ),e(oJ,A8r),e(n4,L8r),e(q,y8r),e(q,s4),e(s4,WTe),e(WTe,x8r),e(s4,$8r),e(s4,rJ),e(rJ,k8r),e(s4,S8r),e(q,R8r),e(q,l4),e(l4,HTe),e(HTe,P8r),e(l4,B8r),e(l4,tJ),e(tJ,N8r),e(l4,I8r),e(q,q8r),e(q,i4),e(i4,UTe),e(UTe,j8r),e(i4,D8r),e(i4,aJ),e(aJ,G8r),e(i4,O8r),e(q,V8r),e(q,d4),e(d4,JTe),e(JTe,X8r),e(d4,z8r),e(d4,nJ),e(nJ,Q8r),e(d4,W8r),e(q,H8r),e(q,c4),e(c4,YTe),e(YTe,U8r),e(c4,J8r),e(c4,sJ),e(sJ,Y8r),e(c4,K8r),e(q,Z8r),e(q,f4),e(f4,KTe),e(KTe,eMr),e(f4,oMr),e(f4,lJ),e(lJ,rMr),e(f4,tMr),e(q,aMr),e(q,m4),e(m4,ZTe),e(ZTe,nMr),e(m4,sMr),e(m4,iJ),e(iJ,lMr),e(m4,iMr),e(q,dMr),e(q,g4),e(g4,e8e),e(e8e,cMr),e(g4,fMr),e(g4,dJ),e(dJ,mMr),e(g4,gMr),e(q,hMr),e(q,h4),e(h4,o8e),e(o8e,pMr),e(h4,_Mr),e(h4,cJ),e(cJ,uMr),e(h4,bMr),e(xr,vMr),M(p4,xr,null),b(f,fze,u),b(f,cc,u),e(cc,_4),e(_4,r8e),M(J9,r8e,null),e(cc,FMr),e(cc,t8e),e(t8e,TMr),b(f,mze,u),b(f,rr,u),M(Y9,rr,null),e(rr,MMr),e(rr,fc),e(fc,EMr),e(fc,fJ),e(fJ,CMr),e(fc,wMr),e(fc,mJ),e(mJ,AMr),e(fc,LMr),e(rr,yMr),e(rr,K9),e(K9,xMr),e(K9,a8e),e(a8e,$Mr),e(K9,kMr),e(rr,SMr),e(rr,Pt),M(Z9,Pt,null),e(Pt,RMr),e(Pt,n8e),e(n8e,PMr),e(Pt,BMr),e(Pt,mc),e(mc,NMr),e(mc,s8e),e(s8e,IMr),e(mc,qMr),e(mc,gJ),e(gJ,jMr),e(mc,DMr),e(Pt,GMr),M(u4,Pt,null),e(rr,OMr),e(rr,$r),M(ex,$r,null),e($r,VMr),e($r,l8e),e(l8e,XMr),e($r,zMr),e($r,ln),e(ln,QMr),e(ln,i8e),e(i8e,WMr),e(ln,HMr),e(ln,d8e),e(d8e,UMr),e(ln,JMr),e(ln,c8e),e(c8e,YMr),e(ln,KMr),e($r,ZMr),e($r,se),e(se,b4),e(b4,f8e),e(f8e,e4r),e(b4,o4r),e(b4,hJ),e(hJ,r4r),e(b4,t4r),e(se,a4r),e(se,v4),e(v4,m8e),e(m8e,n4r),e(v4,s4r),e(v4,pJ),e(pJ,l4r),e(v4,i4r),e(se,d4r),e(se,F4),e(F4,g8e),e(g8e,c4r),e(F4,f4r),e(F4,_J),e(_J,m4r),e(F4,g4r),e(se,h4r),e(se,T4),e(T4,h8e),e(h8e,p4r),e(T4,_4r),e(T4,uJ),e(uJ,u4r),e(T4,b4r),e(se,v4r),e(se,M4),e(M4,p8e),e(p8e,F4r),e(M4,T4r),e(M4,bJ),e(bJ,M4r),e(M4,E4r),e(se,C4r),e(se,E4),e(E4,_8e),e(_8e,w4r),e(E4,A4r),e(E4,vJ),e(vJ,L4r),e(E4,y4r),e(se,x4r),e(se,C4),e(C4,u8e),e(u8e,$4r),e(C4,k4r),e(C4,FJ),e(FJ,S4r),e(C4,R4r),e(se,P4r),e(se,w4),e(w4,b8e),e(b8e,B4r),e(w4,N4r),e(w4,TJ),e(TJ,I4r),e(w4,q4r),e(se,j4r),e(se,A4),e(A4,v8e),e(v8e,D4r),e(A4,G4r),e(A4,MJ),e(MJ,O4r),e(A4,V4r),e(se,X4r),e(se,L4),e(L4,F8e),e(F8e,z4r),e(L4,Q4r),e(L4,EJ),e(EJ,W4r),e(L4,H4r),e(se,U4r),e(se,y4),e(y4,T8e),e(T8e,J4r),e(y4,Y4r),e(y4,CJ),e(CJ,K4r),e(y4,Z4r),e(se,eEr),e(se,x4),e(x4,M8e),e(M8e,oEr),e(x4,rEr),e(x4,wJ),e(wJ,tEr),e(x4,aEr),e(se,nEr),e(se,$4),e($4,E8e),e(E8e,sEr),e($4,lEr),e($4,AJ),e(AJ,iEr),e($4,dEr),e(se,cEr),e(se,k4),e(k4,C8e),e(C8e,fEr),e(k4,mEr),e(k4,LJ),e(LJ,gEr),e(k4,hEr),e(se,pEr),e(se,S4),e(S4,w8e),e(w8e,_Er),e(S4,uEr),e(S4,yJ),e(yJ,bEr),e(S4,vEr),e(se,FEr),e(se,R4),e(R4,A8e),e(A8e,TEr),e(R4,MEr),e(R4,xJ),e(xJ,EEr),e(R4,CEr),e(se,wEr),e(se,P4),e(P4,L8e),e(L8e,AEr),e(P4,LEr),e(P4,$J),e($J,yEr),e(P4,xEr),e(se,$Er),e(se,B4),e(B4,y8e),e(y8e,kEr),e(B4,SEr),e(B4,kJ),e(kJ,REr),e(B4,PEr),e(se,BEr),e(se,N4),e(N4,x8e),e(x8e,NEr),e(N4,IEr),e(N4,SJ),e(SJ,qEr),e(N4,jEr),e(se,DEr),e(se,I4),e(I4,$8e),e($8e,GEr),e(I4,OEr),e(I4,RJ),e(RJ,VEr),e(I4,XEr),e(se,zEr),e(se,q4),e(q4,k8e),e(k8e,QEr),e(q4,WEr),e(q4,PJ),e(PJ,HEr),e(q4,UEr),e(se,JEr),e(se,j4),e(j4,S8e),e(S8e,YEr),e(j4,KEr),e(j4,BJ),e(BJ,ZEr),e(j4,eCr),e(se,oCr),e(se,D4),e(D4,R8e),e(R8e,rCr),e(D4,tCr),e(D4,NJ),e(NJ,aCr),e(D4,nCr),e($r,sCr),M(G4,$r,null),b(f,gze,u),b(f,gc,u),e(gc,O4),e(O4,P8e),M(ox,P8e,null),e(gc,lCr),e(gc,B8e),e(B8e,iCr),b(f,hze,u),b(f,tr,u),M(rx,tr,null),e(tr,dCr),e(tr,hc),e(hc,cCr),e(hc,IJ),e(IJ,fCr),e(hc,mCr),e(hc,qJ),e(qJ,gCr),e(hc,hCr),e(tr,pCr),e(tr,tx),e(tx,_Cr),e(tx,N8e),e(N8e,uCr),e(tx,bCr),e(tr,vCr),e(tr,Bt),M(ax,Bt,null),e(Bt,FCr),e(Bt,I8e),e(I8e,TCr),e(Bt,MCr),e(Bt,pc),e(pc,ECr),e(pc,q8e),e(q8e,CCr),e(pc,wCr),e(pc,jJ),e(jJ,ACr),e(pc,LCr),e(Bt,yCr),M(V4,Bt,null),e(tr,xCr),e(tr,kr),M(nx,kr,null),e(kr,$Cr),e(kr,j8e),e(j8e,kCr),e(kr,SCr),e(kr,dn),e(dn,RCr),e(dn,D8e),e(D8e,PCr),e(dn,BCr),e(dn,G8e),e(G8e,NCr),e(dn,ICr),e(dn,O8e),e(O8e,qCr),e(dn,jCr),e(kr,DCr),e(kr,Me),e(Me,X4),e(X4,V8e),e(V8e,GCr),e(X4,OCr),e(X4,DJ),e(DJ,VCr),e(X4,XCr),e(Me,zCr),e(Me,z4),e(z4,X8e),e(X8e,QCr),e(z4,WCr),e(z4,GJ),e(GJ,HCr),e(z4,UCr),e(Me,JCr),e(Me,Q4),e(Q4,z8e),e(z8e,YCr),e(Q4,KCr),e(Q4,OJ),e(OJ,ZCr),e(Q4,e3r),e(Me,o3r),e(Me,W4),e(W4,Q8e),e(Q8e,r3r),e(W4,t3r),e(W4,VJ),e(VJ,a3r),e(W4,n3r),e(Me,s3r),e(Me,H4),e(H4,W8e),e(W8e,l3r),e(H4,i3r),e(H4,XJ),e(XJ,d3r),e(H4,c3r),e(Me,f3r),e(Me,U4),e(U4,H8e),e(H8e,m3r),e(U4,g3r),e(U4,zJ),e(zJ,h3r),e(U4,p3r),e(Me,_3r),e(Me,J4),e(J4,U8e),e(U8e,u3r),e(J4,b3r),e(J4,QJ),e(QJ,v3r),e(J4,F3r),e(Me,T3r),e(Me,Y4),e(Y4,J8e),e(J8e,M3r),e(Y4,E3r),e(Y4,WJ),e(WJ,C3r),e(Y4,w3r),e(Me,A3r),e(Me,K4),e(K4,Y8e),e(Y8e,L3r),e(K4,y3r),e(K4,HJ),e(HJ,x3r),e(K4,$3r),e(Me,k3r),e(Me,Z4),e(Z4,K8e),e(K8e,S3r),e(Z4,R3r),e(Z4,UJ),e(UJ,P3r),e(Z4,B3r),e(Me,N3r),e(Me,eE),e(eE,Z8e),e(Z8e,I3r),e(eE,q3r),e(eE,JJ),e(JJ,j3r),e(eE,D3r),e(Me,G3r),e(Me,oE),e(oE,eMe),e(eMe,O3r),e(oE,V3r),e(oE,YJ),e(YJ,X3r),e(oE,z3r),e(Me,Q3r),e(Me,rE),e(rE,oMe),e(oMe,W3r),e(rE,H3r),e(rE,KJ),e(KJ,U3r),e(rE,J3r),e(kr,Y3r),M(tE,kr,null),b(f,pze,u),b(f,_c,u),e(_c,aE),e(aE,rMe),M(sx,rMe,null),e(_c,K3r),e(_c,tMe),e(tMe,Z3r),b(f,_ze,u),b(f,ar,u),M(lx,ar,null),e(ar,e5r),e(ar,uc),e(uc,o5r),e(uc,ZJ),e(ZJ,r5r),e(uc,t5r),e(uc,eY),e(eY,a5r),e(uc,n5r),e(ar,s5r),e(ar,ix),e(ix,l5r),e(ix,aMe),e(aMe,i5r),e(ix,d5r),e(ar,c5r),e(ar,Nt),M(dx,Nt,null),e(Nt,f5r),e(Nt,nMe),e(nMe,m5r),e(Nt,g5r),e(Nt,bc),e(bc,h5r),e(bc,sMe),e(sMe,p5r),e(bc,_5r),e(bc,oY),e(oY,u5r),e(bc,b5r),e(Nt,v5r),M(nE,Nt,null),e(ar,F5r),e(ar,Sr),M(cx,Sr,null),e(Sr,T5r),e(Sr,lMe),e(lMe,M5r),e(Sr,E5r),e(Sr,cn),e(cn,C5r),e(cn,iMe),e(iMe,w5r),e(cn,A5r),e(cn,dMe),e(dMe,L5r),e(cn,y5r),e(cn,cMe),e(cMe,x5r),e(cn,$5r),e(Sr,k5r),e(Sr,Qe),e(Qe,sE),e(sE,fMe),e(fMe,S5r),e(sE,R5r),e(sE,rY),e(rY,P5r),e(sE,B5r),e(Qe,N5r),e(Qe,lE),e(lE,mMe),e(mMe,I5r),e(lE,q5r),e(lE,tY),e(tY,j5r),e(lE,D5r),e(Qe,G5r),e(Qe,Ks),e(Ks,gMe),e(gMe,O5r),e(Ks,V5r),e(Ks,aY),e(aY,X5r),e(Ks,z5r),e(Ks,nY),e(nY,Q5r),e(Ks,W5r),e(Qe,H5r),e(Qe,iE),e(iE,hMe),e(hMe,U5r),e(iE,J5r),e(iE,sY),e(sY,Y5r),e(iE,K5r),e(Qe,Z5r),e(Qe,dE),e(dE,pMe),e(pMe,e0r),e(dE,o0r),e(dE,lY),e(lY,r0r),e(dE,t0r),e(Qe,a0r),e(Qe,cE),e(cE,_Me),e(_Me,n0r),e(cE,s0r),e(cE,iY),e(iY,l0r),e(cE,i0r),e(Qe,d0r),e(Qe,fE),e(fE,uMe),e(uMe,c0r),e(fE,f0r),e(fE,dY),e(dY,m0r),e(fE,g0r),e(Sr,h0r),M(mE,Sr,null),b(f,uze,u),b(f,vc,u),e(vc,gE),e(gE,bMe),M(fx,bMe,null),e(vc,p0r),e(vc,vMe),e(vMe,_0r),b(f,bze,u),b(f,nr,u),M(mx,nr,null),e(nr,u0r),e(nr,Fc),e(Fc,b0r),e(Fc,cY),e(cY,v0r),e(Fc,F0r),e(Fc,fY),e(fY,T0r),e(Fc,M0r),e(nr,E0r),e(nr,gx),e(gx,C0r),e(gx,FMe),e(FMe,w0r),e(gx,A0r),e(nr,L0r),e(nr,It),M(hx,It,null),e(It,y0r),e(It,TMe),e(TMe,x0r),e(It,$0r),e(It,Tc),e(Tc,k0r),e(Tc,MMe),e(MMe,S0r),e(Tc,R0r),e(Tc,mY),e(mY,P0r),e(Tc,B0r),e(It,N0r),M(hE,It,null),e(nr,I0r),e(nr,Rr),M(px,Rr,null),e(Rr,q0r),e(Rr,EMe),e(EMe,j0r),e(Rr,D0r),e(Rr,fn),e(fn,G0r),e(fn,CMe),e(CMe,O0r),e(fn,V0r),e(fn,wMe),e(wMe,X0r),e(fn,z0r),e(fn,AMe),e(AMe,Q0r),e(fn,W0r),e(Rr,H0r),e(Rr,ie),e(ie,pE),e(pE,LMe),e(LMe,U0r),e(pE,J0r),e(pE,gY),e(gY,Y0r),e(pE,K0r),e(ie,Z0r),e(ie,_E),e(_E,yMe),e(yMe,ewr),e(_E,owr),e(_E,hY),e(hY,rwr),e(_E,twr),e(ie,awr),e(ie,uE),e(uE,xMe),e(xMe,nwr),e(uE,swr),e(uE,pY),e(pY,lwr),e(uE,iwr),e(ie,dwr),e(ie,bE),e(bE,$Me),e($Me,cwr),e(bE,fwr),e(bE,_Y),e(_Y,mwr),e(bE,gwr),e(ie,hwr),e(ie,vE),e(vE,kMe),e(kMe,pwr),e(vE,_wr),e(vE,uY),e(uY,uwr),e(vE,bwr),e(ie,vwr),e(ie,FE),e(FE,SMe),e(SMe,Fwr),e(FE,Twr),e(FE,bY),e(bY,Mwr),e(FE,Ewr),e(ie,Cwr),e(ie,TE),e(TE,RMe),e(RMe,wwr),e(TE,Awr),e(TE,vY),e(vY,Lwr),e(TE,ywr),e(ie,xwr),e(ie,ME),e(ME,PMe),e(PMe,$wr),e(ME,kwr),e(ME,FY),e(FY,Swr),e(ME,Rwr),e(ie,Pwr),e(ie,EE),e(EE,BMe),e(BMe,Bwr),e(EE,Nwr),e(EE,TY),e(TY,Iwr),e(EE,qwr),e(ie,jwr),e(ie,CE),e(CE,NMe),e(NMe,Dwr),e(CE,Gwr),e(CE,MY),e(MY,Owr),e(CE,Vwr),e(ie,Xwr),e(ie,wE),e(wE,IMe),e(IMe,zwr),e(wE,Qwr),e(wE,EY),e(EY,Wwr),e(wE,Hwr),e(ie,Uwr),e(ie,AE),e(AE,qMe),e(qMe,Jwr),e(AE,Ywr),e(AE,CY),e(CY,Kwr),e(AE,Zwr),e(ie,eAr),e(ie,LE),e(LE,jMe),e(jMe,oAr),e(LE,rAr),e(LE,wY),e(wY,tAr),e(LE,aAr),e(ie,nAr),e(ie,yE),e(yE,DMe),e(DMe,sAr),e(yE,lAr),e(yE,AY),e(AY,iAr),e(yE,dAr),e(ie,cAr),e(ie,xE),e(xE,GMe),e(GMe,fAr),e(xE,mAr),e(xE,LY),e(LY,gAr),e(xE,hAr),e(ie,pAr),e(ie,$E),e($E,OMe),e(OMe,_Ar),e($E,uAr),e($E,yY),e(yY,bAr),e($E,vAr),e(ie,FAr),e(ie,kE),e(kE,VMe),e(VMe,TAr),e(kE,MAr),e(kE,xY),e(xY,EAr),e(kE,CAr),e(ie,wAr),e(ie,SE),e(SE,XMe),e(XMe,AAr),e(SE,LAr),e(SE,$Y),e($Y,yAr),e(SE,xAr),e(ie,$Ar),e(ie,RE),e(RE,zMe),e(zMe,kAr),e(RE,SAr),e(RE,kY),e(kY,RAr),e(RE,PAr),e(ie,BAr),e(ie,PE),e(PE,QMe),e(QMe,NAr),e(PE,IAr),e(PE,SY),e(SY,qAr),e(PE,jAr),e(Rr,DAr),M(BE,Rr,null),b(f,vze,u),b(f,Mc,u),e(Mc,NE),e(NE,WMe),M(_x,WMe,null),e(Mc,GAr),e(Mc,HMe),e(HMe,OAr),b(f,Fze,u),b(f,sr,u),M(ux,sr,null),e(sr,VAr),e(sr,Ec),e(Ec,XAr),e(Ec,RY),e(RY,zAr),e(Ec,QAr),e(Ec,PY),e(PY,WAr),e(Ec,HAr),e(sr,UAr),e(sr,bx),e(bx,JAr),e(bx,UMe),e(UMe,YAr),e(bx,KAr),e(sr,ZAr),e(sr,qt),M(vx,qt,null),e(qt,e7r),e(qt,JMe),e(JMe,o7r),e(qt,r7r),e(qt,Cc),e(Cc,t7r),e(Cc,YMe),e(YMe,a7r),e(Cc,n7r),e(Cc,BY),e(BY,s7r),e(Cc,l7r),e(qt,i7r),M(IE,qt,null),e(sr,d7r),e(sr,Pr),M(Fx,Pr,null),e(Pr,c7r),e(Pr,KMe),e(KMe,f7r),e(Pr,m7r),e(Pr,mn),e(mn,g7r),e(mn,ZMe),e(ZMe,h7r),e(mn,p7r),e(mn,e4e),e(e4e,_7r),e(mn,u7r),e(mn,o4e),e(o4e,b7r),e(mn,v7r),e(Pr,F7r),e(Pr,ye),e(ye,qE),e(qE,r4e),e(r4e,T7r),e(qE,M7r),e(qE,NY),e(NY,E7r),e(qE,C7r),e(ye,w7r),e(ye,jE),e(jE,t4e),e(t4e,A7r),e(jE,L7r),e(jE,IY),e(IY,y7r),e(jE,x7r),e(ye,$7r),e(ye,DE),e(DE,a4e),e(a4e,k7r),e(DE,S7r),e(DE,qY),e(qY,R7r),e(DE,P7r),e(ye,B7r),e(ye,GE),e(GE,n4e),e(n4e,N7r),e(GE,I7r),e(GE,jY),e(jY,q7r),e(GE,j7r),e(ye,D7r),e(ye,OE),e(OE,s4e),e(s4e,G7r),e(OE,O7r),e(OE,DY),e(DY,V7r),e(OE,X7r),e(ye,z7r),e(ye,VE),e(VE,l4e),e(l4e,Q7r),e(VE,W7r),e(VE,GY),e(GY,H7r),e(VE,U7r),e(ye,J7r),e(ye,XE),e(XE,i4e),e(i4e,Y7r),e(XE,K7r),e(XE,OY),e(OY,Z7r),e(XE,eLr),e(ye,oLr),e(ye,zE),e(zE,d4e),e(d4e,rLr),e(zE,tLr),e(zE,VY),e(VY,aLr),e(zE,nLr),e(ye,sLr),e(ye,QE),e(QE,c4e),e(c4e,lLr),e(QE,iLr),e(QE,XY),e(XY,dLr),e(QE,cLr),e(ye,fLr),e(ye,WE),e(WE,f4e),e(f4e,mLr),e(WE,gLr),e(WE,zY),e(zY,hLr),e(WE,pLr),e(Pr,_Lr),M(HE,Pr,null),b(f,Tze,u),b(f,wc,u),e(wc,UE),e(UE,m4e),M(Tx,m4e,null),e(wc,uLr),e(wc,g4e),e(g4e,bLr),b(f,Mze,u),b(f,lr,u),M(Mx,lr,null),e(lr,vLr),e(lr,Ac),e(Ac,FLr),e(Ac,QY),e(QY,TLr),e(Ac,MLr),e(Ac,WY),e(WY,ELr),e(Ac,CLr),e(lr,wLr),e(lr,Ex),e(Ex,ALr),e(Ex,h4e),e(h4e,LLr),e(Ex,yLr),e(lr,xLr),e(lr,jt),M(Cx,jt,null),e(jt,$Lr),e(jt,p4e),e(p4e,kLr),e(jt,SLr),e(jt,Lc),e(Lc,RLr),e(Lc,_4e),e(_4e,PLr),e(Lc,BLr),e(Lc,HY),e(HY,NLr),e(Lc,ILr),e(jt,qLr),M(JE,jt,null),e(lr,jLr),e(lr,Br),M(wx,Br,null),e(Br,DLr),e(Br,u4e),e(u4e,GLr),e(Br,OLr),e(Br,gn),e(gn,VLr),e(gn,b4e),e(b4e,XLr),e(gn,zLr),e(gn,v4e),e(v4e,QLr),e(gn,WLr),e(gn,F4e),e(F4e,HLr),e(gn,ULr),e(Br,JLr),e(Br,te),e(te,YE),e(YE,T4e),e(T4e,YLr),e(YE,KLr),e(YE,UY),e(UY,ZLr),e(YE,eyr),e(te,oyr),e(te,KE),e(KE,M4e),e(M4e,ryr),e(KE,tyr),e(KE,JY),e(JY,ayr),e(KE,nyr),e(te,syr),e(te,ZE),e(ZE,E4e),e(E4e,lyr),e(ZE,iyr),e(ZE,YY),e(YY,dyr),e(ZE,cyr),e(te,fyr),e(te,eC),e(eC,C4e),e(C4e,myr),e(eC,gyr),e(eC,KY),e(KY,hyr),e(eC,pyr),e(te,_yr),e(te,oC),e(oC,w4e),e(w4e,uyr),e(oC,byr),e(oC,ZY),e(ZY,vyr),e(oC,Fyr),e(te,Tyr),e(te,rC),e(rC,A4e),e(A4e,Myr),e(rC,Eyr),e(rC,eK),e(eK,Cyr),e(rC,wyr),e(te,Ayr),e(te,tC),e(tC,L4e),e(L4e,Lyr),e(tC,yyr),e(tC,oK),e(oK,xyr),e(tC,$yr),e(te,kyr),e(te,aC),e(aC,y4e),e(y4e,Syr),e(aC,Ryr),e(aC,rK),e(rK,Pyr),e(aC,Byr),e(te,Nyr),e(te,nC),e(nC,x4e),e(x4e,Iyr),e(nC,qyr),e(nC,tK),e(tK,jyr),e(nC,Dyr),e(te,Gyr),e(te,sC),e(sC,$4e),e($4e,Oyr),e(sC,Vyr),e(sC,aK),e(aK,Xyr),e(sC,zyr),e(te,Qyr),e(te,lC),e(lC,k4e),e(k4e,Wyr),e(lC,Hyr),e(lC,nK),e(nK,Uyr),e(lC,Jyr),e(te,Yyr),e(te,iC),e(iC,S4e),e(S4e,Kyr),e(iC,Zyr),e(iC,sK),e(sK,e9r),e(iC,o9r),e(te,r9r),e(te,dC),e(dC,R4e),e(R4e,t9r),e(dC,a9r),e(dC,lK),e(lK,n9r),e(dC,s9r),e(te,l9r),e(te,cC),e(cC,P4e),e(P4e,i9r),e(cC,d9r),e(cC,iK),e(iK,c9r),e(cC,f9r),e(te,m9r),e(te,fC),e(fC,B4e),e(B4e,g9r),e(fC,h9r),e(fC,dK),e(dK,p9r),e(fC,_9r),e(te,u9r),e(te,mC),e(mC,N4e),e(N4e,b9r),e(mC,v9r),e(mC,cK),e(cK,F9r),e(mC,T9r),e(te,M9r),e(te,gC),e(gC,I4e),e(I4e,E9r),e(gC,C9r),e(gC,fK),e(fK,w9r),e(gC,A9r),e(te,L9r),e(te,hC),e(hC,q4e),e(q4e,y9r),e(hC,x9r),e(hC,mK),e(mK,$9r),e(hC,k9r),e(te,S9r),e(te,pC),e(pC,j4e),e(j4e,R9r),e(pC,P9r),e(pC,gK),e(gK,B9r),e(pC,N9r),e(te,I9r),e(te,_C),e(_C,D4e),e(D4e,q9r),e(_C,j9r),e(_C,hK),e(hK,D9r),e(_C,G9r),e(te,O9r),e(te,uC),e(uC,G4e),e(G4e,V9r),e(uC,X9r),e(uC,pK),e(pK,z9r),e(uC,Q9r),e(te,W9r),e(te,bC),e(bC,O4e),e(O4e,H9r),e(bC,U9r),e(bC,_K),e(_K,J9r),e(bC,Y9r),e(te,K9r),e(te,vC),e(vC,V4e),e(V4e,Z9r),e(vC,exr),e(vC,uK),e(uK,oxr),e(vC,rxr),e(te,txr),e(te,FC),e(FC,X4e),e(X4e,axr),e(FC,nxr),e(FC,bK),e(bK,sxr),e(FC,lxr),e(te,ixr),e(te,TC),e(TC,z4e),e(z4e,dxr),e(TC,cxr),e(TC,vK),e(vK,fxr),e(TC,mxr),e(te,gxr),e(te,MC),e(MC,Q4e),e(Q4e,hxr),e(MC,pxr),e(MC,FK),e(FK,_xr),e(MC,uxr),e(Br,bxr),M(EC,Br,null),b(f,Eze,u),b(f,yc,u),e(yc,CC),e(CC,W4e),M(Ax,W4e,null),e(yc,vxr),e(yc,H4e),e(H4e,Fxr),b(f,Cze,u),b(f,ir,u),M(Lx,ir,null),e(ir,Txr),e(ir,xc),e(xc,Mxr),e(xc,TK),e(TK,Exr),e(xc,Cxr),e(xc,MK),e(MK,wxr),e(xc,Axr),e(ir,Lxr),e(ir,yx),e(yx,yxr),e(yx,U4e),e(U4e,xxr),e(yx,$xr),e(ir,kxr),e(ir,Dt),M(xx,Dt,null),e(Dt,Sxr),e(Dt,J4e),e(J4e,Rxr),e(Dt,Pxr),e(Dt,$c),e($c,Bxr),e($c,Y4e),e(Y4e,Nxr),e($c,Ixr),e($c,EK),e(EK,qxr),e($c,jxr),e(Dt,Dxr),M(wC,Dt,null),e(ir,Gxr),e(ir,Nr),M($x,Nr,null),e(Nr,Oxr),e(Nr,K4e),e(K4e,Vxr),e(Nr,Xxr),e(Nr,hn),e(hn,zxr),e(hn,Z4e),e(Z4e,Qxr),e(hn,Wxr),e(hn,eEe),e(eEe,Hxr),e(hn,Uxr),e(hn,oEe),e(oEe,Jxr),e(hn,Yxr),e(Nr,Kxr),e(Nr,_e),e(_e,AC),e(AC,rEe),e(rEe,Zxr),e(AC,e$r),e(AC,CK),e(CK,o$r),e(AC,r$r),e(_e,t$r),e(_e,LC),e(LC,tEe),e(tEe,a$r),e(LC,n$r),e(LC,wK),e(wK,s$r),e(LC,l$r),e(_e,i$r),e(_e,yC),e(yC,aEe),e(aEe,d$r),e(yC,c$r),e(yC,AK),e(AK,f$r),e(yC,m$r),e(_e,g$r),e(_e,xC),e(xC,nEe),e(nEe,h$r),e(xC,p$r),e(xC,LK),e(LK,_$r),e(xC,u$r),e(_e,b$r),e(_e,$C),e($C,sEe),e(sEe,v$r),e($C,F$r),e($C,yK),e(yK,T$r),e($C,M$r),e(_e,E$r),e(_e,kC),e(kC,lEe),e(lEe,C$r),e(kC,w$r),e(kC,xK),e(xK,A$r),e(kC,L$r),e(_e,y$r),e(_e,SC),e(SC,iEe),e(iEe,x$r),e(SC,$$r),e(SC,$K),e($K,k$r),e(SC,S$r),e(_e,R$r),e(_e,RC),e(RC,dEe),e(dEe,P$r),e(RC,B$r),e(RC,kK),e(kK,N$r),e(RC,I$r),e(_e,q$r),e(_e,PC),e(PC,cEe),e(cEe,j$r),e(PC,D$r),e(PC,SK),e(SK,G$r),e(PC,O$r),e(_e,V$r),e(_e,BC),e(BC,fEe),e(fEe,X$r),e(BC,z$r),e(BC,RK),e(RK,Q$r),e(BC,W$r),e(_e,H$r),e(_e,NC),e(NC,mEe),e(mEe,U$r),e(NC,J$r),e(NC,PK),e(PK,Y$r),e(NC,K$r),e(_e,Z$r),e(_e,IC),e(IC,gEe),e(gEe,ekr),e(IC,okr),e(IC,BK),e(BK,rkr),e(IC,tkr),e(_e,akr),e(_e,qC),e(qC,hEe),e(hEe,nkr),e(qC,skr),e(qC,NK),e(NK,lkr),e(qC,ikr),e(_e,dkr),e(_e,jC),e(jC,pEe),e(pEe,ckr),e(jC,fkr),e(jC,IK),e(IK,mkr),e(jC,gkr),e(_e,hkr),e(_e,DC),e(DC,_Ee),e(_Ee,pkr),e(DC,_kr),e(DC,qK),e(qK,ukr),e(DC,bkr),e(_e,vkr),e(_e,GC),e(GC,uEe),e(uEe,Fkr),e(GC,Tkr),e(GC,jK),e(jK,Mkr),e(GC,Ekr),e(_e,Ckr),e(_e,OC),e(OC,bEe),e(bEe,wkr),e(OC,Akr),e(OC,DK),e(DK,Lkr),e(OC,ykr),e(Nr,xkr),M(VC,Nr,null),b(f,wze,u),b(f,kc,u),e(kc,XC),e(XC,vEe),M(kx,vEe,null),e(kc,$kr),e(kc,FEe),e(FEe,kkr),b(f,Aze,u),b(f,dr,u),M(Sx,dr,null),e(dr,Skr),e(dr,Sc),e(Sc,Rkr),e(Sc,GK),e(GK,Pkr),e(Sc,Bkr),e(Sc,OK),e(OK,Nkr),e(Sc,Ikr),e(dr,qkr),e(dr,Rx),e(Rx,jkr),e(Rx,TEe),e(TEe,Dkr),e(Rx,Gkr),e(dr,Okr),e(dr,Gt),M(Px,Gt,null),e(Gt,Vkr),e(Gt,MEe),e(MEe,Xkr),e(Gt,zkr),e(Gt,Rc),e(Rc,Qkr),e(Rc,EEe),e(EEe,Wkr),e(Rc,Hkr),e(Rc,VK),e(VK,Ukr),e(Rc,Jkr),e(Gt,Ykr),M(zC,Gt,null),e(dr,Kkr),e(dr,Ir),M(Bx,Ir,null),e(Ir,Zkr),e(Ir,CEe),e(CEe,eSr),e(Ir,oSr),e(Ir,pn),e(pn,rSr),e(pn,wEe),e(wEe,tSr),e(pn,aSr),e(pn,AEe),e(AEe,nSr),e(pn,sSr),e(pn,LEe),e(LEe,lSr),e(pn,iSr),e(Ir,dSr),e(Ir,Nx),e(Nx,QC),e(QC,yEe),e(yEe,cSr),e(QC,fSr),e(QC,XK),e(XK,mSr),e(QC,gSr),e(Nx,hSr),e(Nx,WC),e(WC,xEe),e(xEe,pSr),e(WC,_Sr),e(WC,zK),e(zK,uSr),e(WC,bSr),e(Ir,vSr),M(HC,Ir,null),b(f,Lze,u),b(f,Pc,u),e(Pc,UC),e(UC,$Ee),M(Ix,$Ee,null),e(Pc,FSr),e(Pc,kEe),e(kEe,TSr),b(f,yze,u),b(f,cr,u),M(qx,cr,null),e(cr,MSr),e(cr,Bc),e(Bc,ESr),e(Bc,QK),e(QK,CSr),e(Bc,wSr),e(Bc,WK),e(WK,ASr),e(Bc,LSr),e(cr,ySr),e(cr,jx),e(jx,xSr),e(jx,SEe),e(SEe,$Sr),e(jx,kSr),e(cr,SSr),e(cr,Ot),M(Dx,Ot,null),e(Ot,RSr),e(Ot,REe),e(REe,PSr),e(Ot,BSr),e(Ot,Nc),e(Nc,NSr),e(Nc,PEe),e(PEe,ISr),e(Nc,qSr),e(Nc,HK),e(HK,jSr),e(Nc,DSr),e(Ot,GSr),M(JC,Ot,null),e(cr,OSr),e(cr,qr),M(Gx,qr,null),e(qr,VSr),e(qr,BEe),e(BEe,XSr),e(qr,zSr),e(qr,_n),e(_n,QSr),e(_n,NEe),e(NEe,WSr),e(_n,HSr),e(_n,IEe),e(IEe,USr),e(_n,JSr),e(_n,qEe),e(qEe,YSr),e(_n,KSr),e(qr,ZSr),e(qr,jEe),e(jEe,YC),e(YC,DEe),e(DEe,eRr),e(YC,oRr),e(YC,UK),e(UK,rRr),e(YC,tRr),e(qr,aRr),M(KC,qr,null),b(f,xze,u),b(f,Ic,u),e(Ic,ZC),e(ZC,GEe),M(Ox,GEe,null),e(Ic,nRr),e(Ic,OEe),e(OEe,sRr),b(f,$ze,u),b(f,fr,u),M(Vx,fr,null),e(fr,lRr),e(fr,qc),e(qc,iRr),e(qc,JK),e(JK,dRr),e(qc,cRr),e(qc,YK),e(YK,fRr),e(qc,mRr),e(fr,gRr),e(fr,Xx),e(Xx,hRr),e(Xx,VEe),e(VEe,pRr),e(Xx,_Rr),e(fr,uRr),e(fr,Vt),M(zx,Vt,null),e(Vt,bRr),e(Vt,XEe),e(XEe,vRr),e(Vt,FRr),e(Vt,jc),e(jc,TRr),e(jc,zEe),e(zEe,MRr),e(jc,ERr),e(jc,KK),e(KK,CRr),e(jc,wRr),e(Vt,ARr),M(e3,Vt,null),e(fr,LRr),e(fr,jr),M(Qx,jr,null),e(jr,yRr),e(jr,QEe),e(QEe,xRr),e(jr,$Rr),e(jr,un),e(un,kRr),e(un,WEe),e(WEe,SRr),e(un,RRr),e(un,HEe),e(HEe,PRr),e(un,BRr),e(un,UEe),e(UEe,NRr),e(un,IRr),e(jr,qRr),e(jr,de),e(de,o3),e(o3,JEe),e(JEe,jRr),e(o3,DRr),e(o3,ZK),e(ZK,GRr),e(o3,ORr),e(de,VRr),e(de,r3),e(r3,YEe),e(YEe,XRr),e(r3,zRr),e(r3,eZ),e(eZ,QRr),e(r3,WRr),e(de,HRr),e(de,t3),e(t3,KEe),e(KEe,URr),e(t3,JRr),e(t3,oZ),e(oZ,YRr),e(t3,KRr),e(de,ZRr),e(de,a3),e(a3,ZEe),e(ZEe,ePr),e(a3,oPr),e(a3,rZ),e(rZ,rPr),e(a3,tPr),e(de,aPr),e(de,n3),e(n3,eCe),e(eCe,nPr),e(n3,sPr),e(n3,tZ),e(tZ,lPr),e(n3,iPr),e(de,dPr),e(de,s3),e(s3,oCe),e(oCe,cPr),e(s3,fPr),e(s3,aZ),e(aZ,mPr),e(s3,gPr),e(de,hPr),e(de,l3),e(l3,rCe),e(rCe,pPr),e(l3,_Pr),e(l3,nZ),e(nZ,uPr),e(l3,bPr),e(de,vPr),e(de,i3),e(i3,tCe),e(tCe,FPr),e(i3,TPr),e(i3,sZ),e(sZ,MPr),e(i3,EPr),e(de,CPr),e(de,d3),e(d3,aCe),e(aCe,wPr),e(d3,APr),e(d3,lZ),e(lZ,LPr),e(d3,yPr),e(de,xPr),e(de,c3),e(c3,nCe),e(nCe,$Pr),e(c3,kPr),e(c3,iZ),e(iZ,SPr),e(c3,RPr),e(de,PPr),e(de,f3),e(f3,sCe),e(sCe,BPr),e(f3,NPr),e(f3,dZ),e(dZ,IPr),e(f3,qPr),e(de,jPr),e(de,m3),e(m3,lCe),e(lCe,DPr),e(m3,GPr),e(m3,cZ),e(cZ,OPr),e(m3,VPr),e(de,XPr),e(de,g3),e(g3,iCe),e(iCe,zPr),e(g3,QPr),e(g3,fZ),e(fZ,WPr),e(g3,HPr),e(de,UPr),e(de,h3),e(h3,dCe),e(dCe,JPr),e(h3,YPr),e(h3,mZ),e(mZ,KPr),e(h3,ZPr),e(de,eBr),e(de,p3),e(p3,cCe),e(cCe,oBr),e(p3,rBr),e(p3,gZ),e(gZ,tBr),e(p3,aBr),e(de,nBr),e(de,_3),e(_3,fCe),e(fCe,sBr),e(_3,lBr),e(_3,hZ),e(hZ,iBr),e(_3,dBr),e(de,cBr),e(de,u3),e(u3,mCe),e(mCe,fBr),e(u3,mBr),e(u3,pZ),e(pZ,gBr),e(u3,hBr),e(de,pBr),e(de,b3),e(b3,gCe),e(gCe,_Br),e(b3,uBr),e(b3,_Z),e(_Z,bBr),e(b3,vBr),e(de,FBr),e(de,v3),e(v3,hCe),e(hCe,TBr),e(v3,MBr),e(v3,uZ),e(uZ,EBr),e(v3,CBr),e(de,wBr),e(de,F3),e(F3,pCe),e(pCe,ABr),e(F3,LBr),e(F3,bZ),e(bZ,yBr),e(F3,xBr),e(jr,$Br),M(T3,jr,null),b(f,kze,u),b(f,Dc,u),e(Dc,M3),e(M3,_Ce),M(Wx,_Ce,null),e(Dc,kBr),e(Dc,uCe),e(uCe,SBr),b(f,Sze,u),b(f,mr,u),M(Hx,mr,null),e(mr,RBr),e(mr,Gc),e(Gc,PBr),e(Gc,vZ),e(vZ,BBr),e(Gc,NBr),e(Gc,FZ),e(FZ,IBr),e(Gc,qBr),e(mr,jBr),e(mr,Ux),e(Ux,DBr),e(Ux,bCe),e(bCe,GBr),e(Ux,OBr),e(mr,VBr),e(mr,Xt),M(Jx,Xt,null),e(Xt,XBr),e(Xt,vCe),e(vCe,zBr),e(Xt,QBr),e(Xt,Oc),e(Oc,WBr),e(Oc,FCe),e(FCe,HBr),e(Oc,UBr),e(Oc,TZ),e(TZ,JBr),e(Oc,YBr),e(Xt,KBr),M(E3,Xt,null),e(mr,ZBr),e(mr,Dr),M(Yx,Dr,null),e(Dr,eNr),e(Dr,TCe),e(TCe,oNr),e(Dr,rNr),e(Dr,bn),e(bn,tNr),e(bn,MCe),e(MCe,aNr),e(bn,nNr),e(bn,ECe),e(ECe,sNr),e(bn,lNr),e(bn,CCe),e(CCe,iNr),e(bn,dNr),e(Dr,cNr),e(Dr,ce),e(ce,C3),e(C3,wCe),e(wCe,fNr),e(C3,mNr),e(C3,MZ),e(MZ,gNr),e(C3,hNr),e(ce,pNr),e(ce,w3),e(w3,ACe),e(ACe,_Nr),e(w3,uNr),e(w3,EZ),e(EZ,bNr),e(w3,vNr),e(ce,FNr),e(ce,A3),e(A3,LCe),e(LCe,TNr),e(A3,MNr),e(A3,CZ),e(CZ,ENr),e(A3,CNr),e(ce,wNr),e(ce,L3),e(L3,yCe),e(yCe,ANr),e(L3,LNr),e(L3,wZ),e(wZ,yNr),e(L3,xNr),e(ce,$Nr),e(ce,y3),e(y3,xCe),e(xCe,kNr),e(y3,SNr),e(y3,AZ),e(AZ,RNr),e(y3,PNr),e(ce,BNr),e(ce,x3),e(x3,$Ce),e($Ce,NNr),e(x3,INr),e(x3,LZ),e(LZ,qNr),e(x3,jNr),e(ce,DNr),e(ce,$3),e($3,kCe),e(kCe,GNr),e($3,ONr),e($3,yZ),e(yZ,VNr),e($3,XNr),e(ce,zNr),e(ce,k3),e(k3,SCe),e(SCe,QNr),e(k3,WNr),e(k3,xZ),e(xZ,HNr),e(k3,UNr),e(ce,JNr),e(ce,S3),e(S3,RCe),e(RCe,YNr),e(S3,KNr),e(S3,$Z),e($Z,ZNr),e(S3,eIr),e(ce,oIr),e(ce,R3),e(R3,PCe),e(PCe,rIr),e(R3,tIr),e(R3,kZ),e(kZ,aIr),e(R3,nIr),e(ce,sIr),e(ce,P3),e(P3,BCe),e(BCe,lIr),e(P3,iIr),e(P3,SZ),e(SZ,dIr),e(P3,cIr),e(ce,fIr),e(ce,B3),e(B3,NCe),e(NCe,mIr),e(B3,gIr),e(B3,RZ),e(RZ,hIr),e(B3,pIr),e(ce,_Ir),e(ce,N3),e(N3,ICe),e(ICe,uIr),e(N3,bIr),e(N3,PZ),e(PZ,vIr),e(N3,FIr),e(ce,TIr),e(ce,I3),e(I3,qCe),e(qCe,MIr),e(I3,EIr),e(I3,BZ),e(BZ,CIr),e(I3,wIr),e(ce,AIr),e(ce,q3),e(q3,jCe),e(jCe,LIr),e(q3,yIr),e(q3,NZ),e(NZ,xIr),e(q3,$Ir),e(ce,kIr),e(ce,j3),e(j3,DCe),e(DCe,SIr),e(j3,RIr),e(j3,IZ),e(IZ,PIr),e(j3,BIr),e(ce,NIr),e(ce,D3),e(D3,GCe),e(GCe,IIr),e(D3,qIr),e(D3,qZ),e(qZ,jIr),e(D3,DIr),e(ce,GIr),e(ce,G3),e(G3,OCe),e(OCe,OIr),e(G3,VIr),e(G3,jZ),e(jZ,XIr),e(G3,zIr),e(ce,QIr),e(ce,O3),e(O3,VCe),e(VCe,WIr),e(O3,HIr),e(O3,DZ),e(DZ,UIr),e(O3,JIr),e(ce,YIr),e(ce,V3),e(V3,XCe),e(XCe,KIr),e(V3,ZIr),e(V3,GZ),e(GZ,eqr),e(V3,oqr),e(Dr,rqr),M(X3,Dr,null),b(f,Rze,u),b(f,Vc,u),e(Vc,z3),e(z3,zCe),M(Kx,zCe,null),e(Vc,tqr),e(Vc,QCe),e(QCe,aqr),b(f,Pze,u),b(f,gr,u),M(Zx,gr,null),e(gr,nqr),e(gr,Xc),e(Xc,sqr),e(Xc,OZ),e(OZ,lqr),e(Xc,iqr),e(Xc,VZ),e(VZ,dqr),e(Xc,cqr),e(gr,fqr),e(gr,e$),e(e$,mqr),e(e$,WCe),e(WCe,gqr),e(e$,hqr),e(gr,pqr),e(gr,zt),M(o$,zt,null),e(zt,_qr),e(zt,HCe),e(HCe,uqr),e(zt,bqr),e(zt,zc),e(zc,vqr),e(zc,UCe),e(UCe,Fqr),e(zc,Tqr),e(zc,XZ),e(XZ,Mqr),e(zc,Eqr),e(zt,Cqr),M(Q3,zt,null),e(gr,wqr),e(gr,Gr),M(r$,Gr,null),e(Gr,Aqr),e(Gr,JCe),e(JCe,Lqr),e(Gr,yqr),e(Gr,vn),e(vn,xqr),e(vn,YCe),e(YCe,$qr),e(vn,kqr),e(vn,KCe),e(KCe,Sqr),e(vn,Rqr),e(vn,ZCe),e(ZCe,Pqr),e(vn,Bqr),e(Gr,Nqr),e(Gr,e3e),e(e3e,W3),e(W3,o3e),e(o3e,Iqr),e(W3,qqr),e(W3,zZ),e(zZ,jqr),e(W3,Dqr),e(Gr,Gqr),M(H3,Gr,null),b(f,Bze,u),b(f,Qc,u),e(Qc,U3),e(U3,r3e),M(t$,r3e,null),e(Qc,Oqr),e(Qc,t3e),e(t3e,Vqr),b(f,Nze,u),b(f,hr,u),M(a$,hr,null),e(hr,Xqr),e(hr,Wc),e(Wc,zqr),e(Wc,QZ),e(QZ,Qqr),e(Wc,Wqr),e(Wc,WZ),e(WZ,Hqr),e(Wc,Uqr),e(hr,Jqr),e(hr,n$),e(n$,Yqr),e(n$,a3e),e(a3e,Kqr),e(n$,Zqr),e(hr,ejr),e(hr,Qt),M(s$,Qt,null),e(Qt,ojr),e(Qt,n3e),e(n3e,rjr),e(Qt,tjr),e(Qt,Hc),e(Hc,ajr),e(Hc,s3e),e(s3e,njr),e(Hc,sjr),e(Hc,HZ),e(HZ,ljr),e(Hc,ijr),e(Qt,djr),M(J3,Qt,null),e(hr,cjr),e(hr,Or),M(l$,Or,null),e(Or,fjr),e(Or,l3e),e(l3e,mjr),e(Or,gjr),e(Or,Fn),e(Fn,hjr),e(Fn,i3e),e(i3e,pjr),e(Fn,_jr),e(Fn,d3e),e(d3e,ujr),e(Fn,bjr),e(Fn,c3e),e(c3e,vjr),e(Fn,Fjr),e(Or,Tjr),e(Or,f3e),e(f3e,Y3),e(Y3,m3e),e(m3e,Mjr),e(Y3,Ejr),e(Y3,UZ),e(UZ,Cjr),e(Y3,wjr),e(Or,Ajr),M(K3,Or,null),b(f,Ize,u),b(f,Uc,u),e(Uc,Z3),e(Z3,g3e),M(i$,g3e,null),e(Uc,Ljr),e(Uc,h3e),e(h3e,yjr),b(f,qze,u),b(f,pr,u),M(d$,pr,null),e(pr,xjr),e(pr,Jc),e(Jc,$jr),e(Jc,JZ),e(JZ,kjr),e(Jc,Sjr),e(Jc,YZ),e(YZ,Rjr),e(Jc,Pjr),e(pr,Bjr),e(pr,c$),e(c$,Njr),e(c$,p3e),e(p3e,Ijr),e(c$,qjr),e(pr,jjr),e(pr,Wt),M(f$,Wt,null),e(Wt,Djr),e(Wt,_3e),e(_3e,Gjr),e(Wt,Ojr),e(Wt,Yc),e(Yc,Vjr),e(Yc,u3e),e(u3e,Xjr),e(Yc,zjr),e(Yc,KZ),e(KZ,Qjr),e(Yc,Wjr),e(Wt,Hjr),M(e5,Wt,null),e(pr,Ujr),e(pr,Vr),M(m$,Vr,null),e(Vr,Jjr),e(Vr,b3e),e(b3e,Yjr),e(Vr,Kjr),e(Vr,Tn),e(Tn,Zjr),e(Tn,v3e),e(v3e,eDr),e(Tn,oDr),e(Tn,F3e),e(F3e,rDr),e(Tn,tDr),e(Tn,T3e),e(T3e,aDr),e(Tn,nDr),e(Vr,sDr),e(Vr,oe),e(oe,o5),e(o5,M3e),e(M3e,lDr),e(o5,iDr),e(o5,ZZ),e(ZZ,dDr),e(o5,cDr),e(oe,fDr),e(oe,r5),e(r5,E3e),e(E3e,mDr),e(r5,gDr),e(r5,eee),e(eee,hDr),e(r5,pDr),e(oe,_Dr),e(oe,t5),e(t5,C3e),e(C3e,uDr),e(t5,bDr),e(t5,oee),e(oee,vDr),e(t5,FDr),e(oe,TDr),e(oe,a5),e(a5,w3e),e(w3e,MDr),e(a5,EDr),e(a5,ree),e(ree,CDr),e(a5,wDr),e(oe,ADr),e(oe,n5),e(n5,A3e),e(A3e,LDr),e(n5,yDr),e(n5,tee),e(tee,xDr),e(n5,$Dr),e(oe,kDr),e(oe,s5),e(s5,L3e),e(L3e,SDr),e(s5,RDr),e(s5,aee),e(aee,PDr),e(s5,BDr),e(oe,NDr),e(oe,l5),e(l5,y3e),e(y3e,IDr),e(l5,qDr),e(l5,nee),e(nee,jDr),e(l5,DDr),e(oe,GDr),e(oe,i5),e(i5,x3e),e(x3e,ODr),e(i5,VDr),e(i5,see),e(see,XDr),e(i5,zDr),e(oe,QDr),e(oe,d5),e(d5,$3e),e($3e,WDr),e(d5,HDr),e(d5,lee),e(lee,UDr),e(d5,JDr),e(oe,YDr),e(oe,c5),e(c5,k3e),e(k3e,KDr),e(c5,ZDr),e(c5,iee),e(iee,eGr),e(c5,oGr),e(oe,rGr),e(oe,f5),e(f5,S3e),e(S3e,tGr),e(f5,aGr),e(f5,dee),e(dee,nGr),e(f5,sGr),e(oe,lGr),e(oe,m5),e(m5,R3e),e(R3e,iGr),e(m5,dGr),e(m5,cee),e(cee,cGr),e(m5,fGr),e(oe,mGr),e(oe,g5),e(g5,P3e),e(P3e,gGr),e(g5,hGr),e(g5,fee),e(fee,pGr),e(g5,_Gr),e(oe,uGr),e(oe,h5),e(h5,B3e),e(B3e,bGr),e(h5,vGr),e(h5,mee),e(mee,FGr),e(h5,TGr),e(oe,MGr),e(oe,p5),e(p5,N3e),e(N3e,EGr),e(p5,CGr),e(p5,gee),e(gee,wGr),e(p5,AGr),e(oe,LGr),e(oe,_5),e(_5,I3e),e(I3e,yGr),e(_5,xGr),e(_5,hee),e(hee,$Gr),e(_5,kGr),e(oe,SGr),e(oe,u5),e(u5,q3e),e(q3e,RGr),e(u5,PGr),e(u5,pee),e(pee,BGr),e(u5,NGr),e(oe,IGr),e(oe,b5),e(b5,j3e),e(j3e,qGr),e(b5,jGr),e(b5,_ee),e(_ee,DGr),e(b5,GGr),e(oe,OGr),e(oe,v5),e(v5,D3e),e(D3e,VGr),e(v5,XGr),e(v5,uee),e(uee,zGr),e(v5,QGr),e(oe,WGr),e(oe,F5),e(F5,G3e),e(G3e,HGr),e(F5,UGr),e(F5,bee),e(bee,JGr),e(F5,YGr),e(oe,KGr),e(oe,T5),e(T5,O3e),e(O3e,ZGr),e(T5,eOr),e(T5,vee),e(vee,oOr),e(T5,rOr),e(oe,tOr),e(oe,M5),e(M5,V3e),e(V3e,aOr),e(M5,nOr),e(M5,Fee),e(Fee,sOr),e(M5,lOr),e(oe,iOr),e(oe,E5),e(E5,X3e),e(X3e,dOr),e(E5,cOr),e(E5,Tee),e(Tee,fOr),e(E5,mOr),e(oe,gOr),e(oe,C5),e(C5,z3e),e(z3e,hOr),e(C5,pOr),e(C5,Mee),e(Mee,_Or),e(C5,uOr),e(oe,bOr),e(oe,w5),e(w5,Q3e),e(Q3e,vOr),e(w5,FOr),e(w5,Eee),e(Eee,TOr),e(w5,MOr),e(oe,EOr),e(oe,A5),e(A5,W3e),e(W3e,COr),e(A5,wOr),e(A5,Cee),e(Cee,AOr),e(A5,LOr),e(oe,yOr),e(oe,L5),e(L5,H3e),e(H3e,xOr),e(L5,$Or),e(L5,wee),e(wee,kOr),e(L5,SOr),e(Vr,ROr),M(y5,Vr,null),b(f,jze,u),b(f,Kc,u),e(Kc,x5),e(x5,U3e),M(g$,U3e,null),e(Kc,POr),e(Kc,J3e),e(J3e,BOr),b(f,Dze,u),b(f,_r,u),M(h$,_r,null),e(_r,NOr),e(_r,Zc),e(Zc,IOr),e(Zc,Aee),e(Aee,qOr),e(Zc,jOr),e(Zc,Lee),e(Lee,DOr),e(Zc,GOr),e(_r,OOr),e(_r,p$),e(p$,VOr),e(p$,Y3e),e(Y3e,XOr),e(p$,zOr),e(_r,QOr),e(_r,Ht),M(_$,Ht,null),e(Ht,WOr),e(Ht,K3e),e(K3e,HOr),e(Ht,UOr),e(Ht,ef),e(ef,JOr),e(ef,Z3e),e(Z3e,YOr),e(ef,KOr),e(ef,yee),e(yee,ZOr),e(ef,eVr),e(Ht,oVr),M($5,Ht,null),e(_r,rVr),e(_r,Xr),M(u$,Xr,null),e(Xr,tVr),e(Xr,e5e),e(e5e,aVr),e(Xr,nVr),e(Xr,Mn),e(Mn,sVr),e(Mn,o5e),e(o5e,lVr),e(Mn,iVr),e(Mn,r5e),e(r5e,dVr),e(Mn,cVr),e(Mn,t5e),e(t5e,fVr),e(Mn,mVr),e(Xr,gVr),e(Xr,xe),e(xe,k5),e(k5,a5e),e(a5e,hVr),e(k5,pVr),e(k5,xee),e(xee,_Vr),e(k5,uVr),e(xe,bVr),e(xe,S5),e(S5,n5e),e(n5e,vVr),e(S5,FVr),e(S5,$ee),e($ee,TVr),e(S5,MVr),e(xe,EVr),e(xe,R5),e(R5,s5e),e(s5e,CVr),e(R5,wVr),e(R5,kee),e(kee,AVr),e(R5,LVr),e(xe,yVr),e(xe,P5),e(P5,l5e),e(l5e,xVr),e(P5,$Vr),e(P5,See),e(See,kVr),e(P5,SVr),e(xe,RVr),e(xe,B5),e(B5,i5e),e(i5e,PVr),e(B5,BVr),e(B5,Ree),e(Ree,NVr),e(B5,IVr),e(xe,qVr),e(xe,N5),e(N5,d5e),e(d5e,jVr),e(N5,DVr),e(N5,Pee),e(Pee,GVr),e(N5,OVr),e(xe,VVr),e(xe,I5),e(I5,c5e),e(c5e,XVr),e(I5,zVr),e(I5,Bee),e(Bee,QVr),e(I5,WVr),e(xe,HVr),e(xe,q5),e(q5,f5e),e(f5e,UVr),e(q5,JVr),e(q5,Nee),e(Nee,YVr),e(q5,KVr),e(xe,ZVr),e(xe,j5),e(j5,m5e),e(m5e,eXr),e(j5,oXr),e(j5,Iee),e(Iee,rXr),e(j5,tXr),e(xe,aXr),e(xe,D5),e(D5,g5e),e(g5e,nXr),e(D5,sXr),e(D5,qee),e(qee,lXr),e(D5,iXr),e(Xr,dXr),M(G5,Xr,null),b(f,Gze,u),b(f,of,u),e(of,O5),e(O5,h5e),M(b$,h5e,null),e(of,cXr),e(of,p5e),e(p5e,fXr),b(f,Oze,u),b(f,ur,u),M(v$,ur,null),e(ur,mXr),e(ur,rf),e(rf,gXr),e(rf,jee),e(jee,hXr),e(rf,pXr),e(rf,Dee),e(Dee,_Xr),e(rf,uXr),e(ur,bXr),e(ur,F$),e(F$,vXr),e(F$,_5e),e(_5e,FXr),e(F$,TXr),e(ur,MXr),e(ur,Ut),M(T$,Ut,null),e(Ut,EXr),e(Ut,u5e),e(u5e,CXr),e(Ut,wXr),e(Ut,tf),e(tf,AXr),e(tf,b5e),e(b5e,LXr),e(tf,yXr),e(tf,Gee),e(Gee,xXr),e(tf,$Xr),e(Ut,kXr),M(V5,Ut,null),e(ur,SXr),e(ur,zr),M(M$,zr,null),e(zr,RXr),e(zr,v5e),e(v5e,PXr),e(zr,BXr),e(zr,En),e(En,NXr),e(En,F5e),e(F5e,IXr),e(En,qXr),e(En,T5e),e(T5e,jXr),e(En,DXr),e(En,M5e),e(M5e,GXr),e(En,OXr),e(zr,VXr),e(zr,Ee),e(Ee,X5),e(X5,E5e),e(E5e,XXr),e(X5,zXr),e(X5,Oee),e(Oee,QXr),e(X5,WXr),e(Ee,HXr),e(Ee,z5),e(z5,C5e),e(C5e,UXr),e(z5,JXr),e(z5,Vee),e(Vee,YXr),e(z5,KXr),e(Ee,ZXr),e(Ee,Q5),e(Q5,w5e),e(w5e,ezr),e(Q5,ozr),e(Q5,Xee),e(Xee,rzr),e(Q5,tzr),e(Ee,azr),e(Ee,W5),e(W5,A5e),e(A5e,nzr),e(W5,szr),e(W5,zee),e(zee,lzr),e(W5,izr),e(Ee,dzr),e(Ee,H5),e(H5,L5e),e(L5e,czr),e(H5,fzr),e(H5,Qee),e(Qee,mzr),e(H5,gzr),e(Ee,hzr),e(Ee,U5),e(U5,y5e),e(y5e,pzr),e(U5,_zr),e(U5,Wee),e(Wee,uzr),e(U5,bzr),e(Ee,vzr),e(Ee,J5),e(J5,x5e),e(x5e,Fzr),e(J5,Tzr),e(J5,Hee),e(Hee,Mzr),e(J5,Ezr),e(Ee,Czr),e(Ee,Y5),e(Y5,$5e),e($5e,wzr),e(Y5,Azr),e(Y5,Uee),e(Uee,Lzr),e(Y5,yzr),e(Ee,xzr),e(Ee,K5),e(K5,k5e),e(k5e,$zr),e(K5,kzr),e(K5,Jee),e(Jee,Szr),e(K5,Rzr),e(Ee,Pzr),e(Ee,Z5),e(Z5,S5e),e(S5e,Bzr),e(Z5,Nzr),e(Z5,Yee),e(Yee,Izr),e(Z5,qzr),e(Ee,jzr),e(Ee,e0),e(e0,R5e),e(R5e,Dzr),e(e0,Gzr),e(e0,Kee),e(Kee,Ozr),e(e0,Vzr),e(Ee,Xzr),e(Ee,o0),e(o0,P5e),e(P5e,zzr),e(o0,Qzr),e(o0,Zee),e(Zee,Wzr),e(o0,Hzr),e(Ee,Uzr),e(Ee,r0),e(r0,B5e),e(B5e,Jzr),e(r0,Yzr),e(r0,eoe),e(eoe,Kzr),e(r0,Zzr),e(zr,eQr),M(t0,zr,null),b(f,Vze,u),b(f,af,u),e(af,a0),e(a0,N5e),M(E$,N5e,null),e(af,oQr),e(af,I5e),e(I5e,rQr),b(f,Xze,u),b(f,br,u),M(C$,br,null),e(br,tQr),e(br,nf),e(nf,aQr),e(nf,ooe),e(ooe,nQr),e(nf,sQr),e(nf,roe),e(roe,lQr),e(nf,iQr),e(br,dQr),e(br,w$),e(w$,cQr),e(w$,q5e),e(q5e,fQr),e(w$,mQr),e(br,gQr),e(br,Jt),M(A$,Jt,null),e(Jt,hQr),e(Jt,j5e),e(j5e,pQr),e(Jt,_Qr),e(Jt,sf),e(sf,uQr),e(sf,D5e),e(D5e,bQr),e(sf,vQr),e(sf,toe),e(toe,FQr),e(sf,TQr),e(Jt,MQr),M(n0,Jt,null),e(br,EQr),e(br,Qr),M(L$,Qr,null),e(Qr,CQr),e(Qr,G5e),e(G5e,wQr),e(Qr,AQr),e(Qr,Cn),e(Cn,LQr),e(Cn,O5e),e(O5e,yQr),e(Cn,xQr),e(Cn,V5e),e(V5e,$Qr),e(Cn,kQr),e(Cn,X5e),e(X5e,SQr),e(Cn,RQr),e(Qr,PQr),e(Qr,$e),e($e,s0),e(s0,z5e),e(z5e,BQr),e(s0,NQr),e(s0,aoe),e(aoe,IQr),e(s0,qQr),e($e,jQr),e($e,l0),e(l0,Q5e),e(Q5e,DQr),e(l0,GQr),e(l0,noe),e(noe,OQr),e(l0,VQr),e($e,XQr),e($e,i0),e(i0,W5e),e(W5e,zQr),e(i0,QQr),e(i0,soe),e(soe,WQr),e(i0,HQr),e($e,UQr),e($e,d0),e(d0,H5e),e(H5e,JQr),e(d0,YQr),e(d0,loe),e(loe,KQr),e(d0,ZQr),e($e,eWr),e($e,c0),e(c0,U5e),e(U5e,oWr),e(c0,rWr),e(c0,ioe),e(ioe,tWr),e(c0,aWr),e($e,nWr),e($e,f0),e(f0,J5e),e(J5e,sWr),e(f0,lWr),e(f0,doe),e(doe,iWr),e(f0,dWr),e($e,cWr),e($e,m0),e(m0,Y5e),e(Y5e,fWr),e(m0,mWr),e(m0,coe),e(coe,gWr),e(m0,hWr),e($e,pWr),e($e,g0),e(g0,K5e),e(K5e,_Wr),e(g0,uWr),e(g0,foe),e(foe,bWr),e(g0,vWr),e($e,FWr),e($e,h0),e(h0,Z5e),e(Z5e,TWr),e(h0,MWr),e(h0,moe),e(moe,EWr),e(h0,CWr),e($e,wWr),e($e,p0),e(p0,e0e),e(e0e,AWr),e(p0,LWr),e(p0,goe),e(goe,yWr),e(p0,xWr),e(Qr,$Wr),M(_0,Qr,null),b(f,zze,u),b(f,lf,u),e(lf,u0),e(u0,o0e),M(y$,o0e,null),e(lf,kWr),e(lf,r0e),e(r0e,SWr),b(f,Qze,u),b(f,vr,u),M(x$,vr,null),e(vr,RWr),e(vr,df),e(df,PWr),e(df,hoe),e(hoe,BWr),e(df,NWr),e(df,poe),e(poe,IWr),e(df,qWr),e(vr,jWr),e(vr,$$),e($$,DWr),e($$,t0e),e(t0e,GWr),e($$,OWr),e(vr,VWr),e(vr,Yt),M(k$,Yt,null),e(Yt,XWr),e(Yt,a0e),e(a0e,zWr),e(Yt,QWr),e(Yt,cf),e(cf,WWr),e(cf,n0e),e(n0e,HWr),e(cf,UWr),e(cf,_oe),e(_oe,JWr),e(cf,YWr),e(Yt,KWr),M(b0,Yt,null),e(vr,ZWr),e(vr,Wr),M(S$,Wr,null),e(Wr,eHr),e(Wr,s0e),e(s0e,oHr),e(Wr,rHr),e(Wr,wn),e(wn,tHr),e(wn,l0e),e(l0e,aHr),e(wn,nHr),e(wn,i0e),e(i0e,sHr),e(wn,lHr),e(wn,d0e),e(d0e,iHr),e(wn,dHr),e(Wr,cHr),e(Wr,ke),e(ke,v0),e(v0,c0e),e(c0e,fHr),e(v0,mHr),e(v0,uoe),e(uoe,gHr),e(v0,hHr),e(ke,pHr),e(ke,F0),e(F0,f0e),e(f0e,_Hr),e(F0,uHr),e(F0,boe),e(boe,bHr),e(F0,vHr),e(ke,FHr),e(ke,T0),e(T0,m0e),e(m0e,THr),e(T0,MHr),e(T0,voe),e(voe,EHr),e(T0,CHr),e(ke,wHr),e(ke,M0),e(M0,g0e),e(g0e,AHr),e(M0,LHr),e(M0,Foe),e(Foe,yHr),e(M0,xHr),e(ke,$Hr),e(ke,E0),e(E0,h0e),e(h0e,kHr),e(E0,SHr),e(E0,Toe),e(Toe,RHr),e(E0,PHr),e(ke,BHr),e(ke,C0),e(C0,p0e),e(p0e,NHr),e(C0,IHr),e(C0,Moe),e(Moe,qHr),e(C0,jHr),e(ke,DHr),e(ke,w0),e(w0,_0e),e(_0e,GHr),e(w0,OHr),e(w0,Eoe),e(Eoe,VHr),e(w0,XHr),e(ke,zHr),e(ke,A0),e(A0,u0e),e(u0e,QHr),e(A0,WHr),e(A0,Coe),e(Coe,HHr),e(A0,UHr),e(ke,JHr),e(ke,L0),e(L0,b0e),e(b0e,YHr),e(L0,KHr),e(L0,woe),e(woe,ZHr),e(L0,eUr),e(ke,oUr),e(ke,y0),e(y0,v0e),e(v0e,rUr),e(y0,tUr),e(y0,Aoe),e(Aoe,aUr),e(y0,nUr),e(Wr,sUr),M(x0,Wr,null),b(f,Wze,u),b(f,ff,u),e(ff,$0),e($0,F0e),M(R$,F0e,null),e(ff,lUr),e(ff,T0e),e(T0e,iUr),b(f,Hze,u),b(f,Fr,u),M(P$,Fr,null),e(Fr,dUr),e(Fr,mf),e(mf,cUr),e(mf,Loe),e(Loe,fUr),e(mf,mUr),e(mf,yoe),e(yoe,gUr),e(mf,hUr),e(Fr,pUr),e(Fr,B$),e(B$,_Ur),e(B$,M0e),e(M0e,uUr),e(B$,bUr),e(Fr,vUr),e(Fr,Kt),M(N$,Kt,null),e(Kt,FUr),e(Kt,E0e),e(E0e,TUr),e(Kt,MUr),e(Kt,gf),e(gf,EUr),e(gf,C0e),e(C0e,CUr),e(gf,wUr),e(gf,xoe),e(xoe,AUr),e(gf,LUr),e(Kt,yUr),M(k0,Kt,null),e(Fr,xUr),e(Fr,Hr),M(I$,Hr,null),e(Hr,$Ur),e(Hr,w0e),e(w0e,kUr),e(Hr,SUr),e(Hr,An),e(An,RUr),e(An,A0e),e(A0e,PUr),e(An,BUr),e(An,L0e),e(L0e,NUr),e(An,IUr),e(An,y0e),e(y0e,qUr),e(An,jUr),e(Hr,DUr),e(Hr,Se),e(Se,S0),e(S0,x0e),e(x0e,GUr),e(S0,OUr),e(S0,$oe),e($oe,VUr),e(S0,XUr),e(Se,zUr),e(Se,R0),e(R0,$0e),e($0e,QUr),e(R0,WUr),e(R0,koe),e(koe,HUr),e(R0,UUr),e(Se,JUr),e(Se,P0),e(P0,k0e),e(k0e,YUr),e(P0,KUr),e(P0,Soe),e(Soe,ZUr),e(P0,eJr),e(Se,oJr),e(Se,B0),e(B0,S0e),e(S0e,rJr),e(B0,tJr),e(B0,Roe),e(Roe,aJr),e(B0,nJr),e(Se,sJr),e(Se,N0),e(N0,R0e),e(R0e,lJr),e(N0,iJr),e(N0,Poe),e(Poe,dJr),e(N0,cJr),e(Se,fJr),e(Se,I0),e(I0,P0e),e(P0e,mJr),e(I0,gJr),e(I0,Boe),e(Boe,hJr),e(I0,pJr),e(Se,_Jr),e(Se,q0),e(q0,B0e),e(B0e,uJr),e(q0,bJr),e(q0,Noe),e(Noe,vJr),e(q0,FJr),e(Se,TJr),e(Se,j0),e(j0,N0e),e(N0e,MJr),e(j0,EJr),e(j0,Ioe),e(Ioe,CJr),e(j0,wJr),e(Se,AJr),e(Se,D0),e(D0,I0e),e(I0e,LJr),e(D0,yJr),e(D0,qoe),e(qoe,xJr),e(D0,$Jr),e(Se,kJr),e(Se,G0),e(G0,q0e),e(q0e,SJr),e(G0,RJr),e(G0,joe),e(joe,PJr),e(G0,BJr),e(Hr,NJr),M(O0,Hr,null),b(f,Uze,u),b(f,hf,u),e(hf,V0),e(V0,j0e),M(q$,j0e,null),e(hf,IJr),e(hf,D0e),e(D0e,qJr),b(f,Jze,u),b(f,Tr,u),M(j$,Tr,null),e(Tr,jJr),e(Tr,pf),e(pf,DJr),e(pf,Doe),e(Doe,GJr),e(pf,OJr),e(pf,Goe),e(Goe,VJr),e(pf,XJr),e(Tr,zJr),e(Tr,D$),e(D$,QJr),e(D$,G0e),e(G0e,WJr),e(D$,HJr),e(Tr,UJr),e(Tr,Zt),M(G$,Zt,null),e(Zt,JJr),e(Zt,O0e),e(O0e,YJr),e(Zt,KJr),e(Zt,_f),e(_f,ZJr),e(_f,V0e),e(V0e,eYr),e(_f,oYr),e(_f,Ooe),e(Ooe,rYr),e(_f,tYr),e(Zt,aYr),M(X0,Zt,null),e(Tr,nYr),e(Tr,Ur),M(O$,Ur,null),e(Ur,sYr),e(Ur,X0e),e(X0e,lYr),e(Ur,iYr),e(Ur,Ln),e(Ln,dYr),e(Ln,z0e),e(z0e,cYr),e(Ln,fYr),e(Ln,Q0e),e(Q0e,mYr),e(Ln,gYr),e(Ln,W0e),e(W0e,hYr),e(Ln,pYr),e(Ur,_Yr),e(Ur,Re),e(Re,z0),e(z0,H0e),e(H0e,uYr),e(z0,bYr),e(z0,Voe),e(Voe,vYr),e(z0,FYr),e(Re,TYr),e(Re,Q0),e(Q0,U0e),e(U0e,MYr),e(Q0,EYr),e(Q0,Xoe),e(Xoe,CYr),e(Q0,wYr),e(Re,AYr),e(Re,W0),e(W0,J0e),e(J0e,LYr),e(W0,yYr),e(W0,zoe),e(zoe,xYr),e(W0,$Yr),e(Re,kYr),e(Re,H0),e(H0,Y0e),e(Y0e,SYr),e(H0,RYr),e(H0,Qoe),e(Qoe,PYr),e(H0,BYr),e(Re,NYr),e(Re,U0),e(U0,K0e),e(K0e,IYr),e(U0,qYr),e(U0,Woe),e(Woe,jYr),e(U0,DYr),e(Re,GYr),e(Re,J0),e(J0,Z0e),e(Z0e,OYr),e(J0,VYr),e(J0,Hoe),e(Hoe,XYr),e(J0,zYr),e(Re,QYr),e(Re,Y0),e(Y0,ewe),e(ewe,WYr),e(Y0,HYr),e(Y0,Uoe),e(Uoe,UYr),e(Y0,JYr),e(Re,YYr),e(Re,K0),e(K0,owe),e(owe,KYr),e(K0,ZYr),e(K0,Joe),e(Joe,eKr),e(K0,oKr),e(Re,rKr),e(Re,Z0),e(Z0,rwe),e(rwe,tKr),e(Z0,aKr),e(Z0,Yoe),e(Yoe,nKr),e(Z0,sKr),e(Re,lKr),e(Re,ew),e(ew,twe),e(twe,iKr),e(ew,dKr),e(ew,Koe),e(Koe,cKr),e(ew,fKr),e(Ur,mKr),M(ow,Ur,null),b(f,Yze,u),b(f,uf,u),e(uf,rw),e(rw,awe),M(V$,awe,null),e(uf,gKr),e(uf,nwe),e(nwe,hKr),b(f,Kze,u),b(f,Mr,u),M(X$,Mr,null),e(Mr,pKr),e(Mr,bf),e(bf,_Kr),e(bf,Zoe),e(Zoe,uKr),e(bf,bKr),e(bf,ere),e(ere,vKr),e(bf,FKr),e(Mr,TKr),e(Mr,z$),e(z$,MKr),e(z$,swe),e(swe,EKr),e(z$,CKr),e(Mr,wKr),e(Mr,ea),M(Q$,ea,null),e(ea,AKr),e(ea,lwe),e(lwe,LKr),e(ea,yKr),e(ea,vf),e(vf,xKr),e(vf,iwe),e(iwe,$Kr),e(vf,kKr),e(vf,ore),e(ore,SKr),e(vf,RKr),e(ea,PKr),M(tw,ea,null),e(Mr,BKr),e(Mr,Jr),M(W$,Jr,null),e(Jr,NKr),e(Jr,dwe),e(dwe,IKr),e(Jr,qKr),e(Jr,yn),e(yn,jKr),e(yn,cwe),e(cwe,DKr),e(yn,GKr),e(yn,fwe),e(fwe,OKr),e(yn,VKr),e(yn,mwe),e(mwe,XKr),e(yn,zKr),e(Jr,QKr),e(Jr,Ve),e(Ve,aw),e(aw,gwe),e(gwe,WKr),e(aw,HKr),e(aw,rre),e(rre,UKr),e(aw,JKr),e(Ve,YKr),e(Ve,nw),e(nw,hwe),e(hwe,KKr),e(nw,ZKr),e(nw,tre),e(tre,eZr),e(nw,oZr),e(Ve,rZr),e(Ve,sw),e(sw,pwe),e(pwe,tZr),e(sw,aZr),e(sw,are),e(are,nZr),e(sw,sZr),e(Ve,lZr),e(Ve,lw),e(lw,_we),e(_we,iZr),e(lw,dZr),e(lw,nre),e(nre,cZr),e(lw,fZr),e(Ve,mZr),e(Ve,iw),e(iw,uwe),e(uwe,gZr),e(iw,hZr),e(iw,sre),e(sre,pZr),e(iw,_Zr),e(Ve,uZr),e(Ve,dw),e(dw,bwe),e(bwe,bZr),e(dw,vZr),e(dw,lre),e(lre,FZr),e(dw,TZr),e(Ve,MZr),e(Ve,cw),e(cw,vwe),e(vwe,EZr),e(cw,CZr),e(cw,ire),e(ire,wZr),e(cw,AZr),e(Ve,LZr),e(Ve,fw),e(fw,Fwe),e(Fwe,yZr),e(fw,xZr),e(fw,dre),e(dre,$Zr),e(fw,kZr),e(Jr,SZr),M(mw,Jr,null),b(f,Zze,u),b(f,Ff,u),e(Ff,gw),e(gw,Twe),M(H$,Twe,null),e(Ff,RZr),e(Ff,Mwe),e(Mwe,PZr),b(f,eQe,u),b(f,Er,u),M(U$,Er,null),e(Er,BZr),e(Er,Tf),e(Tf,NZr),e(Tf,cre),e(cre,IZr),e(Tf,qZr),e(Tf,fre),e(fre,jZr),e(Tf,DZr),e(Er,GZr),e(Er,J$),e(J$,OZr),e(J$,Ewe),e(Ewe,VZr),e(J$,XZr),e(Er,zZr),e(Er,oa),M(Y$,oa,null),e(oa,QZr),e(oa,Cwe),e(Cwe,WZr),e(oa,HZr),e(oa,Mf),e(Mf,UZr),e(Mf,wwe),e(wwe,JZr),e(Mf,YZr),e(Mf,mre),e(mre,KZr),e(Mf,ZZr),e(oa,eet),M(hw,oa,null),e(Er,oet),e(Er,Yr),M(K$,Yr,null),e(Yr,ret),e(Yr,Awe),e(Awe,tet),e(Yr,aet),e(Yr,xn),e(xn,net),e(xn,Lwe),e(Lwe,set),e(xn,iet),e(xn,ywe),e(ywe,det),e(xn,cet),e(xn,xwe),e(xwe,fet),e(xn,met),e(Yr,get),e(Yr,Xe),e(Xe,pw),e(pw,$we),e($we,het),e(pw,pet),e(pw,gre),e(gre,_et),e(pw,uet),e(Xe,bet),e(Xe,_w),e(_w,kwe),e(kwe,vet),e(_w,Fet),e(_w,hre),e(hre,Tet),e(_w,Met),e(Xe,Eet),e(Xe,uw),e(uw,Swe),e(Swe,Cet),e(uw,wet),e(uw,pre),e(pre,Aet),e(uw,Let),e(Xe,yet),e(Xe,bw),e(bw,Rwe),e(Rwe,xet),e(bw,$et),e(bw,_re),e(_re,ket),e(bw,Set),e(Xe,Ret),e(Xe,vw),e(vw,Pwe),e(Pwe,Pet),e(vw,Bet),e(vw,ure),e(ure,Net),e(vw,Iet),e(Xe,qet),e(Xe,Fw),e(Fw,Bwe),e(Bwe,jet),e(Fw,Det),e(Fw,bre),e(bre,Get),e(Fw,Oet),e(Xe,Vet),e(Xe,Tw),e(Tw,Nwe),e(Nwe,Xet),e(Tw,zet),e(Tw,vre),e(vre,Qet),e(Tw,Wet),e(Xe,Het),e(Xe,Mw),e(Mw,Iwe),e(Iwe,Uet),e(Mw,Jet),e(Mw,Fre),e(Fre,Yet),e(Mw,Ket),e(Yr,Zet),M(Ew,Yr,null),b(f,oQe,u),b(f,Ef,u),e(Ef,Cw),e(Cw,qwe),M(Z$,qwe,null),e(Ef,eot),e(Ef,jwe),e(jwe,oot),b(f,rQe,u),b(f,Cr,u),M(ek,Cr,null),e(Cr,rot),e(Cr,Cf),e(Cf,tot),e(Cf,Tre),e(Tre,aot),e(Cf,not),e(Cf,Mre),e(Mre,sot),e(Cf,lot),e(Cr,iot),e(Cr,ok),e(ok,dot),e(ok,Dwe),e(Dwe,cot),e(ok,fot),e(Cr,mot),e(Cr,ra),M(rk,ra,null),e(ra,got),e(ra,Gwe),e(Gwe,hot),e(ra,pot),e(ra,wf),e(wf,_ot),e(wf,Owe),e(Owe,uot),e(wf,bot),e(wf,Ere),e(Ere,vot),e(wf,Fot),e(ra,Tot),M(ww,ra,null),e(Cr,Mot),e(Cr,Kr),M(tk,Kr,null),e(Kr,Eot),e(Kr,Vwe),e(Vwe,Cot),e(Kr,wot),e(Kr,$n),e($n,Aot),e($n,Xwe),e(Xwe,Lot),e($n,yot),e($n,zwe),e(zwe,xot),e($n,$ot),e($n,Qwe),e(Qwe,kot),e($n,Sot),e(Kr,Rot),e(Kr,Wwe),e(Wwe,Aw),e(Aw,Hwe),e(Hwe,Pot),e(Aw,Bot),e(Aw,Cre),e(Cre,Not),e(Aw,Iot),e(Kr,qot),M(Lw,Kr,null),b(f,tQe,u),b(f,Af,u),e(Af,yw),e(yw,Uwe),M(ak,Uwe,null),e(Af,jot),e(Af,Jwe),e(Jwe,Dot),b(f,aQe,u),b(f,wr,u),M(nk,wr,null),e(wr,Got),e(wr,Lf),e(Lf,Oot),e(Lf,wre),e(wre,Vot),e(Lf,Xot),e(Lf,Are),e(Are,zot),e(Lf,Qot),e(wr,Wot),e(wr,sk),e(sk,Hot),e(sk,Ywe),e(Ywe,Uot),e(sk,Jot),e(wr,Yot),e(wr,ta),M(lk,ta,null),e(ta,Kot),e(ta,Kwe),e(Kwe,Zot),e(ta,ert),e(ta,yf),e(yf,ort),e(yf,Zwe),e(Zwe,rrt),e(yf,trt),e(yf,Lre),e(Lre,art),e(yf,nrt),e(ta,srt),M(xw,ta,null),e(wr,lrt),e(wr,Zr),M(ik,Zr,null),e(Zr,irt),e(Zr,eAe),e(eAe,drt),e(Zr,crt),e(Zr,kn),e(kn,frt),e(kn,oAe),e(oAe,mrt),e(kn,grt),e(kn,rAe),e(rAe,hrt),e(kn,prt),e(kn,tAe),e(tAe,_rt),e(kn,urt),e(Zr,brt),e(Zr,dk),e(dk,$w),e($w,aAe),e(aAe,vrt),e($w,Frt),e($w,yre),e(yre,Trt),e($w,Mrt),e(dk,Ert),e(dk,kw),e(kw,nAe),e(nAe,Crt),e(kw,wrt),e(kw,xre),e(xre,Art),e(kw,Lrt),e(Zr,yrt),M(Sw,Zr,null),b(f,nQe,u),b(f,xf,u),e(xf,Rw),e(Rw,sAe),M(ck,sAe,null),e(xf,xrt),e(xf,lAe),e(lAe,$rt),b(f,sQe,u),b(f,Ar,u),M(fk,Ar,null),e(Ar,krt),e(Ar,$f),e($f,Srt),e($f,$re),e($re,Rrt),e($f,Prt),e($f,kre),e(kre,Brt),e($f,Nrt),e(Ar,Irt),e(Ar,mk),e(mk,qrt),e(mk,iAe),e(iAe,jrt),e(mk,Drt),e(Ar,Grt),e(Ar,aa),M(gk,aa,null),e(aa,Ort),e(aa,dAe),e(dAe,Vrt),e(aa,Xrt),e(aa,kf),e(kf,zrt),e(kf,cAe),e(cAe,Qrt),e(kf,Wrt),e(kf,Sre),e(Sre,Hrt),e(kf,Urt),e(aa,Jrt),M(Pw,aa,null),e(Ar,Yrt),e(Ar,et),M(hk,et,null),e(et,Krt),e(et,fAe),e(fAe,Zrt),e(et,ett),e(et,Sn),e(Sn,ott),e(Sn,mAe),e(mAe,rtt),e(Sn,ttt),e(Sn,gAe),e(gAe,att),e(Sn,ntt),e(Sn,hAe),e(hAe,stt),e(Sn,ltt),e(et,itt),e(et,pAe),e(pAe,Bw),e(Bw,_Ae),e(_Ae,dtt),e(Bw,ctt),e(Bw,Rre),e(Rre,ftt),e(Bw,mtt),e(et,gtt),M(Nw,et,null),lQe=!0},p(f,[u]){const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),Df.$set(pk);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),Kg.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),Ph.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),up.$set(vAe);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),bp.$set(_k);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),jp.$set(FAe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Dp.$set(Rn);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),Vp.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),Wu.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),Uu.$set(EAe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),O1.$set(uk);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),X1.$set(CAe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),S2.$set(bk);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),P2.$set(wAe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),Fb.$set(vk);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),Mb.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),Ob.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),Xb.$set(yAe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),Ov.$set(Sf);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),Xv.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),MF.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),CF.$set(kAe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),SF.$set(Fk);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),PF.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),b6.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),F6.$set(PAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),cT.$set(nt);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),mT.$set(Tk);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),pT.$set(BAe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),uT.$set(Mk);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),ST.$set(NAe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),PT.$set(st);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),IT.$set(IAe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),jT.$set(Rf);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),OT.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),XT.$set(jAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),o8.$set(L);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),t8.$set(Iw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),c8.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),m8.$set(GAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),C8.$set(qw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),A8.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),$8.$set(VAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),S8.$set(jw);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),j8.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),G8.$set(zAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),Q8.$set(Dw);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),H8.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),K8.$set(WAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),eM.$set(Gw);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),tM.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),nM.$set(UAe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),mM.$set(Ow);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),hM.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),uM.$set(YAe);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),vM.$set(Vw);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),p4.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),u4.$set(ZAe);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),G4.$set(Xw);const e7e={};u&2&&(e7e.$$scope={dirty:u,ctx:f}),V4.$set(e7e);const o7e={};u&2&&(o7e.$$scope={dirty:u,ctx:f}),tE.$set(o7e);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),nE.$set(zw);const r7e={};u&2&&(r7e.$$scope={dirty:u,ctx:f}),mE.$set(r7e);const t7e={};u&2&&(t7e.$$scope={dirty:u,ctx:f}),hE.$set(t7e);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),BE.$set(Qw);const a7e={};u&2&&(a7e.$$scope={dirty:u,ctx:f}),IE.$set(a7e);const n7e={};u&2&&(n7e.$$scope={dirty:u,ctx:f}),HE.$set(n7e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),JE.$set(Ww);const s7e={};u&2&&(s7e.$$scope={dirty:u,ctx:f}),EC.$set(s7e);const l7e={};u&2&&(l7e.$$scope={dirty:u,ctx:f}),wC.$set(l7e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),VC.$set(Hw);const i7e={};u&2&&(i7e.$$scope={dirty:u,ctx:f}),zC.$set(i7e);const d7e={};u&2&&(d7e.$$scope={dirty:u,ctx:f}),HC.$set(d7e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),JC.$set(Uw);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),KC.$set(c7e);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),e3.$set(f7e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),T3.$set(Jw);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),E3.$set(m7e);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),X3.$set(g7e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),Q3.$set(Yw);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),H3.$set(h7e);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),J3.$set(p7e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),K3.$set(Kw);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),e5.$set(_7e);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),y5.$set(u7e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),$5.$set(Zw);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),G5.$set(b7e);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),V5.$set(v7e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),t0.$set(eA);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),n0.$set(F7e);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),_0.$set(T7e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),b0.$set(oA);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),x0.$set(M7e);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),k0.$set(E7e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),O0.$set(rA);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),X0.$set(C7e);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),ow.$set(w7e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),tw.$set(tA);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),mw.$set(A7e);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),hw.$set(L7e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),Ew.$set(aA);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),ww.$set(y7e);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),Lw.$set(x7e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),xw.$set(nA);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),Sw.$set($7e);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),Pw.$set(k7e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),Nw.$set(sA)},i(f){lQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(Df.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(Kg.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(Ph.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(EL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(xL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(Vp.$$.fragment,f),E(BL.$$.fragment,f),E(Wu.$$.fragment,f),E(NL.$$.fragment,f),E(IL.$$.fragment,f),E(jL.$$.fragment,f),E(Uu.$$.fragment,f),E(DL.$$.fragment,f),E(O1.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(X1.$$.fragment,f),E(zL.$$.fragment,f),E(S2.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(P2.$$.fragment,f),E(JL.$$.fragment,f),E(Fb.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(Mb.$$.fragment,f),E(oy.$$.fragment,f),E(Ob.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(Xb.$$.fragment,f),E(sy.$$.fragment,f),E(Ov.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(Xv.$$.fragment,f),E(fy.$$.fragment,f),E(MF.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(CF.$$.fragment,f),E(_y.$$.fragment,f),E(SF.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(PF.$$.fragment,f),E(Ty.$$.fragment,f),E(b6.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(F6.$$.fragment,f),E(Ay.$$.fragment,f),E(cT.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(mT.$$.fragment,f),E(ky.$$.fragment,f),E(pT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(uT.$$.fragment,f),E(Ny.$$.fragment,f),E(ST.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(PT.$$.fragment,f),E(Gy.$$.fragment,f),E(IT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(jT.$$.fragment,f),E(Qy.$$.fragment,f),E(OT.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(XT.$$.fragment,f),E(Yy.$$.fragment,f),E(o8.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(t8.$$.fragment,f),E(r9.$$.fragment,f),E(c8.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(m8.$$.fragment,f),E(l9.$$.fragment,f),E(C8.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(A8.$$.fragment,f),E(m9.$$.fragment,f),E($8.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(S8.$$.fragment,f),E(b9.$$.fragment,f),E(j8.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(G8.$$.fragment,f),E(E9.$$.fragment,f),E(Q8.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(H8.$$.fragment,f),E(y9.$$.fragment,f),E(K8.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(eM.$$.fragment,f),E(P9.$$.fragment,f),E(tM.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(nM.$$.fragment,f),E(j9.$$.fragment,f),E(mM.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(hM.$$.fragment,f),E(X9.$$.fragment,f),E(uM.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(vM.$$.fragment,f),E(U9.$$.fragment,f),E(p4.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(u4.$$.fragment,f),E(ex.$$.fragment,f),E(G4.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(V4.$$.fragment,f),E(nx.$$.fragment,f),E(tE.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(nE.$$.fragment,f),E(cx.$$.fragment,f),E(mE.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(hE.$$.fragment,f),E(px.$$.fragment,f),E(BE.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(IE.$$.fragment,f),E(Fx.$$.fragment,f),E(HE.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(JE.$$.fragment,f),E(wx.$$.fragment,f),E(EC.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(wC.$$.fragment,f),E($x.$$.fragment,f),E(VC.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(zC.$$.fragment,f),E(Bx.$$.fragment,f),E(HC.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(JC.$$.fragment,f),E(Gx.$$.fragment,f),E(KC.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(e3.$$.fragment,f),E(Qx.$$.fragment,f),E(T3.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(E3.$$.fragment,f),E(Yx.$$.fragment,f),E(X3.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(Q3.$$.fragment,f),E(r$.$$.fragment,f),E(H3.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(J3.$$.fragment,f),E(l$.$$.fragment,f),E(K3.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(e5.$$.fragment,f),E(m$.$$.fragment,f),E(y5.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E($5.$$.fragment,f),E(u$.$$.fragment,f),E(G5.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(V5.$$.fragment,f),E(M$.$$.fragment,f),E(t0.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(n0.$$.fragment,f),E(L$.$$.fragment,f),E(_0.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(b0.$$.fragment,f),E(S$.$$.fragment,f),E(x0.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(N$.$$.fragment,f),E(k0.$$.fragment,f),E(I$.$$.fragment,f),E(O0.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(X0.$$.fragment,f),E(O$.$$.fragment,f),E(ow.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(tw.$$.fragment,f),E(W$.$$.fragment,f),E(mw.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(hw.$$.fragment,f),E(K$.$$.fragment,f),E(Ew.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(ww.$$.fragment,f),E(tk.$$.fragment,f),E(Lw.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E(xw.$$.fragment,f),E(ik.$$.fragment,f),E(Sw.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(Pw.$$.fragment,f),E(hk.$$.fragment,f),E(Nw.$$.fragment,f),lQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(Df.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(Kg.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(Ph.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(EL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(xL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(Vp.$$.fragment,f),C(BL.$$.fragment,f),C(Wu.$$.fragment,f),C(NL.$$.fragment,f),C(IL.$$.fragment,f),C(jL.$$.fragment,f),C(Uu.$$.fragment,f),C(DL.$$.fragment,f),C(O1.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(X1.$$.fragment,f),C(zL.$$.fragment,f),C(S2.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(P2.$$.fragment,f),C(JL.$$.fragment,f),C(Fb.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(Mb.$$.fragment,f),C(oy.$$.fragment,f),C(Ob.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(Xb.$$.fragment,f),C(sy.$$.fragment,f),C(Ov.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(Xv.$$.fragment,f),C(fy.$$.fragment,f),C(MF.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(CF.$$.fragment,f),C(_y.$$.fragment,f),C(SF.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(PF.$$.fragment,f),C(Ty.$$.fragment,f),C(b6.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(F6.$$.fragment,f),C(Ay.$$.fragment,f),C(cT.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(mT.$$.fragment,f),C(ky.$$.fragment,f),C(pT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(uT.$$.fragment,f),C(Ny.$$.fragment,f),C(ST.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(PT.$$.fragment,f),C(Gy.$$.fragment,f),C(IT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(jT.$$.fragment,f),C(Qy.$$.fragment,f),C(OT.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(XT.$$.fragment,f),C(Yy.$$.fragment,f),C(o8.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(t8.$$.fragment,f),C(r9.$$.fragment,f),C(c8.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(m8.$$.fragment,f),C(l9.$$.fragment,f),C(C8.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(A8.$$.fragment,f),C(m9.$$.fragment,f),C($8.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(S8.$$.fragment,f),C(b9.$$.fragment,f),C(j8.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(G8.$$.fragment,f),C(E9.$$.fragment,f),C(Q8.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(H8.$$.fragment,f),C(y9.$$.fragment,f),C(K8.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(eM.$$.fragment,f),C(P9.$$.fragment,f),C(tM.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(nM.$$.fragment,f),C(j9.$$.fragment,f),C(mM.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(hM.$$.fragment,f),C(X9.$$.fragment,f),C(uM.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(vM.$$.fragment,f),C(U9.$$.fragment,f),C(p4.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(u4.$$.fragment,f),C(ex.$$.fragment,f),C(G4.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(V4.$$.fragment,f),C(nx.$$.fragment,f),C(tE.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(nE.$$.fragment,f),C(cx.$$.fragment,f),C(mE.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(hE.$$.fragment,f),C(px.$$.fragment,f),C(BE.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(IE.$$.fragment,f),C(Fx.$$.fragment,f),C(HE.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(JE.$$.fragment,f),C(wx.$$.fragment,f),C(EC.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(wC.$$.fragment,f),C($x.$$.fragment,f),C(VC.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(zC.$$.fragment,f),C(Bx.$$.fragment,f),C(HC.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(JC.$$.fragment,f),C(Gx.$$.fragment,f),C(KC.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(e3.$$.fragment,f),C(Qx.$$.fragment,f),C(T3.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(E3.$$.fragment,f),C(Yx.$$.fragment,f),C(X3.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(Q3.$$.fragment,f),C(r$.$$.fragment,f),C(H3.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(J3.$$.fragment,f),C(l$.$$.fragment,f),C(K3.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(e5.$$.fragment,f),C(m$.$$.fragment,f),C(y5.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C($5.$$.fragment,f),C(u$.$$.fragment,f),C(G5.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(V5.$$.fragment,f),C(M$.$$.fragment,f),C(t0.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(n0.$$.fragment,f),C(L$.$$.fragment,f),C(_0.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(b0.$$.fragment,f),C(S$.$$.fragment,f),C(x0.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(N$.$$.fragment,f),C(k0.$$.fragment,f),C(I$.$$.fragment,f),C(O0.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(X0.$$.fragment,f),C(O$.$$.fragment,f),C(ow.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(tw.$$.fragment,f),C(W$.$$.fragment,f),C(mw.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(hw.$$.fragment,f),C(K$.$$.fragment,f),C(Ew.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(ww.$$.fragment,f),C(tk.$$.fragment,f),C(Lw.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C(xw.$$.fragment,f),C(ik.$$.fragment,f),C(Sw.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(Pw.$$.fragment,f),C(hk.$$.fragment,f),C(Nw.$$.fragment,f),lQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(rXe),f&&t(Bi),w(nL),f&&t(tXe),f&&t(qn),f&&t(aXe),w(sL,f),f&&t(nXe),f&&t(OS),f&&t(sXe),w(Df,f),f&&t(lXe),f&&t(Ni),w(lL),f&&t(iXe),f&&t(Ao),w(iL),w(fL),w(Kg),w(mL),f&&t(dXe),f&&t(qi),w(gL),f&&t(cXe),f&&t(Lo),w(hL),w(uL),w(Ph),w(bL),f&&t(fXe),f&&t(ji),w(vL),f&&t(mXe),f&&t(yo),w(FL),w(EL),w(up),w(bp),w(CL),f&&t(gXe),f&&t(Di),w(wL),f&&t(hXe),f&&t(xo),w(AL),w(xL),w(jp),w(Dp),w($L),f&&t(pXe),f&&t(Oi),w(kL),f&&t(_Xe),f&&t($o),w(SL),w(PL),w(Vp),w(BL),w(Wu),f&&t(uXe),f&&t(zi),w(NL),f&&t(bXe),f&&t(ko),w(IL),w(jL),w(Uu),w(DL),w(O1),f&&t(vXe),f&&t(Hi),w(GL),f&&t(FXe),f&&t(So),w(OL),w(XL),w(X1),w(zL),w(S2),f&&t(TXe),f&&t(Yi),w(QL),f&&t(MXe),f&&t(Ro),w(WL),w(UL),w(P2),w(JL),w(Fb),f&&t(EXe),f&&t(ed),w(YL),f&&t(CXe),f&&t(Po),w(KL),w(ey),w(Mb),w(oy),w(Ob),f&&t(wXe),f&&t(td),w(ry),f&&t(AXe),f&&t(Bo),w(ty),w(ny),w(Xb),w(sy),w(Ov),f&&t(LXe),f&&t(sd),w(ly),f&&t(yXe),f&&t(No),w(iy),w(cy),w(Xv),w(fy),w(MF),f&&t(xXe),f&&t(dd),w(my),f&&t($Xe),f&&t(Io),w(gy),w(py),w(CF),w(_y),w(SF),f&&t(kXe),f&&t(md),w(uy),f&&t(SXe),f&&t(jo),w(by),w(Fy),w(PF),w(Ty),w(b6),f&&t(RXe),f&&t(pd),w(My),f&&t(PXe),f&&t(Do),w(Ey),w(wy),w(F6),w(Ay),w(cT),f&&t(BXe),f&&t(bd),w(Ly),f&&t(NXe),f&&t(Go),w(yy),w($y),w(mT),w(ky),w(pT),f&&t(IXe),f&&t(Td),w(Sy),f&&t(qXe),f&&t(Oo),w(Ry),w(By),w(uT),w(Ny),w(ST),f&&t(jXe),f&&t(Cd),w(Iy),f&&t(DXe),f&&t(Vo),w(qy),w(Dy),w(PT),w(Gy),w(IT),f&&t(GXe),f&&t(Ld),w(Oy),f&&t(OXe),f&&t(Xo),w(Vy),w(zy),w(jT),w(Qy),w(OT),f&&t(VXe),f&&t($d),w(Wy),f&&t(XXe),f&&t(zo),w(Hy),w(Jy),w(XT),w(Yy),w(o8),f&&t(zXe),f&&t(Rd),w(Ky),f&&t(QXe),f&&t(Qo),w(Zy),w(o9),w(t8),w(r9),w(c8),f&&t(WXe),f&&t(Nd),w(t9),f&&t(HXe),f&&t(Wo),w(a9),w(s9),w(m8),w(l9),w(C8),f&&t(UXe),f&&t(jd),w(i9),f&&t(JXe),f&&t(Ho),w(d9),w(f9),w(A8),w(m9),w($8),f&&t(YXe),f&&t(Od),w(h9),f&&t(KXe),f&&t(Uo),w(p9),w(u9),w(S8),w(b9),w(j8),f&&t(ZXe),f&&t(zd),w(v9),f&&t(eze),f&&t(Jo),w(F9),w(M9),w(G8),w(E9),w(Q8),f&&t(oze),f&&t(Ud),w(C9),f&&t(rze),f&&t(Yo),w(w9),w(L9),w(H8),w(y9),w(K8),f&&t(tze),f&&t(Kd),w($9),f&&t(aze),f&&t(Ko),w(k9),w(R9),w(eM),w(P9),w(tM),f&&t(nze),f&&t(oc),w(B9),f&&t(sze),f&&t(Zo),w(N9),w(q9),w(nM),w(j9),w(mM),f&&t(lze),f&&t(ac),w(D9),f&&t(ize),f&&t(er),w(G9),w(V9),w(hM),w(X9),w(uM),f&&t(dze),f&&t(lc),w(z9),f&&t(cze),f&&t(or),w(Q9),w(H9),w(vM),w(U9),w(p4),f&&t(fze),f&&t(cc),w(J9),f&&t(mze),f&&t(rr),w(Y9),w(Z9),w(u4),w(ex),w(G4),f&&t(gze),f&&t(gc),w(ox),f&&t(hze),f&&t(tr),w(rx),w(ax),w(V4),w(nx),w(tE),f&&t(pze),f&&t(_c),w(sx),f&&t(_ze),f&&t(ar),w(lx),w(dx),w(nE),w(cx),w(mE),f&&t(uze),f&&t(vc),w(fx),f&&t(bze),f&&t(nr),w(mx),w(hx),w(hE),w(px),w(BE),f&&t(vze),f&&t(Mc),w(_x),f&&t(Fze),f&&t(sr),w(ux),w(vx),w(IE),w(Fx),w(HE),f&&t(Tze),f&&t(wc),w(Tx),f&&t(Mze),f&&t(lr),w(Mx),w(Cx),w(JE),w(wx),w(EC),f&&t(Eze),f&&t(yc),w(Ax),f&&t(Cze),f&&t(ir),w(Lx),w(xx),w(wC),w($x),w(VC),f&&t(wze),f&&t(kc),w(kx),f&&t(Aze),f&&t(dr),w(Sx),w(Px),w(zC),w(Bx),w(HC),f&&t(Lze),f&&t(Pc),w(Ix),f&&t(yze),f&&t(cr),w(qx),w(Dx),w(JC),w(Gx),w(KC),f&&t(xze),f&&t(Ic),w(Ox),f&&t($ze),f&&t(fr),w(Vx),w(zx),w(e3),w(Qx),w(T3),f&&t(kze),f&&t(Dc),w(Wx),f&&t(Sze),f&&t(mr),w(Hx),w(Jx),w(E3),w(Yx),w(X3),f&&t(Rze),f&&t(Vc),w(Kx),f&&t(Pze),f&&t(gr),w(Zx),w(o$),w(Q3),w(r$),w(H3),f&&t(Bze),f&&t(Qc),w(t$),f&&t(Nze),f&&t(hr),w(a$),w(s$),w(J3),w(l$),w(K3),f&&t(Ize),f&&t(Uc),w(i$),f&&t(qze),f&&t(pr),w(d$),w(f$),w(e5),w(m$),w(y5),f&&t(jze),f&&t(Kc),w(g$),f&&t(Dze),f&&t(_r),w(h$),w(_$),w($5),w(u$),w(G5),f&&t(Gze),f&&t(of),w(b$),f&&t(Oze),f&&t(ur),w(v$),w(T$),w(V5),w(M$),w(t0),f&&t(Vze),f&&t(af),w(E$),f&&t(Xze),f&&t(br),w(C$),w(A$),w(n0),w(L$),w(_0),f&&t(zze),f&&t(lf),w(y$),f&&t(Qze),f&&t(vr),w(x$),w(k$),w(b0),w(S$),w(x0),f&&t(Wze),f&&t(ff),w(R$),f&&t(Hze),f&&t(Fr),w(P$),w(N$),w(k0),w(I$),w(O0),f&&t(Uze),f&&t(hf),w(q$),f&&t(Jze),f&&t(Tr),w(j$),w(G$),w(X0),w(O$),w(ow),f&&t(Yze),f&&t(uf),w(V$),f&&t(Kze),f&&t(Mr),w(X$),w(Q$),w(tw),w(W$),w(mw),f&&t(Zze),f&&t(Ff),w(H$),f&&t(eQe),f&&t(Er),w(U$),w(Y$),w(hw),w(K$),w(Ew),f&&t(oQe),f&&t(Ef),w(Z$),f&&t(rQe),f&&t(Cr),w(ek),w(rk),w(ww),w(tk),w(Lw),f&&t(tQe),f&&t(Af),w(ak),f&&t(aQe),f&&t(wr),w(nk),w(lk),w(xw),w(ik),w(Sw),f&&t(nQe),f&&t(xf),w(ck),f&&t(sQe),f&&t(Ar),w(fk),w(gk),w(Pw),w(hk),w(Nw)}}}const JHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function YHt($){return UQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class aUt extends zQt{constructor(g){super();QQt(this,g,YHt,UHt,WQt,{})}}export{aUt as default,JHt as metadata};
