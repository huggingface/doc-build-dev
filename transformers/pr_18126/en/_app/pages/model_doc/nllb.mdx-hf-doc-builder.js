import{S as Jo,i as Xo,s as Wo,e as s,k as i,w as _,t as r,M as Ko,c as n,d as a,m as p,a as o,x as k,h as l,b as c,G as e,g as h,y as b,q as v,o as w,B as y,v as Vo,L as Ro}from"../../chunks/vendor-hf-doc-builder.js";import{D as oe}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Na}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ze}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Uo}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Yo(Oe){let g,x,$,u,q;return u=new Na({props:{code:`from transformers import NllbTokenizer

tokenizer = NllbTokenizer.from_pretrained(
    "facebook/nllb-200-distilled-600M", src_lang="eng_Latn", tgt_lang="fra_Latn"
)
example_english_phrase = " UN Chief Says There Is No Military Solution in Syria"
expected_translation_french = "Le chef de l'ONU affirme qu'il n'y a pas de solution militaire en Syrie."
inputs = tokenizer(example_english_phrase, return_tensors="pt")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(expected_translation_french, return_tensors="pt")
inputs["labels"] = labels["input_ids"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> NllbTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = NllbTokenizer.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>, src_lang=<span class="hljs-string">&quot;eng_Latn&quot;</span>, tgt_lang=<span class="hljs-string">&quot;fra_Latn&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>example_english_phrase = <span class="hljs-string">&quot; UN Chief Says There Is No Military Solution in Syria&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>expected_translation_french = <span class="hljs-string">&quot;Le chef de l&#x27;ONU affirme qu&#x27;il n&#x27;y a pas de solution militaire en Syrie.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(example_english_phrase, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(expected_translation_french, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs[<span class="hljs-string">&quot;labels&quot;</span>] = labels[<span class="hljs-string">&quot;input_ids&quot;</span>]`}}),{c(){g=s("p"),x=r("Examples:"),$=i(),_(u.$$.fragment)},l(f){g=n(f,"P",{});var L=o(g);x=l(L,"Examples:"),L.forEach(a),$=p(f),k(u.$$.fragment,f)},m(f,L){h(f,g,L),e(g,x),h(f,$,L),b(u,f,L),q=!0},p:Ro,i(f){q||(v(u.$$.fragment,f),q=!0)},o(f){w(u.$$.fragment,f),q=!1},d(f){f&&a(g),f&&a($),y(u,f)}}}function Qo(Oe){let g,x,$,u,q;return u=new Na({props:{code:`from transformers import NllbTokenizerFast

tokenizer = NllbTokenizerFast.from_pretrained(
    "facebook/nllb-200-distilled-600M", src_lang="eng_Latn", tgt_lang="fra_Latn"
)
example_english_phrase = " UN Chief Says There Is No Military Solution in Syria"
expected_translation_french = "Le chef de l'ONU affirme qu'il n'y a pas de solution militaire en Syrie."
inputs = tokenizer(example_english_phrase, return_tensors="pt")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(expected_translation_french, return_tensors="pt")
inputs["labels"] = labels["input_ids"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> NllbTokenizerFast

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = NllbTokenizerFast.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>, src_lang=<span class="hljs-string">&quot;eng_Latn&quot;</span>, tgt_lang=<span class="hljs-string">&quot;fra_Latn&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>example_english_phrase = <span class="hljs-string">&quot; UN Chief Says There Is No Military Solution in Syria&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>expected_translation_french = <span class="hljs-string">&quot;Le chef de l&#x27;ONU affirme qu&#x27;il n&#x27;y a pas de solution militaire en Syrie.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(example_english_phrase, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(expected_translation_french, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs[<span class="hljs-string">&quot;labels&quot;</span>] = labels[<span class="hljs-string">&quot;input_ids&quot;</span>]`}}),{c(){g=s("p"),x=r("Examples:"),$=i(),_(u.$$.fragment)},l(f){g=n(f,"P",{});var L=o(g);x=l(L,"Examples:"),L.forEach(a),$=p(f),k(u.$$.fragment,f)},m(f,L){h(f,g,L),e(g,x),h(f,$,L),b(u,f,L),q=!0},p:Ro,i(f){q||(v(u.$$.fragment,f),q=!0)},o(f){w(u.$$.fragment,f),q=!1},d(f){f&&a(g),f&&a($),y(u,f)}}}function Zo(Oe){let g,x,$,u,q,f,L,et,Ta,It,D,tt,xa,ja,re,Sa,Aa,Gt,F,R,at,le,Pa,st,Ma,Ht,J,Ca,ie,Ba,Da,Ut,Ie,Fa,Rt,Ge,nt,Oa,Jt,He,Ia,Xt,A,Ga,pe,Ha,Ua,ce,Ra,Ja,Wt,O,X,ot,de,Xa,rt,Wa,Kt,P,Ka,lt,Va,Ya,it,Qa,Za,Vt,M,es,pt,ts,as,he,ss,ns,Yt,fe,Qt,I,W,ct,ue,os,dt,rs,Zt,C,ls,ht,is,ps,ft,cs,ds,ea,Ue,hs,ta,ge,aa,G,K,ut,me,fs,gt,us,sa,E,_e,gs,mt,ms,_s,S,ks,Re,bs,vs,Je,ws,ys,ke,$s,Es,zs,be,Ls,_t,qs,Ns,Ts,V,xs,Y,ve,js,kt,Ss,As,j,we,Ps,ye,Ms,bt,Cs,Bs,Ds,$e,Ee,vt,Fs,Os,wt,Is,Gs,ze,yt,Hs,Us,$t,Rs,Js,Et,Xs,na,H,Q,zt,Le,Ws,Lt,Ks,oa,m,qe,Vs,U,Ys,qt,Qs,Zs,Ne,en,tn,an,Te,sn,Xe,nn,on,rn,xe,ln,Nt,pn,cn,dn,Z,hn,N,je,fn,Tt,un,gn,Se,mn,xt,_n,kn,bn,Ae,Pe,jt,vn,wn,St,yn,$n,Me,At,En,zn,Pt,Ln,qn,Mt,Nn,Tn,ee,Ce,xn,Ct,jn,Sn,te,Be,An,Bt,Pn,Mn,ae,De,Cn,Dt,Bn,ra;return f=new Ze({}),le=new Ze({}),de=new Ze({}),fe=new Na({props:{code:`from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("facebook/nllb-200-distilled-600M")
model = AutoModelForSeq2SeqLM.from_pretrained("facebook/nllb-200-distilled-600M")

article = "UN Chief says there is no military solution in Syria"
inputs = tokenizer(article, return_tensors="pt")

translated_tokens = model.generate(
    **inputs, forced_bos_token_id=tokenizer.lang_code_to_id["fra_Latn"], max_length=30
)
tokenizer.batch_decode(translated_tokens, skip_special_tokens=True)[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM, AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Chief says there is no military solution in Syria&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>translated_tokens = model.generate(
<span class="hljs-meta">... </span>    **inputs, forced_bos_token_id=tokenizer.lang_code_to_id[<span class="hljs-string">&quot;fra_Latn&quot;</span>], max_length=<span class="hljs-number">30</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(translated_tokens, skip_special_tokens=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]
Le chef de l<span class="hljs-string">&#x27;ONU dit qu&#x27;</span>il n<span class="hljs-string">&#x27;y a pas de solution militaire en Syrie</span>`}}),ue=new Ze({}),ge=new Na({props:{code:`from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(
    "facebook/nllb-200-distilled-600M", use_auth_token=True, src_lang="ron_Latn"
)
model = AutoModelForSeq2SeqLM.from_pretrained("facebook/nllb-200-distilled-600M", use_auth_token=True)

article = "\u015Eeful ONU spune c\u0103 nu exist\u0103 o solu\u0163ie militar\u0103 \xEEn Siria"
inputs = tokenizer(article, return_tensors="pt")

translated_tokens = model.generate(
    **inputs, forced_bos_token_id=tokenizer.lang_code_to_id["deu_Latn"], max_length=30
)
tokenizer.batch_decode(translated_tokens, skip_special_tokens=True)[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM, AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>, src_lang=<span class="hljs-string">&quot;ron_Latn&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;\u015Eeful ONU spune c\u0103 nu exist\u0103 o solu\u0163ie militar\u0103 \xEEn Siria&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>translated_tokens = model.generate(
<span class="hljs-meta">... </span>    **inputs, forced_bos_token_id=tokenizer.lang_code_to_id[<span class="hljs-string">&quot;deu_Latn&quot;</span>], max_length=<span class="hljs-number">30</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(translated_tokens, skip_special_tokens=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]
UN-Chef sagt, es gibt keine milit\xE4rische L\xF6sung <span class="hljs-keyword">in</span> Syrien`}}),me=new Ze({}),_e=new oe({props:{name:"class transformers.NllbTokenizer",anchor:"transformers.NllbTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"tokenizer_file",val:" = None"},{name:"src_lang",val:" = None"},{name:"tgt_lang",val:" = None"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"additional_special_tokens",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/nllb/tokenization_nllb.py#L50"}}),V=new Uo({props:{anchor:"transformers.NllbTokenizer.example",$$slots:{default:[Yo]},$$scope:{ctx:Oe}}}),ve=new oe({props:{name:"as_target_tokenizer",anchor:"transformers.NllbTokenizer.as_target_tokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/nllb/tokenization_nllb.py#L341"}}),we=new oe({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.NllbTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.NllbTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.NllbTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/nllb/tokenization_nllb.py#L220",returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Le=new Ze({}),qe=new oe({props:{name:"class transformers.NllbTokenizerFast",anchor:"transformers.NllbTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"src_lang",val:" = None"},{name:"tgt_lang",val:" = None"},{name:"additional_special_tokens",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/nllb/tokenization_nllb_fast.py#L62"}}),Z=new Uo({props:{anchor:"transformers.NllbTokenizerFast.example",$$slots:{default:[Qo]},$$scope:{ctx:Oe}}}),je=new oe({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.NllbTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.NllbTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.NllbTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/nllb/tokenization_nllb_fast.py#L163",returnDescription:`
<p>list of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ce=new oe({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.NllbTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.NllbTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.NllbTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/nllb/tokenization_nllb_fast.py#L192",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Be=new oe({props:{name:"set_src_lang_special_tokens",anchor:"transformers.NllbTokenizerFast.set_src_lang_special_tokens",parameters:[{name:"src_lang",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/nllb/tokenization_nllb_fast.py#L251"}}),De=new oe({props:{name:"set_tgt_lang_special_tokens",anchor:"transformers.NllbTokenizerFast.set_tgt_lang_special_tokens",parameters:[{name:"lang",val:": str"}],source:"https://github.com/huggingface/transformers/blob/vr_18126/src/transformers/models/nllb/tokenization_nllb_fast.py#L266"}}),{c(){g=s("meta"),x=i(),$=s("h1"),u=s("a"),q=s("span"),_(f.$$.fragment),L=i(),et=s("span"),Ta=r("NLLB"),It=i(),D=s("p"),tt=s("strong"),xa=r("DISCLAIMER:"),ja=r(" If you see something strange, file a "),re=s("a"),Sa=r("Github Issue"),Aa=r(` and assign
@LysandreJik`),Gt=i(),F=s("h2"),R=s("a"),at=s("span"),_(le.$$.fragment),Pa=i(),st=s("span"),Ma=r("Overview of NLLB"),Ht=i(),J=s("p"),Ca=r("The NLLB model was presented in "),ie=s("a"),Ba=r("No Language Left Behind: Scaling Human-Centered Machine Translation"),Da=r(` by Marta R. Costa-juss\xE0, James Cross, Onur \xC7elebi,
Maha Elbayad, Kenneth Heafield, Kevin Heffernan, Elahe Kalbassi, Janice Lam, Daniel Licht, Jean Maillard, Anna Sun, Skyler Wang, Guillaume Wenzek, Al Youngblood, Bapi Akula,
Loic Barrault, Gabriel Mejia Gonzalez, Prangthip Hansanti, John Hoffman, Semarley Jarrett, Kaushik Ram Sadagopan, Dirk Rowe, Shannon Spruit, Chau Tran, Pierre Andrews,
Necip Fazil Ayan, Shruti Bhosale, Sergey Edunov, Angela Fan, Cynthia Gao, Vedanuj Goswami, Francisco Guzm\xE1n, Philipp Koehn, Alexandre Mourachko, Christophe Ropers,
Safiyyah Saleem, Holger Schwenk, and Jeff Wang.`),Ut=i(),Ie=s("p"),Fa=r("The abstract of the paper is the following:"),Rt=i(),Ge=s("p"),nt=s("em"),Oa=r(`Driven by the goal of eradicating language barriers on a global scale, machine translation has solidified itself as a key focus of artificial intelligence research today.
However, such efforts have coalesced around a small subset of languages, leaving behind the vast majority of mostly low-resource languages. What does it take to break the
200 language barrier while ensuring safe, high quality results, all while keeping ethical considerations in mind? In No Language Left Behind, we took on this challenge by
first contextualizing the need for low-resource language translation support through exploratory interviews with native speakers. Then, we created datasets and models aimed
at narrowing the performance gap between low and high-resource languages. More specifically, we developed a conditional compute model based on Sparsely Gated Mixture of
Experts that is trained on data obtained with novel and effective data mining techniques tailored for low-resource languages. We propose multiple architectural and training
improvements to counteract overfitting while training on thousands of tasks. Critically, we evaluated the performance of over 40,000 different translation directions using
a human-translated benchmark, Flores-200, and combined human evaluation with a novel toxicity benchmark covering all languages in Flores-200 to assess translation safety.
Our model achieves an improvement of 44% BLEU relative to the previous state-of-the-art, laying important groundwork towards realizing a universal translation system.`),Jt=i(),He=s("p"),Ia=r("This implementation contains the dense models available on release. Let us know via a GitHub issue if you would like to see the MoE models as well."),Xt=i(),A=s("p"),Ga=r("This model was contributed by "),pe=s("a"),Ha=r("Lysandre"),Ua=r(". The Authors\u2019 code can be found "),ce=s("a"),Ra=r("here"),Ja=r("."),Wt=i(),O=s("h2"),X=s("a"),ot=s("span"),_(de.$$.fragment),Xa=i(),rt=s("span"),Wa=r("Generating with NLLB"),Kt=i(),P=s("p"),Ka=r("While generating the target text set the "),lt=s("code"),Va=r("forced_bos_token_id"),Ya=r(` to the target language id. The following
example shows how to translate English to French using the `),it=s("em"),Qa=r("facebook/nllb-200-distilled-600M"),Za=r(" model."),Vt=i(),M=s("p"),es=r("Note that we\u2019re using the BCP-47 code for French "),pt=s("code"),ts=r("fra_Latn"),as=r(". See "),he=s("a"),ss=r("here"),ns=r(`
for the list of all BCP-47 in the Flores 200 dataset.`),Yt=i(),_(fe.$$.fragment),Qt=i(),I=s("h3"),W=s("a"),ct=s("span"),_(ue.$$.fragment),os=i(),dt=s("span"),rs=r("Generating from any other language than English"),Zt=i(),C=s("p"),ls=r("English ("),ht=s("code"),is=r("eng_Latn"),ps=r(`) is set as the default language from which to translate. In order to specify that you\u2019d like to translate from a different language,
you should specify the BCP-47 code in the `),ft=s("code"),cs=r("src_lang"),ds=r(" keyword argument of the tokenizer initialization."),ea=i(),Ue=s("p"),hs=r("See example below for a translation from romanian to german:"),ta=i(),_(ge.$$.fragment),aa=i(),G=s("h2"),K=s("a"),ut=s("span"),_(me.$$.fragment),fs=i(),gt=s("span"),us=r("NllbTokenizer"),sa=i(),E=s("div"),_(_e.$$.fragment),gs=i(),mt=s("p"),ms=r("Construct an NLLB tokenizer."),_s=i(),S=s("p"),ks=r("Adapted from "),Re=s("a"),bs=r("RobertaTokenizer"),vs=r(" and "),Je=s("a"),ws=r("XLNetTokenizer"),ys=r(`. Based on
`),ke=s("a"),$s=r("SentencePiece"),Es=r("."),zs=i(),be=s("p"),Ls=r("The tokenization method is "),_t=s("code"),qs=r("<tokens> <eos> <language code>"),Ns=r(" for source language documents, and \u201C<language code>\n<tokens> <eos>``` for target language documents."),Ts=i(),_(V.$$.fragment),xs=i(),Y=s("div"),_(ve.$$.fragment),js=i(),kt=s("p"),Ss=r(`Temporarily sets the tokenizer for encoding the targets. Useful for tokenizer associated to
sequence-to-sequence models that need a slightly different processing for the labels.`),As=i(),j=s("div"),_(we.$$.fragment),Ps=i(),ye=s("p"),Ms=r(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An NLLB sequence has the following format, where `),bt=s("code"),Cs=r("X"),Bs=r(" represents the sequence:"),Ds=i(),$e=s("ul"),Ee=s("li"),vt=s("code"),Fs=r("input_ids"),Os=r(" (for encoder) "),wt=s("code"),Is=r("X [eos, src_lang_code]"),Gs=i(),ze=s("li"),yt=s("code"),Hs=r("decoder_input_ids"),Us=r(": (for decoder) "),$t=s("code"),Rs=r("X [eos, tgt_lang_code]"),Js=i(),Et=s("p"),Xs=r(`BOS is never used. Pairs of sequences are not the expected use case, but they will be handled without a
separator.`),na=i(),H=s("h2"),Q=s("a"),zt=s("span"),_(Le.$$.fragment),Ws=i(),Lt=s("span"),Ks=r("NllbTokenizerFast"),oa=i(),m=s("div"),_(qe.$$.fragment),Vs=i(),U=s("p"),Ys=r("Construct a \u201Cfast\u201D NLLB tokenizer (backed by HuggingFace\u2019s "),qt=s("em"),Qs=r("tokenizers"),Zs=r(` library). Based on
`),Ne=s("a"),en=r("BPE"),tn=r("."),an=i(),Te=s("p"),sn=r("This tokenizer inherits from "),Xe=s("a"),nn=r("PreTrainedTokenizerFast"),on=r(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),rn=i(),xe=s("p"),ln=r("The tokenization method is "),Nt=s("code"),pn=r("<tokens> <eos> <language code>"),cn=r(" for source language documents, and \u201C<language code>\n<tokens> <eos>``` for target language documents."),dn=i(),_(Z.$$.fragment),hn=i(),N=s("div"),_(je.$$.fragment),fn=i(),Tt=s("p"),un=r(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. The special tokens depend on calling set_lang.`),gn=i(),Se=s("p"),mn=r("An NLLB sequence has the following format, where "),xt=s("code"),_n=r("X"),kn=r(" represents the sequence:"),bn=i(),Ae=s("ul"),Pe=s("li"),jt=s("code"),vn=r("input_ids"),wn=r(" (for encoder) "),St=s("code"),yn=r("X [eos, src_lang_code]"),$n=i(),Me=s("li"),At=s("code"),En=r("decoder_input_ids"),zn=r(": (for decoder) "),Pt=s("code"),Ln=r("X [eos, tgt_lang_code]"),qn=i(),Mt=s("p"),Nn=r(`BOS is never used. Pairs of sequences are not the expected use case, but they will be handled without a
separator.`),Tn=i(),ee=s("div"),_(Ce.$$.fragment),xn=i(),Ct=s("p"),jn=r(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. nllb does not
make use of token type ids, therefore a list of zeros is returned.`),Sn=i(),te=s("div"),_(Be.$$.fragment),An=i(),Bt=s("p"),Pn=r("Reset the special tokens to the source lang setting. No prefix and suffix=[eos, src_lang_code]."),Mn=i(),ae=s("div"),_(De.$$.fragment),Cn=i(),Dt=s("p"),Bn=r("Reset the special tokens to the target language setting. No prefix and suffix=[eos, tgt_lang_code]."),this.h()},l(t){const d=Ko('[data-svelte="svelte-1phssyn"]',document.head);g=n(d,"META",{name:!0,content:!0}),d.forEach(a),x=p(t),$=n(t,"H1",{class:!0});var Fe=o($);u=n(Fe,"A",{id:!0,class:!0,href:!0});var Ft=o(u);q=n(Ft,"SPAN",{});var Dn=o(q);k(f.$$.fragment,Dn),Dn.forEach(a),Ft.forEach(a),L=p(Fe),et=n(Fe,"SPAN",{});var Fn=o(et);Ta=l(Fn,"NLLB"),Fn.forEach(a),Fe.forEach(a),It=p(t),D=n(t,"P",{});var Ot=o(D);tt=n(Ot,"STRONG",{});var On=o(tt);xa=l(On,"DISCLAIMER:"),On.forEach(a),ja=l(Ot," If you see something strange, file a "),re=n(Ot,"A",{href:!0,rel:!0});var In=o(re);Sa=l(In,"Github Issue"),In.forEach(a),Aa=l(Ot,` and assign
@LysandreJik`),Ot.forEach(a),Gt=p(t),F=n(t,"H2",{class:!0});var la=o(F);R=n(la,"A",{id:!0,class:!0,href:!0});var Gn=o(R);at=n(Gn,"SPAN",{});var Hn=o(at);k(le.$$.fragment,Hn),Hn.forEach(a),Gn.forEach(a),Pa=p(la),st=n(la,"SPAN",{});var Un=o(st);Ma=l(Un,"Overview of NLLB"),Un.forEach(a),la.forEach(a),Ht=p(t),J=n(t,"P",{});var ia=o(J);Ca=l(ia,"The NLLB model was presented in "),ie=n(ia,"A",{href:!0,rel:!0});var Rn=o(ie);Ba=l(Rn,"No Language Left Behind: Scaling Human-Centered Machine Translation"),Rn.forEach(a),Da=l(ia,` by Marta R. Costa-juss\xE0, James Cross, Onur \xC7elebi,
Maha Elbayad, Kenneth Heafield, Kevin Heffernan, Elahe Kalbassi, Janice Lam, Daniel Licht, Jean Maillard, Anna Sun, Skyler Wang, Guillaume Wenzek, Al Youngblood, Bapi Akula,
Loic Barrault, Gabriel Mejia Gonzalez, Prangthip Hansanti, John Hoffman, Semarley Jarrett, Kaushik Ram Sadagopan, Dirk Rowe, Shannon Spruit, Chau Tran, Pierre Andrews,
Necip Fazil Ayan, Shruti Bhosale, Sergey Edunov, Angela Fan, Cynthia Gao, Vedanuj Goswami, Francisco Guzm\xE1n, Philipp Koehn, Alexandre Mourachko, Christophe Ropers,
Safiyyah Saleem, Holger Schwenk, and Jeff Wang.`),ia.forEach(a),Ut=p(t),Ie=n(t,"P",{});var Jn=o(Ie);Fa=l(Jn,"The abstract of the paper is the following:"),Jn.forEach(a),Rt=p(t),Ge=n(t,"P",{});var Xn=o(Ge);nt=n(Xn,"EM",{});var Wn=o(nt);Oa=l(Wn,`Driven by the goal of eradicating language barriers on a global scale, machine translation has solidified itself as a key focus of artificial intelligence research today.
However, such efforts have coalesced around a small subset of languages, leaving behind the vast majority of mostly low-resource languages. What does it take to break the
200 language barrier while ensuring safe, high quality results, all while keeping ethical considerations in mind? In No Language Left Behind, we took on this challenge by
first contextualizing the need for low-resource language translation support through exploratory interviews with native speakers. Then, we created datasets and models aimed
at narrowing the performance gap between low and high-resource languages. More specifically, we developed a conditional compute model based on Sparsely Gated Mixture of
Experts that is trained on data obtained with novel and effective data mining techniques tailored for low-resource languages. We propose multiple architectural and training
improvements to counteract overfitting while training on thousands of tasks. Critically, we evaluated the performance of over 40,000 different translation directions using
a human-translated benchmark, Flores-200, and combined human evaluation with a novel toxicity benchmark covering all languages in Flores-200 to assess translation safety.
Our model achieves an improvement of 44% BLEU relative to the previous state-of-the-art, laying important groundwork towards realizing a universal translation system.`),Wn.forEach(a),Xn.forEach(a),Jt=p(t),He=n(t,"P",{});var Kn=o(He);Ia=l(Kn,"This implementation contains the dense models available on release. Let us know via a GitHub issue if you would like to see the MoE models as well."),Kn.forEach(a),Xt=p(t),A=n(t,"P",{});var We=o(A);Ga=l(We,"This model was contributed by "),pe=n(We,"A",{href:!0,rel:!0});var Vn=o(pe);Ha=l(Vn,"Lysandre"),Vn.forEach(a),Ua=l(We,". The Authors\u2019 code can be found "),ce=n(We,"A",{href:!0,rel:!0});var Yn=o(ce);Ra=l(Yn,"here"),Yn.forEach(a),Ja=l(We,"."),We.forEach(a),Wt=p(t),O=n(t,"H2",{class:!0});var pa=o(O);X=n(pa,"A",{id:!0,class:!0,href:!0});var Qn=o(X);ot=n(Qn,"SPAN",{});var Zn=o(ot);k(de.$$.fragment,Zn),Zn.forEach(a),Qn.forEach(a),Xa=p(pa),rt=n(pa,"SPAN",{});var eo=o(rt);Wa=l(eo,"Generating with NLLB"),eo.forEach(a),pa.forEach(a),Kt=p(t),P=n(t,"P",{});var Ke=o(P);Ka=l(Ke,"While generating the target text set the "),lt=n(Ke,"CODE",{});var to=o(lt);Va=l(to,"forced_bos_token_id"),to.forEach(a),Ya=l(Ke,` to the target language id. The following
example shows how to translate English to French using the `),it=n(Ke,"EM",{});var ao=o(it);Qa=l(ao,"facebook/nllb-200-distilled-600M"),ao.forEach(a),Za=l(Ke," model."),Ke.forEach(a),Vt=p(t),M=n(t,"P",{});var Ve=o(M);es=l(Ve,"Note that we\u2019re using the BCP-47 code for French "),pt=n(Ve,"CODE",{});var so=o(pt);ts=l(so,"fra_Latn"),so.forEach(a),as=l(Ve,". See "),he=n(Ve,"A",{href:!0,rel:!0});var no=o(he);ss=l(no,"here"),no.forEach(a),ns=l(Ve,`
for the list of all BCP-47 in the Flores 200 dataset.`),Ve.forEach(a),Yt=p(t),k(fe.$$.fragment,t),Qt=p(t),I=n(t,"H3",{class:!0});var ca=o(I);W=n(ca,"A",{id:!0,class:!0,href:!0});var oo=o(W);ct=n(oo,"SPAN",{});var ro=o(ct);k(ue.$$.fragment,ro),ro.forEach(a),oo.forEach(a),os=p(ca),dt=n(ca,"SPAN",{});var lo=o(dt);rs=l(lo,"Generating from any other language than English"),lo.forEach(a),ca.forEach(a),Zt=p(t),C=n(t,"P",{});var Ye=o(C);ls=l(Ye,"English ("),ht=n(Ye,"CODE",{});var io=o(ht);is=l(io,"eng_Latn"),io.forEach(a),ps=l(Ye,`) is set as the default language from which to translate. In order to specify that you\u2019d like to translate from a different language,
you should specify the BCP-47 code in the `),ft=n(Ye,"CODE",{});var po=o(ft);cs=l(po,"src_lang"),po.forEach(a),ds=l(Ye," keyword argument of the tokenizer initialization."),Ye.forEach(a),ea=p(t),Ue=n(t,"P",{});var co=o(Ue);hs=l(co,"See example below for a translation from romanian to german:"),co.forEach(a),ta=p(t),k(ge.$$.fragment,t),aa=p(t),G=n(t,"H2",{class:!0});var da=o(G);K=n(da,"A",{id:!0,class:!0,href:!0});var ho=o(K);ut=n(ho,"SPAN",{});var fo=o(ut);k(me.$$.fragment,fo),fo.forEach(a),ho.forEach(a),fs=p(da),gt=n(da,"SPAN",{});var uo=o(gt);us=l(uo,"NllbTokenizer"),uo.forEach(a),da.forEach(a),sa=p(t),E=n(t,"DIV",{class:!0});var T=o(E);k(_e.$$.fragment,T),gs=p(T),mt=n(T,"P",{});var go=o(mt);ms=l(go,"Construct an NLLB tokenizer."),go.forEach(a),_s=p(T),S=n(T,"P",{});var se=o(S);ks=l(se,"Adapted from "),Re=n(se,"A",{href:!0});var mo=o(Re);bs=l(mo,"RobertaTokenizer"),mo.forEach(a),vs=l(se," and "),Je=n(se,"A",{href:!0});var _o=o(Je);ws=l(_o,"XLNetTokenizer"),_o.forEach(a),ys=l(se,`. Based on
`),ke=n(se,"A",{href:!0,rel:!0});var ko=o(ke);$s=l(ko,"SentencePiece"),ko.forEach(a),Es=l(se,"."),se.forEach(a),zs=p(T),be=n(T,"P",{});var ha=o(be);Ls=l(ha,"The tokenization method is "),_t=n(ha,"CODE",{});var bo=o(_t);qs=l(bo,"<tokens> <eos> <language code>"),bo.forEach(a),Ns=l(ha," for source language documents, and \u201C<language code>\n<tokens> <eos>``` for target language documents."),ha.forEach(a),Ts=p(T),k(V.$$.fragment,T),xs=p(T),Y=n(T,"DIV",{class:!0});var fa=o(Y);k(ve.$$.fragment,fa),js=p(fa),kt=n(fa,"P",{});var vo=o(kt);Ss=l(vo,`Temporarily sets the tokenizer for encoding the targets. Useful for tokenizer associated to
sequence-to-sequence models that need a slightly different processing for the labels.`),vo.forEach(a),fa.forEach(a),As=p(T),j=n(T,"DIV",{class:!0});var ne=o(j);k(we.$$.fragment,ne),Ps=p(ne),ye=n(ne,"P",{});var ua=o(ye);Ms=l(ua,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An NLLB sequence has the following format, where `),bt=n(ua,"CODE",{});var wo=o(bt);Cs=l(wo,"X"),wo.forEach(a),Bs=l(ua," represents the sequence:"),ua.forEach(a),Ds=p(ne),$e=n(ne,"UL",{});var ga=o($e);Ee=n(ga,"LI",{});var ma=o(Ee);vt=n(ma,"CODE",{});var yo=o(vt);Fs=l(yo,"input_ids"),yo.forEach(a),Os=l(ma," (for encoder) "),wt=n(ma,"CODE",{});var $o=o(wt);Is=l($o,"X [eos, src_lang_code]"),$o.forEach(a),ma.forEach(a),Gs=p(ga),ze=n(ga,"LI",{});var _a=o(ze);yt=n(_a,"CODE",{});var Eo=o(yt);Hs=l(Eo,"decoder_input_ids"),Eo.forEach(a),Us=l(_a,": (for decoder) "),$t=n(_a,"CODE",{});var zo=o($t);Rs=l(zo,"X [eos, tgt_lang_code]"),zo.forEach(a),_a.forEach(a),ga.forEach(a),Js=p(ne),Et=n(ne,"P",{});var Lo=o(Et);Xs=l(Lo,`BOS is never used. Pairs of sequences are not the expected use case, but they will be handled without a
separator.`),Lo.forEach(a),ne.forEach(a),T.forEach(a),na=p(t),H=n(t,"H2",{class:!0});var ka=o(H);Q=n(ka,"A",{id:!0,class:!0,href:!0});var qo=o(Q);zt=n(qo,"SPAN",{});var No=o(zt);k(Le.$$.fragment,No),No.forEach(a),qo.forEach(a),Ws=p(ka),Lt=n(ka,"SPAN",{});var To=o(Lt);Ks=l(To,"NllbTokenizerFast"),To.forEach(a),ka.forEach(a),oa=p(t),m=n(t,"DIV",{class:!0});var z=o(m);k(qe.$$.fragment,z),Vs=p(z),U=n(z,"P",{});var Qe=o(U);Ys=l(Qe,"Construct a \u201Cfast\u201D NLLB tokenizer (backed by HuggingFace\u2019s "),qt=n(Qe,"EM",{});var xo=o(qt);Qs=l(xo,"tokenizers"),xo.forEach(a),Zs=l(Qe,` library). Based on
`),Ne=n(Qe,"A",{href:!0,rel:!0});var jo=o(Ne);en=l(jo,"BPE"),jo.forEach(a),tn=l(Qe,"."),Qe.forEach(a),an=p(z),Te=n(z,"P",{});var ba=o(Te);sn=l(ba,"This tokenizer inherits from "),Xe=n(ba,"A",{href:!0});var So=o(Xe);nn=l(So,"PreTrainedTokenizerFast"),So.forEach(a),on=l(ba,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),ba.forEach(a),rn=p(z),xe=n(z,"P",{});var va=o(xe);ln=l(va,"The tokenization method is "),Nt=n(va,"CODE",{});var Ao=o(Nt);pn=l(Ao,"<tokens> <eos> <language code>"),Ao.forEach(a),cn=l(va," for source language documents, and \u201C<language code>\n<tokens> <eos>``` for target language documents."),va.forEach(a),dn=p(z),k(Z.$$.fragment,z),hn=p(z),N=n(z,"DIV",{class:!0});var B=o(N);k(je.$$.fragment,B),fn=p(B),Tt=n(B,"P",{});var Po=o(Tt);un=l(Po,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. The special tokens depend on calling set_lang.`),Po.forEach(a),gn=p(B),Se=n(B,"P",{});var wa=o(Se);mn=l(wa,"An NLLB sequence has the following format, where "),xt=n(wa,"CODE",{});var Mo=o(xt);_n=l(Mo,"X"),Mo.forEach(a),kn=l(wa," represents the sequence:"),wa.forEach(a),bn=p(B),Ae=n(B,"UL",{});var ya=o(Ae);Pe=n(ya,"LI",{});var $a=o(Pe);jt=n($a,"CODE",{});var Co=o(jt);vn=l(Co,"input_ids"),Co.forEach(a),wn=l($a," (for encoder) "),St=n($a,"CODE",{});var Bo=o(St);yn=l(Bo,"X [eos, src_lang_code]"),Bo.forEach(a),$a.forEach(a),$n=p(ya),Me=n(ya,"LI",{});var Ea=o(Me);At=n(Ea,"CODE",{});var Do=o(At);En=l(Do,"decoder_input_ids"),Do.forEach(a),zn=l(Ea,": (for decoder) "),Pt=n(Ea,"CODE",{});var Fo=o(Pt);Ln=l(Fo,"X [eos, tgt_lang_code]"),Fo.forEach(a),Ea.forEach(a),ya.forEach(a),qn=p(B),Mt=n(B,"P",{});var Oo=o(Mt);Nn=l(Oo,`BOS is never used. Pairs of sequences are not the expected use case, but they will be handled without a
separator.`),Oo.forEach(a),B.forEach(a),Tn=p(z),ee=n(z,"DIV",{class:!0});var za=o(ee);k(Ce.$$.fragment,za),xn=p(za),Ct=n(za,"P",{});var Io=o(Ct);jn=l(Io,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. nllb does not
make use of token type ids, therefore a list of zeros is returned.`),Io.forEach(a),za.forEach(a),Sn=p(z),te=n(z,"DIV",{class:!0});var La=o(te);k(Be.$$.fragment,La),An=p(La),Bt=n(La,"P",{});var Go=o(Bt);Pn=l(Go,"Reset the special tokens to the source lang setting. No prefix and suffix=[eos, src_lang_code]."),Go.forEach(a),La.forEach(a),Mn=p(z),ae=n(z,"DIV",{class:!0});var qa=o(ae);k(De.$$.fragment,qa),Cn=p(qa),Dt=n(qa,"P",{});var Ho=o(Dt);Bn=l(Ho,"Reset the special tokens to the target language setting. No prefix and suffix=[eos, tgt_lang_code]."),Ho.forEach(a),qa.forEach(a),z.forEach(a),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(er)),c(u,"id","nllb"),c(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u,"href","#nllb"),c($,"class","relative group"),c(re,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),c(re,"rel","nofollow"),c(R,"id","overview-of-nllb"),c(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R,"href","#overview-of-nllb"),c(F,"class","relative group"),c(ie,"href","https://arxiv.org/abs/2207.04672"),c(ie,"rel","nofollow"),c(pe,"href","https://huggingface.co/lysandre"),c(pe,"rel","nofollow"),c(ce,"href","https://github.com/facebookresearch/fairseq/tree/nllb"),c(ce,"rel","nofollow"),c(X,"id","generating-with-nllb"),c(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X,"href","#generating-with-nllb"),c(O,"class","relative group"),c(he,"href","https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200"),c(he,"rel","nofollow"),c(W,"id","generating-from-any-other-language-than-english"),c(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W,"href","#generating-from-any-other-language-than-english"),c(I,"class","relative group"),c(K,"id","transformers.NllbTokenizer"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#transformers.NllbTokenizer"),c(G,"class","relative group"),c(Re,"href","/docs/transformers/pr_18126/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Je,"href","/docs/transformers/pr_18126/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ke,"href","https://github.com/google/sentencepiece"),c(ke,"rel","nofollow"),c(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q,"id","transformers.NllbTokenizerFast"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#transformers.NllbTokenizerFast"),c(H,"class","relative group"),c(Ne,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=BPE#models"),c(Ne,"rel","nofollow"),c(Xe,"href","/docs/transformers/pr_18126/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),c(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,d){e(document.head,g),h(t,x,d),h(t,$,d),e($,u),e(u,q),b(f,q,null),e($,L),e($,et),e(et,Ta),h(t,It,d),h(t,D,d),e(D,tt),e(tt,xa),e(D,ja),e(D,re),e(re,Sa),e(D,Aa),h(t,Gt,d),h(t,F,d),e(F,R),e(R,at),b(le,at,null),e(F,Pa),e(F,st),e(st,Ma),h(t,Ht,d),h(t,J,d),e(J,Ca),e(J,ie),e(ie,Ba),e(J,Da),h(t,Ut,d),h(t,Ie,d),e(Ie,Fa),h(t,Rt,d),h(t,Ge,d),e(Ge,nt),e(nt,Oa),h(t,Jt,d),h(t,He,d),e(He,Ia),h(t,Xt,d),h(t,A,d),e(A,Ga),e(A,pe),e(pe,Ha),e(A,Ua),e(A,ce),e(ce,Ra),e(A,Ja),h(t,Wt,d),h(t,O,d),e(O,X),e(X,ot),b(de,ot,null),e(O,Xa),e(O,rt),e(rt,Wa),h(t,Kt,d),h(t,P,d),e(P,Ka),e(P,lt),e(lt,Va),e(P,Ya),e(P,it),e(it,Qa),e(P,Za),h(t,Vt,d),h(t,M,d),e(M,es),e(M,pt),e(pt,ts),e(M,as),e(M,he),e(he,ss),e(M,ns),h(t,Yt,d),b(fe,t,d),h(t,Qt,d),h(t,I,d),e(I,W),e(W,ct),b(ue,ct,null),e(I,os),e(I,dt),e(dt,rs),h(t,Zt,d),h(t,C,d),e(C,ls),e(C,ht),e(ht,is),e(C,ps),e(C,ft),e(ft,cs),e(C,ds),h(t,ea,d),h(t,Ue,d),e(Ue,hs),h(t,ta,d),b(ge,t,d),h(t,aa,d),h(t,G,d),e(G,K),e(K,ut),b(me,ut,null),e(G,fs),e(G,gt),e(gt,us),h(t,sa,d),h(t,E,d),b(_e,E,null),e(E,gs),e(E,mt),e(mt,ms),e(E,_s),e(E,S),e(S,ks),e(S,Re),e(Re,bs),e(S,vs),e(S,Je),e(Je,ws),e(S,ys),e(S,ke),e(ke,$s),e(S,Es),e(E,zs),e(E,be),e(be,Ls),e(be,_t),e(_t,qs),e(be,Ns),e(E,Ts),b(V,E,null),e(E,xs),e(E,Y),b(ve,Y,null),e(Y,js),e(Y,kt),e(kt,Ss),e(E,As),e(E,j),b(we,j,null),e(j,Ps),e(j,ye),e(ye,Ms),e(ye,bt),e(bt,Cs),e(ye,Bs),e(j,Ds),e(j,$e),e($e,Ee),e(Ee,vt),e(vt,Fs),e(Ee,Os),e(Ee,wt),e(wt,Is),e($e,Gs),e($e,ze),e(ze,yt),e(yt,Hs),e(ze,Us),e(ze,$t),e($t,Rs),e(j,Js),e(j,Et),e(Et,Xs),h(t,na,d),h(t,H,d),e(H,Q),e(Q,zt),b(Le,zt,null),e(H,Ws),e(H,Lt),e(Lt,Ks),h(t,oa,d),h(t,m,d),b(qe,m,null),e(m,Vs),e(m,U),e(U,Ys),e(U,qt),e(qt,Qs),e(U,Zs),e(U,Ne),e(Ne,en),e(U,tn),e(m,an),e(m,Te),e(Te,sn),e(Te,Xe),e(Xe,nn),e(Te,on),e(m,rn),e(m,xe),e(xe,ln),e(xe,Nt),e(Nt,pn),e(xe,cn),e(m,dn),b(Z,m,null),e(m,hn),e(m,N),b(je,N,null),e(N,fn),e(N,Tt),e(Tt,un),e(N,gn),e(N,Se),e(Se,mn),e(Se,xt),e(xt,_n),e(Se,kn),e(N,bn),e(N,Ae),e(Ae,Pe),e(Pe,jt),e(jt,vn),e(Pe,wn),e(Pe,St),e(St,yn),e(Ae,$n),e(Ae,Me),e(Me,At),e(At,En),e(Me,zn),e(Me,Pt),e(Pt,Ln),e(N,qn),e(N,Mt),e(Mt,Nn),e(m,Tn),e(m,ee),b(Ce,ee,null),e(ee,xn),e(ee,Ct),e(Ct,jn),e(m,Sn),e(m,te),b(Be,te,null),e(te,An),e(te,Bt),e(Bt,Pn),e(m,Mn),e(m,ae),b(De,ae,null),e(ae,Cn),e(ae,Dt),e(Dt,Bn),ra=!0},p(t,[d]){const Fe={};d&2&&(Fe.$$scope={dirty:d,ctx:t}),V.$set(Fe);const Ft={};d&2&&(Ft.$$scope={dirty:d,ctx:t}),Z.$set(Ft)},i(t){ra||(v(f.$$.fragment,t),v(le.$$.fragment,t),v(de.$$.fragment,t),v(fe.$$.fragment,t),v(ue.$$.fragment,t),v(ge.$$.fragment,t),v(me.$$.fragment,t),v(_e.$$.fragment,t),v(V.$$.fragment,t),v(ve.$$.fragment,t),v(we.$$.fragment,t),v(Le.$$.fragment,t),v(qe.$$.fragment,t),v(Z.$$.fragment,t),v(je.$$.fragment,t),v(Ce.$$.fragment,t),v(Be.$$.fragment,t),v(De.$$.fragment,t),ra=!0)},o(t){w(f.$$.fragment,t),w(le.$$.fragment,t),w(de.$$.fragment,t),w(fe.$$.fragment,t),w(ue.$$.fragment,t),w(ge.$$.fragment,t),w(me.$$.fragment,t),w(_e.$$.fragment,t),w(V.$$.fragment,t),w(ve.$$.fragment,t),w(we.$$.fragment,t),w(Le.$$.fragment,t),w(qe.$$.fragment,t),w(Z.$$.fragment,t),w(je.$$.fragment,t),w(Ce.$$.fragment,t),w(Be.$$.fragment,t),w(De.$$.fragment,t),ra=!1},d(t){a(g),t&&a(x),t&&a($),y(f),t&&a(It),t&&a(D),t&&a(Gt),t&&a(F),y(le),t&&a(Ht),t&&a(J),t&&a(Ut),t&&a(Ie),t&&a(Rt),t&&a(Ge),t&&a(Jt),t&&a(He),t&&a(Xt),t&&a(A),t&&a(Wt),t&&a(O),y(de),t&&a(Kt),t&&a(P),t&&a(Vt),t&&a(M),t&&a(Yt),y(fe,t),t&&a(Qt),t&&a(I),y(ue),t&&a(Zt),t&&a(C),t&&a(ea),t&&a(Ue),t&&a(ta),y(ge,t),t&&a(aa),t&&a(G),y(me),t&&a(sa),t&&a(E),y(_e),y(V),y(ve),y(we),t&&a(na),t&&a(H),y(Le),t&&a(oa),t&&a(m),y(qe),y(Z),y(je),y(Ce),y(Be),y(De)}}}const er={local:"nllb",sections:[{local:"overview-of-nllb",title:"Overview of NLLB"},{local:"generating-with-nllb",sections:[{local:"generating-from-any-other-language-than-english",title:"Generating from any other language than English"}],title:"Generating with NLLB"},{local:"transformers.NllbTokenizer",title:"NllbTokenizer"},{local:"transformers.NllbTokenizerFast",title:"NllbTokenizerFast"}],title:"NLLB"};function tr(Oe){return Vo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lr extends Jo{constructor(g){super();Xo(this,g,tr,Zo,Wo,{})}}export{lr as default,er as metadata};
